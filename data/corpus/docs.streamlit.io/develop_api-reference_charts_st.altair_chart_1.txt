Title: API Reference: st.altair_chart
URL: https://docs.streamlit.io/develop/api-reference/charts/st.altair_chart
Summary: This section covers the 'st.altair_chart' function in Streamlit, detailing its usage for rendering Altair charts. It includes links to related topics such as chart selections, VegaLite state management, the addition of rows to chart elements, and theming options.
---

* [Home](https://docs.streamlit.io/)/
  * [Develop](https://docs.streamlit.io/develop)/
  * [API reference](https://docs.streamlit.io/develop/api-reference)/
  * [Chart elements](https://docs.streamlit.io/develop/api-reference/charts)/
  * [st.altair_chart](https://docs.streamlit.io/develop/api-reference/charts/st.altair_chart)


  1. Contents
  2. [st.altair_chart](https://docs.streamlit.io/develop/api-reference/charts/st.altair_chart#staltair_chart)
  3. [Chart selections](https://docs.streamlit.io/develop/api-reference/charts/st.altair_chart#chart-selections)
  4. [VegaLiteState](https://docs.streamlit.io/develop/api-reference/charts/st.altair_chart#vegalitestate)
  5. [element.add_rows](https://docs.streamlit.io/develop/api-reference/charts/st.altair_chart#elementadd_rows)
  6. [Theming](https://docs.streamlit.io/develop/api-reference/charts/st.altair_chart#theming)


## [](https://docs.streamlit.io/develop/api-reference/charts/st.altair_chart#staltair_chart)st.altair_chart
Streamlit VersionVersion 1.44.0Version 1.43.0Version 1.42.0Version 1.41.0Version 1.40.0Version 1.39.0Version 1.38.0Version 1.37.0Version 1.36.0Version 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0
Display a chart using the Vega-Altair library.
[Vega-Altair](https://altair-viz.github.io/) is a declarative statistical visualization library for Python, based on Vega and Vega-Lite.
Function signature[[source]](https://github.com/streamlit/streamlit/blob/1.44.0/lib/streamlit/elements/vega_charts.py#L1499 "View st.altair_chart source code on GitHub")  
---  
st.altair_chart(altair_chart, *, use_container_width=None, theme="streamlit", key=None, on_select="ignore", selection_mode=None)  
Parameters  
altair_chart (altair.Chart) |  The Altair chart object to display. See <https://altair-viz.github.io/gallery/> for examples of graph descriptions.  
use_container_width (bool or None) |  Whether to override the chart's native width with the width of the parent container. This can be one of the following:
  * `None` (default): Streamlit will use the parent container's width for all charts except those with known incompatibility (`altair.Facet`, `altair.HConcatChart`, and `altair.RepeatChart`).
  * `True`: Streamlit sets the width of the chart to match the width of the parent container.
  * `False`: Streamlit sets the width of the chart to fit its contents according to the plotting library, up to the width of the parent container.

  
theme ("streamlit" or None) |  The theme of the chart. If `theme` is `"streamlit"` (default), Streamlit uses its own design default. If `theme` is `None`, Streamlit falls back to the default behavior of the library.  
key (str) |  An optional string to use for giving this element a stable identity. If `key` is `None` (default), this element's identity will be determined based on the values of the other parameters. Additionally, if selections are activated and `key` is provided, Streamlit will register the key in Session State to store the selection state. The selection state is read-only.  
on_select ("ignore", "rerun", or callable) |  How the figure should respond to user selection events. This controls whether or not the figure behaves like an input widget. `on_select` can be one of the following:
  * `"ignore"` (default): Streamlit will not react to any selection events in the chart. The figure will not behave like an input widget.
  * `"rerun"`: Streamlit will rerun the app when the user selects data in the chart. In this case, `st.altair_chart` will return the selection data as a dictionary.
  * A `callable`: Streamlit will rerun the app and execute the `callable` as a callback function before the rest of the app. In this case, `st.altair_chart` will return the selection data as a dictionary.