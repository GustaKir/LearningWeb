Title: Streamlit App Testing Framework
URL: https://docs.streamlit.io/develop/api-reference/app-testing
Summary: The Streamlit app testing framework allows developers to create and run headless tests on their applications. Using the AppTest class, developers can simulate app execution, manipulate it, and inspect outputs programmatically, facilitating automated testing with tools like pytest. This process helps maintain consistent app functionality over time and can be integrated into CI environments.
---

# [](https://docs.streamlit.io/develop/api-reference/app-testing#app-testing)App testing
Streamlit app testing framework enables developers to build and run headless tests that execute their app code directly, simulate user input, and inspect rendered outputs for correctness.
The provided class, AppTest, simulates a running app and provides methods to set up, manipulate, and inspect the app contents via API instead of a browser UI. It can be used to write automated tests of an app in various scenarios. These can then be run using a tool like pytest. A typical pattern is to build a suite of tests for an app that ensure consistent functionality as the app evolves, and run the tests locally and/or in a CI environment like Github Actions.
## [](https://docs.streamlit.io/develop/api-reference/app-testing#the-apptest-class)The AppTest class
### [st.testing.v1.AppTest`st.testing.v1.AppTest` simulates a running Streamlit app for testing.`from streamlit.testing.v1 import AppTest at = AppTest.from_file("streamlit_app.py") at.secrets["WORD"] = "Foobar" at.run() assert not at.exception at.text_input("word").input("Bazbat").run() assert at.warning[0].value == "Try again." `](https://docs.streamlit.io/develop/api-reference/app-testing/st.testing.v1.apptest)[](https://docs.streamlit.io/\[...slug\])### [AppTest.from_file`st.testing.v1.AppTest.from_file` initializes a simulated app from a file.`from streamlit.testing.v1 import AppTest at = AppTest.from_file("streamlit_app.py") at.secrets["WORD"] = "Foobar" at.run() assert not at.exception `](https://docs.streamlit.io/develop/api-reference/app-testing/st.testing.v1.apptest#apptestfrom_file)### [AppTest.from_string`st.testing.v1.AppTest.from_string` initializes a simulated app from a string.`from streamlit.testing.v1 import AppTest app_script = """ import streamlit as st word_of_the_day = st.text_input("What's the word of the day?", key="word") if word_of_the_day == st.secrets["WORD"]:   st.success("That's right!") elif word_of_the_day and word_of_the_day != st.secrets["WORD"]:   st.warn("Try again.") """ at = AppTest.from_string(app_script) at.secrets["WORD"] = "Foobar" at.run() assert not at.exception `](https://docs.streamlit.io/develop/api-reference/app-testing/st.testing.v1.apptest#apptestfrom_string)### [AppTest.from_function`st.testing.v1.AppTest.from_function` initializes a simulated app from a function.`from streamlit.testing.v1 import AppTest def app_script (): import streamlit as st   word_of_the_day = st.text_input("What's the word of the day?", key="word") if word_of_the_day == st.secrets["WORD"]:     st.success("That's right!") elif word_of_the_day and word_of_the_day != st.secrets["WORD"]:     st.warn("Try again.") at = AppTest.from_function(app_script) at.secrets["WORD"] = "Foobar" at.run() assert not at.exception `](https://docs.streamlit.io/develop/api-reference/app-testing/st.testing.v1.apptest#apptestfrom_function)
## [](https://docs.streamlit.io/develop/api-reference/app-testing#testing-element-classes)Testing-element classes
#### [BlockA representation of container elements, including:
  * `st.chat_message`
  * `st.columns`
  * `st.sidebar`
  * `st.tabs`
  * The main body of the app.

`# at.sidebar returns a Block at.sidebar.button[0].click().run() assert not at.exception `](https://docs.streamlit.io/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treeblock)#### [ElementThe base class for representation of all elements, including:
  * `st.title`
  * `st.header`
  * `st.markdown`
  * `st.dataframe`