Title: Using Forms in Streamlit
URL: https://docs.streamlit.io/develop/concepts/architecture/forms
Summary: This section explains how to use `st.form` in Streamlit to batch user input and avoid unnecessary script reruns with every input. It includes an example where users can adjust map parameters without immediate updates, requiring a form submission to trigger a rerun.
---

# [](https://docs.streamlit.io/develop/concepts/architecture/forms#using-forms)Using forms
When you don't want to rerun your script with each input made by a user, [`st.form`](https://docs.streamlit.io/develop/api-reference/execution-flow/st.form) is here to help! Forms make it easy to batch user input into a single rerun. This guide to using forms provides examples and explains how users interact with forms.
## [](https://docs.streamlit.io/develop/concepts/architecture/forms#example)Example
In the following example, a user can set multiple parameters to update the map. As the user changes the parameters, the script will not rerun and the map will not update. When the user submits the form with the button labeled "**Update map** ", the script reruns and the map updates.
If at any time the user clicks "**Generate new points** " which is outside of the form, the script will rerun. If the user has any unsubmitted changes within the form, these will _not_ be sent with the rerun. All changes made to a form will only be sent to the Python backend when the form itself is submitted.
View source code _expand_more_
`import streamlit as st import pandas as pd import numpy as np def get_data():   df = pd.DataFrame({ "lat": np.random.randn(200) / 50 + 37.76, "lon": np.random.randn(200) / 50 + -122.4, "team": ['A','B']*100 }) return df if st.button('Generate new points'):   st.session_state.df = get_data() if 'df' not in st.session_state:   st.session_state.df = get_data() df = st.session_state.df with st.form("my_form"):   header = st.columns([1,2,2])   header[0].subheader('Color')   header[1].subheader('Opacity')   header[2].subheader('Size')   row1 = st.columns([1,2,2])   colorA = row1[0].color_picker('Team A', '#0000FF')   opacityA = row1[1].slider('A opacity', 20, 100, 50, label_visibility='hidden')   sizeA = row1[2].slider('A size', 50, 200, 100, step=10, label_visibility='hidden')   row2 = st.columns([1,2,2])   colorB = row2[0].color_picker('Team B', '#FF0000')   opacityB = row2[1].slider('B opacity', 20, 100, 50, label_visibility='hidden')   sizeB = row2[2].slider('B size', 50, 200, 100, step=10, label_visibility='hidden')   st.form_submit_button('Update map') alphaA = int(opacityA*255/100) alphaB = int(opacityB*255/100) df['color'] = np.where(df.team=='A',colorA+f'{alphaA:02x}',colorB+f'{alphaB:02x}') df['size'] = np.where(df.team=='A',sizeA, sizeB) st.map(df, size='size', color='color') `
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-forms-overview.streamlit.app/?utm_medium=oembed)
## [](https://docs.streamlit.io/develop/concepts/architecture/forms#user-interaction)User interaction
If a widget is not in a form, that widget will trigger a script rerun whenever a user changes its value. For widgets with keyed input (`st.number_input`, `st.text_input`, `st.text_area`), a new value triggers a rerun when the user clicks or tabs out of the widget. A user can also submit a change by pressing `Enter` while their cursor is active in the widget.
On the other hand if a widget is inside of a form, the script will not rerun when a user clicks or tabs out of that widget. For widgets inside a form, the script will rerun when the form is submitted and all widgets within the form will send their updated values to the Python backend.
![Forms](https://docs.streamlit.io/images/forms.gif)
A user can submit a form using **Enter** on their keyboard if their cursor active in a widget that accepts keyed input. Within `st.number_input` and `st.text_input` a user presses **Enter** to submit the form. Within `st.text_area` a user presses **Ctrl+Enter** /**âŒ˜+Enter** to submit the form.
![Keyboard-submit forms](https://docs.streamlit.io/images/form-submit-keyboard.png)
## [](https://docs.streamlit.io/develop/concepts/architecture/forms#widget-values)Widget values
Before a form is submitted, all widgets within that form will have default values, just like widgets outside of a form have default values.
`import streamlit as st with st.form("my_form"):   st.write("Inside the form")   my_number = st.slider('Pick a number', 1, 10)   my_color = st.selectbox('Pick a color', ['red','orange','green','blue','violet'])   st.form_submit_button('Submit my picks') # This is outside the form st.write(my_number) st.write(my_color) `
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-forms-default.streamlit.app/?utm_medium=oembed)
## [](https://docs.streamlit.io/develop/concepts/architecture/forms#forms-are-containers)Forms are containers
When `st.form` is called, a container is created on the frontend. You can write to that container like you do with other [container elements](https://docs.streamlit.io/develop/api-reference/layout). That is, you can use Python's `with` statement as shown in the example above, or you can assign the form container to a variable and call methods on it directly. Additionally, you can place `st.form_submit_button` anywhere in the form container.
`import