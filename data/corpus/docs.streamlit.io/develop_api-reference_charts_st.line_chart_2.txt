Title: st.line_chart Function Parameters
URL: https://docs.streamlit.io/develop/api-reference/charts/st.line_chart
Summary: This section describes the parameters for the 'st.line_chart' function in Streamlit, including 'width', 'height', and 'use_container_width'. It explains how these parameters affect the chart's dimensions and layout within the parent container.
---

width (int or None) |  Desired width of the chart expressed in pixels. If `width` is `None` (default), Streamlit sets the width of the chart to fit its contents according to the plotting library, up to the width of the parent container. If `width` is greater than the width of the parent container, Streamlit sets the chart width to match the width of the parent container. To use `width`, you must set `use_container_width=False`.  
height (int or None) |  Desired height of the chart expressed in pixels. If `height` is `None` (default), Streamlit sets the height of the chart to fit its contents according to the plotting library.  
use_container_width (bool) |  Whether to override `width` with the width of the parent container. If `use_container_width` is `True` (default), Streamlit sets the width of the chart to match the width of the parent container. If `use_container_width` is `False`, Streamlit sets the chart's width according to `width`.  
#### Examples
```
import streamlit as st
import pandas as pd
import numpy as np
chart_data = pd.DataFrame(np.random.randn(20, 3), columns=["a", "b", "c"])
st.line_chart(chart_data)
```

Copy
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-line-chart.streamlit.app//?utm_medium=oembed&)
You can also choose different columns to use for x and y, as well as set the color dynamically based on a 3rd column (assuming your dataframe is in long format):
```
import streamlit as st
import pandas as pd
import numpy as np
chart_data = pd.DataFrame(
  {
    "col1": np.random.randn(20),
    "col2": np.random.randn(20),
    "col3": np.random.choice(["A", "B", "C"], 20),
  }
)
st.line_chart(chart_data, x="col1", y="col2", color="col3")
```

Copy
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-line-chart1.streamlit.app//?utm_medium=oembed&)
Finally, if your dataframe is in wide format, you can group multiple columns under the y argument to show multiple lines with different colors:
```
import streamlit as st
import pandas as pd
import numpy as np
chart_data = pd.DataFrame(
  np.random.randn(20, 3), columns=["col1", "col2", "col3"]
)
st.line_chart(
  chart_data,
  x="col1",
  y=["col2", "col3"],
  color=["#FF0000", "#0000FF"], # Optional
)
```

Copy
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-line-chart2.streamlit.app//?utm_medium=oembed&)
## [](https://docs.streamlit.io/develop/api-reference/charts/st.line_chart#elementadd_rows)element.add_rows
Streamlit VersionVersion 1.44.0Version 1.43.0Version 1.42.0Version 1.41.0Version 1.40.0Version 1.39.0Version 1.38.0Version 1.37.0Version 1.36.0Version 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0
Concatenate a dataframe to the bottom of the current one.
Function signature[[source]](https://github.com/streamlit/streamlit/blob/1.44.0/lib/streamlit/elements/arrow.py#L735 "View st.add_rows source code on GitHub")  
---  
element.add_rows(data=None, **kwargs)  
Parameters  
data (pandas.DataFrame, pandas.Styler, pyarrow.Table, numpy.ndarray, pyspark.sql.DataFrame, snowflake.snowpark.dataframe.DataFrame, Iterable, dict, or None) |  Table to concat. Optional.  
**kwargs (pandas.DataFrame, numpy.ndarray, Iterable, dict, or None) |  The named dataset to concat. Optional. You can only pass in 1 dataset (including the one in the data parameter).  
#### Example
```
import streamlit as st
import pandas as pd
import numpy as np
df1 = pd.DataFrame(
  np.random.randn(50, 20), columns=("col %d" % i for i in range(20))
)
my_table = st.table(df1)
df2 = pd.DataFrame(
  np.random.randn(50, 20), columns=("col %d" % i for i in range(20))
)
my_table.add_rows(df2)
# Now the table shown in the Streamlit app contains the data for
# df1 followed by the data for df2.
```

Copy
You can do the same thing with plots. For example, if you want to add more data to a line chart:
```
# Assuming df1 and df2 from the example above still exist...
my_chart = st.line_chart(df1)
my_chart.add_rows(df2)
# Now the chart shown in the Streamlit app contains the data for
# df1 followed by the data for df2.
```

Copy
And for plots whose datasets are named, you can pass the data with a keyword argument where the key is the name:
```
my_chart = st.vega_lite_chart(
  {
    "mark": "line",
    "encoding": {"x": "a", "y": "b"},
    "datasets": {
      "some_fancy_name": df1, # <-- named dataset
    },
    "data": {"name": "some_fancy_name"},
  }
)
my_chart.add_rows(some_fancy_name=df2) # <-- name used as keyword