Title: Creating a Multipage App in Streamlit
URL: https://docs.streamlit.io/get-started/tutorials/create-a-multipage-app
Summary: This document discusses the implementation of a multipage app in Streamlit, highlighting functionality such as progress bars and using `st.write` for visualizing Pandas DataFrames. It includes examples of data retrieval and user interaction through multiselect widgets, with data sourced from the UN Data Explorer.
---

s)     progress_bar.progress(i)     last_rows = new_rows     time.sleep(0.05)   progress_bar.empty() # Streamlit widgets automatically run the script from top to bottom. Since # this button is not connected to any other logic, it just causes a plain # rerun.   st.button("Re-run") def data_frame_demo(): import streamlit as st   import pandas as pd   import altair as alt   from urllib.error import URLError   st.markdown(f"# {list(page_names_to_funcs.keys())[3]}")   st.write( """     This demo shows how to use `st.write` to visualize Pandas DataFrames. (Data courtesy of the [UN Data Explorer](http://data.un.org/Explorer.aspx).) """ ) @st.cache_data def get_UN_data():     AWS_BUCKET_URL = "http://streamlit-demo-data.s3-us-west-2.amazonaws.com"     df = pd.read_csv(AWS_BUCKET_URL + "/agri.csv.gz") return df.set_index("Region") try:     df = get_UN_data()     countries = st.multiselect( "Choose countries", list(df.index), ["China", "United States of America"] ) if not countries:       st.error("Please select at least one country.") else:       data = df.loc[countries]       data /= 1000000.0       st.write("### Gross Agricultural Production ($B)", data.sort_index())       data = data.T.reset_index()       data = pd.melt(data, id_vars=["index"]).rename(         columns={"index": "year", "value": "Gross Agricultural Product ($B)"} )       chart = (         alt.Chart(data) .mark_area(opacity=0.3) .encode(           x="year:T",           y=alt.Y("Gross Agricultural Product ($B):Q", stack=None),           color="Region:N", ) )       st.altair_chart(chart, use_container_width=True) except URLError as e:     st.error( """       **This demo requires internet access.**       Connection error: %s     """ % e.reason     ) page_names_to_funcs = { "‚Äî": intro, "Plotting Demo": plotting_demo, "Mapping Demo": mapping_demo, "DataFrame Demo": data_frame_demo } demo_name = st.sidebar.selectbox("Choose a demo", page_names_to_funcs.keys()) page_names_to_funcs[demo_name]() `
[Built with Streamlit üéà](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-hello.streamlit.app/?utm_medium=oembed)
Notice how large the file is! Each app ‚Äúpage" is written as a function, and the selectbox is used to pick which page to display. As our app grows, maintaining the code requires a lot of additional overhead. Moreover, we‚Äôre limited by the `st.selectbox` UI to choose which ‚Äúpage" to run, we cannot customize individual page titles with `st.set_page_config`, and we‚Äôre unable to navigate between pages using URLs.
## [](https://docs.streamlit.io/get-started/tutorials/create-a-multipage-app#convert-an-existing-app-into-a-multipage-app)Convert an existing app into a multipage app
Now that we've identified the limitations of a single-page app, what can we do about it? Armed with our knowledge from the previous section, we can convert the existing app to be a multipage app, of course! At a high level, we need to perform the following steps:
  1. Create a new `pages` folder in the same folder where the ‚Äúentrypoint file" (`hello.py`) lives
  2. Rename our entrypoint file to `Hello.py` , so that the title in the sidebar is capitalized
  3. Create three new files inside of `pages`: 
     * `pages/1_üìà_Plotting_Demo.py`
     * `pages/2_üåç_Mapping_Demo.py`
     * `pages/3_üìä_DataFrame_Demo.py`
  4. Move the contents of the `plotting_demo`, `mapping_demo`, and `data_frame_demo` functions into their corresponding new files from Step 3
  5. Run `streamlit run Hello.py` to view your newly converted multipage app!