Title: Publishing a Streamlit Component to PyPI
URL: https://docs.streamlit.io/develop/concepts/custom-components/publish
Summary: This section explains how to publish a Streamlit Component to PyPI, making it accessible to Python users. It notes that publishing is optional and references the steps for static Streamlit Components, which align with core PyPI packaging instructions.
---

# [](https://docs.streamlit.io/develop/concepts/custom-components/publish#publish-a-component)Publish a Component
## [](https://docs.streamlit.io/develop/concepts/custom-components/publish#publish-to-pypi)Publish to PyPI
Publishing your Streamlit Component to [PyPI](https://pypi.org/) makes it easily accessible to Python users around the world. This step is completely optional, so if you wonâ€™t be releasing your component publicly, you can skip this section!
_push_pin_
#### Note
For [static Streamlit Components](https://docs.streamlit.io/develop/concepts/custom-components/intro#create-a-static-component), publishing a Python package to PyPI follows the same steps as the [core PyPI packaging instructions](https://packaging.python.org/tutorials/packaging-projects/). A static Component likely contains only Python code, so once you have your [setup.py](https://packaging.python.org/tutorials/packaging-projects/#creating-setup-py) file correct and [generate your distribution files](https://packaging.python.org/tutorials/packaging-projects/#generating-distribution-archives), you're ready to [upload to PyPI](https://packaging.python.org/tutorials/packaging-projects/#uploading-the-distribution-archives).
[Bi-directional Streamlit Components](https://docs.streamlit.io/develop/concepts/custom-components/intro#create-a-bi-directional-component) at minimum include both Python and JavaScript code, and as such, need a bit more preparation before they can be published on PyPI. The remainder of this page focuses on the bi-directional Component preparation process.
### [](https://docs.streamlit.io/develop/concepts/custom-components/publish#prepare-your-component)Prepare your Component
A bi-directional Streamlit Component varies slightly from a pure Python library in that it must contain pre-compiled frontend code. This is how base Streamlit works as well; when you `pip install streamlit`, you are getting a Python library where the HTML and frontend code contained within it have been compiled into static assets.
The [component-template](https://github.com/streamlit/component-template) GitHub repo provides the folder structure necessary for PyPI publishing. But before you can publish, you'll need to do a bit of housekeeping:
  1. Give your Component a name, if you haven't already
     * Rename the `template/my_component/` folder to `template/<component name>/`
     * Pass your component's name as the the first argument to `declare_component()`
  2. Edit `MANIFEST.in`, change the path for recursive-include from `package/frontend/build *` to `<component name>/frontend/build *`
  3. Edit `setup.py`, adding your component's name and other relevant info
  4. Create a release build of your frontend code. This will add a new directory, `frontend/build/`, with your compiled frontend in it:
`cd frontend npm run build `
  5. Pass the build folder's path as the `path` parameter to `declare_component`. (If you're using the template Python file, you can set `_RELEASE = True` at the top of the file):
` import streamlit.components.v1 as components   # Change this: # component = components.declare_component("my_component", url="http://localhost:3001") # To this:   parent_dir = os.path.dirname(os.path.abspath(__file__))   build_dir = os.path.join(parent_dir, "frontend/build")   component = components.declare_component("new_component_name", path=build_dir) `


### [](https://docs.streamlit.io/develop/concepts/custom-components/publish#build-a-python-wheel)Build a Python wheel
Once you've changed the default `my_component` references, compiled the HTML and JavaScript code and set your new component name in `components.declare_component()`, you're ready to build a Python wheel:
  1. Make sure you have the latest versions of setuptools, wheel, and twine
  2. Create a wheel from the source code:
` # Run this from your component's top-level directory; that is, # the directory that contains `setup.py`  python setup.py sdist bdist_wheel `