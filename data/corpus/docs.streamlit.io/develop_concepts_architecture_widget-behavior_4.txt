Title: Streamlit Widget Behavior and State Management
URL: https://docs.streamlit.io/develop/concepts/architecture/widget-behavior
Summary: This section discusses how Streamlit widgets behave during app reruns, specifically how widgets reset to their minimum values when parameters change. It highlights the importance of default values and keys in maintaining widget states, emphasizing that changes to min or max values recreate the widgets. Further details on widget life cycles and statefulness solutions are referenced.
---

rom Streamlit's perspective and so they are recreated from scratch when the app reruns with the changed parameters. Since no default value is defined, each widget will reset to its min value. This is the same with or without a key since it's seen as a new widget either way. There is a subtle point to understand about pre-existing keys connecting to widgets. This will be explained further down in [Widget life cycle](https://docs.streamlit.io/develop/concepts/architecture/widget-behavior#widget-life-cycle).
#### [](https://docs.streamlit.io/develop/concepts/architecture/widget-behavior#updating-a-slider-with-a-default-value)Updating a slider with a default value
For the last two sliders above, a change to the min or max value will result in the widgets being seen as "new" and thus recreated like before. Since a default value of 5 is defined, each widget will reset to 5 whenever the min or max is changed. This is again the same (with or without a key).
A solution to [Retain statefulness when changing a widget's parameters](https://docs.streamlit.io/develop/concepts/architecture/widget-behavior#retain-statefulness-when-changing-a-widgets-parameters) is provided further on.
### [](https://docs.streamlit.io/develop/concepts/architecture/widget-behavior#widgets-do-not-persist-when-not-continually-rendered)Widgets do not persist when not continually rendered
If a widget's function is not called during a script run, then none of its parts will be retained, including its value in `st.session_state`. If a widget has a key and you navigate away from that widget, its key and associated value in `st.session_state` will be deleted. Even temporarily hiding a widget will cause it to reset when it reappears; Streamlit will treat it like a new widget. You can either interrupt the [Widget clean-up process](https://docs.streamlit.io/develop/concepts/architecture/widget-behavior#widget-clean-up-process) (described at the end of this page) or save the value to another key.
#### [](https://docs.streamlit.io/develop/concepts/architecture/widget-behavior#save-widget-values-in-session-state-to-preserve-them-between-pages)Save widget values in Session State to preserve them between pages
If you want to navigate away from a widget and return to it while keeping its value, use a separate key in `st.session_state` to save the information independently from the widget. In this example, a temporary key is used with a widget. The temporary key uses an underscore prefix. Hence, `"_my_key"` is used as the widget key, but the data is copied to `"my_key"` to preserve it between pages.
`import streamlit as st def store_value(): # Copy the value to the permanent key   st.session_state["my_key"] = st.session_state["_my_key"] # Copy the saved value to the temporary key st.session_state["_my_key"] = st.session_state["my_key"] st.number_input("Number of filters", key="_my_key", on_change=store_value) `
If this is functionalized to work with multiple widgets, it could look something like this:
`import streamlit as st def store_value(key):   st.session_state[key] = st.session_state["_"+key] def load_value(key):   st.session_state["_"+key] = st.session_state[key] load_value("my_key") st.number_input("Number of filters", key="_my_key", on_change=store_value, args=["my_key"]) `
## [](https://docs.streamlit.io/develop/concepts/architecture/widget-behavior#widget-life-cycle)Widget life cycle
When a widget function is called, Streamlit will check if it already has a widget with the same parameters. Streamlit will reconnect if it thinks the widget already exists. Otherwise, it will make a new one.
As mentioned earlier, Streamlit determines a widget's ID based on parameters such as label, min or max value, default value, placeholder text, help text, and key. The page name also factors into a widget's ID. On the other hand, callback functions, callback args and kwargs, label visibility, and disabling a widget do not affect a widget's identity.
### [](https://docs.streamlit.io/develop/concepts/architecture/widget-behavior#calling-a-widget-function-when-the-widget-doesnt-already-exist)Calling a widget function when the widget doesn't already exist
If your script rerun calls a widget function with changed parameters or calls a widget function that wasn't used on the last script run:
  1. Streamlit will build the frontend and backend parts of the widget, using its default value.
  2. If the widget has been assigned a key, Streamlit will check if that key already exists in Session State. a. If it exists and is not currently associated with another widget, Streamlit will assign that key's value to the widget. b. Otherwise, it will assign the default value to the key in `st.session_state` (creating a new key-value pair or overwriting an existing one).
  3. If there are args or kwargs for a callback function, they are computed and saved at this point in time.
  4. The widget value is then returned by the function.