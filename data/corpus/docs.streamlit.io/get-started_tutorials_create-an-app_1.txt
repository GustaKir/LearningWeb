Title: Creating an Interactive Streamlit App
URL: https://docs.streamlit.io/get-started/tutorials/create-an-app
Summary: This section introduces the process of creating an app using Streamlit. It encourages users to experiment and implement features hands-on, highlighting the interactive loop where code changes can be immediately tested and viewed in the Streamlit UI.
---

# [](https://docs.streamlit.io/get-started/tutorials/create-an-app#create-an-app)Create an app
If you've made it this far, chances are you've [installed Streamlit](https://docs.streamlit.io/get-started/installation) and run through the basics in [Basic concepts](https://docs.streamlit.io/get-started/fundamentals/main-concepts) and [Advanced concepts](https://docs.streamlit.io/get-started/fundamentals/advanced-concepts). If not, now is a good time to take a look.
The easiest way to learn how to use Streamlit is to try things out yourself. As you read through this guide, test each method. As long as your app is running, every time you add a new element to your script and save, Streamlit's UI will ask if you'd like to rerun the app and view the changes. This allows you to work in a fast interactive loop: you write some code, save it, review the output, write some more, and so on, until you're happy with the results. The goal is to use Streamlit to create an interactive app for your data or model and along the way to use Streamlit to review, debug, perfect, and share your code.
In this guide, you're going to use Streamlit's core features to create an interactive app; exploring a public Uber dataset for pickups and drop-offs in New York City. When you're finished, you'll know how to fetch and cache data, draw charts, plot information on a map, and use interactive widgets, like a slider, to filter results.
_star_
#### Tip
If you'd like to skip ahead and see everything at once, the [complete script is available below](https://docs.streamlit.io/get-started/tutorials/create-an-app#lets-put-it-all-together).
## [](https://docs.streamlit.io/get-started/tutorials/create-an-app#create-your-first-app)Create your first app
Streamlit is more than just a way to make data apps, it’s also a community of creators that share their apps and ideas and help each other make their work better. Please come join us on the community forum. We love to hear your questions, ideas, and help you work through your bugs — stop by today!
  1. The first step is to create a new Python script. Let's call it `uber_pickups.py`.
  2. Open `uber_pickups.py` in your favorite IDE or text editor, then add these lines:
`import streamlit as st import pandas as pd import numpy as np `
  3. Every good app has a title, so let's add one:
`st.title('Uber pickups in NYC') `
  4. Now it's time to run Streamlit from the command line:
`streamlit run uber_pickups.py `
Running a Streamlit app is no different than any other Python script. Whenever you need to view the app, you can use this command.
_star_
#### Tip
Did you know you can also pass a URL to `streamlit run`? This is great when combined with GitHub Gists. For example:
`streamlit run https://raw.githubusercontent.com/streamlit/demo-uber-nyc-pickups/master/streamlit_app.py `
  5. As usual, the app should automatically open in a new tab in your browser.


## [](https://docs.streamlit.io/get-started/tutorials/create-an-app#fetch-some-data)Fetch some data
Now that you have an app, the next thing you'll need to do is fetch the Uber dataset for pickups and drop-offs in New York City.
  1. Let's start by writing a function to load the data. Add this code to your script:
`DATE_COLUMN = 'date/time' DATA_URL = ('https://s3-us-west-2.amazonaws.com/' 'streamlit-demo-data/uber-raw-data-sep14.csv.gz') def load_data(nrows):   data = pd.read_csv(DATA_URL, nrows=nrows)   lowercase = lambda x: str(x).lower()   data.rename(lowercase, axis='columns', inplace=True)   data[DATE_COLUMN] = pd.to_datetime(data[DATE_COLUMN]) return data `
You'll notice that `load_data` is a plain old function that downloads some data, puts it in a Pandas dataframe, and converts the date column from text to datetime. The function accepts a single parameter (`nrows`), which specifies the number of rows that you want to load into the dataframe.
  2. Now let's test the function and review the output. Below your function, add these lines:
`# Create a text element and let the reader know the data is loading. data_load_state = st.text('Loading data...') # Load 10,000 rows of data into the dataframe. data = load_data(10000) # Notify the reader that the data was successfully loaded. data_load_state.text('Loading data...done!') `
You'll see a few buttons in the upper-right corner of your app asking if you'd like to rerun the app. Choose **Always rerun** , and you'll see your changes automatically each time you save.