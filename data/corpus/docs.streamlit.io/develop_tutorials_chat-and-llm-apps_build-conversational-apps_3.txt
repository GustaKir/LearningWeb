Title: Building a Chat App with Streamlit
URL: https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps
Summary: This section details how to create a conversational app using Streamlit, specifically focusing on displaying chat history. It includes sample code to set up an Echo Bot, initializing a chat message list in session state, and iterating through existing messages to display them in the chat interface.
---

ery time the user or bot sends a message. Each entry in the list will be a dictionary with the following keys: `role` (the author of the message), and `content` (the message content).


`import streamlit as st st.title("Echo Bot") # Initialize chat history if "messages" not in st.session_state:   st.session_state.messages = [] # Display chat messages from history on app rerun for message in st.session_state.messages: with st.chat_message(message["role"]):     st.markdown(message["content"]) `
In the above snippet, we've added a title to our app and a for loop to iterate through the chat history and display each message in the chat message container (with the author role and message content). We've also added a check to see if the `messages` key is in `st.session_state`. If it's not, we initialize it to an empty list. This is because we'll be adding messages to the list later on, and we don't want to overwrite the list every time the app reruns.
Now let's accept user input with `st.chat_input`, display the user's message in the chat message container, and add it to the chat history.
`# React to user input if prompt := st.chat_input("What is up?"): # Display user message in chat message container with st.chat_message("user"):     st.markdown(prompt) # Add user message to chat history   st.session_state.messages.append({"role": "user", "content": prompt}) `
We used the `:=` operator to assign the user's input to the `prompt` variable and checked if it's not `None` in the same line. If the user has sent a message, we display the message in the chat message container and append it to the chat history.
All that's left to do is add the chatbot's responses within the `if` block. We'll use the same logic as before to display the bot's response (which is just the user's prompt) in the chat message container and add it to the history.
`response = f"Echo: {prompt}" # Display assistant response in chat message container with st.chat_message("assistant"):   st.markdown(response) # Add assistant response to chat history st.session_state.messages.append({"role": "assistant", "content": response}) `
Putting it all together, here's the full code for our simple chatbot GUI and the result:
View full code _expand_more_
`import streamlit as st st.title("Echo Bot") # Initialize chat history if "messages" not in st.session_state:   st.session_state.messages = [] # Display chat messages from history on app rerun for message in st.session_state.messages: with st.chat_message(message["role"]):     st.markdown(message["content"]) # React to user input if prompt := st.chat_input("What is up?"): # Display user message in chat message container   st.chat_message("user").markdown(prompt) # Add user message to chat history   st.session_state.messages.append({"role": "user", "content": prompt})   response = f"Echo: {prompt}" # Display assistant response in chat message container with st.chat_message("assistant"):     st.markdown(response) # Add assistant response to chat history   st.session_state.messages.append({"role": "assistant", "content": response}) `
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-chat-echo.streamlit.app/?utm_medium=oembed)
While the above example is very simple, it's a good starting point for building more complex conversational apps. Notice how the bot responds instantly to your input. In the next section, we'll add a delay to simulate the bot "thinking" before responding.
## [](https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps#build-a-simple-chatbot-gui-with-streaming)Build a simple chatbot GUI with streaming
In this section, we'll build a simple chatbot GUI that responds to user input with a random message from a list of pre-determind responses. In the [next section](https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps#build-a-chatgpt-like-app), we'll convert this simple toy example into a ChatGPT-like experience using OpenAI.
Just like previously, we still require the same components to build our chatbot. Two chat message containers to display messages from the user and the bot, respectively. A chat input widget so the user can type in a message. And a way to store the chat history so we can display it in the chat message containers.
Let's just copy the code from the previous section and add a few tweaks to it.
`import streamlit as st import random import time st.title("Simple chat") # Initialize chat history if "messages" not in st.session_state:   st.session_state.messages = [] # Display chat messages from history on app rerun for message in st.session_state.messages: with st.chat_message(message["role"]):     st.markdown(message["content"]) # Accept user input if prompt := st.chat_input("What is up?"): # Display user message in chat message container with st.chat_message("user"):     st.markdown(prompt) # Add user message to chat history   st.session_state.messages.append({"role": "user", "content":