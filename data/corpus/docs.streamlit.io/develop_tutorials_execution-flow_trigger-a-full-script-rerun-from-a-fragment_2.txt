Title: Triggering Full Script Rerun in Streamlit
URL: https://docs.streamlit.io/develop/tutorials/execution-flow/trigger-a-full-script-rerun-from-a-fragment
Summary: This tutorial demonstrates how to build a Streamlit app that displays sales data based on date selection. It shows how to manage updates efficiently so that only the relevant elements refresh when users change dates, particularly when switching between days in the same month versus different months.
---

## [](https://docs.streamlit.io/develop/tutorials/execution-flow/trigger-a-full-script-rerun-from-a-fragment#summary)Summary
In this example, you'll build an app to display sales data. The app has two sets of elements that depend on a date selection. One set of elements displays information for the selected day. The other set of elements displays information for the associated month. If the user changes days within a month, Streamlit only needs to update the first set of elements. If the user selects a day in a different month, Streamlit needs to update all the elements.
You'll collect the day-specific elements into a fragment to avoid rerunning the full app when a user changes days within the same month. If you want to jump ahead to the fragment function definition, see [Build a function to show daily sales data](https://docs.streamlit.io/develop/tutorials/execution-flow/trigger-a-full-script-rerun-from-a-fragment#build-a-function-to-show-daily-sales-data).
![Execution flow of example Streamlit app showing daily sales on the left and monthly sales on the right](https://docs.streamlit.io/images/tutorials/fragment-rerun-tutorial-execution-flow.png)
Here's a look at what you'll build:
Complete code _expand_more_
`import streamlit as st import pandas as pd import numpy as np from datetime import date, timedelta import string import time  @st.cache_data def get_data(): """Generate random sales data for Widget A through Widget Z"""   product_names = ["Widget " + letter for letter in string.ascii_uppercase]   average_daily_sales = np.random.normal(1_000, 300, len(product_names))   products = dict(zip(product_names, average_daily_sales))   data = pd.DataFrame({})   sales_dates = np.arange(date(2023, 1, 1), date(2024, 1, 1), timedelta(days=1)) for product, sales in products.items():     data[product] = np.random.normal(sales, 300, len(sales_dates)).round(2)   data.index = sales_dates   data.index = data.index.date   return data  @st.fragment def show_daily_sales(data):   time.sleep(1) with st.container(height=100):     selected_date = st.date_input( "Pick a day ",       value=date(2023, 1, 1),       min_value=date(2023, 1, 1),       max_value=date(2023, 12, 31),       key="selected_date", ) if "previous_date" not in st.session_state:     st.session_state.previous_date = selected_date   previous_date = st.session_state.previous_date   st.session_state.previous_date = selected_date   is_new_month = selected_date.replace(day=1) != previous_date.replace(day=1) if is_new_month:     st.rerun() with st.container(height=510):     st.header(f"Best sellers, {selected_date:%m/%d/%y}")     top_ten = data.loc[selected_date].sort_values(ascending=False)[0:10]     cols = st.columns([1, 4])     cols[0].dataframe(top_ten)     cols[1].bar_chart(top_ten) with st.container(height=510):     st.header(f"Worst sellers, {selected_date:%m/%d/%y}")     bottom_ten = data.loc[selected_date].sort_values()[0:10]     cols = st.columns([1, 4])     cols[0].dataframe(bottom_ten)     cols[1].bar_chart(bottom_ten) def show_monthly_sales(data):   time.sleep(1)   selected_date = st.session_state.selected_date   this_month = selected_date.replace(day=1)   next_month = (selected_date.replace(day=28) + timedelta(days=4)).replace(day=1)   st.container(height=100, border=False) with st.container(height=510):     st.header(f"Daily sales for all products, {this_month:%B %Y}")     monthly_sales = data[(data.index < next_month) & (data.index >= this_month)]     st.write(monthly_sales) with st.container(height=510):     st.header(f"Total sales for all products, {this_month:%B %Y}")     st.bar_chart(monthly_sales.sum())  st.set_page_config(layout="wide") st.title("Daily vs monthly sales, by product") st.markdown("This app shows the 2023 daily sales for Widget A through Widget Z.") data = get_data() daily, monthly = st.columns(2) with daily:   show_daily_sales(data) with monthly:   show_monthly_sales(data) `
![Example Streamlit app showing daily sales on the left and monthly sales on the right](https://docs.streamlit.io/images/tutorials/fragment-rerun-tutorial-app.jpg)
[Click here to see the example live on Community Cloud.](https://doc-tutorial-fragment-rerun.streamlit.app/)
## [](https://docs.streamlit.io/develop/tutorials/execution-flow/trigger-a-full-script-rerun-from-a-fragment#build-the-example)Build the example
### [](https://docs.streamlit.io/develop/tutorials/execution-flow/trigger-a-full-script-rerun-from-a-fragment#initialize-your-app)Initialize your app
  1. In `your_repository`, create a file named `app.py`.
  2. In a terminal, change directories to `your_repository`, and start your app:
`streamlit run app.py `
Your app will be blank because you still need to add code.
  3. In `app.py`, write the following:
`import streamlit as st import pandas as pd import numpy as np from datetime import date, timedelta import string import time `
You'll be using these libraries as follows:
     * You'll work with sales data in a `pandas.DataFrame`.
     * You'll