Title: Streamlit DataFrames and Editable Features
URL: https://docs.streamlit.io/develop/concepts/design/dataframes
Summary: This section discusses the use of `st.dataframe` to display various data types, including Pandas DataFrames, lists, dictionaries, and arrays, as well as Snowpark and PySpark DataFrames for large datasets. It also introduces the `st.data_editor` feature, which allows users to edit data in an interactive table format.
---

Try out all the UI features using the embedded app from the prior section.
In addition to Pandas DataFrames, `st.dataframe` also supports other common Python types, e.g., list, dict, or numpy array. It also supports [Snowpark](https://docs.snowflake.com/en/developer-guide/snowpark/index) and [PySpark](https://spark.apache.org/docs/latest/api/python/) DataFrames, which allow you to lazily evaluate and pull data from databases. This can be useful for working with large datasets.
## [](https://docs.streamlit.io/develop/concepts/design/dataframes#edit-data-with-stdata_editor)Edit data with st.data_editor
Streamlit supports editable dataframes via the `st.data_editor` command. Check out its API in [st.data_editor](https://docs.streamlit.io/develop/api-reference/data/st.data_editor). It shows the dataframe in a table, similar to `st.dataframe`. But in contrast to `st.dataframe`, this table isn't static! The user can click on cells and edit them. The edited data is then returned on the Python side. Here's an example:
`df = pd.DataFrame( [ {"command": "st.selectbox", "rating": 4, "is_widget": True}, {"command": "st.balloons", "rating": 5, "is_widget": False}, {"command": "st.time_input", "rating": 3, "is_widget": True}, ] ) edited_df = st.data_editor(df) # ðŸ‘ˆ An editable dataframe favorite_command = edited_df.loc[edited_df["rating"].idxmax()]["command"] st.markdown(f"Your favorite command is **{favorite_command}** ðŸŽˆ") `
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-data-editor.streamlit.app/?utm_medium=oembed)
Try it out by double-clicking on any cell. You'll notice you can edit all cell values. Try editing the values in the rating column and observe how the text output at the bottom changes:
## [](https://docs.streamlit.io/develop/concepts/design/dataframes#stdata_editor-ui-features)`st.data_editor` UI features
`st.data_editor` also supports a few additional things:
  * [**Add and delete rows**](https://docs.streamlit.io/develop/concepts/design/dataframes#add-and-delete-rows): You can do this by setting `num_rows= "dynamic"` when calling `st.data_editor`. This will allow users to add and delete rows as needed.
  * [**Copy and paste support**](https://docs.streamlit.io/develop/concepts/design/dataframes#copy-and-paste-support): Copy and paste both between `st.data_editor` and spreadsheet software like Google Sheets and Excel.
  * [**Access edited data**](https://docs.streamlit.io/develop/concepts/design/dataframes#access-edited-data): Access only the individual edits instead of the entire edited data structure via Session State.
  * [**Bulk edits**](https://docs.streamlit.io/develop/concepts/design/dataframes#bulk-edits): Similar to Excel, just drag a handle to edit neighboring cells.
  * [**Automatic input validation**](https://docs.streamlit.io/develop/concepts/design/dataframes#automatic-input-validation): Column Configuration provides strong data type support and other configurable options. For example, there's no way to enter letters into a number cell. Number cells can have a designated min and max.
  * [**Edit common data structures**](https://docs.streamlit.io/develop/concepts/design/dataframes#edit-common-data-structures): `st.data_editor` supports lists, dicts, NumPy ndarray, and more!


### [](https://docs.streamlit.io/develop/concepts/design/dataframes#add-and-delete-rows)Add and delete rows
With `st.data_editor`, viewers can add or delete rows via the table UI. This mode can be activated by setting the `num_rows` parameter to `"dynamic"`:
`edited_df = st.data_editor(df, num_rows="dynamic") `
  * To add new rows, click the plus icon (_add_) in the toolbar. Alternatively, click inside a shaded cell below the bottom row of the table.
  * To delete rows, select one or more rows using the checkboxes on the left. Click the delete icon (_delete_) or press the `delete` key on your keyboard.


[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-data-editor-clipboard.streamlit.app/?utm_medium=oembed)
### [](https://docs.streamlit.io/develop/concepts/design/dataframes#copy-and-paste-support)Copy and paste support
The data editor supports pasting in tabular data from Google Sheets, Excel, Notion, and many other similar tools. You can also copy-paste data between `st.data_editor` instances. This functionality, powered by the [Clipboard API](https://developer.mozilla.org/en-US/docs/Web/API/Clipboard_API), can be a huge time saver for users who need to work with data across multiple platforms. To try it out:
  1. Copy data from [this Google Sheets document](https://docs.google.com/spreadsheets/d/1Z0zd-5dF_HfqUaDDq4BWAOnsdlGCjkbTNwDZMBQ1dOY/edit?usp=sharing) to your clipboard.
  2. Single click any cell in the `name` column in the app above. Paste it in using hotkeys (`âŒ˜+V` or `Ctrl+V`).