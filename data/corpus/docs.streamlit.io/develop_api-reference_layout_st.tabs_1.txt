Title: Using st.tabs in Streamlit
URL: https://docs.streamlit.io/develop/api-reference/layout/st.tabs
Summary: The `st.tabs` function in Streamlit allows the creation of multiple containers organized into tabs for easy navigation between related content. Users can add elements within these tabs using the `with` notation or by calling methods directly. It is important to note that all content from every tab is sent to the frontend and conditional rendering is not supported.
---

## [](https://docs.streamlit.io/develop/api-reference/layout/st.tabs#sttabs)st.tabs
Streamlit VersionVersion 1.44.0Version 1.43.0Version 1.42.0Version 1.41.0Version 1.40.0Version 1.39.0Version 1.38.0Version 1.37.0Version 1.36.0Version 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0
Insert containers separated into tabs.
Inserts a number of multi-element containers as tabs. Tabs are a navigational element that allows users to easily move between groups of related content.
To add elements to the returned containers, you can use the `with` notation (preferred) or just call methods directly on the returned object. See examples below.
Warning
All the content of every tab is always sent to and rendered on the frontend. Conditional rendering is currently not supported.
Function signature[[source]](https://github.com/streamlit/streamlit/blob/1.44.0/lib/streamlit/elements/layouts.py#L383 "View st.tabs source code on GitHub")  
---  
st.tabs(tabs)  
Parameters  
tabs (list of str) |  Creates a tab for each string in the list. The first tab is selected by default. The string is used as the name of the tab and can optionally contain GitHub-flavored Markdown of the following types: Bold, Italics, Strikethroughs, Inline Code, Links, and Images. Images display like icons, with a max height equal to the font height. Unsupported Markdown elements are unwrapped so only their children (text contents) render. Display unsupported elements as literal characters by backslash-escaping them. E.g., `"1\. Not an ordered list"`. See the `body` parameter of [`st.markdown`](https://docs.streamlit.io/develop/api-reference/text/st.markdown) for additional, supported Markdown directives.  
Returns  
(list of containers) | A list of container objects.  
#### Examples
You can use the `with` notation to insert any element into a tab:
```
import streamlit as st
tab1, tab2, tab3 = st.tabs(["Cat", "Dog", "Owl"])
with tab1:
  st.header("A cat")
  st.image("https://static.streamlit.io/examples/cat.jpg", width=200)
with tab2:
  st.header("A dog")
  st.image("https://static.streamlit.io/examples/dog.jpg", width=200)
with tab3:
  st.header("An owl")
  st.image("https://static.streamlit.io/examples/owl.jpg", width=200)
```

Copy
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-tabs1.streamlit.app//?utm_medium=oembed&)
Or you can just call methods directly on the returned objects:
```
import streamlit as st
import numpy as np
tab1, tab2 = st.tabs(["ðŸ“ˆ Chart", "ðŸ—ƒ Data"])
data = np.random.randn(10, 1)
tab1.subheader("A tab with a chart")
tab1.line_chart(data)
tab2.subheader("A tab with the data")
tab2.write(data)
```

Copy
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-tabs2.streamlit.app//?utm_medium=oembed&)
[ Previous: st.sidebar](https://docs.streamlit.io/develop/api-reference/layout/st.sidebar)[Next: Chat elements](https://docs.streamlit.io/develop/api-reference/chat) _forum_
### Still have questions?
Our [forums](https://discuss.streamlit.io) are full of helpful information and Streamlit experts.
[Home](https://docs.streamlit.io/)Contact Us[Community](https://discuss.streamlit.io)[](https://github.com/streamlit "GitHub")[](https://www.youtube.com/channel/UC3LD42rjj-Owtxsa6PwGU5Q "YouTube")[](https://twitter.com/streamlit "Twitter")[](https://www.linkedin.com/company/streamlit "LinkedIn")[](https://info.snowflake.com/streamlit-newsletter-sign-up.html "Newsletter")
Â© 2025 Snowflake Inc.Cookie policy
 _forum_ Ask AI