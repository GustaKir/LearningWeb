Title: Configuring Google Client for Streamlit Authentication
URL: https://docs.streamlit.io/develop/tutorials/authentication/google
Summary: This section outlines the steps for configuring a Google client for Streamlit authentication, including creating a client, selecting the application type, and setting authorized redirect URIs.
---

### [](https://docs.streamlit.io/develop/tutorials/authentication/google#configure-your-client)Configure your client
  1. In the left navigation menu, select "**Clients**."
  2. At the top of the client list, select "**CREATE CLIENT**."
  3. For the application type, select "**Web application**."
  4. Enter a unique name for your application.
The client name is used internally and not shown to your users.
  5. Skip over "Authorized JavaScript origins."
  6. Under "Authorized redirect URIs," select "**ADD URI**."
  7. Enter your app's URL with the pathname `oauth2callback`.
For example, if you are developing locally, enter `http://localhost:8501/oauth2callback`. If you are using a different port, change `8501` to match your port.
  8. Optional: Add additional authorized redirect URIs.
If you will host your app from multiple URLs, or if you know a URL you will use in the future, you can add it now. Ensure that each URL includes the `oauth2callback` pathname.
  9. At the bottom of the screen, select "**CREATE**."


You now have a client in Google Cloud that's ready to authenticate your users.
### [](https://docs.streamlit.io/develop/tutorials/authentication/google#gather-your-applications-details)Gather your application's details
  1. From the clients page, select your new client.
  2. To store your app information to use in later steps, open a text editor, or (even better) create a new item in a password locker.
Always handle your app secrets securely. Remember to label the values as you paste them so you don't mix them up.
  3. On the right, copy your "Client ID" and "Client secret" into your text editor.


For the Google Auth Platform, the server metadata URL is shared between all applications and isn't listed individually in your client. The server metadata URL for the Google Auth Platform is `https://accounts.google.com/.well-known/openid-configuration`. For more information about the server metadata URL, see [The discovery document](https://developers.google.com/identity/openid-connect/openid-connect#discovery) in Google's documentation.
## [](https://docs.streamlit.io/develop/tutorials/authentication/google#build-the-example)Build the example
To create an app with user authentication, you'll need to configure your secrets and prompt your users to log in. You'll use secrets management to store the information from your client, and then create a simple app that welcomes your user by name after they log in.
### [](https://docs.streamlit.io/develop/tutorials/authentication/google#configure-your-secrets)Configure your secrets
  1. In `your_repository`, create a `.streamlit/secrets.toml` file.
  2. Add `secrets.toml` to your `.gitignore` file.
_priority_high_
#### Important
Never commit secrets to your repository. For more information about `.gitignore`, see [Ignoring files](https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files).
  3. Generate a strong, random secret to use as your cookie secret.
The cookie secret is used to sign each user's identity cookie, which Streamlit stores when they log in.
  4. In `.streamlit/secrets.toml`, add your connection configuration:
`[auth] redirect_uri = "http://localhost:8501/oauth2callback" cookie_secret = "xxx" client_id = "xxx" client_secret = "xxx" server_metadata_url = "https://accounts.google.com/.well-known/openid-configuration" `
Replace the values of `client_id` and `client_secret` with the values you copied into your text editor earlier. Replace the value of `cookie_secret` with the random secret you generated in the previous step.
  5. Save your `secrets.toml` file.


### [](https://docs.streamlit.io/develop/tutorials/authentication/google#initialize-your-app)Initialize your app
  1. In `your_repository`, create a file named `app.py`.
  2. In a terminal, change directories to `your_repository`, and start your app:
`streamlit run app.py `
Your app will be blank because you still need to add code.
  3. In `app.py`, write the following:
`import streamlit as st `
  4. Save your `app.py` file, and view your running app.
  5. In your app, select "**Always rerun** ", or press the "**A** " key.
Your preview will be blank but will automatically update as you save changes to `app.py`.
  6. Return to your code.