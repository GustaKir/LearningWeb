Title: Warning about st.cache_data Security Risks
URL: https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_data
Summary: This section warns that `st.cache_data` uses the insecure `pickle` module, which can execute arbitrary code during unpickling from untrusted sources. Users are advised to ensure that only trusted values are returned by cached functions to prevent security vulnerabilities.
---

```

Copy
_priority_high_
#### Warning
`st.cache_data` implicitly uses the `pickle` module, which is known to be insecure. Anything your cached function returns is pickled and stored, then unpickled on retrieval. Ensure your cached functions return trusted values because it is possible to construct malicious pickle data that will execute arbitrary code during unpickling. Never load data that could have come from an untrusted source in an unsafe mode or that could have been tampered with. **Only load data you trust**.
## [](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_data#stcache_dataclear)st.cache_data.clear
Streamlit VersionVersion 1.44.0Version 1.43.0Version 1.42.0Version 1.41.0Version 1.40.0Version 1.39.0Version 1.38.0Version 1.37.0Version 1.36.0Version 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0
Clear all in-memory and on-disk data caches.
Function signature[[source]](https://github.com/streamlit/streamlit/blob/1.44.0/lib/streamlit/runtime/caching/cache_data_api.py#L593 "View st.cache_data.clear source code on GitHub")  
---  
st.cache_data.clear()  
#### [](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_data#example)Example
In the example below, pressing the "Clear All" button will clear memoized values from all functions decorated with `@st.cache_data`.
`import streamlit as st @st.cache_data def square(x): return x**2 @st.cache_data def cube(x): return x**3 if st.button("Clear All"): # Clear values from *all* all in-memory and on-disk data caches: # i.e. clear values from both square and cube   st.cache_data.clear() `
## [](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_data#cachedfuncclear)CachedFunc.clear
Streamlit VersionVersion 1.44.0Version 1.43.0Version 1.42.0Version 1.41.0Version 1.40.0Version 1.39.0Version 1.38.0Version 1.37.0Version 1.36.0Version 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0
Clear the cached function's associated cache.
If no arguments are passed, Streamlit will clear all values cached for the function. If arguments are passed, Streamlit will clear the cached value for these arguments only.
Function signature[[source]](https://github.com/streamlit/streamlit/blob/1.44.0/lib/streamlit/runtime/caching/cache_utils.py#L349 "View st.clear source code on GitHub")  
---  
CachedFunc.clear(*args, **kwargs)  
Parameters  
*args (Any) |  Arguments of the cached functions.  
**kwargs (Any) |  Keyword arguments of the cached function.  
#### Example
```
import streamlit as st
import time
@st.cache_data
def foo(bar):
  time.sleep(2)
  st.write(f"Executed foo({bar}).")
  return bar
if st.button("Clear all cached values for `foo`", on_click=foo.clear):
  foo.clear()
if st.button("Clear the cached value of `foo(1)`"):
  foo.clear(1)
foo(1)
foo(2)