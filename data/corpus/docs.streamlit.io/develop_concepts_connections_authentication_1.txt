Title: User Authentication and Personalization in Streamlit
URL: https://docs.streamlit.io/develop/concepts/connections/authentication
Summary: This section discusses the importance of user authentication and personalization in Streamlit applications, highlighting their benefits such as admin controls and enhanced user engagement. It introduces OpenID Connect (OIDC) as a supported authentication method, clarifying that OIDC identifies users but does not handle authorization.
---

# [](https://docs.streamlit.io/develop/concepts/connections/authentication#user-authentication-and-information)User authentication and information
Personalizing your app for your users is a great way to make your app more engaging.
User authentication and personalization unlocks a plethora of use cases for developers, including controls for admins, a personalized stock ticker, or a chatbot app with a saved history between sessions.
Before reading this guide, you should have a basic understanding of [secrets management](https://docs.streamlit.io/develop/concepts/connections/secrets-management).
## [](https://docs.streamlit.io/develop/concepts/connections/authentication#openid-connect)OpenID Connect
Streamlit supports user authentication with OpenID Connect (OIDC), which is an authentication protocol built on top of OAuth 2.0. OIDC supports authentication, but not authorization: that is, OIDC connections tell you _who_ a user is (authentication), but don't give you the authority to _impersonate_ them (authorization). If you need to connect with a generic OAuth 2.0 provider or have your app to act on behalf of a user, consider using or creating a custom component.
Some popular OIDC providers are:
  * [Google Identity](https://developers.google.com/identity/openid-connect/openid-connect)
  * [Microsoft Entra ID](https://learn.microsoft.com/en-us/power-pages/security/authentication/openid-settings)
  * [Okta](https://help.okta.com/en-us/content/topics/apps/apps_app_integration_wizard_oidc.htm)
  * [Auth0](https://auth0.com/docs/get-started/auth0-overview/create-applications/regular-web-apps)


## [](https://docs.streamlit.io/develop/concepts/connections/authentication#stlogin-stexperimental_user-and-stlogout)`st.login()`, `st.experimental_user`, and `st.logout()`
There are three commands involved with user authentication:
  * [`st.login()`](https://docs.streamlit.io/develop/api-reference/user/st.login) redirects the user to your identity provider. After they log in, Streamlit stores an identity cookie and then redirects them to the homepage of your app in a new session.
  * [`st.experimental_user`](https://docs.streamlit.io/develop/api-reference/user/st.user) is a dict-like object for accessing user information. It has a persistent attribute, `.is_logged_in`, which you can check for the user's login status. When they are logged in, other attributes are available per your identity provider's configuration.
  * [`st.logout()`](https://docs.streamlit.io/develop/api-reference/user/st.logout) removes the identity cookie from the user's browser and redirects them to the homepage of your app in a new session.