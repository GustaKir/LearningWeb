Title: st.container - Streamlit API Reference
URL: https://docs.streamlit.io/develop/api-reference/layout/st.container
Summary: The `st.container` function in Streamlit allows users to create an invisible container for holding multiple elements, enabling the organization of app components out of order. Elements can be added using the preferred `with` notation or by calling methods directly on the container object.
---

## [](https://docs.streamlit.io/develop/api-reference/layout/st.container#stcontainer)st.container
Streamlit VersionVersion 1.44.0Version 1.43.0Version 1.42.0Version 1.41.0Version 1.40.0Version 1.39.0Version 1.38.0Version 1.37.0Version 1.36.0Version 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0
Insert a multi-element container.
Inserts an invisible container into your app that can be used to hold multiple elements. This allows you to, for example, insert multiple elements into your app out of order.
To add elements to the returned container, you can use the `with` notation (preferred) or just call methods directly on the returned object. See examples below.
Function signature[[source]](https://github.com/streamlit/streamlit/blob/1.44.0/lib/streamlit/elements/layouts.py#L43 "View st.container source code on GitHub")  
---  
st.container(*, height=None, border=None, key=None)  
Parameters  
height (int or None) |  Desired height of the container expressed in pixels. If `None` (default) the container grows to fit its content. If a fixed height, scrolling is enabled for large content and a grey border is shown around the container to visually separate its scroll surface from the rest of the app. Note Use containers with scroll sparingly. If you do, try to keep the height small (below 500 pixels). Otherwise, the scroll surface of the container might cover the majority of the screen on mobile devices, which makes it hard to scroll the rest of the app.  
border (bool or None) |  Whether to show a border around the container. If `None` (default), a border is shown if the container is set to a fixed height and not shown otherwise.  
key (str or None) |  An optional string to give this container a stable identity. Additionally, if `key` is provided, it will be used as CSS class name prefixed with `st-key-`.  
#### Examples
Inserting elements using `with` notation:
```
import streamlit as st
with st.container():
  st.write("This is inside the container")
  # You can call any Streamlit command, including custom components:
  st.bar_chart(np.random.randn(50, 3))
st.write("This is outside the container")
```

Copy
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-container1.streamlit.app//?utm_medium=oembed&)
Inserting elements out of order:
```
import streamlit as st
container = st.container(border=True)
container.write("This is inside the container")
st.write("This is outside the container")
# Now insert some more in the container
container.write("This is inside too")
```

Copy
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-container2.streamlit.app//?utm_medium=oembed&)
Using `height` to make a grid:
```
import streamlit as st
row1 = st.columns(3)
row2 = st.columns(3)
for col in row1 + row2:
  tile = col.container(height=120)
  tile.title(":balloon:")
```

Copy
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-container3.streamlit.app//?utm_medium=oembed&)
Using `height` to create a scrolling container for long content:
```
import streamlit as st
long_text = "Lorem ipsum. " * 1000
with st.container(height=300):
  st.markdown(long_text)
```

Copy
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-container4.streamlit.app//?utm_medium=oembed&)
[ Previous: st.columns](https://docs.streamlit.io/develop/api-reference/layout/st.columns)[Next: st.dialog](https://docs.streamlit.io/develop/api-reference/execution-flow/st.dialog) _forum_
### Still have questions?
Our [forums](https://discuss.streamlit.io) are full of helpful information and Streamlit experts.
[Home](https://docs.streamlit.io/)Contact Us[Community](https://discuss.streamlit.io)[](https://github.com/streamlit "GitHub")[](https://www.youtube.com/channel/UC3LD42rjj-Owtxsa6PwGU5Q "YouTube")[](https://twitter.com/streamlit "Twitter")[](https://www.linkedin.com/company/streamlit "LinkedIn")[](https://info.snowflake.com/streamlit-newsletter-sign-up.html "Newsletter")
Â© 2025 Snowflake Inc.Cookie policy
 _forum_ Ask AI