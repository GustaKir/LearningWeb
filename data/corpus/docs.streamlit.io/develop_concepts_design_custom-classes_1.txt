Title: Custom Classes in Streamlit
URL: https://docs.streamlit.io/develop/concepts/design/custom-classes
Summary: This document outlines patterns for defining custom classes in Streamlit, including separating class definitions into modules, implementing comparison methods, and storing class instances as serialized data. It provides examples to illustrate each pattern.
---

1. Contents
  2. [Patterns to define your custom classes](https://docs.streamlit.io/develop/concepts/design/custom-classes#patterns-to-define-your-custom-classes)
  3. [Pattern 1: Define your class in a separate module](https://docs.streamlit.io/develop/concepts/design/custom-classes#pattern-1-define-your-class-in-a-separate-module)
  4. [Example: Move your class definition](https://docs.streamlit.io/develop/concepts/design/custom-classes#example-move-your-class-definition)
  5. [Pattern 2: Force your class to compare internal values](https://docs.streamlit.io/develop/concepts/design/custom-classes#pattern-2-force-your-class-to-compare-internal-values)
  6. [Example: Define __eq__](https://docs.streamlit.io/develop/concepts/design/custom-classes#example-define-__eq__)
  7. [Pattern 3: Store your class as serialized data](https://docs.streamlit.io/develop/concepts/design/custom-classes#pattern-3-store-your-class-as-serialized-data)
  8. [Example: Save your class instance as a string](https://docs.streamlit.io/develop/concepts/design/custom-classes#example-save-your-class-instance-as-a-string)
  9. [Pattern 4: Use caching to preserve your class](https://docs.streamlit.io/develop/concepts/design/custom-classes#pattern-4-use-caching-to-preserve-your-class)
  10. [Understanding how Python defines and compares classes](https://docs.streamlit.io/develop/concepts/design/custom-classes#understanding-how-python-defines-and-compares-classes)
  11. [Example: What happens when you define the same class twice?](https://docs.streamlit.io/develop/concepts/design/custom-classes#example-what-happens-when-you-define-the-same-class-twice)
  12. [What's happening in Streamlit?](https://docs.streamlit.io/develop/concepts/design/custom-classes#whats-happening-in-streamlit)
  13. [How Streamlit widgets store options](https://docs.streamlit.io/develop/concepts/design/custom-classes#how-streamlit-widgets-store-options)
  14. [A pathological example](https://docs.streamlit.io/develop/concepts/design/custom-classes#a-pathological-example)
  15. [Using Enum classes in Streamlit](https://docs.streamlit.io/develop/concepts/design/custom-classes#using-enum-classes-in-streamlit)
  16. [Understanding the enumCoercion configuration option](https://docs.streamlit.io/develop/concepts/design/custom-classes#understanding-the-enumcoercion-configuration-option)


# [](https://docs.streamlit.io/develop/concepts/design/custom-classes#using-custom-python-classes-in-your-streamlit-app)Using custom Python classes in your Streamlit app
If you are building a complex Streamlit app or working with existing code, you may have custom Python classes defined in your script. Common examples include the following:
  * Defining a `@dataclass` to store related data within your app.
  * Defining an `Enum` class to represent a fixed set of options or values.
  * Defining custom interfaces to external services or databases not covered by [`st.connection`](https://docs.streamlit.io/develop/api-reference/connections/st.connection).