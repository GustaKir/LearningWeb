Title: Generating Random Sales Data in Streamlit
URL: https://docs.streamlit.io/develop/tutorials/execution-flow/trigger-a-full-script-rerun-from-a-fragment
Summary: This section explains how to create a function in Streamlit to generate random sales numbers using numpy. The generated data will include datetime.date for indexing, with products named from 'Widget A' to 'Widget Z'. It also mentions the optional use of time.sleep() to slow down updates, and instructions for setting your app to always rerun on changes.
---

generate random sales numbers with `numpy`.
     * The data will have `datetime.date` index values.
     * The products sold will be "Widget A" through "Widget Z," so you'll use `string` for easy access to an alphabetical string.
     * Optional: To help add emphasis at the end, you'll use `time.sleep()` to slow things down and see the fragment working.
  4. Save your `app.py` file, and view your running app.
  5. In your app, select "**Always rerun** ", or press the "**A** " key.
Your preview will be blank but will automatically update as you save changes to `app.py`.
  6. Return to your code.


### [](https://docs.streamlit.io/develop/tutorials/execution-flow/trigger-a-full-script-rerun-from-a-fragment#build-a-function-to-create-random-sales-data)Build a function to create random sales data
To begin with, you'll define a function to randomly generate some sales data. It's okay to skip this section if you just want to copy the function.
Complete function to randomly generate sales data _expand_more_
`@st.cache_data def get_data(): """Generate random sales data for Widget A through Widget Z"""   product_names = ["Widget " + letter for letter in string.ascii_uppercase]   average_daily_sales = np.random.normal(1_000, 300, len(product_names))   products = dict(zip(product_names, average_daily_sales))   data = pd.DataFrame({})   sales_dates = np.arange(date(2023, 1, 1), date(2024, 1, 1), timedelta(days=1)) for product, sales in products.items():     data[product] = np.random.normal(sales, 300, len(sales_dates)).round(2)   data.index = sales_dates   data.index = data.index.date   return data `
  1. Use an `@st.cache_data` decorator and start your function definition.
`@st.cache_data def get_data(): """Generate random sales data for Widget A through Widget Z""" `
You don't need to keep re-randomizing the data, so the caching decorator will randomly generate the data once and save it in Streamlit's cache. As your app reruns, it will use the cached value instead of recomputing new data.
  2. Define the list of product names and assign an average daily sales value to each.
`  product_names = ["Widget " + letter for letter in string.ascii_uppercase]   average_daily_sales = np.random.normal(1_000, 300, len(product_names))   products = dict(zip(product_names, average_daily_sales)) `
  3. For each product, use its average daily sales to randomly generate daily sales values for an entire year.
`  data = pd.DataFrame({})   sales_dates = np.arange(date(2023, 1, 1), date(2024, 1, 1), timedelta(days=1)) for product, sales in products.items():     data[product] = np.random.normal(sales, 300, len(sales_dates)).round(2)   data.index = sales_dates   data.index = data.index.date `
In the last line, `data.index.date` strips away the timestamp, so the index will show clean dates.
  4. Return the random sales data.
` return data `
  5. Optional: Test out your function by calling it and displaying the data.
`data = get_data() data `
Save your `app.py` file to see the preview. Delete these two lines or keep them at the end of your app to be updated as you continue.