Title: Streamlit Callbacks and Caching
URL: https://docs.streamlit.io/get-started/fundamentals/main-concepts
Summary: This section discusses the behavior of callbacks in Streamlit, highlighting that callbacks associated with widgets run before the main script executes. It also introduces the `@st.cache_data` decorator for optimizing performance by preventing costly computations during app reruns and briefly mentions displaying data in various formats.
---

Whenever a callback is passed to a widget via the `on_change` (or `on_click`) parameter, the callback will always run before the rest of your script. For details on the Callbacks API, please refer to our [Session State API Reference Guide](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.session_state#use-callbacks-to-update-session-state).
And to make all of this fast and seamless, Streamlit does some heavy lifting for you behind the scenes. A big player in this story is the [`@st.cache_data`](https://docs.streamlit.io/get-started/fundamentals/main-concepts#caching) decorator, which allows developers to skip certain costly computations when their apps rerun. We'll cover caching later in this page.
## [](https://docs.streamlit.io/get-started/fundamentals/main-concepts#display-and-style-data)Display and style data
There are a few ways to display data (tables, arrays, data frames) in Streamlit apps. [Below](https://docs.streamlit.io/get-started/fundamentals/main-concepts#use-magic), you will be introduced to _magic_ and [`st.write()`](https://docs.streamlit.io/develop/api-reference/write-magic/st.write), which can be used to write anything from text to tables. After that, let's take a look at methods designed specifically for visualizing data.
### [](https://docs.streamlit.io/get-started/fundamentals/main-concepts#use-magic)Use magic
You can also write to your app without calling any Streamlit methods. Streamlit supports "[magic commands](https://docs.streamlit.io/develop/api-reference/write-magic/magic)," which means you don't have to use [`st.write()`](https://docs.streamlit.io/develop/api-reference/write-magic/st.write) at all! To see this in action try this snippet:
`""" # My first app Here's our first attempt at using data to create a table: """ import streamlit as st import pandas as pd df = pd.DataFrame({ 'first column': [1, 2, 3, 4], 'second column': [10, 20, 30, 40] }) df `
Any time that Streamlit sees a variable or a literal value on its own line, it automatically writes that to your app using [`st.write()`](https://docs.streamlit.io/develop/api-reference/write-magic/st.write). For more information, refer to the documentation on [magic commands](https://docs.streamlit.io/develop/api-reference/write-magic/magic).
### [](https://docs.streamlit.io/get-started/fundamentals/main-concepts#write-a-data-frame)Write a data frame
Along with [magic commands](https://docs.streamlit.io/develop/api-reference/write-magic/magic), [`st.write()`](https://docs.streamlit.io/develop/api-reference/write-magic/st.write) is Streamlit's "Swiss Army knife". You can pass almost anything to [`st.write()`](https://docs.streamlit.io/develop/api-reference/write-magic/st.write): text, data, Matplotlib figures, Altair charts, and more. Don't worry, Streamlit will figure it out and render things the right way.
`import streamlit as st import pandas as pd st.write("Here's our first attempt at using data to create a table:") st.write(pd.DataFrame({ 'first column': [1, 2, 3, 4], 'second column': [10, 20, 30, 40] })) `
There are other data specific functions like [`st.dataframe()`](https://docs.streamlit.io/develop/api-reference/data/st.dataframe) and [`st.table()`](https://docs.streamlit.io/develop/api-reference/data/st.table) that you can also use for displaying data. Let's understand when to use these features and how to add colors and styling to your data frames.
You might be asking yourself, "why wouldn't I always use `st.write()`?" There are a few reasons:
  1. _Magic_ and [`st.write()`](https://docs.streamlit.io/develop/api-reference/write-magic/st.write) inspect the type of data that you've passed in, and then decide how to best render it in the app. Sometimes you want to draw it another way. For example, instead of drawing a dataframe as an interactive table, you may want to draw it as a static table by using `st.table(df)`.
  2. The second reason is that other methods return an object that can be used and modified, either by adding data to it or replacing it.
  3. Finally, if you use a more specific Streamlit method you can pass additional arguments to customize its behavior.