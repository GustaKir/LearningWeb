Title: Interactive Point Selection with Streamlit's Altair Chart
URL: https://docs.streamlit.io/develop/api-reference/charts/st.altair_chart
Summary: This section describes how to use point and interval selections in interactive charts created with Streamlit's Altair Chart. When a user clicks on a data point, it appears as 'point_selection', while interval selections are reflected as 'interval_selection'. The ability to hold 'Shift' to preserve point selections is highlighted, although interval selections do not retain previous selections.
---

```

Copy
Try selecting points in this interactive example. When you click a point, the selection will appear under the attribute, `"point_selection"`, which is the name given to the point selection parameter. Similarly, when you make an interval selection, it will appear under the attribute `"interval_selection"`. You can give your selection parameters other names if desired.
If you hold `Shift` while selecting points, existing point selections will be preserved. Interval selections are not preserved when making additional selections.
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-chart-events-vega-lite-state.streamlit.app//?utm_medium=oembed&)
## [](https://docs.streamlit.io/develop/api-reference/charts/st.altair_chart#elementadd_rows)element.add_rows
Streamlit VersionVersion 1.44.0Version 1.43.0Version 1.42.0Version 1.41.0Version 1.40.0Version 1.39.0Version 1.38.0Version 1.37.0Version 1.36.0Version 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0
Concatenate a dataframe to the bottom of the current one.
Function signature[[source]](https://github.com/streamlit/streamlit/blob/1.44.0/lib/streamlit/elements/arrow.py#L735 "View st.add_rows source code on GitHub")  
---  
element.add_rows(data=None, **kwargs)  
Parameters  
data (pandas.DataFrame, pandas.Styler, pyarrow.Table, numpy.ndarray, pyspark.sql.DataFrame, snowflake.snowpark.dataframe.DataFrame, Iterable, dict, or None) |  Table to concat. Optional.  
**kwargs (pandas.DataFrame, numpy.ndarray, Iterable, dict, or None) |  The named dataset to concat. Optional. You can only pass in 1 dataset (including the one in the data parameter).  
#### Example
```
import streamlit as st
import pandas as pd
import numpy as np
df1 = pd.DataFrame(
  np.random.randn(50, 20), columns=("col %d" % i for i in range(20))
)
my_table = st.table(df1)
df2 = pd.DataFrame(
  np.random.randn(50, 20), columns=("col %d" % i for i in range(20))
)
my_table.add_rows(df2)
# Now the table shown in the Streamlit app contains the data for
# df1 followed by the data for df2.
```

Copy
You can do the same thing with plots. For example, if you want to add more data to a line chart:
```
# Assuming df1 and df2 from the example above still exist...
my_chart = st.line_chart(df1)
my_chart.add_rows(df2)
# Now the chart shown in the Streamlit app contains the data for
# df1 followed by the data for df2.
```

Copy
And for plots whose datasets are named, you can pass the data with a keyword argument where the key is the name:
```
my_chart = st.vega_lite_chart(
  {
    "mark": "line",
    "encoding": {"x": "a", "y": "b"},
    "datasets": {
      "some_fancy_name": df1, # <-- named dataset
    },
    "data": {"name": "some_fancy_name"},
  }
)
my_chart.add_rows(some_fancy_name=df2) # <-- name used as keyword