Title: Streamlit Cheat Sheet - Interactive Widgets
URL: https://docs.streamlit.io/develop/quick-reference/cheat-sheet
Summary: This section provides a quick reference for various interactive widgets available in Streamlit, including buttons, sliders, input fields, and more. It lists functions like st.button, st.download_button, st.text_input, and st.camera_input, along with examples of their usage to enhance user interaction in applications.
---

chart(df)   st.button("Update") fragment_function() `
#### [](https://docs.streamlit.io/develop/quick-reference/cheat-sheet#display-interactive-widgets)Display interactive widgets
`st.button("Click me") st.download_button("Download file", data) st.link_button("Go to gallery", url) st.page_link("app.py", label="Home") st.data_editor("Edit data", data) st.checkbox("I agree") st.feedback("thumbs") st.pills("Tags", ["Sports", "Politics"]) st.radio("Pick one", ["cats", "dogs"]) st.segmented_control("Filter", ["Open", "Closed"]) st.toggle("Enable") st.selectbox("Pick one", ["cats", "dogs"]) st.multiselect("Buy", ["milk", "apples", "potatoes"]) st.slider("Pick a number", 0, 100) st.select_slider("Pick a size", ["S", "M", "L"]) st.text_input("First name") st.number_input("Pick a number", 0, 10) st.text_area("Text to translate") st.date_input("Your birthday") st.time_input("Meeting time") st.file_uploader("Upload a CSV") st.audio_input("Record a voice message") st.camera_input("Take a picture") st.color_picker("Pick a color") # Use widgets' returned values in variables: for i in range(int(st.number_input("Num:"))):   foo() if st.sidebar.selectbox("I:",["f"]) == "f":   b() my_slider_val = st.slider("Quinn Mallory", 1, 88) st.write(slider_val) # Disable widgets to remove interactivity: st.slider("Pick a number", 0, 100, disabled=True) `
#### [](https://docs.streamlit.io/develop/quick-reference/cheat-sheet#build-chat-based-apps)Build chat-based apps
`# Insert a chat message container. with st.chat_message("user"):   st.write("Hello ðŸ‘‹")   st.line_chart(np.random.randn(30, 3)) # Display a chat input widget at the bottom of the app. st.chat_input("Say something") # Display a chat input widget inline. with st.container():   st.chat_input("Say something") `
Learn how to [Build a basic LLM chat app](https://docs.streamlit.io/develop/tutorials/llms/build-conversational-apps)
#### [](https://docs.streamlit.io/develop/quick-reference/cheat-sheet#mutate-data)Mutate data
`# Add rows to a dataframe after # showing it. element = st.dataframe(df1) element.add_rows(df2) # Add rows to a chart after # showing it. element = st.line_chart(df1) element.add_rows(df2) `
#### [](https://docs.streamlit.io/develop/quick-reference/cheat-sheet#display-code)Display code
`with st.echo():   st.write("Code will be executed and printed") `
#### [](https://docs.streamlit.io/develop/quick-reference/cheat-sheet#placeholders-help-and-options)Placeholders, help, and options
`# Replace any single element. element = st.empty() element.line_chart(...) element.text_input(...) # Replaces previous. # Insert out of order. elements = st.container() elements.line_chart(...) st.write("Hello") elements.text_input(...) # Appears above "Hello". st.help(pandas.DataFrame) st.get_option(key) st.set_option(key, value) st.set_page_config(layout="wide") st.query_params[key] st.query_params.from_dict(params_dict) st.query_params.get_all(key) st.query_params.clear() st.html("<p>Hi!</p>") `
#### [](https://docs.streamlit.io/develop/quick-reference/cheat-sheet#connect-to-data-sources)Connect to data sources
`st.connection("pets_db", type="sql") conn = st.connection("sql") conn = st.connection("snowflake") class MyConnection(BaseConnection[myconn.MyConnection]): def _connect(self, **kwargs) -> MyConnection: return myconn.connect(**self._secrets, **kwargs) def query(self, query): return self._instance.query(query) `
#### [](https://docs.streamlit.io/develop/quick-reference/cheat-sheet#optimize-performance)Optimize performance
###### [](https://docs.streamlit.io/develop/quick-reference/cheat-sheet#cache-data-objects)Cache data objects
`# E.g. Dataframe computation, storing downloaded data, etc. @st.cache_data def foo(bar): # Do something expensive and return data return data # Executes foo d1 = foo(ref1) # Does not execute foo # Returns cached item by value, d1 == d2 d2 = foo(ref1) # Different arg, so function foo executes d3 = foo(ref2) # Clear the cached value for foo(ref1) foo.clear(ref1) # Clear all cached entries for this function foo.clear() # Clear values from *all* in-memory or on-disk cached functions st.cache_data.clear() `
###### [](https://docs.streamlit.io/develop/quick-reference/cheat-sheet#cache-global-resources)Cache global resources
`# E.g. TensorFlow session, database connection, etc.