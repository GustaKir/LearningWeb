Title: Streamlit `st.form` API Overview
URL: https://docs.streamlit.io/develop/api-reference/execution-flow/st.form
Summary: The `st.form` API in Streamlit allows users to create a form that groups together elements and widgets, featuring a 'Submit' button. When the button is pressed, all widget values within the form are sent to Streamlit in a batch. For detailed guidance on forms in Streamlit apps, refer to the 'Using forms' documentation.
---

_star_
#### Tip
This page only contains information on the `st.forms` API. For a deeper dive into creating and using forms within Streamlit apps, read our guide on [Using forms](https://docs.streamlit.io/develop/concepts/architecture/forms).
## [](https://docs.streamlit.io/develop/api-reference/execution-flow/st.form#stform)st.form
Streamlit VersionVersion 1.44.0Version 1.43.0Version 1.42.0Version 1.41.0Version 1.40.0Version 1.39.0Version 1.38.0Version 1.37.0Version 1.36.0Version 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0
Create a form that batches elements together with a "Submit" button.
A form is a container that visually groups other elements and widgets together, and contains a Submit button. When the form's Submit button is pressed, all widget values inside the form will be sent to Streamlit in a batch.
To add elements to a form object, you can use `with` notation (preferred) or just call methods directly on the form. See examples below.
Forms have a few constraints:
  * Every form must contain a `st.form_submit_button`.
  * `st.button` and `st.download_button` cannot be added to a form.
  * Forms can appear anywhere in your app (sidebar, columns, etc), but they cannot be embedded inside other forms.
  * Within a form, the only widget that can have a callback function is `st.form_submit_button`.


Function signature[[source]](https://github.com/streamlit/streamlit/blob/1.44.0/lib/streamlit/elements/form.py#L62 "View st.form source code on GitHub")  
---  
st.form(key, clear_on_submit=False, *, enter_to_submit=True, border=True)  
Parameters  
key (str) |  A string that identifies the form. Each form must have its own key. (This key is not displayed to the user in the interface.)  
clear_on_submit (bool) |  If True, all widgets inside the form will be reset to their default values after the user presses the Submit button. Defaults to False. (Note that Custom Components are unaffected by this flag, and will not be reset to their defaults on form submission.)  
enter_to_submit (bool) |  Whether to submit the form when a user presses Enter while interacting with a widget inside the form. If this is `True` (default), pressing Enter while interacting with a form widget is equivalent to clicking the first `st.form_submit_button` in the form. If this is `False`, the user must click an `st.form_submit_button` to submit the form. If the first `st.form_submit_button` in the form is disabled, the form will override submission behavior with `enter_to_submit=False`.  
border (bool) |  Whether to show a border around the form. Defaults to True. Note Not showing a border can be confusing to viewers since interacting with a widget in the form will do nothing. You should only remove the border if there's another border (e.g. because of an expander) or the form is small (e.g. just a text input and a submit button).  
#### Examples
Inserting elements using `with` notation:
```
import streamlit as st
with st.form("my_form"):
  st.write("Inside the form")
  slider_val = st.slider("Form slider")
  checkbox_val = st.checkbox("Form checkbox")
  # Every form must have a submit button.
  submitted = st.form_submit_button("Submit")
  if submitted:
    st.write("slider", slider_val, "checkbox", checkbox_val)
st.write("Outside the form")
```

Copy
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-form1.streamlit.app//?utm_medium=oembed&)
Inserting elements out of order:
```
import streamlit as st
form = st.form("my_form")
form.slider("Inside the form")
st.slider("Outside the form")
# Now add a submit button to the form:
form.form_submit_button("Submit")
```

Copy
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-form2.streamlit.app//?utm_medium=oembed&)
[ Previous: st.dialog](https://docs.streamlit.io/develop/api-reference/execution-flow/st.dialog)[Next: st.form_submit_button](https://docs.streamlit.io/develop/api-reference/execution-flow/st.form_submit_button) _forum_
### Still have questions?
Our [forums](https://discuss.streamlit.io) are full of helpful information and Streamlit experts.
[Home](https://docs.streamlit.io/)Contact Us[Community](https://discuss.streamlit.io)[](https://github.com/streamlit "GitHub")[](https://www.youtube.com/channel/UC3LD42rjj-Owtxsa6PwGU5Q "YouTube")[](https://twitter.com/streamlit "Twitter")[](https://www.linkedin.com/company/streamlit "LinkedIn")[](https://info.snowflake.com/streamlit-newsletter-sign-up.html "Newsletter")
Â© 2025 Snowflake Inc.Cookie policy
 _forum_ Ask AI