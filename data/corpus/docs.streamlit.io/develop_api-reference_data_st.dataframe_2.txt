Title: Streamlit DataFrame Functionality
URL: https://docs.streamlit.io/develop/api-reference/data/st.dataframe
Summary: Streamlit converts unrecognized data types to a pandas.DataFrame or pyarrow.Table using appropriate methods. It supports styling via pandas.Styler, but limitations exist on advanced styling options. Text and number formatting from column_config takes precedence over pandas.Styler. Collection-like objects are supported, and an empty table is rendered if data is None. Users can set the dataframe width, which defaults to fit the parent container.
---

If a data type is not recognized, Streamlit will convert the object to a `pandas.DataFrame` or `pyarrow.Table` using a `.to_pandas()` or `.to_arrow()` method, respectively, if available. If `data` is a `pandas.Styler`, it will be used to style its underlying `pandas.DataFrame`. Streamlit supports custom cell values and colors. It does not support some of the more exotic styling options, like bar charts, hovering, and captions. For these styling options, use column configuration instead. Text and number formatting from `column_config` always takes precedence over text and number formatting from `pandas.Styler`. Collection-like objects include all Python-native `Collection` types, such as `dict`, `list`, and `set`. If `data` is `None`, Streamlit renders an empty table.  
width (int or None) |  Desired width of the dataframe expressed in pixels. If `width` is `None` (default), Streamlit sets the dataframe width to fit its contents up to the width of the parent container. If `width` is greater than the width of the parent container, Streamlit sets the dataframe width to match the width of the parent container.  
height (int or None) |  Desired height of the dataframe expressed in pixels. If `height` is `None` (default), Streamlit sets the height to show at most ten rows. Vertical scrolling within the dataframe element is enabled when the height does not accomodate all rows.  
use_container_width (bool) |  Whether to override `width` with the width of the parent container. If this is `True` (default), Streamlit sets the width of the dataframe to match the width of the parent container. If this is `False`, Streamlit sets the dataframe's width according to `width`.  
hide_index (bool or None) |  Whether to hide the index column(s). If `hide_index` is `None` (default), the visibility of index columns is automatically determined based on the data.  
column_order (Iterable of str or None) |  The ordered list of columns to display. If `column_order` is `None` (default), Streamlit displays all columns in the order inherited from the underlying data structure. If `column_order` is a list, the indicated columns will display in the order they appear within the list. Columns may be omitted or repeated within the list. For example, `column_order=("col2", "col1")` will display `"col2"` first, followed by `"col1"`, and will hide all other non-index columns.  
column_config (dict or None) |  Configuration to customize how columns display. If `column_config` is `None` (default), columns are styled based on the underlying data type of each column. Column configuration can modify column names, visibility, type, width, or format, among other things. `column_config` must be a dictionary where each key is a column name and the associated value is one of the following:
  * `None`: Streamlit hides the column.
  * A string: Streamlit changes the display label of the column to the given string.
  * A column type within `st.column_config`: Streamlit applies the defined configuration to the column. For example, use `st.column_config.NumberColumn("Dollar values”, format=”$ %d")` to change the displayed name of the column to "Dollar values" and add a "$" prefix in each cell. For more info on the available column types and config options, see [Column configuration](https://docs.streamlit.io/develop/api-reference/data/st.column_config).

To configure the index column(s), use `_index` as the column name.  
key (str) |  An optional string to use for giving this element a stable identity. If `key` is `None` (default), this element's identity will be determined based on the values of the other parameters. Additionally, if selections are activated and `key` is provided, Streamlit will register the key in Session State to store the selection state. The selection state is read-only.  
on_select ("ignore" or "rerun" or callable) |  How the dataframe should respond to user selection events. This controls whether or not the dataframe behaves like an input widget. `on_select` can be one of the following:
  * `"ignore"` (default): Streamlit will not react to any selection events in the dataframe. The dataframe will not behave like an input widget.
  * `"rerun"`: Streamlit will rerun the app when the user selects rows or columns in the dataframe. In this case, `st.dataframe` will return the selection data as a dictionary.
  * A `callable`: Streamlit will rerun the app and execute the `callable` as a callback function before the rest of the app. In this case, `st.dataframe` will return the selection data as a dictionary.