Title: Build a Basic LLM Chat App
URL: https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps
Summary: This tutorial introduces the development of chat-based applications using Streamlit's chat elements, such as `st.chat_message` and `st.chat_input`. It focuses on leveraging these tools, alongside session state, to create various applications, from simple chatbots to advanced interfaces similar to ChatGPT, all using Python.
---

# [](https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps#build-a-basic-llm-chat-app)Build a basic LLM chat app
## [](https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps#introduction)Introduction
The advent of large language models like GPT has revolutionized the ease of developing chat-based applications. Streamlit offers several [Chat elements](https://docs.streamlit.io/develop/api-reference/chat), enabling you to build Graphical User Interfaces (GUIs) for conversational agents or chatbots. Leveraging [session state](https://docs.streamlit.io/develop/concepts/architecture/session-state) along with these elements allows you to construct anything from a basic chatbot to a more advanced, ChatGPT-like experience using purely Python code.
In this tutorial, we'll start by walking through Streamlit's chat elements, `st.chat_message` and `st.chat_input`. Then we'll proceed to construct three distinct applications, each showcasing an increasing level of complexity and functionality:
  1. First, we'll [Build a bot that mirrors your input](https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps#build-a-bot-that-mirrors-your-input) to get a feel for the chat elements and how they work. We'll also introduce [session state](https://docs.streamlit.io/develop/concepts/architecture/session-state) and how it can be used to store the chat history. This section will serve as a foundation for the rest of the tutorial.
  2. Next, you'll learn how to [Build a simple chatbot GUI with streaming](https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps#build-a-simple-chatbot-gui-with-streaming).
  3. Finally, we'll [Build a ChatGPT-like app](https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps#build-a-chatgpt-like-app) that leverages session state to remember conversational context, all within less than 50 lines of code.


Here's a sneak peek of the LLM-powered chatbot GUI with streaming we'll build in this tutorial:
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-chat-llm.streamlit.app/?utm_medium=oembed)
Play around with the above demo to get a feel for what we'll build in this tutorial. A few things to note:
  * There's a chat input at the bottom of the screen that's always visible. It contains some placeholder text. You can type in a message and press Enter or click the run button to send it.
  * When you enter a message, it appears as a chat message in the container above. The container is scrollable, so you can scroll up to see previous messages. A default avatar is displayed to your messages' left.
  * The assistant's responses are streamed to the frontend and are displayed with a different default avatar.