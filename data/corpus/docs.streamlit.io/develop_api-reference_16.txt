Title: Streamlit API Reference Overview
URL: https://docs.streamlit.io/develop/api-reference
Summary: This section highlights various Streamlit components, including auto-refresh functionality, Pydantic model integrations for UI generation, and experimental multi-page app features. It provides snippets for implementing each component with links to their respective GitHub repositories.
---

Created by [@kmcgrady](https://github.com/kmcgrady).`from streamlit_autorefresh import st_autorefresh st_autorefresh(interval=2000, limit=100,  key="fizzbuzzcounter") `](https://github.com/kmcgrady/streamlit-autorefresh)
[![screenshot](https://docs.streamlit.io/images/api/components/pydantic.jpg)PydanticAuto-generate Streamlit UI from Pydantic Models and Dataclasses. Created by [@lukasmasuch](https://github.com/lukasmasuch).`import streamlit_pydantic as sp sp.pydantic_form(key="my_form",  model=ExampleModel) `](https://github.com/lukasmasuch/streamlit-pydantic)
[![screenshot](https://docs.streamlit.io/images/api/components/pages.jpg)Streamlit PagesAn experimental version of Streamlit Multi-Page Apps. Created by [@blackary](https://github.com/blackary).`from st_pages import Page, show_pages, add_page_title show_pages([ Page("streamlit_app.py", "Home", "🏠"),  Page("other_pages/page2.py", "Page 2", ":books:"), ]) `](https://github.com/blackary/st_pages)
### [](https://docs.streamlit.io/develop/api-reference#caching-and-state)Caching and state
#### [Cache dataFunction decorator to cache functions that return data (e.g. dataframe transforms, database queries, ML inference).`@st.cache_data def long_function(param1, param2): # Perform expensive computation here or # fetch data from the web here return data `](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_data)#### [Cache resourceFunction decorator to cache functions that return global resources (e.g. database connections, ML models).`@st.cache_resource def init_model(): # Return a global resource here return pipeline( "sentiment-analysis",   model="distilbert-base-uncased-finetuned-sst-2-english" ) `](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_resource)#### [Session stateSession state is a way to share variables between reruns, for each user session.`st.session_state['key'] = value `](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.session_state)#### [Query parametersGet, set, or clear the query parameters that are shown in the browser's URL bar.`st.query_params[key] = value st.query_params.clear() `](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.query_params)#### [Context`st.context` provides a read-only interface to access cookies and headers.`st.context.cookies st.context.headers `](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.context)
### [](https://docs.streamlit.io/develop/api-reference#connections-and-databases)Connections and databases
#### [](https://docs.streamlit.io/develop/api-reference#setup-your-connection)Setup your connection
[![screenshot](https://docs.streamlit.io/images/api/connection.svg)Create a connectionConnect to a data source or API`conn = st.connection('pets_db', type='sql') pet_owners = conn.query('select * from pet_owners') st.dataframe(pet_owners) `](https://docs.streamlit.io/develop/api-reference/connections/st.connection)
#### [](https://docs.streamlit.io/develop/api-reference#built-in-connections)Built-in connections
[![screenshot](https://docs.streamlit.io/images/api/connections.SnowflakeConnection.svg)SnowflakeConnectionA connection to Snowflake.`conn = st.connection('snowflake') `](https://docs.streamlit.io/develop/api-reference/connections/st.connections.snowflakeconnection)[![screenshot](https://docs.streamlit.io/images/api/connections.SQLConnection.svg)SQLConnectionA connection to a SQL database using SQLAlchemy.`conn = st.connection('sql') `](https://docs.streamlit.io/develop/api-reference/connections/st.connections.sqlconnection)
#### [](https://docs.streamlit.io/develop/api-reference#build-your-own-connections)Build your own connections
#### [Connection base classBuild your own connection with `BaseConnection`.`class MyConnection(BaseConnection[myconn.MyConnection]): def _connect(self, **kwargs) -> MyConnection: return myconn.connect(**self._secrets, **kwargs) def query(self, query): return self._instance.query(query) `](https://docs.streamlit.io/develop/api-reference/connections/st.connections.baseconnection)
#### [](https://docs.streamlit.io/develop/api-reference#secrets-management)Secrets management
#### [Secrets singletonAccess secrets from a local TOML file.`key = st.secrets["OpenAI_key"] `](https://docs.streamlit.io/develop/api-reference/connections/st.secrets)#### [Secrets fileSave your secrets in a per-project or per-profile TOML file.`OpenAI_key = "<YOUR_SECRET_KEY>" `](https://docs.streamlit.io/develop/api-reference/connections/secrets.toml)
Third-party components
These are featured components created by our lovely community. For more examples and inspiration, check out our [Components Gallery](https://streamlit.io/components) and [Streamlit Extras](https://extras.streamlit.app)!
[![screenshot](https://docs.streamlit.io/images/api/components/authenticator.jpg)AuthenticatorA secure authentication module to validate user credentials.