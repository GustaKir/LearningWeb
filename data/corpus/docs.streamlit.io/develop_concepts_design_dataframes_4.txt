Title: Data Editing Features in Streamlit
URL: https://docs.streamlit.io/develop/concepts/design/dataframes
Summary: The `st.data_editor` allows bulk editing of cells similar to spreadsheet software, enabling users to select and edit multiple cells at once. However, it does not support reordering rows, as new rows are always appended to the end of the dataframe. Additionally, editing capabilities extend beyond Pandas DataFrames to various data structures including lists, tuples, sets, and more.
---

`st.data_editor` does not support reordering rows, so added rows will always be appended to the end of the dataframe with any edits and deletions applicable to the original rows.
### [](https://docs.streamlit.io/develop/concepts/design/dataframes#bulk-edits)Bulk edits
The data editor includes a feature that allows for bulk editing of cells. Similar to Excel, you can drag a handle across a selection of cells to edit their values in bulk. You can even apply commonly used [keyboard shortcuts](https://github.com/glideapps/glide-data-grid/blob/main/packages/core/API.md#keybindings) in spreadsheet software. This is useful when you need to make the same change across multiple cells, rather than editing each cell individually.
### [](https://docs.streamlit.io/develop/concepts/design/dataframes#edit-common-data-structures)Edit common data structures
Editing doesn't just work for Pandas DataFrames! You can also edit lists, tuples, sets, dictionaries, NumPy arrays, or Snowpark & PySpark DataFrames. Most data types will be returned in their original format. But some types (e.g. Snowpark and PySpark) are converted to Pandas DataFrames. To learn about all the supported types, read the [st.data_editor](https://docs.streamlit.io/develop/api-reference/data/st.data_editor) API.
For example, you can easily let the user add items to a list:
`edited_list = st.data_editor(["red", "green", "blue"], num_rows= "dynamic") st.write("Here are all the colors you entered:") st.write(edited_list) `
Or numpy arrays:
`import numpy as np st.data_editor(np.array([ ["st.text_area", "widget", 4.92], ["st.markdown", "element", 47.22] ])) `
Or lists of records:
`st.data_editor([ {"name": "st.text_area", "type": "widget"}, {"name": "st.markdown", "type": "element"}, ]) `
Or dictionaries and many more types!
`st.data_editor({ "st.text_area": "widget", "st.markdown": "element" }) `
### [](https://docs.streamlit.io/develop/concepts/design/dataframes#automatic-input-validation)Automatic input validation
The data editor includes automatic input validation to help prevent errors when editing cells. For example, if you have a column that contains numerical data, the input field will automatically restrict the user to only entering numerical data. This helps to prevent errors that could occur if the user were to accidentally enter a non-numerical value. Additional input validation can be configured through the [Column configuration API](https://docs.streamlit.io/develop/api-reference/data/st.column_config). Keep reading below for an overview of column configuration, including validation options.
## [](https://docs.streamlit.io/develop/concepts/design/dataframes#configuring-columns)Configuring columns
You can configure the display and editing behavior of columns in `st.dataframe` and `st.data_editor` via the [Column configuration API](https://docs.streamlit.io/develop/api-reference/data/st.column_config). We have developed the API to let you add images, charts, and clickable URLs in dataframe and data editor columns. Additionally, you can make individual columns editable, set columns as categorical and specify which options they can take, hide the index of the dataframe, and much more.
Column configuration includes the following column types: Text, Number, Checkbox, Selectbox, Date, Time, Datetime, List, Link, Image, Line chart, Bar chart, and Progress. There is also a generic Column option. See the embedded app below to view these different column types. Each column type is individually previewed in the [Column configuration API](https://docs.streamlit.io/develop/api-reference/data/st.column_config) documentation.
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-column-config-overview.streamlit.app/?utm_medium=oembed&)
### [](https://docs.streamlit.io/develop/concepts/design/dataframes#format-values)Format values
A `format` parameter is available in column configuration for [Text](https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.textcolumn), [Date](https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.datecolumn), [Time](https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.timecolumn), and [Datetime](https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.datetimecolumn) columns. Chart-like columns can also be formatted. [Line chart](https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.linechartcolumn) and [Bar chart](https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.barchartcolumn) columns have a `y_min` and `y_max` parameters to set the vertical bounds. For a [Progress column](https://docs.streamlit.io/develop/api-reference/data/st.column_config/st.column_config.progresscolumn), you can declare the horizontal bounds with `min_value` and `max_value`.
### [](https://docs.streamlit.io/develop/concepts/design/dataf