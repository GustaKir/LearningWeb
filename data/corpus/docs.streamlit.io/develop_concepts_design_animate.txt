Title: Streamlit Documentation Overview
URL: https://docs.streamlit.io/develop/concepts/design/animate
Summary: This section introduces the Streamlit documentation, emphasizing the use of cookies for user interaction and providing navigational links for getting started and development concepts.
---

[![](https://docs.streamlit.io/logo.svg)Documentation](https://docs.streamlit.io/) _search_
Search
Ctrl-K
 _dark_mode_ _light_mode_
Change to dark mode
# Hello there üëã
Thanks for stopping by! We use cookies to help us understand how you interact with our website.
By clicking ‚ÄúAccept all‚Äù, you consent to our use of cookies. For more information, please see our [privacy policy](https://docs.streamlit.io/develop/concepts/design/www.streamlit.io/privacy-policy).
Cookie settingsReject allAccept all
  * [ _rocket_launch_ Get started](https://docs.streamlit.io/get-started)
    * [Installation](https://docs.streamlit.io/get-started/installation)
 _add_
    * [ Fundamentals](https://docs.streamlit.io/get-started/fundamentals)
 _add_
    * [ First steps](https://docs.streamlit.io/get-started/tutorials)
 _add_
  * [ _code_ Develop](https://docs.streamlit.io/develop)
    * [Concepts](https://docs.streamlit.io/develop/concepts)
 _remove_
      * CORE
      * [Architecture & execution](https://docs.streamlit.io/develop/concepts/architecture)
 _add_
      * [ Multipage apps](https://docs.streamlit.io/develop/concepts/multipage-apps)
 _add_
      * [ App design](https://docs.streamlit.io/develop/concepts/design)
 _remove_
        * [ Animate & update elements](https://docs.streamlit.io/develop/concepts/design/animate)
        * [Button behavior and examples](https://docs.streamlit.io/develop/concepts/design/buttons)
        * [Dataframes](https://docs.streamlit.io/develop/concepts/design/dataframes)
        * [Multithreading](https://docs.streamlit.io/develop/concepts/design/multithreading)
        * [Using custom classes](https://docs.streamlit.io/develop/concepts/design/custom-classes)
        * [Working with timezones](https://docs.streamlit.io/develop/concepts/design/timezone-handling)
      * ADDITIONAL
      * [Connections, secrets, & authentication](https://docs.streamlit.io/develop/concepts/connections)
 _add_
      * [ Custom components](https://docs.streamlit.io/develop/concepts/custom-components)
 _add_
      * [ Configuration & theming](https://docs.streamlit.io/develop/concepts/configuration)
 _add_
      * [ App testing](https://docs.streamlit.io/develop/concepts/app-testing)
 _add_
    * [ API reference](https://docs.streamlit.io/develop/api-reference)
 _add_
    * [ Tutorials](https://docs.streamlit.io/develop/tutorials)
 _add_
    * [ Quick reference](https://docs.streamlit.io/develop/quick-reference)
 _add_
  * [ _web_asset_ Deploy](https://docs.streamlit.io/deploy)
    * [Concepts](https://docs.streamlit.io/deploy/concepts)
 _add_
    * [ Streamlit Community Cloud](https://docs.streamlit.io/deploy/streamlit-community-cloud)
 _add_
    * [ Snowflake](https://docs.streamlit.io/deploy/snowflake)
    * [Other platforms](https://docs.streamlit.io/deploy/tutorials)
 _add_
  * [ _school_ Knowledge base](https://docs.streamlit.io/knowledge-base)
    * [FAQ](https://docs.streamlit.io/knowledge-base/using-streamlit)
    * [Installing dependencies](https://docs.streamlit.io/knowledge-base/dependencies)
    * [Deployment issues](https://docs.streamlit.io/knowledge-base/deploy)


  * [Home](https://docs.streamlit.io/)/
  * [Develop](https://docs.streamlit.io/develop)/
  * [Concepts](https://docs.streamlit.io/develop/concepts)/
  * [App design](https://docs.streamlit.io/develop/concepts/design)/
  * [Animate & update elements](https://docs.streamlit.io/develop/concepts/design/animate)


  1. Contents
  2. [st.empty containers](https://docs.streamlit.io/develop/concepts/design/animate#stempty-containers)
  3. [The .add_rows() method](https://docs.streamlit.io/develop/concepts/design/animate#the-add_rows-method)


# [](https://docs.streamlit.io/develop/concepts/design/animate#animate-and-update-elements)Animate and update elements
Sometimes you display a chart or dataframe and want to modify it live as the app runs (for example, in a loop). Some elements have built-in methods to allow you to update them in-place without rerunning the app.
Updatable elements include the following:
  * `st.empty` containers can be written to in sequence and will always show the last thing written. They can also be cleared with an additional `.empty()` called like a method.
  * `st.dataframe`, `st.table`, and many chart elements can be updated with the `.add_rows()` method which appends data.
  * `st.progress` elements can be updated with additional `.progress()` calls. They can also be cleared with a `.empty()` method call.
  * `st.status` containers have an `.update()` method to change their labels, expanded state, and status.
  * `st.toast` messages can be updated in place with additional `.toast()` calls.