Title: Fragments in Streamlit Architecture
URL: https://docs.streamlit.io/develop/concepts/architecture/fragments
Summary: This document outlines the concept of fragments in Streamlit, including their use cases, how to define and call them, execution flow, return values, automation of reruns, and comparisons to other Streamlit features like forms.
---

1. Contents
  2. [Use cases for fragments](https://docs.streamlit.io/develop/concepts/architecture/fragments#use-cases-for-fragments)
  3. [Defining and calling a fragment](https://docs.streamlit.io/develop/concepts/architecture/fragments#defining-and-calling-a-fragment)
  4. [Fragment execution flow](https://docs.streamlit.io/develop/concepts/architecture/fragments#fragment-execution-flow)
  5. [Fragment return values and interacting with the rest of your app](https://docs.streamlit.io/develop/concepts/architecture/fragments#fragment-return-values-and-interacting-with-the-rest-of-your-app)
  6. [Automate fragment reruns](https://docs.streamlit.io/develop/concepts/architecture/fragments#automate-fragment-reruns)
  7. [Compare fragments to other Streamlit features](https://docs.streamlit.io/develop/concepts/architecture/fragments#compare-fragments-to-other-streamlit-features)
  8. [Fragments vs forms](https://docs.streamlit.io/develop/concepts/architecture/fragments#fragments-vs-forms)
  9. [Fragments vs callbacks](https://docs.streamlit.io/develop/concepts/architecture/fragments#fragments-vs-callbacks)
  10. [Fragments vs custom components](https://docs.streamlit.io/develop/concepts/architecture/fragments#fragments-vs-custom-components)
  11. [Fragments vs caching](https://docs.streamlit.io/develop/concepts/architecture/fragments#fragments-vs-caching)
  12. [Limitations and unsupported behavior](https://docs.streamlit.io/develop/concepts/architecture/fragments#limitations-and-unsupported-behavior)


# [](https://docs.streamlit.io/develop/concepts/architecture/fragments#working-with-fragments)Working with fragments
Reruns are a central part of every Streamlit app. When users interact with widgets, your script reruns from top to bottom, and your app's frontend is updated. Streamlit provides several features to help you develop your app within this execution model. Streamlit version 1.37.0 introduced fragments to allow rerunning a portion of your code instead of your full script. As your app grows larger and more complex, these fragment reruns help your app be efficient and performant. Fragments give you finer, easy-to-understand control over your app's execution flow.
Before you read about fragments, we recommend having a basic understanding of [caching](https://docs.streamlit.io/develop/concepts/architecture/caching), [Session State](https://docs.streamlit.io/concepts/architecture/session-state), and [forms](https://docs.streamlit.io/develop/concepts/architecture/forms).
## [](https://docs.streamlit.io/develop/concepts/architecture/fragments#use-cases-for-fragments)Use cases for fragments
Fragments are versatile and applicable to a wide variety of circumstances. Here are just a few, common scenarios where fragments are useful:
  * Your app has multiple visualizations and each one takes time to load, but you have a filter input that only updates one of them.
  * You have a dynamic form that doesn't need to update the rest of your app (until the form is complete).
  * You want to automatically update a single component or group of components to stream data.