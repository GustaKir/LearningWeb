Title: Authenticating Users with Google Auth Platform
URL: https://docs.streamlit.io/develop/tutorials/authentication/google
Summary: This tutorial teaches how to use the Google Auth Platform to authenticate users, applicable for both private and organizational Google accounts. It outlines prerequisites, including required Python libraries and the need for a Google account.
---

# [](https://docs.streamlit.io/develop/tutorials/authentication/google#use-the-google-auth-platform-to-authenticate-users)Use the Google Auth Platform to authenticate users
Google is one of the most popular identity providers for social logins. You can use the Google Auth Platform with both private and organizational Google accounts. This tutorial configures authentication for anyone with a Google account. For more information, see Google's overview of the [Google Auth Platform](https://support.google.com/cloud/topic/15540269?hl=en&ref_topic=3473162&sjid=576431444945556851-NC) and [OpenID Connect](https://developers.google.com/identity/openid-connect/openid-connect#discovery).
## [](https://docs.streamlit.io/develop/tutorials/authentication/google#prerequisites)Prerequisites
  * This tutorial requires the following Python libraries:
`streamlit>=1.42.0 Authlib>=1.3.2 `
  * You should have a clean working directory called `your-repository`.
  * You must have a Google account and accept the terms of [Google Cloud](https://console.cloud.google.com/) to use their authentication service.
  * You must have a project in Google Cloud within which to create your application. For more information about managing your projects in Google Cloud, see [Creating and managing projects](https://cloud.google.com/resource-manager/docs/creating-managing-projects) in Google's documentation.


## [](https://docs.streamlit.io/develop/tutorials/authentication/google#summary)Summary
In this tutorial, you'll build an app that users can log in to with their Google accounts. When they log in, they'll see a personalized greeting with their name and have the option to log out.
Here's a look at what you'll build:
Complete code _expand_more_
`.streamlit/secrets.toml`
`[auth] redirect_uri = "http://localhost:8501/oauth2callback" cookie_secret = "xxx" client_id = "xxx" client_secret = "xxx" server_metadata_url = "https://accounts.google.com/.well-known/openid-configuration" `
`app.py`
`import streamlit as st def login_screen():   st.header("This app is private.")   st.subheader("Please log in.")   st.button("Log in with Google", on_click=st.login) if not st.experimental_user.is_logged_in:   login_screen() else:   st.header(f"Welcome, {st.experimental_user.name}!")   st.button("Log out", on_click=st.logout) `
## [](https://docs.streamlit.io/develop/tutorials/authentication/google#create-a-web-application-in-google-cloud-console)Create a web application in Google Cloud Console
In this section, you'll complete three steps to create your web application in your project in Google Cloud Console:
  * Configure your consent screen.
  * Configure your audience.
  * Configure your client.


The consent screen is what users see from Google within the authentication flow. The audience settings manage your application's status (_Testing_ or _Published_). Creating a client for your web application generates the ID and secrets needed to configure your Streamlit app. To learn more about consent screens, audience, and clients, see Google's overview of the [Google Auth Platform](https://support.google.com/cloud/topic/15540269?hl=en&ref_topic=3473162&sjid=576431444945556851-NC).
### [](https://docs.streamlit.io/develop/tutorials/authentication/google#configure-your-consent-screen)Configure your consent screen
  1. Go to the [Google Auth Platform](https://console.cloud.google.com/auth/overview), and sign in to Google.
  2. In the upper-left corner, select your project.
  3. In the left navigation menu, select "**Branding**."
  4. Fill in the required information for your application's consent screen.
This information controls what users see within the Google authentication flow. Your "**App name** " is displayed to users within Google's prompts. Google asks users to consent to sending their account information to your application. If you are developing locally and/or deploying on Streamlit Community Cloud, in "**Authorized domain** ," use `example.com`. For more information about the available fields, see [Setting up your OAuth consent screen](https://support.google.com/cloud/answer/10311615).
  5. At the bottom of the branding page, select "**SAVE**."


### [](https://docs.streamlit.io/develop/tutorials/authentication/google#configure-your-audience)Configure your audience
  1. In the left navigation menu, select "**Audience**."
  2. Below "OAuth user cap" â†’ "Test users," select "**ADD USERS**."
  3. Enter the email address for a personal Google account, and select "**SAVE**."
When you create a new application in the Google Auth Platform, its status is _Testing_. While the status is _Testing_ , only specific users can authenticate to your application; users can't register themselves. Therefore, add any email address you want to use for testing your app in development. When you're ready to publish your app, you'll return to this section and change the status to _Published_. After an application is published, your application will accept new users.