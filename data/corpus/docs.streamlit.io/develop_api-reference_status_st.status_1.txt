Title: st.status - Streamlit API Reference
URL: https://docs.streamlit.io/develop/api-reference/status/st.status
Summary: The st.status function in Streamlit allows users to insert a status container into their applications, designed to display output from long-running tasks. The container can hold multiple elements and features functionality for users to expand or collapse it, similar to st.expander.
---

1. Contents
  2. [st.status](https://docs.streamlit.io/develop/api-reference/status/st.status#ststatus)
  3. [StatusContainer.update](https://docs.streamlit.io/develop/api-reference/status/st.status#statuscontainerupdate)


## [](https://docs.streamlit.io/develop/api-reference/status/st.status#ststatus)st.status
Streamlit VersionVersion 1.44.0Version 1.43.0Version 1.42.0Version 1.41.0Version 1.40.0Version 1.39.0Version 1.38.0Version 1.37.0Version 1.36.0Version 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0
Insert a status container to display output from long-running tasks.
Inserts a container into your app that is typically used to show the status and details of a process or task. The container can hold multiple elements and can be expanded or collapsed by the user similar to `st.expander`. When collapsed, all that is visible is the status icon and label.
The label, state, and expanded state can all be updated by calling `.update()` on the returned object. To add elements to the returned container, you can use `with` notation (preferred) or just call methods directly on the returned object.
By default, `st.status()` initializes in the "running" state. When called using `with` notation, it automatically updates to the "complete" state at the end of the "with" block. See examples below for more details.
Function signature[[source]](https://github.com/streamlit/streamlit/blob/1.44.0/lib/streamlit/elements/layouts.py#L743 "View st.status source code on GitHub")  
---  
st.status(label, *, expanded=False, state="running")  
Parameters  
label (str) |  The initial label of the status container. The label can optionally contain GitHub-flavored Markdown of the following types: Bold, Italics, Strikethroughs, Inline Code, Links, and Images. Images display like icons, with a max height equal to the font height. Unsupported Markdown elements are unwrapped so only their children (text contents) render. Display unsupported elements as literal characters by backslash-escaping them. E.g., `"1\. Not an ordered list"`. See the `body` parameter of [`st.markdown`](https://docs.streamlit.io/develop/api-reference/text/st.markdown) for additional, supported Markdown directives.  
expanded (bool) |  If True, initializes the status container in "expanded" state. Defaults to False (collapsed).  
state ("running", "complete", or "error") |  The initial state of the status container which determines which icon is shown:
  * `running` (default): A spinner icon is shown.
  * `complete`: A checkmark icon is shown.
  * `error`: An error icon is shown.

  
Returns  
(StatusContainer) | A mutable status container that can hold multiple elements. The label, state, and expanded state can be updated after creation via `.update()`.  
#### Examples
You can use the `with` notation to insert any element into an status container:
```
import time
import streamlit as st
with st.status("Downloading data..."):
  st.write("Searching for data...")
  time.sleep(2)
  st.write("Found URL.")
  time.sleep(1)
  st.write("Downloading data...")
  time.sleep(1)
st.button("Rerun")
```

Copy
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-status.streamlit.app//?utm_medium=oembed&)
You can also use `.update()` on the container to change the label, state, or expanded state:
```
import time
import streamlit as st
with st.status("Downloading data...", expanded=True) as status:
  st.write("Searching for data...")
  time.sleep(2)
  st.write("Found URL.")
  time.sleep(1)
  st.write("Downloading data...")
  time.sleep(1)
  status.update(
    label="Download complete!", state="complete", expanded=False
  )
st.button("Rerun")