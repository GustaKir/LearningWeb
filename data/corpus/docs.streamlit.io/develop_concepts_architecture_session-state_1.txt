Title: Understanding Session State in Streamlit
URL: https://docs.streamlit.io/develop/concepts/architecture/session-state
Summary: This document explores the concept of session state in Streamlit, detailing its significance, initialization, and methods for reading and updating state. It includes practical examples such as building a counter and using callbacks with session state.
---

1. Contents
  2. [What is State?](https://docs.streamlit.io/develop/concepts/architecture/session-state#what-is-state)
  3. [Build a Counter](https://docs.streamlit.io/develop/concepts/architecture/session-state#build-a-counter)
  4. [Initialization](https://docs.streamlit.io/develop/concepts/architecture/session-state#initialization)
  5. [Reads and updates](https://docs.streamlit.io/develop/concepts/architecture/session-state#reads-and-updates)
  6. [Example 1: Add Session State](https://docs.streamlit.io/develop/concepts/architecture/session-state#example-1-add-session-state)
  7. [Example 2: Session State and Callbacks](https://docs.streamlit.io/develop/concepts/architecture/session-state#example-2-session-state-and-callbacks)
  8. [Example 3: Use args and kwargs in Callbacks](https://docs.streamlit.io/develop/concepts/architecture/session-state#example-3-use-args-and-kwargs-in-callbacks)
  9. [Example 4: Forms and Callbacks](https://docs.streamlit.io/develop/concepts/architecture/session-state#example-4-forms-and-callbacks)
  10. [Advanced concepts](https://docs.streamlit.io/develop/concepts/architecture/session-state#advanced-concepts)
  11. [Session State and Widget State association](https://docs.streamlit.io/develop/concepts/architecture/session-state#session-state-and-widget-state-association)
  12. [Serializable Session State](https://docs.streamlit.io/develop/concepts/architecture/session-state#serializable-session-state)
  13. [Caveats and limitations](https://docs.streamlit.io/develop/concepts/architecture/session-state#caveats-and-limitations)


# [](https://docs.streamlit.io/develop/concepts/architecture/session-state#add-statefulness-to-apps)Add statefulness to apps
## [](https://docs.streamlit.io/develop/concepts/architecture/session-state#what-is-state)What is State?
We define access to a Streamlit app in a browser tab as a **session**. For each browser tab that connects to the Streamlit server, a new session is created. Streamlit reruns your script from top to bottom every time you interact with your app. Each reruns takes place in a blank slate: no variables are shared between runs.
Session State is a way to share variables between reruns, for each user session. In addition to the ability to store and persist state, Streamlit also exposes the ability to manipulate state using Callbacks. Session state also persists across pages inside a [multipage app](https://docs.streamlit.io/develop/concepts/multipage-apps).
In this guide, we will illustrate the usage of **Session State** and **Callbacks** as we build a stateful Counter app.
For details on the Session State and Callbacks API, please refer to our [Session State API Reference Guide](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.session_state).
Also, check out this Session State basics tutorial video by Streamlit Developer Advocate Dr. Marisa Smith to get started:
## [](https://docs.streamlit.io/develop/concepts/architecture/session-state#build-a-counter)Build a Counter
Let's call our script `counter.py`. It initializes a `count` variable and has a button to increment the value stored in the `count` variable:
`import streamlit as st st.title('Counter Example') count = 0 increment = st.button('Increment') if increment:   count += 1 st.write('Count = ', count) `
No matter how many times we press the **_Increment_** button in the above app, the `count` remains at 1. Let's understand why:
  * Each time we press the **_Increment_** button, Streamlit reruns `counter.py` from top to bottom, and with every run, `count` gets initialized to `0` .
  * Pressing **_Increment_** subsequently adds 1 to 0, thus `count=1` no matter how many times we press **_Increment_**.