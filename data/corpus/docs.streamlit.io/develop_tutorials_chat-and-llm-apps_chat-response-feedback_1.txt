Title: Collecting User Feedback in a Chat App
URL: https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/chat-response-feedback
Summary: This tutorial demonstrates how to use Streamlit's `st.feedback` to gather user feedback on LLM responses in a chat application. It focuses on creating a chat interface with `st.chat_input` and `st.chat_message`, and emphasizes the requirement of Streamlit version 1.42.0 or higher.
---

# [](https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/chat-response-feedback#collect-user-feedback-about-llm-responses)Collect user feedback about LLM responses
A common task in a chat app is to collect user feedback about an LLM's responses. Streamlit includes `st.feedback` to conveniently collect user sentiment by displaying a group of selectable sentiment icons.
This tutorial uses Streamlit's chat commands and `st.feedback` to build a simple chat app that collects user feedback about each response.
## [](https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/chat-response-feedback#applied-concepts)Applied concepts
  * Use `st.chat_input` and `st.chat_message` to create a chat interface.
  * Use `st.feedback` to collect user sentiment about chat responses.


## [](https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/chat-response-feedback#prerequisites)Prerequisites
  * This tutorial requires the following version of Streamlit:
`streamlit>=1.42.0 `
  * You should have a clean working directory called `your-repository`.
  * You should have a basic understanding of [Session State](https://docs.streamlit.io/develop/concepts/architecture/session-state).


## [](https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/chat-response-feedback#summary)Summary
In this example, you'll build a chat interface. To avoid API calls, the chat app will echo the user's prompt within a fixed response. Each chat response will be followed by a feedback widget where the user can vote "thumb up" or "thumb down." In the following code, a user can't change their feedback after it's given. If you want to let users change their rating, see the optional instructions at the end of this tutorial.
Here's a look at what you'll build:
Complete code _expand_more_
`import streamlit as st import time  def chat_stream(prompt):   response = f'You said, "{prompt}" ...interesting.' for char in response: yield char     time.sleep(0.02) def save_feedback(index):   st.session_state.history[index]["feedback"] = st.session_state[f"feedback_{index}"] if "history" not in st.session_state:   st.session_state.history = [] for i, message in enumerate(st.session_state.history): with st.chat_message(message["role"]):     st.write(message["content"]) if message["role"] == "assistant":       feedback = message.get("feedback", None)       st.session_state[f"feedback_{i}"] = feedback       st.feedback( "thumbs",         key=f"feedback_{i}",         disabled=feedback is not None,         on_change=save_feedback,         args=[i], ) if prompt := st.chat_input("Say something"): with st.chat_message("user"):     st.write(prompt)   st.session_state.history.append({"role": "user", "content": prompt}) with st.chat_message("assistant"):     response = st.write_stream(chat_stream(prompt))     st.feedback( "thumbs",       key=f"feedback_{len(st.session_state.history)}",       on_change=save_feedback,       args=[len(st.session_state.history)], )   st.session_state.history.append({"role": "assistant", "content": response}) `
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-tutorial-chat-response-feedback.streamlit.app/?utm_medium=oembed)
## [](https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/chat-response-feedback#build-the-example)Build the example
### [](https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/chat-response-feedback#initialize-your-app)Initialize your app
  1. In `your_repository`, create a file named `app.py`.
  2. In a terminal, change directories to `your_repository`, and start your app:
`streamlit run app.py `
Your app will be blank because you still need to add code.
  3. In `app.py`, write the following:
`import streamlit as st import time `
You'll use `time` to build a simulated chat response stream.
  4. Save your `app.py` file, and view your running app.
  5. In your app, select "**Always rerun** ", or press the "**A** " key.
Your preview will be blank but will automatically update as you save changes to `app.py`.
  6. Return to your code.


### [](https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/chat-response-feedback#build-a-function-to-simulate-a-chat-response-stream)Build a function to simulate a chat response stream
To begin, you'll define a function to stream a fixed chat response. You can skip this section if you just want to copy the function.
Complete function to simulate a chat stream _expand_more_
`def chat_stream(prompt):   response = f'You said, "{prompt}" ...interesting.' for char in response: yield char     time.sleep(0.02) `
  1. Define a function which accepts a prompt and formulates a response:
`def chat_stream(prompt):   response = f'You said, "{prompt}" ...interesting.' `
  2. Loop through the characters and yield each one at 0.02-second intervals:
` for char in response: yield char     time.sleep(.02) `