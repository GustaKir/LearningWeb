Title: Bar Chart Configuration Options
URL: https://docs.streamlit.io/develop/api-reference/charts/st.bar_chart
Summary: This section outlines configuration options for the Streamlit bar chart, including the orientation of the bars (horizontal or vertical), stacking methods (non-overlapping, overlapping, normalized, centered, or side by side), and the desired width of the chart in pixels.
---

horizontal (bool) |  Whether to make the bars horizontal. If this is `False` (default), the bars display vertically. If this is `True`, Streamlit swaps the x-axis and y-axis and the bars display horizontally.  
stack (bool, "normalize", "center", "layered", or None) |  Whether to stack the bars. If this is `None` (default), Streamlit uses Vega's default. Other values can be as follows:
  * `True`: The bars form a non-overlapping, additive stack within the chart.
  * `False`: The bars display side by side.
  * `"layered"`: The bars overlap each other without stacking.
  * `"normalize"`: The bars are stacked and the total height is normalized to 100% of the height of the chart.
  * `"center"`: The bars are stacked and shifted to center the total height around an axis.

  
width (int or None) |  Desired width of the chart expressed in pixels. If `width` is `None` (default), Streamlit sets the width of the chart to fit its contents according to the plotting library, up to the width of the parent container. If `width` is greater than the width of the parent container, Streamlit sets the chart width to match the width of the parent container. To use `width`, you must set `use_container_width=False`.  
height (int or None) |  Desired height of the chart expressed in pixels. If `height` is `None` (default), Streamlit sets the height of the chart to fit its contents according to the plotting library.  
use_container_width (bool) |  Whether to override `width` with the width of the parent container. If `use_container_width` is `True` (default), Streamlit sets the width of the chart to match the width of the parent container. If `use_container_width` is `False`, Streamlit sets the chart's width according to `width`.  
#### Examples
```
import streamlit as st
import pandas as pd
import numpy as np
chart_data = pd.DataFrame(np.random.randn(20, 3), columns=["a", "b", "c"])
st.bar_chart(chart_data)
```

Copy
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-bar-chart.streamlit.app//?utm_medium=oembed&)
You can also choose different columns to use for x and y, as well as set the color dynamically based on a 3rd column (assuming your dataframe is in long format):
```
import streamlit as st
import pandas as pd
import numpy as np
chart_data = pd.DataFrame(
  {
    "col1": list(range(20)) * 3,
    "col2": np.random.randn(60),
    "col3": ["A"] * 20 + ["B"] * 20 + ["C"] * 20,
  }
)
st.bar_chart(chart_data, x="col1", y="col2", color="col3")
```

Copy
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-bar-chart1.streamlit.app//?utm_medium=oembed&)
If your dataframe is in wide format, you can group multiple columns under the y argument to show multiple series with different colors:
```
import streamlit as st
import pandas as pd
import numpy as np
chart_data = pd.DataFrame(
  {
    "col1": list(range(20)),
    "col2": np.random.randn(20),
    "col3": np.random.randn(20),
  }
)
st.bar_chart(
  chart_data,
  x="col1",
  y=["col2", "col3"],
  color=["#FF0000", "#0000FF"], # Optional
)
```

Copy
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-bar-chart2.streamlit.app//?utm_medium=oembed&)
You can rotate your bar charts to display horizontally.
```
import streamlit as st
from vega_datasets import data
source = data.barley()
st.bar_chart(source, x="variety", y="yield", color="site", horizontal=True)
```

Copy
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-bar-chart-horizontal.streamlit.app//?utm_medium=oembed&)
You can unstack your bar charts.
```
import streamlit as st
from vega_datasets import data
source = data.barley()
st.bar_chart(source, x="year", y="yield", color="site", stack=False)