Title: Using Streamlit Commands in Cached Functions
URL: https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_resource
Summary: Since version 1.16.0, Streamlit allows commands to be included in cached functions. When a function with commands, like `st.success`, is run for the first time, the command executes and displays a message. On subsequent runs, Streamlit replays the command from the cache, ensuring that static elements are consistently shown.
---

```

Copy
## [](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_resource#using-streamlit-commands-in-cached-functions)Using Streamlit commands in cached functions
### [](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_resource#static-elements)Static elements
Since version 1.16.0, cached functions can contain Streamlit commands! For example, you can do this:
`from transformers import pipeline @st.cache_resource def load_model():   model = pipeline("sentiment-analysis")   st.success("Loaded NLP model from Hugging Face!") # ðŸ‘ˆ Show a success message return model `
As we know, Streamlit only runs this function if it hasnâ€™t been cached before. On this first run, the `st.success` message will appear in the app. But what happens on subsequent runs? It still shows up! Streamlit realizes that there is an `st.` command inside the cached function, saves it during the first run, and replays it on subsequent runs. Replaying static elements works for both caching decorators.
You can also use this functionality to cache entire parts of your UI:
`@st.cache_resource def load_model():   st.header("Data analysis")   model = torchvision.models.resnet50(weights=ResNet50_Weights.DEFAULT)   st.success("Loaded model!")   st.write("Turning on evaluation mode...")   model.eval()   st.write("Here's the model:") return model `
### [](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_resource#input-widgets)Input widgets
You can also use [interactive input widgets](https://docs.streamlit.io/develop/api-reference/widgets) like `st.slider` or `st.text_input` in cached functions. Widget replay is an experimental feature at the moment. To enable it, you need to set the `experimental_allow_widgets` parameter:
`@st.cache_resource(experimental_allow_widgets=True) # ðŸ‘ˆ Set the parameter def load_model():   pretrained = st.checkbox("Use pre-trained model:") # ðŸ‘ˆ Add a checkbox   model = torchvision.models.resnet50(weights=ResNet50_Weights.DEFAULT, pretrained=pretrained) return model `
Streamlit treats the checkbox like an additional input parameter to the cached function. If you uncheck it, Streamlit will see if it has already cached the function for this checkbox state. If yes, it will return the cached value. If not, it will rerun the function using the new slider value.
Using widgets in cached functions is extremely powerful because it lets you cache entire parts of your app. But it can be dangerous! Since Streamlit treats the widget value as an additional input parameter, it can easily lead to excessive memory usage. Imagine your cached function has five sliders and returns a 100 MB DataFrame. Then weâ€™ll add 100 MB to the cache for _every permutation_ of these five slider values â€“ even if the sliders do not influence the returned data! These additions can make your cache explode very quickly. Please be aware of this limitation if you use widgets in cached functions. We recommend using this feature only for isolated parts of your UI where the widgets directly influence the cached return value.
_priority_high_
#### Warning
Support for widgets in cached functions is currently experimental. We may change or remove it anytime without warning. Please use it with care!
_push_pin_
#### Note
Two widgets are currently not supported in cached functions: `st.file_uploader` and `st.camera_input`. We may support them in the future. Feel free to [open a GitHub issue](https://github.com/streamlit/streamlit/issues) if you need them!
[Previous: st.cache_data](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_data)[Next: st.experimental_memo](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.experimental_memo) _forum_
### Still have questions?
Our [forums](https://discuss.streamlit.io) are full of helpful information and Streamlit experts.
[Home](https://docs.streamlit.io/)Contact Us[Community](https://discuss.streamlit.io)[](https://github.com/streamlit "GitHub")[](https://www.youtube.com/channel/UC3LD42rjj-Owtxsa6PwGU5Q "YouTube")[](https://twitter.com/streamlit "Twitter")[](https://www.linkedin.com/company/streamlit "LinkedIn")[](https://info.snowflake.com/streamlit-newsletter-sign-up.html "Newsletter")
Â© 2025 Snowflake Inc.Cookie policy
 _forum_ Ask AI