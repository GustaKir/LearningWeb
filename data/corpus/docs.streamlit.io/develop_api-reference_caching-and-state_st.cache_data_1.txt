Title: Streamlit st.cache_data API Reference
URL: https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_data
Summary: This documentation focuses on the `st.cache_data` API in Streamlit, including methods for caching, clearing caches, and using Streamlit commands in cached functions. It provides an overview of contents and sections related to caching functionalities.
---

1. Contents
  2. [st.cache_data](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_data#stcache_data)
  3. [st.cache_data.clear](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_data#stcache_dataclear)
  4. [Example](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_data#example)
  5. [CachedFunc.clear](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_data#cachedfuncclear)
  6. [Using Streamlit commands in cached functions](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_data#using-streamlit-commands-in-cached-functions)
  7. [Static elements](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_data#static-elements)
  8. [Input widgets](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_data#input-widgets)


 _star_
#### Tip
This page only contains information on the `st.cache_data` API. For a deeper dive into caching and how to use it, check out [Caching](https://docs.streamlit.io/develop/concepts/architecture/caching).
## [](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.cache_data#stcache_data)st.cache_data
Streamlit VersionVersion 1.44.0Version 1.43.0Version 1.42.0Version 1.41.0Version 1.40.0Version 1.39.0Version 1.38.0Version 1.37.0Version 1.36.0Version 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0
Decorator to cache functions that return data (e.g. dataframe transforms, database queries, ML inference).
Cached objects are stored in "pickled" form, which means that the return value of a cached function must be pickleable. Each caller of the cached function gets its own copy of the cached data.
You can clear a function's cache with `func.clear()` or clear the entire cache with `st.cache_data.clear()`.
A function's arguments must be hashable to cache it. If you have an unhashable argument (like a database connection) or an argument you want to exclude from caching, use an underscore prefix in the argument name. In this case, Streamlit will return a cached value when all other arguments match a previous function call. Alternatively, you can declare custom hashing functions with `hash_funcs`.
To cache global resources, use `st.cache_resource` instead. Learn more about caching at <https://docs.streamlit.io/develop/concepts/architecture/caching>.
Function signature[[source]](https://github.com/streamlit/streamlit/blob/1.44.0/lib/streamlit/runtime/caching/cache_data_api.py#L379 "View st.cache_data source code on GitHub")  
---  
st.cache_data(func=None, *, ttl, max_entries, show_spinner, persist, experimental_allow_widgets, hash_funcs=None)  
Parameters  
func (callable) |  The function to cache. Streamlit hashes the function's source code.  
ttl (float, timedelta, str, or None) |  The maximum time to keep an entry in the cache. Can be one of:
  * `None` if cache entries should never expire (default).
  * A number specifying the time in seconds.
  * A string specifying the time in a format supported by [Pandas's Timedelta constructor](https://pandas.pydata.org/docs/reference/api/pandas.Timedelta.html), e.g. `"1d"`, `"1.5 days"`, or `"1h23s"`.
  * A `timedelta` object from [Python's built-in datetime library](https://docs.python.org/3/library/datetime.html#timedelta-objects), e.g. `timedelta(days=1)`.

Note that `ttl` will be ignored if `persist="disk"` or `persist=True`.  
max_entries (int or None) |  The maximum number of entries to keep in the cache, or None for an unbounded cache. When a new entry is added to a full cache, the oldest cached entry will be removed. Defaults to None.  
show_spinner (bool or str) |  Enable the spinner. Default is True to show a spinner when there is a "cache miss" and the cached data is being created. If string, value of show_spinner param will be used for spinner text.  
persist ("disk", bool, or None) |  Optional location to persist cached data to. Passing "disk" (or True) will persist the cached data to the local disk. None (or False) will disable persistence. The default is None.  
experimental_allow_widgets (bool) |  _delete_ The cached widget replay functionality was removed in 1.38. Please remove the `experimental_allow_widgets` parameter from your caching decorators. This parameter will be removed in a future version. Allow widgets to be used in the cached function. Defaults to False.  
hash_funcs (dict or None) |  Mapping of types or fully qualified names to hash functions. This is used to override the behavior of the hasher inside Streamlit's caching mechanism: when the hasher encounters an object, it will first check to see if its type matches a key in this dict and, if so, will use the provided function to generate a hash for it. See below for an example of how this can be used.  
#### Example