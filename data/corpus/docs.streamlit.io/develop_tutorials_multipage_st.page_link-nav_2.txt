Title: Implementing Authenticated and Unauthenticated Menus in Streamlit
URL: https://docs.streamlit.io/develop/tutorials/multipage/st.page_link-nav
Summary: This section explains how to manage user roles and navigation menus in a Streamlit application. It describes the use of `st.session_state.role` to track user roles and provides a code snippet for creating menus for authenticated and unauthenticated users through the `authenticated_menu()` and `unauthenticated_menu()` functions.
---

We'll call `menu()` on the main page and call `menu_with_redirect()` on the other pages. `st.session_state.role` will store the current selected role. If this value does not exist or is set to `None`, then the user is not logged in. Otherwise, it will hold the user's role as a string: `"user"`, `"admin"`, or `"super-admin"`.
Add the following `menu.py` file to your working directory. (We'll describe the functions in more detail below.)
`import streamlit as st  def authenticated_menu(): # Show a navigation menu for authenticated users   st.sidebar.page_link("app.py", label="Switch accounts")   st.sidebar.page_link("pages/user.py", label="Your profile") if st.session_state.role in ["admin", "super-admin"]:     st.sidebar.page_link("pages/admin.py", label="Manage users")     st.sidebar.page_link( "pages/super-admin.py",       label="Manage admin access",       disabled=st.session_state.role != "super-admin", ) def unauthenticated_menu(): # Show a navigation menu for unauthenticated users   st.sidebar.page_link("app.py", label="Log in") def menu(): # Determine if a user is logged in or not, then show the correct # navigation menu if "role" not in st.session_state or st.session_state.role is None:     unauthenticated_menu() return   authenticated_menu() def menu_with_redirect(): # Redirect users to the main page if not logged in, otherwise continue to # render the navigation menu if "role" not in st.session_state or st.session_state.role is None:     st.switch_page("app.py")   menu() `
Let's take a closer look at `authenticated_menu()`. When this function is called, `st.session_state.role` exists and has a value other than `None`.
`def authenticated_menu(): # Show a navigation menu for authenticated users `
The first two pages in the navigation menu are available to all users. Since we know a user is logged in when this function is called, we'll use the label "Switch accounts" for the main page. (If you don't use the `label` parameter, the page name will be derived from the file name like it is with the default sidebar navigation.)
`  st.sidebar.page_link("app.py", label="Switch accounts")   st.sidebar.page_link("pages/user.py", label="Your profile") `
We only want to show the next two pages to admins. Furthermore, we've chosen to disable—but not hide—the super-admin page when the admin user is not a super-admin. We do this using the `disabled` parameter. (`disabled=True` when the role is not `"super-admin"`.)
`  if st.session_state.role in ["admin", "super-admin"]:     st.sidebar.page_link("pages/admin.py", label="Manage users")     st.sidebar.page_link(       "pages/super-admin.py",       label="Manage admin access",       disabled=st.session_state.role != "super-admin",     ) `
It's that simple! `unauthenticated_menu()` will only show a link to the main page of the app with the label "Log in." `menu()` does a simple inspection of `st.session_state.role` to switch between the two menu-rendering functions. Finally, `menu_with_redirect()` extends `menu()` to redirect users to `app.py` if they aren't logged in.
_star_
#### Tip
If you want to include emojis in your page labels, you can use the `icon` parameter. There's no need to include emojis in your file name or the `label` parameter.
### [](https://docs.streamlit.io/develop/tutorials/multipage/st.page_link-nav#create-the-main-file-of-your-app)Create the main file of your app
The main `app.py` file will serve as a pseudo-login page. The user can choose a role from the `st.selectbox` widget. A few bits of logic will save that role into Session State to preserve it while navigating between pages—even when returning to `app.py`.
Add the following `app.py` file to your working directory:
`import streamlit as st from menu import menu # Initialize st.session_state.role to None if "role" not in st.session_state:   st.session_state.role = None # Retrieve the role from Session State to initialize the widget st.session_state._role = st.session_state.role def set_role(): # Callback function to save the role selection to Session State   st.session_state.role = st.session_state._role  # Selectbox to choose role st.selectbox( "Select your role:", [None, "user", "admin", "super-admin"],   key="_role",   on_change=set_role, ) menu() # Render the dynamic menu! `
### [](https://docs.streamlit.io/develop/tutorials/multipage/st.page_link-nav#add-other-pages-to-your-app)Add other pages to your app
Add the following `pages/user.py` file:
`import streamlit as st from menu import menu_with_redirect # Redirect to app.py if not logged in, otherwise show the navigation menu menu_with_redirect() st.title("This page is available to all users") st.markdown(f"You are currently logged with the role of {st.session_state.role}.") `
Session State resets if a user manually navigates to a page by URL. Therefore, if a user tries to access an admin page in this example, Session State will be cleared, and they will be redirected to the main page as an unauthenicated user. However, it's still good p