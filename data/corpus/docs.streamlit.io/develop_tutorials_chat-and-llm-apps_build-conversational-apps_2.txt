Title: Building Conversational Apps with Chat Elements in Streamlit
URL: https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps
Summary: This section introduces the chat elements available in Streamlit for creating conversational apps. It highlights two primary components: `st.chat_message`, which allows the display of chat messages, and `st.chat_input`, which enables user message input. Both elements can be used together or separately, and additional resources, such as a tutorial video, are mentioned for further learning.
---

Before we start building, let's take a closer look at the chat elements we'll use.
## [](https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps#chat-elements)Chat elements
Streamlit offers several commands to help you build conversational apps. These chat elements are designed to be used in conjunction with each other, but you can also use them separately.
[`st.chat_message`](https://docs.streamlit.io/develop/api-reference/chat/st.chat_message) lets you insert a chat message container into the app so you can display messages from the user or the app. Chat containers can contain other Streamlit elements, including charts, tables, text, and more. [`st.chat_input`](https://docs.streamlit.io/develop/api-reference/chat/st.chat_input) lets you display a chat input widget so the user can type in a message.
For an overview of the API, check out this video tutorial by Chanin Nantasenamat ([@dataprofessor](https://www.youtube.com/dataprofessor)), a Senior Developer Advocate at Streamlit.
### [](https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps#stchat_message)st.chat_message
`st.chat_message` lets you insert a multi-element chat message container into your app. The returned container can contain any Streamlit element, including charts, tables, text, and more. To add elements to the returned container, you can use `with` notation.
`st.chat_message`'s first parameter is the `name` of the message author, which can be either `"user"` or `"assistant"` to enable preset styling and avatars, like in the demo above. You can also pass in a custom string to use as the author name. Currently, the name is not shown in the UI but is only set as an accessibility label. For accessibility reasons, you should not use an empty string.
Here's an minimal example of how to use `st.chat_message` to display a welcome message:
`import streamlit as st with st.chat_message("user"):   st.write("Hello ðŸ‘‹") `
![](https://docs.streamlit.io/images/knowledge-base/chat-message-hello.png)
Notice the message is displayed with a default avatar and styling since we passed in `"user"` as the author name. You can also pass in `"assistant"` as the author name to use a different default avatar and styling, or pass in a custom name and avatar. See the [API reference](https://docs.streamlit.io/develop/api-reference/chat/st.chat_message) for more details.
`import streamlit as st import numpy as np with st.chat_message("assistant"):   st.write("Hello human")   st.bar_chart(np.random.randn(30, 3)) `
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-chat-message-user1.streamlit.app/?utm_medium=oembed)
While we've used the preferred `with` notation in the above examples, you can also just call methods directly in the returned objects. The below example is equivalent to the one above:
`import streamlit as st import numpy as np message = st.chat_message("assistant") message.write("Hello human") message.bar_chart(np.random.randn(30, 3)) `
So far, we've displayed predefined messages. But what if we want to display messages based on user input?
### [](https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps#stchat_input)st.chat_input
`st.chat_input` lets you display a chat input widget so the user can type in a message. The returned value is the user's input, which is `None` if the user hasn't sent a message yet. You can also pass in a default prompt to display in the input widget. Here's an example of how to use `st.chat_input` to display a chat input widget and show the user's input:
`import streamlit as st prompt = st.chat_input("Say something") if prompt:   st.write(f"User has sent the following prompt: {prompt}") `
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-chat-input.streamlit.app/?utm_medium=oembed)
Pretty straightforward, right? Now let's combine `st.chat_message` and `st.chat_input` to build a bot the mirrors or echoes your input.
## [](https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/build-conversational-apps#build-a-bot-that-mirrors-your-input)Build a bot that mirrors your input
In this section, we'll build a bot that mirrors or echoes your input. More specifically, the bot will respond to your input with the same message. We'll use `st.chat_message` to display the user's input and `st.chat_input` to accept user input. We'll also use [session state](https://docs.streamlit.io/develop/concepts/architecture/session-state) to store the chat history so we can display it in the chat message container.
First, let's think about the different components we'll need to build our bot:
  * Two chat message containers to display messages from the user and the bot, respectively.
  * A chat input widget so the user can type in a message.
  * A way to store the chat history so we can display it in the chat message containers. We can use a list to store the messages, and append to it ev