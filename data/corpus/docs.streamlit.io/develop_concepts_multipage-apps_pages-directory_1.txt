Title: Creating Multipage Apps with the Pages Directory
URL: https://docs.streamlit.io/develop/concepts/multipage-apps/pages-directory
Summary: This section explains how to create multipage apps in Streamlit using the `pages/` directory. It highlights the automatic recognition of pages and their display in a sidebar navigation widget, while assuming familiarity with key page terminology.
---

# [](https://docs.streamlit.io/develop/concepts/multipage-apps/pages-directory#creating-multipage-apps-using-the-pages-directory)Creating multipage apps using the `pages/` directory
The most customizable method for declaring multipage apps is using [Page and navigation](https://docs.streamlit.io/develop/concepts/multipage-apps/page-and-navigation). However, Streamlit also provides a frictionless way to create multipage apps where pages are automatically recognized and shown in a navigation widget inside your app's sidebar. This method uses the `pages/` directory.
This page assumes you understand the [Page terminology](https://docs.streamlit.io/develop/concepts/multipage-apps/overview#page-terminology) presented in the overview.
## [](https://docs.streamlit.io/develop/concepts/multipage-apps/pages-directory#app-structure)App structure
When you use the `pages/` directory, Streamlit identifies pages in your multipage app by directory structure and filenames. Your entrypoint file (the file you pass to `streamlit run`), is your app's homepage. When you have a `pages/` directory next to your entrypoint file, Streamlit will identify each Python file within it as a page. The following example has three pages. `your_homepage.py` is the entrypoint file and homepage.
`your_working_directory/ ├── pages/ │  ├── a_page.py │  └── another_page.py └── your_homepage.py `
Run your multipage app just like you would for a single-page app. Pass your entrypoint file to `streamlit run`.
`streamlit run your_homepage.py `
Only `.py` files in the `pages/` directory will be identified as pages. Streamlit ignores all other files in the `pages/` directory and its subdirectories. Streamlit also ignores Python files in subdirectories of `pages/`.
_priority_high_
#### Important
If you call `st.navigation` in your app (in any session), Streamlit will switch to using the newer, Page-and-navigation multipage structure. In this case, the `pages/` directory will be ignored across all sessions. You will not be able to revert back to the `pages/` directory unless you restart you app.
### [](https://docs.streamlit.io/develop/concepts/multipage-apps/pages-directory#how-pages-are-sorted-in-the-sidebar)How pages are sorted in the sidebar
See the overview to understand how Streamlit assigns [Automatic page labels and URLs](https://docs.streamlit.io/develop/concepts/multipage-apps/overview#automatic-page-labels-and-urls) based on the `number`, `separator`, `identifier`, and `".py"` extension that constitute a filename.
The entrypoint file is always displayed first. The remaining pages are sorted as follows:
  * Files that have a `number` appear before files without a `number`.
  * Files are sorted based on the `number` (if any), followed by the `label` (if any).
  * When files are sorted, Streamlit treats the `number` as an actual number rather than a string. So `03` is the same as `3`.