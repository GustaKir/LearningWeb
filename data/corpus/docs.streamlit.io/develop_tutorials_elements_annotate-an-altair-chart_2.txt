Title: Building an Interactive Time-Series Chart with Altair in Streamlit
URL: https://docs.streamlit.io/develop/tutorials/elements/annotate-an-altair-chart
Summary: This section explains how to create an interactive time-series chart representing stock prices using Streamlit and Altair. It covers importing data from `vega_datasets`, utilizing the `@st.cache_data` decorator for caching data retrieval, and defining a mouseover selection event for better interactivity in the chart.
---

### [](https://docs.streamlit.io/develop/tutorials/elements/annotate-an-altair-chart#build-the-data-layer)Build the data layer
You'll build an interactive time-series chart of the stock prices with a multi-line tooltip. The x-axis represents the date, and the y-axis represents the stock price.
  1. Import data from `vega_datasets`.
`@st.cache_data def get_data():   source = data.stocks()   source = source[source.date.gt("2004-01-01")] return source stock_data = get_data() `
The `@st.cache_data` decorator turns `get_data()` into a cahced function. Streamlit will only download the data once since the data will be saved in a cache. For more information about caching, see [Caching overview](https://docs.streamlit.io/develop/concepts/architecture/caching).
  2. Define a mouseover selection event in Altair.
`hover = alt.selection_single(   fields=["date"],   nearest=True,   on="mouseover",   empty="none", ) `
This defines a mouseover selection for points. `fields=["date"]` allows Altair to identify other points with the same date. You will use this to create a vertical line highlight when a user hovers over a point.
  3. Define a basic line chart to graph the five series in your data set.
`lines = (   alt.Chart(stock_data, title="Evolution of stock prices") .mark_line() .encode(     x="date",     y="price",     color="symbol", ) ) `
  4. Draw points on the lines and highlight them based on the mouseover selection.
`points = lines.transform_filter(hover).mark_circle(size=65) `
Since the mouseover selection includes `fields=["date"]`, Altair will draw circles on each series at the same date.
  5. Draw a vertical rule at the location of the mouseover selection.
`tooltips = (   alt.Chart(stock_data) .mark_rule() .encode(     x="yearmonthdate(date)",     y="price",     opacity=alt.condition(hover, alt.value(0.3), alt.value(0)),     tooltip=[       alt.Tooltip("date", title="Date"),       alt.Tooltip("price", title="Price (USD)"), ], ) .add_selection(hover) ) `
The `opacity` parameter ensures each vertical line is only visible when it's part of a mouseover selection. Each `alt.Tooltip` adds a line to your multi-line tooltip.
  6. Combine the lines, points, and tooltips into a single chart.
`data_layer = lines + points + tooltips `
  7. Optional: Test out your code by rendering your data layer.
`st.altair_chart(data_layer, use_container_width=True) `
Save your file and examine the chart in your app. Use your mouse to hover over points. Observe the circle marks, vertical line, and tooltip as you hover over a point. Delete the line or keep it at the end of your app to be updated as you continue.


### [](https://docs.streamlit.io/develop/tutorials/elements/annotate-an-altair-chart#build-the-annotation-layer)Build the annotation layer
Now that you have the first chart that shows the data, you can annotate it with text and an emoji. In this section, you'll add some emojis and tooltips to mark specifc points of interest.
  1. Create a list of annotations.
`ANNOTATIONS = [ ("Sep 01, 2007", 450, "ðŸ™‚", "Something's going well for GOOG & AAPL."), ("Nov 01, 2008", 220, "ðŸ™‚", "The market is recovering."), ("Dec 01, 2007", 750, "ðŸ˜±", "Something's going wrong for GOOG & AAPL."), ("Dec 01, 2009", 680, "ðŸ˜±", "A hiccup for GOOG."), ] annotations_df = pd.DataFrame(   ANNOTATIONS, columns=["date", "price", "marker", "description"] ) annotations_df.date = pd.to_datetime(annotations_df.date) `
The first two columns ("date" and "price") determine where Altair will place the marker. The third column ("marker") determines what icon Altair will place. The last column ("description") will fill in the associated tooltip.
  2. Create a scatter plot with the x-axis representing the date and the y-axis representing the height ("price") of each annotation.
`annotation_layer = (   alt.Chart(annotations_df) .mark_text(size=20, dx=-10, dy=0, align="left") .encode(x="date:T", y=alt.Y("price:Q"), text="marker", tooltip="description") ) `
The `dx=-10, dy=0` inside of `.mark_text()` offsets the icons so they are centered at the coordinate in your annotations dataframe. The four columns are passed to the chart through the `.encode()` method. If you want to use the same marker for all points, you can remove `text="marker"` from the `.encode()` method and add the marker to `.mark_text()`. For example, `.mark_text(text="ðŸ¥³")` would make all the icons be "ðŸ¥³". For more information about `.mark_text()`, see Altair's [documentation](https://altair-viz.github.io/user_guide/marks.html).


### [](https://docs.streamlit.io/develop/tutorials/elements/annotate-an-altair-chart#combine-the-chart-layers)Combine the chart layers
  1. Define the combined chart.
`combined_chart = data_layer + annotation_layer `
  2. Display the chart in Streamlit.
`st.altair_chart(combined_chart, use_container_width=True) `