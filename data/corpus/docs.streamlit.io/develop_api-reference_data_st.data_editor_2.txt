Title: Data Editor Configuration in Streamlit
URL: https://docs.streamlit.io/develop/api-reference/data/st.data_editor
Summary: This documentation chunk covers the configuration options for the data editor in Streamlit, including index column setup, row addition and deletion settings, column editing controls, unique key assignment, and handling value change callbacks.
---

To configure the index column(s), use `_index` as the column name.  
num_rows ("fixed" or "dynamic") |  Specifies if the user can add and delete rows in the data editor. If "fixed", the user cannot add or delete rows. If "dynamic", the user can add and delete rows in the data editor, but column sorting is disabled. Defaults to "fixed".  
disabled (bool or Iterable of str) |  Controls the editing of columns. If True, editing is disabled for all columns. If an Iterable of column names is provided (e.g., `disabled=("col1", "col2"))`, only the specified columns will be disabled for editing. If False (default), all columns that support editing are editable.  
key (str) |  An optional string to use as the unique key for this widget. If this is omitted, a key will be generated for the widget based on its content. No two widgets may have the same key.  
on_change (callable) |  An optional callback invoked when this data_editor's value changes.  
args (tuple) |  An optional tuple of args to pass to the callback.  
kwargs (dict) |  An optional dict of kwargs to pass to the callback.  
row_height (int or None) |  The height of each row in the data editor in pixels. If `row_height` is `None` (default), Streamlit will use a default row height, which fits one line of text.  
Returns  
(pandas.DataFrame, pandas.Series, pyarrow.Table, numpy.ndarray, list, set, tuple, or dict.) | The edited data. The edited data is returned in its original data type if it corresponds to any of the supported return types. All other data types are returned as a `pandas.DataFrame`.  
#### Examples
```
import streamlit as st
import pandas as pd
df = pd.DataFrame(
  [
    {"command": "st.selectbox", "rating": 4, "is_widget": True},
    {"command": "st.balloons", "rating": 5, "is_widget": False},
    {"command": "st.time_input", "rating": 3, "is_widget": True},
  ]
)
edited_df = st.data_editor(df)
favorite_command = edited_df.loc[edited_df["rating"].idxmax()]["command"]
st.markdown(f"Your favorite command is **{favorite_command}** üéà")
```

Copy
[Built with Streamlit üéà](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-data-editor.streamlit.app//?utm_medium=oembed&)
You can also allow the user to add and delete rows by setting `num_rows` to "dynamic":
```
import streamlit as st
import pandas as pd
df = pd.DataFrame(
  [
    {"command": "st.selectbox", "rating": 4, "is_widget": True},
    {"command": "st.balloons", "rating": 5, "is_widget": False},
    {"command": "st.time_input", "rating": 3, "is_widget": True},
  ]
)
edited_df = st.data_editor(df, num_rows="dynamic")
favorite_command = edited_df.loc[edited_df["rating"].idxmax()]["command"]
st.markdown(f"Your favorite command is **{favorite_command}** üéà")
```

Copy
[Built with Streamlit üéà](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-data-editor1.streamlit.app//?utm_medium=oembed&)
Or you can customize the data editor via `column_config`, `hide_index`, `column_order`, or `disabled`:
```
import pandas as pd
import streamlit as st
df = pd.DataFrame(
  [
    {"command": "st.selectbox", "rating": 4, "is_widget": True},
    {"command": "st.balloons", "rating": 5, "is_widget": False},
    {"command": "st.time_input", "rating": 3, "is_widget": True},
  ]
)
edited_df = st.data_editor(
  df,
  column_config={
    "command": "Streamlit Command",
    "rating": st.column_config.NumberColumn(
      "Your rating",
      help="How much do you like this command (1-5)?",
      min_value=1,
      max_value=5,
      step=1,
      format="%d ‚≠ê",
    ),
    "is_widget": "Widget ?",
  },
  disabled=["command", "is_widget"],
  hide_index=True,
)
favorite_command = edited_df.loc[edited_df["rating"].idxmax()]["command"]
st.markdown(f"Your favorite command is **{favorite_command}** üéà")