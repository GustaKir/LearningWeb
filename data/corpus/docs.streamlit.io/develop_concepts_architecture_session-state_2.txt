Title: Session State in Streamlit Applications
URL: https://docs.streamlit.io/develop/concepts/architecture/session-state
Summary: This section discusses using Session State variables in Streamlit to maintain values across app reruns. It introduces the Session State API, which operates similarly to Python dictionaries for variable initialization, and explains how to read and update session state variables.
---

As we'll see later, we can avoid this issue by storing `count` as a Session State variable. By doing so, we're indicating to Streamlit that it should maintain the value stored inside a Session State variable across app reruns.
Let's learn more about the API to use Session State.
### [](https://docs.streamlit.io/develop/concepts/architecture/session-state#initialization)Initialization
The Session State API follows a field-based API, which is very similar to Python dictionaries:
`import streamlit as st # Check if 'key' already exists in session_state # If not, then initialize it if 'key' not in st.session_state:   st.session_state['key'] = 'value' # Session State also supports the attribute based syntax if 'key' not in st.session_state:   st.session_state.key = 'value' `
### [](https://docs.streamlit.io/develop/concepts/architecture/session-state#reads-and-updates)Reads and updates
Read the value of an item in Session State by passing the item to `st.write` :
`import streamlit as st if 'key' not in st.session_state:   st.session_state['key'] = 'value' # Reads st.write(st.session_state.key) # Outputs: value `
Update an item in Session State by assigning it a value:
`import streamlit as st if 'key' not in st.session_state:   st.session_state['key'] = 'value' # Updates st.session_state.key = 'value2' # Attribute API st.session_state['key'] = 'value2' # Dictionary like API `
Streamlit throws an exception if an uninitialized variable is accessed:
`import streamlit as st st.write(st.session_state['value']) # Throws an exception! `
![state-uninitialized-exception](https://docs.streamlit.io/images/state_uninitialized_exception.png)
Let's now take a look at a few examples that illustrate how to add Session State to our Counter app.
### [](https://docs.streamlit.io/develop/concepts/architecture/session-state#example-1-add-session-state)Example 1: Add Session State
Now that we've got a hang of the Session State API, let's update our Counter app to use Session State:
`import streamlit as st st.title('Counter Example') if 'count' not in st.session_state:   st.session_state.count = 0 increment = st.button('Increment') if increment:   st.session_state.count += 1 st.write('Count = ', st.session_state.count) `
As you can see in the above example, pressing the **_Increment_** button updates the `count` each time.
### [](https://docs.streamlit.io/develop/concepts/architecture/session-state#example-2-session-state-and-callbacks)Example 2: Session State and Callbacks
Now that we've built a basic Counter app using Session State, let's move on to something a little more complex. The next example uses Callbacks with Session State.
**Callbacks** : A callback is a Python function which gets called when an input widget changes. Callbacks can be used with widgets using the parameters `on_change` (or `on_click`), `args`, and `kwargs`. The full Callbacks API can be found in our [Session State API Reference Guide](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.session_state#use-callbacks-to-update-session-state).
`import streamlit as st st.title('Counter Example using Callbacks') if 'count' not in st.session_state:   st.session_state.count = 0 def increment_counter():   st.session_state.count += 1 st.button('Increment', on_click=increment_counter) st.write('Count = ', st.session_state.count) `
Now, pressing the **_Increment_** button updates the count each time by calling the `increment_counter()` function.
### [](https://docs.streamlit.io/develop/concepts/architecture/session-state#example-3-use-args-and-kwargs-in-callbacks)Example 3: Use args and kwargs in Callbacks
Callbacks also support passing arguments using the `args` parameter in a widget:
`import streamlit as st st.title('Counter Example using Callbacks with args') if 'count' not in st.session_state:   st.session_state.count = 0 increment_value = st.number_input('Enter a value', value=0, step=1) def increment_counter(increment_value):   st.session_state.count += increment_value increment = st.button('Increment', on_click=increment_counter,   args=(increment_value, )) st.write('Count = ', st.session_state.count) `
Additionally, we can also use the `kwargs` parameter in a widget to pass named arguments to the callback function as shown below:
`import streamlit as st st.title('Counter Example using Callbacks with kwargs') if 'count' not in st.session_state:   st.session_state.count = 0 def increment_counter(increment_value=0):   st.session_state.count += increment_value def decrement_counter(decrement_value=0):   st.session_state.count -= decrement_value st.button('Increment', on_click=increment_counter, 	kwargs=dict(increment_value=5)) st.button('Decrement', on_click=decrement_counter, 	kwargs=dict(decrement_value=1)) st.write('Count = ', st.session_state.count) `
### [](https://docs.streamlit.io/develop/concepts/architecture/session-state#example-4-forms-and-callbacks)Example 4: Forms and Callbacks
Say we now want to not only increment the `count`, but also