Title: Connecting Streamlit with Tableau Server
URL: https://docs.streamlit.io/develop/tutorials/databases/tableau
Summary: This tutorial demonstrates how to connect a Streamlit app to Tableau Server using the tableau-server-client library. It covers setting up authentication with a personal access token, establishing a connection to the Tableau server, retrieving workbooks and views, and caching data for efficient query management.
---

erver-client-python/) library to find more!
`# streamlit_app.py import streamlit as st import tableauserverclient as TSC  # Set up connection. tableau_auth = TSC.PersonalAccessTokenAuth(   st.secrets["tableau"]["token_name"],   st.secrets["tableau"]["personal_access_token"],   st.secrets["tableau"]["site_id"], ) server = TSC.Server(st.secrets["tableau"]["server_url"], use_server_version=True) # Get various data. # Explore the tableauserverclient library for more options. # Uses st.cache_data to only rerun when the query changes or after 10 min. @st.cache_data(ttl=600) def run_query(): with server.auth.sign_in(tableau_auth): # Get all workbooks.     workbooks, pagination_item = server.workbooks.get()     workbooks_names = [w.name for w in workbooks] # Get views for first workbook.     server.workbooks.populate_views(workbooks[0])     views_names = [v.name for v in workbooks[0].views] # Get image & CSV for first view of first workbook.     view_item = workbooks[0].views[0]     server.views.populate_image(view_item)     server.views.populate_csv(view_item)     view_name = view_item.name     view_image = view_item.image     # `view_item.csv` is a list of binary objects, convert to str.     view_csv = b"".join(view_item.csv).decode("utf-8") return workbooks_names, views_names, view_name, view_image, view_csv workbooks_names, views_names, view_name, view_image, view_csv = run_query() # Print results. st.subheader("üìì Workbooks") st.write("Found the following workbooks:", ", ".join(workbooks_names)) st.subheader("üëÅÔ∏è Views") st.write( f"Workbook *{workbooks_names[0]}* has the following views:", ", ".join(views_names), ) st.subheader("üñºÔ∏è Image") st.write(f"Here's what view *{view_name}* looks like:") st.image(view_image, width=300) st.subheader("üìä Data") st.write(f"And here's the data for view *{view_name}*:") st.write(pd.read_csv(StringIO(view_csv))) `
See `st.cache_data` above? Without it, Streamlit would run the query every time the app reruns (e.g. on a widget interaction). With `st.cache_data`, it only runs when the query changes or after 10 minutes (that's what `ttl` is for). Watch out: If your database updates more frequently, you should adapt `ttl` or remove caching so viewers always see the latest data. Learn more in [Caching](https://docs.streamlit.io/develop/concepts/architecture/caching).
If everything worked out, your app should look like this (can differ based on your workbooks):
![Tableau screenshot 4](https://docs.streamlit.io/images/databases/tableau-4.png)[Previous: Supabase](https://docs.streamlit.io/develop/tutorials/databases/supabase)[Next: TiDB](https://docs.streamlit.io/develop/tutorials/databases/tidb) _forum_
### Still have questions?
Our [forums](https://discuss.streamlit.io) are full of helpful information and Streamlit experts.
[Home](https://docs.streamlit.io/)Contact Us[Community](https://discuss.streamlit.io)[](https://github.com/streamlit "GitHub")[](https://www.youtube.com/channel/UC3LD42rjj-Owtxsa6PwGU5Q "YouTube")[](https://twitter.com/streamlit "Twitter")[](https://www.linkedin.com/company/streamlit "LinkedIn")[](https://info.snowflake.com/streamlit-newsletter-sign-up.html "Newsletter")
¬© 2025 Snowflake Inc.Cookie policy
 _forum_ Ask AI