Title: Creating a Multipage App in Streamlit
URL: https://docs.streamlit.io/get-started/tutorials/create-a-multipage-app
Summary: This guide introduces the creation of multipage apps in Streamlit, detailing how to define pages, structure, and navigate between them. It highlights the transition from single-page to multipage apps, using the transformation of the 'streamlit hello' app as a case study.
---

# [](https://docs.streamlit.io/get-started/tutorials/create-a-multipage-app#create-a-multipage-app)Create a multipage app
In [Additional features](https://docs.streamlit.io/get-started/fundamentals/additional-features), we introduced multipage apps, including how to define pages, structure and run multipage apps, and navigate between pages in the user interface. You can read more details in our guide to [Multipage apps](https://docs.streamlit.io/develop/concepts/multipage-apps)
In this guide, letâ€™s put our understanding of multipage apps to use by converting the previous version of our `streamlit hello` app to a multipage app!
## [](https://docs.streamlit.io/get-started/tutorials/create-a-multipage-app#motivation)Motivation
Before Streamlit 1.10.0, the streamlit hello command was a large single-page app. As there was no support for multiple pages, we resorted to splitting the app's content using `st.selectbox` in the sidebar to choose what content to run. The content is comprised of three demos for plotting, mapping, and dataframes.
Here's what the code and single-page app looked like:
**`hello.py`**(ðŸ‘ˆ Toggle to expand)
`import streamlit as st def intro(): import streamlit as st   st.write("# Welcome to Streamlit! ðŸ‘‹")   st.sidebar.success("Select a demo above.")   st.markdown( """     Streamlit is an open-source app framework built specifically for     Machine Learning and Data Science projects.     **ðŸ‘ˆ Select a demo from the dropdown on the left** to see some examples     of what Streamlit can do!     ### Want to learn more?     - Check out [streamlit.io](https://streamlit.io)     - Jump into our [documentation](https://docs.streamlit.io)     - Ask a question in our [community      forums](https://discuss.streamlit.io)     ### See more complex demos     - Use a neural net to [analyze the Udacity Self-driving Car Image      Dataset](https://github.com/streamlit/demo-self-driving)     - Explore a [New York City rideshare dataset](https://github.com/streamlit/demo-uber-nyc-pickups)   """ ) def mapping_demo(): import streamlit as st   import pandas as pd   import pydeck as pdk   from urllib.error import URLError   st.markdown(f"# {list(page_names_to_funcs.keys())[2]}")   st.write( """     This demo shows how to use [`st.pydeck_chart`](https://docs.streamlit.io/develop/api-reference/charts/st.pydeck_chart) to display geospatial data. """ ) @st.cache_data def from_data_file(filename):     url = ( "http://raw.githubusercontent.com/streamlit/" "example-data/master/hello/v1/%s" % filename     ) return pd.read_json(url) try:     ALL_LAYERS = { "Bike Rentals": pdk.Layer( "HexagonLayer",         data=from_data_file("bike_rental_stats.json"),         get_position=["lon", "lat"],         radius=200,         elevation_scale=4,         elevation_range=[0, 1000],         extruded=True, ), "Bart Stop Exits": pdk.Layer( "ScatterplotLayer",         data=from_data_file("bart_stop_stats.json"),         get_position=["lon", "lat"],         get_color=[200, 30, 0, 160],         get_radius="[exits]",         radius_scale=0.05, ), "Bart Stop Names": pdk.Layer( "TextLayer",         data=from_data_file("bart_stop_stats.json"),         get_position=["lon", "lat"],         get_text="name",         get_color=[0, 0, 0, 200],         get_size=15,         get_alignment_baseline="'bottom'", ), "Outbound Flow": pdk.Layer( "ArcLayer",         data=from_data_file("bart_path_stats.json"),         get_source_position=["lon", "lat"],         get_target_position=["lon2", "lat2"],         get_source_color=[200, 30, 0, 160],         get_target_color=[200, 30, 0, 160],         auto_highlight=True,         width_scale=0.0001,         get_width="outbound",         width_min_pixels=3,         width_max_pixels=30, ), }     st.sidebar.markdown("### Map Layers")     selected_layers = [       layer       for layer_name, layer in ALL_LAYERS.items() if st.sidebar.checkbox(layer_name, True) ] if selected_layers:       st.pydeck_chart(         pdk.Deck(           map_style="mapbox://styles/mapbox/light-v9",           initial_view_state={ "latitude": 37.76, "longitude": -122.4, "zoom": 11, "pitch": 50, },           layers=selected_layers, ) ) else:       st.error("Please choose at least one layer above.") except URLError as e:     st.error( """       **This demo requires internet access.**       Connection error: %s     """ % e.reason     ) def plotting_demo(): import streamlit as st   import time   import numpy as np   st.markdown(f'# {list(page_names_to_funcs.keys())[1]}')   st.write( """     This demo illustrates a combination of plotting and animation with Streamlit. We're generating a bunch of random numbers in a loop for around 5 seconds. Enjoy! """ )   progress_bar = st.sidebar.progress(0)   status_text = st.sidebar.empty()   last_rows = np.random.randn(1, 1)   chart = st.line_chart(last_rows) for i in range(1, 101):     new_rows = last_rows[-1, :] + np.random.randn(5, 1).cumsum(axis=0)     status_text.text("%i%% Complete" % i)     chart.add_rows(new_row