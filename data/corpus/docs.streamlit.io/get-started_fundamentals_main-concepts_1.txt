Title: Basic Concepts of Streamlit
URL: https://docs.streamlit.io/get-started/fundamentals/main-concepts
Summary: Streamlit simplifies building web apps by allowing users to insert commands into Python scripts, which can then be executed using 'streamlit run'. This launches a local server and opens the app in a web browser, where users can create various elements like charts, text, and widgets. The summary also references specific commands and links to the API documentation for further exploration.
---

# [](https://docs.streamlit.io/get-started/fundamentals/main-concepts#basic-concepts-of-streamlit)Basic concepts of Streamlit
Working with Streamlit is simple. First you sprinkle a few Streamlit commands into a normal Python script, then you run it with `streamlit run`:
`streamlit run your_script.py [-- script args] `
As soon as you run the script as shown above, a local Streamlit server will spin up and your app will open in a new tab in your default web browser. The app is your canvas, where you'll draw charts, text, widgets, tables, and more.
What gets drawn in the app is up to you. For example [`st.text`](https://docs.streamlit.io/develop/api-reference/text/st.text) writes raw text to your app, and [`st.line_chart`](https://docs.streamlit.io/develop/api-reference/charts/st.line_chart) draws — you guessed it — a line chart. Refer to our [API documentation](https://docs.streamlit.io/develop/api-reference) to see all commands that are available to you.
_push_pin_
#### Note
When passing your script some custom arguments, they must be passed after two dashes. Otherwise the arguments get interpreted as arguments to Streamlit itself.
Another way of running Streamlit is to run it as a Python module. This can be useful when configuring an IDE like PyCharm to work with Streamlit:
`# Running python -m streamlit run your_script.py # is equivalent to: streamlit run your_script.py `
_star_
#### Tip
You can also pass a URL to `streamlit run`! This is great when combined with GitHub Gists. For example:
`streamlit run https://raw.githubusercontent.com/streamlit/demo-uber-nyc-pickups/master/streamlit_app.py `
## [](https://docs.streamlit.io/get-started/fundamentals/main-concepts#development-flow)Development flow
Every time you want to update your app, save the source file. When you do that, Streamlit detects if there is a change and asks you whether you want to rerun your app. Choose "Always rerun" at the top-right of your screen to automatically update your app every time you change its source code.
This allows you to work in a fast interactive loop: you type some code, save it, try it out live, then type some more code, save it, try it out, and so on until you're happy with the results. This tight loop between coding and viewing results live is one of the ways Streamlit makes your life easier.
_star_
#### Tip
While developing a Streamlit app, it's recommended to lay out your editor and browser windows side by side, so the code and the app can be seen at the same time. Give it a try!
As of Streamlit version 1.10.0 and higher, Streamlit apps cannot be run from the root directory of Linux distributions. If you try to run a Streamlit app from the root directory, Streamlit will throw a `FileNotFoundError: [Errno 2] No such file or directory` error. For more information, see GitHub issue [#5239](https://github.com/streamlit/streamlit/issues/5239).
If you are using Streamlit version 1.10.0 or higher, your main script should live in a directory other than the root directory. When using Docker, you can use the `WORKDIR` command to specify the directory where your main script lives. For an example of how to do this, read [Create a Dockerfile](https://docs.streamlit.io/deploy/tutorials/docker#create-a-dockerfile).
## [](https://docs.streamlit.io/get-started/fundamentals/main-concepts#data-flow)Data flow
Streamlit's architecture allows you to write apps the same way you write plain Python scripts. To unlock this, Streamlit apps have a unique data flow: any time something must be updated on the screen, Streamlit reruns your entire Python script from top to bottom.
This can happen in two situations:
  * Whenever you modify your app's source code.
  * Whenever a user interacts with widgets in the app. For example, when dragging a slider, entering text in an input box, or clicking a button.