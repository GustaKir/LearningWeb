Title: Introduction to Streamlit Custom Components
URL: https://docs.streamlit.io/develop/concepts/custom-components/intro
Summary: This section introduces the development of Streamlit Components, emphasizing the choice between static components and bi-directional components that enable communication between Python and JavaScript. It also outlines methods for creating a static component using `components.html()` and `components.iframe()` for rendering HTML or visualizations.
---

# [](https://docs.streamlit.io/develop/concepts/custom-components/intro#intro-to-custom-components)Intro to custom components
The first step in developing a Streamlit Component is deciding whether to create a static component (i.e. rendered once, controlled by Python) or to create a bi-directional component that can communicate from Python to JavaScript and back.
## [](https://docs.streamlit.io/develop/concepts/custom-components/intro#create-a-static-component)Create a static component
If your goal in creating a Streamlit Component is solely to display HTML code or render a chart from a Python visualization library, Streamlit provides two methods that greatly simplify the process: `components.html()` and `components.iframe()`.
If you are unsure whether you need bi-directional communication, **start here first**!
### [](https://docs.streamlit.io/develop/concepts/custom-components/intro#render-an-html-string)Render an HTML string
While [`st.text`](https://docs.streamlit.io/develop/api-reference/text/st.text), [`st.markdown`](https://docs.streamlit.io/develop/api-reference/text/st.markdown) and [`st.write`](https://docs.streamlit.io/develop/api-reference/write-magic/st.write) make it easy to write text to a Streamlit app, sometimes you'd rather implement a custom piece of HTML. Similarly, while Streamlit natively supports [many charting libraries](https://docs.streamlit.io/develop/api-reference/charts#chart-elements), you may want to implement a specific HTML/JavaScript template for a new charting library. [`components.html`](https://docs.streamlit.io/develop/api-reference/custom-components/st.components.v1.html) works by giving you the ability to embed an iframe inside of a Streamlit app that contains your desired output.
**Example**
`import streamlit as st import streamlit.components.v1 as components # bootstrap 4 collapse example components.html( """   <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css" integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">   <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>   <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/js/bootstrap.min.js" integrity="sha384-JZR6Spejh4U02d8jOt6vLEHfe/JQGiRRSQQxSfFWpi1MquVdAyjUar5+76PVCmYl" crossorigin="anonymous"></script>   <div id="accordion">    <div class="card">     <div class="card-header" id="headingOne">      <h5 class="mb-0">       <button class="btn btn-link" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">       Collapsible Group Item #1       </button>      </h5>     </div>     <div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#accordion">      <div class="card-body">       Collapsible Group Item #1 content      </div>     </div>    </div>    <div class="card">     <div class="card-header" id="headingTwo">      <h5 class="mb-0">       <button class="btn btn-link collapsed" data-toggle="collapse" data-target="#collapseTwo" aria-expanded="false" aria-controls="collapseTwo">       Collapsible Group Item #2       </button>      </h5>     </div>     <div id="collapseTwo" class="collapse" aria-labelledby="headingTwo" data-parent="#accordion">      <div class="card-body">       Collapsible Group Item #2 content      </div>     </div>    </div>   </div>   """,   height=600, ) `
### [](https://docs.streamlit.io/develop/concepts/custom-components/intro#render-an-iframe-url)Render an iframe URL
[`components.iframe`](https://docs.streamlit.io/develop/api-reference/custom-components/st.components.v1.iframe) is similar in features to `components.html`, with the difference being that `components.iframe` takes a URL as its input. This is used for situations where you want to include an entire page within a Streamlit app.
**Example**
`import streamlit as st import streamlit.components.v1 as components # embed streamlit docs in a streamlit app components.iframe("https://example.com", height=500) `
## [](https://docs.streamlit.io/develop/concepts/custom-components/intro#create-a-bi-directional-component)Create a bi-directional component
A bi-directional Streamlit Component has two parts:
  1. A **frontend** , which is built out of HTML and any other web tech you like (JavaScript, React, Vue, etc.), and gets rendered in Streamlit apps via an iframe tag.
  2. A **Python API** , which Streamlit apps use to instantiate and talk to that frontend