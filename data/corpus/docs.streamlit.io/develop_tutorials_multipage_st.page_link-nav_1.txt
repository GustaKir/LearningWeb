Title: Building a Custom Navigation Menu with st.page_link
URL: https://docs.streamlit.io/develop/tutorials/multipage/st.page_link-nav
Summary: Streamlit introduces `st.page_link` in version 1.31.0, allowing the creation of custom navigation menus that link to both internal and external pages. This feature includes a highlight effect for the current page and can be enhanced with the `client.showSidebarNavigation` configuration for a dynamic user experience.
---

# [](https://docs.streamlit.io/develop/tutorials/multipage/st.page_link-nav#build-a-custom-navigation-menu-with-stpage_link)Build a custom navigation menu with `st.page_link`
Streamlit lets you build custom navigation menus and elements with `st.page_link`. Introduced in Streamlit version 1.31.0, `st.page_link` can link to other pages in your multipage app or to external sites. When linked to another page in your app, `st.page_link` will show a highlight effect to indicate the current page. When combined with the [`client.showSidebarNavigation`](https://docs.streamlit.io/develop/concepts/configuration#client) configuration option, you can build sleek, dynamic navigation in your app.
## [](https://docs.streamlit.io/develop/tutorials/multipage/st.page_link-nav#prerequisites)Prerequisites
Create a new working directory in your development environment. We'll call this directory `your-repository`.
## [](https://docs.streamlit.io/develop/tutorials/multipage/st.page_link-nav#summary)Summary
In this example, we'll build a dynamic navigation menu for a multipage app that depends on the current user's role. We've abstracted away the use of username and creditials to simplify the example. Instead, we'll use a selectbox on the main page of the app to switch between roles. Session State will carry this selection between pages. The app will have a main page (`app.py`) which serves as the abstracted log-in page. There will be three additional pages which will be hidden or accessible, depending on the current role. The file structure will be as follows:
`your-repository/ â”œâ”€â”€ .streamlit/ â”‚  â””â”€â”€ config.toml â”œâ”€â”€ pages/ â”‚  â”œâ”€â”€ admin.py â”‚  â”œâ”€â”€ super-admin.py â”‚  â””â”€â”€ user.py â”œâ”€â”€ menu.py â””â”€â”€ app.py `
Here's a look at what we'll build:
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-custom-navigation.streamlit.app/?utm_medium=oembed)
## [](https://docs.streamlit.io/develop/tutorials/multipage/st.page_link-nav#build-the-example)Build the example
### [](https://docs.streamlit.io/develop/tutorials/multipage/st.page_link-nav#hide-the-default-sidebar-navigation)Hide the default sidebar navigation
When creating a custom navigation menu, you need to hide the default sidebar navigation using `client.showSidebarNavigation`. Add the following `.streamlit/config.toml` file to your working directory:
`[client] showSidebarNavigation = false `
### [](https://docs.streamlit.io/develop/tutorials/multipage/st.page_link-nav#create-a-menu-function)Create a menu function
You can write different menu logic for different pages or you can create a single menu function to call on multiple pages. In this example, we'll use the same menu logic on all pages, including a redirect to the main page when a user isn't logged in. We'll build a few helper functions to do this.
  * `menu_with_redirect()` checks if a user is logged in, then either redirects them to the main page or renders the menu.
  * `menu()` will call the correct helper function to render the menu based on whether the user is logged in or not.
  * `authenticated_menu()` will display a menu based on an authenticated user's role.
  * `unauthenticated_menu()` will display a menu for unauthenticated users.