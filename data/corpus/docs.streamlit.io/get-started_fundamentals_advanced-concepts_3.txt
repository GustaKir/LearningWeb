Title: Using Session State for Random Data Generation
URL: https://docs.streamlit.io/get-started/fundamentals/advanced-concepts
Summary: This section explains how to utilize Streamlit's Session State to generate and maintain unique random data for users in an app session. It demonstrates how random numbers are stored in Session State so that they remain consistent throughout user interactions, while allowing for different sessions to yield different data. An example code snippet illustrates how to implement this with a scatter chart.
---

If you have random number generation in your app, you'd likely use Session State. Here's an example where data is generated randomly at the beginning of each session. By saving this random information in Session State, each user gets different random data when they open the app but it won't keep changing on them as they interact with it. If you select different colors with the picker you'll see that the data does not get re-randomized with each rerun. (If you open the app in a new tab to start a new session, you'll see different data!)
`import streamlit as st import pandas as pd import numpy as np if "df" not in st.session_state:   st.session_state.df = pd.DataFrame(np.random.randn(20, 2), columns=["x", "y"]) st.header("Choose a datapoint color") color = st.color_picker("Color", "#FF0000") st.divider() st.scatter_chart(st.session_state.df, x="x", y="y", color=color) `
If you are pulling the same data for all users, you'd likely cache a function that retrieves that data. On the other hand, if you pull data specific to a user, such as querying their personal information, you may want to save that in Session State. That way, the queried data is only available in that one session.
As mentioned in [Basic concepts](https://docs.streamlit.io/get-started/fundamentals/main-concepts#widgets), Session State is also related to widgets. Widgets are magical and handle statefulness quietly on their own. As an advanced feature however, you can manipulate the value of widgets within your code by assigning keys to them. Any key assigned to a widget becomes a key in Session State tied to the value of the widget. This can be used to manipulate the widget. After you finish understanding the basics of Streamlit, check out our guide on [Widget behavior](https://docs.streamlit.io/develop/concepts/architecture/widget-behavior) to dig in the details if you're interested.
## [](https://docs.streamlit.io/get-started/fundamentals/advanced-concepts#connections)Connections
As hinted above, you can use `@st.cache_resource` to cache connections. This is the most general solution which allows you to use almost any connection from any Python library. However, Streamlit also offers a convenient way to handle some of the most popular connections, like SQL! `st.connection` takes care of the caching for you so you can enjoy fewer lines of code. Getting data from your database can be as easy as:
`import streamlit as st conn = st.connection("my_database") df = conn.query("select * from my_table") st.dataframe(df) `
Of course, you may be wondering where your username and password go. Streamlit has a convenient mechanism for [Secrets management](https://docs.streamlit.io/develop/concepts/connections/secrets-management). For now, let's just see how `st.connection` works very nicely with secrets. In your local project directory, you can save a `.streamlit/secrets.toml` file. You save your secrets in the toml file and `st.connection` just uses them! For example, if you have an app file `streamlit_app.py` your project directory may look like this:
`your-LOCAL-repository/ ├── .streamlit/ │  └── secrets.toml # Make sure to gitignore this! └── streamlit_app.py `
For the above SQL example, your `secrets.toml` file might look like the following:
`[connections.my_database] type="sql" dialect="mysql" username="xxx" password="xxx" host="example.com" # IP or URL port=3306 # Port number database="mydb" # Database name `
Since you don't want to commit your `secrets.toml` file to your repository, you'll need to learn how your host handles secrets when you're ready to publish your app. Each host platform may have a different way for you to pass your secrets. If you use Streamlit Community Cloud for example, each deployed app has a settings menu where you can load your secrets. After you've written an app and are ready to deploy, you can read all about how to [Deploy your app](https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app) on Community Cloud.
[Previous: Basic concepts](https://docs.streamlit.io/get-started/fundamentals/main-concepts)[Next: Additional features](https://docs.streamlit.io/get-started/fundamentals/additional-features) _forum_
### Still have questions?
Our [forums](https://discuss.streamlit.io) are full of helpful information and Streamlit experts.
[Home](https://docs.streamlit.io/)Contact Us[Community](https://discuss.streamlit.io)[](https://github.com/streamlit "GitHub")[](https://www.youtube.com/channel/UC3LD42rjj-Owtxsa6PwGU5Q "YouTube")[](https://twitter.com/streamlit "Twitter")[](https://www.linkedin.com/company/streamlit "LinkedIn")[](https://info.snowflake.com/streamlit-newsletter-sign-up.html "Newsletter")
© 2025 Snowflake Inc.Cookie policy
 _forum_ Ask AI