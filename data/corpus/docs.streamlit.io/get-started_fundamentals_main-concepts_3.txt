Title: Using Pandas Styling in Streamlit Tables
URL: https://docs.streamlit.io/get-started/fundamentals/main-concepts
Summary: This section explains how to create an interactive table using Streamlit's `st.dataframe()` method with a random sample generated by Numpy. It also covers how to format the table using Pandas' `Styler` object to highlight specific elements, and briefly mentions the alternative method for static tables, `st.table()`.
---

For example, let's create a data frame and change its formatting with a Pandas `Styler` object. In this example, you'll use Numpy to generate a random sample, and the [`st.dataframe()`](https://docs.streamlit.io/develop/api-reference/data/st.dataframe) method to draw an interactive table.
_push_pin_
#### Note
This example uses Numpy to generate a random sample, but you can use Pandas DataFrames, Numpy arrays, or plain Python arrays.
`import streamlit as st import numpy as np dataframe = np.random.randn(10, 20) st.dataframe(dataframe) `
Let's expand on the first example using the Pandas `Styler` object to highlight some elements in the interactive table.
`import streamlit as st import numpy as np import pandas as pd dataframe = pd.DataFrame(   np.random.randn(10, 20),   columns=('col %d' % i for i in range(20))) st.dataframe(dataframe.style.highlight_max(axis=0)) `
Streamlit also has a method for static table generation: [`st.table()`](https://docs.streamlit.io/develop/api-reference/data/st.table).
`import streamlit as st import numpy as np import pandas as pd dataframe = pd.DataFrame(   np.random.randn(10, 20),   columns=('col %d' % i for i in range(20))) st.table(dataframe) `
### [](https://docs.streamlit.io/get-started/fundamentals/main-concepts#draw-charts-and-maps)Draw charts and maps
Streamlit supports several popular data charting libraries like [Matplotlib, Altair, deck.gl, and more](https://docs.streamlit.io/develop/api-reference#chart-elements). In this section, you'll add a bar chart, line chart, and a map to your app.
### [](https://docs.streamlit.io/get-started/fundamentals/main-concepts#draw-a-line-chart)Draw a line chart
You can easily add a line chart to your app with [`st.line_chart()`](https://docs.streamlit.io/develop/api-reference/charts/st.line_chart). We'll generate a random sample using Numpy and then chart it.
`import streamlit as st import numpy as np import pandas as pd chart_data = pd.DataFrame(    np.random.randn(20, 3),    columns=['a', 'b', 'c']) st.line_chart(chart_data) `
### [](https://docs.streamlit.io/get-started/fundamentals/main-concepts#plot-a-map)Plot a map
With [`st.map()`](https://docs.streamlit.io/develop/api-reference/charts/st.map) you can display data points on a map. Let's use Numpy to generate some sample data and plot it on a map of San Francisco.
`import streamlit as st import numpy as np import pandas as pd map_data = pd.DataFrame(   np.random.randn(1000, 2) / [50, 50] + [37.76, -122.4],   columns=['lat', 'lon']) st.map(map_data) `
## [](https://docs.streamlit.io/get-started/fundamentals/main-concepts#widgets)Widgets
When you've got the data or model into the state that you want to explore, you can add in widgets like [`st.slider()`](https://docs.streamlit.io/develop/api-reference/widgets/st.slider), [`st.button()`](https://docs.streamlit.io/develop/api-reference/widgets/st.button) or [`st.selectbox()`](https://docs.streamlit.io/develop/api-reference/widgets/st.selectbox). It's really straightforward â€” treat widgets as variables:
`import streamlit as st x = st.slider('x') # ðŸ‘ˆ this is a widget st.write(x, 'squared is', x * x) `
On first run, the app above should output the text "0 squared is 0". Then every time a user interacts with a widget, Streamlit simply reruns your script from top to bottom, assigning the current state of the widget to your variable in the process.
For example, if the user moves the slider to position `10`, Streamlit will rerun the code above and set `x` to `10` accordingly. So now you should see the text "10 squared is 100".
Widgets can also be accessed by key, if you choose to specify a string to use as the unique key for the widget:
`import streamlit as st st.text_input("Your name", key="name") # You can access the value at any point with: st.session_state.name `
Every widget with a key is automatically added to Session State. For more information about Session State, its association with widget state, and its limitations, see [Session State API Reference Guide](https://docs.streamlit.io/develop/api-reference/caching-and-state/st.session_state).
### [](https://docs.streamlit.io/get-started/fundamentals/main-concepts#use-checkboxes-to-showhide-data)Use checkboxes to show/hide data
One use case for checkboxes is to hide or show a specific chart or section in an app. [`st.checkbox()`](https://docs.streamlit.io/develop/api-reference/widgets/st.checkbox) takes a single argument, which is the widget label. In this sample, the checkbox is used to toggle a conditional statement.
`import streamlit as st import numpy as np import pandas as pd if st.checkbox('Show dataframe'):   chart_data = pd.DataFrame(     np.random.randn(20, 3),     columns=['a', 'b', 'c'])   chart_data `
### [](https://docs.streamlit.io/get-started/fundamentals/main-concepts#use-a-selectbox-for-options)Use a selectbox for options
Use [`st.selectbox`](https://docs.streamlit.io/develop/api-reference/widgets/st.selectbox) to choose from a series. You can write in the options