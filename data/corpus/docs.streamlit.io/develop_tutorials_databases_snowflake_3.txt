Title: Authenticating Connection to Snowflake
URL: https://docs.streamlit.io/develop/tutorials/databases/snowflake
Summary: This section discusses authentication methods for connecting to a Snowflake account, including using a password, key-pair authentication, and browser prompts for credentials. It also mentions configuring default parameters like role, warehouse, database, and schema for convenience, and refers to the Snowflake Connector for Python documentation for more details.
---

If you don't have MFA on your account, you can just specify your `password`. Alternatively, you can set up [key-pair authentication](https://docs.snowflake.com/en/user-guide/key-pair-auth) on your account and point to your `private_key_file`. If you are just looking for a quick, local connection, you can set `authenticator` to prompt you for credentials in an external browser.
In addition to the three required parameters to authenticate your connection, it is common to specify the default `role`, `warehouse`, `database`, and `schema` for convenience. For more information about required and optional parameters, see the [Snowflake Connector for Python](https://docs.snowflake.com/en/developer-guide/python-connector/python-connector-api#functions) documentation.
### [](https://docs.streamlit.io/develop/tutorials/databases/snowflake#option-1-use-streamlitsecretstoml)Option 1: Use `.streamlit/secrets.toml`
  1. If you don't already have a `.streamlit/secrets.toml` file in your app's working directory, create an empty secrets file.
To learn more, see [Secrets Management](https://docs.streamlit.io/develop/concepts/connections/secrets-management).
_priority_high_
#### Important
Add this file to `.gitignore` and don't commit it to your GitHub repo! If you want to use this connection in multiple repositories, you can create a global `secrets.toml` file instead. For more information, see [`secrets.toml` file location](https://docs.streamlit.io/develop/api-reference/connections/secrets.toml#file-location).
  2. Add your connection parameters to `.streamlit/secrets.toml`:
`[connections.snowflake] account = "xxxxxxx-xxxxxxx" user = "xxx" private_key_file = "../xxx/xxx.p8" role = "xxx" warehouse = "xxx" database = "xxx" schema = "xxx" `
_priority_high_
#### Important
Your account identifier must be hyphen-separated: `<my_organization>-<my_account>`. This is the general-purpose identifier format and not the period-separated format used within SQL statements.
In the example above, the connection uses key-pair authentication. Therefore, `private_key_file` is defined instead of `password`. `private_key_file` can be an absolute or relative path. If you use a relative path, it should be relative to your app's working directory (where you execute `streamlit run`).


### [](https://docs.streamlit.io/develop/tutorials/databases/snowflake#option-2-use-snowflakeconnectionstoml)Option 2: Use `.snowflake/connections.toml`
If you already have your connection configured using [Snowflake's connections file](https://docs.snowflake.com/en/developer-guide/python-connector/python-connector-connect#connecting-using-the-connections-toml-file), you can use it as-is. If you are using a default connection, no change is needed in later steps of this tutorial. If you are using a named connection, you will need to include the name in `st.connection`. This is noted in a later step. For information about using named connections, see the examples in the API reference for [`SnowflakeConnnection`](https://docs.streamlit.io/develop/api-reference/connections/st.connections.snowflakeconnection).
  1. If you don't already have a `.snowflake/configuration.toml` file in your user directory, create an empty connections file.
  2. Add your connection parameters to `.snowflake/connection.toml`:
`[default] account = "xxxxxxx-xxxxxxx" user = "xxx" private_key_file = "../xxx/xxx.p8" role = "xxx" warehouse = "xxx" database = "xxx" schema = "xxx" `
This example uses key-pair authentication as described in the previous option.