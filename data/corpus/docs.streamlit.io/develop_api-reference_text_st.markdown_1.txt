Title: st.markdown - Streamlit Documentation
URL: https://docs.streamlit.io/develop/api-reference/text/st.markdown
Summary: This section covers the 'st.markdown' function in Streamlit, which allows users to display strings formatted as Markdown. It includes information on version compatibility and function signature.
---

* [Home](https://docs.streamlit.io/)/
  * [Develop](https://docs.streamlit.io/develop)/
  * [API reference](https://docs.streamlit.io/develop/api-reference)/
  * [Text elements](https://docs.streamlit.io/develop/api-reference/text)/
  * [st.markdown](https://docs.streamlit.io/develop/api-reference/text/st.markdown)


## [](https://docs.streamlit.io/develop/api-reference/text/st.markdown#stmarkdown)st.markdown
Streamlit VersionVersion 1.44.0Version 1.43.0Version 1.42.0Version 1.41.0Version 1.40.0Version 1.39.0Version 1.38.0Version 1.37.0Version 1.36.0Version 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0
Display string formatted as Markdown.
Function signature[[source]](https://github.com/streamlit/streamlit/blob/1.44.0/lib/streamlit/elements/markdown.py#L33 "View st.markdown source code on GitHub")  
---  
st.markdown(body, unsafe_allow_html=False, *, help=None)  
Parameters  
body (any) |  The text to display as GitHub-flavored Markdown. Syntax information can be found at: <https://github.github.com/gfm>. If anything other than a string is passed, it will be converted into a string behind the scenes using `str(body)`. This also supports:
  * Emoji shortcodes, such as `:+1:` and `:sunglasses:`. For a list of all supported codes, see <https://share.streamlit.io/streamlit/emoji-shortcodes>.
  * Streamlit logo shortcode. Use `:streamlit:` to add a little Streamlit flair to your text.
  * A limited set of typographical symbols. `"<- -> <-> -- >= <= ~="` becomes "← → ↔ — ≥ ≤ ≈" when parsed as Markdown.
  * Google Material Symbols (rounded style), using the syntax `:material/icon_name:`, where "icon_name" is the name of the icon in snake case. For a complete list of icons, see Google's [Material Symbols](https://fonts.google.com/icons?icon.set=Material+Symbols&icon.style=Rounded) font library.
  * LaTeX expressions, by wrapping them in "$" or "$$" (the "$$" must be on their own lines). Supported LaTeX functions are listed at <https://katex.org/docs/supported.html>.
  * Colored text and background colors for text, using the syntax `:color[text to be colored]` and `:color-background[text to be colored]`, respectively. `color` must be replaced with any of the following supported colors: blue, green, orange, red, violet, gray/grey, rainbow, or primary. For example, you can use `:orange[your text here]` or `:blue-background[your text here]`. If you use "primary" for color, Streamlit will use the default primary accent color unless you set the `theme.primaryColor` configuration option.
  * Colored badges, using the syntax `:color-badge[text in the badge]`. `color` must be replaced with any of the following supported colors: blue, green, orange, red, violet, gray/grey, or primary. For example, you can use `:orange-badge[your text here]` or `:blue-badge[your text here]`.
  * Small text, using the syntax `:small[text to show small]`.

  
unsafe_allow_html (bool) |  Whether to render HTML within `body`. If this is `False` (default), any HTML tags found in `body` will be escaped and therefore treated as raw text. If this is `True`, any HTML expressions within `body` will be rendered. Adding custom HTML to your app impacts safety, styling, and maintainability. Note If you only want to insert HTML or CSS without Markdown text, we recommend using `st.html` instead.  
help (str or None) |  A tooltip that gets displayed next to the Markdown. If this is `None` (default), no tooltip is displayed. The tooltip can optionally contain GitHub-flavored Markdown, including the Markdown directives described in the `body` parameter of `st.markdown`.  
#### Examples
```
import streamlit as st
st.markdown("*Streamlit* is **really** ***cool***.")
st.markdown('''
  :red[Streamlit] :orange[can] :green[write] :blue[text] :violet[in]
  :gray[pretty] :rainbow[colors] and :blue-background[highlight] text.''')
st.markdown("Here's a bouquet &mdash;\
      :tulip::cherry_blossom::rose::hibiscus::sunflower::blossom:")
multi = '''If you end a line with two spaces,
a soft return is used for the next line.
Two (or more) newline characters in a row will result in a hard return.
'''
st.markdown(multi)