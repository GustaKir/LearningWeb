Title: Displaying Dataframes with st.table
URL: https://docs.streamlit.io/develop/api-reference/data/st.table
Summary: The `st.table` function in Streamlit allows for the display of static tables, suitable for small, styled data presentations. It is recommended to use `st.dataframe` for interactive exploration of larger datasets and `st.data_editor` for editing capabilities.
---

_star_
#### Tip
Static tables with `st.table` are the most basic way to display dataframes. For the majority of cases, we recommend using [`st.dataframe`](https://docs.streamlit.io/develop/api-reference/data/st.dataframe) to display interactive dataframes, and [`st.data_editor`](https://docs.streamlit.io/develop/api-reference/data/st.data_editor) to let users edit dataframes.
## [](https://docs.streamlit.io/develop/api-reference/data/st.table#sttable)st.table
Streamlit VersionVersion 1.44.0Version 1.43.0Version 1.42.0Version 1.41.0Version 1.40.0Version 1.39.0Version 1.38.0Version 1.37.0Version 1.36.0Version 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0
Display a static table.
While `st.dataframe` is geared towards large datasets and interactive data exploration, `st.table` is useful for displaying small, styled tables without sorting or scrolling. For example, `st.table` may be the preferred way to display a confusion matrix or leaderboard. Additionally, `st.table` supports Markdown.
Function signature[[source]](https://github.com/streamlit/streamlit/blob/1.44.0/lib/streamlit/elements/arrow.py#L651 "View st.table source code on GitHub")  
---  
st.table(data=None)  
Parameters  
data (Anything supported by st.dataframe) |  The table data. All cells including the index and column headers can optionally contain GitHub-flavored Markdown. Syntax information can be found at: <https://github.github.com/gfm>. See the `body` parameter of [`st.markdown`](https://docs.streamlit.io/develop/api-reference/text/st.markdown) for additional, supported Markdown directives.  
#### Examples
**Example 1: Display a simple dataframe as a static table**
```
import streamlit as st
import pandas as pd
import numpy as np
df = pd.DataFrame(
  np.random.randn(10, 5), columns=("col %d" % i for i in range(5))
)
st.table(df)
```

Copy
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-table.streamlit.app//?utm_medium=oembed&)
**Example 2: Display a table of Markdown strings**
```
import streamlit as st
import pandas as pd
df = pd.DataFrame(
  {
    "Command": ["**st.table**", "*st.dataframe*"],
    "Type": ["`static`", "`interactive`"],
    "Docs": [
      "[:rainbow[docs]](https://docs.streamlit.io/develop/api-reference/data/st.dataframe)",
      "[:book:](https://docs.streamlit.io/develop/api-reference/data/st.table)",
    ],
  }
)
st.table(df)
```

Copy
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-table-markdown.streamlit.app//?utm_medium=oembed&)
## [](https://docs.streamlit.io/develop/api-reference/data/st.table#elementadd_rows)element.add_rows
Streamlit VersionVersion 1.44.0Version 1.43.0Version 1.42.0Version 1.41.0Version 1.40.0Version 1.39.0Version 1.38.0Version 1.37.0Version 1.36.0Version 1.35.0Version 1.34.0Version 1.33.0Version 1.32.0Version 1.31.0Version 1.30.0Version 1.29.0Version 1.28.0Version 1.27.0Version 1.26.0Version 1.25.0Version 1.24.0Version 1.23.0Version 1.22.0Version 1.21.0Version 1.20.0
Concatenate a dataframe to the bottom of the current one.
Function signature[[source]](https://github.com/streamlit/streamlit/blob/1.44.0/lib/streamlit/elements/arrow.py#L735 "View st.add_rows source code on GitHub")  
---  
element.add_rows(data=None, **kwargs)  
Parameters  
data (pandas.DataFrame, pandas.Styler, pyarrow.Table, numpy.ndarray, pyspark.sql.DataFrame, snowflake.snowpark.dataframe.DataFrame, Iterable, dict, or None) |  Table to concat. Optional.  
**kwargs (pandas.DataFrame, numpy.ndarray, Iterable, dict, or None) |  The named dataset to concat. Optional. You can only pass in 1 dataset (including the one in the data parameter).  
#### Example
```
import streamlit as st
import pandas as pd
import numpy as np
df1 = pd.DataFrame(
  np.random.randn(50, 20), columns=("col %d" % i for i in range(20))
)
my_table = st.table(df1)
df2 = pd.DataFrame(
  np.random.randn(50, 20), columns=("col %d" % i for i in range(20))
)
my_table.add_rows(df2)
# Now the table shown in the Streamlit app contains the data for
# df1 followed by the data for df2.
```

Copy
You can do the same thing with plots. For example, if you want to add more data to a line chart:
```
# Assuming df1 and df2 from the example above still exist...
my_chart = st.line_chart(df1)
my_chart.add_rows(df2)
# Now the chart shown in the Streamlit app contains the data for
# df1 followed by the data for df2.
```

Copy
And for plots whose datasets are named, you can pass the data with a keyword argument where the key is the name:
```
my_chart = st.vega_lite_chart(
  {
    "mark": "line",
    "encoding": {"x": "a", "y": "b"},
    "datasets": {
      "some_fancy_name": df1, # <-- named dataset
    },
    "data": {"name": "some_fancy_name"},
  }
)
my_chart.add_rows(some_fancy_name=df2) # <-- name used as keyword