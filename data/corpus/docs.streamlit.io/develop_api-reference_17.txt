Title: Streamlit API Reference
URL: https://docs.streamlit.io/develop/api-reference
Summary: This documentation provides examples and references for using Streamlit components such as authentication and local storage, featuring contributions from various developers. It includes code snippets for implementing authentication and accessing localStorage within Streamlit applications.
---

Created by [@mkhorasani](https://github.com/mkhorasani).`import streamlit_authenticator as stauth authenticator = stauth.Authenticate( config['credentials'], config['cookie']['name'], config['cookie']['key'], config['cookie']['expiry_days'], config['preauthorized']) `](https://github.com/mkhorasani/Streamlit-Authenticator)
[![screenshot](https://docs.streamlit.io/images/api/components/localstorage.jpg)WS localStorageA simple synchronous way of accessing localStorage from your app. Created by [@gagangoku](https://github.com/gagangoku).`from streamlit_ws_localstorage import injectWebsocketCode ret = conn.setLocalStorageVal(key='k1', val='v1') st.write('ret: ' + ret) `](https://github.com/gagangoku/streamlit-ws-localstorage)
[![screenshot](https://docs.streamlit.io/images/api/components/auth0.jpg)Streamlit Auth0The fastest way to provide comprehensive login inside Streamlit. Created by [@conradbez](https://github.com/conradbez).`from auth0_component import login_button user_info = login_button(clientId, domain = domain) st.write(user_info) `](https://github.com/conradbez/streamlit-auth0)
### [](https://docs.streamlit.io/develop/api-reference#custom-components)Custom Components
#### [Declare a componentCreate and register a custom component.`from st.components.v1 import declare_component declare_component( "custom_slider", "/frontend", ) `](https://docs.streamlit.io/develop/api-reference/custom-components/st.components.v1.declare_component)#### [HTMLDisplay an HTML string in an iframe.`from st.components.v1 import html html( "<p>Foo bar.</p>" ) `](https://docs.streamlit.io/develop/api-reference/custom-components/st.components.v1.html)#### [iframeLoad a remote URL in an iframe.`from st.components.v1 import iframe iframe( "docs.streamlit.io" ) `](https://docs.streamlit.io/develop/api-reference/custom-components/st.components.v1.iframe)
### [](https://docs.streamlit.io/develop/api-reference#configuration)Configuration
#### [Configuration fileConfigures the default settings for your app.`your-project/ ├── .streamlit/ │  └── config.toml └── your_app.py `](https://docs.streamlit.io/develop/api-reference/configuration/config.toml)#### [Get config optionRetrieve a single configuration option.`st.get_option("theme.primaryColor") `](https://docs.streamlit.io/develop/api-reference/configuration/st.get_option)#### [Set config optionSet a single configuration option. (This is very limited.)`st.set_option("deprecation.showPyplotGlobalUse", False) `](https://docs.streamlit.io/develop/api-reference/configuration/st.set_option)#### [Set page title, favicon, and moreConfigures the default settings of the page.`st.set_page_config(  page_title="My app",  page_icon=":shark:", ) `](https://docs.streamlit.io/develop/api-reference/configuration/st.set_page_config)
## [](https://docs.streamlit.io/develop/api-reference#developer-tools)Developer tools
### [](https://docs.streamlit.io/develop/api-reference#app-testing)App testing
#### [st.testing.v1.AppTest`st.testing.v1.AppTest` simulates a running Streamlit app for testing.`from streamlit.testing.v1 import AppTest at = AppTest.from_file("streamlit_app.py") at.secrets["WORD"] = "Foobar" at.run() assert not at.exception at.text_input("word").input("Bazbat").run() assert at.warning[0].value == "Try again." `](https://docs.streamlit.io/develop/api-reference/app-testing/st.testing.v1.apptest)#### [AppTest.from_file`st.testing.v1.AppTest.from_file` initializes a simulated app from a file.`from streamlit.testing.v1 import AppTest at = AppTest.from_file("streamlit_app.py") at.run() `](https://docs.streamlit.io/develop/api-reference/app-testing/st.testing.v1.apptest#apptestfrom_file)#### [AppTest.from_string`st.testing.v1.AppTest.from_string` initializes a simulated app from a string.`from streamlit.testing.v1 import AppTest at = AppTest.from_string(app_script_as_string) at.run() `](https://docs.streamlit.io/develop/api-reference/app-testing/st.testing.v1.apptest#apptestfrom_string)#### [AppTest.from_function`st.testing.v1.AppTest.from_function` initializes a simulated app from a function.`from streamlit.testing.v1 import AppTest at = AppTest.from_function(app_script_as_callable) at.run() `](https://docs.streamlit.io/develop/api-reference/app-testing/st.testing.v1.apptest#apptestfrom_function)#### [BlockA representation of container elements, including:
  * `st.chat_message`
  * `st.columns`
  * `st.sidebar`
  * `st.tabs`
  * The main body of the app.

`# at.sidebar returns a Block at.sidebar.button[0].click().run() assert not at.exception `](https://docs.streamlit.io/develop/api-reference/app-testing/testing-element-classes#sttestingv1element_treeblock)#### [ElementThe base class for representation of all elements, including:
  * `st.title`
  * `st.header`
  * `st.markdown`
  * `st.dataframe`