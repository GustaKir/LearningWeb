Title: User Authentication with Google
URL: https://docs.streamlit.io/develop/tutorials/authentication/google
Summary: This section outlines how to implement user login functionality in a Streamlit app using Google authentication. It provides a function to display a login prompt and conditional logic to show user information based on their login status.
---

### [](https://docs.streamlit.io/develop/tutorials/authentication/google#log-the-user-in-and-out)Log the user in and out
  1. Define a function that prompts the user to log in:
`def login_screen():   st.header("This app is private.")   st.subheader("Please log in.")   st.button("Log in with Google", on_click=st.login) `
This function displays a short message and a button. Streamlit's login command is assigned to the button as a callback.
_push_pin_
#### Note
If you don't want to use a callback, you can replace the last line with an equivalent `if` statement:
`- st.button("Log in with Google", on_click=st.login) + if st.button("Log in with Google"): +   st.login() `
  2. Conditioned on whether the user is logged in, call your function to prompt the user, or show their information:
`if not st.experimental_user.is_logged_in:   login_screen() else:   st.experimental_user `
Because `st.experimental_user` is a dict-like object in a line by itself, Streamlit magic displays it in your app.
  3. Save your `app.py` file, and test your running app.
In your live preview, when you log in to your app, the login button is replaced with the contents of your identity token. Observe the different values that are available from Google. You can use these values to personalize your app for your users.
  4. Return to your code.
  5. Replace `st.experimental_user` with a personalized greeting:
`else: -  st.experimental_user +  st.header(f"Welcome, {st.experimental_user.name}!") `
  6. Add a logout button:
`  st.button("Log out", on_click=st.logout) `
  7. Save your `app.py` file and test your running app.
In your live preview, if you log out of your app, it will return to the login prompt.


## [](https://docs.streamlit.io/develop/tutorials/authentication/google#deploy-your-app-on-community-cloud)Deploy your app on Community Cloud
When you are ready to deploy your app, you must update your application on Google Cloud and your secrets. The following steps describe how to deploy your app on Community Cloud.
  1. Add a `requirements.txt` file to your repository with the following lines:
`streamlit>=1.42.0 Authlib>=1.3.2 `
This ensures that the correct Python dependencies are installed for your deployed app.
  2. Save your `requirements.txt` file.
  3. Deploy your app, and copy your app's URL into your text editor.
You'll use your app's URL to update your secrets and client configuration in the following steps. For more information about deploying an app on Community Cloud, see [Deploy your app](https://docs.streamlit.io/deploy/streamlit-community-cloud/deploy-your-app).
  4. In your [app settings](https://docs.streamlit.io/deploy/streamlit-community-cloud/manage-your-app/app-settings) in Community Cloud, select "**Secrets**."
  5. Copy the contents of your local `secrets.toml` file, and paste them into your app settings.
  6. Change your `redirect_uri` to reflect your deployed app's URL, which you copied earlier in this tutorial.
For example, if your app is `my_streamlit_app.streamlit.io`, your redirect URI would be `https://my_streamlit_app.streamlit.io/oauth2callback`.
  7. Save and close your settings.
  8. Return to the clients page in the Google Auth Platform, and select your client.
  9. Under "Authorized redirect URIs," add or update a URI to match your new `redirect_uri`.
  10. At the bottom of the page, select "**SAVE**."
  11. Open your deployed app, and test it.
Your Google Cloud application's status is still _Testing_. You should be able to log in and out of your app with the personal Google account you entered on the "Audience" page.
  12. When you are ready for others to use your app, return to the "Audience" page in the Google Auth Platform, and set your application status to _Published_.

[Previous: Authentication & personalization](https://docs.streamlit.io/develop/tutorials/authentication)[Next: Microsoft Entra](https://docs.streamlit.io/develop/tutorials/authentication/microsoft) _forum_
### Still have questions?
Our [forums](https://discuss.streamlit.io) are full of helpful information and Streamlit experts.
[Home](https://docs.streamlit.io/)Contact Us[Community](https://discuss.streamlit.io)[](https://github.com/streamlit "GitHub")[](https://www.youtube.com/channel/UC3LD42rjj-Owtxsa6PwGU5Q "YouTube")[](https://twitter.com/streamlit "Twitter")[](https://www.linkedin.com/company/streamlit "LinkedIn")[](https://info.snowflake.com/streamlit-newsletter-sign-up.html "Newsletter")
Â© 2025 Snowflake Inc.Cookie policy
 _forum_ Ask AI