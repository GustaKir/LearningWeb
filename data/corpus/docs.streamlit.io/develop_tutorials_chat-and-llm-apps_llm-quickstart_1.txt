Title: Build an LLM App using LangChain
URL: https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/llm-quickstart
Summary: This tutorial demonstrates how to create a Streamlit app that generates text based on user prompts using LangChain and Streamlit. The app can be optionally deployed to Streamlit Community Cloud, and is based on a blog post about building an LLM-powered app in just 18 lines of code.
---

# [](https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/llm-quickstart#build-an-llm-app-using-langchain)Build an LLM app using LangChain
## [](https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/llm-quickstart#openai-langchain-and-streamlit-in-18-lines-of-code)OpenAI, LangChain, and Streamlit in 18 lines of code
In this tutorial, you will build a Streamlit LLM app that can generate text from a user-provided prompt. This Python app will use the LangChain framework and Streamlit. Optionally, you can deploy your app to [Streamlit Community Cloud](https://streamlit.io/cloud) when you're done.
_This tutorial is adapted from a blog post by Chanin Nantesanamat:[LangChain tutorial #1: Build an LLM-powered app in 18 lines of code](https://blog.streamlit.io/langchain-tutorial-1-build-an-llm-powered-app-in-18-lines-of-code/)._
[Built with Streamlit ðŸŽˆ](https://streamlit.io)
[Fullscreen _open_in_new_](https://doc-tutorial-llm-18-lines-of-code.streamlit.app/?utm_medium=oembed)
## [](https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/llm-quickstart#objectives)Objectives
  1. Get an OpenAI key from the end user.
  2. Validate the user's OpenAI key.
  3. Get a text prompt from the user.
  4. Authenticate OpenAI with the user's key.
  5. Send the user's prompt to OpenAI's API.
  6. Get a response and display it.


Bonus: Deploy the app on Streamlit Community Cloud!
## [](https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/llm-quickstart#prerequisites)Prerequisites
  * Python 3.9+
  * Streamlit
  * LangChain
  * [OpenAI API key](https://platform.openai.com/account/api-keys?ref=blog.streamlit.io)


## [](https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/llm-quickstart#setup-coding-environment)Setup coding environment
In your IDE (integrated coding environment), open the terminal and install the following two Python libraries:
`pip install streamlit langchain-openai `
Create a `requirements.txt` file located in the root of your working directory and save these dependencies. This is necessary for deploying the app to the Streamlit Community Cloud later.
`streamlit openai langchain `
## [](https://docs.streamlit.io/develop/tutorials/chat-and-llm-apps/llm-quickstart#building-the-app)Building the app
The app is only 18 lines of code:
`import streamlit as st from langchain_openai.chat_models import ChatOpenAI st.title("ðŸ¦œðŸ”— Quickstart App") openai_api_key = st.sidebar.text_input("OpenAI API Key", type="password") def generate_response(input_text):   model = ChatOpenAI(temperature=0.7, api_key=openai_api_key)   st.info(model.invoke(input_text)) with st.form("my_form"):   text = st.text_area( "Enter text:", "What are the three key pieces of advice for learning how to code?", )   submitted = st.form_submit_button("Submit") if not openai_api_key.startswith("sk-"):     st.warning("Please enter your OpenAI API key!", icon="âš ") if submitted and openai_api_key.startswith("sk-"):     generate_response(text) `
To start, create a new Python file and save it as `streamlit_app.py` in the root of your working directory.
  1. Import the necessary Python libraries.
`import streamlit as st from langchain_openai.chat_models import ChatOpenAI `
  2. Create the app's title using `st.title`.
`st.title("ðŸ¦œðŸ”— Quickstart App") `
  3. Add a text input box for the user to enter their OpenAI API key.
`openai_api_key = st.sidebar.text_input("OpenAI API Key", type="password") `
  4. Define a function to authenticate to OpenAI API with the user's key, send a prompt, and get an AI-generated response. This function accepts the user's prompt as an argument and displays the AI-generated response in a blue box using `st.info`.
`def generate_response(input_text): model = ChatOpenAI(temperature=0.7, api_key=openai_api_key)   st.info(model.invoke(input_text)) `
  5. Finally, use `st.form()` to create a text box (`st.text_area()`) for user input. When the user clicks `Submit`, the `generate-response()` function is called with the user's input as an argument.
`with st.form("my_form"):   text = st.text_area( "Enter text:", "What are the three key pieces of advice for learning how to code?", )   submitted = st.form_submit_button("Submit") if not openai_api_key.startswith("sk-"):     st.warning("Please enter your OpenAI API key!", icon="âš ") if submitted and openai_api_key.startswith("sk-"):     generate_response(text) `
  6. Remember to save your file!
  7. Return to your computer's terminal to run the app.
`streamlit run streamlit_app.py `