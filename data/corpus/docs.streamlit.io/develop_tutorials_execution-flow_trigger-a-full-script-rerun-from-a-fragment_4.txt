Title: Function to Show Daily Sales Data as a Fragment
URL: https://docs.streamlit.io/develop/tutorials/execution-flow/trigger-a-full-script-rerun-from-a-fragment
Summary: This section describes how to create a function that displays daily sales data using a date input widget. The function operates as a fragment, allowing it to rerun independently within the app. It triggers a full app rerun whenever the selected month changes.
---

### [](https://docs.streamlit.io/develop/tutorials/execution-flow/trigger-a-full-script-rerun-from-a-fragment#build-a-function-to-show-daily-sales-data)Build a function to show daily sales data
Since the daily sales data updates with every new date selection, you'll turn this function into a fragment. As a fragment, it can rerun independently from the rest of your app. You'll include an `st.date_input` widget inside this fragment and watch for a date selection that changes the month. When the fragment detects a change in the selected month, it will trigger a full app rerun so everything can update.
Complete function to display daily sales data _expand_more_
`@st.fragment def show_daily_sales(data):   time.sleep(1)   selected_date = st.date_input( "Pick a day ",     value=date(2023, 1, 1),     min_value=date(2023, 1, 1),     max_value=date(2023, 12, 31),     key="selected_date", ) if "previous_date" not in st.session_state:     st.session_state.previous_date = selected_date   previous_date = st.session_state.previous_date   st.session_state.previous_date = selected_date   is_new_month = selected_date.replace(day=1) != previous_date.replace(day=1) if is_new_month:     st.rerun()   st.header(f"Best sellers, {selected_date:%m/%d/%y}")   top_ten = data.loc[selected_date].sort_values(ascending=False)[0:10]   cols = st.columns([1, 4])   cols[0].dataframe(top_ten)   cols[1].bar_chart(top_ten)   st.header(f"Worst sellers, {selected_date:%m/%d/%y}")   bottom_ten = data.loc[selected_date].sort_values()[0:10]   cols = st.columns([1, 4])   cols[0].dataframe(bottom_ten)   cols[1].bar_chart(bottom_ten) `
  1. Use an [`@st.fragment`](https://docs.streamlit.io/develop/api-reference/execution-flow/st.fragment) decorator and start your function definition.
`@st.fragment def show_daily_sales(data): `
Since your data will not change during a fragment rerun, you can pass the data into the fragment as an argument.
  2. Optional: Add `time.sleep(1)` to slow down the function and show off how the fragment works.
`  time.sleep(1) `
  3. Add an `st.date_input` widget.
`  selected_date = st.date_input( "Pick a day ",     value=date(2023, 1, 1),     min_value=date(2023, 1, 1),     max_value=date(2023, 12, 31),     key="selected_date", ) `
Your random data is for 2023, so set the minimun and maximum dates to match. Use a key for the widget because elements outside the fragment will need this date value. When working with a fragment, it's best to use Session State to pass information in and out of the fragment.
  4. Initialize `"previous_date"` in Session State to compare each date selection.
` if "previous_date" not in st.session_state:     st.session_state.previous_date = selected_date `
  5. Save the previous date selection into a new variable and update `"previous_date"` in Session State.
`  previous_date = st.session_state.previous_date   st.session_state.previous_date = selected_date `
  6. Call `st.rerun()` if the month changed.
`  is_new_month = selected_date.replace(day=1) != previous_date.replace(day=1) if is_new_month:     st.rerun() `
  7. Show the best sellers from the selected date.
`  st.header(f"Best sellers, {selected_date:%m/%d/%y}")   top_ten = data.loc[selected_date].sort_values(ascending=False)[0:10]   cols = st.columns([1, 4])   cols[0].dataframe(top_ten)   cols[1].bar_chart(top_ten) `
  8. Show the worst sellers from the selected date.
`  st.header(f"Worst sellers, {selected_date:%m/%d/%y}")   bottom_ten = data.loc[selected_date].sort_values()[0:10]   cols = st.columns([1, 4])   cols[0].dataframe(bottom_ten)   cols[1].bar_chart(bottom_ten) `
  9. Optional: Test out your function by calling it and displaying the data.
`data = get_data() show_daily_sales(data) `
Save your `app.py` file to see the preview. Delete these two lines or keep them at the end of your app to be updated as you continue.