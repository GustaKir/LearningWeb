Title: Chat Elements in Streamlit
URL: https://docs.streamlit.io/develop/api-reference
Summary: Streamlit provides commands for creating conversational apps, including `st.chat_message` for displaying chat messages and `st.chat_input` for user input. These elements can be used together or separately to build interactive chat experiences.
---

Created by [@blackary](https://github.com/blackary).`from st_pages import Page, show_pages, add_page_title show_pages([ Page("streamlit_app.py", "Home", "üè†"),  Page("other_pages/page2.py", "Page 2", ":books:"), ]) `](https://github.com/blackary/st_pages)
### [](https://docs.streamlit.io/develop/api-reference#chat-elements)Chat elements
Streamlit provides a few commands to help you build conversational apps. These chat elements are designed to be used in conjunction with each other, but you can also use them separately.
`st.chat_message` lets you insert a chat message container into the app so you can display messages from the user or the app. Chat containers can contain other Streamlit elements, including charts, tables, text, and more. `st.chat_input` lets you display a chat input widget so the user can type in a message.
[![screenshot](https://docs.streamlit.io/images/api/chat_input.jpg)Chat inputDisplay a chat input widget.`prompt = st.chat_input("Say something") if prompt:   st.write(f"The user has sent: {prompt}") `](https://docs.streamlit.io/develop/api-reference/chat/st.chat_input)[![screenshot](https://docs.streamlit.io/images/api/chat_message.jpg)Chat messageInsert a chat message container.`import numpy as np with st.chat_message("user"):   st.write("Hello üëã")   st.line_chart(np.random.randn(30, 3)) `](https://docs.streamlit.io/develop/api-reference/chat/st.chat_message)[![screenshot](https://docs.streamlit.io/images/api/status.jpg)Status containerDisplay output of long-running tasks in a container.`with st.status('Running'):  do_something_slow() `](https://docs.streamlit.io/develop/api-reference/status/st.status)#### [st.write_streamWrite generators or streams to the app with a typewriter effect.`st.write_stream(my_generator) st.write_stream(my_llm_stream) `](https://docs.streamlit.io/develop/api-reference/write-magic/st.write_stream)
### [](https://docs.streamlit.io/develop/api-reference#status-elements)Status elements
[![screenshot](https://docs.streamlit.io/images/api/progress.jpg)Progress barDisplay a progress bar.`for i in range(101):  st.progress(i)  do_something_slow() `](https://docs.streamlit.io/develop/api-reference/status/st.progress)[![screenshot](https://docs.streamlit.io/images/api/spinner.jpg)SpinnerTemporarily displays a message while executing a block of code.`with st.spinner("Please wait..."):  do_something_slow() `](https://docs.streamlit.io/develop/api-reference/status/st.spinner)[![screenshot](https://docs.streamlit.io/images/api/status.jpg)Status containerDisplay output of long-running tasks in a container.`with st.status('Running'):  do_something_slow() `](https://docs.streamlit.io/develop/api-reference/status/st.status)[![screenshot](https://docs.streamlit.io/images/api/toast.jpg)ToastBriefly displays a toast message in the bottom-right corner.`st.toast('Butter!', icon='üßà') `](https://docs.streamlit.io/develop/api-reference/status/st.toast)[![screenshot](https://docs.streamlit.io/images/api/balloons.jpg)BalloonsDisplay celebratory balloons!`do_something() # Celebrate when all done! st.balloons() `](https://docs.streamlit.io/develop/api-reference/status/st.balloons)[![screenshot](https://docs.streamlit.io/images/api/snow.jpg)SnowflakesDisplay celebratory snowflakes!`do_something() # Celebrate when all done! st.snow() `](https://docs.streamlit.io/develop/api-reference/status/st.snow)[![screenshot](https://docs.streamlit.io/images/api/success.jpg)Success boxDisplay a success message.`st.success("Match found!") `](https://docs.streamlit.io/develop/api-reference/status/st.success)[![screenshot](https://docs.streamlit.io/images/api/info.jpg)Info boxDisplay an informational message.`st.info("Dataset is updated every day at midnight.") `](https://docs.streamlit.io/develop/api-reference/status/st.info)[![screenshot](https://docs.streamlit.io/images/api/warning.jpg)Warning boxDisplay warning message.`st.warning("Unable to fetch image. Skipping...") `](https://docs.streamlit.io/develop/api-reference/status/st.warning)[![screenshot](https://docs.streamlit.io/images/api/error.jpg)Error boxDisplay error message.`st.error("We encountered an error") `](https://docs.streamlit.io/develop/api-reference/status/st.error)[![screenshot](https://docs.streamlit.io/images/api/exception.jpg)Exception outputDisplay an exception.`e = RuntimeError("This is an exception of type RuntimeError") st.exception(e) `](https://docs.streamlit.io/develop/api-reference/status/st.exception)
Third-party components
These are featured components created by our lovely community. For more examples and inspiration, check out our [Components Gallery](https://streamlit.io/components) and [Streamlit Extras](https://extras.streamlit.app)!
[![screenshot](https://docs.streamlit.io/images/api/components/stqdm.jpg)StqdmThe simplest way to handle a progress bar in streamlit app.