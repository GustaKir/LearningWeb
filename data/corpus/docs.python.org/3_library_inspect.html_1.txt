Title: inspect — Inspect live objects
URL: https://docs.python.org/3/library/inspect.html
Summary: The `inspect` module offers functions to gather information about live objects, including modules, classes, methods, functions, tracebacks, frame objects, and code objects. Key services include type checking, source code retrieval, and inspecting classes and functions, as well as examining the interpreter stack.
---

# `inspect` — Inspect live objects[¶](https://docs.python.org/3/library/inspect.html#inspect-inspect-live-objects "Link to this heading")
**Source code:** [Lib/inspect.py](https://github.com/python/cpython/tree/3.13/Lib/inspect.py)
The [`inspect`](https://docs.python.org/3/library/inspect.html#module-inspect "inspect: Extract information and source code from live objects.") module provides several useful functions to help get information about live objects such as modules, classes, methods, functions, tracebacks, frame objects, and code objects. For example, it can help you examine the contents of a class, retrieve the source code of a method, extract and format the argument list for a function, or get all the information you need to display a detailed traceback.
There are four main kinds of services provided by this module: type checking, getting source code, inspecting classes and functions, and examining the interpreter stack.
## Types and members[¶](https://docs.python.org/3/library/inspect.html#types-and-members "Link to this heading")
The [`getmembers()`](https://docs.python.org/3/library/inspect.html#inspect.getmembers "inspect.getmembers") function retrieves the members of an object such as a class or module. The functions whose names begin with “is” are mainly provided as convenient choices for the second argument to [`getmembers()`](https://docs.python.org/3/library/inspect.html#inspect.getmembers "inspect.getmembers"). They also help you determine when you can expect to find the following special attributes (see [Import-related attributes on module objects](https://docs.python.org/3/reference/datamodel.html#import-mod-attrs) for module attributes):
Type | Attribute | Description  
---|---|---  
class | __doc__ | documentation string  
| __name__ | name with which this class was defined  
| __qualname__ | qualified name  
| __module__ | name of module in which this class was defined  
| __type_params__ | A tuple containing the [type parameters](https://docs.python.org/3/reference/compound_stmts.html#type-params) of a generic class  
method | __doc__ | documentation string  
| __name__ | name with which this method was defined  
| __qualname__ | qualified name  
| __func__ | function object containing implementation of method  
| __self__ | instance to which this method is bound, or `None`  
| __module__ | name of module in which this method was defined  
function | __doc__ | documentation string  
| __name__ | name with which this function was defined  
| __qualname__ | qualified name  
| __code__ | code object containing compiled function [bytecode](https://docs.python.org/3/glossary.html#term-bytecode)  
| __defaults__ | tuple of any default values for positional or keyword parameters  
| __kwdefaults__ | mapping of any default values for keyword-only parameters  
| __globals__ | global namespace in which this function was defined  
| __builtins__ | builtins namespace  
| __annotations__ | mapping of parameters names to annotations; `"return"` key is reserved for return annotations.  
| __type_params__ | A tuple containing the [type parameters](https://docs.python.org/3/reference/compound_stmts.html#type-params) of a generic function  
| __module__ | name of module in which this function was defined  
traceback | tb_frame | frame object at this level  
| tb_lasti | index of last attempted instruction in bytecode  
| tb_lineno | current line number in Python source code  
| tb_next | next inner traceback object (called by this level)  
frame | f_back | next outer frame object (this frame’s caller)  
| f_builtins | builtins namespace seen by this frame  
| f_code | code object being executed in this frame  
| f_globals | global namespace seen by this frame  
| f_lasti | index of last attempted instruction in bytecode  
| f_lineno | current line number in Python source code  
| f_locals | local namespace seen by this frame  
| f_trace | tracing function for this frame, or `None`  
code | co_argcount | number of arguments (not including keyword only arguments, * or ** args)  
| co_code | string of raw compiled bytecode  
| co_cellvars | tuple of names of cell variables (referenced by containing scopes)  
| co_consts | tuple of constants used in the bytecode  
| co_filename | name of file in which this code object was created  
| co_firstlineno | number of first line in Python source code  
| co_flags | bitmap of `CO_*` flags, read more [here](https://docs.python.org/3/library/inspect.html#inspect-module-co-flags)  
| co_lnotab | encoded mapping of line numbers to bytecode indices  
| co_freevars | tuple of names of free variables (referenced via a function’s closure)  
| co_posonlyargcount | number of positional only arguments  
| co_kwonlyargcount | number of keyword only arguments (not including ** arg)  
| co_name | name with which this code object was defined  
| co_qualname | fully qualified name with which this code object was defined  
| co_names | tuple of names other than arguments and fu