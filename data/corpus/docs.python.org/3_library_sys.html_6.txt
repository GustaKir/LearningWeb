Title: System Hooks in Python
URL: https://docs.python.org/3/library/sys.html
Summary: This section describes the system hooks: __breakpointhook__, __displayhook__, __excepthook__, and __unraisablehook__, which retain their original values at program start. Introduced in Python versions 3.7 and 3.8 respectively, these hooks allow restoration of functions if they are replaced with erroneous versions.
---

sys.__breakpointhook__[¶](https://docs.python.org/3/library/sys.html#sys.__breakpointhook__ "Link to this definition")


sys.__displayhook__[¶](https://docs.python.org/3/library/sys.html#sys.__displayhook__ "Link to this definition")


sys.__excepthook__[¶](https://docs.python.org/3/library/sys.html#sys.__excepthook__ "Link to this definition")


sys.__unraisablehook__[¶](https://docs.python.org/3/library/sys.html#sys.__unraisablehook__ "Link to this definition")
    
These objects contain the original values of `breakpointhook`, `displayhook`, `excepthook`, and `unraisablehook` at the start of the program. They are saved so that `breakpointhook`, `displayhook` and `excepthook`, `unraisablehook` can be restored in case they happen to get replaced with broken or alternative objects.
Added in version 3.7: __breakpointhook__
Added in version 3.8: __unraisablehook__ 

sys.exception()[¶](https://docs.python.org/3/library/sys.html#sys.exception "Link to this definition")
    
This function, when called while an exception handler is executing (such as an `except` or `except*` clause), returns the exception instance that was caught by this handler. When exception handlers are nested within one another, only the exception handled by the innermost handler is accessible.
If no exception handler is executing, this function returns `None`.
Added in version 3.11. 

sys.exc_info()[¶](https://docs.python.org/3/library/sys.html#sys.exc_info "Link to this definition")
    
This function returns the old-style representation of the handled exception. If an exception `e` is currently handled (so [`exception()`](https://docs.python.org/3/library/sys.html#sys.exception "sys.exception") would return `e`), [`exc_info()`](https://docs.python.org/3/library/sys.html#sys.exc_info "sys.exc_info") returns the tuple `(type(e), e, e.__traceback__)`. That is, a tuple containing the type of the exception (a subclass of [`BaseException`](https://docs.python.org/3/library/exceptions.html#BaseException "BaseException")), the exception itself, and a [traceback object](https://docs.python.org/3/reference/datamodel.html#traceback-objects) which typically encapsulates the call stack at the point where the exception last occurred.
If no exception is being handled anywhere on the stack, this function return a tuple containing three `None` values.
Changed in version 3.11: The `type` and `traceback` fields are now derived from the `value` (the exception instance), so when an exception is modified while it is being handled, the changes are reflected in the results of subsequent calls to [`exc_info()`](https://docs.python.org/3/library/sys.html#sys.exc_info "sys.exc_info"). 

sys.exec_prefix[¶](https://docs.python.org/3/library/sys.html#sys.exec_prefix "Link to this definition")
    
A string giving the site-specific directory prefix where the platform-dependent Python files are installed; by default, this is also `'/usr/local'`. This can be set at build time with the `--exec-prefix` argument to the **configure** script. Specifically, all configuration files (e.g. the `pyconfig.h` header file) are installed in the directory `_exec_prefix_/lib/python_X.Y_/config`, and shared library modules are installed in` _exec_prefix_/lib/python_X.Y_/lib-dynload`, where _X.Y_ is the version number of Python, for example `3.2`.
Note
If a [virtual environment](https://docs.python.org/3/library/venv.html#venv-def) is in effect, this value will be changed in `site.py` to point to the virtual environment. The value for the Python installation will still be available, via [`base_exec_prefix`](https://docs.python.org/3/library/sys.html#sys.base_exec_prefix "sys.base_exec_prefix"). 

sys.executable[¶](https://docs.python.org/3/library/sys.html#sys.executable "Link to this definition")
    
A string giving the absolute path of the executable binary for the Python interpreter, on systems where this makes sense. If Python is unable to retrieve the real path to its executable, [`sys.executable`](https://docs.python.org/3/library/sys.html#sys.executable "sys.executable") will be an empty string or `None`.