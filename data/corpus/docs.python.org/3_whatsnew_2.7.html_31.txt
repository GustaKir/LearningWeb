Title: Enhancements to Testing Fixtures in Python 2.7
URL: https://docs.python.org/3/whatsnew/2.7.html
Summary: Python 2.7 introduces support for module- and class-level setup and teardown fixtures with `setUpModule()`, `tearDownModule()`, `setUpClass()`, and `tearDownClass()` methods. These are invoked during test case transitions across different modules or classes, enhancing test organization.
---

```

(Implemented by Antoine Pitrou; [bpo-4444](https://bugs.python.org/issue?@action=redirect&bpo=4444).)
Module- and class-level setup and teardown fixtures are now supported. Modules can contain `setUpModule()` and `tearDownModule()` functions. Classes can have [`setUpClass()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.setUpClass "unittest.TestCase.setUpClass") and [`tearDownClass()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.tearDownClass "unittest.TestCase.tearDownClass") methods that must be defined as class methods (using `@classmethod` or equivalent). These functions and methods are invoked when the test runner switches to a test case in a different module or class.
The methods [`addCleanup()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.addCleanup "unittest.TestCase.addCleanup") and [`doCleanups()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.doCleanups "unittest.TestCase.doCleanups") were added. [`addCleanup()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.addCleanup "unittest.TestCase.addCleanup") lets you add cleanup functions that will be called unconditionally (after [`setUp()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.setUp "unittest.TestCase.setUp") if [`setUp()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.setUp "unittest.TestCase.setUp") fails, otherwise after [`tearDown()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.tearDown "unittest.TestCase.tearDown")). This allows for much simpler resource allocation and deallocation during tests ([bpo-5679](https://bugs.python.org/issue?@action=redirect&bpo=5679)).
A number of new methods were added that provide more specialized tests. Many of these methods were written by Google engineers for use in their test suites; Gregory P. Smith, Michael Foord, and GvR worked on merging them into Python’s version of [`unittest`](https://docs.python.org/3/library/unittest.html#module-unittest "unittest: Unit testing framework for Python.").
  * [`assertIsNone()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIsNone "unittest.TestCase.assertIsNone") and [`assertIsNotNone()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIsNotNone "unittest.TestCase.assertIsNotNone") take one expression and verify that the result is or is not `None`.
  * [`assertIs()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIs "unittest.TestCase.assertIs") and [`assertIsNot()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIsNot "unittest.TestCase.assertIsNot") take two values and check whether the two values evaluate to the same object or not. (Added by Michael Foord; [bpo-2578](https://bugs.python.org/issue?@action=redirect&bpo=2578).)
  * [`assertIsInstance()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIsInstance "unittest.TestCase.assertIsInstance") and [`assertNotIsInstance()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotIsInstance "unittest.TestCase.assertNotIsInstance") check whether the resulting object is an instance of a particular class, or of one of a tuple of classes. (Added by Georg Brandl; [bpo-7031](https://bugs.python.org/issue?@action=redirect&bpo=7031).)
  * [`assertGreater()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertGreater "unittest.TestCase.assertGreater"), [`assertGreaterEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertGreaterEqual "unittest.TestCase.assertGreaterEqual"), [`assertLess()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertLess "unittest.TestCase.assertLess"), and [`assertLessEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertLessEqual "unittest.TestCase.assertLessEqual") compare two quantities.
  * [`assertMultiLineEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertMultiLineEqual "unittest.TestCase.assertMultiLineEqual") compares two strings, and if they’re not equal, displays a helpful comparison that highlights the differences in the two strings. This comparison is now used by default when Unicode strings are compared with [`assertEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertEqual "unittest.TestCase.assertEqual").
  * [`assertRegexpMatches()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRegex "unittest.TestCase.assertRegex") and [`assertNotRegexpMatches()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotRegex "unittest.TestCase.assertNotRegex") checks whether the first argument is a string matching or not matching the regular expression provided as the second argument ([bpo-8038](https://bugs.python.org/issue?@action=redirect&bpo=8038)).
  * [`assertRaisesRegexp()`](http