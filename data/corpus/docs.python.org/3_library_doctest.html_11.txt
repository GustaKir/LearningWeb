Title: Creating unittest.TestSuite from Doctests
URL: https://docs.python.org/3/library/doctest.html
Summary: This document section describes the `doctest.DocFileSuite` function, which converts doctest tests from text files into a `unittest.TestSuite` instance. It outlines the parameters that can be used, and explains that the resulting test suite is meant to be executed by the unittest framework, running interactive examples and reporting failures accordingly.
---

```

There are two main functions for creating [`unittest.TestSuite`](https://docs.python.org/3/library/unittest.html#unittest.TestSuite "unittest.TestSuite") instances from text files and modules with doctests: 

doctest.DocFileSuite(_* paths_, _module_relative =True_, _package =None_, _setUp =None_, _tearDown =None_, _globs =None_, _optionflags =0_, _parser =DocTestParser()_, _encoding =None_)[¶](https://docs.python.org/3/library/doctest.html#doctest.DocFileSuite "Link to this definition")
    
Convert doctest tests from one or more text files to a [`unittest.TestSuite`](https://docs.python.org/3/library/unittest.html#unittest.TestSuite "unittest.TestSuite").
The returned [`unittest.TestSuite`](https://docs.python.org/3/library/unittest.html#unittest.TestSuite "unittest.TestSuite") is to be run by the unittest framework and runs the interactive examples in each file. If an example in any file fails, then the synthesized unit test fails, and a [`failureException`](https://docs.python.org/3/library/doctest.html#doctest.failureException "doctest.failureException") exception is raised showing the name of the file containing the test and a (sometimes approximate) line number. If all the examples in a file are skipped, then the synthesized unit test is also marked as skipped.
Pass one or more paths (as strings) to text files to be examined.
Options may be provided as keyword arguments:
Optional argument _module_relative_ specifies how the filenames in _paths_ should be interpreted:
  * If _module_relative_ is `True` (the default), then each filename in _paths_ specifies an OS-independent module-relative path. By default, this path is relative to the calling module’s directory; but if the _package_ argument is specified, then it is relative to that package. To ensure OS-independence, each filename should use `/` characters to separate path segments, and may not be an absolute path (i.e., it may not begin with `/`).
  * If _module_relative_ is `False`, then each filename in _paths_ specifies an OS-specific path. The path may be absolute or relative; relative paths are resolved with respect to the current working directory.


Optional argument _package_ is a Python package or the name of a Python package whose directory should be used as the base directory for module-relative filenames in _paths_. If no package is specified, then the calling module’s directory is used as the base directory for module-relative filenames. It is an error to specify _package_ if _module_relative_ is `False`.
Optional argument _setUp_ specifies a set-up function for the test suite. This is called before running the tests in each file. The _setUp_ function will be passed a [`DocTest`](https://docs.python.org/3/library/doctest.html#doctest.DocTest "doctest.DocTest") object. The setUp function can access the test globals as the _globs_ attribute of the test passed.
Optional argument _tearDown_ specifies a tear-down function for the test suite. This is called after running the tests in each file. The _tearDown_ function will be passed a [`DocTest`](https://docs.python.org/3/library/doctest.html#doctest.DocTest "doctest.DocTest") object. The setUp function can access the test globals as the _globs_ attribute of the test passed.
Optional argument _globs_ is a dictionary containing the initial global variables for the tests. A new copy of this dictionary is created for each test. By default, _globs_ is a new empty dictionary.
Optional argument _optionflags_ specifies the default doctest options for the tests, created by or-ing together individual option flags. See section [Option Flags](https://docs.python.org/3/library/doctest.html#doctest-options). See function [`set_unittest_reportflags()`](https://docs.python.org/3/library/doctest.html#doctest.set_unittest_reportflags "doctest.set_unittest_reportflags") below for a better way to set reporting options.
Optional argument _parser_ specifies a [`DocTestParser`](https://docs.python.org/3/library/doctest.html#doctest.DocTestParser "doctest.DocTestParser") (or subclass) that should be used to extract tests from the files. It defaults to a normal parser (i.e., `DocTestParser()`).
Optional argument _encoding_ specifies an encoding that should be used to convert the file to unicode.
The global `__file__` is added to the globals provided to doctests loaded from a text file using [`DocFileSuite()`](https://docs.python.org/3/library/doctest.html#doctest.DocFileSuite "doctest.DocFileSuite").