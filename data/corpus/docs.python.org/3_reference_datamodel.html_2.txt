Title: Data Model
URL: https://docs.python.org/3/reference/datamodel.html
Summary: This document discusses the data model in Python, outlining the structure and functionality of Python objects and how they interact within the language's framework. It serves as a reference point for understanding the behavior and organization of data types.
---

#### Previous topic
[2. Lexical analysis](https://docs.python.org/3/reference/lexical_analysis.html "previous chapter")
#### Next topic
[4. Execution model](https://docs.python.org/3/reference/executionmodel.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/reference/datamodel.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/reference/executionmodel.html "4. Execution model") |
  * [previous](https://docs.python.org/3/reference/lexical_analysis.html "2. Lexical analysis") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Language Reference](https://docs.python.org/3/reference/index.html) »
  * [3. Data model](https://docs.python.org/3/reference/datamodel.html)
  * | 
  * Theme  Auto Light Dark |


# 3. Data model[¶](https://docs.python.org/3/reference/datamodel.html#data-model "Link to this heading")
## 3.1. Objects, values and types[¶](https://docs.python.org/3/reference/datamodel.html#objects-values-and-types "Link to this heading")
_Objects_ are Python’s abstraction for data. All data in a Python program is represented by objects or by relations between objects. (In a sense, and in conformance to Von Neumann’s model of a “stored program computer”, code is also represented by objects.)
Every object has an identity, a type and a value. An object’s _identity_ never changes once it has been created; you may think of it as the object’s address in memory. The [`is`](https://docs.python.org/3/reference/expressions.html#is) operator compares the identity of two objects; the [`id()`](https://docs.python.org/3/library/functions.html#id "id") function returns an integer representing its identity.
**CPython implementation detail:** For CPython, `id(x)` is the memory address where `x` is stored.
An object’s type determines the operations that the object supports (e.g., “does it have a length?”) and also defines the possible values for objects of that type. The [`type()`](https://docs.python.org/3/library/functions.html#type "type") function returns an object’s type (which is an object itself). Like its identity, an object’s _type_ is also unchangeable. [[1]](https://docs.python.org/3/reference/datamodel.html#id19)
The _value_ of some objects can change. Objects whose value can change are said to be _mutable_ ; objects whose value is unchangeable once they are created are called _immutable_. (The value of an immutable container object that contains a reference to a mutable object can change when the latter’s value is changed; however the container is still considered immutable, because the collection of objects it contains cannot be changed. So, immutability is not strictly the same as having an unchangeable value, it is more subtle.) An object’s mutability is determined by its type; for instance, numbers, strings and tuples are immutable, while dictionaries and lists are mutable.
Objects are never explicitly destroyed; however, when they become unreachable they may be garbage-collected. An implementation is allowed to postpone garbage collection or omit it altogether — it is a matter of implementation quality how garbage collection is implemented, as long as no objects are collected that are still reachable.
**CPython implementation detail:** CPython currently uses a reference-counting scheme with (optional) delayed detection of cyclically linked garbage, which collects most objects as soon as they become unreachable, but is not guaranteed to collect garbage containing circular references. See the documentation of the [`gc`](https://docs.python.org/3/library/gc.html#module-gc "gc: Interface to the cycle-detecting garbage collector.") module for information on controlling the collection of cyclic garbage. Other implementations act differently and CPython may change. Do not depend on immediate finalization of objects when they become unreachable (so you should always close files explicitly).
Note that the use of the implementation’s tracing or debugging facilities may keep objects alive that would normally be collectable. Also note that catching an exception with a [`try`](https://docs.python.org/3/reference/compound_stmts.html#try)…[`except`](https://docs.python.org/3/reference/compound_stmts.html#except) statement may keep objects alive.
Some objects contain references to “external” resources such as open files or windows. It is understood th