Title: Glossary of Terms in Python
URL: https://docs.python.org/3/glossary.html
Summary: This section defines two important concepts in Python: 'generic function', which refers to a function that can handle multiple data types through a dispatch algorithm, and 'generic type', which is a type that can be parameterized, commonly seen in container classes like list and dict.
---

```


generic function[¶](https://docs.python.org/3/glossary.html#term-generic-function "Link to this term")
    
A function composed of multiple functions implementing the same operation for different types. Which implementation should be used during a call is determined by the dispatch algorithm.
See also the [single dispatch](https://docs.python.org/3/glossary.html#term-single-dispatch) glossary entry, the [`functools.singledispatch()`](https://docs.python.org/3/library/functools.html#functools.singledispatch "functools.singledispatch") decorator, and [**PEP 443**](https://peps.python.org/pep-0443/). 

generic type[¶](https://docs.python.org/3/glossary.html#term-generic-type "Link to this term")
    
A [type](https://docs.python.org/3/glossary.html#term-type) that can be parameterized; typically a [container class](https://docs.python.org/3/reference/datamodel.html#sequence-types) such as [`list`](https://docs.python.org/3/library/stdtypes.html#list "list") or [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict"). Used for [type hints](https://docs.python.org/3/glossary.html#term-type-hint) and [annotations](https://docs.python.org/3/glossary.html#term-annotation).
For more details, see [generic alias types](https://docs.python.org/3/library/stdtypes.html#types-genericalias), [**PEP 483**](https://peps.python.org/pep-0483/), [**PEP 484**](https://peps.python.org/pep-0484/), [**PEP 585**](https://peps.python.org/pep-0585/), and the [`typing`](https://docs.python.org/3/library/typing.html#module-typing "typing: Support for type hints \(see :pep:`484`\).") module. 

GIL[¶](https://docs.python.org/3/glossary.html#term-GIL "Link to this term")
    
See [global interpreter lock](https://docs.python.org/3/glossary.html#term-global-interpreter-lock). 

global interpreter lock[¶](https://docs.python.org/3/glossary.html#term-global-interpreter-lock "Link to this term")
    
The mechanism used by the [CPython](https://docs.python.org/3/glossary.html#term-CPython) interpreter to assure that only one thread executes Python [bytecode](https://docs.python.org/3/glossary.html#term-bytecode) at a time. This simplifies the CPython implementation by making the object model (including critical built-in types such as [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict")) implicitly safe against concurrent access. Locking the entire interpreter makes it easier for the interpreter to be multi-threaded, at the expense of much of the parallelism afforded by multi-processor machines.
However, some extension modules, either standard or third-party, are designed so as to release the GIL when doing computationally intensive tasks such as compression or hashing. Also, the GIL is always released when doing I/O.
As of Python 3.13, the GIL can be disabled using the [`--disable-gil`](https://docs.python.org/3/using/configure.html#cmdoption-disable-gil) build configuration. After building Python with this option, code must be run with [`-X gil=0`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) or after setting the [`PYTHON_GIL=0`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHON_GIL) environment variable. This feature enables improved performance for multi-threaded applications and makes it easier to use multi-core CPUs efficiently. For more details, see [**PEP 703**](https://peps.python.org/pep-0703/). 

hash-based pyc[¶](https://docs.python.org/3/glossary.html#term-hash-based-pyc "Link to this term")
    
A bytecode cache file that uses the hash rather than the last-modified time of the corresponding source file to determine its validity. See [Cached bytecode invalidation](https://docs.python.org/3/reference/import.html#pyc-invalidation). 

hashable[¶](https://docs.python.org/3/glossary.html#term-hashable "Link to this term")
    
An object is _hashable_ if it has a hash value which never changes during its lifetime (it needs a [`__hash__()`](https://docs.python.org/3/reference/datamodel.html#object.__hash__ "object.__hash__") method), and can be compared to other objects (it needs an [`__eq__()`](https://docs.python.org/3/reference/datamodel.html#object.__eq__ "object.__eq__") method). Hashable objects which compare equal must have the same hash value.
Hashability makes an object usable as a dictionary key and a set member, because these data structures use the hash value internally.
Most of Python’s immutable built-in objects are hashable; mutable containers (such as lists or dictionaries) are not; immutable containers (such as tuples and frozensets) are only hashable if their elements are hashable. Objects which are instances of user-defined classes are hashable by default. They all compare unequal (except with themselves), and their hash value is derived from their [`id()`](https://docs.python.org/3/library/functions.html#id "id").