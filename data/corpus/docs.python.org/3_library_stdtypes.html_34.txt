Title: Bytes and Bytearray Methods in Python 3.6
URL: https://docs.python.org/3/library/stdtypes.html
Summary: In Python 3.6, the _delete_ keyword argument was introduced. The methods for bytes and bytearray objects now assume ASCII compatibility but can handle arbitrary binary data. Notably, the bytes.center and bytearray.center methods allow centering of the object with specified width and fill byte, returning a new object rather than modifying the original.
---

```

Changed in version 3.6: _delete_ is now supported as a keyword argument.
The following methods on bytes and bytearray objects have default behaviours that assume the use of ASCII compatible binary formats, but can still be used with arbitrary binary data by passing appropriate arguments. Note that all of the bytearray methods in this section do _not_ operate in place, and instead produce new objects. 

bytes.center(_width_[, _fillbyte_])[¶](https://docs.python.org/3/library/stdtypes.html#bytes.center "Link to this definition")


bytearray.center(_width_[, _fillbyte_])[¶](https://docs.python.org/3/library/stdtypes.html#bytearray.center "Link to this definition")
    
Return a copy of the object centered in a sequence of length _width_. Padding is done using the specified _fillbyte_ (default is an ASCII space). For [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") objects, the original sequence is returned if _width_ is less than or equal to `len(s)`.
Note
The bytearray version of this method does _not_ operate in place - it always produces a new object, even if no changes were made. 

bytes.ljust(_width_[, _fillbyte_])[¶](https://docs.python.org/3/library/stdtypes.html#bytes.ljust "Link to this definition")


bytearray.ljust(_width_[, _fillbyte_])[¶](https://docs.python.org/3/library/stdtypes.html#bytearray.ljust "Link to this definition")
    
Return a copy of the object left justified in a sequence of length _width_. Padding is done using the specified _fillbyte_ (default is an ASCII space). For [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") objects, the original sequence is returned if _width_ is less than or equal to `len(s)`.
Note
The bytearray version of this method does _not_ operate in place - it always produces a new object, even if no changes were made. 

bytes.lstrip([_chars_])[¶](https://docs.python.org/3/library/stdtypes.html#bytes.lstrip "Link to this definition")


bytearray.lstrip([_chars_])[¶](https://docs.python.org/3/library/stdtypes.html#bytearray.lstrip "Link to this definition")
    
Return a copy of the sequence with specified leading bytes removed. The _chars_ argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters. If omitted or `None`, the _chars_ argument defaults to removing ASCII whitespace. The _chars_ argument is not a prefix; rather, all combinations of its values are stripped:
>>>```
>>> b'  spacious  '.lstrip()
b'spacious  '
>>> b'www.example.com'.lstrip(b'cmowz.')
b'example.com'

```

The binary sequence of byte values to remove may be any [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object). See [`removeprefix()`](https://docs.python.org/3/library/stdtypes.html#bytes.removeprefix "bytes.removeprefix") for a method that will remove a single prefix string rather than all of a set of characters. For example:
>>>```
>>> b'Arthur: three!'.lstrip(b'Arthur: ')
b'ee!'
>>> b'Arthur: three!'.removeprefix(b'Arthur: ')
b'three!'