Title: String Printable Characters in Python
URL: https://docs.python.org/3/library/string.html
Summary: The `string.printable` constant in Python includes all ASCII characters considered printable, combining digits, ASCII letters, punctuation, and whitespace. It is noted that `string.printable.isprintable()` returns `False`, indicating it does not meet POSIX standards for printable characters.
---

string.printable[¶](https://docs.python.org/3/library/string.html#string.printable "Link to this definition")
    
String of ASCII characters which are considered printable by Python. This is a combination of [`digits`](https://docs.python.org/3/library/string.html#string.digits "string.digits"), [`ascii_letters`](https://docs.python.org/3/library/string.html#string.ascii_letters "string.ascii_letters"), [`punctuation`](https://docs.python.org/3/library/string.html#string.punctuation "string.punctuation"), and [`whitespace`](https://docs.python.org/3/library/string.html#string.whitespace "string.whitespace").
Note
By design, [`string.printable.isprintable()`](https://docs.python.org/3/library/stdtypes.html#str.isprintable "str.isprintable") returns [`False`](https://docs.python.org/3/library/constants.html#False "False"). In particular, `string.printable` is not printable in the POSIX sense (see _[LC_CTYPE](https://manpages.debian.org/locale\(5\))_). 

string.whitespace[¶](https://docs.python.org/3/library/string.html#string.whitespace "Link to this definition")
    
A string containing all ASCII characters that are considered whitespace. This includes the characters space, tab, linefeed, return, formfeed, and vertical tab.
## Custom String Formatting[¶](https://docs.python.org/3/library/string.html#custom-string-formatting "Link to this heading")
The built-in string class provides the ability to do complex variable substitutions and value formatting via the [`format()`](https://docs.python.org/3/library/stdtypes.html#str.format "str.format") method described in [**PEP 3101**](https://peps.python.org/pep-3101/). The [`Formatter`](https://docs.python.org/3/library/string.html#string.Formatter "string.Formatter") class in the [`string`](https://docs.python.org/3/library/string.html#module-string "string: Common string operations.") module allows you to create and customize your own string formatting behaviors using the same implementation as the built-in [`format()`](https://docs.python.org/3/library/stdtypes.html#str.format "str.format") method. 

_class_ string.Formatter[¶](https://docs.python.org/3/library/string.html#string.Formatter "Link to this definition")
    
The [`Formatter`](https://docs.python.org/3/library/string.html#string.Formatter "string.Formatter") class has the following public methods: 

format(_format_string_ , _/_ , _* args_, _** kwargs_)[¶](https://docs.python.org/3/library/string.html#string.Formatter.format "Link to this definition")
    
The primary API method. It takes a format string and an arbitrary set of positional and keyword arguments. It is just a wrapper that calls [`vformat()`](https://docs.python.org/3/library/string.html#string.Formatter.vformat "string.Formatter.vformat").
Changed in version 3.7: A format string argument is now [positional-only](https://docs.python.org/3/glossary.html#positional-only-parameter). 

vformat(_format_string_ , _args_ , _kwargs_)[¶](https://docs.python.org/3/library/string.html#string.Formatter.vformat "Link to this definition")
    
This function does the actual work of formatting. It is exposed as a separate function for cases where you want to pass in a predefined dictionary of arguments, rather than unpacking and repacking the dictionary as individual arguments using the `*args` and `**kwargs` syntax. [`vformat()`](https://docs.python.org/3/library/string.html#string.Formatter.vformat "string.Formatter.vformat") does the work of breaking up the format string into character data and replacement fields. It calls the various methods described below.
In addition, the [`Formatter`](https://docs.python.org/3/library/string.html#string.Formatter "string.Formatter") defines a number of methods that are intended to be replaced by subclasses: 

parse(_format_string_)[¶](https://docs.python.org/3/library/string.html#string.Formatter.parse "Link to this definition")
    
Loop over the format_string and return an iterable of tuples (_literal_text_ , _field_name_ , _format_spec_ , _conversion_). This is used by [`vformat()`](https://docs.python.org/3/library/string.html#string.Formatter.vformat "string.Formatter.vformat") to break the string into either literal text, or replacement fields.
The values in the tuple conceptually represent a span of literal text followed by a single replacement field. If there is no literal text (which can happen if two replacement fields occur consecutively), then _literal_text_ will be a zero-length string. If there is no replacement field, then the values of _field_name_ , _format_spec_ and _conversion_ will be `None`.