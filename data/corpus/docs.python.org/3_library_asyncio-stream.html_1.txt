Title: Asyncio Stream Functions
URL: https://docs.python.org/3/library/asyncio-stream.html
Summary: This section outlines the top-level asyncio functions available for creating and managing streams, specifically focusing on the `asyncio.open_connection` function, which establishes a network connection and returns `StreamReader` and `StreamWriter` instances.
---

```

See also the [Examples](https://docs.python.org/3/library/asyncio-stream.html#examples) section below.
Stream Functions
The following top-level asyncio functions can be used to create and work with streams: 

_async_ asyncio.open_connection(_host =None_, _port =None_, _*_ , _limit =None_, _ssl =None_, _family =0_, _proto =0_, _flags =0_, _sock =None_, _local_addr =None_, _server_hostname =None_, _ssl_handshake_timeout =None_, _ssl_shutdown_timeout =None_, _happy_eyeballs_delay =None_, _interleave =None_)[¶](https://docs.python.org/3/library/asyncio-stream.html#asyncio.open_connection "Link to this definition")
    
Establish a network connection and return a pair of `(reader, writer)` objects.
The returned _reader_ and _writer_ objects are instances of [`StreamReader`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamReader "asyncio.StreamReader") and [`StreamWriter`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamWriter "asyncio.StreamWriter") classes.
_limit_ determines the buffer size limit used by the returned [`StreamReader`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamReader "asyncio.StreamReader") instance. By default the _limit_ is set to 64 KiB.
The rest of the arguments are passed directly to [`loop.create_connection()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_connection "asyncio.loop.create_connection").
Note
The _sock_ argument transfers ownership of the socket to the [`StreamWriter`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamWriter "asyncio.StreamWriter") created. To close the socket, call its [`close()`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamWriter.close "asyncio.StreamWriter.close") method.
Changed in version 3.7: Added the _ssl_handshake_timeout_ parameter.
Changed in version 3.8: Added the _happy_eyeballs_delay_ and _interleave_ parameters.
Changed in version 3.10: Removed the _loop_ parameter.
Changed in version 3.11: Added the _ssl_shutdown_timeout_ parameter. 

_async_ asyncio.start_server(_client_connected_cb_ , _host =None_, _port =None_, _*_ , _limit =None_, _family =socket.AF_UNSPEC_, _flags =socket.AI_PASSIVE_, _sock =None_, _backlog =100_, _ssl =None_, _reuse_address =None_, _reuse_port =None_, _keep_alive =None_, _ssl_handshake_timeout =None_, _ssl_shutdown_timeout =None_, _start_serving =True_)[¶](https://docs.python.org/3/library/asyncio-stream.html#asyncio.start_server "Link to this definition")
    
Start a socket server.
The _client_connected_cb_ callback is called whenever a new client connection is established. It receives a `(reader, writer)` pair as two arguments, instances of the [`StreamReader`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamReader "asyncio.StreamReader") and [`StreamWriter`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamWriter "asyncio.StreamWriter") classes.
_client_connected_cb_ can be a plain callable or a [coroutine function](https://docs.python.org/3/library/asyncio-task.html#coroutine); if it is a coroutine function, it will be automatically scheduled as a [`Task`](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task "asyncio.Task").
_limit_ determines the buffer size limit used by the returned [`StreamReader`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamReader "asyncio.StreamReader") instance. By default the _limit_ is set to 64 KiB.
The rest of the arguments are passed directly to [`loop.create_server()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_server "asyncio.loop.create_server").
Note
The _sock_ argument transfers ownership of the socket to the server created. To close the socket, call the server’s [`close()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Server.close "asyncio.Server.close") method.
Changed in version 3.7: Added the _ssl_handshake_timeout_ and _start_serving_ parameters.
Changed in version 3.10: Removed the _loop_ parameter.
Changed in version 3.11: Added the _ssl_shutdown_timeout_ parameter.
Changed in version 3.13: Added the _keep_alive_ parameter.
Unix Sockets