Title: Python Command-Line Options: Performance Profiling
URL: https://docs.python.org/3/using/cmdline.html
Summary: This section details new command-line options added in Python versions 3.12 and 3.13. The `-X perf_jit` option enables support for the Linux `perf` profiler with DWARF support, allowing for Python calls to be reported using DWARF information, with availability depending on the system. Additionally, the `-X cpu_count=_n_` option allows users to override CPU count values from the `os` module and `multiprocessing`, providing more control for performance tuning.
---

wto/perf_profiling.html#perf-profiling).
Added in version 3.12.
  * `-X perf_jit` enables support for the Linux `perf` profiler with DWARF support. When this option is provided, the `perf` profiler will be able to report Python calls using DWARF information. This option is only available on some platforms and will do nothing if is not supported on the current system. The default value is “off”. See also [`PYTHON_PERF_JIT_SUPPORT`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHON_PERF_JIT_SUPPORT) and [Python support for the Linux perf profiler](https://docs.python.org/3/howto/perf_profiling.html#perf-profiling).
Added in version 3.13.
  * `-X cpu_count=_n_`overrides[`os.cpu_count()`](https://docs.python.org/3/library/os.html#os.cpu_count "os.cpu_count"), [`os.process_cpu_count()`](https://docs.python.org/3/library/os.html#os.process_cpu_count "os.process_cpu_count"), and [`multiprocessing.cpu_count()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.cpu_count "multiprocessing.cpu_count"). _n_ must be greater than or equal to 1. This option may be useful for users who need to limit CPU resources of a container system. See also [`PYTHON_CPU_COUNT`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHON_CPU_COUNT). If _n_ is `default`, nothing is overridden.
Added in version 3.13.
  * `-X presite=_package.module_`specifies a module that should be imported before the[`site`](https://docs.python.org/3/library/site.html#module-site "site: Module responsible for site-specific configuration.") module is executed and before the [`__main__`](https://docs.python.org/3/library/__main__.html#module-__main__ "__main__: The environment where top-level code is run. Covers command-line interfaces, import-time behavior, and ``__name__ == '__main__'``.") module exists. Therefore, the imported module isn’t [`__main__`](https://docs.python.org/3/library/__main__.html#module-__main__ "__main__: The environment where top-level code is run. Covers command-line interfaces, import-time behavior, and ``__name__ == '__main__'``."). This can be used to execute code early during Python initialization. Python needs to be [built in debug mode](https://docs.python.org/3/using/configure.html#debug-build) for this option to exist. See also [`PYTHON_PRESITE`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHON_PRESITE).
Added in version 3.13.
  * `-X gil=_0,1_`forces the GIL to be disabled or enabled, respectively. Setting to`0` is only available in builds configured with [`--disable-gil`](https://docs.python.org/3/using/configure.html#cmdoption-disable-gil). See also [`PYTHON_GIL`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHON_GIL) and [Free-threaded CPython](https://docs.python.org/3/whatsnew/3.13.html#whatsnew313-free-threaded-cpython).
Added in version 3.13.


It also allows passing arbitrary values and retrieving them through the [`sys._xoptions`](https://docs.python.org/3/library/sys.html#sys._xoptions "sys._xoptions") dictionary.
Added in version 3.2.
Changed in version 3.9: Removed the `-X showalloccount` option.
Changed in version 3.10: Removed the `-X oldparser` option.
### 1.1.4. Controlling color[¶](https://docs.python.org/3/using/cmdline.html#controlling-color "Link to this heading")
The Python interpreter is configured by default to use colors to highlight output in certain situations such as when displaying tracebacks. This behavior can be controlled by setting different environment variables.
Setting the environment variable `TERM` to `dumb` will disable color.
If the [`FORCE_COLOR`](https://force-color.org/) environment variable is set, then color will be enabled regardless of the value of TERM. This is useful on CI systems which aren’t terminals but can still display ANSI escape sequences.
If the [`NO_COLOR`](https://no-color.org/) environment variable is set, Python will disable all color in the output. This takes precedence over `FORCE_COLOR`.
All these environment variables are used also by other tools to control color output. To control the color output only in the Python interpreter, the [`PYTHON_COLORS`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHON_COLORS) environment variable can be used. This variable takes precedence over `NO_COLOR`, which in turn takes precedence over `FORCE_COLOR`.
### 1.1.5. Options you shouldn’t use[¶](https://docs.python.org/3/using/cmdline.html#options-you-shouldn-t-use "Link to this heading") 

-J[¶](https://docs.python.org/3/using/cmdline.html#cmdoption-J "Link to this definition")
    
Reserved for use by [Jython](https://www.jython.org/).
## 1.2. Environment variables[¶](https://docs.python.org/3/using/cmdline.html#environment-variables "Link to this heading")
These environment variables influence Python’s behavior, they are processed before the command-line switches other than -E or -I. It is customary that command-line switches override environmental variables where there is a conflict.