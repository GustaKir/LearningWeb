Title: Understanding Range and Iterables in Python
URL: https://docs.python.org/3/tutorial/controlflow.html
Summary: The `range()` function returns an iterable object that generates items one at a time without creating a list, thus saving memory. This object is suitable for constructs like the `for` loop and functions such as `sum()`, which can consume iterables to perform operations.
---

```

In many ways the object returned by [`range()`](https://docs.python.org/3/library/stdtypes.html#range "range") behaves as if it is a list, but in fact it isn’t. It is an object which returns the successive items of the desired sequence when you iterate over it, but it doesn’t really make the list, thus saving space.
We say such an object is [iterable](https://docs.python.org/3/glossary.html#term-iterable), that is, suitable as a target for functions and constructs that expect something from which they can obtain successive items until the supply is exhausted. We have seen that the [`for`](https://docs.python.org/3/reference/compound_stmts.html#for) statement is such a construct, while an example of a function that takes an iterable is [`sum()`](https://docs.python.org/3/library/functions.html#sum "sum"):
>>>```
>>> sum(range(4)) # 0 + 1 + 2 + 3
6

```

Later we will see more functions that return iterables and take iterables as arguments. In chapter [Data Structures](https://docs.python.org/3/tutorial/datastructures.html#tut-structures), we will discuss in more detail about [`list()`](https://docs.python.org/3/library/stdtypes.html#list "list").
## 4.4. `break` and `continue` Statements[¶](https://docs.python.org/3/tutorial/controlflow.html#break-and-continue-statements "Link to this heading")
The [`break`](https://docs.python.org/3/reference/simple_stmts.html#break) statement breaks out of the innermost enclosing [`for`](https://docs.python.org/3/reference/compound_stmts.html#for) or [`while`](https://docs.python.org/3/reference/compound_stmts.html#while) loop:
>>>```
>>> for n in range(2, 10):
...   for x in range(2, n):
...     if n % x == 0:
...       print(f"{n} equals {x} * {n//x}")
...       break
...
4 equals 2 * 2
6 equals 2 * 3
8 equals 2 * 4
9 equals 3 * 3

```

The [`continue`](https://docs.python.org/3/reference/simple_stmts.html#continue) statement continues with the next iteration of the loop:
>>>```
>>> for num in range(2, 10):
...   if num % 2 == 0:
...     print(f"Found an even number {num}")
...     continue
...   print(f"Found an odd number {num}")
...
Found an even number 2
Found an odd number 3
Found an even number 4
Found an odd number 5
Found an even number 6
Found an odd number 7
Found an even number 8
Found an odd number 9

```

## 4.5. `else` Clauses on Loops[¶](https://docs.python.org/3/tutorial/controlflow.html#else-clauses-on-loops "Link to this heading")
In a `for` or `while` loop the `break` statement may be paired with an `else` clause. If the loop finishes without executing the `break`, the `else` clause executes.
In a [`for`](https://docs.python.org/3/reference/compound_stmts.html#for) loop, the `else` clause is executed after the loop finishes its final iteration, that is, if no break occurred.
In a [`while`](https://docs.python.org/3/reference/compound_stmts.html#while) loop, it’s executed after the loop’s condition becomes false.
In either kind of loop, the `else` clause is **not** executed if the loop was terminated by a [`break`](https://docs.python.org/3/reference/simple_stmts.html#break). Of course, other ways of ending the loop early, such as a [`return`](https://docs.python.org/3/reference/simple_stmts.html#return) or a raised exception, will also skip execution of the [`else`](https://docs.python.org/3/reference/compound_stmts.html#else) clause.
This is exemplified in the following `for` loop, which searches for prime numbers:
>>>```
>>> for n in range(2, 10):
...   for x in range(2, n):
...     if n % x == 0:
...       print(n, 'equals', x, '*', n//x)
...       break
...   else:
...     # loop fell through without finding a factor
...     print(n, 'is a prime number')
...
2 is a prime number
3 is a prime number
4 equals 2 * 2
5 is a prime number
6 equals 2 * 3
7 is a prime number
8 equals 2 * 4
9 equals 3 * 3