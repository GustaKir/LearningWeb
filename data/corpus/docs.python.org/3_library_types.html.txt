Title: Dynamic Type Creation and Built-in Types in Python
URL: https://docs.python.org/3/library/types.html
Summary: This document provides an overview of the 'types' module in Python, covering dynamic type creation, standard interpreter types, and additional utility classes and functions. It serves as a comprehensive reference for understanding type manipulation and built-in types in Python programming.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [`types` — Dynamic type creation and names for built-in types](https://docs.python.org/3/library/types.html)
    * [Dynamic Type Creation](https://docs.python.org/3/library/types.html#dynamic-type-creation)
    * [Standard Interpreter Types](https://docs.python.org/3/library/types.html#standard-interpreter-types)
    * [Additional Utility Classes and Functions](https://docs.python.org/3/library/types.html#additional-utility-classes-and-functions)
    * [Coroutine Utility Functions](https://docs.python.org/3/library/types.html#coroutine-utility-functions)


#### Previous topic
[`weakref` — Weak references](https://docs.python.org/3/library/weakref.html "previous chapter")
#### Next topic
[`copy` — Shallow and deep copy operations](https://docs.python.org/3/library/copy.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/types.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/copy.html "copy — Shallow and deep copy operations") |
  * [previous](https://docs.python.org/3/library/weakref.html "weakref — Weak references") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Data Types](https://docs.python.org/3/library/datatypes.html) »
  * [`types` — Dynamic type creation and names for built-in types](https://docs.python.org/3/library/types.html)
  * | 
  * Theme  Auto Light Dark |


# `types` — Dynamic type creation and names for built-in types[¶](https://docs.python.org/3/library/types.html#module-types "Link to this heading")
**Source code:** [Lib/types.py](https://github.com/python/cpython/tree/3.13/Lib/types.py)
This module defines utility functions to assist in dynamic creation of new types.
It also defines names for some object types that are used by the standard Python interpreter, but not exposed as builtins like [`int`](https://docs.python.org/3/library/functions.html#int "int") or [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") are.
Finally, it provides some additional type-related utility classes and functions that are not fundamental enough to be builtins.
## Dynamic Type Creation[¶](https://docs.python.org/3/library/types.html#dynamic-type-creation "Link to this heading") 

types.new_class(_name_ , _bases =()_, _kwds =None_, _exec_body =None_)[¶](https://docs.python.org/3/library/types.html#types.new_class "Link to this definition")
    
Creates a class object dynamically using the appropriate metaclass.
The first three arguments are the components that make up a class definition header: the class name, the base classes (in order), the keyword arguments (such as `metaclass`).
The _exec_body_ argument is a callback that is used to populate the freshly created class namespace. It should accept the class namespace as its sole argument and update the namespace directly with the class contents. If no callback is provided, it has the same effect as passing in `lambda ns: None`.
Added in version 3.3.