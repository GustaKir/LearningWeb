Title: Multi-Bit Flags and Membership Checking in Enum
URL: https://docs.python.org/3/howto/enum.html
Summary: This section discusses multi-bit flags in Python's Enum, illustrating operations like bitwise OR and membership checking. It explains the concept of zero-valued flags being contained in others and introduces a new boundary mechanism for handling out-of-range bits, with options for `STRICT`, `CONFORM`, `EJECT`, and `KEEP`.
---

```

  * multi-bit flags, aka aliases, can be returned from operations:
>>>```
>>> Color.RED | Color.BLUE
<Color.PURPLE: 5>
>>> Color(7) # or Color(-1)
<Color.WHITE: 7>
>>> Color(0)
<Color.BLACK: 0>

```

  * membership / containment checking: zero-valued flags are always considered to be contained:
>>>```
>>> Color.BLACK in Color.WHITE
True

```

otherwise, only if all bits of one flag are in the other flag will True be returned:
>>>```
>>> Color.PURPLE in Color.WHITE
True
>>> Color.GREEN in Color.PURPLE
False

```



There is a new boundary mechanism that controls how out-of-range / invalid bits are handled: `STRICT`, `CONFORM`, `EJECT`, and `KEEP`:
  * STRICT –> raises an exception when presented with invalid values
  * CONFORM –> discards any invalid bits
  * EJECT –> lose Flag status and become a normal int with the given value
  * KEEP –> keep the extra bits
    * keeps Flag status and extra bits
    * extra bits do not show up in iteration
    * extra bits do show up in repr() and str()


The default for Flag is `STRICT`, the default for `IntFlag` is `EJECT`, and the default for `_convert_` is `KEEP` (see `ssl.Options` for an example of when `KEEP` is needed).
## How are Enums and Flags different?[¶](https://docs.python.org/3/howto/enum.html#how-are-enums-and-flags-different "Link to this heading")
Enums have a custom metaclass that affects many aspects of both derived [`Enum`](https://docs.python.org/3/library/enum.html#enum.Enum "enum.Enum") classes and their instances (members).
### Enum Classes[¶](https://docs.python.org/3/howto/enum.html#enum-classes "Link to this heading")
The [`EnumType`](https://docs.python.org/3/library/enum.html#enum.EnumType "enum.EnumType") metaclass is responsible for providing the [`__contains__()`](https://docs.python.org/3/reference/datamodel.html#object.__contains__ "object.__contains__"), [`__dir__()`](https://docs.python.org/3/reference/datamodel.html#object.__dir__ "object.__dir__"), [`__iter__()`](https://docs.python.org/3/reference/datamodel.html#object.__iter__ "object.__iter__") and other methods that allow one to do things with an [`Enum`](https://docs.python.org/3/library/enum.html#enum.Enum "enum.Enum") class that fail on a typical class, such as `list(Color)` or `some_enum_var in Color`. [`EnumType`](https://docs.python.org/3/library/enum.html#enum.EnumType "enum.EnumType") is responsible for ensuring that various other methods on the final [`Enum`](https://docs.python.org/3/library/enum.html#enum.Enum "enum.Enum") class are correct (such as [`__new__()`](https://docs.python.org/3/reference/datamodel.html#object.__new__ "object.__new__"), [`__getnewargs__()`](https://docs.python.org/3/library/pickle.html#object.__getnewargs__ "object.__getnewargs__"), [`__str__()`](https://docs.python.org/3/reference/datamodel.html#object.__str__ "object.__str__") and [`__repr__()`](https://docs.python.org/3/reference/datamodel.html#object.__repr__ "object.__repr__")).
### Flag Classes[¶](https://docs.python.org/3/howto/enum.html#flag-classes "Link to this heading")
Flags have an expanded view of aliasing: to be canonical, the value of a flag needs to be a power-of-two value, and not a duplicate name. So, in addition to the [`Enum`](https://docs.python.org/3/library/enum.html#enum.Enum "enum.Enum") definition of alias, a flag with no value (a.k.a. `0`) or with more than one power-of-two value (e.g. `3`) is considered an alias.
### Enum Members (aka instances)[¶](https://docs.python.org/3/howto/enum.html#enum-members-aka-instances "Link to this heading")
The most interesting thing about enum members is that they are singletons. [`EnumType`](https://docs.python.org/3/library/enum.html#enum.EnumType "enum.EnumType") creates them all while it is creating the enum class itself, and then puts a custom [`__new__()`](https://docs.python.org/3/reference/datamodel.html#object.__new__ "object.__new__") in place to ensure that no new ones are ever instantiated by returning only the existing member instances.
### Flag Members[¶](https://docs.python.org/3/howto/enum.html#flag-members "Link to this heading")
Flag members can be iterated over just like the [`Flag`](https://docs.python.org/3/library/enum.html#enum.Flag "enum.Flag") class, and only the canonical members will be returned. For example:
>>>```
>>> list(Color)
[<Color.RED: 1>, <Color.GREEN: 2>, <Color.BLUE: 4>]

```

(Note that `BLACK`, `PURPLE`, and `WHITE` do not show up.)
Inverting a flag member returns the corresponding positive value, rather than a negative value — for example:
>>>```
>>> ~Color.RED
<Color.GREEN|BLUE: 6>

```

Flag members have a length corresponding to the number of power-of-two values they contain. For example:
>>>```
>>> len(Color.PURPLE)
2