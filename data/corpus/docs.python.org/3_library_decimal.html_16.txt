Title: Decimal Context Constants and Methods
URL: https://docs.python.org/3/library/decimal.html
Summary: This section details the `Etiny` and `Etop` constants in the Decimal module, introduced in version 3.1. `Etiny` represents the minimum exponent for subnormal results, while `Etop` indicates the maximum exponent value. It also highlights the standard and alternative approaches for working with `Decimal` instances and arithmetic within a specific context.
---

```

Added in version 3.1. 

Etiny()[¶](https://docs.python.org/3/library/decimal.html#decimal.Context.Etiny "Link to this definition")
    
Returns a value equal to `Emin - prec + 1` which is the minimum exponent value for subnormal results. When underflow occurs, the exponent is set to [`Etiny`](https://docs.python.org/3/library/decimal.html#decimal.Context.Etiny "decimal.Context.Etiny"). 

Etop()[¶](https://docs.python.org/3/library/decimal.html#decimal.Context.Etop "Link to this definition")
    
Returns a value equal to `Emax - prec + 1`.
The usual approach to working with decimals is to create [`Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal") instances and then apply arithmetic operations which take place within the current context for the active thread. An alternative approach is to use context methods for calculating within a specific context. The methods are similar to those for the [`Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal") class and are only briefly recounted here. 

abs(_x_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Context.abs "Link to this definition")
    
Returns the absolute value of _x_. 

add(_x_ , _y_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Context.add "Link to this definition")
    
Return the sum of _x_ and _y_. 

canonical(_x_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Context.canonical "Link to this definition")
    
Returns the same Decimal object _x_. 

compare(_x_ , _y_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Context.compare "Link to this definition")
    
Compares _x_ and _y_ numerically. 

compare_signal(_x_ , _y_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Context.compare_signal "Link to this definition")
    
Compares the values of the two operands numerically. 

compare_total(_x_ , _y_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Context.compare_total "Link to this definition")
    
Compares two operands using their abstract representation. 

compare_total_mag(_x_ , _y_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Context.compare_total_mag "Link to this definition")
    
Compares two operands using their abstract representation, ignoring sign. 

copy_abs(_x_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Context.copy_abs "Link to this definition")
    
Returns a copy of _x_ with the sign set to 0. 

copy_negate(_x_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Context.copy_negate "Link to this definition")
    
Returns a copy of _x_ with the sign inverted. 

copy_sign(_x_ , _y_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Context.copy_sign "Link to this definition")
    
Copies the sign from _y_ to _x_. 

divide(_x_ , _y_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Context.divide "Link to this definition")
    
Return _x_ divided by _y_. 

divide_int(_x_ , _y_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Context.divide_int "Link to this definition")
    
Return _x_ divided by _y_ , truncated to an integer. 

divmod(_x_ , _y_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Context.divmod "Link to this definition")
    
Divides two numbers and returns the integer part of the result. 

exp(_x_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Context.exp "Link to this definition")
    
Returns `e ** x`. 

fma(_x_ , _y_ , _z_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Context.fma "Link to this definition")
    
Returns _x_ multiplied by _y_ , plus _z_. 

is_canonical(_x_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Context.is_canonical "Link to this definition")
    
Returns `True` if _x_ is canonical; otherwise returns `False`. 

is_finite(_x_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Context.is_finite "Link to this definition")
    
Returns `True` if _x_ is finite; otherwise returns `False`. 

is_infinite(_x_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Context.is_infinite "Link to this definition")
    
Returns `True` if _x_ is infinite; otherwise returns `False`. 

is_nan(_x_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Context.is_nan "Link to this definition")
    
Returns `True` if _x_ is a qNaN or sNaN; otherwise returns `False`. 

is_normal(_x_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Context.is_normal "Link to this definition")
    
Returns `True` if _x_ is a normal number; otherwise returns `False`. 

is_qnan(_x_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Context.is_qnan "Link to this definition")
    
Returns `True` if _x_ is a quiet NaN; otherwise returns `False`. 

is_signed(_x_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Context.is_signed "Link to this definition")
    
Returns `True` if _x_ is negative; otherwise returns `False`.