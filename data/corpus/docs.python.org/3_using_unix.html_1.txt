Title: Building Python from Source
URL: https://docs.python.org/3/using/unix.html
Summary: This section outlines the steps to compile CPython from source, including obtaining the source code and the build commands: `./configure`, `make`, and `make install`. It notes the potential risks of `make install`, recommending `make altinstall` to avoid overwriting the existing `python3` binary. Additional configuration options for Unix platforms can be found in the README.rst file.
---

```



## 2.2. Building Python[¶](https://docs.python.org/3/using/unix.html#building-python "Link to this heading")
If you want to compile CPython yourself, first thing you should do is get the [source](https://www.python.org/downloads/source/). You can download either the latest release’s source or just grab a fresh [clone](https://devguide.python.org/setup/#get-the-source-code). (If you want to contribute patches, you will need a clone.)
The build process consists of the usual commands:
```
./configure
make
makeinstall

```

[Configuration options](https://docs.python.org/3/using/configure.html#configure-options) and caveats for specific Unix platforms are extensively documented in the [README.rst](https://github.com/python/cpython/tree/3.13/README.rst) file in the root of the Python source tree.
Warning
`make install` can overwrite or masquerade the `python3` binary. `make altinstall` is therefore recommended instead of `make install` since it only installs `_exec_prefix_/bin/python_version_`.
## 2.3. Python-related paths and files[¶](https://docs.python.org/3/using/unix.html#python-related-paths-and-files "Link to this heading")
These are subject to difference depending on local installation conventions; [`prefix`](https://docs.python.org/3/using/configure.html#cmdoption-prefix) and [`exec_prefix`](https://docs.python.org/3/using/configure.html#cmdoption-exec-prefix) are installation-dependent and should be interpreted as for GNU software; they may be the same.
For example, on most Linux systems, the default for both is `/usr`.
File/directory | Meaning  
---|---  
`_exec_prefix_/bin/python3`|  Recommended location of the interpreter.  
`_prefix_/lib/python_version_`,`_exec_prefix_/lib/python_version_`|  Recommended locations of the directories containing the standard modules.  
`_prefix_/include/python_version_`,`_exec_prefix_/include/python_version_`|  Recommended locations of the directories containing the include files needed for developing Python extensions and embedding the interpreter.  
## 2.4. Miscellaneous[¶](https://docs.python.org/3/using/unix.html#miscellaneous "Link to this heading")
To easily use Python scripts on Unix, you need to make them executable, e.g. with
```
$ chmod+xscript

```

and put an appropriate Shebang line at the top of the script. A good choice is usually
```
#!/usr/bin/env python3

```

which searches for the Python interpreter in the whole `PATH`. However, some Unices may not have the **env** command, so you may need to hardcode `/usr/bin/python3` as the interpreter path.
To use shell commands in your Python scripts, look at the [`subprocess`](https://docs.python.org/3/library/subprocess.html#module-subprocess "subprocess: Subprocess management.") module.
## 2.5. Custom OpenSSL[¶](https://docs.python.org/3/using/unix.html#custom-openssl "Link to this heading")
  1. To use your vendor’s OpenSSL configuration and system trust store, locate the directory with `openssl.cnf` file or symlink in `/etc`. On most distribution the file is either in `/etc/ssl` or `/etc/pki/tls`. The directory should also contain a `cert.pem` file and/or a `certs` directory.
```
$ find/etc/-nameopenssl.cnf-printf"%h\n"
/etc/ssl

```

  2. Download, build, and install OpenSSL. Make sure you use `install_sw` and not `install`. The `install_sw` target does not override `openssl.cnf`.
```
$ curl-Ohttps://www.openssl.org/source/openssl-VERSION.tar.gz
$ tarxzfopenssl-VERSION
$ pushdopenssl-VERSION
$ ./config\
--prefix=/usr/local/custom-openssl\
--libdir=lib\
--openssldir=/etc/ssl
$ make-j1depend
$ make-j8
$ makeinstall_sw
$ popd

```

  3. Build Python with custom OpenSSL (see the configure `--with-openssl` and `--with-openssl-rpath` options)
```
$ pushdpython-3.x.x
$ ./configure-C\
--with-openssl=/usr/local/custom-openssl\
--with-openssl-rpath=auto\
--prefix=/usr/local/python-3.x.x
$ make-j8
$ makealtinstall