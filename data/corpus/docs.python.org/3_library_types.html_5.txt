Title: Python Types Library: MappingProxyType and Utility Classes
URL: https://docs.python.org/3/library/types.html
Summary: This section covers methods associated with `MappingProxyType` such as `values()`, `reversed()`, and `hash()`, along with the introduction of `CapsuleType` and `SimpleNamespace`. Notable version additions include `reversed()` in 3.9, `hash()` in 3.12, and `CapsuleType` in 3.13.
---

values()[¶](https://docs.python.org/3/library/types.html#types.MappingProxyType.values "Link to this definition")
    
Return a new view of the underlying mapping’s values. 

reversed(proxy)
    
Return a reverse iterator over the keys of the underlying mapping.
Added in version 3.9. 

hash(proxy)
    
Return a hash of the underlying mapping.
Added in version 3.12. 

_class_ types.CapsuleType[¶](https://docs.python.org/3/library/types.html#types.CapsuleType "Link to this definition")
    
The type of [capsule objects](https://docs.python.org/3/c-api/capsule.html#capsules).
Added in version 3.13.
## Additional Utility Classes and Functions[¶](https://docs.python.org/3/library/types.html#additional-utility-classes-and-functions "Link to this heading") 

_class_ types.SimpleNamespace[¶](https://docs.python.org/3/library/types.html#types.SimpleNamespace "Link to this definition")
    
A simple [`object`](https://docs.python.org/3/library/functions.html#object "object") subclass that provides attribute access to its namespace, as well as a meaningful repr.
Unlike [`object`](https://docs.python.org/3/library/functions.html#object "object"), with `SimpleNamespace` you can add and remove attributes.
[`SimpleNamespace`](https://docs.python.org/3/library/types.html#types.SimpleNamespace "types.SimpleNamespace") objects may be initialized in the same way as [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict"): either with keyword arguments, with a single positional argument, or with both. When initialized with keyword arguments, those are directly added to the underlying namespace. Alternatively, when initialized with a positional argument, the underlying namespace will be updated with key-value pairs from that argument (either a mapping object or an [iterable](https://docs.python.org/3/glossary.html#term-iterable) object producing key-value pairs). All such keys must be strings.
The type is roughly equivalent to the following code:
```
classSimpleNamespace:
  def__init__(self, mapping_or_iterable=(), /, **kwargs):
    self.__dict__.update(mapping_or_iterable)
    self.__dict__.update(kwargs)
  def__repr__(self):
    items = (f"{k}={v!r}" for k, v in self.__dict__.items())
    return "{}({})".format(type(self).__name__, ", ".join(items))
  def__eq__(self, other):
    if isinstance(self, SimpleNamespace) and isinstance(other, SimpleNamespace):
      return self.__dict__ == other.__dict__
    return NotImplemented