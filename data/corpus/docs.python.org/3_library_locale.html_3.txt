Title: Locale Module Constants
URL: https://docs.python.org/3/library/locale.html
Summary: This section describes the constants in the locale module for Python. It includes the separator character for thousands (locale.THOUSEP) and regular expressions for recognizing positive (locale.YESEXPR) and negative (locale.NOEXPR) responses to yes/no questions, highlighting syntax variations in regex functions.
---

locale.THOUSEP[¶](https://docs.python.org/3/library/locale.html#locale.THOUSEP "Link to this definition")
    
Get the separator character for thousands (groups of three digits). 

locale.YESEXPR[¶](https://docs.python.org/3/library/locale.html#locale.YESEXPR "Link to this definition")
    
Get a regular expression that can be used with the regex function to recognize a positive response to a yes/no question. 

locale.NOEXPR[¶](https://docs.python.org/3/library/locale.html#locale.NOEXPR "Link to this definition")
    
Get a regular expression that can be used with the `regex(3)` function to recognize a negative response to a yes/no question.
Note
The regular expressions for [`YESEXPR`](https://docs.python.org/3/library/locale.html#locale.YESEXPR "locale.YESEXPR") and [`NOEXPR`](https://docs.python.org/3/library/locale.html#locale.NOEXPR "locale.NOEXPR") use syntax suitable for the `regex` function from the C library, which might differ from the syntax used in [`re`](https://docs.python.org/3/library/re.html#module-re "re: Regular expression operations."). 

locale.CRNCYSTR[¶](https://docs.python.org/3/library/locale.html#locale.CRNCYSTR "Link to this definition")
    
Get the currency symbol, preceded by “-” if the symbol should appear before the value, “+” if the symbol should appear after the value, or “.” if the symbol should replace the radix character. 

locale.ERA[¶](https://docs.python.org/3/library/locale.html#locale.ERA "Link to this definition")
    
Get a string which describes how years are counted and displayed for each era in a locale.
Most locales do not define this value. An example of a locale which does define this value is the Japanese one. In Japan, the traditional representation of dates includes the name of the era corresponding to the then-emperor’s reign.
Normally it should not be necessary to use this value directly. Specifying the `E` modifier in their format strings causes the [`time.strftime()`](https://docs.python.org/3/library/time.html#time.strftime "time.strftime") function to use this information. The format of the returned string is specified in _The Open Group Base Specifications Issue 8_ , paragraph [7.3.5.2 LC_TIME C-Language Access](https://pubs.opengroup.org/onlinepubs/9799919799/basedefs/V1_chap07.html#tag_07_03_05_02). 

locale.ERA_D_T_FMT[¶](https://docs.python.org/3/library/locale.html#locale.ERA_D_T_FMT "Link to this definition")
    
Get a format string for [`time.strftime()`](https://docs.python.org/3/library/time.html#time.strftime "time.strftime") to represent date and time in a locale-specific era-based way. 

locale.ERA_D_FMT[¶](https://docs.python.org/3/library/locale.html#locale.ERA_D_FMT "Link to this definition")
    
Get a format string for [`time.strftime()`](https://docs.python.org/3/library/time.html#time.strftime "time.strftime") to represent a date in a locale-specific era-based way. 

locale.ERA_T_FMT[¶](https://docs.python.org/3/library/locale.html#locale.ERA_T_FMT "Link to this definition")
    
Get a format string for [`time.strftime()`](https://docs.python.org/3/library/time.html#time.strftime "time.strftime") to represent a time in a locale-specific era-based way. 

locale.ALT_DIGITS[¶](https://docs.python.org/3/library/locale.html#locale.ALT_DIGITS "Link to this definition")
    
Get a string consisting of up to 100 semicolon-separated symbols used to represent the values 0 to 99 in a locale-specific way. In most locales this is an empty string. 

locale.getdefaultlocale([_envvars_])[¶](https://docs.python.org/3/library/locale.html#locale.getdefaultlocale "Link to this definition")
    
Tries to determine the default locale settings and returns them as a tuple of the form `(language code, encoding)`.
According to POSIX, a program which has not called `setlocale(LC_ALL, '')` runs using the portable `'C'` locale. Calling `setlocale(LC_ALL, '')` lets it use the default locale as defined by the `LANG` variable. Since we do not want to interfere with the current locale setting we thus emulate the behavior in the way described above.
To maintain compatibility with other platforms, not only the `LANG` variable is tested, but a list of variables given as envvars parameter. The first found to be defined will be used. _envvars_ defaults to the search path used in GNU gettext; it must always contain the variable name `'LANG'`. The GNU gettext search path contains `'LC_ALL'`, `'LC_CTYPE'`, `'LANG'` and `'LANGUAGE'`, in that order.
Except for the code `'C'`, the language code corresponds to [**RFC 1766**](https://datatracker.ietf.org/doc/html/rfc1766.html). _language code_ and _encoding_ may be `None` if their values cannot be determined.
Deprecated since version 3.11, will be removed in version 3.15.