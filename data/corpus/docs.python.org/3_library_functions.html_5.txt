Title: Understanding @classmethod in Python
URL: https://docs.python.org/3/library/functions.html
Summary: The `@classmethod` decorator allows a method to be called on a class or an instance while passing the class as the first argument. Unlike C++ or Java static methods, class methods are integrated with Python’s class hierarchy. They were updated in Python 3.9 to wrap other descriptors like `property()`.
---

```

The `@classmethod` form is a function [decorator](https://docs.python.org/3/glossary.html#term-decorator) – see [Function definitions](https://docs.python.org/3/reference/compound_stmts.html#function) for details.
A class method can be called either on the class (such as `C.f()`) or on an instance (such as `C().f()`). The instance is ignored except for its class. If a class method is called for a derived class, the derived class object is passed as the implied first argument.
Class methods are different than C++ or Java static methods. If you want those, see [`staticmethod()`](https://docs.python.org/3/library/functions.html#staticmethod "staticmethod") in this section. For more information on class methods, see [The standard type hierarchy](https://docs.python.org/3/reference/datamodel.html#types).
Changed in version 3.9: Class methods can now wrap other [descriptors](https://docs.python.org/3/glossary.html#term-descriptor) such as [`property()`](https://docs.python.org/3/library/functions.html#property "property").
Changed in version 3.10: Class methods now inherit the method attributes ([`__module__`](https://docs.python.org/3/reference/datamodel.html#function.__module__ "function.__module__"), [`__name__`](https://docs.python.org/3/reference/datamodel.html#function.__name__ "function.__name__"), [`__qualname__`](https://docs.python.org/3/reference/datamodel.html#function.__qualname__ "function.__qualname__"), [`__doc__`](https://docs.python.org/3/reference/datamodel.html#function.__doc__ "function.__doc__") and [`__annotations__`](https://docs.python.org/3/reference/datamodel.html#function.__annotations__ "function.__annotations__")) and have a new `__wrapped__` attribute.
Deprecated since version 3.11, removed in version 3.13: Class methods can no longer wrap other [descriptors](https://docs.python.org/3/glossary.html#term-descriptor) such as [`property()`](https://docs.python.org/3/library/functions.html#property "property").