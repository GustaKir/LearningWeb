Title: Python 3 Release Notes - Bug Fixes and Optimizations
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section details recent bug fixes and performance improvements in Python 3, including a fix for a garbage collection crash related to function objects, speed enhancements for isinstance() and issubclass() checks, resolution of a bug in adaptive opcodes, and adjustments to the LLTRACE special build's name handling.
---

636](https://github.com/python/cpython/issues/91636): Fixed a crash in a garbage-collection edge-case, in which a `PyFunction_Type.tp_clear` function could leave a python function object in an inconsistent state.
  * [gh-91603](https://github.com/python/cpython/issues/91603): Speed up [`isinstance()`](https://docs.python.org/3/library/functions.html#isinstance "isinstance") and [`issubclass()`](https://docs.python.org/3/library/functions.html#issubclass "issubclass") checks for [`types.UnionType`](https://docs.python.org/3/library/types.html#types.UnionType "types.UnionType"). Patch by Yurii Karabas.
  * [gh-91625](https://github.com/python/cpython/issues/91625): Fixed a bug in which adaptive opcodes ignored any preceding `EXTENDED_ARG`s on specialization failure.
  * [gh-78607](https://github.com/python/cpython/issues/78607): The LLTRACE special build now looks for the name `__lltrace__` defined in module globals, rather than the name `__ltrace__`, which had been introduced as a typo.
  * [gh-91576](https://github.com/python/cpython/issues/91576): Speed up iteration of ascii strings by 50%. Patch by Kumar Aditya.
  * [gh-89279](https://github.com/python/cpython/issues/89279): Improve interpreter performance on Windows by inlining a few specific macros.
  * [gh-91502](https://github.com/python/cpython/issues/91502): Add a new `_PyFrame_IsEntryFrame()` API function, to check if a [`PyFrameObject`](https://docs.python.org/3/c-api/frame.html#c.PyFrameObject "PyFrameObject") is an entry frame. Patch by Pablo Galindo.
  * [gh-91266](https://github.com/python/cpython/issues/91266): Refactor the `bytearray` strip methods `strip`, `lstrip` and `rstrip` to use a common implementation.
  * [gh-91479](https://github.com/python/cpython/issues/91479): Replaced the `__note__` field of [`BaseException`](https://docs.python.org/3/library/exceptions.html#BaseException "BaseException") (added in an earlier version of 3.11) with the final design of [**PEP 678**](https://peps.python.org/pep-0678/). Namely, [`BaseException`](https://docs.python.org/3/library/exceptions.html#BaseException "BaseException") gets an `add_note()` method, and its `__notes__` field is created when necessary.
  * [gh-46055](https://github.com/python/cpython/issues/46055): Speed up right shift of negative integers, by removing unnecessary creation of temporaries. Original patch by Xinhang Xu, reworked by Mark Dickinson.
  * [gh-91462](https://github.com/python/cpython/issues/91462): Make the interpreterâ€™s low-level tracing (lltrace) feature output more readable by displaying opcode names (rather than just numbers), and by displaying stack contents before each opcode.
  * [gh-89455](https://github.com/python/cpython/issues/89455): Fixed an uninitialized bool value in the traceback printing code path that was introduced by the initial [bpo-45292](https://bugs.python.org/issue?@action=redirect&bpo=45292) exception groups work.
  * [gh-91421](https://github.com/python/cpython/issues/91421): Fix a potential integer overflow in _Py_DecodeUTF8Ex.
  * [gh-91428](https://github.com/python/cpython/issues/91428): Add `static const char *const _PyOpcode_OpName[256] = {...};` to `opcode.h` for debug builds to assist in debugging the Python interpreter. It is now more convenient to make various forms of debugging output more human-readable by including opcode names rather than just the corresponding decimal digits.
  * [bpo-47120](https://bugs.python.org/issue?@action=redirect&bpo=47120): Make [`POP_JUMP_IF_TRUE`](https://docs.python.org/3/library/dis.html#opcode-POP_JUMP_IF_TRUE), [`POP_JUMP_IF_FALSE`](https://docs.python.org/3/library/dis.html#opcode-POP_JUMP_IF_FALSE), [`POP_JUMP_IF_NONE`](https://docs.python.org/3/library/dis.html#opcode-POP_JUMP_IF_NONE) and [`POP_JUMP_IF_NOT_NONE`](https://docs.python.org/3/library/dis.html#opcode-POP_JUMP_IF_NOT_NONE) virtual, mapping to new relative jump opcodes.
  * [bpo-45317](https://bugs.python.org/issue?@action=redirect&bpo=45317): Add internal documentation explaining design of new (for 3.11) frame stack.
  * [bpo-47197](https://bugs.python.org/issue?@action=redirect&bpo=47197): ctypes used to mishandle `void` return types, so that for instance a function declared like `ctypes.CFUNCTYPE(None, ctypes.c_int)` would be called with signature `int f(int)` instead of `void f(int)`. Wasm targets require function pointers to be called with the correct signatures so this led to crashes. The problem is now fixed.
  * [bpo-47120](https://bugs.python.org/issue?@action=redirect&bpo=47120): Make opcodes `JUMP_IF_TRUE_OR_POP` and `JUMP_IF_FALSE_OR_POP` relative rather than absolute.
  * [bpo-47177](https://bugs.python.org/issue?@action=redirect&bpo=47177): Replace the `f_lasti` member of the internal `_PyInterpreterFrame` structure with a `prev_instr` pointer, which reduces overhead in the main interpreter loop.