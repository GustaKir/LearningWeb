Title: Updates to the AST Module in Python 3.13
URL: https://docs.python.org/3/whatsnew/3.13.html
Summary: The AST module in Python 3.13 introduces stricter argument handling for node constructors. Optional fields will default to None or an empty list if omitted, while missing required arguments will raise a DeprecationWarning, enhancing clarity and usability.
---

### ast[Â¶](https://docs.python.org/3/whatsnew/3.13.html#ast "Link to this heading")
  * The constructors of node types in the [`ast`](https://docs.python.org/3/library/ast.html#module-ast "ast: Abstract Syntax Tree classes and manipulation.") module are now stricter in the arguments they accept, with more intuitive behavior when arguments are omitted.
If an optional field on an AST node is not included as an argument when constructing an instance, the field will now be set to `None`. Similarly, if a list field is omitted, that field will now be set to an empty list, and if an `expr_context` field is omitted, it defaults to [`Load()`](https://docs.python.org/3/library/ast.html#ast.Load "ast.Load"). (Previously, in all cases, the attribute would be missing on the newly constructed AST node instance.)
In all other cases, where a required argument is omitted, the node constructor will emit a [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning"). This will raise an exception in Python 3.15. Similarly, passing a keyword argument to the constructor that does not map to a field on the AST node is now deprecated, and will raise an exception in Python 3.15.
These changes do not apply to user-defined subclasses of [`ast.AST`](https://docs.python.org/3/library/ast.html#ast.AST "ast.AST") unless the class opts in to the new behavior by defining the [`AST._field_types`](https://docs.python.org/3/library/ast.html#ast.AST._field_types "ast.AST._field_types") mapping.
(Contributed by Jelle Zijlstra in [gh-105858](https://github.com/python/cpython/issues/105858), [gh-117486](https://github.com/python/cpython/issues/117486), and [gh-118851](https://github.com/python/cpython/issues/118851).)
  * [`ast.parse()`](https://docs.python.org/3/library/ast.html#ast.parse "ast.parse") now accepts an optional argument _optimize_ which is passed on to [`compile()`](https://docs.python.org/3/library/functions.html#compile "compile"). This makes it possible to obtain an optimized AST. (Contributed by Irit Katriel in [gh-108113](https://github.com/python/cpython/issues/108113).)