Title: New Features in Element Methods for XML Handling
URL: https://docs.python.org/3/whatsnew/2.7.html
Summary: The update introduces two new methods for the `Element` class in the XML ElementTree module: `iter()` provides a generator to yield child elements, while `itertext()` yields all text chunks from the element's descendants. The deprecated methods `getiterator()` and `getchildren()` are mentioned as no longer recommended.
---

```

  * New [`Element`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element "xml.etree.ElementTree.Element") method: [`iter()`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.iter "xml.etree.ElementTree.Element.iter") yields the children of the element as a generator. It’s also possible to write `for child in elem:` to loop over an element’s children. The existing method `getiterator()` is now deprecated, as is `getchildren()` which constructs and returns a list of children.
  * New [`Element`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element "xml.etree.ElementTree.Element") method: [`itertext()`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.itertext "xml.etree.ElementTree.Element.itertext") yields all chunks of text that are descendants of the element. For example:
```
t = ET.XML("""<list>
 <item>1</item> <item>2</item> <item>3</item>
</list>""")
# Outputs ['\n ', '1', ' ', '2', ' ', '3', '\n']
print list(t.itertext())

```

  * Deprecated: using an element as a Boolean (i.e., `if elem:`) would return true if the element had any children, or false if there were no children. This behaviour is confusing – `None` is false, but so is a childless element? – so it will now trigger a [`FutureWarning`](https://docs.python.org/3/library/exceptions.html#FutureWarning "FutureWarning"). In your code, you should be explicit: write `len(elem) != 0` if you’re interested in the number of children, or `elem is not None`.