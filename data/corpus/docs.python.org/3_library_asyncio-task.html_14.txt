Title: Asyncio Task Result and Exception Handling
URL: https://docs.python.org/3/library/asyncio-task.html
Summary: The `result()` method retrieves the outcome of a Task if it is completed, raising a `CancelledError` if the Task was cancelled or an `InvalidStateError` if the result is not available. The `exception()` method returns any exception raised by the Task or `None` if there were no exceptions.
---

result()[¶](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.result "Link to this definition")
    
Return the result of the Task.
If the Task is _done_ , the result of the wrapped coroutine is returned (or if the coroutine raised an exception, that exception is re-raised.)
If the Task has been _cancelled_ , this method raises a [`CancelledError`](https://docs.python.org/3/library/asyncio-exceptions.html#asyncio.CancelledError "asyncio.CancelledError") exception.
If the Task’s result isn’t yet available, this method raises an [`InvalidStateError`](https://docs.python.org/3/library/asyncio-exceptions.html#asyncio.InvalidStateError "asyncio.InvalidStateError") exception. 

exception()[¶](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.exception "Link to this definition")
    
Return the exception of the Task.
If the wrapped coroutine raised an exception that exception is returned. If the wrapped coroutine returned normally this method returns `None`.
If the Task has been _cancelled_ , this method raises a [`CancelledError`](https://docs.python.org/3/library/asyncio-exceptions.html#asyncio.CancelledError "asyncio.CancelledError") exception.
If the Task isn’t _done_ yet, this method raises an [`InvalidStateError`](https://docs.python.org/3/library/asyncio-exceptions.html#asyncio.InvalidStateError "asyncio.InvalidStateError") exception. 

add_done_callback(_callback_ , _*_ , _context =None_)[¶](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.add_done_callback "Link to this definition")
    
Add a callback to be run when the Task is _done_.
This method should only be used in low-level callback-based code.
See the documentation of [`Future.add_done_callback()`](https://docs.python.org/3/library/asyncio-future.html#asyncio.Future.add_done_callback "asyncio.Future.add_done_callback") for more details. 

remove_done_callback(_callback_)[¶](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.remove_done_callback "Link to this definition")
    
Remove _callback_ from the callbacks list.
This method should only be used in low-level callback-based code.
See the documentation of [`Future.remove_done_callback()`](https://docs.python.org/3/library/asyncio-future.html#asyncio.Future.remove_done_callback "asyncio.Future.remove_done_callback") for more details. 

get_stack(_*_ , _limit =None_)[¶](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.get_stack "Link to this definition")
    
Return the list of stack frames for this Task.
If the wrapped coroutine is not done, this returns the stack where it is suspended. If the coroutine has completed successfully or was cancelled, this returns an empty list. If the coroutine was terminated by an exception, this returns the list of traceback frames.
The frames are always ordered from oldest to newest.
Only one stack frame is returned for a suspended coroutine.
The optional _limit_ argument sets the maximum number of frames to return; by default all available frames are returned. The ordering of the returned list differs depending on whether a stack or a traceback is returned: the newest frames of a stack are returned, but the oldest frames of a traceback are returned. (This matches the behavior of the traceback module.) 

print_stack(_*_ , _limit =None_, _file =None_)[¶](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.print_stack "Link to this definition")
    
Print the stack or traceback for this Task.
This produces output similar to that of the traceback module for the frames retrieved by [`get_stack()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.get_stack "asyncio.Task.get_stack").
The _limit_ argument is passed to [`get_stack()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.get_stack "asyncio.Task.get_stack") directly.
The _file_ argument is an I/O stream to which the output is written; by default output is written to [`sys.stdout`](https://docs.python.org/3/library/sys.html#sys.stdout "sys.stdout"). 

get_coro()[¶](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.get_coro "Link to this definition")
    
Return the coroutine object wrapped by the [`Task`](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task "asyncio.Task").
Note
This will return `None` for Tasks which have already completed eagerly. See the [Eager Task Factory](https://docs.python.org/3/library/asyncio-task.html#eager-task-factory).
Added in version 3.8.
Changed in version 3.12: Newly added eager task execution means result may be `None`. 

get_context()[¶](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.get_context "Link to this definition")
    
Return the [`contextvars.Context`](https://docs.python.org/3/library/contextvars.html#contextvars.Context "contextvars.Context") object associated with the task.
Added in version 3.12.