Title: Navigation in Python Documentation
URL: https://docs.python.org/3/library/asyncio-eventloop.html
Summary: This section provides links for navigating the Python documentation, including the general index, module index, and translations in various languages, along with references to related library sections and versions.
---

### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/asyncio-future.html "Futures") |
  * [previous](https://docs.python.org/3/library/asyncio-exceptions.html "Exceptions") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Networking and Interprocess Communication](https://docs.python.org/3/library/ipc.html) »
  * [`asyncio` — Asynchronous I/O](https://docs.python.org/3/library/asyncio.html) »
  * [Event Loop](https://docs.python.org/3/library/asyncio-eventloop.html)
  * | 
  * Theme  Auto Light Dark |


# Event Loop[¶](https://docs.python.org/3/library/asyncio-eventloop.html#event-loop "Link to this heading")
**Source code:** [Lib/asyncio/events.py](https://github.com/python/cpython/tree/3.13/Lib/asyncio/events.py), [Lib/asyncio/base_events.py](https://github.com/python/cpython/tree/3.13/Lib/asyncio/base_events.py)
Preface
The event loop is the core of every asyncio application. Event loops run asynchronous tasks and callbacks, perform network IO operations, and run subprocesses.
Application developers should typically use the high-level asyncio functions, such as [`asyncio.run()`](https://docs.python.org/3/library/asyncio-runner.html#asyncio.run "asyncio.run"), and should rarely need to reference the loop object or call its methods. This section is intended mostly for authors of lower-level code, libraries, and frameworks, who need finer control over the event loop behavior.
Obtaining the Event Loop
The following low-level functions can be used to get, set, or create an event loop: 

asyncio.get_running_loop()[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.get_running_loop "Link to this definition")
    
Return the running event loop in the current OS thread.
Raise a [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError") if there is no running event loop.
This function can only be called from a coroutine or a callback.
Added in version 3.7. 

asyncio.get_event_loop()[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.get_event_loop "Link to this definition")
    
Get the current event loop.
When called from a coroutine or a callback (e.g. scheduled with call_soon or similar API), this function will always return the running event loop.
If there is no running event loop set, the function will return the result of the `get_event_loop_policy().get_event_loop()` call.
Because this function has rather complex behavior (especially when custom event loop policies are in use), using the [`get_running_loop()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.get_running_loop "asyncio.get_running_loop") function is preferred to [`get_event_loop()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.get_event_loop "asyncio.get_event_loop") in coroutines and callbacks.
As noted above, consider using the higher-level [`asyncio.run()`](https://docs.python.org/3/library/asyncio-runner.html#asyncio.run "asyncio.run") function, instead of using these lower level functions to manually create and close an event loop.
Deprecated since version 3.12: Deprecation warning is emitted if there is no current event loop. In some future Python release this will become an error. 

asyncio.set_event_loop(_loop_)[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.set_event_loop "Link to this definition")
    
Set _loop_ as the current event loop for the current OS thread.