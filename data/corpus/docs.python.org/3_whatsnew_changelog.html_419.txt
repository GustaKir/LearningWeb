Title: Python 3.8 Changelog Updates
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: The document outlines several updates and bug fixes in Python 3.8, including improvements to `asyncio.Task` exception handling, enabling weak references on `functools.lru_cache()`, fixing a memory leak in `asyncio.Task`, and optimizing `fnmatch.fnmatch()` for performance.
---

ibrary/asyncio-task.html#asyncio.Task "asyncio.Task") is cancelled, the exception traceback now chains all the way back to where the task was first interrupted.
  * [bpo-40504](https://bugs.python.org/issue?@action=redirect&bpo=40504): [`functools.lru_cache()`](https://docs.python.org/3/library/functools.html#functools.lru_cache "functools.lru_cache") objects can now be the targets of weakrefs.
  * [bpo-40559](https://bugs.python.org/issue?@action=redirect&bpo=40559): Fix possible memory leak in the C implementation of [`asyncio.Task`](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task "asyncio.Task").
  * [bpo-40480](https://bugs.python.org/issue?@action=redirect&bpo=40480): `fnmatch.fnmatch()` could take exponential time in the presence of multiple `*` pattern characters. This was repaired by generating more elaborate regular expressions to avoid futile backtracking.
  * [bpo-40495](https://bugs.python.org/issue?@action=redirect&bpo=40495): [`compileall`](https://docs.python.org/3/library/compileall.html#module-compileall "compileall: Tools for byte-compiling all Python source files in a directory tree.") is now able to use hardlinks to prevent duplicates in a case when `.pyc` files for different optimization levels have the same content.
  * [bpo-40457](https://bugs.python.org/issue?@action=redirect&bpo=40457): The ssl module now support OpenSSL builds without TLS 1.0 and 1.1 methods.
  * [bpo-40355](https://bugs.python.org/issue?@action=redirect&bpo=40355): Improve error reporting in [`ast.literal_eval()`](https://docs.python.org/3/library/ast.html#ast.literal_eval "ast.literal_eval") in the presence of malformed [`ast.Dict`](https://docs.python.org/3/library/ast.html#ast.Dict "ast.Dict") nodes instead of silently ignoring any non-conforming elements. Patch by Curtis Bucher.
  * [bpo-40465](https://bugs.python.org/issue?@action=redirect&bpo=40465): Deprecated the optional _random_ argument to _random.shuffle()_.
  * [bpo-40459](https://bugs.python.org/issue?@action=redirect&bpo=40459): [`platform.win32_ver()`](https://docs.python.org/3/library/platform.html#platform.win32_ver "platform.win32_ver") now produces correct _ptype_ strings instead of empty strings.
  * [bpo-39435](https://bugs.python.org/issue?@action=redirect&bpo=39435): The first argument of [`pickle.loads()`](https://docs.python.org/3/library/pickle.html#pickle.loads "pickle.loads") is now positional-only.
  * [bpo-39305](https://bugs.python.org/issue?@action=redirect&bpo=39305): Update `nntplib` to merge `nntplib.NNTP` and `nntplib._NNTPBase`. Patch by Donghee Na.
  * [bpo-32494](https://bugs.python.org/issue?@action=redirect&bpo=32494): Update [`dbm.gnu`](https://docs.python.org/3/library/dbm.html#module-dbm.gnu "dbm.gnu: GNU database manager \(Unix\)") to use gdbm_count if possible when calling [`len()`](https://docs.python.org/3/library/functions.html#len "len"). Patch by Donghee Na.
  * [bpo-40453](https://bugs.python.org/issue?@action=redirect&bpo=40453): Add `isolated=True` keyword-only parameter to `_xxsubinterpreters.create()`. An isolated subinterpreter cannot spawn threads, spawn a child process or call `os.fork()`.
  * [bpo-40286](https://bugs.python.org/issue?@action=redirect&bpo=40286): Remove `_random.Random.randbytes()`: the C implementation of `randbytes()`. Implement the method in Python to ease subclassing: `randbytes()` now directly reuses `getrandbits()`.
  * [bpo-40394](https://bugs.python.org/issue?@action=redirect&bpo=40394): Added default arguments to [`difflib.SequenceMatcher.find_longest_match()`](https://docs.python.org/3/library/difflib.html#difflib.SequenceMatcher.find_longest_match "difflib.SequenceMatcher.find_longest_match").
  * [bpo-39995](https://bugs.python.org/issue?@action=redirect&bpo=39995): Fix a race condition in concurrent.futures._ThreadWakeup: access to _ThreadWakeup is now protected with the shutdown lock.
  * [bpo-30966](https://bugs.python.org/issue?@action=redirect&bpo=30966): `Process.shutdown(wait=True)` of [`concurrent.futures`](https://docs.python.org/3/library/concurrent.futures.html#module-concurrent.futures "concurrent.futures: Execute computations concurrently using threads or processes.") now closes explicitly the result queue.
  * [bpo-30966](https://bugs.python.org/issue?@action=redirect&bpo=30966): Add a new [`close()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.SimpleQueue.close "multiprocessing.SimpleQueue.close") method to the [`SimpleQueue`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.SimpleQueue "multiprocessing.SimpleQueue") class to explicitly close the queue.
  * [bpo-39966](https://bugs.python.org/issue?@action=redirect&bpo=39966): Revert [bpo-25597](https://bugs.python.org/issue?@action=redirect&bpo=25597).