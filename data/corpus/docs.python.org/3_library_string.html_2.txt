Title: String Formatter - get_field Method
URL: https://docs.python.org/3/library/string.html
Summary: The `get_field` method takes a field name from the `parse()` method, converts it into an object for formatting, and returns a tuple containing the object and a key used for value retrieval. It supports string formats specified in PEP 3101 and utilizes arguments and keyword arguments provided to the `vformat()` method.
---

get_field(_field_name_ , _args_ , _kwargs_)[¶](https://docs.python.org/3/library/string.html#string.Formatter.get_field "Link to this definition")
    
Given _field_name_ as returned by [`parse()`](https://docs.python.org/3/library/string.html#string.Formatter.parse "string.Formatter.parse") (see above), convert it to an object to be formatted. Returns a tuple (obj, used_key). The default version takes strings of the form defined in [**PEP 3101**](https://peps.python.org/pep-3101/), such as “0[name]” or “label.title”. _args_ and _kwargs_ are as passed in to [`vformat()`](https://docs.python.org/3/library/string.html#string.Formatter.vformat "string.Formatter.vformat"). The return value _used_key_ has the same meaning as the _key_ parameter to [`get_value()`](https://docs.python.org/3/library/string.html#string.Formatter.get_value "string.Formatter.get_value"). 

get_value(_key_ , _args_ , _kwargs_)[¶](https://docs.python.org/3/library/string.html#string.Formatter.get_value "Link to this definition")
    
Retrieve a given field value. The _key_ argument will be either an integer or a string. If it is an integer, it represents the index of the positional argument in _args_ ; if it is a string, then it represents a named argument in _kwargs_.
The _args_ parameter is set to the list of positional arguments to [`vformat()`](https://docs.python.org/3/library/string.html#string.Formatter.vformat "string.Formatter.vformat"), and the _kwargs_ parameter is set to the dictionary of keyword arguments.
For compound field names, these functions are only called for the first component of the field name; subsequent components are handled through normal attribute and indexing operations.
So for example, the field expression ‘0.name’ would cause [`get_value()`](https://docs.python.org/3/library/string.html#string.Formatter.get_value "string.Formatter.get_value") to be called with a _key_ argument of 0. The `name` attribute will be looked up after [`get_value()`](https://docs.python.org/3/library/string.html#string.Formatter.get_value "string.Formatter.get_value") returns by calling the built-in [`getattr()`](https://docs.python.org/3/library/functions.html#getattr "getattr") function.
If the index or keyword refers to an item that does not exist, then an [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError "IndexError") or [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError") should be raised. 

check_unused_args(_used_args_ , _args_ , _kwargs_)[¶](https://docs.python.org/3/library/string.html#string.Formatter.check_unused_args "Link to this definition")
    
Implement checking for unused arguments if desired. The arguments to this function is the set of all argument keys that were actually referred to in the format string (integers for positional arguments, and strings for named arguments), and a reference to the _args_ and _kwargs_ that was passed to vformat. The set of unused args can be calculated from these parameters. [`check_unused_args()`](https://docs.python.org/3/library/string.html#string.Formatter.check_unused_args "string.Formatter.check_unused_args") is assumed to raise an exception if the check fails. 

format_field(_value_ , _format_spec_)[¶](https://docs.python.org/3/library/string.html#string.Formatter.format_field "Link to this definition")
    
[`format_field()`](https://docs.python.org/3/library/string.html#string.Formatter.format_field "string.Formatter.format_field") simply calls the global [`format()`](https://docs.python.org/3/library/functions.html#format "format") built-in. The method is provided so that subclasses can override it.