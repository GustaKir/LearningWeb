Title: Email Utilities: Address Parsing and Formatting
URL: https://docs.python.org/3/library/email.utils.html
Summary: The `email.utils.parseaddr` function splits an email address into a tuple containing the real name and email address, with a strict mode to reject malformed inputs. The `email.utils.formataddr` function reverses this process, converting a tuple of `(realname, email_address)` back into a string format.
---

email.utils.parseaddr(_address_ , _*_ , _strict =True_)[¶](https://docs.python.org/3/library/email.utils.html#email.utils.parseaddr "Link to this definition")
    
Parse address – which should be the value of some address-containing field such as _To_ or _Cc_ – into its constituent _realname_ and _email address_ parts. Returns a tuple of that information, unless the parse fails, in which case a 2-tuple of `('', '')` is returned.
If _strict_ is true, use a strict parser which rejects malformed inputs.
Changed in version 3.13: Add _strict_ optional parameter and reject malformed inputs by default. 

email.utils.formataddr(_pair_ , _charset ='utf-8'_)[¶](https://docs.python.org/3/library/email.utils.html#email.utils.formataddr "Link to this definition")
    
The inverse of [`parseaddr()`](https://docs.python.org/3/library/email.utils.html#email.utils.parseaddr "email.utils.parseaddr"), this takes a 2-tuple of the form `(realname, email_address)` and returns the string value suitable for a _To_ or _Cc_ header. If the first element of _pair_ is false, then the second element is returned unmodified.
Optional _charset_ is the character set that will be used in the [**RFC 2047**](https://datatracker.ietf.org/doc/html/rfc2047.html) encoding of the `realname` if the `realname` contains non-ASCII characters. Can be an instance of [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") or a [`Charset`](https://docs.python.org/3/library/email.charset.html#email.charset.Charset "email.charset.Charset"). Defaults to `utf-8`.
Changed in version 3.3: Added the _charset_ option. 

email.utils.getaddresses(_fieldvalues_ , _*_ , _strict =True_)[¶](https://docs.python.org/3/library/email.utils.html#email.utils.getaddresses "Link to this definition")
    
This method returns a list of 2-tuples of the form returned by `parseaddr()`. _fieldvalues_ is a sequence of header field values as might be returned by [`Message.get_all`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.get_all "email.message.Message.get_all").
If _strict_ is true, use a strict parser which rejects malformed inputs.
Here’s a simple example that gets all the recipients of a message:
```
fromemail.utilsimport getaddresses
tos = msg.get_all('to', [])
ccs = msg.get_all('cc', [])
resent_tos = msg.get_all('resent-to', [])
resent_ccs = msg.get_all('resent-cc', [])
all_recipients = getaddresses(tos + ccs + resent_tos + resent_ccs)