Title: Working with Datetime Objects in Python
URL: https://docs.python.org/3/library/datetime.html
Summary: This section discusses the support for full year ranges in datetime objects between MINYEAR and MAXYEAR. It warns against using naive datetime objects as they may be treated as local times, suggesting the use of aware datetimes for UTC representation. It also notes a change in version 3.3 regarding the raising of specific errors (OverflowError instead of ValueError) for out-of-range timestamps.
---

```

except the latter formula always supports the full years range: between [`MINYEAR`](https://docs.python.org/3/library/datetime.html#datetime.MINYEAR "datetime.MINYEAR") and [`MAXYEAR`](https://docs.python.org/3/library/datetime.html#datetime.MAXYEAR "datetime.MAXYEAR") inclusive.
Warning
Because naive `datetime` objects are treated by many `datetime` methods as local times, it is preferred to use aware datetimes to represent times in UTC. As such, the recommended way to create an object representing a specific timestamp in UTC is by calling `datetime.fromtimestamp(timestamp, tz=timezone.utc)`.
Changed in version 3.3: Raise [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError") instead of [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if the timestamp is out of the range of values supported by the platform C `gmtime()` function. Raise [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") instead of [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") on `gmtime()` failure.
Deprecated since version 3.12: Use [`datetime.fromtimestamp()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.fromtimestamp "datetime.datetime.fromtimestamp") with [`UTC`](https://docs.python.org/3/library/datetime.html#datetime.UTC "datetime.UTC") instead. 

_classmethod_ datetime.fromordinal(_ordinal_)[¶](https://docs.python.org/3/library/datetime.html#datetime.datetime.fromordinal "Link to this definition")
    
Return the [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") corresponding to the proleptic Gregorian ordinal, where January 1 of year 1 has ordinal 1. [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised unless `1 <= ordinal <= datetime.max.toordinal()`. The hour, minute, second and microsecond of the result are all 0, and [`tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.datetime.tzinfo "datetime.datetime.tzinfo") is `None`. 

_classmethod_ datetime.combine(_date_ , _time_ , _tzinfo =time.tzinfo_)[¶](https://docs.python.org/3/library/datetime.html#datetime.datetime.combine "Link to this definition")
    
Return a new [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") object whose date components are equal to the given [`date`](https://docs.python.org/3/library/datetime.html#datetime.date "datetime.date") object’s, and whose time components are equal to the given [`time`](https://docs.python.org/3/library/datetime.html#datetime.time "datetime.time") object’s. If the _tzinfo_ argument is provided, its value is used to set the [`tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.datetime.tzinfo "datetime.datetime.tzinfo") attribute of the result, otherwise the [`tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.time.tzinfo "datetime.time.tzinfo") attribute of the _time_ argument is used. If the _date_ argument is a [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") object, its time components and [`tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.datetime.tzinfo "datetime.datetime.tzinfo") attributes are ignored.
For any [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") object `d`, `d == datetime.combine(d.date(), d.time(), d.tzinfo)`.
Changed in version 3.6: Added the _tzinfo_ argument. 

_classmethod_ datetime.fromisoformat(_date_string_)[¶](https://docs.python.org/3/library/datetime.html#datetime.datetime.fromisoformat "Link to this definition")
    
Return a [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") corresponding to a _date_string_ in any valid ISO 8601 format, with the following exceptions:
  1. Time zone offsets may have fractional seconds.
  2. The `T` separator may be replaced by any single unicode character.
  3. Fractional hours and minutes are not supported.
  4. Reduced precision dates are not currently supported (`YYYY-MM`, `YYYY`).
  5. Extended date representations are not currently supported (`±YYYYYY-MM-DD`).
  6. Ordinal dates are not currently supported (`YYYY-OOO`).


Examples:
>>>