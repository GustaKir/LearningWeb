Title: Python Built-in Exceptions: RuntimeError and StopIteration
URL: https://docs.python.org/3/library/exceptions.html
Summary: This section covers two built-in exceptions in Python: RuntimeError, raised for generic errors, and StopIteration, raised by the `next()` function and an iterator's `__next__()` method to indicate no further items. It notes that StopIteration has a `value` attribute indicating what was passed during its construction.
---

_exception_ RuntimeError[¶](https://docs.python.org/3/library/exceptions.html#RuntimeError "Link to this definition")
    
Raised when an error is detected that doesn’t fall in any of the other categories. The associated value is a string indicating what precisely went wrong. 

_exception_ StopIteration[¶](https://docs.python.org/3/library/exceptions.html#StopIteration "Link to this definition")
    
Raised by built-in function [`next()`](https://docs.python.org/3/library/functions.html#next "next") and an [iterator](https://docs.python.org/3/glossary.html#term-iterator)'s [`__next__()`](https://docs.python.org/3/library/stdtypes.html#iterator.__next__ "iterator.__next__") method to signal that there are no further items produced by the iterator. 

value[¶](https://docs.python.org/3/library/exceptions.html#StopIteration.value "Link to this definition")
    
The exception object has a single attribute `value`, which is given as an argument when constructing the exception, and defaults to [`None`](https://docs.python.org/3/library/constants.html#None "None").
When a [generator](https://docs.python.org/3/glossary.html#term-generator) or [coroutine](https://docs.python.org/3/glossary.html#term-coroutine) function returns, a new [`StopIteration`](https://docs.python.org/3/library/exceptions.html#StopIteration "StopIteration") instance is raised, and the value returned by the function is used as the [`value`](https://docs.python.org/3/library/exceptions.html#StopIteration.value "StopIteration.value") parameter to the constructor of the exception.
If a generator code directly or indirectly raises [`StopIteration`](https://docs.python.org/3/library/exceptions.html#StopIteration "StopIteration"), it is converted into a [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError") (retaining the [`StopIteration`](https://docs.python.org/3/library/exceptions.html#StopIteration "StopIteration") as the new exception’s cause).
Changed in version 3.3: Added `value` attribute and the ability for generator functions to use it to return a value.
Changed in version 3.5: Introduced the RuntimeError transformation via `from __future__ import generator_stop`, see [**PEP 479**](https://peps.python.org/pep-0479/).
Changed in version 3.7: Enable [**PEP 479**](https://peps.python.org/pep-0479/) for all code by default: a [`StopIteration`](https://docs.python.org/3/library/exceptions.html#StopIteration "StopIteration") error raised in a generator is transformed into a [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError"). 

_exception_ StopAsyncIteration[¶](https://docs.python.org/3/library/exceptions.html#StopAsyncIteration "Link to this definition")
    
Must be raised by [`__anext__()`](https://docs.python.org/3/reference/datamodel.html#object.__anext__ "object.__anext__") method of an [asynchronous iterator](https://docs.python.org/3/glossary.html#term-asynchronous-iterator) object to stop the iteration.
Added in version 3.5. 

_exception_ SyntaxError(_message_ , _details_)[¶](https://docs.python.org/3/library/exceptions.html#SyntaxError "Link to this definition")
    
Raised when the parser encounters a syntax error. This may occur in an [`import`](https://docs.python.org/3/reference/simple_stmts.html#import) statement, in a call to the built-in functions [`compile()`](https://docs.python.org/3/library/functions.html#compile "compile"), [`exec()`](https://docs.python.org/3/library/functions.html#exec "exec"), or [`eval()`](https://docs.python.org/3/library/functions.html#eval "eval"), or when reading the initial script or standard input (also interactively).
The [`str()`](https://docs.python.org/3/library/stdtypes.html#str "str") of the exception instance returns only the error message. Details is a tuple whose members are also available as separate attributes. 

filename[¶](https://docs.python.org/3/library/exceptions.html#SyntaxError.filename "Link to this definition")
    
The name of the file the syntax error occurred in. 

lineno[¶](https://docs.python.org/3/library/exceptions.html#SyntaxError.lineno "Link to this definition")
    
Which line number in the file the error occurred in. This is 1-indexed: the first line in the file has a `lineno` of 1. 

offset[¶](https://docs.python.org/3/library/exceptions.html#SyntaxError.offset "Link to this definition")
    
The column in the line where the error occurred. This is 1-indexed: the first character in the line has an `offset` of 1. 

text[¶](https://docs.python.org/3/library/exceptions.html#SyntaxError.text "Link to this definition")
    
The source code text involved in the error. 

end_lineno[¶](https://docs.python.org/3/library/exceptions.html#SyntaxError.end_lineno "Link to this definition")
    
Which line number in the file the error occurred ends in. This is 1-indexed: the first line in the file has a `lineno` of 1.