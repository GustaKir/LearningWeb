Title: Python Data Model - Type Modification and Methods
URL: https://docs.python.org/3/reference/datamodel.html
Summary: This section discusses the possibility of changing an object's type under specific controlled conditions, though it advises against it due to potential strange behavior. It also lists several special methods, including `__hash__()`, `__iter__()`, `__reversed__()`, `__contains__()`, `__class_getitem__()`, and `__fspath__()`, which are part of Python's data model.
---

```

Added in version 3.5.
Footnotes
[[1](https://docs.python.org/3/reference/datamodel.html#id1)]
It _is_ possible in some cases to change an object’s type, under certain controlled conditions. It generally isn’t a good idea though, since it can lead to some very strange behaviour if it is handled incorrectly.
[[2](https://docs.python.org/3/reference/datamodel.html#id12)]
The [`__hash__()`](https://docs.python.org/3/reference/datamodel.html#object.__hash__ "object.__hash__"), [`__iter__()`](https://docs.python.org/3/reference/datamodel.html#object.__iter__ "object.__iter__"), [`__reversed__()`](https://docs.python.org/3/reference/datamodel.html#object.__reversed__ "object.__reversed__"), [`__contains__()`](https://docs.python.org/3/reference/datamodel.html#object.__contains__ "object.__contains__"), [`__class_getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__class_getitem__ "object.__class_getitem__") and [`__fspath__()`](https://docs.python.org/3/library/os.html#os.PathLike.__fspath__ "os.PathLike.__fspath__") methods have special handling for this. Others will still raise a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError"), but may do so by relying on the behavior that `None` is not callable.
[[3](https://docs.python.org/3/reference/datamodel.html#id16)]
“Does not support” here means that the class has no such method, or the method returns [`NotImplemented`](https://docs.python.org/3/library/constants.html#NotImplemented "NotImplemented"). Do not set the method to `None` if you want to force fallback to the right operand’s reflected method—that will instead have the opposite effect of explicitly _blocking_ such fallback.
[[4](https://docs.python.org/3/reference/datamodel.html#id17)]
For operands of the same type, it is assumed that if the non-reflected method – such as [`__add__()`](https://docs.python.org/3/reference/datamodel.html#object.__add__ "object.__add__") – fails then the overall operation is not supported, which is why the reflected method is not called.
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [3. Data model](https://docs.python.org/3/reference/datamodel.html)
    * [3.1. Objects, values and types](https://docs.python.org/3/reference/datamodel.html#objects-values-and-types)
    * [3.2. The standard type hierarchy](https://docs.python.org/3/reference/datamodel.html#the-standard-type-hierarchy)
      * [3.2.1. None](https://docs.python.org/3/reference/datamodel.html#none)
      * [3.2.2. NotImplemented](https://docs.python.org/3/reference/datamodel.html#notimplemented)
      * [3.2.3. Ellipsis](https://docs.python.org/3/reference/datamodel.html#ellipsis)
      * [3.2.4. `numbers.Number`](https://docs.python.org/3/reference/datamodel.html#numbers-number)
        * [3.2.4.1. `numbers.Integral`](https://docs.python.org/3/reference/datamodel.html#numbers-integral)
        * [3.2.4.2. `numbers.Real` (`float`)](https://docs.python.org/3/reference/datamodel.html#numbers-real-float)
        * [3.2.4.3. `numbers.Complex` (`complex`)](https://docs.python.org/3/reference/datamodel.html#numbers-complex-complex)
      * [3.2.5. Sequences](https://docs.python.org/3/reference/datamodel.html#sequences)
        * [3.2.5.1. Immutable sequences](https://docs.python.org/3/reference/datamodel.html#immutable-sequences)
        * [3.2.5.2. Mutable sequences](https://docs.python.org/3/reference/datamodel.html#mutable-sequences)
      * [3.2.6. Set types](https://docs.python.org/3/reference/datamodel.html#set-types)
      * [3.2.7. Mappings](https://docs.python.org/3/reference/datamodel.html#mappings)
        * [3.2.7.1. Dictionaries](https://docs.python.org/3/reference/datamodel.html#dictionaries)
      * [3.2.8. Callable types](https://docs.python.org/3/reference/datamodel.html#callable-types)
        * [3.2.8.1. User-defined functions](https://docs.python.org/3/reference/datamodel.html#user-defined-functions)
          * [3.2.8.1.1. Special read-only attributes](https://docs.python.org/3/reference/datamodel.html#special-read-only-attributes)
          * [3.2.8.1.2. Special writable attributes](https://docs.python.org/3/reference/datamodel.html#special-writable-attributes)
        * [3.2.8.2. Instance methods](https://docs.python.org/3/reference/datamodel.html#instance-methods)
        * [3.2.8.3. Generator functions](https://docs.python.org/3/reference/datamodel.html#generator-functions)
        * [3.2.8.4. Coroutine functions](https://docs.python.org/3/reference/datamodel.html#coroutine-functions)
        * [3.2.8.5. Asynchronous generator functions](https://docs.python.org/3/reference/datamodel.html#asynchronous-generator-functions)
        * [3.2.8.6. Built-in functions](https://docs.python.org/3/reference/datamodel.html#built-in-functions)
        * [3.2.8.7. Built-in methods](https://docs.python.org/3/reference/datamodel.html#built-in-methods)
        * [3.2.8.8. Classes](https://docs.python.org/3/reference/datamodel.html#c