Title: NamedNodeMap and Comment Objects in XML DOM
URL: https://docs.python.org/3/library/xml.dom.html
Summary: The NamedNodeMap.item(_index_) method retrieves an attribute node at a specified index, with its value accessible via the `value` attribute. Additionally, the `Comment` class represents XML comments, inheriting from Node, and holds a `data` attribute for the comment's content as a string.
---

NamedNodeMap.item(_index_)[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.NamedNodeMap.item "Link to this definition")
    
Return an attribute with a particular index. The order you get the attributes in is arbitrary but will be consistent for the life of a DOM. Each item is an attribute node. Get its value with the `value` attribute.
There are also experimental methods that give this class more mapping behavior. You can use them or you can use the standardized `getAttribute*()` family of methods on the `Element` objects.
### Comment Objects[¶](https://docs.python.org/3/library/xml.dom.html#comment-objects "Link to this heading")
`Comment` represents a comment in the XML document. It is a subclass of `Node`, but cannot have child nodes. 

Comment.data[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.Comment.data "Link to this definition")
    
The content of the comment as a string. The attribute contains all characters between the leading `<!-``-` and trailing `-``->`, but does not include them.
### Text and CDATASection Objects[¶](https://docs.python.org/3/library/xml.dom.html#text-and-cdatasection-objects "Link to this heading")
The `Text` interface represents text in the XML document. If the parser and DOM implementation support the DOM’s XML extension, portions of the text enclosed in CDATA marked sections are stored in `CDATASection` objects. These two interfaces are identical, but provide different values for the `nodeType` attribute.
These interfaces extend the `Node` interface. They cannot have child nodes. 

Text.data[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.Text.data "Link to this definition")
    
The content of the text node as a string.
Note
The use of a `CDATASection` node does not indicate that the node represents a complete CDATA marked section, only that the content of the node was part of a CDATA section. A single CDATA section may be represented by more than one node in the document tree. There is no way to determine whether two adjacent `CDATASection` nodes represent different CDATA marked sections.
### ProcessingInstruction Objects[¶](https://docs.python.org/3/library/xml.dom.html#processinginstruction-objects "Link to this heading")
Represents a processing instruction in the XML document; this inherits from the `Node` interface and cannot have child nodes. 

ProcessingInstruction.target[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.ProcessingInstruction.target "Link to this definition")
    
The content of the processing instruction up to the first whitespace character. This is a read-only attribute. 

ProcessingInstruction.data[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.ProcessingInstruction.data "Link to this definition")
    
The content of the processing instruction following the first whitespace character.
### Exceptions[¶](https://docs.python.org/3/library/xml.dom.html#exceptions "Link to this heading")
The DOM Level 2 recommendation defines a single exception, [`DOMException`](https://docs.python.org/3/library/xml.dom.html#xml.dom.DOMException "xml.dom.DOMException"), and a number of constants that allow applications to determine what sort of error occurred. [`DOMException`](https://docs.python.org/3/library/xml.dom.html#xml.dom.DOMException "xml.dom.DOMException") instances carry a [`code`](https://docs.python.org/3/library/code.html#module-code "code: Facilities to implement read-eval-print loops.") attribute that provides the appropriate value for the specific exception.
The Python DOM interface provides the constants, but also expands the set of exceptions so that a specific exception exists for each of the exception codes defined by the DOM. The implementations must raise the appropriate specific exception, each of which carries the appropriate value for the [`code`](https://docs.python.org/3/library/code.html#module-code "code: Facilities to implement read-eval-print loops.") attribute. 

_exception_ xml.dom.DOMException[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.DOMException "Link to this definition")
    
Base exception class used for all specific DOM exceptions. This exception class cannot be directly instantiated. 

_exception_ xml.dom.DomstringSizeErr[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.DomstringSizeErr "Link to this definition")
    
Raised when a specified range of text does not fit into a string. This is not known to be used in the Python DOM implementations, but may be received from DOM implementations not written in Python. 

_exception_ xml.dom.HierarchyRequestErr[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.HierarchyRequestErr "Link to this definition")
    
Raised when an attempt is made to insert a node where the node type is not allowed.