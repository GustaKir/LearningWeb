Title: Introduction to BaseExceptionGroup and ExceptionGroup
URL: https://docs.python.org/3/library/exceptions.html
Summary: The document explains the two exception types: BaseExceptionGroup and ExceptionGroup. BaseExceptionGroup extends BaseException and can wrap any exception, while ExceptionGroup extends Exception and can only wrap subclasses of Exception. The msg parameter must be a string, ensuring compatibility with exception handling.
---

_exception_ BaseExceptionGroup(_msg_ , _excs_)[¶](https://docs.python.org/3/library/exceptions.html#BaseExceptionGroup "Link to this definition")
    
Both of these exception types wrap the exceptions in the sequence `excs`. The `msg` parameter must be a string. The difference between the two classes is that [`BaseExceptionGroup`](https://docs.python.org/3/library/exceptions.html#BaseExceptionGroup "BaseExceptionGroup") extends [`BaseException`](https://docs.python.org/3/library/exceptions.html#BaseException "BaseException") and it can wrap any exception, while [`ExceptionGroup`](https://docs.python.org/3/library/exceptions.html#ExceptionGroup "ExceptionGroup") extends [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception "Exception") and it can only wrap subclasses of [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception "Exception"). This design is so that `except Exception` catches an [`ExceptionGroup`](https://docs.python.org/3/library/exceptions.html#ExceptionGroup "ExceptionGroup") but not [`BaseExceptionGroup`](https://docs.python.org/3/library/exceptions.html#BaseExceptionGroup "BaseExceptionGroup").
The [`BaseExceptionGroup`](https://docs.python.org/3/library/exceptions.html#BaseExceptionGroup "BaseExceptionGroup") constructor returns an [`ExceptionGroup`](https://docs.python.org/3/library/exceptions.html#ExceptionGroup "ExceptionGroup") rather than a [`BaseExceptionGroup`](https://docs.python.org/3/library/exceptions.html#BaseExceptionGroup "BaseExceptionGroup") if all contained exceptions are [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception "Exception") instances, so it can be used to make the selection automatic. The [`ExceptionGroup`](https://docs.python.org/3/library/exceptions.html#ExceptionGroup "ExceptionGroup") constructor, on the other hand, raises a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") if any contained exception is not an [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception "Exception") subclass. 

message[¶](https://docs.python.org/3/library/exceptions.html#BaseExceptionGroup.message "Link to this definition")
    
The `msg` argument to the constructor. This is a read-only attribute. 

exceptions[¶](https://docs.python.org/3/library/exceptions.html#BaseExceptionGroup.exceptions "Link to this definition")
    
A tuple of the exceptions in the `excs` sequence given to the constructor. This is a read-only attribute. 

subgroup(_condition_)[¶](https://docs.python.org/3/library/exceptions.html#BaseExceptionGroup.subgroup "Link to this definition")
    
Returns an exception group that contains only the exceptions from the current group that match _condition_ , or `None` if the result is empty.
The condition can be an exception type or tuple of exception types, in which case each exception is checked for a match using the same check that is used in an `except` clause. The condition can also be a callable (other than a type object) that accepts an exception as its single argument and returns true for the exceptions that should be in the subgroup.
The nesting structure of the current exception is preserved in the result, as are the values of its [`message`](https://docs.python.org/3/library/exceptions.html#BaseExceptionGroup.message "BaseExceptionGroup.message"), [`__traceback__`](https://docs.python.org/3/library/exceptions.html#BaseException.__traceback__ "BaseException.__traceback__"), [`__cause__`](https://docs.python.org/3/library/exceptions.html#BaseException.__cause__ "BaseException.__cause__"), [`__context__`](https://docs.python.org/3/library/exceptions.html#BaseException.__context__ "BaseException.__context__") and [`__notes__`](https://docs.python.org/3/library/exceptions.html#BaseException.__notes__ "BaseException.__notes__") fields. Empty nested groups are omitted from the result.
The condition is checked for all exceptions in the nested exception group, including the top-level and any nested exception groups. If the condition is true for such an exception group, it is included in the result in full.
Added in version 3.13: `condition` can be any callable which is not a type object. 

split(_condition_)[¶](https://docs.python.org/3/library/exceptions.html#BaseExceptionGroup.split "Link to this definition")
    
Like [`subgroup()`](https://docs.python.org/3/library/exceptions.html#BaseExceptionGroup.subgroup "BaseExceptionGroup.subgroup"), but returns the pair `(match, rest)` where `match` is `subgroup(condition)` and `rest` is the remaining non-matching part.