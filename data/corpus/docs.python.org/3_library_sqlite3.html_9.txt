Title: sqlite3.Connection.blobopen
URL: https://docs.python.org/3/library/sqlite3.html
Summary: The `blobopen` method opens a handle to an existing BLOB in a specified SQLite table. It requires parameters for the table name, column name, and row identifier, with options for read-only access and naming the blob.
---

blobopen(_table_ , _column_ , _row_ , _/_ , _*_ , _readonly =False_, _name ='main'_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.blobopen "Link to this definition")
    
Open a [`Blob`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Blob "sqlite3.Blob") handle to an existing BLOB. 

Parameters:
    
  * **table** ([_str_](https://docs.python.org/3/library/stdtypes.html#str "str")) – The name of the table where the blob is located.
  * **column** ([_str_](https://docs.python.org/3/library/stdtypes.html#str "str")) – The name of the column where the blob is located.
  * **row** ([_str_](https://docs.python.org/3/library/stdtypes.html#str "str")) – The name of the row where the blob is located.
  * **readonly** ([_bool_](https://docs.python.org/3/library/functions.html#bool "bool")) – Set to `True` if the blob should be opened without write permissions. Defaults to `False`.
  * **name** ([_str_](https://docs.python.org/3/library/stdtypes.html#str "str")) – The name of the database where the blob is located. Defaults to `"main"`.



Raises:
    
[**OperationalError**](https://docs.python.org/3/library/sqlite3.html#sqlite3.OperationalError "sqlite3.OperationalError") – When trying to open a blob in a `WITHOUT ROWID` table. 

Return type:
    
[Blob](https://docs.python.org/3/library/sqlite3.html#sqlite3.Blob "sqlite3.Blob")
Note
The blob size cannot be changed using the [`Blob`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Blob "sqlite3.Blob") class. Use the SQL function `zeroblob` to create a blob with a fixed size.
Added in version 3.11. 

commit()[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.commit "Link to this definition")
    
Commit any pending transaction to the database. If [`autocommit`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit "sqlite3.Connection.autocommit") is `True`, or there is no open transaction, this method does nothing. If `autocommit` is `False`, a new transaction is implicitly opened if a pending transaction was committed by this method. 

rollback()[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.rollback "Link to this definition")
    
Roll back to the start of any pending transaction. If [`autocommit`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit "sqlite3.Connection.autocommit") is `True`, or there is no open transaction, this method does nothing. If `autocommit` is `False`, a new transaction is implicitly opened if a pending transaction was rolled back by this method. 

close()[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.close "Link to this definition")
    
Close the database connection. If [`autocommit`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit "sqlite3.Connection.autocommit") is `False`, any pending transaction is implicitly rolled back. If `autocommit` is `True` or [`LEGACY_TRANSACTION_CONTROL`](https://docs.python.org/3/library/sqlite3.html#sqlite3.LEGACY_TRANSACTION_CONTROL "sqlite3.LEGACY_TRANSACTION_CONTROL"), no implicit transaction control is executed. Make sure to [`commit()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.commit "sqlite3.Connection.commit") before closing to avoid losing pending changes. 

execute(_sql_ , _parameters =()_, _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.execute "Link to this definition")
    
Create a new [`Cursor`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor "sqlite3.Cursor") object and call [`execute()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute "sqlite3.Cursor.execute") on it with the given _sql_ and _parameters_. Return the new cursor object. 

executemany(_sql_ , _parameters_ , _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.executemany "Link to this definition")
    
Create a new [`Cursor`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor "sqlite3.Cursor") object and call [`executemany()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.executemany "sqlite3.Cursor.executemany") on it with the given _sql_ and _parameters_. Return the new cursor object. 

executescript(_sql_script_ , _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.executescript "Link to this definition")
    
Create a new [`Cursor`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor "sqlite3.Cursor") object and call [`executescript()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.executescript "sqlite3.Cursor.executescript") on it with the given _sql_script_. Return the new cursor object. 

create_function(_name_ , _narg_ , _func_ , _*_ , _deterministic =False_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.create_function "Link to this definition")
    
Create or remove a user-defined SQL function.