Title: Python Development Mode and Tracemalloc
URL: https://docs.python.org/3/library/devmode.html
Summary: Python Development Mode does not enable the tracemalloc module by default due to performance and memory overheads. When enabled, it provides traceback information for errors like ResourceWarning and buffer overflow errors. Additionally, it does not prevent the -O command line option from removing assert statements.
---

The Python Development Mode does not enable the [`tracemalloc`](https://docs.python.org/3/library/tracemalloc.html#module-tracemalloc "tracemalloc: Trace memory allocations.") module by default, because the overhead cost (to performance and memory) would be too large. Enabling the [`tracemalloc`](https://docs.python.org/3/library/tracemalloc.html#module-tracemalloc "tracemalloc: Trace memory allocations.") module provides additional information on the origin of some errors. For example, [`ResourceWarning`](https://docs.python.org/3/library/exceptions.html#ResourceWarning "ResourceWarning") logs the traceback where the resource was allocated, and a buffer overflow error logs the traceback where the memory block was allocated.
The Python Development Mode does not prevent the [`-O`](https://docs.python.org/3/using/cmdline.html#cmdoption-O) command line option from removing [`assert`](https://docs.python.org/3/reference/simple_stmts.html#assert) statements nor from setting [`__debug__`](https://docs.python.org/3/library/constants.html#debug__ "__debug__") to `False`.
The Python Development Mode can only be enabled at the Python startup. Its value can be read from [`sys.flags.dev_mode`](https://docs.python.org/3/library/sys.html#sys.flags "sys.flags").
Changed in version 3.8: The [`io.IOBase`](https://docs.python.org/3/library/io.html#io.IOBase "io.IOBase") destructor now logs `close()` exceptions.
Changed in version 3.9: The _encoding_ and _errors_ arguments are now checked for string encoding and decoding operations.
## ResourceWarning Example[¶](https://docs.python.org/3/library/devmode.html#resourcewarning-example "Link to this heading")
Example of a script counting the number of lines of the text file specified in the command line:
```
importsys
defmain():
  fp = open(sys.argv[1])
  nlines = len(fp.readlines())
  print(nlines)
  # The file is closed implicitly
if __name__ == "__main__":
  main()

```

The script does not close the file explicitly. By default, Python does not emit any warning. Example using README.txt, which has 269 lines:
```
$ pythonscript.pyREADME.txt
269

```

Enabling the Python Development Mode displays a [`ResourceWarning`](https://docs.python.org/3/library/exceptions.html#ResourceWarning "ResourceWarning") warning:
```
$ python-Xdevscript.pyREADME.txt
269
script.py:10: ResourceWarning: unclosed file <_io.TextIOWrapper name='README.rst' mode='r' encoding='UTF-8'>
 main()
ResourceWarning: Enable tracemalloc to get the object allocation traceback

```

In addition, enabling [`tracemalloc`](https://docs.python.org/3/library/tracemalloc.html#module-tracemalloc "tracemalloc: Trace memory allocations.") shows the line where the file was opened:
```
$ python-Xdev-Xtracemalloc=5script.pyREADME.rst
269
script.py:10: ResourceWarning: unclosed file <_io.TextIOWrapper name='README.rst' mode='r' encoding='UTF-8'>
 main()
Object allocated at (most recent call last):
 File "script.py", lineno 10
  main()
 File "script.py", lineno 4
  fp = open(sys.argv[1])

```

The fix is to close explicitly the file. Example using a context manager:
```
defmain():
  # Close the file explicitly when exiting the with block
  with open(sys.argv[1]) as fp:
    nlines = len(fp.readlines())
  print(nlines)

```

Not closing a resource explicitly can leave a resource open for way longer than expected; it can cause severe issues upon exiting Python. It is bad in CPython, but it is even worse in PyPy. Closing resources explicitly makes an application more deterministic and more reliable.
## Bad file descriptor error example[¶](https://docs.python.org/3/library/devmode.html#bad-file-descriptor-error-example "Link to this heading")
Script displaying the first line of itself:
```
importos
defmain():
  fp = open(__file__)
  firstline = fp.readline()
  print(firstline.rstrip())
  os.close(fp.fileno())
  # The file is closed implicitly
main()

```

By default, Python does not emit any warning:
```
$ pythonscript.py
import os

```

The Python Development Mode shows a [`ResourceWarning`](https://docs.python.org/3/library/exceptions.html#ResourceWarning "ResourceWarning") and logs a “Bad file descriptor” error when finalizing the file object:
```
$ python-Xdevscript.py
import os
script.py:10: ResourceWarning: unclosed file <_io.TextIOWrapper name='script.py' mode='r' encoding='UTF-8'>
 main()
ResourceWarning: Enable tracemalloc to get the object allocation traceback
Exception ignored in: <_io.TextIOWrapper name='script.py' mode='r' encoding='UTF-8'>
Traceback (most recent call last):
 File "script.py", line 10, in <module>
  main()
OSError: [Errno 9] Bad file descriptor