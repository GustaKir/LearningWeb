Title: os Module Functions: fchown and fdatasync
URL: https://docs.python.org/3/library/os.html
Summary: The 'os.fchown()' function changes the owner and group ID of a file specified by its file descriptor, with options to leave either ID unchanged by setting it to -1. It raises an auditing event and is available on Unix systems. The 'os.fdatasync()' function forces a write of the file associated with the file descriptor to disk, without updating file metadata. Both functions have specific platform availability notes.
---

os.fchown(_fd_ , _uid_ , _gid_)[¶](https://docs.python.org/3/library/os.html#os.fchown "Link to this definition")
    
Change the owner and group id of the file given by _fd_ to the numeric _uid_ and _gid_. To leave one of the ids unchanged, set it to -1. See [`chown()`](https://docs.python.org/3/library/os.html#os.chown "os.chown"). As of Python 3.3, this is equivalent to `os.chown(fd, uid, gid)`.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.chown` with arguments `path`, `uid`, `gid`, `dir_fd`.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix.
The function is limited on WASI, see [WebAssembly platforms](https://docs.python.org/3/library/intro.html#wasm-availability) for more information. 

os.fdatasync(_fd_)[¶](https://docs.python.org/3/library/os.html#os.fdatasync "Link to this definition")
    
Force write of file with filedescriptor _fd_ to disk. Does not force update of metadata.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix.
Note
This function is not available on MacOS. 

os.fpathconf(_fd_ , _name_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.fpathconf "Link to this definition")
    
Return system configuration information relevant to an open file. _name_ specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX.1, Unix 95, Unix 98, and others). Some platforms define additional names as well. The names known to the host operating system are given in the `pathconf_names` dictionary. For configuration variables not included in that mapping, passing an integer for _name_ is also accepted.
If _name_ is a string and is not known, [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised. If a specific value for _name_ is not supported by the host system, even if it is included in `pathconf_names`, an [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") is raised with [`errno.EINVAL`](https://docs.python.org/3/library/errno.html#errno.EINVAL "errno.EINVAL") for the error number.
As of Python 3.3, this is equivalent to `os.pathconf(fd, name)`.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix. 

os.fstat(_fd_)[¶](https://docs.python.org/3/library/os.html#os.fstat "Link to this definition")
    
Get the status of the file descriptor _fd_. Return a [`stat_result`](https://docs.python.org/3/library/os.html#os.stat_result "os.stat_result") object.
As of Python 3.3, this is equivalent to `os.stat(fd)`.
See also
The [`stat()`](https://docs.python.org/3/library/os.html#os.stat "os.stat") function. 

os.fstatvfs(_fd_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.fstatvfs "Link to this definition")
    
Return information about the filesystem containing the file associated with file descriptor _fd_ , like [`statvfs()`](https://docs.python.org/3/library/os.html#os.statvfs "os.statvfs"). As of Python 3.3, this is equivalent to `os.statvfs(fd)`.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix. 

os.fsync(_fd_)[¶](https://docs.python.org/3/library/os.html#os.fsync "Link to this definition")
    
Force write of file with filedescriptor _fd_ to disk. On Unix, this calls the native `fsync()` function; on Windows, the MS `_commit()` function.
If you’re starting with a buffered Python [file object](https://docs.python.org/3/glossary.html#term-file-object) _f_ , first do `f.flush()`, and then do `os.fsync(f.fileno())`, to ensure that all internal buffers associated with _f_ are written to disk.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, Windows. 

os.ftruncate(_fd_ , _length_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.ftruncate "Link to this definition")
    
Truncate the file corresponding to file descriptor _fd_ , so that it is at most _length_ bytes in size. As of Python 3.3, this is equivalent to `os.truncate(fd, length)`.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.truncate` with arguments `fd`, `length`.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, Windows.
Changed in version 3.5: Added support for Windows