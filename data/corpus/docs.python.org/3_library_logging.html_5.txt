Title: Logging with Extra Attributes in Python
URL: https://docs.python.org/3/library/logging.html
Summary: When using the '_extra_' dictionary in Python's logging system, ensure that its keys do not conflict with existing LogRecord attributes. Missing expected keys, like 'clientip' and 'user', can lead to formatting exceptions and prevent messages from being logged. This feature is designed for specific use cases and requires careful handling.
---

```

The keys in the dictionary passed in _extra_ should not clash with the keys used by the logging system. (See the section on [LogRecord attributes](https://docs.python.org/3/library/logging.html#logrecord-attributes) for more information on which keys are used by the logging system.)
If you choose to use these attributes in logged messages, you need to exercise some care. In the above example, for instance, the [`Formatter`](https://docs.python.org/3/library/logging.html#logging.Formatter "logging.Formatter") has been set up with a format string which expects ‘clientip’ and ‘user’ in the attribute dictionary of the [`LogRecord`](https://docs.python.org/3/library/logging.html#logging.LogRecord "logging.LogRecord"). If these are missing, the message will not be logged because a string formatting exception will occur. So in this case, you always need to pass the _extra_ dictionary with these keys.
While this might be annoying, this feature is intended for use in specialized circumstances, such as multi-threaded servers where the same code executes in many contexts, and interesting conditions which arise are dependent on this context (such as remote client IP address and authenticated user name, in the above example). In such circumstances, it is likely that specialized [`Formatter`](https://docs.python.org/3/library/logging.html#logging.Formatter "logging.Formatter")s would be used with particular [`Handler`](https://docs.python.org/3/library/logging.html#logging.Handler "logging.Handler")s.
If no handler is attached to this logger (or any of its ancestors, taking into account the relevant [`Logger.propagate`](https://docs.python.org/3/library/logging.html#logging.Logger.propagate "logging.Logger.propagate") attributes), the message will be sent to the handler set on [`lastResort`](https://docs.python.org/3/library/logging.html#logging.lastResort "logging.lastResort").
Changed in version 3.2: The _stack_info_ parameter was added.
Changed in version 3.5: The _exc_info_ parameter can now accept exception instances.
Changed in version 3.8: The _stacklevel_ parameter was added. 

info(_msg_ , _* args_, _** kwargs_)[¶](https://docs.python.org/3/library/logging.html#logging.Logger.info "Link to this definition")
    
Logs a message with level [`INFO`](https://docs.python.org/3/library/logging.html#logging.INFO "logging.INFO") on this logger. The arguments are interpreted as for [`debug()`](https://docs.python.org/3/library/logging.html#logging.debug "logging.debug"). 

warning(_msg_ , _* args_, _** kwargs_)[¶](https://docs.python.org/3/library/logging.html#logging.Logger.warning "Link to this definition")
    
Logs a message with level [`WARNING`](https://docs.python.org/3/library/logging.html#logging.WARNING "logging.WARNING") on this logger. The arguments are interpreted as for [`debug()`](https://docs.python.org/3/library/logging.html#logging.debug "logging.debug").
Note
There is an obsolete method `warn` which is functionally identical to `warning`. As `warn` is deprecated, please do not use it - use `warning` instead. 

error(_msg_ , _* args_, _** kwargs_)[¶](https://docs.python.org/3/library/logging.html#logging.Logger.error "Link to this definition")
    
Logs a message with level [`ERROR`](https://docs.python.org/3/library/logging.html#logging.ERROR "logging.ERROR") on this logger. The arguments are interpreted as for [`debug()`](https://docs.python.org/3/library/logging.html#logging.debug "logging.debug"). 

critical(_msg_ , _* args_, _** kwargs_)[¶](https://docs.python.org/3/library/logging.html#logging.Logger.critical "Link to this definition")
    
Logs a message with level [`CRITICAL`](https://docs.python.org/3/library/logging.html#logging.CRITICAL "logging.CRITICAL") on this logger. The arguments are interpreted as for [`debug()`](https://docs.python.org/3/library/logging.html#logging.debug "logging.debug"). 

log(_level_ , _msg_ , _* args_, _** kwargs_)[¶](https://docs.python.org/3/library/logging.html#logging.Logger.log "Link to this definition")
    
Logs a message with integer level _level_ on this logger. The other arguments are interpreted as for [`debug()`](https://docs.python.org/3/library/logging.html#logging.debug "logging.debug"). 

exception(_msg_ , _* args_, _** kwargs_)[¶](https://docs.python.org/3/library/logging.html#logging.Logger.exception "Link to this definition")
    
Logs a message with level [`ERROR`](https://docs.python.org/3/library/logging.html#logging.ERROR "logging.ERROR") on this logger. The arguments are interpreted as for [`debug()`](https://docs.python.org/3/library/logging.html#logging.debug "logging.debug"). Exception info is added to the logging message. This method should only be called from an exception handler. 

addFilter(_filter_)[¶](https://docs.python.org/3/library/logging.html#logging.Logger.addFilter "Link to this definition")
    
Adds the specified filter _filter_ to this logger.