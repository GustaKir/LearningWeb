Title: Python DOM API Accessor Functions
URL: https://docs.python.org/3/library/xml.dom.html
Summary: The Python DOM API provides accessor functions for certain attributes. Notably, normal attribute access is required for the DOM API, unlike the attribute mapping in IDL, which may raise an AttributeError. This necessitates wrapper objects for DOM objects accessed via CORBA, although experienced implementers find this manageable. Additionally, readonly attributes may not fully restrict write access in all implementations.
---

```

yields three accessor functions: a “get” method for `someValue` (`_get_someValue()`), and “get” and “set” methods for `anotherValue` (`_get_anotherValue()` and `_set_anotherValue()`). The mapping, in particular, does not require that the IDL attributes are accessible as normal Python attributes: `object.someValue` is _not_ required to work, and may raise an [`AttributeError`](https://docs.python.org/3/library/exceptions.html#AttributeError "AttributeError").
The Python DOM API, however, _does_ require that normal attribute access work. This means that the typical surrogates generated by Python IDL compilers are not likely to work, and wrapper objects may be needed on the client if the DOM objects are accessed via CORBA. While this does require some additional consideration for CORBA DOM clients, the implementers with experience using DOM over CORBA from Python do not consider this a problem. Attributes that are declared `readonly` may not restrict write access in all DOM implementations.
In the Python DOM API, accessor functions are not required. If provided, they should take the form defined by the Python IDL mapping, but these methods are considered unnecessary since the attributes are accessible directly from Python. “Set” accessors should never be provided for `readonly` attributes.
The IDL definitions do not fully embody the requirements of the W3C DOM API, such as the notion of certain objects, such as the return value of `getElementsByTagName()`, being “live”. The Python DOM API does not require implementations to enforce such requirements.
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [`xml.dom` — The Document Object Model API](https://docs.python.org/3/library/xml.dom.html)
    * [Module Contents](https://docs.python.org/3/library/xml.dom.html#module-contents)
    * [Objects in the DOM](https://docs.python.org/3/library/xml.dom.html#objects-in-the-dom)
      * [DOMImplementation Objects](https://docs.python.org/3/library/xml.dom.html#domimplementation-objects)
      * [Node Objects](https://docs.python.org/3/library/xml.dom.html#node-objects)
      * [NodeList Objects](https://docs.python.org/3/library/xml.dom.html#nodelist-objects)
      * [DocumentType Objects](https://docs.python.org/3/library/xml.dom.html#documenttype-objects)
      * [Document Objects](https://docs.python.org/3/library/xml.dom.html#document-objects)
      * [Element Objects](https://docs.python.org/3/library/xml.dom.html#element-objects)
      * [Attr Objects](https://docs.python.org/3/library/xml.dom.html#attr-objects)
      * [NamedNodeMap Objects](https://docs.python.org/3/library/xml.dom.html#namednodemap-objects)
      * [Comment Objects](https://docs.python.org/3/library/xml.dom.html#comment-objects)
      * [Text and CDATASection Objects](https://docs.python.org/3/library/xml.dom.html#text-and-cdatasection-objects)
      * [ProcessingInstruction Objects](https://docs.python.org/3/library/xml.dom.html#processinginstruction-objects)
      * [Exceptions](https://docs.python.org/3/library/xml.dom.html#exceptions)
    * [Conformance](https://docs.python.org/3/library/xml.dom.html#conformance)
      * [Type Mapping](https://docs.python.org/3/library/xml.dom.html#type-mapping)
      * [Accessor Methods](https://docs.python.org/3/library/xml.dom.html#accessor-methods)


#### Previous topic
[`xml.etree.ElementTree` — The ElementTree XML API](https://docs.python.org/3/library/xml.etree.elementtree.html "previous chapter")
#### Next topic
[`xml.dom.minidom` — Minimal DOM implementation](https://docs.python.org/3/library/xml.dom.minidom.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/xml.dom.rst)


«
### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/xml.dom.minidom.html "xml.dom.minidom — Minimal DOM implementation") |
  * [previous](https://docs.python.org/3/library/xml.etree.elementtree.html "xml.etree.ElementTree — The ElementTree XML API") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Structured Markup Processing Tools](https://docs.python.org/3/library/markup.html) »
  * [`xml.dom` — The Document Object Model API](https://docs.python.org/3/library/xml.dom.html)
  * | 
  * Theme  Auto Light Dark |