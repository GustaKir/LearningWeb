Title: Path Management in Python's pathlib
URL: https://docs.python.org/3/library/pathlib.html
Summary: This section describes the behavior of the `Path.replace()` method, which renames a file or directory to a specified target path, returning a new `Path` instance. The target path can be absolute or relative, with relative paths based on the current working directory. It also notes a change in version 3.8 that added a return value.
---

```

The target path may be absolute or relative. Relative paths are interpreted relative to the current working directory, _not_ the directory of the `Path` object.
It is implemented in terms of [`os.rename()`](https://docs.python.org/3/library/os.html#os.rename "os.rename") and gives the same guarantees.
Changed in version 3.8: Added return value, return the new `Path` instance. 

Path.replace(_target_)[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.replace "Link to this definition")
    
Rename this file or directory to the given _target_ , and return a new `Path` instance pointing to _target_. If _target_ points to an existing file or empty directory, it will be unconditionally replaced.
The target path may be absolute or relative. Relative paths are interpreted relative to the current working directory, _not_ the directory of the `Path` object.
Changed in version 3.8: Added return value, return the new `Path` instance. 

Path.unlink(_missing_ok =False_)[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.unlink "Link to this definition")
    
Remove this file or symbolic link. If the path points to a directory, use [`Path.rmdir()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.rmdir "pathlib.Path.rmdir") instead.
If _missing_ok_ is false (the default), [`FileNotFoundError`](https://docs.python.org/3/library/exceptions.html#FileNotFoundError "FileNotFoundError") is raised if the path does not exist.
If _missing_ok_ is true, [`FileNotFoundError`](https://docs.python.org/3/library/exceptions.html#FileNotFoundError "FileNotFoundError") exceptions will be ignored (same behavior as the POSIX `rm -f` command).
Changed in version 3.8: The _missing_ok_ parameter was added. 

Path.rmdir()[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.rmdir "Link to this definition")
    
Remove this directory. The directory must be empty.
### Permissions and ownership[¶](https://docs.python.org/3/library/pathlib.html#permissions-and-ownership "Link to this heading") 

Path.owner(_*_ , _follow_symlinks =True_)[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.owner "Link to this definition")
    
Return the name of the user owning the file. [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError") is raised if the file’s user identifier (UID) isn’t found in the system database.
This method normally follows symlinks; to get the owner of the symlink, add the argument `follow_symlinks=False`.
Changed in version 3.13: Raises [`UnsupportedOperation`](https://docs.python.org/3/library/pathlib.html#pathlib.UnsupportedOperation "pathlib.UnsupportedOperation") if the [`pwd`](https://docs.python.org/3/library/pwd.html#module-pwd "pwd: The password database \(getpwnam\(\) and friends\). \(Unix\)") module is not available. In earlier versions, [`NotImplementedError`](https://docs.python.org/3/library/exceptions.html#NotImplementedError "NotImplementedError") was raised.
Changed in version 3.13: The _follow_symlinks_ parameter was added. 

Path.group(_*_ , _follow_symlinks =True_)[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.group "Link to this definition")
    
Return the name of the group owning the file. [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError") is raised if the file’s group identifier (GID) isn’t found in the system database.
This method normally follows symlinks; to get the group of the symlink, add the argument `follow_symlinks=False`.
Changed in version 3.13: Raises [`UnsupportedOperation`](https://docs.python.org/3/library/pathlib.html#pathlib.UnsupportedOperation "pathlib.UnsupportedOperation") if the [`grp`](https://docs.python.org/3/library/grp.html#module-grp "grp: The group database \(getgrnam\(\) and friends\). \(Unix\)") module is not available. In earlier versions, [`NotImplementedError`](https://docs.python.org/3/library/exceptions.html#NotImplementedError "NotImplementedError") was raised.
Changed in version 3.13: The _follow_symlinks_ parameter was added. 

Path.chmod(_mode_ , _*_ , _follow_symlinks =True_)[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.chmod "Link to this definition")
    
Change the file mode and permissions, like [`os.chmod()`](https://docs.python.org/3/library/os.html#os.chmod "os.chmod").
This method normally follows symlinks. Some Unix flavours support changing permissions on the symlink itself; on these platforms you may add the argument `follow_symlinks=False`, or use [`lchmod()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.lchmod "pathlib.Path.lchmod").
>>>```
>>> p = Path('setup.py')
>>> p.stat().st_mode
33277
>>> p.chmod(0o444)
>>> p.stat().st_mode
33060