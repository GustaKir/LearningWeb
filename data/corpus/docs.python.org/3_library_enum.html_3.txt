Title: Enum Module: Adding Aliases and Base Class
URL: https://docs.python.org/3/library/enum.html
Summary: This section explains the methods `_add_alias_()` and `_add_value_alias_()` in Python's Enum module, which allow adding name and value aliases to existing members, respectively. It also notes that a `NameError` or `ValueError` may be raised if the alias already exists with a different member. Additionally, it introduces the base class `enum.Enum`, which is fundamental for creating enumerations.
---

```


_add_alias_()[¶](https://docs.python.org/3/library/enum.html#enum.EnumType._add_alias_ "Link to this definition")
    
Adds a new name as an alias to an existing member. Raises a [`NameError`](https://docs.python.org/3/library/exceptions.html#NameError "NameError") if the name is already assigned to a different member. 

_add_value_alias_()[¶](https://docs.python.org/3/library/enum.html#enum.EnumType._add_value_alias_ "Link to this definition")
    
Adds a new value as an alias to an existing member. Raises a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if the value is already linked with a different member.
Added in version 3.11: Before 3.11 `EnumType` was called `EnumMeta`, which is still available as an alias. 

_class_ enum.Enum[¶](https://docs.python.org/3/library/enum.html#enum.Enum "Link to this definition")
    
_Enum_ is the base class for all _enum_ enumerations. 

name[¶](https://docs.python.org/3/library/enum.html#enum.Enum.name "Link to this definition")
    
The name used to define the `Enum` member:
>>>```
>>> Color.BLUE.name
'BLUE'

```


value[¶](https://docs.python.org/3/library/enum.html#enum.Enum.value "Link to this definition")
    
The value given to the `Enum` member:
>>>```
>>> Color.RED.value
1

```

Value of the member, can be set in [`__new__()`](https://docs.python.org/3/library/enum.html#enum.Enum.__new__ "enum.Enum.__new__").
Note
Enum member values
Member values can be anything: [`int`](https://docs.python.org/3/library/functions.html#int "int"), [`str`](https://docs.python.org/3/library/stdtypes.html#str "str"), etc. If the exact value is unimportant you may use [`auto`](https://docs.python.org/3/library/enum.html#enum.auto "enum.auto") instances and an appropriate value will be chosen for you. See [`auto`](https://docs.python.org/3/library/enum.html#enum.auto "enum.auto") for the details.
While mutable/unhashable values, such as [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict"), [`list`](https://docs.python.org/3/library/stdtypes.html#list "list") or a mutable [`dataclass`](https://docs.python.org/3/library/dataclasses.html#dataclasses.dataclass "dataclasses.dataclass"), can be used, they will have a quadratic performance impact during creation relative to the total number of mutable/unhashable values in the enum. 

_name_[¶](https://docs.python.org/3/library/enum.html#enum.Enum._name_ "Link to this definition")
    
Name of the member. 

_value_[¶](https://docs.python.org/3/library/enum.html#enum.Enum._value_ "Link to this definition")
    
Value of the member, can be set in [`__new__()`](https://docs.python.org/3/library/enum.html#enum.Enum.__new__ "enum.Enum.__new__"). 

_order_[¶](https://docs.python.org/3/library/enum.html#enum.Enum._order_ "Link to this definition")
    
No longer used, kept for backward compatibility. (class attribute, removed during class creation). 

_ignore_[¶](https://docs.python.org/3/library/enum.html#enum.Enum._ignore_ "Link to this definition")
    
`_ignore_` is only used during creation and is removed from the enumeration once creation is complete.
`_ignore_` is a list of names that will not become members, and whose names will also be removed from the completed enumeration. See [TimePeriod](https://docs.python.org/3/howto/enum.html#enum-time-period) for an example. 

__dir__(_self_)[¶](https://docs.python.org/3/library/enum.html#enum.Enum.__dir__ "Link to this definition")
    
Returns `['__class__', '__doc__', '__module__', 'name', 'value']` and any public methods defined on _self.__class___ :
>>>```
>>> fromdatetimeimport date
>>> classWeekday(Enum):
...   MONDAY = 1
...   TUESDAY = 2
...   WEDNESDAY = 3
...   THURSDAY = 4
...   FRIDAY = 5
...   SATURDAY = 6
...   SUNDAY = 7
...   @classmethod
...   deftoday(cls):
...     print('today is %s' % cls(date.today().isoweekday()).name)
...
>>> dir(Weekday.SATURDAY)
['__class__', '__doc__', '__eq__', '__hash__', '__module__', 'name', 'today', 'value']

```


_generate_next_value_(_name_ , _start_ , _count_ , _last_values_)[¶](https://docs.python.org/3/library/enum.html#enum.Enum._generate_next_value_ "Link to this definition")
    
> 

name:
    
> The name of the member being defined (e.g. ‘RED’). 

start:
    
> The start value for the Enum; the default is 1. 

count:
    
> The number of members currently defined, not including this one. 

last_values:
    
> A list of the previous values.
A _staticmethod_ that is used to determine the next value returned by [`auto`](https://docs.python.org/3/library/enum.html#enum.auto "enum.auto"):
>>>```
>>> fromenumimport auto
>>> classPowersOfThree(Enum):
...   @staticmethod
...   def_generate_next_value_(name, start, count, last_values):
...     return 3 ** (count + 1)
...   FIRST = auto()
...   SECOND = auto()
...
>>> PowersOfThree.SECOND.value
9