Title: urllib.request.urlopen() Method
URL: https://docs.python.org/3/library/urllib.request.html
Summary: The `urlopen` function in the `urllib.request` module is used to open a specified URL, which can be a string or a `Request` object. It can also handle optional data to send to the server and a timeout for blocking operations. The default behavior includes using HTTP/1.1 with a `Connection:close` header.
---

urllib.request.urlopen(_url_ , _data=None_ , [_timeout_ , ]_*_ , _context=None_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen "Link to this definition")
    
Open _url_ , which can be either a string containing a valid, properly encoded URL, or a [`Request`](https://docs.python.org/3/library/urllib.request.html#urllib.request.Request "urllib.request.Request") object.
_data_ must be an object specifying additional data to be sent to the server, or `None` if no such data is needed. See [`Request`](https://docs.python.org/3/library/urllib.request.html#urllib.request.Request "urllib.request.Request") for details.
urllib.request module uses HTTP/1.1 and includes `Connection:close` header in its HTTP requests.
The optional _timeout_ parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used). This actually only works for HTTP, HTTPS and FTP connections.
If _context_ is specified, it must be a [`ssl.SSLContext`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext "ssl.SSLContext") instance describing the various SSL options. See [`HTTPSConnection`](https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection "http.client.HTTPSConnection") for more details.
This function always returns an object which can work as a [context manager](https://docs.python.org/3/glossary.html#term-context-manager) and has the properties _url_ , _headers_ , and _status_. See [`urllib.response.addinfourl`](https://docs.python.org/3/library/urllib.request.html#urllib.response.addinfourl "urllib.response.addinfourl") for more detail on these properties.
For HTTP and HTTPS URLs, this function returns a [`http.client.HTTPResponse`](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse "http.client.HTTPResponse") object slightly modified. In addition to the three new methods above, the msg attribute contains the same information as the [`reason`](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.reason "http.client.HTTPResponse.reason") attribute — the reason phrase returned by server — instead of the response headers as it is specified in the documentation for [`HTTPResponse`](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse "http.client.HTTPResponse").
For FTP, file, and data URLs and requests explicitly handled by legacy [`URLopener`](https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener "urllib.request.URLopener") and [`FancyURLopener`](https://docs.python.org/3/library/urllib.request.html#urllib.request.FancyURLopener "urllib.request.FancyURLopener") classes, this function returns a [`urllib.response.addinfourl`](https://docs.python.org/3/library/urllib.request.html#urllib.response.addinfourl "urllib.response.addinfourl") object.
Raises [`URLError`](https://docs.python.org/3/library/urllib.error.html#urllib.error.URLError "urllib.error.URLError") on protocol errors.
Note that `None` may be returned if no handler handles the request (though the default installed global [`OpenerDirector`](https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector "urllib.request.OpenerDirector") uses [`UnknownHandler`](https://docs.python.org/3/library/urllib.request.html#urllib.request.UnknownHandler "urllib.request.UnknownHandler") to ensure this never happens).
In addition, if proxy settings are detected (for example, when a `*_proxy` environment variable like `http_proxy` is set), [`ProxyHandler`](https://docs.python.org/3/library/urllib.request.html#urllib.request.ProxyHandler "urllib.request.ProxyHandler") is default installed and makes sure the requests are handled through the proxy.
The legacy `urllib.urlopen` function from Python 2.6 and earlier has been discontinued; [`urllib.request.urlopen()`](https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen "urllib.request.urlopen") corresponds to the old `urllib2.urlopen`. Proxy handling, which was done by passing a dictionary parameter to `urllib.urlopen`, can be obtained by using [`ProxyHandler`](https://docs.python.org/3/library/urllib.request.html#urllib.request.ProxyHandler "urllib.request.ProxyHandler") objects.
The default opener raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `urllib.Request` with arguments `fullurl`, `data`, `headers`, `method` taken from the request object.
Changed in version 3.2: _cafile_ and _capath_ were added.
HTTPS virtual hosts are now supported if possible (that is, if [`ssl.HAS_SNI`](https://docs.python.org/3/library/ssl.html#ssl.HAS_SNI "ssl.HAS_SNI") is true).
_data_ can be an iterable object.
Changed in version 3.3: _cadefault_ was added.
Changed in version 3.4.3: _context_ was added.
Changed in version 3.10: HTTPS connection now send an ALPN extension with protocol indicator `http/1.1` when no _context_ is given. Custom _context_