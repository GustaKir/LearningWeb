Title: Cmd.postloop Method and Instance Variables
URL: https://docs.python.org/3/library/cmd.html
Summary: The Cmd.postloop() method is a hook executed before cmdloop() returns, designed for subclass overrides. Key instance variables include Cmd.prompt, which is the input soliciting prompt; Cmd.identchars, defining accepted command prefix characters; and Cmd.lastcmd, storing the last nonempty command prefix.
---

Cmd.postloop()[¶](https://docs.python.org/3/library/cmd.html#cmd.Cmd.postloop "Link to this definition")
    
Hook method executed once when [`cmdloop()`](https://docs.python.org/3/library/cmd.html#cmd.Cmd.cmdloop "cmd.Cmd.cmdloop") is about to return. This method is a stub in [`Cmd`](https://docs.python.org/3/library/cmd.html#cmd.Cmd "cmd.Cmd"); it exists to be overridden by subclasses.
Instances of [`Cmd`](https://docs.python.org/3/library/cmd.html#cmd.Cmd "cmd.Cmd") subclasses have some public instance variables: 

Cmd.prompt[¶](https://docs.python.org/3/library/cmd.html#cmd.Cmd.prompt "Link to this definition")
    
The prompt issued to solicit input. 

Cmd.identchars[¶](https://docs.python.org/3/library/cmd.html#cmd.Cmd.identchars "Link to this definition")
    
The string of characters accepted for the command prefix. 

Cmd.lastcmd[¶](https://docs.python.org/3/library/cmd.html#cmd.Cmd.lastcmd "Link to this definition")
    
The last nonempty command prefix seen. 

Cmd.cmdqueue[¶](https://docs.python.org/3/library/cmd.html#cmd.Cmd.cmdqueue "Link to this definition")
    
A list of queued input lines. The cmdqueue list is checked in [`cmdloop()`](https://docs.python.org/3/library/cmd.html#cmd.Cmd.cmdloop "cmd.Cmd.cmdloop") when new input is needed; if it is nonempty, its elements will be processed in order, as if entered at the prompt. 

Cmd.intro[¶](https://docs.python.org/3/library/cmd.html#cmd.Cmd.intro "Link to this definition")
    
A string to issue as an intro or banner. May be overridden by giving the [`cmdloop()`](https://docs.python.org/3/library/cmd.html#cmd.Cmd.cmdloop "cmd.Cmd.cmdloop") method an argument. 

Cmd.doc_header[¶](https://docs.python.org/3/library/cmd.html#cmd.Cmd.doc_header "Link to this definition")
    
The header to issue if the help output has a section for documented commands. 

Cmd.misc_header[¶](https://docs.python.org/3/library/cmd.html#cmd.Cmd.misc_header "Link to this definition")
    
The header to issue if the help output has a section for miscellaneous help topics (that is, there are `help_*()` methods without corresponding `do_*()` methods). 

Cmd.undoc_header[¶](https://docs.python.org/3/library/cmd.html#cmd.Cmd.undoc_header "Link to this definition")
    
The header to issue if the help output has a section for undocumented commands (that is, there are `do_*()` methods without corresponding `help_*()` methods). 

Cmd.ruler[¶](https://docs.python.org/3/library/cmd.html#cmd.Cmd.ruler "Link to this definition")
    
The character used to draw separator lines under the help-message headers. If empty, no ruler line is drawn. It defaults to `'='`. 

Cmd.use_rawinput[¶](https://docs.python.org/3/library/cmd.html#cmd.Cmd.use_rawinput "Link to this definition")
    
A flag, defaulting to true. If true, [`cmdloop()`](https://docs.python.org/3/library/cmd.html#cmd.Cmd.cmdloop "cmd.Cmd.cmdloop") uses [`input()`](https://docs.python.org/3/library/functions.html#input "input") to display a prompt and read the next command; if false, [`sys.stdout.write()`](https://docs.python.org/3/library/sys.html#sys.stdout "sys.stdout") and [`sys.stdin.readline()`](https://docs.python.org/3/library/sys.html#sys.stdin "sys.stdin") are used. (This means that by importing [`readline`](https://docs.python.org/3/library/readline.html#module-readline "readline: GNU readline support for Python. \(Unix\)"), on systems that support it, the interpreter will automatically support **Emacs** -like line editing and command-history keystrokes.)
## Cmd Example[¶](https://docs.python.org/3/library/cmd.html#cmd-example "Link to this heading")
The [`cmd`](https://docs.python.org/3/library/cmd.html#module-cmd "cmd: Build line-oriented command interpreters.") module is mainly useful for building custom shells that let a user work with a program interactively.
This section presents a simple example of how to build a shell around a few of the commands in the [`turtle`](https://docs.python.org/3/library/turtle.html#module-turtle "turtle: An educational framework for simple graphics applications") module.
Basic turtle commands such as [`forward()`](https://docs.python.org/3/library/turtle.html#turtle.forward "turtle.forward") are added to a [`Cmd`](https://docs.python.org/3/library/cmd.html#cmd.Cmd "cmd.Cmd") subclass with method named `do_forward()`. The argument is converted to a number and dispatched to the turtle module. The docstring is used in the help utility provided by the shell.
The example also includes a basic record and playback facility implemented with the [`precmd()`](https://docs.python.org/3/library/cmd.html#cmd.Cmd.precmd "cmd.Cmd.precmd") method which is responsible for converting the input to lowercase and writing the commands to a file. The `do_playback()` method reads the file and adds the recorded commands to the [`cmdqueue`](https://docs.python.org/3/library/cmd.html#cmd.Cmd.cmdqueue "cmd.Cmd.cmdqueue") for immediate playback: