Title: Python C API: Object Functions
URL: https://docs.python.org/3/c-api/object.html
Summary: This section describes functions from the Python C API, specifically `PyObject_Not` which determines if an object is true or false, and `PyObject_Type` which returns the type of an object. Both functions are part of the Stable ABI.
---

intPyObject_Not([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_Not "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Returns `0` if the object _o_ is considered to be true, and `1` otherwise. This is equivalent to the Python expression `not o`. On failure, return `-1`. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyObject_Type([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_Type "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
When _o_ is non-`NULL`, returns a type object corresponding to the object type of object _o_. On failure, raises [`SystemError`](https://docs.python.org/3/library/exceptions.html#SystemError "SystemError") and returns `NULL`. This is equivalent to the Python expression `type(o)`. This function creates a new [strong reference](https://docs.python.org/3/glossary.html#term-strong-reference) to the return value. There’s really no reason to use this function instead of the [`Py_TYPE()`](https://docs.python.org/3/c-api/structures.html#c.Py_TYPE "Py_TYPE") function, which returns a pointer of type [PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject")*, except when a new [strong reference](https://docs.python.org/3/glossary.html#term-strong-reference) is needed. 

intPyObject_TypeCheck([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o, [PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject")*type)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_TypeCheck "Link to this definition")
    
Return non-zero if the object _o_ is of type _type_ or a subtype of _type_ , and `0` otherwise. Both parameters must be non-`NULL`. 

[Py_ssize_t](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")PyObject_Size([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_Size "Link to this definition")


[Py_ssize_t](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")PyObject_Length([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_Length "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return the length of object _o_. If the object _o_ provides either the sequence and mapping protocols, the sequence length is returned. On error, `-1` is returned. This is the equivalent to the Python expression `len(o)`. 

[Py_ssize_t](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")PyObject_LengthHint([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o, [Py_ssize_t](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")defaultvalue)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_LengthHint "Link to this definition")
    
Return an estimated length for the object _o_. First try to return its actual length, then an estimate using [`__length_hint__()`](https://docs.python.org/3/reference/datamodel.html#object.__length_hint__ "object.__length_hint__"), and finally return the default value. On error return `-1`. This is the equivalent to the Python expression `operator.length_hint(o, defaultvalue)`.
Added in version 3.4. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyObject_GetItem([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*key)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_GetItem "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return element of _o_ corresponding to the object _key_ or `NULL` on failure. This is the equivalent of the Python expression `o[key]`. 

intPyObject_SetItem([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*key, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*v)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_SetItem "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Map the object _key_ to the value _v_. Raise an exception and return `-1` on failure; return `0` on success. This is the equivalent of the Python statement `o[key] = v`. This function _does not_ steal a reference to _v_.