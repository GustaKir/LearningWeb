Title: Python Installation Guide
URL: https://docs.python.org/3/installing/index.html
Summary: This document introduces the Python installation guide, emphasizing the collaborative nature of the Python community and open source software. It highlights the benefits of sharing solutions and provides references for creating and distributing Python projects, while advising users to consider their organization's policies on open source software.
---

Email:
    
distutils-sig@python.org
As a popular open source development project, Python has an active supporting community of contributors and users that also make their software available for other Python developers to use under open source license terms.
This allows Python users to share and collaborate effectively, benefiting from the solutions others have already created to common (and sometimes even rare!) problems, as well as potentially contributing their own solutions to the common pool.
This guide covers the installation part of the process. For a guide to creating and sharing your own Python projects, refer to the [Python packaging user guide](https://packaging.python.org/en/latest/tutorials/packaging-projects/).
Note
For corporate and other institutional users, be aware that many organisations have their own policies around using and contributing to open source software. Please take such policies into account when making use of the distribution and installation tools provided with Python.
## Key terms[¶](https://docs.python.org/3/installing/index.html#key-terms "Link to this heading")
  * `pip` is the preferred installer program. Starting with Python 3.4, it is included by default with the Python binary installers.
  * A _virtual environment_ is a semi-isolated Python environment that allows packages to be installed for use by a particular application, rather than being installed system wide.
  * `venv` is the standard tool for creating virtual environments, and has been part of Python since Python 3.3. Starting with Python 3.4, it defaults to installing `pip` into all created virtual environments.
  * `virtualenv` is a third party alternative (and predecessor) to `venv`. It allows virtual environments to be used on versions of Python prior to 3.4, which either don’t provide `venv` at all, or aren’t able to automatically install `pip` into created environments.
  * The [Python Package Index](https://pypi.org) is a public repository of open source licensed packages made available for use by other Python users.
  * the [Python Packaging Authority](https://www.pypa.io/) is the group of developers and documentation authors responsible for the maintenance and evolution of the standard packaging tools and the associated metadata and file format standards. They maintain a variety of tools, documentation, and issue trackers on [GitHub](https://github.com/pypa).
  * `distutils` is the original build and distribution system first added to the Python standard library in 1998. While direct use of `distutils` is being phased out, it still laid the foundation for the current packaging and distribution infrastructure, and it not only remains part of the standard library, but its name lives on in other ways (such as the name of the mailing list used to coordinate Python packaging standards development).


Changed in version 3.5: The use of `venv` is now recommended for creating virtual environments.
See also
[Python Packaging User Guide: Creating and using virtual environments](https://packaging.python.org/installing/#creating-virtual-environments)
## Basic usage[¶](https://docs.python.org/3/installing/index.html#basic-usage "Link to this heading")
The standard packaging tools are all designed to be used from the command line.
The following command will install the latest version of a module and its dependencies from the Python Package Index:
```
python -m pip install SomePackage

```

Note
For POSIX users (including macOS and Linux users), the examples in this guide assume the use of a [virtual environment](https://docs.python.org/3/glossary.html#term-virtual-environment).
For Windows users, the examples in this guide assume that the option to adjust the system PATH environment variable was selected when installing Python.
It’s also possible to specify an exact or minimum version directly on the command line. When using comparator operators such as `>`, `<` or some other special character which get interpreted by shell, the package name and the version should be enclosed within double quotes:
```
python -m pip install SomePackage==1.0.4  # specific version
python -m pip install "SomePackage>=1.0.4" # minimum version

```

Normally, if a suitable module is already installed, attempting to install it again will have no effect. Upgrading existing modules must be requested explicitly:
```
python -m pip install --upgrade SomePackage