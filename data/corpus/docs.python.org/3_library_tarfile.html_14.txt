Title: TarInfo Object Functions in Tarfile Module
URL: https://docs.python.org/3/library/tarfile.html
Summary: The TarInfo object has methods to create deep or shallow copies. Key query methods include isfile() to check if the object is a regular file and isdir() to determine if it is a directory.
---

```

By default, a deep copy is made. If _deep_ is false, the copy is shallow, i.e. `pax_headers` and any custom attributes are shared with the original `TarInfo` object.
A [`TarInfo`](https://docs.python.org/3/library/tarfile.html#tarfile.TarInfo "tarfile.TarInfo") object also provides some convenient query methods: 

TarInfo.isfile()[¶](https://docs.python.org/3/library/tarfile.html#tarfile.TarInfo.isfile "Link to this definition")
    
Return [`True`](https://docs.python.org/3/library/constants.html#True "True") if the [`TarInfo`](https://docs.python.org/3/library/tarfile.html#tarfile.TarInfo "tarfile.TarInfo") object is a regular file. 

TarInfo.isreg()[¶](https://docs.python.org/3/library/tarfile.html#tarfile.TarInfo.isreg "Link to this definition")
    
Same as [`isfile()`](https://docs.python.org/3/library/tarfile.html#tarfile.TarInfo.isfile "tarfile.TarInfo.isfile"). 

TarInfo.isdir()[¶](https://docs.python.org/3/library/tarfile.html#tarfile.TarInfo.isdir "Link to this definition")
    
Return [`True`](https://docs.python.org/3/library/constants.html#True "True") if it is a directory. 

TarInfo.issym()[¶](https://docs.python.org/3/library/tarfile.html#tarfile.TarInfo.issym "Link to this definition")
    
Return [`True`](https://docs.python.org/3/library/constants.html#True "True") if it is a symbolic link. 

TarInfo.islnk()[¶](https://docs.python.org/3/library/tarfile.html#tarfile.TarInfo.islnk "Link to this definition")
    
Return [`True`](https://docs.python.org/3/library/constants.html#True "True") if it is a hard link. 

TarInfo.ischr()[¶](https://docs.python.org/3/library/tarfile.html#tarfile.TarInfo.ischr "Link to this definition")
    
Return [`True`](https://docs.python.org/3/library/constants.html#True "True") if it is a character device. 

TarInfo.isblk()[¶](https://docs.python.org/3/library/tarfile.html#tarfile.TarInfo.isblk "Link to this definition")
    
Return [`True`](https://docs.python.org/3/library/constants.html#True "True") if it is a block device. 

TarInfo.isfifo()[¶](https://docs.python.org/3/library/tarfile.html#tarfile.TarInfo.isfifo "Link to this definition")
    
Return [`True`](https://docs.python.org/3/library/constants.html#True "True") if it is a FIFO. 

TarInfo.isdev()[¶](https://docs.python.org/3/library/tarfile.html#tarfile.TarInfo.isdev "Link to this definition")
    
Return [`True`](https://docs.python.org/3/library/constants.html#True "True") if it is one of character device, block device or FIFO.
## Extraction filters[¶](https://docs.python.org/3/library/tarfile.html#extraction-filters "Link to this heading")
Added in version 3.12.
The _tar_ format is designed to capture all details of a UNIX-like filesystem, which makes it very powerful. Unfortunately, the features make it easy to create tar files that have unintended – and possibly malicious – effects when extracted. For example, extracting a tar file can overwrite arbitrary files in various ways (e.g. by using absolute paths, `..` path components, or symlinks that affect later members).
In most cases, the full functionality is not needed. Therefore, _tarfile_ supports extraction filters: a mechanism to limit functionality, and thus mitigate some of the security issues.
See also