Title: Control Flow: Loop Statements
URL: https://docs.python.org/3/reference/compound_stmts.html
Summary: This section explains the behavior of loop control in Python, detailing how the `while` loop operates with `else`, along with the usage of `break` and `continue` statements. It introduces the `for` statement for iterating over sequences and other iterable objects.
---

```

This repeatedly tests the expression and, if it is true, executes the first suite; if the expression is false (which may be the first time it is tested) the suite of the `else` clause, if present, is executed and the loop terminates.
A [`break`](https://docs.python.org/3/reference/simple_stmts.html#break) statement executed in the first suite terminates the loop without executing the `else` clause’s suite. A [`continue`](https://docs.python.org/3/reference/simple_stmts.html#continue) statement executed in the first suite skips the rest of the suite and goes back to testing the expression.
## 8.3. The `for` statement[¶](https://docs.python.org/3/reference/compound_stmts.html#the-for-statement "Link to this heading")
The [`for`](https://docs.python.org/3/reference/compound_stmts.html#for) statement is used to iterate over the elements of a sequence (such as a string, tuple or list) or other iterable object:
```
**for_stmt** ::= "for" [target_list](https://docs.python.org/3/reference/simple_stmts.html#grammar-token-python-grammar-target_list) "in" starred_list ":" [suite](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-suite)
       ["else" ":" [suite](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-suite)]

```

The `starred_list` expression is evaluated once; it should yield an [iterable](https://docs.python.org/3/glossary.html#term-iterable) object. An [iterator](https://docs.python.org/3/glossary.html#term-iterator) is created for that iterable. The first item provided by the iterator is then assigned to the target list using the standard rules for assignments (see [Assignment statements](https://docs.python.org/3/reference/simple_stmts.html#assignment)), and the suite is executed. This repeats for each item provided by the iterator. When the iterator is exhausted, the suite in the `else` clause, if present, is executed, and the loop terminates.
A [`break`](https://docs.python.org/3/reference/simple_stmts.html#break) statement executed in the first suite terminates the loop without executing the `else` clause’s suite. A [`continue`](https://docs.python.org/3/reference/simple_stmts.html#continue) statement executed in the first suite skips the rest of the suite and continues with the next item, or with the `else` clause if there is no next item.
The for-loop makes assignments to the variables in the target list. This overwrites all previous assignments to those variables including those made in the suite of the for-loop:
```
for i in range(10):
  print(i)
  i = 5       # this will not affect the for-loop
           # because i will be overwritten with the next
           # index in the range

```

Names in the target list are not deleted when the loop is finished, but if the sequence is empty, they will not have been assigned to at all by the loop. Hint: the built-in type [`range()`](https://docs.python.org/3/library/stdtypes.html#range "range") represents immutable arithmetic sequences of integers. For instance, iterating `range(3)` successively yields 0, 1, and then 2.
Changed in version 3.11: Starred elements are now allowed in the expression list.
## 8.4. The `try` statement[¶](https://docs.python.org/3/reference/compound_stmts.html#the-try-statement "Link to this heading")
The `try` statement specifies exception handlers and/or cleanup code for a group of statements: