Title: Coroutines and Tasks in asyncio
URL: https://docs.python.org/3/library/asyncio-task.html
Summary: This section describes the high-level asyncio APIs for working with coroutines and tasks, covering key concepts such as creating tasks, handling cancellations, managing task groups, running tasks concurrently, and more.
---

# Coroutines and Tasks[¶](https://docs.python.org/3/library/asyncio-task.html#coroutines-and-tasks "Link to this heading")
This section outlines high-level asyncio APIs to work with coroutines and Tasks.
  * [Coroutines](https://docs.python.org/3/library/asyncio-task.html#coroutines)
  * [Awaitables](https://docs.python.org/3/library/asyncio-task.html#awaitables)
  * [Creating Tasks](https://docs.python.org/3/library/asyncio-task.html#creating-tasks)
  * [Task Cancellation](https://docs.python.org/3/library/asyncio-task.html#task-cancellation)
  * [Task Groups](https://docs.python.org/3/library/asyncio-task.html#task-groups)
  * [Sleeping](https://docs.python.org/3/library/asyncio-task.html#sleeping)
  * [Running Tasks Concurrently](https://docs.python.org/3/library/asyncio-task.html#running-tasks-concurrently)
  * [Eager Task Factory](https://docs.python.org/3/library/asyncio-task.html#eager-task-factory)
  * [Shielding From Cancellation](https://docs.python.org/3/library/asyncio-task.html#shielding-from-cancellation)
  * [Timeouts](https://docs.python.org/3/library/asyncio-task.html#timeouts)
  * [Waiting Primitives](https://docs.python.org/3/library/asyncio-task.html#waiting-primitives)
  * [Running in Threads](https://docs.python.org/3/library/asyncio-task.html#running-in-threads)
  * [Scheduling From Other Threads](https://docs.python.org/3/library/asyncio-task.html#scheduling-from-other-threads)
  * [Introspection](https://docs.python.org/3/library/asyncio-task.html#introspection)
  * [Task Object](https://docs.python.org/3/library/asyncio-task.html#task-object)


## [Coroutines](https://docs.python.org/3/library/asyncio-task.html#id2)[¶](https://docs.python.org/3/library/asyncio-task.html#coroutines "Link to this heading")
**Source code:** [Lib/asyncio/coroutines.py](https://github.com/python/cpython/tree/3.13/Lib/asyncio/coroutines.py)
[Coroutines](https://docs.python.org/3/glossary.html#term-coroutine) declared with the async/await syntax is the preferred way of writing asyncio applications. For example, the following snippet of code prints “hello”, waits 1 second, and then prints “world”:
>>>```
>>> importasyncio
>>> async defmain():
...   print('hello')
...   await asyncio.sleep(1)
...   print('world')
>>> asyncio.run(main())
hello
world

```

Note that simply calling a coroutine will not schedule it to be executed:
>>>```
>>> main()
<coroutine object main at 0x1053bb7c8>

```

To actually run a coroutine, asyncio provides the following mechanisms:
  * The [`asyncio.run()`](https://docs.python.org/3/library/asyncio-runner.html#asyncio.run "asyncio.run") function to run the top-level entry point “main()” function (see the above example.)
  * Awaiting on a coroutine. The following snippet of code will print “hello” after waiting for 1 second, and then print “world” after waiting for _another_ 2 seconds:
```
importasyncio
importtime
async defsay_after(delay, what):
  await asyncio.sleep(delay)
  print(what)
async defmain():
  print(f"started at {time.strftime('%X')}")
  await say_after(1, 'hello')
  await say_after(2, 'world')
  print(f"finished at {time.strftime('%X')}")
asyncio.run(main())

```

Expected output:
```
started at 17:13:52
hello
world
finished at 17:13:55

```

  * The [`asyncio.create_task()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.create_task "asyncio.create_task") function to run coroutines concurrently as asyncio [`Tasks`](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task "asyncio.Task").
Let’s modify the above example and run two `say_after` coroutines _concurrently_ :
```
async defmain():
  task1 = asyncio.create_task(
    say_after(1, 'hello'))
  task2 = asyncio.create_task(
    say_after(2, 'world'))
  print(f"started at {time.strftime('%X')}")
  # Wait until both tasks are completed (should take
  # around 2 seconds.)
  await task1
  await task2
  print(f"finished at {time.strftime('%X')}")

```

Note that expected output now shows that the snippet runs 1 second faster than before:
```
started at 17:14:32
hello
world
finished at 17:14:34

```

  * The [`asyncio.TaskGroup`](https://docs.python.org/3/library/asyncio-task.html#asyncio.TaskGroup "asyncio.TaskGroup") class provides a more modern alternative to [`create_task()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.create_task "asyncio.create_task"). Using this API, the last example becomes:
```
async defmain():
  async with asyncio.TaskGroup() as tg:
    task1 = tg.create_task(
      say_after(1, 'hello'))
    task2 = tg.create_task(
      say_after(2, 'world'))
    print(f"started at {time.strftime('%X')}")
  # The await is implicit when the context manager exits.
  print(f"finished at {time.strftime('%X')}")