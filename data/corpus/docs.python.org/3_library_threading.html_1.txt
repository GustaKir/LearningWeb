Title: Threading Module in Python
URL: https://docs.python.org/3/library/threading.html
Summary: The `threading` module provides higher-level threading interfaces built on the lower-level `_thread` module for thread-based parallelism. As of version 3.7, it is always available. Related resources include `concurrent.futures.ThreadPoolExecutor`, which allows task execution in background threads without blocking, and the `queue` module for synchronized queue management.
---

# `threading` — Thread-based parallelism[¶](https://docs.python.org/3/library/threading.html#module-threading "Link to this heading")
**Source code:** [Lib/threading.py](https://github.com/python/cpython/tree/3.13/Lib/threading.py)
This module constructs higher-level threading interfaces on top of the lower level [`_thread`](https://docs.python.org/3/library/_thread.html#module-_thread "_thread: Low-level threading API.") module.
Changed in version 3.7: This module used to be optional, it is now always available.
See also
[`concurrent.futures.ThreadPoolExecutor`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor "concurrent.futures.ThreadPoolExecutor") offers a higher level interface to push tasks to a background thread without blocking execution of the calling thread, while still being able to retrieve their results when needed.
[`queue`](https://docs.python.org/3/library/queue.html#module-queue "queue: A synchronized queue class.") provides a thread-safe interface for exchanging data between running threads.
[`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O.") offers an alternative approach to achieving task level concurrency without requiring the use of multiple operating system threads.
Note
In the Python 2.x series, this module contained `camelCase` names for some methods and functions. These are deprecated as of Python 3.10, but they are still supported for compatibility with Python 2.5 and lower.
**CPython implementation detail:** In CPython, due to the [Global Interpreter Lock](https://docs.python.org/3/glossary.html#term-global-interpreter-lock), only one thread can execute Python code at once (even though certain performance-oriented libraries might overcome this limitation). If you want your application to make better use of the computational resources of multi-core machines, you are advised to use [`multiprocessing`](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing "multiprocessing: Process-based parallelism.") or [`concurrent.futures.ProcessPoolExecutor`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor "concurrent.futures.ProcessPoolExecutor"). However, threading is still an appropriate model if you want to run multiple I/O-bound tasks simultaneously.
[Availability](https://docs.python.org/3/library/intro.html#availability): not WASI.
This module does not work or is not available on WebAssembly. See [WebAssembly platforms](https://docs.python.org/3/library/intro.html#wasm-availability) for more information.
This module defines the following functions: 

threading.active_count()[¶](https://docs.python.org/3/library/threading.html#threading.active_count "Link to this definition")
    
Return the number of [`Thread`](https://docs.python.org/3/library/threading.html#threading.Thread "threading.Thread") objects currently alive. The returned count is equal to the length of the list returned by [`enumerate()`](https://docs.python.org/3/library/threading.html#threading.enumerate "threading.enumerate").
The function `activeCount` is a deprecated alias for this function. 

threading.current_thread()[¶](https://docs.python.org/3/library/threading.html#threading.current_thread "Link to this definition")
    
Return the current [`Thread`](https://docs.python.org/3/library/threading.html#threading.Thread "threading.Thread") object, corresponding to the caller’s thread of control. If the caller’s thread of control was not created through the [`threading`](https://docs.python.org/3/library/threading.html#module-threading "threading: Thread-based parallelism.") module, a dummy thread object with limited functionality is returned.
The function `currentThread` is a deprecated alias for this function. 

threading.excepthook(_args_ , _/_)[¶](https://docs.python.org/3/library/threading.html#threading.excepthook "Link to this definition")
    
Handle uncaught exception raised by [`Thread.run()`](https://docs.python.org/3/library/threading.html#threading.Thread.run "threading.Thread.run").
The _args_ argument has the following attributes:
  * _exc_type_ : Exception type.
  * _exc_value_ : Exception value, can be `None`.
  * _exc_traceback_ : Exception traceback, can be `None`.
  * _thread_ : Thread which raised the exception, can be `None`.