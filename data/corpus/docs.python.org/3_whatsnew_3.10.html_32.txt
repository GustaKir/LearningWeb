Title: Python 3.10 Changes and Deprecations
URL: https://docs.python.org/3/whatsnew/3.10.html
Summary: This section outlines key changes in Python 3.10, including the removal of the undocumented `Py_FrozenMain` function from the limited API and the deprecation of `PyUnicode_InternImmortal()`, which will be removed in Python 3.12. It is recommended to use `PyUnicode_InternInPlace()` as an alternative.
---

t; check if [`Py_TPFLAGS_IMMUTABLETYPE`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_IMMUTABLETYPE "Py_TPFLAGS_IMMUTABLETYPE") is set instead. (Contributed by Victor Stinner and Erlend E. Aasland in [bpo-43908](https://bugs.python.org/issue?@action=redirect&bpo=43908).)
  * The undocumented function `Py_FrozenMain` has been removed from the limited API. The function is mainly useful for custom builds of Python. (Contributed by Petr Viktorin in [bpo-26241](https://bugs.python.org/issue?@action=redirect&bpo=26241).)


### Deprecated[¶](https://docs.python.org/3/whatsnew/3.10.html#id3 "Link to this heading")
  * The `PyUnicode_InternImmortal()` function is now deprecated and will be removed in Python 3.12: use [`PyUnicode_InternInPlace()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_InternInPlace "PyUnicode_InternInPlace") instead. (Contributed by Victor Stinner in [bpo-41692](https://bugs.python.org/issue?@action=redirect&bpo=41692).)


### Removed[¶](https://docs.python.org/3/whatsnew/3.10.html#id4 "Link to this heading")
  * Removed `Py_UNICODE_str*` functions manipulating `Py_UNICODE*` strings. (Contributed by Inada Naoki in [bpo-41123](https://bugs.python.org/issue?@action=redirect&bpo=41123).)
    * `Py_UNICODE_strlen`: use [`PyUnicode_GetLength()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_GetLength "PyUnicode_GetLength") or [`PyUnicode_GET_LENGTH`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_GET_LENGTH "PyUnicode_GET_LENGTH")
    * `Py_UNICODE_strcat`: use [`PyUnicode_CopyCharacters()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_CopyCharacters "PyUnicode_CopyCharacters") or [`PyUnicode_FromFormat()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FromFormat "PyUnicode_FromFormat")
    * `Py_UNICODE_strcpy`, `Py_UNICODE_strncpy`: use [`PyUnicode_CopyCharacters()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_CopyCharacters "PyUnicode_CopyCharacters") or [`PyUnicode_Substring()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_Substring "PyUnicode_Substring")
    * `Py_UNICODE_strcmp`: use [`PyUnicode_Compare()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_Compare "PyUnicode_Compare")
    * `Py_UNICODE_strncmp`: use [`PyUnicode_Tailmatch()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_Tailmatch "PyUnicode_Tailmatch")
    * `Py_UNICODE_strchr`, `Py_UNICODE_strrchr`: use [`PyUnicode_FindChar()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FindChar "PyUnicode_FindChar")
  * Removed `PyUnicode_GetMax()`. Please migrate to new ([**PEP 393**](https://peps.python.org/pep-0393/)) APIs. (Contributed by Inada Naoki in [bpo-41103](https://bugs.python.org/issue?@action=redirect&bpo=41103).)
  * Removed `PyLong_FromUnicode()`. Please migrate to [`PyLong_FromUnicodeObject()`](https://docs.python.org/3/c-api/long.html#c.PyLong_FromUnicodeObject "PyLong_FromUnicodeObject"). (Contributed by Inada Naoki in [bpo-41103](https://bugs.python.org/issue?@action=redirect&bpo=41103).)
  * Removed `PyUnicode_AsUnicodeCopy()`. Please use [`PyUnicode_AsUCS4Copy()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_AsUCS4Copy "PyUnicode_AsUCS4Copy") or [`PyUnicode_AsWideCharString()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_AsWideCharString "PyUnicode_AsWideCharString") (Contributed by Inada Naoki in [bpo-41103](https://bugs.python.org/issue?@action=redirect&bpo=41103).)
  * Removed `_Py_CheckRecursionLimit` variable: it has been replaced by `ceval.recursion_limit` of the [`PyInterpreterState`](https://docs.python.org/3/c-api/init.html#c.PyInterpreterState "PyInterpreterState") structure. (Contributed by Victor Stinner in [bpo-41834](https://bugs.python.org/issue?@action=redirect&bpo=41834).)
  * Removed undocumented macros `Py_ALLOW_RECURSION` and `Py_END_ALLOW_RECURSION` and the `recursion_critical` field of the [`PyInterpreterState`](https://docs.python.org/3/c-api/init.html#c.PyInterpreterState "PyInterpreterState") structure. (Contributed by Serhiy Storchaka in [bpo-41936](https://bugs.python.org/issue?@action=redirect&bpo=41936).)
  * Removed the undocumented `PyOS_InitInterrupts()` function. Initializing Python already implicitly installs signal handlers: see [`PyConfig.install_signal_handlers`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.install_signal_handlers "PyConfig.install_signal_handlers"). (Contributed by Victor Stinner in [bpo-41713](https://bugs.python.org/issue?@action=redirect&bpo=41713).)
  * Remove the `PyAST_Validate()` function. It is no longer possible to build a AST object (`mod_ty` type) with the public C API. The function was already excluded from the limited C API ([**PEP 384**](https://peps.python.org/pep-0384/)). (Contributed by Victor Stinner in [bpo-43244](https://bugs.python.org/issue?@action=redirect&bpo=43244).)
  * Remove the `symtable.h` header file and the undocumented functions:
    * `PyST_GetScope()`
    * `PySymtabl