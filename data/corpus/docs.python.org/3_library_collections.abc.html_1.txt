Title: Abstract Base Classes and Mixins in Python Collections
URL: https://docs.python.org/3/library/collections.abc.html
Summary: This chunk explains how to implement an abstract base class (ABC) named 'D' without inheritance, showcasing the use of abstract methods like __getitem__ and __len__. It also demonstrates the registration of class D as a subclass of Sequence and highlights that methods such as __contains__, __iter__, and __reversed__ do not need to be defined as they can rely on the implemented abstract methods.
---

```
classD:                 # No inheritance
  def__init__(self): ...       # Extra method not required by the ABC
  def__getitem__(self, index): ...  # Abstract method
  def__len__(self): ...       # Abstract method
  defcount(self, value): ...     # Mixin method
  defindex(self, value): ...     # Mixin method
Sequence.register(D)           # Register instead of inherit

```

>>>```
>>> issubclass(D, Sequence)
True
>>> isinstance(D(), Sequence)
True

```

In this example, class `D` does not need to define `__contains__`, `__iter__`, and `__reversed__` because the [in-operator](https://docs.python.org/3/reference/expressions.html#comparisons), the [iteration](https://docs.python.org/3/glossary.html#term-iterable) logic, and the [`reversed()`](https://docs.python.org/3/library/functions.html#reversed "reversed") function automatically fall back to using `__getitem__` and `__len__`.
  3. Some simple interfaces are directly recognizable by the presence of the required methods (unless those methods have been set to [`None`](https://docs.python.org/3/library/constants.html#None "None")):
```
classE:
  def__iter__(self): ...
  def__next__(self): ...

```

>>>```
>>> issubclass(E, Iterable)
True
>>> isinstance(E(), Iterable)
True

```

Complex interfaces do not support this last technique because an interface is more than just the presence of method names. Interfaces specify semantics and relationships between methods that cannot be inferred solely from the presence of specific method names. For example, knowing that a class supplies `__getitem__`, `__len__`, and `__iter__` is insufficient for distinguishing a [`Sequence`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence "collections.abc.Sequence") from a [`Mapping`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping "collections.abc.Mapping").