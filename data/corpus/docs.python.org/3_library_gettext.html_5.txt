Title: gettext Module: pgettext and npgettext Functions
URL: https://docs.python.org/3/library/gettext.html
Summary: This section describes the pgettext and npgettext functions in the gettext module. pgettext retrieves a message string based on a provided context and message id, with fallback options available. npgettext performs a plural-forms lookup using singular and plural forms for the message id. These functions were introduced in version 3.8.
---

```


pgettext(_context_ , _message_)[¶](https://docs.python.org/3/library/gettext.html#gettext.GNUTranslations.pgettext "Link to this definition")
    
Look up the _context_ and _message_ id in the catalog and return the corresponding message string, as a Unicode string. If there is no entry in the catalog for the _message_ id and _context_ , and a fallback has been set, the look up is forwarded to the fallback’s [`pgettext()`](https://docs.python.org/3/library/gettext.html#gettext.pgettext "gettext.pgettext") method. Otherwise, the _message_ id is returned.
Added in version 3.8. 

npgettext(_context_ , _singular_ , _plural_ , _n_)[¶](https://docs.python.org/3/library/gettext.html#gettext.GNUTranslations.npgettext "Link to this definition")
    
Do a plural-forms lookup of a message id. _singular_ is used as the message id for purposes of lookup in the catalog, while _n_ is used to determine which plural form to use.
If the message id for _context_ is not found in the catalog, and a fallback is specified, the request is forwarded to the fallback’s [`npgettext()`](https://docs.python.org/3/library/gettext.html#gettext.npgettext "gettext.npgettext") method. Otherwise, when _n_ is 1 _singular_ is returned, and _plural_ is returned in all other cases.
Added in version 3.8.
### Solaris message catalog support[¶](https://docs.python.org/3/library/gettext.html#solaris-message-catalog-support "Link to this heading")
The Solaris operating system defines its own binary `.mo` file format, but since no documentation can be found on this format, it is not supported at this time.
### The Catalog constructor[¶](https://docs.python.org/3/library/gettext.html#the-catalog-constructor "Link to this heading")
GNOME uses a version of the [`gettext`](https://docs.python.org/3/library/gettext.html#module-gettext "gettext: Multilingual internationalization services.") module by James Henstridge, but this version has a slightly different API. Its documented usage was:
```
importgettext
cat = gettext.Catalog(domain, localedir)
_ = cat.gettext
print(_('hello world'))

```

For compatibility with this older module, the function `Catalog()` is an alias for the [`translation()`](https://docs.python.org/3/library/gettext.html#gettext.translation "gettext.translation") function described above.
One difference between this module and Henstridge’s: his catalog objects supported access through a mapping API, but this appears to be unused and so is not currently supported.
## Internationalizing your programs and modules[¶](https://docs.python.org/3/library/gettext.html#internationalizing-your-programs-and-modules "Link to this heading")
Internationalization (I18N) refers to the operation by which a program is made aware of multiple languages. Localization (L10N) refers to the adaptation of your program, once internationalized, to the local language and cultural habits. In order to provide multilingual messages for your Python programs, you need to take the following steps:
  1. prepare your program or module by specially marking translatable strings
  2. run a suite of tools over your marked files to generate raw messages catalogs
  3. create language-specific translations of the message catalogs
  4. use the [`gettext`](https://docs.python.org/3/library/gettext.html#module-gettext "gettext: Multilingual internationalization services.") module so that message strings are properly translated


In order to prepare your code for I18N, you need to look at all the strings in your files. Any string that needs to be translated should be marked by wrapping it in `_('...')` — that is, a call to the function [`_`](https://docs.python.org/3/library/gettext.html#module-gettext "gettext: Multilingual internationalization services."). For example:
```
filename = 'mylog.txt'
message = _('writing a log message')
with open(filename, 'w') as fp:
  fp.write(message)