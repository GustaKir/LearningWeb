Title: Mappings and Docstrings in Python
URL: https://docs.python.org/3/reference/compound_stmts.html
Summary: This section discusses the `dict` and `types.MappingProxyType` as mapping classes in Python. It explains how a string literal at the beginning of a function or class body is converted into the respective `__doc__` attribute, serving as the function or class's docstring.
---

The standard library classes [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") and [`types.MappingProxyType`](https://docs.python.org/3/library/types.html#types.MappingProxyType "types.MappingProxyType") are mappings.
[[4](https://docs.python.org/3/reference/compound_stmts.html#id15)]
A string literal appearing as the first statement in the function body is transformed into the function’s [`__doc__`](https://docs.python.org/3/reference/datamodel.html#function.__doc__ "function.__doc__") attribute and therefore the function’s [docstring](https://docs.python.org/3/glossary.html#term-docstring).
[[5](https://docs.python.org/3/reference/compound_stmts.html#id16)]
A string literal appearing as the first statement in the class body is transformed into the namespace’s [`__doc__`](https://docs.python.org/3/reference/datamodel.html#type.__doc__ "type.__doc__") item and therefore the class’s [docstring](https://docs.python.org/3/glossary.html#term-docstring).
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [8. Compound statements](https://docs.python.org/3/reference/compound_stmts.html)
    * [8.1. The `if` statement](https://docs.python.org/3/reference/compound_stmts.html#the-if-statement)
    * [8.2. The `while` statement](https://docs.python.org/3/reference/compound_stmts.html#the-while-statement)
    * [8.3. The `for` statement](https://docs.python.org/3/reference/compound_stmts.html#the-for-statement)
    * [8.4. The `try` statement](https://docs.python.org/3/reference/compound_stmts.html#the-try-statement)
      * [8.4.1. `except` clause](https://docs.python.org/3/reference/compound_stmts.html#except-clause)
      * [8.4.2. `except*` clause](https://docs.python.org/3/reference/compound_stmts.html#except-star)
      * [8.4.3. `else` clause](https://docs.python.org/3/reference/compound_stmts.html#else-clause)
      * [8.4.4. `finally` clause](https://docs.python.org/3/reference/compound_stmts.html#finally-clause)
    * [8.5. The `with` statement](https://docs.python.org/3/reference/compound_stmts.html#the-with-statement)
    * [8.6. The `match` statement](https://docs.python.org/3/reference/compound_stmts.html#the-match-statement)
      * [8.6.1. Overview](https://docs.python.org/3/reference/compound_stmts.html#overview)
      * [8.6.2. Guards](https://docs.python.org/3/reference/compound_stmts.html#guards)
      * [8.6.3. Irrefutable Case Blocks](https://docs.python.org/3/reference/compound_stmts.html#irrefutable-case-blocks)
      * [8.6.4. Patterns](https://docs.python.org/3/reference/compound_stmts.html#patterns)
        * [8.6.4.1. OR Patterns](https://docs.python.org/3/reference/compound_stmts.html#or-patterns)
        * [8.6.4.2. AS Patterns](https://docs.python.org/3/reference/compound_stmts.html#as-patterns)
        * [8.6.4.3. Literal Patterns](https://docs.python.org/3/reference/compound_stmts.html#literal-patterns)
        * [8.6.4.4. Capture Patterns](https://docs.python.org/3/reference/compound_stmts.html#capture-patterns)
        * [8.6.4.5. Wildcard Patterns](https://docs.python.org/3/reference/compound_stmts.html#wildcard-patterns)
        * [8.6.4.6. Value Patterns](https://docs.python.org/3/reference/compound_stmts.html#value-patterns)
        * [8.6.4.7. Group Patterns](https://docs.python.org/3/reference/compound_stmts.html#group-patterns)
        * [8.6.4.8. Sequence Patterns](https://docs.python.org/3/reference/compound_stmts.html#sequence-patterns)
        * [8.6.4.9. Mapping Patterns](https://docs.python.org/3/reference/compound_stmts.html#mapping-patterns)
        * [8.6.4.10. Class Patterns](https://docs.python.org/3/reference/compound_stmts.html#class-patterns)
    * [8.7. Function definitions](https://docs.python.org/3/reference/compound_stmts.html#function-definitions)
    * [8.8. Class definitions](https://docs.python.org/3/reference/compound_stmts.html#class-definitions)
    * [8.9. Coroutines](https://docs.python.org/3/reference/compound_stmts.html#coroutines)
      * [8.9.1. Coroutine function definition](https://docs.python.org/3/reference/compound_stmts.html#coroutine-function-definition)
      * [8.9.2. The `async for` statement](https://docs.python.org/3/reference/compound_stmts.html#the-async-for-statement)
      * [8.9.3. The `async with` statement](https://docs.python.org/3/reference/compound_stmts.html#the-async-with-statement)
    * [8.10. Type parameter lists](https://docs.python.org/3/reference/compound_stmts.html#type-parameter-lists)
      * [8.10.1. Generic functions](https://docs.python.org/3/reference/compound_stmts.html#generic-functions)
      * [8.10.2. Generic classes](https://docs.python.org/3/reference/compound_stmts.html#generic-classes)
      * [8.10.3. Generic type aliases](https://docs.python.org/3/reference/compound_stmts.html#generic-type-aliases)