Title: Enhancements to JSON Module in Python 3.5
URL: https://docs.python.org/3/whatsnew/3.5.html
Summary: The JSON module in Python 3.5 introduces a command line interface (`json.tool`) that preserves key order in JSON objects and includes a `--sort-keys` option for sorting. Additionally, the JSON decoder now raises `JSONDecodeError` for improved error context instead of `ValueError`.
---

```

(Contributed by Leon Weber in [bpo-20480](https://bugs.python.org/issue?@action=redirect&bpo=20480).)
### json[¶](https://docs.python.org/3/whatsnew/3.5.html#json "Link to this heading")
The [`json.tool`](https://docs.python.org/3/library/json.html#module-json.tool "json.tool: A command line to validate and pretty-print JSON.") command line interface now preserves the order of keys in JSON objects passed in input. The new `--sort-keys` option can be used to sort the keys alphabetically. (Contributed by Berker Peksag in [bpo-21650](https://bugs.python.org/issue?@action=redirect&bpo=21650).)
JSON decoder now raises [`JSONDecodeError`](https://docs.python.org/3/library/json.html#json.JSONDecodeError "json.JSONDecodeError") instead of [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") to provide better context information about the error. (Contributed by Serhiy Storchaka in [bpo-19361](https://bugs.python.org/issue?@action=redirect&bpo=19361).)
### linecache[¶](https://docs.python.org/3/whatsnew/3.5.html#linecache "Link to this heading")
A new [`lazycache()`](https://docs.python.org/3/library/linecache.html#linecache.lazycache "linecache.lazycache") function can be used to capture information about a non-file-based module to permit getting its lines later via [`getline()`](https://docs.python.org/3/library/linecache.html#linecache.getline "linecache.getline"). This avoids doing I/O until a line is actually needed, without having to carry the module globals around indefinitely. (Contributed by Robert Collins in [bpo-17911](https://bugs.python.org/issue?@action=redirect&bpo=17911).)
### locale[¶](https://docs.python.org/3/whatsnew/3.5.html#locale "Link to this heading")
A new [`delocalize()`](https://docs.python.org/3/library/locale.html#locale.delocalize "locale.delocalize") function can be used to convert a string into a normalized number string, taking the `LC_NUMERIC` settings into account:
>>>```
>>> importlocale
>>> locale.setlocale(locale.LC_NUMERIC, 'de_DE.UTF-8')
'de_DE.UTF-8'
>>> locale.delocalize('1.234,56')
'1234.56'
>>> locale.setlocale(locale.LC_NUMERIC, 'en_US.UTF-8')
'en_US.UTF-8'
>>> locale.delocalize('1,234.56')
'1234.56'

```

(Contributed by Cédric Krier in [bpo-13918](https://bugs.python.org/issue?@action=redirect&bpo=13918).)
### logging[¶](https://docs.python.org/3/whatsnew/3.5.html#logging "Link to this heading")
All logging methods ([`Logger`](https://docs.python.org/3/library/logging.html#logging.Logger "logging.Logger") [`log()`](https://docs.python.org/3/library/logging.html#logging.Logger.log "logging.Logger.log"), [`exception()`](https://docs.python.org/3/library/logging.html#logging.Logger.exception "logging.Logger.exception"), [`critical()`](https://docs.python.org/3/library/logging.html#logging.Logger.critical "logging.Logger.critical"), [`debug()`](https://docs.python.org/3/library/logging.html#logging.Logger.debug "logging.Logger.debug"), etc.), now accept exception instances as an _exc_info_ argument, in addition to boolean values and exception tuples:
>>>```
>>> importlogging
>>> try:
...   1/0
... except ZeroDivisionError as ex:
...   logging.error('exception', exc_info=ex)
ERROR:root:exception