Title: PEP 421 - Adding sys.implementation
URL: https://docs.python.org/3/whatsnew/3.3.html
Summary: This section discusses PEP 421, which introduces `sys.implementation`. It highlights the transition of the `__import__()` function to use `importlib.__import__()`, along with various bug reports and enhancements related to the import machinery in Python.
---

[**PEP 421**](https://peps.python.org/pep-0421/) - Adding sys.implementation
    
PEP written and implemented by Eric Snow.
## Using importlib as the Implementation of Import[¶](https://docs.python.org/3/whatsnew/3.3.html#using-importlib-as-the-implementation-of-import "Link to this heading")
[bpo-2377](https://bugs.python.org/issue?@action=redirect&bpo=2377) - Replace __import__ w/ importlib.__import__ [bpo-13959](https://bugs.python.org/issue?@action=redirect&bpo=13959) - Re-implement parts of `imp` in pure Python [bpo-14605](https://bugs.python.org/issue?@action=redirect&bpo=14605) - Make import machinery explicit [bpo-14646](https://bugs.python.org/issue?@action=redirect&bpo=14646) - Require loaders set __loader__ and __package__
The [`__import__()`](https://docs.python.org/3/library/functions.html#import__ "__import__") function is now powered by [`importlib.__import__()`](https://docs.python.org/3/library/importlib.html#importlib.__import__ "importlib.__import__"). This work leads to the completion of “phase 2” of [**PEP 302**](https://peps.python.org/pep-0302/). There are multiple benefits to this change. First, it has allowed for more of the machinery powering import to be exposed instead of being implicit and hidden within the C code. It also provides a single implementation for all Python VMs supporting Python 3.3 to use, helping to end any VM-specific deviations in import semantics. And finally it eases the maintenance of import, allowing for future growth to occur.
For the common user, there should be no visible change in semantics. For those whose code currently manipulates import or calls import programmatically, the code changes that might possibly be required are covered in the [Porting Python code](https://docs.python.org/3/whatsnew/3.3.html#porting-python-code) section of this document.
### New APIs[¶](https://docs.python.org/3/whatsnew/3.3.html#new-apis "Link to this heading")
One of the large benefits of this work is the exposure of what goes into making the import statement work. That means the various importers that were once implicit are now fully exposed as part of the [`importlib`](https://docs.python.org/3/library/importlib.html#module-importlib "importlib: The implementation of the import machinery.") package.
The abstract base classes defined in [`importlib.abc`](https://docs.python.org/3/library/importlib.html#module-importlib.abc "importlib.abc: Abstract base classes related to import") have been expanded to properly delineate between [meta path finders](https://docs.python.org/3/glossary.html#term-meta-path-finder) and [path entry finders](https://docs.python.org/3/glossary.html#term-path-entry-finder) by introducing [`importlib.abc.MetaPathFinder`](https://docs.python.org/3/library/importlib.html#importlib.abc.MetaPathFinder "importlib.abc.MetaPathFinder") and [`importlib.abc.PathEntryFinder`](https://docs.python.org/3/library/importlib.html#importlib.abc.PathEntryFinder "importlib.abc.PathEntryFinder"), respectively. The old ABC of `importlib.abc.Finder` is now only provided for backwards-compatibility and does not enforce any method requirements.
In terms of finders, [`importlib.machinery.FileFinder`](https://docs.python.org/3/library/importlib.html#importlib.machinery.FileFinder "importlib.machinery.FileFinder") exposes the mechanism used to search for source and bytecode files of a module. Previously this class was an implicit member of [`sys.path_hooks`](https://docs.python.org/3/library/sys.html#sys.path_hooks "sys.path_hooks").
For loaders, the new abstract base class [`importlib.abc.FileLoader`](https://docs.python.org/3/library/importlib.html#importlib.abc.FileLoader "importlib.abc.FileLoader") helps write a loader that uses the file system as the storage mechanism for a module’s code. The loader for source files ([`importlib.machinery.SourceFileLoader`](https://docs.python.org/3/library/importlib.html#importlib.machinery.SourceFileLoader "importlib.machinery.SourceFileLoader")), sourceless bytecode files ([`importlib.machinery.SourcelessFileLoader`](https://docs.python.org/3/library/importlib.html#importlib.machinery.SourcelessFileLoader "importlib.machinery.SourcelessFileLoader")), and extension modules ([`importlib.machinery.ExtensionFileLoader`](https://docs.python.org/3/library/importlib.html#importlib.machinery.ExtensionFileLoader "importlib.machinery.ExtensionFileLoader")) are now available for direct use.
[`ImportError`](https://docs.python.org/3/library/exceptions.html#ImportError "ImportError") now has `name` and `path` attributes which are set when there is relevant data to provide. The message for failed imports will also provide the full name of the module now instead of just the tail end of the module’s name.
The [`importlib.invalidate_caches()`](https://docs.python.org/3/library/importlib.html#importlib.invalidate_caches "importlib.invalidate_caches") function will now call the method with the same name on all finders cached in [`sys.path_importer_ca