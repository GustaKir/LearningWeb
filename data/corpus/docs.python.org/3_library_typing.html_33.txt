Title: Type Annotations and Forward References in Python
URL: https://docs.python.org/3/library/typing.html
Summary: This section discusses the use of forward references in type annotations, where the first annotation must be in quotes to avoid runtime evaluation. It notes that using `from __future__ import annotations` changes how annotations are stored and evaluated. Additionally, it mentions deprecated aliases in the typing module that are now redundant since Python 3.9.
---

```

The first type annotation must be enclosed in quotes, making it a “forward reference”, to hide the `expensive_mod` reference from the interpreter runtime. Type annotations for local variables are not evaluated, so the second annotation does not need to be enclosed in quotes.
Note
If `from __future__ import annotations` is used, annotations are not evaluated at function definition time. Instead, they are stored as strings in `__annotations__`. This makes it unnecessary to use quotes around the annotation (see [**PEP 563**](https://peps.python.org/pep-0563/)).
Added in version 3.5.2.
### Deprecated aliases[¶](https://docs.python.org/3/library/typing.html#deprecated-aliases "Link to this heading")
This module defines several deprecated aliases to pre-existing standard library classes. These were originally included in the typing module in order to support parameterizing these generic classes using `[]`. However, the aliases became redundant in Python 3.9 when the corresponding pre-existing classes were enhanced to support `[]` (see [**PEP 585**](https://peps.python.org/pep-0585/)).
The redundant types are deprecated as of Python 3.9. However, while the aliases may be removed at some point, removal of these aliases is not currently planned. As such, no deprecation warnings are currently issued by the interpreter for these aliases.
If at some point it is decided to remove these deprecated aliases, a deprecation warning will be issued by the interpreter for at least two releases prior to removal. The aliases are guaranteed to remain in the typing module without deprecation warnings until at least Python 3.14.
Type checkers are encouraged to flag uses of the deprecated types if the program they are checking targets a minimum Python version of 3.9 or newer.
#### Aliases to built-in types[¶](https://docs.python.org/3/library/typing.html#aliases-to-built-in-types "Link to this heading") 

_class_ typing.Dict(_dict, MutableMapping[KT, VT]_)[¶](https://docs.python.org/3/library/typing.html#typing.Dict "Link to this definition")
    
Deprecated alias to [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict").
Note that to annotate arguments, it is preferred to use an abstract collection type such as [`Mapping`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping "collections.abc.Mapping") rather than to use [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") or `typing.Dict`.
Deprecated since version 3.9: [`builtins.dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") now supports subscripting (`[]`). See [**PEP 585**](https://peps.python.org/pep-0585/) and [Generic Alias Type](https://docs.python.org/3/library/stdtypes.html#types-genericalias). 

_class_ typing.List(_list, MutableSequence[T]_)[¶](https://docs.python.org/3/library/typing.html#typing.List "Link to this definition")
    
Deprecated alias to [`list`](https://docs.python.org/3/library/stdtypes.html#list "list").
Note that to annotate arguments, it is preferred to use an abstract collection type such as [`Sequence`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence "collections.abc.Sequence") or [`Iterable`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterable "collections.abc.Iterable") rather than to use [`list`](https://docs.python.org/3/library/stdtypes.html#list "list") or `typing.List`.
Deprecated since version 3.9: [`builtins.list`](https://docs.python.org/3/library/stdtypes.html#list "list") now supports subscripting (`[]`). See [**PEP 585**](https://peps.python.org/pep-0585/) and [Generic Alias Type](https://docs.python.org/3/library/stdtypes.html#types-genericalias). 

_class_ typing.Set(_set, MutableSet[T]_)[¶](https://docs.python.org/3/library/typing.html#typing.Set "Link to this definition")
    
Deprecated alias to [`builtins.set`](https://docs.python.org/3/library/stdtypes.html#set "set").
Note that to annotate arguments, it is preferred to use an abstract collection type such as [`collections.abc.Set`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Set "collections.abc.Set") rather than to use [`set`](https://docs.python.org/3/library/stdtypes.html#set "set") or [`typing.Set`](https://docs.python.org/3/library/typing.html#typing.Set "typing.Set").
Deprecated since version 3.9: [`builtins.set`](https://docs.python.org/3/library/stdtypes.html#set "set") now supports subscripting (`[]`). See [**PEP 585**](https://peps.python.org/pep-0585/) and [Generic Alias Type](https://docs.python.org/3/library/stdtypes.html#types-genericalias).