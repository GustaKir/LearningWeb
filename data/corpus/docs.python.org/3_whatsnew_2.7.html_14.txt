Title: Python 2.7 Changes in Long Integer Handling
URL: https://docs.python.org/3/whatsnew/2.7.html
Summary: Notable improvements in Python 2.7 include reduced memory usage for long integers (2 bytes on 32-bit and 6 bytes on 64-bit systems) and significant speed enhancements for long integer division and modulo operations, with performance boosts ranging from 50% to 150%. Additional optimizations for bitwise operations were also implemented.
---

```

(Contributed by Mark Dickinson; [bpo-4258](https://bugs.python.org/issue?@action=redirect&bpo=4258).)
Another set of changes made long objects a few bytes smaller: 2 bytes smaller on 32-bit systems and 6 bytes on 64-bit. (Contributed by Mark Dickinson; [bpo-5260](https://bugs.python.org/issue?@action=redirect&bpo=5260).)
  * The division algorithm for long integers has been made faster by tightening the inner loop, doing shifts instead of multiplications, and fixing an unnecessary extra iteration. Various benchmarks show speedups of between 50% and 150% for long integer divisions and modulo operations. (Contributed by Mark Dickinson; [bpo-5512](https://bugs.python.org/issue?@action=redirect&bpo=5512).) Bitwise operations are also significantly faster (initial patch by Gregory Smith; [bpo-1087418](https://bugs.python.org/issue?@action=redirect&bpo=1087418)).
  * The implementation of `%` checks for the left-side operand being a Python string and special-cases it; this results in a 1â€“3% performance increase for applications that frequently use `%` with strings, such as templating libraries. (Implemented by Collin Winter; [bpo-5176](https://bugs.python.org/issue?@action=redirect&bpo=5176).)
  * List comprehensions with an `if` condition are compiled into faster bytecode. (Patch by Antoine Pitrou, back-ported to 2.7 by Jeffrey Yasskin; [bpo-4715](https://bugs.python.org/issue?@action=redirect&bpo=4715).)
  * Converting an integer or long integer to a decimal string was made faster by special-casing base 10 instead of using a generalized conversion function that supports arbitrary bases. (Patch by Gawain Bolton; [bpo-6713](https://bugs.python.org/issue?@action=redirect&bpo=6713).)
  * The `split()`, `replace()`, `rindex()`, `rpartition()`, and `rsplit()` methods of string-like types (strings, Unicode strings, and [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") objects) now use a fast reverse-search algorithm instead of a character-by-character scan. This is sometimes faster by a factor of 10. (Added by Florent Xicluna; [bpo-7462](https://bugs.python.org/issue?@action=redirect&bpo=7462) and [bpo-7622](https://bugs.python.org/issue?@action=redirect&bpo=7622).)
  * The [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "pickle: Convert Python objects to streams of bytes and back.") and `cPickle` modules now automatically intern the strings used for attribute names, reducing memory usage of the objects resulting from unpickling. (Contributed by Jake McGuire; [bpo-5084](https://bugs.python.org/issue?@action=redirect&bpo=5084).)
  * The `cPickle` module now special-cases dictionaries, nearly halving the time required to pickle them. (Contributed by Collin Winter; [bpo-5670](https://bugs.python.org/issue?@action=redirect&bpo=5670).)