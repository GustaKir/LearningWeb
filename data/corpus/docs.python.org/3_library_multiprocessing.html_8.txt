Title: Multiprocessing Process Methods
URL: https://docs.python.org/3/library/multiprocessing.html
Summary: This section covers key methods of the multiprocessing `Process` class, including `start()` which begins the process's activity by invoking the `run()` method in a separate process, and `join()` which blocks until the process terminates or a specified timeout is reached.
---

```


start()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.start "Link to this definition")
    
Start the process’s activity.
This must be called at most once per process object. It arranges for the object’s [`run()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.run "multiprocessing.Process.run") method to be invoked in a separate process. 

join([_timeout_])[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.join "Link to this definition")
    
If the optional argument _timeout_ is `None` (the default), the method blocks until the process whose [`join()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.join "multiprocessing.Process.join") method is called terminates. If _timeout_ is a positive number, it blocks at most _timeout_ seconds. Note that the method returns `None` if its process terminates or if the method times out. Check the process’s [`exitcode`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.exitcode "multiprocessing.Process.exitcode") to determine if it terminated.
A process can be joined many times.
A process cannot join itself because this would cause a deadlock. It is an error to attempt to join a process before it has been started. 

name[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.name "Link to this definition")
    
The process’s name. The name is a string used for identification purposes only. It has no semantics. Multiple processes may be given the same name.
The initial name is set by the constructor. If no explicit name is provided to the constructor, a name of the form ‘Process-N1:N2:…:Nk’ is constructed, where each Nk is the N-th child of its parent. 

is_alive()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.is_alive "Link to this definition")
    
Return whether the process is alive.
Roughly, a process object is alive from the moment the [`start()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.start "multiprocessing.Process.start") method returns until the child process terminates. 

daemon[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.daemon "Link to this definition")
    
The process’s daemon flag, a Boolean value. This must be set before [`start()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.start "multiprocessing.Process.start") is called.
The initial value is inherited from the creating process.
When a process exits, it attempts to terminate all of its daemonic child processes.
Note that a daemonic process is not allowed to create child processes. Otherwise a daemonic process would leave its children orphaned if it gets terminated when its parent process exits. Additionally, these are **not** Unix daemons or services, they are normal processes that will be terminated (and not joined) if non-daemonic processes have exited.
In addition to the [`threading.Thread`](https://docs.python.org/3/library/threading.html#threading.Thread "threading.Thread") API, [`Process`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process "multiprocessing.Process") objects also support the following attributes and methods: 

pid[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.pid "Link to this definition")
    
Return the process ID. Before the process is spawned, this will be `None`. 

exitcode[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.exitcode "Link to this definition")
    
The child’s exit code. This will be `None` if the process has not yet terminated.
If the child’s [`run()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.run "multiprocessing.Process.run") method returned normally, the exit code will be 0. If it terminated via [`sys.exit()`](https://docs.python.org/3/library/sys.html#sys.exit "sys.exit") with an integer argument _N_ , the exit code will be _N_.
If the child terminated due to an exception not caught within [`run()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.run "multiprocessing.Process.run"), the exit code will be 1. If it was terminated by signal _N_ , the exit code will be the negative value _-N_.