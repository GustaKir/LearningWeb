Title: Reading Resources with importlib.resources
URL: https://docs.python.org/3/library/importlib.resources.html
Summary: The `importlib.resources` module provides two functions, `open_binary` and `open_text`, to open resources for binary and text reading, respectively. The `open_binary` function returns a binary stream for reading, while `open_text` does the same for text resources, with options for encoding and error handling. Notably, starting from version 3.13, `open_binary` can accept multiple path names.
---

```




importlib.resources.open_binary(_anchor_ , _* path_names_)[¶](https://docs.python.org/3/library/importlib.resources.html#importlib.resources.open_binary "Link to this definition")
    
Open the named resource for binary reading.
See [the introduction](https://docs.python.org/3/library/importlib.resources.html#importlib-resources-functional) for details on _anchor_ and _path_names_.
This function returns a [`BinaryIO`](https://docs.python.org/3/library/typing.html#typing.BinaryIO "typing.BinaryIO") object, that is, a binary stream open for reading.
This function is roughly equivalent to:
```
files(anchor).joinpath(*path_names).open('rb')

```

Changed in version 3.13: Multiple _path_names_ are accepted. 

importlib.resources.open_text(_anchor_ , _* path_names_, _encoding ='utf-8'_, _errors ='strict'_)[¶](https://docs.python.org/3/library/importlib.resources.html#importlib.resources.open_text "Link to this definition")
    
Open the named resource for text reading. By default, the contents are read as strict UTF-8.
See [the introduction](https://docs.python.org/3/library/importlib.resources.html#importlib-resources-functional) for details on _anchor_ and _path_names_. _encoding_ and _errors_ have the same meaning as in built-in [`open()`](https://docs.python.org/3/library/functions.html#open "open").
For backward compatibility reasons, the _encoding_ argument must be given explicitly if there are multiple _path_names_. This limitation is scheduled to be removed in Python 3.15.
This function returns a [`TextIO`](https://docs.python.org/3/library/typing.html#typing.TextIO "typing.TextIO") object, that is, a text stream open for reading.
This function is roughly equivalent to:
```
files(anchor).joinpath(*path_names).open('r', encoding=encoding)

```

Changed in version 3.13: Multiple _path_names_ are accepted. _encoding_ and _errors_ must be given as keyword arguments. 

importlib.resources.read_binary(_anchor_ , _* path_names_)[¶](https://docs.python.org/3/library/importlib.resources.html#importlib.resources.read_binary "Link to this definition")
    
Read and return the contents of the named resource as [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes").
See [the introduction](https://docs.python.org/3/library/importlib.resources.html#importlib-resources-functional) for details on _anchor_ and _path_names_.
This function is roughly equivalent to:
```
files(anchor).joinpath(*path_names).read_bytes()

```

Changed in version 3.13: Multiple _path_names_ are accepted. 

importlib.resources.read_text(_anchor_ , _* path_names_, _encoding ='utf-8'_, _errors ='strict'_)[¶](https://docs.python.org/3/library/importlib.resources.html#importlib.resources.read_text "Link to this definition")
    
Read and return the contents of the named resource as [`str`](https://docs.python.org/3/library/stdtypes.html#str "str"). By default, the contents are read as strict UTF-8.
See [the introduction](https://docs.python.org/3/library/importlib.resources.html#importlib-resources-functional) for details on _anchor_ and _path_names_. _encoding_ and _errors_ have the same meaning as in built-in [`open()`](https://docs.python.org/3/library/functions.html#open "open").
For backward compatibility reasons, the _encoding_ argument must be given explicitly if there are multiple _path_names_. This limitation is scheduled to be removed in Python 3.15.
This function is roughly equivalent to:
```
files(anchor).joinpath(*path_names).read_text(encoding=encoding)

```

Changed in version 3.13: Multiple _path_names_ are accepted. _encoding_ and _errors_ must be given as keyword arguments. 

importlib.resources.path(_anchor_ , _* path_names_)[¶](https://docs.python.org/3/library/importlib.resources.html#importlib.resources.path "Link to this definition")
    
Provides the path to the _resource_ as an actual file system path. This function returns a context manager for use in a [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement. The context manager provides a [`pathlib.Path`](https://docs.python.org/3/library/pathlib.html#pathlib.Path "pathlib.Path") object.
Exiting the context manager cleans up any temporary files created, e.g. when the resource needs to be extracted from a zip file.
For example, the [`stat()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.stat "pathlib.Path.stat") method requires an actual file system path; it can be used like this:
```
with importlib.resources.path(anchor, "resource.txt") as fspath:
  result = fspath.stat()

```

See [the introduction](https://docs.python.org/3/library/importlib.resources.html#importlib-resources-functional) for details on _anchor_ and _path_names_.
This function is roughly equivalent to:
```
as_file(files(anchor).joinpath(*path_names))