Title: SSL Certificate Verification Flags
URL: https://docs.python.org/3/library/ssl.html
Summary: This section describes two possible values for `SSLContext.verify_flags`: `ssl.VERIFY_DEFAULT`, which does not check certificate revocation lists (CRLs), and `ssl.VERIFY_CRL_CHECK_LEAF`, which checks only the peer certificate against a valid CRL signed by its issuer. The latter requires proper CRL setup through `SSLContext.load_verify_locations`.
---

ssl.VERIFY_DEFAULT[¶](https://docs.python.org/3/library/ssl.html#ssl.VERIFY_DEFAULT "Link to this definition")
    
Possible value for [`SSLContext.verify_flags`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.verify_flags "ssl.SSLContext.verify_flags"). In this mode, certificate revocation lists (CRLs) are not checked. By default OpenSSL does neither require nor verify CRLs.
Added in version 3.4. 

ssl.VERIFY_CRL_CHECK_LEAF[¶](https://docs.python.org/3/library/ssl.html#ssl.VERIFY_CRL_CHECK_LEAF "Link to this definition")
    
Possible value for [`SSLContext.verify_flags`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.verify_flags "ssl.SSLContext.verify_flags"). In this mode, only the peer cert is checked but none of the intermediate CA certificates. The mode requires a valid CRL that is signed by the peer cert’s issuer (its direct ancestor CA). If no proper CRL has been loaded with [`SSLContext.load_verify_locations`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.load_verify_locations "ssl.SSLContext.load_verify_locations"), validation will fail.
Added in version 3.4. 

ssl.VERIFY_CRL_CHECK_CHAIN[¶](https://docs.python.org/3/library/ssl.html#ssl.VERIFY_CRL_CHECK_CHAIN "Link to this definition")
    
Possible value for [`SSLContext.verify_flags`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.verify_flags "ssl.SSLContext.verify_flags"). In this mode, CRLs of all certificates in the peer cert chain are checked.
Added in version 3.4. 

ssl.VERIFY_X509_STRICT[¶](https://docs.python.org/3/library/ssl.html#ssl.VERIFY_X509_STRICT "Link to this definition")
    
Possible value for [`SSLContext.verify_flags`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.verify_flags "ssl.SSLContext.verify_flags") to disable workarounds for broken X.509 certificates.
Added in version 3.4. 

ssl.VERIFY_ALLOW_PROXY_CERTS[¶](https://docs.python.org/3/library/ssl.html#ssl.VERIFY_ALLOW_PROXY_CERTS "Link to this definition")
    
Possible value for [`SSLContext.verify_flags`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.verify_flags "ssl.SSLContext.verify_flags") to enables proxy certificate verification.
Added in version 3.10. 

ssl.VERIFY_X509_TRUSTED_FIRST[¶](https://docs.python.org/3/library/ssl.html#ssl.VERIFY_X509_TRUSTED_FIRST "Link to this definition")
    
Possible value for [`SSLContext.verify_flags`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.verify_flags "ssl.SSLContext.verify_flags"). It instructs OpenSSL to prefer trusted certificates when building the trust chain to validate a certificate. This flag is enabled by default.
Added in version 3.4.4. 

ssl.VERIFY_X509_PARTIAL_CHAIN[¶](https://docs.python.org/3/library/ssl.html#ssl.VERIFY_X509_PARTIAL_CHAIN "Link to this definition")
    
Possible value for [`SSLContext.verify_flags`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.verify_flags "ssl.SSLContext.verify_flags"). It instructs OpenSSL to accept intermediate CAs in the trust store to be treated as trust-anchors, in the same way as the self-signed root CA certificates. This makes it possible to trust certificates issued by an intermediate CA without having to trust its ancestor root CA.
Added in version 3.10. 

_class_ ssl.VerifyFlags[¶](https://docs.python.org/3/library/ssl.html#ssl.VerifyFlags "Link to this definition")
    
[`enum.IntFlag`](https://docs.python.org/3/library/enum.html#enum.IntFlag "enum.IntFlag") collection of VERIFY_* constants.
Added in version 3.6. 

ssl.PROTOCOL_TLS[¶](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS "Link to this definition")
    
Selects the highest protocol version that both the client and server support. Despite the name, this option can select both “SSL” and “TLS” protocols.
Added in version 3.6.
Deprecated since version 3.10: TLS clients and servers require different default settings for secure communication. The generic TLS protocol constant is deprecated in favor of [`PROTOCOL_TLS_CLIENT`](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS_CLIENT "ssl.PROTOCOL_TLS_CLIENT") and [`PROTOCOL_TLS_SERVER`](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS_SERVER "ssl.PROTOCOL_TLS_SERVER"). 

ssl.PROTOCOL_TLS_CLIENT[¶](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS_CLIENT "Link to this definition")
    
Auto-negotiate the highest protocol version that both the client and server support, and configure the context client-side connections. The protocol enables [`CERT_REQUIRED`](https://docs.python.org/3/library/ssl.html#ssl.CERT_REQUIRED "ssl.CERT_REQUIRED") and [`check_hostname`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.check_hostname "ssl.SSLContext.check_hostname") by default.
Added in version 3.6.