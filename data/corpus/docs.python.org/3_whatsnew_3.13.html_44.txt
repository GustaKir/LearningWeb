Title: Python 3.13 New Features
URL: https://docs.python.org/3/whatsnew/3.13.html
Summary: This document outlines new features in Python 3.13, including the addition of `PyType_GetFullyQualifiedName()` to retrieve the fully qualified type name and `PyType_GetModuleName()` for obtaining the module name of a type. These enhancements aim to improve type information access in the Python C API.
---

(Contributed by Victor Stinner in [gh-108867](https://github.com/python/cpython/issues/108867).)
  * Add the [`PyType_GetFullyQualifiedName()`](https://docs.python.org/3/c-api/type.html#c.PyType_GetFullyQualifiedName "PyType_GetFullyQualifiedName") function to get the type’s fully qualified name. The module name is prepended if [`type.__module__`](https://docs.python.org/3/reference/datamodel.html#type.__module__ "type.__module__") is a string and is not equal to either `'builtins'` or `'__main__'`. (Contributed by Victor Stinner in [gh-111696](https://github.com/python/cpython/issues/111696).)
  * Add the [`PyType_GetModuleName()`](https://docs.python.org/3/c-api/type.html#c.PyType_GetModuleName "PyType_GetModuleName") function to get the type’s module name. This is equivalent to getting the [`type.__module__`](https://docs.python.org/3/reference/datamodel.html#type.__module__ "type.__module__") attribute. (Contributed by Eric Snow and Victor Stinner in [gh-111696](https://github.com/python/cpython/issues/111696).)
  * Add the [`PyUnicode_EqualToUTF8AndSize()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_EqualToUTF8AndSize "PyUnicode_EqualToUTF8AndSize") and [`PyUnicode_EqualToUTF8()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_EqualToUTF8 "PyUnicode_EqualToUTF8") functions to compare a Unicode object with a constchar* UTF-8 encoded string and `1` if they are equal or `0` otherwise. These functions do not raise exceptions. (Contributed by Serhiy Storchaka in [gh-110289](https://github.com/python/cpython/issues/110289).)
  * Add the [`PyWeakref_GetRef()`](https://docs.python.org/3/c-api/weakref.html#c.PyWeakref_GetRef "PyWeakref_GetRef") function as an alternative to [`PyWeakref_GetObject()`](https://docs.python.org/3/c-api/weakref.html#c.PyWeakref_GetObject "PyWeakref_GetObject") that returns a [strong reference](https://docs.python.org/3/glossary.html#term-strong-reference) or `NULL` if the referent is no longer live. (Contributed by Victor Stinner in [gh-105927](https://github.com/python/cpython/issues/105927).)
  * Add fixed variants of functions which silently ignore errors:
    * [`PyObject_HasAttrWithError()`](https://docs.python.org/3/c-api/object.html#c.PyObject_HasAttrWithError "PyObject_HasAttrWithError") replaces [`PyObject_HasAttr()`](https://docs.python.org/3/c-api/object.html#c.PyObject_HasAttr "PyObject_HasAttr").
    * [`PyObject_HasAttrStringWithError()`](https://docs.python.org/3/c-api/object.html#c.PyObject_HasAttrStringWithError "PyObject_HasAttrStringWithError") replaces [`PyObject_HasAttrString()`](https://docs.python.org/3/c-api/object.html#c.PyObject_HasAttrString "PyObject_HasAttrString").
    * [`PyMapping_HasKeyWithError()`](https://docs.python.org/3/c-api/mapping.html#c.PyMapping_HasKeyWithError "PyMapping_HasKeyWithError") replaces [`PyMapping_HasKey()`](https://docs.python.org/3/c-api/mapping.html#c.PyMapping_HasKey "PyMapping_HasKey").
    * [`PyMapping_HasKeyStringWithError()`](https://docs.python.org/3/c-api/mapping.html#c.PyMapping_HasKeyStringWithError "PyMapping_HasKeyStringWithError") replaces [`PyMapping_HasKeyString()`](https://docs.python.org/3/c-api/mapping.html#c.PyMapping_HasKeyString "PyMapping_HasKeyString").
The new functions return `-1` for errors and the standard `1` for true and `0` for false.
(Contributed by Serhiy Storchaka in [gh-108511](https://github.com/python/cpython/issues/108511).)