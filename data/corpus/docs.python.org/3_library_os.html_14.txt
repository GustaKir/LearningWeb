Title: os.get_blocking() and os.grantpt() Functions
URL: https://docs.python.org/3/library/os.html
Summary: The `os.get_blocking()` function retrieves the blocking mode of a file descriptor, returning `False` if the `O_NONBLOCK` flag is set and `True` otherwise. It is available on Unix and Windows, with limitations on WASI and only applicable to pipes on Windows. In version 3.12, support for pipes on Windows was added. The document also briefly mentions the `os.grantpt()` function.
---

os.get_blocking(_fd_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.get_blocking "Link to this definition")
    
Get the blocking mode of the file descriptor: `False` if the [`O_NONBLOCK`](https://docs.python.org/3/library/os.html#os.O_NONBLOCK "os.O_NONBLOCK") flag is set, `True` if the flag is cleared.
See also [`set_blocking()`](https://docs.python.org/3/library/os.html#os.set_blocking "os.set_blocking") and [`socket.socket.setblocking()`](https://docs.python.org/3/library/socket.html#socket.socket.setblocking "socket.socket.setblocking").
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, Windows.
The function is limited on WASI, see [WebAssembly platforms](https://docs.python.org/3/library/intro.html#wasm-availability) for more information.
On Windows, this function is limited to pipes.
Added in version 3.5.
Changed in version 3.12: Added support for pipes on Windows. 

os.grantpt(_fd_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.grantpt "Link to this definition")
    
Grant access to the slave pseudo-terminal device associated with the master pseudo-terminal device to which the file descriptor _fd_ refers. The file descriptor _fd_ is not closed upon failure.
Calls the C standard library function `grantpt()`.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI.
Added in version 3.13. 

os.isatty(_fd_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.isatty "Link to this definition")
    
Return `True` if the file descriptor _fd_ is open and connected to a tty(-like) device, else `False`. 

os.lockf(_fd_ , _cmd_ , _len_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.lockf "Link to this definition")
    
Apply, test or remove a POSIX lock on an open file descriptor. _fd_ is an open file descriptor. _cmd_ specifies the command to use - one of [`F_LOCK`](https://docs.python.org/3/library/os.html#os.F_LOCK "os.F_LOCK"), [`F_TLOCK`](https://docs.python.org/3/library/os.html#os.F_TLOCK "os.F_TLOCK"), [`F_ULOCK`](https://docs.python.org/3/library/os.html#os.F_ULOCK "os.F_ULOCK") or [`F_TEST`](https://docs.python.org/3/library/os.html#os.F_TEST "os.F_TEST"). _len_ specifies the section of the file to lock.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.lockf` with arguments `fd`, `cmd`, `len`.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix.
Added in version 3.3. 

os.F_LOCK[¶](https://docs.python.org/3/library/os.html#os.F_LOCK "Link to this definition")


os.F_TLOCK[¶](https://docs.python.org/3/library/os.html#os.F_TLOCK "Link to this definition")


os.F_ULOCK[¶](https://docs.python.org/3/library/os.html#os.F_ULOCK "Link to this definition")


os.F_TEST[¶](https://docs.python.org/3/library/os.html#os.F_TEST "Link to this definition")
    
Flags that specify what action [`lockf()`](https://docs.python.org/3/library/os.html#os.lockf "os.lockf") will take.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix.
Added in version 3.3. 

os.login_tty(_fd_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.login_tty "Link to this definition")
    
Prepare the tty of which fd is a file descriptor for a new login session. Make the calling process a session leader; make the tty the controlling tty, the stdin, the stdout, and the stderr of the calling process; close fd.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI.
Added in version 3.11. 

os.lseek(_fd_ , _pos_ , _whence_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.lseek "Link to this definition")
    
Set the current position of file descriptor _fd_ to position _pos_ , modified by _whence_ , and return the new position in bytes relative to the start of the file. Valid values for _whence_ are:
  * [`SEEK_SET`](https://docs.python.org/3/library/os.html#os.SEEK_SET "os.SEEK_SET") or `0` – set _pos_ relative to the beginning of the file
  * [`SEEK_CUR`](https://docs.python.org/3/library/os.html#os.SEEK_CUR "os.SEEK_CUR") or `1` – set _pos_ relative to the current file position
  * [`SEEK_END`](https://docs.python.org/3/library/os.html#os.SEEK_END "os.SEEK_END") or `2` – set _pos_ relative to the end of the file
  * [`SEEK_HOLE`](https://docs.python.org/3/library/os.html#os.SEEK_HOLE "os.SEEK_HOLE") – set _pos_ to the next data location, relative to _pos_
  * [`SEEK_DATA`](https://docs.python.org/3/library/os.html#os.SEEK_DATA "os.SEEK_DATA") – set _pos_ to the next data hole, relative to _pos_


Changed in version 3.3: Add support for `SEEK_HOLE` and `SEEK_DATA`. 

os.SEEK_SET[¶](https://docs.python.org/3/library/os.html#os.SEEK_SET "Link to this definition")


os.SEEK_CUR[¶](https://docs.python.org/3/library/os.html#os.SEEK_CUR "Link to this definition")