Title: Email Parser - FeedParser Class
URL: https://docs.python.org/3/library/email.parser.html
Summary: The `FeedParser` class processes string input for email parsing, only accepting ASCII text or valid UTF-8 without binary attachments. It was updated in version 3.3 to include a `_policy` keyword.
---

_class_ email.parser.FeedParser(__factory =None_, _*_ , _policy =policy.compat32_)[¶](https://docs.python.org/3/library/email.parser.html#email.parser.FeedParser "Link to this definition")
    
Works like [`BytesFeedParser`](https://docs.python.org/3/library/email.parser.html#email.parser.BytesFeedParser "email.parser.BytesFeedParser") except that the input to the [`feed()`](https://docs.python.org/3/library/email.parser.html#email.parser.BytesFeedParser.feed "email.parser.BytesFeedParser.feed") method must be a string. This is of limited utility, since the only way for such a message to be valid is for it to contain only ASCII text or, if `utf8` is `True`, no binary attachments.
Changed in version 3.3: Added the _policy_ keyword.
## Parser API[¶](https://docs.python.org/3/library/email.parser.html#parser-api "Link to this heading")
The [`BytesParser`](https://docs.python.org/3/library/email.parser.html#email.parser.BytesParser "email.parser.BytesParser") class, imported from the [`email.parser`](https://docs.python.org/3/library/email.parser.html#module-email.parser "email.parser: Parse flat text email messages to produce a message object structure.") module, provides an API that can be used to parse a message when the complete contents of the message are available in a [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object) or file. The [`email.parser`](https://docs.python.org/3/library/email.parser.html#module-email.parser "email.parser: Parse flat text email messages to produce a message object structure.") module also provides [`Parser`](https://docs.python.org/3/library/email.parser.html#email.parser.Parser "email.parser.Parser") for parsing strings, and header-only parsers, [`BytesHeaderParser`](https://docs.python.org/3/library/email.parser.html#email.parser.BytesHeaderParser "email.parser.BytesHeaderParser") and [`HeaderParser`](https://docs.python.org/3/library/email.parser.html#email.parser.HeaderParser "email.parser.HeaderParser"), which can be used if you’re only interested in the headers of the message. [`BytesHeaderParser`](https://docs.python.org/3/library/email.parser.html#email.parser.BytesHeaderParser "email.parser.BytesHeaderParser") and [`HeaderParser`](https://docs.python.org/3/library/email.parser.html#email.parser.HeaderParser "email.parser.HeaderParser") can be much faster in these situations, since they do not attempt to parse the message body, instead setting the payload to the raw body. 

_class_ email.parser.BytesParser(__class =None_, _*_ , _policy =policy.compat32_)[¶](https://docs.python.org/3/library/email.parser.html#email.parser.BytesParser "Link to this definition")
    
Create a [`BytesParser`](https://docs.python.org/3/library/email.parser.html#email.parser.BytesParser "email.parser.BytesParser") instance. The __class_ and _policy_ arguments have the same meaning and semantics as the __factory_ and _policy_ arguments of [`BytesFeedParser`](https://docs.python.org/3/library/email.parser.html#email.parser.BytesFeedParser "email.parser.BytesFeedParser").
Note: **The policy keyword should always be specified** ; The default will change to [`email.policy.default`](https://docs.python.org/3/library/email.policy.html#email.policy.default "email.policy.default") in a future version of Python.
Changed in version 3.3: Removed the _strict_ argument that was deprecated in 2.4. Added the _policy_ keyword.
Changed in version 3.6: __class_ defaults to the policy `message_factory`. 

parse(_fp_ , _headersonly =False_)[¶](https://docs.python.org/3/library/email.parser.html#email.parser.BytesParser.parse "Link to this definition")
    
Read all the data from the binary file-like object _fp_ , parse the resulting bytes, and return the message object. _fp_ must support both the [`readline()`](https://docs.python.org/3/library/io.html#io.IOBase.readline "io.IOBase.readline") and the `read()` methods.
The bytes contained in _fp_ must be formatted as a block of [**RFC 5322**](https://datatracker.ietf.org/doc/html/rfc5322.html) (or, if `utf8` is `True`, [**RFC 6532**](https://datatracker.ietf.org/doc/html/rfc6532.html)) style headers and header continuation lines, optionally preceded by an envelope header. The header block is terminated either by the end of the data or by a blank line. Following the header block is the body of the message (which may contain MIME-encoded subparts, including subparts with a _Content-Transfer-Encoding_ of `8bit`).
Optional _headersonly_ is a flag specifying whether to stop parsing after reading the headers or not. The default is `False`, meaning it parses the entire contents of the file.