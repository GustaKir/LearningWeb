Title: Function Definitions in Python
URL: https://docs.python.org/3/tutorial/controlflow.html
Summary: This section explains how to define a function in Python using the `def` keyword, followed by the function name and parameters. It highlights the importance of indentation for the function body and mentions that the first statement can be a docstring for documentation purposes, advocating for their inclusion in code for better maintainability.
---

```

The keyword [`def`](https://docs.python.org/3/reference/compound_stmts.html#def) introduces a function _definition_. It must be followed by the function name and the parenthesized list of formal parameters. The statements that form the body of the function start at the next line, and must be indented.
The first statement of the function body can optionally be a string literal; this string literal is the function’s documentation string, or _docstring_. (More about docstrings can be found in the section [Documentation Strings](https://docs.python.org/3/tutorial/controlflow.html#tut-docstrings).) There are tools which use docstrings to automatically produce online or printed documentation, or to let the user interactively browse through code; it’s good practice to include docstrings in code that you write, so make a habit of it.
The _execution_ of a function introduces a new symbol table used for the local variables of the function. More precisely, all variable assignments in a function store the value in the local symbol table; whereas variable references first look in the local symbol table, then in the local symbol tables of enclosing functions, then in the global symbol table, and finally in the table of built-in names. Thus, global variables and variables of enclosing functions cannot be directly assigned a value within a function (unless, for global variables, named in a [`global`](https://docs.python.org/3/reference/simple_stmts.html#global) statement, or, for variables of enclosing functions, named in a [`nonlocal`](https://docs.python.org/3/reference/simple_stmts.html#nonlocal) statement), although they may be referenced.
The actual parameters (arguments) to a function call are introduced in the local symbol table of the called function when it is called; thus, arguments are passed using _call by value_ (where the _value_ is always an object _reference_ , not the value of the object). [[1]](https://docs.python.org/3/tutorial/controlflow.html#id2) When a function calls another function, or calls itself recursively, a new local symbol table is created for that call.
A function definition associates the function name with the function object in the current symbol table. The interpreter recognizes the object pointed to by that name as a user-defined function. Other names can also point to that same function object and can also be used to access the function:
>>>```
>>> fib
<function fib at 10042ed0>
>>> f = fib
>>> f(100)
0 1 1 2 3 5 8 13 21 34 55 89

```

Coming from other languages, you might object that `fib` is not a function but a procedure since it doesn’t return a value. In fact, even functions without a [`return`](https://docs.python.org/3/reference/simple_stmts.html#return) statement do return a value, albeit a rather boring one. This value is called `None` (it’s a built-in name). Writing the value `None` is normally suppressed by the interpreter if it would be the only value written. You can see it if you really want to using [`print()`](https://docs.python.org/3/library/functions.html#print "print"):
>>>```
>>> fib(0)
>>> print(fib(0))
None

```

It is simple to write a function that returns a list of the numbers of the Fibonacci series, instead of printing it:
>>>```
>>> deffib2(n): # return Fibonacci series up to n
... """Return a list containing the Fibonacci series up to n."""
...   result = []
...   a, b = 0, 1
...   while a < n:
...     result.append(a)  # see below
...     a, b = b, a+b
...   return result
...
>>> f100 = fib2(100)  # call it
>>> f100        # write the result
[0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]