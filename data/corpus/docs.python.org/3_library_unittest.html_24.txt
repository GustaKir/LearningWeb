Title: Testing Framework: loadTestsFromModule Method
URL: https://docs.python.org/3/library/unittest.html
Summary: The `loadTestsFromModule` method returns a suite of test cases from the specified module by searching for classes derived from `TestCase`. It creates instances of these classes for each defined test method. While hierarchical `TestCase` classes can aid in sharing fixtures, using base classes solely for defining test methods may lead to complications. Additionally, if a module contains a `load_tests` function, it will be invoked to load tests.
---

loadTestsFromModule(_module_ , _*_ , _pattern =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestLoader.loadTestsFromModule "Link to this definition")
    
Return a suite of all test cases contained in the given module. This method searches _module_ for classes derived from [`TestCase`](https://docs.python.org/3/library/unittest.html#unittest.TestCase "unittest.TestCase") and creates an instance of the class for each test method defined for the class.
Note
While using a hierarchy of [`TestCase`](https://docs.python.org/3/library/unittest.html#unittest.TestCase "unittest.TestCase")-derived classes can be convenient in sharing fixtures and helper functions, defining test methods on base classes that are not intended to be instantiated directly does not play well with this method. Doing so, however, can be useful when the fixtures are different and defined in subclasses.
If a module provides a `load_tests` function it will be called to load the tests. This allows modules to customize test loading. This is the [load_tests protocol](https://docs.python.org/3/library/unittest.html#id1). The _pattern_ argument is passed as the third argument to `load_tests`.
Changed in version 3.2: Support for `load_tests` added.
Changed in version 3.5: Support for a keyword-only argument _pattern_ has been added.
Changed in version 3.12: The undocumented and unofficial _use_load_tests_ parameter has been removed. 

loadTestsFromName(_name_ , _module =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestLoader.loadTestsFromName "Link to this definition")
    
Return a suite of all test cases given a string specifier.
The specifier _name_ is a “dotted name” that may resolve either to a module, a test case class, a test method within a test case class, a [`TestSuite`](https://docs.python.org/3/library/unittest.html#unittest.TestSuite "unittest.TestSuite") instance, or a callable object which returns a [`TestCase`](https://docs.python.org/3/library/unittest.html#unittest.TestCase "unittest.TestCase") or [`TestSuite`](https://docs.python.org/3/library/unittest.html#unittest.TestSuite "unittest.TestSuite") instance. These checks are applied in the order listed here; that is, a method on a possible test case class will be picked up as “a test method within a test case class”, rather than “a callable object”.
For example, if you have a module `SampleTests` containing a [`TestCase`](https://docs.python.org/3/library/unittest.html#unittest.TestCase "unittest.TestCase")-derived class `SampleTestCase` with three test methods (`test_one()`, `test_two()`, and `test_three()`), the specifier `'SampleTests.SampleTestCase'` would cause this method to return a suite which will run all three test methods. Using the specifier `'SampleTests.SampleTestCase.test_two'` would cause it to return a test suite which will run only the `test_two()` test method. The specifier can refer to modules and packages which have not been imported; they will be imported as a side-effect.
The method optionally resolves _name_ relative to the given _module_.
Changed in version 3.5: If an [`ImportError`](https://docs.python.org/3/library/exceptions.html#ImportError "ImportError") or [`AttributeError`](https://docs.python.org/3/library/exceptions.html#AttributeError "AttributeError") occurs while traversing _name_ then a synthetic test that raises that error when run will be returned. These errors are included in the errors accumulated by self.errors. 

loadTestsFromNames(_names_ , _module =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestLoader.loadTestsFromNames "Link to this definition")
    
Similar to [`loadTestsFromName()`](https://docs.python.org/3/library/unittest.html#unittest.TestLoader.loadTestsFromName "unittest.TestLoader.loadTestsFromName"), but takes a sequence of names rather than a single name. The return value is a test suite which supports all the tests defined for each name. 

getTestCaseNames(_testCaseClass_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestLoader.getTestCaseNames "Link to this definition")
    
Return a sorted sequence of method names found within _testCaseClass_ ; this should be a subclass of [`TestCase`](https://docs.python.org/3/library/unittest.html#unittest.TestCase "unittest.TestCase").