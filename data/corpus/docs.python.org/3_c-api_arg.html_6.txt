Title: Python C API - Converter Functions
URL: https://docs.python.org/3/c-api/arg.html
Summary: This section explains how to create converter functions for Python objects in the C API. It details the parameters for the converter, the expected return status, and the behavior during conversion failures, including raising exceptions and memory cleanup. Examples of specific converter functions are also cited.
---

```

where _object_ is the Python object to be converted and _address_ is the void* argument that was passed to the `PyArg_Parse*` function. The returned _status_ should be `1` for a successful conversion and `0` if the conversion has failed. When the conversion fails, the _converter_ function should raise an exception and leave the content of _address_ unmodified.
If the _converter_ returns `Py_CLEANUP_SUPPORTED`, it may get called a second time if the argument parsing eventually fails, giving the converter a chance to release any memory that it had already allocated. In this second call, the _object_ parameter will be `NULL`; _address_ will have the same value as in the original call.
Examples of converters: [`PyUnicode_FSConverter()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FSConverter "PyUnicode_FSConverter") and [`PyUnicode_FSDecoder()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FSDecoder "PyUnicode_FSDecoder").
Changed in version 3.1: `Py_CLEANUP_SUPPORTED` was added. 

`p` ([`bool`](https://docs.python.org/3/library/functions.html#bool "bool")) [int]
    
Tests the value passed in for truth (a boolean **p** redicate) and converts the result to its equivalent C true/false integer value. Sets the int to `1` if the expression was true and `0` if it was false. This accepts any valid Python value. See [Truth Value Testing](https://docs.python.org/3/library/stdtypes.html#truth) for more information about how Python tests values for truth.
Added in version 3.3. 

`(items)` ([`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple")) [_matching-items_]
    
The object must be a Python sequence whose length is the number of format units in _items_. The C arguments must correspond to the individual format units in _items_. Format units for sequences may be nested.
A few other characters have a meaning in a format string. These may not occur inside nested parentheses. They are: 

`|`
    
Indicates that the remaining arguments in the Python argument list are optional. The C variables corresponding to optional arguments should be initialized to their default value — when an optional argument is not specified, [`PyArg_ParseTuple()`](https://docs.python.org/3/c-api/arg.html#c.PyArg_ParseTuple "PyArg_ParseTuple") does not touch the contents of the corresponding C variable(s). 

`$`
    
[`PyArg_ParseTupleAndKeywords()`](https://docs.python.org/3/c-api/arg.html#c.PyArg_ParseTupleAndKeywords "PyArg_ParseTupleAndKeywords") only: Indicates that the remaining arguments in the Python argument list are keyword-only. Currently, all keyword-only arguments must also be optional arguments, so `|` must always be specified before `$` in the format string.
Added in version 3.3. 

`:`
    
The list of format units ends here; the string after the colon is used as the function name in error messages (the “associated value” of the exception that [`PyArg_ParseTuple()`](https://docs.python.org/3/c-api/arg.html#c.PyArg_ParseTuple "PyArg_ParseTuple") raises). 

`;`
    
The list of format units ends here; the string after the semicolon is used as the error message _instead_ of the default error message. `:` and `;` mutually exclude each other.
Note that any Python object references which are provided to the caller are _borrowed_ references; do not release them (i.e. do not decrement their reference count)!
Additional arguments passed to these functions must be addresses of variables whose type is determined by the format string; these are used to store values from the input tuple. There are a few cases, as described in the list of format units above, where these parameters are used as input values; they should match what is specified for the corresponding format unit in that case.
For the conversion to succeed, the _arg_ object must match the format and the format must be exhausted. On success, the `PyArg_Parse*` functions return true, otherwise they return false and raise an appropriate exception. When the `PyArg_Parse*` functions fail due to conversion failure in one of the format units, the variables at the addresses corresponding to that and the following format units are left untouched.
### API Functions[¶](https://docs.python.org/3/c-api/arg.html#api-functions "Link to this heading") 

intPyArg_ParseTuple([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*args, constchar*format, ...)[¶](https://docs.python.org/3/c-api/arg.html#c.PyArg_ParseTuple "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Parse the parameters of a function that takes only positional parameters into local variables. Returns true on success; on failure, it returns false and raises the appropriate exception.