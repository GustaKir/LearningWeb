Title: Template Strings in Python
URL: https://docs.python.org/3/library/string.html
Summary: Template strings offer a simpler way to perform string substitutions, particularly useful for internationalization (i18n). They support `$`-based substitutions and include escape rules for `$`. The syntax is designed to facilitate translation, making it easier than other string formatting methods in Python.
---

```

## Template strings[¶](https://docs.python.org/3/library/string.html#template-strings "Link to this heading")
Template strings provide simpler string substitutions as described in [**PEP 292**](https://peps.python.org/pep-0292/). A primary use case for template strings is for internationalization (i18n) since in that context, the simpler syntax and functionality makes it easier to translate than other built-in string formatting facilities in Python. As an example of a library built on template strings for i18n, see the [flufl.i18n](https://flufli18n.readthedocs.io/en/latest/) package.
Template strings support `$`-based substitutions, using the following rules:
  * `$$` is an escape; it is replaced with a single `$`.
  * `$identifier` names a substitution placeholder matching a mapping key of `"identifier"`. By default, `"identifier"` is restricted to any case-insensitive ASCII alphanumeric string (including underscores) that starts with an underscore or ASCII letter. The first non-identifier character after the `$` character terminates this placeholder specification.
  * `${identifier}` is equivalent to `$identifier`. It is required when valid identifier characters follow the placeholder but are not part of the placeholder, such as `"${noun}ification"`.


Any other appearance of `$` in the string will result in a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") being raised.
The [`string`](https://docs.python.org/3/library/string.html#module-string "string: Common string operations.") module provides a [`Template`](https://docs.python.org/3/library/string.html#string.Template "string.Template") class that implements these rules. The methods of [`Template`](https://docs.python.org/3/library/string.html#string.Template "string.Template") are: 

_class_ string.Template(_template_)[¶](https://docs.python.org/3/library/string.html#string.Template "Link to this definition")
    
The constructor takes a single argument which is the template string. 

substitute(_mapping ={}_, _/_ , _** kwds_)[¶](https://docs.python.org/3/library/string.html#string.Template.substitute "Link to this definition")
    
Performs the template substitution, returning a new string. _mapping_ is any dictionary-like object with keys that match the placeholders in the template. Alternatively, you can provide keyword arguments, where the keywords are the placeholders. When both _mapping_ and _kwds_ are given and there are duplicates, the placeholders from _kwds_ take precedence. 

safe_substitute(_mapping ={}_, _/_ , _** kwds_)[¶](https://docs.python.org/3/library/string.html#string.Template.safe_substitute "Link to this definition")
    
Like [`substitute()`](https://docs.python.org/3/library/string.html#string.Template.substitute "string.Template.substitute"), except that if placeholders are missing from _mapping_ and _kwds_ , instead of raising a [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError") exception, the original placeholder will appear in the resulting string intact. Also, unlike with [`substitute()`](https://docs.python.org/3/library/string.html#string.Template.substitute "string.Template.substitute"), any other appearances of the `$` will simply return `$` instead of raising [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError").
While other exceptions may still occur, this method is called “safe” because it always tries to return a usable string instead of raising an exception. In another sense, [`safe_substitute()`](https://docs.python.org/3/library/string.html#string.Template.safe_substitute "string.Template.safe_substitute") may be anything other than safe, since it will silently ignore malformed templates containing dangling delimiters, unmatched braces, or placeholders that are not valid Python identifiers. 

is_valid()[¶](https://docs.python.org/3/library/string.html#string.Template.is_valid "Link to this definition")
    
Returns false if the template has invalid placeholders that will cause [`substitute()`](https://docs.python.org/3/library/string.html#string.Template.substitute "string.Template.substitute") to raise [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError").
Added in version 3.11. 

get_identifiers()[¶](https://docs.python.org/3/library/string.html#string.Template.get_identifiers "Link to this definition")
    
Returns a list of the valid identifiers in the template, in the order they first appear, ignoring any invalid identifiers.
Added in version 3.11.
[`Template`](https://docs.python.org/3/library/string.html#string.Template "string.Template") instances also provide one public data attribute: