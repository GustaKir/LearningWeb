Title: Locale Aware Sorting and Stability
URL: https://docs.python.org/3/howto/sorting.html
Summary: This section covers locale aware sorting using `locale.strxfrm()` and `locale.strcoll()` to accommodate cultural differences in alphabetical order. It also discusses the stability of sorting with the `_reverse` parameter and demonstrates an alternative method using the `reversed()` function.
---

```

## Odds and Ends[¶](https://docs.python.org/3/howto/sorting.html#odds-and-ends "Link to this heading")
  * For locale aware sorting, use [`locale.strxfrm()`](https://docs.python.org/3/library/locale.html#locale.strxfrm "locale.strxfrm") for a key function or [`locale.strcoll()`](https://docs.python.org/3/library/locale.html#locale.strcoll "locale.strcoll") for a comparison function. This is necessary because “alphabetical” sort orderings can vary across cultures even if the underlying alphabet is the same.
  * The _reverse_ parameter still maintains sort stability (so that records with equal keys retain the original order). Interestingly, that effect can be simulated without the parameter by using the builtin [`reversed()`](https://docs.python.org/3/library/functions.html#reversed "reversed") function twice:
>>>```
>>> data = [('red', 1), ('blue', 1), ('red', 2), ('blue', 2)]
>>> standard_way = sorted(data, key=itemgetter(0), reverse=True)
>>> double_reversed = list(reversed(sorted(reversed(data), key=itemgetter(0))))
>>> assert standard_way == double_reversed
>>> standard_way
[('red', 1), ('red', 2), ('blue', 1), ('blue', 2)]

```

  * The sort routines use `<` when making comparisons between two objects. So, it is easy to add a standard sort order to a class by defining an [`__lt__()`](https://docs.python.org/3/reference/datamodel.html#object.__lt__ "object.__lt__") method:
>>>```
>>> Student.__lt__ = lambda self, other: self.age < other.age
>>> sorted(student_objects)
[('dave', 'B', 10), ('jane', 'B', 12), ('john', 'A', 15)]

```

However, note that `<` can fall back to using [`__gt__()`](https://docs.python.org/3/reference/datamodel.html#object.__gt__ "object.__gt__") if [`__lt__()`](https://docs.python.org/3/reference/datamodel.html#object.__lt__ "object.__lt__") is not implemented (see [`object.__lt__()`](https://docs.python.org/3/reference/datamodel.html#object.__lt__ "object.__lt__") for details on the mechanics). To avoid surprises, [**PEP 8**](https://peps.python.org/pep-0008/) recommends that all six comparison methods be implemented. The [`total_ordering()`](https://docs.python.org/3/library/functools.html#functools.total_ordering "functools.total_ordering") decorator is provided to make that task easier.
  * Key functions need not depend directly on the objects being sorted. A key function can also access external resources. For instance, if the student grades are stored in a dictionary, they can be used to sort a separate list of student names:
>>>```
>>> students = ['dave', 'john', 'jane']
>>> newgrades = {'john': 'F', 'jane':'A', 'dave': 'C'}
>>> sorted(students, key=newgrades.__getitem__)
['jane', 'dave', 'john']