Title: Math Library Functions in Python 3.8
URL: https://docs.python.org/3/library/math.html
Summary: This documentation discusses two functions added in Python version 3.8: math.fsum, which calculates an accurate floating-point sum of values from an iterable while minimizing precision loss, and math.hypot, which computes the Euclidean norm from given coordinates.
---

```

Added in version 3.8. 

math.fsum(_iterable_)[¶](https://docs.python.org/3/library/math.html#math.fsum "Link to this definition")
    
Return an accurate floating-point sum of values in the iterable. Avoids loss of precision by tracking multiple intermediate partial sums.
The algorithm’s accuracy depends on IEEE-754 arithmetic guarantees and the typical case where the rounding mode is half-even. On some non-Windows builds, the underlying C library uses extended precision addition and may occasionally double-round an intermediate sum causing it to be off in its least significant bit.
For further discussion and two alternative approaches, see the [ASPN cookbook recipes for accurate floating-point summation](https://code.activestate.com/recipes/393090-binary-floating-point-summation-accurate-to-full-p/). 

math.hypot(_* coordinates_)[¶](https://docs.python.org/3/library/math.html#math.hypot "Link to this definition")
    
Return the Euclidean norm, `sqrt(sum(x**2 for x in coordinates))`. This is the length of the vector from the origin to the point given by the coordinates.
For a two dimensional point `(x, y)`, this is equivalent to computing the hypotenuse of a right triangle using the Pythagorean theorem, `sqrt(x*x + y*y)`.
Changed in version 3.8: Added support for n-dimensional points. Formerly, only the two dimensional case was supported.
Changed in version 3.10: Improved the algorithm’s accuracy so that the maximum error is under 1 ulp (unit in the last place). More typically, the result is almost always correctly rounded to within 1/2 ulp. 

math.prod(_iterable_ , _*_ , _start =1_)[¶](https://docs.python.org/3/library/math.html#math.prod "Link to this definition")
    
Calculate the product of all the elements in the input _iterable_. The default _start_ value for the product is `1`.
When the iterable is empty, return the start value. This function is intended specifically for use with numeric values and may reject non-numeric types.
Added in version 3.8. 

math.sumprod(_p_ , _q_)[¶](https://docs.python.org/3/library/math.html#math.sumprod "Link to this definition")
    
Return the sum of products of values from two iterables _p_ and _q_.
Raises [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if the inputs do not have the same length.
Roughly equivalent to:
```
sum(itertools.starmap(operator.mul, zip(p, q, strict=True)))