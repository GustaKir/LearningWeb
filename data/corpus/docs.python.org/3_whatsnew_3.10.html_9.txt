Title: PEP 647: User-Defined Type Guards
URL: https://docs.python.org/3/whatsnew/3.10.html
Summary: The `TypeGuard` has been introduced in the `typing` module to allow annotation of type guard functions, enhancing static type checkers' ability to handle type narrowing. For further details, refer to the `TypeGuard` documentation and PEP 647.
---

```

See [**PEP 613**](https://peps.python.org/pep-0613/) for more details.
(Contributed by Mikhail Golubev in [bpo-41923](https://bugs.python.org/issue?@action=redirect&bpo=41923).)
### PEP 647: User-Defined Type Guards[¶](https://docs.python.org/3/whatsnew/3.10.html#pep-647-user-defined-type-guards "Link to this heading")
[`TypeGuard`](https://docs.python.org/3/library/typing.html#typing.TypeGuard "typing.TypeGuard") has been added to the [`typing`](https://docs.python.org/3/library/typing.html#module-typing "typing: Support for type hints \(see :pep:`484`\).") module to annotate type guard functions and improve information provided to static type checkers during type narrowing. For more information, please see [`TypeGuard`](https://docs.python.org/3/library/typing.html#typing.TypeGuard "typing.TypeGuard")‘s documentation, and [**PEP 647**](https://peps.python.org/pep-0647/).
(Contributed by Ken Jin and Guido van Rossum in [bpo-43766](https://bugs.python.org/issue?@action=redirect&bpo=43766). PEP written by Eric Traut.)
## Other Language Changes[¶](https://docs.python.org/3/whatsnew/3.10.html#other-language-changes "Link to this heading")
  * The [`int`](https://docs.python.org/3/library/functions.html#int "int") type has a new method [`int.bit_count()`](https://docs.python.org/3/library/stdtypes.html#int.bit_count "int.bit_count"), returning the number of ones in the binary expansion of a given integer, also known as the population count. (Contributed by Niklas Fiekas in [bpo-29882](https://bugs.python.org/issue?@action=redirect&bpo=29882).)
  * The views returned by [`dict.keys()`](https://docs.python.org/3/library/stdtypes.html#dict.keys "dict.keys"), [`dict.values()`](https://docs.python.org/3/library/stdtypes.html#dict.values "dict.values") and [`dict.items()`](https://docs.python.org/3/library/stdtypes.html#dict.items "dict.items") now all have a `mapping` attribute that gives a [`types.MappingProxyType`](https://docs.python.org/3/library/types.html#types.MappingProxyType "types.MappingProxyType") object wrapping the original dictionary. (Contributed by Dennis Sweeney in [bpo-40890](https://bugs.python.org/issue?@action=redirect&bpo=40890).)
  * [**PEP 618**](https://peps.python.org/pep-0618/): The [`zip()`](https://docs.python.org/3/library/functions.html#zip "zip") function now has an optional `strict` flag, used to require that all the iterables have an equal length.
  * Builtin and extension functions that take integer arguments no longer accept [`Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal")s, [`Fraction`](https://docs.python.org/3/library/fractions.html#fractions.Fraction "fractions.Fraction")s and other objects that can be converted to integers only with a loss (e.g. that have the [`__int__()`](https://docs.python.org/3/reference/datamodel.html#object.__int__ "object.__int__") method but do not have the [`__index__()`](https://docs.python.org/3/reference/datamodel.html#object.__index__ "object.__index__") method). (Contributed by Serhiy Storchaka in [bpo-37999](https://bugs.python.org/issue?@action=redirect&bpo=37999).)
  * If [`object.__ipow__()`](https://docs.python.org/3/reference/datamodel.html#object.__ipow__ "object.__ipow__") returns [`NotImplemented`](https://docs.python.org/3/library/constants.html#NotImplemented "NotImplemented"), the operator will correctly fall back to [`object.__pow__()`](https://docs.python.org/3/reference/datamodel.html#object.__pow__ "object.__pow__") and [`object.__rpow__()`](https://docs.python.org/3/reference/datamodel.html#object.__rpow__ "object.__rpow__") as expected. (Contributed by Alex Shkop in [bpo-38302](https://bugs.python.org/issue?@action=redirect&bpo=38302).)
  * Assignment expressions can now be used unparenthesized within set literals and set comprehensions, as well as in sequence indexes (but not slices).
  * Functions have a new `__builtins__` attribute which is used to look for builtin symbols when a function is executed, instead of looking into `__globals__['__builtins__']`. The attribute is initialized from `__globals__["__builtins__"]` if it exists, else from the current builtins. (Contributed by Mark Shannon in [bpo-42990](https://bugs.python.org/issue?@action=redirect&bpo=42990).)
  * Two new builtin functions – [`aiter()`](https://docs.python.org/3/library/functions.html#aiter "aiter") and [`anext()`](https://docs.python.org/3/library/functions.html#anext "anext") have been added to provide asynchronous counterparts to [`iter()`](https://docs.python.org/3/library/functions.html#iter "iter") and [`next()`](https://docs.python.org/3/library/functions.html#next "next"), respectively. (Contributed by Joshua Bronson, Daniel Pope, and Justin Wang in [bpo-31861](https://bugs.python.org/issue?@action=redirect&bpo=31861).)
  * Static methods ([`@staticmethod`](https://docs.python.org/3/library/functions.html#staticmethod "staticmethod")) and class methods ([`@classmethod`](https://docs.python.org/3