Title: Calculating Mode and Handling Input Types in Python Statistics
URL: https://docs.python.org/3/library/statistics.html
Summary: The mode function in Python returns the most frequent value from a list of hashable inputs. For sets, inputs should be converted to frozensets, and for lists, to tuples. It now supports multimodal datasets by returning the first mode encountered, addressing previous limitations. An alternative slower method is suggested for mixed or nested inputs.
---

```
>>> mode(["red", "blue", "blue", "red", "green", "red", "red"])
'red'

```

Only hashable inputs are supported. To handle type [`set`](https://docs.python.org/3/library/stdtypes.html#set "set"), consider casting to [`frozenset`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset"). To handle type [`list`](https://docs.python.org/3/library/stdtypes.html#list "list"), consider casting to [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple"). For mixed or nested inputs, consider using this slower quadratic algorithm that only depends on equality tests: `max(data, key=data.count)`.
Changed in version 3.8: Now handles multimodal datasets by returning the first mode encountered. Formerly, it raised [`StatisticsError`](https://docs.python.org/3/library/statistics.html#statistics.StatisticsError "statistics.StatisticsError") when more than one mode was found. 

statistics.multimode(_data_)[¶](https://docs.python.org/3/library/statistics.html#statistics.multimode "Link to this definition")
    
Return a list of the most frequently occurring values in the order they were first encountered in the _data_. Will return more than one result if there are multiple modes or an empty list if the _data_ is empty:
>>>```
>>> multimode('aabbbbccddddeeffffgg')
['b', 'd', 'f']
>>> multimode('')
[]

```

Added in version 3.8. 

statistics.pstdev(_data_ , _mu =None_)[¶](https://docs.python.org/3/library/statistics.html#statistics.pstdev "Link to this definition")
    
Return the population standard deviation (the square root of the population variance). See [`pvariance()`](https://docs.python.org/3/library/statistics.html#statistics.pvariance "statistics.pvariance") for arguments and other details.
>>>```
>>> pstdev([1.5, 2.5, 2.5, 2.75, 3.25, 4.75])
0.986893273527251

```


statistics.pvariance(_data_ , _mu =None_)[¶](https://docs.python.org/3/library/statistics.html#statistics.pvariance "Link to this definition")
    
Return the population variance of _data_ , a non-empty sequence or iterable of real-valued numbers. Variance, or second moment about the mean, is a measure of the variability (spread or dispersion) of data. A large variance indicates that the data is spread out; a small variance indicates it is clustered closely around the mean.
If the optional second argument _mu_ is given, it should be the _population_ mean of the _data_. It can also be used to compute the second moment around a point that is not the mean. If it is missing or `None` (the default), the arithmetic mean is automatically calculated.
Use this function to calculate the variance from the entire population. To estimate the variance from a sample, the [`variance()`](https://docs.python.org/3/library/statistics.html#statistics.variance "statistics.variance") function is usually a better choice.
Raises [`StatisticsError`](https://docs.python.org/3/library/statistics.html#statistics.StatisticsError "statistics.StatisticsError") if _data_ is empty.
Examples:
>>>```
>>> data = [0.0, 0.25, 0.25, 1.25, 1.5, 1.75, 2.75, 3.25]
>>> pvariance(data)
1.25

```

If you have already calculated the mean of your data, you can pass it as the optional second argument _mu_ to avoid recalculation:
>>>```
>>> mu = mean(data)
>>> pvariance(data, mu)
1.25

```

Decimals and Fractions are supported:
>>>```
>>> fromdecimalimport Decimal as D
>>> pvariance([D("27.5"), D("30.25"), D("30.25"), D("34.5"), D("41.75")])
Decimal('24.815')
>>> fromfractionsimport Fraction as F
>>> pvariance([F(1, 4), F(5, 4), F(1, 2)])
Fraction(13, 72)

```

Note
When called with the entire population, this gives the population variance σ². When called on a sample instead, this is the biased sample variance s², also known as variance with N degrees of freedom.
If you somehow know the true population mean μ, you may use this function to calculate the variance of a sample, giving the known population mean as the second argument. Provided the data points are a random sample of the population, the result will be an unbiased estimate of the population variance. 

statistics.stdev(_data_ , _xbar =None_)[¶](https://docs.python.org/3/library/statistics.html#statistics.stdev "Link to this definition")
    
Return the sample standard deviation (the square root of the sample variance). See [`variance()`](https://docs.python.org/3/library/statistics.html#statistics.variance "statistics.variance") for arguments and other details.
>>>```
>>> stdev([1.5, 2.5, 2.5, 2.75, 3.25, 4.75])
1.0810874155219827