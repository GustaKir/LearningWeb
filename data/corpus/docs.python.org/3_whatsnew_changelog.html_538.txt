Title: Enhancements to shutil and asyncio
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This update highlights improvements in the `shutil` module with a larger default buffer size for `shutil.copyfile()` on Windows, resulting in significant speed improvements when copying large files. It also addresses a race condition in the asyncio SSLProtocol, ensuring that the handshake process starts immediately to prevent potential failures.
---

On Windows [`shutil.copyfile()`](https://docs.python.org/3/library/shutil.html#shutil.copyfile "shutil.copyfile") uses a bigger default buffer size (1 MiB instead of 16 KiB) and a [`memoryview()`](https://docs.python.org/3/library/stdtypes.html#memoryview "memoryview")-based variant of [`shutil.copyfileobj()`](https://docs.python.org/3/library/shutil.html#shutil.copyfileobj "shutil.copyfileobj") is used. The speedup for copying a 512MiB file is about +26% on Linux, +50% on macOS and +40% on Windows. Also, much less CPU cycles are consumed. (Contributed by Giampaolo Rodola’ in [bpo-25427](https://bugs.python.org/issue?@action=redirect&bpo=25427).)
  * [bpo-33674](https://bugs.python.org/issue?@action=redirect&bpo=33674): Fix a race condition in SSLProtocol.connection_made() of asyncio.sslproto: start immediately the handshake instead of using call_soon(). Previously, data_received() could be called before the handshake started, causing the handshake to hang or fail.
  * [bpo-31647](https://bugs.python.org/issue?@action=redirect&bpo=31647): Fixed bug where calling write_eof() on a _SelectorSocketTransport after it’s already closed raises AttributeError.
  * [bpo-32610](https://bugs.python.org/issue?@action=redirect&bpo=32610): Make asyncio.all_tasks() return only pending tasks.
  * [bpo-32410](https://bugs.python.org/issue?@action=redirect&bpo=32410): Avoid blocking on file IO in sendfile fallback code
  * [bpo-33469](https://bugs.python.org/issue?@action=redirect&bpo=33469): Fix RuntimeError after closing loop that used run_in_executor
  * [bpo-33672](https://bugs.python.org/issue?@action=redirect&bpo=33672): Fix Task.__repr__ crash with Cython’s bogus coroutines
  * [bpo-33654](https://bugs.python.org/issue?@action=redirect&bpo=33654): Fix transport.set_protocol() to support switching between asyncio.Protocol and asyncio.BufferedProtocol. Fix loop.start_tls() to work with asyncio.BufferedProtocols.
  * [bpo-33652](https://bugs.python.org/issue?@action=redirect&bpo=33652): Pickles of type variables and subscripted generics are now future-proof and compatible with older Python versions.
  * [bpo-32493](https://bugs.python.org/issue?@action=redirect&bpo=32493): Fixed [`uuid.uuid1()`](https://docs.python.org/3/library/uuid.html#uuid.uuid1 "uuid.uuid1") on FreeBSD.
  * [bpo-33238](https://bugs.python.org/issue?@action=redirect&bpo=33238): Add `InvalidStateError` to [`concurrent.futures`](https://docs.python.org/3/library/concurrent.futures.html#module-concurrent.futures "concurrent.futures: Execute computations concurrently using threads or processes."). `Future.set_result` and `Future.set_exception` now raise `InvalidStateError` if the futures are not pending or running. Patch by Jason Haydaman.
  * [bpo-33618](https://bugs.python.org/issue?@action=redirect&bpo=33618): Finalize and document preliminary and experimental TLS 1.3 support with OpenSSL 1.1.1
  * [bpo-33625](https://bugs.python.org/issue?@action=redirect&bpo=33625): Release GIL on `grp.getgrnam`, `grp.getgrgid`, `pwd.getpwnam` and `pwd.getpwuid` if reentrant variants of these functions are available. Patch by William Grzybowski.
  * [bpo-33623](https://bugs.python.org/issue?@action=redirect&bpo=33623): Fix possible SIGSGV when asyncio.Future is created in __del__
  * [bpo-11874](https://bugs.python.org/issue?@action=redirect&bpo=11874): Use a better regex when breaking usage into wrappable parts. Avoids bogus assertion errors from custom metavar strings.
  * [bpo-30877](https://bugs.python.org/issue?@action=redirect&bpo=30877): Fixed a bug in the Python implementation of the JSON decoder that prevented the cache of parsed strings from clearing after finishing the decoding. Based on patch by c-fos.
  * [bpo-33604](https://bugs.python.org/issue?@action=redirect&bpo=33604): Remove HMAC default to md5 marked for removal in 3.8 (removal originally planned in 3.6, bump to 3.8 in PR 7062).
  * [bpo-33582](https://bugs.python.org/issue?@action=redirect&bpo=33582): Emit a deprecation warning for inspect.formatargspec
  * [bpo-21145](https://bugs.python.org/issue?@action=redirect&bpo=21145): Add `functools.cached_property` decorator, for computed properties cached for the life of the instance.
  * [bpo-33570](https://bugs.python.org/issue?@action=redirect&bpo=33570): Change TLS 1.3 cipher suite settings for compatibility with OpenSSL 1.1.1-pre6 and newer. OpenSSL 1.1.1 will have TLS 1.3 ciphers enabled by default.
  * [bpo-28556](https://bugs.python.org/issue?@action=redirect&bpo=28556): Do not simplify arguments to `typing.Union`. Now `Union[Manager, Employee]` is not simplified to `Employee` at runtime.