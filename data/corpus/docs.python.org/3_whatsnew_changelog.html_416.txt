Title: Python Changelog Highlights
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section discusses several changes in Python, including the removal of `snprintf` and `vsnprintf` macros on Windows, the requirement to define `PY_SSIZE_T_CLEAN` for specific argument parsing and building functions, and the explicit export and documentation of the `Py_GetArgcArgv()` function in the C API.
---

tions.
  * [bpo-36020](https://bugs.python.org/issue?@action=redirect&bpo=36020): On Windows, `#include "pyerrors.h"` no longer defines `snprintf` and `vsnprintf` macros.
  * [bpo-40943](https://bugs.python.org/issue?@action=redirect&bpo=40943): The `PY_SSIZE_T_CLEAN` macro must now be defined to use [`PyArg_ParseTuple()`](https://docs.python.org/3/c-api/arg.html#c.PyArg_ParseTuple "PyArg_ParseTuple") and [`Py_BuildValue()`](https://docs.python.org/3/c-api/arg.html#c.Py_BuildValue "Py_BuildValue") formats which use `#`: `es#`, `et#`, `s#`, `u#`, `y#`, `z#`, `U#` and `Z#`. See [Parsing arguments and building values](https://docs.python.org/3/c-api/arg.html#arg-parsing) and the [**PEP 353**](https://peps.python.org/pep-0353/).
  * [bpo-40910](https://bugs.python.org/issue?@action=redirect&bpo=40910): Export explicitly the [`Py_GetArgcArgv()`](https://docs.python.org/3/c-api/init_config.html#c.Py_GetArgcArgv "Py_GetArgcArgv") function to the C API and document the function. Previously, it was exported implicitly which no longer works since Python is built with `-fvisibility=hidden`.
  * [bpo-40724](https://bugs.python.org/issue?@action=redirect&bpo=40724): Allow defining buffer slots in type specs.
  * [bpo-40679](https://bugs.python.org/issue?@action=redirect&bpo=40679): Fix a `_PyEval_EvalCode()` crash if _qualname_ argument is NULL.
  * [bpo-40839](https://bugs.python.org/issue?@action=redirect&bpo=40839): Calling [`PyDict_GetItem()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_GetItem "PyDict_GetItem") without [GIL](https://docs.python.org/3/glossary.html#term-GIL) held had been allowed for historical reason. It is no longer allowed.
  * [bpo-40826](https://bugs.python.org/issue?@action=redirect&bpo=40826): `PyOS_InterruptOccurred()` now fails with a fatal error if it is called with the GIL released.
  * [bpo-40792](https://bugs.python.org/issue?@action=redirect&bpo=40792): The result of [`PyNumber_Index()`](https://docs.python.org/3/c-api/number.html#c.PyNumber_Index "PyNumber_Index") now always has exact type [`int`](https://docs.python.org/3/library/functions.html#int "int"). Previously, the result could have been an instance of a subclass of `int`.
  * [bpo-39573](https://bugs.python.org/issue?@action=redirect&bpo=39573): Convert [`Py_REFCNT()`](https://docs.python.org/3/c-api/refcounting.html#c.Py_REFCNT "Py_REFCNT") and [`Py_SIZE()`](https://docs.python.org/3/c-api/structures.html#c.Py_SIZE "Py_SIZE") macros to static inline functions. They cannot be used as l-value anymore: use [`Py_SET_REFCNT()`](https://docs.python.org/3/c-api/refcounting.html#c.Py_SET_REFCNT "Py_SET_REFCNT") and [`Py_SET_SIZE()`](https://docs.python.org/3/c-api/structures.html#c.Py_SET_SIZE "Py_SET_SIZE") to set an object reference count and size. This change is backward incompatible on purpose, to prepare the C API for an opaque [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject") structure.
  * [bpo-40703](https://bugs.python.org/issue?@action=redirect&bpo=40703): The PyType_FromSpec*() functions no longer overwrite the type’s “__module__” attribute if it is set via “Py_tp_members” or “Py_tp_getset”.
  * [bpo-39583](https://bugs.python.org/issue?@action=redirect&bpo=39583): Remove superfluous “extern C” declarations from `Include/cpython/*.h`.


## Python 3.9.0 beta 1[¶](https://docs.python.org/3/whatsnew/changelog.html#python-3-9-0-beta-1 "Link to this heading")
_Release date: 2020-05-19_
### Security[¶](https://docs.python.org/3/whatsnew/changelog.html#id367 "Link to this heading")
  * [bpo-40501](https://bugs.python.org/issue?@action=redirect&bpo=40501): [`uuid`](https://docs.python.org/3/library/uuid.html#module-uuid "uuid: UUID objects \(universally unique identifiers\) according to RFC 4122") no longer uses [`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "ctypes: A foreign function library for Python.") to load `libuuid` or `rpcrt4.dll` at runtime.