Title: PyObject_IsSubclass Function
URL: https://docs.python.org/3/c-api/object.html
Summary: The `PyObject_IsSubclass` function checks if a class is identical to or derived from another class, returning `1` for true, `0` for false, and `-1` for errors. It can also check against tuples of classes and utilizes the `__subclasscheck__()` method if available, as outlined in PEP 3119.
---

intPyObject_IsSubclass([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*derived, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*cls)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_IsSubclass "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return `1` if the class _derived_ is identical to or derived from the class _cls_ , otherwise return `0`. In case of an error, return `-1`.
If _cls_ is a tuple, the check will be done against every entry in _cls_. The result will be `1` when at least one of the checks returns `1`, otherwise it will be `0`.
If _cls_ has a [`__subclasscheck__()`](https://docs.python.org/3/reference/datamodel.html#type.__subclasscheck__ "type.__subclasscheck__") method, it will be called to determine the subclass status as described in [**PEP 3119**](https://peps.python.org/pep-3119/). Otherwise, _derived_ is a subclass of _cls_ if it is a direct or indirect subclass, i.e. contained in [`cls.__mro__`](https://docs.python.org/3/reference/datamodel.html#type.__mro__ "type.__mro__").
Normally only class objects, i.e. instances of [`type`](https://docs.python.org/3/library/functions.html#type "type") or a derived class, are considered classes. However, objects can override this by having a [`__bases__`](https://docs.python.org/3/reference/datamodel.html#type.__bases__ "type.__bases__") attribute (which must be a tuple of base classes). 

intPyObject_IsInstance([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*inst, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*cls)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_IsInstance "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return `1` if _inst_ is an instance of the class _cls_ or a subclass of _cls_ , or `0` if not. On error, returns `-1` and sets an exception.
If _cls_ is a tuple, the check will be done against every entry in _cls_. The result will be `1` when at least one of the checks returns `1`, otherwise it will be `0`.
If _cls_ has a [`__instancecheck__()`](https://docs.python.org/3/reference/datamodel.html#type.__instancecheck__ "type.__instancecheck__") method, it will be called to determine the subclass status as described in [**PEP 3119**](https://peps.python.org/pep-3119/). Otherwise, _inst_ is an instance of _cls_ if its class is a subclass of _cls_.
An instance _inst_ can override what is considered its class by having a [`__class__`](https://docs.python.org/3/reference/datamodel.html#object.__class__ "object.__class__") attribute.
An object _cls_ can override if it is considered a class, and what its base classes are, by having a [`__bases__`](https://docs.python.org/3/reference/datamodel.html#type.__bases__ "type.__bases__") attribute (which must be a tuple of base classes). 

[Py_hash_t](https://docs.python.org/3/c-api/hash.html#c.Py_hash_t "Py_hash_t")PyObject_Hash([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_Hash "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Compute and return the hash value of an object _o_. On failure, return `-1`. This is the equivalent of the Python expression `hash(o)`.
Changed in version 3.2: The return type is now Py_hash_t. This is a signed integer the same size as [`Py_ssize_t`](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t"). 

[Py_hash_t](https://docs.python.org/3/c-api/hash.html#c.Py_hash_t "Py_hash_t")PyObject_HashNotImplemented([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_HashNotImplemented "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Set a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") indicating that `type(o)` is not [hashable](https://docs.python.org/3/glossary.html#term-hashable) and return `-1`. This function receives special treatment when stored in a `tp_hash` slot, allowing a type to explicitly indicate to the interpreter that it is not hashable. 

intPyObject_IsTrue([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_IsTrue "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Returns `1` if the object _o_ is considered to be true, and `0` otherwise. This is equivalent to the Python expression `not not o`. On failure, return `-1`.