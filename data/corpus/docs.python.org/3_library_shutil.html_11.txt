Title: Unpacking Formats in shutil
URL: https://docs.python.org/3/library/shutil.html
Summary: This section covers the functionality of the `shutil` module related to unpacking formats. It describes how to provide a description for a format, unregister an unpack format using `shutil.unregister_unpack_format()`, and retrieve a list of all registered unpack formats with `shutil.get_unpack_formats()`. The default unpacking formats include ZIP and TAR.
---

_description_ can be provided to describe the format, and will be returned by the [`get_unpack_formats()`](https://docs.python.org/3/library/shutil.html#shutil.get_unpack_formats "shutil.get_unpack_formats") function. 

shutil.unregister_unpack_format(_name_)[¶](https://docs.python.org/3/library/shutil.html#shutil.unregister_unpack_format "Link to this definition")
    
Unregister an unpack format. _name_ is the name of the format. 

shutil.get_unpack_formats()[¶](https://docs.python.org/3/library/shutil.html#shutil.get_unpack_formats "Link to this definition")
    
Return a list of all registered formats for unpacking. Each element of the returned sequence is a tuple `(name, extensions, description)`.
By default [`shutil`](https://docs.python.org/3/library/shutil.html#module-shutil "shutil: High-level file operations, including copying.") provides these formats:
  * _zip_ : ZIP file (unpacking compressed files works only if the corresponding module is available).
  * _tar_ : uncompressed tar file.
  * _gztar_ : gzip’ed tar-file (if the [`zlib`](https://docs.python.org/3/library/zlib.html#module-zlib "zlib: Low-level interface to compression and decompression routines compatible with gzip.") module is available).
  * _bztar_ : bzip2’ed tar-file (if the [`bz2`](https://docs.python.org/3/library/bz2.html#module-bz2 "bz2: Interfaces for bzip2 compression and decompression.") module is available).
  * _xztar_ : xz’ed tar-file (if the [`lzma`](https://docs.python.org/3/library/lzma.html#module-lzma "lzma: A Python wrapper for the liblzma compression library.") module is available).


You can register new formats or provide your own unpacker for any existing formats, by using [`register_unpack_format()`](https://docs.python.org/3/library/shutil.html#shutil.register_unpack_format "shutil.register_unpack_format").
### Archiving example[¶](https://docs.python.org/3/library/shutil.html#archiving-example "Link to this heading")
In this example, we create a gzip’ed tar-file archive containing all files found in the `.ssh` directory of the user:
>>>```
>>> fromshutilimport make_archive
>>> importos
>>> archive_name = os.path.expanduser(os.path.join('~', 'myarchive'))
>>> root_dir = os.path.expanduser(os.path.join('~', '.ssh'))
>>> make_archive(archive_name, 'gztar', root_dir)
'/Users/tarek/myarchive.tar.gz'

```

The resulting archive contains:
```
$ tar-tzvf/Users/tarek/myarchive.tar.gz
drwx------ tarek/staff    0 2010-02-01 16:23:40 ./
-rw-r--r-- tarek/staff   609 2008-06-09 13:26:54 ./authorized_keys
-rwxr-xr-x tarek/staff   65 2008-06-09 13:26:54 ./config
-rwx------ tarek/staff   668 2008-06-09 13:26:54 ./id_dsa
-rwxr-xr-x tarek/staff   609 2008-06-09 13:26:54 ./id_dsa.pub
-rw------- tarek/staff  1675 2008-06-09 13:26:54 ./id_rsa
-rw-r--r-- tarek/staff   397 2008-06-09 13:26:54 ./id_rsa.pub
-rw-r--r-- tarek/staff  37192 2010-02-06 18:23:10 ./known_hosts

```

### Archiving example with _base_dir_[¶](https://docs.python.org/3/library/shutil.html#archiving-example-with-base-dir "Link to this heading")
In this example, similar to the [one above](https://docs.python.org/3/library/shutil.html#shutil-archiving-example), we show how to use [`make_archive()`](https://docs.python.org/3/library/shutil.html#shutil.make_archive "shutil.make_archive"), but this time with the usage of _base_dir_. We now have the following directory structure:
```
$ treetmp
tmp
└── root
  └── structure
    ├── content
      └── please_add.txt
    └── do_not_add.txt

```

In the final archive, `please_add.txt` should be included, but `do_not_add.txt` should not. Therefore we use the following:
>>>```
>>> fromshutilimport make_archive
>>> importos
>>> archive_name = os.path.expanduser(os.path.join('~', 'myarchive'))
>>> make_archive(
...   archive_name,
...   'tar',
...   root_dir='tmp/root',
...   base_dir='structure/content',
... )
'/Users/tarek/my_archive.tar'

```

Listing the files in the resulting archive gives us:
```
$ python-mtarfile-l/Users/tarek/myarchive.tar
structure/content/
structure/content/please_add.txt