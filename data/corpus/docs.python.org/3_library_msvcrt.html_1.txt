Title: msvcrt Module Constants and Functions
URL: https://docs.python.org/3/library/msvcrt.html
Summary: This section covers constants such as `LK_NBLCK`, `LK_NBRLCK`, and `LK_UNLCK` used for locking bytes in the `msvcrt` module. It also explains the `setmode()` function, which sets the line-end translation mode for a file descriptor, with options for text and binary modes.
---

msvcrt.LK_NBLCK[¶](https://docs.python.org/3/library/msvcrt.html#msvcrt.LK_NBLCK "Link to this definition")


msvcrt.LK_NBRLCK[¶](https://docs.python.org/3/library/msvcrt.html#msvcrt.LK_NBRLCK "Link to this definition")
    
Locks the specified bytes. If the bytes cannot be locked, [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") is raised. 

msvcrt.LK_UNLCK[¶](https://docs.python.org/3/library/msvcrt.html#msvcrt.LK_UNLCK "Link to this definition")
    
Unlocks the specified bytes, which must have been previously locked. 

msvcrt.setmode(_fd_ , _flags_)[¶](https://docs.python.org/3/library/msvcrt.html#msvcrt.setmode "Link to this definition")
    
Set the line-end translation mode for the file descriptor _fd_. To set it to text mode, _flags_ should be [`os.O_TEXT`](https://docs.python.org/3/library/os.html#os.O_TEXT "os.O_TEXT"); for binary, it should be [`os.O_BINARY`](https://docs.python.org/3/library/os.html#os.O_BINARY "os.O_BINARY"). 

msvcrt.open_osfhandle(_handle_ , _flags_)[¶](https://docs.python.org/3/library/msvcrt.html#msvcrt.open_osfhandle "Link to this definition")
    
Create a C runtime file descriptor from the file handle _handle_. The _flags_ parameter should be a bitwise OR of [`os.O_APPEND`](https://docs.python.org/3/library/os.html#os.O_APPEND "os.O_APPEND"), [`os.O_RDONLY`](https://docs.python.org/3/library/os.html#os.O_RDONLY "os.O_RDONLY"), [`os.O_TEXT`](https://docs.python.org/3/library/os.html#os.O_TEXT "os.O_TEXT") and [`os.O_NOINHERIT`](https://docs.python.org/3/library/os.html#os.O_NOINHERIT "os.O_NOINHERIT"). The returned file descriptor may be used as a parameter to [`os.fdopen()`](https://docs.python.org/3/library/os.html#os.fdopen "os.fdopen") to create a file object.
The file descriptor is inheritable by default. Pass [`os.O_NOINHERIT`](https://docs.python.org/3/library/os.html#os.O_NOINHERIT "os.O_NOINHERIT") flag to make it non inheritable.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `msvcrt.open_osfhandle` with arguments `handle`, `flags`. 

msvcrt.get_osfhandle(_fd_)[¶](https://docs.python.org/3/library/msvcrt.html#msvcrt.get_osfhandle "Link to this definition")
    
Return the file handle for the file descriptor _fd_. Raises [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") if _fd_ is not recognized.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `msvcrt.get_osfhandle` with argument `fd`.
## Console I/O[¶](https://docs.python.org/3/library/msvcrt.html#console-i-o "Link to this heading") 

msvcrt.kbhit()[¶](https://docs.python.org/3/library/msvcrt.html#msvcrt.kbhit "Link to this definition")
    
Returns a nonzero value if a keypress is waiting to be read. Otherwise, return 0. 

msvcrt.getch()[¶](https://docs.python.org/3/library/msvcrt.html#msvcrt.getch "Link to this definition")
    
Read a keypress and return the resulting character as a byte string. Nothing is echoed to the console. This call will block if a keypress is not already available, but will not wait for `Enter` to be pressed. If the pressed key was a special function key, this will return `'\000'` or `'\xe0'`; the next call will return the keycode. The `Control`-`C` keypress cannot be read with this function. 

msvcrt.getwch()[¶](https://docs.python.org/3/library/msvcrt.html#msvcrt.getwch "Link to this definition")
    
Wide char variant of [`getch()`](https://docs.python.org/3/library/msvcrt.html#msvcrt.getch "msvcrt.getch"), returning a Unicode value. 

msvcrt.getche()[¶](https://docs.python.org/3/library/msvcrt.html#msvcrt.getche "Link to this definition")
    
Similar to [`getch()`](https://docs.python.org/3/library/msvcrt.html#msvcrt.getch "msvcrt.getch"), but the keypress will be echoed if it represents a printable character. 

msvcrt.getwche()[¶](https://docs.python.org/3/library/msvcrt.html#msvcrt.getwche "Link to this definition")
    
Wide char variant of [`getche()`](https://docs.python.org/3/library/msvcrt.html#msvcrt.getche "msvcrt.getche"), returning a Unicode value. 

msvcrt.putch(_char_)[¶](https://docs.python.org/3/library/msvcrt.html#msvcrt.putch "Link to this definition")
    
Print the byte string _char_ to the console without buffering. 

msvcrt.putwch(_unicode_char_)[¶](https://docs.python.org/3/library/msvcrt.html#msvcrt.putwch "Link to this definition")
    
Wide char variant of [`putch()`](https://docs.python.org/3/library/msvcrt.html#msvcrt.putch "msvcrt.putch"), accepting a Unicode value. 

msvcrt.ungetch(_char_)[¶](https://docs.python.org/3/library/msvcrt.html#msvcrt.ungetch "Link to this definition")
    
Cause the byte string _char_ to be “pushed back” into the console buffer; it will be the next character read by [`getch()`](https://docs.python.org/3/library/msvcrt.html#msvcrt.getch "msvcrt.getch") or [`getche()`](https://docs.python.org/3/library/msvcrt.html#msvcrt.getche "msvcrt.getche").