Title: Python 3 Change Log Updates
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section outlines various updates in Python 3, including the specialization of the `STORE_SUBSCR` opcode, the consolidation of numeric binary operation instructions into a single `BINARY_OP`, and the reimplementation of path calculation as a frozen Python module. Additionally, improvements have been made to syntax error messaging.
---

```

  * [bpo-45609](https://bugs.python.org/issue?@action=redirect&bpo=45609): Specialized the `STORE_SUBSCR` opcode using the PEP 659 machinery.
  * [bpo-45636](https://bugs.python.org/issue?@action=redirect&bpo=45636): Replace all numeric `BINARY_*` and `INPLACE_*` instructions with a single [`BINARY_OP`](https://docs.python.org/3/library/dis.html#opcode-BINARY_OP) implementation.
  * [bpo-45582](https://bugs.python.org/issue?@action=redirect&bpo=45582): Path calculation (known as `getpath`) has been reimplemented as a frozen Python module. This should have no visible impact, but may affect calculation of all paths referenced in [`sys`](https://docs.python.org/3/library/sys.html#module-sys "sys: Access system-specific parameters and functions.") and [`sysconfig`](https://docs.python.org/3/library/sysconfig.html#module-sysconfig "sysconfig: Python's configuration information").
  * [bpo-45450](https://bugs.python.org/issue?@action=redirect&bpo=45450): Improve the syntax error message for parenthesized arguments. Patch by Pablo Galindo.


### Library[Â¶](https://docs.python.org/3/whatsnew/changelog.html#id262 "Link to this heading")
  * [bpo-27946](https://bugs.python.org/issue?@action=redirect&bpo=27946): Fix possible crash when getting an attribute of [`xml.etree.ElementTree.Element`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element "xml.etree.ElementTree.Element") simultaneously with replacing the `attrib` dict.
  * [bpo-45711](https://bugs.python.org/issue?@action=redirect&bpo=45711): Make [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O.") normalize exceptions as soon as they are captured with [`PyErr_Fetch()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_Fetch "PyErr_Fetch"), and before they are stored as an exc_info triplet. This brings [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O.") in line with the rest of the codebase, where an exc_info triplet is always normalized.
  * [bpo-23819](https://bugs.python.org/issue?@action=redirect&bpo=23819): Replaced asserts with exceptions in asyncio, patch by Kumar Aditya.
  * [bpo-13236](https://bugs.python.org/issue?@action=redirect&bpo=13236): [`unittest.TextTestResult`](https://docs.python.org/3/library/unittest.html#unittest.TextTestResult "unittest.TextTestResult") and [`unittest.TextTestRunner`](https://docs.python.org/3/library/unittest.html#unittest.TextTestRunner "unittest.TextTestRunner") flush now the output stream more often.
  * [bpo-45917](https://bugs.python.org/issue?@action=redirect&bpo=45917): Added [`math.exp2()`](https://docs.python.org/3/library/math.html#math.exp2 "math.exp2"):, which returns 2 raised to the power of x.
  * [bpo-37658](https://bugs.python.org/issue?@action=redirect&bpo=37658): Fix issue when on certain conditions `asyncio.wait_for()` may allow a coroutine to complete successfully, but fail to return the result, potentially causing memory leaks or other issues.
  * [bpo-45876](https://bugs.python.org/issue?@action=redirect&bpo=45876): Improve the accuracy of stdev() and pstdev() in the statistics module. When the inputs are floats or fractions, the output is a correctly rounded float
  * [bpo-44649](https://bugs.python.org/issue?@action=redirect&bpo=44649): Handle dataclass(slots=True) with a field that has default a default value, but for which init=False.
  * [bpo-45803](https://bugs.python.org/issue?@action=redirect&bpo=45803): Added missing kw_only parameter to dataclasses.make_dataclass().
  * [bpo-45837](https://bugs.python.org/issue?@action=redirect&bpo=45837): The `turtle.RawTurtle.settiltangle()` is deprecated since Python 3.1, it now emits a deprecation warning and will be removed in Python 3.13.
Use `turtle.RawTurtle.tiltangle()` instead.
`turtle.RawTurtle.tiltangle()` was earlier incorrectly marked as deprecated, its docstring has been corrected.
Patch by Hugo van Kemenade.
  * [bpo-45831](https://bugs.python.org/issue?@action=redirect&bpo=45831): [`faulthandler`](https://docs.python.org/3/library/faulthandler.html#module-faulthandler "faulthandler: Dump the Python traceback.") can now write ASCII-only strings (like filenames and function names) with a single write() syscall when dumping a traceback. It reduces the risk of getting an unreadable dump when two threads or two processes dump a traceback to the same file (like stderr) at the same time. Patch by Victor Stinner.
  * [bpo-45828](https://bugs.python.org/issue?@action=redirect&bpo=45828): `sqlite` C callbacks now use unraisable exceptions if callback tracebacks are enabled. Patch by Erlend E. Aasland.
  * [bpo-41735](https://bugs.python.org/issue?@action=redirect&bpo=41735): Fix thread lock in `zlib.Decompress.flush()` method before `PyObject_GetBuffer`.
  * [bpo-45235](https://bugs.python.org/issue?@action=redirect&bpo=45235): Reverted an argparse bugfix that caused regression in the handling of de