Title: Byte and Bytearray Methods in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This section discusses the `rjust` method for both `bytes` and `bytearray` types, which creates a right-justified copy of the object with optional padding. It highlights that the `bytearray` version does not modify the object in place but always returns a new object, even without changes.
---

```

Note
The bytearray version of this method does _not_ operate in place - it always produces a new object, even if no changes were made. 

bytes.rjust(_width_[, _fillbyte_])[¶](https://docs.python.org/3/library/stdtypes.html#bytes.rjust "Link to this definition")


bytearray.rjust(_width_[, _fillbyte_])[¶](https://docs.python.org/3/library/stdtypes.html#bytearray.rjust "Link to this definition")
    
Return a copy of the object right justified in a sequence of length _width_. Padding is done using the specified _fillbyte_ (default is an ASCII space). For [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") objects, the original sequence is returned if _width_ is less than or equal to `len(s)`.
Note
The bytearray version of this method does _not_ operate in place - it always produces a new object, even if no changes were made. 

bytes.rsplit(_sep =None_, _maxsplit =-1_)[¶](https://docs.python.org/3/library/stdtypes.html#bytes.rsplit "Link to this definition")


bytearray.rsplit(_sep =None_, _maxsplit =-1_)[¶](https://docs.python.org/3/library/stdtypes.html#bytearray.rsplit "Link to this definition")
    
Split the binary sequence into subsequences of the same type, using _sep_ as the delimiter string. If _maxsplit_ is given, at most _maxsplit_ splits are done, the _rightmost_ ones. If _sep_ is not specified or `None`, any subsequence consisting solely of ASCII whitespace is a separator. Except for splitting from the right, [`rsplit()`](https://docs.python.org/3/library/stdtypes.html#bytearray.rsplit "bytearray.rsplit") behaves like [`split()`](https://docs.python.org/3/library/stdtypes.html#bytearray.split "bytearray.split") which is described in detail below. 

bytes.rstrip([_chars_])[¶](https://docs.python.org/3/library/stdtypes.html#bytes.rstrip "Link to this definition")


bytearray.rstrip([_chars_])[¶](https://docs.python.org/3/library/stdtypes.html#bytearray.rstrip "Link to this definition")
    
Return a copy of the sequence with specified trailing bytes removed. The _chars_ argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters. If omitted or `None`, the _chars_ argument defaults to removing ASCII whitespace. The _chars_ argument is not a suffix; rather, all combinations of its values are stripped:
>>>```
>>> b'  spacious  '.rstrip()
b'  spacious'
>>> b'mississippi'.rstrip(b'ipz')
b'mississ'

```

The binary sequence of byte values to remove may be any [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object). See [`removesuffix()`](https://docs.python.org/3/library/stdtypes.html#bytes.removesuffix "bytes.removesuffix") for a method that will remove a single suffix string rather than all of a set of characters. For example:
>>>```
>>> b'Monty Python'.rstrip(b' Python')
b'M'
>>> b'Monty Python'.removesuffix(b' Python')
b'Monty'

```

Note
The bytearray version of this method does _not_ operate in place - it always produces a new object, even if no changes were made. 

bytes.split(_sep =None_, _maxsplit =-1_)[¶](https://docs.python.org/3/library/stdtypes.html#bytes.split "Link to this definition")


bytearray.split(_sep =None_, _maxsplit =-1_)[¶](https://docs.python.org/3/library/stdtypes.html#bytearray.split "Link to this definition")
    
Split the binary sequence into subsequences of the same type, using _sep_ as the delimiter string. If _maxsplit_ is given and non-negative, at most _maxsplit_ splits are done (thus, the list will have at most `maxsplit+1` elements). If _maxsplit_ is not specified or is `-1`, then there is no limit on the number of splits (all possible splits are made).
If _sep_ is given, consecutive delimiters are not grouped together and are deemed to delimit empty subsequences (for example, `b'1,,2'.split(b',')` returns `[b'1', b'', b'2']`). The _sep_ argument may consist of a multibyte sequence as a single delimiter. Splitting an empty sequence with a specified separator returns `[b'']` or `[bytearray(b'')]` depending on the type of object being split. The _sep_ argument may be any [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object).
For example:
>>>```
>>> b'1,2,3'.split(b',')
[b'1', b'2', b'3']
>>> b'1,2,3'.split(b',', maxsplit=1)
[b'1', b'2,3']
>>> b'1,2,,3,'.split(b',')
[b'1', b'2', b'', b'3', b'']
>>> b'1<>2<>3<4'.split(b'<>')
[b'1', b'2', b'3<4']

```

If _sep_ is not specified or is `None`, a different splitting algorithm is applied: runs of consecutive ASCII whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the sequence has leading or trailing whitespace. Consequently, splitting an empty sequence or a sequence consisting solely of ASCII whitespace without a specified separator returns `[]`.
For example:
>>>