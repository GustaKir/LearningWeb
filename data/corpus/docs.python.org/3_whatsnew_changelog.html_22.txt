Title: Documentation Updates in Python
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section outlines recent changes to the Python documentation, including the addition of references to asyncio components, a requirement for Sphinx version 8.2.0 or later, updated documentation on macOS wheel tags, and details on the C API functions PyUnicode_RSplit and PyUnicode_Partition.
---

### Documentation[¶](https://docs.python.org/3/whatsnew/changelog.html#documentation "Link to this heading")
  * [gh-131417](https://github.com/python/cpython/issues/131417): Mention [`asyncio.Future`](https://docs.python.org/3/library/asyncio-future.html#asyncio.Future "asyncio.Future") and [`asyncio.Task`](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task "asyncio.Task") in generic classes list.
  * [gh-125722](https://github.com/python/cpython/issues/125722): Require Sphinx 8.2.0 or later to build the Python documentation. Patch by Adam Turner.
  * [gh-129712](https://github.com/python/cpython/issues/129712): The wheel tags supported by each macOS universal SDK option are now documented.
  * [gh-46236](https://github.com/python/cpython/issues/46236): C API: Document [`PyUnicode_RSplit()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_RSplit "PyUnicode_RSplit"), [`PyUnicode_Partition()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_Partition "PyUnicode_Partition") and [`PyUnicode_RPartition()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_RPartition "PyUnicode_RPartition").


### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id4 "Link to this heading")
  * [gh-132011](https://github.com/python/cpython/issues/132011): Fix crash when calling `list.append()` as an unbound method.
  * [gh-131998](https://github.com/python/cpython/issues/131998): Fix a crash when using an unbound method [descriptor](https://docs.python.org/3/glossary.html#term-descriptor) object in a function where a bound method descriptor was used.
  * [gh-131988](https://github.com/python/cpython/issues/131988): Fix a performance regression that caused scaling bottlenecks in the free threaded build in 3.13.1 and 3.13.2.
  * [gh-131719](https://github.com/python/cpython/issues/131719): Fix missing NULL check in `_PyMem_FreeDelayed` in [free-threaded](https://docs.python.org/3/glossary.html#term-free-threading) build.
  * [gh-131670](https://github.com/python/cpython/issues/131670): Fix [`anext()`](https://docs.python.org/3/library/functions.html#anext "anext") failing on sync [`__anext__()`](https://docs.python.org/3/reference/datamodel.html#object.__anext__ "object.__anext__") raising an exception.
  * [gh-131141](https://github.com/python/cpython/issues/131141): Fix data race in [`sys.monitoring`](https://docs.python.org/3/library/sys.monitoring.html#module-sys.monitoring "sys.monitoring: Access and control event monitoring") instrumentation while registering callback.
  * [gh-130932](https://github.com/python/cpython/issues/130932): Fix incorrect exception handling in `_PyModule_IsPossiblyShadowing`
  * [gh-130851](https://github.com/python/cpython/issues/130851): Fix a crash in the [free threading](https://docs.python.org/3/glossary.html#term-free-threading) build when constructing a [`code`](https://docs.python.org/3/library/code.html#module-code "code: Facilities to implement read-eval-print loops.") object with [`co_consts`](https://docs.python.org/3/reference/datamodel.html#codeobject.co_consts "codeobject.co_consts") that contains instances of types that are not otherwise generated by the bytecode compiler.
  * [gh-130794](https://github.com/python/cpython/issues/130794): Fix memory leak in the [free threaded](https://docs.python.org/3/glossary.html#term-free-threading) build when resizing a shared list or dictionary from multiple short-lived threads.
  * [gh-130775](https://github.com/python/cpython/issues/130775): Do not crash on negative `column` and `end_column` in [`ast`](https://docs.python.org/3/library/ast.html#module-ast "ast: Abstract Syntax Tree classes and manipulation.") locations.
  * [gh-130382](https://github.com/python/cpython/issues/130382): Fix `PyRefTracer_DESTROY` not being sent from `Python/ceval.c` `Py_DECREF()`.
  * [gh-130618](https://github.com/python/cpython/issues/130618): Fix a bug that was causing `UnicodeDecodeError` or `SystemError` to be raised when using f-strings with `lambda` expressions with non-ASCII characters. Patch by Pablo Galindo
  * [gh-130163](https://github.com/python/cpython/issues/130163): Fix possible crashes related to concurrent change and use of the [`sys`](https://docs.python.org/3/library/sys.html#module-sys "sys: Access system-specific parameters and functions.") module attributes.
  * [gh-88887](https://github.com/python/cpython/issues/88887): Fixing multiprocessing Resource Tracker process leaking, usually observed when running Python as PID 1.
  * [gh-130115](https://github.com/python/cpython/issues/130115): Fix an issue with thread identifiers being sign-extended on some platforms.
  * [gh-128396](https://github.com/python/cpython/issues/128396): Fix a crash that occurs when calling [`locals()`](https://docs.python.org/3/library/functions.html#locals "locals") inside an inline comprehension that uses the same local variable as the outer frame scope where the variable is a free or cell var.
  * [gh-1