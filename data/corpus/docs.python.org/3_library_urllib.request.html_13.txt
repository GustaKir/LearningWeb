Title: HTTP Redirect Handlers in urllib
URL: https://docs.python.org/3/library/urllib.request.html
Summary: This document outlines the HTTPRedirectHandler methods for handling HTTP response codes 301 (Moved Permanently), 302 (Found), and 303 (See Other). Each method facilitates redirecting the request to the specified Location or URI when the corresponding HTTP response is received.
---

HTTPRedirectHandler.http_error_301(_req_ , _fp_ , _code_ , _msg_ , _hdrs_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPRedirectHandler.http_error_301 "Link to this definition")
    
Redirect to the `Location:` or `URI:` URL. This method is called by the parent [`OpenerDirector`](https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector "urllib.request.OpenerDirector") when getting an HTTP ‘moved permanently’ response. 

HTTPRedirectHandler.http_error_302(_req_ , _fp_ , _code_ , _msg_ , _hdrs_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPRedirectHandler.http_error_302 "Link to this definition")
    
The same as [`http_error_301()`](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPRedirectHandler.http_error_301 "urllib.request.HTTPRedirectHandler.http_error_301"), but called for the ‘found’ response. 

HTTPRedirectHandler.http_error_303(_req_ , _fp_ , _code_ , _msg_ , _hdrs_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPRedirectHandler.http_error_303 "Link to this definition")
    
The same as [`http_error_301()`](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPRedirectHandler.http_error_301 "urllib.request.HTTPRedirectHandler.http_error_301"), but called for the ‘see other’ response. 

HTTPRedirectHandler.http_error_307(_req_ , _fp_ , _code_ , _msg_ , _hdrs_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPRedirectHandler.http_error_307 "Link to this definition")
    
The same as [`http_error_301()`](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPRedirectHandler.http_error_301 "urllib.request.HTTPRedirectHandler.http_error_301"), but called for the ‘temporary redirect’ response. It does not allow changing the request method from `POST` to `GET`. 

HTTPRedirectHandler.http_error_308(_req_ , _fp_ , _code_ , _msg_ , _hdrs_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPRedirectHandler.http_error_308 "Link to this definition")
    
The same as [`http_error_301()`](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPRedirectHandler.http_error_301 "urllib.request.HTTPRedirectHandler.http_error_301"), but called for the ‘permanent redirect’ response. It does not allow changing the request method from `POST` to `GET`.
Added in version 3.11.
## HTTPCookieProcessor Objects[¶](https://docs.python.org/3/library/urllib.request.html#httpcookieprocessor-objects "Link to this heading")
[`HTTPCookieProcessor`](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPCookieProcessor "urllib.request.HTTPCookieProcessor") instances have one attribute: 

HTTPCookieProcessor.cookiejar[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPCookieProcessor.cookiejar "Link to this definition")
    
The [`http.cookiejar.CookieJar`](https://docs.python.org/3/library/http.cookiejar.html#http.cookiejar.CookieJar "http.cookiejar.CookieJar") in which cookies are stored.
## ProxyHandler Objects[¶](https://docs.python.org/3/library/urllib.request.html#proxyhandler-objects "Link to this heading") 

ProxyHandler.<protocol>_open(request)
    
The [`ProxyHandler`](https://docs.python.org/3/library/urllib.request.html#urllib.request.ProxyHandler "urllib.request.ProxyHandler") will have a method `<protocol>_open()` for every _protocol_ which has a proxy in the _proxies_ dictionary given in the constructor. The method will modify requests to go through the proxy, by calling `request.set_proxy()`, and call the next handler in the chain to actually execute the protocol.
## HTTPPasswordMgr Objects[¶](https://docs.python.org/3/library/urllib.request.html#httppasswordmgr-objects "Link to this heading")
These methods are available on [`HTTPPasswordMgr`](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPPasswordMgr "urllib.request.HTTPPasswordMgr") and [`HTTPPasswordMgrWithDefaultRealm`](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPPasswordMgrWithDefaultRealm "urllib.request.HTTPPasswordMgrWithDefaultRealm") objects. 

HTTPPasswordMgr.add_password(_realm_ , _uri_ , _user_ , _passwd_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPPasswordMgr.add_password "Link to this definition")
    
_uri_ can be either a single URI, or a sequence of URIs. _realm_ , _user_ and _passwd_ must be strings. This causes `(user, passwd)` to be used as authentication tokens when authentication for _realm_ and a super-URI of any of the given URIs is given.