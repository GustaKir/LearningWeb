Title: ElementTree Development and C API Changes in Python 2.7
URL: https://docs.python.org/3/whatsnew/2.7.html
Summary: Fredrik Lundh developed ElementTree and produced version 1.3, which was updated for inclusion in Python by Florent Xicluna following discussions on python-dev. The build process and C API saw changes, including GDB 7's ability to be scripted using Python, with contributions from Dave Malcolm offering useful debugging commands.
---

Fredrik Lundh develops ElementTree and produced the 1.3 version; you can read his article describing 1.3 at <https://web.archive.org/web/20200703234532/http://effbot.org/zone/elementtree-13-intro.htm>. Florent Xicluna updated the version included with Python, after discussions on python-dev and in [bpo-6472](https://bugs.python.org/issue?@action=redirect&bpo=6472).)
## Build and C API Changes[¶](https://docs.python.org/3/whatsnew/2.7.html#build-and-c-api-changes "Link to this heading")
Changes to Python’s build process and to the C API include:
  * The latest release of the GNU Debugger, GDB 7, can be [scripted using Python](https://web.archive.org/web/20110715084810/http://sourceware.org/gdb/current/onlinedocs/gdb/Python.html). When you begin debugging an executable program P, GDB will look for a file named `P-gdb.py` and automatically read it. Dave Malcolm contributed a `python-gdb.py` that adds a number of commands useful when debugging Python itself. For example, `py-up` and `py-down` go up or down one Python stack frame, which usually corresponds to several C stack frames. `py-print` prints the value of a Python variable, and `py-bt` prints the Python stack trace. (Added as a result of [bpo-8032](https://bugs.python.org/issue?@action=redirect&bpo=8032).)
  * If you use the `.gdbinit` file provided with Python, the “pyo” macro in the 2.7 version now works correctly when the thread being debugged doesn’t hold the GIL; the macro now acquires it before printing. (Contributed by Victor Stinner; [bpo-3632](https://bugs.python.org/issue?@action=redirect&bpo=3632).)
  * [`Py_AddPendingCall()`](https://docs.python.org/3/c-api/init.html#c.Py_AddPendingCall "Py_AddPendingCall") is now thread-safe, letting any worker thread submit notifications to the main Python thread. This is particularly useful for asynchronous IO operations. (Contributed by Kristján Valur Jónsson; [bpo-4293](https://bugs.python.org/issue?@action=redirect&bpo=4293).)
  * New function: [`PyCode_NewEmpty()`](https://docs.python.org/3/c-api/code.html#c.PyCode_NewEmpty "PyCode_NewEmpty") creates an empty code object; only the filename, function name, and first line number are required. This is useful for extension modules that are attempting to construct a more useful traceback stack. Previously such extensions needed to call `PyCode_New()`, which had many more arguments. (Added by Jeffrey Yasskin.)
  * New function: [`PyErr_NewExceptionWithDoc()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_NewExceptionWithDoc "PyErr_NewExceptionWithDoc") creates a new exception class, just as the existing [`PyErr_NewException()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_NewException "PyErr_NewException") does, but takes an extra `char *` argument containing the docstring for the new exception class. (Added by ‘lekma’ on the Python bug tracker; [bpo-7033](https://bugs.python.org/issue?@action=redirect&bpo=7033).)
  * New function: [`PyFrame_GetLineNumber()`](https://docs.python.org/3/c-api/frame.html#c.PyFrame_GetLineNumber "PyFrame_GetLineNumber") takes a frame object and returns the line number that the frame is currently executing. Previously code would need to get the index of the bytecode instruction currently executing, and then look up the line number corresponding to that address. (Added by Jeffrey Yasskin.)
  * New functions: [`PyLong_AsLongAndOverflow()`](https://docs.python.org/3/c-api/long.html#c.PyLong_AsLongAndOverflow "PyLong_AsLongAndOverflow") and [`PyLong_AsLongLongAndOverflow()`](https://docs.python.org/3/c-api/long.html#c.PyLong_AsLongLongAndOverflow "PyLong_AsLongLongAndOverflow") approximates a Python long integer as a C long or longlong. If the number is too large to fit into the output type, an _overflow_ flag is set and returned to the caller. (Contributed by Case Van Horsen; [bpo-7528](https://bugs.python.org/issue?@action=redirect&bpo=7528) and [bpo-7767](https://bugs.python.org/issue?@action=redirect&bpo=7767).)
  * New function: stemming from the rewrite of string-to-float conversion, a new [`PyOS_string_to_double()`](https://docs.python.org/3/c-api/conversion.html#c.PyOS_string_to_double "PyOS_string_to_double") function was added. The old `PyOS_ascii_strtod()` and `PyOS_ascii_atof()` functions are now deprecated.
  * New function: `PySys_SetArgvEx()` sets the value of `sys.argv` and can optionally update `sys.path` to include the directory containing the script named by `sys.argv[0]` depending on the value of an _updatepath_ parameter.
This function was added to close a security hole for applications that embed Python. The old function, `PySys_SetArgv()`, would always update `sys.path`, and sometimes it would add the current directory. This meant that, if you ran an application embedding Python in a directory controlled by someone else, attackers could put a Trojan-horse module in the directory (say, a file named `os.py`) that your application would then import and run.
If you maintain a C/C++ applicatio