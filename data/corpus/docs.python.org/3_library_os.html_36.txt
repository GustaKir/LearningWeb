Title: os.DirEntry Methods: inode and is_dir
URL: https://docs.python.org/3/library/os.html
Summary: The os.DirEntry methods 'inode()' and 'is_dir()' provide functionality to retrieve the inode number of a directory entry and to check if an entry is a directory or a symlink pointing to a directory, respectively. The results are cached in the os.DirEntry object, with variations based on symlink following behavior.
---

inode()[¶](https://docs.python.org/3/library/os.html#os.DirEntry.inode "Link to this definition")
    
Return the inode number of the entry.
The result is cached on the `os.DirEntry` object. Use `os.stat(entry.path, follow_symlinks=False).st_ino` to fetch up-to-date information.
On the first, uncached call, a system call is required on Windows but not on Unix. 

is_dir(_*_ , _follow_symlinks =True_)[¶](https://docs.python.org/3/library/os.html#os.DirEntry.is_dir "Link to this definition")
    
Return `True` if this entry is a directory or a symbolic link pointing to a directory; return `False` if the entry is or points to any other kind of file, or if it doesn’t exist anymore.
If _follow_symlinks_ is `False`, return `True` only if this entry is a directory (without following symlinks); return `False` if the entry is any other kind of file or if it doesn’t exist anymore.
The result is cached on the `os.DirEntry` object, with a separate cache for _follow_symlinks_ `True` and `False`. Call [`os.stat()`](https://docs.python.org/3/library/os.html#os.stat "os.stat") along with [`stat.S_ISDIR()`](https://docs.python.org/3/library/stat.html#stat.S_ISDIR "stat.S_ISDIR") to fetch up-to-date information.
On the first, uncached call, no system call is required in most cases. Specifically, for non-symlinks, neither Windows or Unix require a system call, except on certain Unix file systems, such as network file systems, that return `dirent.d_type == DT_UNKNOWN`. If the entry is a symlink, a system call will be required to follow the symlink unless _follow_symlinks_ is `False`.
This method can raise [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError"), such as [`PermissionError`](https://docs.python.org/3/library/exceptions.html#PermissionError "PermissionError"), but [`FileNotFoundError`](https://docs.python.org/3/library/exceptions.html#FileNotFoundError "FileNotFoundError") is caught and not raised. 

is_file(_*_ , _follow_symlinks =True_)[¶](https://docs.python.org/3/library/os.html#os.DirEntry.is_file "Link to this definition")
    
Return `True` if this entry is a file or a symbolic link pointing to a file; return `False` if the entry is or points to a directory or other non-file entry, or if it doesn’t exist anymore.
If _follow_symlinks_ is `False`, return `True` only if this entry is a file (without following symlinks); return `False` if the entry is a directory or other non-file entry, or if it doesn’t exist anymore.
The result is cached on the `os.DirEntry` object. Caching, system calls made, and exceptions raised are as per [`is_dir()`](https://docs.python.org/3/library/os.html#os.DirEntry.is_dir "os.DirEntry.is_dir"). 

is_symlink()[¶](https://docs.python.org/3/library/os.html#os.DirEntry.is_symlink "Link to this definition")
    
Return `True` if this entry is a symbolic link (even if broken); return `False` if the entry points to a directory or any kind of file, or if it doesn’t exist anymore.
The result is cached on the `os.DirEntry` object. Call [`os.path.islink()`](https://docs.python.org/3/library/os.path.html#os.path.islink "os.path.islink") to fetch up-to-date information.
On the first, uncached call, no system call is required in most cases. Specifically, neither Windows or Unix require a system call, except on certain Unix file systems, such as network file systems, that return `dirent.d_type == DT_UNKNOWN`.
This method can raise [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError"), such as [`PermissionError`](https://docs.python.org/3/library/exceptions.html#PermissionError "PermissionError"), but [`FileNotFoundError`](https://docs.python.org/3/library/exceptions.html#FileNotFoundError "FileNotFoundError") is caught and not raised. 

is_junction()[¶](https://docs.python.org/3/library/os.html#os.DirEntry.is_junction "Link to this definition")
    
Return `True` if this entry is a junction (even if broken); return `False` if the entry points to a regular directory, any kind of file, a symlink, or if it doesn’t exist anymore.
The result is cached on the `os.DirEntry` object. Call [`os.path.isjunction()`](https://docs.python.org/3/library/os.path.html#os.path.isjunction "os.path.isjunction") to fetch up-to-date information.
Added in version 3.12.