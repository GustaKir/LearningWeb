Title: Verbose Mode and Command-line Usage in Doctest
URL: https://docs.python.org/3/library/doctest.html
Summary: The chunk discusses how to control the verbosity of output in the `doctest.testmod()` function by using the `verbose` parameter and clarifies that command-line options like `-v` do not affect it. It also points out the command line shortcut for running `testmod()` and references sections for more detailed information about its usage.
---

```

and a detailed report of all examples tried is printed to standard output, along with assorted summaries at the end.
You can force verbose mode by passing `verbose=True` to [`testmod()`](https://docs.python.org/3/library/doctest.html#doctest.testmod "doctest.testmod"), or prohibit it by passing `verbose=False`. In either of those cases, `sys.argv` is not examined by [`testmod()`](https://docs.python.org/3/library/doctest.html#doctest.testmod "doctest.testmod") (so passing `-v` or not has no effect).
There is also a command line shortcut for running [`testmod()`](https://docs.python.org/3/library/doctest.html#doctest.testmod "doctest.testmod"), see section [Command-line Usage](https://docs.python.org/3/library/doctest.html#doctest-cli).
For more information on [`testmod()`](https://docs.python.org/3/library/doctest.html#doctest.testmod "doctest.testmod"), see section [Basic API](https://docs.python.org/3/library/doctest.html#doctest-basic-api).
## Simple Usage: Checking Examples in a Text File[¶](https://docs.python.org/3/library/doctest.html#simple-usage-checking-examples-in-a-text-file "Link to this heading")
Another simple application of doctest is testing interactive examples in a text file. This can be done with the [`testfile()`](https://docs.python.org/3/library/doctest.html#doctest.testfile "doctest.testfile") function:
```
importdoctest
doctest.testfile("example.txt")

```

That short script executes and verifies any interactive Python examples contained in the file `example.txt`. The file content is treated as if it were a single giant docstring; the file doesn’t need to contain a Python program! For example, perhaps `example.txt` contains this:
```
The ``example`` module
======================
Using ``factorial``
-------------------
This is an example text file in reStructuredText format. First import
``factorial`` from the ``example`` module:
  >>> from example import factorial
Now use it:
  >>> factorial(6)
  120

```

Running `doctest.testfile("example.txt")` then finds the error in this documentation:
```
File "./example.txt", line 14, in example.txt
Failed example:
  factorial(6)
Expected:
  120
Got:
  720

```

As with [`testmod()`](https://docs.python.org/3/library/doctest.html#doctest.testmod "doctest.testmod"), [`testfile()`](https://docs.python.org/3/library/doctest.html#doctest.testfile "doctest.testfile") won’t display anything unless an example fails. If an example does fail, then the failing example(s) and the cause(s) of the failure(s) are printed to stdout, using the same format as [`testmod()`](https://docs.python.org/3/library/doctest.html#doctest.testmod "doctest.testmod").
By default, [`testfile()`](https://docs.python.org/3/library/doctest.html#doctest.testfile "doctest.testfile") looks for files in the calling module’s directory. See section [Basic API](https://docs.python.org/3/library/doctest.html#doctest-basic-api) for a description of the optional arguments that can be used to tell it to look for files in other locations.
Like [`testmod()`](https://docs.python.org/3/library/doctest.html#doctest.testmod "doctest.testmod"), [`testfile()`](https://docs.python.org/3/library/doctest.html#doctest.testfile "doctest.testfile")’s verbosity can be set with the `-v` command-line switch or with the optional keyword argument _verbose_.
There is also a command line shortcut for running [`testfile()`](https://docs.python.org/3/library/doctest.html#doctest.testfile "doctest.testfile"), see section [Command-line Usage](https://docs.python.org/3/library/doctest.html#doctest-cli).
For more information on [`testfile()`](https://docs.python.org/3/library/doctest.html#doctest.testfile "doctest.testfile"), see section [Basic API](https://docs.python.org/3/library/doctest.html#doctest-basic-api).
## Command-line Usage[¶](https://docs.python.org/3/library/doctest.html#command-line-usage "Link to this heading")
The [`doctest`](https://docs.python.org/3/library/doctest.html#module-doctest "doctest: Test pieces of code within docstrings.") module can be invoked as a script from the command line:
```
python-mdoctest[-v][-oOPTION][-f]file[file...]

```


-v, --verbose[¶](https://docs.python.org/3/library/doctest.html#cmdoption-doctest-v "Link to this definition")
    
Detailed report of all examples tried is printed to standard output, along with assorted summaries at the end:
```
python -m doctest -v example.py

```

This will import `example.py` as a standalone module and run [`testmod()`](https://docs.python.org/3/library/doctest.html#doctest.testmod "doctest.testmod") on it. Note that this may not work correctly if the file is part of a package and imports other submodules from that package.
If the file name does not end with `.py`, `doctest` infers that it must be run with [`testfile()`](https://docs.python.org/3/library/doctest.html#doctest.testfile "doctest.testfile") instead:
```
python -m doctest -v example.txt