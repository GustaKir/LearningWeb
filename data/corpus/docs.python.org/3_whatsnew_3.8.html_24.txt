Title: Python 3.8 - Asyncio Enhancements
URL: https://docs.python.org/3/whatsnew/3.8.html
Summary: This section highlights new and updated asyncio features in Python 3.8, including various synchronization primitives like `asyncio.Lock`, `asyncio.Event`, and `asyncio.Queue`, as well as subprocess creation functions such as `asyncio.create_subprocess_exec()` and `asyncio.create_subprocess_shell()`.
---

ask.html#asyncio.Task "asyncio.Task"), [`asyncio.Lock`](https://docs.python.org/3/library/asyncio-sync.html#asyncio.Lock "asyncio.Lock"), [`asyncio.Event`](https://docs.python.org/3/library/asyncio-sync.html#asyncio.Event "asyncio.Event"), [`asyncio.Condition`](https://docs.python.org/3/library/asyncio-sync.html#asyncio.Condition "asyncio.Condition"), [`asyncio.Semaphore`](https://docs.python.org/3/library/asyncio-sync.html#asyncio.Semaphore "asyncio.Semaphore"), [`asyncio.BoundedSemaphore`](https://docs.python.org/3/library/asyncio-sync.html#asyncio.BoundedSemaphore "asyncio.BoundedSemaphore"), [`asyncio.Queue`](https://docs.python.org/3/library/asyncio-queue.html#asyncio.Queue "asyncio.Queue"), [`asyncio.create_subprocess_exec()`](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec "asyncio.create_subprocess_exec"), and [`asyncio.create_subprocess_shell()`](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_shell "asyncio.create_subprocess_shell").
  * The explicit passing of coroutine objects to [`asyncio.wait()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.wait "asyncio.wait") has been deprecated and will be removed in version 3.11. (Contributed by Yury Selivanov in [bpo-34790](https://bugs.python.org/issue?@action=redirect&bpo=34790).)
  * The following functions and methods are deprecated in the [`gettext`](https://docs.python.org/3/library/gettext.html#module-gettext "gettext: Multilingual internationalization services.") module: `lgettext()`, `ldgettext()`, `lngettext()` and `ldngettext()`. They return encoded bytes, and it’s possible that you will get unexpected Unicode-related exceptions if there are encoding problems with the translated strings. It’s much better to use alternatives which return Unicode strings in Python 3. These functions have been broken for a long time.
Function `bind_textdomain_codeset()`, methods `output_charset()` and `set_output_charset()`, and the _codeset_ parameter of functions [`translation()`](https://docs.python.org/3/library/gettext.html#gettext.translation "gettext.translation") and [`install()`](https://docs.python.org/3/library/gettext.html#gettext.install "gettext.install") are also deprecated, since they are only used for the `l*gettext()` functions. (Contributed by Serhiy Storchaka in [bpo-33710](https://bugs.python.org/issue?@action=redirect&bpo=33710).)
  * The `isAlive()` method of [`threading.Thread`](https://docs.python.org/3/library/threading.html#threading.Thread "threading.Thread") has been deprecated. (Contributed by Donghee Na in [bpo-35283](https://bugs.python.org/issue?@action=redirect&bpo=35283).)
  * Many builtin and extension functions that take integer arguments will now emit a deprecation warning for [`Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal")s, [`Fraction`](https://docs.python.org/3/library/fractions.html#fractions.Fraction "fractions.Fraction")s and any other objects that can be converted to integers only with a loss (e.g. that have the [`__int__()`](https://docs.python.org/3/reference/datamodel.html#object.__int__ "object.__int__") method but do not have the [`__index__()`](https://docs.python.org/3/reference/datamodel.html#object.__index__ "object.__index__") method). In future version they will be errors.