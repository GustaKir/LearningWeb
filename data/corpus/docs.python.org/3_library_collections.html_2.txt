Title: ChainMap.new_child Method
URL: https://docs.python.org/3/library/collections.html
Summary: The `new_child` method of `ChainMap` creates a new ChainMap with a new map at the front, followed by existing maps. It allows for subcontext creation and can accept an optional map and keyword arguments for updates. Introduced in Python 3.4 with additional keyword support in 3.10.
---

new_child(_m =None_, _** kwargs_)[¶](https://docs.python.org/3/library/collections.html#collections.ChainMap.new_child "Link to this definition")
    
Returns a new [`ChainMap`](https://docs.python.org/3/library/collections.html#collections.ChainMap "collections.ChainMap") containing a new map followed by all of the maps in the current instance. If `m` is specified, it becomes the new map at the front of the list of mappings; if not specified, an empty dict is used, so that a call to `d.new_child()` is equivalent to: `ChainMap({}, *d.maps)`. If any keyword arguments are specified, they update passed map or new empty dict. This method is used for creating subcontexts that can be updated without altering values in any of the parent mappings.
Changed in version 3.4: The optional `m` parameter was added.
Changed in version 3.10: Keyword arguments support was added. 

parents[¶](https://docs.python.org/3/library/collections.html#collections.ChainMap.parents "Link to this definition")
    
Property returning a new [`ChainMap`](https://docs.python.org/3/library/collections.html#collections.ChainMap "collections.ChainMap") containing all of the maps in the current instance except the first one. This is useful for skipping the first map in the search. Use cases are similar to those for the [`nonlocal`](https://docs.python.org/3/reference/simple_stmts.html#nonlocal) keyword used in [nested scopes](https://docs.python.org/3/glossary.html#term-nested-scope). The use cases also parallel those for the built-in [`super()`](https://docs.python.org/3/library/functions.html#super "super") function. A reference to `d.parents` is equivalent to: `ChainMap(*d.maps[1:])`.
Note, the iteration order of a [`ChainMap`](https://docs.python.org/3/library/collections.html#collections.ChainMap "collections.ChainMap") is determined by scanning the mappings last to first:
>>>```
>>> baseline = {'music': 'bach', 'art': 'rembrandt'}
>>> adjustments = {'art': 'van gogh', 'opera': 'carmen'}
>>> list(ChainMap(adjustments, baseline))
['music', 'art', 'opera']

```

This gives the same ordering as a series of [`dict.update()`](https://docs.python.org/3/library/stdtypes.html#dict.update "dict.update") calls starting with the last mapping:
>>>```
>>> combined = baseline.copy()
>>> combined.update(adjustments)
>>> list(combined)
['music', 'art', 'opera']

```

Changed in version 3.9: Added support for `|` and `|=` operators, specified in [**PEP 584**](https://peps.python.org/pep-0584/).
See also
  * The [MultiContext class](https://github.com/enthought/codetools/blob/4.0.0/codetools/contexts/multi_context.py) in the Enthought [CodeTools package](https://github.com/enthought/codetools) has options to support writing to any mapping in the chain.
  * Django’s [Context class](https://github.com/django/django/blob/main/django/template/context.py) for templating is a read-only chain of mappings. It also features pushing and popping of contexts similar to the [`new_child()`](https://docs.python.org/3/library/collections.html#collections.ChainMap.new_child "collections.ChainMap.new_child") method and the [`parents`](https://docs.python.org/3/library/collections.html#collections.ChainMap.parents "collections.ChainMap.parents") property.
  * The [Nested Contexts recipe](https://code.activestate.com/recipes/577434-nested-contexts-a-chain-of-mapping-objects/) has options to control whether writes and other mutations apply only to the first mapping or to any mapping in the chain.
  * A [greatly simplified read-only version of Chainmap](https://code.activestate.com/recipes/305268/).


### [`ChainMap`](https://docs.python.org/3/library/collections.html#collections.ChainMap "collections.ChainMap") Examples and Recipes[¶](https://docs.python.org/3/library/collections.html#chainmap-examples-and-recipes "Link to this heading")
This section shows various approaches to working with chained maps.
Example of simulating Python’s internal lookup chain:
```
importbuiltins
pylookup = ChainMap(locals(), globals(), vars(builtins))

```

Example of letting user specified command-line arguments take precedence over environment variables which in turn take precedence over default values:
```
importos,argparse
defaults = {'color': 'red', 'user': 'guest'}
parser = argparse.ArgumentParser()
parser.add_argument('-u', '--user')
parser.add_argument('-c', '--color')
namespace = parser.parse_args()
command_line_args = {k: v for k, v in vars(namespace).items() if v is not None}
combined = ChainMap(command_line_args, os.environ, defaults)
print(combined['color'])
print(combined['user'])

```

Example patterns for using the [`ChainMap`](https://docs.python.org/3/library/collections.html#collections.ChainMap "collections.ChainMap") class to simulate nested contexts: