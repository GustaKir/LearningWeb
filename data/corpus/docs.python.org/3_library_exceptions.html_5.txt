Title: File-related Exceptions in Python
URL: https://docs.python.org/3/library/exceptions.html
Summary: This section describes the attributes of exceptions related to file system paths, specifically focusing on `filename` and `filename2`, which represent the file names passed to functions like `open()` and `os.rename()`. It also notes a change in version 3.3 regarding the relationship of these exceptions.
---

filename2[¶](https://docs.python.org/3/library/exceptions.html#OSError.filename2 "Link to this definition")
    
For exceptions that involve a file system path (such as [`open()`](https://docs.python.org/3/library/functions.html#open "open") or [`os.unlink()`](https://docs.python.org/3/library/os.html#os.unlink "os.unlink")), [`filename`](https://docs.python.org/3/library/exceptions.html#OSError.filename "OSError.filename") is the file name passed to the function. For functions that involve two file system paths (such as [`os.rename()`](https://docs.python.org/3/library/os.html#os.rename "os.rename")), [`filename2`](https://docs.python.org/3/library/exceptions.html#OSError.filename2 "OSError.filename2") corresponds to the second file name passed to the function.
Changed in version 3.3: [`EnvironmentError`](https://docs.python.org/3/library/exceptions.html#EnvironmentError "EnvironmentError"), [`IOError`](https://docs.python.org/3/library/exceptions.html#IOError "IOError"), [`WindowsError`](https://docs.python.org/3/library/exceptions.html#WindowsError "WindowsError"), [`socket.error`](https://docs.python.org/3/library/socket.html#socket.error "socket.error"), [`select.error`](https://docs.python.org/3/library/select.html#select.error "select.error") and `mmap.error` have been merged into [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError"), and the constructor may return a subclass.
Changed in version 3.4: The [`filename`](https://docs.python.org/3/library/exceptions.html#OSError.filename "OSError.filename") attribute is now the original file name passed to the function, instead of the name encoded to or decoded from the [filesystem encoding and error handler](https://docs.python.org/3/glossary.html#term-filesystem-encoding-and-error-handler). Also, the _filename2_ constructor argument and attribute was added. 

_exception_ OverflowError[¶](https://docs.python.org/3/library/exceptions.html#OverflowError "Link to this definition")
    
Raised when the result of an arithmetic operation is too large to be represented. This cannot occur for integers (which would rather raise [`MemoryError`](https://docs.python.org/3/library/exceptions.html#MemoryError "MemoryError") than give up). However, for historical reasons, OverflowError is sometimes raised for integers that are outside a required range. Because of the lack of standardization of floating-point exception handling in C, most floating-point operations are not checked. 

_exception_ PythonFinalizationError[¶](https://docs.python.org/3/library/exceptions.html#PythonFinalizationError "Link to this definition")
    
This exception is derived from [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError"). It is raised when an operation is blocked during interpreter shutdown also known as [Python finalization](https://docs.python.org/3/glossary.html#term-interpreter-shutdown).
Examples of operations which can be blocked with a [`PythonFinalizationError`](https://docs.python.org/3/library/exceptions.html#PythonFinalizationError "PythonFinalizationError") during the Python finalization:
  * Creating a new Python thread.
  * [`os.fork()`](https://docs.python.org/3/library/os.html#os.fork "os.fork").


See also the [`sys.is_finalizing()`](https://docs.python.org/3/library/sys.html#sys.is_finalizing "sys.is_finalizing") function.
Added in version 3.13: Previously, a plain [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError") was raised. 

_exception_ RecursionError[¶](https://docs.python.org/3/library/exceptions.html#RecursionError "Link to this definition")
    
This exception is derived from [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError"). It is raised when the interpreter detects that the maximum recursion depth (see [`sys.getrecursionlimit()`](https://docs.python.org/3/library/sys.html#sys.getrecursionlimit "sys.getrecursionlimit")) is exceeded.
Added in version 3.5: Previously, a plain [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError") was raised. 

_exception_ ReferenceError[¶](https://docs.python.org/3/library/exceptions.html#ReferenceError "Link to this definition")
    
This exception is raised when a weak reference proxy, created by the [`weakref.proxy()`](https://docs.python.org/3/library/weakref.html#weakref.proxy "weakref.proxy") function, is used to access an attribute of the referent after it has been garbage collected. For more information on weak references, see the [`weakref`](https://docs.python.org/3/library/weakref.html#module-weakref "weakref: Support for weak references and weak dictionaries.") module.