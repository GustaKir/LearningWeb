Title: Random Number Generation in Python
URL: https://docs.python.org/3/library/random.html
Summary: The `random` module provides functions for generating pseudo-random numbers across various distributions, including uniform selection for integers and sequences, random permutations, and sampling without replacement. It also offers functions for different distributions like normal, lognormal, and von Mises. The core function is `random()`, which generates a random float in the range 0.0 to less than 1.0.
---

# `random` — Generate pseudo-random numbers[¶](https://docs.python.org/3/library/random.html#module-random "Link to this heading")
**Source code:** [Lib/random.py](https://github.com/python/cpython/tree/3.13/Lib/random.py)
This module implements pseudo-random number generators for various distributions.
For integers, there is uniform selection from a range. For sequences, there is uniform selection of a random element, a function to generate a random permutation of a list in-place, and a function for random sampling without replacement.
On the real line, there are functions to compute uniform, normal (Gaussian), lognormal, negative exponential, gamma, and beta distributions. For generating distributions of angles, the von Mises distribution is available.
Almost all module functions depend on the basic function [`random()`](https://docs.python.org/3/library/random.html#random.random "random.random"), which generates a random float uniformly in the half-open range `0.0 <= X < 1.0`. Python uses the Mersenne Twister as the core generator. It produces 53-bit precision floats and has a period of 2**19937-1. The underlying implementation in C is both fast and threadsafe. The Mersenne Twister is one of the most extensively tested random number generators in existence. However, being completely deterministic, it is not suitable for all purposes, and is completely unsuitable for cryptographic purposes.
The functions supplied by this module are actually bound methods of a hidden instance of the [`random.Random`](https://docs.python.org/3/library/random.html#random.Random "random.Random") class. You can instantiate your own instances of [`Random`](https://docs.python.org/3/library/random.html#random.Random "random.Random") to get generators that don’t share state.
Class [`Random`](https://docs.python.org/3/library/random.html#random.Random "random.Random") can also be subclassed if you want to use a different basic generator of your own devising: see the documentation on that class for more details.
The [`random`](https://docs.python.org/3/library/random.html#module-random "random: Generate pseudo-random numbers with various common distributions.") module also provides the [`SystemRandom`](https://docs.python.org/3/library/random.html#random.SystemRandom "random.SystemRandom") class which uses the system function [`os.urandom()`](https://docs.python.org/3/library/os.html#os.urandom "os.urandom") to generate random numbers from sources provided by the operating system.
Warning
The pseudo-random generators of this module should not be used for security purposes. For security or cryptographic uses, see the [`secrets`](https://docs.python.org/3/library/secrets.html#module-secrets "secrets: Generate secure random numbers for managing secrets.") module.
See also
M. Matsumoto and T. Nishimura, “Mersenne Twister: A 623-dimensionally equidistributed uniform pseudorandom number generator”, ACM Transactions on Modeling and Computer Simulation Vol. 8, No. 1, January pp.3–30 1998.
[Complementary-Multiply-with-Carry recipe](https://code.activestate.com/recipes/576707-long-period-random-number-generator/) for a compatible alternative random number generator with a long period and comparatively simple update operations.
Note
The global random number generator and instances of [`Random`](https://docs.python.org/3/library/random.html#random.Random "random.Random") are thread-safe. However, in the free-threaded build, concurrent calls to the global generator or to the same instance of [`Random`](https://docs.python.org/3/library/random.html#random.Random "random.Random") may encounter contention and poor performance. Consider using separate instances of [`Random`](https://docs.python.org/3/library/random.html#random.Random "random.Random") per thread instead.
## Bookkeeping functions[¶](https://docs.python.org/3/library/random.html#bookkeeping-functions "Link to this heading")