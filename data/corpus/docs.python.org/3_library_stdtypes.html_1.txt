Title: Python Standard Types Documentation
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This section of the Python documentation outlines various standard types, including code objects, type objects, and special objects such as None, Ellipsis, and NotImplemented. It also discusses special attributes and the limitations of integer string conversion, including affected APIs and configuration recommendations.
---

thon.org/3/library/stdtypes.html#code-objects)
      * [Type Objects](https://docs.python.org/3/library/stdtypes.html#type-objects)
      * [The Null Object](https://docs.python.org/3/library/stdtypes.html#the-null-object)
      * [The Ellipsis Object](https://docs.python.org/3/library/stdtypes.html#the-ellipsis-object)
      * [The NotImplemented Object](https://docs.python.org/3/library/stdtypes.html#the-notimplemented-object)
      * [Internal Objects](https://docs.python.org/3/library/stdtypes.html#internal-objects)
    * [Special Attributes](https://docs.python.org/3/library/stdtypes.html#special-attributes)
    * [Integer string conversion length limitation](https://docs.python.org/3/library/stdtypes.html#integer-string-conversion-length-limitation)
      * [Affected APIs](https://docs.python.org/3/library/stdtypes.html#affected-apis)
      * [Configuring the limit](https://docs.python.org/3/library/stdtypes.html#configuring-the-limit)
      * [Recommended configuration](https://docs.python.org/3/library/stdtypes.html#recommended-configuration)


#### Previous topic
[Built-in Constants](https://docs.python.org/3/library/constants.html "previous chapter")
#### Next topic
[Built-in Exceptions](https://docs.python.org/3/library/exceptions.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/stdtypes.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/exceptions.html "Built-in Exceptions") |
  * [previous](https://docs.python.org/3/library/constants.html "Built-in Constants") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Built-in Types](https://docs.python.org/3/library/stdtypes.html)
  * | 
  * Theme  Auto Light Dark |


# Built-in Types[¶](https://docs.python.org/3/library/stdtypes.html#built-in-types "Link to this heading")
The following sections describe the standard types that are built into the interpreter.
The principal built-in types are numerics, sequences, mappings, classes, instances and exceptions.
Some collection classes are mutable. The methods that add, subtract, or rearrange their members in place, and don’t return a specific item, never return the collection instance itself but `None`.
Some operations are supported by several object types; in particular, practically all objects can be compared for equality, tested for truth value, and converted to a string (with the [`repr()`](https://docs.python.org/3/library/functions.html#repr "repr") function or the slightly different [`str()`](https://docs.python.org/3/library/stdtypes.html#str "str") function). The latter function is implicitly used when an object is written by the [`print()`](https://docs.python.org/3/library/functions.html#print "print") function.
## Truth Value Testing[¶](https://docs.python.org/3/library/stdtypes.html#truth-value-testing "Link to this heading")
Any object can be tested for truth value, for use in an [`if`](https://docs.python.org/3/reference/compound_stmts.html#if) or [`while`](https://docs.python.org/3/reference/compound_stmts.html#while) condition or as operand of the Boolean operations below.
By default, an object is considered true unless its class defines either a [`__bool__()`](https://docs.python.org/3/reference/datamodel.html#object.__bool__ "object.__bool__") method that returns `False` or a [`__len__()`](https://docs.python.org/3/reference/datamodel.html#object.__len__ "object.__len__") method that returns zero, when called with the object. [[1]](https://docs.python.org/3/library/stdtypes.html#id12) Here are most of the built-in objects considered false:
  * constants defined to be false: `None` and `False`
  * zero of any numeric type: `0`, `0.0`, `0j`, `Decimal(0)`, `Fraction(0, 1)`
  * empty sequences and collections: `''`, `()`, `[]`, `{}`, `set()`, `range(0)`