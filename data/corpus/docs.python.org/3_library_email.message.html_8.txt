Title: Handling Message Parts in Python's Email Library
URL: https://docs.python.org/3/library/email.message.html
Summary: This section explains how the `is_multipart()` method operates on message parts in Python's email library and describes the `get_body()` method, which retrieves the most suitable MIME part for the message body based on a specified preference list of content types (related, html, plain). It also outlines how to identify candidate matches and the significance of the `multipart/related` type.
---

```

Here the `message` parts are not `multiparts`, but they do contain subparts. `is_multipart()` returns `True` and `walk` descends into the subparts. 

get_body(_preferencelist =('related', 'html', 'plain')_)[¶](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.get_body "Link to this definition")
    
Return the MIME part that is the best candidate to be the “body” of the message.
_preferencelist_ must be a sequence of strings from the set `related`, `html`, and `plain`, and indicates the order of preference for the content type of the part returned.
Start looking for candidate matches with the object on which the `get_body` method is called.
If `related` is not included in _preferencelist_ , consider the root part (or subpart of the root part) of any related encountered as a candidate if the (sub-)part matches a preference.
When encountering a `multipart/related`, check the `start` parameter and if a part with a matching _Content-ID_ is found, consider only it when looking for candidate matches. Otherwise consider only the first (default root) part of the `multipart/related`.
If a part has a _Content-Disposition_ header, only consider the part a candidate match if the value of the header is `inline`.
If none of the candidates matches any of the preferences in _preferencelist_ , return `None`.
Notes: (1) For most applications the only _preferencelist_ combinations that really make sense are `('plain',)`, `('html', 'plain')`, and the default `('related', 'html', 'plain')`. (2) Because matching starts with the object on which `get_body` is called, calling `get_body` on a `multipart/related` will return the object itself unless _preferencelist_ has a non-default value. (3) Messages (or message parts) that do not specify a _Content-Type_ or whose _Content-Type_ header is invalid will be treated as if they are of type `text/plain`, which may occasionally cause `get_body` to return unexpected results. 

iter_attachments()[¶](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.iter_attachments "Link to this definition")
    
Return an iterator over all of the immediate sub-parts of the message that are not candidate “body” parts. That is, skip the first occurrence of each of `text/plain`, `text/html`, `multipart/related`, or `multipart/alternative` (unless they are explicitly marked as attachments via _Content-Disposition: attachment_), and return all remaining parts. When applied directly to a `multipart/related`, return an iterator over the all the related parts except the root part (ie: the part pointed to by the `start` parameter, or the first part if there is no `start` parameter or the `start` parameter doesn’t match the _Content-ID_ of any of the parts). When applied directly to a `multipart/alternative` or a non-`multipart`, return an empty iterator. 

iter_parts()[¶](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.iter_parts "Link to this definition")
    
Return an iterator over all of the immediate sub-parts of the message, which will be empty for a non-`multipart`. (See also [`walk()`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.walk "email.message.EmailMessage.walk").) 

get_content(_* args_, _content_manager =None_, _** kw_)[¶](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.get_content "Link to this definition")
    
Call the [`get_content()`](https://docs.python.org/3/library/email.contentmanager.html#email.contentmanager.ContentManager.get_content "email.contentmanager.ContentManager.get_content") method of the _content_manager_ , passing self as the message object, and passing along any other arguments or keywords as additional arguments. If _content_manager_ is not specified, use the `content_manager` specified by the current [`policy`](https://docs.python.org/3/library/email.policy.html#module-email.policy "email.policy: Controlling the parsing and generating of messages"). 

set_content(_* args_, _content_manager =None_, _** kw_)[¶](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.set_content "Link to this definition")
    
Call the [`set_content()`](https://docs.python.org/3/library/email.contentmanager.html#email.contentmanager.ContentManager.set_content "email.contentmanager.ContentManager.set_content") method of the _content_manager_ , passing self as the message object, and passing along any other arguments or keywords as additional arguments. If _content_manager_ is not specified, use the `content_manager` specified by the current [`policy`](https://docs.python.org/3/library/email.policy.html#module-email.policy "email.policy: Controlling the parsing and generating of messages").