Title: csv.DictWriter Class
URL: https://docs.python.org/3/library/csv.html
Summary: The csv.DictWriter class in Python creates objects that map dictionaries onto output rows in a CSV file. The fieldnames parameter defines the keys that determine the order of values from the dictionary written to the file. Optional parameters include restval for default values when keys are missing and extrasaction for handling unexpected keys.
---

```


_class_ csv.DictWriter(_f_ , _fieldnames_ , _restval =''_, _extrasaction ='raise'_, _dialect ='excel'_, _* args_, _** kwds_)[¶](https://docs.python.org/3/library/csv.html#csv.DictWriter "Link to this definition")
    
Create an object which operates like a regular writer but maps dictionaries onto output rows. The _fieldnames_ parameter is a [`sequence`](https://docs.python.org/3/library/collections.abc.html#module-collections.abc "collections.abc: Abstract base classes for containers") of keys that identify the order in which values in the dictionary passed to the [`writerow()`](https://docs.python.org/3/library/csv.html#csv.csvwriter.writerow "csv.csvwriter.writerow") method are written to file _f_. The optional _restval_ parameter specifies the value to be written if the dictionary is missing a key in _fieldnames_. If the dictionary passed to the [`writerow()`](https://docs.python.org/3/library/csv.html#csv.csvwriter.writerow "csv.csvwriter.writerow") method contains a key not found in _fieldnames_ , the optional _extrasaction_ parameter indicates what action to take. If it is set to `'raise'`, the default value, a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised. If it is set to `'ignore'`, extra values in the dictionary are ignored. Any other optional or keyword arguments are passed to the underlying [`writer`](https://docs.python.org/3/library/csv.html#csv.writer "csv.writer") instance.
Note that unlike the [`DictReader`](https://docs.python.org/3/library/csv.html#csv.DictReader "csv.DictReader") class, the _fieldnames_ parameter of the [`DictWriter`](https://docs.python.org/3/library/csv.html#csv.DictWriter "csv.DictWriter") class is not optional.
If the argument passed to _fieldnames_ is an iterator, it will be coerced to a [`list`](https://docs.python.org/3/library/stdtypes.html#list "list").
A short usage example:
```
importcsv
with open('names.csv', 'w', newline='') as csvfile:
  fieldnames = ['first_name', 'last_name']
  writer = csv.DictWriter(csvfile, fieldnames=fieldnames)
  writer.writeheader()
  writer.writerow({'first_name': 'Baked', 'last_name': 'Beans'})
  writer.writerow({'first_name': 'Lovely', 'last_name': 'Spam'})
  writer.writerow({'first_name': 'Wonderful', 'last_name': 'Spam'})

```


_class_ csv.Dialect[¶](https://docs.python.org/3/library/csv.html#csv.Dialect "Link to this definition")
    
The [`Dialect`](https://docs.python.org/3/library/csv.html#csv.Dialect "csv.Dialect") class is a container class whose attributes contain information for how to handle doublequotes, whitespace, delimiters, etc. Due to the lack of a strict CSV specification, different applications produce subtly different CSV data. [`Dialect`](https://docs.python.org/3/library/csv.html#csv.Dialect "csv.Dialect") instances define how [`reader`](https://docs.python.org/3/library/csv.html#csv.reader "csv.reader") and [`writer`](https://docs.python.org/3/library/csv.html#csv.writer "csv.writer") instances behave.
All available [`Dialect`](https://docs.python.org/3/library/csv.html#csv.Dialect "csv.Dialect") names are returned by [`list_dialects()`](https://docs.python.org/3/library/csv.html#csv.list_dialects "csv.list_dialects"), and they can be registered with specific [`reader`](https://docs.python.org/3/library/csv.html#csv.reader "csv.reader") and [`writer`](https://docs.python.org/3/library/csv.html#csv.writer "csv.writer") classes through their initializer (`__init__`) functions like this:
```
importcsv
with open('students.csv', 'w', newline='') as csvfile:
  writer = csv.writer(csvfile, dialect='unix')