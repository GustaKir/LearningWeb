Title: Python Glossary: Key Terms Explained
URL: https://docs.python.org/3/glossary.html
Summary: This section provides definitions for key Python concepts such as garbage collection, which involves freeing unused memory through reference counting and a cyclic garbage collector, and generators, which are functions that yield multiple values to produce a generator iterator.
---

```
>>> import__future__
>>> __future__.division
_Feature((2, 2, 0, 'alpha', 2), (3, 0, 0, 'alpha', 0), 8192)

```


garbage collection[¶](https://docs.python.org/3/glossary.html#term-garbage-collection "Link to this term")
    
The process of freeing memory when it is not used anymore. Python performs garbage collection via reference counting and a cyclic garbage collector that is able to detect and break reference cycles. The garbage collector can be controlled using the [`gc`](https://docs.python.org/3/library/gc.html#module-gc "gc: Interface to the cycle-detecting garbage collector.") module. 

generator[¶](https://docs.python.org/3/glossary.html#term-generator "Link to this term")
    
A function which returns a [generator iterator](https://docs.python.org/3/glossary.html#term-generator-iterator). It looks like a normal function except that it contains [`yield`](https://docs.python.org/3/reference/simple_stmts.html#yield) expressions for producing a series of values usable in a for-loop or that can be retrieved one at a time with the [`next()`](https://docs.python.org/3/library/functions.html#next "next") function.
Usually refers to a generator function, but may refer to a _generator iterator_ in some contexts. In cases where the intended meaning isn’t clear, using the full terms avoids ambiguity. 

generator iterator[¶](https://docs.python.org/3/glossary.html#term-generator-iterator "Link to this term")
    
An object created by a [generator](https://docs.python.org/3/glossary.html#term-generator) function.
Each [`yield`](https://docs.python.org/3/reference/simple_stmts.html#yield) temporarily suspends processing, remembering the execution state (including local variables and pending try-statements). When the _generator iterator_ resumes, it picks up where it left off (in contrast to functions which start fresh on every invocation). 

generator expression[¶](https://docs.python.org/3/glossary.html#term-generator-expression "Link to this term")
    
An [expression](https://docs.python.org/3/glossary.html#term-expression) that returns an [iterator](https://docs.python.org/3/glossary.html#term-iterator). It looks like a normal expression followed by a `for` clause defining a loop variable, range, and an optional `if` clause. The combined expression generates values for an enclosing function:
>>>```
>>> sum(i*i for i in range(10))     # sum of squares 0, 1, 4, ... 81
285