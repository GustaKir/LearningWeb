Title: Using Python on Windows with Shebang Lines
URL: https://docs.python.org/3/using/windows.html
Summary: The document outlines how to use the Python launcher on Windows, including compatibility with Unix scripts via shebang lines. It explains how to specify Python versions, including 32-bit and 64-bit options, especially with the introduction of version 3.7, while also noting that an active virtual environment takes priority over version specifications.
---

```

The default Python or an active virtual environment will be located and used. As many Python scripts written to work on Unix will already have this line, you should find these scripts can be used by the launcher without modification. If you are writing a new script on Windows which you hope will be useful on Unix, you should use one of the shebang lines starting with `/usr`.
Any of the above virtual commands can be suffixed with an explicit version (either just the major version, or the major and minor version). Furthermore the 32-bit version can be requested by adding “-32” after the minor version. I.e. `/usr/bin/python3.7-32` will request usage of the 32-bit Python 3.7. If a virtual environment is active, the version will be ignored and the environment will be used.
Added in version 3.7: Beginning with python launcher 3.7 it is possible to request 64-bit version by the “-64” suffix. Furthermore it is possible to specify a major and architecture without minor (i.e. `/usr/bin/python3-64`).
Changed in version 3.11: The “-64” suffix is deprecated, and now implies “any architecture that is not provably i386/32-bit”. To request a specific environment, use the new `-V:_TAG_`argument with the complete tag.
Changed in version 3.13: Virtual commands referencing `python` now prefer an active virtual environment rather than searching `PATH`. This handles cases where the shebang specifies `/usr/bin/env python3` but `python3.exe` is not present in the active environment.
The `/usr/bin/env` form of shebang line has one further special property. Before looking for installed Python interpreters, this form will search the executable `PATH` for a Python executable matching the name provided as the first argument. This corresponds to the behaviour of the Unix `env` program, which performs a `PATH` search. If an executable matching the first argument after the `env` command cannot be found, but the argument starts with `python`, it will be handled as described for the other virtual commands. The environment variable `PYLAUNCHER_NO_SEARCH_PATH` may be set (to any value) to skip this search of `PATH`.
Shebang lines that do not match any of these patterns are looked up in the `[commands]` section of the launcher’s [.INI file](https://docs.python.org/3/using/windows.html#launcher-ini). This may be used to handle certain commands in a way that makes sense for your system. The name of the command must be a single argument (no spaces in the shebang executable), and the value substituted is the full path to the executable (additional arguments specified in the .INI will be quoted as part of the filename).
```
[commands]
/bin/xpython=C:\Program Files\XPython\python.exe

```

Any commands not found in the .INI file are treated as **Windows** executable paths that are absolute or relative to the directory containing the script file. This is a convenience for Windows-only scripts, such as those generated by an installer, since the behavior is not compatible with Unix-style shells. These paths may be quoted, and may include multiple arguments, after which the path to the script and any additional arguments will be appended.
### 4.8.3. Arguments in shebang lines[¶](https://docs.python.org/3/using/windows.html#arguments-in-shebang-lines "Link to this heading")
The shebang lines can also specify additional options to be passed to the Python interpreter. For example, if you have a shebang line:
```
#! /usr/bin/python -v