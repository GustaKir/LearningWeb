Title: Equality Comparison of Range Objects in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: Range objects in Python are compared for equality based on the sequence of values they represent, meaning two ranges can be equal even with different start, stop, and step values. Changes made in versions 3.2 and 3.3 improved the comparison behavior and enhanced functionality by implementing the Sequence ABC and enabling constant-time membership tests.
---

```

Testing range objects for equality with `==` and `!=` compares them as sequences. That is, two range objects are considered equal if they represent the same sequence of values. (Note that two range objects that compare equal might have different [`start`](https://docs.python.org/3/library/stdtypes.html#range.start "range.start"), [`stop`](https://docs.python.org/3/library/stdtypes.html#range.stop "range.stop") and [`step`](https://docs.python.org/3/library/stdtypes.html#range.step "range.step") attributes, for example `range(0) == range(2, 1, 3)` or `range(0, 3, 2) == range(0, 4, 2)`.)
Changed in version 3.2: Implement the Sequence ABC. Support slicing and negative indices. Test [`int`](https://docs.python.org/3/library/functions.html#int "int") objects for membership in constant time instead of iterating through all items.
Changed in version 3.3: Define ‘==’ and ‘!=’ to compare range objects based on the sequence of values they define (instead of comparing based on object identity).
Added the [`start`](https://docs.python.org/3/library/stdtypes.html#range.start "range.start"), [`stop`](https://docs.python.org/3/library/stdtypes.html#range.stop "range.stop") and [`step`](https://docs.python.org/3/library/stdtypes.html#range.step "range.step") attributes.
See also
  * The [linspace recipe](https://code.activestate.com/recipes/579000-equally-spaced-numbers-linspace/) shows how to implement a lazy version of range suitable for floating-point applications.


## Text Sequence Type — [`str`](https://docs.python.org/3/library/stdtypes.html#str "str")[¶](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str "Link to this heading")
Textual data in Python is handled with [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") objects, or _strings_. Strings are immutable [sequences](https://docs.python.org/3/library/stdtypes.html#typesseq) of Unicode code points. String literals are written in a variety of ways:
  * Single quotes: `'allows embedded "double" quotes'`
  * Double quotes: `"allows embedded 'single' quotes"`
  * Triple quoted: `'''Three single quotes'''`, `"""Three double quotes"""`


Triple quoted strings may span multiple lines - all associated whitespace will be included in the string literal.
String literals that are part of a single expression and have only whitespace between them will be implicitly converted to a single string literal. That is, `("spam " "eggs") == "spam eggs"`.
See [String and Bytes literals](https://docs.python.org/3/reference/lexical_analysis.html#strings) for more about the various forms of string literal, including supported [escape sequences](https://docs.python.org/3/reference/lexical_analysis.html#escape-sequences), and the `r` (“raw”) prefix that disables most escape sequence processing.
Strings may also be created from other objects using the [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") constructor.
Since there is no separate “character” type, indexing a string produces strings of length 1. That is, for a non-empty string _s_ , `s[0] == s[0:1]`.
There is also no mutable string type, but [`str.join()`](https://docs.python.org/3/library/stdtypes.html#str.join "str.join") or [`io.StringIO`](https://docs.python.org/3/library/io.html#io.StringIO "io.StringIO") can be used to efficiently construct strings from multiple fragments.
Changed in version 3.3: For backwards compatibility with the Python 2 series, the `u` prefix is once again permitted on string literals. It has no effect on the meaning of string literals and cannot be combined with the `r` prefix. 

_class_ str(_object =''_)[¶](https://docs.python.org/3/library/stdtypes.html#str "Link to this definition")