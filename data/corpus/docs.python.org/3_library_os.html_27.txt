Title: OS Module: Changing Directories
URL: https://docs.python.org/3/library/os.html
Summary: This section covers three functions for managing directories in the OS module. The `os.chroot(path)` changes the root directory of the current process, while `os.fchdir(fd)` changes the current working directory to the one indicated by a file descriptor. The `os.getcwd()` function retrieves the current working directory. It is noted that certain functions are only available on Unix systems.
---

os.chroot(_path_)[¶](https://docs.python.org/3/library/os.html#os.chroot "Link to this definition")
    
Change the root directory of the current process to _path_.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI, not Android.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). 

os.fchdir(_fd_)[¶](https://docs.python.org/3/library/os.html#os.fchdir "Link to this definition")
    
Change the current working directory to the directory represented by the file descriptor _fd_. The descriptor must refer to an opened directory, not an open file. As of Python 3.3, this is equivalent to `os.chdir(fd)`.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.chdir` with argument `path`.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix. 

os.getcwd()[¶](https://docs.python.org/3/library/os.html#os.getcwd "Link to this definition")
    
Return a string representing the current working directory. 

os.getcwdb()[¶](https://docs.python.org/3/library/os.html#os.getcwdb "Link to this definition")
    
Return a bytestring representing the current working directory.
Changed in version 3.8: The function now uses the UTF-8 encoding on Windows, rather than the ANSI code page: see [**PEP 529**](https://peps.python.org/pep-0529/) for the rationale. The function is no longer deprecated on Windows. 

os.lchflags(_path_ , _flags_)[¶](https://docs.python.org/3/library/os.html#os.lchflags "Link to this definition")
    
Set the flags of _path_ to the numeric _flags_ , like [`chflags()`](https://docs.python.org/3/library/os.html#os.chflags "os.chflags"), but do not follow symbolic links. As of Python 3.3, this is equivalent to `os.chflags(path, flags, follow_symlinks=False)`.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.chflags` with arguments `path`, `flags`.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). 

os.lchmod(_path_ , _mode_)[¶](https://docs.python.org/3/library/os.html#os.lchmod "Link to this definition")
    
Change the mode of _path_ to the numeric _mode_. If path is a symlink, this affects the symlink rather than the target. See the docs for [`chmod()`](https://docs.python.org/3/library/os.html#os.chmod "os.chmod") for possible values of _mode_. As of Python 3.3, this is equivalent to `os.chmod(path, mode, follow_symlinks=False)`.
`lchmod()` is not part of POSIX, but Unix implementations may have it if changing the mode of symbolic links is supported.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.chmod` with arguments `path`, `mode`, `dir_fd`.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, Windows, not Linux, FreeBSD >= 1.3, NetBSD >= 1.3, not OpenBSD
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object).
Changed in version 3.13: Added support on Windows. 

os.lchown(_path_ , _uid_ , _gid_)[¶](https://docs.python.org/3/library/os.html#os.lchown "Link to this definition")
    
Change the owner and group id of _path_ to the numeric _uid_ and _gid_. This function will not follow symbolic links. As of Python 3.3, this is equivalent to `os.chown(path, uid, gid, follow_symlinks=False)`.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.chown` with arguments `path`, `uid`, `gid`, `dir_fd`.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). 

os.link(_src_ , _dst_ , _*_ , _src_dir_fd =None_, _dst_dir_fd =None_, _follow_symlinks =True_)[¶](https://docs.python.org/3/library/os.html#os.link "Link to this definition")
    
Create a hard link pointing to _src_ named _dst_.
This function can support specifying _src_dir_fd_ and/or _dst_dir_fd_ to supply [paths relative to directory descriptors](https://docs.python.org/3/library/os.html#dir-fd), and [not following symlinks](https://docs.python.org/3/library/os.html#follow-symlinks).
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.link` with arguments `src`, `dst`, `src_dir_fd`, `dst_dir_fd`.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, Windows.
Changed in version 3.2: Added Windows support.
Changed in version 3.3: Added the _src_dir_fd_ , _dst_dir_fd_ , and _follow_symlinks_ parameters.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object) for _src_ and _dst_.