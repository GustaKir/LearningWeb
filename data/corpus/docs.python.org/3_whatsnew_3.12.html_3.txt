Title: Python 3.12 Release Highlights
URL: https://docs.python.org/3/whatsnew/3.12.html
Summary: Python 3.12 introduces significant improvements in the standard library, including subclassing support for `pathlib.Path`, enhanced Windows support in the `os` module, a command-line interface for the `sqlite3` module, and a performance boost for `isinstance()` checks against `runtime-checkable protocols`. Additionally, improvements to the `asyncio` module are noted.
---

Significant improvements in the standard library:
  * The [`pathlib.Path`](https://docs.python.org/3/library/pathlib.html#pathlib.Path "pathlib.Path") class now supports subclassing
  * The [`os`](https://docs.python.org/3/library/os.html#module-os "os: Miscellaneous operating system interfaces.") module received several improvements for Windows support
  * A [command-line interface](https://docs.python.org/3/library/sqlite3.html#sqlite3-cli) has been added to the [`sqlite3`](https://docs.python.org/3/library/sqlite3.html#module-sqlite3 "sqlite3: A DB-API 2.0 implementation using SQLite 3.x.") module
  * [`isinstance()`](https://docs.python.org/3/library/functions.html#isinstance "isinstance") checks against [`runtime-checkable protocols`](https://docs.python.org/3/library/typing.html#typing.runtime_checkable "typing.runtime_checkable") enjoy a speed up of between two and 20 times
  * The [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O.") package has had a number of performance improvements, with some benchmarks showing a 75% speed up.
  * A [command-line interface](https://docs.python.org/3/library/uuid.html#uuid-cli) has been added to the [`uuid`](https://docs.python.org/3/library/uuid.html#module-uuid "uuid: UUID objects \(universally unique identifiers\) according to RFC 4122") module
  * Due to the changes in [PEP 701](https://docs.python.org/3/whatsnew/3.12.html#whatsnew312-pep701), producing tokens via the [`tokenize`](https://docs.python.org/3/library/tokenize.html#module-tokenize "tokenize: Lexical scanner for Python source code.") module is up to 64% faster.


Security improvements:
  * Replace the builtin [`hashlib`](https://docs.python.org/3/library/hashlib.html#module-hashlib "hashlib: Secure hash and message digest algorithms.") implementations of SHA1, SHA3, SHA2-384, SHA2-512, and MD5 with formally verified code from the [HACL*](https://github.com/hacl-star/hacl-star/) project. These builtin implementations remain as fallbacks that are only used when OpenSSL does not provide them.


C API improvements:
  * [PEP 697](https://docs.python.org/3/whatsnew/3.12.html#whatsnew312-pep697), unstable C API tier
  * [PEP 683](https://docs.python.org/3/whatsnew/3.12.html#whatsnew312-pep683), immortal objects


CPython implementation improvements:
  * [PEP 709](https://docs.python.org/3/whatsnew/3.12.html#whatsnew312-pep709), comprehension inlining
  * [CPython support](https://docs.python.org/3/howto/perf_profiling.html#perf-profiling) for the Linux `perf` profiler
  * Implement stack overflow protection on supported platforms


New typing features:
  * [PEP 692](https://docs.python.org/3/whatsnew/3.12.html#whatsnew312-pep692), using [`TypedDict`](https://docs.python.org/3/library/typing.html#typing.TypedDict "typing.TypedDict") to annotate [**kwargs](https://docs.python.org/3/glossary.html#term-argument)
  * [PEP 698](https://docs.python.org/3/whatsnew/3.12.html#whatsnew312-pep698), [`typing.override()`](https://docs.python.org/3/library/typing.html#typing.override "typing.override") decorator


Important deprecations, removals or restrictions:
  * [**PEP 623**](https://peps.python.org/pep-0623/): Remove `wstr` from Unicode objects in Pythonâ€™s C API, reducing the size of every [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") object by at least 8 bytes.
  * [**PEP 632**](https://peps.python.org/pep-0632/): Remove the `distutils` package. See [**the migration guide**](https://peps.python.org/pep-0632/#migration-advice) for advice replacing the APIs it provided. The third-party [Setuptools](https://setuptools.pypa.io/en/latest/deprecated/distutils-legacy.html) package continues to provide `distutils`, if you still require it in Python 3.12 and beyond.
  * [gh-95299](https://github.com/python/cpython/issues/95299): Do not pre-install `setuptools` in virtual environments created with [`venv`](https://docs.python.org/3/library/venv.html#module-venv "venv: Creation of virtual environments."). This means that `distutils`, `setuptools`, `pkg_resources`, and `easy_install` will no longer available by default; to access these run `pip install setuptools` in the [activated](https://docs.python.org/3/library/venv.html#venv-explanation) virtual environment.
  * The `asynchat`, `asyncore`, and `imp` modules have been removed, along with several [`unittest.TestCase`](https://docs.python.org/3/library/unittest.html#unittest.TestCase "unittest.TestCase") [method aliases](https://docs.python.org/3/whatsnew/3.12.html#unittest-testcase-removed-aliases).