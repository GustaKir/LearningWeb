Title: subprocess Module: Running Commands
URL: https://docs.python.org/3/library/subprocess.html
Summary: This section demonstrates how to use the subprocess.run() method to execute shell commands in Python. It includes examples of running commands without capturing output, handling errors with check=True, and capturing output for a specific command. Notable changes in versions 3.5, 3.6, 3.7, and 3.12 regarding parameters and behavior are also mentioned.
---

```
>>> subprocess.run(["ls", "-l"]) # doesn't capture output
CompletedProcess(args=['ls', '-l'], returncode=0)
>>> subprocess.run("exit 1", shell=True, check=True)
Traceback (most recent call last):
...
subprocess.CalledProcessError: Command 'exit 1' returned non-zero exit status 1
>>> subprocess.run(["ls", "-l", "/dev/null"], capture_output=True)
CompletedProcess(args=['ls', '-l', '/dev/null'], returncode=0,
stdout=b'crw-rw-rw- 1 root root 1, 3 Jan 23 16:23 /dev/null\n', stderr=b'')

```

Added in version 3.5.
Changed in version 3.6: Added _encoding_ and _errors_ parameters
Changed in version 3.7: Added the _text_ parameter, as a more understandable alias of _universal_newlines_. Added the _capture_output_ parameter.
Changed in version 3.12: Changed Windows shell search order for `shell=True`. The current directory and `%PATH%` are replaced with `%COMSPEC%` and `%SystemRoot%\System32\cmd.exe`. As a result, dropping a malicious program named `cmd.exe` into a current directory no longer works. 

_class_ subprocess.CompletedProcess[¶](https://docs.python.org/3/library/subprocess.html#subprocess.CompletedProcess "Link to this definition")
    
The return value from [`run()`](https://docs.python.org/3/library/subprocess.html#subprocess.run "subprocess.run"), representing a process that has finished. 

args[¶](https://docs.python.org/3/library/subprocess.html#subprocess.CompletedProcess.args "Link to this definition")
    
The arguments used to launch the process. This may be a list or a string. 

returncode[¶](https://docs.python.org/3/library/subprocess.html#subprocess.CompletedProcess.returncode "Link to this definition")
    
Exit status of the child process. Typically, an exit status of 0 indicates that it ran successfully.
A negative value `-N` indicates that the child was terminated by signal `N` (POSIX only). 

stdout[¶](https://docs.python.org/3/library/subprocess.html#subprocess.CompletedProcess.stdout "Link to this definition")
    
Captured stdout from the child process. A bytes sequence, or a string if [`run()`](https://docs.python.org/3/library/subprocess.html#subprocess.run "subprocess.run") was called with an encoding, errors, or text=True. `None` if stdout was not captured.
If you ran the process with `stderr=subprocess.STDOUT`, stdout and stderr will be combined in this attribute, and [`stderr`](https://docs.python.org/3/library/subprocess.html#subprocess.CompletedProcess.stderr "subprocess.CompletedProcess.stderr") will be `None`. 

stderr[¶](https://docs.python.org/3/library/subprocess.html#subprocess.CompletedProcess.stderr "Link to this definition")
    
Captured stderr from the child process. A bytes sequence, or a string if [`run()`](https://docs.python.org/3/library/subprocess.html#subprocess.run "subprocess.run") was called with an encoding, errors, or text=True. `None` if stderr was not captured. 

check_returncode()[¶](https://docs.python.org/3/library/subprocess.html#subprocess.CompletedProcess.check_returncode "Link to this definition")
    
If [`returncode`](https://docs.python.org/3/library/subprocess.html#subprocess.CompletedProcess.returncode "subprocess.CompletedProcess.returncode") is non-zero, raise a [`CalledProcessError`](https://docs.python.org/3/library/subprocess.html#subprocess.CalledProcessError "subprocess.CalledProcessError").
Added in version 3.5. 

subprocess.DEVNULL[¶](https://docs.python.org/3/library/subprocess.html#subprocess.DEVNULL "Link to this definition")
    
Special value that can be used as the _stdin_ , _stdout_ or _stderr_ argument to [`Popen`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen "subprocess.Popen") and indicates that the special file [`os.devnull`](https://docs.python.org/3/library/os.html#os.devnull "os.devnull") will be used.
Added in version 3.3. 

subprocess.PIPE[¶](https://docs.python.org/3/library/subprocess.html#subprocess.PIPE "Link to this definition")
    
Special value that can be used as the _stdin_ , _stdout_ or _stderr_ argument to [`Popen`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen "subprocess.Popen") and indicates that a pipe to the standard stream should be opened. Most useful with [`Popen.communicate()`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate "subprocess.Popen.communicate"). 

subprocess.STDOUT[¶](https://docs.python.org/3/library/subprocess.html#subprocess.STDOUT "Link to this definition")
    
Special value that can be used as the _stderr_ argument to [`Popen`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen "subprocess.Popen") and indicates that standard error should go into the same handle as standard output. 

_exception_ subprocess.SubprocessError[¶](https://docs.python.org/3/library/subprocess.html#subprocess.SubprocessError "Link to this definition")
    
Base class for all other exceptions from this module.
Added in version 3.3.