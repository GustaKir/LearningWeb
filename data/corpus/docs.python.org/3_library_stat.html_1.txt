Title: File Mode and Type Functions in Python's stat Module
URL: https://docs.python.org/3/library/stat.html
Summary: This section covers the `stat.S_IMODE()` function, which retrieves the file's permission bits and special bits that can be set by `os.chmod()`, and the `stat.S_IFMT()` function, which identifies the file type portion of the mode. These functions are useful for optimizing multiple file type tests without repeatedly calling the `stat()` system.
---

stat.S_IMODE(_mode_)[¶](https://docs.python.org/3/library/stat.html#stat.S_IMODE "Link to this definition")
    
Return the portion of the file’s mode that can be set by [`os.chmod()`](https://docs.python.org/3/library/os.html#os.chmod "os.chmod")—that is, the file’s permission bits, plus the sticky bit, set-group-id, and set-user-id bits (on systems that support them). 

stat.S_IFMT(_mode_)[¶](https://docs.python.org/3/library/stat.html#stat.S_IFMT "Link to this definition")
    
Return the portion of the file’s mode that describes the file type (used by the `S_IS*()` functions above).
Normally, you would use the `os.path.is*()` functions for testing the type of a file; the functions here are useful when you are doing multiple tests of the same file and wish to avoid the overhead of the `stat()` system call for each test. These are also useful when checking for information about a file that isn’t handled by [`os.path`](https://docs.python.org/3/library/os.path.html#module-os.path "os.path: Operations on pathnames."), like the tests for block and character devices.
Example:
```
importos,sys
fromstatimport *
defwalktree(top, callback):
'''recursively descend the directory tree rooted at top,
    calling the callback function for each regular file'''
  for f in os.listdir(top):
    pathname = os.path.join(top, f)
    mode = os.lstat(pathname).st_mode
    if S_ISDIR(mode):
      # It's a directory, recurse into it
      walktree(pathname, callback)
    elif S_ISREG(mode):
      # It's a file, call the callback function
      callback(pathname)
    else:
      # Unknown file type, print a message
      print('Skipping %s' % pathname)
defvisitfile(file):
  print('visiting', file)
if __name__ == '__main__':
  walktree(sys.argv[1], visitfile)