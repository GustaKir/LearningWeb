Title: Time Module Functions Overview
URL: https://docs.python.org/3/library/time.html
Summary: This section describes the `time.ctime()` function, which converts seconds since the epoch into a localized string representation of the time, defaulting to the current time if no seconds are provided. Additionally, the `time.get_clock_info()` function retrieves information on specified clocks.
---

time.ctime([_secs_])[¶](https://docs.python.org/3/library/time.html#time.ctime "Link to this definition")
    
Convert a time expressed in seconds since the [epoch](https://docs.python.org/3/library/time.html#epoch) to a string of a form: `'Sun Jun 20 23:21:05 1993'` representing local time. The day field is two characters long and is space padded if the day is a single digit, e.g.: `'Wed Jun  9 04:26:40 1993'`.
If _secs_ is not provided or [`None`](https://docs.python.org/3/library/constants.html#None "None"), the current time as returned by [`time()`](https://docs.python.org/3/library/time.html#time.time "time.time") is used. `ctime(secs)` is equivalent to `asctime(localtime(secs))`. Locale information is not used by [`ctime()`](https://docs.python.org/3/library/time.html#time.ctime "time.ctime"). 

time.get_clock_info(_name_)[¶](https://docs.python.org/3/library/time.html#time.get_clock_info "Link to this definition")
    
Get information on the specified clock as a namespace object. Supported clock names and the corresponding functions to read their value are:
  * `'monotonic'`: [`time.monotonic()`](https://docs.python.org/3/library/time.html#time.monotonic "time.monotonic")
  * `'perf_counter'`: [`time.perf_counter()`](https://docs.python.org/3/library/time.html#time.perf_counter "time.perf_counter")
  * `'process_time'`: [`time.process_time()`](https://docs.python.org/3/library/time.html#time.process_time "time.process_time")
  * `'thread_time'`: [`time.thread_time()`](https://docs.python.org/3/library/time.html#time.thread_time "time.thread_time")
  * `'time'`: [`time.time()`](https://docs.python.org/3/library/time.html#time.time "time.time")


The result has the following attributes:
  * _adjustable_ : `True` if the clock can be changed automatically (e.g. by a NTP daemon) or manually by the system administrator, `False` otherwise
  * _implementation_ : The name of the underlying C function used to get the clock value. Refer to [Clock ID Constants](https://docs.python.org/3/library/time.html#time-clock-id-constants) for possible values.
  * _monotonic_ : `True` if the clock cannot go backward, `False` otherwise
  * _resolution_ : The resolution of the clock in seconds ([`float`](https://docs.python.org/3/library/functions.html#float "float"))


Added in version 3.3. 

time.gmtime([_secs_])[¶](https://docs.python.org/3/library/time.html#time.gmtime "Link to this definition")
    
Convert a time expressed in seconds since the [epoch](https://docs.python.org/3/library/time.html#epoch) to a [`struct_time`](https://docs.python.org/3/library/time.html#time.struct_time "time.struct_time") in UTC in which the dst flag is always zero. If _secs_ is not provided or [`None`](https://docs.python.org/3/library/constants.html#None "None"), the current time as returned by [`time()`](https://docs.python.org/3/library/time.html#time.time "time.time") is used. Fractions of a second are ignored. See above for a description of the [`struct_time`](https://docs.python.org/3/library/time.html#time.struct_time "time.struct_time") object. See [`calendar.timegm()`](https://docs.python.org/3/library/calendar.html#calendar.timegm "calendar.timegm") for the inverse of this function. 

time.localtime([_secs_])[¶](https://docs.python.org/3/library/time.html#time.localtime "Link to this definition")
    
Like [`gmtime()`](https://docs.python.org/3/library/time.html#time.gmtime "time.gmtime") but converts to local time. If _secs_ is not provided or [`None`](https://docs.python.org/3/library/constants.html#None "None"), the current time as returned by [`time()`](https://docs.python.org/3/library/time.html#time.time "time.time") is used. The dst flag is set to `1` when DST applies to the given time.
[`localtime()`](https://docs.python.org/3/library/time.html#time.localtime "time.localtime") may raise [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError"), if the timestamp is outside the range of values supported by the platform C `localtime()` or `gmtime()` functions, and [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") on `localtime()` or `gmtime()` failure. It’s common for this to be restricted to years between 1970 and 2038.