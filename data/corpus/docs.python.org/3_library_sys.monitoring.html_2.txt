Title: Supported Events in sys.monitoring
URL: https://docs.python.org/3/library/sys.monitoring.html
Summary: This section outlines the various events supported by the sys.monitoring module, including BRANCH for conditional branches, CALL for function calls, C_RAISE for exceptions raised from callables, and C_RETURN for returns from callables.
---

```

## Events[¶](https://docs.python.org/3/library/sys.monitoring.html#events "Link to this heading")
The following events are supported: 

sys.monitoring.events.BRANCH[¶](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-BRANCH "Link to this definition")
    
A conditional branch is taken (or not). 

sys.monitoring.events.CALL[¶](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-CALL "Link to this definition")
    
A call in Python code (event occurs before the call). 

sys.monitoring.events.C_RAISE[¶](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-C_RAISE "Link to this definition")
    
An exception raised from any callable, except for Python functions (event occurs after the exit). 

sys.monitoring.events.C_RETURN[¶](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-C_RETURN "Link to this definition")
    
Return from any callable, except for Python functions (event occurs after the return). 

sys.monitoring.events.EXCEPTION_HANDLED[¶](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-EXCEPTION_HANDLED "Link to this definition")
    
An exception is handled. 

sys.monitoring.events.INSTRUCTION[¶](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-INSTRUCTION "Link to this definition")
    
A VM instruction is about to be executed. 

sys.monitoring.events.JUMP[¶](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-JUMP "Link to this definition")
    
An unconditional jump in the control flow graph is made. 

sys.monitoring.events.LINE[¶](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-LINE "Link to this definition")
    
An instruction is about to be executed that has a different line number from the preceding instruction. 

sys.monitoring.events.PY_RESUME[¶](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-PY_RESUME "Link to this definition")
    
Resumption of a Python function (for generator and coroutine functions), except for `throw()` calls. 

sys.monitoring.events.PY_RETURN[¶](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-PY_RETURN "Link to this definition")
    
Return from a Python function (occurs immediately before the return, the callee’s frame will be on the stack). 

sys.monitoring.events.PY_START[¶](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-PY_START "Link to this definition")
    
Start of a Python function (occurs immediately after the call, the callee’s frame will be on the stack) 

sys.monitoring.events.PY_THROW[¶](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-PY_THROW "Link to this definition")
    
A Python function is resumed by a `throw()` call. 

sys.monitoring.events.PY_UNWIND[¶](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-PY_UNWIND "Link to this definition")
    
Exit from a Python function during exception unwinding. 

sys.monitoring.events.PY_YIELD[¶](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-PY_YIELD "Link to this definition")
    
Yield from a Python function (occurs immediately before the yield, the callee’s frame will be on the stack). 

sys.monitoring.events.RAISE[¶](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-RAISE "Link to this definition")
    
An exception is raised, except those that cause a [`STOP_ITERATION`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-STOP_ITERATION) event. 

sys.monitoring.events.RERAISE[¶](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-RERAISE "Link to this definition")
    
An exception is re-raised, for example at the end of a [`finally`](https://docs.python.org/3/reference/compound_stmts.html#finally) block. 

sys.monitoring.events.STOP_ITERATION[¶](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-STOP_ITERATION "Link to this definition")
    
An artificial [`StopIteration`](https://docs.python.org/3/library/exceptions.html#StopIteration "StopIteration") is raised; see [the STOP_ITERATION event](https://docs.python.org/3/library/sys.monitoring.html#the-stop-iteration-event).
More events may be added in the future.
These events are attributes of the `sys.monitoring.events` namespace. Each event is represented as a power-of-2 integer constant. To define a set of events, simply bitwise OR the individual events together. For example, to specify both [`PY_RETURN`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-PY_RETURN) and [`PY_START`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-PY_START) events, use the expression `PY_RETURN | PY_START`. 

sys.monitoring.events.NO_EVENTS[¶](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-NO_EVENTS "Link to this definition")
    
An alias for `0` so users can do explicit comparisons like: