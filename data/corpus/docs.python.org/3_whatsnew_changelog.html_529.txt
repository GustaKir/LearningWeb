Title: Python Logging and Module Fixes
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section discusses updates to the logging.Formatter class, including a re-raise of KeyError for better error clarity. It mentions several bug fixes such as adjustments to compiler checks, avoid pollution of sys.modules by the inspect module, the addition of a `mtime` argument to `gzip.compress`, and changes to ensure `sys.executable` includes the full filename on Cygwin and MinGW.
---

- This method is called in the constructor of logging.Formatter class - Also re-raise the KeyError in the format method of each style class, so it would a bit clear that it’s an error with the invalid format fields.
  * [bpo-34897](https://bugs.python.org/issue?@action=redirect&bpo=34897): Adjust test.support.missing_compiler_executable check so that a nominal command name of “” is ignored. Patch by Michael Felt.
  * [bpo-34871](https://bugs.python.org/issue?@action=redirect&bpo=34871): Fix inspect module polluted `sys.modules` when parsing `__text_signature__` of callable.
  * [bpo-34898](https://bugs.python.org/issue?@action=redirect&bpo=34898): Add `mtime` argument to `gzip.compress` for reproducible output. Patch by Guo Ci Teo.
  * [bpo-28441](https://bugs.python.org/issue?@action=redirect&bpo=28441): On Cygwin and MinGW, ensure that `sys.executable` always includes the full filename in the path, including the `.exe` suffix (unless it is a symbolic link).
  * [bpo-34866](https://bugs.python.org/issue?@action=redirect&bpo=34866): Adding `max_num_fields` to `cgi.FieldStorage` to make DOS attacks harder by limiting the number of `MiniFieldStorage` objects created by `FieldStorage`.
  * [bpo-34711](https://bugs.python.org/issue?@action=redirect&bpo=34711): http.server ensures it reports HTTPStatus.NOT_FOUND when the local path ends with “/” and is not a directory, even if the underlying OS (e.g. AIX) accepts such paths as a valid file reference. Patch by Michael Felt.
  * [bpo-34872](https://bugs.python.org/issue?@action=redirect&bpo=34872): Fix self-cancellation in C implementation of asyncio.Task
  * [bpo-34849](https://bugs.python.org/issue?@action=redirect&bpo=34849): Don’t log waiting for `selector.select` in asyncio loop iteration. The waiting is pretty normal for any asyncio program, logging its time just adds a noise to logs without any useful information provided.
  * [bpo-34022](https://bugs.python.org/issue?@action=redirect&bpo=34022): The `SOURCE_DATE_EPOCH` environment variable no longer overrides the value of the _invalidation_mode_ argument to [`py_compile.compile()`](https://docs.python.org/3/library/py_compile.html#py_compile.compile "py_compile.compile"), and determines its default value instead.
  * [bpo-34819](https://bugs.python.org/issue?@action=redirect&bpo=34819): Use a monotonic clock to compute timeouts in `Executor.map()` and `as_completed()`, in order to prevent timeouts from deviating when the system clock is adjusted.
  * [bpo-34758](https://bugs.python.org/issue?@action=redirect&bpo=34758): Add .wasm -> application/wasm to list of recognized file types and content type headers
  * [bpo-34789](https://bugs.python.org/issue?@action=redirect&bpo=34789): [`xml.sax.make_parser()`](https://docs.python.org/3/library/xml.sax.html#xml.sax.make_parser "xml.sax.make_parser") now accepts any iterable as its _parser_list_ argument. Patch by Andrés Delfino.
  * [bpo-34334](https://bugs.python.org/issue?@action=redirect&bpo=34334): In `QueueHandler`, clear `exc_text` from `LogRecord` to prevent traceback from being written twice.
  * [bpo-34687](https://bugs.python.org/issue?@action=redirect&bpo=34687): On Windows, asyncio now uses ProactorEventLoop, instead of SelectorEventLoop, by default.
  * [bpo-5950](https://bugs.python.org/issue?@action=redirect&bpo=5950): Support reading zip files with archive comments in [`zipimport`](https://docs.python.org/3/library/zipimport.html#module-zipimport "zipimport: Support for importing Python modules from ZIP archives.").
  * [bpo-32892](https://bugs.python.org/issue?@action=redirect&bpo=32892): The parser now represents all constants as [`ast.Constant`](https://docs.python.org/3/library/ast.html#ast.Constant "ast.Constant") instead of using specific constant AST types (`Num`, `Str`, `Bytes`, `NameConstant` and `Ellipsis`).