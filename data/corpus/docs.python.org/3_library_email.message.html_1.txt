Title: Email Message Representation in Python
URL: https://docs.python.org/3/library/email.message.html
Summary: This documentation covers the `email.message` module, which includes the `EmailMessage` class central to the email package. It highlights the functionality for parsing, manipulating, and generating email messages, and notes that the module was added in Python version 3.6.
---

# `email.message`: Representing an email message[¶](https://docs.python.org/3/library/email.message.html#module-email.message "Link to this heading")
**Source code:** [Lib/email/message.py](https://github.com/python/cpython/tree/3.13/Lib/email/message.py)
Added in version 3.6: [[1]](https://docs.python.org/3/library/email.message.html#id2)
The central class in the [`email`](https://docs.python.org/3/library/email.html#module-email "email: Package supporting the parsing, manipulating, and generating email messages.") package is the [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") class, imported from the [`email.message`](https://docs.python.org/3/library/email.message.html#module-email.message "email.message: The base class representing email messages.") module. It is the base class for the [`email`](https://docs.python.org/3/library/email.html#module-email "email: Package supporting the parsing, manipulating, and generating email messages.") object model. [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") provides the core functionality for setting and querying header fields, for accessing message bodies, and for creating or modifying structured messages.
An email message consists of _headers_ and a _payload_ (which is also referred to as the _content_). Headers are [**RFC 5322**](https://datatracker.ietf.org/doc/html/rfc5322.html) or [**RFC 6532**](https://datatracker.ietf.org/doc/html/rfc6532.html) style field names and values, where the field name and value are separated by a colon. The colon is not part of either the field name or the field value. The payload may be a simple text message, or a binary object, or a structured sequence of sub-messages each with their own set of headers and their own payload. The latter type of payload is indicated by the message having a MIME type such as _multipart/*_ or _message/rfc822_.
The conceptual model provided by an [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") object is that of an ordered dictionary of headers coupled with a _payload_ that represents the [**RFC 5322**](https://datatracker.ietf.org/doc/html/rfc5322.html) body of the message, which might be a list of sub-`EmailMessage` objects. In addition to the normal dictionary methods for accessing the header names and values, there are methods for accessing specialized information from the headers (for example the MIME content type), for operating on the payload, for generating a serialized version of the message, and for recursively walking over the object tree.
The [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") dictionary-like interface is indexed by the header names, which must be ASCII values. The values of the dictionary are strings with some extra methods. Headers are stored and returned in case-preserving form, but field names are matched case-insensitively. The keys are ordered, but unlike a real dict, there can be duplicates. Additional methods are provided for working with headers that have duplicate keys.
The _payload_ is either a string or bytes object, in the case of simple message objects, or a list of [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") objects, for MIME container documents such as _multipart/*_ and _message/rfc822_ message objects. 

_class_ email.message.EmailMessage(_policy =default_)[¶](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "Link to this definition")
    
If _policy_ is specified use the rules it specifies to update and serialize the representation of the message. If _policy_ is not set, use the [`default`](https://docs.python.org/3/library/email.policy.html#email.policy.default "email.policy.default") policy, which follows the rules of the email RFCs except for line endings (instead of the RFC mandated `\r\n`, it uses the Python standard `\n` line endings). For more information see the [`policy`](https://docs.python.org/3/library/email.policy.html#module-email.policy "email.policy: Controlling the parsing and generating of messages") documentation.