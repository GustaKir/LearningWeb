Title: Request Method in urllib
URL: https://docs.python.org/3/library/urllib.request.html
Summary: The `method` attribute of `Request` in the `urllib` library determines the HTTP method used for requests, defaulting to 'GET' if no data is provided and 'POST' otherwise. It’s important to note that the data object should be able to deliver content multiple times, as retrying requests for HTTP redirects or authentication can lead to issues. There is no 100-continue support in this library, and the method has been updated in version 3.3.
---

est.Request.method") attribute and is used by [`get_method()`](https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.get_method "urllib.request.Request.get_method"). The default is `'GET'` if _data_ is `None` or `'POST'` otherwise. Subclasses may indicate a different default method by setting the [`method`](https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.method "urllib.request.Request.method") attribute in the class itself.
Note
The request will not work as expected if the data object is unable to deliver its content more than once (e.g. a file or an iterable that can produce the content only once) and the request is retried for HTTP redirects or authentication. The _data_ is sent to the HTTP server right away after the headers. There is no support for a 100-continue expectation in the library.
Changed in version 3.3: [`Request.method`](https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.method "urllib.request.Request.method") argument is added to the Request class.
Changed in version 3.4: Default [`Request.method`](https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.method "urllib.request.Request.method") may be indicated at the class level.
Changed in version 3.6: Do not raise an error if the `Content-Length` has not been provided and _data_ is neither `None` nor a bytes object. Fall back to use chunked transfer encoding instead. 

_class_ urllib.request.OpenerDirector[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector "Link to this definition")
    
The [`OpenerDirector`](https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector "urllib.request.OpenerDirector") class opens URLs via [`BaseHandler`](https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler "urllib.request.BaseHandler")s chained together. It manages the chaining of handlers, and recovery from errors. 

_class_ urllib.request.BaseHandler[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler "Link to this definition")
    
This is the base class for all registered handlers — and handles only the simple mechanics of registration. 

_class_ urllib.request.HTTPDefaultErrorHandler[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPDefaultErrorHandler "Link to this definition")
    
A class which defines a default handler for HTTP error responses; all responses are turned into [`HTTPError`](https://docs.python.org/3/library/urllib.error.html#urllib.error.HTTPError "urllib.error.HTTPError") exceptions. 

_class_ urllib.request.HTTPRedirectHandler[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPRedirectHandler "Link to this definition")
    
A class to handle redirections. 

_class_ urllib.request.HTTPCookieProcessor(_cookiejar =None_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPCookieProcessor "Link to this definition")
    
A class to handle HTTP Cookies. 

_class_ urllib.request.ProxyHandler(_proxies =None_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.ProxyHandler "Link to this definition")
    
Cause requests to go through a proxy. If _proxies_ is given, it must be a dictionary mapping protocol names to URLs of proxies. The default is to read the list of proxies from the environment variables `<protocol>_proxy`. If no proxy environment variables are set, then in a Windows environment proxy settings are obtained from the registry’s Internet Settings section, and in a macOS environment proxy information is retrieved from the System Configuration Framework.
To disable autodetected proxy pass an empty dictionary.
The `no_proxy` environment variable can be used to specify hosts which shouldn’t be reached via proxy; if set, it should be a comma-separated list of hostname suffixes, optionally with `:port` appended, for example `cern.ch,ncsa.uiuc.edu,some.host:8080`.
Note
`HTTP_PROXY` will be ignored if a variable `REQUEST_METHOD` is set; see the documentation on [`getproxies()`](https://docs.python.org/3/library/urllib.request.html#urllib.request.getproxies "urllib.request.getproxies"). 

_class_ urllib.request.HTTPPasswordMgr[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPPasswordMgr "Link to this definition")
    
Keep a database of `(realm, uri) -> (user, password)` mappings. 

_class_ urllib.request.HTTPPasswordMgrWithDefaultRealm[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPPasswordMgrWithDefaultRealm "Link to this definition")
    
Keep a database of `(realm, uri) -> (user, password)` mappings. A realm of `None` is considered a catch-all realm, which is searched if no other realm fits.