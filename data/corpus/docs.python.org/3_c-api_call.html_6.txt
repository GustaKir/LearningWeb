Title: PyObject_Vectorcall Function
URL: https://docs.python.org/3/c-api/call.html
Summary: The PyObject_Vectorcall function is part of the Stable ABI since Python 3.12. It calls a callable Python object with arguments similar to those for vectorcallfunc. If the callable supports vectorcall, it directly invokes its corresponding function, returning the result or raising an exception if unsuccessful.
---

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyObject_Vectorcall([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*callable, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*const*args, size_tnargsf, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*kwnames)[¶](https://docs.python.org/3/c-api/call.html#c.PyObject_Vectorcall "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.12._
Call a callable Python object _callable_. The arguments are the same as for [`vectorcallfunc`](https://docs.python.org/3/c-api/call.html#c.vectorcallfunc "vectorcallfunc"). If _callable_ supports [vectorcall](https://docs.python.org/3/c-api/call.html#vectorcall), this directly calls the vectorcall function stored in _callable_.
Return the result of the call on success, or raise an exception and return _NULL_ on failure.
Added in version 3.9. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyObject_VectorcallDict([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*callable, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*const*args, size_tnargsf, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*kwdict)[¶](https://docs.python.org/3/c-api/call.html#c.PyObject_VectorcallDict "Link to this definition")
    
Call _callable_ with positional arguments passed exactly as in the [vectorcall](https://docs.python.org/3/c-api/call.html#vectorcall) protocol, but with keyword arguments passed as a dictionary _kwdict_. The _args_ array contains only the positional arguments.
Regardless of which protocol is used internally, a conversion of arguments needs to be done. Therefore, this function should only be used if the caller already has a dictionary ready to use for the keyword arguments, but not a tuple for the positional arguments.
Added in version 3.9. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyObject_VectorcallMethod([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*name, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*const*args, size_tnargsf, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*kwnames)[¶](https://docs.python.org/3/c-api/call.html#c.PyObject_VectorcallMethod "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.12._
Call a method using the vectorcall calling convention. The name of the method is given as a Python string _name_. The object whose method is called is _args[0]_ , and the _args_ array starting at _args[1]_ represents the arguments of the call. There must be at least one positional argument. _nargsf_ is the number of positional arguments including _args[0]_ , plus [`PY_VECTORCALL_ARGUMENTS_OFFSET`](https://docs.python.org/3/c-api/call.html#c.PY_VECTORCALL_ARGUMENTS_OFFSET "PY_VECTORCALL_ARGUMENTS_OFFSET") if the value of `args[0]` may temporarily be changed. Keyword arguments can be passed just like in [`PyObject_Vectorcall()`](https://docs.python.org/3/c-api/call.html#c.PyObject_Vectorcall "PyObject_Vectorcall").
If the object has the [`Py_TPFLAGS_METHOD_DESCRIPTOR`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_METHOD_DESCRIPTOR "Py_TPFLAGS_METHOD_DESCRIPTOR") feature, this will call the unbound method object with the full _args_ vector as arguments.
Return the result of the call on success, or raise an exception and return _NULL_ on failure.
Added in version 3.9.
## Call Support API[¶](https://docs.python.org/3/c-api/call.html#call-support-api "Link to this heading") 

intPyCallable_Check([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o)[¶](https://docs.python.org/3/c-api/call.html#c.PyCallable_Check "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Determine if the object _o_ is callable. Return `1` if the object is callable and `0` otherwise. This function always succeeds.
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [Call Protocol](https://docs.python.org/3/c-api/call.html)
    * [The _tp_call_ Protocol](https://docs.python.org/3/c-api/call.html#the-tp-call-protocol)
    * [The Vectorcall Protocol](https://docs.python.org/3/c-api/call.html#the-vectorcall-protocol)
      * [Recursion Control](https://docs.python.org/3/c-api/call.html#recursion-control)
      * [Vectorcall Support API](https://docs.python.org/3/c-api/call.html#vectorcall-support-api)
    * [Object Calling API](https://docs.python.org/3/c-api/call.html#object-calling-api)
    * [Call Support API](https://docs.python.org/3/c-api/call.html#call-support-api)