Title: EmailMessage.is_multipart() Method
URL: https://docs.python.org/3/library/email.message.html
Summary: The `is_multipart()` method checks if the email message's payload is a list of sub-EmailMessage objects, returning `True` if it is and `False` otherwise. If it returns `False`, the payload is expected to be a string, potentially containing a CTE encoded binary payload. Notably, `is_multipart()` returning `True` does not guarantee that `msg.get_content_maintype()` will also return `True` for 'multipart'.
---

is_multipart()[¶](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.is_multipart "Link to this definition")
    
Return `True` if the message’s payload is a list of sub-[`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") objects, otherwise return `False`. When [`is_multipart()`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.is_multipart "email.message.EmailMessage.is_multipart") returns `False`, the payload should be a string object (which might be a CTE encoded binary payload). Note that [`is_multipart()`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.is_multipart "email.message.EmailMessage.is_multipart") returning `True` does not necessarily mean that “msg.get_content_maintype() == ‘multipart’” will return the `True`. For example, `is_multipart` will return `True` when the [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") is of type `message/rfc822`. 

set_unixfrom(_unixfrom_)[¶](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.set_unixfrom "Link to this definition")
    
Set the message’s envelope header to _unixfrom_ , which should be a string. (See [`mboxMessage`](https://docs.python.org/3/library/mailbox.html#mailbox.mboxMessage "mailbox.mboxMessage") for a brief description of this header.) 

get_unixfrom()[¶](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.get_unixfrom "Link to this definition")
    
Return the message’s envelope header. Defaults to `None` if the envelope header was never set.
The following methods implement the mapping-like interface for accessing the message’s headers. Note that there are some semantic differences between these methods and a normal mapping (i.e. dictionary) interface. For example, in a dictionary there are no duplicate keys, but here there may be duplicate message headers. Also, in dictionaries there is no guaranteed order to the keys returned by [`keys()`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.keys "email.message.EmailMessage.keys"), but in an [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") object, headers are always returned in the order they appeared in the original message, or in which they were added to the message later. Any header deleted and then re-added is always appended to the end of the header list.
These semantic differences are intentional and are biased toward convenience in the most common use cases.
Note that in all cases, any envelope header present in the message is not included in the mapping interface. 

__len__()[¶](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.__len__ "Link to this definition")
    
Return the total number of headers, including duplicates. 

__contains__(_name_)[¶](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.__contains__ "Link to this definition")
    
Return `True` if the message object has a field named _name_. Matching is done without regard to case and _name_ does not include the trailing colon. Used for the `in` operator. For example:
```
if 'message-id' in myMessage:
  print('Message-ID:', myMessage['message-id'])

```


__getitem__(_name_)[¶](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.__getitem__ "Link to this definition")
    
Return the value of the named header field. _name_ does not include the colon field separator. If the header is missing, `None` is returned; a [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError") is never raised.
Note that if the named field appears more than once in the message’s headers, exactly which of those field values will be returned is undefined. Use the [`get_all()`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.get_all "email.message.EmailMessage.get_all") method to get the values of all the extant headers named _name_.
Using the standard (non-`compat32`) policies, the returned value is an instance of a subclass of [`email.headerregistry.BaseHeader`](https://docs.python.org/3/library/email.headerregistry.html#email.headerregistry.BaseHeader "email.headerregistry.BaseHeader"). 

__setitem__(_name_ , _val_)[¶](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.__setitem__ "Link to this definition")
    
Add a header to the message with field name _name_ and value _val_. The field is appended to the end of the message’s existing headers.
Note that this does _not_ overwrite or delete any existing header with the same name. If you want to ensure that the new header is the only one present in the message with field name _name_ , delete the field first, e.g.: