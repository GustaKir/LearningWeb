Title: Email Header Module: Overview of Internationalized Headers
URL: https://docs.python.org/3/library/email.header.html
Summary: The `email.header` module is part of the legacy email API (`Compat32`). It enables control over character sets for encoding headers, while the current API manages this transparently via the `EmailMessage` class. This documentation also references RFC 2822, which defines the email message format.
---

# `email.header`: Internationalized headers[Â¶](https://docs.python.org/3/library/email.header.html#module-email.header "Link to this heading")
**Source code:** [Lib/email/header.py](https://github.com/python/cpython/tree/3.13/Lib/email/header.py)
This module is part of the legacy (`Compat32`) email API. In the current API encoding and decoding of headers is handled transparently by the dictionary-like API of the [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") class. In addition to uses in legacy code, this module can be useful in applications that need to completely control the character sets used when encoding headers.
The remaining text in this section is the original documentation of the module.
[**RFC 2822**](https://datatracker.ietf.org/doc/html/rfc2822.html) is the base standard that describes the format of email messages. It derives from the older [**RFC 822**](https://datatracker.ietf.org/doc/html/rfc822.html) standard which came into widespread use at a time when most email was composed of ASCII characters only. [**RFC 2822**](https://datatracker.ietf.org/doc/html/rfc2822.html) is a specification written assuming email contains only 7-bit ASCII characters.
Of course, as email has been deployed worldwide, it has become internationalized, such that language specific character sets can now be used in email messages. The base standard still requires email messages to be transferred using only 7-bit ASCII characters, so a slew of RFCs have been written describing how to encode email containing non-ASCII characters into [**RFC 2822**](https://datatracker.ietf.org/doc/html/rfc2822.html)-compliant format. These RFCs include [**RFC 2045**](https://datatracker.ietf.org/doc/html/rfc2045.html), [**RFC 2046**](https://datatracker.ietf.org/doc/html/rfc2046.html), [**RFC 2047**](https://datatracker.ietf.org/doc/html/rfc2047.html), and [**RFC 2231**](https://datatracker.ietf.org/doc/html/rfc2231.html). The [`email`](https://docs.python.org/3/library/email.html#module-email "email: Package supporting the parsing, manipulating, and generating email messages.") package supports these standards in its [`email.header`](https://docs.python.org/3/library/email.header.html#module-email.header "email.header: Representing non-ASCII headers") and [`email.charset`](https://docs.python.org/3/library/email.charset.html#module-email.charset "email.charset: Character Sets") modules.
If you want to include non-ASCII characters in your email headers, say in the _Subject_ or _To_ fields, you should use the [`Header`](https://docs.python.org/3/library/email.header.html#email.header.Header "email.header.Header") class and assign the field in the [`Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "email.message.Message") object to an instance of [`Header`](https://docs.python.org/3/library/email.header.html#email.header.Header "email.header.Header") instead of using a string for the header value. Import the [`Header`](https://docs.python.org/3/library/email.header.html#email.header.Header "email.header.Header") class from the [`email.header`](https://docs.python.org/3/library/email.header.html#module-email.header "email.header: Representing non-ASCII headers") module. For example:
>>>```
>>> fromemail.messageimport Message
>>> fromemail.headerimport Header
>>> msg = Message()
>>> h = Header('p\xf6stal', 'iso-8859-1')
>>> msg['Subject'] = h
>>> msg.as_string()
'Subject: =?iso-8859-1?q?p=F6stal?=\n\n'