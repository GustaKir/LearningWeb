Title: Argument Parsing in Python with argparse
URL: https://docs.python.org/3/library/argparse.html
Summary: This section discusses methods for parsing command-line arguments using the `argparse` library. It explains `parse_known_intermixed_args()`, which returns a tuple of a populated namespace and unparsed argument strings, and contrasts it with `parse_intermixed_args()`, which raises an error for remaining arguments. Additionally, it introduces the method for registering custom types or actions to enhance error messaging.
---

```

[`parse_known_intermixed_args()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.parse_known_intermixed_args "argparse.ArgumentParser.parse_known_intermixed_args") returns a two item tuple containing the populated namespace and the list of remaining argument strings. [`parse_intermixed_args()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.parse_intermixed_args "argparse.ArgumentParser.parse_intermixed_args") raises an error if there are any remaining unparsed argument strings.
Added in version 3.7.
### Registering custom types or actions[¶](https://docs.python.org/3/library/argparse.html#registering-custom-types-or-actions "Link to this heading") 

ArgumentParser.register(_registry_name_ , _value_ , _object_)[¶](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.register "Link to this definition")
    
Sometimes it’s desirable to use a custom string in error messages to provide more user-friendly output. In these cases, `register()` can be used to register custom actions or types with a parser and allow you to reference the type by their registered name instead of their callable name.
The `register()` method accepts three arguments - a _registry_name_ , specifying the internal registry where the object will be stored (e.g., `action`, `type`), _value_ , which is the key under which the object will be registered, and object, the callable to be registered.
The following example shows how to register a custom type with a parser:
>>>```
>>> importargparse
>>> parser = argparse.ArgumentParser()
>>> parser.register('type', 'hexadecimal integer', lambda s: int(s, 16))
>>> parser.add_argument('--foo', type='hexadecimal integer')
_StoreAction(option_strings=['--foo'], dest='foo', nargs=None, const=None, default=None, type='hexadecimal integer', choices=None, required=False, help=None, metavar=None, deprecated=False)
>>> parser.parse_args(['--foo', '0xFA'])
Namespace(foo=250)
>>> parser.parse_args(['--foo', '1.2'])
usage: PROG [-h] [--foo FOO]
PROG: error: argument --foo: invalid 'hexadecimal integer' value: '1.2'