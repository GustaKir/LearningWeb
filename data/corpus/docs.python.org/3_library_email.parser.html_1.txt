Title: Email Parser Module in Python
URL: https://docs.python.org/3/library/email.parser.html
Summary: The `email.parser` module in Python allows for the creation of message objects either by directly constructing an `EmailMessage` with headers and payloads or by parsing a serialized email message. The module is part of the broader `email` package that facilitates email message handling.
---

# `email.parser`: Parsing email messages[¶](https://docs.python.org/3/library/email.parser.html#module-email.parser "Link to this heading")
**Source code:** [Lib/email/parser.py](https://github.com/python/cpython/tree/3.13/Lib/email/parser.py)
Message object structures can be created in one of two ways: they can be created from whole cloth by creating an [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") object, adding headers using the dictionary interface, and adding payload(s) using [`set_content()`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.set_content "email.message.EmailMessage.set_content") and related methods, or they can be created by parsing a serialized representation of the email message.
The [`email`](https://docs.python.org/3/library/email.html#module-email "email: Package supporting the parsing, manipulating, and generating email messages.") package provides a standard parser that understands most email document structures, including MIME documents. You can pass the parser a bytes, string or file object, and the parser will return to you the root [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") instance of the object structure. For simple, non-MIME messages the payload of this root object will likely be a string containing the text of the message. For MIME messages, the root object will return `True` from its [`is_multipart()`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.is_multipart "email.message.EmailMessage.is_multipart") method, and the subparts can be accessed via the payload manipulation methods, such as [`get_body()`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.get_body "email.message.EmailMessage.get_body"), [`iter_parts()`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.iter_parts "email.message.EmailMessage.iter_parts"), and [`walk()`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.walk "email.message.EmailMessage.walk").
There are actually two parser interfaces available for use, the [`Parser`](https://docs.python.org/3/library/email.parser.html#email.parser.Parser "email.parser.Parser") API and the incremental [`FeedParser`](https://docs.python.org/3/library/email.parser.html#email.parser.FeedParser "email.parser.FeedParser") API. The [`Parser`](https://docs.python.org/3/library/email.parser.html#email.parser.Parser "email.parser.Parser") API is most useful if you have the entire text of the message in memory, or if the entire message lives in a file on the file system. [`FeedParser`](https://docs.python.org/3/library/email.parser.html#email.parser.FeedParser "email.parser.FeedParser") is more appropriate when you are reading the message from a stream which might block waiting for more input (such as reading an email message from a socket). The [`FeedParser`](https://docs.python.org/3/library/email.parser.html#email.parser.FeedParser "email.parser.FeedParser") can consume and parse the message incrementally, and only returns the root object when you close the parser.
Note that the parser can be extended in limited ways, and of course you can implement your own parser completely from scratch. All of the logic that connects the [`email`](https://docs.python.org/3/library/email.html#module-email "email: Package supporting the parsing, manipulating, and generating email messages.") package’s bundled parser and the [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") class is embodied in the [`Policy`](https://docs.python.org/3/library/email.policy.html#email.policy.Policy "email.policy.Policy") class, so a custom parser can create message object trees any way it finds necessary by implementing custom versions of the appropriate `Policy` methods.
## FeedParser API[¶](https://docs.python.org/3/library/email.parser.html#feedparser-api "Link to this heading")
The [`BytesFeedParser`](https://docs.python.org/3/library/email.parser.html#email.parser.BytesFeedParser "email.parser.BytesFeedParser"), imported from the `email.feedparser` module, provides an API that is conducive to incremental parsing of email messages, such as would be necessary when reading the text of an email message from a source that can block (such as a socket). The [`BytesFeedParser`](https://docs.python.org/3/library/email.parser.html#email.parser.BytesFeedParser "email.parser.BytesFeedParser") can of course be used to parse an email message fully contained in a [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object), string, or file, but the [`BytesParser`](https://docs.python.org/3/library/email.parser.html#email.parser.BytesParser "email.parser.BytesParser") API may be more convenient for s