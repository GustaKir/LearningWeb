Title: Element Methods in xml.etree.ElementTree
URL: https://docs.python.org/3/library/xml.etree.elementtree.html
Summary: This documentation chunk covers two methods of the Element class in the xml.etree.ElementTree module: findtext and insert. The findtext method retrieves the text of the first subelement that matches a given tag or path, returning a default value if none is found. The insert method allows for the addition of a subelement at a specified index within an element.
---

findtext(_match_ , _default =None_, _namespaces =None_)[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.findtext "Link to this definition")
    
Finds text for the first subelement matching _match_. _match_ may be a tag name or a [path](https://docs.python.org/3/library/xml.etree.elementtree.html#elementtree-xpath). Returns the text content of the first matching element, or _default_ if no element was found. Note that if the matching element has no text content an empty string is returned. _namespaces_ is an optional mapping from namespace prefix to full name. Pass `''` as prefix to move all unprefixed tag names in the expression into the given namespace. 

insert(_index_ , _subelement_)[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.insert "Link to this definition")
    
Inserts _subelement_ at the given position in this element. Raises [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") if _subelement_ is not an [`Element`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element "xml.etree.ElementTree.Element"). 

iter(_tag =None_)[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.iter "Link to this definition")
    
Creates a tree [iterator](https://docs.python.org/3/glossary.html#term-iterator) with the current element as the root. The iterator iterates over this element and all elements below it, in document (depth first) order. If _tag_ is not `None` or `'*'`, only elements whose tag equals _tag_ are returned from the iterator. If the tree structure is modified during iteration, the result is undefined.
Added in version 3.2. 

iterfind(_match_ , _namespaces =None_)[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.iterfind "Link to this definition")
    
Finds all matching subelements, by tag name or [path](https://docs.python.org/3/library/xml.etree.elementtree.html#elementtree-xpath). Returns an iterable yielding all matching elements in document order. _namespaces_ is an optional mapping from namespace prefix to full name.
Added in version 3.2. 

itertext()[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.itertext "Link to this definition")
    
Creates a text iterator. The iterator loops over this element and all subelements, in document order, and returns all inner text.
Added in version 3.2. 

makeelement(_tag_ , _attrib_)[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.makeelement "Link to this definition")
    
Creates a new element object of the same type as this element. Do not call this method, use the [`SubElement()`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.SubElement "xml.etree.ElementTree.SubElement") factory function instead. 

remove(_subelement_)[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.remove "Link to this definition")
    
Removes _subelement_ from the element. Unlike the find* methods this method compares elements based on the instance identity, not on tag value or contents.
[`Element`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element "xml.etree.ElementTree.Element") objects also support the following sequence type methods for working with subelements: [`__delitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__delitem__ "object.__delitem__"), [`__getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__getitem__ "object.__getitem__"), [`__setitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__setitem__ "object.__setitem__"), [`__len__()`](https://docs.python.org/3/reference/datamodel.html#object.__len__ "object.__len__").
Caution: Elements with no subelements will test as `False`. In a future release of Python, all elements will test as `True` regardless of whether subelements exist. Instead, prefer explicit `len(elem)` or `elem is not None` tests.:
```
element = root.find('foo')
if not element: # careful!
  print("element not found, or element has no subelements")
if element is None:
  print("element not found")