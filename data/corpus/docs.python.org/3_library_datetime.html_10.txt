Title: Date Formatting in Python
URL: https://docs.python.org/3/library/datetime.html
Summary: This section discusses the `strftime()` method for formatting date objects in Python, which returns a string representation of the date based on a specified format string. It notes that when formatting, values for hours, minutes, or seconds will default to zero, and references related methods like `date.isoformat()`.
---

```

on platforms where the native C `ctime()` function (which [`time.ctime()`](https://docs.python.org/3/library/time.html#time.ctime "time.ctime") invokes, but which [`date.ctime()`](https://docs.python.org/3/library/datetime.html#datetime.date.ctime "datetime.date.ctime") does not invoke) conforms to the C standard. 

date.strftime(_format_)[¶](https://docs.python.org/3/library/datetime.html#datetime.date.strftime "Link to this definition")
    
Return a string representing the date, controlled by an explicit format string. Format codes referring to hours, minutes or seconds will see 0 values. See also [strftime() and strptime() Behavior](https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior) and [`date.isoformat()`](https://docs.python.org/3/library/datetime.html#datetime.date.isoformat "datetime.date.isoformat"). 

date.__format__(_format_)[¶](https://docs.python.org/3/library/datetime.html#datetime.date.__format__ "Link to this definition")
    
Same as [`date.strftime()`](https://docs.python.org/3/library/datetime.html#datetime.date.strftime "datetime.date.strftime"). This makes it possible to specify a format string for a [`date`](https://docs.python.org/3/library/datetime.html#datetime.date "datetime.date") object in [formatted string literals](https://docs.python.org/3/reference/lexical_analysis.html#f-strings) and when using [`str.format()`](https://docs.python.org/3/library/stdtypes.html#str.format "str.format"). See also [strftime() and strptime() Behavior](https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior) and [`date.isoformat()`](https://docs.python.org/3/library/datetime.html#datetime.date.isoformat "datetime.date.isoformat").
### Examples of Usage: [`date`](https://docs.python.org/3/library/datetime.html#datetime.date "datetime.date")[¶](https://docs.python.org/3/library/datetime.html#examples-of-usage-date "Link to this heading")
Example of counting days to an event:
>>>```
>>> importtime
>>> fromdatetimeimport date
>>> today = date.today()
>>> today
datetime.date(2007, 12, 5)
>>> today == date.fromtimestamp(time.time())
True
>>> my_birthday = date(today.year, 6, 24)
>>> if my_birthday < today:
...   my_birthday = my_birthday.replace(year=today.year + 1)
...
>>> my_birthday
datetime.date(2008, 6, 24)
>>> time_to_birthday = abs(my_birthday - today)
>>> time_to_birthday.days
202

```

More examples of working with [`date`](https://docs.python.org/3/library/datetime.html#datetime.date "datetime.date"):
>>>```
>>> fromdatetimeimport date
>>> d = date.fromordinal(730920) # 730920th day after 1. 1. 0001
>>> d
datetime.date(2002, 3, 11)
>>> # Methods related to formatting string output
>>> d.isoformat()
'2002-03-11'
>>> d.strftime("%d/%m/%y")
'11/03/02'
>>> d.strftime("%A %d. %B %Y")
'Monday 11. March 2002'
>>> d.ctime()
'Mon Mar 11 00:00:00 2002'
>>> 'The {1} is {0:%d}, the {2} is {0:%B}.'.format(d, "day", "month")
'The day is 11, the month is March.'
>>> # Methods for to extracting 'components' under different calendars
>>> t = d.timetuple()
>>> for i in t:
...   print(i)
2002        # year
3          # month
11         # day
0
0
0
0          # weekday (0 = Monday)
70         # 70th day in the year
-1
>>> ic = d.isocalendar()
>>> for i in ic:
...   print(i)
2002        # ISO year
11         # ISO week number
1          # ISO day number ( 1 = Monday )
>>> # A date object is immutable; all operations produce a new object
>>> d.replace(year=2005)
datetime.date(2005, 3, 11)