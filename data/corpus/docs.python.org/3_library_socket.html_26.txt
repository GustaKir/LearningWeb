Title: Socket Sendmsg AFALG
URL: https://docs.python.org/3/library/socket.html
Summary: The `socket.sendmsg_afalg` method is a specialized version of `sendmsg()` for `AF_ALG`, available on most Unix platforms. It was introduced in Python 3.3 and modified in 3.5 to handle interrupted system calls by retrying instead of raising an `InterruptedError`. The method raises an auditing event with specific arguments.
---

```

[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI.
Most Unix platforms.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `socket.sendmsg` with arguments `self`, `address`.
Added in version 3.3.
Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an exception, the method now retries the system call instead of raising an [`InterruptedError`](https://docs.python.org/3/library/exceptions.html#InterruptedError "InterruptedError") exception (see [**PEP 475**](https://peps.python.org/pep-0475/) for the rationale). 

socket.sendmsg_afalg([_msg_ , ]_*_ , _op_[, _iv_[, _assoclen_[, _flags_]]])[¶](https://docs.python.org/3/library/socket.html#socket.socket.sendmsg_afalg "Link to this definition")
    
Specialized version of [`sendmsg()`](https://docs.python.org/3/library/socket.html#socket.socket.sendmsg "socket.socket.sendmsg") for [`AF_ALG`](https://docs.python.org/3/library/socket.html#socket.AF_ALG "socket.AF_ALG") socket. Set mode, IV, AEAD associated data length and flags for [`AF_ALG`](https://docs.python.org/3/library/socket.html#socket.AF_ALG "socket.AF_ALG") socket.
[Availability](https://docs.python.org/3/library/intro.html#availability): Linux >= 2.6.38.
Added in version 3.6. 

socket.sendfile(_file_ , _offset =0_, _count =None_)[¶](https://docs.python.org/3/library/socket.html#socket.socket.sendfile "Link to this definition")
    
Send a file until EOF is reached by using high-performance [`os.sendfile`](https://docs.python.org/3/library/os.html#os.sendfile "os.sendfile") and return the total number of bytes which were sent. _file_ must be a regular file object opened in binary mode. If [`os.sendfile`](https://docs.python.org/3/library/os.html#os.sendfile "os.sendfile") is not available (e.g. Windows) or _file_ is not a regular file [`send()`](https://docs.python.org/3/library/socket.html#socket.socket.send "socket.socket.send") will be used instead. _offset_ tells from where to start reading the file. If specified, _count_ is the total number of bytes to transmit as opposed to sending the file until EOF is reached. File position is updated on return or also in case of error in which case [`file.tell()`](https://docs.python.org/3/library/io.html#io.IOBase.tell "io.IOBase.tell") can be used to figure out the number of bytes which were sent. The socket must be of [`SOCK_STREAM`](https://docs.python.org/3/library/socket.html#socket.SOCK_STREAM "socket.SOCK_STREAM") type. Non-blocking sockets are not supported.
Added in version 3.5. 

socket.set_inheritable(_inheritable_)[¶](https://docs.python.org/3/library/socket.html#socket.socket.set_inheritable "Link to this definition")
    
Set the [inheritable flag](https://docs.python.org/3/library/os.html#fd-inheritance) of the socket’s file descriptor or socket’s handle.
Added in version 3.4. 

socket.setblocking(_flag_)[¶](https://docs.python.org/3/library/socket.html#socket.socket.setblocking "Link to this definition")
    
Set blocking or non-blocking mode of the socket: if _flag_ is false, the socket is set to non-blocking, else to blocking mode.
This method is a shorthand for certain [`settimeout()`](https://docs.python.org/3/library/socket.html#socket.socket.settimeout "socket.socket.settimeout") calls:
  * `sock.setblocking(True)` is equivalent to `sock.settimeout(None)`
  * `sock.setblocking(False)` is equivalent to `sock.settimeout(0.0)`


Changed in version 3.7: The method no longer applies [`SOCK_NONBLOCK`](https://docs.python.org/3/library/socket.html#socket.SOCK_NONBLOCK "socket.SOCK_NONBLOCK") flag on [`socket.type`](https://docs.python.org/3/library/socket.html#socket.socket.type "socket.socket.type"). 

socket.settimeout(_value_)[¶](https://docs.python.org/3/library/socket.html#socket.socket.settimeout "Link to this definition")
    
Set a timeout on blocking socket operations. The _value_ argument can be a nonnegative floating-point number expressing seconds, or `None`. If a non-zero value is given, subsequent socket operations will raise a [`timeout`](https://docs.python.org/3/library/socket.html#socket.timeout "socket.timeout") exception if the timeout period _value_ has elapsed before the operation has completed. If zero is given, the socket is put in non-blocking mode. If `None` is given, the socket is put in blocking mode.
For further information, please consult the [notes on socket timeouts](https://docs.python.org/3/library/socket.html#socket-timeouts).
Changed in version 3.7: The method no longer toggles [`SOCK_NONBLOCK`](https://docs.python.org/3/library/socket.html#socket.SOCK_NONBLOCK "socket.SOCK_NONBLOCK") flag on [`socket.type`](https://docs.python.org/3/library/socket.html#socket.socket.type "socket.socket.type").