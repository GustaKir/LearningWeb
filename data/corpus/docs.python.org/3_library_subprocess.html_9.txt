Title: File Descriptor Inheritance in Subprocess Module
URL: https://docs.python.org/3/library/subprocess.html
Summary: This section details the behavior of file descriptors in the subprocess module, particularly regarding the _close_fds_ flag on Windows. When _close_fds_ is true, no handles are inherited by child processes unless specified in the handle_list. Changes in default behavior for _close_fds_ in versions 3.2 and 3.7 are also noted.
---

is false, file descriptors obey their inheritable flag as described in [Inheritance of File Descriptors](https://docs.python.org/3/library/os.html#fd-inheritance).
On Windows, if _close_fds_ is true then no handles will be inherited by the child process unless explicitly passed in the `handle_list` element of [`STARTUPINFO.lpAttributeList`](https://docs.python.org/3/library/subprocess.html#subprocess.STARTUPINFO.lpAttributeList "subprocess.STARTUPINFO.lpAttributeList"), or by standard handle redirection.
Changed in version 3.2: The default for _close_fds_ was changed from [`False`](https://docs.python.org/3/library/constants.html#False "False") to what is described above.
Changed in version 3.7: On Windows the default for _close_fds_ was changed from [`False`](https://docs.python.org/3/library/constants.html#False "False") to [`True`](https://docs.python.org/3/library/constants.html#True "True") when redirecting the standard handles. It’s now possible to set _close_fds_ to [`True`](https://docs.python.org/3/library/constants.html#True "True") when redirecting the standard handles.
_pass_fds_ is an optional sequence of file descriptors to keep open between the parent and child. Providing any _pass_fds_ forces _close_fds_ to be [`True`](https://docs.python.org/3/library/constants.html#True "True"). (POSIX only)
Changed in version 3.2: The _pass_fds_ parameter was added.
If _cwd_ is not `None`, the function changes the working directory to _cwd_ before executing the child. _cwd_ can be a string, bytes or [path-like](https://docs.python.org/3/glossary.html#term-path-like-object) object. On POSIX, the function looks for _executable_ (or for the first item in _args_) relative to _cwd_ if the executable path is a relative path.
Changed in version 3.6: _cwd_ parameter accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object) on POSIX.
Changed in version 3.7: _cwd_ parameter accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object) on Windows.
Changed in version 3.8: _cwd_ parameter accepts a bytes object on Windows.
If _restore_signals_ is true (the default) all signals that Python has set to SIG_IGN are restored to SIG_DFL in the child process before the exec. Currently this includes the SIGPIPE, SIGXFZ and SIGXFSZ signals. (POSIX only)
Changed in version 3.2: _restore_signals_ was added.
If _start_new_session_ is true the `setsid()` system call will be made in the child process prior to the execution of the subprocess.
[Availability](https://docs.python.org/3/library/intro.html#availability): POSIX
Changed in version 3.2: _start_new_session_ was added.
If _process_group_ is a non-negative integer, the `setpgid(0, value)` system call will be made in the child process prior to the execution of the subprocess.
[Availability](https://docs.python.org/3/library/intro.html#availability): POSIX
Changed in version 3.11: _process_group_ was added.
If _group_ is not `None`, the setregid() system call will be made in the child process prior to the execution of the subprocess. If the provided value is a string, it will be looked up via [`grp.getgrnam()`](https://docs.python.org/3/library/grp.html#grp.getgrnam "grp.getgrnam") and the value in `gr_gid` will be used. If the value is an integer, it will be passed verbatim. (POSIX only)
[Availability](https://docs.python.org/3/library/intro.html#availability): POSIX
Added in version 3.9.
If _extra_groups_ is not `None`, the setgroups() system call will be made in the child process prior to the execution of the subprocess. Strings provided in _extra_groups_ will be looked up via [`grp.getgrnam()`](https://docs.python.org/3/library/grp.html#grp.getgrnam "grp.getgrnam") and the values in `gr_gid` will be used. Integer values will be passed verbatim. (POSIX only)
[Availability](https://docs.python.org/3/library/intro.html#availability): POSIX
Added in version 3.9.
If _user_ is not `None`, the setreuid() system call will be made in the child process prior to the execution of the subprocess. If the provided value is a string, it will be looked up via [`pwd.getpwnam()`](https://docs.python.org/3/library/pwd.html#pwd.getpwnam "pwd.getpwnam") and the value in `pw_uid` will be used. If the value is an integer, it will be passed verbatim. (POSIX only)
[Availability](https://docs.python.org/3/library/intro.html#availability): POSIX
Added in version 3.9.
If _umask_ is not negative, the umask() system call will be made in the child process prior to the execution of the subprocess.
[Availability](https://docs.python.org/3/library/intro.html#availability): POSIX
Added in version 3.9.
If _env_ is not `None`, it must be a mapping that defines the environment variables for the new process; these are used instead of the default behavior of inheriting the current process’ environment.