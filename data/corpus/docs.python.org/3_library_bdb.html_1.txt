Title: Breakpoint Methods in Python's bdb Module
URL: https://docs.python.org/3/library/bdb.html
Summary: The documentation describes two methods for managing breakpoints in Python's bdb module: `bpformat()`, which returns a formatted string containing details about a breakpoint, and `bpprint()`, which prints the output of `bpformat()` to a specified file or standard output. Additional attributes of `Breakpoint` instances are also mentioned, such as the file name.
---

bpformat()[¶](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint.bpformat "Link to this definition")
    
Return a string with all the information about the breakpoint, nicely formatted:
  * Breakpoint number.
  * Temporary status (del or keep).
  * File/line position.
  * Break condition.
  * Number of times to ignore.
  * Number of times hit.


Added in version 3.2. 

bpprint(_out =None_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint.bpprint "Link to this definition")
    
Print the output of [`bpformat()`](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint.bpformat "bdb.Breakpoint.bpformat") to the file _out_ , or if it is `None`, to standard output.
[`Breakpoint`](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint "bdb.Breakpoint") instances have the following attributes: 

file[¶](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint.file "Link to this definition")
    
File name of the [`Breakpoint`](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint "bdb.Breakpoint"). 

line[¶](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint.line "Link to this definition")
    
Line number of the [`Breakpoint`](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint "bdb.Breakpoint") within [`file`](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint.file "bdb.Breakpoint.file"). 

temporary[¶](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint.temporary "Link to this definition")
    
`True` if a [`Breakpoint`](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint "bdb.Breakpoint") at (file, line) is temporary. 

cond[¶](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint.cond "Link to this definition")
    
Condition for evaluating a [`Breakpoint`](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint "bdb.Breakpoint") at (file, line). 

funcname[¶](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint.funcname "Link to this definition")
    
Function name that defines whether a [`Breakpoint`](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint "bdb.Breakpoint") is hit upon entering the function. 

enabled[¶](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint.enabled "Link to this definition")
    
`True` if [`Breakpoint`](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint "bdb.Breakpoint") is enabled. 

bpbynumber[¶](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint.bpbynumber "Link to this definition")
    
Numeric index for a single instance of a [`Breakpoint`](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint "bdb.Breakpoint"). 

bplist[¶](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint.bplist "Link to this definition")
    
Dictionary of [`Breakpoint`](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint "bdb.Breakpoint") instances indexed by ([`file`](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint.file "bdb.Breakpoint.file"), [`line`](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint.line "bdb.Breakpoint.line")) tuples. 

ignore[¶](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint.ignore "Link to this definition")
    
Number of times to ignore a [`Breakpoint`](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint "bdb.Breakpoint"). 

hits[¶](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint.hits "Link to this definition")
    
Count of the number of times a [`Breakpoint`](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint "bdb.Breakpoint") has been hit. 

_class_ bdb.Bdb(_skip =None_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb "Link to this definition")
    
The [`Bdb`](https://docs.python.org/3/library/bdb.html#bdb.Bdb "bdb.Bdb") class acts as a generic Python debugger base class.
This class takes care of the details of the trace facility; a derived class should implement user interaction. The standard debugger class ([`pdb.Pdb`](https://docs.python.org/3/library/pdb.html#pdb.Pdb "pdb.Pdb")) is an example.
The _skip_ argument, if given, must be an iterable of glob-style module name patterns. The debugger will not step into frames that originate in a module that matches one of these patterns. Whether a frame is considered to originate in a certain module is determined by the `__name__` in the frame globals.
Changed in version 3.1: Added the _skip_ parameter.
The following methods of [`Bdb`](https://docs.python.org/3/library/bdb.html#bdb.Bdb "bdb.Bdb") normally don’t need to be overridden.