Title: Deprecation of Yield Expressions in Comprehensions and Generator Expressions
URL: https://docs.python.org/3/whatsnew/3.7.html
Summary: Python 3.7 deprecates the use of yield expressions in comprehensions and generator expressions, ensuring these structures return the correct container type. This change aims to prevent interleaving of implicit and explicit outputs. Initially, these expressions result in a DeprecationWarning, transitioning to a SyntaxError in Python 3.8.
---

## Deprecated Python Behavior[¶](https://docs.python.org/3/whatsnew/3.7.html#deprecated-python-behavior "Link to this heading")
Yield expressions (both `yield` and `yield from` clauses) are now deprecated in comprehensions and generator expressions (aside from the iterable expression in the leftmost `for` clause). This ensures that comprehensions always immediately return a container of the appropriate type (rather than potentially returning a [generator iterator](https://docs.python.org/3/glossary.html#term-generator-iterator) object), while generator expressions won’t attempt to interleave their implicit output with the output from any explicit yield expressions. In Python 3.7, such expressions emit [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning") when compiled, in Python 3.8 this will be a [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError"). (Contributed by Serhiy Storchaka in [bpo-10544](https://bugs.python.org/issue?@action=redirect&bpo=10544).)
Returning a subclass of [`complex`](https://docs.python.org/3/library/functions.html#complex "complex") from [`object.__complex__()`](https://docs.python.org/3/reference/datamodel.html#object.__complex__ "object.__complex__") is deprecated and will be an error in future Python versions. This makes `__complex__()` consistent with [`object.__int__()`](https://docs.python.org/3/reference/datamodel.html#object.__int__ "object.__int__") and [`object.__float__()`](https://docs.python.org/3/reference/datamodel.html#object.__float__ "object.__float__"). (Contributed by Serhiy Storchaka in [bpo-28894](https://bugs.python.org/issue?@action=redirect&bpo=28894).)
## Deprecated Python modules, functions and methods[¶](https://docs.python.org/3/whatsnew/3.7.html#deprecated-python-modules-functions-and-methods "Link to this heading")
### aifc[¶](https://docs.python.org/3/whatsnew/3.7.html#aifc "Link to this heading")
`aifc.openfp()` has been deprecated and will be removed in Python 3.9. Use `aifc.open()` instead. (Contributed by Brian Curtin in [bpo-31985](https://bugs.python.org/issue?@action=redirect&bpo=31985).)
### asyncio[¶](https://docs.python.org/3/whatsnew/3.7.html#whatsnew37-asyncio-deprecated "Link to this heading")
Support for directly `await`-ing instances of [`asyncio.Lock`](https://docs.python.org/3/library/asyncio-sync.html#asyncio.Lock "asyncio.Lock") and other asyncio synchronization primitives has been deprecated. An asynchronous context manager must be used in order to acquire and release the synchronization resource. (Contributed by Andrew Svetlov in [bpo-32253](https://bugs.python.org/issue?@action=redirect&bpo=32253).)
The `asyncio.Task.current_task()` and `asyncio.Task.all_tasks()` methods have been deprecated. (Contributed by Andrew Svetlov in [bpo-32250](https://bugs.python.org/issue?@action=redirect&bpo=32250).)
### collections[¶](https://docs.python.org/3/whatsnew/3.7.html#id3 "Link to this heading")
In Python 3.8, the abstract base classes in [`collections.abc`](https://docs.python.org/3/library/collections.abc.html#module-collections.abc "collections.abc: Abstract base classes for containers") will no longer be exposed in the regular [`collections`](https://docs.python.org/3/library/collections.html#module-collections "collections: Container datatypes") module. This will help create a clearer distinction between the concrete classes and the abstract base classes. (Contributed by Serhiy Storchaka in [bpo-25988](https://bugs.python.org/issue?@action=redirect&bpo=25988).)
### dbm[¶](https://docs.python.org/3/whatsnew/3.7.html#id4 "Link to this heading")
[`dbm.dumb`](https://docs.python.org/3/library/dbm.html#module-dbm.dumb "dbm.dumb: Portable implementation of the simple DBM interface.") now supports reading read-only files and no longer writes the index file when it is not changed. A deprecation warning is now emitted if the index file is missing and recreated in the `'r'` and `'w'` modes (this will be an error in future Python releases). (Contributed by Serhiy Storchaka in [bpo-28847](https://bugs.python.org/issue?@action=redirect&bpo=28847).)
### enum[¶](https://docs.python.org/3/whatsnew/3.7.html#id5 "Link to this heading")
In Python 3.8, attempting to check for non-Enum objects in `Enum` classes will raise a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") (e.g. `1 in Color`); similarly, attempting to check for non-Flag objects in a `Flag` member will raise [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") (e.g. `1 in Perm.RW`); currently, both operations return [`False`](https://docs.python.org/3/library/constants.html#False "False") instead. (Contributed by Ethan Furman in [bpo-33217](https://bugs.python.org/issue?@action=redirect&bpo=33217).)
### gettext[¶](https://docs.python.org/3/whatsnew/3.7.html#gettext "Link to this heading")
Using non-integer value for se