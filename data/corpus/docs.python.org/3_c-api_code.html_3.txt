Title: PyCode Watcher Functions and Events
URL: https://docs.python.org/3/c-api/code.html
Summary: This section describes the `PyCode_ClearWatcher` function, which clears a watcher identified by a given watcher ID set by `PyCode_AddWatcher`, returning 0 on success or -1 on error. It also defines the `PyCodeEvent` enumeration for code object watcher events, including creation and destruction events, and introduces the `PyCode_WatchCallback` typedef for event handling.
---

intPyCode_ClearWatcher(intwatcher_id)[¶](https://docs.python.org/3/c-api/code.html#c.PyCode_ClearWatcher "Link to this definition")
    
Clear watcher identified by _watcher_id_ previously returned from [`PyCode_AddWatcher()`](https://docs.python.org/3/c-api/code.html#c.PyCode_AddWatcher "PyCode_AddWatcher") for the current interpreter. Return `0` on success, or `-1` and set an exception on error (e.g. if the given _watcher_id_ was never registered.)
Added in version 3.12. 

typePyCodeEvent[¶](https://docs.python.org/3/c-api/code.html#c.PyCodeEvent "Link to this definition")
    
Enumeration of possible code object watcher events: - `PY_CODE_EVENT_CREATE` - `PY_CODE_EVENT_DESTROY`
Added in version 3.12. 

typedefint(*PyCode_WatchCallback)([PyCodeEvent](https://docs.python.org/3/c-api/code.html#c.PyCodeEvent "PyCodeEvent")event,[PyCodeObject](https://docs.python.org/3/c-api/code.html#c.PyCodeObject "PyCodeObject")*co)[¶](https://docs.python.org/3/c-api/code.html#c.PyCode_WatchCallback "Link to this definition")
    
Type of a code object watcher callback function.
If _event_ is `PY_CODE_EVENT_CREATE`, then the callback is invoked after co has been fully initialized. Otherwise, the callback is invoked before the destruction of _co_ takes place, so the prior state of _co_ can be inspected.
If _event_ is `PY_CODE_EVENT_DESTROY`, taking a reference in the callback to the about-to-be-destroyed code object will resurrect it and prevent it from being freed at this time. When the resurrected object is destroyed later, any watcher callbacks active at that time will be called again.
Users of this API should not rely on internal runtime implementation details. Such details may include, but are not limited to, the exact order and timing of creation and destruction of code objects. While changes in these details may result in differences observable by watchers (including whether a callback is invoked or not), it does not change the semantics of the Python code being executed.
If the callback sets an exception, it must return `-1`; this exception will be printed as an unraisable exception using [`PyErr_WriteUnraisable()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_WriteUnraisable "PyErr_WriteUnraisable"). Otherwise it should return `0`.
There may already be a pending exception set on entry to the callback. In this case, the callback should return `0` with the same exception still set. This means the callback may not call any other API that can set an exception unless it saves and clears the exception state first, and restores it before returning.
Added in version 3.12.
# Extra information[¶](https://docs.python.org/3/c-api/code.html#extra-information "Link to this heading")
To support low-level extensions to frame evaluation, such as external just-in-time compilers, it is possible to attach arbitrary extra data to code objects.
These functions are part of the unstable C API tier: this functionality is a CPython implementation detail, and the API may change without deprecation warnings. 

[Py_ssize_t](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")PyUnstable_Eval_RequestCodeExtraIndex([freefunc](https://docs.python.org/3/c-api/typeobj.html#c.freefunc "freefunc")free)[¶](https://docs.python.org/3/c-api/code.html#c.PyUnstable_Eval_RequestCodeExtraIndex "Link to this definition")
    
_This is[ Unstable API](https://docs.python.org/3/c-api/stable.html#unstable-c-api). It may change without warning in minor releases._
Return a new an opaque index value used to adding data to code objects.
You generally call this function once (per interpreter) and use the result with `PyCode_GetExtra` and `PyCode_SetExtra` to manipulate data on individual code objects.
If _free_ is not `NULL`: when a code object is deallocated, _free_ will be called on non-`NULL` data stored under the new index. Use [`Py_DecRef()`](https://docs.python.org/3/c-api/refcounting.html#c.Py_DecRef "Py_DecRef") when storing [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject").
Added in version 3.6: as `_PyEval_RequestCodeExtraIndex`
Changed in version 3.12: Renamed to `PyUnstable_Eval_RequestCodeExtraIndex`. The old private name is deprecated, but will be available until the API changes.