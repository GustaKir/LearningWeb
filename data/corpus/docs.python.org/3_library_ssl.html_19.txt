Title: SSLContext.load_cert_chain Method
URL: https://docs.python.org/3/library/ssl.html
Summary: The SSLContext.load_cert_chain method loads a private key and its associated certificate from specified PEM files. The certfile must be a path to a file containing the certificate and any required CA certificates for authentication. An optional keyfile can specify the private key file, otherwise the key is taken from the certfile. A password function may be specified for decrypting the private key if it is encrypted.
---

```

Added in version 3.4. 

SSLContext.load_cert_chain(_certfile_ , _keyfile =None_, _password =None_)[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.load_cert_chain "Link to this definition")
    
Load a private key and the corresponding certificate. The _certfile_ string must be the path to a single file in PEM format containing the certificate as well as any number of CA certificates needed to establish the certificate’s authenticity. The _keyfile_ string, if present, must point to a file containing the private key. Otherwise the private key will be taken from _certfile_ as well. See the discussion of [Certificates](https://docs.python.org/3/library/ssl.html#ssl-certificates) for more information on how the certificate is stored in the _certfile_.
The _password_ argument may be a function to call to get the password for decrypting the private key. It will only be called if the private key is encrypted and a password is necessary. It will be called with no arguments, and it should return a string, bytes, or bytearray. If the return value is a string it will be encoded as UTF-8 before using it to decrypt the key. Alternatively a string, bytes, or bytearray value may be supplied directly as the _password_ argument. It will be ignored if the private key is not encrypted and no password is needed.
If the _password_ argument is not specified and a password is required, OpenSSL’s built-in password prompting mechanism will be used to interactively prompt the user for a password.
An [`SSLError`](https://docs.python.org/3/library/ssl.html#ssl.SSLError "ssl.SSLError") is raised if the private key doesn’t match with the certificate.
Changed in version 3.3: New optional argument _password_. 

SSLContext.load_default_certs(_purpose =Purpose.SERVER_AUTH_)[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.load_default_certs "Link to this definition")
    
Load a set of default “certification authority” (CA) certificates from default locations. On Windows it loads CA certs from the `CA` and `ROOT` system stores. On all systems it calls [`SSLContext.set_default_verify_paths()`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_default_verify_paths "ssl.SSLContext.set_default_verify_paths"). In the future the method may load CA certificates from other locations, too.
The _purpose_ flag specifies what kind of CA certificates are loaded. The default settings [`Purpose.SERVER_AUTH`](https://docs.python.org/3/library/ssl.html#ssl.Purpose.SERVER_AUTH "ssl.Purpose.SERVER_AUTH") loads certificates, that are flagged and trusted for TLS web server authentication (client side sockets). [`Purpose.CLIENT_AUTH`](https://docs.python.org/3/library/ssl.html#ssl.Purpose.CLIENT_AUTH "ssl.Purpose.CLIENT_AUTH") loads CA certificates for client certificate verification on the server side.
Added in version 3.4. 

SSLContext.load_verify_locations(_cafile =None_, _capath =None_, _cadata =None_)[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.load_verify_locations "Link to this definition")
    
Load a set of “certification authority” (CA) certificates used to validate other peers’ certificates when [`verify_mode`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.verify_mode "ssl.SSLContext.verify_mode") is other than [`CERT_NONE`](https://docs.python.org/3/library/ssl.html#ssl.CERT_NONE "ssl.CERT_NONE"). At least one of _cafile_ or _capath_ must be specified.
This method can also load certification revocation lists (CRLs) in PEM or DER format. In order to make use of CRLs, [`SSLContext.verify_flags`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.verify_flags "ssl.SSLContext.verify_flags") must be configured properly.
The _cafile_ string, if present, is the path to a file of concatenated CA certificates in PEM format. See the discussion of [Certificates](https://docs.python.org/3/library/ssl.html#ssl-certificates) for more information about how to arrange the certificates in this file.
The _capath_ string, if present, is the path to a directory containing several CA certificates in PEM format, following an [OpenSSL specific layout](https://docs.openssl.org/master/man3/SSL_CTX_load_verify_locations/).
The _cadata_ object, if present, is either an ASCII string of one or more PEM-encoded certificates or a [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object) of DER-encoded certificates. Like with _capath_ extra lines around PEM-encoded certificates are ignored but at least one certificate must be present.
Changed in version 3.4: New optional argument _cadata_