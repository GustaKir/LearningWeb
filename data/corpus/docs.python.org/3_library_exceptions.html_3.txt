Title: Python Exceptions: EOFError, FloatingPointError, GeneratorExit
URL: https://docs.python.org/3/library/exceptions.html
Summary: This document section describes three Python exceptions: EOFError, which occurs when the input() function encounters an end-of-file condition without reading data; FloatingPointError, which is currently unused; and GeneratorExit, raised when a generator or coroutine is closed.
---

_exception_ EOFError[¶](https://docs.python.org/3/library/exceptions.html#EOFError "Link to this definition")
    
Raised when the [`input()`](https://docs.python.org/3/library/functions.html#input "input") function hits an end-of-file condition (EOF) without reading any data. (N.B.: the `io.IOBase.read()` and [`io.IOBase.readline()`](https://docs.python.org/3/library/io.html#io.IOBase.readline "io.IOBase.readline") methods return an empty string when they hit EOF.) 

_exception_ FloatingPointError[¶](https://docs.python.org/3/library/exceptions.html#FloatingPointError "Link to this definition")
    
Not currently used. 

_exception_ GeneratorExit[¶](https://docs.python.org/3/library/exceptions.html#GeneratorExit "Link to this definition")
    
Raised when a [generator](https://docs.python.org/3/glossary.html#term-generator) or [coroutine](https://docs.python.org/3/glossary.html#term-coroutine) is closed; see [`generator.close()`](https://docs.python.org/3/reference/expressions.html#generator.close "generator.close") and [`coroutine.close()`](https://docs.python.org/3/reference/datamodel.html#coroutine.close "coroutine.close"). It directly inherits from [`BaseException`](https://docs.python.org/3/library/exceptions.html#BaseException "BaseException") instead of [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception "Exception") since it is technically not an error. 

_exception_ ImportError[¶](https://docs.python.org/3/library/exceptions.html#ImportError "Link to this definition")
    
Raised when the [`import`](https://docs.python.org/3/reference/simple_stmts.html#import) statement has troubles trying to load a module. Also raised when the “from list” in `from ... import` has a name that cannot be found.
The optional _name_ and _path_ keyword-only arguments set the corresponding attributes: 

name[¶](https://docs.python.org/3/library/exceptions.html#ImportError.name "Link to this definition")
    
The name of the module that was attempted to be imported. 

path[¶](https://docs.python.org/3/library/exceptions.html#ImportError.path "Link to this definition")
    
The path to any file which triggered the exception.
Changed in version 3.3: Added the [`name`](https://docs.python.org/3/library/exceptions.html#ImportError.name "ImportError.name") and [`path`](https://docs.python.org/3/library/exceptions.html#ImportError.path "ImportError.path") attributes. 

_exception_ ModuleNotFoundError[¶](https://docs.python.org/3/library/exceptions.html#ModuleNotFoundError "Link to this definition")
    
A subclass of [`ImportError`](https://docs.python.org/3/library/exceptions.html#ImportError "ImportError") which is raised by [`import`](https://docs.python.org/3/reference/simple_stmts.html#import) when a module could not be located. It is also raised when `None` is found in [`sys.modules`](https://docs.python.org/3/library/sys.html#sys.modules "sys.modules").
Added in version 3.6. 

_exception_ IndexError[¶](https://docs.python.org/3/library/exceptions.html#IndexError "Link to this definition")
    
Raised when a sequence subscript is out of range. (Slice indices are silently truncated to fall in the allowed range; if an index is not an integer, [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") is raised.) 

_exception_ KeyError[¶](https://docs.python.org/3/library/exceptions.html#KeyError "Link to this definition")
    
Raised when a mapping (dictionary) key is not found in the set of existing keys. 

_exception_ KeyboardInterrupt[¶](https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt "Link to this definition")
    
Raised when the user hits the interrupt key (normally `Control`-`C` or `Delete`). During execution, a check for interrupts is made regularly. The exception inherits from [`BaseException`](https://docs.python.org/3/library/exceptions.html#BaseException "BaseException") so as to not be accidentally caught by code that catches [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception "Exception") and thus prevent the interpreter from exiting.
Note
Catching a [`KeyboardInterrupt`](https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt "KeyboardInterrupt") requires special consideration. Because it can be raised at unpredictable points, it may, in some circumstances, leave the running program in an inconsistent state. It is generally best to allow [`KeyboardInterrupt`](https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt "KeyboardInterrupt") to end the program as quickly as possible or avoid raising it entirely. (See [Note on Signal Handlers and Exceptions](https://docs.python.org/3/library/signal.html#handlers-and-exceptions).)