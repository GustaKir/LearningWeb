Title: Tuple Constructor in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: The constructor creates a tuple from an iterable, such as a sequence or iterator. It returns an unchanged tuple if the input is already a tuple and produces an empty tuple if no argument is provided. The comma defines the tuple, not the parentheses, which are optional except in specific cases. Tuples support all common sequence operations.
---

The constructor builds a tuple whose items are the same and in the same order as _iterable_ â€™s items. _iterable_ may be either a sequence, a container that supports iteration, or an iterator object. If _iterable_ is already a tuple, it is returned unchanged. For example, `tuple('abc')` returns `('a', 'b', 'c')` and `tuple( [1, 2, 3] )` returns `(1, 2, 3)`. If no argument is given, the constructor creates a new empty tuple, `()`.
Note that it is actually the comma which makes a tuple, not the parentheses. The parentheses are optional, except in the empty tuple case, or when they are needed to avoid syntactic ambiguity. For example, `f(a, b, c)` is a function call with three arguments, while `f((a, b, c))` is a function call with a 3-tuple as the sole argument.
Tuples implement all of the [common](https://docs.python.org/3/library/stdtypes.html#typesseq-common) sequence operations.
For heterogeneous collections of data where access by name is clearer than access by index, [`collections.namedtuple()`](https://docs.python.org/3/library/collections.html#collections.namedtuple "collections.namedtuple") may be a more appropriate choice than a simple tuple object.
### Ranges[Â¶](https://docs.python.org/3/library/stdtypes.html#ranges "Link to this heading")
The [`range`](https://docs.python.org/3/library/stdtypes.html#range "range") type represents an immutable sequence of numbers and is commonly used for looping a specific number of times in [`for`](https://docs.python.org/3/reference/compound_stmts.html#for) loops. 

_class_ range(_stop_)[Â¶](https://docs.python.org/3/library/stdtypes.html#range "Link to this definition")


_class_ range(_start_ , _stop_[, _step_])
    
The arguments to the range constructor must be integers (either built-in [`int`](https://docs.python.org/3/library/functions.html#int "int") or any object that implements the [`__index__()`](https://docs.python.org/3/reference/datamodel.html#object.__index__ "object.__index__") special method). If the _step_ argument is omitted, it defaults to `1`. If the _start_ argument is omitted, it defaults to `0`. If _step_ is zero, [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised.
For a positive _step_ , the contents of a range `r` are determined by the formula `r[i] = start + step*i` where `i >= 0` and `r[i] < stop`.
For a negative _step_ , the contents of the range are still determined by the formula `r[i] = start + step*i`, but the constraints are `i >= 0` and `r[i] > stop`.
A range object will be empty if `r[0]` does not meet the value constraint. Ranges do support negative indices, but these are interpreted as indexing from the end of the sequence determined by the positive indices.
Ranges containing absolute values larger than [`sys.maxsize`](https://docs.python.org/3/library/sys.html#sys.maxsize "sys.maxsize") are permitted but some features (such as [`len()`](https://docs.python.org/3/library/functions.html#len "len")) may raise [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError").
Range examples:
>>>```
>>> list(range(10))
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
>>> list(range(1, 11))
[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
>>> list(range(0, 30, 5))
[0, 5, 10, 15, 20, 25]
>>> list(range(0, 10, 3))
[0, 3, 6, 9]
>>> list(range(0, -10, -1))
[0, -1, -2, -3, -4, -5, -6, -7, -8, -9]
>>> list(range(0))
[]
>>> list(range(1, 0))
[]