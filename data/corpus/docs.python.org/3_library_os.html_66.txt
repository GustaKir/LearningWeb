Title: os.waitpid() Function Overview
URL: https://docs.python.org/3/library/os.html
Summary: The os.waitpid() function is used to wait for the completion of a child process on Unix and Windows. It returns a tuple with the child process's ID and exit status. The behavior varies based on the _pid_ parameter (specific process, process group, or any child) and the _options_ parameter, which is typically set to 0 for normal operation.
---

os.waitpid(_pid_ , _options_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.waitpid "Link to this definition")
    
The details of this function differ on Unix and Windows.
On Unix: Wait for completion of a child process given by process id _pid_ , and return a tuple containing its process id and exit status indication (encoded as for [`wait()`](https://docs.python.org/3/library/os.html#os.wait "os.wait")). The semantics of the call are affected by the value of the integer _options_ , which should be `0` for normal operation.
If _pid_ is greater than `0`, [`waitpid()`](https://docs.python.org/3/library/os.html#os.waitpid "os.waitpid") requests status information for that specific process. If _pid_ is `0`, the request is for the status of any child in the process group of the current process. If _pid_ is `-1`, the request pertains to any child of the current process. If _pid_ is less than `-1`, status is requested for any process in the process group `-pid` (the absolute value of _pid_).
_options_ is an OR combination of flags. If it contains [`WNOHANG`](https://docs.python.org/3/library/os.html#os.WNOHANG "os.WNOHANG") and there are no matching children in the requested state, `(0, 0)` is returned. Otherwise, if there are no matching children that could be waited for, [`ChildProcessError`](https://docs.python.org/3/library/exceptions.html#ChildProcessError "ChildProcessError") is raised. Other options that can be used are [`WUNTRACED`](https://docs.python.org/3/library/os.html#os.WUNTRACED "os.WUNTRACED") and [`WCONTINUED`](https://docs.python.org/3/library/os.html#os.WCONTINUED "os.WCONTINUED").
On Windows: Wait for completion of a process given by process handle _pid_ , and return a tuple containing _pid_ , and its exit status shifted left by 8 bits (shifting makes cross-platform use of the function easier). A _pid_ less than or equal to `0` has no special meaning on Windows, and raises an exception. The value of integer _options_ has no effect. _pid_ can refer to any process whose id is known, not necessarily a child process. The [`spawn*`](https://docs.python.org/3/library/os.html#os.spawnl "os.spawnl") functions called with [`P_NOWAIT`](https://docs.python.org/3/library/os.html#os.P_NOWAIT "os.P_NOWAIT") return suitable process handles.
[`waitstatus_to_exitcode()`](https://docs.python.org/3/library/os.html#os.waitstatus_to_exitcode "os.waitstatus_to_exitcode") can be used to convert the exit status into an exit code.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, Windows, not WASI, not Android, not iOS.
Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an exception, the function now retries the system call instead of raising an [`InterruptedError`](https://docs.python.org/3/library/exceptions.html#InterruptedError "InterruptedError") exception (see [**PEP 475**](https://peps.python.org/pep-0475/) for the rationale). 

os.wait3(_options_)[¶](https://docs.python.org/3/library/os.html#os.wait3 "Link to this definition")
    
Similar to [`waitpid()`](https://docs.python.org/3/library/os.html#os.waitpid "os.waitpid"), except no process id argument is given and a 3-element tuple containing the child’s process id, exit status indication, and resource usage information is returned. Refer to [`resource.getrusage()`](https://docs.python.org/3/library/resource.html#resource.getrusage "resource.getrusage") for details on resource usage information. The _options_ argument is the same as that provided to [`waitpid()`](https://docs.python.org/3/library/os.html#os.waitpid "os.waitpid") and [`wait4()`](https://docs.python.org/3/library/os.html#os.wait4 "os.wait4").
[`waitstatus_to_exitcode()`](https://docs.python.org/3/library/os.html#os.waitstatus_to_exitcode "os.waitstatus_to_exitcode") can be used to convert the exit status into an exitcode.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI, not Android, not iOS.