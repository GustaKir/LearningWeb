Title: Handling Exceptions with finally Clause in Python
URL: https://docs.python.org/3/tutorial/errors.html
Summary: The `finally` clause in a try-except structure executes last, regardless of whether an exception occurs. If an exception arises in the try block, it can be caught by an except clause; otherwise, it's re-raised after the finally clause executes. Exceptions can also occur within except or else clauses, leading to a similar outcome.
---

```

If a [`finally`](https://docs.python.org/3/reference/compound_stmts.html#finally) clause is present, the `finally` clause will execute as the last task before the [`try`](https://docs.python.org/3/reference/compound_stmts.html#try) statement completes. The `finally` clause runs whether or not the `try` statement produces an exception. The following points discuss more complex cases when an exception occurs:
  * If an exception occurs during execution of the `try` clause, the exception may be handled by an [`except`](https://docs.python.org/3/reference/compound_stmts.html#except) clause. If the exception is not handled by an `except` clause, the exception is re-raised after the `finally` clause has been executed.
  * An exception could occur during execution of an `except` or `else` clause. Again, the exception is re-raised after the `finally` clause has been executed.
  * If the `finally` clause executes a [`break`](https://docs.python.org/3/reference/simple_stmts.html#break), [`continue`](https://docs.python.org/3/reference/simple_stmts.html#continue) or [`return`](https://docs.python.org/3/reference/simple_stmts.html#return) statement, exceptions are not re-raised.
  * If the `try` statement reaches a [`break`](https://docs.python.org/3/reference/simple_stmts.html#break), [`continue`](https://docs.python.org/3/reference/simple_stmts.html#continue) or [`return`](https://docs.python.org/3/reference/simple_stmts.html#return) statement, the `finally` clause will execute just prior to the `break`, `continue` or `return` statement’s execution.
  * If a `finally` clause includes a `return` statement, the returned value will be the one from the `finally` clause’s `return` statement, not the value from the `try` clause’s `return` statement.


For example:
>>>```
>>> defbool_return():
...   try:
...     return True
...   finally:
...     return False
...
>>> bool_return()
False

```

A more complicated example:
>>>```
>>> defdivide(x, y):
...   try:
...     result = x / y
...   except ZeroDivisionError:
...     print("division by zero!")
...   else:
...     print("result is", result)
...   finally:
...     print("executing finally clause")
...
>>> divide(2, 1)
result is 2.0
executing finally clause
>>> divide(2, 0)
division by zero!
executing finally clause
>>> divide("2", "1")
executing finally clause
Traceback (most recent call last):
 File "<stdin>", line 1, in <module>
divide("2", "1")
~~~~~~^^^^^^^^^^
 File "<stdin>", line 3, in divide
result = x / y
~~^~~
TypeError: unsupported operand type(s) for /: 'str' and 'str'

```

As you can see, the [`finally`](https://docs.python.org/3/reference/compound_stmts.html#finally) clause is executed in any event. The [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") raised by dividing two strings is not handled by the [`except`](https://docs.python.org/3/reference/compound_stmts.html#except) clause and therefore re-raised after the `finally` clause has been executed.
In real world applications, the [`finally`](https://docs.python.org/3/reference/compound_stmts.html#finally) clause is useful for releasing external resources (such as files or network connections), regardless of whether the use of the resource was successful.
## 8.8. Predefined Clean-up Actions[¶](https://docs.python.org/3/tutorial/errors.html#predefined-clean-up-actions "Link to this heading")
Some objects define standard clean-up actions to be undertaken when the object is no longer needed, regardless of whether or not the operation using the object succeeded or failed. Look at the following example, which tries to open a file and print its contents to the screen.
```
for line in open("myfile.txt"):
  print(line, end="")

```

The problem with this code is that it leaves the file open for an indeterminate amount of time after this part of the code has finished executing. This is not an issue in simple scripts, but can be a problem for larger applications. The [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement allows objects like files to be used in a way that ensures they are always cleaned up promptly and correctly.
```
with open("myfile.txt") as f:
  for line in f:
    print(line, end="")