Title: Parameters for Pretty-Printing in Python
URL: https://docs.python.org/3/library/pprint.html
Summary: This section outlines the parameters for the pprint module in Python, including 'object' for the item to be printed, 'stream' for output destination, 'indent' for nesting indentation, 'width' for line length, and 'depth' for controlling the number of nesting levels displayed.
---

Parameters:
    
  * **object** – The object to be printed.
  * **stream** ([file-like object](https://docs.python.org/3/glossary.html#term-file-like-object) | None) – A file-like object to which the output will be written by calling its `write()` method. If `None` (the default), [`sys.stdout`](https://docs.python.org/3/library/sys.html#sys.stdout "sys.stdout") is used.
  * **indent** ([_int_](https://docs.python.org/3/library/functions.html#int "int")) – The amount of indentation added for each nesting level.
  * **width** ([_int_](https://docs.python.org/3/library/functions.html#int "int")) – The desired maximum number of characters per line in the output. If a structure cannot be formatted within the width constraint, a best effort will be made.
  * **depth** ([_int_](https://docs.python.org/3/library/functions.html#int "int") _|__None_) – The number of nesting levels which may be printed. If the data structure being printed is too deep, the next contained level is replaced by `...`. If `None` (the default), there is no constraint on the depth of the objects being formatted.
  * **compact** ([_bool_](https://docs.python.org/3/library/functions.html#bool "bool")) – Control the way long [sequences](https://docs.python.org/3/glossary.html#term-sequence) are formatted. If `False` (the default), each item of a sequence will be formatted on a separate line, otherwise as many items as will fit within the _width_ will be formatted on each output line.
  * **sort_dicts** ([_bool_](https://docs.python.org/3/library/functions.html#bool "bool")) – If `True`, dictionaries will be formatted with their keys sorted, otherwise they will be displayed in insertion order (the default).
  * **underscore_numbers** ([_bool_](https://docs.python.org/3/library/functions.html#bool "bool")) – If `True`, integers will be formatted with the `_` character for a thousands separator, otherwise underscores are not displayed (the default).


>>>```
>>> importpprint
>>> stuff = ['spam', 'eggs', 'lumberjack', 'knights', 'ni']
>>> stuff.insert(0, stuff)
>>> pprint.pp(stuff)
[<Recursion on list with id=...>,
 'spam',
 'eggs',
 'lumberjack',
 'knights',
 'ni']

```

Added in version 3.8. 

pprint.pprint(_object_ , _stream =None_, _indent =1_, _width =80_, _depth =None_, _*_ , _compact =False_, _sort_dicts =True_, _underscore_numbers =False_)[¶](https://docs.python.org/3/library/pprint.html#pprint.pprint "Link to this definition")
    
Alias for [`pp()`](https://docs.python.org/3/library/pprint.html#pprint.pp "pprint.pp") with _sort_dicts_ set to `True` by default, which would automatically sort the dictionaries’ keys, you might want to use [`pp()`](https://docs.python.org/3/library/pprint.html#pprint.pp "pprint.pp") instead where it is `False` by default. 

pprint.pformat(_object_ , _indent =1_, _width =80_, _depth =None_, _*_ , _compact =False_, _sort_dicts =True_, _underscore_numbers =False_)[¶](https://docs.python.org/3/library/pprint.html#pprint.pformat "Link to this definition")
    
Return the formatted representation of _object_ as a string. _indent_ , _width_ , _depth_ , _compact_ , _sort_dicts_ and _underscore_numbers_ are passed to the [`PrettyPrinter`](https://docs.python.org/3/library/pprint.html#pprint.PrettyPrinter "pprint.PrettyPrinter") constructor as formatting parameters and their meanings are as described in the documentation above. 

pprint.isreadable(_object_)[¶](https://docs.python.org/3/library/pprint.html#pprint.isreadable "Link to this definition")
    
Determine if the formatted representation of _object_ is “readable”, or can be used to reconstruct the value using [`eval()`](https://docs.python.org/3/library/functions.html#eval "eval"). This always returns `False` for recursive objects.
>>>```
>>> pprint.isreadable(stuff)
False