Title: pow Function in Python
URL: https://docs.python.org/3/library/functions.html
Summary: The pow function calculates the power of a base raised to an exponent, with an optional modulus for efficient computation. It accepts numeric types, applies coercion rules for mixed types, and returns the result based on the input types, with specific behavior for negative exponents.
---

pow(_base_ , _exp_ , _mod =None_)[¶](https://docs.python.org/3/library/functions.html#pow "Link to this definition")
    
Return _base_ to the power _exp_ ; if _mod_ is present, return _base_ to the power _exp_ , modulo _mod_ (computed more efficiently than `pow(base, exp) % mod`). The two-argument form `pow(base, exp)` is equivalent to using the power operator: `base**exp`.
The arguments must have numeric types. With mixed operand types, the coercion rules for binary arithmetic operators apply. For [`int`](https://docs.python.org/3/library/functions.html#int "int") operands, the result has the same type as the operands (after coercion) unless the second argument is negative; in that case, all arguments are converted to float and a float result is delivered. For example, `pow(10, 2)` returns `100`, but `pow(10, -2)` returns `0.01`. For a negative base of type [`int`](https://docs.python.org/3/library/functions.html#int "int") or [`float`](https://docs.python.org/3/library/functions.html#float "float") and a non-integral exponent, a complex result is delivered. For example, `pow(-9, 0.5)` returns a value close to `3j`. Whereas, for a negative base of type [`int`](https://docs.python.org/3/library/functions.html#int "int") or [`float`](https://docs.python.org/3/library/functions.html#float "float") with an integral exponent, a float result is delivered. For example, `pow(-9, 2.0)` returns `81.0`.
For [`int`](https://docs.python.org/3/library/functions.html#int "int") operands _base_ and _exp_ , if _mod_ is present, _mod_ must also be of integer type and _mod_ must be nonzero. If _mod_ is present and _exp_ is negative, _base_ must be relatively prime to _mod_. In that case, `pow(inv_base, -exp, mod)` is returned, where _inv_base_ is an inverse to _base_ modulo _mod_.
Here’s an example of computing an inverse for `38` modulo `97`:
>>>```
>>> pow(38, -1, mod=97)
23
>>> 23 * 38 % 97 == 1
True

```

Changed in version 3.8: For [`int`](https://docs.python.org/3/library/functions.html#int "int") operands, the three-argument form of `pow` now allows the second argument to be negative, permitting computation of modular inverses.
Changed in version 3.8: Allow keyword arguments. Formerly, only positional arguments were supported. 

print(_* objects_, _sep =' '_, _end ='\n'_, _file =None_, _flush =False_)[¶](https://docs.python.org/3/library/functions.html#print "Link to this definition")
    
Print _objects_ to the text stream _file_ , separated by _sep_ and followed by _end_. _sep_ , _end_ , _file_ , and _flush_ , if present, must be given as keyword arguments.
All non-keyword arguments are converted to strings like [`str()`](https://docs.python.org/3/library/stdtypes.html#str "str") does and written to the stream, separated by _sep_ and followed by _end_. Both _sep_ and _end_ must be strings; they can also be `None`, which means to use the default values. If no _objects_ are given, [`print()`](https://docs.python.org/3/library/functions.html#print "print") will just write _end_.
The _file_ argument must be an object with a `write(string)` method; if it is not present or `None`, [`sys.stdout`](https://docs.python.org/3/library/sys.html#sys.stdout "sys.stdout") will be used. Since printed arguments are converted to text strings, [`print()`](https://docs.python.org/3/library/functions.html#print "print") cannot be used with binary mode file objects. For these, use `file.write(...)` instead.
Output buffering is usually determined by _file_. However, if _flush_ is true, the stream is forcibly flushed.
Changed in version 3.3: Added the _flush_ keyword argument. 

_class_ property(_fget =None_, _fset =None_, _fdel =None_, _doc =None_)[¶](https://docs.python.org/3/library/functions.html#property "Link to this definition")
    
Return a property attribute.
_fget_ is a function for getting an attribute value. _fset_ is a function for setting an attribute value. _fdel_ is a function for deleting an attribute value. And _doc_ creates a docstring for the attribute.
A typical use is to define a managed attribute `x`:
```
classC:
  def__init__(self):
    self._x = None
  defgetx(self):
    return self._x
  defsetx(self, value):
    self._x = value
  defdelx(self):
    del self._x
  x = property(getx, setx, delx, "I'm the 'x' property.")

```

If _c_ is an instance of _C_ , `c.x` will invoke the getter, `c.x = value` will invoke the setter, and `del c.x` the deleter.
If given, _doc_ will be the docstring of the property attribute. Otherwise, the property will copy _fget_ ’s docstring (if it exists). This makes it possible to create read-only properties easily using [`property()`](https://docs.python.org/3/library/functions.html#property "property") as a [decorator](https://docs.python.org/3/glossary.html#term-decorator):
```
classParrot:
  def__init__(self):
    self._voltage = 100000
  @property
  defvoltage(self):
"""Get the current voltage."""
    return self._voltage