Title: Overview of SimpleNamespace and DynamicClassAttribute
URL: https://docs.python.org/3/library/types.html
Summary: The `SimpleNamespace` class serves as a simple alternative to creating classes without explicit attributes but is less structured than `namedtuple()`. It allows for copying with `copy.replace()` and has undergone changes in attribute order in versions 3.9 and 3.13. The `DynamicClassAttribute` is a descriptor that modifies how attributes are accessed via instances and classes, specifically by redirecting attribute access to `__getattr__`.
---

```

`SimpleNamespace` may be useful as a replacement for `class NS: pass`. However, for a structured record type use [`namedtuple()`](https://docs.python.org/3/library/collections.html#collections.namedtuple "collections.namedtuple") instead.
`SimpleNamespace` objects are supported by [`copy.replace()`](https://docs.python.org/3/library/copy.html#copy.replace "copy.replace").
Added in version 3.3.
Changed in version 3.9: Attribute order in the repr changed from alphabetical to insertion (like `dict`).
Changed in version 3.13: Added support for an optional positional argument. 

types.DynamicClassAttribute(_fget =None_, _fset =None_, _fdel =None_, _doc =None_)[¶](https://docs.python.org/3/library/types.html#types.DynamicClassAttribute "Link to this definition")
    
Route attribute access on a class to __getattr__.
This is a descriptor, used to define attributes that act differently when accessed through an instance and through a class. Instance access remains normal, but access to an attribute through a class will be routed to the class’s __getattr__ method; this is done by raising AttributeError.
This allows one to have properties active on an instance, and have virtual attributes on the class with the same name (see [`enum.Enum`](https://docs.python.org/3/library/enum.html#enum.Enum "enum.Enum") for an example).
Added in version 3.4.
## Coroutine Utility Functions[¶](https://docs.python.org/3/library/types.html#coroutine-utility-functions "Link to this heading") 

types.coroutine(_gen_func_)[¶](https://docs.python.org/3/library/types.html#types.coroutine "Link to this definition")
    
This function transforms a [generator](https://docs.python.org/3/glossary.html#term-generator) function into a [coroutine function](https://docs.python.org/3/glossary.html#term-coroutine-function) which returns a generator-based coroutine. The generator-based coroutine is still a [generator iterator](https://docs.python.org/3/glossary.html#term-generator-iterator), but is also considered to be a [coroutine](https://docs.python.org/3/glossary.html#term-coroutine) object and is [awaitable](https://docs.python.org/3/glossary.html#term-awaitable). However, it may not necessarily implement the [`__await__()`](https://docs.python.org/3/reference/datamodel.html#object.__await__ "object.__await__") method.
If _gen_func_ is a generator function, it will be modified in-place.
If _gen_func_ is not a generator function, it will be wrapped. If it returns an instance of [`collections.abc.Generator`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Generator "collections.abc.Generator"), the instance will be wrapped in an _awaitable_ proxy object. All other types of objects will be returned as is.
Added in version 3.5.
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [`types` — Dynamic type creation and names for built-in types](https://docs.python.org/3/library/types.html)
    * [Dynamic Type Creation](https://docs.python.org/3/library/types.html#dynamic-type-creation)
    * [Standard Interpreter Types](https://docs.python.org/3/library/types.html#standard-interpreter-types)
    * [Additional Utility Classes and Functions](https://docs.python.org/3/library/types.html#additional-utility-classes-and-functions)
    * [Coroutine Utility Functions](https://docs.python.org/3/library/types.html#coroutine-utility-functions)


#### Previous topic
[`weakref` — Weak references](https://docs.python.org/3/library/weakref.html "previous chapter")
#### Next topic
[`copy` — Shallow and deep copy operations](https://docs.python.org/3/library/copy.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/types.rst)


«
### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/copy.html "copy — Shallow and deep copy operations") |
  * [previous](https://docs.python.org/3/library/weakref.html "weakref — Weak references") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Data Types](https://docs.python.org/3/library/datatypes.html) »
  * [`types` — Dynamic type creation and names for built-in types](https://docs.python.org/3/library/types.html)
  * | 
  * Theme  Auto Light Dark |