Title: OS Module - Process Creation Functions
URL: https://docs.python.org/3/library/os.html
Summary: This section discusses the auditing event for `os.spawn` and outlines the availability of various spawn functions on different operating systems. Specific functions like `spawnlp`, `spawnlpe`, `spawnvp`, and `spawnvpe` are unavailable on Windows, while `spawnle` and `spawnve` are noted as not being thread-safe. It is recommended to use the `subprocess` module for managing subprocesses instead.
---

```

Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.spawn` with arguments `mode`, `path`, `args`, `env`.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, Windows, not WASI, not Android, not iOS.
[`spawnlp()`](https://docs.python.org/3/library/os.html#os.spawnlp "os.spawnlp"), [`spawnlpe()`](https://docs.python.org/3/library/os.html#os.spawnlpe "os.spawnlpe"), [`spawnvp()`](https://docs.python.org/3/library/os.html#os.spawnvp "os.spawnvp") and [`spawnvpe()`](https://docs.python.org/3/library/os.html#os.spawnvpe "os.spawnvpe") are not available on Windows. [`spawnle()`](https://docs.python.org/3/library/os.html#os.spawnle "os.spawnle") and [`spawnve()`](https://docs.python.org/3/library/os.html#os.spawnve "os.spawnve") are not thread-safe on Windows; we advise you to use the [`subprocess`](https://docs.python.org/3/library/subprocess.html#module-subprocess "subprocess: Subprocess management.") module instead.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). 

os.P_NOWAIT[¶](https://docs.python.org/3/library/os.html#os.P_NOWAIT "Link to this definition")


os.P_NOWAITO[¶](https://docs.python.org/3/library/os.html#os.P_NOWAITO "Link to this definition")
    
Possible values for the _mode_ parameter to the [`spawn*`](https://docs.python.org/3/library/os.html#os.spawnl "os.spawnl") family of functions. If either of these values is given, the [`spawn*`](https://docs.python.org/3/library/os.html#os.spawnl "os.spawnl") functions will return as soon as the new process has been created, with the process id as the return value.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, Windows. 

os.P_WAIT[¶](https://docs.python.org/3/library/os.html#os.P_WAIT "Link to this definition")
    
Possible value for the _mode_ parameter to the [`spawn*`](https://docs.python.org/3/library/os.html#os.spawnl "os.spawnl") family of functions. If this is given as _mode_ , the [`spawn*`](https://docs.python.org/3/library/os.html#os.spawnl "os.spawnl") functions will not return until the new process has run to completion and will return the exit code of the process the run is successful, or `-signal` if a signal kills the process.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, Windows. 

os.P_DETACH[¶](https://docs.python.org/3/library/os.html#os.P_DETACH "Link to this definition")


os.P_OVERLAY[¶](https://docs.python.org/3/library/os.html#os.P_OVERLAY "Link to this definition")
    
Possible values for the _mode_ parameter to the [`spawn*`](https://docs.python.org/3/library/os.html#os.spawnl "os.spawnl") family of functions. These are less portable than those listed above. [`P_DETACH`](https://docs.python.org/3/library/os.html#os.P_DETACH "os.P_DETACH") is similar to [`P_NOWAIT`](https://docs.python.org/3/library/os.html#os.P_NOWAIT "os.P_NOWAIT"), but the new process is detached from the console of the calling process. If [`P_OVERLAY`](https://docs.python.org/3/library/os.html#os.P_OVERLAY "os.P_OVERLAY") is used, the current process will be replaced; the [`spawn*`](https://docs.python.org/3/library/os.html#os.spawnl "os.spawnl") function will not return.
[Availability](https://docs.python.org/3/library/intro.html#availability): Windows.