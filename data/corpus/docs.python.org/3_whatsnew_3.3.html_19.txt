Title: Python 3.3 Email Package Enhancements
URL: https://docs.python.org/3/whatsnew/3.3.html
Summary: Python 3.3 introduces improvements in the email package allowing for seamless header manipulation with unicode strings. It ensures proper encoding and decoding to and from the RFC standard Content Transfer Encodings. Additionally, a new `BytesHeaderParser` is introduced.
---

```
>>> m2['cc'].addresses
(Address(display_name='Bob', username='bob', domain='example.com'), Address(display_name='Sally', username='sally', domain='example.com'), Address(display_name='Bonzo', username='bonz', domain='laugh.com'))
>>> m2['cc'].groups
(Group(display_name='pals', addresses=(Address(display_name='Bob', username='bob', domain='example.com'), Address(display_name='Sally', username='sally', domain='example.com')), Group(display_name=None, addresses=(Address(display_name='Bonzo', username='bonz', domain='laugh.com'),))

```

In summary, if you use one of the new policies, header manipulation works the way it ought to: your application works with unicode strings, and the email package transparently encodes and decodes the unicode to and from the RFC standard Content Transfer Encodings.
#### Other API Changes[¶](https://docs.python.org/3/whatsnew/3.3.html#other-api-changes "Link to this heading")
New [`BytesHeaderParser`](https://docs.python.org/3/library/email.parser.html#email.parser.BytesHeaderParser "email.parser.BytesHeaderParser"), added to the [`parser`](https://docs.python.org/3/library/email.parser.html#module-email.parser "email.parser: Parse flat text email messages to produce a message object structure.") module to complement [`HeaderParser`](https://docs.python.org/3/library/email.parser.html#email.parser.HeaderParser "email.parser.HeaderParser") and complete the Bytes API.
New utility functions:
  * [`format_datetime()`](https://docs.python.org/3/library/email.utils.html#email.utils.format_datetime "email.utils.format_datetime"): given a [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime"), produce a string formatted for use in an email header.
  * [`parsedate_to_datetime()`](https://docs.python.org/3/library/email.utils.html#email.utils.parsedate_to_datetime "email.utils.parsedate_to_datetime"): given a date string from an email header, convert it into an aware [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime"), or a naive [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") if the offset is `-0000`.
  * [`localtime()`](https://docs.python.org/3/library/email.utils.html#email.utils.localtime "email.utils.localtime"): With no argument, returns the current local time as an aware [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") using the local [`timezone`](https://docs.python.org/3/library/datetime.html#datetime.timezone "datetime.timezone"). Given an aware [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime"), converts it into an aware [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") using the local [`timezone`](https://docs.python.org/3/library/datetime.html#datetime.timezone "datetime.timezone").


### ftplib[¶](https://docs.python.org/3/whatsnew/3.3.html#ftplib "Link to this heading")
  * [`ftplib.FTP`](https://docs.python.org/3/library/ftplib.html#ftplib.FTP "ftplib.FTP") now accepts a `source_address` keyword argument to specify the `(host, port)` to use as the source address in the bind call when creating the outgoing socket. (Contributed by Giampaolo Rodolà in [bpo-8594](https://bugs.python.org/issue?@action=redirect&bpo=8594).)
  * The [`FTP_TLS`](https://docs.python.org/3/library/ftplib.html#ftplib.FTP_TLS "ftplib.FTP_TLS") class now provides a new [`ccc()`](https://docs.python.org/3/library/ftplib.html#ftplib.FTP_TLS.ccc "ftplib.FTP_TLS.ccc") function to revert control channel back to plaintext. This can be useful to take advantage of firewalls that know how to handle NAT with non-secure FTP without opening fixed ports. (Contributed by Giampaolo Rodolà in [bpo-12139](https://bugs.python.org/issue?@action=redirect&bpo=12139).)
  * Added [`ftplib.FTP.mlsd()`](https://docs.python.org/3/library/ftplib.html#ftplib.FTP.mlsd "ftplib.FTP.mlsd") method which provides a parsable directory listing format and deprecates [`ftplib.FTP.nlst()`](https://docs.python.org/3/library/ftplib.html#ftplib.FTP.nlst "ftplib.FTP.nlst") and [`ftplib.FTP.dir()`](https://docs.python.org/3/library/ftplib.html#ftplib.FTP.dir "ftplib.FTP.dir"). (Contributed by Giampaolo Rodolà in [bpo-11072](https://bugs.python.org/issue?@action=redirect&bpo=11072).)