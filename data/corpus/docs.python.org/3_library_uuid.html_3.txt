Title: UUID Namespace Constants in Python's uuid Module
URL: https://docs.python.org/3/library/uuid.html
Summary: This section describes the constants defined in the uuid module for different UUID variants, including NAMESPACE_X500 (for X.500 DN), RESERVED_NCS (for NCS compatibility), and RFC_4122 (following the UUID layout in RFC 4122).
---

uuid.NAMESPACE_X500[¶](https://docs.python.org/3/library/uuid.html#uuid.NAMESPACE_X500 "Link to this definition")
    
When this namespace is specified, the _name_ string is an X.500 DN in DER or a text output format.
The [`uuid`](https://docs.python.org/3/library/uuid.html#module-uuid "uuid: UUID objects \(universally unique identifiers\) according to RFC 4122") module defines the following constants for the possible values of the [`variant`](https://docs.python.org/3/library/uuid.html#uuid.UUID.variant "uuid.UUID.variant") attribute: 

uuid.RESERVED_NCS[¶](https://docs.python.org/3/library/uuid.html#uuid.RESERVED_NCS "Link to this definition")
    
Reserved for NCS compatibility. 

uuid.RFC_4122[¶](https://docs.python.org/3/library/uuid.html#uuid.RFC_4122 "Link to this definition")
    
Specifies the UUID layout given in [**RFC 4122**](https://datatracker.ietf.org/doc/html/rfc4122.html). 

uuid.RESERVED_MICROSOFT[¶](https://docs.python.org/3/library/uuid.html#uuid.RESERVED_MICROSOFT "Link to this definition")
    
Reserved for Microsoft compatibility. 

uuid.RESERVED_FUTURE[¶](https://docs.python.org/3/library/uuid.html#uuid.RESERVED_FUTURE "Link to this definition")
    
Reserved for future definition.
See also 

[**RFC 4122**](https://datatracker.ietf.org/doc/html/rfc4122.html) - A Universally Unique IDentifier (UUID) URN Namespace
    
This specification defines a Uniform Resource Name namespace for UUIDs, the internal format of UUIDs, and methods of generating UUIDs.
## Command-Line Usage[¶](https://docs.python.org/3/library/uuid.html#command-line-usage "Link to this heading")
Added in version 3.12.
The [`uuid`](https://docs.python.org/3/library/uuid.html#module-uuid "uuid: UUID objects \(universally unique identifiers\) according to RFC 4122") module can be executed as a script from the command line.
```
python-muuid[-h][-u{uuid1,uuid3,uuid4,uuid5}][-nNAMESPACE][-NNAME]

```

The following options are accepted: 

-h, --help[¶](https://docs.python.org/3/library/uuid.html#cmdoption-uuid-h "Link to this definition")
    
Show the help message and exit. 

-u <uuid>[¶](https://docs.python.org/3/library/uuid.html#cmdoption-uuid-u "Link to this definition")


--uuid <uuid>[¶](https://docs.python.org/3/library/uuid.html#cmdoption-uuid-uuid "Link to this definition")
    
Specify the function name to use to generate the uuid. By default [`uuid4()`](https://docs.python.org/3/library/uuid.html#uuid.uuid4 "uuid.uuid4") is used. 

-n <namespace>[¶](https://docs.python.org/3/library/uuid.html#cmdoption-uuid-n "Link to this definition")


--namespace <namespace>[¶](https://docs.python.org/3/library/uuid.html#cmdoption-uuid-namespace "Link to this definition")
    
The namespace is a `UUID`, or `@ns` where `ns` is a well-known predefined UUID addressed by namespace name. Such as `@dns`, `@url`, `@oid`, and `@x500`. Only required for [`uuid3()`](https://docs.python.org/3/library/uuid.html#uuid.uuid3 "uuid.uuid3") / [`uuid5()`](https://docs.python.org/3/library/uuid.html#uuid.uuid5 "uuid.uuid5") functions. 

-N <name>[¶](https://docs.python.org/3/library/uuid.html#cmdoption-uuid-N "Link to this definition")


--name <name>[¶](https://docs.python.org/3/library/uuid.html#cmdoption-uuid-name "Link to this definition")
    
The name used as part of generating the uuid. Only required for [`uuid3()`](https://docs.python.org/3/library/uuid.html#uuid.uuid3 "uuid.uuid3") / [`uuid5()`](https://docs.python.org/3/library/uuid.html#uuid.uuid5 "uuid.uuid5") functions.
## Example[¶](https://docs.python.org/3/library/uuid.html#example "Link to this heading")
Here are some examples of typical usage of the [`uuid`](https://docs.python.org/3/library/uuid.html#module-uuid "uuid: UUID objects \(universally unique identifiers\) according to RFC 4122") module:
>>>```
>>> importuuid
>>> # make a UUID based on the host ID and current time
>>> uuid.uuid1()
UUID('a8098c1a-f86e-11da-bd1a-00112444be1e')
>>> # make a UUID using an MD5 hash of a namespace UUID and a name
>>> uuid.uuid3(uuid.NAMESPACE_DNS, 'python.org')
UUID('6fa459ea-ee8a-3ca4-894e-db77e160355e')
>>> # make a random UUID
>>> uuid.uuid4()
UUID('16fd2706-8baf-433b-82eb-8c7fada847da')
>>> # make a UUID using a SHA-1 hash of a namespace UUID and a name
>>> uuid.uuid5(uuid.NAMESPACE_DNS, 'python.org')
UUID('886313e1-3b8a-5372-9b90-0c9aee199e5d')
>>> # make a UUID from a string of hex digits (braces and hyphens ignored)
>>> x = uuid.UUID('{00010203-0405-0607-0809-0a0b0c0d0e0f}')
>>> # convert a UUID to a string of hex digits in standard form
>>> str(x)
'00010203-0405-0607-0809-0a0b0c0d0e0f'
>>> # get the raw 16 bytes of the UUID
>>> x.bytes
b'\x00\x01\x02\x03\x04\x05\x06\x07\x08\t\n\x0b\x0c\r\x0e\x0f'
>>> # make a UUID from a 16-byte string
>>> uuid.UUID(bytes=x.bytes)
UUID('00010203-0405-0607-0809-0a0b0c0d0e0f')