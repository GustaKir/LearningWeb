Title: BufferedIOBase Read Methods
URL: https://docs.python.org/3/library/io.html
Summary: This section describes the `read1()` and `readinto()` methods of the `BufferedIOBase` class. `read1()` reads and returns up to a specified number of bytes, using at most one call to the underlying raw stream's `read()` or `readinto()` method. The `readinto()` method reads bytes into a pre-allocated, writable bytes-like object.
---

read1(_size =-1_, _/_)[¶](https://docs.python.org/3/library/io.html#io.BufferedIOBase.read1 "Link to this definition")
    
Read and return up to _size_ bytes, with at most one call to the underlying raw stream’s [`read()`](https://docs.python.org/3/library/io.html#io.RawIOBase.read "io.RawIOBase.read") (or [`readinto()`](https://docs.python.org/3/library/io.html#io.RawIOBase.readinto "io.RawIOBase.readinto")) method. This can be useful if you are implementing your own buffering on top of a [`BufferedIOBase`](https://docs.python.org/3/library/io.html#io.BufferedIOBase "io.BufferedIOBase") object.
If _size_ is `-1` (the default), an arbitrary number of bytes are returned (more than zero unless EOF is reached). 

readinto(_b_ , _/_)[¶](https://docs.python.org/3/library/io.html#io.BufferedIOBase.readinto "Link to this definition")
    
Read bytes into a pre-allocated, writable [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object) _b_ and return the number of bytes read. For example, _b_ might be a [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray").
Like [`read()`](https://docs.python.org/3/library/io.html#io.BufferedIOBase.read "io.BufferedIOBase.read"), multiple reads may be issued to the underlying raw stream, unless the latter is interactive.
A [`BlockingIOError`](https://docs.python.org/3/library/exceptions.html#BlockingIOError "BlockingIOError") is raised if the underlying raw stream is in non blocking-mode, and has no data available at the moment. 

readinto1(_b_ , _/_)[¶](https://docs.python.org/3/library/io.html#io.BufferedIOBase.readinto1 "Link to this definition")
    
Read bytes into a pre-allocated, writable [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object) _b_ , using at most one call to the underlying raw stream’s [`read()`](https://docs.python.org/3/library/io.html#io.RawIOBase.read "io.RawIOBase.read") (or [`readinto()`](https://docs.python.org/3/library/io.html#io.RawIOBase.readinto "io.RawIOBase.readinto")) method. Return the number of bytes read.
A [`BlockingIOError`](https://docs.python.org/3/library/exceptions.html#BlockingIOError "BlockingIOError") is raised if the underlying raw stream is in non blocking-mode, and has no data available at the moment.
Added in version 3.5. 

write(_b_ , _/_)[¶](https://docs.python.org/3/library/io.html#io.BufferedIOBase.write "Link to this definition")
    
Write the given [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object), _b_ , and return the number of bytes written (always equal to the length of _b_ in bytes, since if the write fails an [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") will be raised). Depending on the actual implementation, these bytes may be readily written to the underlying stream, or held in a buffer for performance and latency reasons.
When in non-blocking mode, a [`BlockingIOError`](https://docs.python.org/3/library/exceptions.html#BlockingIOError "BlockingIOError") is raised if the data needed to be written to the raw stream but it couldn’t accept all the data without blocking.
The caller may release or mutate _b_ after this method returns, so the implementation should only access _b_ during the method call.
### Raw File I/O[¶](https://docs.python.org/3/library/io.html#raw-file-i-o "Link to this heading") 

_class_ io.FileIO(_name_ , _mode ='r'_, _closefd =True_, _opener =None_)[¶](https://docs.python.org/3/library/io.html#io.FileIO "Link to this definition")
    
A raw binary stream representing an OS-level file containing bytes data. It inherits from [`RawIOBase`](https://docs.python.org/3/library/io.html#io.RawIOBase "io.RawIOBase").
The _name_ can be one of two things:
  * a character string or [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") object representing the path to the file which will be opened. In this case closefd must be `True` (the default) otherwise an error will be raised.
  * an integer representing the number of an existing OS-level file descriptor to which the resulting [`FileIO`](https://docs.python.org/3/library/io.html#io.FileIO "io.FileIO") object will give access. When the FileIO object is closed this fd will be closed as well, unless _closefd_ is set to `False`.