Title: inspect.getasyncgenlocals and Code Objects Bit Flags
URL: https://docs.python.org/3/library/inspect.html
Summary: The `inspect.getasyncgenlocals()` function retrieves the local variables of asynchronous generator objects, similar to `getgeneratorlocals()` for standard generators, introduced in Python 3.12. Additionally, Python code objects contain a `co_flags` attribute that serves as a bitmap for various flags, including `inspect.CO_OPTIMIZED`.
---

inspect.getasyncgenlocals(_agen_)[¶](https://docs.python.org/3/library/inspect.html#inspect.getasyncgenlocals "Link to this definition")
    
This function is analogous to [`getgeneratorlocals()`](https://docs.python.org/3/library/inspect.html#inspect.getgeneratorlocals "inspect.getgeneratorlocals"), but works for asynchronous generator objects created by [`async def`](https://docs.python.org/3/reference/compound_stmts.html#async-def) functions which use the [`yield`](https://docs.python.org/3/reference/simple_stmts.html#yield) statement.
Added in version 3.12.
## Code Objects Bit Flags[¶](https://docs.python.org/3/library/inspect.html#code-objects-bit-flags "Link to this heading")
Python code objects have a [`co_flags`](https://docs.python.org/3/reference/datamodel.html#codeobject.co_flags "codeobject.co_flags") attribute, which is a bitmap of the following flags: 

inspect.CO_OPTIMIZED[¶](https://docs.python.org/3/library/inspect.html#inspect.CO_OPTIMIZED "Link to this definition")
    
The code object is optimized, using fast locals. 

inspect.CO_NEWLOCALS[¶](https://docs.python.org/3/library/inspect.html#inspect.CO_NEWLOCALS "Link to this definition")
    
If set, a new dict will be created for the frame’s [`f_locals`](https://docs.python.org/3/reference/datamodel.html#frame.f_locals "frame.f_locals") when the code object is executed. 

inspect.CO_VARARGS[¶](https://docs.python.org/3/library/inspect.html#inspect.CO_VARARGS "Link to this definition")
    
The code object has a variable positional parameter (`*args`-like). 

inspect.CO_VARKEYWORDS[¶](https://docs.python.org/3/library/inspect.html#inspect.CO_VARKEYWORDS "Link to this definition")
    
The code object has a variable keyword parameter (`**kwargs`-like). 

inspect.CO_NESTED[¶](https://docs.python.org/3/library/inspect.html#inspect.CO_NESTED "Link to this definition")
    
The flag is set when the code object is a nested function. 

inspect.CO_GENERATOR[¶](https://docs.python.org/3/library/inspect.html#inspect.CO_GENERATOR "Link to this definition")
    
The flag is set when the code object is a generator function, i.e. a generator object is returned when the code object is executed. 

inspect.CO_COROUTINE[¶](https://docs.python.org/3/library/inspect.html#inspect.CO_COROUTINE "Link to this definition")
    
The flag is set when the code object is a coroutine function. When the code object is executed it returns a coroutine object. See [**PEP 492**](https://peps.python.org/pep-0492/) for more details.
Added in version 3.5. 

inspect.CO_ITERABLE_COROUTINE[¶](https://docs.python.org/3/library/inspect.html#inspect.CO_ITERABLE_COROUTINE "Link to this definition")
    
The flag is used to transform generators into generator-based coroutines. Generator objects with this flag can be used in `await` expression, and can `yield from` coroutine objects. See [**PEP 492**](https://peps.python.org/pep-0492/) for more details.
Added in version 3.5. 

inspect.CO_ASYNC_GENERATOR[¶](https://docs.python.org/3/library/inspect.html#inspect.CO_ASYNC_GENERATOR "Link to this definition")
    
The flag is set when the code object is an asynchronous generator function. When the code object is executed it returns an asynchronous generator object. See [**PEP 525**](https://peps.python.org/pep-0525/) for more details.
Added in version 3.6.
Note
The flags are specific to CPython, and may not be defined in other Python implementations. Furthermore, the flags are an implementation detail, and can be removed or deprecated in future Python releases. It’s recommended to use public APIs from the [`inspect`](https://docs.python.org/3/library/inspect.html#module-inspect "inspect: Extract information and source code from live objects.") module for any introspection needs.
## Buffer flags[¶](https://docs.python.org/3/library/inspect.html#buffer-flags "Link to this heading") 

_class_ inspect.BufferFlags[¶](https://docs.python.org/3/library/inspect.html#inspect.BufferFlags "Link to this definition")
    
This is an [`enum.IntFlag`](https://docs.python.org/3/library/enum.html#enum.IntFlag "enum.IntFlag") that represents the flags that can be passed to the [`__buffer__()`](https://docs.python.org/3/reference/datamodel.html#object.__buffer__ "object.__buffer__") method of objects implementing the [buffer protocol](https://docs.python.org/3/c-api/buffer.html#bufferobjects).
The meaning of the flags is explained at [Buffer request types](https://docs.python.org/3/c-api/buffer.html#buffer-request-types). 

SIMPLE[¶](https://docs.python.org/3/library/inspect.html#inspect.BufferFlags.SIMPLE "Link to this definition")


WRITABLE[¶](https://docs.python.org/3/library/inspect.html#inspect.BufferFlags.WRITABLE "Link to this definition")


FORMAT[¶](https://docs.python.org/3/library/inspect.html#inspect.BufferFlags.FORMAT "Link to this definition")


ND[¶](https://docs.python.org/3/library/inspect.html#inspect.BufferFlags.ND "Link to this definition")