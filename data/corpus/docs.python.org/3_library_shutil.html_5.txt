Title: shutil.rmtree() - Remove Directory Trees
URL: https://docs.python.org/3/library/shutil.html
Summary: The `shutil.rmtree()` function deletes an entire directory tree specified by the `_path_` argument. Errors during the deletion can be ignored if `_ignore_errors_` is set to true, otherwise they are handled by the specified handlers or raised. The function also supports paths relative to directory descriptors and utilizes a symlink attack resistant method on supported platforms.
---

shutil.rmtree(_path_ , _ignore_errors =False_, _onerror =None_, _*_ , _onexc =None_, _dir_fd =None_)[¶](https://docs.python.org/3/library/shutil.html#shutil.rmtree "Link to this definition")
    
Delete an entire directory tree; _path_ must point to a directory (but not a symbolic link to a directory). If _ignore_errors_ is true, errors resulting from failed removals will be ignored; if false or omitted, such errors are handled by calling a handler specified by _onexc_ or _onerror_ or, if both are omitted, exceptions are propagated to the caller.
This function can support [paths relative to directory descriptors](https://docs.python.org/3/library/os.html#dir-fd).
Note
On platforms that support the necessary fd-based functions a symlink attack resistant version of [`rmtree()`](https://docs.python.org/3/library/shutil.html#shutil.rmtree "shutil.rmtree") is used by default. On other platforms, the [`rmtree()`](https://docs.python.org/3/library/shutil.html#shutil.rmtree "shutil.rmtree") implementation is susceptible to a symlink attack: given proper timing and circumstances, attackers can manipulate symlinks on the filesystem to delete files they wouldn’t be able to access otherwise. Applications can use the [`rmtree.avoids_symlink_attacks`](https://docs.python.org/3/library/shutil.html#shutil.rmtree.avoids_symlink_attacks "shutil.rmtree.avoids_symlink_attacks") function attribute to determine which case applies.
If _onexc_ is provided, it must be a callable that accepts three parameters: _function_ , _path_ , and _excinfo_.
The first parameter, _function_ , is the function which raised the exception; it depends on the platform and implementation. The second parameter, _path_ , will be the path name passed to _function_. The third parameter, _excinfo_ , is the exception that was raised. Exceptions raised by _onexc_ will not be caught.
The deprecated _onerror_ is similar to _onexc_ , except that the third parameter it receives is the tuple returned from [`sys.exc_info()`](https://docs.python.org/3/library/sys.html#sys.exc_info "sys.exc_info").
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `shutil.rmtree` with arguments `path`, `dir_fd`.
Changed in version 3.3: Added a symlink attack resistant version that is used automatically if platform supports fd-based functions.
Changed in version 3.8: On Windows, will no longer delete the contents of a directory junction before removing the junction.
Changed in version 3.11: Added the _dir_fd_ parameter.
Changed in version 3.12: Added the _onexc_ parameter, deprecated _onerror_.
Changed in version 3.13: `rmtree()` now ignores [`FileNotFoundError`](https://docs.python.org/3/library/exceptions.html#FileNotFoundError "FileNotFoundError") exceptions for all but the top-level path. Exceptions other than [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") and subclasses of `OSError` are now always propagated to the caller. 

rmtree.avoids_symlink_attacks[¶](https://docs.python.org/3/library/shutil.html#shutil.rmtree.avoids_symlink_attacks "Link to this definition")
    
Indicates whether the current platform and implementation provides a symlink attack resistant version of [`rmtree()`](https://docs.python.org/3/library/shutil.html#shutil.rmtree "shutil.rmtree"). Currently this is only true for platforms supporting fd-based directory access functions.
Added in version 3.3.