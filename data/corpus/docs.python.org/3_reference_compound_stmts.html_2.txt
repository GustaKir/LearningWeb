Title: Compound Statements in Python
URL: https://docs.python.org/3/reference/compound_stmts.html
Summary: This section outlines the various types of compound statements in Python, including conditional statements (if), loops (while, for), error handling (try), context management (with, async with), pattern matching (match), function definitions (funcdef), and class definitions (classdef).
---

```
**compound_stmt** ::= [if_stmt](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-if_stmt)
         | [while_stmt](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-while_stmt)
         | [for_stmt](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-for_stmt)
         | [try_stmt](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-try_stmt)
         | [with_stmt](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-with_stmt)
         | [match_stmt](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-match_stmt)
         | [funcdef](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-funcdef)
         | [classdef](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-classdef)
         | [async_with_stmt](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-async_with_stmt)
         | [async_for_stmt](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-async_for_stmt)
         | [async_funcdef](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-async_funcdef)
**suite**     ::= [stmt_list](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-stmt_list) NEWLINE | NEWLINE INDENT [statement](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-statement)+ DEDENT
**statement**   ::= [stmt_list](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-stmt_list) NEWLINE | [compound_stmt](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-compound_stmt)
**stmt_list**   ::= [simple_stmt](https://docs.python.org/3/reference/simple_stmts.html#grammar-token-python-grammar-simple_stmt) (";" [simple_stmt](https://docs.python.org/3/reference/simple_stmts.html#grammar-token-python-grammar-simple_stmt))* [";"]

```

Note that statements always end in a `NEWLINE` possibly followed by a `DEDENT`. Also note that optional continuation clauses always begin with a keyword that cannot start a statement, thus there are no ambiguities (the ‘dangling [`else`](https://docs.python.org/3/reference/compound_stmts.html#else)’ problem is solved in Python by requiring nested [`if`](https://docs.python.org/3/reference/compound_stmts.html#if) statements to be indented).
The formatting of the grammar rules in the following sections places each clause on a separate line for clarity.
## 8.1. The `if` statement[¶](https://docs.python.org/3/reference/compound_stmts.html#the-if-statement "Link to this heading")
The [`if`](https://docs.python.org/3/reference/compound_stmts.html#if) statement is used for conditional execution:
```
**if_stmt** ::= "if" [assignment_expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-assignment_expression) ":" [suite](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-suite)
      ("elif" [assignment_expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-assignment_expression) ":" [suite](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-suite))*
      ["else" ":" [suite](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-suite)]

```

It selects exactly one of the suites by evaluating the expressions one by one until one is found to be true (see section [Boolean operations](https://docs.python.org/3/reference/expressions.html#booleans) for the definition of true and false); then that suite is executed (and no other part of the [`if`](https://docs.python.org/3/reference/compound_stmts.html#if) statement is executed or evaluated). If all expressions are false, the suite of the [`else`](https://docs.python.org/3/reference/compound_stmts.html#else) clause, if present, is executed.
## 8.2. The `while` statement[¶](https://docs.python.org/3/reference/compound_stmts.html#the-while-statement "Link to this heading")
The [`while`](https://docs.python.org/3/reference/compound_stmts.html#while) statement is used for repeated execution as long as an expression is true:
```
**while_stmt** ::= "while" [assignment_expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-assignment_expression) ":" [suite](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-suite)
        ["else" ":" [suite](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-suite)]