Title: datetime.strptime() Method in Python
URL: https://docs.python.org/3/library/datetime.html
Summary: The `datetime.strptime(date_string, format)` method allows for parsing a date string according to a specified format. If components are not present in the string, default values are taken from '1900-01-01T00:00:00.000'. It's important to note that `datetime.strptime` can handle sub-second components and time zone offsets, unlike `time.strptime`. The format codes for year, month, and day are not applicable to `time` objects and will default to 1900 for the year and 1 for the month if used.
---

datetime.html#datetime.date.timetuple "datetime.date.timetuple") method.
For the [`datetime.strptime()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime "datetime.datetime.strptime") class method, the default value is `1900-01-01T00:00:00.000`: any components not specified in the format string will be pulled from the default value. [[4]](https://docs.python.org/3/library/datetime.html#id8)
Using `datetime.strptime(date_string, format)` is equivalent to:
```
datetime(*(time.strptime(date_string, format)[0:6]))

```

except when the format includes sub-second components or time zone offset information, which are supported in `datetime.strptime` but are discarded by `time.strptime`.
For [`time`](https://docs.python.org/3/library/datetime.html#datetime.time "datetime.time") objects, the format codes for year, month, and day should not be used, as `time` objects have no such values. If they’re used anyway, 1900 is substituted for the year, and 1 for the month and day.
For [`date`](https://docs.python.org/3/library/datetime.html#datetime.date "datetime.date") objects, the format codes for hours, minutes, seconds, and microseconds should not be used, as [`date`](https://docs.python.org/3/library/datetime.html#datetime.date "datetime.date") objects have no such values. If they’re used anyway, 0 is substituted for them.
For the same reason, handling of format strings containing Unicode code points that can’t be represented in the charset of the current locale is also platform-dependent. On some platforms such code points are preserved intact in the output, while on others `strftime` may raise [`UnicodeError`](https://docs.python.org/3/library/exceptions.html#UnicodeError "UnicodeError") or return an empty string instead.
Notes:
  1. Because the format depends on the current locale, care should be taken when making assumptions about the output value. Field orderings will vary (for example, “month/day/year” versus “day/month/year”), and the output may contain non-ASCII characters.
  2. The [`strptime()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime "datetime.datetime.strptime") method can parse years in the full [1, 9999] range, but years < 1000 must be zero-filled to 4-digit width.
Changed in version 3.2: In previous versions, [`strftime()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.strftime "datetime.datetime.strftime") method was restricted to years >= 1900.
Changed in version 3.3: In version 3.2, [`strftime()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.strftime "datetime.datetime.strftime") method was restricted to years >= 1000.
  3. When used with the [`strptime()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime "datetime.datetime.strptime") method, the `%p` directive only affects the output hour field if the `%I` directive is used to parse the hour.
  4. Unlike the [`time`](https://docs.python.org/3/library/time.html#module-time "time: Time access and conversions.") module, the `datetime` module does not support leap seconds.
  5. When used with the [`strptime()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime "datetime.datetime.strptime") method, the `%f` directive accepts from one to six digits and zero pads on the right. `%f` is an extension to the set of format characters in the C standard (but implemented separately in datetime objects, and therefore always available).
  6. For a naive object, the `%z`, `%:z` and `%Z` format codes are replaced by empty strings.
For an aware object: 

`%z`
    
[`utcoffset()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.utcoffset "datetime.datetime.utcoffset") is transformed into a string of the form `±HHMM[SS[.ffffff]]`, where `HH` is a 2-digit string giving the number of UTC offset hours, `MM` is a 2-digit string giving the number of UTC offset minutes, `SS` is a 2-digit string giving the number of UTC offset seconds and `ffffff` is a 6-digit string giving the number of UTC offset microseconds. The `ffffff` part is omitted when the offset is a whole number of seconds and both the `ffffff` and the `SS` part is omitted when the offset is a whole number of minutes. For example, if [`utcoffset()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.utcoffset "datetime.datetime.utcoffset") returns `timedelta(hours=-3, minutes=-30)`, `%z` is replaced with the string `'-0330'`.
Changed in version 3.7: The UTC offset is not restricted to a whole number of minutes.
Changed in version 3.7: When the `%z` directive is provided to the [`strptime()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime "datetime.datetime.strptime") method, the UTC offsets can have a colon as a separator between hours, minutes and seconds. For example, `'+01:00:00'` will be parsed as an offset of one hour. In addition, providing `'Z'` is identical to `'+00:00'`.