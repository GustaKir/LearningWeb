Title: Complex Number Functions in Python's cmath Library
URL: https://docs.python.org/3/library/cmath.html
Summary: This section covers functions for converting complex numbers to and from polar coordinates, including `phase(z)`, `polar(z)`, and `rect(r, phi)`. It also describes power and logarithmic functions such as `exp(z)`, `log(z[, base])`, `log10(z)`, and `sqrt(z)`, providing the mathematical operations relevant to complex numbers.
---

```

**Conversions to and from polar coordinates**  
---  
[`phase(z)`](https://docs.python.org/3/library/cmath.html#cmath.phase "cmath.phase") | Return the phase of _z_  
[`polar(z)`](https://docs.python.org/3/library/cmath.html#cmath.polar "cmath.polar") | Return the representation of _z_ in polar coordinates  
[`rect(r, phi)`](https://docs.python.org/3/library/cmath.html#cmath.rect "cmath.rect") | Return the complex number _z_ with polar coordinates _r_ and _phi_  
**Power and logarithmic functions**  
[`exp(z)`](https://docs.python.org/3/library/cmath.html#cmath.exp "cmath.exp") | Return _e_ raised to the power _z_  
[`log(z[, base])`](https://docs.python.org/3/library/cmath.html#cmath.log "cmath.log") | Return the logarithm of _z_ to the given _base_ (_e_ by default)  
[`log10(z)`](https://docs.python.org/3/library/cmath.html#cmath.log10 "cmath.log10") | Return the base-10 logarithm of _z_  
[`sqrt(z)`](https://docs.python.org/3/library/cmath.html#cmath.sqrt "cmath.sqrt") | Return the square root of _z_  
**Trigonometric functions**  
[`acos(z)`](https://docs.python.org/3/library/cmath.html#cmath.acos "cmath.acos") | Return the arc cosine of _z_  
[`asin(z)`](https://docs.python.org/3/library/cmath.html#cmath.asin "cmath.asin") | Return the arc sine of _z_  
[`atan(z)`](https://docs.python.org/3/library/cmath.html#cmath.atan "cmath.atan") | Return the arc tangent of _z_  
[`cos(z)`](https://docs.python.org/3/library/cmath.html#cmath.cos "cmath.cos") | Return the cosine of _z_  
[`sin(z)`](https://docs.python.org/3/library/cmath.html#cmath.sin "cmath.sin") | Return the sine of _z_  
[`tan(z)`](https://docs.python.org/3/library/cmath.html#cmath.tan "cmath.tan") | Return the tangent of _z_  
**Hyperbolic functions**  
[`acosh(z)`](https://docs.python.org/3/library/cmath.html#cmath.acosh "cmath.acosh") | Return the inverse hyperbolic cosine of _z_  
[`asinh(z)`](https://docs.python.org/3/library/cmath.html#cmath.asinh "cmath.asinh") | Return the inverse hyperbolic sine of _z_  
[`atanh(z)`](https://docs.python.org/3/library/cmath.html#cmath.atanh "cmath.atanh") | Return the inverse hyperbolic tangent of _z_  
[`cosh(z)`](https://docs.python.org/3/library/cmath.html#cmath.cosh "cmath.cosh") | Return the hyperbolic cosine of _z_  
[`sinh(z)`](https://docs.python.org/3/library/cmath.html#cmath.sinh "cmath.sinh") | Return the hyperbolic sine of _z_  
[`tanh(z)`](https://docs.python.org/3/library/cmath.html#cmath.tanh "cmath.tanh") | Return the hyperbolic tangent of _z_  
**Classification functions**  
[`isfinite(z)`](https://docs.python.org/3/library/cmath.html#cmath.isfinite "cmath.isfinite") | Check if all components of _z_ are finite  
[`isinf(z)`](https://docs.python.org/3/library/cmath.html#cmath.isinf "cmath.isinf") | Check if any component of _z_ is infinite  
[`isnan(z)`](https://docs.python.org/3/library/cmath.html#cmath.isnan "cmath.isnan") | Check if any component of _z_ is a NaN  
[`isclose(a, b, *, rel_tol, abs_tol)`](https://docs.python.org/3/library/cmath.html#cmath.isclose "cmath.isclose") | Check if the values _a_ and _b_ are close to each other  
**Constants**  
[`pi`](https://docs.python.org/3/library/cmath.html#cmath.pi "cmath.pi") | _π_ = 3.141592…  
[`e`](https://docs.python.org/3/library/cmath.html#cmath.e "cmath.e") | _e_ = 2.718281…  
[`tau`](https://docs.python.org/3/library/cmath.html#cmath.tau "cmath.tau") | _τ_ = 2 _π_ = 6.283185…  
[`inf`](https://docs.python.org/3/library/cmath.html#cmath.inf "cmath.inf") | Positive infinity  
[`infj`](https://docs.python.org/3/library/cmath.html#cmath.infj "cmath.infj") | Pure imaginary infinity  
[`nan`](https://docs.python.org/3/library/cmath.html#cmath.nan "cmath.nan") | “Not a number” (NaN)  
[`nanj`](https://docs.python.org/3/library/cmath.html#cmath.nanj "cmath.nanj") | Pure imaginary NaN  
## Conversions to and from polar coordinates[¶](https://docs.python.org/3/library/cmath.html#conversions-to-and-from-polar-coordinates "Link to this heading")
A Python complex number `z` is stored internally using _rectangular_ or _Cartesian_ coordinates. It is completely determined by its _real part_ `z.real` and its _imaginary part_ `z.imag`.
_Polar coordinates_ give an alternative way to represent a complex number. In polar coordinates, a complex number _z_ is defined by the modulus _r_ and the phase angle _phi_. The modulus _r_ is the distance from _z_ to the origin, while the phase _phi_ is the counterclockwise angle, measured in radians, from the positive x-axis to the line segment that joins the origin to _z_.
The following functions can be used to convert from the native rectangular coordinates to polar coordinates and back.