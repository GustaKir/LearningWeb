Title: Appending Strings to MIME Headers in Python's Email Library
URL: https://docs.python.org/3/library/email.header.html
Summary: The `append` method allows you to add a string to a MIME header, with an optional character set for encoding. If no charset is specified, the default from the constructor is used. The string can be either bytes or str type.
---

append(_s_ , _charset =None_, _errors ='strict'_)[¶](https://docs.python.org/3/library/email.header.html#email.header.Header.append "Link to this definition")
    
Append the string _s_ to the MIME header.
Optional _charset_ , if given, should be a [`Charset`](https://docs.python.org/3/library/email.charset.html#email.charset.Charset "email.charset.Charset") instance (see [`email.charset`](https://docs.python.org/3/library/email.charset.html#module-email.charset "email.charset: Character Sets")) or the name of a character set, which will be converted to a [`Charset`](https://docs.python.org/3/library/email.charset.html#email.charset.Charset "email.charset.Charset") instance. A value of `None` (the default) means that the _charset_ given in the constructor is used.
_s_ may be an instance of [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") or [`str`](https://docs.python.org/3/library/stdtypes.html#str "str"). If it is an instance of [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes"), then _charset_ is the encoding of that byte string, and a [`UnicodeError`](https://docs.python.org/3/library/exceptions.html#UnicodeError "UnicodeError") will be raised if the string cannot be decoded with that character set.
If _s_ is an instance of [`str`](https://docs.python.org/3/library/stdtypes.html#str "str"), then _charset_ is a hint specifying the character set of the characters in the string.
In either case, when producing an [**RFC 2822**](https://datatracker.ietf.org/doc/html/rfc2822.html)-compliant header using [**RFC 2047**](https://datatracker.ietf.org/doc/html/rfc2047.html) rules, the string will be encoded using the output codec of the charset. If the string cannot be encoded using the output codec, a UnicodeError will be raised.
Optional _errors_ is passed as the errors argument to the decode call if _s_ is a byte string. 

encode(_splitchars =';, \t'_, _maxlinelen =None_, _linesep ='\n'_)[¶](https://docs.python.org/3/library/email.header.html#email.header.Header.encode "Link to this definition")
    
Encode a message header into an RFC-compliant format, possibly wrapping long lines and encapsulating non-ASCII parts in base64 or quoted-printable encodings.
Optional _splitchars_ is a string containing characters which should be given extra weight by the splitting algorithm during normal header wrapping. This is in very rough support of [**RFC 2822**](https://datatracker.ietf.org/doc/html/rfc2822.html)'s ‘higher level syntactic breaks’: split points preceded by a splitchar are preferred during line splitting, with the characters preferred in the order in which they appear in the string. Space and tab may be included in the string to indicate whether preference should be given to one over the other as a split point when other split chars do not appear in the line being split. Splitchars does not affect [**RFC 2047**](https://datatracker.ietf.org/doc/html/rfc2047.html) encoded lines.
_maxlinelen_ , if given, overrides the instance’s value for the maximum line length.
_linesep_ specifies the characters used to separate the lines of the folded header. It defaults to the most useful value for Python application code (`\n`), but `\r\n` can be specified in order to produce headers with RFC-compliant line separators.
Changed in version 3.2: Added the _linesep_ argument.
The [`Header`](https://docs.python.org/3/library/email.header.html#email.header.Header "email.header.Header") class also provides a number of methods to support standard operators and built-in functions. 

__str__()[¶](https://docs.python.org/3/library/email.header.html#email.header.Header.__str__ "Link to this definition")
    
Returns an approximation of the [`Header`](https://docs.python.org/3/library/email.header.html#email.header.Header "email.header.Header") as a string, using an unlimited line length. All pieces are converted to unicode using the specified encoding and joined together appropriately. Any pieces with a charset of `'unknown-8bit'` are decoded as ASCII using the `'replace'` error handler.
Changed in version 3.2: Added handling for the `'unknown-8bit'` charset. 

__eq__(_other_)[¶](https://docs.python.org/3/library/email.header.html#email.header.Header.__eq__ "Link to this definition")
    
This method allows you to compare two [`Header`](https://docs.python.org/3/library/email.header.html#email.header.Header "email.header.Header") instances for equality. 

__ne__(_other_)[¶](https://docs.python.org/3/library/email.header.html#email.header.Header.__ne__ "Link to this definition")
    
This method allows you to compare two [`Header`](https://docs.python.org/3/library/email.header.html#email.header.Header "email.header.Header") instances for inequality.
The [`email.header`](https://docs.python.org/3/library/email.header.html#module-email.header "email.header: Representing non-ASCII headers") module also provides the following convenient functions.