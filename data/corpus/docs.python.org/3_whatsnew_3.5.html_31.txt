Title: Performance Optimizations in Python 3.5
URL: https://docs.python.org/3/whatsnew/3.5.html
Summary: Python 3.5 introduces several performance enhancements, including optimized `json.dumps()` function performance with `ensure_ascii=False`, faster `PyObject_IsInstance()` and `PyObject_IsSubclass()` functions when using `type` as a metaclass, and overall method caching improvements that can lead to up to a 5% boost in certain benchmarks.
---

(Contributed by Serhiy Storchaka in [bpo-19380](https://bugs.python.org/issue?@action=redirect&bpo=19380).)
The [`json.dumps()`](https://docs.python.org/3/library/json.html#json.dumps "json.dumps") function was optimized to run with `ensure_ascii=False` as fast as with `ensure_ascii=True`. (Contributed by Naoki Inada in [bpo-23206](https://bugs.python.org/issue?@action=redirect&bpo=23206).)
The [`PyObject_IsInstance()`](https://docs.python.org/3/c-api/object.html#c.PyObject_IsInstance "PyObject_IsInstance") and [`PyObject_IsSubclass()`](https://docs.python.org/3/c-api/object.html#c.PyObject_IsSubclass "PyObject_IsSubclass") functions have been sped up in the common case that the second argument has [`type`](https://docs.python.org/3/library/functions.html#type "type") as its metaclass. (Contributed Georg Brandl by in [bpo-22540](https://bugs.python.org/issue?@action=redirect&bpo=22540).)
Method caching was slightly improved, yielding up to 5% performance improvement in some benchmarks. (Contributed by Antoine Pitrou in [bpo-22847](https://bugs.python.org/issue?@action=redirect&bpo=22847).)
Objects from the [`random`](https://docs.python.org/3/library/random.html#module-random "random: Generate pseudo-random numbers with various common distributions.") module now use 50% less memory on 64-bit builds. (Contributed by Serhiy Storchaka in [bpo-23488](https://bugs.python.org/issue?@action=redirect&bpo=23488).)
The [`property()`](https://docs.python.org/3/library/functions.html#property "property") getter calls are up to 25% faster. (Contributed by Joe Jevnik in [bpo-23910](https://bugs.python.org/issue?@action=redirect&bpo=23910).)
Instantiation of [`fractions.Fraction`](https://docs.python.org/3/library/fractions.html#fractions.Fraction "fractions.Fraction") is now up to 30% faster. (Contributed by Stefan Behnel in [bpo-22464](https://bugs.python.org/issue?@action=redirect&bpo=22464).)
String methods [`find()`](https://docs.python.org/3/library/stdtypes.html#str.find "str.find"), [`rfind()`](https://docs.python.org/3/library/stdtypes.html#str.rfind "str.rfind"), [`split()`](https://docs.python.org/3/library/stdtypes.html#str.split "str.split"), [`partition()`](https://docs.python.org/3/library/stdtypes.html#str.partition "str.partition") and the [`in`](https://docs.python.org/3/reference/expressions.html#in) string operator are now significantly faster for searching 1-character substrings. (Contributed by Serhiy Storchaka in [bpo-23573](https://bugs.python.org/issue?@action=redirect&bpo=23573).)
## Build and C API Changes[Â¶](https://docs.python.org/3/whatsnew/3.5.html#build-and-c-api-changes "Link to this heading")
New `calloc` functions were added:
  * [`PyMem_RawCalloc()`](https://docs.python.org/3/c-api/memory.html#c.PyMem_RawCalloc "PyMem_RawCalloc"),
  * [`PyMem_Calloc()`](https://docs.python.org/3/c-api/memory.html#c.PyMem_Calloc "PyMem_Calloc"),
  * [`PyObject_Calloc()`](https://docs.python.org/3/c-api/memory.html#c.PyObject_Calloc "PyObject_Calloc").


(Contributed by Victor Stinner in [bpo-21233](https://bugs.python.org/issue?@action=redirect&bpo=21233).)
New encoding/decoding helper functions:
  * [`Py_DecodeLocale()`](https://docs.python.org/3/c-api/sys.html#c.Py_DecodeLocale "Py_DecodeLocale") (replaced `_Py_char2wchar()`),
  * [`Py_EncodeLocale()`](https://docs.python.org/3/c-api/sys.html#c.Py_EncodeLocale "Py_EncodeLocale") (replaced `_Py_wchar2char()`).