Title: sqlite3.connect Function Summary
URL: https://docs.python.org/3/library/sqlite3.html
Summary: The sqlite3.connect function returns a Connection object and raises auditing events related to the connection. Significant changes include the addition of the _uri_ parameter in version 3.4, support for path-like objects in version 3.7, new auditing events in version 3.10, and the introduction of the _autocommit_ parameter in version 3.12. Future versions will change parameter usage to be keyword-only.
---

Return type:
    
[_Connection_](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection "sqlite3.Connection")
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `sqlite3.connect` with argument `database`.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `sqlite3.connect/handle` with argument `connection_handle`.
Changed in version 3.4: Added the _uri_ parameter.
Changed in version 3.7: _database_ can now also be a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object), not only a string.
Changed in version 3.10: Added the `sqlite3.connect/handle` auditing event.
Changed in version 3.12: Added the _autocommit_ parameter.
Changed in version 3.13: Positional use of the parameters _timeout_ , _detect_types_ , _isolation_level_ , _check_same_thread_ , _factory_ , _cached_statements_ , and _uri_ is deprecated. They will become keyword-only parameters in Python 3.15. 

sqlite3.complete_statement(_statement_)[Â¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.complete_statement "Link to this definition")
    
Return `True` if the string _statement_ appears to contain one or more complete SQL statements. No syntactic verification or parsing of any kind is performed, other than checking that there are no unclosed string literals and the statement is terminated by a semicolon.
For example:
>>>```
>>> sqlite3.complete_statement("SELECT foo FROM bar;")
True
>>> sqlite3.complete_statement("SELECT foo")
False