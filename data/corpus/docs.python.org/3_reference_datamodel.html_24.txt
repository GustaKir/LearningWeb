Title: __del__ Method in Python Object Model
URL: https://docs.python.org/3/reference/datamodel.html
Summary: The `__del__()` method is called when an instance is about to be destroyed, serving as a finalizer or destructor. Derived classes must explicitly call the base class's `__del__()` method if one exists. The method can also postpone destruction through object resurrection, though this is not recommended.
---

object.__del__(_self_)[¶](https://docs.python.org/3/reference/datamodel.html#object.__del__ "Link to this definition")
    
Called when the instance is about to be destroyed. This is also called a finalizer or (improperly) a destructor. If a base class has a [`__del__()`](https://docs.python.org/3/reference/datamodel.html#object.__del__ "object.__del__") method, the derived class’s [`__del__()`](https://docs.python.org/3/reference/datamodel.html#object.__del__ "object.__del__") method, if any, must explicitly call it to ensure proper deletion of the base class part of the instance.
It is possible (though not recommended!) for the [`__del__()`](https://docs.python.org/3/reference/datamodel.html#object.__del__ "object.__del__") method to postpone destruction of the instance by creating a new reference to it. This is called object _resurrection_. It is implementation-dependent whether [`__del__()`](https://docs.python.org/3/reference/datamodel.html#object.__del__ "object.__del__") is called a second time when a resurrected object is about to be destroyed; the current [CPython](https://docs.python.org/3/glossary.html#term-CPython) implementation only calls it once.
It is not guaranteed that [`__del__()`](https://docs.python.org/3/reference/datamodel.html#object.__del__ "object.__del__") methods are called for objects that still exist when the interpreter exits. [`weakref.finalize`](https://docs.python.org/3/library/weakref.html#weakref.finalize "weakref.finalize") provides a straightforward way to register a cleanup function to be called when an object is garbage collected.
Note
`del x` doesn’t directly call `x.__del__()` — the former decrements the reference count for `x` by one, and the latter is only called when `x`’s reference count reaches zero.
**CPython implementation detail:** It is possible for a reference cycle to prevent the reference count of an object from going to zero. In this case, the cycle will be later detected and deleted by the [cyclic garbage collector](https://docs.python.org/3/glossary.html#term-garbage-collection). A common cause of reference cycles is when an exception has been caught in a local variable. The frame’s locals then reference the exception, which references its own traceback, which references the locals of all frames caught in the traceback.
See also
Documentation for the [`gc`](https://docs.python.org/3/library/gc.html#module-gc "gc: Interface to the cycle-detecting garbage collector.") module.
Warning
Due to the precarious circumstances under which [`__del__()`](https://docs.python.org/3/reference/datamodel.html#object.__del__ "object.__del__") methods are invoked, exceptions that occur during their execution are ignored, and a warning is printed to `sys.stderr` instead. In particular:
  * [`__del__()`](https://docs.python.org/3/reference/datamodel.html#object.__del__ "object.__del__") can be invoked when arbitrary code is being executed, including from any arbitrary thread. If [`__del__()`](https://docs.python.org/3/reference/datamodel.html#object.__del__ "object.__del__") needs to take a lock or invoke any other blocking resource, it may deadlock as the resource may already be taken by the code that gets interrupted to execute [`__del__()`](https://docs.python.org/3/reference/datamodel.html#object.__del__ "object.__del__").
  * [`__del__()`](https://docs.python.org/3/reference/datamodel.html#object.__del__ "object.__del__") can be executed during interpreter shutdown. As a consequence, the global variables it needs to access (including other modules) may already have been deleted or set to `None`. Python guarantees that globals whose name begins with a single underscore are deleted from their module before other globals are deleted; if no other references to such globals exist, this may help in assuring that imported modules are still available at the time when the [`__del__()`](https://docs.python.org/3/reference/datamodel.html#object.__del__ "object.__del__") method is called.