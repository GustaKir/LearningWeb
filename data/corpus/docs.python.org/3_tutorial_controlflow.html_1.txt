Title: More Control Flow Tools in Python
URL: https://docs.python.org/3/tutorial/controlflow.html
Summary: This section introduces additional control flow tools in Python, focusing on the `if` statement which allows for conditional execution of code. It presents an example of how to use `if`, `elif`, and `else` to handle different conditions based on user input.
---

# 4. More Control Flow Tools[¶](https://docs.python.org/3/tutorial/controlflow.html#more-control-flow-tools "Link to this heading")
As well as the [`while`](https://docs.python.org/3/reference/compound_stmts.html#while) statement just introduced, Python uses a few more that we will encounter in this chapter.
## 4.1. `if` Statements[¶](https://docs.python.org/3/tutorial/controlflow.html#if-statements "Link to this heading")
Perhaps the most well-known statement type is the [`if`](https://docs.python.org/3/reference/compound_stmts.html#if) statement. For example:
>>>```
>>> x = int(input("Please enter an integer: "))
Please enter an integer: 42
>>> if x < 0:
...   x = 0
...   print('Negative changed to zero')
... elif x == 0:
...   print('Zero')
... elif x == 1:
...   print('Single')
... else:
...   print('More')
...
More

```

There can be zero or more [`elif`](https://docs.python.org/3/reference/compound_stmts.html#elif) parts, and the [`else`](https://docs.python.org/3/reference/compound_stmts.html#else) part is optional. The keyword ‘`elif`’ is short for ‘else if’, and is useful to avoid excessive indentation. An `if` … `elif` … `elif` … sequence is a substitute for the `switch` or `case` statements found in other languages.
If you’re comparing the same value to several constants, or checking for specific types or attributes, you may also find the `match` statement useful. For more details see [match Statements](https://docs.python.org/3/tutorial/controlflow.html#tut-match).
## 4.2. `for` Statements[¶](https://docs.python.org/3/tutorial/controlflow.html#for-statements "Link to this heading")
The [`for`](https://docs.python.org/3/reference/compound_stmts.html#for) statement in Python differs a bit from what you may be used to in C or Pascal. Rather than always iterating over an arithmetic progression of numbers (like in Pascal), or giving the user the ability to define both the iteration step and halting condition (as C), Python’s `for` statement iterates over the items of any sequence (a list or a string), in the order that they appear in the sequence. For example (no pun intended):
>>>```
>>> # Measure some strings:
>>> words = ['cat', 'window', 'defenestrate']
>>> for w in words:
...   print(w, len(w))
...
cat 3
window 6
defenestrate 12

```

Code that modifies a collection while iterating over that same collection can be tricky to get right. Instead, it is usually more straight-forward to loop over a copy of the collection or to create a new collection:
```
# Create a sample collection
users = {'Hans': 'active', 'Éléonore': 'inactive', '景太郎': 'active'}
# Strategy: Iterate over a copy
for user, status in users.copy().items():
  if status == 'inactive':
    del users[user]
# Strategy: Create a new collection
active_users = {}
for user, status in users.items():
  if status == 'active':
    active_users[user] = status

```

## 4.3. The [`range()`](https://docs.python.org/3/library/stdtypes.html#range "range") Function[¶](https://docs.python.org/3/tutorial/controlflow.html#the-range-function "Link to this heading")
If you do need to iterate over a sequence of numbers, the built-in function [`range()`](https://docs.python.org/3/library/stdtypes.html#range "range") comes in handy. It generates arithmetic progressions:
>>>```
>>> for i in range(5):
...   print(i)
...
0
1
2
3
4

```

The given end point is never part of the generated sequence; `range(10)` generates 10 values, the legal indices for items of a sequence of length 10. It is possible to let the range start at another number, or to specify a different increment (even negative; sometimes this is called the ‘step’):
>>>```
>>> list(range(5, 10))
[5, 6, 7, 8, 9]
>>> list(range(0, 10, 3))
[0, 3, 6, 9]
>>> list(range(-10, -100, -30))
[-10, -40, -70]

```

To iterate over the indices of a sequence, you can combine [`range()`](https://docs.python.org/3/library/stdtypes.html#range "range") and [`len()`](https://docs.python.org/3/library/functions.html#len "len") as follows:
>>>```
>>> a = ['Mary', 'had', 'a', 'little', 'lamb']
>>> for i in range(len(a)):
...   print(i, a[i])
...
0 Mary
1 had
2 a
3 little
4 lamb

```

In most such cases, however, it is convenient to use the [`enumerate()`](https://docs.python.org/3/library/functions.html#enumerate "enumerate") function, see [Looping Techniques](https://docs.python.org/3/tutorial/datastructures.html#tut-loopidioms).
A strange thing happens if you just print a range:
>>>```
>>> range(10)
range(0, 10)