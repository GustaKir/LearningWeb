Title: Using String Templates in Python
URL: https://docs.python.org/3/library/string.html
Summary: This section explains how to use the Template class in Python's string library for variable substitution in strings. It includes examples demonstrating the `substitute` and `safe_substitute` methods, along with handling errors when placeholders are missing.
---

template[¶](https://docs.python.org/3/library/string.html#string.Template.template "Link to this definition")
    
This is the object passed to the constructor’s _template_ argument. In general, you shouldn’t change it, but read-only access is not enforced.
Here is an example of how to use a Template:
>>>```
>>> fromstringimport Template
>>> s = Template('$who likes $what')
>>> s.substitute(who='tim', what='kung pao')
'tim likes kung pao'
>>> d = dict(who='tim')
>>> Template('Give $who $100').substitute(d)
Traceback (most recent call last):
...
ValueError: Invalid placeholder in string: line 1, col 11
>>> Template('$who likes $what').substitute(d)
Traceback (most recent call last):
...
KeyError: 'what'
>>> Template('$who likes $what').safe_substitute(d)
'tim likes $what'

```

Advanced usage: you can derive subclasses of [`Template`](https://docs.python.org/3/library/string.html#string.Template "string.Template") to customize the placeholder syntax, delimiter character, or the entire regular expression used to parse template strings. To do this, you can override these class attributes:
  * _delimiter_ – This is the literal string describing a placeholder introducing delimiter. The default value is `$`. Note that this should _not_ be a regular expression, as the implementation will call [`re.escape()`](https://docs.python.org/3/library/re.html#re.escape "re.escape") on this string as needed. Note further that you cannot change the delimiter after class creation (i.e. a different delimiter must be set in the subclass’s class namespace).
  * _idpattern_ – This is the regular expression describing the pattern for non-braced placeholders. The default value is the regular expression `(?a:[_a-z][_a-z0-9]*)`. If this is given and _braceidpattern_ is `None` this pattern will also apply to braced placeholders.
Note
Since default _flags_ is `re.IGNORECASE`, pattern `[a-z]` can match with some non-ASCII characters. That’s why we use the local `a` flag here.
Changed in version 3.7: _braceidpattern_ can be used to define separate patterns used inside and outside the braces.
  * _braceidpattern_ – This is like _idpattern_ but describes the pattern for braced placeholders. Defaults to `None` which means to fall back to _idpattern_ (i.e. the same pattern is used both inside and outside braces). If given, this allows you to define different patterns for braced and unbraced placeholders.
Added in version 3.7.
  * _flags_ – The regular expression flags that will be applied when compiling the regular expression used for recognizing substitutions. The default value is `re.IGNORECASE`. Note that `re.VERBOSE` will always be added to the flags, so custom _idpattern_ s must follow conventions for verbose regular expressions.
Added in version 3.2.


Alternatively, you can provide the entire regular expression pattern by overriding the class attribute _pattern_. If you do this, the value must be a regular expression object with four named capturing groups. The capturing groups correspond to the rules given above, along with the invalid placeholder rule:
  * _escaped_ – This group matches the escape sequence, e.g. `$$`, in the default pattern.
  * _named_ – This group matches the unbraced placeholder name; it should not include the delimiter in capturing group.
  * _braced_ – This group matches the brace enclosed placeholder name; it should not include either the delimiter or braces in the capturing group.
  * _invalid_ – This group matches any other delimiter pattern (usually a single delimiter), and it should appear last in the regular expression.


The methods on this class will raise [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if the pattern matches the template without one of these named groups matching.
## Helper functions[¶](https://docs.python.org/3/library/string.html#helper-functions "Link to this heading")