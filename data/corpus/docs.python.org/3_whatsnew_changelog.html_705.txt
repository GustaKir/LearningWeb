Title: Python Issue Fixes and Updates
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section outlines several updates and bug fixes in Python, including improvements to zipimport encoding, handling of dictionary comparison errors, generator frame management, coroutine finalization handling, and additional null pointer checks.
---

g(0) when Python is compiled with NSMALLPOSINTS = 0.
  * [bpo-25758](https://bugs.python.org/issue?@action=redirect&bpo=25758): Prevents zipimport from unnecessarily encoding a filename (patch by Eryk Sun)
  * [bpo-28189](https://bugs.python.org/issue?@action=redirect&bpo=28189): dictitems_contains no longer swallows compare errors. (Patch by Xiang Zhang)
  * [bpo-27812](https://bugs.python.org/issue?@action=redirect&bpo=27812): Properly clear out a generator’s frame’s backreference to the generator to prevent crashes in frame.clear().
  * [bpo-27811](https://bugs.python.org/issue?@action=redirect&bpo=27811): Fix a crash when a coroutine that has not been awaited is finalized with warnings-as-errors enabled.
  * [bpo-27587](https://bugs.python.org/issue?@action=redirect&bpo=27587): Fix another issue found by PVS-Studio: Null pointer check after use of ‘def’ in _PyState_AddModule(). Initial patch by Christian Heimes.
  * [bpo-26020](https://bugs.python.org/issue?@action=redirect&bpo=26020): set literal evaluation order did not match documented behaviour.
  * [bpo-27782](https://bugs.python.org/issue?@action=redirect&bpo=27782): Multi-phase extension module import now correctly allows the `m_methods` field to be used to add module level functions to instances of non-module types returned from `Py_create_mod`. Patch by Xiang Zhang.
  * [bpo-27936](https://bugs.python.org/issue?@action=redirect&bpo=27936): The round() function accepted a second None argument for some types but not for others. Fixed the inconsistency by accepting None for all numeric types.
  * [bpo-27487](https://bugs.python.org/issue?@action=redirect&bpo=27487): Warn if a submodule argument to “python -m” or runpy.run_module() is found in sys.modules after parent packages are imported, but before the submodule is executed.
  * [bpo-27558](https://bugs.python.org/issue?@action=redirect&bpo=27558): Fix a SystemError in the implementation of “raise” statement. In a brand new thread, raise a RuntimeError since there is no active exception to reraise. Patch written by Xiang Zhang.
  * [bpo-27419](https://bugs.python.org/issue?@action=redirect&bpo=27419): Standard __import__() no longer look up “__import__” in globals or builtins for importing submodules or “from import”. Fixed handling an error of non-string package name.
  * [bpo-27083](https://bugs.python.org/issue?@action=redirect&bpo=27083): Respect the PYTHONCASEOK environment variable under Windows.
  * [bpo-27514](https://bugs.python.org/issue?@action=redirect&bpo=27514): Make having too many statically nested blocks a SyntaxError instead of SystemError.
  * [bpo-27473](https://bugs.python.org/issue?@action=redirect&bpo=27473): Fixed possible integer overflow in bytes and bytearray concatenations. Patch by Xiang Zhang.
  * [bpo-27507](https://bugs.python.org/issue?@action=redirect&bpo=27507): Add integer overflow check in bytearray.extend(). Patch by Xiang Zhang.
  * [bpo-27581](https://bugs.python.org/issue?@action=redirect&bpo=27581): Don’t rely on wrapping for overflow check in PySequence_Tuple(). Patch by Xiang Zhang.
  * [bpo-27443](https://bugs.python.org/issue?@action=redirect&bpo=27443): __length_hint__() of bytearray iterators no longer return a negative integer for a resized bytearray.
  * [bpo-27942](https://bugs.python.org/issue?@action=redirect&bpo=27942): Fix memory leak in codeobject.c