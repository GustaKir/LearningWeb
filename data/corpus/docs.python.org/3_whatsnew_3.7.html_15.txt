Title: Python 3.7 New Features in datetime and dbm Modules
URL: https://docs.python.org/3/whatsnew/3.7.html
Summary: Python 3.7 introduces the `datetime.fromisoformat()` method for creating `datetime` objects from ISO format strings and enhances the `tzinfo` class to support sub-minute offsets. Additionally, there are updates to the `dbm` module, specifically `dbm.dumb`.
---

ew [`datetime.fromisoformat()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.fromisoformat "datetime.datetime.fromisoformat") method constructs a [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") object from a string in one of the formats output by [`datetime.isoformat()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.isoformat "datetime.datetime.isoformat"). (Contributed by Paul Ganssle in [bpo-15873](https://bugs.python.org/issue?@action=redirect&bpo=15873).)
The [`tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo "datetime.tzinfo") class now supports sub-minute offsets. (Contributed by Alexander Belopolsky in [bpo-5288](https://bugs.python.org/issue?@action=redirect&bpo=5288).)
### dbm[¶](https://docs.python.org/3/whatsnew/3.7.html#dbm "Link to this heading")
[`dbm.dumb`](https://docs.python.org/3/library/dbm.html#module-dbm.dumb "dbm.dumb: Portable implementation of the simple DBM interface.") now supports reading read-only files and no longer writes the index file when it is not changed.
### decimal[¶](https://docs.python.org/3/whatsnew/3.7.html#decimal "Link to this heading")
The [`decimal`](https://docs.python.org/3/library/decimal.html#module-decimal "decimal: Implementation of the General Decimal Arithmetic Specification.") module now uses [context variables](https://docs.python.org/3/whatsnew/3.7.html#whatsnew37-pep567) to store the decimal context. (Contributed by Yury Selivanov in [bpo-32630](https://bugs.python.org/issue?@action=redirect&bpo=32630).)
### dis[¶](https://docs.python.org/3/whatsnew/3.7.html#dis "Link to this heading")
The [`dis()`](https://docs.python.org/3/library/dis.html#dis.dis "dis.dis") function is now able to disassemble nested code objects (the code of comprehensions, generator expressions and nested functions, and the code used for building nested classes). The maximum depth of disassembly recursion is controlled by the new _depth_ parameter. (Contributed by Serhiy Storchaka in [bpo-11822](https://bugs.python.org/issue?@action=redirect&bpo=11822).)
### distutils[¶](https://docs.python.org/3/whatsnew/3.7.html#distutils "Link to this heading")
`README.rst` is now included in the list of distutils standard READMEs and therefore included in source distributions. (Contributed by Ryan Gonzalez in [bpo-11913](https://bugs.python.org/issue?@action=redirect&bpo=11913).)
### enum[¶](https://docs.python.org/3/whatsnew/3.7.html#enum "Link to this heading")
The [`Enum`](https://docs.python.org/3/library/enum.html#enum.Enum "enum.Enum") learned the new `_ignore_` class property, which allows listing the names of properties which should not become enum members. (Contributed by Ethan Furman in [bpo-31801](https://bugs.python.org/issue?@action=redirect&bpo=31801).)
In Python 3.8, attempting to check for non-Enum objects in `Enum` classes will raise a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") (e.g. `1 in Color`); similarly, attempting to check for non-Flag objects in a `Flag` member will raise [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") (e.g. `1 in Perm.RW`); currently, both operations return [`False`](https://docs.python.org/3/library/constants.html#False "False") instead and are deprecated. (Contributed by Ethan Furman in [bpo-33217](https://bugs.python.org/issue?@action=redirect&bpo=33217).)
### functools[¶](https://docs.python.org/3/whatsnew/3.7.html#functools "Link to this heading")
[`functools.singledispatch()`](https://docs.python.org/3/library/functools.html#functools.singledispatch "functools.singledispatch") now supports registering implementations using type annotations. (Contributed by Łukasz Langa in [bpo-32227](https://bugs.python.org/issue?@action=redirect&bpo=32227).)
### gc[¶](https://docs.python.org/3/whatsnew/3.7.html#gc "Link to this heading")
The new [`gc.freeze()`](https://docs.python.org/3/library/gc.html#gc.freeze "gc.freeze") function allows freezing all objects tracked by the garbage collector and excluding them from future collections. This can be used before a POSIX `fork()` call to make the GC copy-on-write friendly or to speed up collection. The new [`gc.unfreeze()`](https://docs.python.org/3/library/gc.html#gc.unfreeze "gc.unfreeze") functions reverses this operation. Additionally, [`gc.get_freeze_count()`](https://docs.python.org/3/library/gc.html#gc.get_freeze_count "gc.get_freeze_count") can be used to obtain the number of frozen objects.