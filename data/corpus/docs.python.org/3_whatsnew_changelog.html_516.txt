Title: Python 3 Changelog: Updates and Bug Fixes
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section highlights various changes in Python, including fixes for segfaults in coroutines, implementation of assignment expressions as per PEP 572, and performance improvements for namedtuple attribute access. It also addresses memory access issues with unicode escape sequences.
---

at "str.format"), `float.__format__()` and `complex.__format__()` methods for non-ASCII decimal point when using the “n” formatter.
  * [bpo-35269](https://bugs.python.org/issue?@action=redirect&bpo=35269): Fix a possible segfault involving a newly created coroutine. Patch by Zackery Spytz.
  * [bpo-35224](https://bugs.python.org/issue?@action=redirect&bpo=35224): Implement [**PEP 572**](https://peps.python.org/pep-0572/) (assignment expressions). Patch by Emily Morehouse.
  * [bpo-32492](https://bugs.python.org/issue?@action=redirect&bpo=32492): Speed up `namedtuple()` attribute access by 1.6x using a C fast-path for the name descriptors. Patch by Pablo Galindo.
  * [bpo-35214](https://bugs.python.org/issue?@action=redirect&bpo=35214): Fixed an out of bounds memory access when parsing a truncated unicode escape sequence at the end of a string such as `'\N'`. It would read one byte beyond the end of the memory allocation.
  * [bpo-35214](https://bugs.python.org/issue?@action=redirect&bpo=35214): The interpreter and extension modules have had annotations added so that they work properly under clang’s Memory Sanitizer. A new configure flag –with-memory-sanitizer has been added to make test builds of this nature easier to perform.
  * [bpo-35193](https://bugs.python.org/issue?@action=redirect&bpo=35193): Fix an off by one error in the bytecode peephole optimizer where it could read bytes beyond the end of bounds of an array when removing unreachable code. This bug was present in every release of Python 3.6 and 3.7 until now.
  * [bpo-35169](https://bugs.python.org/issue?@action=redirect&bpo=35169): Improved error messages for forbidden assignments.
  * [bpo-34022](https://bugs.python.org/issue?@action=redirect&bpo=34022): Fix handling of hash-based bytecode files in [`zipimport`](https://docs.python.org/3/library/zipimport.html#module-zipimport "zipimport: Support for importing Python modules from ZIP archives."). Patch by Elvis Pranskevichus.
  * [bpo-28401](https://bugs.python.org/issue?@action=redirect&bpo=28401): Debug builds will no longer to attempt to import extension modules built for the ABI as they were never compatible to begin with. Patch by Stefano Rivera.
  * [bpo-29341](https://bugs.python.org/issue?@action=redirect&bpo=29341): Clarify in the docstrings of [`os`](https://docs.python.org/3/library/os.html#module-os "os: Miscellaneous operating system interfaces.") methods that path-like objects are also accepted as input parameters.
  * [bpo-35050](https://bugs.python.org/issue?@action=redirect&bpo=35050): [`socket`](https://docs.python.org/3/library/socket.html#module-socket "socket: Low-level networking interface."): Fix off-by-one bug in length check for `AF_ALG` name and type.
  * [bpo-29743](https://bugs.python.org/issue?@action=redirect&bpo=29743): Raise [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") instead of [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError") in case of a negative `_length_` in a [`ctypes.Array`](https://docs.python.org/3/library/ctypes.html#ctypes.Array "ctypes.Array") subclass. Also raise [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") instead of [`AttributeError`](https://docs.python.org/3/library/exceptions.html#AttributeError "AttributeError") for non-integer `_length_`. Original patch by Oren Milman.
  * [bpo-16806](https://bugs.python.org/issue?@action=redirect&bpo=16806): Fix `lineno` and `col_offset` for multi-line string tokens.
  * [bpo-35029](https://bugs.python.org/issue?@action=redirect&bpo=35029): [`SyntaxWarning`](https://docs.python.org/3/library/exceptions.html#SyntaxWarning "SyntaxWarning") raised as an exception at code generation time will be now replaced with a [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") for better error reporting.
  * [bpo-34983](https://bugs.python.org/issue?@action=redirect&bpo=34983): Expose [`symtable.Symbol.is_nonlocal()`](https://docs.python.org/3/library/symtable.html#symtable.Symbol.is_nonlocal "symtable.Symbol.is_nonlocal") in the symtable module. Patch by Pablo Galindo.
  * [bpo-34974](https://bugs.python.org/issue?@action=redirect&bpo=34974): [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") and [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") constructors no longer convert unexpected exceptions (e.g. [`MemoryError`](https://docs.python.org/3/library/exceptions.html#MemoryError "MemoryError") and [`KeyboardInterrupt`](https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt "KeyboardInterrupt")) to [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError").
  * [bpo-34939](https://bugs.python.org/issue?@action=redirect&bpo=34939): Allow annotated names in module namespace that are declared global before the annotation happens.