Title: Optimizations in Python 3.11
URL: https://docs.python.org/3/whatsnew/3.11.html
Summary: This section outlines specific optimizations separate from the Faster CPython project in Python 3.11, including improved performance for printf-style formatting on string literals and enhanced efficiency for integer division, particularly on x86-64 architectures.
---

## Optimizations[¶](https://docs.python.org/3/whatsnew/3.11.html#optimizations "Link to this heading")
This section covers specific optimizations independent of the [Faster CPython](https://docs.python.org/3/whatsnew/3.11.html#whatsnew311-faster-cpython) project, which is covered in its own section.
  * The compiler now optimizes simple [printf-style % formatting](https://docs.python.org/3/library/stdtypes.html#old-string-formatting) on string literals containing only the format codes `%s`, `%r` and `%a` and makes it as fast as a corresponding [f-string](https://docs.python.org/3/glossary.html#term-f-string) expression. (Contributed by Serhiy Storchaka in [bpo-28307](https://bugs.python.org/issue?@action=redirect&bpo=28307).)
  * Integer division (`//`) is better tuned for optimization by compilers. It is now around 20% faster on x86-64 when dividing an [`int`](https://docs.python.org/3/library/functions.html#int "int") by a value smaller than `2**30`. (Contributed by Gregory P. Smith and Tim Peters in [gh-90564](https://github.com/python/cpython/issues/90564).)
  * [`sum()`](https://docs.python.org/3/library/functions.html#sum "sum") is now nearly 30% faster for integers smaller than `2**30`. (Contributed by Stefan Behnel in [gh-68264](https://github.com/python/cpython/issues/68264).)
  * Resizing lists is streamlined for the common case, speeding up `list.append()` by ≈15% and simple [list comprehension](https://docs.python.org/3/glossary.html#term-list-comprehension)s by up to 20-30% (Contributed by Dennis Sweeney in [gh-91165](https://github.com/python/cpython/issues/91165).)
  * Dictionaries don’t store hash values when all keys are Unicode objects, decreasing [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") size. For example, `sys.getsizeof(dict.fromkeys("abcdefg"))` is reduced from 352 bytes to 272 bytes (23% smaller) on 64-bit platforms. (Contributed by Inada Naoki in [bpo-46845](https://bugs.python.org/issue?@action=redirect&bpo=46845).)
  * Using [`asyncio.DatagramProtocol`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.DatagramProtocol "asyncio.DatagramProtocol") is now orders of magnitude faster when transferring large files over UDP, with speeds over 100 times higher for a ≈60 MiB file. (Contributed by msoxzw in [gh-91487](https://github.com/python/cpython/issues/91487).)
  * [`math`](https://docs.python.org/3/library/math.html#module-math "math: Mathematical functions \(sin\(\) etc.\).") functions [`comb()`](https://docs.python.org/3/library/math.html#math.comb "math.comb") and [`perm()`](https://docs.python.org/3/library/math.html#math.perm "math.perm") are now ≈10 times faster for large arguments (with a larger speedup for larger _k_). (Contributed by Serhiy Storchaka in [bpo-37295](https://bugs.python.org/issue?@action=redirect&bpo=37295).)
  * The [`statistics`](https://docs.python.org/3/library/statistics.html#module-statistics "statistics: Mathematical statistics functions") functions [`mean()`](https://docs.python.org/3/library/statistics.html#statistics.mean "statistics.mean"), [`variance()`](https://docs.python.org/3/library/statistics.html#statistics.variance "statistics.variance") and [`stdev()`](https://docs.python.org/3/library/statistics.html#statistics.stdev "statistics.stdev") now consume iterators in one pass rather than converting them to a [`list`](https://docs.python.org/3/library/stdtypes.html#list "list") first. This is twice as fast and can save substantial memory. (Contributed by Raymond Hettinger in [gh-90415](https://github.com/python/cpython/issues/90415).)
  * [`unicodedata.normalize()`](https://docs.python.org/3/library/unicodedata.html#unicodedata.normalize "unicodedata.normalize") now normalizes pure-ASCII strings in constant time. (Contributed by Donghee Na in [bpo-44987](https://bugs.python.org/issue?@action=redirect&bpo=44987).)