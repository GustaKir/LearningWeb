Title: Creating and Managing TCP Sockets in Python
URL: https://docs.python.org/3/library/socket.html
Summary: This chunk illustrates how to create a TCP socket server in Python that listens on all interfaces at port 8080, considering dual-stack IPV6 support if available. It notes the 'SO_REUSEADDR' option for immediate reuse of sockets in TIME_WAIT state, introduced in Python 3.8, and explains the function 'socket.has_dualstack_ipv6()' which checks for dual-stack IPv4/IPv6 support.
---

```
importsocket
addr = ("", 8080) # all interfaces, port 8080
if socket.has_dualstack_ipv6():
  s = socket.create_server(addr, family=socket.AF_INET6, dualstack_ipv6=True)
else:
  s = socket.create_server(addr)

```

Note
On POSIX platforms the `SO_REUSEADDR` socket option is set in order to immediately reuse previous sockets which were bound on the same _address_ and remained in TIME_WAIT state.
Added in version 3.8. 

socket.has_dualstack_ipv6()[¶](https://docs.python.org/3/library/socket.html#socket.has_dualstack_ipv6 "Link to this definition")
    
Return `True` if the platform supports creating a TCP socket which can handle both IPv4 and IPv6 connections.
Added in version 3.8. 

socket.fromfd(_fd_ , _family_ , _type_ , _proto =0_)[¶](https://docs.python.org/3/library/socket.html#socket.fromfd "Link to this definition")
    
Duplicate the file descriptor _fd_ (an integer as returned by a file object’s [`fileno()`](https://docs.python.org/3/library/io.html#io.IOBase.fileno "io.IOBase.fileno") method) and build a socket object from the result. Address family, socket type and protocol number are as for the [`socket()`](https://docs.python.org/3/library/socket.html#socket.socket "socket.socket") function above. The file descriptor should refer to a socket, but this is not checked — subsequent operations on the object may fail if the file descriptor is invalid. This function is rarely needed, but can be used to get or set socket options on a socket passed to a program as standard input or output (such as a server started by the Unix inet daemon). The socket is assumed to be in blocking mode.
The newly created socket is [non-inheritable](https://docs.python.org/3/library/os.html#fd-inheritance).
Changed in version 3.4: The returned socket is now non-inheritable. 

socket.fromshare(_data_)[¶](https://docs.python.org/3/library/socket.html#socket.fromshare "Link to this definition")
    
Instantiate a socket from data obtained from the [`socket.share()`](https://docs.python.org/3/library/socket.html#socket.socket.share "socket.socket.share") method. The socket is assumed to be in blocking mode.
[Availability](https://docs.python.org/3/library/intro.html#availability): Windows.
Added in version 3.3. 

socket.SocketType[¶](https://docs.python.org/3/library/socket.html#socket.SocketType "Link to this definition")
    
This is a Python type object that represents the socket object type. It is the same as `type(socket(...))`.
#### Other functions[¶](https://docs.python.org/3/library/socket.html#other-functions "Link to this heading")
The [`socket`](https://docs.python.org/3/library/socket.html#module-socket "socket: Low-level networking interface.") module also offers various network-related services: 

socket.close(_fd_)[¶](https://docs.python.org/3/library/socket.html#socket.close "Link to this definition")
    
Close a socket file descriptor. This is like [`os.close()`](https://docs.python.org/3/library/os.html#os.close "os.close"), but for sockets. On some platforms (most noticeable Windows) [`os.close()`](https://docs.python.org/3/library/os.html#os.close "os.close") does not work for socket file descriptors.
Added in version 3.7.