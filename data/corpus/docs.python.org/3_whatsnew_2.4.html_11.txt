Title: Python 2.4 Release Notes
URL: https://docs.python.org/3/whatsnew/2.4.html
Summary: This chunk highlights key changes in Python 2.4, including the prevention of partially initialized modules in `sys.modules` on import failures and declares `None` as a constant. Additionally, it mentions performance optimizations for list and tuple slicing, and improvements for dictionary operations.
---

```

(Contributed by Raymond Hettinger.)
  * Encountering a failure while importing a module no longer leaves a partially initialized module object in `sys.modules`. The incomplete module object left behind would fool further imports of the same module into succeeding, leading to confusing errors. (Fixed by Tim Peters.)
  * [`None`](https://docs.python.org/3/library/constants.html#None "None") is now a constant; code that binds a new value to the name `None` is now a syntax error. (Contributed by Raymond Hettinger.)


### Optimizations[¶](https://docs.python.org/3/whatsnew/2.4.html#optimizations "Link to this heading")
  * The inner loops for list and tuple slicing were optimized and now run about one-third faster. The inner loops for dictionaries were also optimized, resulting in performance boosts for `keys()`, `values()`, `items()`, `iterkeys()`, `itervalues()`, and `iteritems()`. (Contributed by Raymond Hettinger.)
  * The machinery for growing and shrinking lists was optimized for speed and for space efficiency. Appending and popping from lists now runs faster due to more efficient code paths and less frequent use of the underlying system `realloc()`. List comprehensions also benefit. `list.extend()` was also optimized and no longer converts its argument into a temporary list before extending the base list. (Contributed by Raymond Hettinger.)
  * [`list()`](https://docs.python.org/3/library/stdtypes.html#list "list"), [`tuple()`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple"), [`map()`](https://docs.python.org/3/library/functions.html#map "map"), [`filter()`](https://docs.python.org/3/library/functions.html#filter "filter"), and [`zip()`](https://docs.python.org/3/library/functions.html#zip "zip") now run several times faster with non-sequence arguments that supply a `__len__()` method. (Contributed by Raymond Hettinger.)
  * The methods `list.__getitem__()`, `dict.__getitem__()`, and `dict.__contains__()` are now implemented as `method_descriptor` objects rather than `wrapper_descriptor` objects. This form of access doubles their performance and makes them more suitable for use as arguments to functionals: `map(mydict.__getitem__, keylist)`. (Contributed by Raymond Hettinger.)
  * Added a new opcode, `LIST_APPEND`, that simplifies the generated bytecode for list comprehensions and speeds them up by about a third. (Contributed by Raymond Hettinger.)
  * The peephole bytecode optimizer has been improved to produce shorter, faster bytecode; remarkably, the resulting bytecode is more readable. (Enhanced by Raymond Hettinger.)
  * String concatenations in statements of the form `s = s + "abc"` and `s += "abc"` are now performed more efficiently in certain circumstances. This optimization won’t be present in other Python implementations such as Jython, so you shouldn’t rely on it; using the `join()` method of strings is still recommended when you want to efficiently glue a large number of strings together. (Contributed by Armin Rigo.)


The net result of the 2.4 optimizations is that Python 2.4 runs the pystone benchmark around 5% faster than Python 2.3 and 35% faster than Python 2.2. (pystone is not a particularly good benchmark, but it’s the most commonly used measurement of Python’s performance. Your own applications may show greater or smaller benefits from Python 2.4.)
## New, Improved, and Deprecated Modules[¶](https://docs.python.org/3/whatsnew/2.4.html#new-improved-and-deprecated-modules "Link to this heading")
As usual, Python’s standard library received a number of enhancements and bug fixes. Here’s a partial list of the most notable changes, sorted alphabetically by module name. Consult the `Misc/NEWS` file in the source tree for a more complete list of changes, or look through the CVS logs for all the details.
  * The `asyncore` module’s `loop()` function now has a _count_ parameter that lets you perform a limited number of passes through the polling loop. The default is still to loop forever.
  * The [`base64`](https://docs.python.org/3/library/base64.html#module-base64 "base64: RFC 4648: Base16, Base32, Base64 Data Encodings; Base85 and Ascii85") module now has more complete [**RFC 3548**](https://datatracker.ietf.org/doc/html/rfc3548.html) support for Base64, Base32, and Base16 encoding and decoding, including optional case folding and optional alternative alphabets. (Contributed by Barry Warsaw.)
  * The [`bisect`](https://docs.python.org/3/library/bisect.html#module-bisect "bisect: Array bisection algorithms for binary searching.") module now has an underlying C implementation for improved performance. (Contributed by Dmitry Vasiliev.)
  * The CJKCodecs collections of East Asian codecs, maintained by Hye-Shik Chang, was integrated into 2.4. The new encodings are:
  * Chinese (PRC): gb2312, gbk, gb18030, big5hkscs, hz
  * Chinese (ROC): big5, cp950
  *