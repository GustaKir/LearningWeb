Title: Python Standard Library Index - Mock and Bytes
URL: https://docs.python.org/3/genindex-all.html
Summary: This section provides links to various attributes and classes related to `unittest.mock.AsyncMock`, including `await_args`, `await_args_list`, and `await_count`. It also includes information on the 'Awaitable' class, bytes literals, and functions for base64 encoding and decoding.
---

cs.python.org/3/library/unittest.mock.html#unittest.mock.AsyncMock.await_args)
  * [await_args_list (unittest.mock.AsyncMock attribute)](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.AsyncMock.await_args_list)
  * [await_count (unittest.mock.AsyncMock attribute)](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.AsyncMock.await_count)
  * [**awaitable**](https://docs.python.org/3/glossary.html#term-awaitable)
  * [Awaitable (class in collections.abc)](https://docs.python.org/3/library/collections.abc.html#collections.abc.Awaitable)
    * [(class in typing)](https://docs.python.org/3/library/typing.html#typing.Awaitable)

  
---|---  
## B
  * b" 
    * [bytes literal](https://docs.python.org/3/reference/lexical_analysis.html#index-19)
  * b' 
    * [bytes literal](https://docs.python.org/3/reference/lexical_analysis.html#index-19)
  * [b16decode() (in module base64)](https://docs.python.org/3/library/base64.html#base64.b16decode)
  * [b16encode() (in module base64)](https://docs.python.org/3/library/base64.html#base64.b16encode)
  * [b2a_base64() (in module binascii)](https://docs.python.org/3/library/binascii.html#binascii.b2a_base64)
  * [b2a_hex() (in module binascii)](https://docs.python.org/3/library/binascii.html#binascii.b2a_hex)
  * [b2a_qp() (in module binascii)](https://docs.python.org/3/library/binascii.html#binascii.b2a_qp)
  * [b2a_uu() (in module binascii)](https://docs.python.org/3/library/binascii.html#binascii.b2a_uu)
  * [b32decode() (in module base64)](https://docs.python.org/3/library/base64.html#base64.b32decode)
  * [b32encode() (in module base64)](https://docs.python.org/3/library/base64.html#base64.b32encode)
  * [b32hexdecode() (in module base64)](https://docs.python.org/3/library/base64.html#base64.b32hexdecode)
  * [b32hexencode() (in module base64)](https://docs.python.org/3/library/base64.html#base64.b32hexencode)
  * [b64decode() (in module base64)](https://docs.python.org/3/library/base64.html#base64.b64decode)
  * [b64encode() (in module base64)](https://docs.python.org/3/library/base64.html#base64.b64encode)
  * [b85decode() (in module base64)](https://docs.python.org/3/library/base64.html#base64.b85decode)
  * [b85encode() (in module base64)](https://docs.python.org/3/library/base64.html#base64.b85encode)
  * [Babyl (class in mailbox)](https://docs.python.org/3/library/mailbox.html#mailbox.Babyl)
  * [BabylMessage (class in mailbox)](https://docs.python.org/3/library/mailbox.html#mailbox.BabylMessage)
  * [back() (in module turtle)](https://docs.python.org/3/library/turtle.html#turtle.back)
  * [backend (in module readline)](https://docs.python.org/3/library/readline.html#readline.backend)
  * [backslash character](https://docs.python.org/3/reference/lexical_analysis.html#index-6)
  * backslashreplace 
    * [error handler's name](https://docs.python.org/3/library/codecs.html#index-1)
  * [backslashreplace_errors() (in module codecs)](https://docs.python.org/3/library/codecs.html#codecs.backslashreplace_errors)
  * [backup() (sqlite3.Connection method)](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.backup)
  * [backward() (in module turtle)](https://docs.python.org/3/library/turtle.html#turtle.backward)
  * [BadGzipFile](https://docs.python.org/3/library/gzip.html#gzip.BadGzipFile)
  * [BadOptionError](https://docs.python.org/3/library/optparse.html#optparse.BadOptionError)
  * [BadStatusLine](https://docs.python.org/3/library/http.client.html#http.client.BadStatusLine)
  * [BadZipFile](https://docs.python.org/3/library/zipfile.html#zipfile.BadZipFile)
  * [BadZipfile](https://docs.python.org/3/library/zipfile.html#zipfile.BadZipfile)
  * [Barrier (class in asyncio)](https://docs.python.org/3/library/asyncio-sync.html#asyncio.Barrier)
    * [(class in multiprocessing)](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Barrier)
    * [(class in threading)](https://docs.python.org/3/library/threading.html#threading.Barrier)
  * [Barrier() (multiprocessing.managers.SyncManager method)](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.SyncManager.Barrier)
  * base64 
    * [encoding](https://docs.python.org/3/library/base64.html#index-0)
    * [module](https://docs.python.org/3/library/base64.html#module-base64), [[1]](https://docs.python.org/3/library/binascii.html#index-0)
  * [base_exec_prefix (in module sys)](https://docs.python.org/3/library/sys.html#sys.base_exec_prefix)
  * [base_prefix (in module sys)](https://docs.python.org/3/library/sys.html#sys.base_prefix)
  * [BaseCGIHandler (class in wsgiref.handlers)](https://docs.python.org/3/library/wsgiref.html#wsgiref.handlers.BaseCGIHandler)
  * [BaseCookie (class in http.cookies)](https://docs.python.org/3/library/http.cookies.html#http.cookies.BaseCookie)
  * [BaseException](https://docs.python.org/3/library/exceptions.html#BaseException)
  * [BaseExceptionGroup](https://docs.python.org/3/library/exceptions.html#B