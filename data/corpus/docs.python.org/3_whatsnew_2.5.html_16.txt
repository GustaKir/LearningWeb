Title: New Features in Python 2.5
URL: https://docs.python.org/3/whatsnew/2.5.html
Summary: Python 2.5 introduces several enhancements: the `collections` module now includes a `remove(value)` method for `deque`, raising a `ValueError` if the value isn't found. Additionally, the new `contextlib` module provides helper functions for using the `with` statement, and a new profiling module, `cProfile`, is also added.
---

```

(Contributed by Guido van Rossum.)
  * The `deque` double-ended queue type supplied by the [`collections`](https://docs.python.org/3/library/collections.html#module-collections "collections: Container datatypes") module now has a `remove(value)` method that removes the first occurrence of _value_ in the queue, raising [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if the value isn’t found. (Contributed by Raymond Hettinger.)
  * New module: The [`contextlib`](https://docs.python.org/3/library/contextlib.html#module-contextlib "contextlib: Utilities for with-statement contexts.") module contains helper functions for use with the new ‘[`with`](https://docs.python.org/3/reference/compound_stmts.html#with)’ statement. See section [The contextlib module](https://docs.python.org/3/whatsnew/2.5.html#contextlibmod) for more about this module.
  * New module: The [`cProfile`](https://docs.python.org/3/library/profile.html#module-cProfile "cProfile") module is a C implementation of the existing [`profile`](https://docs.python.org/3/library/profile.html#module-profile "profile: Python source profiler.") module that has much lower overhead. The module’s interface is the same as [`profile`](https://docs.python.org/3/library/profile.html#module-profile "profile: Python source profiler."): you run `cProfile.run('main()')` to profile a function, can save profile data to a file, etc. It’s not yet known if the Hotshot profiler, which is also written in C but doesn’t match the [`profile`](https://docs.python.org/3/library/profile.html#module-profile "profile: Python source profiler.") module’s interface, will continue to be maintained in future versions of Python. (Contributed by Armin Rigo.)
Also, the [`pstats`](https://docs.python.org/3/library/profile.html#module-pstats "pstats: Statistics object for use with the profiler.") module for analyzing the data measured by the profiler now supports directing the output to any file object by supplying a _stream_ argument to the `Stats` constructor. (Contributed by Skip Montanaro.)
  * The [`csv`](https://docs.python.org/3/library/csv.html#module-csv "csv: Write and read tabular data to and from delimited files.") module, which parses files in comma-separated value format, received several enhancements and a number of bugfixes. You can now set the maximum size in bytes of a field by calling the `csv.field_size_limit(new_limit)` function; omitting the _new_limit_ argument will return the currently set limit. The `reader` class now has a `line_num` attribute that counts the number of physical lines read from the source; records can span multiple physical lines, so `line_num` is not the same as the number of records read.
The CSV parser is now stricter about multi-line quoted fields. Previously, if a line ended within a quoted field without a terminating newline character, a newline would be inserted into the returned field. This behavior caused problems when reading files that contained carriage return characters within fields, so the code was changed to return the field without inserting newlines. As a consequence, if newlines embedded within fields are important, the input should be split into lines in a manner that preserves the newline characters.
(Contributed by Skip Montanaro and Andrew McNamara.)
  * The [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") class in the [`datetime`](https://docs.python.org/3/library/datetime.html#module-datetime "datetime: Basic date and time types.") module now has a `strptime(string, format)` method for parsing date strings, contributed by Josh Spoerri. It uses the same format characters as [`time.strptime()`](https://docs.python.org/3/library/time.html#time.strptime "time.strptime") and [`time.strftime()`](https://docs.python.org/3/library/time.html#time.strftime "time.strftime"):
```
fromdatetimeimport datetime
ts = datetime.strptime('10:13:15 2006-03-07',
            '%H:%M:%S %Y-%m-%d')