Title: Extending Option Types in optparse
URL: https://docs.python.org/3/library/optparse.html
Summary: This document segment describes how to extend the Option class in the optparse library by adding a new option type, 'complex'. It highlights the importance of using the copy function to avoid modifying the original TYPE_CHECKER attribute, ensuring safe extension of the option types.
---

```
classMyOption (Option):
  TYPES = Option.TYPES + ("complex",)
  TYPE_CHECKER = copy(Option.TYPE_CHECKER)
  TYPE_CHECKER["complex"] = check_complex

```

(If we didn’t make a [`copy()`](https://docs.python.org/3/library/copy.html#module-copy "copy: Shallow and deep copy operations.") of [`Option.TYPE_CHECKER`](https://docs.python.org/3/library/optparse.html#optparse.Option.TYPE_CHECKER "optparse.Option.TYPE_CHECKER"), we would end up modifying the [`TYPE_CHECKER`](https://docs.python.org/3/library/optparse.html#optparse.Option.TYPE_CHECKER "optparse.Option.TYPE_CHECKER") attribute of [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.")’s Option class. This being Python, nothing stops you from doing that except good manners and common sense.)
That’s it! Now you can write a script that uses the new option type just like any other [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.")-based script, except you have to instruct your OptionParser to use MyOption instead of Option:
```
parser = OptionParser(option_class=MyOption)
parser.add_option("-c", type="complex")

```

Alternately, you can build your own option list and pass it to OptionParser; if you don’t use `add_option()` in the above way, you don’t need to tell OptionParser which option class to use:
```
option_list = [MyOption("-c", action="store", type="complex", dest="c")]
parser = OptionParser(option_list=option_list)

```

### Adding new actions[¶](https://docs.python.org/3/library/optparse.html#adding-new-actions "Link to this heading")
Adding new actions is a bit trickier, because you have to understand that [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") has a couple of classifications for actions: 

“store” actions
    
actions that result in [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") storing a value to an attribute of the current OptionValues instance; these options require a [`dest`](https://docs.python.org/3/library/optparse.html#optparse.Option.dest "optparse.Option.dest") attribute to be supplied to the Option constructor. 

“typed” actions
    
actions that take a value from the command line and expect it to be of a certain type; or rather, a string that can be converted to a certain type. These options require a [`type`](https://docs.python.org/3/library/optparse.html#optparse.Option.type "optparse.Option.type") attribute to the Option constructor.
These are overlapping sets: some default “store” actions are `"store"`, `"store_const"`, `"append"`, and `"count"`, while the default “typed” actions are `"store"`, `"append"`, and `"callback"`.
When you add an action, you need to categorize it by listing it in at least one of the following class attributes of Option (all are lists of strings): 

Option.ACTIONS[¶](https://docs.python.org/3/library/optparse.html#optparse.Option.ACTIONS "Link to this definition")
    
All actions must be listed in ACTIONS. 

Option.STORE_ACTIONS[¶](https://docs.python.org/3/library/optparse.html#optparse.Option.STORE_ACTIONS "Link to this definition")
    
“store” actions are additionally listed here. 

Option.TYPED_ACTIONS[¶](https://docs.python.org/3/library/optparse.html#optparse.Option.TYPED_ACTIONS "Link to this definition")
    
“typed” actions are additionally listed here. 

Option.ALWAYS_TYPED_ACTIONS[¶](https://docs.python.org/3/library/optparse.html#optparse.Option.ALWAYS_TYPED_ACTIONS "Link to this definition")
    
Actions that always take a type (i.e. whose options always take a value) are additionally listed here. The only effect of this is that [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") assigns the default type, `"string"`, to options with no explicit type whose action is listed in [`ALWAYS_TYPED_ACTIONS`](https://docs.python.org/3/library/optparse.html#optparse.Option.ALWAYS_TYPED_ACTIONS "optparse.Option.ALWAYS_TYPED_ACTIONS").
In order to actually implement your new action, you must override Option’s `take_action()` method and add a case that recognizes your action.
For example, let’s add an `"extend"` action. This is similar to the standard `"append"` action, but instead of taking a single value from the command-line and appending it to an existing list, `"extend"` will take multiple values in a single comma-delimited string, and extend an existing list with them. That is, if `--names` is an `"extend"` option of type `"string"`, the command line
```
--names=foo,bar --names blah --names ding,dong

```

would result in a list
```
["foo", "bar", "blah", "ding", "dong"]

```

Again we define a subclass of Option: