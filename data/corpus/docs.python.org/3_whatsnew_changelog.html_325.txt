Title: Python 3 Changelog - Recent Changes and Fixes
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section details several bug fixes and improvements in Python, including enhanced error reporting in the parser, compatibility updates for string caches, and modifications to local variable handling. Key contributions are noted from developer Pablo Galindo.
---

See PEP 659 for full explanation.
  * [bpo-44180](https://bugs.python.org/issue?@action=redirect&bpo=44180): The parser doesn’t report generic syntax errors that happen in a position further away that the one it reached in the first pass. Patch by Pablo Galindo
  * [bpo-44168](https://bugs.python.org/issue?@action=redirect&bpo=44168): Fix error message in the parser involving keyword arguments with invalid expressions. Patch by Pablo Galindo
  * [bpo-44156](https://bugs.python.org/issue?@action=redirect&bpo=44156): String caches in `compile.c` are now subinterpreter compatible.
  * [bpo-44143](https://bugs.python.org/issue?@action=redirect&bpo=44143): Fixed a crash in the parser that manifest when raising tokenizer errors when an existing exception was present. Patch by Pablo Galindo.
  * [bpo-44032](https://bugs.python.org/issue?@action=redirect&bpo=44032): Move ‘fast’ locals and other variables from the frame object to a per-thread datastack.
  * [bpo-44114](https://bugs.python.org/issue?@action=redirect&bpo=44114): Fix incorrect dictkeys_reversed and dictitems_reversed function signatures in C code, which broke webassembly builds.
  * [bpo-44110](https://bugs.python.org/issue?@action=redirect&bpo=44110): Improve `str.__getitem__()` error message
  * [bpo-26110](https://bugs.python.org/issue?@action=redirect&bpo=26110): Add `CALL_METHOD_KW` opcode to speed up method calls with keyword arguments. Idea originated from PyPy. A side effect is executing `CALL_METHOD` is now branchless in the evaluation loop.
  * [bpo-28307](https://bugs.python.org/issue?@action=redirect&bpo=28307): Compiler now optimizes simple C-style formatting with literal format containing only format codes %s, %r and %a by converting them to f-string expressions.
  * [bpo-43149](https://bugs.python.org/issue?@action=redirect&bpo=43149): Correct the syntax error message regarding multiple exception types to not refer to “exception groups”. Patch by Pablo Galindo
  * [bpo-43822](https://bugs.python.org/issue?@action=redirect&bpo=43822): The parser will prioritize tokenizer errors over custom syntax errors when raising exceptions. Patch by Pablo Galindo.
  * [bpo-40222](https://bugs.python.org/issue?@action=redirect&bpo=40222): “Zero cost” exception handling.
    * Uses a lookup table to determine how to handle exceptions.
    * Removes SETUP_FINALLY and POP_TOP block instructions, eliminating the runtime overhead of try statements.
    * Reduces the size of the frame object by about 60%.
Patch by Mark Shannon
  * [bpo-43918](https://bugs.python.org/issue?@action=redirect&bpo=43918): Document the signature and `default` argument in the docstring of the new `anext` builtin.
  * [bpo-43833](https://bugs.python.org/issue?@action=redirect&bpo=43833): Emit a deprecation warning if the numeric literal is immediately followed by one of keywords: and, else, for, if, in, is, or. Raise a syntax error with more informative message if it is immediately followed by other keyword or identifier.
  * [bpo-43879](https://bugs.python.org/issue?@action=redirect&bpo=43879): Add native_thread_id to PyThreadState. Patch by Gabriele N. Tornetta.
  * [bpo-43693](https://bugs.python.org/issue?@action=redirect&bpo=43693): Compute cell offsets relative to locals in compiler. Allows the interpreter to treats locals and cells a single array, which is slightly more efficient. Also make the LOAD_CLOSURE opcode an alias for LOAD_FAST. Preserving LOAD_CLOSURE helps keep bytecode a bit more readable.
  * [bpo-17792](https://bugs.python.org/issue?@action=redirect&bpo=17792): More accurate error messages for access of unbound locals or free vars.
  * [bpo-28146](https://bugs.python.org/issue?@action=redirect&bpo=28146): Fix a confusing error message in [`str.format()`](https://docs.python.org/3/library/stdtypes.html#str.format "str.format").
  * [bpo-11105](https://bugs.python.org/issue?@action=redirect&bpo=11105): When compiling [`ast.AST`](https://docs.python.org/3/library/ast.html#ast.AST "ast.AST") objects with recursive references through [`compile()`](https://docs.python.org/3/library/functions.html#compile "compile"), the interpreter doesn’t crash anymore instead it raises a [`RecursionError`](https://docs.python.org/3/library/exceptions.html#RecursionError "RecursionError").
  * [bpo-39091](https://bugs.python.org/issue?@action=redirect&bpo=39091): Fix crash when using passing a non-exception to a generator’s `throw()` method. Patch by Noah Oxer
  * [bpo-33346](https://bugs.python.org/issue?@action=redirect&bpo=33346): Asynchronous comprehensions are now allowed inside comprehensions in asynchronous functions. Outer comprehensions implicitly become asynchronous.