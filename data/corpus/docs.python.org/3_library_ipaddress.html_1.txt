Title: ipaddress — IPv4/IPv6 manipulation library
URL: https://docs.python.org/3/library/ipaddress.html
Summary: The `ipaddress` module provides functions and classes for creating, manipulating, and operating on IPv4 and IPv6 addresses and networks. It simplifies tasks such as subnet checking, host iteration within subnets, and validation of IP address strings. This is the full API reference for the module, introduced in Python version 3.3.
---

# `ipaddress` — IPv4/IPv6 manipulation library[¶](https://docs.python.org/3/library/ipaddress.html#module-ipaddress "Link to this heading")
**Source code:** [Lib/ipaddress.py](https://github.com/python/cpython/tree/3.13/Lib/ipaddress.py)
[`ipaddress`](https://docs.python.org/3/library/ipaddress.html#module-ipaddress "ipaddress: IPv4/IPv6 manipulation library.") provides the capabilities to create, manipulate and operate on IPv4 and IPv6 addresses and networks.
The functions and classes in this module make it straightforward to handle various tasks related to IP addresses, including checking whether or not two hosts are on the same subnet, iterating over all hosts in a particular subnet, checking whether or not a string represents a valid IP address or network definition, and so on.
This is the full module API reference—for an overview and introduction, see [An introduction to the ipaddress module](https://docs.python.org/3/howto/ipaddress.html#ipaddress-howto).
Added in version 3.3.
## Convenience factory functions[¶](https://docs.python.org/3/library/ipaddress.html#convenience-factory-functions "Link to this heading")
The [`ipaddress`](https://docs.python.org/3/library/ipaddress.html#module-ipaddress "ipaddress: IPv4/IPv6 manipulation library.") module provides factory functions to conveniently create IP addresses, networks and interfaces: 

ipaddress.ip_address(_address_)[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.ip_address "Link to this definition")
    
Return an [`IPv4Address`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address "ipaddress.IPv4Address") or [`IPv6Address`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Address "ipaddress.IPv6Address") object depending on the IP address passed as argument. Either IPv4 or IPv6 addresses may be supplied; integers less than `2**32` will be considered to be IPv4 by default. A [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised if _address_ does not represent a valid IPv4 or IPv6 address.
>>>```
>>> ipaddress.ip_address('192.168.0.1')
IPv4Address('192.168.0.1')
>>> ipaddress.ip_address('2001:db8::')
IPv6Address('2001:db8::')

```


ipaddress.ip_network(_address_ , _strict =True_)[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.ip_network "Link to this definition")
    
Return an [`IPv4Network`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network "ipaddress.IPv4Network") or [`IPv6Network`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Network "ipaddress.IPv6Network") object depending on the IP address passed as argument. _address_ is a string or integer representing the IP network. Either IPv4 or IPv6 networks may be supplied; integers less than `2**32` will be considered to be IPv4 by default. _strict_ is passed to [`IPv4Network`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network "ipaddress.IPv4Network") or [`IPv6Network`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Network "ipaddress.IPv6Network") constructor. A [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised if _address_ does not represent a valid IPv4 or IPv6 address, or if the network has host bits set.
>>>```
>>> ipaddress.ip_network('192.168.0.0/28')
IPv4Network('192.168.0.0/28')