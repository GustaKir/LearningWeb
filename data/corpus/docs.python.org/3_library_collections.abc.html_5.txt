Title: Abstract Base Classes in Collections ABC Module
URL: https://docs.python.org/3/library/collections.abc.html
Summary: This section covers abstract base classes (ABCs) such as Iterator, Reversible, and Generator in the collections.abc module. It defines the necessary methods for each ABC, such as __iter__() and __next__() for Iterator, and __reversed__() for Reversible, providing a framework for constructing iterable and generator classes.
---

_class_ collections.abc.Iterator[¶](https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterator "Link to this definition")
    
ABC for classes that provide the [`__iter__()`](https://docs.python.org/3/library/stdtypes.html#iterator.__iter__ "iterator.__iter__") and [`__next__()`](https://docs.python.org/3/library/stdtypes.html#iterator.__next__ "iterator.__next__") methods. See also the definition of [iterator](https://docs.python.org/3/glossary.html#term-iterator). 

_class_ collections.abc.Reversible[¶](https://docs.python.org/3/library/collections.abc.html#collections.abc.Reversible "Link to this definition")
    
ABC for iterable classes that also provide the [`__reversed__()`](https://docs.python.org/3/reference/datamodel.html#object.__reversed__ "object.__reversed__") method.
Added in version 3.6. 

_class_ collections.abc.Generator[¶](https://docs.python.org/3/library/collections.abc.html#collections.abc.Generator "Link to this definition")
    
ABC for [generator](https://docs.python.org/3/glossary.html#term-generator) classes that implement the protocol defined in [**PEP 342**](https://peps.python.org/pep-0342/) that extends [iterators](https://docs.python.org/3/glossary.html#term-iterator) with the [`send()`](https://docs.python.org/3/reference/expressions.html#generator.send "generator.send"), [`throw()`](https://docs.python.org/3/reference/expressions.html#generator.throw "generator.throw") and [`close()`](https://docs.python.org/3/reference/expressions.html#generator.close "generator.close") methods.
See [Annotating generators and coroutines](https://docs.python.org/3/library/typing.html#annotating-generators-and-coroutines) for details on using `Generator` in type annotations.
Added in version 3.5. 

_class_ collections.abc.Sequence[¶](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence "Link to this definition")


_class_ collections.abc.MutableSequence[¶](https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableSequence "Link to this definition")


_class_ collections.abc.ByteString[¶](https://docs.python.org/3/library/collections.abc.html#collections.abc.ByteString "Link to this definition")
    
ABCs for read-only and mutable [sequences](https://docs.python.org/3/glossary.html#term-sequence).
Implementation note: Some of the mixin methods, such as [`__iter__()`](https://docs.python.org/3/library/stdtypes.html#container.__iter__ "container.__iter__"), [`__reversed__()`](https://docs.python.org/3/reference/datamodel.html#object.__reversed__ "object.__reversed__") and `index()`, make repeated calls to the underlying [`__getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__getitem__ "object.__getitem__") method. Consequently, if [`__getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__getitem__ "object.__getitem__") is implemented with constant access speed, the mixin methods will have linear performance; however, if the underlying method is linear (as it would be with a linked list), the mixins will have quadratic performance and will likely need to be overridden.
Changed in version 3.5: The index() method added support for _stop_ and _start_ arguments.
Deprecated since version 3.12, will be removed in version 3.14: The [`ByteString`](https://docs.python.org/3/library/collections.abc.html#collections.abc.ByteString "collections.abc.ByteString") ABC has been deprecated. For use in typing, prefer a union, like `bytes | bytearray`, or [`collections.abc.Buffer`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Buffer "collections.abc.Buffer"). For use as an ABC, prefer [`Sequence`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence "collections.abc.Sequence") or [`collections.abc.Buffer`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Buffer "collections.abc.Buffer"). 

_class_ collections.abc.Set[¶](https://docs.python.org/3/library/collections.abc.html#collections.abc.Set "Link to this definition")


_class_ collections.abc.MutableSet[¶](https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableSet "Link to this definition")
    
ABCs for read-only and mutable [sets](https://docs.python.org/3/library/stdtypes.html#types-set). 

_class_ collections.abc.Mapping[¶](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping "Link to this definition")


_class_ collections.abc.MutableMapping[¶](https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableMapping "Link to this definition")
    
ABCs for read-only and mutable [mappings](https://docs.python.org/3/glossary.html#term-mapping). 

_class_ collections.abc.MappingView[¶](https://docs.python.org/3/library/collections.abc.html#collections.abc.MappingView "Link to this definition")