Title: Deleting Directories Safely with Pathlib
URL: https://docs.python.org/3/library/pathlib.html
Summary: This section discusses using `shutil.rmtree()` in conjunction with the `walk()` method to safely delete directories and their contents. It emphasizes the importance of bottom-up traversal to ensure that directories are empty before deletion, using a code example that illustrates the deletion process.
---

```

This next example is a simple implementation of [`shutil.rmtree()`](https://docs.python.org/3/library/shutil.html#shutil.rmtree "shutil.rmtree"). Walking the tree bottom-up is essential as [`rmdir()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.rmdir "pathlib.Path.rmdir") doesn’t allow deleting a directory before it is empty:
```
# Delete everything reachable from the directory "top".
# CAUTION: This is dangerous! For example, if top == Path('/'),
# it could delete all of your files.
for root, dirs, files in top.walk(top_down=False):
  for name in files:
    (root / name).unlink()
  for name in dirs:
    (root / name).rmdir()

```

Added in version 3.12.
### Creating files and directories[¶](https://docs.python.org/3/library/pathlib.html#creating-files-and-directories "Link to this heading") 

Path.touch(_mode =0o666_, _exist_ok =True_)[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.touch "Link to this definition")
    
Create a file at this given path. If _mode_ is given, it is combined with the process’s `umask` value to determine the file mode and access flags. If the file already exists, the function succeeds when _exist_ok_ is true (and its modification time is updated to the current time), otherwise [`FileExistsError`](https://docs.python.org/3/library/exceptions.html#FileExistsError "FileExistsError") is raised.
See also
The [`open()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.open "pathlib.Path.open"), [`write_text()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.write_text "pathlib.Path.write_text") and [`write_bytes()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.write_bytes "pathlib.Path.write_bytes") methods are often used to create files. 

Path.mkdir(_mode =0o777_, _parents =False_, _exist_ok =False_)[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.mkdir "Link to this definition")
    
Create a new directory at this given path. If _mode_ is given, it is combined with the process’s `umask` value to determine the file mode and access flags. If the path already exists, [`FileExistsError`](https://docs.python.org/3/library/exceptions.html#FileExistsError "FileExistsError") is raised.
If _parents_ is true, any missing parents of this path are created as needed; they are created with the default permissions without taking _mode_ into account (mimicking the POSIX `mkdir -p` command).
If _parents_ is false (the default), a missing parent raises [`FileNotFoundError`](https://docs.python.org/3/library/exceptions.html#FileNotFoundError "FileNotFoundError").
If _exist_ok_ is false (the default), [`FileExistsError`](https://docs.python.org/3/library/exceptions.html#FileExistsError "FileExistsError") is raised if the target directory already exists.
If _exist_ok_ is true, [`FileExistsError`](https://docs.python.org/3/library/exceptions.html#FileExistsError "FileExistsError") will not be raised unless the given path already exists in the file system and is not a directory (same behavior as the POSIX `mkdir -p` command).
Changed in version 3.5: The _exist_ok_ parameter was added. 

Path.symlink_to(_target_ , _target_is_directory =False_)[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.symlink_to "Link to this definition")
    
Make this path a symbolic link pointing to _target_.
On Windows, a symlink represents either a file or a directory, and does not morph to the target dynamically. If the target is present, the type of the symlink will be created to match. Otherwise, the symlink will be created as a directory if _target_is_directory_ is true or a file symlink (the default) otherwise. On non-Windows platforms, _target_is_directory_ is ignored.
>>>```
>>> p = Path('mylink')
>>> p.symlink_to('setup.py')
>>> p.resolve()
PosixPath('/home/antoine/pathlib/setup.py')
>>> p.stat().st_size
956
>>> p.lstat().st_size
8