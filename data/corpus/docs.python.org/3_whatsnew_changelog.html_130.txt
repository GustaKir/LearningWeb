Title: Python Changelog Updates
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: Updates in the Python changelog include a new option for limiting CPU resources in container systems, bug fixes related to compiler behavior and incorrect soft keywords in the grammar, and an enhancement on memory management for debug mode with `Py_DECREF()`.
---

cess_cpu_count()`](https://docs.python.org/3/library/os.html#os.process_cpu_count "os.process_cpu_count"). This option is useful for users who need to limit CPU resources of a container system without having to modify the container (application code). Patch by Donghee Na.
  * [gh-109627](https://github.com/python/cpython/issues/109627): Fix bug where the compiler does not assign a new jump target label to a duplicated small exit block.
  * [gh-109596](https://github.com/python/cpython/issues/109596): Fix some tokens in the grammar that were incorrectly marked as soft keywords. Also fix some repeated rule names and ensure that repeated rules are not allowed. Patch by Pablo Galindo
  * [gh-109496](https://github.com/python/cpython/issues/109496): On a Python built in debug mode, [`Py_DECREF()`](https://docs.python.org/3/c-api/refcounting.html#c.Py_DECREF "Py_DECREF") now calls `_Py_NegativeRefcount()` if the object is a dangling pointer to deallocated memory: memory filled with `0xDD` “dead byte” by the debug hook on memory allocators. The fix is to check the reference count _before_ checking for `_Py_IsImmortal()`. Patch by Victor Stinner.
  * [gh-107265](https://github.com/python/cpython/issues/107265): Deopt opcodes hidden by the executor when base opcode is needed
  * [gh-109371](https://github.com/python/cpython/issues/109371): Deopted instructions correctly for tool initialization and modified the incorrect assertion in instrumentation, when a previous tool already sets INSTRUCTION events
  * [gh-105658](https://github.com/python/cpython/issues/105658): Fix bug where the line trace of an except block ending with a conditional includes an excess event with the line of the conditional expression.
  * [gh-109219](https://github.com/python/cpython/issues/109219): Fix compiling type param scopes that use a name which is also free in an inner scope.
  * [gh-109351](https://github.com/python/cpython/issues/109351): Fix crash when compiling an invalid AST involving a named (walrus) expression.
  * [gh-109341](https://github.com/python/cpython/issues/109341): Fix crash when compiling an invalid AST involving a [`ast.TypeAlias`](https://docs.python.org/3/library/ast.html#ast.TypeAlias "ast.TypeAlias").
  * [gh-109195](https://github.com/python/cpython/issues/109195): Fix source location for the `LOAD_*` instruction preceding a `LOAD_SUPER_ATTR` to load the `super` global (or shadowing variable) so that it encompasses only the name `super` and not the following parentheses.
  * [gh-109256](https://github.com/python/cpython/issues/109256): Opcode IDs for specialized opcodes are allocated in their own range to improve stability of the IDs for the ‘real’ opcodes.
  * [gh-109216](https://github.com/python/cpython/issues/109216): Fix possible memory leak in [`BUILD_MAP`](https://docs.python.org/3/library/dis.html#opcode-BUILD_MAP).
  * [gh-109207](https://github.com/python/cpython/issues/109207): Fix a SystemError in `__repr__` of symtable entry object.
  * [gh-109179](https://github.com/python/cpython/issues/109179): Fix bug where the C traceback display drops notes from [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError").
  * [gh-109118](https://github.com/python/cpython/issues/109118): Disallow nested scopes (lambdas, generator expressions, and comprehensions) within PEP 695 annotation scopes that are nested within classes.
  * [gh-109156](https://github.com/python/cpython/issues/109156): Add tests for de-instrumenting instructions while keeping the instrumentation for lines
  * [gh-109114](https://github.com/python/cpython/issues/109114): Relax the detection of the error message for invalid lambdas inside f-strings to not search for arbitrary replacement fields to avoid false positives. Patch by Pablo Galindo
  * [gh-105848](https://github.com/python/cpython/issues/105848): Add a new [`CALL_KW`](https://docs.python.org/3/library/dis.html#opcode-CALL_KW) opcode, used for calls containing keyword arguments. Also, fix a possible crash when jumping over method calls in a debugger.
  * [gh-109052](https://github.com/python/cpython/issues/109052): Use the base opcode when comparing code objects to avoid interference from instrumentation
  * [gh-109118](https://github.com/python/cpython/issues/109118): Fix interpreter crash when a NameError is raised inside the type parameters of a generic class.
  * [gh-88943](https://github.com/python/cpython/issues/88943): Improve syntax error for non-ASCII character that follows a numerical literal.