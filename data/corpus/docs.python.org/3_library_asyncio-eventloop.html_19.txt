Title: Asyncio Event Loop Attributes and Subprocess Management
URL: https://docs.python.org/3/library/asyncio-eventloop.html
Summary: This section covers the 'slow_callback_duration' attribute in the asyncio event loop, defining how slow callbacks are determined and logged in debug mode. Additionally, it notes that the methods for running subprocesses are low-level, recommending the use of higher-level functions such as 'asyncio.create_subprocess_shell()' and 'asyncio.create_subprocess_exec()' for regular async/await usage.
---

loop.slow_callback_duration[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.slow_callback_duration "Link to this definition")
    
This attribute can be used to set the minimum execution duration in seconds that is considered “slow”. When debug mode is enabled, “slow” callbacks are logged.
Default value is 100 milliseconds.
See also
The [debug mode of asyncio](https://docs.python.org/3/library/asyncio-dev.html#asyncio-debug-mode).
### [Running Subprocesses](https://docs.python.org/3/library/asyncio-eventloop.html#id17)[¶](https://docs.python.org/3/library/asyncio-eventloop.html#running-subprocesses "Link to this heading")
Methods described in this subsections are low-level. In regular async/await code consider using the high-level [`asyncio.create_subprocess_shell()`](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_shell "asyncio.create_subprocess_shell") and [`asyncio.create_subprocess_exec()`](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec "asyncio.create_subprocess_exec") convenience functions instead.
Note
On Windows, the default event loop [`ProactorEventLoop`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.ProactorEventLoop "asyncio.ProactorEventLoop") supports subprocesses, whereas [`SelectorEventLoop`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.SelectorEventLoop "asyncio.SelectorEventLoop") does not. See [Subprocess Support on Windows](https://docs.python.org/3/library/asyncio-platforms.html#asyncio-windows-subprocess) for details. 

_async_ loop.subprocess_exec(_protocol_factory_ , _* args_, _stdin =subprocess.PIPE_, _stdout =subprocess.PIPE_, _stderr =subprocess.PIPE_, _** kwargs_)[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec "Link to this definition")
    
Create a subprocess from one or more string arguments specified by _args_.
_args_ must be a list of strings represented by:
  * [`str`](https://docs.python.org/3/library/stdtypes.html#str "str");
  * or [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes"), encoded to the [filesystem encoding](https://docs.python.org/3/library/os.html#filesystem-encoding).