Title: ipaddress.ip_interface
URL: https://docs.python.org/3/library/ipaddress.html
Summary: The `ipaddress.ip_interface` function returns an `IPv4Interface` or `IPv6Interface` object based on the provided IP address, which can be a string or an integer. IPv4 addresses are assumed if integers are less than `2**32`. A `ValueError` is raised for invalid addresses, although error messages may lack detailed information due to the dual format handling.
---

```


ipaddress.ip_interface(_address_)[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.ip_interface "Link to this definition")
    
Return an [`IPv4Interface`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Interface "ipaddress.IPv4Interface") or [`IPv6Interface`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Interface "ipaddress.IPv6Interface") object depending on the IP address passed as argument. _address_ is a string or integer representing the IP address. Either IPv4 or IPv6 addresses may be supplied; integers less than `2**32` will be considered to be IPv4 by default. A [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised if _address_ does not represent a valid IPv4 or IPv6 address.
One downside of these convenience functions is that the need to handle both IPv4 and IPv6 formats means that error messages provide minimal information on the precise error, as the functions don’t know whether the IPv4 or IPv6 format was intended. More detailed error reporting can be obtained by calling the appropriate version specific class constructors directly.
## IP Addresses[¶](https://docs.python.org/3/library/ipaddress.html#ip-addresses "Link to this heading")
### Address objects[¶](https://docs.python.org/3/library/ipaddress.html#address-objects "Link to this heading")
The [`IPv4Address`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address "ipaddress.IPv4Address") and [`IPv6Address`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Address "ipaddress.IPv6Address") objects share a lot of common attributes. Some attributes that are only meaningful for IPv6 addresses are also implemented by [`IPv4Address`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address "ipaddress.IPv4Address") objects, in order to make it easier to write code that handles both IP versions correctly. Address objects are [hashable](https://docs.python.org/3/glossary.html#term-hashable), so they can be used as keys in dictionaries. 

_class_ ipaddress.IPv4Address(_address_)[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address "Link to this definition")
    
Construct an IPv4 address. An [`AddressValueError`](https://docs.python.org/3/library/ipaddress.html#ipaddress.AddressValueError "ipaddress.AddressValueError") is raised if _address_ is not a valid IPv4 address.
The following constitutes a valid IPv4 address:
  1. A string in decimal-dot notation, consisting of four decimal integers in the inclusive range 0–255, separated by dots (e.g. `192.168.0.1`). Each integer represents an octet (byte) in the address. Leading zeroes are not tolerated to prevent confusion with octal notation.
  2. An integer that fits into 32 bits.
  3. An integer packed into a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") object of length 4 (most significant octet first).


>>>```
>>> ipaddress.IPv4Address('192.168.0.1')
IPv4Address('192.168.0.1')
>>> ipaddress.IPv4Address(3232235521)
IPv4Address('192.168.0.1')
>>> ipaddress.IPv4Address(b'\xC0\xA8\x00\x01')
IPv4Address('192.168.0.1')