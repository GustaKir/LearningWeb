Title: Building a Basic Tkinter Application
URL: https://docs.python.org/3/library/tkinter.html
Summary: This document chunk demonstrates how to create a simple graphical user interface (GUI) using Tkinter in Python. It includes the creation of a root window, a frame to hold widgets, a label displaying 'Hello World!', and a button to quit the application. The layout of these elements is managed using the grid method.
---

```
fromtkinterimport *
fromtkinterimport ttk
root = Tk()
frm = ttk.Frame(root, padding=10)
frm.grid()
ttk.Label(frm, text="Hello World!").grid(column=0, row=0)
ttk.Button(frm, text="Quit", command=root.destroy).grid(column=1, row=0)
root.mainloop()

```

After the imports, the next line creates an instance of the `Tk` class, which initializes Tk and creates its associated Tcl interpreter. It also creates a toplevel window, known as the root window, which serves as the main window of the application.
The following line creates a frame widget, which in this case will contain a label and a button we’ll create next. The frame is fit inside the root window.
The next line creates a label widget holding a static text string. The `grid()` method is used to specify the relative layout (position) of the label within its containing frame widget, similar to how tables in HTML work.
A button widget is then created, and placed to the right of the label. When pressed, it will call the `destroy()` method of the root window.
Finally, the `mainloop()` method puts everything on the display, and responds to user input until the program terminates.
### Important Tk Concepts[¶](https://docs.python.org/3/library/tkinter.html#important-tk-concepts "Link to this heading")
Even this simple program illustrates the following key Tk concepts: 

widgets
    
A Tkinter user interface is made up of individual _widgets_. Each widget is represented as a Python object, instantiated from classes like `ttk.Frame`, `ttk.Label`, and `ttk.Button`. 

widget hierarchy
    
Widgets are arranged in a _hierarchy_. The label and button were contained within a frame, which in turn was contained within the root window. When creating each _child_ widget, its _parent_ widget is passed as the first argument to the widget constructor. 

configuration options
    
Widgets have _configuration options_ , which modify their appearance and behavior, such as the text to display in a label or button. Different classes of widgets will have different sets of options. 

geometry management
    
Widgets aren’t automatically added to the user interface when they are created. A _geometry manager_ like `grid` controls where in the user interface they are placed. 

event loop
    
Tkinter reacts to user input, changes from your program, and even refreshes the display only when actively running an _event loop_. If your program isn’t running the event loop, your user interface won’t update.
### Understanding How Tkinter Wraps Tcl/Tk[¶](https://docs.python.org/3/library/tkinter.html#understanding-how-tkinter-wraps-tcl-tk "Link to this heading")
When your application uses Tkinter’s classes and methods, internally Tkinter is assembling strings representing Tcl/Tk commands, and executing those commands in the Tcl interpreter attached to your application’s `Tk` instance.
Whether it’s trying to navigate reference documentation, trying to find the right method or option, adapting some existing code, or debugging your Tkinter application, there are times that it will be useful to understand what those underlying Tcl/Tk commands look like.
To illustrate, here is the Tcl/Tk equivalent of the main part of the Tkinter script above.
```
ttk::frame .frm -padding 10
grid .frm
grid [ttk::label .frm.lbl -text "Hello World!"] -column 0 -row 0
grid [ttk::button .frm.btn -text "Quit" -command "destroy ."] -column 1 -row 0