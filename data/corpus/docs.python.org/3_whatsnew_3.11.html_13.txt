Title: Python 3.11 Updates: fcntl and fractions Modules
URL: https://docs.python.org/3/whatsnew/3.11.html
Summary: This section outlines updates in Python 3.11 related to the `fcntl` module on FreeBSD, which now supports `F_DUP2FD` and `F_DUP2FD_CLOEXEC` flags. Additionally, the `fractions` module introduces PEP 515-style string initialization for `Fraction` objects and adds an `__int__` method, enhancing compatibility with type checks.
---

### fcntl[¶](https://docs.python.org/3/whatsnew/3.11.html#fcntl "Link to this heading")
  * On FreeBSD, the `F_DUP2FD` and `F_DUP2FD_CLOEXEC` flags respectively are supported, the former equals to `dup2` usage while the latter set the `FD_CLOEXEC` flag in addition.


### fractions[¶](https://docs.python.org/3/whatsnew/3.11.html#fractions "Link to this heading")
  * Support [**PEP 515**](https://peps.python.org/pep-0515/)-style initialization of [`Fraction`](https://docs.python.org/3/library/fractions.html#fractions.Fraction "fractions.Fraction") from string. (Contributed by Sergey B Kirpichev in [bpo-44258](https://bugs.python.org/issue?@action=redirect&bpo=44258).)
  * [`Fraction`](https://docs.python.org/3/library/fractions.html#fractions.Fraction "fractions.Fraction") now implements an `__int__` method, so that an `isinstance(some_fraction, typing.SupportsInt)` check passes. (Contributed by Mark Dickinson in [bpo-44547](https://bugs.python.org/issue?@action=redirect&bpo=44547).)


### functools[¶](https://docs.python.org/3/whatsnew/3.11.html#functools "Link to this heading")
  * [`functools.singledispatch()`](https://docs.python.org/3/library/functools.html#functools.singledispatch "functools.singledispatch") now supports [`types.UnionType`](https://docs.python.org/3/library/types.html#types.UnionType "types.UnionType") and [`typing.Union`](https://docs.python.org/3/library/typing.html#typing.Union "typing.Union") as annotations to the dispatch argument.:
>>>```
>>> fromfunctoolsimport singledispatch
>>> @singledispatch
... deffun(arg, verbose=False):
...   if verbose:
...     print("Let me just say,", end=" ")
...   print(arg)
...
>>> @fun.register
... def_(arg: int | float, verbose=False):
...   if verbose:
...     print("Strength in numbers, eh?", end=" ")
...   print(arg)
...
>>> fromtypingimport Union
>>> @fun.register
... def_(arg: Union[list, set], verbose=False):
...   if verbose:
...     print("Enumerate this:")
...   for i, elem in enumerate(arg):
...     print(i, elem)
...