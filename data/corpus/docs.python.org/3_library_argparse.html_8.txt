Title: The add_argument() Method
URL: https://docs.python.org/3/library/argparse.html
Summary: The add_argument() method defines how a single command-line argument should be parsed in the argparse module. It allows defining the argument's name or flags, type of action, number of arguments expected, default values, and additional properties like help messages and required status.
---

```

Added in version 3.9.
## The add_argument() method[¶](https://docs.python.org/3/library/argparse.html#the-add-argument-method "Link to this heading") 

ArgumentParser.add_argument(_name or flags..._, _*_[, _action_][, _nargs_][, _const_][, _default_][, _type_][, _choices_][, _required_][, _help_][, _metavar_][, _dest_][, _deprecated_])[¶](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument "Link to this definition")
    
Define how a single command-line argument should be parsed. Each parameter has its own more detailed description below, but in short they are:
  * [name or flags](https://docs.python.org/3/library/argparse.html#name-or-flags) - Either a name or a list of option strings, e.g. `'foo'` or `'-f', '--foo'`.
  * [action](https://docs.python.org/3/library/argparse.html#action) - The basic type of action to be taken when this argument is encountered at the command line.
  * [nargs](https://docs.python.org/3/library/argparse.html#nargs) - The number of command-line arguments that should be consumed.
  * [const](https://docs.python.org/3/library/argparse.html#const) - A constant value required by some [action](https://docs.python.org/3/library/argparse.html#action) and [nargs](https://docs.python.org/3/library/argparse.html#nargs) selections.
  * [default](https://docs.python.org/3/library/argparse.html#default) - The value produced if the argument is absent from the command line and if it is absent from the namespace object.
  * [type](https://docs.python.org/3/library/argparse.html#type) - The type to which the command-line argument should be converted.
  * [choices](https://docs.python.org/3/library/argparse.html#choices) - A sequence of the allowable values for the argument.
  * [required](https://docs.python.org/3/library/argparse.html#required) - Whether or not the command-line option may be omitted (optionals only).
  * [help](https://docs.python.org/3/library/argparse.html#help) - A brief description of what the argument does.
  * [metavar](https://docs.python.org/3/library/argparse.html#metavar) - A name for the argument in usage messages.
  * [dest](https://docs.python.org/3/library/argparse.html#dest) - The name of the attribute to be added to the object returned by [`parse_args()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.parse_args "argparse.ArgumentParser.parse_args").
  * [deprecated](https://docs.python.org/3/library/argparse.html#deprecated) - Whether or not use of the argument is deprecated.


The following sections describe how each of these are used.
### name or flags[¶](https://docs.python.org/3/library/argparse.html#name-or-flags "Link to this heading")
The [`add_argument()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument "argparse.ArgumentParser.add_argument") method must know whether an optional argument, like `-f` or `--foo`, or a positional argument, like a list of filenames, is expected. The first arguments passed to [`add_argument()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument "argparse.ArgumentParser.add_argument") must therefore be either a series of flags, or a simple argument name.
For example, an optional argument could be created like:
>>>```
>>> parser.add_argument('-f', '--foo')

```

while a positional argument could be created like:
>>>```
>>> parser.add_argument('bar')

```

When [`parse_args()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.parse_args "argparse.ArgumentParser.parse_args") is called, optional arguments will be identified by the `-` prefix, and the remaining arguments will be assumed to be positional:
>>>```
>>> parser = argparse.ArgumentParser(prog='PROG')
>>> parser.add_argument('-f', '--foo')
>>> parser.add_argument('bar')
>>> parser.parse_args(['BAR'])
Namespace(bar='BAR', foo=None)
>>> parser.parse_args(['BAR', '--foo', 'FOO'])
Namespace(bar='BAR', foo='FOO')
>>> parser.parse_args(['--foo', 'FOO'])
usage: PROG [-h] [-f FOO] bar
PROG: error: the following arguments are required: bar