Title: New Features in dis Module
URL: https://docs.python.org/3/whatsnew/3.12.html
Summary: The `dis` module now exposes pseudo instruction opcodes, which the compiler uses but do not appear in bytecode. The `dis.hasarg` collection is introduced for these pseudo instructions, while `dis.hasexc` is added to indicate instructions that set exception handlers. These updates are contributed by Irit Katriel.
---

### dis[¶](https://docs.python.org/3/whatsnew/3.12.html#dis "Link to this heading")
  * Pseudo instruction opcodes (which are used by the compiler but do not appear in executable bytecode) are now exposed in the [`dis`](https://docs.python.org/3/library/dis.html#module-dis "dis: Disassembler for Python bytecode.") module. [`HAVE_ARGUMENT`](https://docs.python.org/3/library/dis.html#opcode-HAVE_ARGUMENT) is still relevant to real opcodes, but it is not useful for pseudo instructions. Use the new [`dis.hasarg`](https://docs.python.org/3/library/dis.html#dis.hasarg "dis.hasarg") collection instead. (Contributed by Irit Katriel in [gh-94216](https://github.com/python/cpython/issues/94216).)
  * Add the [`dis.hasexc`](https://docs.python.org/3/library/dis.html#dis.hasexc "dis.hasexc") collection to signify instructions that set an exception handler. (Contributed by Irit Katriel in [gh-94216](https://github.com/python/cpython/issues/94216).)


### fractions[¶](https://docs.python.org/3/whatsnew/3.12.html#fractions "Link to this heading")
  * Objects of type [`fractions.Fraction`](https://docs.python.org/3/library/fractions.html#fractions.Fraction "fractions.Fraction") now support float-style formatting. (Contributed by Mark Dickinson in [gh-100161](https://github.com/python/cpython/issues/100161).)


### importlib.resources[¶](https://docs.python.org/3/whatsnew/3.12.html#importlib-resources "Link to this heading")
  * [`importlib.resources.as_file()`](https://docs.python.org/3/library/importlib.resources.html#importlib.resources.as_file "importlib.resources.as_file") now supports resource directories. (Contributed by Jason R. Coombs in [gh-97930](https://github.com/python/cpython/issues/97930).)
  * Rename first parameter of [`importlib.resources.files()`](https://docs.python.org/3/library/importlib.resources.html#importlib.resources.files "importlib.resources.files") to _anchor_. (Contributed by Jason R. Coombs in [gh-100598](https://github.com/python/cpython/issues/100598).)


### inspect[¶](https://docs.python.org/3/whatsnew/3.12.html#inspect "Link to this heading")
  * Add [`inspect.markcoroutinefunction()`](https://docs.python.org/3/library/inspect.html#inspect.markcoroutinefunction "inspect.markcoroutinefunction") to mark sync functions that return a [coroutine](https://docs.python.org/3/glossary.html#term-coroutine) for use with [`inspect.iscoroutinefunction()`](https://docs.python.org/3/library/inspect.html#inspect.iscoroutinefunction "inspect.iscoroutinefunction"). (Contributed by Carlton Gibson in [gh-99247](https://github.com/python/cpython/issues/99247).)
  * Add [`inspect.getasyncgenstate()`](https://docs.python.org/3/library/inspect.html#inspect.getasyncgenstate "inspect.getasyncgenstate") and [`inspect.getasyncgenlocals()`](https://docs.python.org/3/library/inspect.html#inspect.getasyncgenlocals "inspect.getasyncgenlocals") for determining the current state of asynchronous generators. (Contributed by Thomas Krennwallner in [gh-79940](https://github.com/python/cpython/issues/79940).)
  * The performance of [`inspect.getattr_static()`](https://docs.python.org/3/library/inspect.html#inspect.getattr_static "inspect.getattr_static") has been considerably improved. Most calls to the function should be at least 2x faster than they were in Python 3.11. (Contributed by Alex Waygood in [gh-103193](https://github.com/python/cpython/issues/103193).)


### itertools[¶](https://docs.python.org/3/whatsnew/3.12.html#itertools "Link to this heading")
  * Add [`itertools.batched()`](https://docs.python.org/3/library/itertools.html#itertools.batched "itertools.batched") for collecting into even-sized tuples where the last batch may be shorter than the rest. (Contributed by Raymond Hettinger in [gh-98363](https://github.com/python/cpython/issues/98363).)


### math[¶](https://docs.python.org/3/whatsnew/3.12.html#math "Link to this heading")
  * Add [`math.sumprod()`](https://docs.python.org/3/library/math.html#math.sumprod "math.sumprod") for computing a sum of products. (Contributed by Raymond Hettinger in [gh-100485](https://github.com/python/cpython/issues/100485).)
  * Extend [`math.nextafter()`](https://docs.python.org/3/library/math.html#math.nextafter "math.nextafter") to include a _steps_ argument for moving up or down multiple steps at a time. (Contributed by Matthias Goergens, Mark Dickinson, and Raymond Hettinger in [gh-94906](https://github.com/python/cpython/issues/94906).)