Title: Class Definition and Method Resolution in Derived Classes
URL: https://docs.python.org/3/tutorial/classes.html
Summary: The execution of derived class definitions mirrors that of base classes, with the base class being stored for attribute resolution. Instantiation of derived classes is straightforward, and method resolution follows a hierarchical search through base classes. Derived classes can override base class methods, and method calls within a base class may invoke derived class methods.
---

```

Execution of a derived class definition proceeds the same as for a base class. When the class object is constructed, the base class is remembered. This is used for resolving attribute references: if a requested attribute is not found in the class, the search proceeds to look in the base class. This rule is applied recursively if the base class itself is derived from some other class.
There’s nothing special about instantiation of derived classes: `DerivedClassName()` creates a new instance of the class. Method references are resolved as follows: the corresponding class attribute is searched, descending down the chain of base classes if necessary, and the method reference is valid if this yields a function object.
Derived classes may override methods of their base classes. Because methods have no special privileges when calling other methods of the same object, a method of a base class that calls another method defined in the same base class may end up calling a method of a derived class that overrides it. (For C++ programmers: all methods in Python are effectively `virtual`.)
An overriding method in a derived class may in fact want to extend rather than simply replace the base class method of the same name. There is a simple way to call the base class method directly: just call `BaseClassName.methodname(self, arguments)`. This is occasionally useful to clients as well. (Note that this only works if the base class is accessible as `BaseClassName` in the global scope.)
Python has two built-in functions that work with inheritance:
  * Use [`isinstance()`](https://docs.python.org/3/library/functions.html#isinstance "isinstance") to check an instance’s type: `isinstance(obj, int)` will be `True` only if `obj.__class__` is [`int`](https://docs.python.org/3/library/functions.html#int "int") or some class derived from [`int`](https://docs.python.org/3/library/functions.html#int "int").
  * Use [`issubclass()`](https://docs.python.org/3/library/functions.html#issubclass "issubclass") to check class inheritance: `issubclass(bool, int)` is `True` since [`bool`](https://docs.python.org/3/library/functions.html#bool "bool") is a subclass of [`int`](https://docs.python.org/3/library/functions.html#int "int"). However, `issubclass(float, int)` is `False` since [`float`](https://docs.python.org/3/library/functions.html#float "float") is not a subclass of [`int`](https://docs.python.org/3/library/functions.html#int "int").


### 9.5.1. Multiple Inheritance[¶](https://docs.python.org/3/tutorial/classes.html#multiple-inheritance "Link to this heading")
Python supports a form of multiple inheritance as well. A class definition with multiple base classes looks like this:
```
classDerivedClassName(Base1, Base2, Base3):
  <statement-1>
  .
  .
  .
  <statement-N>