Title: Dictionary Operations in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This section outlines the operations supported by dictionaries in Python, including returning keys, measuring length, and accessing items by key. It also explains how the custom `__missing__()` method can be utilized in subclasses of dict when a key is not found.
---

```

Providing keyword arguments as in the first example only works for keys that are valid Python identifiers. Otherwise, any valid keys can be used.
These are the operations that dictionaries support (and therefore, custom mapping types should support too): 

list(d)
    
Return a list of all the keys used in the dictionary _d_. 

len(d)
    
Return the number of items in the dictionary _d_. 

d[key]
    
Return the item of _d_ with key _key_. Raises a [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError") if _key_ is not in the map.
If a subclass of dict defines a method `__missing__()` and _key_ is not present, the `d[key]` operation calls that method with the key _key_ as argument. The `d[key]` operation then returns or raises whatever is returned or raised by the `__missing__(key)` call. No other operations or methods invoke `__missing__()`. If `__missing__()` is not defined, [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError") is raised. `__missing__()` must be a method; it cannot be an instance variable:
>>>```
>>> classCounter(dict):
...   def__missing__(self, key):
...     return 0
...
>>> c = Counter()
>>> c['red']
0
>>> c['red'] += 1
>>> c['red']
1

```

The example above shows part of the implementation of [`collections.Counter`](https://docs.python.org/3/library/collections.html#collections.Counter "collections.Counter"). A different `__missing__` method is used by [`collections.defaultdict`](https://docs.python.org/3/library/collections.html#collections.defaultdict "collections.defaultdict"). 

d[key] = value
    
Set `d[key]` to _value_. 

del d[key]
    
Remove `d[key]` from _d_. Raises a [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError") if _key_ is not in the map. 

key in d
    
Return `True` if _d_ has a key _key_ , else `False`. 

key not in d
    
Equivalent to `not key in d`. 

iter(d)
    
Return an iterator over the keys of the dictionary. This is a shortcut for `iter(d.keys())`. 

clear()[¶](https://docs.python.org/3/library/stdtypes.html#dict.clear "Link to this definition")
    
Remove all items from the dictionary. 

copy()[¶](https://docs.python.org/3/library/stdtypes.html#dict.copy "Link to this definition")
    
Return a shallow copy of the dictionary. 

_classmethod_ fromkeys(_iterable_ , _value =None_, _/_)[¶](https://docs.python.org/3/library/stdtypes.html#dict.fromkeys "Link to this definition")
    
Create a new dictionary with keys from _iterable_ and values set to _value_.
[`fromkeys()`](https://docs.python.org/3/library/stdtypes.html#dict.fromkeys "dict.fromkeys") is a class method that returns a new dictionary. _value_ defaults to `None`. All of the values refer to just a single instance, so it generally doesn’t make sense for _value_ to be a mutable object such as an empty list. To get distinct values, use a [dict comprehension](https://docs.python.org/3/reference/expressions.html#dict) instead. 

get(_key_ , _default =None_, _/_)[¶](https://docs.python.org/3/library/stdtypes.html#dict.get "Link to this definition")
    
Return the value for _key_ if _key_ is in the dictionary, else _default_. If _default_ is not given, it defaults to `None`, so that this method never raises a [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError"). 

items()[¶](https://docs.python.org/3/library/stdtypes.html#dict.items "Link to this definition")
    
Return a new view of the dictionary’s items (`(key, value)` pairs). See the [documentation of view objects](https://docs.python.org/3/library/stdtypes.html#dict-views). 

keys()[¶](https://docs.python.org/3/library/stdtypes.html#dict.keys "Link to this definition")
    
Return a new view of the dictionary’s keys. See the [documentation of view objects](https://docs.python.org/3/library/stdtypes.html#dict-views). 

pop(_key_[, _default_])[¶](https://docs.python.org/3/library/stdtypes.html#dict.pop "Link to this definition")
    
If _key_ is in the dictionary, remove it and return its value, else return _default_. If _default_ is not given and _key_ is not in the dictionary, a [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError") is raised.