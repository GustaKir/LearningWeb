Title: hashlib.scrypt Function Documentation
URL: https://docs.python.org/3/library/hashlib.html
Summary: The hashlib.scrypt function, introduced in Python 3.4 and updated in 3.12, offers a password-based key derivation function adhering to RFC 7914. It requires byte-like objects for the password and salt, with recommended length constraints, and parameters for CPU/memory cost, block size, and parallelization. The function is only available when Python is compiled with OpenSSL.
---

```

Function only available when Python is compiled with OpenSSL.
Added in version 3.4.
Changed in version 3.12: Function now only available when Python is built with OpenSSL. The slow pure Python implementation has been removed. 

hashlib.scrypt(_password_ , _*_ , _salt_ , _n_ , _r_ , _p_ , _maxmem =0_, _dklen =64_)[¶](https://docs.python.org/3/library/hashlib.html#hashlib.scrypt "Link to this definition")
    
The function provides scrypt password-based key derivation function as defined in [**RFC 7914**](https://datatracker.ietf.org/doc/html/rfc7914.html).
_password_ and _salt_ must be [bytes-like objects](https://docs.python.org/3/glossary.html#term-bytes-like-object). Applications and libraries should limit _password_ to a sensible length (e.g. 1024). _salt_ should be about 16 or more bytes from a proper source, e.g. [`os.urandom()`](https://docs.python.org/3/library/os.html#os.urandom "os.urandom").
_n_ is the CPU/Memory cost factor, _r_ the block size, _p_ parallelization factor and _maxmem_ limits memory (OpenSSL 1.1.0 defaults to 32 MiB). _dklen_ is the length of the derived key in bytes.
Added in version 3.6.
## BLAKE2[¶](https://docs.python.org/3/library/hashlib.html#blake2 "Link to this heading")
[BLAKE2](https://www.blake2.net) is a cryptographic hash function defined in [**RFC 7693**](https://datatracker.ietf.org/doc/html/rfc7693.html) that comes in two flavors:
  * **BLAKE2b** , optimized for 64-bit platforms and produces digests of any size between 1 and 64 bytes,
  * **BLAKE2s** , optimized for 8- to 32-bit platforms and produces digests of any size between 1 and 32 bytes.


BLAKE2 supports **keyed mode** (a faster and simpler replacement for [HMAC](https://en.wikipedia.org/wiki/Hash-based_message_authentication_code)), **salted hashing** , **personalization** , and **tree hashing**.
Hash objects from this module follow the API of standard library’s [`hashlib`](https://docs.python.org/3/library/hashlib.html#module-hashlib "hashlib: Secure hash and message digest algorithms.") objects.
### Creating hash objects[¶](https://docs.python.org/3/library/hashlib.html#creating-hash-objects "Link to this heading")
New hash objects are created by calling constructor functions: 

hashlib.blake2b(_data =b''_, _*_ , _digest_size =64_, _key =b''_, _salt =b''_, _person =b''_, _fanout =1_, _depth =1_, _leaf_size =0_, _node_offset =0_, _node_depth =0_, _inner_size =0_, _last_node =False_, _usedforsecurity =True_)[¶](https://docs.python.org/3/library/hashlib.html#hashlib.blake2b "Link to this definition")


hashlib.blake2s(_data =b''_, _*_ , _digest_size =32_, _key =b''_, _salt =b''_, _person =b''_, _fanout =1_, _depth =1_, _leaf_size =0_, _node_offset =0_, _node_depth =0_, _inner_size =0_, _last_node =False_, _usedforsecurity =True_)[¶](https://docs.python.org/3/library/hashlib.html#hashlib.blake2s "Link to this definition")

These functions return the corresponding hash objects for calculating BLAKE2b or BLAKE2s. They optionally take these general parameters:
  * _data_ : initial chunk of data to hash, which must be [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object). It can be passed only as positional argument.
  * _digest_size_ : size of output digest in bytes.
  * _key_ : key for keyed hashing (up to 64 bytes for BLAKE2b, up to 32 bytes for BLAKE2s).
  * _salt_ : salt for randomized hashing (up to 16 bytes for BLAKE2b, up to 8 bytes for BLAKE2s).
  * _person_ : personalization string (up to 16 bytes for BLAKE2b, up to 8 bytes for BLAKE2s).