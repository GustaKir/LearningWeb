Title: Python C API: List Functions
URL: https://docs.python.org/3/c-api/list.html
Summary: This section covers functions related to Python lists in the C API, such as `PyList_GET_SIZE`, which retrieves the size of a list without error checking, and `PyList_GetItemRef`, which retrieves a reference to an item at a specific index in the list, introduced in version 3.13.
---

[Py_ssize_t](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")PyList_GET_SIZE([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*list)[¶](https://docs.python.org/3/c-api/list.html#c.PyList_GET_SIZE "Link to this definition")
    
Similar to [`PyList_Size()`](https://docs.python.org/3/c-api/list.html#c.PyList_Size "PyList_Size"), but without error checking. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyList_GetItemRef([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*list, [Py_ssize_t](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")index)[¶](https://docs.python.org/3/c-api/list.html#c.PyList_GetItemRef "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.13._
Return the object at position _index_ in the list pointed to by _list_. The position must be non-negative; indexing from the end of the list is not supported. If _index_ is out of bounds (`<0 or >=len(list)`), return `NULL` and set an [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError "IndexError") exception.
Added in version 3.13. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyList_GetItem([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*list, [Py_ssize_t](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")index)[¶](https://docs.python.org/3/c-api/list.html#c.PyList_GetItem "Link to this definition")
    _Return value: Borrowed reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Like [`PyList_GetItemRef()`](https://docs.python.org/3/c-api/list.html#c.PyList_GetItemRef "PyList_GetItemRef"), but returns a [borrowed reference](https://docs.python.org/3/glossary.html#term-borrowed-reference) instead of a [strong reference](https://docs.python.org/3/glossary.html#term-strong-reference). 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyList_GET_ITEM([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*list, [Py_ssize_t](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")i)[¶](https://docs.python.org/3/c-api/list.html#c.PyList_GET_ITEM "Link to this definition")
    _Return value: Borrowed reference._
Similar to [`PyList_GetItem()`](https://docs.python.org/3/c-api/list.html#c.PyList_GetItem "PyList_GetItem"), but without error checking. 

intPyList_SetItem([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*list, [Py_ssize_t](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")index, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*item)[¶](https://docs.python.org/3/c-api/list.html#c.PyList_SetItem "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Set the item at index _index_ in list to _item_. Return `0` on success. If _index_ is out of bounds, return `-1` and set an [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError "IndexError") exception.
Note
This function “steals” a reference to _item_ and discards a reference to an item already in the list at the affected position. 

voidPyList_SET_ITEM([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*list, [Py_ssize_t](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")i, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o)[¶](https://docs.python.org/3/c-api/list.html#c.PyList_SET_ITEM "Link to this definition")
    
Macro form of [`PyList_SetItem()`](https://docs.python.org/3/c-api/list.html#c.PyList_SetItem "PyList_SetItem") without error checking. This is normally only used to fill in new lists where there is no previous content.
Bounds checking is performed as an assertion if Python is built in [debug mode](https://docs.python.org/3/using/configure.html#debug-build) or [`with assertions`](https://docs.python.org/3/using/configure.html#cmdoption-with-assertions).
Note
This macro “steals” a reference to _item_ , and, unlike [`PyList_SetItem()`](https://docs.python.org/3/c-api/list.html#c.PyList_SetItem "PyList_SetItem"), does _not_ discard a reference to any item that is being replaced; any reference in _list_ at position _i_ will be leaked.