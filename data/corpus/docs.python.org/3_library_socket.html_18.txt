Title: socket.recv_fds Method
URL: https://docs.python.org/3/library/socket.html
Summary: The `socket.recv_fds` method allows receiving up to `_maxfds_` file descriptors from an `AF_UNIX` socket. It returns a tuple containing message, list of file descriptors, flags, and address. This functionality is available on Unix and Windows platforms, requiring support for `sendmsg()` and `SCM_RIGHTS` mechanism, and was added in version 3.9.
---

socket.recv_fds(_sock_ , _bufsize_ , _maxfds_[, _flags_])[¶](https://docs.python.org/3/library/socket.html#socket.recv_fds "Link to this definition")
    
Receive up to _maxfds_ file descriptors from an [`AF_UNIX`](https://docs.python.org/3/library/socket.html#socket.AF_UNIX "socket.AF_UNIX") socket _sock_. Return `(msg, list(fds), flags, addr)`. Consult [`recvmsg()`](https://docs.python.org/3/library/socket.html#socket.socket.recvmsg "socket.socket.recvmsg") for the documentation of these parameters.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, Windows, not WASI.
Unix platforms supporting [`sendmsg()`](https://docs.python.org/3/library/socket.html#socket.socket.sendmsg "socket.socket.sendmsg") and `SCM_RIGHTS` mechanism.
Added in version 3.9.
Note
Any truncated integers at the end of the list of file descriptors.
## Socket Objects[¶](https://docs.python.org/3/library/socket.html#socket-objects "Link to this heading")
Socket objects have the following methods. Except for [`makefile()`](https://docs.python.org/3/library/socket.html#socket.socket.makefile "socket.socket.makefile"), these correspond to Unix system calls applicable to sockets.
Changed in version 3.2: Support for the [context manager](https://docs.python.org/3/glossary.html#term-context-manager) protocol was added. Exiting the context manager is equivalent to calling [`close()`](https://docs.python.org/3/library/socket.html#socket.close "socket.close"). 

socket.accept()[¶](https://docs.python.org/3/library/socket.html#socket.socket.accept "Link to this definition")
    
Accept a connection. The socket must be bound to an address and listening for connections. The return value is a pair `(conn, address)` where _conn_ is a _new_ socket object usable to send and receive data on the connection, and _address_ is the address bound to the socket on the other end of the connection.
The newly created socket is [non-inheritable](https://docs.python.org/3/library/os.html#fd-inheritance).
Changed in version 3.4: The socket is now non-inheritable.
Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an exception, the method now retries the system call instead of raising an [`InterruptedError`](https://docs.python.org/3/library/exceptions.html#InterruptedError "InterruptedError") exception (see [**PEP 475**](https://peps.python.org/pep-0475/) for the rationale). 

socket.bind(_address_)[¶](https://docs.python.org/3/library/socket.html#socket.socket.bind "Link to this definition")
    
Bind the socket to _address_. The socket must not already be bound. (The format of _address_ depends on the address family — see above.)
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `socket.bind` with arguments `self`, `address`.
[Availability](https://docs.python.org/3/library/intro.html#availability): not WASI. 

socket.close()[¶](https://docs.python.org/3/library/socket.html#socket.socket.close "Link to this definition")
    
Mark the socket closed. The underlying system resource (e.g. a file descriptor) is also closed when all file objects from [`makefile()`](https://docs.python.org/3/library/socket.html#socket.socket.makefile "socket.socket.makefile") are closed. Once that happens, all future operations on the socket object will fail. The remote end will receive no more data (after queued data is flushed).
Sockets are automatically closed when they are garbage-collected, but it is recommended to [`close()`](https://docs.python.org/3/library/socket.html#socket.close "socket.close") them explicitly, or to use a [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement around them.
Changed in version 3.6: [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") is now raised if an error occurs when the underlying `close()` call is made.
Note
[`close()`](https://docs.python.org/3/library/socket.html#socket.close "socket.close") releases the resource associated with a connection but does not necessarily close the connection immediately. If you want to close the connection in a timely fashion, call [`shutdown()`](https://docs.python.org/3/library/socket.html#socket.socket.shutdown "socket.socket.shutdown") before [`close()`](https://docs.python.org/3/library/socket.html#socket.close "socket.close").