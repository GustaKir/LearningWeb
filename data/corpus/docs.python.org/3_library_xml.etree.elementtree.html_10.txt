Title: ElementInclude.default_loader Function
URL: https://docs.python.org/3/library/xml.etree.elementtree.html
Summary: The default_loader function in xml.etree.ElementInclude reads an included resource from disk based on a provided URL. It supports parse modes 'xml' or 'text' and uses utf-8 encoding by default. The function returns either an Element instance or a string, depending on the parse mode, and may return None or raise exceptions if loading fails.
---

```

## Reference[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#id4 "Link to this heading")
### Functions[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#elementinclude-functions "Link to this heading") 

xml.etree.ElementInclude.default_loader(_href_ , _parse_ , _encoding =None_)[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementInclude.default_loader "Link to this definition")
    
Default loader. This default loader reads an included resource from disk. _href_ is a URL. _parse_ is for parse mode either “xml” or “text”. _encoding_ is an optional text encoding. If not given, encoding is `utf-8`. Returns the expanded resource. If the parse mode is `"xml"`, this is an [`Element`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element "xml.etree.ElementTree.Element") instance. If the parse mode is `"text"`, this is a string. If the loader fails, it can return `None` or raise an exception. 

xml.etree.ElementInclude.include(_elem_ , _loader =None_, _base_url =None_, _max_depth =6_)[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementInclude.include "Link to this definition")
    
This function expands XInclude directives in-place in tree pointed by _elem_. _elem_ is either the root [`Element`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element "xml.etree.ElementTree.Element") or an [`ElementTree`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree "xml.etree.ElementTree.ElementTree") instance to find such element. _loader_ is an optional resource loader. If omitted, it defaults to [`default_loader()`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementInclude.default_loader "xml.etree.ElementInclude.default_loader"). If given, it should be a callable that implements the same interface as [`default_loader()`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementInclude.default_loader "xml.etree.ElementInclude.default_loader"). _base_url_ is base URL of the original file, to resolve relative include file references. _max_depth_ is the maximum number of recursive inclusions. Limited to reduce the risk of malicious content explosion. Pass `None` to disable the limitation.
Changed in version 3.9: Added the _base_url_ and _max_depth_ parameters.
### Element Objects[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#element-objects "Link to this heading") 

_class_ xml.etree.ElementTree.Element(_tag_ , _attrib ={}_, _** extra_)[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element "Link to this definition")
    
Element class. This class defines the Element interface, and provides a reference implementation of this interface.
The element name, attribute names, and attribute values can be either bytestrings or Unicode strings. _tag_ is the element name. _attrib_ is an optional dictionary, containing element attributes. _extra_ contains additional attributes, given as keyword arguments. 

tag[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.tag "Link to this definition")
    
A string identifying what kind of data this element represents (the element type, in other words). 

text[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.text "Link to this definition")


tail[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.tail "Link to this definition")
    
These attributes can be used to hold additional data associated with the element. Their values are usually strings but may be any application-specific object. If the element is created from an XML file, the _text_ attribute holds either the text between the element’s start tag and its first child or end tag, or `None`, and the _tail_ attribute holds either the text between the element’s end tag and the next tag, or `None`. For the XML data
```
<a><b>1<c>2<d/>3</c></b>4</a>