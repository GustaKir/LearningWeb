Title: SQLite3 Connection Parameters
URL: https://docs.python.org/3/library/sqlite3.html
Summary: This section outlines the parameters for establishing a connection to an SQLite database, including the database path, timeout duration for locked tables, and type detection settings.
---

Parameters:
    
  * **database** ([path-like object](https://docs.python.org/3/glossary.html#term-path-like-object)) – The path to the database file to be opened. You can pass `":memory:"` to create an [SQLite database existing only in memory](https://sqlite.org/inmemorydb.html), and open a connection to it.
  * **timeout** ([_float_](https://docs.python.org/3/library/functions.html#float "float")) – How many seconds the connection should wait before raising an [`OperationalError`](https://docs.python.org/3/library/sqlite3.html#sqlite3.OperationalError "sqlite3.OperationalError") when a table is locked. If another connection opens a transaction to modify a table, that table will be locked until the transaction is committed. Default five seconds.
  * **detect_types** ([_int_](https://docs.python.org/3/library/functions.html#int "int")) – Control whether and how data types not [natively supported by SQLite](https://docs.python.org/3/library/sqlite3.html#sqlite3-types) are looked up to be converted to Python types, using the converters registered with [`register_converter()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.register_converter "sqlite3.register_converter"). Set it to any combination (using `|`, bitwise or) of [`PARSE_DECLTYPES`](https://docs.python.org/3/library/sqlite3.html#sqlite3.PARSE_DECLTYPES "sqlite3.PARSE_DECLTYPES") and [`PARSE_COLNAMES`](https://docs.python.org/3/library/sqlite3.html#sqlite3.PARSE_COLNAMES "sqlite3.PARSE_COLNAMES") to enable this. Column names takes precedence over declared types if both flags are set. By default (`0`), type detection is disabled.
  * **isolation_level** ([_str_](https://docs.python.org/3/library/stdtypes.html#str "str") _|__None_) – Control legacy transaction handling behaviour. See [`Connection.isolation_level`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.isolation_level "sqlite3.Connection.isolation_level") and [Transaction control via the isolation_level attribute](https://docs.python.org/3/library/sqlite3.html#sqlite3-transaction-control-isolation-level) for more information. Can be `"DEFERRED"` (default), `"EXCLUSIVE"` or `"IMMEDIATE"`; or `None` to disable opening transactions implicitly. Has no effect unless [`Connection.autocommit`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit "sqlite3.Connection.autocommit") is set to [`LEGACY_TRANSACTION_CONTROL`](https://docs.python.org/3/library/sqlite3.html#sqlite3.LEGACY_TRANSACTION_CONTROL "sqlite3.LEGACY_TRANSACTION_CONTROL") (the default).
  * **check_same_thread** ([_bool_](https://docs.python.org/3/library/functions.html#bool "bool")) – If `True` (default), [`ProgrammingError`](https://docs.python.org/3/library/sqlite3.html#sqlite3.ProgrammingError "sqlite3.ProgrammingError") will be raised if the database connection is used by a thread other than the one that created it. If `False`, the connection may be accessed in multiple threads; write operations may need to be serialized by the user to avoid data corruption. See [`threadsafety`](https://docs.python.org/3/library/sqlite3.html#sqlite3.threadsafety "sqlite3.threadsafety") for more information.
  * **factory** ([_Connection_](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection "sqlite3.Connection")) – A custom subclass of [`Connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection "sqlite3.Connection") to create the connection with, if not the default [`Connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection "sqlite3.Connection") class.
  * **cached_statements** ([_int_](https://docs.python.org/3/library/functions.html#int "int")) – The number of statements that `sqlite3` should internally cache for this connection, to avoid parsing overhead. By default, 128 statements.
  * **uri** ([_bool_](https://docs.python.org/3/library/functions.html#bool "bool")) – If set to `True`, _database_ is interpreted as a URI with a file path and an optional query string. The scheme part _must_ be `"file:"`, and the path can be relative or absolute. The query string allows passing parameters to SQLite, enabling various [How to work with SQLite URIs](https://docs.python.org/3/library/sqlite3.html#sqlite3-uri-tricks).
  * **autocommit** ([_bool_](https://docs.python.org/3/library/functions.html#bool "bool")) – Control [**PEP 249**](https://peps.python.org/pep-0249/) transaction handling behaviour. See [`Connection.autocommit`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit "sqlite3.Connection.autocommit") and [Transaction control via the autocommit attribute](https://docs.python.org/3/library/sqlite3.html#sqlite3-transaction-control-autocommit) for more information. _autocommit_ currently defaults to [`LEGACY_TRANSACTION_CONTROL`](https://docs.python.org/3/library/sqlite3.html#sqlite3.LEGACY_TRANSACTION_CONTROL "sqlite3.LEGACY_TRANSACTION_CONTROL"). The default will change to `False` in a future Python release.