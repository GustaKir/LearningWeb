Title: Executing Code Objects with eval() function
URL: https://docs.python.org/3/library/functions.html
Summary: The `eval()` function can execute arbitrary code objects created by `compile()`. If the code object is compiled with 'exec' as the mode, `eval()` will return `None`. The `exec()` function supports dynamic execution, and the `globals()` and `locals()` functions can return the current global and local dictionaries for use in `eval()` or `exec()`.
---

```

This function can also be used to execute arbitrary code objects (such as those created by [`compile()`](https://docs.python.org/3/library/functions.html#compile "compile")). In this case, pass a code object instead of a string. If the code object has been compiled with `'exec'` as the _mode_ argument, [`eval()`](https://docs.python.org/3/library/functions.html#eval "eval")'s return value will be `None`.
Hints: dynamic execution of statements is supported by the [`exec()`](https://docs.python.org/3/library/functions.html#exec "exec") function. The [`globals()`](https://docs.python.org/3/library/functions.html#globals "globals") and [`locals()`](https://docs.python.org/3/library/functions.html#locals "locals") functions return the current global and local dictionary, respectively, which may be useful to pass around for use by [`eval()`](https://docs.python.org/3/library/functions.html#eval "eval") or [`exec()`](https://docs.python.org/3/library/functions.html#exec "exec").
If the given source is a string, then leading and trailing spaces and tabs are stripped.
See [`ast.literal_eval()`](https://docs.python.org/3/library/ast.html#ast.literal_eval "ast.literal_eval") for a function that can safely evaluate strings with expressions containing only literals.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `exec` with the code object as the argument. Code compilation events may also be raised.
Changed in version 3.13: The _globals_ and _locals_ arguments can now be passed as keywords.
Changed in version 3.13: The semantics of the default _locals_ namespace have been adjusted as described for the [`locals()`](https://docs.python.org/3/library/functions.html#locals "locals") builtin.