Title: Regular Expression Match Object Methods
URL: https://docs.python.org/3/library/re.html
Summary: This section describes methods of the match object in Python's `re` library. The `Match.groupdict(_default=None)` method returns a dictionary of named subgroups from a regex match, using an optional default value for unmatched groups. Additionally, the `Match.start([group])` and `Match.end([group])` methods return the start and end indices of the matched substring for a specified group, with default behavior covering the entire match.
---

```


Match.groupdict(_default =None_)[¶](https://docs.python.org/3/library/re.html#re.Match.groupdict "Link to this definition")
    
Return a dictionary containing all the _named_ subgroups of the match, keyed by the subgroup name. The _default_ argument is used for groups that did not participate in the match; it defaults to `None`. For example:
>>>```
>>> m = re.match(r"(?P<first_name>\w+) (?P<last_name>\w+)", "Malcolm Reynolds")
>>> m.groupdict()
{'first_name': 'Malcolm', 'last_name': 'Reynolds'}

```


Match.start([_group_])[¶](https://docs.python.org/3/library/re.html#re.Match.start "Link to this definition")


Match.end([_group_])[¶](https://docs.python.org/3/library/re.html#re.Match.end "Link to this definition")
    
Return the indices of the start and end of the substring matched by _group_ ; _group_ defaults to zero (meaning the whole matched substring). Return `-1` if _group_ exists but did not contribute to the match. For a match object _m_ , and a group _g_ that did contribute to the match, the substring matched by group _g_ (equivalent to `m.group(g)`) is
```
m.string[m.start(g):m.end(g)]

```

Note that `m.start(group)` will equal `m.end(group)` if _group_ matched a null string. For example, after `m = re.search('b(c?)', 'cba')`, `m.start(0)` is 1, `m.end(0)` is 2, `m.start(1)` and `m.end(1)` are both 2, and `m.start(2)` raises an [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError "IndexError") exception.
An example that will remove _remove_this_ from email addresses:
>>>```
>>> email = "tony@tiremove_thisger.net"
>>> m = re.search("remove_this", email)
>>> email[:m.start()] + email[m.end():]
'tony@tiger.net'

```


Match.span([_group_])[¶](https://docs.python.org/3/library/re.html#re.Match.span "Link to this definition")
    
For a match _m_ , return the 2-tuple `(m.start(group), m.end(group))`. Note that if _group_ did not contribute to the match, this is `(-1, -1)`. _group_ defaults to zero, the entire match. 

Match.pos[¶](https://docs.python.org/3/library/re.html#re.Match.pos "Link to this definition")
    
The value of _pos_ which was passed to the [`search()`](https://docs.python.org/3/library/re.html#re.Pattern.search "re.Pattern.search") or [`match()`](https://docs.python.org/3/library/re.html#re.Pattern.match "re.Pattern.match") method of a [regex object](https://docs.python.org/3/library/re.html#re-objects). This is the index into the string at which the RE engine started looking for a match. 

Match.endpos[¶](https://docs.python.org/3/library/re.html#re.Match.endpos "Link to this definition")
    
The value of _endpos_ which was passed to the [`search()`](https://docs.python.org/3/library/re.html#re.Pattern.search "re.Pattern.search") or [`match()`](https://docs.python.org/3/library/re.html#re.Pattern.match "re.Pattern.match") method of a [regex object](https://docs.python.org/3/library/re.html#re-objects). This is the index into the string beyond which the RE engine will not go. 

Match.lastindex[¶](https://docs.python.org/3/library/re.html#re.Match.lastindex "Link to this definition")
    
The integer index of the last matched capturing group, or `None` if no group was matched at all. For example, the expressions `(a)b`, `((a)(b))`, and `((ab))` will have `lastindex == 1` if applied to the string `'ab'`, while the expression `(a)(b)` will have `lastindex == 2`, if applied to the same string. 

Match.lastgroup[¶](https://docs.python.org/3/library/re.html#re.Match.lastgroup "Link to this definition")
    
The name of the last matched capturing group, or `None` if the group didn’t have a name, or if no group was matched at all. 

Match.re[¶](https://docs.python.org/3/library/re.html#re.Match.re "Link to this definition")
    
The [regular expression object](https://docs.python.org/3/library/re.html#re-objects) whose [`match()`](https://docs.python.org/3/library/re.html#re.Pattern.match "re.Pattern.match") or [`search()`](https://docs.python.org/3/library/re.html#re.Pattern.search "re.Pattern.search") method produced this match instance. 

Match.string[¶](https://docs.python.org/3/library/re.html#re.Match.string "Link to this definition")
    
The string passed to [`match()`](https://docs.python.org/3/library/re.html#re.Pattern.match "re.Pattern.match") or [`search()`](https://docs.python.org/3/library/re.html#re.Pattern.search "re.Pattern.search").
Changed in version 3.7: Added support of [`copy.copy()`](https://docs.python.org/3/library/copy.html#copy.copy "copy.copy") and [`copy.deepcopy()`](https://docs.python.org/3/library/copy.html#copy.deepcopy "copy.deepcopy"). Match objects are considered atomic.
## Regular Expression Examples[¶](https://docs.python.org/3/library/re.html#regular-expression-examples "Link to this heading")
### Checking for a Pair[¶](https://docs.python.org/3/library/re.html#checking-for-a-pair "Link to this heading")
In this example, we’ll use the following helper function to display match objects a little more gracefully: