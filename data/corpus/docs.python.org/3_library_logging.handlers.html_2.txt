Title: FileHandler Class in Logging Module
URL: https://docs.python.org/3/library/logging.handlers.html
Summary: The `FileHandler` class in the logging module creates a new logging instance that writes log messages to a specified file. It accepts parameters for file mode, encoding, delay in opening the file, and error handling for encoding issues. Changes in version 3.6 include support for `Path` objects.
---

_class_ logging.FileHandler(_filename_ , _mode ='a'_, _encoding =None_, _delay =False_, _errors =None_)[¶](https://docs.python.org/3/library/logging.handlers.html#logging.FileHandler "Link to this definition")
    
Returns a new instance of the [`FileHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.FileHandler "logging.FileHandler") class. The specified file is opened and used as the stream for logging. If _mode_ is not specified, `'a'` is used. If _encoding_ is not `None`, it is used to open the file with that encoding. If _delay_ is true, then file opening is deferred until the first call to [`emit()`](https://docs.python.org/3/library/logging.handlers.html#logging.FileHandler.emit "logging.FileHandler.emit"). By default, the file grows indefinitely. If _errors_ is specified, it’s used to determine how encoding errors are handled.
Changed in version 3.6: As well as string values, [`Path`](https://docs.python.org/3/library/pathlib.html#pathlib.Path "pathlib.Path") objects are also accepted for the _filename_ argument.
Changed in version 3.9: The _errors_ parameter was added. 

close()[¶](https://docs.python.org/3/library/logging.handlers.html#logging.FileHandler.close "Link to this definition")
    
Closes the file. 

emit(_record_)[¶](https://docs.python.org/3/library/logging.handlers.html#logging.FileHandler.emit "Link to this definition")
    
Outputs the record to the file.
Note that if the file was closed due to logging shutdown at exit and the file mode is ‘w’, the record will not be emitted (see [bpo-42378](https://bugs.python.org/issue?@action=redirect&bpo=42378)).
## NullHandler[¶](https://docs.python.org/3/library/logging.handlers.html#nullhandler "Link to this heading")
Added in version 3.1.
The [`NullHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.NullHandler "logging.NullHandler") class, located in the core [`logging`](https://docs.python.org/3/library/logging.html#module-logging "logging: Flexible event logging system for applications.") package, does not do any formatting or output. It is essentially a ‘no-op’ handler for use by library developers. 

_class_ logging.NullHandler[¶](https://docs.python.org/3/library/logging.handlers.html#logging.NullHandler "Link to this definition")
    
Returns a new instance of the [`NullHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.NullHandler "logging.NullHandler") class. 

emit(_record_)[¶](https://docs.python.org/3/library/logging.handlers.html#logging.NullHandler.emit "Link to this definition")
    
This method does nothing. 

handle(_record_)[¶](https://docs.python.org/3/library/logging.handlers.html#logging.NullHandler.handle "Link to this definition")
    
This method does nothing. 

createLock()[¶](https://docs.python.org/3/library/logging.handlers.html#logging.NullHandler.createLock "Link to this definition")
    
This method returns `None` for the lock, since there is no underlying I/O to which access needs to be serialized.
See [Configuring Logging for a Library](https://docs.python.org/3/howto/logging.html#library-config) for more information on how to use [`NullHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.NullHandler "logging.NullHandler").
## WatchedFileHandler[¶](https://docs.python.org/3/library/logging.handlers.html#watchedfilehandler "Link to this heading")
The [`WatchedFileHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.WatchedFileHandler "logging.handlers.WatchedFileHandler") class, located in the [`logging.handlers`](https://docs.python.org/3/library/logging.handlers.html#module-logging.handlers "logging.handlers: Handlers for the logging module.") module, is a `FileHandler` which watches the file it is logging to. If the file changes, it is closed and reopened using the file name.
A file change can happen because of usage of programs such as _newsyslog_ and _logrotate_ which perform log file rotation. This handler, intended for use under Unix/Linux, watches the file to see if it has changed since the last emit. (A file is deemed to have changed if its device or inode have changed.) If the file has changed, the old file stream is closed, and the file opened to get a new stream.
This handler is not appropriate for use under Windows, because under Windows open log files cannot be moved or renamed - logging opens the files with exclusive locks - and so there is no need for such a handler. Furthermore, _ST_INO_ is not supported under Windows; [`stat()`](https://docs.python.org/3/library/os.html#os.stat "os.stat") always returns zero for this value.