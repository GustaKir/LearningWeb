Title: test.support Module Overview
URL: https://docs.python.org/3/library/test.html
Summary: The `test.support` module provides utilities for Python's regression testing. Key components include `SMALLEST`, an object for mixed type comparison, and the `busy_retry` function, which runs a loop until a break condition is met or a timeout leads to an `AssertionError`.
---

test.support.SMALLEST[¶](https://docs.python.org/3/library/test.html#test.support.SMALLEST "Link to this definition")
    
Object that is less than anything (except itself). Used to test mixed type comparison.
The [`test.support`](https://docs.python.org/3/library/test.html#module-test.support "test.support: Support for Python's regression test suite.") module defines the following functions: 

test.support.busy_retry(_timeout_ , _err_msg =None_, _/_ , _*_ , _error =True_)[¶](https://docs.python.org/3/library/test.html#test.support.busy_retry "Link to this definition")
    
Run the loop body until `break` stops the loop.
After _timeout_ seconds, raise an [`AssertionError`](https://docs.python.org/3/library/exceptions.html#AssertionError "AssertionError") if _error_ is true, or just stop the loop if _error_ is false.
Example:
```
for _ in support.busy_retry(support.SHORT_TIMEOUT):
  if check():
    break

```

Example of error=False usage:
```
for _ in support.busy_retry(support.SHORT_TIMEOUT, error=False):
  if check():
    break
else:
  raise RuntimeError('my custom error')

```


test.support.sleeping_retry(_timeout_ , _err_msg =None_, _/_ , _*_ , _init_delay =0.010_, _max_delay =1.0_, _error =True_)[¶](https://docs.python.org/3/library/test.html#test.support.sleeping_retry "Link to this definition")
    
Wait strategy that applies exponential backoff.
Run the loop body until `break` stops the loop. Sleep at each loop iteration, but not at the first iteration. The sleep delay is doubled at each iteration (up to _max_delay_ seconds).
See [`busy_retry()`](https://docs.python.org/3/library/test.html#test.support.busy_retry "test.support.busy_retry") documentation for the parameters usage.
Example raising an exception after SHORT_TIMEOUT seconds:
```
for _ in support.sleeping_retry(support.SHORT_TIMEOUT):
  if check():
    break

```

Example of error=False usage:
```
for _ in support.sleeping_retry(support.SHORT_TIMEOUT, error=False):
  if check():
    break
else:
  raise RuntimeError('my custom error')