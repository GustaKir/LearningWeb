Title: TestCase Debugging and Assertion Methods
URL: https://docs.python.org/3/library/unittest.html
Summary: The `debug()` method in the `TestCase` class runs tests without collecting results, allowing exceptions to propagate for debugging purposes. It also provides several assertion methods, including `assertEqual`, `assertNotEqual`, and `assertTrue`, to check conditions and report test failures.
---

debug()[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.debug "Link to this definition")
    
Run the test without collecting the result. This allows exceptions raised by the test to be propagated to the caller, and can be used to support running tests under a debugger.
The [`TestCase`](https://docs.python.org/3/library/unittest.html#unittest.TestCase "unittest.TestCase") class provides several assert methods to check for and report failures. The following table lists the most commonly used methods (see the tables below for more assert methods):
Method | Checks that | New in  
---|---|---  
[`assertEqual(a, b)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertEqual "unittest.TestCase.assertEqual") | `a == b` |   
[`assertNotEqual(a, b)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotEqual "unittest.TestCase.assertNotEqual") | `a != b` |   
[`assertTrue(x)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertTrue "unittest.TestCase.assertTrue") | `bool(x) is True` |   
[`assertFalse(x)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertFalse "unittest.TestCase.assertFalse") | `bool(x) is False` |   
[`assertIs(a, b)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIs "unittest.TestCase.assertIs") | `a is b` | 3.1  
[`assertIsNot(a, b)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIsNot "unittest.TestCase.assertIsNot") | `a is not b` | 3.1  
[`assertIsNone(x)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIsNone "unittest.TestCase.assertIsNone") | `x is None` | 3.1  
[`assertIsNotNone(x)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIsNotNone "unittest.TestCase.assertIsNotNone") | `x is not None` | 3.1  
[`assertIn(a, b)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIn "unittest.TestCase.assertIn") | `a in b` | 3.1  
[`assertNotIn(a, b)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotIn "unittest.TestCase.assertNotIn") | `a not in b` | 3.1  
[`assertIsInstance(a, b)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIsInstance "unittest.TestCase.assertIsInstance") | `isinstance(a, b)` | 3.2  
[`assertNotIsInstance(a, b)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotIsInstance "unittest.TestCase.assertNotIsInstance") | `not isinstance(a, b)` | 3.2  
All the assert methods accept a _msg_ argument that, if specified, is used as the error message on failure (see also [`longMessage`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.longMessage "unittest.TestCase.longMessage")). Note that the _msg_ keyword argument can be passed to [`assertRaises()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises "unittest.TestCase.assertRaises"), [`assertRaisesRegex()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaisesRegex "unittest.TestCase.assertRaisesRegex"), [`assertWarns()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertWarns "unittest.TestCase.assertWarns"), [`assertWarnsRegex()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertWarnsRegex "unittest.TestCase.assertWarnsRegex") only when they are used as a context manager. 

assertEqual(_first_ , _second_ , _msg =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertEqual "Link to this definition")
    
Test that _first_ and _second_ are equal. If the values do not compare equal, the test will fail.
In addition, if _first_ and _second_ are the exact same type and one of list, tuple, dict, set, frozenset or str or any type that a subclass registers with [`addTypeEqualityFunc()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.addTypeEqualityFunc "unittest.TestCase.addTypeEqualityFunc") the type-specific equality function will be called in order to generate a more useful default error message (see also the [list of type-specific methods](https://docs.python.org/3/library/unittest.html#type-specific-methods)).
Changed in version 3.1: Added the automatic calling of type-specific equality function.
Changed in version 3.2: [`assertMultiLineEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertMultiLineEqual "unittest.TestCase.assertMultiLineEqual") added as the default type equality function for comparing strings. 

assertNotEqual(_first_ , _second_ , _msg =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotEqual "Link to this definition")
    
Test that _first_ and _second_ are not equal. If the values do compare equal, the test will fail. 

assertTrue(_expr_ , _msg =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertTrue "Link to this definition")