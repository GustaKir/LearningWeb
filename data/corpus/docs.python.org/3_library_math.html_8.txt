Title: Math Module: Precision and Angular Conversion
URL: https://docs.python.org/3/library/math.html
Summary: This section discusses the precision adjustments for float and mixed int/float inputs in Python 3.12, and covers angular conversion functions such as 'math.degrees' for converting radians to degrees and 'math.radians' for converting degrees to radians, along with trigonometric functions like 'math.acos' and 'math.asin'.
---

```

For float and mixed int/float inputs, the intermediate products and sums are computed with extended precision.
Added in version 3.12.
## Angular conversion[¶](https://docs.python.org/3/library/math.html#angular-conversion "Link to this heading") 

math.degrees(_x_)[¶](https://docs.python.org/3/library/math.html#math.degrees "Link to this definition")
    
Convert angle _x_ from radians to degrees. 

math.radians(_x_)[¶](https://docs.python.org/3/library/math.html#math.radians "Link to this definition")
    
Convert angle _x_ from degrees to radians.
## Trigonometric functions[¶](https://docs.python.org/3/library/math.html#trigonometric-functions "Link to this heading") 

math.acos(_x_)[¶](https://docs.python.org/3/library/math.html#math.acos "Link to this definition")
    
Return the arc cosine of _x_ , in radians. The result is between `0` and `pi`. 

math.asin(_x_)[¶](https://docs.python.org/3/library/math.html#math.asin "Link to this definition")
    
Return the arc sine of _x_ , in radians. The result is between `-pi/2` and `pi/2`. 

math.atan(_x_)[¶](https://docs.python.org/3/library/math.html#math.atan "Link to this definition")
    
Return the arc tangent of _x_ , in radians. The result is between `-pi/2` and `pi/2`. 

math.atan2(_y_ , _x_)[¶](https://docs.python.org/3/library/math.html#math.atan2 "Link to this definition")
    
Return `atan(y / x)`, in radians. The result is between `-pi` and `pi`. The vector in the plane from the origin to point `(x, y)` makes this angle with the positive X axis. The point of [`atan2()`](https://docs.python.org/3/library/math.html#math.atan2 "math.atan2") is that the signs of both inputs are known to it, so it can compute the correct quadrant for the angle. For example, `atan(1)` and `atan2(1, 1)` are both `pi/4`, but `atan2(-1, -1)` is `-3*pi/4`. 

math.cos(_x_)[¶](https://docs.python.org/3/library/math.html#math.cos "Link to this definition")
    
Return the cosine of _x_ radians. 

math.sin(_x_)[¶](https://docs.python.org/3/library/math.html#math.sin "Link to this definition")
    
Return the sine of _x_ radians. 

math.tan(_x_)[¶](https://docs.python.org/3/library/math.html#math.tan "Link to this definition")
    
Return the tangent of _x_ radians.
## Hyperbolic functions[¶](https://docs.python.org/3/library/math.html#hyperbolic-functions "Link to this heading")
[Hyperbolic functions](https://en.wikipedia.org/wiki/Hyperbolic_functions) are analogs of trigonometric functions that are based on hyperbolas instead of circles. 

math.acosh(_x_)[¶](https://docs.python.org/3/library/math.html#math.acosh "Link to this definition")
    
Return the inverse hyperbolic cosine of _x_. 

math.asinh(_x_)[¶](https://docs.python.org/3/library/math.html#math.asinh "Link to this definition")
    
Return the inverse hyperbolic sine of _x_. 

math.atanh(_x_)[¶](https://docs.python.org/3/library/math.html#math.atanh "Link to this definition")
    
Return the inverse hyperbolic tangent of _x_. 

math.cosh(_x_)[¶](https://docs.python.org/3/library/math.html#math.cosh "Link to this definition")
    
Return the hyperbolic cosine of _x_. 

math.sinh(_x_)[¶](https://docs.python.org/3/library/math.html#math.sinh "Link to this definition")
    
Return the hyperbolic sine of _x_. 

math.tanh(_x_)[¶](https://docs.python.org/3/library/math.html#math.tanh "Link to this definition")
    
Return the hyperbolic tangent of _x_.
## Special functions[¶](https://docs.python.org/3/library/math.html#special-functions "Link to this heading") 

math.erf(_x_)[¶](https://docs.python.org/3/library/math.html#math.erf "Link to this definition")
    
Return the [error function](https://en.wikipedia.org/wiki/Error_function) at _x_.
The [`erf()`](https://docs.python.org/3/library/math.html#math.erf "math.erf") function can be used to compute traditional statistical functions such as the [cumulative standard normal distribution](https://en.wikipedia.org/wiki/Cumulative_distribution_function):
```
defphi(x):
  'Cumulative distribution function for the standard normal distribution'
  return (1.0 + erf(x / sqrt(2.0))) / 2.0