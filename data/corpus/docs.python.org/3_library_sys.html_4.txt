Title: Understanding sys.breakpointhook() in Python
URL: https://docs.python.org/3/library/sys.html
Summary: The sys.breakpointhook() function is invoked by the built-in breakpoint() function. By default, it activates the pdb debugger, but users can customize it to use different functions. This function's signature can vary based on the bound function's requirements, and the built-in breakpoint() also passes its arguments directly to breakpointhook(). The default behavior can be influenced by the PYTHONBREAKPOINT environment variable.
---

sys.breakpointhook()[¶](https://docs.python.org/3/library/sys.html#sys.breakpointhook "Link to this definition")
    
This hook function is called by built-in [`breakpoint()`](https://docs.python.org/3/library/functions.html#breakpoint "breakpoint"). By default, it drops you into the [`pdb`](https://docs.python.org/3/library/pdb.html#module-pdb "pdb: The Python debugger for interactive interpreters.") debugger, but it can be set to any other function so that you can choose which debugger gets used.
The signature of this function is dependent on what it calls. For example, the default binding (e.g. `pdb.set_trace()`) expects no arguments, but you might bind it to a function that expects additional arguments (positional and/or keyword). The built-in `breakpoint()` function passes its `*args` and `**kws` straight through. Whatever `breakpointhooks()` returns is returned from `breakpoint()`.
The default implementation first consults the environment variable [`PYTHONBREAKPOINT`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONBREAKPOINT). If that is set to `"0"` then this function returns immediately; i.e. it is a no-op. If the environment variable is not set, or is set to the empty string, `pdb.set_trace()` is called. Otherwise this variable should name a function to run, using Python’s dotted-import nomenclature, e.g. `package.subpackage.module.function`. In this case, `package.subpackage.module` would be imported and the resulting module must have a callable named `function()`. This is run, passing in `*args` and `**kws`, and whatever `function()` returns, `sys.breakpointhook()` returns to the built-in [`breakpoint()`](https://docs.python.org/3/library/functions.html#breakpoint "breakpoint") function.
Note that if anything goes wrong while importing the callable named by [`PYTHONBREAKPOINT`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONBREAKPOINT), a [`RuntimeWarning`](https://docs.python.org/3/library/exceptions.html#RuntimeWarning "RuntimeWarning") is reported and the breakpoint is ignored.
Also note that if `sys.breakpointhook()` is overridden programmatically, [`PYTHONBREAKPOINT`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONBREAKPOINT) is _not_ consulted.
Added in version 3.7. 

sys._debugmallocstats()[¶](https://docs.python.org/3/library/sys.html#sys._debugmallocstats "Link to this definition")
    
Print low-level information to stderr about the state of CPython’s memory allocator.
If Python is [built in debug mode](https://docs.python.org/3/using/configure.html#debug-build) ([`configure --with-pydebug option`](https://docs.python.org/3/using/configure.html#cmdoption-with-pydebug)), it also performs some expensive internal consistency checks.
Added in version 3.3.
**CPython implementation detail:** This function is specific to CPython. The exact output format is not defined here, and may change. 

sys.dllhandle[¶](https://docs.python.org/3/library/sys.html#sys.dllhandle "Link to this definition")
    
Integer specifying the handle of the Python DLL.
[Availability](https://docs.python.org/3/library/intro.html#availability): Windows. 

sys.displayhook(_value_)[¶](https://docs.python.org/3/library/sys.html#sys.displayhook "Link to this definition")
    
If _value_ is not `None`, this function prints `repr(value)` to `sys.stdout`, and saves _value_ in `builtins._`. If `repr(value)` is not encodable to `sys.stdout.encoding` with `sys.stdout.errors` error handler (which is probably `'strict'`), encode it to `sys.stdout.encoding` with `'backslashreplace'` error handler.
`sys.displayhook` is called on the result of evaluating an [expression](https://docs.python.org/3/glossary.html#term-expression) entered in an interactive Python session. The display of these values can be customized by assigning another one-argument function to `sys.displayhook`.
Pseudo-code:
```
defdisplayhook(value):
  if value is None:
    return
  # Set '_' to None to avoid recursion
  builtins._ = None
  text = repr(value)
  try:
    sys.stdout.write(text)
  except UnicodeEncodeError:
    bytes = text.encode(sys.stdout.encoding, 'backslashreplace')
    if hasattr(sys.stdout, 'buffer'):
      sys.stdout.buffer.write(bytes)
    else:
      text = bytes.decode(sys.stdout.encoding, 'strict')
      sys.stdout.write(text)
  sys.stdout.write("\n")
  builtins._ = value