Title: CSV Dialect Registration in Python
URL: https://docs.python.org/3/library/csv.html
Summary: The `csv.register_dialect` function allows users to associate a specified dialect with a name, utilizing either a subclass of `Dialect` or keyword arguments. The `csv.unregister_dialect` function enables the deletion of a registered dialect by name, raising an error if the name does not exist in the registry. Full details about dialects and formatting parameters are available in the documentation.
---

```


csv.register_dialect(_name_[, _dialect_[, _**fmtparams_]])[¶](https://docs.python.org/3/library/csv.html#csv.register_dialect "Link to this definition")
    
Associate _dialect_ with _name_. _name_ must be a string. The dialect can be specified either by passing a sub-class of [`Dialect`](https://docs.python.org/3/library/csv.html#csv.Dialect "csv.Dialect"), or by _fmtparams_ keyword arguments, or both, with keyword arguments overriding parameters of the dialect. For full details about dialects and formatting parameters, see section [Dialects and Formatting Parameters](https://docs.python.org/3/library/csv.html#csv-fmt-params). 

csv.unregister_dialect(_name_)[¶](https://docs.python.org/3/library/csv.html#csv.unregister_dialect "Link to this definition")
    
Delete the dialect associated with _name_ from the dialect registry. An [`Error`](https://docs.python.org/3/library/csv.html#csv.Error "csv.Error") is raised if _name_ is not a registered dialect name. 

csv.get_dialect(_name_)[¶](https://docs.python.org/3/library/csv.html#csv.get_dialect "Link to this definition")
    
Return the dialect associated with _name_. An [`Error`](https://docs.python.org/3/library/csv.html#csv.Error "csv.Error") is raised if _name_ is not a registered dialect name. This function returns an immutable [`Dialect`](https://docs.python.org/3/library/csv.html#csv.Dialect "csv.Dialect"). 

csv.list_dialects()[¶](https://docs.python.org/3/library/csv.html#csv.list_dialects "Link to this definition")
    
Return the names of all registered dialects. 

csv.field_size_limit([_new_limit_])[¶](https://docs.python.org/3/library/csv.html#csv.field_size_limit "Link to this definition")
    
Returns the current maximum field size allowed by the parser. If _new_limit_ is given, this becomes the new limit.
The [`csv`](https://docs.python.org/3/library/csv.html#module-csv "csv: Write and read tabular data to and from delimited files.") module defines the following classes: 

_class_ csv.DictReader(_f_ , _fieldnames =None_, _restkey =None_, _restval =None_, _dialect ='excel'_, _* args_, _** kwds_)[¶](https://docs.python.org/3/library/csv.html#csv.DictReader "Link to this definition")
    
Create an object that operates like a regular reader but maps the information in each row to a [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") whose keys are given by the optional _fieldnames_ parameter.
The _fieldnames_ parameter is a [sequence](https://docs.python.org/3/glossary.html#term-sequence). If _fieldnames_ is omitted, the values in the first row of file _f_ will be used as the fieldnames and will be omitted from the results. If _fieldnames_ is provided, they will be used and the first row will be included in the results. Regardless of how the fieldnames are determined, the dictionary preserves their original ordering.
If a row has more fields than fieldnames, the remaining data is put in a list and stored with the fieldname specified by _restkey_ (which defaults to `None`). If a non-blank row has fewer fields than fieldnames, the missing values are filled-in with the value of _restval_ (which defaults to `None`).
All other optional or keyword arguments are passed to the underlying [`reader`](https://docs.python.org/3/library/csv.html#csv.reader "csv.reader") instance.
If the argument passed to _fieldnames_ is an iterator, it will be coerced to a [`list`](https://docs.python.org/3/library/stdtypes.html#list "list").
Changed in version 3.6: Returned rows are now of type `OrderedDict`.
Changed in version 3.8: Returned rows are now of type [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict").
A short usage example:
>>>```
>>> importcsv
>>> with open('names.csv', newline='') as csvfile:
...   reader = csv.DictReader(csvfile)
...   for row in reader:
...     print(row['first_name'], row['last_name'])
...
Eric Idle
John Cleese
>>> print(row)
{'first_name': 'John', 'last_name': 'Cleese'}