Title: SMTPHandler Class Overview
URL: https://docs.python.org/3/library/logging.handlers.html
Summary: The SMTPHandler class in the logging.handlers module is initialized with SMTP server details to send log messages via email. Key parameters include the mail host, sender and recipient addresses, subject, optional authentication credentials, and secure protocol options.
---

_class_ logging.handlers.SMTPHandler(_mailhost_ , _fromaddr_ , _toaddrs_ , _subject_ , _credentials =None_, _secure =None_, _timeout =1.0_)[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.SMTPHandler "Link to this definition")
    
Returns a new instance of the [`SMTPHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.SMTPHandler "logging.handlers.SMTPHandler") class. The instance is initialized with the from and to addresses and subject line of the email. The _toaddrs_ should be a list of strings. To specify a non-standard SMTP port, use the (host, port) tuple format for the _mailhost_ argument. If you use a string, the standard SMTP port is used. If your SMTP server requires authentication, you can specify a (username, password) tuple for the _credentials_ argument.
To specify the use of a secure protocol (TLS), pass in a tuple to the _secure_ argument. This will only be used when authentication credentials are supplied. The tuple should be either an empty tuple, or a single-value tuple with the name of a keyfile, or a 2-value tuple with the names of the keyfile and certificate file. (This tuple is passed to the [`smtplib.SMTP.starttls()`](https://docs.python.org/3/library/smtplib.html#smtplib.SMTP.starttls "smtplib.SMTP.starttls") method.)
A timeout can be specified for communication with the SMTP server using the _timeout_ argument.
Changed in version 3.3: Added the _timeout_ parameter. 

emit(_record_)[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.SMTPHandler.emit "Link to this definition")
    
Formats the record and sends it to the specified addressees. 

getSubject(_record_)[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.SMTPHandler.getSubject "Link to this definition")
    
If you want to specify a subject line which is record-dependent, override this method.
## MemoryHandler[¶](https://docs.python.org/3/library/logging.handlers.html#memoryhandler "Link to this heading")
The [`MemoryHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.MemoryHandler "logging.handlers.MemoryHandler") class, located in the [`logging.handlers`](https://docs.python.org/3/library/logging.handlers.html#module-logging.handlers "logging.handlers: Handlers for the logging module.") module, supports buffering of logging records in memory, periodically flushing them to a _target_ handler. Flushing occurs whenever the buffer is full, or when an event of a certain severity or greater is seen.
[`MemoryHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.MemoryHandler "logging.handlers.MemoryHandler") is a subclass of the more general [`BufferingHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.BufferingHandler "logging.handlers.BufferingHandler"), which is an abstract class. This buffers logging records in memory. Whenever each record is added to the buffer, a check is made by calling `shouldFlush()` to see if the buffer should be flushed. If it should, then `flush()` is expected to do the flushing. 

_class_ logging.handlers.BufferingHandler(_capacity_)[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.BufferingHandler "Link to this definition")
    
Initializes the handler with a buffer of the specified capacity. Here, _capacity_ means the number of logging records buffered. 

emit(_record_)[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.BufferingHandler.emit "Link to this definition")
    
Append the record to the buffer. If [`shouldFlush()`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.BufferingHandler.shouldFlush "logging.handlers.BufferingHandler.shouldFlush") returns true, call [`flush()`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.BufferingHandler.flush "logging.handlers.BufferingHandler.flush") to process the buffer. 

flush()[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.BufferingHandler.flush "Link to this definition")
    
For a [`BufferingHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.BufferingHandler "logging.handlers.BufferingHandler") instance, flushing means that it sets the buffer to an empty list. This method can be overwritten to implement more useful flushing behavior. 

shouldFlush(_record_)[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.BufferingHandler.shouldFlush "Link to this definition")
    
Return `True` if the buffer is up to capacity. This method can be overridden to implement custom flushing strategies.