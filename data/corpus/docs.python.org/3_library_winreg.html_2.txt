Title: winreg.DeleteKeyEx Function
URL: https://docs.python.org/3/library/winreg.html
Summary: The winreg.DeleteKeyEx function deletes a specified subkey from a given open key or predefined HKEY constants. It requires a valid subkey name, a reserved integer set to zero, and an access mask for security access, with a default of KEY_WOW64_64KEY. Note that this method cannot delete keys that have subkeys.
---

winreg.DeleteKeyEx(_key_ , _sub_key_ , _access =KEY_WOW64_64KEY_, _reserved =0_)[¶](https://docs.python.org/3/library/winreg.html#winreg.DeleteKeyEx "Link to this definition")
    
Deletes the specified key.
_key_ is an already open key, or one of the predefined [HKEY_* constants](https://docs.python.org/3/library/winreg.html#hkey-constants).
_sub_key_ is a string that must be a subkey of the key identified by the _key_ parameter. This value must not be `None`, and the key may not have subkeys.
_reserved_ is a reserved integer, and must be zero. The default is zero.
_access_ is an integer that specifies an access mask that describes the desired security access for the key. Default is [`KEY_WOW64_64KEY`](https://docs.python.org/3/library/winreg.html#winreg.KEY_WOW64_64KEY "winreg.KEY_WOW64_64KEY"). On 32-bit Windows, the WOW64 constants are ignored. See [Access Rights](https://docs.python.org/3/library/winreg.html#access-rights) for other allowed values.
_This method can not delete keys with subkeys._
If the method succeeds, the entire key, including all of its values, is removed. If the method fails, an [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") exception is raised.
On unsupported Windows versions, [`NotImplementedError`](https://docs.python.org/3/library/exceptions.html#NotImplementedError "NotImplementedError") is raised.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `winreg.DeleteKey` with arguments `key`, `sub_key`, `access`.
Added in version 3.2.
Changed in version 3.3: See [above](https://docs.python.org/3/library/winreg.html#exception-changed). 

winreg.DeleteValue(_key_ , _value_)[¶](https://docs.python.org/3/library/winreg.html#winreg.DeleteValue "Link to this definition")
    
Removes a named value from a registry key.
_key_ is an already open key, or one of the predefined [HKEY_* constants](https://docs.python.org/3/library/winreg.html#hkey-constants).
_value_ is a string that identifies the value to remove.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `winreg.DeleteValue` with arguments `key`, `value`. 

winreg.EnumKey(_key_ , _index_)[¶](https://docs.python.org/3/library/winreg.html#winreg.EnumKey "Link to this definition")
    
Enumerates subkeys of an open registry key, returning a string.
_key_ is an already open key, or one of the predefined [HKEY_* constants](https://docs.python.org/3/library/winreg.html#hkey-constants).
_index_ is an integer that identifies the index of the key to retrieve.
The function retrieves the name of one subkey each time it is called. It is typically called repeatedly until an [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") exception is raised, indicating, no more values are available.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `winreg.EnumKey` with arguments `key`, `index`.
Changed in version 3.3: See [above](https://docs.python.org/3/library/winreg.html#exception-changed). 

winreg.EnumValue(_key_ , _index_)[¶](https://docs.python.org/3/library/winreg.html#winreg.EnumValue "Link to this definition")
    
Enumerates values of an open registry key, returning a tuple.
_key_ is an already open key, or one of the predefined [HKEY_* constants](https://docs.python.org/3/library/winreg.html#hkey-constants).
_index_ is an integer that identifies the index of the value to retrieve.
The function retrieves the name of one subkey each time it is called. It is typically called repeatedly, until an [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") exception is raised, indicating no more values.
The result is a tuple of 3 items:
Index | Meaning  
---|---  
`0` | A string that identifies the value name  
`1` | An object that holds the value data, and whose type depends on the underlying registry type  
`2` | An integer that identifies the type of the value data (see table in docs for [`SetValueEx()`](https://docs.python.org/3/library/winreg.html#winreg.SetValueEx "winreg.SetValueEx"))  
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `winreg.EnumValue` with arguments `key`, `index`.
Changed in version 3.3: See [above](https://docs.python.org/3/library/winreg.html#exception-changed). 

winreg.ExpandEnvironmentStrings(_str_)[¶](https://docs.python.org/3/library/winreg.html#winreg.ExpandEnvironmentStrings "Link to this definition")
    
Expands environment variable placeholders `%NAME%` in strings like [`REG_EXPAND_SZ`](https://docs.python.org/3/library/winreg.html#winreg.REG_EXPAND_SZ "winreg.REG_EXPAND_SZ"):
>>>```
>>> ExpandEnvironmentStrings('%windir%')
'C:\\Windows'