Title: cancel_join_thread() Method in Multiprocessing
URL: https://docs.python.org/3/library/multiprocessing.html
Summary: The `cancel_join_thread()` method prevents `join_thread()` from blocking, allowing the current process to exit without waiting for enqueued data to be flushed, which may result in data loss. It is primarily for cases where immediate exit is required, despite potential consequences.
---

cancel_join_thread()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue.cancel_join_thread "Link to this definition")
    
Prevent [`join_thread()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue.join_thread "multiprocessing.Queue.join_thread") from blocking. In particular, this prevents the background thread from being joined automatically when the process exits – see [`join_thread()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue.join_thread "multiprocessing.Queue.join_thread").
A better name for this method might be `allow_exit_without_flush()`. It is likely to cause enqueued data to be lost, and you almost certainly will not need to use it. It is really only there if you need the current process to exit immediately without waiting to flush enqueued data to the underlying pipe, and you don’t care about lost data.
Note
This class’s functionality requires a functioning shared semaphore implementation on the host operating system. Without one, the functionality in this class will be disabled, and attempts to instantiate a [`Queue`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue "multiprocessing.Queue") will result in an [`ImportError`](https://docs.python.org/3/library/exceptions.html#ImportError "ImportError"). See [bpo-3770](https://bugs.python.org/issue?@action=redirect&bpo=3770) for additional information. The same holds true for any of the specialized queue types listed below. 

_class_ multiprocessing.SimpleQueue[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.SimpleQueue "Link to this definition")
    
It is a simplified [`Queue`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue "multiprocessing.Queue") type, very close to a locked [`Pipe`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Pipe "multiprocessing.Pipe"). 

close()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.SimpleQueue.close "Link to this definition")
    
Close the queue: release internal resources.
A queue must not be used anymore after it is closed. For example, [`get()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.SimpleQueue.get "multiprocessing.SimpleQueue.get"), [`put()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.SimpleQueue.put "multiprocessing.SimpleQueue.put") and [`empty()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.SimpleQueue.empty "multiprocessing.SimpleQueue.empty") methods must no longer be called.
Added in version 3.9. 

empty()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.SimpleQueue.empty "Link to this definition")
    
Return `True` if the queue is empty, `False` otherwise.
Always raises an [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") if the SimpleQueue is closed. 

get()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.SimpleQueue.get "Link to this definition")
    
Remove and return an item from the queue. 

put(_item_)[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.SimpleQueue.put "Link to this definition")
    
Put _item_ into the queue. 

_class_ multiprocessing.JoinableQueue([_maxsize_])[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.JoinableQueue "Link to this definition")
    
[`JoinableQueue`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.JoinableQueue "multiprocessing.JoinableQueue"), a [`Queue`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue "multiprocessing.Queue") subclass, is a queue which additionally has [`task_done()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.JoinableQueue.task_done "multiprocessing.JoinableQueue.task_done") and [`join()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.JoinableQueue.join "multiprocessing.JoinableQueue.join") methods.