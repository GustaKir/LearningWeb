Title: urllib.parse.parse_qsl() Function
URL: https://docs.python.org/3/library/urllib.parse.html
Summary: The `parse_qsl()` function parses a query string into a list of name-value pairs, allowing for optional parameters like keeping blank values, strict parsing for errors, and specifying encoding. The function helps handle application/x-www-form-urlencoded data.
---

urllib.parse.parse_qsl(_qs_ , _keep_blank_values =False_, _strict_parsing =False_, _encoding ='utf-8'_, _errors ='replace'_, _max_num_fields =None_, _separator ='&'_)[¶](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.parse_qsl "Link to this definition")
    
Parse a query string given as a string argument (data of type _application/x-www-form-urlencoded_). Data are returned as a list of name, value pairs.
The optional argument _keep_blank_values_ is a flag indicating whether blank values in percent-encoded queries should be treated as blank strings. A true value indicates that blanks should be retained as blank strings. The default false value indicates that blank values are to be ignored and treated as if they were not included.
The optional argument _strict_parsing_ is a flag indicating what to do with parsing errors. If false (the default), errors are silently ignored. If true, errors raise a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") exception.
The optional _encoding_ and _errors_ parameters specify how to decode percent-encoded sequences into Unicode characters, as accepted by the [`bytes.decode()`](https://docs.python.org/3/library/stdtypes.html#bytes.decode "bytes.decode") method.
The optional argument _max_num_fields_ is the maximum number of fields to read. If set, then throws a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if there are more than _max_num_fields_ fields read.
The optional argument _separator_ is the symbol to use for separating the query arguments. It defaults to `&`.
Use the [`urllib.parse.urlencode()`](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode "urllib.parse.urlencode") function to convert such lists of pairs into query strings.
Changed in version 3.2: Add _encoding_ and _errors_ parameters.
Changed in version 3.8: Added _max_num_fields_ parameter.
Changed in version 3.10: Added _separator_ parameter with the default value of `&`. Python versions earlier than Python 3.10 allowed using both `;` and `&` as query parameter separator. This has been changed to allow only a single separator key, with `&` as the default separator. 

urllib.parse.urlunparse(_parts_)[¶](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlunparse "Link to this definition")
    
Construct a URL from a tuple as returned by `urlparse()`. The _parts_ argument can be any six-item iterable. This may result in a slightly different, but equivalent URL, if the URL that was parsed originally had unnecessary delimiters (for example, a `?` with an empty query; the RFC states that these are equivalent). 

urllib.parse.urlsplit(_urlstring_ , _scheme =''_, _allow_fragments =True_)[¶](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlsplit "Link to this definition")
    
This is similar to [`urlparse()`](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlparse "urllib.parse.urlparse"), but does not split the params from the URL. This should generally be used instead of [`urlparse()`](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlparse "urllib.parse.urlparse") if the more recent URL syntax allowing parameters to be applied to each segment of the _path_ portion of the URL (see [**RFC 2396**](https://datatracker.ietf.org/doc/html/rfc2396.html)) is wanted. A separate function is needed to separate the path segments and parameters. This function returns a 5-item [named tuple](https://docs.python.org/3/glossary.html#term-named-tuple):
```
(addressing scheme, network location, path, query, fragment identifier).