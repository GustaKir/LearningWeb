Title: PyDict_GetItemRef Function
URL: https://docs.python.org/3/c-api/dict.html
Summary: The `PyDict_GetItemRef` function returns a strong reference to an object in a Python dictionary given a specified key. If the key is found, it updates the result pointer with a new strong reference and returns `1`. If the key is absent, it sets the result to `NULL` and returns `0`. An error raises an exception and returns `-1`. This function has been part of the Stable ABI since version 3.13.
---

intPyDict_GetItemRef([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*p, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*key, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")**result)[¶](https://docs.python.org/3/c-api/dict.html#c.PyDict_GetItemRef "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.13._
Return a new [strong reference](https://docs.python.org/3/glossary.html#term-strong-reference) to the object from dictionary _p_ which has a key _key_ :
  * If the key is present, set _*result_ to a new [strong reference](https://docs.python.org/3/glossary.html#term-strong-reference) to the value and return `1`.
  * If the key is missing, set _*result_ to `NULL` and return `0`.
  * On error, raise an exception and return `-1`.


Added in version 3.13.
See also the [`PyObject_GetItem()`](https://docs.python.org/3/c-api/object.html#c.PyObject_GetItem "PyObject_GetItem") function. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyDict_GetItem([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*p, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*key)[¶](https://docs.python.org/3/c-api/dict.html#c.PyDict_GetItem "Link to this definition")
    _Return value: Borrowed reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return a [borrowed reference](https://docs.python.org/3/glossary.html#term-borrowed-reference) to the object from dictionary _p_ which has a key _key_. Return `NULL` if the key _key_ is missing _without_ setting an exception.
Note
Exceptions that occur while this calls [`__hash__()`](https://docs.python.org/3/reference/datamodel.html#object.__hash__ "object.__hash__") and [`__eq__()`](https://docs.python.org/3/reference/datamodel.html#object.__eq__ "object.__eq__") methods are silently ignored. Prefer the [`PyDict_GetItemWithError()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_GetItemWithError "PyDict_GetItemWithError") function instead.
Changed in version 3.10: Calling this API without [GIL](https://docs.python.org/3/glossary.html#term-GIL) held had been allowed for historical reason. It is no longer allowed. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyDict_GetItemWithError([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*p, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*key)[¶](https://docs.python.org/3/c-api/dict.html#c.PyDict_GetItemWithError "Link to this definition")
    _Return value: Borrowed reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Variant of [`PyDict_GetItem()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_GetItem "PyDict_GetItem") that does not suppress exceptions. Return `NULL` **with** an exception set if an exception occurred. Return `NULL` **without** an exception set if the key wasn’t present. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyDict_GetItemString([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*p, constchar*key)[¶](https://docs.python.org/3/c-api/dict.html#c.PyDict_GetItemString "Link to this definition")
    _Return value: Borrowed reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
This is the same as [`PyDict_GetItem()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_GetItem "PyDict_GetItem"), but _key_ is specified as a constchar* UTF-8 encoded bytes string, rather than a [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*.
Note
Exceptions that occur while this calls [`__hash__()`](https://docs.python.org/3/reference/datamodel.html#object.__hash__ "object.__hash__") and [`__eq__()`](https://docs.python.org/3/reference/datamodel.html#object.__eq__ "object.__eq__") methods or while creating the temporary [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") object are silently ignored. Prefer using the [`PyDict_GetItemWithError()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_GetItemWithError "PyDict_GetItemWithError") function with your own [`PyUnicode_FromString()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FromString "PyUnicode_FromString") _key_ instead.