Title: Buffered Streaming Protocols in asyncio
URL: https://docs.python.org/3/library/asyncio-protocol.html
Summary: Buffered Protocols, introduced in Python 3.7, enhance Streaming Protocols by allowing manual control over the receive buffer, resulting in performance improvements by reducing data copies and buffer allocations during data reception.
---

```

### Buffered Streaming Protocols[¶](https://docs.python.org/3/library/asyncio-protocol.html#buffered-streaming-protocols "Link to this heading")
Added in version 3.7.
Buffered Protocols can be used with any event loop method that supports [Streaming Protocols](https://docs.python.org/3/library/asyncio-protocol.html#streaming-protocols).
`BufferedProtocol` implementations allow explicit manual allocation and control of the receive buffer. Event loops can then use the buffer provided by the protocol to avoid unnecessary data copies. This can result in noticeable performance improvement for protocols that receive big amounts of data. Sophisticated protocol implementations can significantly reduce the number of buffer allocations.
The following callbacks are called on [`BufferedProtocol`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.BufferedProtocol "asyncio.BufferedProtocol") instances: 

BufferedProtocol.get_buffer(_sizehint_)[¶](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.BufferedProtocol.get_buffer "Link to this definition")
    
Called to allocate a new receive buffer.
_sizehint_ is the recommended minimum size for the returned buffer. It is acceptable to return smaller or larger buffers than what _sizehint_ suggests. When set to -1, the buffer size can be arbitrary. It is an error to return a buffer with a zero size.
`get_buffer()` must return an object implementing the [buffer protocol](https://docs.python.org/3/c-api/buffer.html#bufferobjects). 

BufferedProtocol.buffer_updated(_nbytes_)[¶](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.BufferedProtocol.buffer_updated "Link to this definition")
    
Called when the buffer was updated with the received data.
_nbytes_ is the total number of bytes that were written to the buffer. 

BufferedProtocol.eof_received()[¶](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.BufferedProtocol.eof_received "Link to this definition")
    
See the documentation of the [`protocol.eof_received()`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.Protocol.eof_received "asyncio.Protocol.eof_received") method.
[`get_buffer()`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.BufferedProtocol.get_buffer "asyncio.BufferedProtocol.get_buffer") can be called an arbitrary number of times during a connection. However, [`protocol.eof_received()`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.Protocol.eof_received "asyncio.Protocol.eof_received") is called at most once and, if called, [`get_buffer()`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.BufferedProtocol.get_buffer "asyncio.BufferedProtocol.get_buffer") and [`buffer_updated()`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.BufferedProtocol.buffer_updated "asyncio.BufferedProtocol.buffer_updated") won’t be called after it.
State machine:
```
start -> connection_made
  [-> get_buffer
    [-> buffer_updated]?
  ]*
  [-> eof_received]?
-> connection_lost -> end