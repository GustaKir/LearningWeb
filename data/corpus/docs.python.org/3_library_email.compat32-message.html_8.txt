Title: get_param Method in email.compat32 Message
URL: https://docs.python.org/3/library/email.compat32-message.html
Summary: The `get_param` method retrieves the value of a specified parameter from the Content-Type header of an email message. If the parameter is not found, it returns a default value (None by default). The method can use an alternative header and returns a string or a 3-tuple if the parameter is RFC 2231 encoded, providing details on charset, language, and value.
---

get_param(_param_ , _failobj =None_, _header ='content-type'_, _unquote =True_)[¶](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.get_param "Link to this definition")
    
Return the value of the _Content-Type_ header’s parameter _param_ as a string. If the message has no _Content-Type_ header or if there is no such parameter, then _failobj_ is returned (defaults to `None`).
Optional _header_ if given, specifies the message header to use instead of _Content-Type_.
Parameter keys are always compared case insensitively. The return value can either be a string, or a 3-tuple if the parameter was [**RFC 2231**](https://datatracker.ietf.org/doc/html/rfc2231.html) encoded. When it’s a 3-tuple, the elements of the value are of the form `(CHARSET, LANGUAGE, VALUE)`. Note that both `CHARSET` and `LANGUAGE` can be `None`, in which case you should consider `VALUE` to be encoded in the `us-ascii` charset. You can usually ignore `LANGUAGE`.
If your application doesn’t care whether the parameter was encoded as in [**RFC 2231**](https://datatracker.ietf.org/doc/html/rfc2231.html), you can collapse the parameter value by calling [`email.utils.collapse_rfc2231_value()`](https://docs.python.org/3/library/email.utils.html#email.utils.collapse_rfc2231_value "email.utils.collapse_rfc2231_value"), passing in the return value from [`get_param()`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.get_param "email.message.Message.get_param"). This will return a suitably decoded Unicode string when the value is a tuple, or the original string unquoted if it isn’t. For example:
```
rawparam = msg.get_param('foo')
param = email.utils.collapse_rfc2231_value(rawparam)