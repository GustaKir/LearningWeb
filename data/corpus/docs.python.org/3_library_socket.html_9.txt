Title: Socket Constants and Creation Functions
URL: https://docs.python.org/3/library/socket.html
Summary: This section describes the constants used by the shutdown method in socket objects, specifically 'socket.SHUT_RDWR'. It also outlines functions for creating socket objects, including the main constructor 'socket.socket', which allows specification of address family, socket type, and protocol number.
---

socket.SHUT_RDWR[¶](https://docs.python.org/3/library/socket.html#socket.SHUT_RDWR "Link to this definition")
    
These constants are used by the [`shutdown()`](https://docs.python.org/3/library/socket.html#socket.socket.shutdown "socket.socket.shutdown") method of socket objects.
[Availability](https://docs.python.org/3/library/intro.html#availability): not WASI.
### Functions[¶](https://docs.python.org/3/library/socket.html#functions "Link to this heading")
#### Creating sockets[¶](https://docs.python.org/3/library/socket.html#creating-sockets "Link to this heading")
The following functions all create [socket objects](https://docs.python.org/3/library/socket.html#socket-objects). 

_class_ socket.socket(_family =AF_INET_, _type =SOCK_STREAM_, _proto =0_, _fileno =None_)[¶](https://docs.python.org/3/library/socket.html#socket.socket "Link to this definition")
    
Create a new socket using the given address family, socket type and protocol number. The address family should be [`AF_INET`](https://docs.python.org/3/library/socket.html#socket.AF_INET "socket.AF_INET") (the default), [`AF_INET6`](https://docs.python.org/3/library/socket.html#socket.AF_INET6 "socket.AF_INET6"), [`AF_UNIX`](https://docs.python.org/3/library/socket.html#socket.AF_UNIX "socket.AF_UNIX"), [`AF_CAN`](https://docs.python.org/3/library/socket.html#socket.AF_CAN "socket.AF_CAN"), [`AF_PACKET`](https://docs.python.org/3/library/socket.html#socket.AF_PACKET "socket.AF_PACKET"), or [`AF_RDS`](https://docs.python.org/3/library/socket.html#socket.AF_RDS "socket.AF_RDS"). The socket type should be [`SOCK_STREAM`](https://docs.python.org/3/library/socket.html#socket.SOCK_STREAM "socket.SOCK_STREAM") (the default), [`SOCK_DGRAM`](https://docs.python.org/3/library/socket.html#socket.SOCK_DGRAM "socket.SOCK_DGRAM"), [`SOCK_RAW`](https://docs.python.org/3/library/socket.html#socket.SOCK_RAW "socket.SOCK_RAW") or perhaps one of the other `SOCK_` constants. The protocol number is usually zero and may be omitted or in the case where the address family is [`AF_CAN`](https://docs.python.org/3/library/socket.html#socket.AF_CAN "socket.AF_CAN") the protocol should be one of `CAN_RAW`, [`CAN_BCM`](https://docs.python.org/3/library/socket.html#socket.CAN_BCM "socket.CAN_BCM"), [`CAN_ISOTP`](https://docs.python.org/3/library/socket.html#socket.CAN_ISOTP "socket.CAN_ISOTP") or [`CAN_J1939`](https://docs.python.org/3/library/socket.html#socket.CAN_J1939 "socket.CAN_J1939").
If _fileno_ is specified, the values for _family_ , _type_ , and _proto_ are auto-detected from the specified file descriptor. Auto-detection can be overruled by calling the function with explicit _family_ , _type_ , or _proto_ arguments. This only affects how Python represents e.g. the return value of [`socket.getpeername()`](https://docs.python.org/3/library/socket.html#socket.socket.getpeername "socket.socket.getpeername") but not the actual OS resource. Unlike [`socket.fromfd()`](https://docs.python.org/3/library/socket.html#socket.fromfd "socket.fromfd"), _fileno_ will return the same socket and not a duplicate. This may help close a detached socket using [`socket.close()`](https://docs.python.org/3/library/socket.html#socket.close "socket.close").
The newly created socket is [non-inheritable](https://docs.python.org/3/library/os.html#fd-inheritance).
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `socket.__new__` with arguments `self`, `family`, `type`, `protocol`.
Changed in version 3.3: The AF_CAN family was added. The AF_RDS family was added.
Changed in version 3.4: The CAN_BCM protocol was added.
Changed in version 3.4: The returned socket is now non-inheritable.
Changed in version 3.7: The CAN_ISOTP protocol was added.
Changed in version 3.7: When [`SOCK_NONBLOCK`](https://docs.python.org/3/library/socket.html#socket.SOCK_NONBLOCK "socket.SOCK_NONBLOCK") or [`SOCK_CLOEXEC`](https://docs.python.org/3/library/socket.html#socket.SOCK_CLOEXEC "socket.SOCK_CLOEXEC") bit flags are applied to _type_ they are cleared, and [`socket.type`](https://docs.python.org/3/library/socket.html#socket.socket.type "socket.socket.type") will not reflect them. They are still passed to the underlying system `socket()` call. Therefore,
```
sock = socket.socket(
  socket.AF_INET,
  socket.SOCK_STREAM | socket.SOCK_NONBLOCK)