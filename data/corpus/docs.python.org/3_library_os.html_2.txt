Title: Overview of the os Module in Python
URL: https://docs.python.org/3/library/os.html
Summary: The `os` module provides a way to interact with the operating system, including fetching the name of the OS via `os.name` which can return 'posix', 'nt', or 'java'. It is suggested to use `sys.platform` for finer granularity and `os.uname()` for system-dependent version information. Additionally, the `platform` module offers detailed identity checks of the system. The module also handles file names, command line arguments, and environment variables as strings.
---

os.name[¶](https://docs.python.org/3/library/os.html#os.name "Link to this definition")
    
The name of the operating system dependent module imported. The following names have currently been registered: `'posix'`, `'nt'`, `'java'`.
See also
[`sys.platform`](https://docs.python.org/3/library/sys.html#sys.platform "sys.platform") has a finer granularity. [`os.uname()`](https://docs.python.org/3/library/os.html#os.uname "os.uname") gives system-dependent version information.
The [`platform`](https://docs.python.org/3/library/platform.html#module-platform "platform: Retrieves as much platform identifying data as possible.") module provides detailed checks for the system’s identity.
## File Names, Command Line Arguments, and Environment Variables[¶](https://docs.python.org/3/library/os.html#file-names-command-line-arguments-and-environment-variables "Link to this heading")
In Python, file names, command line arguments, and environment variables are represented using the string type. On some systems, decoding these strings to and from bytes is necessary before passing them to the operating system. Python uses the [filesystem encoding and error handler](https://docs.python.org/3/glossary.html#term-filesystem-encoding-and-error-handler) to perform this conversion (see [`sys.getfilesystemencoding()`](https://docs.python.org/3/library/sys.html#sys.getfilesystemencoding "sys.getfilesystemencoding")).
The [filesystem encoding and error handler](https://docs.python.org/3/glossary.html#term-filesystem-encoding-and-error-handler) are configured at Python startup by the [`PyConfig_Read()`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig_Read "PyConfig_Read") function: see [`filesystem_encoding`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.filesystem_encoding "PyConfig.filesystem_encoding") and [`filesystem_errors`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.filesystem_errors "PyConfig.filesystem_errors") members of [`PyConfig`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig "PyConfig").
Changed in version 3.1: On some systems, conversion using the file system encoding may fail. In this case, Python uses the [surrogateescape encoding error handler](https://docs.python.org/3/library/codecs.html#surrogateescape), which means that undecodable bytes are replaced by a Unicode character U+DC _xx_ on decoding, and these are again translated to the original byte on encoding.
The [file system encoding](https://docs.python.org/3/glossary.html#term-filesystem-encoding-and-error-handler) must guarantee to successfully decode all bytes below 128. If the file system encoding fails to provide this guarantee, API functions can raise [`UnicodeError`](https://docs.python.org/3/library/exceptions.html#UnicodeError "UnicodeError").
See also the [locale encoding](https://docs.python.org/3/glossary.html#term-locale-encoding).
## Python UTF-8 Mode[¶](https://docs.python.org/3/library/os.html#python-utf-8-mode "Link to this heading")
Added in version 3.7: See [**PEP 540**](https://peps.python.org/pep-0540/) for more details.
The Python UTF-8 Mode ignores the [locale encoding](https://docs.python.org/3/glossary.html#term-locale-encoding) and forces the usage of the UTF-8 encoding:
  * Use UTF-8 as the [filesystem encoding](https://docs.python.org/3/glossary.html#term-filesystem-encoding-and-error-handler).
  * [`sys.getfilesystemencoding()`](https://docs.python.org/3/library/sys.html#sys.getfilesystemencoding "sys.getfilesystemencoding") returns `'utf-8'`.
  * [`locale.getpreferredencoding()`](https://docs.python.org/3/library/locale.html#locale.getpreferredencoding "locale.getpreferredencoding") returns `'utf-8'` (the _do_setlocale_ argument has no effect).
  * [`sys.stdin`](https://docs.python.org/3/library/sys.html#sys.stdin "sys.stdin"), [`sys.stdout`](https://docs.python.org/3/library/sys.html#sys.stdout "sys.stdout"), and [`sys.stderr`](https://docs.python.org/3/library/sys.html#sys.stderr "sys.stderr") all use UTF-8 as their text encoding, with the `surrogateescape` [error handler](https://docs.python.org/3/library/codecs.html#error-handlers) being enabled for [`sys.stdin`](https://docs.python.org/3/library/sys.html#sys.stdin "sys.stdin") and [`sys.stdout`](https://docs.python.org/3/library/sys.html#sys.stdout "sys.stdout") ([`sys.stderr`](https://docs.python.org/3/library/sys.html#sys.stderr "sys.stderr") continues to use `backslashreplace` as it does in the default locale-aware mode)
  * On Unix, [`os.device_encoding()`](https://docs.python.org/3/library/os.html#os.device_encoding "os.device_encoding") returns `'utf-8'` rather than the device encoding.