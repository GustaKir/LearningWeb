Title: Understanding Logger Hierarchy in Python Logging
URL: https://docs.python.org/3/howto/logging.html
Summary: This section explains that logger names reflect the package/module hierarchy, making it easy to identify the origin of logged events. It describes the root logger, which is the default logger used by various logging functions like `debug`, `info`, `warning`, `error`, and `critical`, and highlights that they share similar signatures. Additionally, it notes that different logging destinations can be utilized.
---

```

This means that logger names track the package/module hierarchy, and it’s intuitively obvious where events are logged just from the logger name.
The root of the hierarchy of loggers is called the root logger. That’s the logger used by the functions [`debug()`](https://docs.python.org/3/library/logging.html#logging.debug "logging.debug"), [`info()`](https://docs.python.org/3/library/logging.html#logging.info "logging.info"), [`warning()`](https://docs.python.org/3/library/logging.html#logging.warning "logging.warning"), [`error()`](https://docs.python.org/3/library/logging.html#logging.error "logging.error") and [`critical()`](https://docs.python.org/3/library/logging.html#logging.critical "logging.critical"), which just call the same-named method of the root logger. The functions and the methods have the same signatures. The root logger’s name is printed as ‘root’ in the logged output.
It is, of course, possible to log messages to different destinations. Support is included in the package for writing log messages to files, HTTP GET/POST locations, email via SMTP, generic sockets, queues, or OS-specific logging mechanisms such as syslog or the Windows NT event log. Destinations are served by _handler_ classes. You can create your own log destination class if you have special requirements not met by any of the built-in handler classes.
By default, no destination is set for any logging messages. You can specify a destination (such as console or file) by using [`basicConfig()`](https://docs.python.org/3/library/logging.html#logging.basicConfig "logging.basicConfig") as in the tutorial examples. If you call the functions [`debug()`](https://docs.python.org/3/library/logging.html#logging.debug "logging.debug"), [`info()`](https://docs.python.org/3/library/logging.html#logging.info "logging.info"), [`warning()`](https://docs.python.org/3/library/logging.html#logging.warning "logging.warning"), [`error()`](https://docs.python.org/3/library/logging.html#logging.error "logging.error") and [`critical()`](https://docs.python.org/3/library/logging.html#logging.critical "logging.critical"), they will check to see if no destination is set; and if one is not set, they will set a destination of the console (`sys.stderr`) and a default format for the displayed message before delegating to the root logger to do the actual message output.
The default format set by [`basicConfig()`](https://docs.python.org/3/library/logging.html#logging.basicConfig "logging.basicConfig") for messages is:
```
severity:logger name:message