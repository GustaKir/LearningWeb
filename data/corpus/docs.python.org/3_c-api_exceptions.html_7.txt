Title: PyErr_WarnExplicitObject Function Overview
URL: https://docs.python.org/3/c-api/exceptions.html
Summary: The PyErr_WarnExplicitObject function issues a warning message in Python with explicit control over all warning attributes. It serves as a wrapper around the warnings.warn_explicit function. The module and registry arguments can be set to NULL for default behavior.
---

intPyErr_WarnExplicitObject([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*category, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*message, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*filename, intlineno, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*module, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*registry)[¶](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_WarnExplicitObject "Link to this definition")
    
Issue a warning message with explicit control over all warning attributes. This is a straightforward wrapper around the Python function [`warnings.warn_explicit()`](https://docs.python.org/3/library/warnings.html#warnings.warn_explicit "warnings.warn_explicit"); see there for more information. The _module_ and _registry_ arguments may be set to `NULL` to get the default effect described there.
Added in version 3.4. 

intPyErr_WarnExplicit([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*category, constchar*message, constchar*filename, intlineno, constchar*module, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*registry)[¶](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_WarnExplicit "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Similar to [`PyErr_WarnExplicitObject()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_WarnExplicitObject "PyErr_WarnExplicitObject") except that _message_ and _module_ are UTF-8 encoded strings, and _filename_ is decoded from the [filesystem encoding and error handler](https://docs.python.org/3/glossary.html#term-filesystem-encoding-and-error-handler). 

intPyErr_WarnFormat([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*category, [Py_ssize_t](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")stack_level, constchar*format, ...)[¶](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_WarnFormat "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Function similar to [`PyErr_WarnEx()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_WarnEx "PyErr_WarnEx"), but use [`PyUnicode_FromFormat()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FromFormat "PyUnicode_FromFormat") to format the warning message. _format_ is an ASCII-encoded string.
Added in version 3.2. 

intPyErr_ResourceWarning([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*source, [Py_ssize_t](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")stack_level, constchar*format, ...)[¶](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_ResourceWarning "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.6._
Function similar to [`PyErr_WarnFormat()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_WarnFormat "PyErr_WarnFormat"), but _category_ is [`ResourceWarning`](https://docs.python.org/3/library/exceptions.html#ResourceWarning "ResourceWarning") and it passes _source_ to `warnings.WarningMessage`.
Added in version 3.6.
## Querying the error indicator[¶](https://docs.python.org/3/c-api/exceptions.html#querying-the-error-indicator "Link to this heading") 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyErr_Occurred()[¶](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_Occurred "Link to this definition")
    _Return value: Borrowed reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Test whether the error indicator is set. If set, return the exception _type_ (the first argument to the last call to one of the `PyErr_Set*` functions or to [`PyErr_Restore()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_Restore "PyErr_Restore")). If not set, return `NULL`. You do not own a reference to the return value, so you do not need to [`Py_DECREF()`](https://docs.python.org/3/c-api/refcounting.html#c.Py_DECREF "Py_DECREF") it.
The caller must hold the GIL.
Note
Do not compare the return value to a specific exception; use [`PyErr_ExceptionMatches()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_ExceptionMatches "PyErr_ExceptionMatches") instead, shown below. (The comparison could easily fail since the exception may be an instance instead of a class, in the case of a class exception, or it may be a subclass of the expected exception.)