Title: os.symlink Function in Python
URL: https://docs.python.org/3/library/os.html
Summary: The os.symlink function creates a symbolic link named _dst_ pointing to _src_. On Windows, the symlink can represent either a file or a directory, determined by the _target_is_directory_ parameter. On non-Windows platforms, this parameter is ignored. Recent versions of Windows 10 allow unprivileged users to create symlinks with Developer Mode enabled.
---

```

Added in version 3.3. 

os.symlink(_src_ , _dst_ , _target_is_directory =False_, _*_ , _dir_fd =None_)[¶](https://docs.python.org/3/library/os.html#os.symlink "Link to this definition")
    
Create a symbolic link pointing to _src_ named _dst_.
On Windows, a symlink represents either a file or a directory, and does not morph to the target dynamically. If the target is present, the type of the symlink will be created to match. Otherwise, the symlink will be created as a directory if _target_is_directory_ is `True` or a file symlink (the default) otherwise. On non-Windows platforms, _target_is_directory_ is ignored.
This function can support [paths relative to directory descriptors](https://docs.python.org/3/library/os.html#dir-fd).
Note
On newer versions of Windows 10, unprivileged accounts can create symlinks if Developer Mode is enabled. When Developer Mode is not available/enabled, the _SeCreateSymbolicLinkPrivilege_ privilege is required, or the process must be run as an administrator.
[`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") is raised when the function is called by an unprivileged user.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.symlink` with arguments `src`, `dst`, `dir_fd`.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, Windows.
The function is limited on WASI, see [WebAssembly platforms](https://docs.python.org/3/library/intro.html#wasm-availability) for more information.
Changed in version 3.2: Added support for Windows 6.0 (Vista) symbolic links.
Changed in version 3.3: Added the _dir_fd_ parameter, and now allow _target_is_directory_ on non-Windows platforms.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object) for _src_ and _dst_.
Changed in version 3.8: Added support for unelevated symlinks on Windows with Developer Mode. 

os.sync()[¶](https://docs.python.org/3/library/os.html#os.sync "Link to this definition")
    
Force write of everything to disk.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix.
Added in version 3.3. 

os.truncate(_path_ , _length_)[¶](https://docs.python.org/3/library/os.html#os.truncate "Link to this definition")
    
Truncate the file corresponding to _path_ , so that it is at most _length_ bytes in size.
This function can support [specifying a file descriptor](https://docs.python.org/3/library/os.html#path-fd).
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.truncate` with arguments `path`, `length`.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, Windows.
Added in version 3.3.
Changed in version 3.5: Added support for Windows
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). 

os.unlink(_path_ , _*_ , _dir_fd =None_)[¶](https://docs.python.org/3/library/os.html#os.unlink "Link to this definition")
    
Remove (delete) the file _path_. This function is semantically identical to [`remove()`](https://docs.python.org/3/library/os.html#os.remove "os.remove"); the `unlink` name is its traditional Unix name. Please see the documentation for [`remove()`](https://docs.python.org/3/library/os.html#os.remove "os.remove") for further information.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.remove` with arguments `path`, `dir_fd`.
Changed in version 3.3: Added the _dir_fd_ parameter.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). 

os.utime(_path_ , _times=None_ , _*_ , [_ns_ , ]_dir_fd=None_ , _follow_symlinks=True_)[¶](https://docs.python.org/3/library/os.html#os.utime "Link to this definition")
    
Set the access and modified times of the file specified by _path_.
[`utime()`](https://docs.python.org/3/library/os.html#os.utime "os.utime") takes two optional parameters, _times_ and _ns_. These specify the times set on _path_ and are used as follows:
  * If _ns_ is specified, it must be a 2-tuple of the form `(atime_ns, mtime_ns)` where each member is an int expressing nanoseconds.
  * If _times_ is not `None`, it must be a 2-tuple of the form `(atime, mtime)` where each member is an int or float expressing seconds.
  * If _times_ is `None` and _ns_ is unspecified, this is equivalent to specifying `ns=(atime_ns, mtime_ns)` where both times are the current time.