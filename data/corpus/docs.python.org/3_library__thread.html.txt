Title: _thread — Low-Level Threading API
URL: https://docs.python.org/3/library/_thread.html
Summary: The document covers the low-level threading API in Python, which provides basic thread support. It discusses the methods and functionalities to create and manage threads and sets the foundation for higher-level threading modules. Navigation links to related topics, previous and next sections, as well as resources for reporting bugs and accessing source code, are included.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
#### Previous topic
[`contextvars` — Context Variables](https://docs.python.org/3/library/contextvars.html "previous chapter")
#### Next topic
[Networking and Interprocess Communication](https://docs.python.org/3/library/ipc.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/_thread.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/ipc.html "Networking and Interprocess Communication") |
  * [previous](https://docs.python.org/3/library/contextvars.html "contextvars — Context Variables") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Concurrent Execution](https://docs.python.org/3/library/concurrency.html) »
  * [`_thread` — Low-level threading API](https://docs.python.org/3/library/_thread.html)
  * | 
  * Theme  Auto Light Dark |


# `_thread` — Low-level threading API[¶](https://docs.python.org/3/library/_thread.html#module-_thread "Link to this heading")
This module provides low-level primitives for working with multiple threads (also called _light-weight processes_ or _tasks_) — multiple threads of control sharing their global data space. For synchronization, simple locks (also called _mutexes_ or _binary semaphores_) are provided. The [`threading`](https://docs.python.org/3/library/threading.html#module-threading "threading: Thread-based parallelism.") module provides an easier to use and higher-level threading API built on top of this module.
Changed in version 3.7: This module used to be optional, it is now always available.
This module defines the following constants and functions: 

_exception_ _thread.error[¶](https://docs.python.org/3/library/_thread.html#thread.error "Link to this definition")
    
Raised on thread-specific errors.
Changed in version 3.3: This is now a synonym of the built-in [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError"). 

_thread.LockType[¶](https://docs.python.org/3/library/_thread.html#thread.LockType "Link to this definition")
    
This is the type of lock objects. 

_thread.start_new_thread(_function_ , _args_[, _kwargs_])[¶](https://docs.python.org/3/library/_thread.html#thread.start_new_thread "Link to this definition")
    
Start a new thread and return its identifier. The thread executes the function _function_ with the argument list _args_ (which must be a tuple). The optional _kwargs_ argument specifies a dictionary of keyword arguments.
When the function returns, the thread silently exits.
When the function terminates with an unhandled exception, [`sys.unraisablehook()`](https://docs.python.org/3/library/sys.html#sys.unraisablehook "sys.unraisablehook") is called to handle the exception. The _object_ attribute of the hook argument is _function_. By default, a stack trace is printed and then the thread exits (but other threads continue to run).
When the function raises a [`SystemExit`](https://docs.python.org/3/library/exceptions.html#SystemExit "SystemExit") exception, it is silently ignored.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `_thread.start_new_thread` with arguments `function`, `args`, `kwargs`.
Changed in version 3.8: [`sys.unraisablehook()`](https://docs.python.org/3/library/sys.html#sys.unraisablehook "sys.unraisablehook") is now used to handle unhandled exceptions.