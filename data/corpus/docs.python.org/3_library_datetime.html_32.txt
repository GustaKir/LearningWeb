Title: Usage of tzinfo.fromutc() in Python Datetime Module
URL: https://docs.python.org/3/library/datetime.html
Summary: The `tzinfo.fromutc()` method is utilized by the default `datetime.astimezone()` implementation to convert a datetime from UTC to local time. It adjusts the datetime data and is designed to be inherited by most `tzinfo` subclasses, effectively managing fixed-offset time zones.
---

tzinfo.fromutc(_dt_)[¶](https://docs.python.org/3/library/datetime.html#datetime.tzinfo.fromutc "Link to this definition")
    
This is called from the default [`datetime.astimezone()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.astimezone "datetime.datetime.astimezone") implementation. When called from that, `dt.tzinfo` is _self_ , and _dt_ ’s date and time data are to be viewed as expressing a UTC time. The purpose of [`fromutc()`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo.fromutc "datetime.tzinfo.fromutc") is to adjust the date and time data, returning an equivalent datetime in _self_ ’s local time.
Most [`tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo "datetime.tzinfo") subclasses should be able to inherit the default [`fromutc()`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo.fromutc "datetime.tzinfo.fromutc") implementation without problems. It’s strong enough to handle fixed-offset time zones, and time zones accounting for both standard and daylight time, and the latter even if the DST transition times differ in different years. An example of a time zone the default [`fromutc()`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo.fromutc "datetime.tzinfo.fromutc") implementation may not handle correctly in all cases is one where the standard offset (from UTC) depends on the specific date and time passed, which can happen for political reasons. The default implementations of [`astimezone()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.astimezone "datetime.datetime.astimezone") and [`fromutc()`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo.fromutc "datetime.tzinfo.fromutc") may not produce the result you want if the result is one of the hours straddling the moment the standard offset changes.
Skipping code for error cases, the default [`fromutc()`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo.fromutc "datetime.tzinfo.fromutc") implementation acts like:
```
deffromutc(self, dt):
  # raise ValueError error if dt.tzinfo is not self
  dtoff = dt.utcoffset()
  dtdst = dt.dst()
  # raise ValueError if dtoff is None or dtdst is None
  delta = dtoff - dtdst # this is self's standard offset
  if delta:
    dt += delta  # convert to standard local time
    dtdst = dt.dst()
    # raise ValueError if dtdst is None
  if dtdst:
    return dt + dtdst
  else:
    return dt

```

In the following [`tzinfo_examples.py`](https://docs.python.org/3/_downloads/6dc1f3f4f0e6ca13cb42ddf4d6cbc8af/tzinfo_examples.py) file there are some examples of [`tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo "datetime.tzinfo") classes: