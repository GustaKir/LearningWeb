Title: Using the Limited API in Python C Extensions
URL: https://docs.python.org/3/c-api/stable.html
Summary: Define the `Py_LIMITED_API` macro before including `Python.h` to use the Limited API and specify its version. Set it to the value of `PY_VERSION_HEX` for the lowest supported Python version, or hardcode a minimum version for stability. Alternatively, defining it as `3` corresponds to Python 3.2.
---

Py_LIMITED_API[¶](https://docs.python.org/3/c-api/stable.html#c.Py_LIMITED_API "Link to this definition")
    
Define this macro before including `Python.h` to opt in to only use the Limited API, and to select the Limited API version.
Define `Py_LIMITED_API` to the value of [`PY_VERSION_HEX`](https://docs.python.org/3/c-api/apiabiversion.html#c.PY_VERSION_HEX "PY_VERSION_HEX") corresponding to the lowest Python version your extension supports. The extension will be ABI-compatible with all Python 3 releases from the specified one onward, and can use Limited API introduced up to that version.
Rather than using the `PY_VERSION_HEX` macro directly, hardcode a minimum minor version (e.g. `0x030A0000` for Python 3.10) for stability when compiling with future Python versions.
You can also define `Py_LIMITED_API` to `3`. This works the same as `0x03020000` (Python 3.2, the version that introduced Limited API).
### Stable ABI[¶](https://docs.python.org/3/c-api/stable.html#stable-abi "Link to this heading")
To enable this, Python provides a _Stable ABI_ : a set of symbols that will remain ABI-compatible across Python 3.x versions.
Note
The Stable ABI prevents ABI issues, like linker errors due to missing symbols or data corruption due to changes in structure layouts or function signatures. However, other changes in Python can change the _behavior_ of extensions. See Python’s Backwards Compatibility Policy ([**PEP 387**](https://peps.python.org/pep-0387/)) for details.
The Stable ABI contains symbols exposed in the [Limited API](https://docs.python.org/3/c-api/stable.html#limited-c-api), but also other ones – for example, functions necessary to support older versions of the Limited API.
On Windows, extensions that use the Stable ABI should be linked against `python3.dll` rather than a version-specific library such as `python39.dll`.
On some platforms, Python will look for and load shared library files named with the `abi3` tag (e.g. `mymodule.abi3.so`). It does not check if such extensions conform to a Stable ABI. The user (or their packaging tools) need to ensure that, for example, extensions built with the 3.10+ Limited API are not installed for lower versions of Python.
All functions in the Stable ABI are present as functions in Python’s shared library, not solely as macros. This makes them usable from languages that don’t use the C preprocessor.
### Limited API Scope and Performance[¶](https://docs.python.org/3/c-api/stable.html#limited-api-scope-and-performance "Link to this heading")
The goal for the Limited API is to allow everything that is possible with the full C API, but possibly with a performance penalty.
For example, while [`PyList_GetItem()`](https://docs.python.org/3/c-api/list.html#c.PyList_GetItem "PyList_GetItem") is available, its “unsafe” macro variant [`PyList_GET_ITEM()`](https://docs.python.org/3/c-api/list.html#c.PyList_GET_ITEM "PyList_GET_ITEM") is not. The macro can be faster because it can rely on version-specific implementation details of the list object.
Without `Py_LIMITED_API` defined, some C API functions are inlined or replaced by macros. Defining `Py_LIMITED_API` disables this inlining, allowing stability as Python’s data structures are improved, but possibly reducing performance.
By leaving out the `Py_LIMITED_API` definition, it is possible to compile a Limited API extension with a version-specific ABI. This can improve performance for that Python version, but will limit compatibility. Compiling with `Py_LIMITED_API` will then yield an extension that can be distributed where a version-specific one is not available – for example, for prereleases of an upcoming Python version.
### Limited API Caveats[¶](https://docs.python.org/3/c-api/stable.html#limited-api-caveats "Link to this heading")
Note that compiling with `Py_LIMITED_API` is _not_ a complete guarantee that code conforms to the [Limited API](https://docs.python.org/3/c-api/stable.html#limited-c-api) or the [Stable ABI](https://docs.python.org/3/c-api/stable.html#stable-abi). `Py_LIMITED_API` only covers definitions, but an API also includes other issues, such as expected semantics.
One issue that `Py_LIMITED_API` does not guard against is calling a function with arguments that are invalid in a lower Python version. For example, consider a function that starts accepting `NULL` for an argument. In Python 3.9, `NULL` now selects a default behavior, but in Python 3.8, the argument will be used directly, causing a `NULL` dereference and crash. A similar argument works for fields of structs.
Another issue is that some struct fields are currently not hidden when `Py_LIMITED_API` is defined, even though they’re part of the Limited API.
For these reasons, we recommend testing an extension with _all_ minor Python versions it supports, and preferably to build with the _lowest_ such version.
We also recommend reviewing documentation of all used API to check if it is explicitly part of the Limited API. Even with `Py_LIMITED_API` define