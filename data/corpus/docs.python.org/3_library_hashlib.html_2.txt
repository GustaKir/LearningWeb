Title: hashlib Library Overview
URL: https://docs.python.org/3/library/hashlib.html
Summary: The hashlib library includes constructors for various hash algorithms introduced in different Python versions, including SHA3 (Keccak), SHAKE, and Blake2. Significant changes in version 3.9 were made to allow all constructors to accept keyword arguments.
---

hlib-seealso) section at the end of this document.
Added in version 3.6: SHA3 (Keccak) and SHAKE constructors [`sha3_224()`](https://docs.python.org/3/library/hashlib.html#hashlib.sha3_224 "hashlib.sha3_224"), [`sha3_256()`](https://docs.python.org/3/library/hashlib.html#hashlib.sha3_256 "hashlib.sha3_256"), [`sha3_384()`](https://docs.python.org/3/library/hashlib.html#hashlib.sha3_384 "hashlib.sha3_384"), [`sha3_512()`](https://docs.python.org/3/library/hashlib.html#hashlib.sha3_512 "hashlib.sha3_512"), [`shake_128()`](https://docs.python.org/3/library/hashlib.html#hashlib.shake_128 "hashlib.shake_128"), [`shake_256()`](https://docs.python.org/3/library/hashlib.html#hashlib.shake_256 "hashlib.shake_256") were added. [`blake2b()`](https://docs.python.org/3/library/hashlib.html#hashlib.blake2b "hashlib.blake2b") and [`blake2s()`](https://docs.python.org/3/library/hashlib.html#hashlib.blake2s "hashlib.blake2s") were added.
Changed in version 3.9: All hashlib constructors take a keyword-only argument _usedforsecurity_ with default value `True`. A false value allows the use of insecure and blocked hashing algorithms in restricted environments. `False` indicates that the hashing algorithm is not used in a security context, e.g. as a non-cryptographic one-way compression function.
Changed in version 3.9: Hashlib now uses SHA3 and SHAKE from OpenSSL if it provides it.
Changed in version 3.12: For any of the MD5, SHA1, SHA2, or SHA3 algorithms that the linked OpenSSL does not provide we fall back to a verified implementation from the [HACL* project](https://github.com/hacl-star/hacl-star).
## Usage[¶](https://docs.python.org/3/library/hashlib.html#usage "Link to this heading")
To obtain the digest of the byte string `b"Nobody inspects the spammish repetition"`:
>>>```
>>> importhashlib
>>> m = hashlib.sha256()
>>> m.update(b"Nobody inspects")
>>> m.update(b" the spammish repetition")
>>> m.digest()
b'\x03\x1e\xdd}Ae\x15\x93\xc5\xfe\\\x00o\xa5u+7\xfd\xdf\xf7\xbcN\x84:\xa6\xaf\x0c\x95\x0fK\x94\x06'
>>> m.hexdigest()
'031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406'

```

More condensed:
>>>```
>>> hashlib.sha256(b"Nobody inspects the spammish repetition").hexdigest()
'031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406'

```

## Constructors[¶](https://docs.python.org/3/library/hashlib.html#constructors "Link to this heading") 

hashlib.new(_name_ , [_data_ , ]_*_ , _usedforsecurity=True_)[¶](https://docs.python.org/3/library/hashlib.html#hashlib.new "Link to this definition")
    
Is a generic constructor that takes the string _name_ of the desired algorithm as its first parameter. It also exists to allow access to the above listed hashes as well as any other algorithms that your OpenSSL library may offer.
Using [`new()`](https://docs.python.org/3/library/hashlib.html#hashlib.new "hashlib.new") with an algorithm name:
>>>```
>>> h = hashlib.new('sha256')
>>> h.update(b"Nobody inspects the spammish repetition")
>>> h.hexdigest()
'031edd7d41651593c5fe5c006fa5752b37fddff7bc4e843aa6af0c950f4b9406'