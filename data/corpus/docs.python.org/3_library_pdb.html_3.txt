Title: Pdb Class: Python Debugger
URL: https://docs.python.org/3/library/pdb.html
Summary: The Pdb class is Python's debugger, allowing developers to set up a debugging environment. It accepts parameters such as completekey, stdin, stdout, and skip for customizing functionality. The skip parameter can be used to avoid stepping into specific module frames based on glob-style patterns. Additionally, it handles SIGINT signals for interrupting execution.
---

_class_ pdb.Pdb(_completekey ='tab'_, _stdin =None_, _stdout =None_, _skip =None_, _nosigint =False_, _readrc =True_)[¶](https://docs.python.org/3/library/pdb.html#pdb.Pdb "Link to this definition")
    
[`Pdb`](https://docs.python.org/3/library/pdb.html#pdb.Pdb "pdb.Pdb") is the debugger class.
The _completekey_ , _stdin_ and _stdout_ arguments are passed to the underlying [`cmd.Cmd`](https://docs.python.org/3/library/cmd.html#cmd.Cmd "cmd.Cmd") class; see the description there.
The _skip_ argument, if given, must be an iterable of glob-style module name patterns. The debugger will not step into frames that originate in a module that matches one of these patterns. [[1]](https://docs.python.org/3/library/pdb.html#id3)
By default, Pdb sets a handler for the SIGINT signal (which is sent when the user presses `Ctrl`-`C` on the console) when you give a [`continue`](https://docs.python.org/3/library/pdb.html#pdbcommand-continue) command. This allows you to break into the debugger again by pressing `Ctrl`-`C`. If you want Pdb not to touch the SIGINT handler, set _nosigint_ to true.
The _readrc_ argument defaults to true and controls whether Pdb will load .pdbrc files from the filesystem.
Example call to enable tracing with _skip_ :
```
importpdb; pdb.Pdb(skip=['django.*']).set_trace()

```

Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `pdb.Pdb` with no arguments.
Changed in version 3.1: Added the _skip_ parameter.
Changed in version 3.2: Added the _nosigint_ parameter. Previously, a SIGINT handler was never set by Pdb.
Changed in version 3.6: The _readrc_ argument. 

run(_statement_ , _globals =None_, _locals =None_)[¶](https://docs.python.org/3/library/pdb.html#pdb.Pdb.run "Link to this definition")


runeval(_expression_ , _globals =None_, _locals =None_)[¶](https://docs.python.org/3/library/pdb.html#pdb.Pdb.runeval "Link to this definition")


runcall(_function_ , _* args_, _** kwds_)[¶](https://docs.python.org/3/library/pdb.html#pdb.Pdb.runcall "Link to this definition")


set_trace()[¶](https://docs.python.org/3/library/pdb.html#pdb.Pdb.set_trace "Link to this definition")
    
See the documentation for the functions explained above.
## Debugger Commands[¶](https://docs.python.org/3/library/pdb.html#debugger-commands "Link to this heading")
The commands recognized by the debugger are listed below. Most commands can be abbreviated to one or two letters as indicated; e.g. `h(elp)` means that either `h` or `help` can be used to enter the help command (but not `he` or `hel`, nor `H` or `Help` or `HELP`). Arguments to commands must be separated by whitespace (spaces or tabs). Optional arguments are enclosed in square brackets (`[]`) in the command syntax; the square brackets must not be typed. Alternatives in the command syntax are separated by a vertical bar (`|`).
Entering a blank line repeats the last command entered. Exception: if the last command was a [`list`](https://docs.python.org/3/library/pdb.html#pdbcommand-list) command, the next 11 lines are listed.
Commands that the debugger doesn’t recognize are assumed to be Python statements and are executed in the context of the program being debugged. Python statements can also be prefixed with an exclamation point (`!`). This is a powerful way to inspect the program being debugged; it is even possible to change a variable or call a function. When an exception occurs in such a statement, the exception name is printed but the debugger’s state is not changed.
Changed in version 3.13: Expressions/Statements whose prefix is a pdb command are now correctly identified and executed.
The debugger supports [aliases](https://docs.python.org/3/library/pdb.html#debugger-aliases). Aliases can have parameters which allows one a certain level of adaptability to the context under examination.
Multiple commands may be entered on a single line, separated by `;;`. (A single `;` is not used as it is the separator for multiple commands in a line that is passed to the Python parser.) No intelligence is applied to separating the commands; the input is split at the first `;;` pair, even if it is in the middle of a quoted string. A workaround for strings with double semicolons is to use implicit string concatenation `';'';'` or `";"";"`.
To set a temporary global variable, use a _convenience variable_. A _convenience variable_ is a variable whose name starts with `$`. For example, `$foo = 1` sets a global variable `$foo` which you can use in the debugger session. The _convenience variables_ are cleared when the program resumes execution so it’s less likely to interfere with your program compared to using normal variables like `foo = 1`.
There are three preset _convenience variables_ :
  * `$_frame`: the current frame you are debugging
  * `$_retval`: the return value if the frame is returning
  * `$_exception`: the exception if the frame is raising an exception