Title: Python 3.3 Features: Enhancements to datetime
URL: https://docs.python.org/3/whatsnew/3.3.html
Summary: In Python 3.3, equality comparisons between naive and aware datetime instances now return False instead of raising TypeError. A new method, datetime.datetime.timestamp(), was introduced to return the POSIX timestamp for a datetime instance.
---

(Contributed by Iñigo Serna in [bpo-6755](https://bugs.python.org/issue?@action=redirect&bpo=6755).)
### datetime[¶](https://docs.python.org/3/whatsnew/3.3.html#datetime "Link to this heading")
  * Equality comparisons between naive and aware [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") instances now return [`False`](https://docs.python.org/3/library/constants.html#False "False") instead of raising [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") ([bpo-15006](https://bugs.python.org/issue?@action=redirect&bpo=15006)).
  * New [`datetime.datetime.timestamp()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.timestamp "datetime.datetime.timestamp") method: Return POSIX timestamp corresponding to the [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") instance.
  * The [`datetime.datetime.strftime()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.strftime "datetime.datetime.strftime") method supports formatting years older than 1000.
  * The [`datetime.datetime.astimezone()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.astimezone "datetime.datetime.astimezone") method can now be called without arguments to convert datetime instance to the system timezone.


### decimal[¶](https://docs.python.org/3/whatsnew/3.3.html#decimal "Link to this heading") 

[bpo-7652](https://bugs.python.org/issue?@action=redirect&bpo=7652) - integrate fast native decimal arithmetic.
    
C-module and libmpdec written by Stefan Krah.
The new C version of the decimal module integrates the high speed libmpdec library for arbitrary precision correctly rounded decimal floating-point arithmetic. libmpdec conforms to IBM’s General Decimal Arithmetic Specification.
Performance gains range from 10x for database applications to 100x for numerically intensive applications. These numbers are expected gains for standard precisions used in decimal floating-point arithmetic. Since the precision is user configurable, the exact figures may vary. For example, in integer bignum arithmetic the differences can be significantly higher.
The following table is meant as an illustration. Benchmarks are available at <https://www.bytereef.org/mpdecimal/quickstart.html>.
> | decimal.py | _decimal | speedup  
> ---|---|---|---  
> pi | 42.02s | 0.345s | 120x  
> telco | 172.19s | 5.68s | 30x  
> psycopg | 3.57s | 0.29s | 12x  
#### Features[¶](https://docs.python.org/3/whatsnew/3.3.html#id1 "Link to this heading")
  * The [`FloatOperation`](https://docs.python.org/3/library/decimal.html#decimal.FloatOperation "decimal.FloatOperation") signal optionally enables stricter semantics for mixing floats and Decimals.
  * If Python is compiled without threads, the C version automatically disables the expensive thread local context machinery. In this case, the variable [`HAVE_THREADS`](https://docs.python.org/3/library/decimal.html#decimal.HAVE_THREADS "decimal.HAVE_THREADS") is set to `False`.