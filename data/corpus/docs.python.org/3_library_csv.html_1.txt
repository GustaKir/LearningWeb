Title: CSV File API in Python
URL: https://docs.python.org/3/library/csv.html
Summary: This documentation covers the `csv` module in Python, which is designed for reading and writing tabular data in delimited files. It includes the `csv.reader` function that processes lines from a specified CSV file, which can be an iterable of strings or a file-like object. The document refers to PEP 305, which proposed this enhancement.
---

[**PEP 305**](https://peps.python.org/pep-0305/) - CSV File API
    
The Python Enhancement Proposal which proposed this addition to Python.
## Module Contents[¶](https://docs.python.org/3/library/csv.html#module-contents "Link to this heading")
The [`csv`](https://docs.python.org/3/library/csv.html#module-csv "csv: Write and read tabular data to and from delimited files.") module defines the following functions: 

csv.reader(_csvfile_ , _dialect ='excel'_, _** fmtparams_)[¶](https://docs.python.org/3/library/csv.html#csv.reader "Link to this definition")
    
Return a [reader object](https://docs.python.org/3/library/csv.html#reader-objects) that will process lines from the given _csvfile_. A csvfile must be an iterable of strings, each in the reader’s defined csv format. A csvfile is most commonly a file-like object or list. If _csvfile_ is a file object, it should be opened with `newline=''`. [[1]](https://docs.python.org/3/library/csv.html#id4) An optional _dialect_ parameter can be given which is used to define a set of parameters specific to a particular CSV dialect. It may be an instance of a subclass of the [`Dialect`](https://docs.python.org/3/library/csv.html#csv.Dialect "csv.Dialect") class or one of the strings returned by the [`list_dialects()`](https://docs.python.org/3/library/csv.html#csv.list_dialects "csv.list_dialects") function. The other optional _fmtparams_ keyword arguments can be given to override individual formatting parameters in the current dialect. For full details about the dialect and formatting parameters, see section [Dialects and Formatting Parameters](https://docs.python.org/3/library/csv.html#csv-fmt-params).
Each row read from the csv file is returned as a list of strings. No automatic data type conversion is performed unless the `QUOTE_NONNUMERIC` format option is specified (in which case unquoted fields are transformed into floats).
A short usage example:
>>>```
>>> importcsv
>>> with open('eggs.csv', newline='') as csvfile:
...   spamreader = csv.reader(csvfile, delimiter=' ', quotechar='|')
...   for row in spamreader:
...     print(', '.join(row))
Spam, Spam, Spam, Spam, Spam, Baked Beans
Spam, Lovely Spam, Wonderful Spam

```


csv.writer(_csvfile_ , _dialect ='excel'_, _** fmtparams_)[¶](https://docs.python.org/3/library/csv.html#csv.writer "Link to this definition")
    
Return a writer object responsible for converting the user’s data into delimited strings on the given file-like object. _csvfile_ can be any object with a [`write()`](https://docs.python.org/3/library/io.html#io.TextIOBase.write "io.TextIOBase.write") method. If _csvfile_ is a file object, it should be opened with `newline=''` [[1]](https://docs.python.org/3/library/csv.html#id4). An optional _dialect_ parameter can be given which is used to define a set of parameters specific to a particular CSV dialect. It may be an instance of a subclass of the [`Dialect`](https://docs.python.org/3/library/csv.html#csv.Dialect "csv.Dialect") class or one of the strings returned by the [`list_dialects()`](https://docs.python.org/3/library/csv.html#csv.list_dialects "csv.list_dialects") function. The other optional _fmtparams_ keyword arguments can be given to override individual formatting parameters in the current dialect. For full details about dialects and formatting parameters, see the [Dialects and Formatting Parameters](https://docs.python.org/3/library/csv.html#csv-fmt-params) section. To make it as easy as possible to interface with modules which implement the DB API, the value [`None`](https://docs.python.org/3/library/constants.html#None "None") is written as the empty string. While this isn’t a reversible transformation, it makes it easier to dump SQL NULL data values to CSV files without preprocessing the data returned from a `cursor.fetch*` call. All other non-string data are stringified with [`str()`](https://docs.python.org/3/library/stdtypes.html#str "str") before being written.
A short usage example:
```
importcsv
with open('eggs.csv', 'w', newline='') as csvfile:
  spamwriter = csv.writer(csvfile, delimiter=' ',
              quotechar='|', quoting=csv.QUOTE_MINIMAL)
  spamwriter.writerow(['Spam'] * 5 + ['Baked Beans'])
  spamwriter.writerow(['Spam', 'Lovely Spam', 'Wonderful Spam'])