Title: OS Module Wait Options
URL: https://docs.python.org/3/library/os.html
Summary: This section discusses two options for process waiting in the OS module: os.WNOHANG, which allows functions like waitpid to return immediately if no child process status is available, and os.WNOWAIT, which keeps the child in a waitable state for future status retrieval.
---

os.WNOHANG[¶](https://docs.python.org/3/library/os.html#os.WNOHANG "Link to this definition")
    
This _options_ flag causes [`waitpid()`](https://docs.python.org/3/library/os.html#os.waitpid "os.waitpid"), [`wait3()`](https://docs.python.org/3/library/os.html#os.wait3 "os.wait3"), [`wait4()`](https://docs.python.org/3/library/os.html#os.wait4 "os.wait4"), and [`waitid()`](https://docs.python.org/3/library/os.html#os.waitid "os.waitid") to return right away if no child process status is available immediately.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI, not Android, not iOS. 

os.WNOWAIT[¶](https://docs.python.org/3/library/os.html#os.WNOWAIT "Link to this definition")
    
This _options_ flag causes [`waitid()`](https://docs.python.org/3/library/os.html#os.waitid "os.waitid") to leave the child in a waitable state, so that a later `wait*()` call can be used to retrieve the child status information again.
This option is not available for the other `wait*` functions.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI, not Android, not iOS. 

os.CLD_EXITED[¶](https://docs.python.org/3/library/os.html#os.CLD_EXITED "Link to this definition")


os.CLD_KILLED[¶](https://docs.python.org/3/library/os.html#os.CLD_KILLED "Link to this definition")


os.CLD_DUMPED[¶](https://docs.python.org/3/library/os.html#os.CLD_DUMPED "Link to this definition")


os.CLD_TRAPPED[¶](https://docs.python.org/3/library/os.html#os.CLD_TRAPPED "Link to this definition")


os.CLD_STOPPED[¶](https://docs.python.org/3/library/os.html#os.CLD_STOPPED "Link to this definition")


os.CLD_CONTINUED[¶](https://docs.python.org/3/library/os.html#os.CLD_CONTINUED "Link to this definition")
    
These are the possible values for `si_code` in the result returned by [`waitid()`](https://docs.python.org/3/library/os.html#os.waitid "os.waitid").
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI, not Android, not iOS.
Added in version 3.3.
Changed in version 3.9: Added [`CLD_KILLED`](https://docs.python.org/3/library/os.html#os.CLD_KILLED "os.CLD_KILLED") and [`CLD_STOPPED`](https://docs.python.org/3/library/os.html#os.CLD_STOPPED "os.CLD_STOPPED") values. 

os.waitstatus_to_exitcode(_status_)[¶](https://docs.python.org/3/library/os.html#os.waitstatus_to_exitcode "Link to this definition")
    
Convert a wait status to an exit code.
On Unix:
  * If the process exited normally (if `WIFEXITED(status)` is true), return the process exit status (return `WEXITSTATUS(status)`): result greater than or equal to 0.
  * If the process was terminated by a signal (if `WIFSIGNALED(status)` is true), return `-signum` where _signum_ is the number of the signal that caused the process to terminate (return `-WTERMSIG(status)`): result less than 0.
  * Otherwise, raise a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError").


On Windows, return _status_ shifted right by 8 bits.
On Unix, if the process is being traced or if [`waitpid()`](https://docs.python.org/3/library/os.html#os.waitpid "os.waitpid") was called with [`WUNTRACED`](https://docs.python.org/3/library/os.html#os.WUNTRACED "os.WUNTRACED") option, the caller must first check if `WIFSTOPPED(status)` is true. This function must not be called if `WIFSTOPPED(status)` is true.
See also
[`WIFEXITED()`](https://docs.python.org/3/library/os.html#os.WIFEXITED "os.WIFEXITED"), [`WEXITSTATUS()`](https://docs.python.org/3/library/os.html#os.WEXITSTATUS "os.WEXITSTATUS"), [`WIFSIGNALED()`](https://docs.python.org/3/library/os.html#os.WIFSIGNALED "os.WIFSIGNALED"), [`WTERMSIG()`](https://docs.python.org/3/library/os.html#os.WTERMSIG "os.WTERMSIG"), [`WIFSTOPPED()`](https://docs.python.org/3/library/os.html#os.WIFSTOPPED "os.WIFSTOPPED"), [`WSTOPSIG()`](https://docs.python.org/3/library/os.html#os.WSTOPSIG "os.WSTOPSIG") functions.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, Windows, not WASI, not Android, not iOS.
Added in version 3.9.
The following functions take a process status code as returned by [`system()`](https://docs.python.org/3/library/os.html#os.system "os.system"), [`wait()`](https://docs.python.org/3/library/os.html#os.wait "os.wait"), or [`waitpid()`](https://docs.python.org/3/library/os.html#os.waitpid "os.waitpid") as a parameter. They may be used to determine the disposition of a process. 

os.WCOREDUMP(_status_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.WCOREDUMP "Link to this definition")
    
Return `True` if a core dump was generated for the process, otherwise return `False`.
This function should be employed only if [`WIFSIGNALED()`](https://docs.python.org/3/library/os.html#os.WIFSIGNALED "os.WIFSIGNALED") is true.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI, not Android, not iOS.