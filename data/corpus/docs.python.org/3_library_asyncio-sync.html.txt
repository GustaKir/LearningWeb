Title: Synchronization Primitives in asyncio
URL: https://docs.python.org/3/library/asyncio-sync.html
Summary: This document section provides an overview of synchronization primitives available in Python's asyncio library, including Lock, Event, Condition, Semaphore, BoundedSemaphore, and Barrier.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [Synchronization Primitives](https://docs.python.org/3/library/asyncio-sync.html)
    * [Lock](https://docs.python.org/3/library/asyncio-sync.html#lock)
    * [Event](https://docs.python.org/3/library/asyncio-sync.html#event)
    * [Condition](https://docs.python.org/3/library/asyncio-sync.html#condition)
    * [Semaphore](https://docs.python.org/3/library/asyncio-sync.html#semaphore)
    * [BoundedSemaphore](https://docs.python.org/3/library/asyncio-sync.html#boundedsemaphore)
    * [Barrier](https://docs.python.org/3/library/asyncio-sync.html#barrier)


#### Previous topic
[Streams](https://docs.python.org/3/library/asyncio-stream.html "previous chapter")
#### Next topic
[Subprocesses](https://docs.python.org/3/library/asyncio-subprocess.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/asyncio-sync.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/asyncio-subprocess.html "Subprocesses") |
  * [previous](https://docs.python.org/3/library/asyncio-stream.html "Streams") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Networking and Interprocess Communication](https://docs.python.org/3/library/ipc.html) »
  * [`asyncio` — Asynchronous I/O](https://docs.python.org/3/library/asyncio.html) »
  * [Synchronization Primitives](https://docs.python.org/3/library/asyncio-sync.html)
  * | 
  * Theme  Auto Light Dark |


# Synchronization Primitives[¶](https://docs.python.org/3/library/asyncio-sync.html#synchronization-primitives "Link to this heading")
**Source code:** [Lib/asyncio/locks.py](https://github.com/python/cpython/tree/3.13/Lib/asyncio/locks.py)
asyncio synchronization primitives are designed to be similar to those of the [`threading`](https://docs.python.org/3/library/threading.html#module-threading "threading: Thread-based parallelism.") module with two important caveats:
  * asyncio primitives are not thread-safe, therefore they should not be used for OS thread synchronization (use [`threading`](https://docs.python.org/3/library/threading.html#module-threading "threading: Thread-based parallelism.") for that);
  * methods of these synchronization primitives do not accept the _timeout_ argument; use the [`asyncio.wait_for()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.wait_for "asyncio.wait_for") function to perform operations with timeouts.


asyncio has the following basic synchronization primitives:
  * [`Lock`](https://docs.python.org/3/library/asyncio-sync.html#asyncio.Lock "asyncio.Lock")
  * [`Event`](https://docs.python.org/3/library/asyncio-sync.html#asyncio.Event "asyncio.Event")
  * [`Condition`](https://docs.python.org/3/library/asyncio-sync.html#asyncio.Condition "asyncio.Condition")
  * [`Semaphore`](https://docs.python.org/3/library/asyncio-sync.html#asyncio.Semaphore "asyncio.Semaphore")
  * [`BoundedSemaphore`](https://docs.python.org/3/library/asyncio-sync.html#asyncio.BoundedSemaphore "asyncio.BoundedSemaphore")
  * [`Barrier`](https://docs.python.org/3/library/asyncio-sync.html#asyncio.Barrier "asyncio.Barrier")


## Lock[¶](https://docs.python.org/3/library/asyncio-sync.html#lock "Link to this heading") 

_class_ asyncio.Lock[¶](https://docs.python.org/3/library/asyncio-sync.html#asyncio.Lock "Link to this definition")
    
Implements a mutex lock for asyncio tasks. Not thread-safe.
An asyncio lock can be used to guarantee exclusive access to a shared resource.
The preferred way to use a Lock is an [`async with`](https://docs.python.org/3/reference/compound_stmts.html#async-with) statement:
```
lock = asyncio.Lock()
# ... later
async with lock:
  # access shared state

```

which is equivalent to:
```
lock = asyncio.Lock()
# ... later
await lock.acquire()
try:
  # access shared state
finally:
  lock.release()