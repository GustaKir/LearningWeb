Title: Python Warning Categories
URL: https://docs.python.org/3/library/warnings.html
Summary: This section outlines various categories of warnings in Python, including `PendingDeprecationWarning`, `ImportWarning`, `UnicodeWarning`, `BytesWarning`, and `ResourceWarning`, highlighting their purposes and default handling.
---

f applications that are written in Python.  
[`PendingDeprecationWarning`](https://docs.python.org/3/library/exceptions.html#PendingDeprecationWarning "PendingDeprecationWarning") | Base category for warnings about features that will be deprecated in the future (ignored by default).  
[`ImportWarning`](https://docs.python.org/3/library/exceptions.html#ImportWarning "ImportWarning") | Base category for warnings triggered during the process of importing a module (ignored by default).  
[`UnicodeWarning`](https://docs.python.org/3/library/exceptions.html#UnicodeWarning "UnicodeWarning") | Base category for warnings related to Unicode.  
[`BytesWarning`](https://docs.python.org/3/library/exceptions.html#BytesWarning "BytesWarning") | Base category for warnings related to [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") and [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray").  
[`ResourceWarning`](https://docs.python.org/3/library/exceptions.html#ResourceWarning "ResourceWarning") | Base category for warnings related to resource usage (ignored by default).  
Changed in version 3.7: Previously [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning") and [`FutureWarning`](https://docs.python.org/3/library/exceptions.html#FutureWarning "FutureWarning") were distinguished based on whether a feature was being removed entirely or changing its behaviour. They are now distinguished based on their intended audience and the way they’re handled by the default warnings filters.
## The Warnings Filter[¶](https://docs.python.org/3/library/warnings.html#the-warnings-filter "Link to this heading")
The warnings filter controls whether warnings are ignored, displayed, or turned into errors (raising an exception).
Conceptually, the warnings filter maintains an ordered list of filter specifications; any specific warning is matched against each filter specification in the list in turn until a match is found; the filter determines the disposition of the match. Each entry is a tuple of the form (_action_ , _message_ , _category_ , _module_ , _lineno_), where:
  * _action_ is one of the following strings:
Value | Disposition  
---|---  
`"default"` | print the first occurrence of matching warnings for each location (module + line number) where the warning is issued  
`"error"` | turn matching warnings into exceptions  
`"ignore"` | never print matching warnings  
`"always"` | always print matching warnings  
`"module"` | print the first occurrence of matching warnings for each module where the warning is issued (regardless of line number)  
`"once"` | print only the first occurrence of matching warnings, regardless of location  
  * _message_ is a string containing a regular expression that the start of the warning message must match, case-insensitively. In [`-W`](https://docs.python.org/3/using/cmdline.html#cmdoption-W) and [`PYTHONWARNINGS`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONWARNINGS), _message_ is a literal string that the start of the warning message must contain (case-insensitively), ignoring any whitespace at the start or end of _message_.
  * _category_ is a class (a subclass of [`Warning`](https://docs.python.org/3/library/exceptions.html#Warning "Warning")) of which the warning category must be a subclass in order to match.
  * _module_ is a string containing a regular expression that the start of the fully qualified module name must match, case-sensitively. In [`-W`](https://docs.python.org/3/using/cmdline.html#cmdoption-W) and [`PYTHONWARNINGS`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONWARNINGS), _module_ is a literal string that the fully qualified module name must be equal to (case-sensitively), ignoring any whitespace at the start or end of _module_.
  * _lineno_ is an integer that the line number where the warning occurred must match, or `0` to match all line numbers.