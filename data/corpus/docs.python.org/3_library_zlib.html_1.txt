Title: zlib.compress Function
URL: https://docs.python.org/3/library/zlib.html
Summary: The zlib.compress function compresses bytes in the given data, allowing for adjustable compression levels (0 to 9, or -1 for default). It also features a wbits argument to control the history buffer size and determine output header inclusion, with default settings at level -1 and wbits at 15.
---

zlib.compress(_data_ , _/_ , _level =-1_, _wbits =MAX_WBITS_)[¶](https://docs.python.org/3/library/zlib.html#zlib.compress "Link to this definition")
    
Compresses the bytes in _data_ , returning a bytes object containing compressed data. _level_ is an integer from `0` to `9` or `-1` controlling the level of compression; `1` (Z_BEST_SPEED) is fastest and produces the least compression, `9` (Z_BEST_COMPRESSION) is slowest and produces the most. `0` (Z_NO_COMPRESSION) is no compression. The default value is `-1` (Z_DEFAULT_COMPRESSION). Z_DEFAULT_COMPRESSION represents a default compromise between speed and compression (currently equivalent to level 6).
The _wbits_ argument controls the size of the history buffer (or the “window size”) used when compressing data, and whether a header and trailer is included in the output. It can take several ranges of values, defaulting to `15` (MAX_WBITS):
  * +9 to +15: The base-two logarithm of the window size, which therefore ranges between 512 and 32768. Larger values produce better compression at the expense of greater memory usage. The resulting output will include a zlib-specific header and trailer.
  * −9 to −15: Uses the absolute value of _wbits_ as the window size logarithm, while producing a raw output stream with no header or trailing checksum.
  * +25 to +31 = 16 + (9 to 15): Uses the low 4 bits of the value as the window size logarithm, while including a basic **gzip** header and trailing checksum in the output.


Raises the [`error`](https://docs.python.org/3/library/zlib.html#zlib.error "zlib.error") exception if any error occurs.
Changed in version 3.6: _level_ can now be used as a keyword parameter.
Changed in version 3.11: The _wbits_ parameter is now available to set window bits and compression type. 

zlib.compressobj(_level=-1_ , _method=DEFLATED_ , _wbits=MAX_WBITS_ , _memLevel=DEF_MEM_LEVEL_ , _strategy=Z_DEFAULT_STRATEGY_[, _zdict_])[¶](https://docs.python.org/3/library/zlib.html#zlib.compressobj "Link to this definition")
    
Returns a compression object, to be used for compressing data streams that won’t fit into memory at once.
_level_ is the compression level – an integer from `0` to `9` or `-1`. A value of `1` (Z_BEST_SPEED) is fastest and produces the least compression, while a value of `9` (Z_BEST_COMPRESSION) is slowest and produces the most. `0` (Z_NO_COMPRESSION) is no compression. The default value is `-1` (Z_DEFAULT_COMPRESSION). Z_DEFAULT_COMPRESSION represents a default compromise between speed and compression (currently equivalent to level 6).
_method_ is the compression algorithm. Currently, the only supported value is `DEFLATED`.
The _wbits_ parameter controls the size of the history buffer (or the “window size”), and what header and trailer format will be used. It has the same meaning as [described for compress()](https://docs.python.org/3/library/zlib.html#compress-wbits).
The _memLevel_ argument controls the amount of memory used for the internal compression state. Valid values range from `1` to `9`. Higher values use more memory, but are faster and produce smaller output.
_strategy_ is used to tune the compression algorithm. Possible values are `Z_DEFAULT_STRATEGY`, `Z_FILTERED`, `Z_HUFFMAN_ONLY`, `Z_RLE` (zlib 1.2.0.1) and `Z_FIXED` (zlib 1.2.2.2).
_zdict_ is a predefined compression dictionary. This is a sequence of bytes (such as a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") object) containing subsequences that are expected to occur frequently in the data that is to be compressed. Those subsequences that are expected to be most common should come at the end of the dictionary.
Changed in version 3.3: Added the _zdict_ parameter and keyword argument support. 

zlib.crc32(_data_[, _value_])[¶](https://docs.python.org/3/library/zlib.html#zlib.crc32 "Link to this definition")
    
Computes a CRC (Cyclic Redundancy Check) checksum of _data_. The result is an unsigned 32-bit integer. If _value_ is present, it is used as the starting value of the checksum; otherwise, a default value of 0 is used. Passing in _value_ allows computing a running checksum over the concatenation of several inputs. The algorithm is not cryptographically strong, and should not be used for authentication or digital signatures. Since the algorithm is designed for use as a checksum algorithm, it is not suitable for use as a general hash algorithm.
Changed in version 3.0: The result is always unsigned.