Title: Random Number Generation: Gaussian Distribution
URL: https://docs.python.org/3/library/random.html
Summary: The Gaussian distribution, described by the `random.gauss()` function, takes parameters `_mu` (mean) and `_sigma` (standard deviation). It offers a faster alternative to the `normalvariate()` function but can yield the same return value in multithreading situations. To prevent this, different random generator instances can be used, or locks can be implemented around calls.
---

```
     x ** (alpha - 1) * math.exp(-x / beta)
pdf(x) = --------------------------------------
      math.gamma(alpha) * beta ** alpha

```


random.gauss(_mu =0.0_, _sigma =1.0_)[¶](https://docs.python.org/3/library/random.html#random.gauss "Link to this definition")
    
Normal distribution, also called the Gaussian distribution. _mu_ is the mean, and _sigma_ is the standard deviation. This is slightly faster than the [`normalvariate()`](https://docs.python.org/3/library/random.html#random.normalvariate "random.normalvariate") function defined below.
Multithreading note: When two threads call this function simultaneously, it is possible that they will receive the same return value. This can be avoided in three ways. 1) Have each thread use a different instance of the random number generator. 2) Put locks around all calls. 3) Use the slower, but thread-safe [`normalvariate()`](https://docs.python.org/3/library/random.html#random.normalvariate "random.normalvariate") function instead.
Changed in version 3.11: _mu_ and _sigma_ now have default arguments. 

random.lognormvariate(_mu_ , _sigma_)[¶](https://docs.python.org/3/library/random.html#random.lognormvariate "Link to this definition")
    
Log normal distribution. If you take the natural logarithm of this distribution, you’ll get a normal distribution with mean _mu_ and standard deviation _sigma_. _mu_ can have any value, and _sigma_ must be greater than zero. 

random.normalvariate(_mu =0.0_, _sigma =1.0_)[¶](https://docs.python.org/3/library/random.html#random.normalvariate "Link to this definition")
    
Normal distribution. _mu_ is the mean, and _sigma_ is the standard deviation.
Changed in version 3.11: _mu_ and _sigma_ now have default arguments. 

random.vonmisesvariate(_mu_ , _kappa_)[¶](https://docs.python.org/3/library/random.html#random.vonmisesvariate "Link to this definition")
    
_mu_ is the mean angle, expressed in radians between 0 and 2*_pi_ , and _kappa_ is the concentration parameter, which must be greater than or equal to zero. If _kappa_ is equal to zero, this distribution reduces to a uniform random angle over the range 0 to 2*_pi_. 

random.paretovariate(_alpha_)[¶](https://docs.python.org/3/library/random.html#random.paretovariate "Link to this definition")
    
Pareto distribution. _alpha_ is the shape parameter. 

random.weibullvariate(_alpha_ , _beta_)[¶](https://docs.python.org/3/library/random.html#random.weibullvariate "Link to this definition")
    
Weibull distribution. _alpha_ is the scale parameter and _beta_ is the shape parameter.
## Alternative Generator[¶](https://docs.python.org/3/library/random.html#alternative-generator "Link to this heading") 

_class_ random.Random([_seed_])[¶](https://docs.python.org/3/library/random.html#random.Random "Link to this definition")
    
Class that implements the default pseudo-random number generator used by the [`random`](https://docs.python.org/3/library/random.html#module-random "random: Generate pseudo-random numbers with various common distributions.") module.
Changed in version 3.11: Formerly the _seed_ could be any hashable object. Now it is limited to: `None`, [`int`](https://docs.python.org/3/library/functions.html#int "int"), [`float`](https://docs.python.org/3/library/functions.html#float "float"), [`str`](https://docs.python.org/3/library/stdtypes.html#str "str"), [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes"), or [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray").
Subclasses of `Random` should override the following methods if they wish to make use of a different basic generator: 

seed(_a =None_, _version =2_)[¶](https://docs.python.org/3/library/random.html#random.Random.seed "Link to this definition")
    
Override this method in subclasses to customise the [`seed()`](https://docs.python.org/3/library/random.html#random.seed "random.seed") behaviour of `Random` instances. 

getstate()[¶](https://docs.python.org/3/library/random.html#random.Random.getstate "Link to this definition")
    
Override this method in subclasses to customise the [`getstate()`](https://docs.python.org/3/library/random.html#random.getstate "random.getstate") behaviour of `Random` instances. 

setstate(_state_)[¶](https://docs.python.org/3/library/random.html#random.Random.setstate "Link to this definition")
    
Override this method in subclasses to customise the [`setstate()`](https://docs.python.org/3/library/random.html#random.setstate "random.setstate") behaviour of `Random` instances. 

random()[¶](https://docs.python.org/3/library/random.html#random.Random.random "Link to this definition")
    
Override this method in subclasses to customise the [`random()`](https://docs.python.org/3/library/random.html#random.random "random.random") behaviour of `Random` instances.
Optionally, a custom generator subclass can also supply the following method: