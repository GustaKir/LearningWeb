Title: PyInterpreterConfig Configuration: Daemon Threads and Multi-Interpreter Extensions
URL: https://docs.python.org/3/c-api/init.html
Summary: The 'allow_daemon_threads' configuration determines if daemon threads can be created in a sub-interpreter. Setting it to '0' disallows daemon threads. The 'check_multi_interp_extensions' setting controls the import of extension modules; if set to '0', all modules can be imported in the active thread, while a non-zero value restricts imports to only multi-phase init extension modules, following PEP 489.
---

intallow_daemon_threads[¶](https://docs.python.org/3/c-api/init.html#c.PyInterpreterConfig.allow_daemon_threads "Link to this definition")
    
If this is `0` then the sub-interpreter’s [`threading`](https://docs.python.org/3/library/threading.html#module-threading "threading: Thread-based parallelism.") module won’t create daemon threads. Otherwise daemon threads are allowed (as long as [`allow_threads`](https://docs.python.org/3/c-api/init.html#c.PyInterpreterConfig.allow_threads "PyInterpreterConfig.allow_threads") is non-zero). 

intcheck_multi_interp_extensions[¶](https://docs.python.org/3/c-api/init.html#c.PyInterpreterConfig.check_multi_interp_extensions "Link to this definition")
    
If this is `0` then all extension modules may be imported, including legacy (single-phase init) modules, in any thread where the sub-interpreter is currently active. Otherwise only multi-phase init extension modules (see [**PEP 489**](https://peps.python.org/pep-0489/)) may be imported. (Also see [`Py_mod_multiple_interpreters`](https://docs.python.org/3/c-api/module.html#c.Py_mod_multiple_interpreters "Py_mod_multiple_interpreters").)
This must be `1` (non-zero) if [`use_main_obmalloc`](https://docs.python.org/3/c-api/init.html#c.PyInterpreterConfig.use_main_obmalloc "PyInterpreterConfig.use_main_obmalloc") is `0`. 

intgil[¶](https://docs.python.org/3/c-api/init.html#c.PyInterpreterConfig.gil "Link to this definition")
    
This determines the operation of the GIL for the sub-interpreter. It may be one of the following: 

PyInterpreterConfig_DEFAULT_GIL[¶](https://docs.python.org/3/c-api/init.html#c.PyInterpreterConfig_DEFAULT_GIL "Link to this definition")
    
Use the default selection ([`PyInterpreterConfig_SHARED_GIL`](https://docs.python.org/3/c-api/init.html#c.PyInterpreterConfig_SHARED_GIL "PyInterpreterConfig_SHARED_GIL")). 

PyInterpreterConfig_SHARED_GIL[¶](https://docs.python.org/3/c-api/init.html#c.PyInterpreterConfig_SHARED_GIL "Link to this definition")
    
Use (share) the main interpreter’s GIL. 

PyInterpreterConfig_OWN_GIL[¶](https://docs.python.org/3/c-api/init.html#c.PyInterpreterConfig_OWN_GIL "Link to this definition")
    
Use the sub-interpreter’s own GIL.
If this is [`PyInterpreterConfig_OWN_GIL`](https://docs.python.org/3/c-api/init.html#c.PyInterpreterConfig_OWN_GIL "PyInterpreterConfig_OWN_GIL") then [`PyInterpreterConfig.use_main_obmalloc`](https://docs.python.org/3/c-api/init.html#c.PyInterpreterConfig.use_main_obmalloc "PyInterpreterConfig.use_main_obmalloc") must be `0`.