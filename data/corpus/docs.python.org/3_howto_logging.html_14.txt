Title: Logging Handlers in Python
URL: https://docs.python.org/3/howto/logging.html
Summary: This section covers the introduction of various logging handler classes in Python, including `NullHandler` (added in version 3.1) and `QueueHandler` (added in version 3.2). It also explains that core handlers like `StreamHandler` and `FileHandler` are defined in the main logging package, while additional handlers are available in the `logging.handlers` sub-module.
---

Added in version 3.1: The [`NullHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.NullHandler "logging.NullHandler") class.
Added in version 3.2: The [`QueueHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.QueueHandler "logging.handlers.QueueHandler") class.
The [`NullHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.NullHandler "logging.NullHandler"), [`StreamHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.StreamHandler "logging.StreamHandler") and [`FileHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.FileHandler "logging.FileHandler") classes are defined in the core logging package. The other handlers are defined in a sub-module, [`logging.handlers`](https://docs.python.org/3/library/logging.handlers.html#module-logging.handlers "logging.handlers: Handlers for the logging module."). (There is also another sub-module, [`logging.config`](https://docs.python.org/3/library/logging.config.html#module-logging.config "logging.config: Configuration of the logging module."), for configuration functionality.)
Logged messages are formatted for presentation through instances of the [`Formatter`](https://docs.python.org/3/library/logging.html#logging.Formatter "logging.Formatter") class. They are initialized with a format string suitable for use with the % operator and a dictionary.
For formatting multiple messages in a batch, instances of [`BufferingFormatter`](https://docs.python.org/3/library/logging.html#logging.BufferingFormatter "logging.BufferingFormatter") can be used. In addition to the format string (which is applied to each message in the batch), there is provision for header and trailer format strings.
When filtering based on logger level and/or handler level is not enough, instances of [`Filter`](https://docs.python.org/3/library/logging.html#logging.Filter "logging.Filter") can be added to both [`Logger`](https://docs.python.org/3/library/logging.html#logging.Logger "logging.Logger") and [`Handler`](https://docs.python.org/3/library/logging.html#logging.Handler "logging.Handler") instances (through their [`addFilter()`](https://docs.python.org/3/library/logging.html#logging.Handler.addFilter "logging.Handler.addFilter") method). Before deciding to process a message further, both loggers and handlers consult all their filters for permission. If any filter returns a false value, the message is not processed further.
The basic [`Filter`](https://docs.python.org/3/library/logging.html#logging.Filter "logging.Filter") functionality allows filtering by specific logger name. If this feature is used, messages sent to the named logger and its children are allowed through the filter, and all others dropped.
## Exceptions raised during logging[¶](https://docs.python.org/3/howto/logging.html#exceptions-raised-during-logging "Link to this heading")
The logging package is designed to swallow exceptions which occur while logging in production. This is so that errors which occur while handling logging events - such as logging misconfiguration, network or other similar errors - do not cause the application using logging to terminate prematurely.
[`SystemExit`](https://docs.python.org/3/library/exceptions.html#SystemExit "SystemExit") and [`KeyboardInterrupt`](https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt "KeyboardInterrupt") exceptions are never swallowed. Other exceptions which occur during the [`emit()`](https://docs.python.org/3/library/logging.html#logging.Handler.emit "logging.Handler.emit") method of a [`Handler`](https://docs.python.org/3/library/logging.html#logging.Handler "logging.Handler") subclass are passed to its [`handleError()`](https://docs.python.org/3/library/logging.html#logging.Handler.handleError "logging.Handler.handleError") method.
The default implementation of [`handleError()`](https://docs.python.org/3/library/logging.html#logging.Handler.handleError "logging.Handler.handleError") in [`Handler`](https://docs.python.org/3/library/logging.html#logging.Handler "logging.Handler") checks to see if a module-level variable, [`raiseExceptions`](https://docs.python.org/3/library/logging.html#logging.raiseExceptions "logging.raiseExceptions"), is set. If set, a traceback is printed to [`sys.stderr`](https://docs.python.org/3/library/sys.html#sys.stderr "sys.stderr"). If not set, the exception is swallowed.
Note
The default value of [`raiseExceptions`](https://docs.python.org/3/library/logging.html#logging.raiseExceptions "logging.raiseExceptions") is `True`. This is because during development, you typically want to be notified of any exceptions that occur. It’s advised that you set [`raiseExceptions`](https://docs.python.org/3/library/logging.html#logging.raiseExceptions "logging.raiseExceptions") to `False` for production usage.
## Using arbitrary objects as messages[¶](https://docs.python.org/3/howto/logging.html#using-arbitrary-objects-as-message