Title: Caveats of Thread Management in Python
URL: https://docs.python.org/3/library/_thread.html
Summary: This section outlines important caveats related to threading in Python, including that interrupts go to the main thread, the behavior of `sys.exit()` and `SystemExit`, and platform-dependence regarding the interruptibility of the `acquire()` method on locks.
---

```

**Caveats:**
  * Interrupts always go to the main thread (the [`KeyboardInterrupt`](https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt "KeyboardInterrupt") exception will be received by that thread.)
  * Calling [`sys.exit()`](https://docs.python.org/3/library/sys.html#sys.exit "sys.exit") or raising the [`SystemExit`](https://docs.python.org/3/library/exceptions.html#SystemExit "SystemExit") exception is equivalent to calling [`_thread.exit()`](https://docs.python.org/3/library/_thread.html#thread.exit "_thread.exit").
  * It is platform-dependent whether the [`acquire()`](https://docs.python.org/3/library/threading.html#threading.Lock.acquire "threading.Lock.acquire") method on a lock can be interrupted (so that the [`KeyboardInterrupt`](https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt "KeyboardInterrupt") exception will happen immediately, rather than only after the lock has been acquired or the operation has timed out). It can be interrupted on POSIX, but not on Windows.
  * When the main thread exits, it is system defined whether the other threads survive. On most systems, they are killed without executing [`try`](https://docs.python.org/3/reference/compound_stmts.html#try) … [`finally`](https://docs.python.org/3/reference/compound_stmts.html#finally) clauses or executing object destructors.


#### Previous topic
[`contextvars` — Context Variables](https://docs.python.org/3/library/contextvars.html "previous chapter")
#### Next topic
[Networking and Interprocess Communication](https://docs.python.org/3/library/ipc.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/_thread.rst)


«
### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/ipc.html "Networking and Interprocess Communication") |
  * [previous](https://docs.python.org/3/library/contextvars.html "contextvars — Context Variables") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Concurrent Execution](https://docs.python.org/3/library/concurrency.html) »
  * [`_thread` — Low-level threading API](https://docs.python.org/3/library/_thread.html)
  * | 
  * Theme  Auto Light Dark |


© [ Copyright ](https://docs.python.org/3/copyright.html) 2001-2025, Python Software Foundation. This page is licensed under the Python Software Foundation License Version 2. Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License. See [History and License](https://docs.python.org/license.html) for more information. The Python Software Foundation is a non-profit corporation. [Please donate.](https://www.python.org/psf/donations/) Last updated on Apr 27, 2025 (05:38 UTC). [Found a bug](https://docs.python.org/bugs.html)? Created using [Sphinx](https://www.sphinx-doc.org/) 8.2.3. 
  *[/]: Positional-only parameter separator (PEP 570)