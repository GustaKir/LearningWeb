Title: shutil.move - Move a File or Directory
URL: https://docs.python.org/3/library/shutil.html
Summary: The 'shutil.move' function recursively moves a file or directory from a source (_src_) to a destination (_dst_) and returns the new location. If the destination is an existing directory, the source is moved within it, provided the destination path does not exist. The function utilizes 'os.rename()' for moves within the same filesystem and supports custom copy functions for other cases.
---

shutil.move(_src_ , _dst_ , _copy_function =copy2_)[¶](https://docs.python.org/3/library/shutil.html#shutil.move "Link to this definition")
    
Recursively move a file or directory (_src_) to another location and return the destination.
If _dst_ is an existing directory or a symlink to a directory, then _src_ is moved inside that directory. The destination path in that directory must not already exist.
If _dst_ already exists but is not a directory, it may be overwritten depending on [`os.rename()`](https://docs.python.org/3/library/os.html#os.rename "os.rename") semantics.
If the destination is on the current filesystem, then [`os.rename()`](https://docs.python.org/3/library/os.html#os.rename "os.rename") is used. Otherwise, _src_ is copied to the destination using _copy_function_ and then removed. In case of symlinks, a new symlink pointing to the target of _src_ will be created as the destination and _src_ will be removed.
If _copy_function_ is given, it must be a callable that takes two arguments, _src_ and the destination, and will be used to copy _src_ to the destination if [`os.rename()`](https://docs.python.org/3/library/os.html#os.rename "os.rename") cannot be used. If the source is a directory, [`copytree()`](https://docs.python.org/3/library/shutil.html#shutil.copytree "shutil.copytree") is called, passing it the _copy_function_. The default _copy_function_ is [`copy2()`](https://docs.python.org/3/library/shutil.html#shutil.copy2 "shutil.copy2"). Using [`copy()`](https://docs.python.org/3/library/shutil.html#shutil.copy "shutil.copy") as the _copy_function_ allows the move to succeed when it is not possible to also copy the metadata, at the expense of not copying any of the metadata.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `shutil.move` with arguments `src`, `dst`.
Changed in version 3.3: Added explicit symlink handling for foreign filesystems, thus adapting it to the behavior of GNU’s **mv**. Now returns _dst_.
Changed in version 3.5: Added the _copy_function_ keyword argument.
Changed in version 3.8: Platform-specific fast-copy syscalls may be used internally in order to copy the file more efficiently. See [Platform-dependent efficient copy operations](https://docs.python.org/3/library/shutil.html#shutil-platform-dependent-efficient-copy-operations) section.
Changed in version 3.9: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object) for both _src_ and _dst_. 

shutil.disk_usage(_path_)[¶](https://docs.python.org/3/library/shutil.html#shutil.disk_usage "Link to this definition")
    
Return disk usage statistics about the given path as a [named tuple](https://docs.python.org/3/glossary.html#term-named-tuple) with the attributes _total_ , _used_ and _free_ , which are the amount of total, used and free space, in bytes. _path_ may be a file or a directory.
Note
On Unix filesystems, _path_ must point to a path within a **mounted** filesystem partition. On those platforms, CPython doesn’t attempt to retrieve disk usage information from non-mounted filesystems.
Added in version 3.3.
Changed in version 3.8: On Windows, _path_ can now be a file or directory.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, Windows. 

shutil.chown(_path_ , _user =None_, _group =None_, _*_ , _dir_fd =None_, _follow_symlinks =True_)[¶](https://docs.python.org/3/library/shutil.html#shutil.chown "Link to this definition")
    
Change owner _user_ and/or _group_ of the given _path_.
_user_ can be a system user name or a uid; the same applies to _group_. At least one argument is required.
See also [`os.chown()`](https://docs.python.org/3/library/os.html#os.chown "os.chown"), the underlying function.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `shutil.chown` with arguments `path`, `user`, `group`.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix.
Added in version 3.3.
Changed in version 3.13: Added _dir_fd_ and _follow_symlinks_ parameters.