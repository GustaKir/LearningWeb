Title: Email Message Representation in Compat32 API
URL: https://docs.python.org/3/library/email.compat32-message.html
Summary: The `Message` class in the compat32 API represents an email message, resembling the `EmailMessage` class but lacking its additional methods and differing in the default behavior of certain methods. This section also documents methods supported by the `EmailMessage` class.
---

# [`email.message.Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "email.message.Message"): Representing an email message using the [`compat32`](https://docs.python.org/3/library/email.policy.html#email.policy.compat32 "email.policy.compat32") API[¶](https://docs.python.org/3/library/email.compat32-message.html#email-message-message-representing-an-email-message-using-the-compat32-api "Link to this heading")
The [`Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "email.message.Message") class is very similar to the [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") class, without the methods added by that class, and with the default behavior of certain other methods being slightly different. We also document here some methods that, while supported by the [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") class, are not recommended unless you are dealing with legacy code.
The philosophy and structure of the two classes is otherwise the same.
This document describes the behavior under the default (for [`Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "email.message.Message")) policy [`Compat32`](https://docs.python.org/3/library/email.policy.html#email.policy.Compat32 "email.policy.Compat32"). If you are going to use another policy, you should be using the [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") class instead.
An email message consists of _headers_ and a _payload_. Headers must be [**RFC 5322**](https://datatracker.ietf.org/doc/html/rfc5322.html) style names and values, where the field name and value are separated by a colon. The colon is not part of either the field name or the field value. The payload may be a simple text message, or a binary object, or a structured sequence of sub-messages each with their own set of headers and their own payload. The latter type of payload is indicated by the message having a MIME type such as _multipart/*_ or _message/rfc822_.
The conceptual model provided by a [`Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "email.message.Message") object is that of an ordered dictionary of headers with additional methods for accessing both specialized information from the headers, for accessing the payload, for generating a serialized version of the message, and for recursively walking over the object tree. Note that duplicate headers are supported but special methods must be used to access them.
The [`Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "email.message.Message") pseudo-dictionary is indexed by the header names, which must be ASCII values. The values of the dictionary are strings that are supposed to contain only ASCII characters; there is some special handling for non-ASCII input, but it doesn’t always produce the correct results. Headers are stored and returned in case-preserving form, but field names are matched case-insensitively. There may also be a single envelope header, also known as the _Unix-From_ header or the `From_` header. The _payload_ is either a string or bytes, in the case of simple message objects, or a list of [`Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "email.message.Message") objects, for MIME container documents (e.g. _multipart/*_ and _message/rfc822_).
Here are the methods of the [`Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "email.message.Message") class: 

_class_ email.message.Message(_policy =compat32_)[¶](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "Link to this definition")
    
If _policy_ is specified (it must be an instance of a [`policy`](https://docs.python.org/3/library/email.policy.html#module-email.policy "email.policy: Controlling the parsing and generating of messages") class) use the rules it specifies to update and serialize the representation of the message. If _policy_ is not set, use the [`compat32`](https://docs.python.org/3/library/email.policy.html#email.policy.Compat32 "email.policy.Compat32") policy, which maintains backward compatibility with the Python 3.2 version of the email package. For more information see the [`policy`](https://docs.python.org/3/library/email.policy.html#module-email.policy "email.policy: Controlling the parsing and generating of messages") documentation.
Changed in version 3.3: The _policy_ keyword argument was added.