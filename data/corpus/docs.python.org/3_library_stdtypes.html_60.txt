Title: Python Standard Types: Definition Attributes
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This section discusses various attributes associated with definitions in Python, including __qualname__, __module__, __doc__, and __type_params__. Each attribute provides specific information such as the qualified name, module name, documentation string, and type parameters of classes and functions.
---

definition.__qualname__[¶](https://docs.python.org/3/library/stdtypes.html#definition.__qualname__ "Link to this definition")
    
The [qualified name](https://docs.python.org/3/glossary.html#term-qualified-name) of the class, function, method, descriptor, or generator instance.
Added in version 3.3. 

definition.__module__[¶](https://docs.python.org/3/library/stdtypes.html#definition.__module__ "Link to this definition")
    
The name of the module in which a class or function was defined. 

definition.__doc__[¶](https://docs.python.org/3/library/stdtypes.html#definition.__doc__ "Link to this definition")
    
The documentation string of a class or function, or `None` if undefined. 

definition.__type_params__[¶](https://docs.python.org/3/library/stdtypes.html#definition.__type_params__ "Link to this definition")
    
The [type parameters](https://docs.python.org/3/reference/compound_stmts.html#type-params) of generic classes, functions, and [type aliases](https://docs.python.org/3/library/typing.html#type-aliases). For classes and functions that are not generic, this will be an empty tuple.
Added in version 3.12.
## Integer string conversion length limitation[¶](https://docs.python.org/3/library/stdtypes.html#integer-string-conversion-length-limitation "Link to this heading")
CPython has a global limit for converting between [`int`](https://docs.python.org/3/library/functions.html#int "int") and [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") to mitigate denial of service attacks. This limit _only_ applies to decimal or other non-power-of-two number bases. Hexadecimal, octal, and binary conversions are unlimited. The limit can be configured.
The [`int`](https://docs.python.org/3/library/functions.html#int "int") type in CPython is an arbitrary length number stored in binary form (commonly known as a “bignum”). There exists no algorithm that can convert a string to a binary integer or a binary integer to a string in linear time, _unless_ the base is a power of 2. Even the best known algorithms for base 10 have sub-quadratic complexity. Converting a large value such as `int('1' * 500_000)` can take over a second on a fast CPU.
Limiting conversion size offers a practical way to avoid [**CVE 2020-10735**](https://www.cve.org/CVERecord?id=CVE-2020-10735).
The limit is applied to the number of digit characters in the input or output string when a non-linear conversion algorithm would be involved. Underscores and the sign are not counted towards the limit.
When an operation would exceed the limit, a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised:
>>>```
>>> importsys
>>> sys.set_int_max_str_digits(4300) # Illustrative, this is the default.
>>> _ = int('2' * 5432)
Traceback (most recent call last):
...
ValueError: Exceeds the limit (4300 digits) for integer string conversion: value has 5432 digits; use sys.set_int_max_str_digits() to increase the limit
>>> i = int('2' * 4300)
>>> len(str(i))
4300
>>> i_squared = i*i
>>> len(str(i_squared))
Traceback (most recent call last):
...
ValueError: Exceeds the limit (4300 digits) for integer string conversion; use sys.set_int_max_str_digits() to increase the limit
>>> len(hex(i_squared))
7144
>>> assert int(hex(i_squared), base=16) == i*i # Hexadecimal is unlimited.

```

The default limit is 4300 digits as provided in [`sys.int_info.default_max_str_digits`](https://docs.python.org/3/library/sys.html#sys.int_info "sys.int_info"). The lowest limit that can be configured is 640 digits as provided in [`sys.int_info.str_digits_check_threshold`](https://docs.python.org/3/library/sys.html#sys.int_info "sys.int_info").
Verification:
>>>```
>>> importsys
>>> assert sys.int_info.default_max_str_digits == 4300, sys.int_info
>>> assert sys.int_info.str_digits_check_threshold == 640, sys.int_info
>>> msg = int('578966293710682886880994035146873798396722250538762761564'
...      '9252925514383915483333812743580549779436104706260696366600'
...      '571186405732').to_bytes(53, 'big')
...