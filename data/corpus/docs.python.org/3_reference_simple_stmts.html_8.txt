Title: Exceptions and the Raise Statement in Python
URL: https://docs.python.org/3/reference/simple_stmts.html
Summary: This section provides updates on exception handling in Python, including changes introduced in versions 3.3 and 3.11. It highlights the allowance of `None` as a second argument in the `raise` statement, the introduction of the `__suppress_context__` attribute, and modifications to how tracebacks are handled in `except` clauses.
---

```

Additional information on exceptions can be found in section [Exceptions](https://docs.python.org/3/reference/executionmodel.html#exceptions), and information about handling exceptions is in section [The try statement](https://docs.python.org/3/reference/compound_stmts.html#try).
Changed in version 3.3: [`None`](https://docs.python.org/3/library/constants.html#None "None") is now permitted as `Y` in `raise X from Y`.
Added the [`__suppress_context__`](https://docs.python.org/3/library/exceptions.html#BaseException.__suppress_context__ "BaseException.__suppress_context__") attribute to suppress automatic display of the exception context.
Changed in version 3.11: If the traceback of the active exception is modified in an [`except`](https://docs.python.org/3/reference/compound_stmts.html#except) clause, a subsequent `raise` statement re-raises the exception with the modified traceback. Previously, the exception was re-raised with the traceback it had when it was caught.
## 7.9. The `break` statement[¶](https://docs.python.org/3/reference/simple_stmts.html#the-break-statement "Link to this heading")
```
**break_stmt** ::= "break"

```

[`break`](https://docs.python.org/3/reference/simple_stmts.html#break) may only occur syntactically nested in a [`for`](https://docs.python.org/3/reference/compound_stmts.html#for) or [`while`](https://docs.python.org/3/reference/compound_stmts.html#while) loop, but not nested in a function or class definition within that loop.
It terminates the nearest enclosing loop, skipping the optional `else` clause if the loop has one.
If a [`for`](https://docs.python.org/3/reference/compound_stmts.html#for) loop is terminated by [`break`](https://docs.python.org/3/reference/simple_stmts.html#break), the loop control target keeps its current value.
When [`break`](https://docs.python.org/3/reference/simple_stmts.html#break) passes control out of a [`try`](https://docs.python.org/3/reference/compound_stmts.html#try) statement with a [`finally`](https://docs.python.org/3/reference/compound_stmts.html#finally) clause, that `finally` clause is executed before really leaving the loop.
## 7.10. The `continue` statement[¶](https://docs.python.org/3/reference/simple_stmts.html#the-continue-statement "Link to this heading")
```
**continue_stmt** ::= "continue"

```

[`continue`](https://docs.python.org/3/reference/simple_stmts.html#continue) may only occur syntactically nested in a [`for`](https://docs.python.org/3/reference/compound_stmts.html#for) or [`while`](https://docs.python.org/3/reference/compound_stmts.html#while) loop, but not nested in a function or class definition within that loop. It continues with the next cycle of the nearest enclosing loop.
When [`continue`](https://docs.python.org/3/reference/simple_stmts.html#continue) passes control out of a [`try`](https://docs.python.org/3/reference/compound_stmts.html#try) statement with a [`finally`](https://docs.python.org/3/reference/compound_stmts.html#finally) clause, that `finally` clause is executed before really starting the next loop cycle.
## 7.11. The `import` statement[¶](https://docs.python.org/3/reference/simple_stmts.html#the-import-statement "Link to this heading")