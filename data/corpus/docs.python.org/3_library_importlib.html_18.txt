Title: Bytecode Handling in importlib
URL: https://docs.python.org/3/library/importlib.html
Summary: This section discusses the `importlib.util.MAGIC_NUMBER`, which indicates the bytecode version number, and the `importlib.util.cache_from_source` function that generates the path for the byte-compiled file based on the source path, in accordance with PEP 3147 and PEP 488.
---

importlib.util.MAGIC_NUMBER[¶](https://docs.python.org/3/library/importlib.html#importlib.util.MAGIC_NUMBER "Link to this definition")
    
The bytes which represent the bytecode version number. If you need help with loading/writing bytecode then consider [`importlib.abc.SourceLoader`](https://docs.python.org/3/library/importlib.html#importlib.abc.SourceLoader "importlib.abc.SourceLoader").
Added in version 3.4. 

importlib.util.cache_from_source(_path_ , _debug_override =None_, _*_ , _optimization =None_)[¶](https://docs.python.org/3/library/importlib.html#importlib.util.cache_from_source "Link to this definition")
    
Return the [**PEP 3147**](https://peps.python.org/pep-3147/)/[**PEP 488**](https://peps.python.org/pep-0488/) path to the byte-compiled file associated with the source _path_. For example, if _path_ is `/foo/bar/baz.py` the return value would be `/foo/bar/__pycache__/baz.cpython-32.pyc` for Python 3.2. The `cpython-32` string comes from the current magic tag (see `get_tag()`; if `sys.implementation.cache_tag` is not defined then [`NotImplementedError`](https://docs.python.org/3/library/exceptions.html#NotImplementedError "NotImplementedError") will be raised).
The _optimization_ parameter is used to specify the optimization level of the bytecode file. An empty string represents no optimization, so `/foo/bar/baz.py` with an _optimization_ of `''` will result in a bytecode path of `/foo/bar/__pycache__/baz.cpython-32.pyc`. `None` causes the interpreter’s optimization level to be used. Any other value’s string representation is used, so `/foo/bar/baz.py` with an _optimization_ of `2` will lead to the bytecode path of `/foo/bar/__pycache__/baz.cpython-32.opt-2.pyc`. The string representation of _optimization_ can only be alphanumeric, else [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised.
The _debug_override_ parameter is deprecated and can be used to override the system’s value for `__debug__`. A `True` value is the equivalent of setting _optimization_ to the empty string. A `False` value is the same as setting _optimization_ to `1`. If both _debug_override_ an _optimization_ are not `None` then [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") is raised.
Added in version 3.4.
Changed in version 3.5: The _optimization_ parameter was added and the _debug_override_ parameter was deprecated.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). 

importlib.util.source_from_cache(_path_)[¶](https://docs.python.org/3/library/importlib.html#importlib.util.source_from_cache "Link to this definition")
    
Given the _path_ to a [**PEP 3147**](https://peps.python.org/pep-3147/) file name, return the associated source code file path. For example, if _path_ is `/foo/bar/__pycache__/baz.cpython-32.pyc` the returned path would be `/foo/bar/baz.py`. _path_ need not exist, however if it does not conform to [**PEP 3147**](https://peps.python.org/pep-3147/) or [**PEP 488**](https://peps.python.org/pep-0488/) format, a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised. If `sys.implementation.cache_tag` is not defined, [`NotImplementedError`](https://docs.python.org/3/library/exceptions.html#NotImplementedError "NotImplementedError") is raised.
Added in version 3.4.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). 

importlib.util.decode_source(_source_bytes_)[¶](https://docs.python.org/3/library/importlib.html#importlib.util.decode_source "Link to this definition")
    
Decode the given bytes representing source code and return it as a string with universal newlines (as required by [`importlib.abc.InspectLoader.get_source()`](https://docs.python.org/3/library/importlib.html#importlib.abc.InspectLoader.get_source "importlib.abc.InspectLoader.get_source")).
Added in version 3.4.