Title: Path.walk Method in pathlib
URL: https://docs.python.org/3/library/pathlib.html
Summary: The Path.walk method generates file names in a directory tree by traversing it either top-down or bottom-up. It yields a tuple containing the current directory's path, a list of subdirectory names, and a list of file names while excluding '.' and '..'. The optional argument 'top_down' controls the traversal order.
---

Path.walk(_top_down =True_, _on_error =None_, _follow_symlinks =False_)[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.walk "Link to this definition")
    
Generate the file names in a directory tree by walking the tree either top-down or bottom-up.
For each directory in the directory tree rooted at _self_ (including _self_ but excluding ‘.’ and ‘..’), the method yields a 3-tuple of `(dirpath, dirnames, filenames)`.
_dirpath_ is a [`Path`](https://docs.python.org/3/library/pathlib.html#pathlib.Path "pathlib.Path") to the directory currently being walked, _dirnames_ is a list of strings for the names of subdirectories in _dirpath_ (excluding `'.'` and `'..'`), and _filenames_ is a list of strings for the names of the non-directory files in _dirpath_. To get a full path (which begins with _self_) to a file or directory in _dirpath_ , do `dirpath / name`. Whether or not the lists are sorted is file system-dependent.
If the optional argument _top_down_ is true (which is the default), the triple for a directory is generated before the triples for any of its subdirectories (directories are walked top-down). If _top_down_ is false, the triple for a directory is generated after the triples for all of its subdirectories (directories are walked bottom-up). No matter the value of _top_down_ , the list of subdirectories is retrieved before the triples for the directory and its subdirectories are walked.
When _top_down_ is true, the caller can modify the _dirnames_ list in-place (for example, using [`del`](https://docs.python.org/3/reference/simple_stmts.html#del) or slice assignment), and [`Path.walk()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.walk "pathlib.Path.walk") will only recurse into the subdirectories whose names remain in _dirnames_. This can be used to prune the search, or to impose a specific order of visiting, or even to inform [`Path.walk()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.walk "pathlib.Path.walk") about directories the caller creates or renames before it resumes [`Path.walk()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.walk "pathlib.Path.walk") again. Modifying _dirnames_ when _top_down_ is false has no effect on the behavior of [`Path.walk()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.walk "pathlib.Path.walk") since the directories in _dirnames_ have already been generated by the time _dirnames_ is yielded to the caller.
By default, errors from [`os.scandir()`](https://docs.python.org/3/library/os.html#os.scandir "os.scandir") are ignored. If the optional argument _on_error_ is specified, it should be a callable; it will be called with one argument, an [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") instance. The callable can handle the error to continue the walk or re-raise it to stop the walk. Note that the filename is available as the `filename` attribute of the exception object.
By default, [`Path.walk()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.walk "pathlib.Path.walk") does not follow symbolic links, and instead adds them to the _filenames_ list. Set _follow_symlinks_ to true to resolve symlinks and place them in _dirnames_ and _filenames_ as appropriate for their targets, and consequently visit directories pointed to by symlinks (where supported).
Note
Be aware that setting _follow_symlinks_ to true can lead to infinite recursion if a link points to a parent directory of itself. [`Path.walk()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.walk "pathlib.Path.walk") does not keep track of the directories it has already visited.
Note
[`Path.walk()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.walk "pathlib.Path.walk") assumes the directories it walks are not modified during execution. For example, if a directory from _dirnames_ has been replaced with a symlink and _follow_symlinks_ is false, [`Path.walk()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.walk "pathlib.Path.walk") will still try to descend into it. To prevent such behavior, remove directories from _dirnames_ as appropriate.
Note
Unlike [`os.walk()`](https://docs.python.org/3/library/os.html#os.walk "os.walk"), [`Path.walk()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.walk "pathlib.Path.walk") lists symlinks to directories in _filenames_ if _follow_symlinks_ is false.
This example displays the number of bytes used by all files in each directory, while ignoring `__pycache__` directories:
```
frompathlibimport Path
for root, dirs, files in Path("cpython/Lib/concurrent").walk(on_error=print):
 print(
   root,
   "consumes",
   sum((root / file).stat().st_size for file in files),
   "bytes in",
   len(files),
   "non-directory files"
 )
 if '__pycache__' in dirs:
    dirs.remove('__pycache__')