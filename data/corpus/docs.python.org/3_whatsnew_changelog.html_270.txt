Title: C API Updates in Python
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: Recent changes to the Python C API include the deprecation of functions like `PySys_SetArgv()` and the introduction of `PyCode_GetCode()` for retrieving code object attributes. Additionally, fixes have been made to improve the handling of the `closure` argument in `PyEval_EvalCodeEx()` and to address C++ compiler warnings by adopting modern casting methods.
---

### C API[¶](https://docs.python.org/3/whatsnew/changelog.html#id226 "Link to this heading")
  * [gh-88279](https://github.com/python/cpython/issues/88279): Deprecate the C functions: `PySys_SetArgv()`, `PySys_SetArgvEx()`, `PySys_SetPath()`. Patch by Victor Stinner.
  * [gh-92154](https://github.com/python/cpython/issues/92154): Added the [`PyCode_GetCode()`](https://docs.python.org/3/c-api/code.html#c.PyCode_GetCode "PyCode_GetCode") function. This function does the equivalent of the Python code `getattr(code_object, 'co_code')`.
  * [gh-92173](https://github.com/python/cpython/issues/92173): Fix the `closure` argument to [`PyEval_EvalCodeEx()`](https://docs.python.org/3/c-api/veryhigh.html#c.PyEval_EvalCodeEx "PyEval_EvalCodeEx").
  * [gh-91320](https://github.com/python/cpython/issues/91320): Fix C++ compiler warnings about “old-style cast” (`g++ -Wold-style-cast`) in the Python C API. Use C++ `reinterpret_cast<>` and `static_cast<>` casts when the Python C API is used in C++. Patch by Victor Stinner.
  * [gh-80527](https://github.com/python/cpython/issues/80527): Mark functions as deprecated by [**PEP 623**](https://peps.python.org/pep-0623/): `PyUnicode_AS_DATA()`, `PyUnicode_AS_UNICODE()`, `PyUnicode_GET_DATA_SIZE()`, `PyUnicode_GET_SIZE()`. Patch by Victor Stinner.
  * [gh-91768](https://github.com/python/cpython/issues/91768): [`Py_REFCNT()`](https://docs.python.org/3/c-api/refcounting.html#c.Py_REFCNT "Py_REFCNT"), [`Py_TYPE()`](https://docs.python.org/3/c-api/structures.html#c.Py_TYPE "Py_TYPE"), [`Py_SIZE()`](https://docs.python.org/3/c-api/structures.html#c.Py_SIZE "Py_SIZE") and [`Py_IS_TYPE()`](https://docs.python.org/3/c-api/structures.html#c.Py_IS_TYPE "Py_IS_TYPE") functions argument type is now `PyObject*`, rather than `const PyObject*`. Patch by Victor Stinner.
  * [gh-91020](https://github.com/python/cpython/issues/91020): Add `PyBytes_Type.tp_alloc` to initialize `PyBytesObject.ob_shash` for bytes subclasses.
  * [bpo-40421](https://bugs.python.org/issue?@action=redirect&bpo=40421): Add `PyFrame_GetLasti` C-API function to access frame object’s `f_lasti` attribute safely from C code.
  * [bpo-35134](https://bugs.python.org/issue?@action=redirect&bpo=35134): Remove the `Include/code.h` header file. C extensions should only include the main `<Python.h>` header file. Patch by Victor Stinner.
  * [bpo-47169](https://bugs.python.org/issue?@action=redirect&bpo=47169): [`PyOS_CheckStack()`](https://docs.python.org/3/c-api/sys.html#c.PyOS_CheckStack "PyOS_CheckStack") is now exported in the Stable ABI on Windows.
  * [bpo-47169](https://bugs.python.org/issue?@action=redirect&bpo=47169): `PyThread_get_thread_native_id()` is excluded from the stable ABI on platforms where it doesn’t exist (like Solaris).
  * [bpo-46343](https://bugs.python.org/issue?@action=redirect&bpo=46343): Added [`PyErr_GetHandledException()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_GetHandledException "PyErr_GetHandledException") and [`PyErr_SetHandledException()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_SetHandledException "PyErr_SetHandledException") as simpler alternatives to [`PyErr_GetExcInfo()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_GetExcInfo "PyErr_GetExcInfo") and [`PyErr_SetExcInfo()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_SetExcInfo "PyErr_SetExcInfo").
They are included in the stable ABI.