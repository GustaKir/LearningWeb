Title: Statistics Module: Median Functions
URL: https://docs.python.org/3/library/statistics.html
Summary: This section discusses the usage of median functions in the statistics module, specifically `median_low()` and `median_high()`, for discrete and ordinal data. It outlines the behavior of `median_low()`, stating it returns the low median from a dataset, and indicates that an empty dataset raises a `StatisticsError`.
---

```

This is suited for when your data is discrete, and you don’t mind that the median may not be an actual data point.
If the data is ordinal (supports order operations) but not numeric (doesn’t support addition), consider using [`median_low()`](https://docs.python.org/3/library/statistics.html#statistics.median_low "statistics.median_low") or [`median_high()`](https://docs.python.org/3/library/statistics.html#statistics.median_high "statistics.median_high") instead. 

statistics.median_low(_data_)[¶](https://docs.python.org/3/library/statistics.html#statistics.median_low "Link to this definition")
    
Return the low median of numeric data. If _data_ is empty, [`StatisticsError`](https://docs.python.org/3/library/statistics.html#statistics.StatisticsError "statistics.StatisticsError") is raised. _data_ can be a sequence or iterable.
The low median is always a member of the data set. When the number of data points is odd, the middle value is returned. When it is even, the smaller of the two middle values is returned.
>>>```
>>> median_low([1, 3, 5])
3
>>> median_low([1, 3, 5, 7])
3

```

Use the low median when your data are discrete and you prefer the median to be an actual data point rather than interpolated. 

statistics.median_high(_data_)[¶](https://docs.python.org/3/library/statistics.html#statistics.median_high "Link to this definition")
    
Return the high median of data. If _data_ is empty, [`StatisticsError`](https://docs.python.org/3/library/statistics.html#statistics.StatisticsError "statistics.StatisticsError") is raised. _data_ can be a sequence or iterable.
The high median is always a member of the data set. When the number of data points is odd, the middle value is returned. When it is even, the larger of the two middle values is returned.
>>>```
>>> median_high([1, 3, 5])
3
>>> median_high([1, 3, 5, 7])
5

```

Use the high median when your data are discrete and you prefer the median to be an actual data point rather than interpolated. 

statistics.median_grouped(_data_ , _interval =1.0_)[¶](https://docs.python.org/3/library/statistics.html#statistics.median_grouped "Link to this definition")
    
Estimates the median for numeric data that has been [grouped or binned](https://en.wikipedia.org/wiki/Data_binning) around the midpoints of consecutive, fixed-width intervals.
The _data_ can be any iterable of numeric data with each value being exactly the midpoint of a bin. At least one value must be present.
The _interval_ is the width of each bin.
For example, demographic information may have been summarized into consecutive ten-year age groups with each group being represented by the 5-year midpoints of the intervals:
>>>```
>>> fromcollectionsimport Counter
>>> demographics = Counter({
...   25: 172,  # 20 to 30 years old
...   35: 484,  # 30 to 40 years old
...   45: 387,  # 40 to 50 years old
...   55: 22,  # 50 to 60 years old
...   65:  6,  # 60 to 70 years old
... })
...

```

The 50th percentile (median) is the 536th person out of the 1071 member cohort. That person is in the 30 to 40 year old age group.
The regular [`median()`](https://docs.python.org/3/library/statistics.html#statistics.median "statistics.median") function would assume that everyone in the tricenarian age group was exactly 35 years old. A more tenable assumption is that the 484 members of that age group are evenly distributed between 30 and 40. For that, we use [`median_grouped()`](https://docs.python.org/3/library/statistics.html#statistics.median_grouped "statistics.median_grouped"):
>>>```
>>> data = list(demographics.elements())
>>> median(data)
35
>>> round(median_grouped(data, interval=10), 1)
37.5

```

The caller is responsible for making sure the data points are separated by exact multiples of _interval_. This is essential for getting a correct result. The function does not check this precondition.
Inputs may be any numeric type that can be coerced to a float during the interpolation step. 

statistics.mode(_data_)[¶](https://docs.python.org/3/library/statistics.html#statistics.mode "Link to this definition")
    
Return the single most common data point from discrete or nominal _data_. The mode (when it exists) is the most typical value and serves as a measure of central location.
If there are multiple modes with the same frequency, returns the first one encountered in the _data_. If the smallest or largest of those is desired instead, use `min(multimode(data))` or `max(multimode(data))`. If the input _data_ is empty, [`StatisticsError`](https://docs.python.org/3/library/statistics.html#statistics.StatisticsError "statistics.StatisticsError") is raised.
`mode` assumes discrete data and returns a single value. This is the standard treatment of the mode as commonly taught in schools:
>>>```
>>> mode([1, 1, 2, 3, 3, 3, 3, 4])
3

```

The mode is unique in that it is the only statistic in this package that also applies to nominal (non-numeric) data:
>>>