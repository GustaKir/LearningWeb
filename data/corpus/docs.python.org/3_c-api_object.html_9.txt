Title: PyObject_DelItem and PyObject_DelItemString Functions
URL: https://docs.python.org/3/c-api/object.html
Summary: The `PyObject_DelItem` function removes the mapping for a specified key from a Python object, returning -1 on failure, paralleling the Python statement `del o[key]`. The `PyObject_DelItemString` function offers similar functionality, but allows the key to be specified as a UTF-8 encoded string.
---

intPyObject_DelItem([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*key)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_DelItem "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Remove the mapping for the object _key_ from the object _o_. Return `-1` on failure. This is equivalent to the Python statement `del o[key]`. 

intPyObject_DelItemString([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o, constchar*key)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_DelItemString "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
This is the same as [`PyObject_DelItem()`](https://docs.python.org/3/c-api/object.html#c.PyObject_DelItem "PyObject_DelItem"), but _key_ is specified as a constchar* UTF-8 encoded bytes string, rather than a [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyObject_Dir([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_Dir "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
This is equivalent to the Python expression `dir(o)`, returning a (possibly empty) list of strings appropriate for the object argument, or `NULL` if there was an error. If the argument is `NULL`, this is like the Python `dir()`, returning the names of the current locals; in this case, if no execution frame is active then `NULL` is returned but [`PyErr_Occurred()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_Occurred "PyErr_Occurred") will return false. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyObject_GetIter([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_GetIter "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
This is equivalent to the Python expression `iter(o)`. It returns a new iterator for the object argument, or the object itself if the object is already an iterator. Raises [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") and returns `NULL` if the object cannot be iterated. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyObject_SelfIter([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*obj)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_SelfIter "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
This is equivalent to the Python `__iter__(self): return self` method. It is intended for [iterator](https://docs.python.org/3/glossary.html#term-iterator) types, to be used in the [`PyTypeObject.tp_iter`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_iter "PyTypeObject.tp_iter") slot. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyObject_GetAIter([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_GetAIter "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.10._
This is the equivalent to the Python expression `aiter(o)`. Takes an `AsyncIterable` object and returns an `AsyncIterator` for it. This is typically a new iterator but if the argument is an `AsyncIterator`, this returns itself. Raises [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") and returns `NULL` if the object cannot be iterated.
Added in version 3.10. 

void*PyObject_GetTypeData([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o, [PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject")*cls)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_GetTypeData "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.12._
Get a pointer to subclass-specific data reserved for _cls_.
The object _o_ must be an instance of _cls_ , and _cls_ must have been created using negative [`PyType_Spec.basicsize`](https://docs.python.org/3/c-api/type.html#c.PyType_Spec.basicsize "PyType_Spec.basicsize"). Python does not check this.
On error, set an exception and return `NULL`.
Added in version 3.12.