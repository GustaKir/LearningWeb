Title: Introduction to Functional Programming in Python
URL: https://docs.python.org/3/howto/functional.html
Summary: This document introduces Python's functional programming features, covering concepts and language elements such as iterators, generators, and relevant modules like itertools and functools.
---

Release:
    
0.32
In this document, we’ll take a tour of Python’s features suitable for implementing programs in a functional style. After an introduction to the concepts of functional programming, we’ll look at language features such as [iterator](https://docs.python.org/3/glossary.html#term-iterator)s and [generator](https://docs.python.org/3/glossary.html#term-generator)s and relevant library modules such as [`itertools`](https://docs.python.org/3/library/itertools.html#module-itertools "itertools: Functions creating iterators for efficient looping.") and [`functools`](https://docs.python.org/3/library/functools.html#module-functools "functools: Higher-order functions and operations on callable objects.").
## Introduction[¶](https://docs.python.org/3/howto/functional.html#introduction "Link to this heading")
This section explains the basic concept of functional programming; if you’re just interested in learning about Python language features, skip to the next section on [Iterators](https://docs.python.org/3/howto/functional.html#functional-howto-iterators).
Programming languages support decomposing problems in several different ways:
  * Most programming languages are **procedural** : programs are lists of instructions that tell the computer what to do with the program’s input. C, Pascal, and even Unix shells are procedural languages.
  * In **declarative** languages, you write a specification that describes the problem to be solved, and the language implementation figures out how to perform the computation efficiently. SQL is the declarative language you’re most likely to be familiar with; a SQL query describes the data set you want to retrieve, and the SQL engine decides whether to scan tables or use indexes, which subclauses should be performed first, etc.
  * **Object-oriented** programs manipulate collections of objects. Objects have internal state and support methods that query or modify this internal state in some way. Smalltalk and Java are object-oriented languages. C++ and Python are languages that support object-oriented programming, but don’t force the use of object-oriented features.
  * **Functional** programming decomposes a problem into a set of functions. Ideally, functions only take inputs and produce outputs, and don’t have any internal state that affects the output produced for a given input. Well-known functional languages include the ML family (Standard ML, OCaml, and other variants) and Haskell.