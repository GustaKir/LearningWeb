Title: Creating Log Messages with Logger Methods
URL: https://docs.python.org/3/howto/logging.html
Summary: This section discusses how to create log messages using various methods of the logger object, including Logger.debug(), Logger.info(), Logger.warning(), Logger.error(), and Logger.critical(). Each method generates a log record with a corresponding severity level and allows for formatted message inclusion.
---

You donâ€™t need to always call these methods on every logger you create. See the last two paragraphs in this section.
With the logger object configured, the following methods create log messages:
  * [`Logger.debug()`](https://docs.python.org/3/library/logging.html#logging.Logger.debug "logging.Logger.debug"), [`Logger.info()`](https://docs.python.org/3/library/logging.html#logging.Logger.info "logging.Logger.info"), [`Logger.warning()`](https://docs.python.org/3/library/logging.html#logging.Logger.warning "logging.Logger.warning"), [`Logger.error()`](https://docs.python.org/3/library/logging.html#logging.Logger.error "logging.Logger.error"), and [`Logger.critical()`](https://docs.python.org/3/library/logging.html#logging.Logger.critical "logging.Logger.critical") all create log records with a message and a level that corresponds to their respective method names. The message is actually a format string, which may contain the standard string substitution syntax of `%s`, `%d`, `%f`, and so on. The rest of their arguments is a list of objects that correspond with the substitution fields in the message. With regard to `**kwargs`, the logging methods care only about a keyword of `exc_info` and use it to determine whether to log exception information.
  * [`Logger.exception()`](https://docs.python.org/3/library/logging.html#logging.Logger.exception "logging.Logger.exception") creates a log message similar to [`Logger.error()`](https://docs.python.org/3/library/logging.html#logging.Logger.error "logging.Logger.error"). The difference is that [`Logger.exception()`](https://docs.python.org/3/library/logging.html#logging.Logger.exception "logging.Logger.exception") dumps a stack trace along with it. Call this method only from an exception handler.
  * [`Logger.log()`](https://docs.python.org/3/library/logging.html#logging.Logger.log "logging.Logger.log") takes a log level as an explicit argument. This is a little more verbose for logging messages than using the log level convenience methods listed above, but this is how to log at custom log levels.