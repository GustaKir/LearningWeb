Title: wsgiref.simple_server.demo_app Function
URL: https://docs.python.org/3/library/wsgiref.html
Summary: This function is a complete WSGI application that returns a 'Hello world!' message and key/value pairs from the _environ_ parameter. It is used to verify the functionality of a WSGI server, ensuring it can run a simple WSGI application correctly, and requires the _start_response_ to conform to the StartResponse protocol.
---

```


wsgiref.simple_server.demo_app(_environ_ , _start_response_)[¶](https://docs.python.org/3/library/wsgiref.html#wsgiref.simple_server.demo_app "Link to this definition")
    
This function is a small but complete WSGI application that returns a text page containing the message “Hello world!” and a list of the key/value pairs provided in the _environ_ parameter. It’s useful for verifying that a WSGI server (such as [`wsgiref.simple_server`](https://docs.python.org/3/library/wsgiref.html#module-wsgiref.simple_server "wsgiref.simple_server: A simple WSGI HTTP server.")) is able to run a simple WSGI application correctly.
The _start_response_ callable should follow the [`StartResponse`](https://docs.python.org/3/library/wsgiref.html#wsgiref.types.StartResponse "wsgiref.types.StartResponse") protocol. 

_class_ wsgiref.simple_server.WSGIServer(_server_address_ , _RequestHandlerClass_)[¶](https://docs.python.org/3/library/wsgiref.html#wsgiref.simple_server.WSGIServer "Link to this definition")
    
Create a [`WSGIServer`](https://docs.python.org/3/library/wsgiref.html#wsgiref.simple_server.WSGIServer "wsgiref.simple_server.WSGIServer") instance. _server_address_ should be a `(host,port)` tuple, and _RequestHandlerClass_ should be the subclass of [`http.server.BaseHTTPRequestHandler`](https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler "http.server.BaseHTTPRequestHandler") that will be used to process requests.
You do not normally need to call this constructor, as the [`make_server()`](https://docs.python.org/3/library/wsgiref.html#wsgiref.simple_server.make_server "wsgiref.simple_server.make_server") function can handle all the details for you.
[`WSGIServer`](https://docs.python.org/3/library/wsgiref.html#wsgiref.simple_server.WSGIServer "wsgiref.simple_server.WSGIServer") is a subclass of [`http.server.HTTPServer`](https://docs.python.org/3/library/http.server.html#http.server.HTTPServer "http.server.HTTPServer"), so all of its methods (such as `serve_forever()` and `handle_request()`) are available. [`WSGIServer`](https://docs.python.org/3/library/wsgiref.html#wsgiref.simple_server.WSGIServer "wsgiref.simple_server.WSGIServer") also provides these WSGI-specific methods: 

set_app(_application_)[¶](https://docs.python.org/3/library/wsgiref.html#wsgiref.simple_server.WSGIServer.set_app "Link to this definition")
    
Sets the callable _application_ as the WSGI application that will receive requests. 

get_app()[¶](https://docs.python.org/3/library/wsgiref.html#wsgiref.simple_server.WSGIServer.get_app "Link to this definition")
    
Returns the currently set application callable.
Normally, however, you do not need to use these additional methods, as [`set_app()`](https://docs.python.org/3/library/wsgiref.html#wsgiref.simple_server.WSGIServer.set_app "wsgiref.simple_server.WSGIServer.set_app") is normally called by [`make_server()`](https://docs.python.org/3/library/wsgiref.html#wsgiref.simple_server.make_server "wsgiref.simple_server.make_server"), and the [`get_app()`](https://docs.python.org/3/library/wsgiref.html#wsgiref.simple_server.WSGIServer.get_app "wsgiref.simple_server.WSGIServer.get_app") exists mainly for the benefit of request handler instances. 

_class_ wsgiref.simple_server.WSGIRequestHandler(_request_ , _client_address_ , _server_)[¶](https://docs.python.org/3/library/wsgiref.html#wsgiref.simple_server.WSGIRequestHandler "Link to this definition")
    
Create an HTTP handler for the given _request_ (i.e. a socket), _client_address_ (a `(host,port)` tuple), and _server_ ([`WSGIServer`](https://docs.python.org/3/library/wsgiref.html#wsgiref.simple_server.WSGIServer "wsgiref.simple_server.WSGIServer") instance).
You do not need to create instances of this class directly; they are automatically created as needed by [`WSGIServer`](https://docs.python.org/3/library/wsgiref.html#wsgiref.simple_server.WSGIServer "wsgiref.simple_server.WSGIServer") objects. You can, however, subclass this class and supply it as a _handler_class_ to the [`make_server()`](https://docs.python.org/3/library/wsgiref.html#wsgiref.simple_server.make_server "wsgiref.simple_server.make_server") function. Some possibly relevant methods for overriding in subclasses: