Title: Test Support Module Functions
URL: https://docs.python.org/3/library/test.html
Summary: This documentation section describes the 'import_module' function in the test.support.import_helper module, introduced in Python 3.1. The function imports a specified module, raising 'unittest.SkipTest' if the module fails to import. It allows suppression of deprecation warnings and can enforce platform-specific requirements.
---

```

Added in version 3.1. 

test.support.import_helper.import_module(_name_ , _deprecated =False_, _*_ , _required_on =()_)[¶](https://docs.python.org/3/library/test.html#test.support.import_helper.import_module "Link to this definition")
    
This function imports and returns the named module. Unlike a normal import, this function raises [`unittest.SkipTest`](https://docs.python.org/3/library/unittest.html#unittest.SkipTest "unittest.SkipTest") if the module cannot be imported.
Module and package deprecation messages are suppressed during this import if _deprecated_ is `True`. If a module is required on a platform but optional for others, set _required_on_ to an iterable of platform prefixes which will be compared against [`sys.platform`](https://docs.python.org/3/library/sys.html#sys.platform "sys.platform").
Added in version 3.1. 

test.support.import_helper.modules_setup()[¶](https://docs.python.org/3/library/test.html#test.support.import_helper.modules_setup "Link to this definition")
    
Return a copy of [`sys.modules`](https://docs.python.org/3/library/sys.html#sys.modules "sys.modules"). 

test.support.import_helper.modules_cleanup(_oldmodules_)[¶](https://docs.python.org/3/library/test.html#test.support.import_helper.modules_cleanup "Link to this definition")
    
Remove modules except for _oldmodules_ and `encodings` in order to preserve internal cache. 

test.support.import_helper.unload(_name_)[¶](https://docs.python.org/3/library/test.html#test.support.import_helper.unload "Link to this definition")
    
Delete _name_ from `sys.modules`. 

test.support.import_helper.make_legacy_pyc(_source_)[¶](https://docs.python.org/3/library/test.html#test.support.import_helper.make_legacy_pyc "Link to this definition")
    
Move a [**PEP 3147**](https://peps.python.org/pep-3147/)/[**PEP 488**](https://peps.python.org/pep-0488/) pyc file to its legacy pyc location and return the file system path to the legacy pyc file. The _source_ value is the file system path to the source file. It does not need to exist, however the PEP 3147/488 pyc file must exist. 

_class_ test.support.import_helper.CleanImport(_* module_names_)[¶](https://docs.python.org/3/library/test.html#test.support.import_helper.CleanImport "Link to this definition")
    
A context manager to force import to return a new module reference. This is useful for testing module-level behaviors, such as the emission of a [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning") on import. Example usage:
```
with CleanImport('foo'):
  importlib.import_module('foo') # New reference.

```


_class_ test.support.import_helper.DirsOnSysPath(_* paths_)[¶](https://docs.python.org/3/library/test.html#test.support.import_helper.DirsOnSysPath "Link to this definition")
    
A context manager to temporarily add directories to [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path").
This makes a copy of [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path"), appends any directories given as positional arguments, then reverts [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path") to the copied settings when the context ends.
Note that _all_ [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path") modifications in the body of the context manager, including replacement of the object, will be reverted at the end of the block.
# [`test.support.warnings_helper`](https://docs.python.org/3/library/test.html#module-test.support.warnings_helper "test.support.warnings_helper: Support for warnings tests.") — Utilities for warnings tests[¶](https://docs.python.org/3/library/test.html#module-test.support.warnings_helper "Link to this heading")
The [`test.support.warnings_helper`](https://docs.python.org/3/library/test.html#module-test.support.warnings_helper "test.support.warnings_helper: Support for warnings tests.") module provides support for warnings tests.
Added in version 3.10. 

test.support.warnings_helper.ignore_warnings(_*_ , _category_)[¶](https://docs.python.org/3/library/test.html#test.support.warnings_helper.ignore_warnings "Link to this definition")
    
Suppress warnings that are instances of _category_ , which must be [`Warning`](https://docs.python.org/3/library/exceptions.html#Warning "Warning") or a subclass. Roughly equivalent to [`warnings.catch_warnings()`](https://docs.python.org/3/library/warnings.html#warnings.catch_warnings "warnings.catch_warnings") with [`warnings.simplefilter('ignore', category=category)`](https://docs.python.org/3/library/warnings.html#warnings.simplefilter "warnings.simplefilter"). For example:
```
@warning_helper.ignore_warnings(category=DeprecationWarning)
deftest_suppress_warning():
  # do something