Title: Introduction to @dataclass in Python
URL: https://docs.python.org/3/library/dataclasses.html
Summary: The @dataclass decorator in Python simplifies the creation of classes by automatically generating special methods like __init__, __repr__, and __eq__. It identifies class variables defined with type annotations as fields. This feature was added in version 3.7.
---

```

Note that this method is automatically added to the class: it is not directly specified in the `InventoryItem` definition shown above.
Added in version 3.7.
## Module contents[¶](https://docs.python.org/3/library/dataclasses.html#module-contents "Link to this heading") 

@dataclasses.dataclass(_*_ , _init =True_, _repr =True_, _eq =True_, _order =False_, _unsafe_hash =False_, _frozen =False_, _match_args =True_, _kw_only =False_, _slots =False_, _weakref_slot =False_)[¶](https://docs.python.org/3/library/dataclasses.html#dataclasses.dataclass "Link to this definition")
    
This function is a [decorator](https://docs.python.org/3/glossary.html#term-decorator) that is used to add generated [special methods](https://docs.python.org/3/glossary.html#term-special-method) to classes, as described below.
The `@dataclass` decorator examines the class to find `field`s. A `field` is defined as a class variable that has a [type annotation](https://docs.python.org/3/glossary.html#term-variable-annotation). With two exceptions described below, nothing in `@dataclass` examines the type specified in the variable annotation.
The order of the fields in all of the generated methods is the order in which they appear in the class definition.
The `@dataclass` decorator will add various “dunder” methods to the class, described below. If any of the added methods already exist in the class, the behavior depends on the parameter, as documented below. The decorator returns the same class that it is called on; no new class is created.
If `@dataclass` is used just as a simple decorator with no parameters, it acts as if it has the default values documented in this signature. That is, these three uses of `@dataclass` are equivalent:
```
@dataclass
classC:
  ...
@dataclass()
classC:
  ...
@dataclass(init=True, repr=True, eq=True, order=False, unsafe_hash=False, frozen=False,
      match_args=True, kw_only=False, slots=False, weakref_slot=False)
classC:
  ...