Title: Enhancements to the Logging Module in Python 2.7
URL: https://docs.python.org/3/whatsnew/2.7.html
Summary: Python 2.7 introduces three enhancements to the logging module: the SysLogHandler class now supports TCP syslogging with a new socket type parameter, and Logger instances have a new getChild() method for improved hierarchical logging. These changes enhance flexibility and functionality for developers.
---

```

Three smaller enhancements to the [`logging`](https://docs.python.org/3/library/logging.html#module-logging "logging: Flexible event logging system for applications.") module, all implemented by Vinay Sajip, are:
  * The [`SysLogHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.SysLogHandler "logging.handlers.SysLogHandler") class now supports syslogging over TCP. The constructor has a _socktype_ parameter giving the type of socket to use, either [`socket.SOCK_DGRAM`](https://docs.python.org/3/library/socket.html#socket.SOCK_DGRAM "socket.SOCK_DGRAM") for UDP or [`socket.SOCK_STREAM`](https://docs.python.org/3/library/socket.html#socket.SOCK_STREAM "socket.SOCK_STREAM") for TCP. The default protocol remains UDP.
  * [`Logger`](https://docs.python.org/3/library/logging.html#logging.Logger "logging.Logger") instances gained a [`getChild()`](https://docs.python.org/3/library/logging.html#logging.Logger.getChild "logging.Logger.getChild") method that retrieves a descendant logger using a relative path. For example, once you retrieve a logger by doing `log = getLogger('app')`, calling `log.getChild('network.listen')` is equivalent to `getLogger('app.network.listen')`.
  * The [`LoggerAdapter`](https://docs.python.org/3/library/logging.html#logging.LoggerAdapter "logging.LoggerAdapter") class gained an [`isEnabledFor()`](https://docs.python.org/3/library/logging.html#logging.Logger.isEnabledFor "logging.Logger.isEnabledFor") method that takes a _level_ and returns whether the underlying logger would process a message of that level of importance.


See also 

[**PEP 391**](https://peps.python.org/pep-0391/) - Dictionary-Based Configuration For Logging
    
PEP written and implemented by Vinay Sajip.
## PEP 3106: Dictionary Views[¶](https://docs.python.org/3/whatsnew/2.7.html#pep-3106-dictionary-views "Link to this heading")
The dictionary methods [`keys()`](https://docs.python.org/3/library/stdtypes.html#dict.keys "dict.keys"), [`values()`](https://docs.python.org/3/library/stdtypes.html#dict.values "dict.values"), and [`items()`](https://docs.python.org/3/library/stdtypes.html#dict.items "dict.items") are different in Python 3.x. They return an object called a _view_ instead of a fully materialized list.
It’s not possible to change the return values of [`keys()`](https://docs.python.org/3/library/stdtypes.html#dict.keys "dict.keys"), [`values()`](https://docs.python.org/3/library/stdtypes.html#dict.values "dict.values"), and [`items()`](https://docs.python.org/3/library/stdtypes.html#dict.items "dict.items") in Python 2.7 because too much code would break. Instead the 3.x versions were added under the new names `viewkeys()`, `viewvalues()`, and `viewitems()`.
>>>```
>>> d = dict((i*10, chr(65+i)) for i in range(26))
>>> d
{0: 'A', 130: 'N', 10: 'B', 140: 'O', 20: ..., 250: 'Z'}
>>> d.viewkeys()
dict_keys([0, 130, 10, 140, 20, 150, 30, ..., 250])

```

Views can be iterated over, but the key and item views also behave like sets. The `&` operator performs intersection, and `|` performs a union:
>>>```
>>> d1 = dict((i*10, chr(65+i)) for i in range(26))
>>> d2 = dict((i**.5, i) for i in range(1000))
>>> d1.viewkeys() & d2.viewkeys()
set([0.0, 10.0, 20.0, 30.0])
>>> d1.viewkeys() | range(0, 30)
set([0, 1, 130, 3, 4, 5, 6, ..., 120, 250])

```

The view keeps track of the dictionary and its contents change as the dictionary is modified:
>>>```
>>> vk = d.viewkeys()
>>> vk
dict_keys([0, 130, 10, ..., 250])
>>> d[260] = '&'
>>> vk
dict_keys([0, 130, 260, 10, ..., 250])

```

However, note that you can’t add or remove keys while you’re iterating over the view:
>>>```
>>> for k in vk:
...   d[k*2] = k
...
Traceback (most recent call last):
 File "<stdin>", line 1, in <module>
RuntimeError: dictionary changed size during iteration

```

You can use the view methods in Python 2.x code, and the 2to3 converter will change them to the standard [`keys()`](https://docs.python.org/3/library/stdtypes.html#dict.keys "dict.keys"), [`values()`](https://docs.python.org/3/library/stdtypes.html#dict.values "dict.values"), and [`items()`](https://docs.python.org/3/library/stdtypes.html#dict.items "dict.items") methods.
See also 

[**PEP 3106**](https://peps.python.org/pep-3106/) - Revamping dict.keys(), .values() and .items()
    
PEP written by Guido van Rossum. Backported to 2.7 by Alexandre Vassalotti; [bpo-1967](https://bugs.python.org/issue?@action=redirect&bpo=1967).
## PEP 3137: The memoryview Object[¶](https://docs.python.org/3/whatsnew/2.7.html#pep-3137-the-memoryview-object "Link to this heading")
The [`memoryview`](https://docs.python.org/3/library/stdtypes.html#memoryview "memoryview") object provides a view of another object’s memory content that matches the [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") type’s interface.
>>>