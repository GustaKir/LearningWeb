Title: Membership Test Operations in Python
URL: https://docs.python.org/3/reference/expressions.html
Summary: This section describes how Python's membership test operations work using the `in` and `not in` operators. It explains that `x in s` evaluates to `True` if _x_ is a member of _s_, and `x not in s` is the negation. It further details that these operators are supported by all built-in sequences, set types, and dictionaries, with `in` checking for key existence in dictionaries and substring presence in strings and bytes.
---

Python does not enforce these consistency rules. In fact, the not-a-number values are an example for not following these rules.
### 6.10.2. Membership test operations[¶](https://docs.python.org/3/reference/expressions.html#membership-test-operations "Link to this heading")
The operators [`in`](https://docs.python.org/3/reference/expressions.html#in) and [`not in`](https://docs.python.org/3/reference/expressions.html#not-in) test for membership. `x in s` evaluates to `True` if _x_ is a member of _s_ , and `False` otherwise. `x not in s` returns the negation of `x in s`. All built-in sequences and set types support this as well as dictionary, for which `in` tests whether the dictionary has a given key. For container types such as list, tuple, set, frozenset, dict, or collections.deque, the expression `x in y` is equivalent to `any(x is e or x == e for e in y)`.
For the string and bytes types, `x in y` is `True` if and only if _x_ is a substring of _y_. An equivalent test is `y.find(x) != -1`. Empty strings are always considered to be a substring of any other string, so `"" in "abc"` will return `True`.
For user-defined classes which define the [`__contains__()`](https://docs.python.org/3/reference/datamodel.html#object.__contains__ "object.__contains__") method, `x in y` returns `True` if `y.__contains__(x)` returns a true value, and `False` otherwise.
For user-defined classes which do not define [`__contains__()`](https://docs.python.org/3/reference/datamodel.html#object.__contains__ "object.__contains__") but do define [`__iter__()`](https://docs.python.org/3/reference/datamodel.html#object.__iter__ "object.__iter__"), `x in y` is `True` if some value `z`, for which the expression `x is z or x == z` is true, is produced while iterating over `y`. If an exception is raised during the iteration, it is as if [`in`](https://docs.python.org/3/reference/expressions.html#in) raised that exception.
Lastly, the old-style iteration protocol is tried: if a class defines [`__getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__getitem__ "object.__getitem__"), `x in y` is `True` if and only if there is a non-negative integer index _i_ such that `x is y[i] or x == y[i]`, and no lower integer index raises the [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError "IndexError") exception. (If any other exception is raised, it is as if [`in`](https://docs.python.org/3/reference/expressions.html#in) raised that exception).
The operator [`not in`](https://docs.python.org/3/reference/expressions.html#not-in) is defined to have the inverse truth value of [`in`](https://docs.python.org/3/reference/expressions.html#in).
### 6.10.3. Identity comparisons[¶](https://docs.python.org/3/reference/expressions.html#is-not "Link to this heading")
The operators [`is`](https://docs.python.org/3/reference/expressions.html#is) and [`is not`](https://docs.python.org/3/reference/expressions.html#is-not) test for an object’s identity: `x is y` is true if and only if _x_ and _y_ are the same object. An Object’s identity is determined using the [`id()`](https://docs.python.org/3/library/functions.html#id "id") function. `x is not y` yields the inverse truth value. [[4]](https://docs.python.org/3/reference/expressions.html#id22)
## 6.11. Boolean operations[¶](https://docs.python.org/3/reference/expressions.html#boolean-operations "Link to this heading")
```
**or_test** ::= [and_test](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-and_test) | [or_test](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-or_test) "or" [and_test](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-and_test)
**and_test** ::= [not_test](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-not_test) | [and_test](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-and_test) "and" [not_test](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-not_test)
**not_test** ::= [comparison](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-comparison) | "not" [not_test](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-not_test)