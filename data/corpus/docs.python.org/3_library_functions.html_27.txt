Title: Slice Object Attributes in Python
URL: https://docs.python.org/3/library/functions.html
Summary: Slice objects in Python provide read-only attributes `start`, `stop`, and `step`, which return their respective argument values. They are primarily used in extended indexing and can be generated via syntax like `a[start:stop:step]`. As of version 3.12, slice objects have become hashable.
---

stop[¶](https://docs.python.org/3/library/functions.html#slice.stop "Link to this definition")


step[¶](https://docs.python.org/3/library/functions.html#slice.step "Link to this definition")
    
Slice objects have read-only data attributes `start`, `stop`, and `step` which merely return the argument values (or their default). They have no other explicit functionality; however, they are used by NumPy and other third-party packages.
Slice objects are also generated when extended indexing syntax is used. For example: `a[start:stop:step]` or `a[start:stop, i]`. See [`itertools.islice()`](https://docs.python.org/3/library/itertools.html#itertools.islice "itertools.islice") for an alternate version that returns an [iterator](https://docs.python.org/3/glossary.html#term-iterator).
Changed in version 3.12: Slice objects are now [hashable](https://docs.python.org/3/glossary.html#term-hashable) (provided [`start`](https://docs.python.org/3/library/functions.html#slice.start "slice.start"), [`stop`](https://docs.python.org/3/library/functions.html#slice.stop "slice.stop"), and [`step`](https://docs.python.org/3/library/functions.html#slice.step "slice.step") are hashable). 

sorted(_iterable_ , _/_ , _*_ , _key =None_, _reverse =False_)[¶](https://docs.python.org/3/library/functions.html#sorted "Link to this definition")
    
Return a new sorted list from the items in _iterable_.
Has two optional arguments which must be specified as keyword arguments.
_key_ specifies a function of one argument that is used to extract a comparison key from each element in _iterable_ (for example, `key=str.lower`). The default value is `None` (compare the elements directly).
_reverse_ is a boolean value. If set to `True`, then the list elements are sorted as if each comparison were reversed.
Use [`functools.cmp_to_key()`](https://docs.python.org/3/library/functools.html#functools.cmp_to_key "functools.cmp_to_key") to convert an old-style _cmp_ function to a _key_ function.
The built-in [`sorted()`](https://docs.python.org/3/library/functions.html#sorted "sorted") function is guaranteed to be stable. A sort is stable if it guarantees not to change the relative order of elements that compare equal — this is helpful for sorting in multiple passes (for example, sort by department, then by salary grade).
The sort algorithm uses only `<` comparisons between items. While defining an [`__lt__()`](https://docs.python.org/3/reference/datamodel.html#object.__lt__ "object.__lt__") method will suffice for sorting, [**PEP 8**](https://peps.python.org/pep-0008/) recommends that all six [rich comparisons](https://docs.python.org/3/reference/expressions.html#comparisons) be implemented. This will help avoid bugs when using the same data with other ordering tools such as [`max()`](https://docs.python.org/3/library/functions.html#max "max") that rely on a different underlying method. Implementing all six comparisons also helps avoid confusion for mixed type comparisons which can call reflected the [`__gt__()`](https://docs.python.org/3/reference/datamodel.html#object.__gt__ "object.__gt__") method.
For sorting examples and a brief sorting tutorial, see [Sorting Techniques](https://docs.python.org/3/howto/sorting.html#sortinghowto). 

@staticmethod[¶](https://docs.python.org/3/library/functions.html#staticmethod "Link to this definition")
    
Transform a method into a static method.
A static method does not receive an implicit first argument. To declare a static method, use this idiom:
```
classC:
  @staticmethod
  deff(arg1, arg2, argN): ...

```

The `@staticmethod` form is a function [decorator](https://docs.python.org/3/glossary.html#term-decorator) – see [Function definitions](https://docs.python.org/3/reference/compound_stmts.html#function) for details.
A static method can be called either on the class (such as `C.f()`) or on an instance (such as `C().f()`). Moreover, the static method [descriptor](https://docs.python.org/3/glossary.html#term-descriptor) is also callable, so it can be used in the class definition (such as `f()`).
Static methods in Python are similar to those found in Java or C++. Also, see [`classmethod()`](https://docs.python.org/3/library/functions.html#classmethod "classmethod") for a variant that is useful for creating alternate class constructors.
Like all decorators, it is also possible to call `staticmethod` as a regular function and do something with its result. This is needed in some cases where you need a reference to a function from a class body and you want to avoid the automatic transformation to instance method. For these cases, use this idiom:
```
defregular_function():
  ...
classC:
  method = staticmethod(regular_function)