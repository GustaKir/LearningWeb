Title: Python Configuration: cpu_count and Isolated Settings
URL: https://docs.python.org/3/c-api/init_config.html
Summary: The `cpu_count` setting in Python's C API overrides values returned by system functions if set to a value other than `-1`. It can be configured via the command line with `-X cpu_count=_n|default_` or the `PYTHON_CPU_COUNT` environment variable. The default is `-1`, and this feature was added in version 3.13.
---

intcpu_count[¶](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.cpu_count "Link to this definition")
    
If the value of [`cpu_count`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.cpu_count "PyConfig.cpu_count") is not `-1` then it will override the return values of [`os.cpu_count()`](https://docs.python.org/3/library/os.html#os.cpu_count "os.cpu_count"), [`os.process_cpu_count()`](https://docs.python.org/3/library/os.html#os.process_cpu_count "os.process_cpu_count"), and [`multiprocessing.cpu_count()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.cpu_count "multiprocessing.cpu_count").
Configured by the `-X cpu_count=_n|default_`command line flag or the[`PYTHON_CPU_COUNT`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHON_CPU_COUNT) environment variable.
Default: `-1`.
Added in version 3.13. 

intisolated[¶](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.isolated "Link to this definition")
    
If greater than `0`, enable isolated mode:
  * Set [`safe_path`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.safe_path "PyConfig.safe_path") to `1`: don’t prepend a potentially unsafe path to [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path") at Python startup, such as the current directory, the script’s directory or an empty string.
  * Set [`use_environment`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.use_environment "PyConfig.use_environment") to `0`: ignore `PYTHON` environment variables.
  * Set [`user_site_directory`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.user_site_directory "PyConfig.user_site_directory") to `0`: don’t add the user site directory to [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path").
  * Python REPL doesn’t import [`readline`](https://docs.python.org/3/library/readline.html#module-readline "readline: GNU readline support for Python. \(Unix\)") nor enable default readline configuration on interactive prompts.


Set to `1` by the [`-I`](https://docs.python.org/3/using/cmdline.html#cmdoption-I) command line option.
Default: `0` in Python mode, `1` in isolated mode.
See also the [Isolated Configuration](https://docs.python.org/3/c-api/init_config.html#init-isolated-conf) and [`PyPreConfig.isolated`](https://docs.python.org/3/c-api/init_config.html#c.PyPreConfig.isolated "PyPreConfig.isolated"). 

intlegacy_windows_stdio[¶](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.legacy_windows_stdio "Link to this definition")
    
If non-zero, use [`io.FileIO`](https://docs.python.org/3/library/io.html#io.FileIO "io.FileIO") instead of `io._WindowsConsoleIO` for [`sys.stdin`](https://docs.python.org/3/library/sys.html#sys.stdin "sys.stdin"), [`sys.stdout`](https://docs.python.org/3/library/sys.html#sys.stdout "sys.stdout") and [`sys.stderr`](https://docs.python.org/3/library/sys.html#sys.stderr "sys.stderr").
Set to `1` if the [`PYTHONLEGACYWINDOWSSTDIO`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONLEGACYWINDOWSSTDIO) environment variable is set to a non-empty string.
Only available on Windows. `#ifdef MS_WINDOWS` macro can be used for Windows specific code.
Default: `0`.
See also the [**PEP 528**](https://peps.python.org/pep-0528/) (Change Windows console encoding to UTF-8). 

intmalloc_stats[¶](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.malloc_stats "Link to this definition")
    
If non-zero, dump statistics on [Python pymalloc memory allocator](https://docs.python.org/3/c-api/memory.html#pymalloc) at exit.
Set to `1` by the [`PYTHONMALLOCSTATS`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONMALLOCSTATS) environment variable.
The option is ignored if Python is [`configured using the --without-pymalloc option`](https://docs.python.org/3/using/configure.html#cmdoption-without-pymalloc).
Default: `0`. 

wchar_t*platlibdir[¶](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.platlibdir "Link to this definition")
    
Platform library directory name: [`sys.platlibdir`](https://docs.python.org/3/library/sys.html#sys.platlibdir "sys.platlibdir").
Set by the [`PYTHONPLATLIBDIR`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPLATLIBDIR) environment variable.
Default: value of the `PLATLIBDIR` macro which is set by the [`configure --with-platlibdir option`](https://docs.python.org/3/using/configure.html#cmdoption-with-platlibdir) (default: `"lib"`, or `"DLLs"` on Windows).
Part of the [Python Path Configuration](https://docs.python.org/3/c-api/init_config.html#init-path-config) input.
Added in version 3.9.
Changed in version 3.11: This macro is now used on Windows to locate the standard library extension modules, typically under `DLLs`. However, for compatibility, note that this value is ignored for any non-standard layouts, including in-tree builds and virtual environments.