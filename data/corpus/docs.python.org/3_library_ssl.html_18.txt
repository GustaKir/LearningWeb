Title: SSL Context and Protocol Updates in Python 3.10
URL: https://docs.python.org/3/library/ssl.html
Summary: The ssl.SSLContext class no longer allows the instantiation without a protocol argument, now requiring either PROTOCOL_TLS_CLIENT or PROTOCOL_TLS_SERVER. In Python 3.10, the default cipher suites have been updated to include only secure AES and ChaCha20 ciphers with enhanced security requirements, prohibiting RSA and DH keys shorter than 2048 bits and ECC keys shorter than 224 bits.
---

//docs.python.org/3/library/ssl.html#ssl.SSLContext "ssl.SSLContext") without protocol argument is deprecated. The context class will either require [`PROTOCOL_TLS_CLIENT`](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS_CLIENT "ssl.PROTOCOL_TLS_CLIENT") or [`PROTOCOL_TLS_SERVER`](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS_SERVER "ssl.PROTOCOL_TLS_SERVER") protocol in the future.
Changed in version 3.10: The default cipher suites now include only secure AES and ChaCha20 ciphers with forward secrecy and security level 2. RSA and DH keys with less than 2048 bits and ECC keys with less than 224 bits are prohibited. [`PROTOCOL_TLS`](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS "ssl.PROTOCOL_TLS"), [`PROTOCOL_TLS_CLIENT`](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS_CLIENT "ssl.PROTOCOL_TLS_CLIENT"), and [`PROTOCOL_TLS_SERVER`](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS_SERVER "ssl.PROTOCOL_TLS_SERVER") use TLS 1.2 as minimum TLS version.
Note
[`SSLContext`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext "ssl.SSLContext") only supports limited mutation once it has been used by a connection. Adding new certificates to the internal trust store is allowed, but changing ciphers, verification settings, or mTLS certificates may result in surprising behavior.
Note
[`SSLContext`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext "ssl.SSLContext") is designed to be shared and used by multiple connections. Thus, it is thread-safe as long as it is not reconfigured after being used by a connection.
[`SSLContext`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext "ssl.SSLContext") objects have the following methods and attributes: 

SSLContext.cert_store_stats()[Â¶](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.cert_store_stats "Link to this definition")
    
Get statistics about quantities of loaded X.509 certificates, count of X.509 certificates flagged as CA certificates and certificate revocation lists as dictionary.
Example for a context with one CA cert and one other cert:
>>>```
>>> context.cert_store_stats()
{'crl': 0, 'x509_ca': 1, 'x509': 2}