Title: Power, Exponential and Logarithmic Functions in Python Math Library
URL: https://docs.python.org/3/library/math.html
Summary: This section of the Python Math library documentation explains ULP (Unit in the Last Place) and introduces various power, exponential, and logarithmic functions, including `math.cbrt()` for cube roots, `math.exp()` for natural exponentiation, and `math.exp2()` for base-2 exponentiation. It notes that these functions were added in specific versions, enhancing their accuracy compared to standard operations.
---

ULP stands for “Unit in the Last Place”.
See also [`math.nextafter()`](https://docs.python.org/3/library/math.html#math.nextafter "math.nextafter") and [`sys.float_info.epsilon`](https://docs.python.org/3/library/sys.html#sys.float_info "sys.float_info").
Added in version 3.9.
## Power, exponential and logarithmic functions[¶](https://docs.python.org/3/library/math.html#power-exponential-and-logarithmic-functions "Link to this heading") 

math.cbrt(_x_)[¶](https://docs.python.org/3/library/math.html#math.cbrt "Link to this definition")
    
Return the cube root of _x_.
Added in version 3.11. 

math.exp(_x_)[¶](https://docs.python.org/3/library/math.html#math.exp "Link to this definition")
    
Return _e_ raised to the power _x_ , where _e_ = 2.718281… is the base of natural logarithms. This is usually more accurate than `math.e ** x` or `pow(math.e, x)`. 

math.exp2(_x_)[¶](https://docs.python.org/3/library/math.html#math.exp2 "Link to this definition")
    
Return _2_ raised to the power _x_.
Added in version 3.11. 

math.expm1(_x_)[¶](https://docs.python.org/3/library/math.html#math.expm1 "Link to this definition")
    
Return _e_ raised to the power _x_ , minus 1. Here _e_ is the base of natural logarithms. For small floats _x_ , the subtraction in `exp(x) - 1` can result in a [significant loss of precision](https://en.wikipedia.org/wiki/Loss_of_significance); the [`expm1()`](https://docs.python.org/3/library/math.html#math.expm1 "math.expm1") function provides a way to compute this quantity to full precision:
>>>```
>>> frommathimport exp, expm1
>>> exp(1e-5) - 1 # gives result accurate to 11 places
1.0000050000069649e-05
>>> expm1(1e-5)  # result accurate to full precision
1.0000050000166668e-05

```

Added in version 3.2. 

math.log(_x_[, _base_])[¶](https://docs.python.org/3/library/math.html#math.log "Link to this definition")
    
With one argument, return the natural logarithm of _x_ (to base _e_).
With two arguments, return the logarithm of _x_ to the given _base_ , calculated as `log(x)/log(base)`. 

math.log1p(_x_)[¶](https://docs.python.org/3/library/math.html#math.log1p "Link to this definition")
    
Return the natural logarithm of _1+x_ (base _e_). The result is calculated in a way which is accurate for _x_ near zero. 

math.log2(_x_)[¶](https://docs.python.org/3/library/math.html#math.log2 "Link to this definition")
    
Return the base-2 logarithm of _x_. This is usually more accurate than `log(x, 2)`.
Added in version 3.3.
See also
[`int.bit_length()`](https://docs.python.org/3/library/stdtypes.html#int.bit_length "int.bit_length") returns the number of bits necessary to represent an integer in binary, excluding the sign and leading zeros. 

math.log10(_x_)[¶](https://docs.python.org/3/library/math.html#math.log10 "Link to this definition")
    
Return the base-10 logarithm of _x_. This is usually more accurate than `log(x, 10)`. 

math.pow(_x_ , _y_)[¶](https://docs.python.org/3/library/math.html#math.pow "Link to this definition")
    
Return _x_ raised to the power _y_. Exceptional cases follow the IEEE 754 standard as far as possible. In particular, `pow(1.0, x)` and `pow(x, 0.0)` always return `1.0`, even when _x_ is a zero or a NaN. If both _x_ and _y_ are finite, _x_ is negative, and _y_ is not an integer then `pow(x, y)` is undefined, and raises [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError").
Unlike the built-in `**` operator, [`math.pow()`](https://docs.python.org/3/library/math.html#math.pow "math.pow") converts both its arguments to type [`float`](https://docs.python.org/3/library/functions.html#float "float"). Use `**` or the built-in [`pow()`](https://docs.python.org/3/library/functions.html#pow "pow") function for computing exact integer powers.
Changed in version 3.11: The special cases `pow(0.0, -inf)` and `pow(-0.0, -inf)` were changed to return `inf` instead of raising [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError"), for consistency with IEEE 754. 

math.sqrt(_x_)[¶](https://docs.python.org/3/library/math.html#math.sqrt "Link to this definition")
    
Return the square root of _x_.
## Summation and product functions[¶](https://docs.python.org/3/library/math.html#summation-and-product-functions "Link to this heading") 

math.dist(_p_ , _q_)[¶](https://docs.python.org/3/library/math.html#math.dist "Link to this definition")
    
Return the Euclidean distance between two points _p_ and _q_ , each given as a sequence (or iterable) of coordinates. The two points must have the same dimension.
Roughly equivalent to:
```
sqrt(sum((px - qx) ** 2.0 for px, qx in zip(p, q)))