Title: cmath - Mathematical Functions for Complex Numbers
URL: https://docs.python.org/3/library/cmath.html
Summary: The cmath library in Python provides mathematical functions essential for complex number calculations, including conversions to and from polar coordinates, power and logarithmic functions, trigonometric functions, and hyperbolic functions.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [`cmath` — Mathematical functions for complex numbers](https://docs.python.org/3/library/cmath.html)
    * [Conversions to and from polar coordinates](https://docs.python.org/3/library/cmath.html#conversions-to-and-from-polar-coordinates)
    * [Power and logarithmic functions](https://docs.python.org/3/library/cmath.html#power-and-logarithmic-functions)
    * [Trigonometric functions](https://docs.python.org/3/library/cmath.html#trigonometric-functions)
    * [Hyperbolic functions](https://docs.python.org/3/library/cmath.html#hyperbolic-functions)
    * [Classification functions](https://docs.python.org/3/library/cmath.html#classification-functions)
    * [Constants](https://docs.python.org/3/library/cmath.html#constants)


#### Previous topic
[`math` — Mathematical functions](https://docs.python.org/3/library/math.html "previous chapter")
#### Next topic
[`decimal` — Decimal fixed-point and floating-point arithmetic](https://docs.python.org/3/library/decimal.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/cmath.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/decimal.html "decimal — Decimal fixed-point and floating-point arithmetic") |
  * [previous](https://docs.python.org/3/library/math.html "math — Mathematical functions") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Numeric and Mathematical Modules](https://docs.python.org/3/library/numeric.html) »
  * [`cmath` — Mathematical functions for complex numbers](https://docs.python.org/3/library/cmath.html)
  * | 
  * Theme  Auto Light Dark |


# `cmath` — Mathematical functions for complex numbers[¶](https://docs.python.org/3/library/cmath.html#module-cmath "Link to this heading")
This module provides access to mathematical functions for complex numbers. The functions in this module accept integers, floating-point numbers or complex numbers as arguments. They will also accept any Python object that has either a [`__complex__()`](https://docs.python.org/3/reference/datamodel.html#object.__complex__ "object.__complex__") or a [`__float__()`](https://docs.python.org/3/reference/datamodel.html#object.__float__ "object.__float__") method: these methods are used to convert the object to a complex or floating-point number, respectively, and the function is then applied to the result of the conversion.
Note
For functions involving branch cuts, we have the problem of deciding how to define those functions on the cut itself. Following Kahan’s “Branch cuts for complex elementary functions” paper, as well as Annex G of C99 and later C standards, we use the sign of zero to distinguish one side of the branch cut from the other: for a branch cut along (a portion of) the real axis we look at the sign of the imaginary part, while for a branch cut along the imaginary axis we look at the sign of the real part.
For example, the [`cmath.sqrt()`](https://docs.python.org/3/library/cmath.html#cmath.sqrt "cmath.sqrt") function has a branch cut along the negative real axis. An argument of `complex(-2.0, -0.0)` is treated as though it lies _below_ the branch cut, and so gives a result on the negative imaginary axis:
>>>```
>>> cmath.sqrt(complex(-2.0, -0.0))
-1.4142135623730951j

```

But an argument of `complex(-2.0, 0.0)` is treated as though it lies above the branch cut:
>>>```
>>> cmath.sqrt(complex(-2.0, 0.0))
1.4142135623730951j