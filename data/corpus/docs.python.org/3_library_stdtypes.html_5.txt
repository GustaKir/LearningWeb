Title: Integer to Bytes Conversion in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This section explains how to convert integers to byte representations using the `to_bytes` method, including specifications for length, byte order, and signed representation. It details the default values for these parameters and mentions the potential for an `OverflowError` if the integer cannot be represented in the specified byte length.
---

```
>>> (1024).to_bytes(2, byteorder='big')
b'\x04\x00'
>>> (1024).to_bytes(10, byteorder='big')
b'\x00\x00\x00\x00\x00\x00\x00\x00\x04\x00'
>>> (-1024).to_bytes(10, byteorder='big', signed=True)
b'\xff\xff\xff\xff\xff\xff\xff\xff\xfc\x00'
>>> x = 1000
>>> x.to_bytes((x.bit_length() + 7) // 8, byteorder='little')
b'\xe8\x03'

```

The integer is represented using _length_ bytes, and defaults to 1. An [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError") is raised if the integer is not representable with the given number of bytes.
The _byteorder_ argument determines the byte order used to represent the integer, and defaults to `"big"`. If _byteorder_ is `"big"`, the most significant byte is at the beginning of the byte array. If _byteorder_ is `"little"`, the most significant byte is at the end of the byte array.
The _signed_ argument determines whether two’s complement is used to represent the integer. If _signed_ is `False` and a negative integer is given, an [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError") is raised. The default value for _signed_ is `False`.
The default values can be used to conveniently turn an integer into a single byte object:
>>>```
>>> (65).to_bytes()
b'A'

```

However, when using the default arguments, don’t try to convert a value greater than 255 or you’ll get an [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError").
Equivalent to:
```
defto_bytes(n, length=1, byteorder='big', signed=False):
  if byteorder == 'little':
    order = range(length)
  elif byteorder == 'big':
    order = reversed(range(length))
  else:
    raise ValueError("byteorder must be either 'little' or 'big'")
  return bytes((n >> i*8) & 0xff for i in order)

```

Added in version 3.2.
Changed in version 3.11: Added default argument values for `length` and `byteorder`. 

_classmethod_ int.from_bytes(_bytes_ , _byteorder ='big'_, _*_ , _signed =False_)[¶](https://docs.python.org/3/library/stdtypes.html#int.from_bytes "Link to this definition")
    
Return the integer represented by the given array of bytes.
>>>```
>>> int.from_bytes(b'\x00\x10', byteorder='big')
16
>>> int.from_bytes(b'\x00\x10', byteorder='little')
4096
>>> int.from_bytes(b'\xfc\x00', byteorder='big', signed=True)
-1024
>>> int.from_bytes(b'\xfc\x00', byteorder='big', signed=False)
64512
>>> int.from_bytes([255, 0, 0], byteorder='big')
16711680

```

The argument _bytes_ must either be a [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object) or an iterable producing bytes.
The _byteorder_ argument determines the byte order used to represent the integer, and defaults to `"big"`. If _byteorder_ is `"big"`, the most significant byte is at the beginning of the byte array. If _byteorder_ is `"little"`, the most significant byte is at the end of the byte array. To request the native byte order of the host system, use [`sys.byteorder`](https://docs.python.org/3/library/sys.html#sys.byteorder "sys.byteorder") as the byte order value.
The _signed_ argument indicates whether two’s complement is used to represent the integer.
Equivalent to:
```
deffrom_bytes(bytes, byteorder='big', signed=False):
  if byteorder == 'little':
    little_ordered = list(bytes)
  elif byteorder == 'big':
    little_ordered = list(reversed(bytes))
  else:
    raise ValueError("byteorder must be either 'little' or 'big'")
  n = sum(b << i*8 for i, b in enumerate(little_ordered))
  if signed and little_ordered and (little_ordered[-1] & 0x80):
    n -= 1 << 8*len(little_ordered)
  return n