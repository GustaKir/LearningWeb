Title: os.remove - Remove a File in Python
URL: https://docs.python.org/3/library/os.html
Summary: The os.remove function deletes the specified file path. If the path is a directory, an OSError is raised. For non-existing files, a FileNotFoundError occurs. Additionally, on Windows, an exception is raised if the file is in use, while on Unix, the entry is removed but storage is released only when the file is no longer in use. os.remove is functionally the same as os.unlink.
---

os.remove(_path_ , _*_ , _dir_fd =None_)[¶](https://docs.python.org/3/library/os.html#os.remove "Link to this definition")
    
Remove (delete) the file _path_. If _path_ is a directory, an [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") is raised. Use [`rmdir()`](https://docs.python.org/3/library/os.html#os.rmdir "os.rmdir") to remove directories. If the file does not exist, a [`FileNotFoundError`](https://docs.python.org/3/library/exceptions.html#FileNotFoundError "FileNotFoundError") is raised.
This function can support [paths relative to directory descriptors](https://docs.python.org/3/library/os.html#dir-fd).
On Windows, attempting to remove a file that is in use causes an exception to be raised; on Unix, the directory entry is removed but the storage allocated to the file is not made available until the original file is no longer in use.
This function is semantically identical to [`unlink()`](https://docs.python.org/3/library/os.html#os.unlink "os.unlink").
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.remove` with arguments `path`, `dir_fd`.
Changed in version 3.3: Added the _dir_fd_ parameter.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). 

os.removedirs(_name_)[¶](https://docs.python.org/3/library/os.html#os.removedirs "Link to this definition")
    
Remove directories recursively. Works like [`rmdir()`](https://docs.python.org/3/library/os.html#os.rmdir "os.rmdir") except that, if the leaf directory is successfully removed, [`removedirs()`](https://docs.python.org/3/library/os.html#os.removedirs "os.removedirs") tries to successively remove every parent directory mentioned in _path_ until an error is raised (which is ignored, because it generally means that a parent directory is not empty). For example, `os.removedirs('foo/bar/baz')` will first remove the directory `'foo/bar/baz'`, and then remove `'foo/bar'` and `'foo'` if they are empty. Raises [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") if the leaf directory could not be successfully removed.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.remove` with arguments `path`, `dir_fd`.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). 

os.rename(_src_ , _dst_ , _*_ , _src_dir_fd =None_, _dst_dir_fd =None_)[¶](https://docs.python.org/3/library/os.html#os.rename "Link to this definition")
    
Rename the file or directory _src_ to _dst_. If _dst_ exists, the operation will fail with an [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") subclass in a number of cases:
On Windows, if _dst_ exists a [`FileExistsError`](https://docs.python.org/3/library/exceptions.html#FileExistsError "FileExistsError") is always raised. The operation may fail if _src_ and _dst_ are on different filesystems. Use [`shutil.move()`](https://docs.python.org/3/library/shutil.html#shutil.move "shutil.move") to support moves to a different filesystem.
On Unix, if _src_ is a file and _dst_ is a directory or vice-versa, an [`IsADirectoryError`](https://docs.python.org/3/library/exceptions.html#IsADirectoryError "IsADirectoryError") or a [`NotADirectoryError`](https://docs.python.org/3/library/exceptions.html#NotADirectoryError "NotADirectoryError") will be raised respectively. If both are directories and _dst_ is empty, _dst_ will be silently replaced. If _dst_ is a non-empty directory, an [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") is raised. If both are files, _dst_ will be replaced silently if the user has permission. The operation may fail on some Unix flavors if _src_ and _dst_ are on different filesystems. If successful, the renaming will be an atomic operation (this is a POSIX requirement).
This function can support specifying _src_dir_fd_ and/or _dst_dir_fd_ to supply [paths relative to directory descriptors](https://docs.python.org/3/library/os.html#dir-fd).
If you want cross-platform overwriting of the destination, use [`replace()`](https://docs.python.org/3/library/os.html#os.replace "os.replace").
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.rename` with arguments `src`, `dst`, `src_dir_fd`, `dst_dir_fd`.
Changed in version 3.3: Added the _src_dir_fd_ and _dst_dir_fd_ parameters.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object) for _src_ and _dst_.