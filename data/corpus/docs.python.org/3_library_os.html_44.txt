Title: Using os.utime() and os.stat() for File Time Manipulation
URL: https://docs.python.org/3/library/os.html
Summary: Specifying tuples for both _times_ and _ns_ in the utime() function results in an error. The times set may not match those returned by a subsequent stat() call due to OS resolution limitations. To preserve exact timestamps, use _st_atime_ns_ and _st_mtime_ns_ from os.stat() with the _ns_ parameter in utime(). The function supports file descriptors, relative paths, and options for not following symlinks.
---

It is an error to specify tuples for both _times_ and _ns_.
Note that the exact times you set here may not be returned by a subsequent [`stat()`](https://docs.python.org/3/library/os.html#os.stat "os.stat") call, depending on the resolution with which your operating system records access and modification times; see [`stat()`](https://docs.python.org/3/library/os.html#os.stat "os.stat"). The best way to preserve exact times is to use the _st_atime_ns_ and _st_mtime_ns_ fields from the [`os.stat()`](https://docs.python.org/3/library/os.html#os.stat "os.stat") result object with the _ns_ parameter to [`utime()`](https://docs.python.org/3/library/os.html#os.utime "os.utime").
This function can support [specifying a file descriptor](https://docs.python.org/3/library/os.html#path-fd), [paths relative to directory descriptors](https://docs.python.org/3/library/os.html#dir-fd) and [not following symlinks](https://docs.python.org/3/library/os.html#follow-symlinks).
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.utime` with arguments `path`, `times`, `ns`, `dir_fd`.
Changed in version 3.3: Added support for specifying _path_ as an open file descriptor, and the _dir_fd_ , _follow_symlinks_ , and _ns_ parameters.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). 

os.walk(_top_ , _topdown =True_, _onerror =None_, _followlinks =False_)[¶](https://docs.python.org/3/library/os.html#os.walk "Link to this definition")
    
Generate the file names in a directory tree by walking the tree either top-down or bottom-up. For each directory in the tree rooted at directory _top_ (including _top_ itself), it yields a 3-tuple `(dirpath, dirnames, filenames)`.
_dirpath_ is a string, the path to the directory. _dirnames_ is a list of the names of the subdirectories in _dirpath_ (including symlinks to directories, and excluding `'.'` and `'..'`). _filenames_ is a list of the names of the non-directory files in _dirpath_. Note that the names in the lists contain no path components. To get a full path (which begins with _top_) to a file or directory in _dirpath_ , do `os.path.join(dirpath, name)`. Whether or not the lists are sorted depends on the file system. If a file is removed from or added to the _dirpath_ directory during generating the lists, whether a name for that file be included is unspecified.
If optional argument _topdown_ is `True` or not specified, the triple for a directory is generated before the triples for any of its subdirectories (directories are generated top-down). If _topdown_ is `False`, the triple for a directory is generated after the triples for all of its subdirectories (directories are generated bottom-up). No matter the value of _topdown_ , the list of subdirectories is retrieved before the tuples for the directory and its subdirectories are generated.
When _topdown_ is `True`, the caller can modify the _dirnames_ list in-place (perhaps using [`del`](https://docs.python.org/3/reference/simple_stmts.html#del) or slice assignment), and [`walk()`](https://docs.python.org/3/library/os.html#os.walk "os.walk") will only recurse into the subdirectories whose names remain in _dirnames_ ; this can be used to prune the search, impose a specific order of visiting, or even to inform [`walk()`](https://docs.python.org/3/library/os.html#os.walk "os.walk") about directories the caller creates or renames before it resumes [`walk()`](https://docs.python.org/3/library/os.html#os.walk "os.walk") again. Modifying _dirnames_ when _topdown_ is `False` has no effect on the behavior of the walk, because in bottom-up mode the directories in _dirnames_ are generated before _dirpath_ itself is generated.
By default, errors from the [`scandir()`](https://docs.python.org/3/library/os.html#os.scandir "os.scandir") call are ignored. If optional argument _onerror_ is specified, it should be a function; it will be called with one argument, an [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") instance. It can report the error to continue with the walk, or raise the exception to abort the walk. Note that the filename is available as the `filename` attribute of the exception object.
By default, [`walk()`](https://docs.python.org/3/library/os.html#os.walk "os.walk") will not walk down into symbolic links that resolve to directories. Set _followlinks_ to `True` to visit directories pointed to by symlinks, on systems that support them.
Note
Be aware that setting _followlinks_ to `True` can lead to infinite recursion if a link points to a parent directory of itself. [`walk()`](https://docs.python.org/3/library/os.html#os.walk "os.walk") does not keep track of the directories it visited already.
Note
If you pass a relative pathname, don’t change the current working directory between resumptions of [`walk()`](https://docs.python.org/3/library/os.html#os.walk "os.walk"). [`walk()`](https://docs.python.org/3/library/