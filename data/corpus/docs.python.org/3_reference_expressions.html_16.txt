Title: Keyword Arguments and Unpacking in Function Calls
URL: https://docs.python.org/3/reference/expressions.html
Summary: This section discusses the use of both keyword arguments and the `**expression` syntax in Python function calls. It explains that `**expression` must evaluate to a mapping, where each string key corresponds to a formal parameter. If a parameter has already been assigned a value, a `TypeError` is raised. It also notes that keys can be non-Python identifiers.
---

```

It is unusual for both keyword arguments and the `*expression` syntax to be used in the same call, so in practice this confusion does not often arise.
If the syntax `**expression` appears in the function call, `expression` must evaluate to a [mapping](https://docs.python.org/3/glossary.html#term-mapping), the contents of which are treated as additional keyword arguments. If a parameter matching a key has already been given a value (by an explicit keyword argument, or from another unpacking), a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") exception is raised.
When `**expression` is used, each key in this mapping must be a string. Each value from the mapping is assigned to the first formal parameter eligible for keyword assignment whose name is equal to the key. A key need not be a Python identifier (e.g. `"max-temp °F"` is acceptable, although it will not match any formal parameter that could be declared). If there is no match to a formal parameter the key-value pair is collected by the `**` parameter, if there is one, or if there is not, a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") exception is raised.
Formal parameters using the syntax `*identifier` or `**identifier` cannot be used as positional argument slots or as keyword argument names.
Changed in version 3.5: Function calls accept any number of `*` and `**` unpackings, positional arguments may follow iterable unpackings (`*`), and keyword arguments may follow dictionary unpackings (`**`). Originally proposed by [**PEP 448**](https://peps.python.org/pep-0448/).
A call always returns some value, possibly `None`, unless it raises an exception. How this value is computed depends on the type of the callable object.
If it is— 

a user-defined function:
    
The code block for the function is executed, passing it the argument list. The first thing the code block will do is bind the formal parameters to the arguments; this is described in section [Function definitions](https://docs.python.org/3/reference/compound_stmts.html#function). When the code block executes a [`return`](https://docs.python.org/3/reference/simple_stmts.html#return) statement, this specifies the return value of the function call. If execution reaches the end of the code block without executing a [`return`](https://docs.python.org/3/reference/simple_stmts.html#return) statement, the return value is `None`. 

a built-in function or method:
    
The result is up to the interpreter; see [Built-in Functions](https://docs.python.org/3/library/functions.html#built-in-funcs) for the descriptions of built-in functions and methods. 

a class object:
    
A new instance of that class is returned. 

a class instance method:
    
The corresponding user-defined function is called, with an argument list that is one longer than the argument list of the call: the instance becomes the first argument. 

a class instance:
    
The class must define a [`__call__()`](https://docs.python.org/3/reference/datamodel.html#object.__call__ "object.__call__") method; the effect is then the same as if that method was called.
## 6.4. Await expression[¶](https://docs.python.org/3/reference/expressions.html#await-expression "Link to this heading")
Suspend the execution of [coroutine](https://docs.python.org/3/glossary.html#term-coroutine) on an [awaitable](https://docs.python.org/3/glossary.html#term-awaitable) object. Can only be used inside a [coroutine function](https://docs.python.org/3/glossary.html#term-coroutine-function).
```
**await_expr** ::= "await" [primary](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-primary)

```

Added in version 3.5.
## 6.5. The power operator[¶](https://docs.python.org/3/reference/expressions.html#the-power-operator "Link to this heading")
The power operator binds more tightly than unary operators on its left; it binds less tightly than unary operators on its right. The syntax is:
```
**power** ::= ([await_expr](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-await_expr) | [primary](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-primary)) ["**" [u_expr](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-u_expr)]