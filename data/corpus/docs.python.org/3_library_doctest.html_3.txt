Title: Doctest Command Line Options
URL: https://docs.python.org/3/library/doctest.html
Summary: This section covers the command line options for doctest, including flags that control its behavior, specifically '-o' for option flags and '-f' for fail-fast. It also introduces how doctest functions, including the selection of docstrings and handling of examples and exceptions.
---

```


-o, --option <option>[¶](https://docs.python.org/3/library/doctest.html#cmdoption-doctest-o "Link to this definition")
    
Option flags control various aspects of doctest’s behavior, see section [Option Flags](https://docs.python.org/3/library/doctest.html#doctest-options).
Added in version 3.4. 

-f, --fail-fast[¶](https://docs.python.org/3/library/doctest.html#cmdoption-doctest-f "Link to this definition")
    
This is shorthand for `-o FAIL_FAST`.
Added in version 3.4.
## How It Works[¶](https://docs.python.org/3/library/doctest.html#how-it-works "Link to this heading")
This section examines in detail how doctest works: which docstrings it looks at, how it finds interactive examples, what execution context it uses, how it handles exceptions, and how option flags can be used to control its behavior. This is the information that you need to know to write doctest examples; for information about actually running doctest on these examples, see the following sections.
### Which Docstrings Are Examined?[¶](https://docs.python.org/3/library/doctest.html#which-docstrings-are-examined "Link to this heading")
The module docstring, and all function, class and method docstrings are searched. Objects imported into the module are not searched.
In addition, there are cases when you want tests to be part of a module but not part of the help text, which requires that the tests not be included in the docstring. Doctest looks for a module-level variable called `__test__` and uses it to locate other tests. If `M.__test__` exists, it must be a dict, and each entry maps a (string) name to a function object, class object, or string. Function and class object docstrings found from `M.__test__` are searched, and strings are treated as if they were docstrings. In output, a key `K` in `M.__test__` appears with name `M.__test__.K`.
For example, place this block of code at the top of `example.py`:
```
__test__ = {
  'numbers': """
>>> factorial(6)
720
>>> [factorial(n) for n in range(6)]
[1, 1, 2, 6, 24, 120]
"""
}

```

The value of `example.__test__["numbers"]` will be treated as a docstring and all the tests inside it will be run. It is important to note that the value can be mapped to a function, class object, or module; if so, `doctest` searches them recursively for docstrings, which are then scanned for tests.
Any classes found are recursively searched similarly, to test docstrings in their contained methods and nested classes.
### How are Docstring Examples Recognized?[¶](https://docs.python.org/3/library/doctest.html#how-are-docstring-examples-recognized "Link to this heading")
In most cases a copy-and-paste of an interactive console session works fine, but doctest isn’t trying to do an exact emulation of any specific Python shell.
>>>```
>>> # comments are ignored
>>> x = 12
>>> x
12
>>> if x == 13:
...   print("yes")
... else:
...   print("no")
...   print("NO")
...   print("NO!!!")
...
no
NO
NO!!!
>>>

```

Any expected output must immediately follow the final `'>>> '` or `'... '` line containing the code, and the expected output (if any) extends to the next `'>>> '` or all-whitespace line.
The fine print:
  * Expected output cannot contain an all-whitespace line, since such a line is taken to signal the end of expected output. If expected output does contain a blank line, put `<BLANKLINE>` in your doctest example each place a blank line is expected.
  * All hard tab characters are expanded to spaces, using 8-column tab stops. Tabs in output generated by the tested code are not modified. Because any hard tabs in the sample output _are_ expanded, this means that if the code output includes hard tabs, the only way the doctest can pass is if the [`NORMALIZE_WHITESPACE`](https://docs.python.org/3/library/doctest.html#doctest.NORMALIZE_WHITESPACE "doctest.NORMALIZE_WHITESPACE") option or [directive](https://docs.python.org/3/library/doctest.html#doctest-directives) is in effect. Alternatively, the test can be rewritten to capture the output and compare it to an expected value as part of the test. This handling of tabs in the source was arrived at through trial and error, and has proven to be the least error prone way of handling them. It is possible to use a different algorithm for handling tabs by writing a custom [`DocTestParser`](https://docs.python.org/3/library/doctest.html#doctest.DocTestParser "doctest.DocTestParser") class.
  * Output to stdout is captured, but not output to stderr (exception tracebacks are captured via a different means).
  * If you continue a line via backslashing in an interactive session, or for any other reason use a backslash, you should use a raw docstring, which will preserve your backslashes exactly as you type them:
>>>```
>>> deff(x):
... r'''Backslashes in a raw docstring: m\n'''
...
>>> print(f.__doc__)
Backslashes in a raw docstring: m\n