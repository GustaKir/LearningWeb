Title: Using Set and MutableSet as Mixin in Python
URL: https://docs.python.org/3/library/collections.abc.html
Summary: This section discusses how to use the Set and MutableSet classes as mixins in Python. It highlights the need for a way to create new instances from an iterable due to set operations generating new sets. The internal class method `_from_iterable()` is introduced for this purpose, and it should be overridden if the class using the Set mixin has a different constructor signature.
---

```

Notes on using [`Set`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Set "collections.abc.Set") and [`MutableSet`](https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableSet "collections.abc.MutableSet") as a mixin:
  1. Since some set operations create new sets, the default mixin methods need a way to create new instances from an [iterable](https://docs.python.org/3/glossary.html#term-iterable). The class constructor is assumed to have a signature in the form `ClassName(iterable)`. That assumption is factored-out to an internal [`classmethod`](https://docs.python.org/3/library/functions.html#classmethod "classmethod") called `_from_iterable()` which calls `cls(iterable)` to produce a new set. If the [`Set`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Set "collections.abc.Set") mixin is being used in a class with a different constructor signature, you will need to override `_from_iterable()` with a classmethod or regular method that can construct new instances from an iterable argument.
  2. To override the comparisons (presumably for speed, as the semantics are fixed), redefine [`__le__()`](https://docs.python.org/3/reference/datamodel.html#object.__le__ "object.__le__") and [`__ge__()`](https://docs.python.org/3/reference/datamodel.html#object.__ge__ "object.__ge__"), then the other operations will automatically follow suit.
  3. The [`Set`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Set "collections.abc.Set") mixin provides a `_hash()` method to compute a hash value for the set; however, [`__hash__()`](https://docs.python.org/3/reference/datamodel.html#object.__hash__ "object.__hash__") is not defined because not all sets are [hashable](https://docs.python.org/3/glossary.html#term-hashable) or immutable. To add set hashability using mixins, inherit from both [`Set()`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Set "collections.abc.Set") and [`Hashable()`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Hashable "collections.abc.Hashable"), then define `__hash__ = Set._hash`.


See also
  * [OrderedSet recipe](https://code.activestate.com/recipes/576694/) for an example built on [`MutableSet`](https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableSet "collections.abc.MutableSet").
  * For more about ABCs, see the [`abc`](https://docs.python.org/3/library/abc.html#module-abc "abc: Abstract base classes according to :pep:`3119`.") module and [**PEP 3119**](https://peps.python.org/pep-3119/).


### [Table of Contents](https://docs.python.org/3/contents.html)
  * [`collections.abc` — Abstract Base Classes for Containers](https://docs.python.org/3/library/collections.abc.html)
    * [Collections Abstract Base Classes](https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes)
    * [Collections Abstract Base Classes – Detailed Descriptions](https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes-detailed-descriptions)
    * [Examples and Recipes](https://docs.python.org/3/library/collections.abc.html#examples-and-recipes)


#### Previous topic
[`collections` — Container datatypes](https://docs.python.org/3/library/collections.html "previous chapter")
#### Next topic
[`heapq` — Heap queue algorithm](https://docs.python.org/3/library/heapq.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/collections.abc.rst)


«
### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/heapq.html "heapq — Heap queue algorithm") |
  * [previous](https://docs.python.org/3/library/collections.html "collections — Container datatypes") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Data Types](https://docs.python.org/3/library/datatypes.html) »
  * [`collections.abc` — Abstract Base Classes for Containers](https://docs.python.org/3/library/collections.abc.html)
  * | 
  * Theme  Auto Light Dark |