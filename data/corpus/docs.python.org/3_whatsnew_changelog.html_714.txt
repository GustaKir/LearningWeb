Title: Python 3.6.0b2 Changelog Updates
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This document discusses several updates and bug fixes in Python 3.6.0b2, including new functions to access thread states safely, improvements to deque insertion behavior by raising an IndexError for full deques, and changes in constant merging during code compilation to differentiate between constants of different types.
---

mment for FileFinder.find_spec().
  * [bpo-26154](https://bugs.python.org/issue?@action=redirect&bpo=26154): Add a new private _PyThreadState_UncheckedGet() function to get the current Python thread state, but don’t issue a fatal error if it is NULL. This new function must be used instead of accessing directly the _PyThreadState_Current variable. The variable is no more exposed since Python 3.5.1 to hide the exact implementation of atomic C types, to avoid compiler issues.
  * [bpo-26194](https://bugs.python.org/issue?@action=redirect&bpo=26194): Deque.insert() gave odd results for bounded deques that had reached their maximum size. Now an IndexError will be raised when attempting to insert into a full deque.
  * [bpo-25843](https://bugs.python.org/issue?@action=redirect&bpo=25843): When compiling code, don’t merge constants if they are equal but have a different types. For example, `f1, f2 = lambda: 1, lambda: 1.0` is now correctly compiled to two different functions: `f1()` returns `1` (`int`) and `f2()` returns `1.0` (`int`), even if `1` and `1.0` are equal.
  * [bpo-22995](https://bugs.python.org/issue?@action=redirect&bpo=22995): [UPDATE] Comment out the one of the pickleability tests in _PyObject_GetState() due to regressions observed in Cython-based projects.
  * [bpo-25961](https://bugs.python.org/issue?@action=redirect&bpo=25961): Disallowed null characters in the type name.
  * [bpo-25973](https://bugs.python.org/issue?@action=redirect&bpo=25973): Fix segfault when an invalid nonlocal statement binds a name starting with two underscores.
  * [bpo-22995](https://bugs.python.org/issue?@action=redirect&bpo=22995): Instances of extension types with a state that aren’t subclasses of list or dict and haven’t implemented any pickle-related methods (__reduce__, __reduce_ex__, __getnewargs__, __getnewargs_ex__, or __getstate__), can no longer be pickled. Including memoryview.
  * [bpo-20440](https://bugs.python.org/issue?@action=redirect&bpo=20440): Massive replacing unsafe attribute setting code with special macro Py_SETREF.
  * [bpo-25766](https://bugs.python.org/issue?@action=redirect&bpo=25766): Special method __bytes__() now works in str subclasses.
  * [bpo-25421](https://bugs.python.org/issue?@action=redirect&bpo=25421): __sizeof__ methods of builtin types now use dynamic basic size. This allows sys.getsize() to work correctly with their subclasses with __slots__ defined.
  * [bpo-25709](https://bugs.python.org/issue?@action=redirect&bpo=25709): Fixed problem with in-place string concatenation and utf-8 cache.
  * [bpo-27147](https://bugs.python.org/issue?@action=redirect&bpo=27147): Mention [**PEP 420**](https://peps.python.org/pep-0420/) in the importlib docs.
  * [bpo-24097](https://bugs.python.org/issue?@action=redirect&bpo=24097): Fixed crash in object.__reduce__() if slot name is freed inside __getattr__.
  * [bpo-24731](https://bugs.python.org/issue?@action=redirect&bpo=24731): Fixed crash on converting objects with special methods __bytes__, __trunc__, and __float__ returning instances of subclasses of bytes, int, and float to subclasses of bytes, int, and float correspondingly.
  * [bpo-26478](https://bugs.python.org/issue?@action=redirect&bpo=26478): Fix semantic bugs when using binary operators with dictionary views and tuples.
  * [bpo-26171](https://bugs.python.org/issue?@action=redirect&bpo=26171): Fix possible integer overflow and heap corruption in zipimporter.get_data().
  * [bpo-25660](https://bugs.python.org/issue?@action=redirect&bpo=25660): Fix TAB key behaviour in REPL with readline.
  * [bpo-25887](https://bugs.python.org/issue?@action=redirect&bpo=25887): Raise a RuntimeError when a coroutine object is awaited more than once.
  * [bpo-27243](https://bugs.python.org/issue?@action=redirect&bpo=27243): Update the __aiter__ protocol: instead of returning an awaitable that resolves to an asynchronous iterator, the asynchronous iterator should be returned directly. Doing the former will trigger a PendingDeprecationWarning.