Title: Python Built-in Functions
URL: https://docs.python.org/3/library/functions.html
Summary: This section provides an overview of various built-in functions in Python, including examples and descriptions of functions like `abs()`, `sorted()`, `sum()`, and others.
---

/docs.python.org/3/library/functions.html#slice "slice") [`sorted()`](https://docs.python.org/3/library/functions.html#sorted "sorted") [`staticmethod()`](https://docs.python.org/3/library/functions.html#staticmethod "staticmethod") [`str()`](https://docs.python.org/3/library/functions.html#func-str) [`sum()`](https://docs.python.org/3/library/functions.html#sum "sum") [`super()`](https://docs.python.org/3/library/functions.html#super "super") **T** [`tuple()`](https://docs.python.org/3/library/functions.html#func-tuple) [`type()`](https://docs.python.org/3/library/functions.html#type "type") **V** [`vars()`](https://docs.python.org/3/library/functions.html#vars "vars") **Z** [`zip()`](https://docs.python.org/3/library/functions.html#zip "zip") **_** [`__import__()`](https://docs.python.org/3/library/functions.html#import__ "__import__") 

abs(_x_)[¶](https://docs.python.org/3/library/functions.html#abs "Link to this definition")
      
Return the absolute value of a number. The argument may be an integer, a floating-point number, or an object implementing [`__abs__()`](https://docs.python.org/3/reference/datamodel.html#object.__abs__ "object.__abs__"). If the argument is a complex number, its magnitude is returned. 

aiter(_async_iterable_)[¶](https://docs.python.org/3/library/functions.html#aiter "Link to this definition")
    
Return an [asynchronous iterator](https://docs.python.org/3/glossary.html#term-asynchronous-iterator) for an [asynchronous iterable](https://docs.python.org/3/glossary.html#term-asynchronous-iterable). Equivalent to calling `x.__aiter__()`.
Note: Unlike [`iter()`](https://docs.python.org/3/library/functions.html#iter "iter"), [`aiter()`](https://docs.python.org/3/library/functions.html#aiter "aiter") has no 2-argument variant.
Added in version 3.10. 

all(_iterable_)[¶](https://docs.python.org/3/library/functions.html#all "Link to this definition")
    
Return `True` if all elements of the _iterable_ are true (or if the iterable is empty). Equivalent to:
```
defall(iterable):
  for element in iterable:
    if not element:
      return False
  return True

```


_awaitable _anext(_async_iterator_)[¶](https://docs.python.org/3/library/functions.html#anext "Link to this definition")


_awaitable _anext(_async_iterator_ , _default_)
    
When awaited, return the next item from the given [asynchronous iterator](https://docs.python.org/3/glossary.html#term-asynchronous-iterator), or _default_ if given and the iterator is exhausted.
This is the async variant of the [`next()`](https://docs.python.org/3/library/functions.html#next "next") builtin, and behaves similarly.
This calls the [`__anext__()`](https://docs.python.org/3/reference/datamodel.html#object.__anext__ "object.__anext__") method of _async_iterator_ , returning an [awaitable](https://docs.python.org/3/glossary.html#term-awaitable). Awaiting this returns the next value of the iterator. If _default_ is given, it is returned if the iterator is exhausted, otherwise [`StopAsyncIteration`](https://docs.python.org/3/library/exceptions.html#StopAsyncIteration "StopAsyncIteration") is raised.
Added in version 3.10. 

any(_iterable_)[¶](https://docs.python.org/3/library/functions.html#any "Link to this definition")
    
Return `True` if any element of the _iterable_ is true. If the iterable is empty, return `False`. Equivalent to:
```
defany(iterable):
  for element in iterable:
    if element:
      return True
  return False

```


ascii(_object_)[¶](https://docs.python.org/3/library/functions.html#ascii "Link to this definition")
    
As [`repr()`](https://docs.python.org/3/library/functions.html#repr "repr"), return a string containing a printable representation of an object, but escape the non-ASCII characters in the string returned by [`repr()`](https://docs.python.org/3/library/functions.html#repr "repr") using `\x`, `\u`, or `\U` escapes. This generates a string similar to that returned by [`repr()`](https://docs.python.org/3/library/functions.html#repr "repr") in Python 2. 

bin(_x_)[¶](https://docs.python.org/3/library/functions.html#bin "Link to this definition")
    
Convert an integer number to a binary string prefixed with “0b”. The result is a valid Python expression. If _x_ is not a Python [`int`](https://docs.python.org/3/library/functions.html#int "int") object, it has to define an [`__index__()`](https://docs.python.org/3/reference/datamodel.html#object.__index__ "object.__index__") method that returns an integer. Some examples:
>>>```
>>> bin(3)
'0b11'
>>> bin(-10)
'-0b1010'

```

If the prefix “0b” is desired or not, you can use either of the following ways.
>>>```
>>> format(14, '#b'), format(14, 'b')
('0b1110', '1110')
>>> f'{14:#b}', f'{14:b}'
('0b1110', '1110')