Title: Python Set and Frozenset Type Objects
URL: https://docs.python.org/3/c-api/set.html
Summary: This document discusses two instances of `PyTypeObject`: `PySet_Type`, representing the Python `set` type, and `PyFrozenSet_Type`, representing the `frozenset` type. Both are part of the Stable ABI.
---

[PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject")PySet_Type[¶](https://docs.python.org/3/c-api/set.html#c.PySet_Type "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
This is an instance of [`PyTypeObject`](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject") representing the Python [`set`](https://docs.python.org/3/library/stdtypes.html#set "set") type. 

[PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject")PyFrozenSet_Type[¶](https://docs.python.org/3/c-api/set.html#c.PyFrozenSet_Type "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
This is an instance of [`PyTypeObject`](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject") representing the Python [`frozenset`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset") type.
The following type check macros work on pointers to any Python object. Likewise, the constructor functions work with any iterable Python object. 

intPySet_Check([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*p)[¶](https://docs.python.org/3/c-api/set.html#c.PySet_Check "Link to this definition")
    
Return true if _p_ is a [`set`](https://docs.python.org/3/library/stdtypes.html#set "set") object or an instance of a subtype. This function always succeeds. 

intPyFrozenSet_Check([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*p)[¶](https://docs.python.org/3/c-api/set.html#c.PyFrozenSet_Check "Link to this definition")
    
Return true if _p_ is a [`frozenset`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset") object or an instance of a subtype. This function always succeeds. 

intPyAnySet_Check([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*p)[¶](https://docs.python.org/3/c-api/set.html#c.PyAnySet_Check "Link to this definition")
    
Return true if _p_ is a [`set`](https://docs.python.org/3/library/stdtypes.html#set "set") object, a [`frozenset`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset") object, or an instance of a subtype. This function always succeeds. 

intPySet_CheckExact([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*p)[¶](https://docs.python.org/3/c-api/set.html#c.PySet_CheckExact "Link to this definition")
    
Return true if _p_ is a [`set`](https://docs.python.org/3/library/stdtypes.html#set "set") object but not an instance of a subtype. This function always succeeds.
Added in version 3.10. 

intPyAnySet_CheckExact([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*p)[¶](https://docs.python.org/3/c-api/set.html#c.PyAnySet_CheckExact "Link to this definition")
    
Return true if _p_ is a [`set`](https://docs.python.org/3/library/stdtypes.html#set "set") object or a [`frozenset`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset") object but not an instance of a subtype. This function always succeeds. 

intPyFrozenSet_CheckExact([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*p)[¶](https://docs.python.org/3/c-api/set.html#c.PyFrozenSet_CheckExact "Link to this definition")
    
Return true if _p_ is a [`frozenset`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset") object but not an instance of a subtype. This function always succeeds. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PySet_New([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*iterable)[¶](https://docs.python.org/3/c-api/set.html#c.PySet_New "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return a new [`set`](https://docs.python.org/3/library/stdtypes.html#set "set") containing objects returned by the _iterable_. The _iterable_ may be `NULL` to create a new empty set. Return the new set on success or `NULL` on failure. Raise [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") if _iterable_ is not actually iterable. The constructor is also useful for copying a set (`c=set(s)`).