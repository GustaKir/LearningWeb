Title: Profile Module Overview
URL: https://docs.python.org/3/library/profile.html
Summary: This section details functions in the profile module of Python, including `enable()`, `disable()`, `create_stats()`, and `print_stats()`. It notes the addition of context manager support in version 3.8 and explains how to start and stop collecting profiling data, as well as creating and printing profiling statistics.
---

```

Changed in version 3.8: Added context manager support. 

enable()[¶](https://docs.python.org/3/library/profile.html#profile.Profile.enable "Link to this definition")
    
Start collecting profiling data. Only in [`cProfile`](https://docs.python.org/3/library/profile.html#module-cProfile "cProfile"). 

disable()[¶](https://docs.python.org/3/library/profile.html#profile.Profile.disable "Link to this definition")
    
Stop collecting profiling data. Only in [`cProfile`](https://docs.python.org/3/library/profile.html#module-cProfile "cProfile"). 

create_stats()[¶](https://docs.python.org/3/library/profile.html#profile.Profile.create_stats "Link to this definition")
    
Stop collecting profiling data and record the results internally as the current profile. 

print_stats(_sort =-1_)[¶](https://docs.python.org/3/library/profile.html#profile.Profile.print_stats "Link to this definition")
    
Create a [`Stats`](https://docs.python.org/3/library/profile.html#pstats.Stats "pstats.Stats") object based on the current profile and print the results to stdout.
The _sort_ parameter specifies the sorting order of the displayed statistics. It accepts a single key or a tuple of keys to enable multi-level sorting, as in [`Stats.sort_stats`](https://docs.python.org/3/library/profile.html#pstats.Stats.sort_stats "pstats.Stats.sort_stats").
Added in version 3.13: [`print_stats()`](https://docs.python.org/3/library/profile.html#profile.Profile.print_stats "profile.Profile.print_stats") now accepts a tuple of keys. 

dump_stats(_filename_)[¶](https://docs.python.org/3/library/profile.html#profile.Profile.dump_stats "Link to this definition")
    
Write the results of the current profile to _filename_. 

run(_cmd_)[¶](https://docs.python.org/3/library/profile.html#profile.Profile.run "Link to this definition")
    
Profile the cmd via [`exec()`](https://docs.python.org/3/library/functions.html#exec "exec"). 

runctx(_cmd_ , _globals_ , _locals_)[¶](https://docs.python.org/3/library/profile.html#profile.Profile.runctx "Link to this definition")
    
Profile the cmd via [`exec()`](https://docs.python.org/3/library/functions.html#exec "exec") with the specified global and local environment. 

runcall(_func_ , _/_ , _* args_, _** kwargs_)[¶](https://docs.python.org/3/library/profile.html#profile.Profile.runcall "Link to this definition")
    
Profile `func(*args, **kwargs)`
Note that profiling will only work if the called command/function actually returns. If the interpreter is terminated (e.g. via a [`sys.exit()`](https://docs.python.org/3/library/sys.html#sys.exit "sys.exit") call during the called command/function execution) no profiling results will be printed.
## The `Stats` Class[¶](https://docs.python.org/3/library/profile.html#the-stats-class "Link to this heading")
Analysis of the profiler data is done using the [`Stats`](https://docs.python.org/3/library/profile.html#pstats.Stats "pstats.Stats") class. 

_class_ pstats.Stats(_*filenames or profile_, _stream=sys.stdout_)[¶](https://docs.python.org/3/library/profile.html#pstats.Stats "Link to this definition")
    
This class constructor creates an instance of a “statistics object” from a _filename_ (or list of filenames) or from a `Profile` instance. Output will be printed to the stream specified by _stream_.
The file selected by the above constructor must have been created by the corresponding version of [`profile`](https://docs.python.org/3/library/profile.html#module-profile "profile: Python source profiler.") or [`cProfile`](https://docs.python.org/3/library/profile.html#module-cProfile "cProfile"). To be specific, there is _no_ file compatibility guaranteed with future versions of this profiler, and there is no compatibility with files produced by other profilers, or the same profiler run on a different operating system. If several files are provided, all the statistics for identical functions will be coalesced, so that an overall view of several processes can be considered in a single report. If additional files need to be combined with data in an existing [`Stats`](https://docs.python.org/3/library/profile.html#pstats.Stats "pstats.Stats") object, the [`add()`](https://docs.python.org/3/library/profile.html#pstats.Stats.add "pstats.Stats.add") method can be used.
Instead of reading the profile data from a file, a `cProfile.Profile` or [`profile.Profile`](https://docs.python.org/3/library/profile.html#profile.Profile "profile.Profile") object can be used as the profile data source.
[`Stats`](https://docs.python.org/3/library/profile.html#pstats.Stats "pstats.Stats") objects have the following methods: