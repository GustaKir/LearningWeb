Title: Improvements and Changes in Asyncio and Error Handling
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This documentation chunk outlines various enhancements, including a 5% speed increase in asyncio benchmarks, changes to error handling and message clarity, and updates related to performance mapping and C tokenizer modifications as per PEP 701.
---

This makes asyncio benchmarks up to 5% faster.
  * [gh-102310](https://github.com/python/cpython/issues/102310): Change the error range for invalid bytes literals.
  * [gh-103590](https://github.com/python/cpython/issues/103590): Do not wrap a single exception raised from a `try-except*` construct in an [`ExceptionGroup`](https://docs.python.org/3/library/exceptions.html#ExceptionGroup "ExceptionGroup").
  * [gh-103650](https://github.com/python/cpython/issues/103650): Change the perf map format to remove the ‘0x’ prefix from the addresses
  * [gh-102856](https://github.com/python/cpython/issues/102856): Implement the required C tokenizer changes for PEP 701. Patch by Pablo Galindo Salgado, Lysandros Nikolaou, Batuhan Taskaya, Marta Gómez Macías and sunmy2019.
  * [gh-100530](https://github.com/python/cpython/issues/100530): Clarify the error message raised when the called part of a class pattern isn’t actually a class.
  * [gh-101517](https://github.com/python/cpython/issues/101517): Fix bug in line numbers of instructions emitted for [`except*`](https://docs.python.org/3/reference/compound_stmts.html#except-star).
  * [gh-103492](https://github.com/python/cpython/issues/103492): Clarify [`SyntaxWarning`](https://docs.python.org/3/library/exceptions.html#SyntaxWarning "SyntaxWarning") with literal `is` comparison by specifying which literal is problematic, since comparisons using `is` with e.g. `None` and bool literals are idiomatic.
  * [gh-87729](https://github.com/python/cpython/issues/87729): Add [`LOAD_SUPER_ATTR`](https://docs.python.org/3/library/dis.html#opcode-LOAD_SUPER_ATTR) (and a specialization for `super().method()`) to speed up `super().method()` and `super().attr`. This makes `super().method()` roughly 2.3x faster and brings it within 20% of the performance of a simple method call. Patch by Vladimir Matveev and Carl Meyer.
  * [gh-103488](https://github.com/python/cpython/issues/103488): Change the internal offset distinguishing yield and return target addresses, so that the instruction pointer is correct for exception handling and other stack unwinding.
  * [gh-82012](https://github.com/python/cpython/issues/82012): The bitwise inversion operator (`~`) on bool is deprecated. It returns the bitwise inversion of the underlying `int` representation such that `bool(~True) == True`, which can be confusing. Use `not` for logical negation of bools. In the rare case that you really need the bitwise inversion of the underlying `int`, convert to int explicitly `~int(x)`.
  * [gh-77757](https://github.com/python/cpython/issues/77757): Exceptions raised in a typeobject’s `__set_name__` method are no longer wrapped by a [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError"). Context information is added to the exception as a [**PEP 678**](https://peps.python.org/pep-0678/) note.
  * [gh-103333](https://github.com/python/cpython/issues/103333): [`AttributeError`](https://docs.python.org/3/library/exceptions.html#AttributeError "AttributeError") now retains the `name` attribute when pickled and unpickled.
  * [gh-103242](https://github.com/python/cpython/issues/103242): Migrate [`set_ecdh_curve()`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_ecdh_curve "ssl.SSLContext.set_ecdh_curve") method not to use deprecated OpenSSL APIs. Patch by Donghee Na.
  * [gh-103323](https://github.com/python/cpython/issues/103323): We’ve replaced our use of `_PyRuntime.tstate_current` with a thread-local variable. This is a fairly low-level implementation detail, and there should be no change in behavior.
  * [gh-84436](https://github.com/python/cpython/issues/84436): The implementation of PEP-683 which adds Immortal Objects by using a fixed reference count that skips reference counting to make objects truly immutable.
  * [gh-102700](https://github.com/python/cpython/issues/102700): Allow built-in modules to be submodules. This allows submodules to be statically linked into a CPython binary.
  * [gh-103082](https://github.com/python/cpython/issues/103082): Implement [**PEP 669**](https://peps.python.org/pep-0669/) Low Impact Monitoring for CPython.
  * [gh-88691](https://github.com/python/cpython/issues/88691): Reduce the number of inline [`CACHE`](https://docs.python.org/3/library/dis.html#opcode-CACHE) entries for [`CALL`](https://docs.python.org/3/library/dis.html#opcode-CALL).
  * [gh-102500](https://github.com/python/cpython/issues/102500): Make the buffer protocol accessible in Python code using the new `__buffer__` and `__release_buffer__` magic methods. See [**PEP 688**](https://peps.python.org/pep-0688/) for details.