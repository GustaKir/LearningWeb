Title: Changelog for Core and Builtins
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section outlines recent changes in Python's core and built-in features, including a reversion of error message improvements for `elif`/`else` statements, support for `PyOS_InputHook()` in the REPL, and fixes for execution of annotation scopes in classes. Additionally, a new `clear` command has been added to the REPL.
---

### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id67 "Link to this heading")
  * [gh-119724](https://github.com/python/cpython/issues/119724): Reverted improvements to error messages for `elif`/`else` statements not matching any valid statements, which made in hard to locate the syntax errors inside those `elif`/`else` blocks.
  * [gh-119842](https://github.com/python/cpython/issues/119842): Honor [`PyOS_InputHook()`](https://docs.python.org/3/c-api/veryhigh.html#c.PyOS_InputHook "PyOS_InputHook") in the new REPL. Patch by Pablo Galindo
  * [gh-119821](https://github.com/python/cpython/issues/119821): Fix execution of [annotation scopes](https://docs.python.org/3/reference/executionmodel.html#annotation-scopes) within classes when `globals` is set to a non-dict. Patch by Jelle Zijlstra.
  * [gh-119548](https://github.com/python/cpython/issues/119548): Add a `clear` command to the REPL. Patch by Pablo Galindo
  * [gh-111999](https://github.com/python/cpython/issues/111999): Fix the signature of [`str.format_map()`](https://docs.python.org/3/library/stdtypes.html#str.format_map "str.format_map").
  * [gh-119560](https://github.com/python/cpython/issues/119560): An invalid assert in beta 1 has been removed. The assert would fail if `PyState_FindModule()` was used in an extension module’s init function before the module def had been initialized.
  * [gh-119369](https://github.com/python/cpython/issues/119369): Fix deadlock during thread deletion in free-threaded build, which could occur when the GIL was enabled at runtime.
  * [gh-119525](https://github.com/python/cpython/issues/119525): Fix deadlock involving `_PyType_Lookup()` cache in the free-threaded build when the GIL is dynamically enabled at runtime.
  * [gh-119311](https://github.com/python/cpython/issues/119311): Fix bug where names are unexpectedly mangled in the bases of generic classes.
  * [gh-119395](https://github.com/python/cpython/issues/119395): Fix bug where names appearing after a generic class are mangled as if they are in the generic class.
  * [gh-119213](https://github.com/python/cpython/issues/119213): Non-builtin modules built with argument clinic were crashing if used in a subinterpreter before the main interpreter. The objects that were causing the problem by leaking between interpreters carelessly have been fixed.
  * [gh-119011](https://github.com/python/cpython/issues/119011): Fixes `type.__type_params__` to return an empty tuple instead of a descriptor.
  * [gh-118692](https://github.com/python/cpython/issues/118692): Avoid creating unnecessary [`StopIteration`](https://docs.python.org/3/library/exceptions.html#StopIteration "StopIteration") instances for monitoring.
  * [gh-119049](https://github.com/python/cpython/issues/119049): Fix displaying the source line for warnings created by the C API if the [`warnings`](https://docs.python.org/3/library/warnings.html#module-warnings "warnings: Issue warning messages and control their disposition.") module had not yet been imported.
  * [gh-118844](https://github.com/python/cpython/issues/118844): Fix build failures when configuring with both `--disable-gil` and `--enable-experimental-jit`.
  * [gh-118921](https://github.com/python/cpython/issues/118921): Add `copy()` method for `FrameLocalsProxy` which returns a snapshot `dict` for local variables.
  * [gh-117657](https://github.com/python/cpython/issues/117657): Fix data races on the field that stores a pointer to the interpreter’s main thread that occur in free-threaded builds.
  * [gh-118561](https://github.com/python/cpython/issues/118561): Fix race condition in free-threaded build where `list.extend()` could expose uninitialised memory to concurrent readers.
  * [gh-117195](https://github.com/python/cpython/issues/117195): Avoid assertion failure for debug builds when calling `object.__sizeof__(1)`