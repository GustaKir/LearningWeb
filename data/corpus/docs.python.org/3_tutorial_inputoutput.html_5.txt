Title: File Operations and JSON in Python
URL: https://docs.python.org/3/tutorial/inputoutput.html
Summary: This section discusses file operations in Python, specifically seeking in text files which is limited to the start of the file and only allows certain offset values. It mentions additional file object methods like `isatty()` and `truncate()`, directing readers to the Library Reference for more details. It also introduces saving structured data using the `json` module.
---

```

In text files (those opened without a `b` in the mode string), only seeks relative to the beginning of the file are allowed (the exception being seeking to the very file end with `seek(0, 2)`) and the only valid _offset_ values are those returned from the `f.tell()`, or zero. Any other _offset_ value produces undefined behaviour.
File objects have some additional methods, such as [`isatty()`](https://docs.python.org/3/library/io.html#io.IOBase.isatty "io.IOBase.isatty") and [`truncate()`](https://docs.python.org/3/library/io.html#io.IOBase.truncate "io.IOBase.truncate") which are less frequently used; consult the Library Reference for a complete guide to file objects.
### 7.2.2. Saving structured data with [`json`](https://docs.python.org/3/library/json.html#module-json "json: Encode and decode the JSON format.")[Â¶](https://docs.python.org/3/tutorial/inputoutput.html#saving-structured-data-with-json "Link to this heading")
Strings can easily be written to and read from a file. Numbers take a bit more effort, since the [`read()`](https://docs.python.org/3/library/io.html#io.TextIOBase.read "io.TextIOBase.read") method only returns strings, which will have to be passed to a function like [`int()`](https://docs.python.org/3/library/functions.html#int "int"), which takes a string like `'123'` and returns its numeric value 123. When you want to save more complex data types like nested lists and dictionaries, parsing and serializing by hand becomes complicated.
Rather than having users constantly writing and debugging code to save complicated data types to files, Python allows you to use the popular data interchange format called [JSON (JavaScript Object Notation)](https://json.org). The standard module called [`json`](https://docs.python.org/3/library/json.html#module-json "json: Encode and decode the JSON format.") can take Python data hierarchies, and convert them to string representations; this process is called _serializing_. Reconstructing the data from the string representation is called _deserializing_. Between serializing and deserializing, the string representing the object may have been stored in a file or data, or sent over a network connection to some distant machine.
Note
The JSON format is commonly used by modern applications to allow for data exchange. Many programmers are already familiar with it, which makes it a good choice for interoperability.
If you have an object `x`, you can view its JSON string representation with a simple line of code:
>>>```
>>> importjson
>>> x = [1, 'simple', 'list']
>>> json.dumps(x)
'[1, "simple", "list"]'

```

Another variant of the [`dumps()`](https://docs.python.org/3/library/json.html#json.dumps "json.dumps") function, called [`dump()`](https://docs.python.org/3/library/json.html#json.dump "json.dump"), simply serializes the object to a [text file](https://docs.python.org/3/glossary.html#term-text-file). So if `f` is a [text file](https://docs.python.org/3/glossary.html#term-text-file) object opened for writing, we can do this:
```
json.dump(x, f)

```

To decode the object again, if `f` is a [binary file](https://docs.python.org/3/glossary.html#term-binary-file) or [text file](https://docs.python.org/3/glossary.html#term-text-file) object which has been opened for reading:
```
x = json.load(f)