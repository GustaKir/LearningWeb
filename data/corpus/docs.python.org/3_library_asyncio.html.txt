Title: Asyncio Documentation
URL: https://docs.python.org/3/library/asyncio.html
Summary: This section begins the documentation for the asyncio library in Python, detailing topics related to asynchronous programming, networking, and interprocess communication.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
#### Previous topic
[Networking and Interprocess Communication](https://docs.python.org/3/library/ipc.html "previous chapter")
#### Next topic
[Runners](https://docs.python.org/3/library/asyncio-runner.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/asyncio.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/asyncio-runner.html "Runners") |
  * [previous](https://docs.python.org/3/library/ipc.html "Networking and Interprocess Communication") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Networking and Interprocess Communication](https://docs.python.org/3/library/ipc.html) »
  * [`asyncio` — Asynchronous I/O](https://docs.python.org/3/library/asyncio.html)
  * | 
  * Theme  Auto Light Dark |


# `asyncio` — Asynchronous I/O[¶](https://docs.python.org/3/library/asyncio.html#module-asyncio "Link to this heading")
Hello World!
```
importasyncio
async defmain():
  print('Hello ...')
  await asyncio.sleep(1)
  print('... World!')
asyncio.run(main())

```

asyncio is a library to write **concurrent** code using the **async/await** syntax.
asyncio is used as a foundation for multiple Python asynchronous frameworks that provide high-performance network and web-servers, database connection libraries, distributed task queues, etc.
asyncio is often a perfect fit for IO-bound and high-level **structured** network code.
asyncio provides a set of **high-level** APIs to:
  * [run Python coroutines](https://docs.python.org/3/library/asyncio-task.html#coroutine) concurrently and have full control over their execution;
  * perform [network IO and IPC](https://docs.python.org/3/library/asyncio-stream.html#asyncio-streams);
  * control [subprocesses](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio-subprocess);
  * distribute tasks via [queues](https://docs.python.org/3/library/asyncio-queue.html#asyncio-queues);
  * [synchronize](https://docs.python.org/3/library/asyncio-sync.html#asyncio-sync) concurrent code;


Additionally, there are **low-level** APIs for _library and framework developers_ to:
  * create and manage [event loops](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio-event-loop), which provide asynchronous APIs for [networking](https://docs.python.org/3/library/asyncio-eventloop.html#loop-create-server), running [subprocesses](https://docs.python.org/3/library/asyncio-eventloop.html#loop-subprocess-exec), handling [OS signals](https://docs.python.org/3/library/asyncio-eventloop.html#loop-add-signal-handler), etc;
  * implement efficient protocols using [transports](https://docs.python.org/3/library/asyncio-protocol.html#asyncio-transports-protocols);
  * [bridge](https://docs.python.org/3/library/asyncio-future.html#asyncio-futures) callback-based libraries and code with async/await syntax.


[Availability](https://docs.python.org/3/library/intro.html#availability): not WASI.
This module does not work or is not available on WebAssembly. See [WebAssembly platforms](https://docs.python.org/3/library/intro.html#wasm-availability) for more information.
asyncio REPL
You can experiment with an `asyncio` concurrent context in the [REPL](https://docs.python.org/3/glossary.html#term-REPL):
>>>```
$ python -m asyncio
asyncio REPL ...
Use "await" directly instead of "asyncio.run()".
Type "help", "copyright", "credits" or "license" for more information.
>>> importasyncio
>>> await asyncio.sleep(10, result='hello')
'hello'