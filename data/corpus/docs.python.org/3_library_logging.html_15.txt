Title: LoggerAdapter and Its Methods
URL: https://docs.python.org/3/library/logging.html
Summary: The LoggerAdapter class delegates to the underlying _log() method on the logger and supports various logging methods such as debug, info, warning, error, exception, and critical.
---

_log[¶](https://docs.python.org/3/library/logging.html#logging.LoggerAdapter._log "Link to this definition")
    
Delegates to the underlying `_log()` method on _logger_.
In addition to the above, [`LoggerAdapter`](https://docs.python.org/3/library/logging.html#logging.LoggerAdapter "logging.LoggerAdapter") supports the following methods of [`Logger`](https://docs.python.org/3/library/logging.html#logging.Logger "logging.Logger"): [`debug()`](https://docs.python.org/3/library/logging.html#logging.Logger.debug "logging.Logger.debug"), [`info()`](https://docs.python.org/3/library/logging.html#logging.Logger.info "logging.Logger.info"), [`warning()`](https://docs.python.org/3/library/logging.html#logging.Logger.warning "logging.Logger.warning"), [`error()`](https://docs.python.org/3/library/logging.html#logging.Logger.error "logging.Logger.error"), [`exception()`](https://docs.python.org/3/library/logging.html#logging.Logger.exception "logging.Logger.exception"), [`critical()`](https://docs.python.org/3/library/logging.html#logging.Logger.critical "logging.Logger.critical"), [`log()`](https://docs.python.org/3/library/logging.html#logging.Logger.log "logging.Logger.log"), [`isEnabledFor()`](https://docs.python.org/3/library/logging.html#logging.Logger.isEnabledFor "logging.Logger.isEnabledFor"), [`getEffectiveLevel()`](https://docs.python.org/3/library/logging.html#logging.Logger.getEffectiveLevel "logging.Logger.getEffectiveLevel"), [`setLevel()`](https://docs.python.org/3/library/logging.html#logging.Logger.setLevel "logging.Logger.setLevel") and [`hasHandlers()`](https://docs.python.org/3/library/logging.html#logging.Logger.hasHandlers "logging.Logger.hasHandlers"). These methods have the same signatures as their counterparts in [`Logger`](https://docs.python.org/3/library/logging.html#logging.Logger "logging.Logger"), so you can use the two types of instances interchangeably.
Changed in version 3.2: The [`isEnabledFor()`](https://docs.python.org/3/library/logging.html#logging.Logger.isEnabledFor "logging.Logger.isEnabledFor"), [`getEffectiveLevel()`](https://docs.python.org/3/library/logging.html#logging.Logger.getEffectiveLevel "logging.Logger.getEffectiveLevel"), [`setLevel()`](https://docs.python.org/3/library/logging.html#logging.Logger.setLevel "logging.Logger.setLevel") and [`hasHandlers()`](https://docs.python.org/3/library/logging.html#logging.Logger.hasHandlers "logging.Logger.hasHandlers") methods were added to [`LoggerAdapter`](https://docs.python.org/3/library/logging.html#logging.LoggerAdapter "logging.LoggerAdapter"). These methods delegate to the underlying logger.
Changed in version 3.6: Attribute `manager` and method `_log()` were added, which delegate to the underlying logger and allow adapters to be nested.
Changed in version 3.13: The _merge_extra_ argument was added.
## Thread Safety[¶](https://docs.python.org/3/library/logging.html#thread-safety "Link to this heading")
The logging module is intended to be thread-safe without any special work needing to be done by its clients. It achieves this though using threading locks; there is one lock to serialize access to the module’s shared data, and each handler also creates a lock to serialize access to its underlying I/O.
If you are implementing asynchronous signal handlers using the [`signal`](https://docs.python.org/3/library/signal.html#module-signal "signal: Set handlers for asynchronous events.") module, you may not be able to use logging from within such handlers. This is because lock implementations in the [`threading`](https://docs.python.org/3/library/threading.html#module-threading "threading: Thread-based parallelism.") module are not always re-entrant, and so cannot be invoked from such signal handlers.
## Module-Level Functions[¶](https://docs.python.org/3/library/logging.html#module-level-functions "Link to this heading")
In addition to the classes described above, there are a number of module-level functions. 

logging.getLogger(_name =None_)[¶](https://docs.python.org/3/library/logging.html#logging.getLogger "Link to this definition")
    
Return a logger with the specified name or, if name is `None`, return the root logger of the hierarchy. If specified, the name is typically a dot-separated hierarchical name like _‘a’_ , _‘a.b’_ or _‘a.b.c.d’_. Choice of these names is entirely up to the developer who is using logging, though it is recommended that `__name__` be used unless you have a specific reason for not doing that, as mentioned in [Logger Objects](https://docs.python.org/3/library/logging.html#logger).
All calls to this function with a given name return the same logger instance. This means that logger instances never need to be passed between different parts of an application.