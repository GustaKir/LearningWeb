Title: sys Module: Interactive Hook and Interning Strings
URL: https://docs.python.org/3/library/sys.html
Summary: The `sys.__interactivehook__` attribute is executed automatically when the Python interpreter starts in interactive mode, allowing customization after reading the `PYTHONSTARTUP` file. Its invocation raises an auditing event `cpython.run_interactivehook`. Additionally, the `sys.intern` method is mentioned as a subsequent section.
---

sys.__interactivehook__[¶](https://docs.python.org/3/library/sys.html#sys.__interactivehook__ "Link to this definition")
    
When this attribute exists, its value is automatically called (with no arguments) when the interpreter is launched in [interactive mode](https://docs.python.org/3/tutorial/interpreter.html#tut-interactive). This is done after the [`PYTHONSTARTUP`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONSTARTUP) file is read, so that you can set this hook there. The [`site`](https://docs.python.org/3/library/site.html#module-site "site: Module responsible for site-specific configuration.") module [sets this](https://docs.python.org/3/library/site.html#rlcompleter-config).
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `cpython.run_interactivehook` with the hook object as the argument when the hook is called on startup.
Added in version 3.4. 

sys.intern(_string_)[¶](https://docs.python.org/3/library/sys.html#sys.intern "Link to this definition")
    
Enter _string_ in the table of “interned” strings and return the interned string – which is _string_ itself or a copy. Interning strings is useful to gain a little performance on dictionary lookup – if the keys in a dictionary are interned, and the lookup key is interned, the key comparisons (after hashing) can be done by a pointer compare instead of a string compare. Normally, the names used in Python programs are automatically interned, and the dictionaries used to hold module, class or instance attributes have interned keys.
Interned strings are not [immortal](https://docs.python.org/3/glossary.html#term-immortal); you must keep a reference to the return value of [`intern()`](https://docs.python.org/3/library/sys.html#sys.intern "sys.intern") around to benefit from it. 

sys._is_gil_enabled()[¶](https://docs.python.org/3/library/sys.html#sys._is_gil_enabled "Link to this definition")
    
Return [`True`](https://docs.python.org/3/library/constants.html#True "True") if the [GIL](https://docs.python.org/3/glossary.html#term-GIL) is enabled and [`False`](https://docs.python.org/3/library/constants.html#False "False") if it is disabled.
Added in version 3.13.
**CPython implementation detail:** It is not guaranteed to exist in all implementations of Python. 

sys.is_finalizing()[¶](https://docs.python.org/3/library/sys.html#sys.is_finalizing "Link to this definition")
    
Return [`True`](https://docs.python.org/3/library/constants.html#True "True") if the main Python interpreter is [shutting down](https://docs.python.org/3/glossary.html#term-interpreter-shutdown). Return [`False`](https://docs.python.org/3/library/constants.html#False "False") otherwise.
See also the [`PythonFinalizationError`](https://docs.python.org/3/library/exceptions.html#PythonFinalizationError "PythonFinalizationError") exception.
Added in version 3.5. 

sys.last_exc[¶](https://docs.python.org/3/library/sys.html#sys.last_exc "Link to this definition")
    
This variable is not always defined; it is set to the exception instance when an exception is not handled and the interpreter prints an error message and a stack traceback. Its intended use is to allow an interactive user to import a debugger module and engage in post-mortem debugging without having to re-execute the command that caused the error. (Typical use is `import pdb; pdb.pm()` to enter the post-mortem debugger; see [`pdb`](https://docs.python.org/3/library/pdb.html#module-pdb "pdb: The Python debugger for interactive interpreters.") module for more information.)
Added in version 3.12. 

sys._is_interned(_string_)[¶](https://docs.python.org/3/library/sys.html#sys._is_interned "Link to this definition")
    
Return [`True`](https://docs.python.org/3/library/constants.html#True "True") if the given string is “interned”, [`False`](https://docs.python.org/3/library/constants.html#False "False") otherwise.
Added in version 3.13.
**CPython implementation detail:** It is not guaranteed to exist in all implementations of Python. 

sys.last_type[¶](https://docs.python.org/3/library/sys.html#sys.last_type "Link to this definition")


sys.last_value[¶](https://docs.python.org/3/library/sys.html#sys.last_value "Link to this definition")


sys.last_traceback[¶](https://docs.python.org/3/library/sys.html#sys.last_traceback "Link to this definition")
    
These three variables are deprecated; use [`sys.last_exc`](https://docs.python.org/3/library/sys.html#sys.last_exc "sys.last_exc") instead. They hold the legacy representation of `sys.last_exc`, as returned from [`exc_info()`](https://docs.python.org/3/library/sys.html#sys.exc_info "sys.exc_info") above.