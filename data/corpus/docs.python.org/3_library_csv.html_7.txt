Title: CSV Reader and Writer Objects in Python
URL: https://docs.python.org/3/library/csv.html
Summary: This section describes attributes of CSV reader objects, such as 'line_num' which tracks the number of lines read, and 'fieldnames' for DictReader objects, initialized upon first access. It also introduces writer objects, including 'writer' and 'DictWriter' for creating CSV files.
---

csvreader.line_num[¶](https://docs.python.org/3/library/csv.html#csv.csvreader.line_num "Link to this definition")
    
The number of lines read from the source iterator. This is not the same as the number of records returned, as records can span multiple lines.
DictReader objects have the following public attribute: 

DictReader.fieldnames[¶](https://docs.python.org/3/library/csv.html#csv.DictReader.fieldnames "Link to this definition")
    
If not passed as a parameter when creating the object, this attribute is initialized upon first access or when the first record is read from the file.
## Writer Objects[¶](https://docs.python.org/3/library/csv.html#writer-objects "Link to this heading")
[`writer`](https://docs.python.org/3/library/csv.html#csv.writer "csv.writer") objects ([`DictWriter`](https://docs.python.org/3/library/csv.html#csv.DictWriter "csv.DictWriter") instances and objects returned by the [`writer()`](https://docs.python.org/3/library/csv.html#csv.writer "csv.writer") function) have the following public methods. A _row_ must be an iterable of strings or numbers for [`writer`](https://docs.python.org/3/library/csv.html#csv.writer "csv.writer") objects and a dictionary mapping fieldnames to strings or numbers (by passing them through [`str()`](https://docs.python.org/3/library/stdtypes.html#str "str") first) for [`DictWriter`](https://docs.python.org/3/library/csv.html#csv.DictWriter "csv.DictWriter") objects. Note that complex numbers are written out surrounded by parens. This may cause some problems for other programs which read CSV files (assuming they support complex numbers at all). 

csvwriter.writerow(_row_)[¶](https://docs.python.org/3/library/csv.html#csv.csvwriter.writerow "Link to this definition")
    
Write the _row_ parameter to the writer’s file object, formatted according to the current [`Dialect`](https://docs.python.org/3/library/csv.html#csv.Dialect "csv.Dialect"). Return the return value of the call to the _write_ method of the underlying file object.
Changed in version 3.5: Added support of arbitrary iterables. 

csvwriter.writerows(_rows_)[¶](https://docs.python.org/3/library/csv.html#csv.csvwriter.writerows "Link to this definition")
    
Write all elements in _rows_ (an iterable of _row_ objects as described above) to the writer’s file object, formatted according to the current dialect.
Writer objects have the following public attribute: 

csvwriter.dialect[¶](https://docs.python.org/3/library/csv.html#csv.csvwriter.dialect "Link to this definition")
    
A read-only description of the dialect in use by the writer.
DictWriter objects have the following public method: 

DictWriter.writeheader()[¶](https://docs.python.org/3/library/csv.html#csv.DictWriter.writeheader "Link to this definition")
    
Write a row with the field names (as specified in the constructor) to the writer’s file object, formatted according to the current dialect. Return the return value of the [`csvwriter.writerow()`](https://docs.python.org/3/library/csv.html#csv.csvwriter.writerow "csv.csvwriter.writerow") call used internally.
Added in version 3.2.
Changed in version 3.8: [`writeheader()`](https://docs.python.org/3/library/csv.html#csv.DictWriter.writeheader "csv.DictWriter.writeheader") now also returns the value returned by the [`csvwriter.writerow()`](https://docs.python.org/3/library/csv.html#csv.csvwriter.writerow "csv.csvwriter.writerow") method it uses internally.
## Examples[¶](https://docs.python.org/3/library/csv.html#examples "Link to this heading")
The simplest example of reading a CSV file:
```
importcsv
with open('some.csv', newline='') as f:
  reader = csv.reader(f)
  for row in reader:
    print(row)

```

Reading a file with an alternate format:
```
importcsv
with open('passwd', newline='') as f:
  reader = csv.reader(f, delimiter=':', quoting=csv.QUOTE_NONE)
  for row in reader:
    print(row)

```

The corresponding simplest possible writing example is:
```
importcsv
with open('some.csv', 'w', newline='') as f:
  writer = csv.writer(f)
  writer.writerows(someiterable)

```

Since [`open()`](https://docs.python.org/3/library/functions.html#open "open") is used to open a CSV file for reading, the file will by default be decoded into unicode using the system default encoding (see [`locale.getencoding()`](https://docs.python.org/3/library/locale.html#locale.getencoding "locale.getencoding")). To decode a file using a different encoding, use the `encoding` argument of open:
```
importcsv
with open('some.csv', newline='', encoding='utf-8') as f:
  reader = csv.reader(f)
  for row in reader:
    print(row)

```

The same applies to writing in something other than the system default encoding: specify the encoding argument when opening the output file.
Registering a new dialect:
```
importcsv
csv.register_dialect('unixpwd', delimiter=':', quoting=csv.QUOTE_NONE)
with open('passwd', newline='') as f:
  reader = csv.reader(f, 'unixpwd')