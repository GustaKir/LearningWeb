Title: SQLite Autocommit Mode
URL: https://docs.python.org/3/library/sqlite3.html
Summary: Enabling autocommit mode in SQLite by setting `_autocommit_` to `True` makes `Connection.commit()` and `Connection.rollback()` ineffective. This mode differs from the PEP 249-compliant `Connection.autocommit` attribute, and the `Connection.in_transaction` method can be used to check the SQLite autocommit status.
---

Set _autocommit_ to `True` to enable SQLite’s [autocommit mode](https://www.sqlite.org/lang_transaction.html#implicit_versus_explicit_transactions). In this mode, [`Connection.commit()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.commit "sqlite3.Connection.commit") and [`Connection.rollback()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.rollback "sqlite3.Connection.rollback") have no effect. Note that SQLite’s autocommit mode is distinct from the [**PEP 249**](https://peps.python.org/pep-0249/)-compliant [`Connection.autocommit`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit "sqlite3.Connection.autocommit") attribute; use [`Connection.in_transaction`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.in_transaction "sqlite3.Connection.in_transaction") to query the low-level SQLite autocommit mode.
Set _autocommit_ to [`LEGACY_TRANSACTION_CONTROL`](https://docs.python.org/3/library/sqlite3.html#sqlite3.LEGACY_TRANSACTION_CONTROL "sqlite3.LEGACY_TRANSACTION_CONTROL") to leave transaction control behaviour to the [`Connection.isolation_level`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.isolation_level "sqlite3.Connection.isolation_level") attribute. See [Transaction control via the isolation_level attribute](https://docs.python.org/3/library/sqlite3.html#sqlite3-transaction-control-isolation-level) for more information.
#### Transaction control via the `isolation_level` attribute[¶](https://docs.python.org/3/library/sqlite3.html#transaction-control-via-the-isolation-level-attribute "Link to this heading")
Note
The recommended way of controlling transactions is via the [`autocommit`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit "sqlite3.Connection.autocommit") attribute. See [Transaction control via the autocommit attribute](https://docs.python.org/3/library/sqlite3.html#sqlite3-transaction-control-autocommit).
If [`Connection.autocommit`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit "sqlite3.Connection.autocommit") is set to [`LEGACY_TRANSACTION_CONTROL`](https://docs.python.org/3/library/sqlite3.html#sqlite3.LEGACY_TRANSACTION_CONTROL "sqlite3.LEGACY_TRANSACTION_CONTROL") (the default), transaction behaviour is controlled using the [`Connection.isolation_level`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.isolation_level "sqlite3.Connection.isolation_level") attribute. Otherwise, `isolation_level` has no effect.
If the connection attribute [`isolation_level`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.isolation_level "sqlite3.Connection.isolation_level") is not `None`, new transactions are implicitly opened before [`execute()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute "sqlite3.Cursor.execute") and [`executemany()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.executemany "sqlite3.Cursor.executemany") executes `INSERT`, `UPDATE`, `DELETE`, or `REPLACE` statements; for other statements, no implicit transaction handling is performed. Use the [`commit()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.commit "sqlite3.Connection.commit") and [`rollback()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.rollback "sqlite3.Connection.rollback") methods to respectively commit and roll back pending transactions. You can choose the underlying [SQLite transaction behaviour](https://www.sqlite.org/lang_transaction.html#deferred_immediate_and_exclusive_transactions) — that is, whether and what type of `BEGIN` statements `sqlite3` implicitly executes – via the [`isolation_level`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.isolation_level "sqlite3.Connection.isolation_level") attribute.
If [`isolation_level`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.isolation_level "sqlite3.Connection.isolation_level") is set to `None`, no transactions are implicitly opened at all. This leaves the underlying SQLite library in [autocommit mode](https://www.sqlite.org/lang_transaction.html#implicit_versus_explicit_transactions), but also allows the user to perform their own transaction handling using explicit SQL statements. The underlying SQLite library autocommit mode can be queried using the [`in_transaction`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.in_transaction "sqlite3.Connection.in_transaction") attribute.
The [`executescript()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.executescript "sqlite3.Cursor.executescript") method implicitly commits any pending transaction before execution of the given SQL script, regardless of the value of [`isolation_level`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.isolation_level "sqlite3.Connection.isolation_level").
Changed in version 3.6: `sqlite3` used to implicitly commit an open