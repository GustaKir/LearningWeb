Title: Runtime Warnings for Deprecated Objects in Python
URL: https://docs.python.org/3/library/warnings.html
Summary: This section explains how the warning system in Python works for deprecated objects. It details the usage of the _category parameter to control warning emissions for functions and classes, and the _stacklevel parameter to specify where in the stack the warning should appear. Additionally, it mentions that deprecation messages are stored in the __deprecated__ attribute of decorated objects.
---

```

The warning specified by _category_ will be emitted at runtime on use of deprecated objects. For functions, that happens on calls; for classes, on instantiation and on creation of subclasses. If the _category_ is `None`, no warning is emitted at runtime. The _stacklevel_ determines where the warning is emitted. If it is `1` (the default), the warning is emitted at the direct caller of the deprecated object; if it is higher, it is emitted further up the stack. Static type checker behavior is not affected by the _category_ and _stacklevel_ arguments.
The deprecation message passed to the decorator is saved in the `__deprecated__` attribute on the decorated object. If applied to an overload, the decorator must be after the [`@overload`](https://docs.python.org/3/library/typing.html#typing.overload "typing.overload") decorator for the attribute to exist on the overload as returned by [`typing.get_overloads()`](https://docs.python.org/3/library/typing.html#typing.get_overloads "typing.get_overloads").
Added in version 3.13: See [**PEP 702**](https://peps.python.org/pep-0702/).
## Available Context Managers[¶](https://docs.python.org/3/library/warnings.html#available-context-managers "Link to this heading") 

_class_ warnings.catch_warnings(_*_ , _record =False_, _module =None_, _action =None_, _category =Warning_, _lineno =0_, _append =False_)[¶](https://docs.python.org/3/library/warnings.html#warnings.catch_warnings "Link to this definition")
    
A context manager that copies and, upon exit, restores the warnings filter and the [`showwarning()`](https://docs.python.org/3/library/warnings.html#warnings.showwarning "warnings.showwarning") function. If the _record_ argument is [`False`](https://docs.python.org/3/library/constants.html#False "False") (the default) the context manager returns [`None`](https://docs.python.org/3/library/constants.html#None "None") on entry. If _record_ is [`True`](https://docs.python.org/3/library/constants.html#True "True"), a list is returned that is progressively populated with objects as seen by a custom [`showwarning()`](https://docs.python.org/3/library/warnings.html#warnings.showwarning "warnings.showwarning") function (which also suppresses output to `sys.stdout`). Each object in the list has attributes with the same names as the arguments to [`showwarning()`](https://docs.python.org/3/library/warnings.html#warnings.showwarning "warnings.showwarning").
The _module_ argument takes a module that will be used instead of the module returned when you import [`warnings`](https://docs.python.org/3/library/warnings.html#module-warnings "warnings: Issue warning messages and control their disposition.") whose filter will be protected. This argument exists primarily for testing the [`warnings`](https://docs.python.org/3/library/warnings.html#module-warnings "warnings: Issue warning messages and control their disposition.") module itself.
If the _action_ argument is not `None`, the remaining arguments are passed to [`simplefilter()`](https://docs.python.org/3/library/warnings.html#warnings.simplefilter "warnings.simplefilter") as if it were called immediately on entering the context.
See [The Warnings Filter](https://docs.python.org/3/library/warnings.html#warning-filter) for the meaning of the _category_ and _lineno_ parameters.
Note
The [`catch_warnings`](https://docs.python.org/3/library/warnings.html#warnings.catch_warnings "warnings.catch_warnings") manager works by replacing and then later restoring the module’s [`showwarning()`](https://docs.python.org/3/library/warnings.html#warnings.showwarning "warnings.showwarning") function and internal list of filter specifications. This means the context manager is modifying global state and therefore is not thread-safe.
Changed in version 3.11: Added the _action_ , _category_ , _lineno_ , and _append_ parameters.
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [`warnings` — Warning control](https://docs.python.org/3/library/warnings.html)
    * [Warning Categories](https://docs.python.org/3/library/warnings.html#warning-categories)
    * [The Warnings Filter](https://docs.python.org/3/library/warnings.html#the-warnings-filter)
      * [Repeated Warning Suppression Criteria](https://docs.python.org/3/library/warnings.html#repeated-warning-suppression-criteria)
      * [Describing Warning Filters](https://docs.python.org/3/library/warnings.html#describing-warning-filters)
      * [Default Warning Filter](https://docs.python.org/3/library/warnings.html#default-warning-filter)
      * [Overriding the default filter](https://docs.python.org/3/library/warnings.html#overriding-the-default-filter)
    * [Temporarily Suppressing Warnings](https://docs.python.org/3/library/warnings.html#temporarily-suppressing-warnings)
    * [Testing Warnings](https://docs.python.org/3/library/warnings.html#testing-warnings)
    * [Updating Code For New Versions of Dependencies](https://docs.python.org/3/library/warnings.html#updating-code