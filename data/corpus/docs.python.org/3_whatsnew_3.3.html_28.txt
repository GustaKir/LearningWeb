Title: Updates to the Signal Module in Python 3.3
URL: https://docs.python.org/3/whatsnew/3.3.html
Summary: The `signal` module in Python 3.3 introduces new functions including `pthread_sigmask()` for managing signal masks, `pthread_kill()` for sending signals to threads, `sigpending()` for examining pending signals, `sigwait()` for waiting on signals, and `sigwaitinfo()`.
---

### signal[Â¶](https://docs.python.org/3/whatsnew/3.3.html#signal "Link to this heading")
  * The [`signal`](https://docs.python.org/3/library/signal.html#module-signal "signal: Set handlers for asynchronous events.") module has new functions:
    * [`pthread_sigmask()`](https://docs.python.org/3/library/signal.html#signal.pthread_sigmask "signal.pthread_sigmask"): fetch and/or change the signal mask of the calling thread (Contributed by Jean-Paul Calderone in [bpo-8407](https://bugs.python.org/issue?@action=redirect&bpo=8407));
    * [`pthread_kill()`](https://docs.python.org/3/library/signal.html#signal.pthread_kill "signal.pthread_kill"): send a signal to a thread;
    * [`sigpending()`](https://docs.python.org/3/library/signal.html#signal.sigpending "signal.sigpending"): examine pending functions;
    * [`sigwait()`](https://docs.python.org/3/library/signal.html#signal.sigwait "signal.sigwait"): wait a signal;
    * [`sigwaitinfo()`](https://docs.python.org/3/library/signal.html#signal.sigwaitinfo "signal.sigwaitinfo"): wait for a signal, returning detailed information about it;
    * [`sigtimedwait()`](https://docs.python.org/3/library/signal.html#signal.sigtimedwait "signal.sigtimedwait"): like [`sigwaitinfo()`](https://docs.python.org/3/library/signal.html#signal.sigwaitinfo "signal.sigwaitinfo") but with a timeout.
  * The signal handler writes the signal number as a single byte instead of a nul byte into the wakeup file descriptor. So it is possible to wait more than one signal and know which signals were raised.
  * [`signal.signal()`](https://docs.python.org/3/library/signal.html#signal.signal "signal.signal") and [`signal.siginterrupt()`](https://docs.python.org/3/library/signal.html#signal.siginterrupt "signal.siginterrupt") raise an OSError, instead of a RuntimeError: OSError has an errno attribute.