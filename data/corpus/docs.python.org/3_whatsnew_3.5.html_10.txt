Title: New Modules in Python 3.5
URL: https://docs.python.org/3/whatsnew/3.5.html
Summary: Python 3.5 introduces new modules including `typing`, which supports function type annotations, and `zipapp`, which allows for the creation of executable Python Zip Applications.
---

## New Modules[¶](https://docs.python.org/3/whatsnew/3.5.html#new-modules "Link to this heading")
### typing[¶](https://docs.python.org/3/whatsnew/3.5.html#typing "Link to this heading")
The new [`typing`](https://docs.python.org/3/library/typing.html#module-typing "typing: Support for type hints \(see :pep:`484`\).") [provisional](https://docs.python.org/3/glossary.html#term-provisional-API) module provides standard definitions and tools for function type annotations. See [Type Hints](https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-484) for more information.
### zipapp[¶](https://docs.python.org/3/whatsnew/3.5.html#zipapp "Link to this heading")
The new [`zipapp`](https://docs.python.org/3/library/zipapp.html#module-zipapp "zipapp: Manage executable Python zip archives") module (specified in [**PEP 441**](https://peps.python.org/pep-0441/)) provides an API and command line tool for creating executable Python Zip Applications, which were introduced in Python 2.6 in [bpo-1739468](https://bugs.python.org/issue?@action=redirect&bpo=1739468), but which were not well publicized, either at the time or since.
With the new module, bundling your application is as simple as putting all the files, including a `__main__.py` file, into a directory `myapp` and running:
```
$ python-mzipappmyapp
$ pythonmyapp.pyz

```

The module implementation has been contributed by Paul Moore in [bpo-23491](https://bugs.python.org/issue?@action=redirect&bpo=23491).
See also
[**PEP 441**](https://peps.python.org/pep-0441/) – Improving Python ZIP Application Support
## Improved Modules[¶](https://docs.python.org/3/whatsnew/3.5.html#improved-modules "Link to this heading")
### argparse[¶](https://docs.python.org/3/whatsnew/3.5.html#argparse "Link to this heading")
The [`ArgumentParser`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser "argparse.ArgumentParser") class now allows disabling [abbreviated usage](https://docs.python.org/3/library/argparse.html#prefix-matching) of long options by setting [allow_abbrev](https://docs.python.org/3/library/argparse.html#allow-abbrev) to `False`. (Contributed by Jonathan Paugh, Steven Bethard, paul j3 and Daniel Eriksson in [bpo-14910](https://bugs.python.org/issue?@action=redirect&bpo=14910).)
### asyncio[¶](https://docs.python.org/3/whatsnew/3.5.html#asyncio "Link to this heading")
Since the [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O.") module is [provisional](https://docs.python.org/3/glossary.html#term-provisional-API), all changes introduced in Python 3.5 have also been backported to Python 3.4.x.
Notable changes in the [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O.") module since Python 3.4.0:
  * New debugging APIs: [`loop.set_debug()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.set_debug "asyncio.loop.set_debug") and [`loop.get_debug()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.get_debug "asyncio.loop.get_debug") methods. (Contributed by Victor Stinner.)
  * The proactor event loop now supports SSL. (Contributed by Antoine Pitrou and Victor Stinner in [bpo-22560](https://bugs.python.org/issue?@action=redirect&bpo=22560).)
  * A new [`loop.is_closed()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.is_closed "asyncio.loop.is_closed") method to check if the event loop is closed. (Contributed by Victor Stinner in [bpo-21326](https://bugs.python.org/issue?@action=redirect&bpo=21326).)
  * A new [`loop.create_task()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_task "asyncio.loop.create_task") to conveniently create and schedule a new [`Task`](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task "asyncio.Task") for a coroutine. The `create_task` method is also used by all asyncio functions that wrap coroutines into tasks, such as [`asyncio.wait()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.wait "asyncio.wait"), [`asyncio.gather()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.gather "asyncio.gather"), etc. (Contributed by Victor Stinner.)
  * A new [`transport.get_write_buffer_limits()`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.WriteTransport.get_write_buffer_limits "asyncio.WriteTransport.get_write_buffer_limits") method to inquire for _high-_ and _low-_ water limits of the flow control. (Contributed by Victor Stinner.)
  * The `async()` function is deprecated in favor of [`ensure_future()`](https://docs.python.org/3/library/asyncio-future.html#asyncio.ensure_future "asyncio.ensure_future"). (Contributed by Yury Selivanov.)
  * New [`loop.set_task_factory()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.set_task_factory "asyncio.loop.set_task_factory") and [`loop.get_task_factory()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.lo