Title: Frozenset Methods
URL: https://docs.python.org/3/library/stdtypes.html
Summary: The `copy()` method returns a shallow copy of a frozenset. Additional methods like `union()`, `intersection()`, `difference()`, `symmetric_difference()`, `issubset()`, and `issuperset()` accept any iterable, while their operator counterparts require set arguments.
---

copy()[¶](https://docs.python.org/3/library/stdtypes.html#frozenset.copy "Link to this definition")
    
Return a shallow copy of the set.
Note, the non-operator versions of [`union()`](https://docs.python.org/3/library/stdtypes.html#frozenset.union "frozenset.union"), [`intersection()`](https://docs.python.org/3/library/stdtypes.html#frozenset.intersection "frozenset.intersection"), [`difference()`](https://docs.python.org/3/library/stdtypes.html#frozenset.difference "frozenset.difference"), [`symmetric_difference()`](https://docs.python.org/3/library/stdtypes.html#frozenset.symmetric_difference "frozenset.symmetric_difference"), [`issubset()`](https://docs.python.org/3/library/stdtypes.html#frozenset.issubset "frozenset.issubset"), and [`issuperset()`](https://docs.python.org/3/library/stdtypes.html#frozenset.issuperset "frozenset.issuperset") methods will accept any iterable as an argument. In contrast, their operator based counterparts require their arguments to be sets. This precludes error-prone constructions like `set('abc') & 'cbs'` in favor of the more readable `set('abc').intersection('cbs')`.
Both [`set`](https://docs.python.org/3/library/stdtypes.html#set "set") and [`frozenset`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset") support set to set comparisons. Two sets are equal if and only if every element of each set is contained in the other (each is a subset of the other). A set is less than another set if and only if the first set is a proper subset of the second set (is a subset, but is not equal). A set is greater than another set if and only if the first set is a proper superset of the second set (is a superset, but is not equal).
Instances of [`set`](https://docs.python.org/3/library/stdtypes.html#set "set") are compared to instances of [`frozenset`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset") based on their members. For example, `set('abc') == frozenset('abc')` returns `True` and so does `set('abc') in set([frozenset('abc')])`.
The subset and equality comparisons do not generalize to a total ordering function. For example, any two nonempty disjoint sets are not equal and are not subsets of each other, so _all_ of the following return `False`: `a<b`, `a==b`, or `a>b`.
Since sets only define partial ordering (subset relationships), the output of the [`list.sort()`](https://docs.python.org/3/library/stdtypes.html#list.sort "list.sort") method is undefined for lists of sets.
Set elements, like dictionary keys, must be [hashable](https://docs.python.org/3/glossary.html#term-hashable).
Binary operations that mix [`set`](https://docs.python.org/3/library/stdtypes.html#set "set") instances with [`frozenset`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset") return the type of the first operand. For example: `frozenset('ab') | set('bc')` returns an instance of [`frozenset`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset").
The following table lists operations available for [`set`](https://docs.python.org/3/library/stdtypes.html#set "set") that do not apply to immutable instances of [`frozenset`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset"): 

update(_* others_)[¶](https://docs.python.org/3/library/stdtypes.html#frozenset.update "Link to this definition")


set |= other | ...
    
Update the set, adding elements from all others. 

intersection_update(_* others_)[¶](https://docs.python.org/3/library/stdtypes.html#frozenset.intersection_update "Link to this definition")


set &= other & ...
    
Update the set, keeping only elements found in it and all others. 

difference_update(_* others_)[¶](https://docs.python.org/3/library/stdtypes.html#frozenset.difference_update "Link to this definition")


set -= other | ...
    
Update the set, removing elements found in others. 

symmetric_difference_update(_other_)[¶](https://docs.python.org/3/library/stdtypes.html#frozenset.symmetric_difference_update "Link to this definition")


set ^= other
    
Update the set, keeping only elements found in either set, but not in both. 

add(_elem_)[¶](https://docs.python.org/3/library/stdtypes.html#frozenset.add "Link to this definition")
    
Add element _elem_ to the set. 

remove(_elem_)[¶](https://docs.python.org/3/library/stdtypes.html#frozenset.remove "Link to this definition")
    
Remove element _elem_ from the set. Raises [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError") if _elem_ is not contained in the set. 

discard(_elem_)[¶](https://docs.python.org/3/library/stdtypes.html#frozenset.discard "Link to this definition")
    
Remove element _elem_ from the set if it is present. 

pop()[¶](https://docs.python.org/3/library/stdtypes.html#frozenset.pop "Link to this definition")
    
Remove and return an arbitrary element from the set. Raises [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError") if the set is empty.