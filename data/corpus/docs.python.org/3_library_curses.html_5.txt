Title: Curses Library Functions
URL: https://docs.python.org/3/library/curses.html
Summary: This section describes functions in the curses library, including 'mousemask' which sets mouse event reporting, 'napms' for sleeping for a specified duration in milliseconds, and 'newpad' to create a new pad data structure that allows for flexible window sizing beyond screen limitations.
---

curses.mousemask(_mousemask_)[¶](https://docs.python.org/3/library/curses.html#curses.mousemask "Link to this definition")
    
Set the mouse events to be reported, and return a tuple `(availmask, oldmask)`. _availmask_ indicates which of the specified mouse events can be reported; on complete failure it returns `0`. _oldmask_ is the previous value of the given window’s mouse event mask. If this function is never called, no mouse events are ever reported. 

curses.napms(_ms_)[¶](https://docs.python.org/3/library/curses.html#curses.napms "Link to this definition")
    
Sleep for _ms_ milliseconds. 

curses.newpad(_nlines_ , _ncols_)[¶](https://docs.python.org/3/library/curses.html#curses.newpad "Link to this definition")
    
Create and return a pointer to a new pad data structure with the given number of lines and columns. Return a pad as a window object.
A pad is like a window, except that it is not restricted by the screen size, and is not necessarily associated with a particular part of the screen. Pads can be used when a large window is needed, and only a part of the window will be on the screen at one time. Automatic refreshes of pads (such as from scrolling or echoing of input) do not occur. The [`refresh()`](https://docs.python.org/3/library/curses.html#curses.window.refresh "curses.window.refresh") and [`noutrefresh()`](https://docs.python.org/3/library/curses.html#curses.window.noutrefresh "curses.window.noutrefresh") methods of a pad require 6 arguments to specify the part of the pad to be displayed and the location on the screen to be used for the display. The arguments are _pminrow_ , _pmincol_ , _sminrow_ , _smincol_ , _smaxrow_ , _smaxcol_ ; the _p_ arguments refer to the upper left corner of the pad region to be displayed and the _s_ arguments define a clipping box on the screen within which the pad region is to be displayed. 

curses.newwin(_nlines_ , _ncols_)[¶](https://docs.python.org/3/library/curses.html#curses.newwin "Link to this definition")


curses.newwin(_nlines_ , _ncols_ , _begin_y_ , _begin_x_)
    
Return a new [window](https://docs.python.org/3/library/curses.html#curses-window-objects), whose left-upper corner is at `(begin_y, begin_x)`, and whose height/width is _nlines_ /_ncols_.
By default, the window will extend from the specified position to the lower right corner of the screen. 

curses.nl()[¶](https://docs.python.org/3/library/curses.html#curses.nl "Link to this definition")
    
Enter newline mode. This mode translates the return key into newline on input, and translates newline into return and line-feed on output. Newline mode is initially on. 

curses.nocbreak()[¶](https://docs.python.org/3/library/curses.html#curses.nocbreak "Link to this definition")
    
Leave cbreak mode. Return to normal “cooked” mode with line buffering. 

curses.noecho()[¶](https://docs.python.org/3/library/curses.html#curses.noecho "Link to this definition")
    
Leave echo mode. Echoing of input characters is turned off. 

curses.nonl()[¶](https://docs.python.org/3/library/curses.html#curses.nonl "Link to this definition")
    
Leave newline mode. Disable translation of return into newline on input, and disable low-level translation of newline into newline/return on output (but this does not change the behavior of `addch('\n')`, which always does the equivalent of return and line feed on the virtual screen). With translation off, curses can sometimes speed up vertical motion a little; also, it will be able to detect the return key on input. 

curses.noqiflush()[¶](https://docs.python.org/3/library/curses.html#curses.noqiflush "Link to this definition")
    
When the `noqiflush()` routine is used, normal flush of input and output queues associated with the `INTR`, `QUIT` and `SUSP` characters will not be done. You may want to call `noqiflush()` in a signal handler if you want output to continue as though the interrupt had not occurred, after the handler exits. 

curses.noraw()[¶](https://docs.python.org/3/library/curses.html#curses.noraw "Link to this definition")
    
Leave raw mode. Return to normal “cooked” mode with line buffering. 

curses.pair_content(_pair_number_)[¶](https://docs.python.org/3/library/curses.html#curses.pair_content "Link to this definition")
    
Return a tuple `(fg, bg)` containing the colors for the requested color pair. The value of _pair_number_ must be between `0` and `COLOR_PAIRS - 1`. 

curses.pair_number(_attr_)[¶](https://docs.python.org/3/library/curses.html#curses.pair_number "Link to this definition")
    
Return the number of the color-pair set by the attribute value _attr_. [`color_pair()`](https://docs.python.org/3/library/curses.html#curses.color_pair "curses.color_pair") is the counterpart to this function.