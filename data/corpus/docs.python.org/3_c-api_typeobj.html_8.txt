Title: Python C API Type Objects Documentation
URL: https://docs.python.org/3/c-api/typeobj.html
Summary: This section provides an overview of various function pointer types used in Python's C API, including `ssizeobjargproc`, `objobjproc`, and `objobjargproc`, along with their parameter types and return values.
---

ct") * [`Py_ssize_t`](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t") | [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject") *  
[`ssizeobjargproc`](https://docs.python.org/3/c-api/typeobj.html#c.ssizeobjargproc "ssizeobjargproc") |  [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject") * [`Py_ssize_t`](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t") [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject") * | int  
[`objobjproc`](https://docs.python.org/3/c-api/typeobj.html#c.objobjproc "objobjproc") |  [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject") * [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject") * | int  
[`objobjargproc`](https://docs.python.org/3/c-api/typeobj.html#c.objobjargproc "objobjargproc") |  [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject") * [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject") * [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject") * | int  
See [Slot Type typedefs](https://docs.python.org/3/c-api/typeobj.html#id6) below for more detail.
## PyTypeObject Definition[Â¶](https://docs.python.org/3/c-api/typeobj.html#pytypeobject-definition "Link to this heading")
The structure definition for [`PyTypeObject`](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject") can be found in `Include/cpython/object.h`. For convenience of reference, this repeats the definition found there:
```
typedefstruct_typeobject{
PyObject_VAR_HEAD
constchar*tp_name;/* For printing, in format "<module>.<name>" */
Py_ssize_ttp_basicsize,tp_itemsize;/* For allocation */
/* Methods to implement standard operations */
destructortp_dealloc;
Py_ssize_ttp_vectorcall_offset;
getattrfunctp_getattr;
setattrfunctp_setattr;
PyAsyncMethods*tp_as_async;/* formerly known as tp_compare (Python 2)
                  or tp_reserved (Python 3) */
reprfunctp_repr;
/* Method suites for standard classes */
PyNumberMethods*tp_as_number;
PySequenceMethods*tp_as_sequence;
PyMappingMethods*tp_as_mapping;
/* More standard operations (here for binary compatibility) */
hashfunctp_hash;
ternaryfunctp_call;
reprfunctp_str;
getattrofunctp_getattro;
setattrofunctp_setattro;
/* Functions to access object as input/output buffer */
PyBufferProcs*tp_as_buffer;
/* Flags to define presence of optional/expanded features */
unsignedlongtp_flags;
constchar*tp_doc;/* Documentation string */
/* Assigned meaning in release 2.0 */
/* call function for all accessible objects */
traverseproctp_traverse;
/* delete references to contained objects */
inquirytp_clear;
/* Assigned meaning in release 2.1 */
/* rich comparisons */
richcmpfunctp_richcompare;
/* weak reference enabler */
Py_ssize_ttp_weaklistoffset;
/* Iterators */
getiterfunctp_iter;
iternextfunctp_iternext;
/* Attribute descriptor and subclassing stuff */
structPyMethodDef*tp_methods;
structPyMemberDef*tp_members;
structPyGetSetDef*tp_getset;
// Strong reference on a heap type, borrowed reference on a static type
struct_typeobject*tp_base;
PyObject*tp_dict;
descrgetfunctp_descr_get;
descrsetfunctp_descr_set;
Py_ssize_ttp_dictoffset;
initproctp_init;
allocfunctp_alloc;
newfunctp_new;
freefunctp_free;/* Low-level free-memory routine */
inquirytp_is_gc;/* For PyObject_IS_GC */
PyObject*tp_bases;
PyObject*tp_mro;/* method resolution order */
PyObject*tp_cache;
PyObject*tp_subclasses;
PyObject*tp_weaklist;
destructortp_del;
/* Type attribute cache version tag. Added in version 2.6 */
unsignedinttp_version_tag;
destructortp_finalize;
vectorcallfunctp_vectorcall;
/* bitset of which type-watchers care about this type */
unsignedchartp_watched;
}PyTypeObject;