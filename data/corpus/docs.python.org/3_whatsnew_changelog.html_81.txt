Title: Python 3 Changelog Updates
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: Recent updates include raising a TypeError for non-zero integers and non-empty sequences. Key issues addressed involve delegating cache invalidation in PathFinder, fixing recursive children in dataclasses, and correcting false positives/negatives in various methods of the ipaddress module.
---

Also, they now raise a TypeError for non-zero integers and non-empty sequences.
  * [gh-116811](https://github.com/python/cpython/issues/116811): In `PathFinder.invalidate_caches`, delegate to `MetadataPathFinder.invalidate_caches`.
  * [gh-116647](https://github.com/python/cpython/issues/116647): Fix recursive child in dataclasses
  * [gh-113171](https://github.com/python/cpython/issues/113171): Fixed various false positives and false negatives in
    * [`ipaddress.IPv4Address.is_private`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address.is_private "ipaddress.IPv4Address.is_private") (see these docs for details)
    * [`ipaddress.IPv4Address.is_global`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address.is_global "ipaddress.IPv4Address.is_global")
    * [`ipaddress.IPv6Address.is_private`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Address.is_private "ipaddress.IPv6Address.is_private")
    * [`ipaddress.IPv6Address.is_global`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Address.is_global "ipaddress.IPv6Address.is_global")
Also in the corresponding [`ipaddress.IPv4Network`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network "ipaddress.IPv4Network") and [`ipaddress.IPv6Network`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Network "ipaddress.IPv6Network") attributes.
  * [gh-63283](https://github.com/python/cpython/issues/63283): In [`encodings.idna`](https://docs.python.org/3/library/codecs.html#module-encodings.idna "encodings.idna: Internationalized Domain Names implementation"), any capitalization of the ACE prefix (`xn--`) is now acceptable. Patch by Pepijn de Vos and Zackery Spytz.
  * [gh-71042](https://github.com/python/cpython/issues/71042): Add [`platform.android_ver()`](https://docs.python.org/3/library/platform.html#platform.android_ver "platform.android_ver"), which provides device and OS information on Android.
  * [gh-73468](https://github.com/python/cpython/issues/73468): Added new [`math.fma()`](https://docs.python.org/3/library/math.html#math.fma "math.fma") function, wrapping C99â€™s `fma()` operation: fused multiply-add function. Patch by Mark Dickinson and Victor Stinner.
  * [gh-116608](https://github.com/python/cpython/issues/116608): The [`importlib.resources`](https://docs.python.org/3/library/importlib.resources.html#module-importlib.resources "importlib.resources: Package resource reading, opening, and access") functions [`is_resource()`](https://docs.python.org/3/library/importlib.resources.html#importlib.resources.is_resource "importlib.resources.is_resource"), [`open_binary()`](https://docs.python.org/3/library/importlib.resources.html#importlib.resources.open_binary "importlib.resources.open_binary"), [`open_text()`](https://docs.python.org/3/library/importlib.resources.html#importlib.resources.open_text "importlib.resources.open_text"), [`path()`](https://docs.python.org/3/library/importlib.resources.html#importlib.resources.path "importlib.resources.path"), [`read_binary()`](https://docs.python.org/3/library/importlib.resources.html#importlib.resources.read_binary "importlib.resources.read_binary"), and [`read_text()`](https://docs.python.org/3/library/importlib.resources.html#importlib.resources.read_text "importlib.resources.read_text") are un-deprecated, and support subdirectories via multiple positional arguments. The [`contents()`](https://docs.python.org/3/library/importlib.resources.html#importlib.resources.contents "importlib.resources.contents") function also allows subdirectories, but remains deprecated.
  * [gh-116484](https://github.com/python/cpython/issues/116484): Change automatically generated `tkinter.Checkbutton` widget names to avoid collisions with automatically generated `tkinter.ttk.Checkbutton` widget names within the same parent widget.
  * [gh-114314](https://github.com/python/cpython/issues/114314): In [`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "ctypes: A foreign function library for Python."), ctype data is now stored in type objects directly rather than in a dict subclass.