Title: Numeric Abstract Base Classes in Python
URL: https://docs.python.org/3/library/numbers.html
Summary: This document outlines the `numbers` module in Python, which defines numeric abstract base classes (ABCs) that serve as a foundation for different numeric types in Python. It includes details on the numeric tower, implementation notes for type creators, and guidance on adding new numeric ABCs and implementing arithmetic operations.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [`numbers` — Numeric abstract base classes](https://docs.python.org/3/library/numbers.html)
    * [The numeric tower](https://docs.python.org/3/library/numbers.html#the-numeric-tower)
    * [Notes for type implementers](https://docs.python.org/3/library/numbers.html#notes-for-type-implementers)
      * [Adding More Numeric ABCs](https://docs.python.org/3/library/numbers.html#adding-more-numeric-abcs)
      * [Implementing the arithmetic operations](https://docs.python.org/3/library/numbers.html#implementing-the-arithmetic-operations)


#### Previous topic
[Numeric and Mathematical Modules](https://docs.python.org/3/library/numeric.html "previous chapter")
#### Next topic
[`math` — Mathematical functions](https://docs.python.org/3/library/math.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/numbers.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/math.html "math — Mathematical functions") |
  * [previous](https://docs.python.org/3/library/numeric.html "Numeric and Mathematical Modules") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Numeric and Mathematical Modules](https://docs.python.org/3/library/numeric.html) »
  * [`numbers` — Numeric abstract base classes](https://docs.python.org/3/library/numbers.html)
  * | 
  * Theme  Auto Light Dark |


# `numbers` — Numeric abstract base classes[¶](https://docs.python.org/3/library/numbers.html#module-numbers "Link to this heading")
**Source code:** [Lib/numbers.py](https://github.com/python/cpython/tree/3.13/Lib/numbers.py)
The `numbers` module ([**PEP 3141**](https://peps.python.org/pep-3141/)) defines a hierarchy of numeric [abstract base classes](https://docs.python.org/3/glossary.html#term-abstract-base-class) which progressively define more operations. None of the types defined in this module are intended to be instantiated. 

_class_ numbers.Number[¶](https://docs.python.org/3/library/numbers.html#numbers.Number "Link to this definition")
    
The root of the numeric hierarchy. If you just want to check if an argument _x_ is a number, without caring what kind, use `isinstance(x, Number)`.
## The numeric tower[¶](https://docs.python.org/3/library/numbers.html#the-numeric-tower "Link to this heading") 

_class_ numbers.Complex[¶](https://docs.python.org/3/library/numbers.html#numbers.Complex "Link to this definition")
    
Subclasses of this type describe complex numbers and include the operations that work on the built-in [`complex`](https://docs.python.org/3/library/functions.html#complex "complex") type. These are: conversions to [`complex`](https://docs.python.org/3/library/functions.html#complex "complex") and [`bool`](https://docs.python.org/3/library/functions.html#bool "bool"), [`real`](https://docs.python.org/3/library/numbers.html#numbers.Complex.real "numbers.Complex.real"), [`imag`](https://docs.python.org/3/library/numbers.html#numbers.Complex.imag "numbers.Complex.imag"), `+`, `-`, `*`, `/`, `**`, [`abs()`](https://docs.python.org/3/library/functions.html#abs "abs"), [`conjugate()`](https://docs.python.org/3/library/numbers.html#numbers.Complex.conjugate "numbers.Complex.conjugate"), `==`, and `!=`. All except `-` and `!=` are abstract. 

real[¶](https://docs.python.org/3/library/numbers.html#numbers.Complex.real "Link to this definition")
    
Abstract. Retrieves the real component of this number. 

imag[¶](https://docs.python.org/3/library/numbers.html#numbers.Complex.imag "Link to this definition")
    
Abstract. Retrieves the imaginary component of this number. 

_abstractmethod_ conjugate()[¶](https://docs.python.org/3/library/numbers.html#numbers.Complex.conjugate "Link to this definition")
    
Abstract. Returns the complex conjugate. For example, `(1+3j).conjugate() == (1-3j)`.