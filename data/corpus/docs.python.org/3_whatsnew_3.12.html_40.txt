Title: Behavioral Changes in Python 3.12
URL: https://docs.python.org/3/whatsnew/3.12.html
Summary: Python 3.12 introduces several minor behavioral changes due to PEP 701 support. These include a change in the token type for certain invalid characters, raising `tokenize.TokenError` for incomplete single-line strings and other invalid code, and the removal of support for mixing tabs and spaces in indentation, which now results in a `TabError`.
---

```

Additionally, there may be some minor behavioral changes as a consequence of the changes required to support [**PEP 701**](https://peps.python.org/pep-0701/). Some of these changes include:
    * The `type` attribute of the tokens emitted when tokenizing some invalid Python characters such as `!` has changed from `ERRORTOKEN` to `OP`.
    * Incomplete single-line strings now also raise [`tokenize.TokenError`](https://docs.python.org/3/library/tokenize.html#tokenize.TokenError "tokenize.TokenError") as incomplete multiline strings do.
    * Some incomplete or invalid Python code now raises [`tokenize.TokenError`](https://docs.python.org/3/library/tokenize.html#tokenize.TokenError "tokenize.TokenError") instead of returning arbitrary `ERRORTOKEN` tokens when tokenizing it.
    * Mixing tabs and spaces as indentation in the same file is not supported anymore and will raise a [`TabError`](https://docs.python.org/3/library/exceptions.html#TabError "TabError").
  * The [`threading`](https://docs.python.org/3/library/threading.html#module-threading "threading: Thread-based parallelism.") module now expects the `_thread` module to have an `_is_main_interpreter` attribute. It is a function with no arguments that returns `True` if the current interpreter is the main interpreter.
Any library or application that provides a custom `_thread` module should provide `_is_main_interpreter()`. (See [gh-112826](https://github.com/python/cpython/issues/112826).)


## Build Changes[Â¶](https://docs.python.org/3/whatsnew/3.12.html#build-changes "Link to this heading")
  * Python no longer uses `setup.py` to build shared C extension modules. Build parameters like headers and libraries are detected in `configure` script. Extensions are built by `Makefile`. Most extensions use `pkg-config` and fall back to manual detection. (Contributed by Christian Heimes in [gh-93939](https://github.com/python/cpython/issues/93939).)
  * `va_start()` with two parameters, like `va_start(args, format),` is now required to build Python. `va_start()` is no longer called with a single parameter. (Contributed by Kumar Aditya in [gh-93207](https://github.com/python/cpython/issues/93207).)
  * CPython now uses the ThinLTO option as the default link time optimization policy if the Clang compiler accepts the flag. (Contributed by Donghee Na in [gh-89536](https://github.com/python/cpython/issues/89536).)
  * Add `COMPILEALL_OPTS` variable in `Makefile` to override [`compileall`](https://docs.python.org/3/library/compileall.html#module-compileall "compileall: Tools for byte-compiling all Python source files in a directory tree.") options (default: `-j0`) in `make install`. Also merged the 3 `compileall` commands into a single command to build .pyc files for all optimization levels (0, 1, 2) at once. (Contributed by Victor Stinner in [gh-99289](https://github.com/python/cpython/issues/99289).)
  * Add platform triplets for 64-bit LoongArch:
    * loongarch64-linux-gnusf
    * loongarch64-linux-gnuf32
    * loongarch64-linux-gnu
(Contributed by Zhang Na in [gh-90656](https://github.com/python/cpython/issues/90656).)
  * `PYTHON_FOR_REGEN` now require Python 3.10 or newer.
  * Autoconf 2.71 and aclocal 1.16.4 is now required to regenerate `!configure`. (Contributed by Christian Heimes in [gh-89886](https://github.com/python/cpython/issues/89886).)
  * Windows builds and macOS installers from python.org now use OpenSSL 3.0.