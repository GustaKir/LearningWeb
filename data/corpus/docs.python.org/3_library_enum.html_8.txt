Title: Introduction to enum.EnumDict in Python 3.11
URL: https://docs.python.org/3/library/enum.html
Summary: The enum.EnumDict class, introduced in Python 3.11, is a specialized subclass of dict used as the namespace for defining enumeration classes. It enables advanced behaviors for subclasses of EnumType, such as supporting multiple values for members. Proper usage requires passing the enum class name to avoid issues with private names and internal classes.
---

```

Added in version 3.11. 

_class_ enum.EnumDict[¶](https://docs.python.org/3/library/enum.html#enum.EnumDict "Link to this definition")
    
_EnumDict_ is a subclass of [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") that is used as the namespace for defining enum classes (see [Preparing the class namespace](https://docs.python.org/3/reference/datamodel.html#prepare)). It is exposed to allow subclasses of [`EnumType`](https://docs.python.org/3/library/enum.html#enum.EnumType "enum.EnumType") with advanced behavior like having multiple values per member. It should be called with the name of the enum class being created, otherwise private names and internal classes will not be handled correctly.
Note that only the [`MutableMapping`](https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableMapping "collections.abc.MutableMapping") interface ([`__setitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__setitem__ "object.__setitem__") and [`update()`](https://docs.python.org/3/library/stdtypes.html#dict.update "dict.update")) is overridden. It may be possible to bypass the checks using other `dict` operations like [`|=`](https://docs.python.org/3/reference/datamodel.html#object.__ior__ "object.__ior__"). 

member_names[¶](https://docs.python.org/3/library/enum.html#enum.EnumDict.member_names "Link to this definition")
    
A list of member names.
Added in version 3.13.
### Supported `__dunder__` names[¶](https://docs.python.org/3/library/enum.html#supported-dunder-names "Link to this heading")
[`__members__`](https://docs.python.org/3/library/enum.html#enum.EnumType.__members__ "enum.EnumType.__members__") is a read-only ordered mapping of `member_name`:`member` items. It is only available on the class.
[`__new__()`](https://docs.python.org/3/library/enum.html#enum.Enum.__new__ "enum.Enum.__new__"), if specified, must create and return the enum members; it is also a very good idea to set the member’s `_value_` appropriately. Once all the members are created it is no longer used.
### Supported `_sunder_` names[¶](https://docs.python.org/3/library/enum.html#supported-sunder-names "Link to this heading")
  * [`_add_alias_()`](https://docs.python.org/3/library/enum.html#enum.EnumType._add_alias_ "enum.EnumType._add_alias_") – adds a new name as an alias to an existing member.
  * [`_add_value_alias_()`](https://docs.python.org/3/library/enum.html#enum.EnumType._add_value_alias_ "enum.EnumType._add_value_alias_") – adds a new value as an alias to an existing member.
  * [`_name_`](https://docs.python.org/3/library/enum.html#enum.Enum._name_ "enum.Enum._name_") – name of the member
  * [`_value_`](https://docs.python.org/3/library/enum.html#enum.Enum._value_ "enum.Enum._value_") – value of the member; can be set in `__new__`
  * [`_missing_()`](https://docs.python.org/3/library/enum.html#enum.Enum._missing_ "enum.Enum._missing_") – a lookup function used when a value is not found; may be overridden
  * [`_ignore_`](https://docs.python.org/3/library/enum.html#enum.Enum._ignore_ "enum.Enum._ignore_") – a list of names, either as a [`list`](https://docs.python.org/3/library/stdtypes.html#list "list") or a [`str`](https://docs.python.org/3/library/stdtypes.html#str "str"), that will not be transformed into members, and will be removed from the final class
  * [`_order_`](https://docs.python.org/3/library/enum.html#enum.Enum._order_ "enum.Enum._order_") – no longer used, kept for backward compatibility (class attribute, removed during class creation)
  * [`_generate_next_value_()`](https://docs.python.org/3/library/enum.html#enum.Enum._generate_next_value_ "enum.Enum._generate_next_value_") – used to get an appropriate value for an enum member; may be overridden
Note
For standard [`Enum`](https://docs.python.org/3/library/enum.html#enum.Enum "enum.Enum") classes the next value chosen is the highest value seen incremented by one.
For [`Flag`](https://docs.python.org/3/library/enum.html#enum.Flag "enum.Flag") classes the next value chosen will be the next highest power-of-two.
  * While `_sunder_` names are generally reserved for the further development of the [`Enum`](https://docs.python.org/3/library/enum.html#enum.Enum "enum.Enum") class and can not be used, some are explicitly allowed:
    * `_repr_*` (e.g. `_repr_html_`), as used in [IPython’s rich display](https://ipython.readthedocs.io/en/stable/config/integrating.html#rich-display)


Added in version 3.6: `_missing_`, `_order_`, `_generate_next_value_`
Added in version 3.7: `_ignore_`
Added in version 3.13: `_add_alias_`, `_add_value_alias_`, `_repr_*`
## Utilities and Decorators[¶](https://docs.python.org/3/library/enum.html#utilities-and-decorators "Link to this heading")