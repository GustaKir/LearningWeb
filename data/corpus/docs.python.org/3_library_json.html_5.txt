Title: Changes in JSON Module in Python 3.6 and 3.11
URL: https://docs.python.org/3/library/json.html
Summary: This document chunk outlines changes made to the Python JSON library in versions 3.6 and 3.11. In 3.6, all optional parameters in the JSON functions became keyword-only, and the input for '_fp_' can now be a binary file with expected encodings. In 3.11, a new limitation was introduced for the default '_parse_int_', restricting the maximum length of integer strings to prevent potential denial of service attacks.
---

Changed in version 3.6: 
  * All optional parameters are now [keyword-only](https://docs.python.org/3/glossary.html#keyword-only-parameter).
  * _fp_ can now be a [binary file](https://docs.python.org/3/glossary.html#term-binary-file). The input encoding should be UTF-8, UTF-16 or UTF-32.


Changed in version 3.11: The default _parse_int_ of [`int()`](https://docs.python.org/3/library/functions.html#int "int") now limits the maximum length of the integer string via the interpreter’s [integer string conversion length limitation](https://docs.python.org/3/library/stdtypes.html#int-max-str-digits) to help avoid denial of service attacks. 

json.loads(_s_ , _*_ , _cls =None_, _object_hook =None_, _parse_float =None_, _parse_int =None_, _parse_constant =None_, _object_pairs_hook =None_, _** kw_)[¶](https://docs.python.org/3/library/json.html#json.loads "Link to this definition")
    
Identical to [`load()`](https://docs.python.org/3/library/json.html#json.load "json.load"), but instead of a file-like object, deserialize _s_ (a [`str`](https://docs.python.org/3/library/stdtypes.html#str "str"), [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") or [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") instance containing a JSON document) to a Python object using this [conversion table](https://docs.python.org/3/library/json.html#json-to-py-table).
Changed in version 3.6: _s_ can now be of type [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") or [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray"). The input encoding should be UTF-8, UTF-16 or UTF-32.
Changed in version 3.9: The keyword argument _encoding_ has been removed.
## Encoders and Decoders[¶](https://docs.python.org/3/library/json.html#encoders-and-decoders "Link to this heading") 

_class_ json.JSONDecoder(_*_ , _object_hook =None_, _parse_float =None_, _parse_int =None_, _parse_constant =None_, _strict =True_, _object_pairs_hook =None_)[¶](https://docs.python.org/3/library/json.html#json.JSONDecoder "Link to this definition")
    
Simple JSON decoder.
Performs the following translations in decoding by default:
JSON | Python  
---|---  
object | dict  
array | list  
string | str  
number (int) | int  
number (real) | float  
true | True  
false | False  
null | None  
It also understands `NaN`, `Infinity`, and `-Infinity` as their corresponding `float` values, which is outside the JSON spec.
_object_hook_ is an optional function that will be called with the result of every JSON object decoded and its return value will be used in place of the given [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict"). This can be used to provide custom deserializations (e.g. to support [JSON-RPC](https://www.jsonrpc.org) class hinting).
_object_pairs_hook_ is an optional function that will be called with the result of every JSON object decoded with an ordered list of pairs. The return value of _object_pairs_hook_ will be used instead of the [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict"). This feature can be used to implement custom decoders. If _object_hook_ is also defined, the _object_pairs_hook_ takes priority.
Changed in version 3.1: Added support for _object_pairs_hook_.
_parse_float_ is an optional function that will be called with the string of every JSON float to be decoded. By default, this is equivalent to `float(num_str)`. This can be used to use another datatype or parser for JSON floats (e.g. [`decimal.Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal")).
_parse_int_ is an optional function that will be called with the string of every JSON int to be decoded. By default, this is equivalent to `int(num_str)`. This can be used to use another datatype or parser for JSON integers (e.g. [`float`](https://docs.python.org/3/library/functions.html#float "float")).
_parse_constant_ is an optional function that will be called with one of the following strings: `'-Infinity'`, `'Infinity'`, `'NaN'`. This can be used to raise an exception if invalid JSON numbers are encountered.
If _strict_ is false (`True` is the default), then control characters will be allowed inside strings. Control characters in this context are those with character codes in the 0–31 range, including `'\t'` (tab), `'\n'`, `'\r'` and `'\0'`.
If the data being deserialized is not a valid JSON document, a [`JSONDecodeError`](https://docs.python.org/3/library/json.html#json.JSONDecodeError "json.JSONDecodeError") will be raised.
Changed in version 3.6: All parameters are now [keyword-only](https://docs.python.org/3/glossary.html#keyword-only-parameter).