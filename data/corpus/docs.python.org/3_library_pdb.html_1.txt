Title: Python Debugger (pdb) Features and Usage
URL: https://docs.python.org/3/library/pdb.html
Summary: Version 3.3 introduced tab-completion for commands and arguments in pdb using the readline module. Users can invoke pdb from the command line to debug scripts; it supports post-mortem debugging automatically upon abnormal exits and can restart programs while preserving state.
---

```

Changed in version 3.3: Tab-completion via the [`readline`](https://docs.python.org/3/library/readline.html#module-readline "readline: GNU readline support for Python. \(Unix\)") module is available for commands and command arguments, e.g. the current global and local names are offered as arguments of the `p` command.
You can also invoke [`pdb`](https://docs.python.org/3/library/pdb.html#module-pdb "pdb: The Python debugger for interactive interpreters.") from the command line to debug other scripts. For example:
```
python -m pdb [-c command] (-m module | pyfile) [args ...]

```

When invoked as a module, pdb will automatically enter post-mortem debugging if the program being debugged exits abnormally. After post-mortem debugging (or after normal exit of the program), pdb will restart the program. Automatic restarting preserves pdb’s state (such as breakpoints) and in most cases is more useful than quitting the debugger upon program’s exit. 

-c, --command <command>[¶](https://docs.python.org/3/library/pdb.html#cmdoption-pdb-c "Link to this definition")
    
To execute commands as if given in a `.pdbrc` file; see [Debugger Commands](https://docs.python.org/3/library/pdb.html#debugger-commands).
Changed in version 3.2: Added the `-c` option. 

-m <module>[¶](https://docs.python.org/3/library/pdb.html#cmdoption-pdb-m "Link to this definition")
    
To execute modules similar to the way `python -m` does. As with a script, the debugger will pause execution just before the first line of the module.
Changed in version 3.7: Added the `-m` option.
Typical usage to execute a statement under control of the debugger is:
>>>```
>>> importpdb
>>> deff(x):
...   print(1 / x)
>>> pdb.run("f(2)")
> <string>(1)<module>()
(Pdb) continue
0.5
>>>

```

The typical usage to inspect a crashed program is:
>>>```
>>> importpdb
>>> deff(x):
...   print(1 / x)
...
>>> f(0)
Traceback (most recent call last):
 File "<stdin>", line 1, in <module>
 File "<stdin>", line 2, in f
ZeroDivisionError: division by zero
>>> pdb.pm()
> <stdin>(2)f()
(Pdb) p x
0
(Pdb)