Title: Readline Library Overview
URL: https://docs.python.org/3/library/readline.html
Summary: This section discusses the compatibility of history file formats between different libraries, indicating that switching libraries may render existing history files unusable. It also introduces the `readline.backend` attribute that indicates whether the 'readline' or 'editline' library is in use, added in version 3.13. Additionally, it outlines functions related to the init file and user configuration, including `readline.parse_and_bind` and `readline.read_init_file`, which execute initialization lines and files.
---

```

Also note that different libraries may use different history file formats. When switching the underlying library, existing history files may become unusable. 

readline.backend[¶](https://docs.python.org/3/library/readline.html#readline.backend "Link to this definition")
    
The name of the underlying Readline library being used, either `"readline"` or `"editline"`.
Added in version 3.13.
## Init file[¶](https://docs.python.org/3/library/readline.html#init-file "Link to this heading")
The following functions relate to the init file and user configuration: 

readline.parse_and_bind(_string_)[¶](https://docs.python.org/3/library/readline.html#readline.parse_and_bind "Link to this definition")
    
Execute the init line provided in the _string_ argument. This calls `rl_parse_and_bind()` in the underlying library. 

readline.read_init_file([_filename_])[¶](https://docs.python.org/3/library/readline.html#readline.read_init_file "Link to this definition")
    
Execute a readline initialization file. The default filename is the last filename used. This calls `rl_read_init_file()` in the underlying library.
## Line buffer[¶](https://docs.python.org/3/library/readline.html#line-buffer "Link to this heading")
The following functions operate on the line buffer: 

readline.get_line_buffer()[¶](https://docs.python.org/3/library/readline.html#readline.get_line_buffer "Link to this definition")
    
Return the current contents of the line buffer (`rl_line_buffer` in the underlying library). 

readline.insert_text(_string_)[¶](https://docs.python.org/3/library/readline.html#readline.insert_text "Link to this definition")
    
Insert text into the line buffer at the cursor position. This calls `rl_insert_text()` in the underlying library, but ignores the return value. 

readline.redisplay()[¶](https://docs.python.org/3/library/readline.html#readline.redisplay "Link to this definition")
    
Change what’s displayed on the screen to reflect the current contents of the line buffer. This calls `rl_redisplay()` in the underlying library.
## History file[¶](https://docs.python.org/3/library/readline.html#history-file "Link to this heading")
The following functions operate on a history file: 

readline.read_history_file([_filename_])[¶](https://docs.python.org/3/library/readline.html#readline.read_history_file "Link to this definition")
    
Load a readline history file, and append it to the history list. The default filename is `~/.history`. This calls `read_history()` in the underlying library. 

readline.write_history_file([_filename_])[¶](https://docs.python.org/3/library/readline.html#readline.write_history_file "Link to this definition")
    
Save the history list to a readline history file, overwriting any existing file. The default filename is `~/.history`. This calls `write_history()` in the underlying library. 

readline.append_history_file(_nelements_[, _filename_])[¶](https://docs.python.org/3/library/readline.html#readline.append_history_file "Link to this definition")
    
Append the last _nelements_ items of history to a file. The default filename is `~/.history`. The file must already exist. This calls `append_history()` in the underlying library. This function only exists if Python was compiled for a version of the library that supports it.
Added in version 3.5. 

readline.get_history_length()[¶](https://docs.python.org/3/library/readline.html#readline.get_history_length "Link to this definition")


readline.set_history_length(_length_)[¶](https://docs.python.org/3/library/readline.html#readline.set_history_length "Link to this definition")
    
Set or return the desired number of lines to save in the history file. The [`write_history_file()`](https://docs.python.org/3/library/readline.html#readline.write_history_file "readline.write_history_file") function uses this value to truncate the history file, by calling `history_truncate_file()` in the underlying library. Negative values imply unlimited history file size.
## History list[¶](https://docs.python.org/3/library/readline.html#history-list "Link to this heading")
The following functions operate on a global history list: 

readline.clear_history()[¶](https://docs.python.org/3/library/readline.html#readline.clear_history "Link to this definition")
    
Clear the current history. This calls `clear_history()` in the underlying library. The Python function only exists if Python was compiled for a version of the library that supports it. 

readline.get_current_history_length()[¶](https://docs.python.org/3/library/readline.html#readline.get_current_history_length "Link to this definition")
    
Return the number of items currently in the history. (This is different from [`get_history_length()`](https://docs.python.org/3/library/readline.html#readline.get_history_length "readline.get_history_length"), which returns the maximum number of lines that will be written to a history file.)