Title: Using task_done() in JoinableQueue
URL: https://docs.python.org/3/library/multiprocessing.html
Summary: The `task_done()` method indicates the completion of a previously enqueued task, used by consumers of the queue. Each call to `task_done()` should correspond to a `get()` call, signaling that the task processing is finished. If a `join()` call is blocking, it will resume once all tasks have been marked as complete with `task_done()`.
---

task_done()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.JoinableQueue.task_done "Link to this definition")
    
Indicate that a formerly enqueued task is complete. Used by queue consumers. For each [`get()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue.get "multiprocessing.Queue.get") used to fetch a task, a subsequent call to [`task_done()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.JoinableQueue.task_done "multiprocessing.JoinableQueue.task_done") tells the queue that the processing on the task is complete.
If a [`join()`](https://docs.python.org/3/library/queue.html#queue.Queue.join "queue.Queue.join") is currently blocking, it will resume when all items have been processed (meaning that a [`task_done()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.JoinableQueue.task_done "multiprocessing.JoinableQueue.task_done") call was received for every item that had been [`put()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue.put "multiprocessing.Queue.put") into the queue).
Raises a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if called more times than there were items placed in the queue. 

join()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.JoinableQueue.join "Link to this definition")
    
Block until all items in the queue have been gotten and processed.
The count of unfinished tasks goes up whenever an item is added to the queue. The count goes down whenever a consumer calls [`task_done()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.JoinableQueue.task_done "multiprocessing.JoinableQueue.task_done") to indicate that the item was retrieved and all work on it is complete. When the count of unfinished tasks drops to zero, [`join()`](https://docs.python.org/3/library/queue.html#queue.Queue.join "queue.Queue.join") unblocks.
### Miscellaneous[¶](https://docs.python.org/3/library/multiprocessing.html#miscellaneous "Link to this heading") 

multiprocessing.active_children()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.active_children "Link to this definition")
    
Return list of all live children of the current process.
Calling this has the side effect of “joining” any processes which have already finished. 

multiprocessing.cpu_count()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.cpu_count "Link to this definition")
    
Return the number of CPUs in the system.
This number is not equivalent to the number of CPUs the current process can use. The number of usable CPUs can be obtained with [`os.process_cpu_count()`](https://docs.python.org/3/library/os.html#os.process_cpu_count "os.process_cpu_count") (or `len(os.sched_getaffinity(0))`).
When the number of CPUs cannot be determined a [`NotImplementedError`](https://docs.python.org/3/library/exceptions.html#NotImplementedError "NotImplementedError") is raised.
See also
[`os.cpu_count()`](https://docs.python.org/3/library/os.html#os.cpu_count "os.cpu_count") [`os.process_cpu_count()`](https://docs.python.org/3/library/os.html#os.process_cpu_count "os.process_cpu_count")
Changed in version 3.13: The return value can also be overridden using the [`-X cpu_count`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) flag or [`PYTHON_CPU_COUNT`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHON_CPU_COUNT) as this is merely a wrapper around the [`os`](https://docs.python.org/3/library/os.html#module-os "os: Miscellaneous operating system interfaces.") cpu count APIs. 

multiprocessing.current_process()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.current_process "Link to this definition")
    
Return the [`Process`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process "multiprocessing.Process") object corresponding to the current process.
An analogue of [`threading.current_thread()`](https://docs.python.org/3/library/threading.html#threading.current_thread "threading.current_thread"). 

multiprocessing.parent_process()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.parent_process "Link to this definition")
    
Return the [`Process`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process "multiprocessing.Process") object corresponding to the parent process of the [`current_process()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.current_process "multiprocessing.current_process"). For the main process, `parent_process` will be `None`.
Added in version 3.8.