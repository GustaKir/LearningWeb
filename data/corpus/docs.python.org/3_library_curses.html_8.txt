Title: Curses Library Functions
URL: https://docs.python.org/3/library/curses.html
Summary: This section details specific functions from the curses library in Python. The function `curses.update_lines_cols()` updates the `LINES` and `COLS` variables for handling screen resizing, while `curses.unget_wch(_ch_)` allows pushing a character to be returned by the next `get_wch()` call. Additionally, `curses.ungetmouse(_id_, _x_, _y_, _z_, _bstate_)` enables pushing mouse events into the input buffer, allowing for simulated mouse input handling.
---

curses.update_lines_cols()[¶](https://docs.python.org/3/library/curses.html#curses.update_lines_cols "Link to this definition")
    
Update the [`LINES`](https://docs.python.org/3/library/curses.html#curses.LINES "curses.LINES") and [`COLS`](https://docs.python.org/3/library/curses.html#curses.COLS "curses.COLS") module variables. Useful for detecting manual screen resize.
Added in version 3.5. 

curses.unget_wch(_ch_)[¶](https://docs.python.org/3/library/curses.html#curses.unget_wch "Link to this definition")
    
Push _ch_ so the next [`get_wch()`](https://docs.python.org/3/library/curses.html#curses.window.get_wch "curses.window.get_wch") will return it.
Note
Only one _ch_ can be pushed before `get_wch()` is called.
Added in version 3.3. 

curses.ungetmouse(_id_ , _x_ , _y_ , _z_ , _bstate_)[¶](https://docs.python.org/3/library/curses.html#curses.ungetmouse "Link to this definition")
    
Push a [`KEY_MOUSE`](https://docs.python.org/3/library/curses.html#curses.KEY_MOUSE "curses.KEY_MOUSE") event onto the input queue, associating the given state data with it. 

curses.use_env(_flag_)[¶](https://docs.python.org/3/library/curses.html#curses.use_env "Link to this definition")
    
If used, this function should be called before [`initscr()`](https://docs.python.org/3/library/curses.html#curses.initscr "curses.initscr") or newterm are called. When _flag_ is `False`, the values of lines and columns specified in the terminfo database will be used, even if environment variables `LINES` and `COLUMNS` (used by default) are set, or if curses is running in a window (in which case default behavior would be to use the window size if `LINES` and `COLUMNS` are not set). 

curses.use_default_colors()[¶](https://docs.python.org/3/library/curses.html#curses.use_default_colors "Link to this definition")
    
Allow use of default values for colors on terminals supporting this feature. Use this to support transparency in your application. The default color is assigned to the color number `-1`. After calling this function, `init_pair(x, curses.COLOR_RED, -1)` initializes, for instance, color pair _x_ to a red foreground color on the default background. 

curses.wrapper(_func_ , _/_ , _* args_, _** kwargs_)[¶](https://docs.python.org/3/library/curses.html#curses.wrapper "Link to this definition")
    
Initialize curses and call another callable object, _func_ , which should be the rest of your curses-using application. If the application raises an exception, this function will restore the terminal to a sane state before re-raising the exception and generating a traceback. The callable object _func_ is then passed the main window ‘stdscr’ as its first argument, followed by any other arguments passed to `wrapper()`. Before calling _func_ , `wrapper()` turns on cbreak mode, turns off echo, enables the terminal keypad, and initializes colors if the terminal has color support. On exit (whether normally or by exception) it restores cooked mode, turns on echo, and disables the terminal keypad.
## Window Objects[¶](https://docs.python.org/3/library/curses.html#window-objects "Link to this heading")
Window objects, as returned by [`initscr()`](https://docs.python.org/3/library/curses.html#curses.initscr "curses.initscr") and [`newwin()`](https://docs.python.org/3/library/curses.html#curses.newwin "curses.newwin") above, have the following methods and attributes: 

window.addch(_ch_[, _attr_])[¶](https://docs.python.org/3/library/curses.html#curses.window.addch "Link to this definition")


window.addch(_y_ , _x_ , _ch_[, _attr_])
    
Paint character _ch_ at `(y, x)` with attributes _attr_ , overwriting any character previously painted at that location. By default, the character position and attributes are the current settings for the window object.
Note
Writing outside the window, subwindow, or pad raises a [`curses.error`](https://docs.python.org/3/library/curses.html#curses.error "curses.error"). Attempting to write to the lower right corner of a window, subwindow, or pad will cause an exception to be raised after the character is printed. 

window.addnstr(_str_ , _n_[, _attr_])[¶](https://docs.python.org/3/library/curses.html#curses.window.addnstr "Link to this definition")


window.addnstr(_y_ , _x_ , _str_ , _n_[, _attr_])
    
Paint at most _n_ characters of the character string _str_ at `(y, x)` with attributes _attr_ , overwriting anything previously on the display. 

window.addstr(_str_[, _attr_])[¶](https://docs.python.org/3/library/curses.html#curses.window.addstr "Link to this definition")