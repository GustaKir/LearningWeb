Title: Changes in Python 3.13
URL: https://docs.python.org/3/whatsnew/3.13.html
Summary: Python 3.13 introduces several key updates: future statements are no longer triggered by relative imports of the __future__ module, making them standard imports. Additionally, global declarations are now allowed in except blocks when referenced in associated else blocks.
---

```

(Contributed by Jelle Zijlstra in [gh-109118](https://github.com/python/cpython/issues/109118) and [gh-118160](https://github.com/python/cpython/issues/118160).)
  * [Future statements](https://docs.python.org/3/reference/simple_stmts.html#future) are no longer triggered by relative imports of the [`__future__`](https://docs.python.org/3/library/__future__.html#module-__future__ "__future__: Future statement definitions") module, meaning that statements of the form `from .__future__ import ...` are now simply standard relative imports, with no special features activated. (Contributed by Jeremiah Gabriel Pascual in [gh-118216](https://github.com/python/cpython/issues/118216).)
  * [`global`](https://docs.python.org/3/reference/simple_stmts.html#global) declarations are now permitted in [`except`](https://docs.python.org/3/reference/compound_stmts.html#except) blocks when that global is used in the [`else`](https://docs.python.org/3/reference/compound_stmts.html#else) block. Previously this raised an erroneous [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError"). (Contributed by Irit Katriel in [gh-111123](https://github.com/python/cpython/issues/111123).)
  * Add [`PYTHON_FROZEN_MODULES`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHON_FROZEN_MODULES), a new environment variable that determines whether frozen modules are ignored by the import machinery, equivalent to the [`-X frozen_modules`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) command-line option. (Contributed by Yilei Yang in [gh-111374](https://github.com/python/cpython/issues/111374).)
  * Add [support for the perf profiler](https://docs.python.org/3/howto/perf_profiling.html#perf-profiling) working without [frame pointers](https://en.wikipedia.org/wiki/Call_stack) through the new environment variable [`PYTHON_PERF_JIT_SUPPORT`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHON_PERF_JIT_SUPPORT) and command-line option [`-X perf_jit`](https://docs.python.org/3/using/cmdline.html#cmdoption-X). (Contributed by Pablo Galindo in [gh-118518](https://github.com/python/cpython/issues/118518).)
  * The location of a `.python_history` file can be changed via the new [`PYTHON_HISTORY`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHON_HISTORY) environment variable. (Contributed by Levi Sabah, Zackery Spytz and Hugo van Kemenade in [gh-73965](https://github.com/python/cpython/issues/73965).)
  * Classes have a new [`__static_attributes__`](https://docs.python.org/3/reference/datamodel.html#type.__static_attributes__ "type.__static_attributes__") attribute. This is populated by the compiler with a tuple of the classâ€™s attribute names which are assigned through `self.<name>` from any function in its body. (Contributed by Irit Katriel in [gh-115775](https://github.com/python/cpython/issues/115775).)
  * The compiler now creates a `__firstlineno__` attribute on classes with the line number of the first line of the class definition. (Contributed by Serhiy Storchaka in [gh-118465](https://github.com/python/cpython/issues/118465).)
  * The [`exec()`](https://docs.python.org/3/library/functions.html#exec "exec") and [`eval()`](https://docs.python.org/3/library/functions.html#eval "eval") builtins now accept the _globals_ and _locals_ arguments as keywords. (Contributed by Raphael Gaschignard in [gh-105879](https://github.com/python/cpython/issues/105879))
  * The [`compile()`](https://docs.python.org/3/library/functions.html#compile "compile") builtin now accepts a new flag, `ast.PyCF_OPTIMIZED_AST`, which is similar to `ast.PyCF_ONLY_AST` except that the returned AST is optimized according to the value of the _optimize_ argument. (Contributed by Irit Katriel in [gh-108113](https://github.com/python/cpython/issues/108113)).
  * Add a [`__name__`](https://docs.python.org/3/library/functions.html#property.__name__ "property.__name__") attribute on [`property`](https://docs.python.org/3/library/functions.html#property "property") objects. (Contributed by Eugene Toder in [gh-101860](https://github.com/python/cpython/issues/101860).)
  * Add [`PythonFinalizationError`](https://docs.python.org/3/library/exceptions.html#PythonFinalizationError "PythonFinalizationError"), a new exception derived from [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError") and used to signal when operations are blocked during [finalization](https://docs.python.org/3/glossary.html#term-interpreter-shutdown). The following callables now raise `PythonFinalizationError`, instead of [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError"):
    * [`_thread.start_new_thread()`](https://docs.python.org/3/library/_thread.html#thread.start_new_thread "_thread.start_new_thread")
    * [`os.fork()`](https://docs.python.org/3/library/os.html#os.fork "os.fork")
    * [`os.forkpty()`](https://docs.python.org/3/library/os.html#os.forkpty "os.