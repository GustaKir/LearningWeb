Title: Removal of Features in Python 3.10
URL: https://docs.python.org/3/whatsnew/3.10.html
Summary: Python 3.10 has removed several special methods from the `complex` class that previously raised `TypeError`. Additionally, the `ParserBase.error()` method has been removed from the `_markupbase` module, which only retained `html.parser.HTMLParser` as its subclass since the method was already eliminated in Python 3.5.
---

## Removed[¶](https://docs.python.org/3/whatsnew/3.10.html#removed "Link to this heading")
  * Removed special methods `__int__`, `__float__`, `__floordiv__`, `__mod__`, `__divmod__`, `__rfloordiv__`, `__rmod__` and `__rdivmod__` of the [`complex`](https://docs.python.org/3/library/functions.html#complex "complex") class. They always raised a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError"). (Contributed by Serhiy Storchaka in [bpo-41974](https://bugs.python.org/issue?@action=redirect&bpo=41974).)
  * The `ParserBase.error()` method from the private and undocumented `_markupbase` module has been removed. [`html.parser.HTMLParser`](https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser "html.parser.HTMLParser") is the only subclass of `ParserBase` and its `error()` implementation was already removed in Python 3.5. (Contributed by Berker Peksag in [bpo-31844](https://bugs.python.org/issue?@action=redirect&bpo=31844).)
  * Removed the `unicodedata.ucnhash_CAPI` attribute which was an internal PyCapsule object. The related private `_PyUnicode_Name_CAPI` structure was moved to the internal C API. (Contributed by Victor Stinner in [bpo-42157](https://bugs.python.org/issue?@action=redirect&bpo=42157).)
  * Removed the `parser` module, which was deprecated in 3.9 due to the switch to the new PEG parser, as well as all the C source and header files that were only being used by the old parser, including `node.h`, `parser.h`, `graminit.h` and `grammar.h`.
  * Removed the Public C API functions `PyParser_SimpleParseStringFlags`, `PyParser_SimpleParseStringFlagsFilename`, `PyParser_SimpleParseFileFlags` and `PyNode_Compile` that were deprecated in 3.9 due to the switch to the new PEG parser.
  * Removed the `formatter` module, which was deprecated in Python 3.4. It is somewhat obsolete, little used, and not tested. It was originally scheduled to be removed in Python 3.6, but such removals were delayed until after Python 2.7 EOL. Existing users should copy whatever classes they use into their code. (Contributed by Donghee Na and Terry J. Reedy in [bpo-42299](https://bugs.python.org/issue?@action=redirect&bpo=42299).)
  * Removed the `PyModule_GetWarningsModule()` function that was useless now due to the `_warnings` module was converted to a builtin module in 2.6. (Contributed by Hai Shi in [bpo-42599](https://bugs.python.org/issue?@action=redirect&bpo=42599).)
  * Remove deprecated aliases to [Collections Abstract Base Classes](https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes) from the [`collections`](https://docs.python.org/3/library/collections.html#module-collections "collections: Container datatypes") module. (Contributed by Victor Stinner in [bpo-37324](https://bugs.python.org/issue?@action=redirect&bpo=37324).)
  * The `loop` parameter has been removed from most of [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O.")‘s [high-level API](https://docs.python.org/3/library/asyncio-api-index.html) following deprecation in Python 3.8. The motivation behind this change is multifold:
    1. This simplifies the high-level API.
    2. The functions in the high-level API have been implicitly getting the current thread’s running event loop since Python 3.7. There isn’t a need to pass the event loop to the API in most normal use cases.
    3. Event loop passing is error-prone especially when dealing with loops running in different threads.
Note that the low-level API will still accept `loop`. See [Changes in the Python API](https://docs.python.org/3/whatsnew/3.10.html#changes-python-api) for examples of how to replace existing code.
(Contributed by Yurii Karabas, Andrew Svetlov, Yury Selivanov and Kyle Stanley in [bpo-42392](https://bugs.python.org/issue?@action=redirect&bpo=42392).)


## Porting to Python 3.10[¶](https://docs.python.org/3/whatsnew/3.10.html#porting-to-python-3-10 "Link to this heading")
This section lists previously described changes and other bugfixes that may require changes to your code.
### Changes in the Python syntax[¶](https://docs.python.org/3/whatsnew/3.10.html#changes-in-the-python-syntax "Link to this heading")
  * Deprecation warning is now emitted when compiling previously valid syntax if the numeric literal is immediately followed by a keyword (like in `0in x`). In future releases it will be changed to syntax warning, and finally to a syntax error. To get rid of the warning and make the code compatible with future releases just add a space between the numeric literal and the following keyword. (Contributed by Serhiy Storchaka in [bpo-43833](https://bugs.python.org/issue?@action=redirect&bpo=43833).)