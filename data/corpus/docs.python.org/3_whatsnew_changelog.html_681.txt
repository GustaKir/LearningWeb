Title: Python Memory Allocator Enhancements
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: New features related to the Python memory allocator include debug hooks detection when functions are called without holding the GIL, the addition of the `PYTHONMALLOC` environment variable for setting memory allocators, and the `PyMem_SetupDebugHooks()` function now available for usage in release mode.
---

ssue?@action=redirect&bpo=26558): The debug hooks on Python memory allocator [`PyObject_Malloc()`](https://docs.python.org/3/c-api/memory.html#c.PyObject_Malloc "PyObject_Malloc") now detect when functions are called without holding the GIL.
  * [bpo-26516](https://bugs.python.org/issue?@action=redirect&bpo=26516): Add [`PYTHONMALLOC`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONMALLOC) environment variable to set the Python memory allocators and/or install debug hooks.
  * [bpo-26516](https://bugs.python.org/issue?@action=redirect&bpo=26516): The [`PyMem_SetupDebugHooks()`](https://docs.python.org/3/c-api/memory.html#c.PyMem_SetupDebugHooks "PyMem_SetupDebugHooks") function can now also be used on Python compiled in release mode.
  * [bpo-26516](https://bugs.python.org/issue?@action=redirect&bpo=26516): The [`PYTHONMALLOCSTATS`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONMALLOCSTATS) environment variable can now also be used on Python compiled in release mode. It now has no effect if set to an empty string.
  * [bpo-26516](https://bugs.python.org/issue?@action=redirect&bpo=26516): In debug mode, debug hooks are now also installed on Python memory allocators when Python is configured without pymalloc.
  * [bpo-26464](https://bugs.python.org/issue?@action=redirect&bpo=26464): Fix str.translate() when string is ASCII and first replacements removes character, but next replacement uses a non-ASCII character or a string longer than 1 character. Regression introduced in Python 3.5.0.
  * [bpo-22836](https://bugs.python.org/issue?@action=redirect&bpo=22836): Ensure exception reports from PyErr_Display() and PyErr_WriteUnraisable() are sensible even when formatting them produces secondary errors. This affects the reports produced by sys.__excepthook__() and when __del__() raises an exception.
  * [bpo-26302](https://bugs.python.org/issue?@action=redirect&bpo=26302): Correct behavior to reject comma as a legal character for cookie names.
  * [bpo-26136](https://bugs.python.org/issue?@action=redirect&bpo=26136): Upgrade the warning when a generator raises StopIteration from PendingDeprecationWarning to DeprecationWarning. Patch by Anish Shah.
  * [bpo-26204](https://bugs.python.org/issue?@action=redirect&bpo=26204): The compiler now ignores all constant statements: bytes, str, int, float, complex, name constants (None, False, True), Ellipsis and ast.Constant; not only str and int. For example, `1.0` is now ignored in `def f(): 1.0`.
  * [bpo-4806](https://bugs.python.org/issue?@action=redirect&bpo=4806): Avoid masking the original TypeError exception when using star (`*`) unpacking in function calls. Based on patch by Hagen Fürstenau and Daniel Urban.
  * [bpo-26146](https://bugs.python.org/issue?@action=redirect&bpo=26146): Add a new kind of AST node: `ast.Constant`. It can be used by external AST optimizers, but the compiler does not emit directly such node.
  * [bpo-23601](https://bugs.python.org/issue?@action=redirect&bpo=23601): Sped-up allocation of dict key objects by using Python’s small object allocator. (Contributed by Julian Taylor.)
  * [bpo-18018](https://bugs.python.org/issue?@action=redirect&bpo=18018): Import raises ImportError instead of SystemError if a relative import is attempted without a known parent package.
  * [bpo-25843](https://bugs.python.org/issue?@action=redirect&bpo=25843): When compiling code, don’t merge constants if they are equal but have a different types. For example, `f1, f2 = lambda: 1, lambda: 1.0` is now correctly compiled to two different functions: `f1()` returns `1` (`int`) and `f2()` returns `1.0` (`float`), even if `1` and `1.0` are equal.
  * [bpo-26107](https://bugs.python.org/issue?@action=redirect&bpo=26107): The format of the `co_lnotab` attribute of code objects changes to support negative line number delta.
  * [bpo-26154](https://bugs.python.org/issue?@action=redirect&bpo=26154): Add a new private _PyThreadState_UncheckedGet() function to get the current Python thread state, but don’t issue a fatal error if it is NULL. This new function must be used instead of accessing directly the _PyThreadState_Current variable.