Title: socket.getsockopt() Function
URL: https://docs.python.org/3/library/socket.html
Summary: The socket.getsockopt() function retrieves the value of a specified socket option. It can return an integer value for options without a buffer length or a bytes object for options with a specified maximum buffer length. The caller is responsible for decoding the returned buffer contents.
---

socket.getsockopt(_level_ , _optname_[, _buflen_])[¶](https://docs.python.org/3/library/socket.html#socket.socket.getsockopt "Link to this definition")
    
Return the value of the given socket option (see the Unix man page _[getsockopt(2)](https://manpages.debian.org/getsockopt\(2\))_). The needed symbolic constants ([SO_* etc.](https://docs.python.org/3/library/socket.html#socket-unix-constants)) are defined in this module. If _buflen_ is absent, an integer option is assumed and its integer value is returned by the function. If _buflen_ is present, it specifies the maximum length of the buffer used to receive the option in, and this buffer is returned as a bytes object. It is up to the caller to decode the contents of the buffer (see the optional built-in module [`struct`](https://docs.python.org/3/library/struct.html#module-struct "struct: Interpret bytes as packed binary data.") for a way to decode C structures encoded as byte strings).
[Availability](https://docs.python.org/3/library/intro.html#availability): not WASI. 

socket.getblocking()[¶](https://docs.python.org/3/library/socket.html#socket.socket.getblocking "Link to this definition")
    
Return `True` if socket is in blocking mode, `False` if in non-blocking.
This is equivalent to checking `socket.gettimeout() != 0`.
Added in version 3.7. 

socket.gettimeout()[¶](https://docs.python.org/3/library/socket.html#socket.socket.gettimeout "Link to this definition")
    
Return the timeout in seconds (float) associated with socket operations, or `None` if no timeout is set. This reflects the last call to [`setblocking()`](https://docs.python.org/3/library/socket.html#socket.socket.setblocking "socket.socket.setblocking") or [`settimeout()`](https://docs.python.org/3/library/socket.html#socket.socket.settimeout "socket.socket.settimeout"). 

socket.ioctl(_control_ , _option_)[¶](https://docs.python.org/3/library/socket.html#socket.socket.ioctl "Link to this definition")
     

Platform:
    
Windows
The [`ioctl()`](https://docs.python.org/3/library/socket.html#socket.socket.ioctl "socket.socket.ioctl") method is a limited interface to the WSAIoctl system interface. Please refer to the [Win32 documentation](https://msdn.microsoft.com/en-us/library/ms741621%28VS.85%29.aspx) for more information.
On other platforms, the generic [`fcntl.fcntl()`](https://docs.python.org/3/library/fcntl.html#fcntl.fcntl "fcntl.fcntl") and [`fcntl.ioctl()`](https://docs.python.org/3/library/fcntl.html#fcntl.ioctl "fcntl.ioctl") functions may be used; they accept a socket object as their first argument.
Currently only the following control codes are supported: `SIO_RCVALL`, `SIO_KEEPALIVE_VALS`, and `SIO_LOOPBACK_FAST_PATH`.
Changed in version 3.6: `SIO_LOOPBACK_FAST_PATH` was added. 

socket.listen([_backlog_])[¶](https://docs.python.org/3/library/socket.html#socket.socket.listen "Link to this definition")
    
Enable a server to accept connections. If _backlog_ is specified, it must be at least 0 (if it is lower, it is set to 0); it specifies the number of unaccepted connections that the system will allow before refusing new connections. If not specified, a default reasonable value is chosen.
[Availability](https://docs.python.org/3/library/intro.html#availability): not WASI.
Changed in version 3.5: The _backlog_ parameter is now optional. 

socket.makefile(_mode ='r'_, _buffering =None_, _*_ , _encoding =None_, _errors =None_, _newline =None_)[¶](https://docs.python.org/3/library/socket.html#socket.socket.makefile "Link to this definition")
    
Return a [file object](https://docs.python.org/3/glossary.html#term-file-object) associated with the socket. The exact returned type depends on the arguments given to [`makefile()`](https://docs.python.org/3/library/socket.html#socket.socket.makefile "socket.socket.makefile"). These arguments are interpreted the same way as by the built-in [`open()`](https://docs.python.org/3/library/functions.html#open "open") function, except the only supported _mode_ values are `'r'` (default), `'w'`, `'b'`, or a combination of those.
The socket must be in blocking mode; it can have a timeout, but the file object’s internal buffer may end up in an inconsistent state if a timeout occurs.
Closing the file object returned by [`makefile()`](https://docs.python.org/3/library/socket.html#socket.socket.makefile "socket.socket.makefile") won’t close the original socket unless all other file objects have been closed and [`socket.close()`](https://docs.python.org/3/library/socket.html#socket.close "socket.close") has been called on the socket object.
Note
On Windows, the file-like object created by [`makefile()`](https://docs.python.org/3/library/socket.html#socket.socket.makefile "socket.socket.makefile") cannot be used where a file object with a file descriptor is expected, such as the stream arguments of [`subprocess.Popen()`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen "subprocess.Popen").