Title: Options for the compileall Module
URL: https://docs.python.org/3/library/compileall.html
Summary: This document outlines various command-line options for the compileall module in Python, including the ability to strip or prepend path prefixes, skip files based on regex matches, read a list of files for compilation, and write bytecode to a specific directory.
---

-s strip_prefix[¶](https://docs.python.org/3/library/compileall.html#cmdoption-compileall-s "Link to this definition")


-p prepend_prefix[¶](https://docs.python.org/3/library/compileall.html#cmdoption-compileall-p "Link to this definition")
    
Remove (`-s`) or append (`-p`) the given prefix of paths recorded in the `.pyc` files. Cannot be combined with `-d`. 

-x regex[¶](https://docs.python.org/3/library/compileall.html#cmdoption-compileall-x "Link to this definition")
    
regex is used to search the full path to each file considered for compilation, and if the regex produces a match, the file is skipped. 

-i list[¶](https://docs.python.org/3/library/compileall.html#cmdoption-compileall-i "Link to this definition")
    
Read the file `list` and add each line that it contains to the list of files and directories to compile. If `list` is `-`, read lines from `stdin`. 

-b[¶](https://docs.python.org/3/library/compileall.html#cmdoption-compileall-b "Link to this definition")
    
Write the byte-code files to their legacy locations and names, which may overwrite byte-code files created by another version of Python. The default is to write files to their [**PEP 3147**](https://peps.python.org/pep-3147/) locations and names, which allows byte-code files from multiple versions of Python to coexist. 

-r[¶](https://docs.python.org/3/library/compileall.html#cmdoption-compileall-r "Link to this definition")
    
Control the maximum recursion level for subdirectories. If this is given, then `-l` option will not be taken into account. **python -m compileall <directory> -r 0** is equivalent to **python -m compileall <directory> -l**. 

-j N[¶](https://docs.python.org/3/library/compileall.html#cmdoption-compileall-j "Link to this definition")
    
Use _N_ workers to compile the files within the given directory. If `0` is used, then the result of [`os.process_cpu_count()`](https://docs.python.org/3/library/os.html#os.process_cpu_count "os.process_cpu_count") will be used. 

--invalidation-mode [timestamp|checked-hash|unchecked-hash][¶](https://docs.python.org/3/library/compileall.html#cmdoption-compileall-invalidation-mode "Link to this definition")
    
Control how the generated byte-code files are invalidated at runtime. The `timestamp` value, means that `.pyc` files with the source timestamp and size embedded will be generated. The `checked-hash` and `unchecked-hash` values cause hash-based pycs to be generated. Hash-based pycs embed a hash of the source file contents rather than a timestamp. See [Cached bytecode invalidation](https://docs.python.org/3/reference/import.html#pyc-invalidation) for more information on how Python validates bytecode cache files at runtime. The default is `timestamp` if the `SOURCE_DATE_EPOCH` environment variable is not set, and `checked-hash` if the `SOURCE_DATE_EPOCH` environment variable is set. 

-o level[¶](https://docs.python.org/3/library/compileall.html#cmdoption-compileall-o "Link to this definition")
    
Compile with the given optimization level. May be used multiple times to compile for multiple levels at a time (for example, `compileall -o 1 -o 2`). 

-e dir[¶](https://docs.python.org/3/library/compileall.html#cmdoption-compileall-e "Link to this definition")
    
Ignore symlinks pointing outside the given directory.