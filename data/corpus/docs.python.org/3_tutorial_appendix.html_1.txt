Title: Appendix: Interactive Mode
URL: https://docs.python.org/3/tutorial/appendix.html
Summary: This section discusses two versions of the interactive REPL in Python: the classic basic interpreter and a more advanced interactive shell available on Windows and Unix-like systems. The latter supports features like color display, multiline editing, history browsing, and additional functionalities through function keys.
---

# 16. Appendix[¶](https://docs.python.org/3/tutorial/appendix.html#appendix "Link to this heading")
## 16.1. Interactive Mode[¶](https://docs.python.org/3/tutorial/appendix.html#interactive-mode "Link to this heading")
There are two variants of the interactive [REPL](https://docs.python.org/3/glossary.html#term-REPL). The classic basic interpreter is supported on all platforms with minimal line control capabilities.
On Windows, or Unix-like systems with [`curses`](https://docs.python.org/3/library/curses.html#module-curses "curses: An interface to the curses library, providing portable terminal handling. \(Unix\)") support, a new interactive shell is used by default. This one supports color, multiline editing, history browsing, and paste mode. To disable color, see [Controlling color](https://docs.python.org/3/using/cmdline.html#using-on-controlling-color) for details. Function keys provide some additional functionality. `F1` enters the interactive help browser [`pydoc`](https://docs.python.org/3/library/pydoc.html#module-pydoc "pydoc: Documentation generator and online help system."). `F2` allows for browsing command-line history with neither output nor the [>>>](https://docs.python.org/3/glossary.html#term-0) and […](https://docs.python.org/3/glossary.html#term-...) prompts. `F3` enters “paste mode”, which makes pasting larger blocks of code easier. Press `F3` to return to the regular prompt.
When using the new interactive shell, exit the shell by typing `exit` or `quit`. Adding call parentheses after those commands is not required.
If the new interactive shell is not desired, it can be disabled via the [`PYTHON_BASIC_REPL`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHON_BASIC_REPL) environment variable.
### 16.1.1. Error Handling[¶](https://docs.python.org/3/tutorial/appendix.html#error-handling "Link to this heading")
When an error occurs, the interpreter prints an error message and a stack trace. In interactive mode, it then returns to the primary prompt; when input came from a file, it exits with a nonzero exit status after printing the stack trace. (Exceptions handled by an [`except`](https://docs.python.org/3/reference/compound_stmts.html#except) clause in a [`try`](https://docs.python.org/3/reference/compound_stmts.html#try) statement are not errors in this context.) Some errors are unconditionally fatal and cause an exit with a nonzero exit status; this applies to internal inconsistencies and some cases of running out of memory. All error messages are written to the standard error stream; normal output from executed commands is written to standard output.
Typing the interrupt character (usually `Control`-`C` or `Delete`) to the primary or secondary prompt cancels the input and returns to the primary prompt. [[1]](https://docs.python.org/3/tutorial/appendix.html#id2) Typing an interrupt while a command is executing raises the [`KeyboardInterrupt`](https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt "KeyboardInterrupt") exception, which may be handled by a [`try`](https://docs.python.org/3/reference/compound_stmts.html#try) statement.
### 16.1.2. Executable Python Scripts[¶](https://docs.python.org/3/tutorial/appendix.html#executable-python-scripts "Link to this heading")
On BSD’ish Unix systems, Python scripts can be made directly executable, like shell scripts, by putting the line
```
#!/usr/bin/env python3

```

(assuming that the interpreter is on the user’s `PATH`) at the beginning of the script and giving the file an executable mode. The `#!` must be the first two characters of the file. On some platforms, this first line must end with a Unix-style line ending (`'\n'`), not a Windows (`'\r\n'`) line ending. Note that the hash, or pound, character, `'#'`, is used to start a comment in Python.
The script can be given an executable mode, or permission, using the **chmod** command.
```
$ chmod+xmyscript.py