Title: test.support.os_helper Module Overview
URL: https://docs.python.org/3/library/test.html
Summary: This chunk covers functionalities within the `test.support.os_helper` module in Python, including the `FakePath` class, which mimics a path-like object, and the `EnvironmentVarGuard` class, which provides methods to temporarily set or unset environment variables.
---

_class_ test.support.os_helper.FakePath(_path_)[¶](https://docs.python.org/3/library/test.html#test.support.os_helper.FakePath "Link to this definition")
    
Simple [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). It implements the [`__fspath__()`](https://docs.python.org/3/library/os.html#os.PathLike.__fspath__ "os.PathLike.__fspath__") method which just returns the _path_ argument. If _path_ is an exception, it will be raised in `__fspath__()`. 

EnvironmentVarGuard.set(_envvar_ , _value_)[¶](https://docs.python.org/3/library/test.html#test.support.os_helper.EnvironmentVarGuard.set "Link to this definition")
    
Temporarily set the environment variable `envvar` to the value of `value`. 

EnvironmentVarGuard.unset(_envvar_)[¶](https://docs.python.org/3/library/test.html#test.support.os_helper.EnvironmentVarGuard.unset "Link to this definition")
    
Temporarily unset the environment variable `envvar`. 

test.support.os_helper.can_symlink()[¶](https://docs.python.org/3/library/test.html#test.support.os_helper.can_symlink "Link to this definition")
    
Return `True` if the OS supports symbolic links, `False` otherwise. 

test.support.os_helper.can_xattr()[¶](https://docs.python.org/3/library/test.html#test.support.os_helper.can_xattr "Link to this definition")
    
Return `True` if the OS supports xattr, `False` otherwise. 

test.support.os_helper.change_cwd(_path_ , _quiet =False_)[¶](https://docs.python.org/3/library/test.html#test.support.os_helper.change_cwd "Link to this definition")
    
A context manager that temporarily changes the current working directory to _path_ and yields the directory.
If _quiet_ is `False`, the context manager raises an exception on error. Otherwise, it issues only a warning and keeps the current working directory the same. 

test.support.os_helper.create_empty_file(_filename_)[¶](https://docs.python.org/3/library/test.html#test.support.os_helper.create_empty_file "Link to this definition")
    
Create an empty file with _filename_. If it already exists, truncate it. 

test.support.os_helper.fd_count()[¶](https://docs.python.org/3/library/test.html#test.support.os_helper.fd_count "Link to this definition")
    
Count the number of open file descriptors. 

test.support.os_helper.fs_is_case_insensitive(_directory_)[¶](https://docs.python.org/3/library/test.html#test.support.os_helper.fs_is_case_insensitive "Link to this definition")
    
Return `True` if the file system for _directory_ is case-insensitive. 

test.support.os_helper.make_bad_fd()[¶](https://docs.python.org/3/library/test.html#test.support.os_helper.make_bad_fd "Link to this definition")
    
Create an invalid file descriptor by opening and closing a temporary file, and returning its descriptor. 

test.support.os_helper.rmdir(_filename_)[¶](https://docs.python.org/3/library/test.html#test.support.os_helper.rmdir "Link to this definition")
    
Call [`os.rmdir()`](https://docs.python.org/3/library/os.html#os.rmdir "os.rmdir") on _filename_. On Windows platforms, this is wrapped with a wait loop that checks for the existence of the file, which is needed due to antivirus programs that can hold files open and prevent deletion. 

test.support.os_helper.rmtree(_path_)[¶](https://docs.python.org/3/library/test.html#test.support.os_helper.rmtree "Link to this definition")
    
Call [`shutil.rmtree()`](https://docs.python.org/3/library/shutil.html#shutil.rmtree "shutil.rmtree") on _path_ or call [`os.lstat()`](https://docs.python.org/3/library/os.html#os.lstat "os.lstat") and [`os.rmdir()`](https://docs.python.org/3/library/os.html#os.rmdir "os.rmdir") to remove a path and its contents. As with [`rmdir()`](https://docs.python.org/3/library/test.html#test.support.os_helper.rmdir "test.support.os_helper.rmdir"), on Windows platforms this is wrapped with a wait loop that checks for the existence of the files. 

@test.support.os_helper.skip_unless_symlink[¶](https://docs.python.org/3/library/test.html#test.support.os_helper.skip_unless_symlink "Link to this definition")
    
A decorator for running tests that require support for symbolic links. 

@test.support.os_helper.skip_unless_xattr[¶](https://docs.python.org/3/library/test.html#test.support.os_helper.skip_unless_xattr "Link to this definition")
    
A decorator for running tests that require support for xattr.