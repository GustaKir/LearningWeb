Title: Notable Changes in Python 3.8.1
URL: https://docs.python.org/3/whatsnew/3.8.html
Summary: Python 3.8.1 introduces a significant security update by removing support for the _reuse_address_ parameter in `asyncio.loop.create_datagram_endpoint()` due to security concerns related to the `SO_REUSEADDR` socket option in UDP.
---

```

The benchmarks were measured on an [Intel® Core™ i7-4960HQ processor](https://ark.intel.com/content/www/us/en/ark/products/76088/intel-core-i7-4960hq-processor-6m-cache-up-to-3-80-ghz.html) running the macOS 64-bit builds found at [python.org](https://www.python.org/downloads/macos/). The benchmark script displays timings in nanoseconds.
## Notable changes in Python 3.8.1[¶](https://docs.python.org/3/whatsnew/3.8.html#notable-changes-in-python-3-8-1 "Link to this heading")
Due to significant security concerns, the _reuse_address_ parameter of [`asyncio.loop.create_datagram_endpoint()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_datagram_endpoint "asyncio.loop.create_datagram_endpoint") is no longer supported. This is because of the behavior of the socket option `SO_REUSEADDR` in UDP. For more details, see the documentation for `loop.create_datagram_endpoint()`. (Contributed by Kyle Stanley, Antoine Pitrou, and Yury Selivanov in [bpo-37228](https://bugs.python.org/issue?@action=redirect&bpo=37228).)
## Notable changes in Python 3.8.2[¶](https://docs.python.org/3/whatsnew/3.8.html#notable-changes-in-python-3-8-2 "Link to this heading")
Fixed a regression with the `ignore` callback of [`shutil.copytree()`](https://docs.python.org/3/library/shutil.html#shutil.copytree "shutil.copytree"). The argument types are now str and List[str] again. (Contributed by Manuel Barkhau and Giampaolo Rodola in [gh-83571](https://github.com/python/cpython/issues/83571).)
## Notable changes in Python 3.8.3[¶](https://docs.python.org/3/whatsnew/3.8.html#notable-changes-in-python-3-8-3 "Link to this heading")
The constant values of future flags in the [`__future__`](https://docs.python.org/3/library/__future__.html#module-__future__ "__future__: Future statement definitions") module are updated in order to prevent collision with compiler flags. Previously `PyCF_ALLOW_TOP_LEVEL_AWAIT` was clashing with `CO_FUTURE_DIVISION`. (Contributed by Batuhan Taskaya in [gh-83743](https://github.com/python/cpython/issues/83743))
## Notable changes in Python 3.8.8[¶](https://docs.python.org/3/whatsnew/3.8.html#notable-changes-in-python-3-8-8 "Link to this heading")
Earlier Python versions allowed using both `;` and `&` as query parameter separators in [`urllib.parse.parse_qs()`](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.parse_qs "urllib.parse.parse_qs") and [`urllib.parse.parse_qsl()`](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.parse_qsl "urllib.parse.parse_qsl"). Due to security concerns, and to conform with newer W3C recommendations, this has been changed to allow only a single separator key, with `&` as the default. This change also affects `cgi.parse()` and `cgi.parse_multipart()` as they use the affected functions internally. For more details, please see their respective documentation. (Contributed by Adam Goldschmidt, Senthil Kumaran and Ken Jin in [bpo-42967](https://bugs.python.org/issue?@action=redirect&bpo=42967).)
## Notable changes in Python 3.8.9[¶](https://docs.python.org/3/whatsnew/3.8.html#notable-changes-in-python-3-8-9 "Link to this heading")
A security fix alters the [`ftplib.FTP`](https://docs.python.org/3/library/ftplib.html#ftplib.FTP "ftplib.FTP") behavior to not trust the IPv4 address sent from the remote server when setting up a passive data channel. We reuse the ftp server IP address instead. For unusual code requiring the old behavior, set a `trust_server_pasv_ipv4_address` attribute on your FTP instance to `True`. (See [gh-87451](https://github.com/python/cpython/issues/87451))
## Notable changes in Python 3.8.10[¶](https://docs.python.org/3/whatsnew/3.8.html#notable-changes-in-python-3-8-10 "Link to this heading")
### macOS 11.0 (Big Sur) and Apple Silicon Mac support[¶](https://docs.python.org/3/whatsnew/3.8.html#macos-11-0-big-sur-and-apple-silicon-mac-support "Link to this heading")
As of 3.8.10, Python now supports building and running on macOS 11 (Big Sur) and on Apple Silicon Macs (based on the `ARM64` architecture). A new universal build variant, `universal2`, is now available to natively support both `ARM64` and `Intel 64` in one set of executables. Note that support for “weaklinking”, building binaries targeted for newer versions of macOS that will also run correctly on older versions by testing at runtime for missing features, is not included in this backport from Python 3.9; to support a range of macOS versions, continue to target for and build on the oldest version in the range.
(Originally contributed by Ronald Oussoren and Lawrence D’Anna in [gh-85272](https://github.com/python/cpython/issues/85272), with fixes by FX Coudert and Eli Rykoff, and backported to 3.8 by Maxime Bélanger and Ned Deily)
## Notable changes in Python 3.8.10[¶](https://docs.python.org/3/whatsnew/3.8.html#id1 "Link to this heading")
### urllib.parse[¶](https://docs.python.org/3/whatsnew/3.8.html#urllib-parse "Link to this heading")
The presence of ne