Title: SQLite3 Connection Methods Overview
URL: https://docs.python.org/3/library/sqlite3.html
Summary: This section describes methods for managing SQLite3 connections, including removing a collation function, aborting queries with interrupt(), and setting an authorizer callback for access control. It notes that starting from version 3.11, collation names can include any Unicode character.
---

```

Remove a collation function by setting _callable_ to `None`.
Changed in version 3.11: The collation name can contain any Unicode character. Earlier, only ASCII characters were allowed. 

interrupt()[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.interrupt "Link to this definition")
    
Call this method from a different thread to abort any queries that might be executing on the connection. Aborted queries will raise an [`OperationalError`](https://docs.python.org/3/library/sqlite3.html#sqlite3.OperationalError "sqlite3.OperationalError"). 

set_authorizer(_authorizer_callback_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.set_authorizer "Link to this definition")
    
Register [callable](https://docs.python.org/3/glossary.html#term-callable) _authorizer_callback_ to be invoked for each attempt to access a column of a table in the database. The callback should return one of [`SQLITE_OK`](https://docs.python.org/3/library/sqlite3.html#sqlite3.SQLITE_OK "sqlite3.SQLITE_OK"), [`SQLITE_DENY`](https://docs.python.org/3/library/sqlite3.html#sqlite3.SQLITE_DENY "sqlite3.SQLITE_DENY"), or [`SQLITE_IGNORE`](https://docs.python.org/3/library/sqlite3.html#sqlite3.SQLITE_IGNORE "sqlite3.SQLITE_IGNORE") to signal how access to the column should be handled by the underlying SQLite library.
The first argument to the callback signifies what kind of operation is to be authorized. The second and third argument will be arguments or `None` depending on the first argument. The 4th argument is the name of the database (“main”, “temp”, etc.) if applicable. The 5th argument is the name of the inner-most trigger or view that is responsible for the access attempt or `None` if this access attempt is directly from input SQL code.
Please consult the SQLite documentation about the possible values for the first argument and the meaning of the second and third argument depending on the first one. All necessary constants are available in the `sqlite3` module.
Passing `None` as _authorizer_callback_ will disable the authorizer.
Changed in version 3.11: Added support for disabling the authorizer using `None`.
Changed in version 3.13: Passing _authorizer_callback_ as a keyword argument is deprecated. The parameter will become positional-only in Python 3.15. 

set_progress_handler(_progress_handler_ , _n_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.set_progress_handler "Link to this definition")
    
Register [callable](https://docs.python.org/3/glossary.html#term-callable) _progress_handler_ to be invoked for every _n_ instructions of the SQLite virtual machine. This is useful if you want to get called from SQLite during long-running operations, for example to update a GUI.
If you want to clear any previously installed progress handler, call the method with `None` for _progress_handler_.
Returning a non-zero value from the handler function will terminate the currently executing query and cause it to raise a [`DatabaseError`](https://docs.python.org/3/library/sqlite3.html#sqlite3.DatabaseError "sqlite3.DatabaseError") exception.
Changed in version 3.13: Passing _progress_handler_ as a keyword argument is deprecated. The parameter will become positional-only in Python 3.15. 

set_trace_callback(_trace_callback_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.set_trace_callback "Link to this definition")
    
Register [callable](https://docs.python.org/3/glossary.html#term-callable) _trace_callback_ to be invoked for each SQL statement that is actually executed by the SQLite backend.
The only argument passed to the callback is the statement (as [`str`](https://docs.python.org/3/library/stdtypes.html#str "str")) that is being executed. The return value of the callback is ignored. Note that the backend does not only run statements passed to the [`Cursor.execute()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute "sqlite3.Cursor.execute") methods. Other sources include the [transaction management](https://docs.python.org/3/library/sqlite3.html#sqlite3-controlling-transactions) of the `sqlite3` module and the execution of triggers defined in the current database.
Passing `None` as _trace_callback_ will disable the trace callback.
Note
Exceptions raised in the trace callback are not propagated. As a development and debugging aid, use [`enable_callback_tracebacks()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.enable_callback_tracebacks "sqlite3.enable_callback_tracebacks") to enable printing tracebacks from exceptions raised in the trace callback.
Added in version 3.3.
Changed in version 3.13: Passing _trace_callback_ as a keyword argument is deprecated. The parameter will become positional-only in Python 3.15.