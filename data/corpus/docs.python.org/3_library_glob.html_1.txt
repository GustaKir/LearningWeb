Title: glob.glob Function in Python
URL: https://docs.python.org/3/library/glob.html
Summary: The glob.glob function returns a list of path names matching the specified pathname, which can include shell-style wildcards. The pathname can be absolute or relative, and broken symlinks are included. The sorting of results is dependent on the file system, and the function also accepts optional parameters such as root_dir for specifying the search root.
---

glob.glob(_pathname_ , _*_ , _root_dir =None_, _dir_fd =None_, _recursive =False_, _include_hidden =False_)[¶](https://docs.python.org/3/library/glob.html#glob.glob "Link to this definition")
    
Return a possibly empty list of path names that match _pathname_ , which must be a string containing a path specification. _pathname_ can be either absolute (like `/usr/src/Python-1.5/Makefile`) or relative (like `../../Tools/*/*.gif`), and can contain shell-style wildcards. Broken symlinks are included in the results (as in the shell). Whether or not the results are sorted depends on the file system. If a file that satisfies conditions is removed or added during the call of this function, whether a path name for that file will be included is unspecified.
If _root_dir_ is not `None`, it should be a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object) specifying the root directory for searching. It has the same effect on [`glob()`](https://docs.python.org/3/library/glob.html#module-glob "glob: Unix shell style pathname pattern expansion.") as changing the current directory before calling it. If _pathname_ is relative, the result will contain paths relative to _root_dir_.
This function can support [paths relative to directory descriptors](https://docs.python.org/3/library/os.html#dir-fd) with the _dir_fd_ parameter.
If _recursive_ is true, the pattern “`**`” will match any files and zero or more directories, subdirectories and symbolic links to directories. If the pattern is followed by an [`os.sep`](https://docs.python.org/3/library/os.html#os.sep "os.sep") or [`os.altsep`](https://docs.python.org/3/library/os.html#os.altsep "os.altsep") then files will not match.
If _include_hidden_ is true, “`**`” pattern will match hidden directories.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `glob.glob` with arguments `pathname`, `recursive`.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `glob.glob/2` with arguments `pathname`, `recursive`, `root_dir`, `dir_fd`.
Note
Using the “`**`” pattern in large directory trees may consume an inordinate amount of time.
Note
This function may return duplicate path names if _pathname_ contains multiple “`**`” patterns and _recursive_ is true.
Changed in version 3.5: Support for recursive globs using “`**`”.
Changed in version 3.10: Added the _root_dir_ and _dir_fd_ parameters.
Changed in version 3.11: Added the _include_hidden_ parameter. 

glob.iglob(_pathname_ , _*_ , _root_dir =None_, _dir_fd =None_, _recursive =False_, _include_hidden =False_)[¶](https://docs.python.org/3/library/glob.html#glob.iglob "Link to this definition")
    
Return an [iterator](https://docs.python.org/3/glossary.html#term-iterator) which yields the same values as [`glob()`](https://docs.python.org/3/library/glob.html#module-glob "glob: Unix shell style pathname pattern expansion.") without actually storing them all simultaneously.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `glob.glob` with arguments `pathname`, `recursive`.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `glob.glob/2` with arguments `pathname`, `recursive`, `root_dir`, `dir_fd`.
Note
This function may return duplicate path names if _pathname_ contains multiple “`**`” patterns and _recursive_ is true.
Changed in version 3.5: Support for recursive globs using “`**`”.
Changed in version 3.10: Added the _root_dir_ and _dir_fd_ parameters.
Changed in version 3.11: Added the _include_hidden_ parameter. 

glob.escape(_pathname_)[¶](https://docs.python.org/3/library/glob.html#glob.escape "Link to this definition")
    
Escape all special characters (`'?'`, `'*'` and `'['`). This is useful if you want to match an arbitrary literal string that may have special characters in it. Special characters in drive/UNC sharepoints are not escaped, e.g. on Windows `escape('//?/c:/Quo vadis?.txt')` returns `'//?/c:/Quo vadis[?].txt'`.
Added in version 3.4. 

glob.translate(_pathname_ , _*_ , _recursive =False_, _include_hidden =False_, _seps =None_)[¶](https://docs.python.org/3/library/glob.html#glob.translate "Link to this definition")
    
Convert the given path specification to a regular expression for use with [`re.match()`](https://docs.python.org/3/library/re.html#re.match "re.match"). The path specification can contain shell-style wildcards.
For example:
>>>```
>>> importglob,re
>>>
>>> regex = glob.translate('**/*.txt', recursive=True, include_hidden=True)
>>> regex
'(?s:(?:.+/)?[^/]*\\.txt)\\Z'
>>> reobj = re.compile(regex)
>>> reobj.match('foo/bar/baz.txt')
<re.Match object; span=(0, 15), match='foo/bar/baz.txt'>