Title: Porting to Python 3.13
URL: https://docs.python.org/3/whatsnew/3.13.html
Summary: This section details changes and bugfixes in Python 3.13 that may affect code when porting. It highlights changes in the Python API, particularly those introduced by PEP 667, which modifies how `locals()` and `f_locals` behave, specifically in optimized scopes.
---

## Porting to Python 3.13[¶](https://docs.python.org/3/whatsnew/3.13.html#porting-to-python-3-13 "Link to this heading")
This section lists previously described changes and other bugfixes that may require changes to your code.
### Changes in the Python API[¶](https://docs.python.org/3/whatsnew/3.13.html#changes-in-the-python-api "Link to this heading")
  * [PEP 667](https://docs.python.org/3/whatsnew/3.13.html#whatsnew313-locals-semantics) introduces several changes to the semantics of [`locals()`](https://docs.python.org/3/library/functions.html#locals "locals") and [`f_locals`](https://docs.python.org/3/reference/datamodel.html#frame.f_locals "frame.f_locals"):
    * Calling [`locals()`](https://docs.python.org/3/library/functions.html#locals "locals") in an [optimized scope](https://docs.python.org/3/glossary.html#term-optimized-scope) now produces an independent snapshot on each call, and hence no longer implicitly updates previously returned references. Obtaining the legacy CPython behavior now requires explicit calls to update the initially returned dictionary with the results of subsequent calls to `locals()`. Code execution functions that implicitly target `locals()` (such as `exec` and `eval`) must be passed an explicit namespace to access their results in an optimized scope. (Changed as part of [**PEP 667**](https://peps.python.org/pep-0667/).)
    * Calling [`locals()`](https://docs.python.org/3/library/functions.html#locals "locals") from a comprehension at module or class scope (including via `exec` or `eval`) once more behaves as if the comprehension were running as an independent nested function (i.e. the local variables from the containing scope are not included). In Python 3.12, this had changed to include the local variables from the containing scope when implementing [**PEP 709**](https://peps.python.org/pep-0709/). (Changed as part of [**PEP 667**](https://peps.python.org/pep-0667/).)
    * Accessing [`FrameType.f_locals`](https://docs.python.org/3/reference/datamodel.html#frame.f_locals "frame.f_locals") in an [optimized scope](https://docs.python.org/3/glossary.html#term-optimized-scope) now returns a write-through proxy rather than a snapshot that gets updated at ill-specified times. If a snapshot is desired, it must be created explicitly with `dict` or the proxy’s `.copy()` method. (Changed as part of [**PEP 667**](https://peps.python.org/pep-0667/).)
  * [`functools.partial`](https://docs.python.org/3/library/functools.html#functools.partial "functools.partial") now emits a [`FutureWarning`](https://docs.python.org/3/library/exceptions.html#FutureWarning "FutureWarning") when used as a method. The behavior will change in future Python versions. Wrap it in [`staticmethod()`](https://docs.python.org/3/library/functions.html#staticmethod "staticmethod") if you want to preserve the old behavior. (Contributed by Serhiy Storchaka in [gh-121027](https://github.com/python/cpython/issues/121027).)
  * An [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") is now raised by [`getpass.getuser()`](https://docs.python.org/3/library/getpass.html#getpass.getuser "getpass.getuser") for any failure to retrieve a username, instead of [`ImportError`](https://docs.python.org/3/library/exceptions.html#ImportError "ImportError") on non-Unix platforms or [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError") on Unix platforms where the password database is empty.
  * The value of the `mode` attribute of [`gzip.GzipFile`](https://docs.python.org/3/library/gzip.html#gzip.GzipFile "gzip.GzipFile") is now a string (`'rb'` or `'wb'`) instead of an integer (`1` or `2`). The value of the `mode` attribute of the readable file-like object returned by [`zipfile.ZipFile.open()`](https://docs.python.org/3/library/zipfile.html#zipfile.ZipFile.open "zipfile.ZipFile.open") is now `'rb'` instead of `'r'`. (Contributed by Serhiy Storchaka in [gh-115961](https://github.com/python/cpython/issues/115961).)
  * [`mailbox.Maildir`](https://docs.python.org/3/library/mailbox.html#mailbox.Maildir "mailbox.Maildir") now ignores files with a leading dot (`.`). (Contributed by Zackery Spytz in [gh-65559](https://github.com/python/cpython/issues/65559).)
  * [`pathlib.Path.glob()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.glob "pathlib.Path.glob") and [`rglob()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.rglob "pathlib.Path.rglob") now return both files and directories if a pattern that ends with “`**`” is given, rather than directories only. Add a trailing slash to keep the previous behavior and only match directories.
  * The [`threading`](https://docs.python.org/3/library/threading.html#module-threading "threading: Thread-based parallelism.") module now expects the `_thread` module to have an `_is_main_interpreter()` function. This function takes no arguments and returns `True` if the current interpreter is the main interpreter.
Any lib