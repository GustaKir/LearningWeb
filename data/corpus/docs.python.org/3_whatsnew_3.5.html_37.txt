Title: Python 3.5 Documentation Updates
URL: https://docs.python.org/3/whatsnew/3.5.html
Summary: In Python 3.5, inherited documentation strings no longer need duplication; an empty string can suppress inherited documentation. This change impacts the output of the pydoc module and the help() function. Additionally, nested functools.partial() calls now flatten automatically, affecting behavior for users relying on previous nested functionality.
---

Documentation strings no longer need to be duplicated if the inherited documentation is appropriate. To suppress an inherited string, an empty string must be specified (or the documentation may be filled in). This change affects the output of the [`pydoc`](https://docs.python.org/3/library/pydoc.html#module-pydoc "pydoc: Documentation generator and online help system.") module and the [`help()`](https://docs.python.org/3/library/functions.html#help "help") function. (Contributed by Serhiy Storchaka in [bpo-15582](https://bugs.python.org/issue?@action=redirect&bpo=15582).)
  * Nested [`functools.partial()`](https://docs.python.org/3/library/functools.html#functools.partial "functools.partial") calls are now flattened. If you were relying on the previous behavior, you can now either add an attribute to a [`functools.partial()`](https://docs.python.org/3/library/functools.html#functools.partial "functools.partial") object or you can create a subclass of [`functools.partial()`](https://docs.python.org/3/library/functools.html#functools.partial "functools.partial"). (Contributed by Alexander Belopolsky in [bpo-7830](https://bugs.python.org/issue?@action=redirect&bpo=7830).)


### Changes in the C API[Â¶](https://docs.python.org/3/whatsnew/3.5.html#changes-in-the-c-api "Link to this heading")
  * The undocumented `format` member of the (non-public) `PyMemoryViewObject` structure has been removed. All extensions relying on the relevant parts in `memoryobject.h` must be rebuilt.
  * The `PyMemAllocator` structure was renamed to [`PyMemAllocatorEx`](https://docs.python.org/3/c-api/memory.html#c.PyMemAllocatorEx "PyMemAllocatorEx") and a new `calloc` field was added.
  * Removed non-documented macro `PyObject_REPR()` which leaked references. Use format character `%R` in [`PyUnicode_FromFormat()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FromFormat "PyUnicode_FromFormat")-like functions to format the [`repr()`](https://docs.python.org/3/library/functions.html#repr "repr") of the object. (Contributed by Serhiy Storchaka in [bpo-22453](https://bugs.python.org/issue?@action=redirect&bpo=22453).)
  * Because the lack of the [`__module__`](https://docs.python.org/3/reference/datamodel.html#type.__module__ "type.__module__") attribute breaks pickling and introspection, a deprecation warning is now raised for builtin types without the [`__module__`](https://docs.python.org/3/reference/datamodel.html#type.__module__ "type.__module__") attribute. This will be an [`AttributeError`](https://docs.python.org/3/library/exceptions.html#AttributeError "AttributeError") in the future. (Contributed by Serhiy Storchaka in [bpo-20204](https://bugs.python.org/issue?@action=redirect&bpo=20204).)
  * As part of the [**PEP 492**](https://peps.python.org/pep-0492/) implementation, the `tp_reserved` slot of [`PyTypeObject`](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject") was replaced with a [`tp_as_async`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_as_async "PyTypeObject.tp_as_async") slot. Refer to [Coroutine Objects](https://docs.python.org/3/c-api/coro.html#coro-objects) for new types, structures and functions.