Title: base64.b32decode Function
URL: https://docs.python.org/3/library/base64.html
Summary: The base64.b32decode function decodes a Base32 encoded bytes-like object or ASCII string. It includes optional parameters for case sensitivity and digit mapping for security compliance, adhering to RFC 4648 standards.
---

base64.b32decode(_s_ , _casefold =False_, _map01 =None_)[¶](https://docs.python.org/3/library/base64.html#base64.b32decode "Link to this definition")
    
Decode the Base32 encoded [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object) or ASCII string _s_ and return the decoded [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes").
Optional _casefold_ is a flag specifying whether a lowercase alphabet is acceptable as input. For security purposes, the default is `False`.
[**RFC 4648**](https://datatracker.ietf.org/doc/html/rfc4648.html) allows for optional mapping of the digit 0 (zero) to the letter O (oh), and for optional mapping of the digit 1 (one) to either the letter I (eye) or letter L (el). The optional argument _map01_ when not `None`, specifies which letter the digit 1 should be mapped to (when _map01_ is not `None`, the digit 0 is always mapped to the letter O). For security purposes the default is `None`, so that 0 and 1 are not allowed in the input.
A [`binascii.Error`](https://docs.python.org/3/library/binascii.html#binascii.Error "binascii.Error") is raised if _s_ is incorrectly padded or if there are non-alphabet characters present in the input. 

base64.b32hexencode(_s_)[¶](https://docs.python.org/3/library/base64.html#base64.b32hexencode "Link to this definition")
    
Similar to [`b32encode()`](https://docs.python.org/3/library/base64.html#base64.b32encode "base64.b32encode") but uses the Extended Hex Alphabet, as defined in [**RFC 4648**](https://datatracker.ietf.org/doc/html/rfc4648.html).
Added in version 3.10. 

base64.b32hexdecode(_s_ , _casefold =False_)[¶](https://docs.python.org/3/library/base64.html#base64.b32hexdecode "Link to this definition")
    
Similar to [`b32decode()`](https://docs.python.org/3/library/base64.html#base64.b32decode "base64.b32decode") but uses the Extended Hex Alphabet, as defined in [**RFC 4648**](https://datatracker.ietf.org/doc/html/rfc4648.html).
This version does not allow the digit 0 (zero) to the letter O (oh) and digit 1 (one) to either the letter I (eye) or letter L (el) mappings, all these characters are included in the Extended Hex Alphabet and are not interchangeable.
Added in version 3.10. 

base64.b16encode(_s_)[¶](https://docs.python.org/3/library/base64.html#base64.b16encode "Link to this definition")
    
Encode the [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object) _s_ using Base16 and return the encoded [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes"). 

base64.b16decode(_s_ , _casefold =False_)[¶](https://docs.python.org/3/library/base64.html#base64.b16decode "Link to this definition")
    
Decode the Base16 encoded [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object) or ASCII string _s_ and return the decoded [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes").
Optional _casefold_ is a flag specifying whether a lowercase alphabet is acceptable as input. For security purposes, the default is `False`.
A [`binascii.Error`](https://docs.python.org/3/library/binascii.html#binascii.Error "binascii.Error") is raised if _s_ is incorrectly padded or if there are non-alphabet characters present in the input. 

base64.a85encode(_b_ , _*_ , _foldspaces =False_, _wrapcol =0_, _pad =False_, _adobe =False_)[¶](https://docs.python.org/3/library/base64.html#base64.a85encode "Link to this definition")
    
Encode the [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object) _b_ using Ascii85 and return the encoded [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes").
_foldspaces_ is an optional flag that uses the special short sequence ‘y’ instead of 4 consecutive spaces (ASCII 0x20) as supported by ‘btoa’. This feature is not supported by the “standard” Ascii85 encoding.
_wrapcol_ controls whether the output should have newline (`b'\n'`) characters added to it. If this is non-zero, each output line will be at most this many characters long, excluding the trailing newline.
_pad_ controls whether the input is padded to a multiple of 4 before encoding. Note that the `btoa` implementation always pads.
_adobe_ controls whether the encoded byte sequence is framed with `<~` and `~>`, which is used by the Adobe implementation.
Added in version 3.4.