Title: File Descriptor and Handle Inheritance in OS Module
URL: https://docs.python.org/3/library/os.html
Summary: This section covers functions for managing the inheritable flag of file descriptors and handles in Python's os module, including getting and setting these flags for both file descriptors and Windows handles.
---

os.get_inheritable(_fd_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.get_inheritable "Link to this definition")
    
Get the “inheritable” flag of the specified file descriptor (a boolean). 

os.set_inheritable(_fd_ , _inheritable_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.set_inheritable "Link to this definition")
    
Set the “inheritable” flag of the specified file descriptor. 

os.get_handle_inheritable(_handle_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.get_handle_inheritable "Link to this definition")
    
Get the “inheritable” flag of the specified handle (a boolean).
[Availability](https://docs.python.org/3/library/intro.html#availability): Windows. 

os.set_handle_inheritable(_handle_ , _inheritable_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.set_handle_inheritable "Link to this definition")
    
Set the “inheritable” flag of the specified handle.
[Availability](https://docs.python.org/3/library/intro.html#availability): Windows.
## Files and Directories[¶](https://docs.python.org/3/library/os.html#files-and-directories "Link to this heading")
On some Unix platforms, many of these functions support one or more of these features:
  * **specifying a file descriptor:** Normally the _path_ argument provided to functions in the [`os`](https://docs.python.org/3/library/os.html#module-os "os: Miscellaneous operating system interfaces.") module must be a string specifying a file path. However, some functions now alternatively accept an open file descriptor for their _path_ argument. The function will then operate on the file referred to by the descriptor. (For POSIX systems, Python will call the variant of the function prefixed with `f` (e.g. call `fchdir` instead of `chdir`).)
You can check whether or not _path_ can be specified as a file descriptor for a particular function on your platform using [`os.supports_fd`](https://docs.python.org/3/library/os.html#os.supports_fd "os.supports_fd"). If this functionality is unavailable, using it will raise a [`NotImplementedError`](https://docs.python.org/3/library/exceptions.html#NotImplementedError "NotImplementedError").
If the function also supports _dir_fd_ or _follow_symlinks_ arguments, it’s an error to specify one of those when supplying _path_ as a file descriptor.


  * **paths relative to directory descriptors:** If _dir_fd_ is not `None`, it should be a file descriptor referring to a directory, and the path to operate on should be relative; path will then be relative to that directory. If the path is absolute, _dir_fd_ is ignored. (For POSIX systems, Python will call the variant of the function with an `at` suffix and possibly prefixed with `f` (e.g. call `faccessat` instead of `access`).
You can check whether or not _dir_fd_ is supported for a particular function on your platform using [`os.supports_dir_fd`](https://docs.python.org/3/library/os.html#os.supports_dir_fd "os.supports_dir_fd"). If it’s unavailable, using it will raise a [`NotImplementedError`](https://docs.python.org/3/library/exceptions.html#NotImplementedError "NotImplementedError").


  * **not following symlinks:** If _follow_symlinks_ is `False`, and the last element of the path to operate on is a symbolic link, the function will operate on the symbolic link itself rather than the file pointed to by the link. (For POSIX systems, Python will call the `l...` variant of the function.)
You can check whether or not _follow_symlinks_ is supported for a particular function on your platform using [`os.supports_follow_symlinks`](https://docs.python.org/3/library/os.html#os.supports_follow_symlinks "os.supports_follow_symlinks"). If it’s unavailable, using it will raise a [`NotImplementedError`](https://docs.python.org/3/library/exceptions.html#NotImplementedError "NotImplementedError").