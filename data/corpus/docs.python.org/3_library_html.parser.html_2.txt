Title: HTMLParser.handle_startendtag Method
URL: https://docs.python.org/3/library/html.parser.html
Summary: The `handle_startendtag()` method in the HTMLParser class is used to handle XHTML-style empty tags, such as `<img ... />`. It can be overridden by subclasses for specific needs and defaults to calling `handle_starttag()` and `handle_endtag()` methods.
---

HTMLParser.handle_startendtag(_tag_ , _attrs_)[¶](https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.handle_startendtag "Link to this definition")
    
Similar to [`handle_starttag()`](https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.handle_starttag "html.parser.HTMLParser.handle_starttag"), but called when the parser encounters an XHTML-style empty tag (`<img ... />`). This method may be overridden by subclasses which require this particular lexical information; the default implementation simply calls [`handle_starttag()`](https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.handle_starttag "html.parser.HTMLParser.handle_starttag") and [`handle_endtag()`](https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.handle_endtag "html.parser.HTMLParser.handle_endtag"). 

HTMLParser.handle_data(_data_)[¶](https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.handle_data "Link to this definition")
    
This method is called to process arbitrary data (e.g. text nodes and the content of `<script>...</script>` and `<style>...</style>`). 

HTMLParser.handle_entityref(_name_)[¶](https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.handle_entityref "Link to this definition")
    
This method is called to process a named character reference of the form `&name;` (e.g. `&gt;`), where _name_ is a general entity reference (e.g. `'gt'`). This method is never called if _convert_charrefs_ is `True`. 

HTMLParser.handle_charref(_name_)[¶](https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.handle_charref "Link to this definition")
    
This method is called to process decimal and hexadecimal numeric character references of the form `&#_NNN_;`and`&#x _NNN_;`. For example, the decimal equivalent for`&gt;` is `&#62;`, whereas the hexadecimal is `&#x3E;`; in this case the method will receive `'62'` or `'x3E'`. This method is never called if _convert_charrefs_ is `True`. 

HTMLParser.handle_comment(_data_)[¶](https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.handle_comment "Link to this definition")
    
This method is called when a comment is encountered (e.g. `<!--comment-->`).
For example, the comment `<!-- comment -->` will cause this method to be called with the argument `' comment '`.
The content of Internet Explorer conditional comments (condcoms) will also be sent to this method, so, for `<!--[if IE 9]>IE9-specific content<![endif]-->`, this method will receive `'[if IE 9]>IE9-specific content<![endif]'`. 

HTMLParser.handle_decl(_decl_)[¶](https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.handle_decl "Link to this definition")
    
This method is called to handle an HTML doctype declaration (e.g. `<!DOCTYPE html>`).
The _decl_ parameter will be the entire contents of the declaration inside the `<!...>` markup (e.g. `'DOCTYPE html'`). 

HTMLParser.handle_pi(_data_)[¶](https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.handle_pi "Link to this definition")
    
Method called when a processing instruction is encountered. The _data_ parameter will contain the entire processing instruction. For example, for the processing instruction `<?proc color='red'>`, this method would be called as `handle_pi("proc color='red'")`. It is intended to be overridden by a derived class; the base class implementation does nothing.
Note
The [`HTMLParser`](https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser "html.parser.HTMLParser") class uses the SGML syntactic rules for processing instructions. An XHTML processing instruction using the trailing `'?'` will cause the `'?'` to be included in _data_. 

HTMLParser.unknown_decl(_data_)[¶](https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser.unknown_decl "Link to this definition")
    
This method is called when an unrecognized declaration is read by the parser.
The _data_ parameter will be the entire contents of the declaration inside the `<![...]>` markup. It is sometimes useful to be overridden by a derived class. The base class implementation does nothing.
## Examples[¶](https://docs.python.org/3/library/html.parser.html#examples "Link to this heading")
The following class implements a parser that will be used to illustrate more examples: