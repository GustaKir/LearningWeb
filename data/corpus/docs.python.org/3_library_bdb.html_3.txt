Title: dispatch_exception Method in bdb
URL: https://docs.python.org/3/library/bdb.html
Summary: The `dispatch_exception` method determines if the debugger should stop at an exception. It calls the overridden `user_exception()` method in subclasses if stopping is warranted and raises a `BdbQuit` exception if the quitting flag is set. This method returns a reference to `trace_dispatch()` for further tracing.
---

dispatch_exception(_frame_ , _arg_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.dispatch_exception "Link to this definition")
    
If the debugger should stop at this exception, invokes the [`user_exception()`](https://docs.python.org/3/library/bdb.html#bdb.Bdb.user_exception "bdb.Bdb.user_exception") method (which should be overridden in subclasses). Raise a [`BdbQuit`](https://docs.python.org/3/library/bdb.html#bdb.BdbQuit "bdb.BdbQuit") exception if the [`quitting`](https://docs.python.org/3/library/bdb.html#bdb.Bdb.set_quit "bdb.Bdb.set_quit") flag is set (which can be set from [`user_exception()`](https://docs.python.org/3/library/bdb.html#bdb.Bdb.user_exception "bdb.Bdb.user_exception")). Return a reference to the [`trace_dispatch()`](https://docs.python.org/3/library/bdb.html#bdb.Bdb.trace_dispatch "bdb.Bdb.trace_dispatch") method for further tracing in that scope.
Normally derived classes don’t override the following methods, but they may if they want to redefine the definition of stopping and breakpoints. 

is_skipped_line(_module_name_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.is_skipped_line "Link to this definition")
    
Return `True` if _module_name_ matches any skip pattern. 

stop_here(_frame_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.stop_here "Link to this definition")
    
Return `True` if _frame_ is below the starting frame in the stack. 

break_here(_frame_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.break_here "Link to this definition")
    
Return `True` if there is an effective breakpoint for this line.
Check whether a line or function breakpoint exists and is in effect. Delete temporary breakpoints based on information from [`effective()`](https://docs.python.org/3/library/bdb.html#bdb.effective "bdb.effective"). 

break_anywhere(_frame_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.break_anywhere "Link to this definition")
    
Return `True` if any breakpoint exists for _frame_ ’s filename.
Derived classes should override these methods to gain control over debugger operation. 

user_call(_frame_ , _argument_list_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.user_call "Link to this definition")
    
Called from [`dispatch_call()`](https://docs.python.org/3/library/bdb.html#bdb.Bdb.dispatch_call "bdb.Bdb.dispatch_call") if a break might stop inside the called function.
_argument_list_ is not used anymore and will always be `None`. The argument is kept for backwards compatibility. 

user_line(_frame_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.user_line "Link to this definition")
    
Called from [`dispatch_line()`](https://docs.python.org/3/library/bdb.html#bdb.Bdb.dispatch_line "bdb.Bdb.dispatch_line") when either [`stop_here()`](https://docs.python.org/3/library/bdb.html#bdb.Bdb.stop_here "bdb.Bdb.stop_here") or [`break_here()`](https://docs.python.org/3/library/bdb.html#bdb.Bdb.break_here "bdb.Bdb.break_here") returns `True`. 

user_return(_frame_ , _return_value_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.user_return "Link to this definition")
    
Called from [`dispatch_return()`](https://docs.python.org/3/library/bdb.html#bdb.Bdb.dispatch_return "bdb.Bdb.dispatch_return") when [`stop_here()`](https://docs.python.org/3/library/bdb.html#bdb.Bdb.stop_here "bdb.Bdb.stop_here") returns `True`. 

user_exception(_frame_ , _exc_info_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.user_exception "Link to this definition")
    
Called from [`dispatch_exception()`](https://docs.python.org/3/library/bdb.html#bdb.Bdb.dispatch_exception "bdb.Bdb.dispatch_exception") when [`stop_here()`](https://docs.python.org/3/library/bdb.html#bdb.Bdb.stop_here "bdb.Bdb.stop_here") returns `True`. 

do_clear(_arg_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.do_clear "Link to this definition")
    
Handle how a breakpoint must be removed when it is a temporary one.
This method must be implemented by derived classes.
Derived classes and clients can call the following methods to affect the stepping state. 

set_step()[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.set_step "Link to this definition")
    
Stop after one line of code. 

set_next(_frame_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.set_next "Link to this definition")
    
Stop on the next line in or below the given frame. 

set_return(_frame_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.set_return "Link to this definition")
    
Stop when returning from the given frame. 

set_until(_frame_ , _lineno =None_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.set_until "Link to this definition")
    
Stop when the line with the _lineno_ greater than the current one is reached or when returning from current frame.