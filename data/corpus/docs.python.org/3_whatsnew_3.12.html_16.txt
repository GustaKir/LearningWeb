Title: Performance Improvements for isinstance() in Python 3.12
URL: https://docs.python.org/3/whatsnew/3.12.html
Summary: Python 3.12 introduces significant performance enhancements for `isinstance()` checks against runtime-checkable protocols, improving speed by at least 2x, and up to 20x for some cases. However, checks against protocols with many members may perform slower than in Python 3.11.
---

```

This change was made in order to speed up `isinstance()` checks against runtime-checkable protocols.
  * The performance profile of [`isinstance()`](https://docs.python.org/3/library/functions.html#isinstance "isinstance") checks against [`runtime-checkable protocols`](https://docs.python.org/3/library/typing.html#typing.runtime_checkable "typing.runtime_checkable") has changed significantly. Most `isinstance()` checks against protocols with only a few members should be at least 2x faster than in 3.11, and some may be 20x faster or more. However, `isinstance()` checks against protocols with many members may be slower than in Python 3.11. (Contributed by Alex Waygood in [gh-74690](https://github.com/python/cpython/issues/74690) and [gh-103193](https://github.com/python/cpython/issues/103193).)
  * All [`typing.TypedDict`](https://docs.python.org/3/library/typing.html#typing.TypedDict "typing.TypedDict") and [`typing.NamedTuple`](https://docs.python.org/3/library/typing.html#typing.NamedTuple "typing.NamedTuple") classes now have the `__orig_bases__` attribute. (Contributed by Adrian Garcia Badaracco in [gh-103699](https://github.com/python/cpython/issues/103699).)
  * Add `frozen_default` parameter to [`typing.dataclass_transform()`](https://docs.python.org/3/library/typing.html#typing.dataclass_transform "typing.dataclass_transform"). (Contributed by Erik De Bonte in [gh-99957](https://github.com/python/cpython/issues/99957).)


### unicodedata[¶](https://docs.python.org/3/whatsnew/3.12.html#unicodedata "Link to this heading")
  * The Unicode database has been updated to version 15.0.0. (Contributed by Benjamin Peterson in [gh-96734](https://github.com/python/cpython/issues/96734)).


### unittest[¶](https://docs.python.org/3/whatsnew/3.12.html#unittest "Link to this heading")
Add a `--durations` command line option, showing the N slowest test cases:
```
python3 -m unittest --durations=3 lib.tests.test_threading
.....
Slowest test durations
----------------------------------------------------------------------
1.210s   test_timeout (Lib.test.test_threading.BarrierTests)
1.003s   test_default_timeout (Lib.test.test_threading.BarrierTests)
0.518s   test_timeout (Lib.test.test_threading.EventTests)
(0.000 durations hidden. Use -v to show these durations.)
----------------------------------------------------------------------
Ran 158 tests in 9.869s
OK (skipped=3)