Title: SyntaxError and IndentationError in Python Exceptions
URL: https://docs.python.org/3/library/exceptions.html
Summary: This section describes the `end_offset` attribute for `SyntaxError`, indicating where an error occurs in a line, with specific notes about f-string errors. It also mentions enhancements made in Python 3.10, including `end_lineno` and `end_offset`. Additionally, it introduces the `IndentationError`, which is a base class for errors related to incorrect indentation.
---

end_offset[¶](https://docs.python.org/3/library/exceptions.html#SyntaxError.end_offset "Link to this definition")
    
The column in the end line where the error occurred finishes. This is 1-indexed: the first character in the line has an `offset` of 1.
For errors in f-string fields, the message is prefixed by “f-string: ” and the offsets are offsets in a text constructed from the replacement expression. For example, compiling f’Bad {a b} field’ results in this args attribute: (‘f-string: …’, (‘’, 1, 2, ‘(a b)n’, 1, 5)).
Changed in version 3.10: Added the [`end_lineno`](https://docs.python.org/3/library/exceptions.html#SyntaxError.end_lineno "SyntaxError.end_lineno") and [`end_offset`](https://docs.python.org/3/library/exceptions.html#SyntaxError.end_offset "SyntaxError.end_offset") attributes. 

_exception_ IndentationError[¶](https://docs.python.org/3/library/exceptions.html#IndentationError "Link to this definition")
    
Base class for syntax errors related to incorrect indentation. This is a subclass of [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError"). 

_exception_ TabError[¶](https://docs.python.org/3/library/exceptions.html#TabError "Link to this definition")
    
Raised when indentation contains an inconsistent use of tabs and spaces. This is a subclass of [`IndentationError`](https://docs.python.org/3/library/exceptions.html#IndentationError "IndentationError"). 

_exception_ SystemError[¶](https://docs.python.org/3/library/exceptions.html#SystemError "Link to this definition")
    
Raised when the interpreter finds an internal error, but the situation does not look so serious to cause it to abandon all hope. The associated value is a string indicating what went wrong (in low-level terms). In [CPython](https://docs.python.org/3/glossary.html#term-CPython), this could be raised by incorrectly using Python’s C API, such as returning a `NULL` value without an exception set.
If you’re confident that this exception wasn’t your fault, or the fault of a package you’re using, you should report this to the author or maintainer of your Python interpreter. Be sure to report the version of the Python interpreter (`sys.version`; it is also printed at the start of an interactive Python session), the exact error message (the exception’s associated value) and if possible the source of the program that triggered the error. 

_exception_ SystemExit[¶](https://docs.python.org/3/library/exceptions.html#SystemExit "Link to this definition")
    
This exception is raised by the [`sys.exit()`](https://docs.python.org/3/library/sys.html#sys.exit "sys.exit") function. It inherits from [`BaseException`](https://docs.python.org/3/library/exceptions.html#BaseException "BaseException") instead of [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception "Exception") so that it is not accidentally caught by code that catches [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception "Exception"). This allows the exception to properly propagate up and cause the interpreter to exit. When it is not handled, the Python interpreter exits; no stack traceback is printed. The constructor accepts the same optional argument passed to [`sys.exit()`](https://docs.python.org/3/library/sys.html#sys.exit "sys.exit"). If the value is an integer, it specifies the system exit status (passed to C’s `exit()` function); if it is `None`, the exit status is zero; if it has another type (such as a string), the object’s value is printed and the exit status is one.
A call to [`sys.exit()`](https://docs.python.org/3/library/sys.html#sys.exit "sys.exit") is translated into an exception so that clean-up handlers ([`finally`](https://docs.python.org/3/reference/compound_stmts.html#finally) clauses of [`try`](https://docs.python.org/3/reference/compound_stmts.html#try) statements) can be executed, and so that a debugger can execute a script without running the risk of losing control. The [`os._exit()`](https://docs.python.org/3/library/os.html#os._exit "os._exit") function can be used if it is absolutely positively necessary to exit immediately (for example, in the child process after a call to [`os.fork()`](https://docs.python.org/3/library/os.html#os.fork "os.fork")). 

code[¶](https://docs.python.org/3/library/exceptions.html#SystemExit.code "Link to this definition")
    
The exit status or error message that is passed to the constructor. (Defaults to `None`.)