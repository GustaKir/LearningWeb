Title: Python 3.11 Release Notes
URL: https://docs.python.org/3/whatsnew/3.11.html
Summary: The Python 3.11 release introduces new features, including `get_identifiers()` and `is_valid()` methods for `string.Template` to manage placeholders. Additionally, the `sys.exc_info()` function now derives the `type` and `traceback` fields from the exception value.
---

Erlend E. Aasland in [bpo-24905](https://bugs.python.org/issue?@action=redirect&bpo=24905).)


### string[¶](https://docs.python.org/3/whatsnew/3.11.html#string "Link to this heading")
  * Add [`get_identifiers()`](https://docs.python.org/3/library/string.html#string.Template.get_identifiers "string.Template.get_identifiers") and [`is_valid()`](https://docs.python.org/3/library/string.html#string.Template.is_valid "string.Template.is_valid") to [`string.Template`](https://docs.python.org/3/library/string.html#string.Template "string.Template"), which respectively return all valid placeholders, and whether any invalid placeholders are present. (Contributed by Ben Kehoe in [gh-90465](https://github.com/python/cpython/issues/90465).)


### sys[¶](https://docs.python.org/3/whatsnew/3.11.html#sys "Link to this heading")
  * [`sys.exc_info()`](https://docs.python.org/3/library/sys.html#sys.exc_info "sys.exc_info") now derives the `type` and `traceback` fields from the `value` (the exception instance), so when an exception is modified while it is being handled, the changes are reflected in the results of subsequent calls to `exc_info()`. (Contributed by Irit Katriel in [bpo-45711](https://bugs.python.org/issue?@action=redirect&bpo=45711).)
  * Add [`sys.exception()`](https://docs.python.org/3/library/sys.html#sys.exception "sys.exception") which returns the active exception instance (equivalent to `sys.exc_info()[1]`). (Contributed by Irit Katriel in [bpo-46328](https://bugs.python.org/issue?@action=redirect&bpo=46328).)
  * Add the [`sys.flags.safe_path`](https://docs.python.org/3/library/sys.html#sys.flags "sys.flags") flag. (Contributed by Victor Stinner in [gh-57684](https://github.com/python/cpython/issues/57684).)


### sysconfig[¶](https://docs.python.org/3/whatsnew/3.11.html#sysconfig "Link to this heading")
  * Three new [installation schemes](https://docs.python.org/3/library/sysconfig.html#installation-paths) (_posix_venv_ , _nt_venv_ and _venv_) were added and are used when Python creates new virtual environments or when it is running from a virtual environment. The first two schemes (_posix_venv_ and _nt_venv_) are OS-specific for non-Windows and Windows, the _venv_ is essentially an alias to one of them according to the OS Python runs on. This is useful for downstream distributors who modify [`sysconfig.get_preferred_scheme()`](https://docs.python.org/3/library/sysconfig.html#sysconfig.get_preferred_scheme "sysconfig.get_preferred_scheme"). Third party code that creates new virtual environments should use the new _venv_ installation scheme to determine the paths, as does [`venv`](https://docs.python.org/3/library/venv.html#module-venv "venv: Creation of virtual environments."). (Contributed by Miro Hrončok in [bpo-45413](https://bugs.python.org/issue?@action=redirect&bpo=45413).)


### tempfile[¶](https://docs.python.org/3/whatsnew/3.11.html#tempfile "Link to this heading")
  * [`SpooledTemporaryFile`](https://docs.python.org/3/library/tempfile.html#tempfile.SpooledTemporaryFile "tempfile.SpooledTemporaryFile") objects now fully implement the methods of [`io.BufferedIOBase`](https://docs.python.org/3/library/io.html#io.BufferedIOBase "io.BufferedIOBase") or [`io.TextIOBase`](https://docs.python.org/3/library/io.html#io.TextIOBase "io.TextIOBase") (depending on file mode). This lets them work correctly with APIs that expect file-like objects, such as compression modules. (Contributed by Carey Metcalfe in [gh-70363](https://github.com/python/cpython/issues/70363).)


### threading[¶](https://docs.python.org/3/whatsnew/3.11.html#threading "Link to this heading")
  * On Unix, if the `sem_clockwait()` function is available in the C library (glibc 2.30 and newer), the [`threading.Lock.acquire()`](https://docs.python.org/3/library/threading.html#threading.Lock.acquire "threading.Lock.acquire") method now uses the monotonic clock ([`time.CLOCK_MONOTONIC`](https://docs.python.org/3/library/time.html#time.CLOCK_MONOTONIC "time.CLOCK_MONOTONIC")) for the timeout, rather than using the system clock ([`time.CLOCK_REALTIME`](https://docs.python.org/3/library/time.html#time.CLOCK_REALTIME "time.CLOCK_REALTIME")), to not be affected by system clock changes. (Contributed by Victor Stinner in [bpo-41710](https://bugs.python.org/issue?@action=redirect&bpo=41710).)