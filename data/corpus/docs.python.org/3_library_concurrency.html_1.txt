Title: Concurrent Execution in Python
URL: https://docs.python.org/3/library/concurrency.html
Summary: This section provides an overview of modules in Python that support concurrent execution of code, highlighting the importance of choosing the right tool based on whether the task is CPU bound or I/O bound, and whether the development style favors event-driven cooperative multitasking or preemptive multitasking. It includes a list of key components such as the `threading` module for thread-based parallelism.
---

# Concurrent Execution[¶](https://docs.python.org/3/library/concurrency.html#concurrent-execution "Link to this heading")
The modules described in this chapter provide support for concurrent execution of code. The appropriate choice of tool will depend on the task to be executed (CPU bound vs IO bound) and preferred style of development (event driven cooperative multitasking vs preemptive multitasking). Here’s an overview:
  * [`threading` — Thread-based parallelism](https://docs.python.org/3/library/threading.html)
    * [Thread-Local Data](https://docs.python.org/3/library/threading.html#thread-local-data)
    * [Thread Objects](https://docs.python.org/3/library/threading.html#thread-objects)
    * [Lock Objects](https://docs.python.org/3/library/threading.html#lock-objects)
    * [RLock Objects](https://docs.python.org/3/library/threading.html#rlock-objects)
    * [Condition Objects](https://docs.python.org/3/library/threading.html#condition-objects)
    * [Semaphore Objects](https://docs.python.org/3/library/threading.html#semaphore-objects)
      * [`Semaphore` Example](https://docs.python.org/3/library/threading.html#semaphore-example)
    * [Event Objects](https://docs.python.org/3/library/threading.html#event-objects)
    * [Timer Objects](https://docs.python.org/3/library/threading.html#timer-objects)
    * [Barrier Objects](https://docs.python.org/3/library/threading.html#barrier-objects)
    * [Using locks, conditions, and semaphores in the `with` statement](https://docs.python.org/3/library/threading.html#using-locks-conditions-and-semaphores-in-the-with-statement)
  * [`multiprocessing` — Process-based parallelism](https://docs.python.org/3/library/multiprocessing.html)
    * [Introduction](https://docs.python.org/3/library/multiprocessing.html#introduction)
      * [The `Process` class](https://docs.python.org/3/library/multiprocessing.html#the-process-class)
      * [Contexts and start methods](https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods)
      * [Exchanging objects between processes](https://docs.python.org/3/library/multiprocessing.html#exchanging-objects-between-processes)
      * [Synchronization between processes](https://docs.python.org/3/library/multiprocessing.html#synchronization-between-processes)
      * [Sharing state between processes](https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes)
      * [Using a pool of workers](https://docs.python.org/3/library/multiprocessing.html#using-a-pool-of-workers)
    * [Reference](https://docs.python.org/3/library/multiprocessing.html#reference)
      * [`Process` and exceptions](https://docs.python.org/3/library/multiprocessing.html#process-and-exceptions)
      * [Pipes and Queues](https://docs.python.org/3/library/multiprocessing.html#pipes-and-queues)
      * [Miscellaneous](https://docs.python.org/3/library/multiprocessing.html#miscellaneous)
      * [Connection Objects](https://docs.python.org/3/library/multiprocessing.html#connection-objects)
      * [Synchronization primitives](https://docs.python.org/3/library/multiprocessing.html#synchronization-primitives)
      * [Shared `ctypes` Objects](https://docs.python.org/3/library/multiprocessing.html#shared-ctypes-objects)
        * [The `multiprocessing.sharedctypes` module](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.sharedctypes)
      * [Managers](https://docs.python.org/3/library/multiprocessing.html#managers)
        * [Customized managers](https://docs.python.org/3/library/multiprocessing.html#customized-managers)
        * [Using a remote manager](https://docs.python.org/3/library/multiprocessing.html#using-a-remote-manager)
      * [Proxy Objects](https://docs.python.org/3/library/multiprocessing.html#proxy-objects)
        * [Cleanup](https://docs.python.org/3/library/multiprocessing.html#cleanup)
      * [Process Pools](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.pool)
      * [Listeners and Clients](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.connection)
        * [Address Formats](https://docs.python.org/3/library/multiprocessing.html#address-formats)
      * [Authentication keys](https://docs.python.org/3/library/multiprocessing.html#authentication-keys)
      * [Logging](https://docs.python.org/3/library/multiprocessing.html#logging)
      * [The `multiprocessing.dummy` module](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.dummy)
    * [Programming guidelines](https://docs.python.org/3/library/multiprocessing.html#programming-guidelines)
      * [All start methods](https://docs.python.org/3/library/multiprocessing.html#all-start-methods)
      * [The _spawn_ and _forkserver_ start methods](https://docs.python.org/3/library/multiprocessing.html#the-spawn-and-forkserver-start-methods)
    * [Examples](https://docs.python.org/3/library/multiprocessing.html#examples)
  * [`