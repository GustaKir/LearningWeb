Title: Random Module: getrandbits and choice Functions
URL: https://docs.python.org/3/library/random.html
Summary: The 'random.getrandbits(_k_)' function returns a non-negative integer with _k_ random bits, utilizing the Mersenne Twister generator. It allows for handling arbitrarily large ranges in 'randrange()'. Starting from version 3.9, it accepts zero for _k_. Additionally, 'random.choice(_seq_)' returns a random element from a non-empty sequence _seq_, raising an IndexError if the sequence is empty.
---

random.getrandbits(_k_)[¶](https://docs.python.org/3/library/random.html#random.getrandbits "Link to this definition")
    
Returns a non-negative Python integer with _k_ random bits. This method is supplied with the Mersenne Twister generator and some other generators may also provide it as an optional part of the API. When available, [`getrandbits()`](https://docs.python.org/3/library/random.html#random.getrandbits "random.getrandbits") enables [`randrange()`](https://docs.python.org/3/library/random.html#random.randrange "random.randrange") to handle arbitrarily large ranges.
Changed in version 3.9: This method now accepts zero for _k_.
## Functions for sequences[¶](https://docs.python.org/3/library/random.html#functions-for-sequences "Link to this heading") 

random.choice(_seq_)[¶](https://docs.python.org/3/library/random.html#random.choice "Link to this definition")
    
Return a random element from the non-empty sequence _seq_. If _seq_ is empty, raises [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError "IndexError"). 

random.choices(_population_ , _weights =None_, _*_ , _cum_weights =None_, _k =1_)[¶](https://docs.python.org/3/library/random.html#random.choices "Link to this definition")
    
Return a _k_ sized list of elements chosen from the _population_ with replacement. If the _population_ is empty, raises [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError "IndexError").
If a _weights_ sequence is specified, selections are made according to the relative weights. Alternatively, if a _cum_weights_ sequence is given, the selections are made according to the cumulative weights (perhaps computed using [`itertools.accumulate()`](https://docs.python.org/3/library/itertools.html#itertools.accumulate "itertools.accumulate")). For example, the relative weights `[10, 5, 30, 5]` are equivalent to the cumulative weights `[10, 15, 45, 50]`. Internally, the relative weights are converted to cumulative weights before making selections, so supplying the cumulative weights saves work.
If neither _weights_ nor _cum_weights_ are specified, selections are made with equal probability. If a weights sequence is supplied, it must be the same length as the _population_ sequence. It is a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") to specify both _weights_ and _cum_weights_.
The _weights_ or _cum_weights_ can use any numeric type that interoperates with the [`float`](https://docs.python.org/3/library/functions.html#float "float") values returned by [`random()`](https://docs.python.org/3/library/random.html#module-random "random: Generate pseudo-random numbers with various common distributions.") (that includes integers, floats, and fractions but excludes decimals). Weights are assumed to be non-negative and finite. A [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised if all weights are zero.
For a given seed, the [`choices()`](https://docs.python.org/3/library/random.html#random.choices "random.choices") function with equal weighting typically produces a different sequence than repeated calls to [`choice()`](https://docs.python.org/3/library/random.html#random.choice "random.choice"). The algorithm used by [`choices()`](https://docs.python.org/3/library/random.html#random.choices "random.choices") uses floating-point arithmetic for internal consistency and speed. The algorithm used by [`choice()`](https://docs.python.org/3/library/random.html#random.choice "random.choice") defaults to integer arithmetic with repeated selections to avoid small biases from round-off error.
Added in version 3.6.
Changed in version 3.9: Raises a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if all weights are zero. 

random.shuffle(_x_)[¶](https://docs.python.org/3/library/random.html#random.shuffle "Link to this definition")
    
Shuffle the sequence _x_ in place.
To shuffle an immutable sequence and return a new shuffled list, use `sample(x, k=len(x))` instead.
Note that even for small `len(x)`, the total number of permutations of _x_ can quickly grow larger than the period of most random number generators. This implies that most permutations of a long sequence can never be generated. For example, a sequence of length 2080 is the largest that can fit within the period of the Mersenne Twister random number generator.
Changed in version 3.11: Removed the optional parameter _random_.