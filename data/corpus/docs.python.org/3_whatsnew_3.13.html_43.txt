Title: New Features in Python 3.13
URL: https://docs.python.org/3/whatsnew/3.13.html
Summary: This document outlines the new C API functions introduced in Python 3.13, including `PyList_Extend()` and `PyList_Clear()` for list operations, and `PyLong_AsInt()` for converting Python long integers to C int. Additional functions like `PyLong_AsNativeBytes()` are also mentioned.
---

(Contributed by Sam Gross in [gh-114329](https://github.com/python/cpython/issues/114329).)
  * Add the [`PyList_Extend()`](https://docs.python.org/3/c-api/list.html#c.PyList_Extend "PyList_Extend") and [`PyList_Clear()`](https://docs.python.org/3/c-api/list.html#c.PyList_Clear "PyList_Clear") functions, mirroring the Python `list.extend()` and `list.clear()` methods. (Contributed by Victor Stinner in [gh-111138](https://github.com/python/cpython/issues/111138).)
  * Add the [`PyLong_AsInt()`](https://docs.python.org/3/c-api/long.html#c.PyLong_AsInt "PyLong_AsInt") function. It behaves similarly to [`PyLong_AsLong()`](https://docs.python.org/3/c-api/long.html#c.PyLong_AsLong "PyLong_AsLong"), but stores the result in a C int instead of a C long. (Contributed by Victor Stinner in [gh-108014](https://github.com/python/cpython/issues/108014).)
  * Add the [`PyLong_AsNativeBytes()`](https://docs.python.org/3/c-api/long.html#c.PyLong_AsNativeBytes "PyLong_AsNativeBytes"), [`PyLong_FromNativeBytes()`](https://docs.python.org/3/c-api/long.html#c.PyLong_FromNativeBytes "PyLong_FromNativeBytes"), and [`PyLong_FromUnsignedNativeBytes()`](https://docs.python.org/3/c-api/long.html#c.PyLong_FromUnsignedNativeBytes "PyLong_FromUnsignedNativeBytes") functions to simplify converting between native integer types and Python [`int`](https://docs.python.org/3/library/functions.html#int "int") objects. (Contributed by Steve Dower in [gh-111140](https://github.com/python/cpython/issues/111140).)
  * Add [`PyModule_Add()`](https://docs.python.org/3/c-api/module.html#c.PyModule_Add "PyModule_Add") function, which is similar to [`PyModule_AddObjectRef()`](https://docs.python.org/3/c-api/module.html#c.PyModule_AddObjectRef "PyModule_AddObjectRef") and [`PyModule_AddObject()`](https://docs.python.org/3/c-api/module.html#c.PyModule_AddObject "PyModule_AddObject"), but always steals a reference to the value. (Contributed by Serhiy Storchaka in [gh-86493](https://github.com/python/cpython/issues/86493).)
  * Add the [`PyObject_GenericHash()`](https://docs.python.org/3/c-api/hash.html#c.PyObject_GenericHash "PyObject_GenericHash") function that implements the default hashing function of a Python object. (Contributed by Serhiy Storchaka in [gh-113024](https://github.com/python/cpython/issues/113024).)
  * Add the [`Py_HashPointer()`](https://docs.python.org/3/c-api/hash.html#c.Py_HashPointer "Py_HashPointer") function to hash a raw pointer. (Contributed by Victor Stinner in [gh-111545](https://github.com/python/cpython/issues/111545).)
  * Add the [`PyObject_VisitManagedDict()`](https://docs.python.org/3/c-api/object.html#c.PyObject_VisitManagedDict "PyObject_VisitManagedDict") and [`PyObject_ClearManagedDict()`](https://docs.python.org/3/c-api/object.html#c.PyObject_ClearManagedDict "PyObject_ClearManagedDict") functions. which must be called by the traverse and clear functions of a type using the [`Py_TPFLAGS_MANAGED_DICT`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_MANAGED_DICT "Py_TPFLAGS_MANAGED_DICT") flag. The [pythoncapi-compat project](https://github.com/python/pythoncapi-compat/) can be used to use these functions with Python 3.11 and 3.12. (Contributed by Victor Stinner in [gh-107073](https://github.com/python/cpython/issues/107073).)
  * Add the [`PyRefTracer_SetTracer()`](https://docs.python.org/3/c-api/init.html#c.PyRefTracer_SetTracer "PyRefTracer_SetTracer") and [`PyRefTracer_GetTracer()`](https://docs.python.org/3/c-api/init.html#c.PyRefTracer_GetTracer "PyRefTracer_GetTracer") functions, which enable tracking object creation and destruction in the same way that the [`tracemalloc`](https://docs.python.org/3/library/tracemalloc.html#module-tracemalloc "tracemalloc: Trace memory allocations.") module does. (Contributed by Pablo Galindo in [gh-93502](https://github.com/python/cpython/issues/93502).)
  * Add the [`PySys_AuditTuple()`](https://docs.python.org/3/c-api/sys.html#c.PySys_AuditTuple "PySys_AuditTuple") function as an alternative to [`PySys_Audit()`](https://docs.python.org/3/c-api/sys.html#c.PySys_Audit "PySys_Audit") that takes event arguments as a Python [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple") object. (Contributed by Victor Stinner in [gh-85283](https://github.com/python/cpython/issues/85283).)
  * Add the [`PyThreadState_GetUnchecked()`](https://docs.python.org/3/c-api/init.html#c.PyThreadState_GetUnchecked "PyThreadState_GetUnchecked") function as an alternative to [`PyThreadState_Get()`](https://docs.python.org/3/c-api/init.html#c.PyThreadState_Get "PyThreadState_Get") that doesnâ€™t kill the process with a fatal error if it is `NULL`. The caller is responsible for checking if the result is `NULL`.