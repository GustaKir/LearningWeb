Title: tarfile.open Function
URL: https://docs.python.org/3/library/tarfile.html
Summary: The `tarfile.open` function returns a `TarFile` object for a specified pathname, with customizable parameters including mode and buffer size. The mode can include different options for reading files with or without compression, such as 'r', 'r:gz', 'r:bz2', etc.
---

tarfile.open(_name =None_, _mode ='r'_, _fileobj =None_, _bufsize =10240_, _** kwargs_)[Â¶](https://docs.python.org/3/library/tarfile.html#tarfile.open "Link to this definition")
    
Return a [`TarFile`](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile "tarfile.TarFile") object for the pathname _name_. For detailed information on [`TarFile`](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile "tarfile.TarFile") objects and the keyword arguments that are allowed, see [TarFile Objects](https://docs.python.org/3/library/tarfile.html#tarfile-objects).
_mode_ has to be a string of the form `'filemode[:compression]'`, it defaults to `'r'`. Here is a full list of mode combinations:
mode | action  
---|---  
`'r' or 'r:*'` | Open for reading with transparent compression (recommended).  
`'r:'` | Open for reading exclusively without compression.  
`'r:gz'` | Open for reading with gzip compression.  
`'r:bz2'` | Open for reading with bzip2 compression.  
`'r:xz'` | Open for reading with lzma compression.  
`'x'` or `'x:'` | Create a tarfile exclusively without compression. Raise a [`FileExistsError`](https://docs.python.org/3/library/exceptions.html#FileExistsError "FileExistsError") exception if it already exists.  
`'x:gz'` | Create a tarfile with gzip compression. Raise a [`FileExistsError`](https://docs.python.org/3/library/exceptions.html#FileExistsError "FileExistsError") exception if it already exists.  
`'x:bz2'` | Create a tarfile with bzip2 compression. Raise a [`FileExistsError`](https://docs.python.org/3/library/exceptions.html#FileExistsError "FileExistsError") exception if it already exists.  
`'x:xz'` | Create a tarfile with lzma compression. Raise a [`FileExistsError`](https://docs.python.org/3/library/exceptions.html#FileExistsError "FileExistsError") exception if it already exists.  
`'a' or 'a:'` | Open for appending with no compression. The file is created if it does not exist.  
`'w' or 'w:'` | Open for uncompressed writing.  
`'w:gz'` | Open for gzip compressed writing.  
`'w:bz2'` | Open for bzip2 compressed writing.  
`'w:xz'` | Open for lzma compressed writing.  
Note that `'a:gz'`, `'a:bz2'` or `'a:xz'` is not possible. If _mode_ is not suitable to open a certain (compressed) file for reading, [`ReadError`](https://docs.python.org/3/library/tarfile.html#tarfile.ReadError "tarfile.ReadError") is raised. Use _mode_ `'r'` to avoid this. If a compression method is not supported, [`CompressionError`](https://docs.python.org/3/library/tarfile.html#tarfile.CompressionError "tarfile.CompressionError") is raised.
If _fileobj_ is specified, it is used as an alternative to a [file object](https://docs.python.org/3/glossary.html#term-file-object) opened in binary mode for _name_. It is supposed to be at position 0.
For modes `'w:gz'`, `'x:gz'`, `'w|gz'`, `'w:bz2'`, `'x:bz2'`, `'w|bz2'`, [`tarfile.open()`](https://docs.python.org/3/library/tarfile.html#tarfile.open "tarfile.open") accepts the keyword argument _compresslevel_ (default `9`) to specify the compression level of the file.
For modes `'w:xz'` and `'x:xz'`, [`tarfile.open()`](https://docs.python.org/3/library/tarfile.html#tarfile.open "tarfile.open") accepts the keyword argument _preset_ to specify the compression level of the file.
For special purposes, there is a second format for _mode_ : `'filemode|[compression]'`. [`tarfile.open()`](https://docs.python.org/3/library/tarfile.html#tarfile.open "tarfile.open") will return a [`TarFile`](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile "tarfile.TarFile") object that processes its data as a stream of blocks. No random seeking will be done on the file. If given, _fileobj_ may be any object that has a [`read()`](https://docs.python.org/3/library/io.html#io.RawIOBase.read "io.RawIOBase.read") or [`write()`](https://docs.python.org/3/library/io.html#io.RawIOBase.write "io.RawIOBase.write") method (depending on the _mode_) that works with bytes. _bufsize_ specifies the blocksize and defaults to `20 * 512` bytes. Use this variant in combination with e.g. `sys.stdin.buffer`, a socket [file object](https://docs.python.org/3/glossary.html#term-file-object) or a tape device. However, such a [`TarFile`](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile "tarfile.TarFile") object is limited in that it does not allow random access, see [Examples](https://docs.python.org/3/library/tarfile.html#tar-examples). The currently possible modes:
Mode | Action  
---|---  
`'r|*'` | Open a _stream_ of tar blocks for reading with transparent compression.  
`'r|'` | Open a _stream_ of uncompressed tar blocks for reading.  
`'r|gz'` | Open a gzip compressed _stream_ for reading.  
`'r|bz2'` | Open a bzip2 compressed _stream_ for reading.  
`'r|xz'` | Open an lzma compressed _stream_ for reading.  
`'w|'` | Open an uncompressed _stream_ for writing.  
`'w|gz'` | Open a gzip compressed _stream_ for writing.  
`'w|bz2'` | Open a bzip2 compressed _stream_ for writing.  
`'w|