Title: Python 3.11.0 Alpha 4 Release Notes
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: The release notes for Python 3.11.0 alpha 4 highlight several key changes, including improvements to garbage collection with `Py_EndInterpreter()` untracking objects and a fix for a memory leak in `PyEval_EvalCodeEx`. These updates aim to enhance the stability and performance of Python's core and built-in functionalities.
---

## Python 3.11.0 alpha 4[¶](https://docs.python.org/3/whatsnew/changelog.html#python-3-11-0-alpha-4 "Link to this heading")
_Release date: 2022-01-13_
### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id253 "Link to this heading")
  * [bpo-46070](https://bugs.python.org/issue?@action=redirect&bpo=46070): [`Py_EndInterpreter()`](https://docs.python.org/3/c-api/init.html#c.Py_EndInterpreter "Py_EndInterpreter") now explicitly untracks all objects currently tracked by the GC. Previously, if an object was used later by another interpreter, calling [`PyObject_GC_UnTrack()`](https://docs.python.org/3/c-api/gcsupport.html#c.PyObject_GC_UnTrack "PyObject_GC_UnTrack") on the object crashed if the previous or the next object of the `PyGC_Head` structure became a dangling pointer. Patch by Victor Stinner.
  * [bpo-46347](https://bugs.python.org/issue?@action=redirect&bpo=46347): Fix memory leak in PyEval_EvalCodeEx.
  * [bpo-46339](https://bugs.python.org/issue?@action=redirect&bpo=46339): Fix a crash in the parser when retrieving the error text for multi-line f-strings expressions that do not start in the first line of the string. Patch by Pablo Galindo
  * [bpo-46331](https://bugs.python.org/issue?@action=redirect&bpo=46331): Do not set line number of instruction storing doc-string. Fixes regression introduced in 3.11 alpha.
  * [bpo-46314](https://bugs.python.org/issue?@action=redirect&bpo=46314): Remove spurious “call” event when creating a lambda function that was accidentally introduced in 3.11a4.
  * [bpo-46289](https://bugs.python.org/issue?@action=redirect&bpo=46289): ASDL declaration of `FormattedValue` has changed to reflect `conversion` field is not optional.
  * [bpo-46297](https://bugs.python.org/issue?@action=redirect&bpo=46297): Fixed an interpreter crash on bootup with multiple PythonPaths set in the Windows registry. Patch by Derzsi Dániel.
  * [bpo-46237](https://bugs.python.org/issue?@action=redirect&bpo=46237): Fix the line number of tokenizer errors inside f-strings. Patch by Pablo Galindo.
  * [bpo-46263](https://bugs.python.org/issue?@action=redirect&bpo=46263): We always expect the “use_frozen_modules” config to be set, now that getpath.c was rewritten in pure Python and the logic improved.
  * [bpo-46006](https://bugs.python.org/issue?@action=redirect&bpo=46006): Fix a regression when a type method like `__init__()` is modified in a subinterpreter. Fix a regression in `_PyUnicode_EqualToASCIIId()` and type `update_slot()`. Revert the change which made the Unicode dictionary of interned strings compatible with subinterpreters: the internal interned dictionary is shared again by all interpreters. Patch by Victor Stinner.
  * [bpo-45923](https://bugs.python.org/issue?@action=redirect&bpo=45923): Add RESUME opcode. This is a logical no-op. It is emitted by the compiler anywhere a Python function can be entered. It is used by the interpreter to perform tracing and optimizer checks.
  * [bpo-46208](https://bugs.python.org/issue?@action=redirect&bpo=46208): Fix the regression of os.path.normpath(“A/../../B”) not returning expected “../B” but “B”.
  * [bpo-46240](https://bugs.python.org/issue?@action=redirect&bpo=46240): Correct the error message for unclosed parentheses when the tokenizer doesn’t reach the end of the source when the error is reported. Patch by Pablo Galindo
  * [bpo-46009](https://bugs.python.org/issue?@action=redirect&bpo=46009): Remove the `GEN_START` opcode.
  * [bpo-46235](https://bugs.python.org/issue?@action=redirect&bpo=46235): Certain sequence multiplication operations like `[0] * 1_000` are now faster due to reference-counting optimizations. Patch by Dennis Sweeney.
  * [bpo-46221](https://bugs.python.org/issue?@action=redirect&bpo=46221): `PREP_RERAISE_STAR` no longer pushes `lasti` to the stack.
  * [bpo-46202](https://bugs.python.org/issue?@action=redirect&bpo=46202): Remove `POP_EXCEPT_AND_RERAISE` and replace it by an equivalent sequence of other opcodes.
  * [bpo-46085](https://bugs.python.org/issue?@action=redirect&bpo=46085): Fix iterator cache mechanism of `OrderedDict`.
  * [bpo-46055](https://bugs.python.org/issue?@action=redirect&bpo=46055): Speed up shifting operation involving integers less than `PyLong_BASE`. Patch by Xinhang Xu.
  * [bpo-46110](https://bugs.python.org/issue?@action=redirect&bpo=46110): Add a maximum recursion check to the PEG parser to avoid stack overflow. Patch by Pablo Galindo
  * [bpo-46107](https://bugs.python.org/issue?@action=redirect&bpo=46107): Fix bug where `ExceptionGroup.split()` and `ExceptionGroup.subgroup()` did not copy the exception group’s `__note__` field to the parts.
  * [bpo-45711](https://bugs.python.org/issue?@action=redirect&bpo=45711): The interpreter state’s representation of handled exceptions (a.k.a exc_info, or _PyErr_StackItem) now has only the `exc_value` field, `exc_type` and `exc_traceback` have been removed as their values can be derived from `exc_value`.
  * [bpo-44525](https://b