Title: Setting Command Line Arguments in Python's C API
URL: https://docs.python.org/3/c-api/init_config.html
Summary: This section describes how to configure the `sys.argv` command line arguments using `PyWideStringList.argv`. It explains that the first entry should point to the script file being executed, distinct from the interpreter executable. If no script is provided, the first argument can be an empty string. It also mentions setting `parse_argv` to `1` for parsing the `argv` array.
---

[PyWideStringList](https://docs.python.org/3/c-api/init_config.html#c.PyWideStringList "PyWideStringList")argv[¶](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.argv "Link to this definition")
    
Set [`sys.argv`](https://docs.python.org/3/library/sys.html#sys.argv "sys.argv") command line arguments based on [`argv`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.argv "PyConfig.argv"). These parameters are similar to those passed to the program’s `main()` function with the difference that the first entry should refer to the script file to be executed rather than the executable hosting the Python interpreter. If there isn’t a script that will be run, the first entry in [`argv`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.argv "PyConfig.argv") can be an empty string.
Set [`parse_argv`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.parse_argv "PyConfig.parse_argv") to `1` to parse [`argv`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.argv "PyConfig.argv") the same way the regular Python parses Python command line arguments and then to strip Python arguments from [`argv`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.argv "PyConfig.argv").
If [`argv`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.argv "PyConfig.argv") is empty, an empty string is added to ensure that [`sys.argv`](https://docs.python.org/3/library/sys.html#sys.argv "sys.argv") always exists and is never empty.
Default: `NULL`.
See also the [`orig_argv`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.orig_argv "PyConfig.orig_argv") member. 

intsafe_path[¶](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.safe_path "Link to this definition")
    
If equals to zero, `Py_RunMain()` prepends a potentially unsafe path to [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path") at startup:
  * If [`argv[0]`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.argv "PyConfig.argv") is equal to `L"-m"` (`python -m module`), prepend the current working directory.
  * If running a script (`python script.py`), prepend the script’s directory. If it’s a symbolic link, resolve symbolic links.
  * Otherwise (`python -c code` and `python`), prepend an empty string, which means the current working directory.


Set to `1` by the [`-P`](https://docs.python.org/3/using/cmdline.html#cmdoption-P) command line option and the [`PYTHONSAFEPATH`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONSAFEPATH) environment variable.
Default: `0` in Python config, `1` in isolated config.
Added in version 3.11. 

wchar_t*base_exec_prefix[¶](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.base_exec_prefix "Link to this definition")
    
[`sys.base_exec_prefix`](https://docs.python.org/3/library/sys.html#sys.base_exec_prefix "sys.base_exec_prefix").
Default: `NULL`.
Part of the [Python Path Configuration](https://docs.python.org/3/c-api/init_config.html#init-path-config) output.
See also [`PyConfig.exec_prefix`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.exec_prefix "PyConfig.exec_prefix"). 

wchar_t*base_executable[¶](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.base_executable "Link to this definition")
    
Python base executable: `sys._base_executable`.
Set by the `__PYVENV_LAUNCHER__` environment variable.
Set from [`PyConfig.executable`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.executable "PyConfig.executable") if `NULL`.
Default: `NULL`.
Part of the [Python Path Configuration](https://docs.python.org/3/c-api/init_config.html#init-path-config) output.
See also [`PyConfig.executable`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.executable "PyConfig.executable"). 

wchar_t*base_prefix[¶](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.base_prefix "Link to this definition")
    
[`sys.base_prefix`](https://docs.python.org/3/library/sys.html#sys.base_prefix "sys.base_prefix").
Default: `NULL`.
Part of the [Python Path Configuration](https://docs.python.org/3/c-api/init_config.html#init-path-config) output.
See also [`PyConfig.prefix`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.prefix "PyConfig.prefix"). 

intbuffered_stdio[¶](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.buffered_stdio "Link to this definition")
    
If equals to `0` and [`configure_c_stdio`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.configure_c_stdio "PyConfig.configure_c_stdio") is non-zero, disable buffering on the C streams stdout and stderr.
Set to `0` by the [`-u`](https://docs.python.org/3/using/cmdline.html#cmdoption-u) command line option and the [`PYTHONUNBUFFERED`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONUNBUFFERED) environment variable.
stdin is always opened in buffered mode.
Default: `1`.