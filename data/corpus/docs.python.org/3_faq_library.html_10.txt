Title: Avoiding Blocking in Socket Connections
URL: https://docs.python.org/3/faq/library.html
Summary: To prevent blocking during the socket `connect()` method in Python, utilize the `select` module for asynchronous I/O. Set the socket to non-blocking mode, which may result in an immediate connection or an exception with error number `.errno`. Specifically, `errno.EINPROGRESS` signals an ongoing connection process, with varying responses depending on the operating system.
---

```

### [How do I avoid blocking in the connect() method of a socket?](https://docs.python.org/3/faq/library.html#id30)[¶](https://docs.python.org/3/faq/library.html#how-do-i-avoid-blocking-in-the-connect-method-of-a-socket "Link to this heading")
The [`select`](https://docs.python.org/3/library/select.html#module-select "select: Wait for I/O completion on multiple streams.") module is commonly used to help with asynchronous I/O on sockets.
To prevent the TCP connect from blocking, you can set the socket to non-blocking mode. Then when you do the [`connect()`](https://docs.python.org/3/library/socket.html#socket.socket.connect "socket.socket.connect"), you will either connect immediately (unlikely) or get an exception that contains the error number as `.errno`. `errno.EINPROGRESS` indicates that the connection is in progress, but hasn’t finished yet. Different OSes will return different values, so you’re going to have to check what’s returned on your system.
You can use the [`connect_ex()`](https://docs.python.org/3/library/socket.html#socket.socket.connect_ex "socket.socket.connect_ex") method to avoid creating an exception. It will just return the errno value. To poll, you can call [`connect_ex()`](https://docs.python.org/3/library/socket.html#socket.socket.connect_ex "socket.socket.connect_ex") again later – `0` or `errno.EISCONN` indicate that you’re connected – or you can pass this socket to [`select.select()`](https://docs.python.org/3/library/select.html#select.select "select.select") to check if it’s writable.
Note
The [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O.") module provides a general purpose single-threaded and concurrent asynchronous library, which can be used for writing non-blocking network code. The third-party [Twisted](https://twisted.org/) library is a popular and feature-rich alternative.
## [Databases](https://docs.python.org/3/faq/library.html#id31)[¶](https://docs.python.org/3/faq/library.html#databases "Link to this heading")
### [Are there any interfaces to database packages in Python?](https://docs.python.org/3/faq/library.html#id32)[¶](https://docs.python.org/3/faq/library.html#are-there-any-interfaces-to-database-packages-in-python "Link to this heading")
Yes.
Interfaces to disk-based hashes such as [`DBM`](https://docs.python.org/3/library/dbm.html#module-dbm.ndbm "dbm.ndbm: The New Database Manager \(Unix\)") and [`GDBM`](https://docs.python.org/3/library/dbm.html#module-dbm.gnu "dbm.gnu: GNU database manager \(Unix\)") are also included with standard Python. There is also the [`sqlite3`](https://docs.python.org/3/library/sqlite3.html#module-sqlite3 "sqlite3: A DB-API 2.0 implementation using SQLite 3.x.") module, which provides a lightweight disk-based relational database.
Support for most relational databases is available. See the [DatabaseProgramming wiki page](https://wiki.python.org/moin/DatabaseProgramming) for details.
### [How do you implement persistent objects in Python?](https://docs.python.org/3/faq/library.html#id33)[¶](https://docs.python.org/3/faq/library.html#how-do-you-implement-persistent-objects-in-python "Link to this heading")
The [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "pickle: Convert Python objects to streams of bytes and back.") library module solves this in a very general way (though you still can’t store things like open files, sockets or windows), and the [`shelve`](https://docs.python.org/3/library/shelve.html#module-shelve "shelve: Python object persistence.") library module uses pickle and (g)dbm to create persistent mappings containing arbitrary Python objects.
## [Mathematics and Numerics](https://docs.python.org/3/faq/library.html#id34)[¶](https://docs.python.org/3/faq/library.html#mathematics-and-numerics "Link to this heading")
### [How do I generate random numbers in Python?](https://docs.python.org/3/faq/library.html#id35)[¶](https://docs.python.org/3/faq/library.html#how-do-i-generate-random-numbers-in-python "Link to this heading")
The standard module [`random`](https://docs.python.org/3/library/random.html#module-random "random: Generate pseudo-random numbers with various common distributions.") implements a random number generator. Usage is simple:
```
importrandom
random.random()