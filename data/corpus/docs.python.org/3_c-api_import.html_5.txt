Title: Python C API: Module Import Changes and Functions
URL: https://docs.python.org/3/c-api/import.html
Summary: This section documents the introduction of the `is_package` field in Python 3.11 to indicate if a module is a package, replacing the previous method of using a negative `size` field. It also discusses the `PyImport_FrozenModules` array for managing frozen modules and the `PyImport_AppendInittab` function for appending initialization functions for new modules.
---

```

Changed in version 3.11: The new `is_package` field indicates whether the module is a package or not. This replaces setting the `size` field to a negative value. 

conststruct[_frozen](https://docs.python.org/3/c-api/import.html#c._frozen "_frozen")*PyImport_FrozenModules[¶](https://docs.python.org/3/c-api/import.html#c.PyImport_FrozenModules "Link to this definition")
    
This pointer is initialized to point to an array of [`_frozen`](https://docs.python.org/3/c-api/import.html#c._frozen "_frozen") records, terminated by one whose members are all `NULL` or zero. When a frozen module is imported, it is searched in this table. Third-party code could play tricks with this to provide a dynamically created collection of frozen modules. 

intPyImport_AppendInittab(constchar*name, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*(*initfunc)(void))[¶](https://docs.python.org/3/c-api/import.html#c.PyImport_AppendInittab "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Add a single module to the existing table of built-in modules. This is a convenience wrapper around [`PyImport_ExtendInittab()`](https://docs.python.org/3/c-api/import.html#c.PyImport_ExtendInittab "PyImport_ExtendInittab"), returning `-1` if the table could not be extended. The new module can be imported by the name _name_ , and uses the function _initfunc_ as the initialization function called on the first attempted import. This should be called before [`Py_Initialize()`](https://docs.python.org/3/c-api/init.html#c.Py_Initialize "Py_Initialize"). 

struct_inittab[¶](https://docs.python.org/3/c-api/import.html#c._inittab "Link to this definition")
    
Structure describing a single entry in the list of built-in modules. Programs which embed Python may use an array of these structures in conjunction with [`PyImport_ExtendInittab()`](https://docs.python.org/3/c-api/import.html#c.PyImport_ExtendInittab "PyImport_ExtendInittab") to provide additional built-in modules. The structure consists of two members: 

constchar*name[¶](https://docs.python.org/3/c-api/import.html#c._inittab.name "Link to this definition")
    
The module name, as an ASCII encoded string. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*(*initfunc)(void)[¶](https://docs.python.org/3/c-api/import.html#c._inittab.initfunc "Link to this definition")
    
Initialization function for a module built into the interpreter. 

intPyImport_ExtendInittab(struct[_inittab](https://docs.python.org/3/c-api/import.html#c._inittab "_inittab")*newtab)[¶](https://docs.python.org/3/c-api/import.html#c.PyImport_ExtendInittab "Link to this definition")
    
Add a collection of modules to the table of built-in modules. The _newtab_ array must end with a sentinel entry which contains `NULL` for the [`name`](https://docs.python.org/3/c-api/import.html#c._inittab.name "_inittab.name") field; failure to provide the sentinel value can result in a memory fault. Returns `0` on success or `-1` if insufficient memory could be allocated to extend the internal table. In the event of failure, no modules are added to the internal table. This must be called before [`Py_Initialize()`](https://docs.python.org/3/c-api/init.html#c.Py_Initialize "Py_Initialize").
If Python is initialized multiple times, [`PyImport_AppendInittab()`](https://docs.python.org/3/c-api/import.html#c.PyImport_AppendInittab "PyImport_AppendInittab") or [`PyImport_ExtendInittab()`](https://docs.python.org/3/c-api/import.html#c.PyImport_ExtendInittab "PyImport_ExtendInittab") must be called before each Python initialization.
#### Previous topic
[Operating System Utilities](https://docs.python.org/3/c-api/sys.html "previous chapter")
#### Next topic
[Data marshalling support](https://docs.python.org/3/c-api/marshal.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/c-api/import.rst)