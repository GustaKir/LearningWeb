Title: Updates on Tools and C API Changes in Python
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This document outlines notable updates, including changes in building for WASI, updates to GitHub CI workflows involving OpenSSL, and a bug fix in Argument Clinic related to method parameters. Additionally, it mentions enhancements to the C API.
---

### Tools/Demos[¶](https://docs.python.org/3/whatsnew/changelog.html#id109 "Link to this heading")
  * [gh-113516](https://github.com/python/cpython/issues/113516): Don’t set `LDSHARED` when building for WASI.
  * [gh-109991](https://github.com/python/cpython/issues/109991): Update GitHub CI workflows to use OpenSSL 3.0.13 and multissltests to use 1.1.1w, 3.0.13, 3.1.5, and 3.2.1.
  * [gh-115015](https://github.com/python/cpython/issues/115015): Fix a bug in Argument Clinic that generated incorrect code for methods with no parameters that use the [METH_METHOD | METH_FASTCALL | METH_KEYWORDS](https://docs.python.org/3/c-api/structures.html#meth-method-meth-fastcall-meth-keywords) calling convention. Only the positional parameter count was checked; any keyword argument passed would be silently accepted.


### C API[¶](https://docs.python.org/3/whatsnew/changelog.html#id110 "Link to this heading")
  * [gh-111140](https://github.com/python/cpython/issues/111140): Adds [`PyLong_AsNativeBytes()`](https://docs.python.org/3/c-api/long.html#c.PyLong_AsNativeBytes "PyLong_AsNativeBytes"), [`PyLong_FromNativeBytes()`](https://docs.python.org/3/c-api/long.html#c.PyLong_FromNativeBytes "PyLong_FromNativeBytes") and [`PyLong_FromUnsignedNativeBytes()`](https://docs.python.org/3/c-api/long.html#c.PyLong_FromUnsignedNativeBytes "PyLong_FromUnsignedNativeBytes") functions.
  * [gh-114685](https://github.com/python/cpython/issues/114685): [`PyBuffer_FillInfo()`](https://docs.python.org/3/c-api/buffer.html#c.PyBuffer_FillInfo "PyBuffer_FillInfo") now raises a [`SystemError`](https://docs.python.org/3/library/exceptions.html#SystemError "SystemError") if called with [`PyBUF_READ`](https://docs.python.org/3/c-api/memoryview.html#c.PyBUF_READ "PyBUF_READ") or [`PyBUF_WRITE`](https://docs.python.org/3/c-api/memoryview.html#c.PyBUF_WRITE "PyBUF_WRITE") as flags. These flags should only be used with the `PyMemoryView_*` C API.
  * [gh-114685](https://github.com/python/cpython/issues/114685): [`PyObject_GetBuffer()`](https://docs.python.org/3/c-api/buffer.html#c.PyObject_GetBuffer "PyObject_GetBuffer") now raises a [`SystemError`](https://docs.python.org/3/library/exceptions.html#SystemError "SystemError") if called with [`PyBUF_READ`](https://docs.python.org/3/c-api/memoryview.html#c.PyBUF_READ "PyBUF_READ") or [`PyBUF_WRITE`](https://docs.python.org/3/c-api/memoryview.html#c.PyBUF_WRITE "PyBUF_WRITE") as flags. These flags should only be used with the `PyMemoryView_*` C API.
  * [gh-114626](https://github.com/python/cpython/issues/114626): Add `PyCFunctionFast` and `PyCFunctionFastWithKeywords` typedefs (identical to the existing `_PyCFunctionFast` and `_PyCFunctionFastWithKeywords` typedefs, just without a leading `_` prefix).
  * [gh-114329](https://github.com/python/cpython/issues/114329): Add [`PyList_GetItemRef()`](https://docs.python.org/3/c-api/list.html#c.PyList_GetItemRef "PyList_GetItemRef"), which is similar to [`PyList_GetItem()`](https://docs.python.org/3/c-api/list.html#c.PyList_GetItem "PyList_GetItem") but returns a [strong reference](https://docs.python.org/3/glossary.html#term-strong-reference) instead of a [borrowed reference](https://docs.python.org/3/glossary.html#term-borrowed-reference).
  * [gh-110850](https://github.com/python/cpython/issues/110850): Add PyTime C API:
    * [`PyTime_t`](https://docs.python.org/3/c-api/time.html#c.PyTime_t "PyTime_t") type.
    * [`PyTime_MIN`](https://docs.python.org/3/c-api/time.html#c.PyTime_MIN "PyTime_MIN") and [`PyTime_MAX`](https://docs.python.org/3/c-api/time.html#c.PyTime_MAX "PyTime_MAX") constants.
    * [`PyTime_AsSecondsDouble()`](https://docs.python.org/3/c-api/time.html#c.PyTime_AsSecondsDouble "PyTime_AsSecondsDouble"), [`PyTime_Monotonic()`](https://docs.python.org/3/c-api/time.html#c.PyTime_Monotonic "PyTime_Monotonic"), [`PyTime_PerfCounter()`](https://docs.python.org/3/c-api/time.html#c.PyTime_PerfCounter "PyTime_PerfCounter"), and [`PyTime_Time()`](https://docs.python.org/3/c-api/time.html#c.PyTime_Time "PyTime_Time") functions.
Patch by Victor Stinner.
  * [gh-112066](https://github.com/python/cpython/issues/112066): Add [`PyDict_SetDefaultRef()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_SetDefaultRef "PyDict_SetDefaultRef"): insert a key and value into a dictionary if the key is not already present. This is similar to [`dict.setdefault()`](https://docs.python.org/3/library/stdtypes.html#dict.setdefault "dict.setdefault"), but returns an integer value indicating if the key was already present. It is also similar to [`PyDict_SetDefault()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_SetDefault "PyDict_SetDefault"), but returns a strong reference instead of a borrowed reference.