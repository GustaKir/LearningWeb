Title: Adding Attachments to Email Messages in Python
URL: https://docs.python.org/3/library/email.message.html
Summary: The `add_attachment` method facilitates adding attachments to email messages. For `multipart/mixed` messages, it creates a new message object, sets its content, and attaches it. For other types of messages, it uses the `make_mixed()` method to handle attachments accordingly. If no content manager is specified, it defaults to the one defined by the current policy.
---

add_attachment(_* args_, _content_manager =None_, _** kw_)[¶](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.add_attachment "Link to this definition")
    
If the message is a `multipart/mixed`, create a new message object, pass all of the arguments to its [`set_content()`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.set_content "email.message.EmailMessage.set_content") method, and [`attach()`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.attach "email.message.Message.attach") it to the `multipart`. If the message is a non-`multipart`, `multipart/related`, or `multipart/alternative`, call [`make_mixed()`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.make_mixed "email.message.EmailMessage.make_mixed") and then proceed as above. If _content_manager_ is not specified, use the `content_manager` specified by the current [`policy`](https://docs.python.org/3/library/email.policy.html#module-email.policy "email.policy: Controlling the parsing and generating of messages"). If the added part has no _Content-Disposition_ header, add one with the value `attachment`. This method can be used both for explicit attachments (_Content-Disposition: attachment_) and `inline` attachments (_Content-Disposition: inline_), by passing appropriate options to the `content_manager`. 

clear()[¶](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.clear "Link to this definition")
    
Remove the payload and all of the headers. 

clear_content()[¶](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.clear_content "Link to this definition")
    
Remove the payload and all of the _!Content-_ headers, leaving all other headers intact and in their original order.
[`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") objects have the following instance attributes: 

preamble[¶](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.preamble "Link to this definition")
    
The format of a MIME document allows for some text between the blank line following the headers, and the first multipart boundary string. Normally, this text is never visible in a MIME-aware mail reader because it falls outside the standard MIME armor. However, when viewing the raw text of the message, or when viewing the message in a non-MIME aware reader, this text can become visible.
The _preamble_ attribute contains this leading extra-armor text for MIME documents. When the [`Parser`](https://docs.python.org/3/library/email.parser.html#email.parser.Parser "email.parser.Parser") discovers some text after the headers but before the first boundary string, it assigns this text to the message’s _preamble_ attribute. When the [`Generator`](https://docs.python.org/3/library/email.generator.html#email.generator.Generator "email.generator.Generator") is writing out the plain text representation of a MIME message, and it finds the message has a _preamble_ attribute, it will write this text in the area between the headers and the first boundary. See [`email.parser`](https://docs.python.org/3/library/email.parser.html#module-email.parser "email.parser: Parse flat text email messages to produce a message object structure.") and [`email.generator`](https://docs.python.org/3/library/email.generator.html#module-email.generator "email.generator: Generate flat text email messages from a message structure.") for details.
Note that if the message object has no preamble, the _preamble_ attribute will be `None`. 

epilogue[¶](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.epilogue "Link to this definition")
    
The _epilogue_ attribute acts the same way as the _preamble_ attribute, except that it contains text that appears between the last boundary and the end of the message. As with the [`preamble`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.preamble "email.message.EmailMessage.preamble"), if there is no epilog text this attribute will be `None`. 

defects[¶](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.defects "Link to this definition")
    
The _defects_ attribute contains a list of all the problems found when parsing this message. See [`email.errors`](https://docs.python.org/3/library/email.errors.html#module-email.errors "email.errors: The exception classes used by the email package.") for a detailed description of the possible parsing defects.