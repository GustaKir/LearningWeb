Title: HTTPHandler.emit Method
URL: https://docs.python.org/3/library/logging.handlers.html
Summary: The emit method of the HTTPHandler sends log records to a web server as a URL-encoded dictionary using the mapLogRecord() method for conversion. It is noted that using setFormatter() to specify a Formatter does not affect HTTPHandler, as the record preparation for sending differs from generic formatting.
---

emit(_record_)[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.HTTPHandler.emit "Link to this definition")
    
Sends the record to the web server as a URL-encoded dictionary. The [`mapLogRecord()`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.HTTPHandler.mapLogRecord "logging.handlers.HTTPHandler.mapLogRecord") method is used to convert the record to the dictionary to be sent.
Note
Since preparing a record for sending it to a web server is not the same as a generic formatting operation, using [`setFormatter()`](https://docs.python.org/3/library/logging.html#logging.Handler.setFormatter "logging.Handler.setFormatter") to specify a [`Formatter`](https://docs.python.org/3/library/logging.html#logging.Formatter "logging.Formatter") for a [`HTTPHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.HTTPHandler "logging.handlers.HTTPHandler") has no effect. Instead of calling [`format()`](https://docs.python.org/3/library/logging.html#logging.Handler.format "logging.Handler.format"), this handler calls [`mapLogRecord()`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.HTTPHandler.mapLogRecord "logging.handlers.HTTPHandler.mapLogRecord") and then [`urllib.parse.urlencode()`](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode "urllib.parse.urlencode") to encode the dictionary in a form suitable for sending to a web server.
## QueueHandler[¶](https://docs.python.org/3/library/logging.handlers.html#queuehandler "Link to this heading")
Added in version 3.2.
The [`QueueHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.QueueHandler "logging.handlers.QueueHandler") class, located in the [`logging.handlers`](https://docs.python.org/3/library/logging.handlers.html#module-logging.handlers "logging.handlers: Handlers for the logging module.") module, supports sending logging messages to a queue, such as those implemented in the [`queue`](https://docs.python.org/3/library/queue.html#module-queue "queue: A synchronized queue class.") or [`multiprocessing`](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing "multiprocessing: Process-based parallelism.") modules.
Along with the [`QueueListener`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.QueueListener "logging.handlers.QueueListener") class, [`QueueHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.QueueHandler "logging.handlers.QueueHandler") can be used to let handlers do their work on a separate thread from the one which does the logging. This is important in web applications and also other service applications where threads servicing clients need to respond as quickly as possible, while any potentially slow operations (such as sending an email via [`SMTPHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.SMTPHandler "logging.handlers.SMTPHandler")) are done on a separate thread. 

_class_ logging.handlers.QueueHandler(_queue_)[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.QueueHandler "Link to this definition")
    
Returns a new instance of the [`QueueHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.QueueHandler "logging.handlers.QueueHandler") class. The instance is initialized with the queue to send messages to. The _queue_ can be any queue-like object; it’s used as-is by the [`enqueue()`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.QueueHandler.enqueue "logging.handlers.QueueHandler.enqueue") method, which needs to know how to send messages to it. The queue is not _required_ to have the task tracking API, which means that you can use [`SimpleQueue`](https://docs.python.org/3/library/queue.html#queue.SimpleQueue "queue.SimpleQueue") instances for _queue_.
Note
If you are using [`multiprocessing`](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing "multiprocessing: Process-based parallelism."), you should avoid using [`SimpleQueue`](https://docs.python.org/3/library/queue.html#queue.SimpleQueue "queue.SimpleQueue") and instead use [`multiprocessing.Queue`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue "multiprocessing.Queue").