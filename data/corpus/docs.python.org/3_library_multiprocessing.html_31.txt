Title: Multiprocessing Manager List Operations
URL: https://docs.python.org/3/library/multiprocessing.html
Summary: This documentation chunk demonstrates the usage of a multiprocessing manager list in Python. It illustrates how to access the length and specific items of the list through method calls, including handling of an IndexError when accessing an out-of-range index. It also briefly mentions methods for obtaining a copy of the referent and returning representations of the proxy object.
---

```
>>> l = manager.list(range(10))
>>> l._callmethod('__len__')
10
>>> l._callmethod('__getitem__', (slice(2, 7),)) # equivalent to l[2:7]
[2, 3, 4, 5, 6]
>>> l._callmethod('__getitem__', (20,))     # equivalent to l[20]
Traceback (most recent call last):
...
IndexError: list index out of range

```


_getvalue()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.BaseProxy._getvalue "Link to this definition")
    
Return a copy of the referent.
If the referent is unpicklable then this will raise an exception. 

__repr__()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.BaseProxy.__repr__ "Link to this definition")
    
Return a representation of the proxy object. 

__str__()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.BaseProxy.__str__ "Link to this definition")
    
Return the representation of the referent.
#### Cleanup[¶](https://docs.python.org/3/library/multiprocessing.html#cleanup "Link to this heading")
A proxy object uses a weakref callback so that when it gets garbage collected it deregisters itself from the manager which owns its referent.
A shared object gets deleted from the manager process when there are no longer any proxies referring to it.
### Process Pools[¶](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.pool "Link to this heading")
One can create a pool of processes which will carry out tasks submitted to it with the [`Pool`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool "multiprocessing.pool.Pool") class.