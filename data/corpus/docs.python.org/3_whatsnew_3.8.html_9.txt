Title: What's New in Python 3.8 - Asyncio Enhancements
URL: https://docs.python.org/3/whatsnew/3.8.html
Summary: In Python 3.8, the `asyncio.CancelledError` now inherits from `BaseException` instead of `Exception`, and it no longer inherits from `concurrent.futures.CancelledError`. Additionally, on Windows, the default event loop has been changed to `ProactorEventLoop`.
---

```

(Contributed by Yury Selivanov in [bpo-37028](https://bugs.python.org/issue?@action=redirect&bpo=37028).)
The exception [`asyncio.CancelledError`](https://docs.python.org/3/library/asyncio-exceptions.html#asyncio.CancelledError "asyncio.CancelledError") now inherits from [`BaseException`](https://docs.python.org/3/library/exceptions.html#BaseException "BaseException") rather than [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception "Exception") and no longer inherits from [`concurrent.futures.CancelledError`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.CancelledError "concurrent.futures.CancelledError"). (Contributed by Yury Selivanov in [bpo-32528](https://bugs.python.org/issue?@action=redirect&bpo=32528).)
On Windows, the default event loop is now [`ProactorEventLoop`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.ProactorEventLoop "asyncio.ProactorEventLoop"). (Contributed by Victor Stinner in [bpo-34687](https://bugs.python.org/issue?@action=redirect&bpo=34687).)
[`ProactorEventLoop`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.ProactorEventLoop "asyncio.ProactorEventLoop") now also supports UDP. (Contributed by Adam Meily and Andrew Svetlov in [bpo-29883](https://bugs.python.org/issue?@action=redirect&bpo=29883).)
[`ProactorEventLoop`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.ProactorEventLoop "asyncio.ProactorEventLoop") can now be interrupted by [`KeyboardInterrupt`](https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt "KeyboardInterrupt") (“CTRL+C”). (Contributed by Vladimir Matveev in [bpo-23057](https://bugs.python.org/issue?@action=redirect&bpo=23057).)
Added [`asyncio.Task.get_coro()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.get_coro "asyncio.Task.get_coro") for getting the wrapped coroutine within an [`asyncio.Task`](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task "asyncio.Task"). (Contributed by Alex Grönholm in [bpo-36999](https://bugs.python.org/issue?@action=redirect&bpo=36999).)
Asyncio tasks can now be named, either by passing the `name` keyword argument to [`asyncio.create_task()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.create_task "asyncio.create_task") or the [`create_task()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_task "asyncio.loop.create_task") event loop method, or by calling the [`set_name()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.set_name "asyncio.Task.set_name") method on the task object. The task name is visible in the `repr()` output of [`asyncio.Task`](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task "asyncio.Task") and can also be retrieved using the [`get_name()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.get_name "asyncio.Task.get_name") method. (Contributed by Alex Grönholm in [bpo-34270](https://bugs.python.org/issue?@action=redirect&bpo=34270).)
Added support for [Happy Eyeballs](https://en.wikipedia.org/wiki/Happy_Eyeballs) to [`asyncio.loop.create_connection()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_connection "asyncio.loop.create_connection"). To specify the behavior, two new parameters have been added: _happy_eyeballs_delay_ and _interleave_. The Happy Eyeballs algorithm improves responsiveness in applications that support IPv4 and IPv6 by attempting to simultaneously connect using both. (Contributed by twisteroid ambassador in [bpo-33530](https://bugs.python.org/issue?@action=redirect&bpo=33530).)
### builtins[¶](https://docs.python.org/3/whatsnew/3.8.html#builtins "Link to this heading")
The [`compile()`](https://docs.python.org/3/library/functions.html#compile "compile") built-in has been improved to accept the `ast.PyCF_ALLOW_TOP_LEVEL_AWAIT` flag. With this new flag passed, [`compile()`](https://docs.python.org/3/library/functions.html#compile "compile") will allow top-level `await`, `async for` and `async with` constructs that are usually considered invalid syntax. Asynchronous code object marked with the `CO_COROUTINE` flag may then be returned. (Contributed by Matthias Bussonnier in [bpo-34616](https://bugs.python.org/issue?@action=redirect&bpo=34616))
### collections[¶](https://docs.python.org/3/whatsnew/3.8.html#collections "Link to this heading")
The [`_asdict()`](https://docs.python.org/3/library/collections.html#collections.somenamedtuple._asdict "collections.somenamedtuple._asdict") method for [`collections.namedtuple()`](https://docs.python.org/3/library/collections.html#collections.namedtuple "collections.namedtuple") now returns a [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") instead of a [`collections.OrderedDict`](https://docs.python.org/3/library/collections.html#collections.OrderedDict "collections.OrderedDict"). This works because regular dicts have guaranteed ordering since Python 3