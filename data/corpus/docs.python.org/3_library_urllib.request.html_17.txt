Title: Using PUT Requests and Basic HTTP Authentication with urllib.request
URL: https://docs.python.org/3/library/urllib.request.html
Summary: This documentation chunk provides examples of how to perform a PUT request using urllib.request and demonstrates the use of Basic HTTP Authentication. The first example shows how to create a PUT request with specific data, while the second example outlines the creation of an opener for Basic HTTP Authentication to access a secured URL.
---

```

Here is an example of doing a `PUT` request using [`Request`](https://docs.python.org/3/library/urllib.request.html#urllib.request.Request "urllib.request.Request"):
```
importurllib.request
DATA = b'some data'
req = urllib.request.Request(url='http://localhost:8080', data=DATA, method='PUT')
with urllib.request.urlopen(req) as f:
  pass
print(f.status)
print(f.reason)

```

Use of Basic HTTP Authentication:
```
importurllib.request
# Create an OpenerDirector with support for Basic HTTP Authentication...
auth_handler = urllib.request.HTTPBasicAuthHandler()
auth_handler.add_password(realm='PDQ Application',
             uri='https://mahler:8092/site-updates.py',
             user='klem',
             passwd='kadidd!ehopper')
opener = urllib.request.build_opener(auth_handler)
# ...and install it globally so it can be used with urlopen.
urllib.request.install_opener(opener)
with urllib.request.urlopen('http://www.example.com/login.html') as f:
  print(f.read().decode('utf-8'))

```

[`build_opener()`](https://docs.python.org/3/library/urllib.request.html#urllib.request.build_opener "urllib.request.build_opener") provides many handlers by default, including a [`ProxyHandler`](https://docs.python.org/3/library/urllib.request.html#urllib.request.ProxyHandler "urllib.request.ProxyHandler"). By default, [`ProxyHandler`](https://docs.python.org/3/library/urllib.request.html#urllib.request.ProxyHandler "urllib.request.ProxyHandler") uses the environment variables named `<scheme>_proxy`, where `<scheme>` is the URL scheme involved. For example, the `http_proxy` environment variable is read to obtain the HTTP proxyâ€™s URL.
This example replaces the default [`ProxyHandler`](https://docs.python.org/3/library/urllib.request.html#urllib.request.ProxyHandler "urllib.request.ProxyHandler") with one that uses programmatically supplied proxy URLs, and adds proxy authorization support with [`ProxyBasicAuthHandler`](https://docs.python.org/3/library/urllib.request.html#urllib.request.ProxyBasicAuthHandler "urllib.request.ProxyBasicAuthHandler").
```
proxy_handler = urllib.request.ProxyHandler({'http': 'http://www.example.com:3128/'})
proxy_auth_handler = urllib.request.ProxyBasicAuthHandler()
proxy_auth_handler.add_password('realm', 'host', 'username', 'password')
opener = urllib.request.build_opener(proxy_handler, proxy_auth_handler)
# This time, rather than install the OpenerDirector, we use it directly:
with opener.open('http://www.example.com/login.html') as f:
  print(f.read().decode('utf-8'))

```

Adding HTTP headers:
Use the _headers_ argument to the [`Request`](https://docs.python.org/3/library/urllib.request.html#urllib.request.Request "urllib.request.Request") constructor, or:
```
importurllib.request
req = urllib.request.Request('http://www.example.com/')
req.add_header('Referer', 'http://www.python.org/')
# Customize the default User-Agent header value:
req.add_header('User-Agent', 'urllib-example/0.1 (Contact: . . .)')
with urllib.request.urlopen(req) as f:
  print(f.read().decode('utf-8'))

```

[`OpenerDirector`](https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector "urllib.request.OpenerDirector") automatically adds a _User-Agent_ header to every [`Request`](https://docs.python.org/3/library/urllib.request.html#urllib.request.Request "urllib.request.Request"). To change this:
```
importurllib.request
opener = urllib.request.build_opener()
opener.addheaders = [('User-agent', 'Mozilla/5.0')]
with opener.open('http://www.example.com/') as f:
  print(f.read().decode('utf-8'))

```

Also, remember that a few standard headers (_Content-Length_ , _Content-Type_ and _Host_) are added when the [`Request`](https://docs.python.org/3/library/urllib.request.html#urllib.request.Request "urllib.request.Request") is passed to [`urlopen()`](https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen "urllib.request.urlopen") (or [`OpenerDirector.open()`](https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector.open "urllib.request.OpenerDirector.open")).
Here is an example session that uses the `GET` method to retrieve a URL containing parameters:
>>>```
>>> importurllib.request
>>> importurllib.parse
>>> params = urllib.parse.urlencode({'spam': 1, 'eggs': 2, 'bacon': 0})
>>> url = "http://www.musi-cal.com/cgi-bin/query?%s" % params
>>> with urllib.request.urlopen(url) as f:
...   print(f.read().decode('utf-8'))
...

```

The following example uses the `POST` method instead. Note that params output from urlencode is encoded to bytes before it is sent to urlopen as data:
>>>```
>>> importurllib.request
>>> importurllib.parse
>>> data = urllib.parse.urlencode({'spam': 1, 'eggs': 2, 'bacon': 0})
>>> data = data.encode('ascii')
>>> with urllib.request.urlopen("http://requestb.in/xrbl82xr", data) as f:
...   print(f.read().decode('utf-8'))
...

```

The following example uses an explicitly specified HTTP proxy, overriding environment settings:
>>>