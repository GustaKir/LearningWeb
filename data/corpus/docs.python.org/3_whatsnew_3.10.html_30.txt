Title: Python 3.10 C-API Enhancements
URL: https://docs.python.org/3/whatsnew/3.10.html
Summary: This chunk details enhancements to the Python C-API in version 3.10, including the introduction of `PySet_CheckExact` for checking set instances, `PyErr_SetInterruptEx()` for simulating interrupts, and support for a limited C API in debug mode.
---

org/3/c-api/set.html#c.PySet_CheckExact "PySet_CheckExact") function to the C-API to check if an object is an instance of [`set`](https://docs.python.org/3/library/stdtypes.html#set "set") but not an instance of a subtype. (Contributed by Pablo Galindo in [bpo-43277](https://bugs.python.org/issue?@action=redirect&bpo=43277).)
  * Add [`PyErr_SetInterruptEx()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_SetInterruptEx "PyErr_SetInterruptEx") which allows passing a signal number to simulate. (Contributed by Antoine Pitrou in [bpo-43356](https://bugs.python.org/issue?@action=redirect&bpo=43356).)
  * The limited C API is now supported if [Python is built in debug mode](https://docs.python.org/3/using/configure.html#debug-build) (if the `Py_DEBUG` macro is defined). In the limited C API, the [`Py_INCREF()`](https://docs.python.org/3/c-api/refcounting.html#c.Py_INCREF "Py_INCREF") and [`Py_DECREF()`](https://docs.python.org/3/c-api/refcounting.html#c.Py_DECREF "Py_DECREF") functions are now implemented as opaque function calls, rather than accessing directly the [`PyObject.ob_refcnt`](https://docs.python.org/3/c-api/typeobj.html#c.PyObject.ob_refcnt "PyObject.ob_refcnt") member, if Python is built in debug mode and the `Py_LIMITED_API` macro targets Python 3.10 or newer. It became possible to support the limited C API in debug mode because the [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject") structure is the same in release and debug mode since Python 3.8 (see [bpo-36465](https://bugs.python.org/issue?@action=redirect&bpo=36465)).
The limited C API is still not supported in the [`--with-trace-refs`](https://docs.python.org/3/using/configure.html#cmdoption-with-trace-refs) special build (`Py_TRACE_REFS` macro). (Contributed by Victor Stinner in [bpo-43688](https://bugs.python.org/issue?@action=redirect&bpo=43688).)
  * Add the [`Py_Is(x, y)`](https://docs.python.org/3/c-api/structures.html#c.Py_Is "Py_Is") function to test if the _x_ object is the _y_ object, the same as `x is y` in Python. Add also the [`Py_IsNone()`](https://docs.python.org/3/c-api/structures.html#c.Py_IsNone "Py_IsNone"), [`Py_IsTrue()`](https://docs.python.org/3/c-api/structures.html#c.Py_IsTrue "Py_IsTrue"), [`Py_IsFalse()`](https://docs.python.org/3/c-api/structures.html#c.Py_IsFalse "Py_IsFalse") functions to test if an object is, respectively, the `None` singleton, the `True` singleton or the `False` singleton. (Contributed by Victor Stinner in [bpo-43753](https://bugs.python.org/issue?@action=redirect&bpo=43753).)
  * Add new functions to control the garbage collector from C code: [`PyGC_Enable()`](https://docs.python.org/3/c-api/gcsupport.html#c.PyGC_Enable "PyGC_Enable"), [`PyGC_Disable()`](https://docs.python.org/3/c-api/gcsupport.html#c.PyGC_Disable "PyGC_Disable"), [`PyGC_IsEnabled()`](https://docs.python.org/3/c-api/gcsupport.html#c.PyGC_IsEnabled "PyGC_IsEnabled"). These functions allow to activate, deactivate and query the state of the garbage collector from C code without having to import the [`gc`](https://docs.python.org/3/library/gc.html#module-gc "gc: Interface to the cycle-detecting garbage collector.") module.
  * Add a new [`Py_TPFLAGS_DISALLOW_INSTANTIATION`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_DISALLOW_INSTANTIATION "Py_TPFLAGS_DISALLOW_INSTANTIATION") type flag to disallow creating type instances. (Contributed by Victor Stinner in [bpo-43916](https://bugs.python.org/issue?@action=redirect&bpo=43916).)
  * Add a new [`Py_TPFLAGS_IMMUTABLETYPE`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_IMMUTABLETYPE "Py_TPFLAGS_IMMUTABLETYPE") type flag for creating immutable type objects: type attributes cannot be set nor deleted. (Contributed by Victor Stinner and Erlend E. Aasland in [bpo-43908](https://bugs.python.org/issue?@action=redirect&bpo=43908).)