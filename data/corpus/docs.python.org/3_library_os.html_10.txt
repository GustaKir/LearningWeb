Title: Functions os.umask and os.uname
URL: https://docs.python.org/3/library/os.html
Summary: The os.umask function sets the current numeric umask and returns the previous umask, although it is a stub on WASI platforms. The os.uname function provides information about the current operating system, returning an object with attributes for the OS name, machine name, release version, and hardware identifier. It is also iterable like a five-tuple.
---

os.umask(_mask_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.umask "Link to this definition")
    
Set the current numeric umask and return the previous umask.
The function is a stub on WASI, see [WebAssembly platforms](https://docs.python.org/3/library/intro.html#wasm-availability) for more information. 

os.uname()[¶](https://docs.python.org/3/library/os.html#os.uname "Link to this definition")
    
Returns information identifying the current operating system. The return value is an object with five attributes:
  * `sysname` - operating system name
  * `nodename` - name of machine on network (implementation-defined)
  * `release` - operating system release
  * `version` - operating system version
  * `machine` - hardware identifier


For backwards compatibility, this object is also iterable, behaving like a five-tuple containing `sysname`, `nodename`, `release`, `version`, and `machine` in that order.
Some systems truncate `nodename` to 8 characters or to the leading component; a better way to get the hostname is [`socket.gethostname()`](https://docs.python.org/3/library/socket.html#socket.gethostname "socket.gethostname") or even `socket.gethostbyaddr(socket.gethostname())`.
On macOS, iOS and Android, this returns the _kernel_ name and version (i.e., `'Darwin'` on macOS and iOS; `'Linux'` on Android). [`platform.uname()`](https://docs.python.org/3/library/platform.html#platform.uname "platform.uname") can be used to get the user-facing operating system name and version on iOS and Android.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix.
Changed in version 3.3: Return type changed from a tuple to a tuple-like object with named attributes. 

os.unsetenv(_key_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.unsetenv "Link to this definition")
    
Unset (delete) the environment variable named _key_. Such changes to the environment affect subprocesses started with [`os.system()`](https://docs.python.org/3/library/os.html#os.system "os.system"), [`popen()`](https://docs.python.org/3/library/os.html#os.popen "os.popen") or [`fork()`](https://docs.python.org/3/library/os.html#os.fork "os.fork") and [`execv()`](https://docs.python.org/3/library/os.html#os.execv "os.execv").
Deletion of items in [`os.environ`](https://docs.python.org/3/library/os.html#os.environ "os.environ") is automatically translated into a corresponding call to [`unsetenv()`](https://docs.python.org/3/library/os.html#os.unsetenv "os.unsetenv"); however, calls to [`unsetenv()`](https://docs.python.org/3/library/os.html#os.unsetenv "os.unsetenv") don’t update [`os.environ`](https://docs.python.org/3/library/os.html#os.environ "os.environ"), so it is actually preferable to delete items of [`os.environ`](https://docs.python.org/3/library/os.html#os.environ "os.environ").
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.unsetenv` with argument `key`.
Changed in version 3.9: The function is now always available and is also available on Windows. 

os.unshare(_flags_)[¶](https://docs.python.org/3/library/os.html#os.unshare "Link to this definition")
    
Disassociate parts of the process execution context, and move them into a newly created namespace. See the _[unshare(2)](https://manpages.debian.org/unshare\(2\))_ man page for more details. The _flags_ argument is a bit mask, combining zero or more of the [CLONE_* constants](https://docs.python.org/3/library/os.html#os-unshare-clone-flags), that specifies which parts of the execution context should be unshared from their existing associations and moved to a new namespace. If the _flags_ argument is `0`, no changes are made to the calling process’s execution context.
[Availability](https://docs.python.org/3/library/intro.html#availability): Linux >= 2.6.16.
Added in version 3.12.
See also
The [`setns()`](https://docs.python.org/3/library/os.html#os.setns "os.setns") function.
Flags to the [`unshare()`](https://docs.python.org/3/library/os.html#os.unshare "os.unshare") function, if the implementation supports them. See _[unshare(2)](https://manpages.debian.org/unshare\(2\))_ in the Linux manual for their exact effect and availability. 

os.CLONE_FILES[¶](https://docs.python.org/3/library/os.html#os.CLONE_FILES "Link to this definition")


os.CLONE_FS[¶](https://docs.python.org/3/library/os.html#os.CLONE_FS "Link to this definition")


os.CLONE_NEWCGROUP[¶](https://docs.python.org/3/library/os.html#os.CLONE_NEWCGROUP "Link to this definition")


os.CLONE_NEWIPC[¶](https://docs.python.org/3/library/os.html#os.CLONE_NEWIPC "Link to this definition")


os.CLONE_NEWNET[¶](https://docs.python.org/3/library/os.html#os.CLONE_NEWNET "Link to this definition")


os.CLONE_NEWNS[¶](https://docs.python.org/3/library/os.html#os.CLONE_NEWNS "Link to this definition")


os.CLONE_NEWPID[¶](https://docs.python.org/3/library/os.html#os.CLONE_NEWPID "Link to this definition")