Title: importlib.resources.abc - Abstract Base Classes for Resources
URL: https://docs.python.org/3/library/importlib.resources.abc.html
Summary: This section covers the abstract base classes related to resource management in the `importlib.resources` module, providing guidelines on how to handle package resources effectively.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
#### Previous topic
[`importlib.resources` – Package resource reading, opening and access](https://docs.python.org/3/library/importlib.resources.html "previous chapter")
#### Next topic
[`importlib.metadata` – Accessing package metadata](https://docs.python.org/3/library/importlib.metadata.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/importlib.resources.abc.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/importlib.metadata.html "importlib.metadata – Accessing package metadata") |
  * [previous](https://docs.python.org/3/library/importlib.resources.html "importlib.resources – Package resource reading, opening and access") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Importing Modules](https://docs.python.org/3/library/modules.html) »
  * [`importlib.resources.abc` – Abstract base classes for resources](https://docs.python.org/3/library/importlib.resources.abc.html)
  * | 
  * Theme  Auto Light Dark |


# `importlib.resources.abc` – Abstract base classes for resources[¶](https://docs.python.org/3/library/importlib.resources.abc.html#module-importlib.resources.abc "Link to this heading")
**Source code:** [Lib/importlib/resources/abc.py](https://github.com/python/cpython/tree/3.13/Lib/importlib/resources/abc.py)
Added in version 3.11. 

_class_ importlib.resources.abc.ResourceReader[¶](https://docs.python.org/3/library/importlib.resources.abc.html#importlib.resources.abc.ResourceReader "Link to this definition")
    
_Superseded by TraversableResources_
An [abstract base class](https://docs.python.org/3/glossary.html#term-abstract-base-class) to provide the ability to read _resources_.
From the perspective of this ABC, a _resource_ is a binary artifact that is shipped within a package. Typically this is something like a data file that lives next to the `__init__.py` file of the package. The purpose of this class is to help abstract out the accessing of such data files so that it does not matter if the package and its data file(s) are stored e.g. in a zip file versus on the file system.
For any of methods of this class, a _resource_ argument is expected to be a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object) which represents conceptually just a file name. This means that no subdirectory paths should be included in the _resource_ argument. This is because the location of the package the reader is for, acts as the “directory”. Hence the metaphor for directories and file names is packages and resources, respectively. This is also why instances of this class are expected to directly correlate to a specific package (instead of potentially representing multiple packages or a module).
Loaders that wish to support resource reading are expected to provide a method called `get_resource_reader(fullname)` which returns an object implementing this ABC’s interface. If the module specified by fullname is not a package, this method should return [`None`](https://docs.python.org/3/library/constants.html#None "None"). An object compatible with this ABC should only be returned when the specified module is a package.
Deprecated since version 3.12: Use [`importlib.resources.abc.TraversableResources`](https://docs.python.org/3/library/importlib.resources.abc.html#importlib.resources.abc.TraversableResources "importlib.resources.abc.TraversableResources") instead. 

_abstractmethod_ open_resource(_resource_)[¶](https://docs.python.org/3/library/importlib.resources.abc.html#importlib.resources.abc.ResourceReader.open_resource "Link to this definition")
    
> Returns an opened, [file-like object](https://docs.python.org/3/glossary.html#term-file-like-object) for binary reading of the _resource_.
> If the resource cannot be found, [`FileNotFoundError`](https://docs.python.org/3/library/exceptions.html#FileNotFoundError "FileNotFoundError") is raised.