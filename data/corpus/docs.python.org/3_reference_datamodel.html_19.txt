Title: Yielded Range Properties in Python Bytecode
URL: https://docs.python.org/3/reference/datamodel.html
Summary: This section outlines the properties of ranges yielded in Python's bytecode, highlighting that the first range starts at 0, ranges are non-decreasing and consecutive, and no range is backwards. It also notes the allowance of zero-width ranges, which indicate lines eliminated by the bytecode compiler, and mentions the addition of these features in version 3.10 along with a reference to PEP 626.
---

The items yielded will have the following properties:
  * The first range yielded will have a `start` of 0.
  * The `(start, end)` ranges will be non-decreasing and consecutive. That is, for any pair of [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple")s, the `start` of the second will be equal to the `end` of the first.
  * No range will be backwards: `end >= start` for all triples.
  * The last [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple") yielded will have `end` equal to the size of the [bytecode](https://docs.python.org/3/glossary.html#term-bytecode).


Zero-width ranges, where `start == end`, are allowed. Zero-width ranges are used for lines that are present in the source code, but have been eliminated by the [bytecode](https://docs.python.org/3/glossary.html#term-bytecode) compiler.
Added in version 3.10.
See also 

[**PEP 626**](https://peps.python.org/pep-0626/) - Precise line numbers for debugging and other tools.
    
The PEP that introduced the `co_lines()` method. 

codeobject.replace(_** kwargs_)[¶](https://docs.python.org/3/reference/datamodel.html#codeobject.replace "Link to this definition")
    
Return a copy of the code object with new values for the specified fields.
Code objects are also supported by the generic function [`copy.replace()`](https://docs.python.org/3/library/copy.html#copy.replace "copy.replace").
Added in version 3.8.
#### 3.2.13.2. Frame objects[¶](https://docs.python.org/3/reference/datamodel.html#frame-objects "Link to this heading")
Frame objects represent execution frames. They may occur in [traceback objects](https://docs.python.org/3/reference/datamodel.html#traceback-objects), and are also passed to registered trace functions.
##### 3.2.13.2.1. Special read-only attributes[¶](https://docs.python.org/3/reference/datamodel.html#index-66 "Link to this heading") 

frame.f_back[¶](https://docs.python.org/3/reference/datamodel.html#frame.f_back "Link to this definition")
| Points to the previous stack frame (towards the caller), or `None` if this is the bottom stack frame  
---|--- 

frame.f_code[¶](https://docs.python.org/3/reference/datamodel.html#frame.f_code "Link to this definition")
| The [code object](https://docs.python.org/3/reference/datamodel.html#code-objects) being executed in this frame. Accessing this attribute raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `object.__getattr__` with arguments `obj` and `"f_code"`. 

frame.f_locals[¶](https://docs.python.org/3/reference/datamodel.html#frame.f_locals "Link to this definition")
| The mapping used by the frame to look up [local variables](https://docs.python.org/3/reference/executionmodel.html#naming). If the frame refers to an [optimized scope](https://docs.python.org/3/glossary.html#term-optimized-scope), this may return a write-through proxy object. Changed in version 3.13: Return a proxy for optimized scopes. 

frame.f_globals[¶](https://docs.python.org/3/reference/datamodel.html#frame.f_globals "Link to this definition")
| The dictionary used by the frame to look up [global variables](https://docs.python.org/3/reference/executionmodel.html#naming) 

frame.f_builtins[¶](https://docs.python.org/3/reference/datamodel.html#frame.f_builtins "Link to this definition")
| The dictionary used by the frame to look up [built-in (intrinsic) names](https://docs.python.org/3/reference/executionmodel.html#naming) 

frame.f_lasti[¶](https://docs.python.org/3/reference/datamodel.html#frame.f_lasti "Link to this definition")
| The “precise instruction” of the frame object (this is an index into the [bytecode](https://docs.python.org/3/glossary.html#term-bytecode) string of the [code object](https://docs.python.org/3/reference/datamodel.html#code-objects))  
##### 3.2.13.2.2. Special writable attributes[¶](https://docs.python.org/3/reference/datamodel.html#index-67 "Link to this heading") 

frame.f_trace[¶](https://docs.python.org/3/reference/datamodel.html#frame.f_trace "Link to this definition")
| If not `None`, this is a function called for various events during code execution (this is used by debuggers). Normally an event is triggered for each new source line (see [`f_trace_lines`](https://docs.python.org/3/reference/datamodel.html#frame.f_trace_lines "frame.f_trace_lines")).  
---|--- 

frame.f_trace_lines[¶](https://docs.python.org/3/reference/datamodel.html#frame.f_trace_lines "Link to this definition")
| Set this attribute to [`False`](https://docs.python.org/3/library/constants.html#False "False") to disable triggering a tracing event for each source line.