Title: Readline Index and Completer Functions
URL: https://docs.python.org/3/library/readline.html
Summary: This section discusses functions related to the readline library, including getting the beginning and ending indices of the completion scope with `get_begidx()` and `get_endidx()`, and managing word delimiters for completion with `set_completer_delims()` and `get_completer_delims()`. It highlights potential variations in behavior based on different underlying C readline implementations.
---

readline.get_begidx()[¶](https://docs.python.org/3/library/readline.html#readline.get_begidx "Link to this definition")


readline.get_endidx()[¶](https://docs.python.org/3/library/readline.html#readline.get_endidx "Link to this definition")
    
Get the beginning or ending index of the completion scope. These indexes are the _start_ and _end_ arguments passed to the `rl_attempted_completion_function` callback of the underlying library. The values may be different in the same input editing scenario based on the underlying C readline implementation. Ex: libedit is known to behave differently than libreadline. 

readline.set_completer_delims(_string_)[¶](https://docs.python.org/3/library/readline.html#readline.set_completer_delims "Link to this definition")


readline.get_completer_delims()[¶](https://docs.python.org/3/library/readline.html#readline.get_completer_delims "Link to this definition")
    
Set or get the word delimiters for completion. These determine the start of the word to be considered for completion (the completion scope). These functions access the `rl_completer_word_break_characters` variable in the underlying library. 

readline.set_completion_display_matches_hook([_function_])[¶](https://docs.python.org/3/library/readline.html#readline.set_completion_display_matches_hook "Link to this definition")
    
Set or remove the completion display function. If _function_ is specified, it will be used as the new completion display function; if omitted or `None`, any completion display function already installed is removed. This sets or clears the `rl_completion_display_matches_hook` callback in the underlying library. The completion display function is called as `function(substitution, [matches], longest_match_length)` once each time matches need to be displayed.
## Example[¶](https://docs.python.org/3/library/readline.html#example "Link to this heading")
The following example demonstrates how to use the [`readline`](https://docs.python.org/3/library/readline.html#module-readline "readline: GNU readline support for Python. \(Unix\)") module’s history reading and writing functions to automatically load and save a history file named `.python_history` from the user’s home directory. The code below would normally be executed automatically during interactive sessions from the user’s [`PYTHONSTARTUP`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONSTARTUP) file.
```
importatexit
importos
importreadline
histfile = os.path.join(os.path.expanduser("~"), ".python_history")
try:
  readline.read_history_file(histfile)
  # default history len is -1 (infinite), which may grow unruly
  readline.set_history_length(1000)
except FileNotFoundError:
  pass
atexit.register(readline.write_history_file, histfile)

```

This code is actually automatically run when Python is run in [interactive mode](https://docs.python.org/3/tutorial/interpreter.html#tut-interactive) (see [Readline configuration](https://docs.python.org/3/library/site.html#rlcompleter-config)).
The following example achieves the same goal but supports concurrent interactive sessions, by only appending the new history.
```
importatexit
importos
importreadline
histfile = os.path.join(os.path.expanduser("~"), ".python_history")
try:
  readline.read_history_file(histfile)
  h_len = readline.get_current_history_length()
except FileNotFoundError:
  open(histfile, 'wb').close()
  h_len = 0
defsave(prev_h_len, histfile):
  new_h_len = readline.get_current_history_length()
  readline.set_history_length(1000)
  readline.append_history_file(new_h_len - prev_h_len, histfile)
atexit.register(save, h_len, histfile)

```

The following example extends the [`code.InteractiveConsole`](https://docs.python.org/3/library/code.html#code.InteractiveConsole "code.InteractiveConsole") class to support history save/restore.
```
importatexit
importcode
importos
importreadline
classHistoryConsole(code.InteractiveConsole):
  def__init__(self, locals=None, filename="<console>",
         histfile=os.path.expanduser("~/.console-history")):
    code.InteractiveConsole.__init__(self, locals, filename)
    self.init_history(histfile)
  definit_history(self, histfile):
    readline.parse_and_bind("tab: complete")
    if hasattr(readline, "read_history_file"):
      try:
        readline.read_history_file(histfile)
      except FileNotFoundError:
        pass
      atexit.register(self.save_history, histfile)
  defsave_history(self, histfile):
    readline.set_history_length(1000)
    readline.write_history_file(histfile)