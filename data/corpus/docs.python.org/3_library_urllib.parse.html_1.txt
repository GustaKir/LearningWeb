Title: urllib.parse.urlparse Function
URL: https://docs.python.org/3/library/urllib.parse.html
Summary: The `urlparse` function in the `urllib.parse` module parses a URL into six components: scheme, netloc, path, parameters, query, and fragment, returning them as a named tuple. The components are returned as strings without breaking them into smaller parts, and certain delimiters are preserved.
---

urllib.parse.urlparse(_urlstring_ , _scheme =''_, _allow_fragments =True_)[¶](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlparse "Link to this definition")
    
Parse a URL into six components, returning a 6-item [named tuple](https://docs.python.org/3/glossary.html#term-named-tuple). This corresponds to the general structure of a URL: `scheme://netloc/path;parameters?query#fragment`. Each tuple item is a string, possibly empty. The components are not broken up into smaller parts (for example, the network location is a single string), and % escapes are not expanded. The delimiters as shown above are not part of the result, except for a leading slash in the _path_ component, which is retained if present. For example:
>>>```
>>> fromurllib.parseimport urlparse
>>> urlparse("scheme://netloc/path;parameters?query#fragment")
ParseResult(scheme='scheme', netloc='netloc', path='/path;parameters', params='',
      query='query', fragment='fragment')
>>> o = urlparse("http://docs.python.org:80/3/library/urllib.parse.html?"
...        "highlight=params#url-parsing")
>>> o
ParseResult(scheme='http', netloc='docs.python.org:80',
      path='/3/library/urllib.parse.html', params='',
      query='highlight=params', fragment='url-parsing')
>>> o.scheme
'http'
>>> o.netloc
'docs.python.org:80'
>>> o.hostname
'docs.python.org'
>>> o.port
80
>>> o._replace(fragment="").geturl()
'http://docs.python.org:80/3/library/urllib.parse.html?highlight=params'

```

Following the syntax specifications in [**RFC 1808**](https://datatracker.ietf.org/doc/html/rfc1808.html), urlparse recognizes a netloc only if it is properly introduced by ‘//’. Otherwise the input is presumed to be a relative URL and thus to start with a path component.
>>>```
>>> fromurllib.parseimport urlparse
>>> urlparse('//www.cwi.nl:80/%7Eguido/Python.html')
ParseResult(scheme='', netloc='www.cwi.nl:80', path='/%7Eguido/Python.html',
      params='', query='', fragment='')
>>> urlparse('www.cwi.nl/%7Eguido/Python.html')
ParseResult(scheme='', netloc='', path='www.cwi.nl/%7Eguido/Python.html',
      params='', query='', fragment='')
>>> urlparse('help/Python.html')
ParseResult(scheme='', netloc='', path='help/Python.html', params='',
      query='', fragment='')

```

The _scheme_ argument gives the default addressing scheme, to be used only if the URL does not specify one. It should be the same type (text or bytes) as _urlstring_ , except that the default value `''` is always allowed, and is automatically converted to `b''` if appropriate.
If the _allow_fragments_ argument is false, fragment identifiers are not recognized. Instead, they are parsed as part of the path, parameters or query component, and `fragment` is set to the empty string in the return value.
The return value is a [named tuple](https://docs.python.org/3/glossary.html#term-named-tuple), which means that its items can be accessed by index or as named attributes, which are:
Attribute | Index | Value | Value if not present  
---|---|---|---  
`scheme` | 0 | URL scheme specifier | _scheme_ parameter  
`netloc` | 1 | Network location part | empty string  
`path` | 2 | Hierarchical path | empty string  
`params` | 3 | Parameters for last path element | empty string  
`query` | 4 | Query component | empty string  
`fragment` | 5 | Fragment identifier | empty string  
`username` |  | User name | [`None`](https://docs.python.org/3/library/constants.html#None "None")  
`password` |  | Password | [`None`](https://docs.python.org/3/library/constants.html#None "None")  
`hostname` |  | Host name (lower case) | [`None`](https://docs.python.org/3/library/constants.html#None "None")  
`port` |  | Port number as integer, if present | [`None`](https://docs.python.org/3/library/constants.html#None "None")  
Reading the `port` attribute will raise a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if an invalid port is specified in the URL. See section [Structured Parse Results](https://docs.python.org/3/library/urllib.parse.html#urlparse-result-object) for more information on the result object.
Unmatched square brackets in the `netloc` attribute will raise a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError").
Characters in the `netloc` attribute that decompose under NFKC normalization (as used by the IDNA encoding) into any of `/`, `?`, `#`, `@`, or `:` will raise a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError"). If the URL is decomposed before parsing, no error will be raised.
As is the case with all named tuples, the subclass has a few additional methods and attributes that are particularly useful. One such method is `_replace()`. The `_replace()` method will return a new ParseResult object replacing specified fields with new values.
>>>