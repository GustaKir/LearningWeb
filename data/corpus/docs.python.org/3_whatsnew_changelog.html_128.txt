Title: Python C API Enhancements
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This document chunk details several enhancements to the Python C API including the introduction of performance-related functions such as `PyUnstable_PerfTrampoline_CompileCode()` and improved memory allocation functions like `PyMem_RawMalloc()`. It highlights issues addressed in pull requests and focuses on extending functionalities for better performance and memory management.
---

rseTupleAndKeywords "PyArg_ParseTupleAndKeywords").
  * [gh-109587](https://github.com/python/cpython/issues/109587): Introduced `PyUnstable_PerfTrampoline_CompileCode()`, `PyUnstable_PerfTrampoline_SetPersistAfterFork()` and `PyUnstable_CopyPerfMapFile()`. These functions allow extension modules to initialize trampolines eagerly, after the application is “warmed up”. This makes it possible to have perf-trampolines running in an always-enabled fashion.
  * [gh-85283](https://github.com/python/cpython/issues/85283): Add the [`PySys_Audit()`](https://docs.python.org/3/c-api/sys.html#c.PySys_Audit "PySys_Audit") function to the limited C API. Patch by Victor Stinner.
  * [gh-85283](https://github.com/python/cpython/issues/85283): Add [`PyMem_RawMalloc()`](https://docs.python.org/3/c-api/memory.html#c.PyMem_RawMalloc "PyMem_RawMalloc"), [`PyMem_RawCalloc()`](https://docs.python.org/3/c-api/memory.html#c.PyMem_RawCalloc "PyMem_RawCalloc"), [`PyMem_RawRealloc()`](https://docs.python.org/3/c-api/memory.html#c.PyMem_RawRealloc "PyMem_RawRealloc") and [`PyMem_RawFree()`](https://docs.python.org/3/c-api/memory.html#c.PyMem_RawFree "PyMem_RawFree") to the limited C API. Patch by Victor Stinner.
  * [gh-106672](https://github.com/python/cpython/issues/106672): Functions [`PyDict_GetItem()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_GetItem "PyDict_GetItem"), [`PyDict_GetItemString()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_GetItemString "PyDict_GetItemString"), [`PyMapping_HasKey()`](https://docs.python.org/3/c-api/mapping.html#c.PyMapping_HasKey "PyMapping_HasKey"), [`PyMapping_HasKeyString()`](https://docs.python.org/3/c-api/mapping.html#c.PyMapping_HasKeyString "PyMapping_HasKeyString"), [`PyObject_HasAttr()`](https://docs.python.org/3/c-api/object.html#c.PyObject_HasAttr "PyObject_HasAttr"), [`PyObject_HasAttrString()`](https://docs.python.org/3/c-api/object.html#c.PyObject_HasAttrString "PyObject_HasAttrString"), and [`PySys_GetObject()`](https://docs.python.org/3/c-api/sys.html#c.PySys_GetObject "PySys_GetObject"), which clear all errors occurred during calling the function, report now them using [`sys.unraisablehook()`](https://docs.python.org/3/library/sys.html#sys.unraisablehook "sys.unraisablehook").
  * [gh-67565](https://github.com/python/cpython/issues/67565): Remove redundant C-contiguity check in `getargs.c`, [`binascii`](https://docs.python.org/3/library/binascii.html#module-binascii "binascii: Tools for converting between binary and various ASCII-encoded binary representations."), [`ssl`](https://docs.python.org/3/library/ssl.html#module-ssl "ssl: TLS/SSL wrapper for socket objects") and Argument Clinic. Patched by Stefan Krah and Furkan Onder


## Python 3.13.0 alpha 1[¶](https://docs.python.org/3/whatsnew/changelog.html#python-3-13-0-alpha-1 "Link to this heading")
_Release date: 2023-10-13_
### Security[¶](https://docs.python.org/3/whatsnew/changelog.html#id130 "Link to this heading")
  * [gh-108310](https://github.com/python/cpython/issues/108310): Fixed an issue where instances of [`ssl.SSLSocket`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket "ssl.SSLSocket") were vulnerable to a bypass of the TLS handshake and included protections (like certificate verification) and treating sent unencrypted data as if it were post-handshake TLS encrypted data. Security issue reported as [**CVE 2023-40217**](https://www.cve.org/CVERecord?id=CVE-2023-40217) by Aapo Oksman. Patch by Gregory P. Smith.
  * [gh-107774](https://github.com/python/cpython/issues/107774): PEP 669 specifies that `sys.monitoring.register_callback` will generate an audit event. Pre-releases of Python 3.12 did not generate the audit event. This is now fixed.
  * [gh-102988](https://github.com/python/cpython/issues/102988): Reverted the [`email.utils`](https://docs.python.org/3/library/email.utils.html#module-email.utils "email.utils: Miscellaneous email package utilities.") security improvement change released in 3.12beta4 that unintentionally caused [`email.utils.getaddresses`](https://docs.python.org/3/library/email.utils.html#email.utils.getaddresses "email.utils.getaddresses") to fail to parse email addresses with a comma in the quoted name field. See [gh-106669](https://github.com/python/cpython/issues/106669).
  * [gh-99108](https://github.com/python/cpython/issues/99108): Refresh our new HACL* built-in [`hashlib`](https://docs.python.org/3/library/hashlib.html#module-hashlib "hashlib: Secure hash and message digest algorithms.") code from upstream. Built-in SHA2 should be faster and an issue with SHA3 on 32-bit platforms is fixed.
  * [gh-102509](https://github.com/python/cpython/issues/102509): Start initializing `ob_digit` during creation of [`PyLongObject`](https://docs.python.org/3/c-api/long.html#c.PyLongObject "PyLongObject") objects. Patch by Illia Volochii.