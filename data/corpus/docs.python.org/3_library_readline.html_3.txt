Title: Readline Module History Management Functions
URL: https://docs.python.org/3/library/readline.html
Summary: This section describes functions for managing command history in the readline module, including retrieving, removing, replacing, and adding history items. The index for retrieval is one-based, while positions for removal and replacement are zero-based.
---

readline.get_history_item(_index_)[¶](https://docs.python.org/3/library/readline.html#readline.get_history_item "Link to this definition")
    
Return the current contents of history item at _index_. The item index is one-based. This calls `history_get()` in the underlying library. 

readline.remove_history_item(_pos_)[¶](https://docs.python.org/3/library/readline.html#readline.remove_history_item "Link to this definition")
    
Remove history item specified by its position from the history. The position is zero-based. This calls `remove_history()` in the underlying library. 

readline.replace_history_item(_pos_ , _line_)[¶](https://docs.python.org/3/library/readline.html#readline.replace_history_item "Link to this definition")
    
Replace history item specified by its position with _line_. The position is zero-based. This calls `replace_history_entry()` in the underlying library. 

readline.add_history(_line_)[¶](https://docs.python.org/3/library/readline.html#readline.add_history "Link to this definition")
    
Append _line_ to the history buffer, as if it was the last line typed. This calls `add_history()` in the underlying library. 

readline.set_auto_history(_enabled_)[¶](https://docs.python.org/3/library/readline.html#readline.set_auto_history "Link to this definition")
    
Enable or disable automatic calls to `add_history()` when reading input via readline. The _enabled_ argument should be a Boolean value that when true, enables auto history, and that when false, disables auto history.
Added in version 3.6.
**CPython implementation detail:** Auto history is enabled by default, and changes to this do not persist across multiple sessions.
## Startup hooks[¶](https://docs.python.org/3/library/readline.html#startup-hooks "Link to this heading") 

readline.set_startup_hook([_function_])[¶](https://docs.python.org/3/library/readline.html#readline.set_startup_hook "Link to this definition")
    
Set or remove the function invoked by the `rl_startup_hook` callback of the underlying library. If _function_ is specified, it will be used as the new hook function; if omitted or `None`, any function already installed is removed. The hook is called with no arguments just before readline prints the first prompt. 

readline.set_pre_input_hook([_function_])[¶](https://docs.python.org/3/library/readline.html#readline.set_pre_input_hook "Link to this definition")
    
Set or remove the function invoked by the `rl_pre_input_hook` callback of the underlying library. If _function_ is specified, it will be used as the new hook function; if omitted or `None`, any function already installed is removed. The hook is called with no arguments after the first prompt has been printed and just before readline starts reading input characters. This function only exists if Python was compiled for a version of the library that supports it.
## Completion[¶](https://docs.python.org/3/library/readline.html#completion "Link to this heading")
The following functions relate to implementing a custom word completion function. This is typically operated by the Tab key, and can suggest and automatically complete a word being typed. By default, Readline is set up to be used by [`rlcompleter`](https://docs.python.org/3/library/rlcompleter.html#module-rlcompleter "rlcompleter: Python identifier completion, suitable for the GNU readline library.") to complete Python identifiers for the interactive interpreter. If the [`readline`](https://docs.python.org/3/library/readline.html#module-readline "readline: GNU readline support for Python. \(Unix\)") module is to be used with a custom completer, a different set of word delimiters should be set. 

readline.set_completer([_function_])[¶](https://docs.python.org/3/library/readline.html#readline.set_completer "Link to this definition")
    
Set or remove the completer function. If _function_ is specified, it will be used as the new completer function; if omitted or `None`, any completer function already installed is removed. The completer function is called as `function(text, state)`, for _state_ in `0`, `1`, `2`, …, until it returns a non-string value. It should return the next possible completion starting with _text_.
The installed completer function is invoked by the _entry_func_ callback passed to `rl_completion_matches()` in the underlying library. The _text_ string comes from the first parameter to the `rl_attempted_completion_function` callback of the underlying library. 

readline.get_completer()[¶](https://docs.python.org/3/library/readline.html#readline.get_completer "Link to this definition")
    
Get the completer function, or `None` if no completer function has been set. 

readline.get_completion_type()[¶](https://docs.python.org/3/library/readline.html#readline.get_completion_type "Link to this definition")
    
Get the type of completion being attempted. This returns the `rl_completion_type` variable in the underlying library as an integer.