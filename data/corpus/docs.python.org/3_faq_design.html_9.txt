Title: Hashing and List Behavior in Python
URL: https://docs.python.org/3/faq/design.html
Summary: This section discusses the complexities of hash computation for objects that may contain unhashable members and the potential for arithmetic overflow. It emphasizes the importance of maintaining consistent equality and hash behavior to avoid issues in dictionaries and hash-based structures. Additionally, it warns against modifying wrapped lists in wrapper objects while they are used in dictionaries to prevent anomalies.
---

```

Note that the hash computation is complicated by the possibility that some members of the list may be unhashable and also by the possibility of arithmetic overflow.
Furthermore it must always be the case that if `o1 == o2` (ie `o1.__eq__(o2) is True`) then `hash(o1) == hash(o2)` (ie, `o1.__hash__() == o2.__hash__()`), regardless of whether the object is in a dictionary or not. If you fail to meet these restrictions dictionaries and other hash based structures will misbehave.
In the case of `ListWrapper`, whenever the wrapper object is in a dictionary the wrapped list must not change to avoid anomalies. Don’t do this unless you are prepared to think hard about the requirements and the consequences of not meeting them correctly. Consider yourself warned.
## [Why doesn’t list.sort() return the sorted list?](https://docs.python.org/3/faq/design.html#id23)[¶](https://docs.python.org/3/faq/design.html#why-doesn-t-list-sort-return-the-sorted-list "Link to this heading")
In situations where performance matters, making a copy of the list just to sort it would be wasteful. Therefore, [`list.sort()`](https://docs.python.org/3/library/stdtypes.html#list.sort "list.sort") sorts the list in place. In order to remind you of that fact, it does not return the sorted list. This way, you won’t be fooled into accidentally overwriting a list when you need a sorted copy but also need to keep the unsorted version around.
If you want to return a new list, use the built-in [`sorted()`](https://docs.python.org/3/library/functions.html#sorted "sorted") function instead. This function creates a new list from a provided iterable, sorts it and returns it. For example, here’s how to iterate over the keys of a dictionary in sorted order:
```
for key in sorted(mydict):
  ... # do whatever with mydict[key]...