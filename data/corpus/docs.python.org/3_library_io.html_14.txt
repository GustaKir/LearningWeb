Title: io.TextIOWrapper Class
URL: https://docs.python.org/3/library/io.html
Summary: The io.TextIOWrapper class provides a buffered text stream for higher-level access to a BufferedIOBase binary stream, inheriting from TextIOBase. It supports customizable encoding, errors handling, and newline processing.
---

_class_ io.TextIOWrapper(_buffer_ , _encoding =None_, _errors =None_, _newline =None_, _line_buffering =False_, _write_through =False_)[¶](https://docs.python.org/3/library/io.html#io.TextIOWrapper "Link to this definition")
    
A buffered text stream providing higher-level access to a [`BufferedIOBase`](https://docs.python.org/3/library/io.html#io.BufferedIOBase "io.BufferedIOBase") buffered binary stream. It inherits from [`TextIOBase`](https://docs.python.org/3/library/io.html#io.TextIOBase "io.TextIOBase").
_encoding_ gives the name of the encoding that the stream will be decoded or encoded with. It defaults to [`locale.getencoding()`](https://docs.python.org/3/library/locale.html#locale.getencoding "locale.getencoding"). `encoding="locale"` can be used to specify the current locale’s encoding explicitly. See [Text Encoding](https://docs.python.org/3/library/io.html#io-text-encoding) for more information.
_errors_ is an optional string that specifies how encoding and decoding errors are to be handled. Pass `'strict'` to raise a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") exception if there is an encoding error (the default of `None` has the same effect), or pass `'ignore'` to ignore errors. (Note that ignoring encoding errors can lead to data loss.) `'replace'` causes a replacement marker (such as `'?'`) to be inserted where there is malformed data. `'backslashreplace'` causes malformed data to be replaced by a backslashed escape sequence. When writing, `'xmlcharrefreplace'` (replace with the appropriate XML character reference) or `'namereplace'` (replace with `\N{...}` escape sequences) can be used. Any other error handling name that has been registered with [`codecs.register_error()`](https://docs.python.org/3/library/codecs.html#codecs.register_error "codecs.register_error") is also valid.
_newline_ controls how line endings are handled. It can be `None`, `''`, `'\n'`, `'\r'`, and `'\r\n'`. It works as follows:
  * When reading input from the stream, if _newline_ is `None`, [universal newlines](https://docs.python.org/3/glossary.html#term-universal-newlines) mode is enabled. Lines in the input can end in `'\n'`, `'\r'`, or `'\r\n'`, and these are translated into `'\n'` before being returned to the caller. If _newline_ is `''`, universal newlines mode is enabled, but line endings are returned to the caller untranslated. If _newline_ has any of the other legal values, input lines are only terminated by the given string, and the line ending is returned to the caller untranslated.
  * When writing output to the stream, if _newline_ is `None`, any `'\n'` characters written are translated to the system default line separator, [`os.linesep`](https://docs.python.org/3/library/os.html#os.linesep "os.linesep"). If _newline_ is `''` or `'\n'`, no translation takes place. If _newline_ is any of the other legal values, any `'\n'` characters written are translated to the given string.


If _line_buffering_ is `True`, [`flush()`](https://docs.python.org/3/library/io.html#io.IOBase.flush "io.IOBase.flush") is implied when a call to write contains a newline character or a carriage return.
If _write_through_ is `True`, calls to [`write()`](https://docs.python.org/3/library/io.html#io.BufferedIOBase.write "io.BufferedIOBase.write") are guaranteed not to be buffered: any data written on the [`TextIOWrapper`](https://docs.python.org/3/library/io.html#io.TextIOWrapper "io.TextIOWrapper") object is immediately handled to its underlying binary _buffer_.
Changed in version 3.3: The _write_through_ argument has been added.
Changed in version 3.3: The default _encoding_ is now `locale.getpreferredencoding(False)` instead of `locale.getpreferredencoding()`. Don’t change temporary the locale encoding using [`locale.setlocale()`](https://docs.python.org/3/library/locale.html#locale.setlocale "locale.setlocale"), use the current locale encoding instead of the user preferred encoding.
Changed in version 3.10: The _encoding_ argument now supports the `"locale"` dummy encoding name.
[`TextIOWrapper`](https://docs.python.org/3/library/io.html#io.TextIOWrapper "io.TextIOWrapper") provides these data attributes and methods in addition to those from [`TextIOBase`](https://docs.python.org/3/library/io.html#io.TextIOBase "io.TextIOBase") and [`IOBase`](https://docs.python.org/3/library/io.html#io.IOBase "io.IOBase"): 

line_buffering[¶](https://docs.python.org/3/library/io.html#io.TextIOWrapper.line_buffering "Link to this definition")
    
Whether line buffering is enabled. 

write_through[¶](https://docs.python.org/3/library/io.html#io.TextIOWrapper.write_through "Link to this definition")
    
Whether writes are passed immediately to the underlying binary buffer.
Added in version 3.7.