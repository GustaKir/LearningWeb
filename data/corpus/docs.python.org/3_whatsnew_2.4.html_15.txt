Title: Python 2.4 Release Notes
URL: https://docs.python.org/3/whatsnew/2.4.html
Summary: The `optparse` module received updates enabling internationalization of help and error messages, and allows default values in help messages. Additionally, there is a plan to deprecate the `rfc822` module in favor of the `email` package in future releases.
---

```

(Contributed by Raymond Hettinger.)
  * The [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") module was updated in various ways. The module now passes its messages through [`gettext.gettext()`](https://docs.python.org/3/library/gettext.html#gettext.gettext "gettext.gettext"), making it possible to internationalize Optik’s help and error messages. Help messages for options can now include the string `'%default'`, which will be replaced by the option’s default value. (Contributed by Greg Ward.)
  * The long-term plan is to deprecate the `rfc822` module in some future Python release in favor of the [`email`](https://docs.python.org/3/library/email.html#module-email "email: Package supporting the parsing, manipulating, and generating email messages.") package. To this end, the [`email.Utils.formatdate`](https://docs.python.org/3/library/email.utils.html#email.utils.formatdate "email.utils.formatdate") function has been changed to make it usable as a replacement for `rfc822.formatdate()`. You may want to write new e-mail processing code with this in mind. (Change implemented by Anthony Baxter.)
  * A new `urandom(n)` function was added to the [`os`](https://docs.python.org/3/library/os.html#module-os "os: Miscellaneous operating system interfaces.") module, returning a string containing _n_ bytes of random data. This function provides access to platform-specific sources of randomness such as `/dev/urandom` on Linux or the Windows CryptoAPI. (Contributed by Trevor Perrin.)
  * Another new function: `os.path.lexists(path)` returns true if the file specified by _path_ exists, whether or not it’s a symbolic link. This differs from the existing `os.path.exists(path)` function, which returns false if _path_ is a symlink that points to a destination that doesn’t exist. (Contributed by Beni Cherniavsky.)
  * A new `getsid()` function was added to the [`posix`](https://docs.python.org/3/library/posix.html#module-posix "posix: The most common POSIX system calls \(normally used via module os\). \(Unix\)") module that underlies the [`os`](https://docs.python.org/3/library/os.html#module-os "os: Miscellaneous operating system interfaces.") module. (Contributed by J. Raynor.)
  * The [`poplib`](https://docs.python.org/3/library/poplib.html#module-poplib "poplib: POP3 protocol client \(requires sockets\).") module now supports POP over SSL. (Contributed by Hector Urtubia.)
  * The [`profile`](https://docs.python.org/3/library/profile.html#module-profile "profile: Python source profiler.") module can now profile C extension functions. (Contributed by Nick Bastin.)
  * The [`random`](https://docs.python.org/3/library/random.html#module-random "random: Generate pseudo-random numbers with various common distributions.") module has a new method called `getrandbits(N)` that returns a long integer _N_ bits in length. The existing `randrange()` method now uses `getrandbits()` where appropriate, making generation of arbitrarily large random numbers more efficient. (Contributed by Raymond Hettinger.)
  * The regular expression language accepted by the [`re`](https://docs.python.org/3/library/re.html#module-re "re: Regular expression operations.") module was extended with simple conditional expressions, written as `(?(group)A|B)`. _group_ is either a numeric group ID or a group name defined with `(?P<group>...)` earlier in the expression. If the specified group matched, the regular expression pattern _A_ will be tested against the string; if the group didn’t match, the pattern _B_ will be used instead. (Contributed by Gustavo Niemeyer.)
  * The [`re`](https://docs.python.org/3/library/re.html#module-re "re: Regular expression operations.") module is also no longer recursive, thanks to a massive amount of work by Gustavo Niemeyer. In a recursive regular expression engine, certain patterns result in a large amount of C stack space being consumed, and it was possible to overflow the stack. For example, if you matched a 30000-byte string of `a` characters against the expression `(a|b)+`, one stack frame was consumed per character. Python 2.3 tried to check for stack overflow and raise a [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError") exception, but certain patterns could sidestep the checking and if you were unlucky Python could segfault. Python 2.4’s regular expression engine can match this pattern without problems.
  * The [`signal`](https://docs.python.org/3/library/signal.html#module-signal "signal: Set handlers for asynchronous events.") module now performs tighter error-checking on the parameters to the [`signal.signal()`](https://docs.python.org/3/library/signal.html#signal.signal "signal.signal") function. For example, you can’t set a handler on the `SIGKILL` signal; previous versions of Python would quietly accept this, but 2.4 will raise a [`RuntimeError`](https://docs.python.org/3/library/exceptions.ht