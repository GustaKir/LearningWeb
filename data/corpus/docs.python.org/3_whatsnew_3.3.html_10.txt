Title: Visible Changes in Python 3.3 Import System
URL: https://docs.python.org/3/whatsnew/3.3.html
Summary: Python 3.3 introduces significant changes to the import system, notably the enhancement of `importlib` and the visibility of `sys.meta_path` and `sys.path_hooks`. These changes allow developers to better manage import state and understand the mechanisms behind module loading. It is suggested to see the 'Porting Python code' section for necessary code adjustments.
---

che`](https://docs.python.org/3/library/sys.html#sys.path_importer_cache "sys.path_importer_cache") to help clean up any stored state as necessary.
### Visible Changes[¶](https://docs.python.org/3/whatsnew/3.3.html#visible-changes "Link to this heading")
For potential required changes to code, see the [Porting Python code](https://docs.python.org/3/whatsnew/3.3.html#porting-python-code) section.
Beyond the expanse of what [`importlib`](https://docs.python.org/3/library/importlib.html#module-importlib "importlib: The implementation of the import machinery.") now exposes, there are other visible changes to import. The biggest is that [`sys.meta_path`](https://docs.python.org/3/library/sys.html#sys.meta_path "sys.meta_path") and [`sys.path_hooks`](https://docs.python.org/3/library/sys.html#sys.path_hooks "sys.path_hooks") now store all of the meta path finders and path entry hooks used by import. Previously the finders were implicit and hidden within the C code of import instead of being directly exposed. This means that one can now easily remove or change the order of the various finders to fit one’s needs.
Another change is that all modules have a `__loader__` attribute, storing the loader used to create the module. [**PEP 302**](https://peps.python.org/pep-0302/) has been updated to make this attribute mandatory for loaders to implement, so in the future once 3rd-party loaders have been updated people will be able to rely on the existence of the attribute. Until such time, though, import is setting the module post-load.
Loaders are also now expected to set the `__package__` attribute from [**PEP 366**](https://peps.python.org/pep-0366/). Once again, import itself is already setting this on all loaders from [`importlib`](https://docs.python.org/3/library/importlib.html#module-importlib "importlib: The implementation of the import machinery.") and import itself is setting the attribute post-load.
`None` is now inserted into [`sys.path_importer_cache`](https://docs.python.org/3/library/sys.html#sys.path_importer_cache "sys.path_importer_cache") when no finder can be found on [`sys.path_hooks`](https://docs.python.org/3/library/sys.html#sys.path_hooks "sys.path_hooks"). Since `imp.NullImporter` is not directly exposed on [`sys.path_hooks`](https://docs.python.org/3/library/sys.html#sys.path_hooks "sys.path_hooks") it could no longer be relied upon to always be available to use as a value representing no finder found.
All other changes relate to semantic changes which should be taken into consideration when updating code for Python 3.3, and thus should be read about in the [Porting Python code](https://docs.python.org/3/whatsnew/3.3.html#porting-python-code) section of this document.
(Implementation by Brett Cannon)
## Other Language Changes[¶](https://docs.python.org/3/whatsnew/3.3.html#other-language-changes "Link to this heading")
Some smaller changes made to the core Python language are:
  * Added support for Unicode name aliases and named sequences. Both [`unicodedata.lookup()`](https://docs.python.org/3/library/unicodedata.html#unicodedata.lookup "unicodedata.lookup") and `'\N{...}'` now resolve name aliases, and [`unicodedata.lookup()`](https://docs.python.org/3/library/unicodedata.html#unicodedata.lookup "unicodedata.lookup") resolves named sequences too.
(Contributed by Ezio Melotti in [bpo-12753](https://bugs.python.org/issue?@action=redirect&bpo=12753).)
  * Unicode database updated to UCD version 6.1.0
  * Equality comparisons on [`range()`](https://docs.python.org/3/library/stdtypes.html#range "range") objects now return a result reflecting the equality of the underlying sequences generated by those range objects. ([bpo-13201](https://bugs.python.org/issue?@action=redirect&bpo=13201))
  * The `count()`, `find()`, `rfind()`, `index()` and `rindex()` methods of [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") and [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") objects now accept an integer between 0 and 255 as their first argument.
(Contributed by Petri Lehtinen in [bpo-12170](https://bugs.python.org/issue?@action=redirect&bpo=12170).)
  * The `rjust()`, `ljust()`, and `center()` methods of [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") and [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") now accept a [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") for the `fill` argument. (Contributed by Petri Lehtinen in [bpo-12380](https://bugs.python.org/issue?@action=redirect&bpo=12380).)
  * New methods have been added to [`list`](https://docs.python.org/3/library/stdtypes.html#list "list") and [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray"): `copy()` and `clear()` ([bpo-10516](https://bugs.python.org/issue?@action=redirect&bpo=10516)).