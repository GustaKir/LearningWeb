Title: re.LOCALE Flag in Python Regular Expressions
URL: https://docs.python.org/3/library/re.html
Summary: The re.LOCALE flag makes certain regex tokens and case-insensitivity dependent on the current locale, applicable only for bytes patterns. It is discouraged in favor of Unicode matching, which is more reliable across different cultures and languages. The usage of re.LOCALE has been modified in versions 3.6 and 3.7, where it now lacks compatibility with ASCII flags and compiled regex objects.
---

re.LOCALE[¶](https://docs.python.org/3/library/re.html#re.LOCALE "Link to this definition")
    
Make `\w`, `\W`, `\b`, `\B` and case-insensitive matching dependent on the current locale. This flag can be used only with bytes patterns.
Corresponds to the inline flag `(?L)`.
Warning
This flag is discouraged; consider Unicode matching instead. The locale mechanism is very unreliable as it only handles one “culture” at a time and only works with 8-bit locales. Unicode matching is enabled by default for Unicode (str) patterns and it is able to handle different locales and languages.
Changed in version 3.6: [`LOCALE`](https://docs.python.org/3/library/re.html#re.LOCALE "re.LOCALE") can be used only with bytes patterns and is not compatible with [`ASCII`](https://docs.python.org/3/library/re.html#re.ASCII "re.ASCII").
Changed in version 3.7: Compiled regular expression objects with the [`LOCALE`](https://docs.python.org/3/library/re.html#re.LOCALE "re.LOCALE") flag no longer depend on the locale at compile time. Only the locale at matching time affects the result of matching. 

re.M[¶](https://docs.python.org/3/library/re.html#re.M "Link to this definition")


re.MULTILINE[¶](https://docs.python.org/3/library/re.html#re.MULTILINE "Link to this definition")
    
When specified, the pattern character `'^'` matches at the beginning of the string and at the beginning of each line (immediately following each newline); and the pattern character `'$'` matches at the end of the string and at the end of each line (immediately preceding each newline). By default, `'^'` matches only at the beginning of the string, and `'$'` only at the end of the string and immediately before the newline (if any) at the end of the string.
Corresponds to the inline flag `(?m)`. 

re.NOFLAG[¶](https://docs.python.org/3/library/re.html#re.NOFLAG "Link to this definition")
    
Indicates no flag being applied, the value is `0`. This flag may be used as a default value for a function keyword argument or as a base value that will be conditionally ORed with other flags. Example of use as a default value:
```
defmyfunc(text, flag=re.NOFLAG):
  return re.match(text, flag)

```

Added in version 3.11. 

re.S[¶](https://docs.python.org/3/library/re.html#re.S "Link to this definition")


re.DOTALL[¶](https://docs.python.org/3/library/re.html#re.DOTALL "Link to this definition")
    
Make the `'.'` special character match any character at all, including a newline; without this flag, `'.'` will match anything _except_ a newline.
Corresponds to the inline flag `(?s)`. 

re.U[¶](https://docs.python.org/3/library/re.html#re.U "Link to this definition")


re.UNICODE[¶](https://docs.python.org/3/library/re.html#re.UNICODE "Link to this definition")
    
In Python 3, Unicode characters are matched by default for `str` patterns. This flag is therefore redundant with **no effect** and is only kept for backward compatibility.
See [`ASCII`](https://docs.python.org/3/library/re.html#re.ASCII "re.ASCII") to restrict matching to ASCII characters instead. 

re.X[¶](https://docs.python.org/3/library/re.html#re.X "Link to this definition")


re.VERBOSE[¶](https://docs.python.org/3/library/re.html#re.VERBOSE "Link to this definition")
    
This flag allows you to write regular expressions that look nicer and are more readable by allowing you to visually separate logical sections of the pattern and add comments. Whitespace within the pattern is ignored, except when in a character class, or when preceded by an unescaped backslash, or within tokens like `*?`, `(?:` or `(?P<...>`. For example, `(? :` and `* ?` are not allowed. When a line contains a `#` that is not in a character class and is not preceded by an unescaped backslash, all characters from the leftmost such `#` through the end of the line are ignored.
This means that the two following regular expression objects that match a decimal number are functionally equal:
```
a = re.compile(r"""\d + # the integral part
          \.  # the decimal point
          \d * # some fractional digits""", re.X)
b = re.compile(r"\d+\.\d*")

```

Corresponds to the inline flag `(?x)`.
### Functions[¶](https://docs.python.org/3/library/re.html#functions "Link to this heading") 

re.compile(_pattern_ , _flags =0_)[¶](https://docs.python.org/3/library/re.html#re.compile "Link to this definition")
    
Compile a regular expression pattern into a [regular expression object](https://docs.python.org/3/library/re.html#re-objects), which can be used for matching using its [`match()`](https://docs.python.org/3/library/re.html#re.Pattern.match "re.Pattern.match"), [`search()`](https://docs.python.org/3/library/re.html#re.Pattern.search "re.Pattern.search") and other methods, described below.
The expression’s behaviour can be modified by specifying a _flags_ value. Values can be any of the [flags](https://docs.python.org/3/library/re.html#flags) variables, combined using bitwise OR (the `|` operator).
The sequence