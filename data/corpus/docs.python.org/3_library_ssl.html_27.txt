Title: TLS 1.3 Post-Handshaking Client Authentication in Python SSL
URL: https://docs.python.org/3/library/ssl.html
Summary: This documentation chunk outlines the deprecation of `OP_NO_SSL*` and `OP_NO_TLS*` options in Python 3.7, recommending the use of `SSLContext.minimum_version` and `SSLContext.maximum_version` instead. It also describes the `SSLContext.post_handshake_auth` feature, which enables TLS 1.3 post-handshake client authentication, allowing servers to request client certificates after the initial handshake.
---

```

Deprecated since version 3.7: All `OP_NO_SSL*` and `OP_NO_TLS*` options have been deprecated since Python 3.7. Use [`SSLContext.minimum_version`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.minimum_version "ssl.SSLContext.minimum_version") and [`SSLContext.maximum_version`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.maximum_version "ssl.SSLContext.maximum_version") instead. 

SSLContext.post_handshake_auth[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.post_handshake_auth "Link to this definition")
    
Enable TLS 1.3 post-handshake client authentication. Post-handshake auth is disabled by default and a server can only request a TLS client certificate during the initial handshake. When enabled, a server may request a TLS client certificate at any time after the handshake.
When enabled on client-side sockets, the client signals the server that it supports post-handshake authentication.
When enabled on server-side sockets, [`SSLContext.verify_mode`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.verify_mode "ssl.SSLContext.verify_mode") must be set to [`CERT_OPTIONAL`](https://docs.python.org/3/library/ssl.html#ssl.CERT_OPTIONAL "ssl.CERT_OPTIONAL") or [`CERT_REQUIRED`](https://docs.python.org/3/library/ssl.html#ssl.CERT_REQUIRED "ssl.CERT_REQUIRED"), too. The actual client cert exchange is delayed until [`SSLSocket.verify_client_post_handshake()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.verify_client_post_handshake "ssl.SSLSocket.verify_client_post_handshake") is called and some I/O is performed.
Added in version 3.8. 

SSLContext.protocol[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.protocol "Link to this definition")
    
The protocol version chosen when constructing the context. This attribute is read-only. 

SSLContext.hostname_checks_common_name[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.hostname_checks_common_name "Link to this definition")
    
Whether [`check_hostname`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.check_hostname "ssl.SSLContext.check_hostname") falls back to verify the cert’s subject common name in the absence of a subject alternative name extension (default: true).
Added in version 3.7.
Changed in version 3.10: The flag had no effect with OpenSSL before version 1.1.1l. Python 3.8.9, 3.9.3, and 3.10 include workarounds for previous versions. 

SSLContext.security_level[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.security_level "Link to this definition")
    
An integer representing the [security level](https://docs.openssl.org/master/man3/SSL_CTX_get_security_level/) for the context. This attribute is read-only.
Added in version 3.10. 

SSLContext.verify_flags[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.verify_flags "Link to this definition")
    
The flags for certificate verification operations. You can set flags like [`VERIFY_CRL_CHECK_LEAF`](https://docs.python.org/3/library/ssl.html#ssl.VERIFY_CRL_CHECK_LEAF "ssl.VERIFY_CRL_CHECK_LEAF") by ORing them together. By default OpenSSL does neither require nor verify certificate revocation lists (CRLs).
Added in version 3.4.
Changed in version 3.6: [`SSLContext.verify_flags`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.verify_flags "ssl.SSLContext.verify_flags") returns [`VerifyFlags`](https://docs.python.org/3/library/ssl.html#ssl.VerifyFlags "ssl.VerifyFlags") flags:
>>>```
>>> ssl.create_default_context().verify_flags
<VerifyFlags.VERIFY_X509_TRUSTED_FIRST: 32768>

```


SSLContext.verify_mode[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.verify_mode "Link to this definition")
    
Whether to try to verify other peers’ certificates and how to behave if verification fails. This attribute must be one of [`CERT_NONE`](https://docs.python.org/3/library/ssl.html#ssl.CERT_NONE "ssl.CERT_NONE"), [`CERT_OPTIONAL`](https://docs.python.org/3/library/ssl.html#ssl.CERT_OPTIONAL "ssl.CERT_OPTIONAL") or [`CERT_REQUIRED`](https://docs.python.org/3/library/ssl.html#ssl.CERT_REQUIRED "ssl.CERT_REQUIRED").
Changed in version 3.6: [`SSLContext.verify_mode`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.verify_mode "ssl.SSLContext.verify_mode") returns [`VerifyMode`](https://docs.python.org/3/library/ssl.html#ssl.VerifyMode "ssl.VerifyMode") enum:
>>>```
>>> ssl.create_default_context().verify_mode
<VerifyMode.CERT_REQUIRED: 2>