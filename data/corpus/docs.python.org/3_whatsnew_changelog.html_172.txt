Title: Python 3 Changelog Updates
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This update includes several performance improvements and bug fixes, such as inline comprehensions for lists, dictionaries, and sets (PEP 709), optimization of complex function calls, changes to the `repr` of weak references, and updated behavior for `len()` on 0-dimensional memoryview objects, which now raises a TypeError instead of returning 1.
---

Patch by Jelle Zijlstra.
  * [gh-97933](https://github.com/python/cpython/issues/97933): [**PEP 709**](https://peps.python.org/pep-0709/): inline list, dict and set comprehensions to improve performance and reduce bytecode size.
  * [gh-99184](https://github.com/python/cpython/issues/99184): Bypass instance attribute access of `__name__` in `repr` of [`weakref.ref`](https://docs.python.org/3/library/weakref.html#weakref.ref "weakref.ref").
  * [gh-98003](https://github.com/python/cpython/issues/98003): Complex function calls are now faster and consume no C stack space.
  * [bpo-39610](https://bugs.python.org/issue?@action=redirect&bpo=39610): `len()` for 0-dimensional [`memoryview`](https://docs.python.org/3/library/stdtypes.html#memoryview "memoryview") objects (such as `memoryview(ctypes.c_uint8(42))`) now raises a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError"). Previously this returned `1`, which was not consistent with `mem_0d[0]` raising an [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError "IndexError").
  * [bpo-31821](https://bugs.python.org/issue?@action=redirect&bpo=31821): Fix `pause_reading()` to work when called from `connection_made()` in [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O.").


### Library[¶](https://docs.python.org/3/whatsnew/changelog.html#id143 "Link to this heading")
  * [gh-104600](https://github.com/python/cpython/issues/104600): [`functools.update_wrapper()`](https://docs.python.org/3/library/functools.html#functools.update_wrapper "functools.update_wrapper") now sets the `__type_params__` attribute (added by [**PEP 695**](https://peps.python.org/pep-0695/)).
  * [gh-104340](https://github.com/python/cpython/issues/104340): When an `asyncio` pipe protocol loses its connection due to an error, and the caller doesn’t await `wait_closed()` on the corresponding `StreamWriter`, don’t log a warning about an exception that was never retrieved. After all, according to the `StreamWriter.close()` docs, the `wait_closed()` call is optional (“not mandatory”).
  * [gh-104555](https://github.com/python/cpython/issues/104555): Fix issue where an [`issubclass()`](https://docs.python.org/3/library/functions.html#issubclass "issubclass") check comparing a class `X` against a [`runtime-checkable protocol`](https://docs.python.org/3/library/typing.html#typing.runtime_checkable "typing.runtime_checkable") `Y` with non-callable members would not cause [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") to be raised if an [`isinstance()`](https://docs.python.org/3/library/functions.html#isinstance "isinstance") call had previously been made comparing an instance of `X` to `Y`. This issue was present in edge cases on Python 3.11, but became more prominent in 3.12 due to some unrelated changes that were made to runtime-checkable protocols. Patch by Alex Waygood.
  * [gh-104372](https://github.com/python/cpython/issues/104372): Refactored the `_posixsubprocess` internals to avoid Python C API usage between fork and exec when marking `pass_fds=` file descriptors inheritable.
  * [gh-104484](https://github.com/python/cpython/issues/104484): Added _case_sensitive_ argument to [`pathlib.PurePath.match()`](https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.match "pathlib.PurePath.match")
  * [gh-75367](https://github.com/python/cpython/issues/75367): Fix data descriptor detection in [`inspect.getattr_static()`](https://docs.python.org/3/library/inspect.html#inspect.getattr_static "inspect.getattr_static").
  * [gh-104536](https://github.com/python/cpython/issues/104536): Fix a race condition in the internal `multiprocessing.process` cleanup logic that could manifest as an unintended `AttributeError` when calling `process.close()`.
  * [gh-103857](https://github.com/python/cpython/issues/103857): Update datetime deprecations’ stracktrace to point to the calling line
  * [gh-101520](https://github.com/python/cpython/issues/101520): Move the core functionality of the `tracemalloc` module in the `Python/` folder, leaving just the module wrapper in `Modules/`.
  * [gh-104392](https://github.com/python/cpython/issues/104392): Remove undocumented and unused `_paramspec_tvars` attribute from some classes in [`typing`](https://docs.python.org/3/library/typing.html#module-typing "typing: Support for type hints \(see :pep:`484`\).").
  * [gh-102613](https://github.com/python/cpython/issues/102613): Fix issue where [`pathlib.Path.glob()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.glob "pathlib.Path.glob") raised [`RecursionError`](https://docs.python.org/3/library/exceptions.html#RecursionError "RecursionError") when walking deep directory trees.
  * [gh-103000](https://github.com/python/cpython/issues/103000): Improve performance of [`dataclasses.asdict()`](https://docs.python.org/3/library/dataclasses.html#dataclasses.asdict "datac