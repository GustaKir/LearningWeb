Title: Turtle Graphics: Shape Size and Shear Factor
URL: https://docs.python.org/3/library/turtle.html
Summary: This section covers the turtle graphics library's functions related to shape size and shear factor. It includes examples of how to get and set the shape size using `shapesize()` and change the shear factor with `shearfactor()`, demonstrating the effects of these adjustments on turtle graphics.
---

```
>>> turtle.shapesize()
(1.0, 1.0, 1)
>>> turtle.resizemode("user")
>>> turtle.shapesize(5, 5, 12)
>>> turtle.shapesize()
(5, 5, 12)
>>> turtle.shapesize(outline=8)
>>> turtle.shapesize()
(5, 5, 8)

```


turtle.shearfactor(_shear =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.shearfactor "Link to this definition")
     

Parameters:
    
**shear** – number (optional)
Set or return the current shearfactor. Shear the turtleshape according to the given shearfactor shear, which is the tangent of the shear angle. Do _not_ change the turtle’s heading (direction of movement). If shear is not given: return the current shearfactor, i. e. the tangent of the shear angle, by which lines parallel to the heading of the turtle are sheared.
>>>```
>>> turtle.shape("circle")
>>> turtle.shapesize(5,2)
>>> turtle.shearfactor(0.5)
>>> turtle.shearfactor()
0.5

```


turtle.tilt(_angle_)[¶](https://docs.python.org/3/library/turtle.html#turtle.tilt "Link to this definition")
     

Parameters:
    
**angle** – a number
Rotate the turtleshape by _angle_ from its current tilt-angle, but do _not_ change the turtle’s heading (direction of movement).
>>>```
>>> turtle.reset()
>>> turtle.shape("circle")
>>> turtle.shapesize(5,2)
>>> turtle.tilt(30)
>>> turtle.fd(50)
>>> turtle.tilt(30)
>>> turtle.fd(50)

```


turtle.tiltangle(_angle =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.tiltangle "Link to this definition")
     

Parameters:
    
**angle** – a number (optional)
Set or return the current tilt-angle. If angle is given, rotate the turtleshape to point in the direction specified by angle, regardless of its current tilt-angle. Do _not_ change the turtle’s heading (direction of movement). If angle is not given: return the current tilt-angle, i. e. the angle between the orientation of the turtleshape and the heading of the turtle (its direction of movement).
>>>```
>>> turtle.reset()
>>> turtle.shape("circle")
>>> turtle.shapesize(5,2)
>>> turtle.tilt(45)
>>> turtle.tiltangle()
45.0

```


turtle.shapetransform(_t11 =None_, _t12 =None_, _t21 =None_, _t22 =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.shapetransform "Link to this definition")
     

Parameters:
    
  * **t11** – a number (optional)
  * **t12** – a number (optional)
  * **t21** – a number (optional)
  * **t12** – a number (optional)


Set or return the current transformation matrix of the turtle shape.
If none of the matrix elements are given, return the transformation matrix as a tuple of 4 elements. Otherwise set the given elements and transform the turtleshape according to the matrix consisting of first row t11, t12 and second row t21, t22. The determinant t11 * t22 - t12 * t21 must not be zero, otherwise an error is raised. Modify stretchfactor, shearfactor and tiltangle according to the given matrix.
>>>```
>>> turtle = Turtle()
>>> turtle.shape("square")
>>> turtle.shapesize(4,2)
>>> turtle.shearfactor(-0.5)
>>> turtle.shapetransform()
(4.0, -1.0, -0.0, 2.0)

```


turtle.get_shapepoly()[¶](https://docs.python.org/3/library/turtle.html#turtle.get_shapepoly "Link to this definition")
    
Return the current shape polygon as tuple of coordinate pairs. This can be used to define a new shape or components of a compound shape.
>>>```
>>> turtle.shape("square")
>>> turtle.shapetransform(4, -1, 0, 2)
>>> turtle.get_shapepoly()
((50, -20), (30, 20), (-50, 20), (-30, -20))

```

### Using events[¶](https://docs.python.org/3/library/turtle.html#using-events "Link to this heading") 

turtle.onclick(_fun_ , _btn =1_, _add =None_)
     

Parameters:
    
  * **fun** – a function with two arguments which will be called with the coordinates of the clicked point on the canvas
  * **btn** – number of the mouse-button, defaults to 1 (left mouse button)
  * **add** – `True` or `False` – if `True`, a new binding will be added, otherwise it will replace a former binding


Bind _fun_ to mouse-click events on this turtle. If _fun_ is `None`, existing bindings are removed. Example for the anonymous turtle, i.e. the procedural way:
>>>```
>>> defturn(x, y):
...   left(180)
...
>>> onclick(turn) # Now clicking into the turtle will turn it.
>>> onclick(None) # event-binding will be removed

```


turtle.onrelease(_fun_ , _btn =1_, _add =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.onrelease "Link to this definition")
     

Parameters:
    
  * **fun** – a function with two arguments which will be called with the coordinates of the clicked point on the canvas
  * **btn** – number of the mouse-button, defaults to 1 (left mouse button)
  * **add** – `True` or `False` – if `True`, a new binding will be added, otherwise it will replace a former binding


Bind _fun_ to mouse-button-release events on this turtle. If _fun_ is `None`, existing bindings are removed.
>>>