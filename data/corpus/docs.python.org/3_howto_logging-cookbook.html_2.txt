Title: Logging Cookbook Introduction
URL: https://docs.python.org/3/howto/logging-cookbook.html
Summary: This document, authored by Vinay Sajip, presents various recipes for using Python's logging module effectively. It highlights the behavior of multiple logger calls across modules, emphasizing the shared nature of loggers within the same interpreter process, and explains the relationship between parent and child loggers in different modules.
---

Author:
    
Vinay Sajip <vinay_sajip at red-dove dot com>
This page contains a number of recipes related to logging, which have been found useful in the past. For links to tutorial and reference information, please see [Other resources](https://docs.python.org/3/howto/logging-cookbook.html#cookbook-ref-links).
## Using logging in multiple modules[¶](https://docs.python.org/3/howto/logging-cookbook.html#using-logging-in-multiple-modules "Link to this heading")
Multiple calls to `logging.getLogger('someLogger')` return a reference to the same logger object. This is true not only within the same module, but also across modules as long as it is in the same Python interpreter process. It is true for references to the same object; additionally, application code can define and configure a parent logger in one module and create (but not configure) a child logger in a separate module, and all logger calls to the child will pass up to the parent. Here is a main module:
```
importlogging
importauxiliary_module
# create logger with 'spam_application'
logger = logging.getLogger('spam_application')
logger.setLevel(logging.DEBUG)
# create file handler which logs even debug messages
fh = logging.FileHandler('spam.log')
fh.setLevel(logging.DEBUG)
# create console handler with a higher log level
ch = logging.StreamHandler()
ch.setLevel(logging.ERROR)
# create formatter and add it to the handlers
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
fh.setFormatter(formatter)
ch.setFormatter(formatter)
# add the handlers to the logger
logger.addHandler(fh)
logger.addHandler(ch)
logger.info('creating an instance of auxiliary_module.Auxiliary')
a = auxiliary_module.Auxiliary()
logger.info('created an instance of auxiliary_module.Auxiliary')
logger.info('calling auxiliary_module.Auxiliary.do_something')
a.do_something()
logger.info('finished auxiliary_module.Auxiliary.do_something')
logger.info('calling auxiliary_module.some_function()')
auxiliary_module.some_function()
logger.info('done with auxiliary_module.some_function()')

```

Here is the auxiliary module:
```
importlogging
# create logger
module_logger = logging.getLogger('spam_application.auxiliary')
classAuxiliary:
  def__init__(self):
    self.logger = logging.getLogger('spam_application.auxiliary.Auxiliary')
    self.logger.info('creating an instance of Auxiliary')
  defdo_something(self):
    self.logger.info('doing something')
    a = 1 + 1
    self.logger.info('done doing something')
defsome_function():
  module_logger.info('received a call to "some_function"')

```

The output looks like this:
```
2005-03-23 23:47:11,663 - spam_application - INFO -
  creating an instance of auxiliary_module.Auxiliary
2005-03-23 23:47:11,665 - spam_application.auxiliary.Auxiliary - INFO -
  creating an instance of Auxiliary
2005-03-23 23:47:11,665 - spam_application - INFO -
  created an instance of auxiliary_module.Auxiliary
2005-03-23 23:47:11,668 - spam_application - INFO -
  calling auxiliary_module.Auxiliary.do_something
2005-03-23 23:47:11,668 - spam_application.auxiliary.Auxiliary - INFO -
  doing something
2005-03-23 23:47:11,669 - spam_application.auxiliary.Auxiliary - INFO -
  done doing something
2005-03-23 23:47:11,670 - spam_application - INFO -
  finished auxiliary_module.Auxiliary.do_something
2005-03-23 23:47:11,671 - spam_application - INFO -
  calling auxiliary_module.some_function()
2005-03-23 23:47:11,672 - spam_application.auxiliary - INFO -
  received a call to 'some_function'
2005-03-23 23:47:11,673 - spam_application - INFO -
  done with auxiliary_module.some_function()

```

## Logging from multiple threads[¶](https://docs.python.org/3/howto/logging-cookbook.html#logging-from-multiple-threads "Link to this heading")
Logging from multiple threads requires no special effort. The following example shows logging from the main (initial) thread and another thread:
```
importlogging
importthreading
importtime
defworker(arg):
  while not arg['stop']:
    logging.debug('Hi from myfunc')
    time.sleep(0.5)
defmain():
  logging.basicConfig(level=logging.DEBUG, format='%(relativeCreated)6d%(threadName)s%(message)s')
  info = {'stop': False}
  thread = threading.Thread(target=worker, args=(info,))
  thread.start()
  while True:
    try:
      logging.debug('Hello from main')
      time.sleep(0.75)
    except KeyboardInterrupt:
      info['stop'] = True
      break
  thread.join()
if __name__ == '__main__':
  main()

```

When run, the script should print something like the following: