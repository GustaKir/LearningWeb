Title: Public Classes in Python Turtle Library
URL: https://docs.python.org/3/library/turtle.html
Summary: This section describes the public classes available in the Python turtle library, including 'RawTurtle', 'RawPen', and 'Turtle'. The 'RawTurtle' class requires a canvas parameter, which can be a tkinter Canvas, ScrolledCanvas, or TurtleScreen. The 'Turtle' class is a subclass of 'RawTurtle' and uses a default Screen for drawing.
---

```

## Public classes[¶](https://docs.python.org/3/library/turtle.html#public-classes "Link to this heading") 

_class_ turtle.RawTurtle(_canvas_)[¶](https://docs.python.org/3/library/turtle.html#turtle.RawTurtle "Link to this definition")


_class_ turtle.RawPen(_canvas_)[¶](https://docs.python.org/3/library/turtle.html#turtle.RawPen "Link to this definition")
     

Parameters:
    
**canvas** – a `tkinter.Canvas`, a [`ScrolledCanvas`](https://docs.python.org/3/library/turtle.html#turtle.ScrolledCanvas "turtle.ScrolledCanvas") or a [`TurtleScreen`](https://docs.python.org/3/library/turtle.html#turtle.TurtleScreen "turtle.TurtleScreen")
Create a turtle. The turtle has all methods described above as “methods of Turtle/RawTurtle”. 

_class_ turtle.Turtle[¶](https://docs.python.org/3/library/turtle.html#turtle.Turtle "Link to this definition")
    
Subclass of RawTurtle, has the same interface but draws on a default [`Screen`](https://docs.python.org/3/library/turtle.html#turtle.Screen "turtle.Screen") object created automatically when needed for the first time. 

_class_ turtle.TurtleScreen(_cv_)[¶](https://docs.python.org/3/library/turtle.html#turtle.TurtleScreen "Link to this definition")
     

Parameters:
    
**cv** – a `tkinter.Canvas`
Provides screen oriented methods like [`bgcolor()`](https://docs.python.org/3/library/turtle.html#turtle.bgcolor "turtle.bgcolor") etc. that are described above. 

_class_ turtle.Screen[¶](https://docs.python.org/3/library/turtle.html#turtle.Screen "Link to this definition")
    
Subclass of TurtleScreen, with [four methods added](https://docs.python.org/3/library/turtle.html#screenspecific). 

_class_ turtle.ScrolledCanvas(_master_)[¶](https://docs.python.org/3/library/turtle.html#turtle.ScrolledCanvas "Link to this definition")
     

Parameters:
    
**master** – some Tkinter widget to contain the ScrolledCanvas, i.e. a Tkinter-canvas with scrollbars added
Used by class Screen, which thus automatically provides a ScrolledCanvas as playground for the turtles. 

_class_ turtle.Shape(_type__ , _data_)[¶](https://docs.python.org/3/library/turtle.html#turtle.Shape "Link to this definition")
     

Parameters:
    
**type_** – one of the strings “polygon”, “image”, “compound”
Data structure modeling shapes. The pair `(type_, data)` must follow this specification:
_type__ | _data_  
---|---  
“polygon” | a polygon-tuple, i.e. a tuple of pairs of coordinates  
“image” | an image (in this form only used internally!)  
“compound” | `None` (a compound shape has to be constructed using the [`addcomponent()`](https://docs.python.org/3/library/turtle.html#turtle.Shape.addcomponent "turtle.Shape.addcomponent") method) 

addcomponent(_poly_ , _fill_ , _outline =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.Shape.addcomponent "Link to this definition")
     

Parameters:
      
  * **poly** – a polygon, i.e. a tuple of pairs of numbers
  * **fill** – a color the _poly_ will be filled with
  * **outline** – a color for the poly’s outline (if given)


Example:
>>>```
>>> poly = ((0,0),(10,-5),(0,10),(-10,-5))
>>> s = Shape("compound")
>>> s.addcomponent(poly, "red", "blue")
>>> # ... add more components and then use register_shape()