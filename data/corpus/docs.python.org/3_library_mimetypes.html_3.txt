Title: MimeTypes Class Overview
URL: https://docs.python.org/3/library/mimetypes.html
Summary: The MimeTypes class allows applications to manage multiple MIME-type databases. It provides an interface similar to the mimetypes module, with a default database that can be extended by loading additional mime.types files.
---

```

## MimeTypes Objects[¶](https://docs.python.org/3/library/mimetypes.html#mimetypes-objects "Link to this heading")
The [`MimeTypes`](https://docs.python.org/3/library/mimetypes.html#mimetypes.MimeTypes "mimetypes.MimeTypes") class may be useful for applications which may want more than one MIME-type database; it provides an interface similar to the one of the [`mimetypes`](https://docs.python.org/3/library/mimetypes.html#module-mimetypes "mimetypes: Mapping of filename extensions to MIME types.") module. 

_class_ mimetypes.MimeTypes(_filenames =()_, _strict =True_)[¶](https://docs.python.org/3/library/mimetypes.html#mimetypes.MimeTypes "Link to this definition")
    
This class represents a MIME-types database. By default, it provides access to the same database as the rest of this module. The initial database is a copy of that provided by the module, and may be extended by loading additional `mime.types`-style files into the database using the [`read()`](https://docs.python.org/3/library/mimetypes.html#mimetypes.MimeTypes.read "mimetypes.MimeTypes.read") or [`readfp()`](https://docs.python.org/3/library/mimetypes.html#mimetypes.MimeTypes.readfp "mimetypes.MimeTypes.readfp") methods. The mapping dictionaries may also be cleared before loading additional data if the default data is not desired.
The optional _filenames_ parameter can be used to cause additional files to be loaded “on top” of the default database. 

suffix_map[¶](https://docs.python.org/3/library/mimetypes.html#mimetypes.MimeTypes.suffix_map "Link to this definition")
    
Dictionary mapping suffixes to suffixes. This is used to allow recognition of encoded files for which the encoding and the type are indicated by the same extension. For example, the `.tgz` extension is mapped to `.tar.gz` to allow the encoding and type to be recognized separately. This is initially a copy of the global [`suffix_map`](https://docs.python.org/3/library/mimetypes.html#mimetypes.suffix_map "mimetypes.suffix_map") defined in the module. 

encodings_map[¶](https://docs.python.org/3/library/mimetypes.html#mimetypes.MimeTypes.encodings_map "Link to this definition")
    
Dictionary mapping filename extensions to encoding types. This is initially a copy of the global [`encodings_map`](https://docs.python.org/3/library/mimetypes.html#mimetypes.encodings_map "mimetypes.encodings_map") defined in the module. 

types_map[¶](https://docs.python.org/3/library/mimetypes.html#mimetypes.MimeTypes.types_map "Link to this definition")
    
Tuple containing two dictionaries, mapping filename extensions to MIME types: the first dictionary is for the non-standards types and the second one is for the standard types. They are initialized by [`common_types`](https://docs.python.org/3/library/mimetypes.html#mimetypes.common_types "mimetypes.common_types") and [`types_map`](https://docs.python.org/3/library/mimetypes.html#mimetypes.types_map "mimetypes.types_map"). 

types_map_inv[¶](https://docs.python.org/3/library/mimetypes.html#mimetypes.MimeTypes.types_map_inv "Link to this definition")
    
Tuple containing two dictionaries, mapping MIME types to a list of filename extensions: the first dictionary is for the non-standards types and the second one is for the standard types. They are initialized by [`common_types`](https://docs.python.org/3/library/mimetypes.html#mimetypes.common_types "mimetypes.common_types") and [`types_map`](https://docs.python.org/3/library/mimetypes.html#mimetypes.types_map "mimetypes.types_map"). 

guess_extension(_type_ , _strict =True_)[¶](https://docs.python.org/3/library/mimetypes.html#mimetypes.MimeTypes.guess_extension "Link to this definition")
    
Similar to the [`guess_extension()`](https://docs.python.org/3/library/mimetypes.html#mimetypes.guess_extension "mimetypes.guess_extension") function, using the tables stored as part of the object. 

guess_type(_url_ , _strict =True_)[¶](https://docs.python.org/3/library/mimetypes.html#mimetypes.MimeTypes.guess_type "Link to this definition")
    
Similar to the [`guess_type()`](https://docs.python.org/3/library/mimetypes.html#mimetypes.guess_type "mimetypes.guess_type") function, using the tables stored as part of the object. 

guess_file_type(_path_ , _*_ , _strict =True_)[¶](https://docs.python.org/3/library/mimetypes.html#mimetypes.MimeTypes.guess_file_type "Link to this definition")
    
Similar to the [`guess_file_type()`](https://docs.python.org/3/library/mimetypes.html#mimetypes.guess_file_type "mimetypes.guess_file_type") function, using the tables stored as part of the object.
Added in version 3.13. 

guess_all_extensions(_type_ , _strict =True_)[¶](https://docs.python.org/3/library/mimetypes.html#mimetypes.MimeTypes.guess_all_extensions "Link to this definition")
    
Similar to the [`guess_all_extensions()`](https://docs.python.org/3/library/mimetypes.html#mimetypes.guess_all_extensions "mimetypes.guess_all_extensions") function, using the tables stored as part of the object.