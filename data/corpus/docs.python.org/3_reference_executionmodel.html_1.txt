Title: Execution Model of Python
URL: https://docs.python.org/3/reference/executionmodel.html
Summary: This section explains the structure of a Python program, detailing that it is made up of code blocks such as modules, function bodies, and class definitions. It notes that each command executed interactively, as well as scripts invoked through the interpreter, constitutes a code block.
---

# 4. Execution model[¶](https://docs.python.org/3/reference/executionmodel.html#execution-model "Link to this heading")
## 4.1. Structure of a program[¶](https://docs.python.org/3/reference/executionmodel.html#structure-of-a-program "Link to this heading")
A Python program is constructed from code blocks. A _block_ is a piece of Python program text that is executed as a unit. The following are blocks: a module, a function body, and a class definition. Each command typed interactively is a block. A script file (a file given as standard input to the interpreter or specified as a command line argument to the interpreter) is a code block. A script command (a command specified on the interpreter command line with the [`-c`](https://docs.python.org/3/using/cmdline.html#cmdoption-c) option) is a code block. A module run as a top level script (as module `__main__`) from the command line using a [`-m`](https://docs.python.org/3/using/cmdline.html#cmdoption-m) argument is also a code block. The string argument passed to the built-in functions [`eval()`](https://docs.python.org/3/library/functions.html#eval "eval") and [`exec()`](https://docs.python.org/3/library/functions.html#exec "exec") is a code block.
A code block is executed in an _execution frame_. A frame contains some administrative information (used for debugging) and determines where and how execution continues after the code block’s execution has completed.
## 4.2. Naming and binding[¶](https://docs.python.org/3/reference/executionmodel.html#naming-and-binding "Link to this heading")
### 4.2.1. Binding of names[¶](https://docs.python.org/3/reference/executionmodel.html#binding-of-names "Link to this heading")
_Names_ refer to objects. Names are introduced by name binding operations.
The following constructs bind names:
  * formal parameters to functions,
  * class definitions,
  * function definitions,
  * assignment expressions,
  * [targets](https://docs.python.org/3/reference/simple_stmts.html#assignment) that are identifiers if occurring in an assignment:
    * [`for`](https://docs.python.org/3/reference/compound_stmts.html#for) loop header,
    * after `as` in a [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement, [`except`](https://docs.python.org/3/reference/compound_stmts.html#except) clause, [`except*`](https://docs.python.org/3/reference/compound_stmts.html#except-star) clause, or in the as-pattern in structural pattern matching,
    * in a capture pattern in structural pattern matching
  * [`import`](https://docs.python.org/3/reference/simple_stmts.html#import) statements.
  * [`type`](https://docs.python.org/3/reference/simple_stmts.html#type) statements.
  * [type parameter lists](https://docs.python.org/3/reference/compound_stmts.html#type-params).