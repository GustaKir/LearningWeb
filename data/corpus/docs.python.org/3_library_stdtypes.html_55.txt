Title: Standard Generic Classes in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This section discusses the use of type variables in Python's standard generic classes. It illustrates the requirement for an index to match the number of type variable items in a GenericAlias object. A list of some standard library classes that support parameterized generics, including tuple, list, dict, set, and frozenset, is also provided.
---

```

However, such expressions are valid when [type variables](https://docs.python.org/3/library/typing.html#generics) are used. The index must have as many elements as there are type variable items in the `GenericAlias` object’s [`__args__`](https://docs.python.org/3/library/stdtypes.html#genericalias.__args__ "genericalias.__args__").
>>>```
>>> fromtypingimport TypeVar
>>> Y = TypeVar('Y')
>>> dict[str, Y][int]
dict[str, int]

```

#### Standard Generic Classes[¶](https://docs.python.org/3/library/stdtypes.html#standard-generic-classes "Link to this heading")
The following standard library classes support parameterized generics. This list is non-exhaustive.
  * [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple")
  * [`list`](https://docs.python.org/3/library/stdtypes.html#list "list")
  * [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict")
  * [`set`](https://docs.python.org/3/library/stdtypes.html#set "set")
  * [`frozenset`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset")
  * [`type`](https://docs.python.org/3/library/functions.html#type "type")
  * [`asyncio.Future`](https://docs.python.org/3/library/asyncio-future.html#asyncio.Future "asyncio.Future")
  * [`asyncio.Task`](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task "asyncio.Task")
  * [`collections.deque`](https://docs.python.org/3/library/collections.html#collections.deque "collections.deque")
  * [`collections.defaultdict`](https://docs.python.org/3/library/collections.html#collections.defaultdict "collections.defaultdict")
  * [`collections.OrderedDict`](https://docs.python.org/3/library/collections.html#collections.OrderedDict "collections.OrderedDict")
  * [`collections.Counter`](https://docs.python.org/3/library/collections.html#collections.Counter "collections.Counter")
  * [`collections.ChainMap`](https://docs.python.org/3/library/collections.html#collections.ChainMap "collections.ChainMap")
  * [`collections.abc.Awaitable`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Awaitable "collections.abc.Awaitable")
  * [`collections.abc.Coroutine`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Coroutine "collections.abc.Coroutine")
  * [`collections.abc.AsyncIterable`](https://docs.python.org/3/library/collections.abc.html#collections.abc.AsyncIterable "collections.abc.AsyncIterable")
  * [`collections.abc.AsyncIterator`](https://docs.python.org/3/library/collections.abc.html#collections.abc.AsyncIterator "collections.abc.AsyncIterator")
  * [`collections.abc.AsyncGenerator`](https://docs.python.org/3/library/collections.abc.html#collections.abc.AsyncGenerator "collections.abc.AsyncGenerator")
  * [`collections.abc.Iterable`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterable "collections.abc.Iterable")
  * [`collections.abc.Iterator`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterator "collections.abc.Iterator")
  * [`collections.abc.Generator`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Generator "collections.abc.Generator")
  * [`collections.abc.Reversible`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Reversible "collections.abc.Reversible")
  * [`collections.abc.Container`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Container "collections.abc.Container")
  * [`collections.abc.Collection`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Collection "collections.abc.Collection")
  * [`collections.abc.Callable`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Callable "collections.abc.Callable")
  * [`collections.abc.Set`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Set "collections.abc.Set")
  * [`collections.abc.MutableSet`](https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableSet "collections.abc.MutableSet")
  * [`collections.abc.Mapping`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping "collections.abc.Mapping")
  * [`collections.abc.MutableMapping`](https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableMapping "collections.abc.MutableMapping")
  * [`collections.abc.Sequence`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence "collections.abc.Sequence")
  * [`collections.abc.MutableSequence`](https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableSequence "collections.abc.MutableSequence")
  * [`collections.abc.ByteString`](https://docs.python.org/3/library/collections.abc.html#collections.abc.ByteString "collections.abc.ByteString")
  * [`collections.abc.MappingView`](https://docs.python.org/3/library/collections.abc.html#collections.abc.MappingView "collections.abc.MappingView")
  * [`collections.abc.KeysView`](https://docs.python.org/3/library/collections.abc.html#collec