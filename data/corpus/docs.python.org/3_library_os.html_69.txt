Title: Process Status Functions in os Module
URL: https://docs.python.org/3/library/os.html
Summary: This section describes two functions in the os module: `os.WIFCONTINUED()` which checks if a stopped child process has been resumed, and `os.WIFSTOPPED()` which determines if a process was stopped by a signal. Availability for these functions is limited to certain Unix environments.
---

os.WIFCONTINUED(_status_)[¶](https://docs.python.org/3/library/os.html#os.WIFCONTINUED "Link to this definition")
    
Return `True` if a stopped child has been resumed by delivery of [`SIGCONT`](https://docs.python.org/3/library/signal.html#signal.SIGCONT "signal.SIGCONT") (if the process has been continued from a job control stop), otherwise return `False`.
See [`WCONTINUED`](https://docs.python.org/3/library/os.html#os.WCONTINUED "os.WCONTINUED") option.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI, not Android, not iOS. 

os.WIFSTOPPED(_status_)[¶](https://docs.python.org/3/library/os.html#os.WIFSTOPPED "Link to this definition")
    
Return `True` if the process was stopped by delivery of a signal, otherwise return `False`.
[`WIFSTOPPED()`](https://docs.python.org/3/library/os.html#os.WIFSTOPPED "os.WIFSTOPPED") only returns `True` if the [`waitpid()`](https://docs.python.org/3/library/os.html#os.waitpid "os.waitpid") call was done using [`WUNTRACED`](https://docs.python.org/3/library/os.html#os.WUNTRACED "os.WUNTRACED") option or when the process is being traced (see _[ptrace(2)](https://manpages.debian.org/ptrace\(2\))_).
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI, not Android, not iOS. 

os.WIFSIGNALED(_status_)[¶](https://docs.python.org/3/library/os.html#os.WIFSIGNALED "Link to this definition")
    
Return `True` if the process was terminated by a signal, otherwise return `False`.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI, not Android, not iOS. 

os.WIFEXITED(_status_)[¶](https://docs.python.org/3/library/os.html#os.WIFEXITED "Link to this definition")
    
Return `True` if the process exited terminated normally, that is, by calling `exit()` or `_exit()`, or by returning from `main()`; otherwise return `False`.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI, not Android, not iOS. 

os.WEXITSTATUS(_status_)[¶](https://docs.python.org/3/library/os.html#os.WEXITSTATUS "Link to this definition")
    
Return the process exit status.
This function should be employed only if [`WIFEXITED()`](https://docs.python.org/3/library/os.html#os.WIFEXITED "os.WIFEXITED") is true.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI, not Android, not iOS. 

os.WSTOPSIG(_status_)[¶](https://docs.python.org/3/library/os.html#os.WSTOPSIG "Link to this definition")
    
Return the signal which caused the process to stop.
This function should be employed only if [`WIFSTOPPED()`](https://docs.python.org/3/library/os.html#os.WIFSTOPPED "os.WIFSTOPPED") is true.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI, not Android, not iOS. 

os.WTERMSIG(_status_)[¶](https://docs.python.org/3/library/os.html#os.WTERMSIG "Link to this definition")
    
Return the number of the signal that caused the process to terminate.
This function should be employed only if [`WIFSIGNALED()`](https://docs.python.org/3/library/os.html#os.WIFSIGNALED "os.WIFSIGNALED") is true.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI, not Android, not iOS.
## Interface to the scheduler[¶](https://docs.python.org/3/library/os.html#interface-to-the-scheduler "Link to this heading")
These functions control how a process is allocated CPU time by the operating system. They are only available on some Unix platforms. For more detailed information, consult your Unix manpages.
Added in version 3.3.
The following scheduling policies are exposed if they are supported by the operating system. 

os.SCHED_OTHER[¶](https://docs.python.org/3/library/os.html#os.SCHED_OTHER "Link to this definition")
    
The default scheduling policy. 

os.SCHED_BATCH[¶](https://docs.python.org/3/library/os.html#os.SCHED_BATCH "Link to this definition")
    
Scheduling policy for CPU-intensive processes that tries to preserve interactivity on the rest of the computer. 

os.SCHED_IDLE[¶](https://docs.python.org/3/library/os.html#os.SCHED_IDLE "Link to this definition")
    
Scheduling policy for extremely low priority background tasks. 

os.SCHED_SPORADIC[¶](https://docs.python.org/3/library/os.html#os.SCHED_SPORADIC "Link to this definition")
    
Scheduling policy for sporadic server programs. 

os.SCHED_FIFO[¶](https://docs.python.org/3/library/os.html#os.SCHED_FIFO "Link to this definition")
    
A First In First Out scheduling policy. 

os.SCHED_RR[¶](https://docs.python.org/3/library/os.html#os.SCHED_RR "Link to this definition")
    
A round-robin scheduling policy. 

os.SCHED_RESET_ON_FORK[¶](https://docs.python.org/3/library/os.html#os.SCHED_RESET_ON_FORK "Link to this definition")
    
This flag can be OR’ed with any other scheduling policy. When a process with this flag set forks, its child’s scheduling policy and priority are reset to the default.