Title: Rich Comparisons and Logical Operations in Python
URL: https://docs.python.org/3/library/operator.html
Summary: This section describes the operator functions for rich comparisons in Python, equating them to typical comparison operators such as less than and greater than. It also notes that these functions can return values beyond boolean and outlines the applicability of logical operations to all objects.
---

operator.__gt__(_a_ , _b_)[¶](https://docs.python.org/3/library/operator.html#operator.__gt__ "Link to this definition")
    
Perform “rich comparisons” between _a_ and _b_. Specifically, `lt(a, b)` is equivalent to `a < b`, `le(a, b)` is equivalent to `a <= b`, `eq(a, b)` is equivalent to `a == b`, `ne(a, b)` is equivalent to `a != b`, `gt(a, b)` is equivalent to `a > b` and `ge(a, b)` is equivalent to `a >= b`. Note that these functions can return any value, which may or may not be interpretable as a Boolean value. See [Comparisons](https://docs.python.org/3/reference/expressions.html#comparisons) for more information about rich comparisons.
The logical operations are also generally applicable to all objects, and support truth tests, identity tests, and boolean operations: 

operator.not_(_obj_)[¶](https://docs.python.org/3/library/operator.html#operator.not_ "Link to this definition")


operator.__not__(_obj_)[¶](https://docs.python.org/3/library/operator.html#operator.__not__ "Link to this definition")
    
Return the outcome of [`not`](https://docs.python.org/3/reference/expressions.html#not) _obj_. (Note that there is no `__not__()` method for object instances; only the interpreter core defines this operation. The result is affected by the [`__bool__()`](https://docs.python.org/3/reference/datamodel.html#object.__bool__ "object.__bool__") and [`__len__()`](https://docs.python.org/3/reference/datamodel.html#object.__len__ "object.__len__") methods.) 

operator.truth(_obj_)[¶](https://docs.python.org/3/library/operator.html#operator.truth "Link to this definition")
    
Return [`True`](https://docs.python.org/3/library/constants.html#True "True") if _obj_ is true, and [`False`](https://docs.python.org/3/library/constants.html#False "False") otherwise. This is equivalent to using the [`bool`](https://docs.python.org/3/library/functions.html#bool "bool") constructor. 

operator.is_(_a_ , _b_)[¶](https://docs.python.org/3/library/operator.html#operator.is_ "Link to this definition")
    
Return `a is b`. Tests object identity. 

operator.is_not(_a_ , _b_)[¶](https://docs.python.org/3/library/operator.html#operator.is_not "Link to this definition")
    
Return `a is not b`. Tests object identity.
The mathematical and bitwise operations are the most numerous: 

operator.abs(_obj_)[¶](https://docs.python.org/3/library/operator.html#operator.abs "Link to this definition")


operator.__abs__(_obj_)[¶](https://docs.python.org/3/library/operator.html#operator.__abs__ "Link to this definition")
    
Return the absolute value of _obj_. 

operator.add(_a_ , _b_)[¶](https://docs.python.org/3/library/operator.html#operator.add "Link to this definition")


operator.__add__(_a_ , _b_)[¶](https://docs.python.org/3/library/operator.html#operator.__add__ "Link to this definition")
    
Return `a + b`, for _a_ and _b_ numbers. 

operator.and_(_a_ , _b_)[¶](https://docs.python.org/3/library/operator.html#operator.and_ "Link to this definition")


operator.__and__(_a_ , _b_)[¶](https://docs.python.org/3/library/operator.html#operator.__and__ "Link to this definition")
    
Return the bitwise and of _a_ and _b_. 

operator.floordiv(_a_ , _b_)[¶](https://docs.python.org/3/library/operator.html#operator.floordiv "Link to this definition")


operator.__floordiv__(_a_ , _b_)[¶](https://docs.python.org/3/library/operator.html#operator.__floordiv__ "Link to this definition")
    
Return `a // b`. 

operator.index(_a_)[¶](https://docs.python.org/3/library/operator.html#operator.index "Link to this definition")


operator.__index__(_a_)[¶](https://docs.python.org/3/library/operator.html#operator.__index__ "Link to this definition")
    
Return _a_ converted to an integer. Equivalent to `a.__index__()`.
Changed in version 3.10: The result always has exact type [`int`](https://docs.python.org/3/library/functions.html#int "int"). Previously, the result could have been an instance of a subclass of `int`. 

operator.inv(_obj_)[¶](https://docs.python.org/3/library/operator.html#operator.inv "Link to this definition")


operator.invert(_obj_)[¶](https://docs.python.org/3/library/operator.html#operator.invert "Link to this definition")


operator.__inv__(_obj_)[¶](https://docs.python.org/3/library/operator.html#operator.__inv__ "Link to this definition")


operator.__invert__(_obj_)[¶](https://docs.python.org/3/library/operator.html#operator.__invert__ "Link to this definition")
    
Return the bitwise inverse of the number _obj_. This is equivalent to `~obj`. 

operator.lshift(_a_ , _b_)[¶](https://docs.python.org/3/library/operator.html#operator.lshift "Link to this definition")


operator.__lshift__(_a_ , _b_)[¶](https://docs.python.org/3/library/operator.html#operator.__lshift__ "Link to this definition")
    
Return _a_ shifted left by _b_. 

operator.mod(_a_ , _b_)[¶](https://docs.python.org/3/library/operator.html#operator.mod "Link to this definition")