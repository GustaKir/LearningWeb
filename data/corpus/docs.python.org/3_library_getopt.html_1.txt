Title: getopt.getopt Function in Python
URL: https://docs.python.org/3/library/getopt.html
Summary: The 'getopt.getopt' function parses command line options and parameters. It takes an argument list (_args_), a string of short option letters (_shortopts_), and an optional list of long options (_longopts_). Unlike GNU 'getopt()', non-option arguments are treated as non-options after the first occurrence. Long options must be specified without the leading '--' and those that require arguments are followed by '='.
---

getopt.getopt(_args_ , _shortopts_ , _longopts =[]_)[¶](https://docs.python.org/3/library/getopt.html#getopt.getopt "Link to this definition")
    
Parses command line options and parameter list. _args_ is the argument list to be parsed, without the leading reference to the running program. Typically, this means `sys.argv[1:]`. _shortopts_ is the string of option letters that the script wants to recognize, with options that require an argument followed by a colon (`':'`; i.e., the same format that Unix `getopt()` uses).
Note
Unlike GNU `getopt()`, after a non-option argument, all further arguments are considered also non-options. This is similar to the way non-GNU Unix systems work.
_longopts_ , if specified, must be a list of strings with the names of the long options which should be supported. The leading `'--'` characters should not be included in the option name. Long options which require an argument should be followed by an equal sign (`'='`). Optional arguments are not supported. To accept only long options, _shortopts_ should be an empty string. Long options on the command line can be recognized so long as they provide a prefix of the option name that matches exactly one of the accepted options. For example, if _longopts_ is `['foo', 'frob']`, the option `--fo` will match as `--foo`, but `--f` will not match uniquely, so [`GetoptError`](https://docs.python.org/3/library/getopt.html#getopt.GetoptError "getopt.GetoptError") will be raised.
The return value consists of two elements: the first is a list of `(option, value)` pairs; the second is the list of program arguments left after the option list was stripped (this is a trailing slice of _args_). Each option-and-value pair returned has the option as its first element, prefixed with a hyphen for short options (e.g., `'-x'`) or two hyphens for long options (e.g., `'--long-option'`), and the option argument as its second element, or an empty string if the option has no argument. The options occur in the list in the same order in which they were found, thus allowing multiple occurrences. Long and short options may be mixed. 

getopt.gnu_getopt(_args_ , _shortopts_ , _longopts =[]_)[¶](https://docs.python.org/3/library/getopt.html#getopt.gnu_getopt "Link to this definition")
    
This function works like [`getopt()`](https://docs.python.org/3/library/getopt.html#module-getopt "getopt: Portable parser for command line options; support both short and long option names."), except that GNU style scanning mode is used by default. This means that option and non-option arguments may be intermixed. The [`getopt()`](https://docs.python.org/3/library/getopt.html#module-getopt "getopt: Portable parser for command line options; support both short and long option names.") function stops processing options as soon as a non-option argument is encountered.
If the first character of the option string is `'+'`, or if the environment variable `POSIXLY_CORRECT` is set, then option processing stops as soon as a non-option argument is encountered. 

_exception_ getopt.GetoptError[¶](https://docs.python.org/3/library/getopt.html#getopt.GetoptError "Link to this definition")
    
This is raised when an unrecognized option is found in the argument list or when an option requiring an argument is given none. The argument to the exception is a string indicating the cause of the error. For long options, an argument given to an option which does not require one will also cause this exception to be raised. The attributes `msg` and `opt` give the error message and related option; if there is no specific option to which the exception relates, `opt` is an empty string. 

_exception_ getopt.error[¶](https://docs.python.org/3/library/getopt.html#getopt.error "Link to this definition")
    
Alias for [`GetoptError`](https://docs.python.org/3/library/getopt.html#getopt.GetoptError "getopt.GetoptError"); for backward compatibility.
An example using only Unix style options:
>>>```
>>> importgetopt
>>> args = '-a -b -cfoo -d bar a1 a2'.split()
>>> args
['-a', '-b', '-cfoo', '-d', 'bar', 'a1', 'a2']
>>> optlist, args = getopt.getopt(args, 'abc:d:')
>>> optlist
[('-a', ''), ('-b', ''), ('-c', 'foo'), ('-d', 'bar')]
>>> args
['a1', 'a2']

```

Using long option names is equally easy:
>>>```
>>> s = '--condition=foo --testing --output-file abc.def -x a1 a2'
>>> args = s.split()
>>> args
['--condition=foo', '--testing', '--output-file', 'abc.def', '-x', 'a1', 'a2']
>>> optlist, args = getopt.getopt(args, 'x', [
...   'condition=', 'output-file=', 'testing'])
>>> optlist
[('--condition', 'foo'), ('--testing', ''), ('--output-file', 'abc.def'), ('-x', '')]
>>> args
['a1', 'a2']

```

In a script, typical usage is something like this: