Title: New System Call Functions in Python 2.7
URL: https://docs.python.org/3/whatsnew/2.7.html
Summary: Python 2.7 introduces several new system calls in the `os` module, including `getresgid()`, `getresuid()`, `setresgid()`, and `setresuid()` for managing GIDs and UIDs, along with `initgroups()` for initializing the group access list. This update was supported by contributions from Travis H. and Jean-Paul Calderone.
---

IX system calls: [`getresgid()`](https://docs.python.org/3/library/os.html#os.getresgid "os.getresgid") and [`getresuid()`](https://docs.python.org/3/library/os.html#os.getresuid "os.getresuid"), which return the real, effective, and saved GIDs and UIDs; [`setresgid()`](https://docs.python.org/3/library/os.html#os.setresgid "os.setresgid") and [`setresuid()`](https://docs.python.org/3/library/os.html#os.setresuid "os.setresuid"), which set real, effective, and saved GIDs and UIDs to new values; [`initgroups()`](https://docs.python.org/3/library/os.html#os.initgroups "os.initgroups"), which initialize the group access list for the current process. (GID/UID functions contributed by Travis H.; [bpo-6508](https://bugs.python.org/issue?@action=redirect&bpo=6508). Support for initgroups added by Jean-Paul Calderone; [bpo-7333](https://bugs.python.org/issue?@action=redirect&bpo=7333).)
The [`os.fork()`](https://docs.python.org/3/library/os.html#os.fork "os.fork") function now re-initializes the import lock in the child process; this fixes problems on Solaris when [`fork()`](https://docs.python.org/3/library/os.html#os.fork "os.fork") is called from a thread. (Fixed by Zsolt Cserna; [bpo-7242](https://bugs.python.org/issue?@action=redirect&bpo=7242).)
  * In the [`os.path`](https://docs.python.org/3/library/os.path.html#module-os.path "os.path: Operations on pathnames.") module, the [`normpath()`](https://docs.python.org/3/library/os.path.html#os.path.normpath "os.path.normpath") and [`abspath()`](https://docs.python.org/3/library/os.path.html#os.path.abspath "os.path.abspath") functions now preserve Unicode; if their input path is a Unicode string, the return value is also a Unicode string. ([`normpath()`](https://docs.python.org/3/library/os.path.html#os.path.normpath "os.path.normpath") fixed by Matt Giuca in [bpo-5827](https://bugs.python.org/issue?@action=redirect&bpo=5827); [`abspath()`](https://docs.python.org/3/library/os.path.html#os.path.abspath "os.path.abspath") fixed by Ezio Melotti in [bpo-3426](https://bugs.python.org/issue?@action=redirect&bpo=3426).)
  * The [`pydoc`](https://docs.python.org/3/library/pydoc.html#module-pydoc "pydoc: Documentation generator and online help system.") module now has help for the various symbols that Python uses. You can now do `help('<<')` or `help('@')`, for example. (Contributed by David Laban; [bpo-4739](https://bugs.python.org/issue?@action=redirect&bpo=4739).)
  * The [`re`](https://docs.python.org/3/library/re.html#module-re "re: Regular expression operations.") module’s [`split()`](https://docs.python.org/3/library/re.html#re.split "re.split"), [`sub()`](https://docs.python.org/3/library/re.html#re.sub "re.sub"), and [`subn()`](https://docs.python.org/3/library/re.html#re.subn "re.subn") now accept an optional _flags_ argument, for consistency with the other functions in the module. (Added by Gregory P. Smith.)
  * New function: [`run_path()`](https://docs.python.org/3/library/runpy.html#runpy.run_path "runpy.run_path") in the [`runpy`](https://docs.python.org/3/library/runpy.html#module-runpy "runpy: Locate and run Python modules without importing them first.") module will execute the code at a provided _path_ argument. _path_ can be the path of a Python source file (`example.py`), a compiled bytecode file (`example.pyc`), a directory (`./package/`), or a zip archive (`example.zip`). If a directory or zip path is provided, it will be added to the front of `sys.path` and the module [`__main__`](https://docs.python.org/3/library/__main__.html#module-__main__ "__main__: The environment where top-level code is run. Covers command-line interfaces, import-time behavior, and ``__name__ == '__main__'``.") will be imported. It’s expected that the directory or zip contains a `__main__.py`; if it doesn’t, some other `__main__.py` might be imported from a location later in `sys.path`. This makes more of the machinery of [`runpy`](https://docs.python.org/3/library/runpy.html#module-runpy "runpy: Locate and run Python modules without importing them first.") available to scripts that want to mimic the way Python’s command line processes an explicit path name. (Added by Nick Coghlan; [bpo-6816](https://bugs.python.org/issue?@action=redirect&bpo=6816).)
  * New function: in the [`shutil`](https://docs.python.org/3/library/shutil.html#module-shutil "shutil: High-level file operations, including copying.") module, [`make_archive()`](https://docs.python.org/3/library/shutil.html#shutil.make_archive "shutil.make_archive") takes a filename, archive type (zip or tar-format), and a directory path, and creates an archive containing the directory’s contents.