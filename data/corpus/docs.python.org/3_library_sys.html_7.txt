Title: sys.exit() Function in Python
URL: https://docs.python.org/3/library/sys.html
Summary: The sys.exit() function raises a SystemExit exception, indicating an intention to exit the interpreter. It accepts an optional argument that can be an integer representing the exit status (defaulting to zero), which signifies success, while nonzero values indicate abnormal termination. Exit codes generally adhere to specific conventions, with Unix systems often using specific codes for syntax and other errors. If a non-integer object is provided, None acts as zero while other objects are printed to stderr.
---

sys.exit([_arg_])[¶](https://docs.python.org/3/library/sys.html#sys.exit "Link to this definition")
    
Raise a [`SystemExit`](https://docs.python.org/3/library/exceptions.html#SystemExit "SystemExit") exception, signaling an intention to exit the interpreter.
The optional argument _arg_ can be an integer giving the exit status (defaulting to zero), or another type of object. If it is an integer, zero is considered “successful termination” and any nonzero value is considered “abnormal termination” by shells and the like. Most systems require it to be in the range 0–127, and produce undefined results otherwise. Some systems have a convention for assigning specific meanings to specific exit codes, but these are generally underdeveloped; Unix programs generally use 2 for command line syntax errors and 1 for all other kind of errors. If another type of object is passed, `None` is equivalent to passing zero, and any other object is printed to [`stderr`](https://docs.python.org/3/library/sys.html#sys.stderr "sys.stderr") and results in an exit code of 1. In particular, `sys.exit("some error message")` is a quick way to exit a program when an error occurs.
Since [`exit()`](https://docs.python.org/3/library/constants.html#exit "exit") ultimately “only” raises an exception, it will only exit the process when called from the main thread, and the exception is not intercepted. Cleanup actions specified by finally clauses of [`try`](https://docs.python.org/3/reference/compound_stmts.html#try) statements are honored, and it is possible to intercept the exit attempt at an outer level.
Changed in version 3.6: If an error occurs in the cleanup after the Python interpreter has caught [`SystemExit`](https://docs.python.org/3/library/exceptions.html#SystemExit "SystemExit") (such as an error flushing buffered data in the standard streams), the exit status is changed to 120. 

sys.flags[¶](https://docs.python.org/3/library/sys.html#sys.flags "Link to this definition")
    
The [named tuple](https://docs.python.org/3/glossary.html#term-named-tuple) _flags_ exposes the status of command line flags. The attributes are read only. 

flags.debug[¶](https://docs.python.org/3/library/sys.html#sys.flags.debug "Link to this definition")
| [`-d`](https://docs.python.org/3/using/cmdline.html#cmdoption-d)  
---|--- 

flags.inspect[¶](https://docs.python.org/3/library/sys.html#sys.flags.inspect "Link to this definition")
| [`-i`](https://docs.python.org/3/using/cmdline.html#cmdoption-i) 

flags.interactive[¶](https://docs.python.org/3/library/sys.html#sys.flags.interactive "Link to this definition")
| [`-i`](https://docs.python.org/3/using/cmdline.html#cmdoption-i) 

flags.isolated[¶](https://docs.python.org/3/library/sys.html#sys.flags.isolated "Link to this definition")
| [`-I`](https://docs.python.org/3/using/cmdline.html#cmdoption-I) 

flags.optimize[¶](https://docs.python.org/3/library/sys.html#sys.flags.optimize "Link to this definition")
| [`-O`](https://docs.python.org/3/using/cmdline.html#cmdoption-O) or [`-OO`](https://docs.python.org/3/using/cmdline.html#cmdoption-OO) 

flags.dont_write_bytecode[¶](https://docs.python.org/3/library/sys.html#sys.flags.dont_write_bytecode "Link to this definition")
| [`-B`](https://docs.python.org/3/using/cmdline.html#cmdoption-B) 

flags.no_user_site[¶](https://docs.python.org/3/library/sys.html#sys.flags.no_user_site "Link to this definition")
| [`-s`](https://docs.python.org/3/using/cmdline.html#cmdoption-s) 

flags.no_site[¶](https://docs.python.org/3/library/sys.html#sys.flags.no_site "Link to this definition")
| [`-S`](https://docs.python.org/3/using/cmdline.html#cmdoption-S) 

flags.ignore_environment[¶](https://docs.python.org/3/library/sys.html#sys.flags.ignore_environment "Link to this definition")
| [`-E`](https://docs.python.org/3/using/cmdline.html#cmdoption-E) 

flags.verbose[¶](https://docs.python.org/3/library/sys.html#sys.flags.verbose "Link to this definition")
| [`-v`](https://docs.python.org/3/using/cmdline.html#cmdoption-v) 

flags.bytes_warning[¶](https://docs.python.org/3/library/sys.html#sys.flags.bytes_warning "Link to this definition")
| [`-b`](https://docs.python.org/3/using/cmdline.html#cmdoption-b) 

flags.quiet[¶](https://docs.python.org/3/library/sys.html#sys.flags.quiet "Link to this definition")
| [`-q`](https://docs.python.org/3/using/cmdline.html#cmdoption-q) 

flags.hash_randomization[¶](https://docs.python.org/3/library/sys.html#sys.flags.hash_randomization "Link to this definition")
| [`-R`](https://docs.python.org/3/using/cmdline.html#cmdoption-R) 

flags.dev_mode[¶](https://docs.python.org/3/library/sys.html#sys.flags.dev_mode "Link to this definition")
| [`-X dev`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) ([Python Development Mode](https://docs.python.org/3/library/devmode.html#devmode))