Title: Enumeration Types in Python
URL: https://docs.python.org/3/library/enum.html
Summary: This documentation chunk discusses various enumeration types available in Python, including `global_enum()`, which modifies enum representations, and `show_flag_values()`, which lists power-of-two integers in a flag. It also notes the introduction of several enums in different Python versions, such as `StrEnum` and `EnumDict`.
---

sed as a decorator.
> [`global_enum()`](https://docs.python.org/3/library/enum.html#enum.global_enum "enum.global_enum")
>> Modify the [`str()`](https://docs.python.org/3/library/stdtypes.html#str "str") and [`repr()`](https://docs.python.org/3/library/functions.html#repr "repr") of an enum to show its members as belonging to the module instead of its class, and export the enum members to the global namespace.
> [`show_flag_values()`](https://docs.python.org/3/library/enum.html#enum.show_flag_values "enum.show_flag_values")
>> Return a list of all power-of-two integers contained in a flag.
Added in version 3.6: `Flag`, `IntFlag`, `auto`
Added in version 3.11: `StrEnum`, `EnumCheck`, `ReprEnum`, `FlagBoundary`, `property`, `member`, `nonmember`, `global_enum`, `show_flag_values`
Added in version 3.13: `EnumDict`
## Data Types[¶](https://docs.python.org/3/library/enum.html#data-types "Link to this heading") 

_class_ enum.EnumType[¶](https://docs.python.org/3/library/enum.html#enum.EnumType "Link to this definition")
    
_EnumType_ is the [metaclass](https://docs.python.org/3/glossary.html#term-metaclass) for _enum_ enumerations. It is possible to subclass _EnumType_ – see [Subclassing EnumType](https://docs.python.org/3/howto/enum.html#enumtype-examples) for details.
`EnumType` is responsible for setting the correct `__repr__()`, `__str__()`, `__format__()`, and `__reduce__()` methods on the final _enum_ , as well as creating the enum members, properly handling duplicates, providing iteration over the enum class, etc. 

__call__(_cls_ , _value_ , _names =None_, _*_ , _module =None_, _qualname =None_, _type =None_, _start =1_, _boundary =None_)[¶](https://docs.python.org/3/library/enum.html#enum.EnumType.__call__ "Link to this definition")
    
This method is called in two different ways:
  * to look up an existing member:
> 

cls:
    
> The enum class being called. 

value:
    
> The value to lookup.
  * to use the `cls` enum to create a new enum (only if the existing enum does not have any members):
> 

cls:
    
> The enum class being called. 

value:
    
> The name of the new Enum to create. 

names:
    
> The names/values of the members for the new Enum. 

module:
    
> The name of the module the new Enum is created in. 

qualname:
    
> The actual location in the module where this Enum can be found. 

type:
    
> A mix-in type for the new Enum. 

start:
    
> The first integer value for the Enum (used by [`auto`](https://docs.python.org/3/library/enum.html#enum.auto "enum.auto")). 

boundary:
    
> How to handle out-of-range values from bit operations ([`Flag`](https://docs.python.org/3/library/enum.html#enum.Flag "enum.Flag") only).



__contains__(_cls_ , _member_)[¶](https://docs.python.org/3/library/enum.html#enum.EnumType.__contains__ "Link to this definition")
    
Returns `True` if member belongs to the `cls`:
>>>```
>>> some_var = Color.RED
>>> some_var in Color
True
>>> Color.RED.value in Color
True

```

Changed in version 3.12: Before Python 3.12, a `TypeError` is raised if a non-Enum-member is used in a containment check. 

__dir__(_cls_)[¶](https://docs.python.org/3/library/enum.html#enum.EnumType.__dir__ "Link to this definition")
    
Returns `['__class__', '__doc__', '__members__', '__module__']` and the names of the members in _cls_ :
>>>```
>>> dir(Color)
['BLUE', 'GREEN', 'RED', '__class__', '__contains__', '__doc__', '__getitem__', '__init_subclass__', '__iter__', '__len__', '__members__', '__module__', '__name__', '__qualname__']

```


__getitem__(_cls_ , _name_)[¶](https://docs.python.org/3/library/enum.html#enum.EnumType.__getitem__ "Link to this definition")
    
Returns the Enum member in _cls_ matching _name_ , or raises a [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError"):
>>>```
>>> Color['BLUE']
<Color.BLUE: 3>

```


__iter__(_cls_)[¶](https://docs.python.org/3/library/enum.html#enum.EnumType.__iter__ "Link to this definition")
    
Returns each member in _cls_ in definition order:
>>>```
>>> list(Color)
[<Color.RED: 1>, <Color.GREEN: 2>, <Color.BLUE: 3>]

```


__len__(_cls_)[¶](https://docs.python.org/3/library/enum.html#enum.EnumType.__len__ "Link to this definition")
    
Returns the number of member in _cls_ :
>>>```
>>> len(Color)
3

```


__members__[¶](https://docs.python.org/3/library/enum.html#enum.EnumType.__members__ "Link to this definition")
    
Returns a mapping of every enum name to its member, including aliases 

__reversed__(_cls_)[¶](https://docs.python.org/3/library/enum.html#enum.EnumType.__reversed__ "Link to this definition")
    
Returns each member in _cls_ in reverse definition order:
>>>```
>>> list(reversed(Color))
[<Color.BLUE: 3>, <Color.GREEN: 2>, <Color.RED: 1>]