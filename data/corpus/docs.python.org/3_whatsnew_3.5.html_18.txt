Title: Enhancements to the inspect module in Python 3.5
URL: https://docs.python.org/3/whatsnew/3.5.html
Summary: Python 3.5 introduces improvements to the inspect module, including the ability to bind arguments using Signature.bind(), apply defaults, and the addition of Signature.from_callable() for easier subclassing. The signature() function now has a follow_wrapped parameter to control following of __wrapped__ links.
---

rguments:
>>>```
>>> deffoo(a, b='ham', *args): pass
>>> ba = inspect.signature(foo).bind('spam')
>>> ba.apply_defaults()
>>> ba.arguments
OrderedDict([('a', 'spam'), ('b', 'ham'), ('args', ())])

```

(Contributed by Yury Selivanov in [bpo-24190](https://bugs.python.org/issue?@action=redirect&bpo=24190).)
A new class method [`Signature.from_callable()`](https://docs.python.org/3/library/inspect.html#inspect.Signature.from_callable "inspect.Signature.from_callable") makes subclassing of [`Signature`](https://docs.python.org/3/library/inspect.html#inspect.Signature "inspect.Signature") easier. (Contributed by Yury Selivanov and Eric Snow in [bpo-17373](https://bugs.python.org/issue?@action=redirect&bpo=17373).)
The [`signature()`](https://docs.python.org/3/library/inspect.html#inspect.signature "inspect.signature") function now accepts a _follow_wrapped_ optional keyword argument, which, when set to `False`, disables automatic following of `__wrapped__` links. (Contributed by Yury Selivanov in [bpo-20691](https://bugs.python.org/issue?@action=redirect&bpo=20691).)
A set of new functions to inspect [coroutine functions](https://docs.python.org/3/glossary.html#term-coroutine-function) and [coroutine objects](https://docs.python.org/3/glossary.html#term-coroutine) has been added: [`iscoroutine()`](https://docs.python.org/3/library/inspect.html#inspect.iscoroutine "inspect.iscoroutine"), [`iscoroutinefunction()`](https://docs.python.org/3/library/inspect.html#inspect.iscoroutinefunction "inspect.iscoroutinefunction"), [`isawaitable()`](https://docs.python.org/3/library/inspect.html#inspect.isawaitable "inspect.isawaitable"), [`getcoroutinelocals()`](https://docs.python.org/3/library/inspect.html#inspect.getcoroutinelocals "inspect.getcoroutinelocals"), and [`getcoroutinestate()`](https://docs.python.org/3/library/inspect.html#inspect.getcoroutinestate "inspect.getcoroutinestate"). (Contributed by Yury Selivanov in [bpo-24017](https://bugs.python.org/issue?@action=redirect&bpo=24017) and [bpo-24400](https://bugs.python.org/issue?@action=redirect&bpo=24400).)
The [`stack()`](https://docs.python.org/3/library/inspect.html#inspect.stack "inspect.stack"), [`trace()`](https://docs.python.org/3/library/inspect.html#inspect.trace "inspect.trace"), [`getouterframes()`](https://docs.python.org/3/library/inspect.html#inspect.getouterframes "inspect.getouterframes"), and [`getinnerframes()`](https://docs.python.org/3/library/inspect.html#inspect.getinnerframes "inspect.getinnerframes") functions now return a list of named tuples. (Contributed by Daniel Shahaf in [bpo-16808](https://bugs.python.org/issue?@action=redirect&bpo=16808).)
### io[Â¶](https://docs.python.org/3/whatsnew/3.5.html#io "Link to this heading")
A new [`BufferedIOBase.readinto1()`](https://docs.python.org/3/library/io.html#io.BufferedIOBase.readinto1 "io.BufferedIOBase.readinto1") method, that uses at most one call to the underlying raw streamâ€™s [`RawIOBase.read()`](https://docs.python.org/3/library/io.html#io.RawIOBase.read "io.RawIOBase.read") or [`RawIOBase.readinto()`](https://docs.python.org/3/library/io.html#io.RawIOBase.readinto "io.RawIOBase.readinto") methods. (Contributed by Nikolaus Rath in [bpo-20578](https://bugs.python.org/issue?@action=redirect&bpo=20578).)
### ipaddress[Â¶](https://docs.python.org/3/whatsnew/3.5.html#ipaddress "Link to this heading")
Both the [`IPv4Network`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network "ipaddress.IPv4Network") and [`IPv6Network`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Network "ipaddress.IPv6Network") classes now accept an `(address, netmask)` tuple argument, so as to easily construct network objects from existing addresses:
>>>```
>>> importipaddress
>>> ipaddress.IPv4Network(('127.0.0.0', 8))
IPv4Network('127.0.0.0/8')
>>> ipaddress.IPv4Network(('127.0.0.0', '255.0.0.0'))
IPv4Network('127.0.0.0/8')

```

(Contributed by Peter Moody and Antoine Pitrou in [bpo-16531](https://bugs.python.org/issue?@action=redirect&bpo=16531).)
A new `reverse_pointer` attribute for the [`IPv4Network`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network "ipaddress.IPv4Network") and [`IPv6Network`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Network "ipaddress.IPv6Network") classes returns the name of the reverse DNS PTR record:
>>>```
>>> importipaddress
>>> addr = ipaddress.IPv4Address('127.0.0.1')
>>> addr.reverse_pointer
'1.0.0.127.in-addr.arpa'
>>> addr6 = ipaddress.IPv6Address('::1')
>>> addr6.reverse_pointer
'1.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.0.ip6.arpa'