Title: Python Interpreter Interface Options
URL: https://docs.python.org/3/using/cmdline.html
Summary: This section describes the various ways to invoke the Python interpreter, including interactive mode, executing scripts from a file or directory, and running commands with the `-c` option.
---

```

### 1.1.1. Interface options[¶](https://docs.python.org/3/using/cmdline.html#interface-options "Link to this heading")
The interpreter interface resembles that of the UNIX shell, but provides some additional methods of invocation:
  * When called with standard input connected to a tty device, it prompts for commands and executes them until an EOF (an end-of-file character, you can produce that with `Ctrl`-`D` on UNIX or `Ctrl`-`Z,` `Enter` on Windows) is read. For more on interactive mode, see [Interactive Mode](https://docs.python.org/3/tutorial/appendix.html#tut-interac).
  * When called with a file name argument or with a file as standard input, it reads and executes a script from that file.
  * When called with a directory name argument, it reads and executes an appropriately named script from that directory.
  * When called with `-c command`, it executes the Python statement(s) given as _command_. Here _command_ may contain multiple statements separated by newlines. Leading whitespace is significant in Python statements!
  * When called with `-m module-name`, the given module is located on the Python module path and executed as a script.


In non-interactive mode, the entire input is parsed before it is executed.
An interface option terminates the list of options consumed by the interpreter, all consecutive arguments will end up in [`sys.argv`](https://docs.python.org/3/library/sys.html#sys.argv "sys.argv") – note that the first element, subscript zero (`sys.argv[0]`), is a string reflecting the program’s source. 

-c <command>[¶](https://docs.python.org/3/using/cmdline.html#cmdoption-c "Link to this definition")
    
Execute the Python code in _command_. _command_ can be one or more statements separated by newlines, with significant leading whitespace as in normal module code.
If this option is given, the first element of [`sys.argv`](https://docs.python.org/3/library/sys.html#sys.argv "sys.argv") will be `"-c"` and the current directory will be added to the start of [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path") (allowing modules in that directory to be imported as top level modules).
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `cpython.run_command` with argument `command`. 

-m <module-name>[¶](https://docs.python.org/3/using/cmdline.html#cmdoption-m "Link to this definition")
    
Search [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path") for the named module and execute its contents as the [`__main__`](https://docs.python.org/3/library/__main__.html#module-__main__ "__main__: The environment where top-level code is run. Covers command-line interfaces, import-time behavior, and ``__name__ == '__main__'``.") module.
Since the argument is a _module_ name, you must not give a file extension (`.py`). The module name should be a valid absolute Python module name, but the implementation may not always enforce this (e.g. it may allow you to use a name that includes a hyphen).
Package names (including namespace packages) are also permitted. When a package name is supplied instead of a normal module, the interpreter will execute `<pkg>.__main__` as the main module. This behaviour is deliberately similar to the handling of directories and zipfiles that are passed to the interpreter as the script argument.
Note
This option cannot be used with built-in modules and extension modules written in C, since they do not have Python module files. However, it can still be used for precompiled modules, even if the original source file is not available.
If this option is given, the first element of [`sys.argv`](https://docs.python.org/3/library/sys.html#sys.argv "sys.argv") will be the full path to the module file (while the module file is being located, the first element will be set to `"-m"`). As with the [`-c`](https://docs.python.org/3/using/cmdline.html#cmdoption-c) option, the current directory will be added to the start of [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path").
[`-I`](https://docs.python.org/3/using/cmdline.html#cmdoption-I) option can be used to run the script in isolated mode where [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path") contains neither the current directory nor the user’s site-packages directory. All `PYTHON*` environment variables are ignored, too.
Many standard library modules contain code that is invoked on their execution as a script. An example is the [`timeit`](https://docs.python.org/3/library/timeit.html#module-timeit "timeit: Measure the execution time of small code snippets.") module:
```
python-mtimeit-s"setup here""benchmarked code here"
python-mtimeit-h# for details