Title: PDB Commands: Run, Restart, Quit
URL: https://docs.python.org/3/library/pdb.html
Summary: This section outlines key commands for the Python debugger (PDB), including 'run' to execute a program with optional arguments, 'restart' to restart the debugged program while preserving debugger settings, and 'quit' to exit the debugger and abort the current program.
---

```


run [args ...][¶](https://docs.python.org/3/library/pdb.html#pdbcommand-run "Link to this definition")


restart [args ...][¶](https://docs.python.org/3/library/pdb.html#pdbcommand-restart "Link to this definition")
    
Restart the debugged Python program. If _args_ is supplied, it is split with [`shlex`](https://docs.python.org/3/library/shlex.html#module-shlex "shlex: Simple lexical analysis for Unix shell-like languages.") and the result is used as the new [`sys.argv`](https://docs.python.org/3/library/sys.html#sys.argv "sys.argv"). History, breakpoints, actions and debugger options are preserved. [`restart`](https://docs.python.org/3/library/pdb.html#pdbcommand-restart) is an alias for [`run`](https://docs.python.org/3/library/pdb.html#pdbcommand-run). 

q(uit)[¶](https://docs.python.org/3/library/pdb.html#pdbcommand-quit "Link to this definition")
    
Quit from the debugger. The program being executed is aborted. 

debug code[¶](https://docs.python.org/3/library/pdb.html#pdbcommand-debug "Link to this definition")
    
Enter a recursive debugger that steps through _code_ (which is an arbitrary expression or statement to be executed in the current environment). 

retval[¶](https://docs.python.org/3/library/pdb.html#pdbcommand-retval "Link to this definition")
    
Print the return value for the last return of the current function. 

exceptions [excnumber][¶](https://docs.python.org/3/library/pdb.html#pdbcommand-exceptions "Link to this definition")
    
List or jump between chained exceptions.
When using `pdb.pm()` or `Pdb.post_mortem(...)` with a chained exception instead of a traceback, it allows the user to move between the chained exceptions using `exceptions` command to list exceptions, and `exceptions <number>` to switch to that exception.
Example:
```
defout():
  try:
    middle()
  except Exception as e:
    raise ValueError("reraise middle() error") frome
defmiddle():
  try:
    return inner(0)
  except Exception as e:
    raise ValueError("Middle fail")
definner(x):
  1 / x
 out()

```

calling `pdb.pm()` will allow to move between exceptions:
```
> example.py(5)out()
-> raise ValueError("reraise middle() error") frome
(Pdb) exceptions
 0 ZeroDivisionError('division by zero')
 1 ValueError('Middle fail')
> 2 ValueError('reraise middle() error')
(Pdb) exceptions 0
> example.py(16)inner()
-> 1 / x
(Pdb) up
> example.py(10)middle()
-> return inner(0)