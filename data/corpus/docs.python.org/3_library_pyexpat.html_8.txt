Title: Error Handling in the pyexpat Module
URL: https://docs.python.org/3/library/pyexpat.html
Summary: The `errors` module within `pyexpat` provides constants for error messages and a dictionary that maps these messages to error codes. It includes the attributes `ExpatError.lineno` for the line number of an error (starting from 1) and `ExpatError.offset` for the character position within the line (starting from 0). An example of setting up error handlers is also provided.
---

```

The [`errors`](https://docs.python.org/3/library/pyexpat.html#module-xml.parsers.expat.errors "xml.parsers.expat.errors") module also provides error message constants and a dictionary [`codes`](https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.errors.codes "xml.parsers.expat.errors.codes") mapping these messages back to the error codes, see below. 

ExpatError.lineno[¶](https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.ExpatError.lineno "Link to this definition")
    
Line number on which the error was detected. The first line is numbered `1`. 

ExpatError.offset[¶](https://docs.python.org/3/library/pyexpat.html#xml.parsers.expat.ExpatError.offset "Link to this definition")
    
Character offset into the line where the error occurred. The first column is numbered `0`.
## Example[¶](https://docs.python.org/3/library/pyexpat.html#example "Link to this heading")
The following program defines three handlers that just print out their arguments.
```
importxml.parsers.expat
# 3 handler functions
defstart_element(name, attrs):
  print('Start element:', name, attrs)
defend_element(name):
  print('End element:', name)
defchar_data(data):
  print('Character data:', repr(data))
p = xml.parsers.expat.ParserCreate()
p.StartElementHandler = start_element
p.EndElementHandler = end_element
p.CharacterDataHandler = char_data
p.Parse("""<?xml version="1.0"?>
<parent id="top"><child1 name="paul">Text goes here</child1>
<child2 name="fred">More text</child2>
</parent>""", 1)

```

The output from this program is:
```
Start element: parent {'id': 'top'}
Start element: child1 {'name': 'paul'}
Character data: 'Text goes here'
End element: child1
Character data: '\n'
Start element: child2 {'name': 'fred'}
Character data: 'More text'
End element: child2
Character data: '\n'
End element: parent