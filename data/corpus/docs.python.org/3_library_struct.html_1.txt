Title: struct — Interpret bytes as packed binary data
URL: https://docs.python.org/3/library/struct.html
Summary: The `struct` module in Python allows conversion between Python values and C structs as bytes objects. It uses format strings for specifying conversions, serving applications such as data exchange with external sources and interaction between Python and C. By default, it operates in native mode, reflecting the platform on which Python was built.
---

# `struct` — Interpret bytes as packed binary data[¶](https://docs.python.org/3/library/struct.html#struct-interpret-bytes-as-packed-binary-data "Link to this heading")
**Source code:** [Lib/struct.py](https://github.com/python/cpython/tree/3.13/Lib/struct.py)
This module converts between Python values and C structs represented as Python [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") objects. Compact [format strings](https://docs.python.org/3/library/struct.html#struct-format-strings) describe the intended conversions to/from Python values. The module’s functions and objects can be used for two largely distinct applications, data exchange with external sources (files or network connections), or data transfer between the Python application and the C layer.
Note
When no prefix character is given, native mode is the default. It packs or unpacks data based on the platform and compiler on which the Python interpreter was built. The result of packing a given C struct includes pad bytes which maintain proper alignment for the C types involved; similarly, alignment is taken into account when unpacking. In contrast, when communicating data between external sources, the programmer is responsible for defining byte ordering and padding between elements. See [Byte Order, Size, and Alignment](https://docs.python.org/3/library/struct.html#struct-alignment) for details.
Several [`struct`](https://docs.python.org/3/library/struct.html#module-struct "struct: Interpret bytes as packed binary data.") functions (and methods of [`Struct`](https://docs.python.org/3/library/struct.html#struct.Struct "struct.Struct")) take a _buffer_ argument. This refers to objects that implement the [Buffer Protocol](https://docs.python.org/3/c-api/buffer.html#bufferobjects) and provide either a readable or read-writable buffer. The most common types used for that purpose are [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") and [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray"), but many other types that can be viewed as an array of bytes implement the buffer protocol, so that they can be read/filled without additional copying from a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") object.
## Functions and Exceptions[¶](https://docs.python.org/3/library/struct.html#functions-and-exceptions "Link to this heading")
The module defines the following exception and functions: 

_exception_ struct.error[¶](https://docs.python.org/3/library/struct.html#struct.error "Link to this definition")
    
Exception raised on various occasions; argument is a string describing what is wrong. 

struct.pack(_format_ , _v1_ , _v2_ , _..._)[¶](https://docs.python.org/3/library/struct.html#struct.pack "Link to this definition")
    
Return a bytes object containing the values _v1_ , _v2_ , … packed according to the format string _format_. The arguments must match the values required by the format exactly. 

struct.pack_into(_format_ , _buffer_ , _offset_ , _v1_ , _v2_ , _..._)[¶](https://docs.python.org/3/library/struct.html#struct.pack_into "Link to this definition")
    
Pack the values _v1_ , _v2_ , … according to the format string _format_ and write the packed bytes into the writable buffer _buffer_ starting at position _offset_. Note that _offset_ is a required argument. 

struct.unpack(_format_ , _buffer_)[¶](https://docs.python.org/3/library/struct.html#struct.unpack "Link to this definition")
    
Unpack from the buffer _buffer_ (presumably packed by `pack(format, ...)`) according to the format string _format_. The result is a tuple even if it contains exactly one item. The buffer’s size in bytes must match the size required by the format, as reflected by [`calcsize()`](https://docs.python.org/3/library/struct.html#struct.calcsize "struct.calcsize"). 

struct.unpack_from(_format_ , _/_ , _buffer_ , _offset =0_)[¶](https://docs.python.org/3/library/struct.html#struct.unpack_from "Link to this definition")
    
Unpack from _buffer_ starting at position _offset_ , according to the format string _format_. The result is a tuple even if it contains exactly one item. The buffer’s size in bytes, starting at position _offset_ , must be at least the size required by the format, as reflected by [`calcsize()`](https://docs.python.org/3/library/struct.html#struct.calcsize "struct.calcsize").