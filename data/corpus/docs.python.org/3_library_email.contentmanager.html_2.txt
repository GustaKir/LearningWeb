Title: Email Content Manager Overview
URL: https://docs.python.org/3/library/email.contentmanager.html
Summary: The email.contentmanager.raw_data_manager enhances the base Message API by simplifying content handling for text and byte strings. It automatically decodes text parts to unicode, offers rich options for setting content and headers, and supports various 'add_' methods to simplify multipart message creation.
---

email.contentmanager.raw_data_manager[¶](https://docs.python.org/3/library/email.contentmanager.html#email.contentmanager.raw_data_manager "Link to this definition")
    
This content manager provides only a minimum interface beyond that provided by [`Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "email.message.Message") itself: it deals only with text, raw byte strings, and [`Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "email.message.Message") objects. Nevertheless, it provides significant advantages compared to the base API: `get_content` on a text part will return a unicode string without the application needing to manually decode it, `set_content` provides a rich set of options for controlling the headers added to a part and controlling the content transfer encoding, and it enables the use of the various `add_` methods, thereby simplifying the creation of multipart messages. 

email.contentmanager.get_content(_msg_ , _errors ='replace'_)[¶](https://docs.python.org/3/library/email.contentmanager.html#email.contentmanager.get_content "Link to this definition")
    
Return the payload of the part as either a string (for `text` parts), an [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") object (for `message/rfc822` parts), or a `bytes` object (for all other non-multipart types). Raise a [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError") if called on a `multipart`. If the part is a `text` part and _errors_ is specified, use it as the error handler when decoding the payload to unicode. The default error handler is `replace`. 

email.contentmanager.set_content(_msg_ , _< 'str'>_, _subtype="plain"_ , _charset='utf-8'_ , _cte=None_ , _disposition=None_ , _filename=None_ , _cid=None_ , _params=None_ , _headers=None_)[¶](https://docs.python.org/3/library/email.contentmanager.html#email.contentmanager.set_content "Link to this definition")


email.contentmanager.set_content(_msg_ , _< 'bytes'>_, _maintype_ , _subtype_ , _cte="base64"_ , _disposition=None_ , _filename=None_ , _cid=None_ , _params=None_ , _headers=None_)


email.contentmanager.set_content(_msg_ , _< 'EmailMessage'>_, _cte=None_ , _disposition=None_ , _filename=None_ , _cid=None_ , _params=None_ , _headers=None_)
    
Add headers and payload to _msg_ :
Add a _Content-Type_ header with a `maintype/subtype` value.
  * For `str`, set the MIME `maintype` to `text`, and set the subtype to _subtype_ if it is specified, or `plain` if it is not.
  * For `bytes`, use the specified _maintype_ and _subtype_ , or raise a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") if they are not specified.
  * For [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") objects, set the maintype to `message`, and set the subtype to _subtype_ if it is specified or `rfc822` if it is not. If _subtype_ is `partial`, raise an error (`bytes` objects must be used to construct `message/partial` parts).