Title: Python 2.5 Release Notes - Performance Improvements and Module Updates
URL: https://docs.python.org/3/whatsnew/2.5.html
Summary: The pybench suite enhances performance measurement of the Python interpreter compared to pystone.py by timing specific operations. The pyexpat module updates to Expat parser version 2.0. The Queue class adds two new methods: join() for blocking until queue items are processed and task_done() for signaling task completion. Additionally, the old regex and regsub modules have been deprecated.
---

irectory. The pybench suite is an improvement on the commonly used `pystone.py` program because pybench provides a more detailed measurement of the interpreter’s speed. It times particular operations such as function calls, tuple slicing, method lookups, and numeric operations, instead of performing many different operations and reducing the result to a single number as `pystone.py` does.
  * The `pyexpat` module now uses version 2.0 of the Expat parser. (Contributed by Trent Mick.)
  * The [`Queue`](https://docs.python.org/3/library/queue.html#queue.Queue "queue.Queue") class provided by the `Queue` module gained two new methods. `join()` blocks until all items in the queue have been retrieved and all processing work on the items have been completed. Worker threads call the other new method, `task_done()`, to signal that processing for an item has been completed. (Contributed by Raymond Hettinger.)
  * The old `regex` and `regsub` modules, which have been deprecated ever since Python 2.0, have finally been deleted. Other deleted modules: `statcache`, `tzparse`, `whrandom`.
  * Also deleted: the `lib-old` directory, which includes ancient modules such as `dircmp` and `ni`, was removed. `lib-old` wasn’t on the default `sys.path`, so unless your programs explicitly added the directory to `sys.path`, this removal shouldn’t affect your code.
  * The [`rlcompleter`](https://docs.python.org/3/library/rlcompleter.html#module-rlcompleter "rlcompleter: Python identifier completion, suitable for the GNU readline library.") module is no longer dependent on importing the [`readline`](https://docs.python.org/3/library/readline.html#module-readline "readline: GNU readline support for Python. \(Unix\)") module and therefore now works on non-Unix platforms. (Patch from Robert Kiendl.)
  * The [`SimpleXMLRPCServer`](https://docs.python.org/3/library/xmlrpc.server.html#module-xmlrpc.server "xmlrpc.server: Basic XML-RPC server implementations.") and [`DocXMLRPCServer`](https://docs.python.org/3/library/xmlrpc.server.html#module-xmlrpc.server "xmlrpc.server: Basic XML-RPC server implementations.") classes now have a `rpc_paths` attribute that constrains XML-RPC operations to a limited set of URL paths; the default is to allow only `'/'` and `'/RPC2'`. Setting `rpc_paths` to `None` or an empty tuple disables this path checking.
  * The [`socket`](https://docs.python.org/3/library/socket.html#module-socket "socket: Low-level networking interface.") module now supports `AF_NETLINK` sockets on Linux, thanks to a patch from Philippe Biondi. Netlink sockets are a Linux-specific mechanism for communications between a user-space process and kernel code; an introductory article about them is at <https://www.linuxjournal.com/article/7356>. In Python code, netlink addresses are represented as a tuple of 2 integers, `(pid, group_mask)`.
Two new methods on socket objects, `recv_into(buffer)` and `recvfrom_into(buffer)`, store the received data in an object that supports the buffer protocol instead of returning the data as a string. This means you can put the data directly into an array or a memory-mapped file.
Socket objects also gained `getfamily()`, `gettype()`, and `getproto()` accessor methods to retrieve the family, type, and protocol values for the socket.
  * New module: the `spwd` module provides functions for accessing the shadow password database on systems that support shadow passwords.
  * The [`struct`](https://docs.python.org/3/library/struct.html#module-struct "struct: Interpret bytes as packed binary data.") is now faster because it compiles format strings into `Struct` objects with `pack()` and `unpack()` methods. This is similar to how the [`re`](https://docs.python.org/3/library/re.html#module-re "re: Regular expression operations.") module lets you create compiled regular expression objects. You can still use the module-level `pack()` and `unpack()` functions; they’ll create `Struct` objects and cache them. Or you can use `Struct` instances directly:
```
s = struct.Struct('ih3s')
data = s.pack(1972, 187, 'abc')
year, number, name = s.unpack(data)