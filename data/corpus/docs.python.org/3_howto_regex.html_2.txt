Title: Introduction to Character Classes in Regex
URL: https://docs.python.org/3/howto/regex.html
Summary: This section discusses the use of metacharacters `[` and `]` for defining character classes in regular expressions. It explains how to specify characters through listing or using ranges, such as `[abc]` or `[a-c]`. It also covers the concept of complementing character sets with `'^'`, allowing for matches of any character not included in the class.
---

```

The first metacharacters we’ll look at are `[` and `]`. They’re used for specifying a character class, which is a set of characters that you wish to match. Characters can be listed individually, or a range of characters can be indicated by giving two characters and separating them by a `'-'`. For example, `[abc]` will match any of the characters `a`, `b`, or `c`; this is the same as `[a-c]`, which uses a range to express the same set of characters. If you wanted to match only lowercase letters, your RE would be `[a-z]`.
Metacharacters (except `\`) are not active inside classes. For example, `[akm$]` will match any of the characters `'a'`, `'k'`, `'m'`, or `'$'`; `'$'` is usually a metacharacter, but inside a character class it’s stripped of its special nature.
You can match the characters not listed within the class by _complementing_ the set. This is indicated by including a `'^'` as the first character of the class. For example, `[^5]` will match any character except `'5'`. If the caret appears elsewhere in a character class, it does not have special meaning. For example: `[5^]` will match either a `'5'` or a `'^'`.
Perhaps the most important metacharacter is the backslash, `\`. As in Python string literals, the backslash can be followed by various characters to signal various special sequences. It’s also used to escape all the metacharacters so you can still match them in patterns; for example, if you need to match a `[` or `\`, you can precede them with a backslash to remove their special meaning: `\[` or `\\`.
Some of the special sequences beginning with `'\'` represent predefined sets of characters that are often useful, such as the set of digits, the set of letters, or the set of anything that isn’t whitespace.
Let’s take an example: `\w` matches any alphanumeric character. If the regex pattern is expressed in bytes, this is equivalent to the class `[a-zA-Z0-9_]`. If the regex pattern is a string, `\w` will match all the characters marked as letters in the Unicode database provided by the [`unicodedata`](https://docs.python.org/3/library/unicodedata.html#module-unicodedata "unicodedata: Access the Unicode Database.") module. You can use the more restricted definition of `\w` in a string pattern by supplying the [`re.ASCII`](https://docs.python.org/3/library/re.html#re.ASCII "re.ASCII") flag when compiling the regular expression.
The following list of special sequences isn’t complete. For a complete list of sequences and expanded class definitions for Unicode string patterns, see the last part of [Regular Expression Syntax](https://docs.python.org/3/library/re.html#re-syntax) in the Standard Library reference. In general, the Unicode versions match any character that’s in the appropriate category in the Unicode database. 

`\d`
    
Matches any decimal digit; this is equivalent to the class `[0-9]`. 

`\D`
    
Matches any non-digit character; this is equivalent to the class `[^0-9]`. 

`\s`
    
Matches any whitespace character; this is equivalent to the class `[ \t\n\r\f\v]`. 

`\S`
    
Matches any non-whitespace character; this is equivalent to the class `[^ \t\n\r\f\v]`. 

`\w`
    
Matches any alphanumeric character; this is equivalent to the class `[a-zA-Z0-9_]`.