Title: ConfigParser 'items' and 'set' Methods
URL: https://docs.python.org/3/library/configparser.html
Summary: This section explains the 'items' method for retrieving option pairs from a configuration section and the 'set' method for updating options within a section. Key changes in version 3.8 are highlighted, noting the exclusion of items present in '_vars_' from 'items' results.
---

items(_section_ , _raw =False_, _vars =None_)
    
When _section_ is not given, return a list of _section_name_ , _section_proxy_ pairs, including DEFAULTSECT.
Otherwise, return a list of _name_ , _value_ pairs for the options in the given _section_. Optional arguments have the same meaning as for the [`get()`](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.get "configparser.ConfigParser.get") method.
Changed in version 3.8: Items present in _vars_ no longer appear in the result. The previous behaviour mixed actual parser options with variables provided for interpolation. 

set(_section_ , _option_ , _value_)[¶](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.set "Link to this definition")
    
If the given section exists, set the given option to the specified value; otherwise raise [`NoSectionError`](https://docs.python.org/3/library/configparser.html#configparser.NoSectionError "configparser.NoSectionError"). _option_ and _value_ must be strings; if not, [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") is raised. 

write(_fileobject_ , _space_around_delimiters =True_)[¶](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.write "Link to this definition")
    
Write a representation of the configuration to the specified [file object](https://docs.python.org/3/glossary.html#term-file-object), which must be opened in text mode (accepting strings). This representation can be parsed by a future [`read()`](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.read "configparser.ConfigParser.read") call. If _space_around_delimiters_ is true, delimiters between keys and values are surrounded by spaces.
Note
Comments in the original configuration file are not preserved when writing the configuration back. What is considered a comment, depends on the given values for _comment_prefix_ and _inline_comment_prefix_. 

remove_option(_section_ , _option_)[¶](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.remove_option "Link to this definition")
    
Remove the specified _option_ from the specified _section_. If the section does not exist, raise [`NoSectionError`](https://docs.python.org/3/library/configparser.html#configparser.NoSectionError "configparser.NoSectionError"). If the option existed to be removed, return [`True`](https://docs.python.org/3/library/constants.html#True "True"); otherwise return [`False`](https://docs.python.org/3/library/constants.html#False "False"). 

remove_section(_section_)[¶](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.remove_section "Link to this definition")
    
Remove the specified _section_ from the configuration. If the section in fact existed, return `True`. Otherwise return `False`. 

optionxform(_option_)[¶](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.optionxform "Link to this definition")
    
Transforms the option name _option_ as found in an input file or as passed in by client code to the form that should be used in the internal structures. The default implementation returns a lower-case version of _option_ ; subclasses may override this or client code can set an attribute of this name on instances to affect this behavior.
You don’t need to subclass the parser to use this method, you can also set it on an instance, to a function that takes a string argument and returns a string. Setting it to `str`, for example, would make option names case sensitive:
```
cfgparser = ConfigParser()
cfgparser.optionxform = str