Title: Deprecated Features in Python 3.5
URL: https://docs.python.org/3/whatsnew/3.5.html
Summary: This section discusses new keywords `async` and `await`, which should not be used as names, and highlights the deprecated behavior around raising `StopIteration` in generators, which will result in warnings in future Python versions.
---

## Deprecated[¶](https://docs.python.org/3/whatsnew/3.5.html#deprecated "Link to this heading")
### New Keywords[¶](https://docs.python.org/3/whatsnew/3.5.html#new-keywords "Link to this heading")
`async` and `await` are not recommended to be used as variable, class, function or module names. Introduced by [**PEP 492**](https://peps.python.org/pep-0492/) in Python 3.5, they will become proper keywords in Python 3.7.
### Deprecated Python Behavior[¶](https://docs.python.org/3/whatsnew/3.5.html#deprecated-python-behavior "Link to this heading")
Raising the [`StopIteration`](https://docs.python.org/3/library/exceptions.html#StopIteration "StopIteration") exception inside a generator will now generate a silent [`PendingDeprecationWarning`](https://docs.python.org/3/library/exceptions.html#PendingDeprecationWarning "PendingDeprecationWarning"), which will become a non-silent deprecation warning in Python 3.6 and will trigger a [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError") in Python 3.7. See [PEP 479: Change StopIteration handling inside generators](https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-479) for details.
### Unsupported Operating Systems[¶](https://docs.python.org/3/whatsnew/3.5.html#unsupported-operating-systems "Link to this heading")
Windows XP is no longer supported by Microsoft, thus, per [**PEP 11**](https://peps.python.org/pep-0011/), CPython 3.5 is no longer officially supported on this OS.
### Deprecated Python modules, functions and methods[¶](https://docs.python.org/3/whatsnew/3.5.html#deprecated-python-modules-functions-and-methods "Link to this heading")
The `formatter` module has now graduated to full deprecation and is still slated for removal in Python 3.6.
The `asyncio.async()` function is deprecated in favor of [`ensure_future()`](https://docs.python.org/3/library/asyncio-future.html#asyncio.ensure_future "asyncio.ensure_future").
The `smtpd` module has in the past always decoded the DATA portion of email messages using the `utf-8` codec. This can now be controlled by the new _decode_data_ keyword to `SMTPServer`. The default value is `True`, but this default is deprecated. Specify the _decode_data_ keyword with an appropriate value to avoid the deprecation warning.
Directly assigning values to the [`key`](https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel.key "http.cookies.Morsel.key"), [`value`](https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel.value "http.cookies.Morsel.value") and [`coded_value`](https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel.coded_value "http.cookies.Morsel.coded_value") of [`http.cookies.Morsel`](https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel "http.cookies.Morsel") objects is deprecated. Use the [`set()`](https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel.set "http.cookies.Morsel.set") method instead. In addition, the undocumented _LegalChars_ parameter of [`set()`](https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel.set "http.cookies.Morsel.set") is deprecated, and is now ignored.
Passing a format string as keyword argument _format_string_ to the [`format()`](https://docs.python.org/3/library/string.html#string.Formatter.format "string.Formatter.format") method of the [`string.Formatter`](https://docs.python.org/3/library/string.html#string.Formatter "string.Formatter") class has been deprecated. (Contributed by Serhiy Storchaka in [bpo-23671](https://bugs.python.org/issue?@action=redirect&bpo=23671).)
The `platform.dist()` and `platform.linux_distribution()` functions are now deprecated. Linux distributions use too many different ways of describing themselves, so the functionality is left to a package. (Contributed by Vajrasky Kok and Berker Peksag in [bpo-1322](https://bugs.python.org/issue?@action=redirect&bpo=1322).)
The previously undocumented `from_function` and `from_builtin` methods of [`inspect.Signature`](https://docs.python.org/3/library/inspect.html#inspect.Signature "inspect.Signature") are deprecated. Use the new [`Signature.from_callable()`](https://docs.python.org/3/library/inspect.html#inspect.Signature.from_callable "inspect.Signature.from_callable") method instead. (Contributed by Yury Selivanov in [bpo-24248](https://bugs.python.org/issue?@action=redirect&bpo=24248).)
The `inspect.getargspec()` function is deprecated and scheduled to be removed in Python 3.6. (See [bpo-20438](https://bugs.python.org/issue?@action=redirect&bpo=20438) for details.)
The [`inspect`](https://docs.python.org/3/library/inspect.html#module-inspect "inspect: Extract information and source code from live objects.") [`getfullargspec()`](https://docs.python.org/3/library/inspect.html#inspect.getfullargspec "inspect.getfullargspec"), [`getcallargs()`](https://docs.python.org/3/library/inspect.html#inspect.getcallargs "inspect.getcallargs"), and `formatargspec()` functions are depr