Title: String Encoding in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: The `str.encode` method encodes a string to bytes, defaulting to 'utf-8'. The `_errors` parameter determines how encoding errors are managed, with options including 'strict', 'ignore', 'replace', and more. For further details on encoding and error handling, reference the Standard Encodings and Error Handlers documentation.
---

str.encode(_encoding ='utf-8'_, _errors ='strict'_)[¶](https://docs.python.org/3/library/stdtypes.html#str.encode "Link to this definition")
    
Return the string encoded to [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes").
_encoding_ defaults to `'utf-8'`; see [Standard Encodings](https://docs.python.org/3/library/codecs.html#standard-encodings) for possible values.
_errors_ controls how encoding errors are handled. If `'strict'` (the default), a [`UnicodeError`](https://docs.python.org/3/library/exceptions.html#UnicodeError "UnicodeError") exception is raised. Other possible values are `'ignore'`, `'replace'`, `'xmlcharrefreplace'`, `'backslashreplace'` and any other name registered via [`codecs.register_error()`](https://docs.python.org/3/library/codecs.html#codecs.register_error "codecs.register_error"). See [Error Handlers](https://docs.python.org/3/library/codecs.html#error-handlers) for details.
For performance reasons, the value of _errors_ is not checked for validity unless an encoding error actually occurs, [Python Development Mode](https://docs.python.org/3/library/devmode.html#devmode) is enabled or a [debug build](https://docs.python.org/3/using/configure.html#debug-build) is used.
Changed in version 3.1: Added support for keyword arguments.
Changed in version 3.9: The value of the _errors_ argument is now checked in [Python Development Mode](https://docs.python.org/3/library/devmode.html#devmode) and in [debug mode](https://docs.python.org/3/using/configure.html#debug-build). 

str.endswith(_suffix_[, _start_[, _end_]])[¶](https://docs.python.org/3/library/stdtypes.html#str.endswith "Link to this definition")
    
Return `True` if the string ends with the specified _suffix_ , otherwise return `False`. _suffix_ can also be a tuple of suffixes to look for. With optional _start_ , test beginning at that position. With optional _end_ , stop comparing at that position. 

str.expandtabs(_tabsize =8_)[¶](https://docs.python.org/3/library/stdtypes.html#str.expandtabs "Link to this definition")
    
Return a copy of the string where all tab characters are replaced by one or more spaces, depending on the current column and the given tab size. Tab positions occur every _tabsize_ characters (default is 8, giving tab positions at columns 0, 8, 16 and so on). To expand the string, the current column is set to zero and the string is examined character by character. If the character is a tab (`\t`), one or more space characters are inserted in the result until the current column is equal to the next tab position. (The tab character itself is not copied.) If the character is a newline (`\n`) or return (`\r`), it is copied and the current column is reset to zero. Any other character is copied unchanged and the current column is incremented by one regardless of how the character is represented when printed.
>>>```
>>> '01\t012\t0123\t01234'.expandtabs()
'01   012   0123  01234'
>>> '01\t012\t0123\t01234'.expandtabs(4)
'01 012 0123  01234'

```


str.find(_sub_[, _start_[, _end_]])[¶](https://docs.python.org/3/library/stdtypes.html#str.find "Link to this definition")
    
Return the lowest index in the string where substring _sub_ is found within the slice `s[start:end]`. Optional arguments _start_ and _end_ are interpreted as in slice notation. Return `-1` if _sub_ is not found.
Note
The [`find()`](https://docs.python.org/3/library/stdtypes.html#str.find "str.find") method should be used only if you need to know the position of _sub_. To check if _sub_ is a substring or not, use the [`in`](https://docs.python.org/3/reference/expressions.html#in) operator:
>>>```
>>> 'Py' in 'Python'
True

```


str.format(_* args_, _** kwargs_)[¶](https://docs.python.org/3/library/stdtypes.html#str.format "Link to this definition")
    
Perform a string formatting operation. The string on which this method is called can contain literal text or replacement fields delimited by braces `{}`. Each replacement field contains either the numeric index of a positional argument, or the name of a keyword argument. Returns a copy of the string where each replacement field is replaced with the string value of the corresponding argument.
>>>```
>>> "The sum of 1 + 2 is {0}".format(1+2)
'The sum of 1 + 2 is 3'