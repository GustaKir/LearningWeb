Title: Python Library Updates
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: Recent changes in the Python library include the addition of an 'order' parameter to memoryview.tobytes(), modifications to the _asdict() method for namedtuples returning a regular dict, and improvements in subprocess.Popen's internal handling of pipe file handles to prevent leaks. A fix for RISC-V related to ctypes and additional enhancements to the shared memory submodule are also noted.
---

### Library[¶](https://docs.python.org/3/whatsnew/changelog.html#id475 "Link to this heading")
  * [bpo-35845](https://bugs.python.org/issue?@action=redirect&bpo=35845): Add ‘order’ parameter to memoryview.tobytes().
  * [bpo-35864](https://bugs.python.org/issue?@action=redirect&bpo=35864): The _asdict() method for collections.namedtuple now returns a regular dict instead of an OrderedDict.
  * [bpo-35537](https://bugs.python.org/issue?@action=redirect&bpo=35537): An ExitStack is now used internally within subprocess.Popen to clean up pipe file handles. No behavior change in normal operation. But if closing one handle were ever to cause an exception, the others will now be closed instead of leaked. (patch by Giampaolo Rodola)
  * [bpo-35847](https://bugs.python.org/issue?@action=redirect&bpo=35847): RISC-V needed the CTYPES_PASS_BY_REF_HACK. Fixes ctypes Structure test_pass_by_value.
  * [bpo-35813](https://bugs.python.org/issue?@action=redirect&bpo=35813): Shared memory submodule added to multiprocessing to avoid need for serialization between processes
  * [bpo-35780](https://bugs.python.org/issue?@action=redirect&bpo=35780): Fix lru_cache() errors arising in recursive, reentrant, or multi-threaded code. These errors could result in orphan links and in the cache being trapped in a state with fewer than the specified maximum number of links. Fix handling of negative maxsize which should have been treated as zero. Fix errors in toggling the “full” status flag. Fix misordering of links when errors are encountered. Sync-up the C code and pure Python code for the space saving path in functions with a single positional argument. In this common case, the space overhead of an lru cache entry is reduced by almost half. Fix counting of cache misses. In error cases, the miss count was out of sync with the actual number of times the underlying user function was called.
  * [bpo-35537](https://bugs.python.org/issue?@action=redirect&bpo=35537): [`os.posix_spawn()`](https://docs.python.org/3/library/os.html#os.posix_spawn "os.posix_spawn") and [`os.posix_spawnp()`](https://docs.python.org/3/library/os.html#os.posix_spawnp "os.posix_spawnp") now have a _setsid_ parameter.
  * [bpo-23846](https://bugs.python.org/issue?@action=redirect&bpo=23846): [`asyncio.ProactorEventLoop`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.ProactorEventLoop "asyncio.ProactorEventLoop") now catches and logs send errors when the self-pipe is full.
  * [bpo-34323](https://bugs.python.org/issue?@action=redirect&bpo=34323): [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O."): Enhance `IocpProactor.close()` log: wait 1 second before the first log, then log every second. Log also the number of seconds since `close()` was called.
  * [bpo-35674](https://bugs.python.org/issue?@action=redirect&bpo=35674): Add a new [`os.posix_spawnp()`](https://docs.python.org/3/library/os.html#os.posix_spawnp "os.posix_spawnp") function. Patch by Joannah Nanjekye.
  * [bpo-35733](https://bugs.python.org/issue?@action=redirect&bpo=35733): `ast.Constant(boolean)` no longer an instance of `ast.Num`. Patch by Anthony Sottile.
  * [bpo-35726](https://bugs.python.org/issue?@action=redirect&bpo=35726): QueueHandler.prepare() now makes a copy of the record before modifying and enqueueing it, to avoid affecting other handlers in the chain.
  * [bpo-35719](https://bugs.python.org/issue?@action=redirect&bpo=35719): Sped up multi-argument [`math`](https://docs.python.org/3/library/math.html#module-math "math: Mathematical functions \(sin\(\) etc.\).") functions atan2(), copysign(), remainder() and hypot() by 1.3–2.5 times.
  * [bpo-35717](https://bugs.python.org/issue?@action=redirect&bpo=35717): Fix KeyError exception raised when using enums and compile. Patch contributed by Rémi Lapeyre.
  * [bpo-35699](https://bugs.python.org/issue?@action=redirect&bpo=35699): Fixed detection of Visual Studio Build Tools 2017 in distutils
  * [bpo-32710](https://bugs.python.org/issue?@action=redirect&bpo=32710): Fix memory leaks in asyncio ProactorEventLoop on overlapped operation failure.
  * [bpo-35702](https://bugs.python.org/issue?@action=redirect&bpo=35702): The [`time.CLOCK_UPTIME_RAW`](https://docs.python.org/3/library/time.html#time.CLOCK_UPTIME_RAW "time.CLOCK_UPTIME_RAW") constant is now available for macOS 10.12.
  * [bpo-32710](https://bugs.python.org/issue?@action=redirect&bpo=32710): Fix a memory leak in asyncio in the ProactorEventLoop when `ReadFile()` or `WSASend()` overlapped operation fail immediately: release the internal buffer.
  * [bpo-35682](https://bugs.python.org/issue?@action=redirect&bpo=35682): Fix `asyncio.ProactorEventLoop.sendfile()`: don’t attempt to set the result of an internal future if it’s already done.
  * [bpo-35283](https://bugs.python.org/issue?@action=redirect&bpo=35283): Add a deprecated warning for the `threading.Thread.isAlive()` method. Patch by Donghee Na.
  * [bpo-35664](