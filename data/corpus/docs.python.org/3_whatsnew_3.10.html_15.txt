Title: Python 3.10 Updates: Importlib and Inspect Module Enhancements
URL: https://docs.python.org/3/whatsnew/3.10.html
Summary: This document outlines key updates in Python 3.10, including the addition of `importlib.metadata.packages_distributions()` for resolving Python modules to distributions and improvements to the inspect module. Notable enhancements include fallback behavior for the `__loader__` attribute and the introduction of `inspect.get_annotations()` for safely computing object annotations.
---

See the Compatibility Note in the docs for more info on the deprecation and usage.
Added [importlib.metadata.packages_distributions()](https://docs.python.org/3/library/importlib.metadata.html#package-distributions) for resolving top-level Python modules and packages to their [importlib.metadata.Distribution](https://docs.python.org/3/library/importlib.metadata.html#distributions).
### inspect[¶](https://docs.python.org/3/whatsnew/3.10.html#inspect "Link to this heading")
When a module does not define `__loader__`, fall back to `__spec__.loader`. (Contributed by Brett Cannon in [bpo-42133](https://bugs.python.org/issue?@action=redirect&bpo=42133).)
Add [`inspect.get_annotations()`](https://docs.python.org/3/library/inspect.html#inspect.get_annotations "inspect.get_annotations"), which safely computes the annotations defined on an object. It works around the quirks of accessing the annotations on various types of objects, and makes very few assumptions about the object it examines. [`inspect.get_annotations()`](https://docs.python.org/3/library/inspect.html#inspect.get_annotations "inspect.get_annotations") can also correctly un-stringize stringized annotations. [`inspect.get_annotations()`](https://docs.python.org/3/library/inspect.html#inspect.get_annotations "inspect.get_annotations") is now considered best practice for accessing the annotations dict defined on any Python object; for more information on best practices for working with annotations, please see [Annotations Best Practices](https://docs.python.org/3/howto/annotations.html#annotations-howto). Relatedly, [`inspect.signature()`](https://docs.python.org/3/library/inspect.html#inspect.signature "inspect.signature"), [`inspect.Signature.from_callable()`](https://docs.python.org/3/library/inspect.html#inspect.Signature.from_callable "inspect.Signature.from_callable"), and `inspect.Signature.from_function()` now call [`inspect.get_annotations()`](https://docs.python.org/3/library/inspect.html#inspect.get_annotations "inspect.get_annotations") to retrieve annotations. This means [`inspect.signature()`](https://docs.python.org/3/library/inspect.html#inspect.signature "inspect.signature") and [`inspect.Signature.from_callable()`](https://docs.python.org/3/library/inspect.html#inspect.Signature.from_callable "inspect.Signature.from_callable") can also now un-stringize stringized annotations. (Contributed by Larry Hastings in [bpo-43817](https://bugs.python.org/issue?@action=redirect&bpo=43817).)
### itertools[¶](https://docs.python.org/3/whatsnew/3.10.html#itertools "Link to this heading")
Add [`itertools.pairwise()`](https://docs.python.org/3/library/itertools.html#itertools.pairwise "itertools.pairwise"). (Contributed by Raymond Hettinger in [bpo-38200](https://bugs.python.org/issue?@action=redirect&bpo=38200).)
### linecache[¶](https://docs.python.org/3/whatsnew/3.10.html#linecache "Link to this heading")
When a module does not define `__loader__`, fall back to `__spec__.loader`. (Contributed by Brett Cannon in [bpo-42133](https://bugs.python.org/issue?@action=redirect&bpo=42133).)
### os[¶](https://docs.python.org/3/whatsnew/3.10.html#os "Link to this heading")
Add [`os.cpu_count()`](https://docs.python.org/3/library/os.html#os.cpu_count "os.cpu_count") support for VxWorks RTOS. (Contributed by Peixing Xin in [bpo-41440](https://bugs.python.org/issue?@action=redirect&bpo=41440).)
Add a new function [`os.eventfd()`](https://docs.python.org/3/library/os.html#os.eventfd "os.eventfd") and related helpers to wrap the `eventfd2` syscall on Linux. (Contributed by Christian Heimes in [bpo-41001](https://bugs.python.org/issue?@action=redirect&bpo=41001).)
Add [`os.splice()`](https://docs.python.org/3/library/os.html#os.splice "os.splice") that allows to move data between two file descriptors without copying between kernel address space and user address space, where one of the file descriptors must refer to a pipe. (Contributed by Pablo Galindo in [bpo-41625](https://bugs.python.org/issue?@action=redirect&bpo=41625).)
Add [`O_EVTONLY`](https://docs.python.org/3/library/os.html#os.O_EVTONLY "os.O_EVTONLY"), [`O_FSYNC`](https://docs.python.org/3/library/os.html#os.O_FSYNC "os.O_FSYNC"), [`O_SYMLINK`](https://docs.python.org/3/library/os.html#os.O_SYMLINK "os.O_SYMLINK") and [`O_NOFOLLOW_ANY`](https://docs.python.org/3/library/os.html#os.O_NOFOLLOW_ANY "os.O_NOFOLLOW_ANY") for macOS. (Contributed by Donghee Na in [bpo-43106](https://bugs.python.org/issue?@action=redirect&bpo=43106).)
### os.path[¶](https://docs.python.org/3/whatsnew/3.10.html#os-path "Link to this heading")
[`os.path.realpath()`](https://docs.python.org/3/library/os.path.html#os.path.realpath "os.path.realpath") now accepts a _strict_ keyword-only argument. When set to `True`, [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") is raised if a path doesn’t exist or a symlink loop is encountered.