Title: Turtle Graphics - Clear and Write Methods
URL: https://docs.python.org/3/library/turtle.html
Summary: The `turtle.clear()` method removes all drawings from the screen without affecting the turtle's state or other turtles' drawings. The `turtle.write(arg, move=False, align='left', font=('Arial', 8, 'normal'))` method writes text at the turtle's current position, with parameters for text alignment, movement, and font specifications.
---

```


turtle.clear()[¶](https://docs.python.org/3/library/turtle.html#turtle.clear "Link to this definition")
    
Delete the turtle’s drawings from the screen. Do not move turtle. State and position of the turtle as well as drawings of other turtles are not affected. 

turtle.write(_arg_ , _move =False_, _align ='left'_, _font =('Arial', 8, 'normal')_)[¶](https://docs.python.org/3/library/turtle.html#turtle.write "Link to this definition")
     

Parameters:
    
  * **arg** – object to be written to the TurtleScreen
  * **move** – True/False
  * **align** – one of the strings “left”, “center” or right”
  * **font** – a triple (fontname, fontsize, fonttype)


Write text - the string representation of _arg_ - at the current turtle position according to _align_ (“left”, “center” or “right”) and with the given font. If _move_ is true, the pen is moved to the bottom-right corner of the text. By default, _move_ is `False`.
>>>```
>>> turtle.write("Home = ", True, align="center")
>>> turtle.write((0,0), True)

```

### Turtle state[¶](https://docs.python.org/3/library/turtle.html#turtle-state "Link to this heading")
#### Visibility[¶](https://docs.python.org/3/library/turtle.html#visibility "Link to this heading") 

turtle.hideturtle()[¶](https://docs.python.org/3/library/turtle.html#turtle.hideturtle "Link to this definition")


turtle.ht()[¶](https://docs.python.org/3/library/turtle.html#turtle.ht "Link to this definition")
    
Make the turtle invisible. It’s a good idea to do this while you’re in the middle of doing some complex drawing, because hiding the turtle speeds up the drawing observably.
>>>```
>>> turtle.hideturtle()

```


turtle.showturtle()[¶](https://docs.python.org/3/library/turtle.html#turtle.showturtle "Link to this definition")


turtle.st()[¶](https://docs.python.org/3/library/turtle.html#turtle.st "Link to this definition")
    
Make the turtle visible.
>>>```
>>> turtle.showturtle()

```


turtle.isvisible()[¶](https://docs.python.org/3/library/turtle.html#turtle.isvisible "Link to this definition")
    
Return `True` if the Turtle is shown, `False` if it’s hidden.
>>>```
>>> turtle.hideturtle()
>>> turtle.isvisible()
False
>>> turtle.showturtle()
>>> turtle.isvisible()
True

```

#### Appearance[¶](https://docs.python.org/3/library/turtle.html#appearance "Link to this heading") 

turtle.shape(_name =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.shape "Link to this definition")
     

Parameters:
    
**name** – a string which is a valid shapename
Set turtle shape to shape with given _name_ or, if name is not given, return name of current shape. Shape with _name_ must exist in the TurtleScreen’s shape dictionary. Initially there are the following polygon shapes: “arrow”, “turtle”, “circle”, “square”, “triangle”, “classic”. To learn about how to deal with shapes see Screen method [`register_shape()`](https://docs.python.org/3/library/turtle.html#turtle.register_shape "turtle.register_shape").
>>>```
>>> turtle.shape()
'classic'
>>> turtle.shape("turtle")
>>> turtle.shape()
'turtle'

```


turtle.resizemode(_rmode =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.resizemode "Link to this definition")
     

Parameters:
    
**rmode** – one of the strings “auto”, “user”, “noresize”
Set resizemode to one of the values: “auto”, “user”, “noresize”. If _rmode_ is not given, return current resizemode. Different resizemodes have the following effects:
  * “auto”: adapts the appearance of the turtle corresponding to the value of pensize.
  * “user”: adapts the appearance of the turtle according to the values of stretchfactor and outlinewidth (outline), which are set by [`shapesize()`](https://docs.python.org/3/library/turtle.html#turtle.shapesize "turtle.shapesize").
  * “noresize”: no adaption of the turtle’s appearance takes place.


`resizemode("user")` is called by [`shapesize()`](https://docs.python.org/3/library/turtle.html#turtle.shapesize "turtle.shapesize") when used with arguments.
>>>```
>>> turtle.resizemode()
'noresize'
>>> turtle.resizemode("auto")
>>> turtle.resizemode()
'auto'

```


turtle.shapesize(_stretch_wid =None_, _stretch_len =None_, _outline =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.shapesize "Link to this definition")


turtle.turtlesize(_stretch_wid =None_, _stretch_len =None_, _outline =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.turtlesize "Link to this definition")
     

Parameters:
    
  * **stretch_wid** – positive number
  * **stretch_len** – positive number
  * **outline** – positive number


Return or set the pen’s attributes x/y-stretchfactors and/or outline. Set resizemode to “user”. If and only if resizemode is set to “user”, the turtle will be displayed stretched according to its stretchfactors: _stretch_wid_ is stretchfactor perpendicular to its orientation, _stretch_len_ is stretchfactor in direction of its orientation, _outline_ determines the width of the shape’s outline.
>>>