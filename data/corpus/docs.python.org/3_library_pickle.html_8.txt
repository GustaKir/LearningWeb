Title: pickle.Unpickler Class
URL: https://docs.python.org/3/library/pickle.html
Summary: The pickle.Unpickler class is used for reading a pickle data stream from a binary file. It automatically detects the protocol version and requires the file to implement specific methods for reading. Optional parameters allow for controlling compatibility settings.
---

_class_ pickle.Unpickler(_file_ , _*_ , _fix_imports =True_, _encoding ='ASCII'_, _errors ='strict'_, _buffers =None_)[¶](https://docs.python.org/3/library/pickle.html#pickle.Unpickler "Link to this definition")
    
This takes a binary file for reading a pickle data stream.
The protocol version of the pickle is detected automatically, so no protocol argument is needed.
The argument _file_ must have three methods, a read() method that takes an integer argument, a readinto() method that takes a buffer argument and a readline() method that requires no arguments, as in the [`io.BufferedIOBase`](https://docs.python.org/3/library/io.html#io.BufferedIOBase "io.BufferedIOBase") interface. Thus _file_ can be an on-disk file opened for binary reading, an [`io.BytesIO`](https://docs.python.org/3/library/io.html#io.BytesIO "io.BytesIO") object, or any other custom object that meets this interface.
The optional arguments _fix_imports_ , _encoding_ and _errors_ are used to control compatibility support for pickle stream generated by Python 2. If _fix_imports_ is true, pickle will try to map the old Python 2 names to the new names used in Python 3. The _encoding_ and _errors_ tell pickle how to decode 8-bit string instances pickled by Python 2; these default to ‘ASCII’ and ‘strict’, respectively. The _encoding_ can be ‘bytes’ to read these 8-bit string instances as bytes objects. Using `encoding='latin1'` is required for unpickling NumPy arrays and instances of [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime"), [`date`](https://docs.python.org/3/library/datetime.html#datetime.date "datetime.date") and [`time`](https://docs.python.org/3/library/datetime.html#datetime.time "datetime.time") pickled by Python 2.
If _buffers_ is `None` (the default), then all data necessary for deserialization must be contained in the pickle stream. This means that the _buffer_callback_ argument was `None` when a [`Pickler`](https://docs.python.org/3/library/pickle.html#pickle.Pickler "pickle.Pickler") was instantiated (or when [`dump()`](https://docs.python.org/3/library/pickle.html#pickle.dump "pickle.dump") or [`dumps()`](https://docs.python.org/3/library/pickle.html#pickle.dumps "pickle.dumps") was called).
If _buffers_ is not `None`, it should be an iterable of buffer-enabled objects that is consumed each time the pickle stream references an [out-of-band](https://docs.python.org/3/library/pickle.html#pickle-oob) buffer view. Such buffers have been given in order to the _buffer_callback_ of a Pickler object.
Changed in version 3.8: The _buffers_ argument was added. 

load()[¶](https://docs.python.org/3/library/pickle.html#pickle.Unpickler.load "Link to this definition")
    
Read the pickled representation of an object from the open file object given in the constructor, and return the reconstituted object hierarchy specified therein. Bytes past the pickled representation of the object are ignored. 

persistent_load(_pid_)[¶](https://docs.python.org/3/library/pickle.html#pickle.Unpickler.persistent_load "Link to this definition")
    
Raise an [`UnpicklingError`](https://docs.python.org/3/library/pickle.html#pickle.UnpicklingError "pickle.UnpicklingError") by default.
If defined, [`persistent_load()`](https://docs.python.org/3/library/pickle.html#pickle.Unpickler.persistent_load "pickle.Unpickler.persistent_load") should return the object specified by the persistent ID _pid_. If an invalid persistent ID is encountered, an [`UnpicklingError`](https://docs.python.org/3/library/pickle.html#pickle.UnpicklingError "pickle.UnpicklingError") should be raised.
See [Persistence of External Objects](https://docs.python.org/3/library/pickle.html#pickle-persistent) for details and examples of uses.
Changed in version 3.13: Add the default implementation of this method in the C implementation of `Unpickler`. 

find_class(_module_ , _name_)[¶](https://docs.python.org/3/library/pickle.html#pickle.Unpickler.find_class "Link to this definition")
    
Import _module_ if necessary and return the object called _name_ from it, where the _module_ and _name_ arguments are [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") objects. Note, unlike its name suggests, [`find_class()`](https://docs.python.org/3/library/pickle.html#pickle.Unpickler.find_class "pickle.Unpickler.find_class") is also used for finding functions.
Subclasses may override this to gain control over what type of objects and how they can be loaded, potentially reducing security risks. Refer to [Restricting Globals](https://docs.python.org/3/library/pickle.html#pickle-restrict) for details.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `pickle.find_class` with arguments `module`, `name`.