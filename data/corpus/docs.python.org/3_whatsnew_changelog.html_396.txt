Title: Changes to IDLE and C API in Python
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: The updates include the completion of ttk widgets in IDLE, improvements in call-tip behavior during parentheses typing, and the addition of a new IDLE icon. Additionally, modifications to the PyCapsule API are noted.
---

### IDLE[¶](https://docs.python.org/3/whatsnew/changelog.html#id355 "Link to this heading")
  * [bpo-33987](https://bugs.python.org/issue?@action=redirect&bpo=33987): Mostly finish using ttk widgets, mainly for editor, settings, and searches. Some patches by Mark Roseman.
  * [bpo-40511](https://bugs.python.org/issue?@action=redirect&bpo=40511): Typing opening and closing parentheses inside the parentheses of a function call will no longer cause unnecessary “flashing” off and on of an existing open call-tip, e.g. when typed in a string literal.
  * [bpo-38439](https://bugs.python.org/issue?@action=redirect&bpo=38439): Add a 256×256 pixel IDLE icon to the Windows .ico file. Created by Andrew Clover. Remove the low-color gif variations from the .ico file.


### C API[¶](https://docs.python.org/3/whatsnew/changelog.html#id356 "Link to this heading")
  * [bpo-42157](https://bugs.python.org/issue?@action=redirect&bpo=42157): The private `_PyUnicode_Name_CAPI` structure of the PyCapsule API `unicodedata.ucnhash_CAPI` has been moved to the internal C API. Patch by Victor Stinner.
  * [bpo-42015](https://bugs.python.org/issue?@action=redirect&bpo=42015): Fix potential crash in deallocating method objects when dynamically allocated [`PyMethodDef`](https://docs.python.org/3/c-api/structures.html#c.PyMethodDef "PyMethodDef")’s lifetime is managed through the `self` argument of a [`PyCFunction`](https://docs.python.org/3/c-api/structures.html#c.PyCFunction "PyCFunction").
  * [bpo-40423](https://bugs.python.org/issue?@action=redirect&bpo=40423): The [`subprocess`](https://docs.python.org/3/library/subprocess.html#module-subprocess "subprocess: Subprocess management.") module and `os.closerange` will now use the `close_range(low, high, flags)` syscall when it is available for more efficient closing of ranges of descriptors.
  * [bpo-41845](https://bugs.python.org/issue?@action=redirect&bpo=41845): [`PyObject_GenericGetDict()`](https://docs.python.org/3/c-api/object.html#c.PyObject_GenericGetDict "PyObject_GenericGetDict") is available again in the limited API when targeting 3.10 or later.
  * [bpo-40422](https://bugs.python.org/issue?@action=redirect&bpo=40422): Add `_Py_closerange` function to provide performant closing of a range of file descriptors.
  * [bpo-41986](https://bugs.python.org/issue?@action=redirect&bpo=41986): `Py_FileSystemDefaultEncodeErrors` and `Py_UTF8Mode` are available again in limited API.
  * [bpo-41756](https://bugs.python.org/issue?@action=redirect&bpo=41756): Add `PyIter_Send` function to allow sending value into generator/coroutine/iterator without raising StopIteration exception to signal return.
  * [bpo-41784](https://bugs.python.org/issue?@action=redirect&bpo=41784): Added `PyUnicode_AsUTF8AndSize` to the limited C API.


## Python 3.10.0 alpha 1[¶](https://docs.python.org/3/whatsnew/changelog.html#python-3-10-0-alpha-1 "Link to this heading")
_Release date: 2020-10-05_
### Security[¶](https://docs.python.org/3/whatsnew/changelog.html#id357 "Link to this heading")
  * [bpo-41304](https://bugs.python.org/issue?@action=redirect&bpo=41304): Fixes `python3x._pth` being ignored on Windows, caused by the fix for [bpo-29778](https://bugs.python.org/issue?@action=redirect&bpo=29778) ([**CVE 2020-15801**](https://www.cve.org/CVERecord?id=CVE-2020-15801)).
  * [bpo-41162](https://bugs.python.org/issue?@action=redirect&bpo=41162): Audit hooks are now cleared later during finalization to avoid missing events.
  * [bpo-29778](https://bugs.python.org/issue?@action=redirect&bpo=29778): Ensure `python3.dll` is loaded from correct locations when Python is embedded ([**CVE 2020-15523**](https://www.cve.org/CVERecord?id=CVE-2020-15523)).
  * [bpo-41004](https://bugs.python.org/issue?@action=redirect&bpo=41004): The __hash__() methods of ipaddress.IPv4Interface and ipaddress.IPv6Interface incorrectly generated constant hash values of 32 and 128 respectively. This resulted in always causing hash collisions. The fix uses hash() to generate hash values for the tuple of (address, mask length, network address).
  * [bpo-39603](https://bugs.python.org/issue?@action=redirect&bpo=39603): Prevent http header injection by rejecting control characters in http.client.putrequest(…).