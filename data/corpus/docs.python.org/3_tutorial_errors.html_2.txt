Title: Understanding Exception Handling in Python
URL: https://docs.python.org/3/tutorial/errors.html
Summary: This section discusses how the order of _except clauses_ affects exception handling, illustrating that the first matching clause is triggered. It explains the concept of exception arguments, how they are tied to exception instances, and how to access them through the instance's `args` attribute. Additionally, it highlights the convenience of the `__str__()` method in printing exception arguments.
---

```

Note that if the _except clauses_ were reversed (with `except B` first), it would have printed B, B, B — the first matching _except clause_ is triggered.
When an exception occurs, it may have associated values, also known as the exception’s _arguments_. The presence and types of the arguments depend on the exception type.
The _except clause_ may specify a variable after the exception name. The variable is bound to the exception instance which typically has an `args` attribute that stores the arguments. For convenience, builtin exception types define [`__str__()`](https://docs.python.org/3/reference/datamodel.html#object.__str__ "object.__str__") to print all the arguments without explicitly accessing `.args`.
>>>```
>>> try:
...   raise Exception('spam', 'eggs')
... except Exception as inst:
...   print(type(inst))  # the exception type
...   print(inst.args)   # arguments stored in .args
...   print(inst)     # __str__ allows args to be printed directly,
...              # but may be overridden in exception subclasses
...   x, y = inst.args   # unpack args
...   print('x =', x)
...   print('y =', y)
...
<class 'Exception'>
('spam', 'eggs')
('spam', 'eggs')
x = spam
y = eggs

```

The exception’s [`__str__()`](https://docs.python.org/3/reference/datamodel.html#object.__str__ "object.__str__") output is printed as the last part (‘detail’) of the message for unhandled exceptions.
[`BaseException`](https://docs.python.org/3/library/exceptions.html#BaseException "BaseException") is the common base class of all exceptions. One of its subclasses, [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception "Exception"), is the base class of all the non-fatal exceptions. Exceptions which are not subclasses of [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception "Exception") are not typically handled, because they are used to indicate that the program should terminate. They include [`SystemExit`](https://docs.python.org/3/library/exceptions.html#SystemExit "SystemExit") which is raised by [`sys.exit()`](https://docs.python.org/3/library/sys.html#sys.exit "sys.exit") and [`KeyboardInterrupt`](https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt "KeyboardInterrupt") which is raised when a user wishes to interrupt the program.
[`Exception`](https://docs.python.org/3/library/exceptions.html#Exception "Exception") can be used as a wildcard that catches (almost) everything. However, it is good practice to be as specific as possible with the types of exceptions that we intend to handle, and to allow any unexpected exceptions to propagate on.
The most common pattern for handling [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception "Exception") is to print or log the exception and then re-raise it (allowing a caller to handle the exception as well):
```
importsys
try:
  f = open('myfile.txt')
  s = f.readline()
  i = int(s.strip())
except OSError as err:
  print("OS error:", err)
except ValueError:
  print("Could not convert data to an integer.")
except Exception as err:
  print(f"Unexpected {err=}, {type(err)=}")
  raise

```

The [`try`](https://docs.python.org/3/reference/compound_stmts.html#try) … [`except`](https://docs.python.org/3/reference/compound_stmts.html#except) statement has an optional _else clause_ , which, when present, must follow all _except clauses_. It is useful for code that must be executed if the _try clause_ does not raise an exception. For example:
```
for arg in sys.argv[1:]:
  try:
    f = open(arg, 'r')
  except OSError:
    print('cannot open', arg)
  else:
    print(arg, 'has', len(f.readlines()), 'lines')
    f.close()

```

The use of the `else` clause is better than adding additional code to the [`try`](https://docs.python.org/3/reference/compound_stmts.html#try) clause because it avoids accidentally catching an exception that wasn’t raised by the code being protected by the `try` … `except` statement.
Exception handlers do not handle only exceptions that occur immediately in the _try clause_ , but also those that occur inside functions that are called (even indirectly) in the _try clause_. For example:
>>>```
>>> defthis_fails():
...   x = 1/0
...
>>> try:
...   this_fails()
... except ZeroDivisionError as err:
...   print('Handling run-time error:', err)
...
Handling run-time error: division by zero

```

## 8.4. Raising Exceptions[¶](https://docs.python.org/3/tutorial/errors.html#raising-exceptions "Link to this heading")
The [`raise`](https://docs.python.org/3/reference/simple_stmts.html#raise) statement allows the programmer to force a specified exception to occur. For example:
>>>```
>>> raise NameError('HiThere')
Traceback (most recent call last):
 File "<stdin>", line 1, in <module>
raise NameError('HiThere')
NameError: HiThere