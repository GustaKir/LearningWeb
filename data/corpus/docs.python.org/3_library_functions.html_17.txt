Title: Understanding the `int()` Function in Python
URL: https://docs.python.org/3/library/functions.html
Summary: The `int()` function converts its argument to an integer. If the argument defines methods like `__int__()`, `__index__()`, or `__trunc__()`, it will call these methods accordingly. For non-numeric inputs, it can convert strings or bytes representing an integer in a specified base. The input can include optional signs, leading zeros, whitespace, and underscores.
---

```

If the argument defines [`__int__()`](https://docs.python.org/3/reference/datamodel.html#object.__int__ "object.__int__"), `int(x)` returns `x.__int__()`. If the argument defines [`__index__()`](https://docs.python.org/3/reference/datamodel.html#object.__index__ "object.__index__"), it returns `x.__index__()`. If the argument defines [`__trunc__()`](https://docs.python.org/3/reference/datamodel.html#object.__trunc__ "object.__trunc__"), it returns `x.__trunc__()`. For floating-point numbers, this truncates towards zero.
If the argument is not a number or if _base_ is given, then it must be a string, [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes"), or [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") instance representing an integer in radix _base_. Optionally, the string can be preceded by `+` or `-` (with no space in between), have leading zeros, be surrounded by whitespace, and have single underscores interspersed between digits.
A base-n integer string contains digits, each representing a value from 0 to n-1. The values 0–9 can be represented by any Unicode decimal digit. The values 10–35 can be represented by `a` to `z` (or `A` to `Z`). The default _base_ is 10. The allowed bases are 0 and 2–36. Base-2, -8, and -16 strings can be optionally prefixed with `0b`/`0B`, `0o`/`0O`, or `0x`/`0X`, as with integer literals in code. For base 0, the string is interpreted in a similar way to an [integer literal in code](https://docs.python.org/3/reference/lexical_analysis.html#integers), in that the actual base is 2, 8, 10, or 16 as determined by the prefix. Base 0 also disallows leading zeros: `int('010', 0)` is not legal, while `int('010')` and `int('010', 8)` are.
The integer type is described in [Numeric Types — int, float, complex](https://docs.python.org/3/library/stdtypes.html#typesnumeric).
Changed in version 3.4: If _base_ is not an instance of [`int`](https://docs.python.org/3/library/functions.html#int "int") and the _base_ object has a [`base.__index__`](https://docs.python.org/3/reference/datamodel.html#object.__index__ "object.__index__") method, that method is called to obtain an integer for the base. Previous versions used [`base.__int__`](https://docs.python.org/3/reference/datamodel.html#object.__int__ "object.__int__") instead of [`base.__index__`](https://docs.python.org/3/reference/datamodel.html#object.__index__ "object.__index__").
Changed in version 3.6: Grouping digits with underscores as in code literals is allowed.
Changed in version 3.7: The first parameter is now positional-only.
Changed in version 3.8: Falls back to [`__index__()`](https://docs.python.org/3/reference/datamodel.html#object.__index__ "object.__index__") if [`__int__()`](https://docs.python.org/3/reference/datamodel.html#object.__int__ "object.__int__") is not defined.
Changed in version 3.11: The delegation to [`__trunc__()`](https://docs.python.org/3/reference/datamodel.html#object.__trunc__ "object.__trunc__") is deprecated.
Changed in version 3.11: [`int`](https://docs.python.org/3/library/functions.html#int "int") string inputs and string representations can be limited to help avoid denial of service attacks. A [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised when the limit is exceeded while converting a string to an [`int`](https://docs.python.org/3/library/functions.html#int "int") or when converting an [`int`](https://docs.python.org/3/library/functions.html#int "int") into a string would exceed the limit. See the [integer string conversion length limitation](https://docs.python.org/3/library/stdtypes.html#int-max-str-digits) documentation. 

isinstance(_object_ , _classinfo_)[¶](https://docs.python.org/3/library/functions.html#isinstance "Link to this definition")
    
Return `True` if the _object_ argument is an instance of the _classinfo_ argument, or of a (direct, indirect, or [virtual](https://docs.python.org/3/glossary.html#term-abstract-base-class)) subclass thereof. If _object_ is not an object of the given type, the function always returns `False`. If _classinfo_ is a tuple of type objects (or recursively, other such tuples) or a [Union Type](https://docs.python.org/3/library/stdtypes.html#types-union) of multiple types, return `True` if _object_ is an instance of any of the types. If _classinfo_ is not a type or tuple of types and such tuples, a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") exception is raised. [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") may not be raised for an invalid type if an earlier check succeeds.
Changed in version 3.10: _classinfo_ can be a [Union Type](https://docs.python.org/3/library/stdtypes.html#types-union).