Title: Defining Options in Optparse
URL: https://docs.python.org/3/library/optparse.html
Summary: This section explains how to define command-line options using the `make_option()` factory function and the `add_option()` method of `OptionParser`. It highlights the importance of specifying at least one option string for each Option instance, which represents synonymous command-line options.
---

```

(`make_option()` is a factory function for creating Option instances; currently it is an alias for the Option constructor. A future version of [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") may split Option into several classes, and `make_option()` will pick the right class to instantiate. Do not instantiate Option directly.)
### Defining options[¶](https://docs.python.org/3/library/optparse.html#defining-options "Link to this heading")
Each Option instance represents a set of synonymous command-line option strings, e.g. `-f` and `--file`. You can specify any number of short or long option strings, but you must specify at least one overall option string.
The canonical way to create an [`Option`](https://docs.python.org/3/library/optparse.html#optparse.Option "optparse.Option") instance is with the `add_option()` method of [`OptionParser`](https://docs.python.org/3/library/optparse.html#optparse.OptionParser "optparse.OptionParser"). 

OptionParser.add_option(_option_)[¶](https://docs.python.org/3/library/optparse.html#optparse.OptionParser.add_option "Link to this definition")


OptionParser.add_option(_*opt_str_ , _attr=value_ , _..._)
    
To define an option with only a short option string:
```
parser.add_option("-f", attr=value, ...)

```

And to define an option with only a long option string:
```
parser.add_option("--foo", attr=value, ...)

```

The keyword arguments define attributes of the new Option object. The most important option attribute is [`action`](https://docs.python.org/3/library/optparse.html#optparse.Option.action "optparse.Option.action"), and it largely determines which other attributes are relevant or required. If you pass irrelevant option attributes, or fail to pass required ones, [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") raises an [`OptionError`](https://docs.python.org/3/library/optparse.html#optparse.OptionError "optparse.OptionError") exception explaining your mistake.
An option’s _action_ determines what [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") does when it encounters this option on the command-line. The standard option actions hard-coded into [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") are: 

`"store"`
    
store this option’s argument (default) 

`"store_const"`
    
store a constant value, pre-set via [`Option.const`](https://docs.python.org/3/library/optparse.html#optparse.Option.const "optparse.Option.const") 

`"store_true"`
    
store `True` 

`"store_false"`
    
store `False` 

`"append"`
    
append this option’s argument to a list 

`"append_const"`
    
append a constant value to a list, pre-set via [`Option.const`](https://docs.python.org/3/library/optparse.html#optparse.Option.const "optparse.Option.const") 

`"count"`
    
increment a counter by one 

`"callback"`
    
call a specified function 

`"help"`
    
print a usage message including all options and the documentation for them
(If you don’t supply an action, the default is `"store"`. For this action, you may also supply [`type`](https://docs.python.org/3/library/optparse.html#optparse.Option.type "optparse.Option.type") and [`dest`](https://docs.python.org/3/library/optparse.html#optparse.Option.dest "optparse.Option.dest") option attributes; see [Standard option actions](https://docs.python.org/3/library/optparse.html#optparse-standard-option-actions).)
As you can see, most actions involve storing or updating a value somewhere. [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") always creates a special object for this, conventionally called `options`, which is an instance of [`optparse.Values`](https://docs.python.org/3/library/optparse.html#optparse.Values "optparse.Values").