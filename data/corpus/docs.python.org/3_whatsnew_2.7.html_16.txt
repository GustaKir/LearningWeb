Title: Python 2.7 New Features: Collections Module
URL: https://docs.python.org/3/whatsnew/2.7.html
Summary: This chunk highlights the introduction of the `OrderedDict` class as per PEP 372 and new methods for the `deque` data type, which include `count()` for counting elements and `reverse()` for in-place reversal of elements.
---

```

Contributed by Raymond Hettinger; [bpo-1696199](https://bugs.python.org/issue?@action=redirect&bpo=1696199).
New class: [`OrderedDict`](https://docs.python.org/3/library/collections.html#collections.OrderedDict "collections.OrderedDict") is described in the earlier section [PEP 372: Adding an Ordered Dictionary to collections](https://docs.python.org/3/whatsnew/2.7.html#pep-0372).
New method: The [`deque`](https://docs.python.org/3/library/collections.html#collections.deque "collections.deque") data type now has a [`count()`](https://docs.python.org/3/library/collections.html#collections.deque.count "collections.deque.count") method that returns the number of contained elements equal to the supplied argument _x_ , and a [`reverse()`](https://docs.python.org/3/library/collections.html#collections.deque.reverse "collections.deque.reverse") method that reverses the elements of the deque in-place. [`deque`](https://docs.python.org/3/library/collections.html#collections.deque "collections.deque") also exposes its maximum length as the read-only [`maxlen`](https://docs.python.org/3/library/collections.html#collections.deque.maxlen "collections.deque.maxlen") attribute. (Both features added by Raymond Hettinger.)
The [`namedtuple`](https://docs.python.org/3/library/collections.html#collections.namedtuple "collections.namedtuple") class now has an optional _rename_ parameter. If _rename_ is true, field names that are invalid because they’ve been repeated or aren’t legal Python identifiers will be renamed to legal names that are derived from the field’s position within the list of fields:
>>>```
>>> fromcollectionsimport namedtuple
>>> T = namedtuple('T', ['field1', '$illegal', 'for', 'field2'], rename=True)
>>> T._fields
('field1', '_1', '_2', 'field2')

```

(Added by Raymond Hettinger; [bpo-1818](https://bugs.python.org/issue?@action=redirect&bpo=1818).)
Finally, the [`Mapping`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping "collections.abc.Mapping") abstract base class now returns [`NotImplemented`](https://docs.python.org/3/library/constants.html#NotImplemented "NotImplemented") if a mapping is compared to another type that isn’t a `Mapping`. (Fixed by Daniel Stutzbach; [bpo-8729](https://bugs.python.org/issue?@action=redirect&bpo=8729).)
  * Constructors for the parsing classes in the [`ConfigParser`](https://docs.python.org/3/library/configparser.html#module-configparser "configparser: Configuration file parser.") module now take an _allow_no_value_ parameter, defaulting to false; if true, options without values will be allowed. For example:
>>>```
>>> importConfigParser,StringIO
>>> sample_config = """
... [mysqld]
... user = mysql
... pid-file = /var/run/mysqld/mysqld.pid
... skip-bdb
... """
>>> config = ConfigParser.RawConfigParser(allow_no_value=True)
>>> config.readfp(StringIO.StringIO(sample_config))
>>> config.get('mysqld', 'user')
'mysql'
>>> print config.get('mysqld', 'skip-bdb')
None
>>> print config.get('mysqld', 'unknown')
Traceback (most recent call last):
...
NoOptionError: No option 'unknown' in section: 'mysqld'