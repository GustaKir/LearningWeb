Title: Mathematical Functions in Python
URL: https://docs.python.org/3/library/math.html
Summary: The document describes the `math.comb` function, which calculates the number of ways to choose k items from n items without repetition and order, equating to the binomial coefficient. It handles invalid inputs by raising TypeError for non-integers and ValueError for negative values. The document also introduces the `math.factorial` function, which returns the factorial of n, noting that it raises ValueError for non-integer inputs.
---

math.comb(_n_ , _k_)[¶](https://docs.python.org/3/library/math.html#math.comb "Link to this definition")
    
Return the number of ways to choose _k_ items from _n_ items without repetition and without order.
Evaluates to `n! / (k! * (n - k)!)` when `k <= n` and evaluates to zero when `k > n`.
Also called the binomial coefficient because it is equivalent to the coefficient of k-th term in polynomial expansion of `(1 + x)ⁿ`.
Raises [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") if either of the arguments are not integers. Raises [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if either of the arguments are negative.
Added in version 3.8. 

math.factorial(_n_)[¶](https://docs.python.org/3/library/math.html#math.factorial "Link to this definition")
    
Return _n_ factorial as an integer. Raises [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if _n_ is not integral or is negative.
Changed in version 3.10: Floats with integral values (like `5.0`) are no longer accepted. 

math.gcd(_* integers_)[¶](https://docs.python.org/3/library/math.html#math.gcd "Link to this definition")
    
Return the greatest common divisor of the specified integer arguments. If any of the arguments is nonzero, then the returned value is the largest positive integer that is a divisor of all arguments. If all arguments are zero, then the returned value is `0`. `gcd()` without arguments returns `0`.
Added in version 3.5.
Changed in version 3.9: Added support for an arbitrary number of arguments. Formerly, only two arguments were supported. 

math.isqrt(_n_)[¶](https://docs.python.org/3/library/math.html#math.isqrt "Link to this definition")
    
Return the integer square root of the nonnegative integer _n_. This is the floor of the exact square root of _n_ , or equivalently the greatest integer _a_ such that _a_ ² ≤  _n_.
For some applications, it may be more convenient to have the least integer _a_ such that _n_ ≤  _a_ ², or in other words the ceiling of the exact square root of _n_. For positive _n_ , this can be computed using `a = 1 + isqrt(n - 1)`.
Added in version 3.8. 

math.lcm(_* integers_)[¶](https://docs.python.org/3/library/math.html#math.lcm "Link to this definition")
    
Return the least common multiple of the specified integer arguments. If all arguments are nonzero, then the returned value is the smallest positive integer that is a multiple of all arguments. If any of the arguments is zero, then the returned value is `0`. `lcm()` without arguments returns `1`.
Added in version 3.9. 

math.perm(_n_ , _k =None_)[¶](https://docs.python.org/3/library/math.html#math.perm "Link to this definition")
    
Return the number of ways to choose _k_ items from _n_ items without repetition and with order.
Evaluates to `n! / (n - k)!` when `k <= n` and evaluates to zero when `k > n`.
If _k_ is not specified or is `None`, then _k_ defaults to _n_ and the function returns `n!`.
Raises [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") if either of the arguments are not integers. Raises [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if either of the arguments are negative.
Added in version 3.8.
## Floating point arithmetic[¶](https://docs.python.org/3/library/math.html#floating-point-arithmetic "Link to this heading") 

math.ceil(_x_)[¶](https://docs.python.org/3/library/math.html#math.ceil "Link to this definition")
    
Return the ceiling of _x_ , the smallest integer greater than or equal to _x_. If _x_ is not a float, delegates to [`x.__ceil__`](https://docs.python.org/3/reference/datamodel.html#object.__ceil__ "object.__ceil__"), which should return an [`Integral`](https://docs.python.org/3/library/numbers.html#numbers.Integral "numbers.Integral") value. 

math.fabs(_x_)[¶](https://docs.python.org/3/library/math.html#math.fabs "Link to this definition")
    
Return the absolute value of _x_. 

math.floor(_x_)[¶](https://docs.python.org/3/library/math.html#math.floor "Link to this definition")
    
Return the floor of _x_ , the largest integer less than or equal to _x_. If _x_ is not a float, delegates to [`x.__floor__`](https://docs.python.org/3/reference/datamodel.html#object.__floor__ "object.__floor__"), which should return an [`Integral`](https://docs.python.org/3/library/numbers.html#numbers.Integral "numbers.Integral") value.