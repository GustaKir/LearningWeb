Title: Logging Module: Formatting and Filtering
URL: https://docs.python.org/3/library/logging.html
Summary: This section describes the `format` method for creating formatted text from a list of log records and explains the role of filters in logging. Filters allow for more complex event filtering beyond log level, permitting specific logger hierarchies while excluding others.
---

format(_records_)[¶](https://docs.python.org/3/library/logging.html#logging.BufferingFormatter.format "Link to this definition")
    
Return formatted text for a list of _records_. The base implementation just returns the empty string if there are no records; otherwise, it returns the concatenation of the header, each record formatted with the line formatter, and the footer.
## Filter Objects[¶](https://docs.python.org/3/library/logging.html#filter-objects "Link to this heading")
`Filters` can be used by `Handlers` and `Loggers` for more sophisticated filtering than is provided by levels. The base filter class only allows events which are below a certain point in the logger hierarchy. For example, a filter initialized with ‘A.B’ will allow events logged by loggers ‘A.B’, ‘A.B.C’, ‘A.B.C.D’, ‘A.B.D’ etc. but not ‘A.BB’, ‘B.A.B’ etc. If initialized with the empty string, all events are passed. 

_class_ logging.Filter(_name =''_)[¶](https://docs.python.org/3/library/logging.html#logging.Filter "Link to this definition")
    
Returns an instance of the [`Filter`](https://docs.python.org/3/library/logging.html#logging.Filter "logging.Filter") class. If _name_ is specified, it names a logger which, together with its children, will have its events allowed through the filter. If _name_ is the empty string, allows every event. 

filter(_record_)[¶](https://docs.python.org/3/library/logging.html#logging.Filter.filter "Link to this definition")
    
Is the specified record to be logged? Returns false for no, true for yes. Filters can either modify log records in-place or return a completely different record instance which will replace the original log record in any future processing of the event.
Note that filters attached to handlers are consulted before an event is emitted by the handler, whereas filters attached to loggers are consulted whenever an event is logged (using [`debug()`](https://docs.python.org/3/library/logging.html#logging.debug "logging.debug"), [`info()`](https://docs.python.org/3/library/logging.html#logging.info "logging.info"), etc.), before sending an event to handlers. This means that events which have been generated by descendant loggers will not be filtered by a logger’s filter setting, unless the filter has also been applied to those descendant loggers.
You don’t actually need to subclass `Filter`: you can pass any instance which has a `filter` method with the same semantics.
Changed in version 3.2: You don’t need to create specialized `Filter` classes, or use other classes with a `filter` method: you can use a function (or other callable) as a filter. The filtering logic will check to see if the filter object has a `filter` attribute: if it does, it’s assumed to be a `Filter` and its [`filter()`](https://docs.python.org/3/library/logging.html#logging.Filter.filter "logging.Filter.filter") method is called. Otherwise, it’s assumed to be a callable and called with the record as the single parameter. The returned value should conform to that returned by [`filter()`](https://docs.python.org/3/library/logging.html#logging.Filter.filter "logging.Filter.filter").
Changed in version 3.12: You can now return a [`LogRecord`](https://docs.python.org/3/library/logging.html#logging.LogRecord "logging.LogRecord") instance from filters to replace the log record rather than modifying it in place. This allows filters attached to a [`Handler`](https://docs.python.org/3/library/logging.html#logging.Handler "logging.Handler") to modify the log record before it is emitted, without having side effects on other handlers.
Although filters are used primarily to filter records based on more sophisticated criteria than levels, they get to see every record which is processed by the handler or logger they’re attached to: this can be useful if you want to do things like counting how many records were processed by a particular logger or handler, or adding, changing or removing attributes in the [`LogRecord`](https://docs.python.org/3/library/logging.html#logging.LogRecord "logging.LogRecord") being processed. Obviously changing the LogRecord needs to be done with some care, but it does allow the injection of contextual information into logs (see [Using Filters to impart contextual information](https://docs.python.org/3/howto/logging-cookbook.html#filters-contextual)).
## LogRecord Objects[¶](https://docs.python.org/3/library/logging.html#logrecord-objects "Link to this heading")
[`LogRecord`](https://docs.python.org/3/library/logging.html#logging.LogRecord "logging.LogRecord") instances are created automatically by the [`Logger`](https://docs.python.org/3/library/logging.html#logging.Logger "logging.Logger") every time something is logged, and can be created manually via [`makeLogRecord()`](https://docs.python.org/3/library/logging.html#logging.makeLogRecord "logging.makeLogRecord") (for example, from a pickled event received over the wire).