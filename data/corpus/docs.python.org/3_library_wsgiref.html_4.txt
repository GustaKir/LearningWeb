Title: Adding Headers with add_header in wsgiref
URL: https://docs.python.org/3/library/wsgiref.html
Summary: The `add_header` method allows the addition of multi-valued headers with optional MIME parameters. The first argument is the header name, followed by a value and optional keyword arguments for MIME parameters. Underscore characters in parameter names are converted to dashes. Example usage demonstrates adding a header with a filename parameter.
---

add_header(_name_ , _value_ , _** _params_)[¶](https://docs.python.org/3/library/wsgiref.html#wsgiref.headers.Headers.add_header "Link to this definition")
    
Add a (possibly multi-valued) header, with optional MIME parameters specified via keyword arguments.
_name_ is the header field to add. Keyword arguments can be used to set MIME parameters for the header field. Each parameter must be a string or `None`. Underscores in parameter names are converted to dashes, since dashes are illegal in Python identifiers, but many MIME parameter names include dashes. If the parameter value is a string, it is added to the header value parameters in the form `name="value"`. If it is `None`, only the parameter name is added. (This is used for MIME parameters without a value.) Example usage:
```
h.add_header('content-disposition', 'attachment', filename='bud.gif')

```

The above will add a header that looks like this:
```
Content-Disposition: attachment; filename="bud.gif"

```

Changed in version 3.5: _headers_ parameter is optional.
## [`wsgiref.simple_server`](https://docs.python.org/3/library/wsgiref.html#module-wsgiref.simple_server "wsgiref.simple_server: A simple WSGI HTTP server.") – a simple WSGI HTTP server[¶](https://docs.python.org/3/library/wsgiref.html#module-wsgiref.simple_server "Link to this heading")
This module implements a simple HTTP server (based on [`http.server`](https://docs.python.org/3/library/http.server.html#module-http.server "http.server: HTTP server and request handlers.")) that serves WSGI applications. Each server instance serves a single WSGI application on a given host and port. If you want to serve multiple applications on a single host and port, you should create a WSGI application that parses `PATH_INFO` to select which application to invoke for each request. (E.g., using the `shift_path_info()` function from [`wsgiref.util`](https://docs.python.org/3/library/wsgiref.html#module-wsgiref.util "wsgiref.util: WSGI environment utilities.").) 

wsgiref.simple_server.make_server(_host_ , _port_ , _app_ , _server_class =WSGIServer_, _handler_class =WSGIRequestHandler_)[¶](https://docs.python.org/3/library/wsgiref.html#wsgiref.simple_server.make_server "Link to this definition")
    
Create a new WSGI server listening on _host_ and _port_ , accepting connections for _app_. The return value is an instance of the supplied _server_class_ , and will process requests using the specified _handler_class_. _app_ must be a WSGI application object, as defined by [**PEP 3333**](https://peps.python.org/pep-3333/).
Example usage:
```
fromwsgiref.simple_serverimport make_server, demo_app
with make_server('', 8000, demo_app) as httpd:
  print("Serving HTTP on port 8000...")
  # Respond to requests until process is killed
  httpd.serve_forever()
  # Alternative: serve one request, then exit
  httpd.handle_request()