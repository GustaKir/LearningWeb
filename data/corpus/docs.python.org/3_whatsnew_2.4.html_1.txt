Title: New Features in Python 2.4
URL: https://docs.python.org/3/whatsnew/2.4.html
Summary: This article provides an overview of the new features introduced in Python 2.4.1, highlighting significant additions like function decorators and generator expressions, along with numerous updates to the standard library. It mentions that 481 patches and 502 bugs were addressed, and refers readers to the official documentation for detailed information.
---

Author:
    
A.M. Kuchling
This article explains the new features in Python 2.4.1, released on March 30, 2005.
Python 2.4 is a medium-sized release. It doesnâ€™t introduce as many changes as the radical Python 2.2, but introduces more features than the conservative 2.3 release. The most significant new language features are function decorators and generator expressions; most other changes are to the standard library.
According to the CVS change logs, there were 481 patches applied and 502 bugs fixed between Python 2.3 and 2.4. Both figures are likely to be underestimates.
This article doesnâ€™t attempt to provide a complete specification of every single new feature, but instead provides a brief introduction to each feature. For full details, you should refer to the documentation for Python 2.4, such as the Python Library Reference and the Python Reference Manual. Often you will be referred to the PEP for a particular new feature for explanations of the implementation and design rationale.
## PEP 218: Built-In Set Objects[Â¶](https://docs.python.org/3/whatsnew/2.4.html#pep-218-built-in-set-objects "Link to this heading")
Python 2.3 introduced the `sets` module. C implementations of set data types have now been added to the Python core as two new built-in types, `set(iterable)` and `frozenset(iterable)`. They provide high speed operations for membership testing, for eliminating duplicates from sequences, and for mathematical operations like unions, intersections, differences, and symmetric differences.
>>>```
>>> a = set('abracadabra')       # form a set from a string
>>> 'z' in a              # fast membership testing
False
>>> a                  # unique letters in a
set(['a', 'r', 'b', 'c', 'd'])
>>> ''.join(a)             # convert back into a string
'arbcd'
>>> b = set('alacazam')         # form a second set
>>> a - b                # letters in a but not in b
set(['r', 'd', 'b'])
>>> a | b                # letters in either a or b
set(['a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'])
>>> a & b                # letters in both a and b
set(['a', 'c'])
>>> a ^ b                # letters in a or b but not both
set(['r', 'd', 'b', 'm', 'z', 'l'])
>>> a.add('z')             # add a new element
>>> a.update('wxy')           # add multiple new elements
>>> a
set(['a', 'c', 'b', 'd', 'r', 'w', 'y', 'x', 'z'])
>>> a.remove('x')            # take one element out
>>> a
set(['a', 'c', 'b', 'd', 'r', 'w', 'y', 'z'])