Title: C API Enhancements
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section details recent additions to the C API, including unstable functions for handling compact integers and new functionalities for creating interpreters with specific configurations to support PEP 684.
---

### C API[¶](https://docs.python.org/3/whatsnew/changelog.html#id151 "Link to this heading")
  * [gh-101291](https://github.com/python/cpython/issues/101291): Added unstable C API for extracting the value of “compact” integers: [`PyUnstable_Long_IsCompact()`](https://docs.python.org/3/c-api/long.html#c.PyUnstable_Long_IsCompact "PyUnstable_Long_IsCompact") and [`PyUnstable_Long_CompactValue()`](https://docs.python.org/3/c-api/long.html#c.PyUnstable_Long_CompactValue "PyUnstable_Long_CompactValue").
  * [gh-104109](https://github.com/python/cpython/issues/104109): We’ve added `Py_NewInterpreterFromConfig()` and `PyInterpreterConfig` to the public C-API (but not the stable ABI; not yet at least). The new function may be used to create a new interpreter with various features configured. The function was added to support PEP 684 (per-interpreter GIL).
  * [gh-103968](https://github.com/python/cpython/issues/103968): [`PyType_FromSpec()`](https://docs.python.org/3/c-api/type.html#c.PyType_FromSpec "PyType_FromSpec") and its variants now allow creating classes whose metaclass overrides [`tp_new`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_new "PyTypeObject.tp_new"). The `tp_new` is ignored. This behavior is deprecated and will be disallowed in 3.14+. The new [`PyType_FromMetaclass()`](https://docs.python.org/3/c-api/type.html#c.PyType_FromMetaclass "PyType_FromMetaclass") already disallows it.
  * [gh-103743](https://github.com/python/cpython/issues/103743): Add [`PyUnstable_Object_GC_NewWithExtraData()`](https://docs.python.org/3/c-api/gcsupport.html#c.PyUnstable_Object_GC_NewWithExtraData "PyUnstable_Object_GC_NewWithExtraData") function that can be used to allocate additional memory after an object for data not managed by Python.
  * [gh-103295](https://github.com/python/cpython/issues/103295): Introduced [`PyUnstable_WritePerfMapEntry()`](https://docs.python.org/3/c-api/perfmaps.html#c.PyUnstable_WritePerfMapEntry "PyUnstable_WritePerfMapEntry"), [`PyUnstable_PerfMapState_Init()`](https://docs.python.org/3/c-api/perfmaps.html#c.PyUnstable_PerfMapState_Init "PyUnstable_PerfMapState_Init") and [`PyUnstable_PerfMapState_Fini()`](https://docs.python.org/3/c-api/perfmaps.html#c.PyUnstable_PerfMapState_Fini "PyUnstable_PerfMapState_Fini"). These allow extension modules (JIT compilers in particular) to write to perf-map files in a thread safe manner. The [Python support for the Linux perf profiler](https://docs.python.org/3/howto/perf_profiling.html) also uses these APIs to write entries in the perf-map file.
  * [gh-103509](https://github.com/python/cpython/issues/103509): Added C API for extending types whose instance memory layout is opaque: [`PyType_Spec.basicsize`](https://docs.python.org/3/c-api/type.html#c.PyType_Spec.basicsize "PyType_Spec.basicsize") can now be zero or negative, [`PyObject_GetTypeData()`](https://docs.python.org/3/c-api/object.html#c.PyObject_GetTypeData "PyObject_GetTypeData") can be used to get subclass-specific data, and [`Py_TPFLAGS_ITEMS_AT_END`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_ITEMS_AT_END "Py_TPFLAGS_ITEMS_AT_END") can be used to safely extend variable-size objects. See [**PEP 697**](https://peps.python.org/pep-0697/) for details.
  * [gh-103091](https://github.com/python/cpython/issues/103091): Add a new C-API function to eagerly assign a version tag to a PyTypeObject: `PyUnstable_Type_AssignVersionTag()`.
  * [gh-101408](https://github.com/python/cpython/issues/101408): [`PyObject_GC_Resize`](https://docs.python.org/3/c-api/gcsupport.html#c.PyObject_GC_Resize "PyObject_GC_Resize") should calculate preheader size if needed. Patch by Donghee Na.
  * [gh-98836](https://github.com/python/cpython/issues/98836): Add support of more formatting options (left aligning, octals, uppercase hexadecimals, `intmax_t`, `ptrdiff_t`, `wchar_t` C strings, variable width and precision) in [`PyUnicode_FromFormat()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FromFormat "PyUnicode_FromFormat") and [`PyUnicode_FromFormatV()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FromFormatV "PyUnicode_FromFormatV").
  * [gh-96803](https://github.com/python/cpython/issues/96803): Add unstable C-API functions to get the code object, lasti and line number from the internal `_PyInterpreterFrame` in the limited API. The functions are:
    * `PyCodeObject * PyUnstable_InterpreterFrame_GetCode(struct _PyInterpreterFrame *frame)`
    * `int PyUnstable_InterpreterFrame_GetLasti(struct _PyInterpreterFrame *frame)`
    * `int PyUnstable_InterpreterFrame_GetLine(struct _PyInterpreterFrame *frame)`