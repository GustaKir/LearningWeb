Title: IP Address Manipulation Functions
URL: https://docs.python.org/3/library/ipaddress.html
Summary: This section describes two functions from the `ipaddress` library: `v6_int_to_packed`, which converts an integer representation of an IPv6 address into 16 packed bytes in big-endian order, and `summarize_address_range`, which returns an iterator summarizing a range of IP addresses from the first to the last.
---

```


ipaddress.v6_int_to_packed(_address_)[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.v6_int_to_packed "Link to this definition")
    
Represent an address as 16 packed bytes in network (big-endian) order. _address_ is an integer representation of an IPv6 IP address. A [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised if the integer is negative or too large to be an IPv6 IP address. 

ipaddress.summarize_address_range(_first_ , _last_)[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.summarize_address_range "Link to this definition")
    
Return an iterator of the summarized network range given the first and last IP addresses. _first_ is the first [`IPv4Address`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address "ipaddress.IPv4Address") or [`IPv6Address`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Address "ipaddress.IPv6Address") in the range and _last_ is the last [`IPv4Address`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address "ipaddress.IPv4Address") or [`IPv6Address`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Address "ipaddress.IPv6Address") in the range. A [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") is raised if _first_ or _last_ are not IP addresses or are not of the same version. A [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised if _last_ is not greater than _first_ or if _first_ address version is not 4 or 6.
>>>```
>>> [ipaddr for ipaddr in ipaddress.summarize_address_range(
...   ipaddress.IPv4Address('192.0.2.0'),
...   ipaddress.IPv4Address('192.0.2.130'))]
[IPv4Network('192.0.2.0/25'), IPv4Network('192.0.2.128/31'), IPv4Network('192.0.2.130/32')]

```


ipaddress.collapse_addresses(_addresses_)[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.collapse_addresses "Link to this definition")
    
Return an iterator of the collapsed [`IPv4Network`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network "ipaddress.IPv4Network") or [`IPv6Network`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Network "ipaddress.IPv6Network") objects. _addresses_ is an [iterable](https://docs.python.org/3/glossary.html#term-iterable) of [`IPv4Network`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network "ipaddress.IPv4Network") or [`IPv6Network`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Network "ipaddress.IPv6Network") objects. A [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") is raised if _addresses_ contains mixed version objects.
>>>```
>>> [ipaddr for ipaddr in
... ipaddress.collapse_addresses([ipaddress.IPv4Network('192.0.2.0/25'),
... ipaddress.IPv4Network('192.0.2.128/25')])]
[IPv4Network('192.0.2.0/24')]

```


ipaddress.get_mixed_type_key(_obj_)[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.get_mixed_type_key "Link to this definition")
    
Return a key suitable for sorting between networks and addresses. Address and Network objects are not sortable by default; they’re fundamentally different, so the expression:
```
IPv4Address('192.0.2.0') <= IPv4Network('192.0.2.0/24')