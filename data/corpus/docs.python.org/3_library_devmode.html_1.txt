Title: Effects of Python Development Mode
URL: https://docs.python.org/3/library/devmode.html
Summary: Python Development Mode activates a default warning filter that displays specific warnings, including DeprecationWarning, ImportWarning, PendingDeprecationWarning, and ResourceWarning, which are typically filtered out. This mode behaves similarly to using the '-W default' command line option.
---

```

Effects of the Python Development Mode:
  * Add `default` [warning filter](https://docs.python.org/3/library/warnings.html#describing-warning-filters). The following warnings are shown:
    * [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning")
    * [`ImportWarning`](https://docs.python.org/3/library/exceptions.html#ImportWarning "ImportWarning")
    * [`PendingDeprecationWarning`](https://docs.python.org/3/library/exceptions.html#PendingDeprecationWarning "PendingDeprecationWarning")
    * [`ResourceWarning`](https://docs.python.org/3/library/exceptions.html#ResourceWarning "ResourceWarning")
Normally, the above warnings are filtered by the default [warning filters](https://docs.python.org/3/library/warnings.html#describing-warning-filters).
It behaves as if the [`-W default`](https://docs.python.org/3/using/cmdline.html#cmdoption-W) command line option is used.
Use the [`-W error`](https://docs.python.org/3/using/cmdline.html#cmdoption-W) command line option or set the [`PYTHONWARNINGS`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONWARNINGS) environment variable to `error` to treat warnings as errors.
  * Install debug hooks on memory allocators to check for:
    * Buffer underflow
    * Buffer overflow
    * Memory allocator API violation
    * Unsafe usage of the GIL
See the [`PyMem_SetupDebugHooks()`](https://docs.python.org/3/c-api/memory.html#c.PyMem_SetupDebugHooks "PyMem_SetupDebugHooks") C function.
It behaves as if the [`PYTHONMALLOC`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONMALLOC) environment variable is set to `debug`.
To enable the Python Development Mode without installing debug hooks on memory allocators, set the [`PYTHONMALLOC`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONMALLOC) environment variable to `default`.
  * Call [`faulthandler.enable()`](https://docs.python.org/3/library/faulthandler.html#faulthandler.enable "faulthandler.enable") at Python startup to install handlers for the [`SIGSEGV`](https://docs.python.org/3/library/signal.html#signal.SIGSEGV "signal.SIGSEGV"), [`SIGFPE`](https://docs.python.org/3/library/signal.html#signal.SIGFPE "signal.SIGFPE"), [`SIGABRT`](https://docs.python.org/3/library/signal.html#signal.SIGABRT "signal.SIGABRT"), [`SIGBUS`](https://docs.python.org/3/library/signal.html#signal.SIGBUS "signal.SIGBUS") and [`SIGILL`](https://docs.python.org/3/library/signal.html#signal.SIGILL "signal.SIGILL") signals to dump the Python traceback on a crash.
It behaves as if the [`-X faulthandler`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) command line option is used or if the [`PYTHONFAULTHANDLER`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONFAULTHANDLER) environment variable is set to `1`.
  * Enable [asyncio debug mode](https://docs.python.org/3/library/asyncio-dev.html#asyncio-debug-mode). For example, [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O.") checks for coroutines that were not awaited and logs them.
It behaves as if the [`PYTHONASYNCIODEBUG`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONASYNCIODEBUG) environment variable is set to `1`.
  * Check the _encoding_ and _errors_ arguments for string encoding and decoding operations. Examples: [`open()`](https://docs.python.org/3/library/functions.html#open "open"), [`str.encode()`](https://docs.python.org/3/library/stdtypes.html#str.encode "str.encode") and [`bytes.decode()`](https://docs.python.org/3/library/stdtypes.html#bytes.decode "bytes.decode").
By default, for best performance, the _errors_ argument is only checked at the first encoding/decoding error and the _encoding_ argument is sometimes ignored for empty strings.
  * The [`io.IOBase`](https://docs.python.org/3/library/io.html#io.IOBase "io.IOBase") destructor logs `close()` exceptions.
  * Set the [`dev_mode`](https://docs.python.org/3/library/sys.html#sys.flags.dev_mode "sys.flags.dev_mode") attribute of [`sys.flags`](https://docs.python.org/3/library/sys.html#sys.flags "sys.flags") to `True`.