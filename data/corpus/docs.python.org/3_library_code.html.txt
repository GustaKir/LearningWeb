Title: Interpreter Base Classes in Python
URL: https://docs.python.org/3/library/code.html
Summary: This section of the Python documentation introduces the `code` module, which includes interpreter base classes. It provides an overview of Interactive Interpreter and Interactive Console objects, serving as foundational components for creating custom Python interpreters.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [`code` — Interpreter base classes](https://docs.python.org/3/library/code.html)
    * [Interactive Interpreter Objects](https://docs.python.org/3/library/code.html#interactive-interpreter-objects)
    * [Interactive Console Objects](https://docs.python.org/3/library/code.html#interactive-console-objects)


#### Previous topic
[Custom Python Interpreters](https://docs.python.org/3/library/custominterp.html "previous chapter")
#### Next topic
[`codeop` — Compile Python code](https://docs.python.org/3/library/codeop.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/code.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/codeop.html "codeop — Compile Python code") |
  * [previous](https://docs.python.org/3/library/custominterp.html "Custom Python Interpreters") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Custom Python Interpreters](https://docs.python.org/3/library/custominterp.html) »
  * [`code` — Interpreter base classes](https://docs.python.org/3/library/code.html)
  * | 
  * Theme  Auto Light Dark |


# `code` — Interpreter base classes[¶](https://docs.python.org/3/library/code.html#module-code "Link to this heading")
**Source code:** [Lib/code.py](https://github.com/python/cpython/tree/3.13/Lib/code.py)
The `code` module provides facilities to implement read-eval-print loops in Python. Two classes and convenience functions are included which can be used to build applications which provide an interactive interpreter prompt. 

_class_ code.InteractiveInterpreter(_locals =None_)[¶](https://docs.python.org/3/library/code.html#code.InteractiveInterpreter "Link to this definition")
    
This class deals with parsing and interpreter state (the user’s namespace); it does not deal with input buffering or prompting or input file naming (the filename is always passed in explicitly). The optional _locals_ argument specifies a mapping to use as the namespace in which code will be executed; it defaults to a newly created dictionary with key `'__name__'` set to `'__console__'` and key `'__doc__'` set to `None`. 

_class_ code.InteractiveConsole(_locals =None_, _filename ='<console>'_, _local_exit =False_)[¶](https://docs.python.org/3/library/code.html#code.InteractiveConsole "Link to this definition")
    
Closely emulate the behavior of the interactive Python interpreter. This class builds on [`InteractiveInterpreter`](https://docs.python.org/3/library/code.html#code.InteractiveInterpreter "code.InteractiveInterpreter") and adds prompting using the familiar `sys.ps1` and `sys.ps2`, and input buffering. If _local_exit_ is true, `exit()` and `quit()` in the console will not raise [`SystemExit`](https://docs.python.org/3/library/exceptions.html#SystemExit "SystemExit"), but instead return to the calling code.
Changed in version 3.13: Added _local_exit_ parameter.