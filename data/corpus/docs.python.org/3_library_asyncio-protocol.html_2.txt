Title: Asyncio Transport Classes
URL: https://docs.python.org/3/library/asyncio-protocol.html
Summary: This document describes the base class for all asyncio transports, including asyncio.BaseTransport, which provides shared methods. It also introduces asyncio.WriteTransport for write-only connections and explains its usage in event loop methods.
---

_class_ asyncio.BaseTransport[¶](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.BaseTransport "Link to this definition")
    
Base class for all transports. Contains methods that all asyncio transports share. 

_class_ asyncio.WriteTransport(_BaseTransport_)[¶](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.WriteTransport "Link to this definition")
    
A base transport for write-only connections.
Instances of the _WriteTransport_ class are returned from the [`loop.connect_write_pipe()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.connect_write_pipe "asyncio.loop.connect_write_pipe") event loop method and are also used by subprocess-related methods like [`loop.subprocess_exec()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec "asyncio.loop.subprocess_exec"). 

_class_ asyncio.ReadTransport(_BaseTransport_)[¶](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.ReadTransport "Link to this definition")
    
A base transport for read-only connections.
Instances of the _ReadTransport_ class are returned from the [`loop.connect_read_pipe()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.connect_read_pipe "asyncio.loop.connect_read_pipe") event loop method and are also used by subprocess-related methods like [`loop.subprocess_exec()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec "asyncio.loop.subprocess_exec"). 

_class_ asyncio.Transport(_WriteTransport_ , _ReadTransport_)[¶](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.Transport "Link to this definition")
    
Interface representing a bidirectional transport, such as a TCP connection.
The user does not instantiate a transport directly; they call a utility function, passing it a protocol factory and other information necessary to create the transport and protocol.
Instances of the _Transport_ class are returned from or used by event loop methods like [`loop.create_connection()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_connection "asyncio.loop.create_connection"), [`loop.create_unix_connection()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_unix_connection "asyncio.loop.create_unix_connection"), [`loop.create_server()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_server "asyncio.loop.create_server"), [`loop.sendfile()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.sendfile "asyncio.loop.sendfile"), etc. 

_class_ asyncio.DatagramTransport(_BaseTransport_)[¶](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.DatagramTransport "Link to this definition")
    
A transport for datagram (UDP) connections.
Instances of the _DatagramTransport_ class are returned from the [`loop.create_datagram_endpoint()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_datagram_endpoint "asyncio.loop.create_datagram_endpoint") event loop method. 

_class_ asyncio.SubprocessTransport(_BaseTransport_)[¶](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.SubprocessTransport "Link to this definition")
    
An abstraction to represent a connection between a parent and its child OS process.
Instances of the _SubprocessTransport_ class are returned from event loop methods [`loop.subprocess_shell()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_shell "asyncio.loop.subprocess_shell") and [`loop.subprocess_exec()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec "asyncio.loop.subprocess_exec").
### Base Transport[¶](https://docs.python.org/3/library/asyncio-protocol.html#base-transport "Link to this heading") 

BaseTransport.close()[¶](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.BaseTransport.close "Link to this definition")
    
Close the transport.
If the transport has a buffer for outgoing data, buffered data will be flushed asynchronously. No more data will be received. After all buffered data is flushed, the protocol’s [`protocol.connection_lost()`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.BaseProtocol.connection_lost "asyncio.BaseProtocol.connection_lost") method will be called with [`None`](https://docs.python.org/3/library/constants.html#None "None") as its argument. The transport should not be used once it is closed. 

BaseTransport.is_closing()[¶](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.BaseTransport.is_closing "Link to this definition")
    
Return `True` if the transport is closing or is closed.