Title: Tkinter TTK Style Configuration
URL: https://docs.python.org/3/library/tkinter.ttk.html
Summary: This section describes how to configure and map styles in Tkinter's TTK module. The `configure` method allows setting default style options, illustrated with an example of creating a flat button. The `map` method sets dynamic style options based on specific states.
---

configure(_style_ , _query_opt =None_, _** kw_)[¶](https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Style.configure "Link to this definition")
    
Query or set the default value of the specified option(s) in _style_.
Each key in _kw_ is an option and each value is a string identifying the value for that option.
For example, to change every default button to be a flat button with some padding and a different background color:
```
fromtkinterimport ttk
importtkinter
root = tkinter.Tk()
ttk.Style().configure("TButton", padding=6, relief="flat",
  background="#ccc")
btn = ttk.Button(text="Sample")
btn.pack()
root.mainloop()

```


map(_style_ , _query_opt =None_, _** kw_)[¶](https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Style.map "Link to this definition")
    
Query or sets dynamic values of the specified option(s) in _style_.
Each key in _kw_ is an option and each value should be a list or a tuple (usually) containing statespecs grouped in tuples, lists, or some other preference. A statespec is a compound of one or more states and then a value.
An example may make it more understandable:
```
importtkinter
fromtkinterimport ttk
root = tkinter.Tk()
style = ttk.Style()
style.map("C.TButton",
  foreground=[('pressed', 'red'), ('active', 'blue')],
  background=[('pressed', '!disabled', 'black'), ('active', 'white')]
  )
colored_btn = ttk.Button(text="Test", style="C.TButton").pack()
root.mainloop()

```

Note that the order of the (states, value) sequences for an option does matter, if the order is changed to `[('active', 'blue'), ('pressed', 'red')]` in the foreground option, for example, the result would be a blue foreground when the widget were in active or pressed states. 

lookup(_style_ , _option_ , _state =None_, _default =None_)[¶](https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Style.lookup "Link to this definition")
    
Returns the value specified for _option_ in _style_.
If _state_ is specified, it is expected to be a sequence of one or more states. If the _default_ argument is set, it is used as a fallback value in case no specification for option is found.
To check what font a Button uses by default:
```
fromtkinterimport ttk
print(ttk.Style().lookup("TButton", "font"))

```


layout(_style_ , _layoutspec =None_)[¶](https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Style.layout "Link to this definition")
    
Define the widget layout for given _style_. If _layoutspec_ is omitted, return the layout specification for given style.
_layoutspec_ , if specified, is expected to be a list or some other sequence type (excluding strings), where each item should be a tuple and the first item is the layout name and the second item should have the format described in [Layouts](https://docs.python.org/3/library/tkinter.ttk.html#layouts).
To understand the format, see the following example (it is not intended to do anything useful):
```
fromtkinterimport ttk
importtkinter
root = tkinter.Tk()
style = ttk.Style()
style.layout("TMenubutton", [
  ("Menubutton.background", None),
  ("Menubutton.button", {"children":
    [("Menubutton.focus", {"children":
      [("Menubutton.padding", {"children":
        [("Menubutton.label", {"side": "left", "expand": 1})]
      })]
    })]
  }),
])
mbtn = ttk.Menubutton(text='Text')
mbtn.pack()
root.mainloop()

```


element_create(_elementname_ , _etype_ , _* args_, _** kw_)[¶](https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Style.element_create "Link to this definition")
    
Create a new element in the current theme, of the given _etype_ which is expected to be either “image”, “from” or “vsapi”. The latter is only available in Tk 8.6 on Windows.
If “image” is used, _args_ should contain the default image name followed by statespec/value pairs (this is the imagespec), and _kw_ may have the following options: 

border=padding
    
padding is a list of up to four integers, specifying the left, top, right, and bottom borders, respectively. 

height=height
    
Specifies a minimum height for the element. If less than zero, the base image’s height is used as a default. 

padding=padding
    
Specifies the element’s interior padding. Defaults to border’s value if not specified. 

sticky=spec
    
Specifies how the image is placed within the final parcel. spec contains zero or more characters “n”, “s”, “w”, or “e”. 

width=width
    
Specifies a minimum width for the element. If less than zero, the base image’s width is used as a default.
Example:
```
img1 = tkinter.PhotoImage(master=root, file='button.png')
img1 = tkinter.PhotoImage(master=root, file='button-pressed.png')
img1 = tkinter.PhotoImage(master=root, file='button-active.png')
style = ttk.Style(root)
style.element_create('Button.button', 'image',
           img1, ('pressed', img2), ('active', img3),
           border=(2, 4), sticky='we')