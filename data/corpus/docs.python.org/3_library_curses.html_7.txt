Title: Curses Library Initialization Functions
URL: https://docs.python.org/3/library/curses.html
Summary: This section covers two important functions in the curses library: `curses.setupterm()` for initializing the terminal, allowing specification of the terminal name and output file descriptor, and `curses.start_color()`, which must be called to use colors in applications, ideally right after `initscr()`, to set up the basic color palette.
---

curses.setupterm(_term =None_, _fd =-1_)[¶](https://docs.python.org/3/library/curses.html#curses.setupterm "Link to this definition")
    
Initialize the terminal. _term_ is a string giving the terminal name, or `None`; if omitted or `None`, the value of the `TERM` environment variable will be used. _fd_ is the file descriptor to which any initialization sequences will be sent; if not supplied or `-1`, the file descriptor for `sys.stdout` will be used. 

curses.start_color()[¶](https://docs.python.org/3/library/curses.html#curses.start_color "Link to this definition")
    
Must be called if the programmer wants to use colors, and before any other color manipulation routine is called. It is good practice to call this routine right after [`initscr()`](https://docs.python.org/3/library/curses.html#curses.initscr "curses.initscr").
[`start_color()`](https://docs.python.org/3/library/curses.html#curses.start_color "curses.start_color") initializes eight basic colors (black, red, green, yellow, blue, magenta, cyan, and white), and two global variables in the [`curses`](https://docs.python.org/3/library/curses.html#module-curses "curses: An interface to the curses library, providing portable terminal handling. \(Unix\)") module, [`COLORS`](https://docs.python.org/3/library/curses.html#curses.COLORS "curses.COLORS") and [`COLOR_PAIRS`](https://docs.python.org/3/library/curses.html#curses.COLOR_PAIRS "curses.COLOR_PAIRS"), containing the maximum number of colors and color-pairs the terminal can support. It also restores the colors on the terminal to the values they had when the terminal was just turned on. 

curses.termattrs()[¶](https://docs.python.org/3/library/curses.html#curses.termattrs "Link to this definition")
    
Return a logical OR of all video attributes supported by the terminal. This information is useful when a curses program needs complete control over the appearance of the screen. 

curses.termname()[¶](https://docs.python.org/3/library/curses.html#curses.termname "Link to this definition")
    
Return the value of the environment variable `TERM`, as a bytes object, truncated to 14 characters. 

curses.tigetflag(_capname_)[¶](https://docs.python.org/3/library/curses.html#curses.tigetflag "Link to this definition")
    
Return the value of the Boolean capability corresponding to the terminfo capability name _capname_ as an integer. Return the value `-1` if _capname_ is not a Boolean capability, or `0` if it is canceled or absent from the terminal description. 

curses.tigetnum(_capname_)[¶](https://docs.python.org/3/library/curses.html#curses.tigetnum "Link to this definition")
    
Return the value of the numeric capability corresponding to the terminfo capability name _capname_ as an integer. Return the value `-2` if _capname_ is not a numeric capability, or `-1` if it is canceled or absent from the terminal description. 

curses.tigetstr(_capname_)[¶](https://docs.python.org/3/library/curses.html#curses.tigetstr "Link to this definition")
    
Return the value of the string capability corresponding to the terminfo capability name _capname_ as a bytes object. Return `None` if _capname_ is not a terminfo “string capability”, or is canceled or absent from the terminal description. 

curses.tparm(_str_[, _..._])[¶](https://docs.python.org/3/library/curses.html#curses.tparm "Link to this definition")
    
Instantiate the bytes object _str_ with the supplied parameters, where _str_ should be a parameterized string obtained from the terminfo database. E.g. `tparm(tigetstr("cup"), 5, 3)` could result in `b'\033[6;4H'`, the exact result depending on terminal type. 

curses.typeahead(_fd_)[¶](https://docs.python.org/3/library/curses.html#curses.typeahead "Link to this definition")
    
Specify that the file descriptor _fd_ be used for typeahead checking. If _fd_ is `-1`, then no typeahead checking is done.
The curses library does “line-breakout optimization” by looking for typeahead periodically while updating the screen. If input is found, and it is coming from a tty, the current update is postponed until refresh or doupdate is called again, allowing faster response to commands typed in advance. This function allows specifying a different file descriptor for typeahead checking. 

curses.unctrl(_ch_)[¶](https://docs.python.org/3/library/curses.html#curses.unctrl "Link to this definition")
    
Return a bytes object which is a printable representation of the character _ch_. Control characters are represented as a caret followed by the character, for example as `b'^C'`. Printing characters are left as they are. 

curses.ungetch(_ch_)[¶](https://docs.python.org/3/library/curses.html#curses.ungetch "Link to this definition")
    
Push _ch_ so the next [`getch()`](https://docs.python.org/3/library/curses.html#curses.window.getch "curses.window.getch") will return it.
Note
Only one _ch_ can be pushed before `getch()` is called.