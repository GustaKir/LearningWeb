Title: Unicode API Functions in Python C API
URL: https://docs.python.org/3/c-api/unicode.html
Summary: The document describes functions related to handling Unicode strings in the Python C API. It includes information about `PyUnicode_GET_LENGTH`, which returns the length of a Unicode string in code points, and `PyUnicode_1BYTE_DATA` and `PyUnicode_2BYTE_DATA`, which access the data of Unicode objects in different byte representations.
---

[Py_ssize_t](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")PyUnicode_GET_LENGTH([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*unicode)[¶](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_GET_LENGTH "Link to this definition")
    
Return the length of the Unicode string, in code points. _unicode_ has to be a Unicode object in the “canonical” representation (not checked).
Added in version 3.3. 

[Py_UCS1](https://docs.python.org/3/c-api/unicode.html#c.Py_UCS1 "Py_UCS1")*PyUnicode_1BYTE_DATA([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*unicode)[¶](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_1BYTE_DATA "Link to this definition")


[Py_UCS2](https://docs.python.org/3/c-api/unicode.html#c.Py_UCS2 "Py_UCS2")*PyUnicode_2BYTE_DATA([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*unicode)[¶](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_2BYTE_DATA "Link to this definition")


[Py_UCS4](https://docs.python.org/3/c-api/unicode.html#c.Py_UCS4 "Py_UCS4")*PyUnicode_4BYTE_DATA([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*unicode)[¶](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_4BYTE_DATA "Link to this definition")
    
Return a pointer to the canonical representation cast to UCS1, UCS2 or UCS4 integer types for direct character access. No checks are performed if the canonical representation has the correct character size; use [`PyUnicode_KIND()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_KIND "PyUnicode_KIND") to select the right function.
Added in version 3.3. 

PyUnicode_1BYTE_KIND[¶](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_1BYTE_KIND "Link to this definition")


PyUnicode_2BYTE_KIND[¶](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_2BYTE_KIND "Link to this definition")


PyUnicode_4BYTE_KIND[¶](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_4BYTE_KIND "Link to this definition")
    
Return values of the [`PyUnicode_KIND()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_KIND "PyUnicode_KIND") macro.
Added in version 3.3.
Changed in version 3.12: `PyUnicode_WCHAR_KIND` has been removed. 

intPyUnicode_KIND([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*unicode)[¶](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_KIND "Link to this definition")
    
Return one of the PyUnicode kind constants (see above) that indicate how many bytes per character this Unicode object uses to store its data. _unicode_ has to be a Unicode object in the “canonical” representation (not checked).
Added in version 3.3. 

void*PyUnicode_DATA([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*unicode)[¶](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_DATA "Link to this definition")
    
Return a void pointer to the raw Unicode buffer. _unicode_ has to be a Unicode object in the “canonical” representation (not checked).
Added in version 3.3. 

voidPyUnicode_WRITE(intkind, void*data, [Py_ssize_t](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")index, [Py_UCS4](https://docs.python.org/3/c-api/unicode.html#c.Py_UCS4 "Py_UCS4")value)[¶](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_WRITE "Link to this definition")
    
Write into a canonical representation _data_ (as obtained with [`PyUnicode_DATA()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_DATA "PyUnicode_DATA")). This function performs no sanity checks, and is intended for usage in loops. The caller should cache the _kind_ value and _data_ pointer as obtained from other calls. _index_ is the index in the string (starts at 0) and _value_ is the new code point value which should be written to that location.
Added in version 3.3. 

[Py_UCS4](https://docs.python.org/3/c-api/unicode.html#c.Py_UCS4 "Py_UCS4")PyUnicode_READ(intkind, void*data, [Py_ssize_t](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")index)[¶](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_READ "Link to this definition")
    
Read a code point from a canonical representation _data_ (as obtained with [`PyUnicode_DATA()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_DATA "PyUnicode_DATA")). No checks or ready calls are performed.
Added in version 3.3.