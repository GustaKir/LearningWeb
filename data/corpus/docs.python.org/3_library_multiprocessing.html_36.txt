Title: multiprocessing.connection.Listener
URL: https://docs.python.org/3/library/multiprocessing.html
Summary: The Listener class in the multiprocessing module serves as a wrapper for a bound socket or Windows named pipe, which listens for incoming connections. The address parameter specifies the endpoint for the listener, with special considerations for the IP address '0.0.0.0' on Windows. The family parameter determines the type of socket to use, and if not provided, is inferred from the address.
---

_class_ multiprocessing.connection.Listener([_address_[, _family_[, _backlog_[, _authkey_]]]])[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.connection.Listener "Link to this definition")
    
A wrapper for a bound socket or Windows named pipe which is ‘listening’ for connections.
_address_ is the address to be used by the bound socket or named pipe of the listener object.
Note
If an address of ‘0.0.0.0’ is used, the address will not be a connectable end point on Windows. If you require a connectable end-point, you should use ‘127.0.0.1’.
_family_ is the type of socket (or named pipe) to use. This can be one of the strings `'AF_INET'` (for a TCP socket), `'AF_UNIX'` (for a Unix domain socket) or `'AF_PIPE'` (for a Windows named pipe). Of these only the first is guaranteed to be available. If _family_ is `None` then the family is inferred from the format of _address_. If _address_ is also `None` then a default is chosen. This default is the family which is assumed to be the fastest available. See [Address Formats](https://docs.python.org/3/library/multiprocessing.html#multiprocessing-address-formats). Note that if _family_ is `'AF_UNIX'` and address is `None` then the socket will be created in a private temporary directory created using [`tempfile.mkstemp()`](https://docs.python.org/3/library/tempfile.html#tempfile.mkstemp "tempfile.mkstemp").
If the listener object uses a socket then _backlog_ (1 by default) is passed to the [`listen()`](https://docs.python.org/3/library/socket.html#socket.socket.listen "socket.socket.listen") method of the socket once it has been bound.
If _authkey_ is given and not `None`, it should be a byte string and will be used as the secret key for an HMAC-based authentication challenge. No authentication is done if _authkey_ is `None`. [`AuthenticationError`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.AuthenticationError "multiprocessing.AuthenticationError") is raised if authentication fails. See [Authentication keys](https://docs.python.org/3/library/multiprocessing.html#multiprocessing-auth-keys). 

accept()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.connection.Listener.accept "Link to this definition")
    
Accept a connection on the bound socket or named pipe of the listener object and return a [`Connection`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.connection.Connection "multiprocessing.connection.Connection") object. If authentication is attempted and fails, then [`AuthenticationError`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.AuthenticationError "multiprocessing.AuthenticationError") is raised. 

close()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.connection.Listener.close "Link to this definition")
    
Close the bound socket or named pipe of the listener object. This is called automatically when the listener is garbage collected. However it is advisable to call it explicitly.
Listener objects have the following read-only properties: 

address[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.connection.Listener.address "Link to this definition")
    
The address which is being used by the Listener object. 

last_accepted[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.connection.Listener.last_accepted "Link to this definition")
    
The address from which the last accepted connection came. If this is unavailable then it is `None`.
Changed in version 3.3: Listener objects now support the context management protocol – see [Context Manager Types](https://docs.python.org/3/library/stdtypes.html#typecontextmanager). [`__enter__()`](https://docs.python.org/3/library/stdtypes.html#contextmanager.__enter__ "contextmanager.__enter__") returns the listener object, and [`__exit__()`](https://docs.python.org/3/library/stdtypes.html#contextmanager.__exit__ "contextmanager.__exit__") calls [`close()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.connection.Listener.close "multiprocessing.connection.Listener.close").