Title: ResourceReader Abstract Methods in importlib.resources.abc
URL: https://docs.python.org/3/library/importlib.resources.abc.html
Summary: The `ResourceReader` class in `importlib.resources.abc` defines three abstract methods: `resource_path`, which returns the file system path of a resource and raises `FileNotFoundError` if not found; `is_resource`, which checks if a given name is considered a resource, also raising `FileNotFoundError` if the name does not exist; and `contents`, whose details are not provided in this chunk.
---

_abstractmethod_ resource_path(_resource_)[¶](https://docs.python.org/3/library/importlib.resources.abc.html#importlib.resources.abc.ResourceReader.resource_path "Link to this definition")
    
> Returns the file system path to the _resource_.
> If the resource does not concretely exist on the file system, raise [`FileNotFoundError`](https://docs.python.org/3/library/exceptions.html#FileNotFoundError "FileNotFoundError"). 

_abstractmethod_ is_resource(_name_)[¶](https://docs.python.org/3/library/importlib.resources.abc.html#importlib.resources.abc.ResourceReader.is_resource "Link to this definition")
    
> Returns `True` if the named _name_ is considered a resource. [`FileNotFoundError`](https://docs.python.org/3/library/exceptions.html#FileNotFoundError "FileNotFoundError") is raised if _name_ does not exist. 

_abstractmethod_ contents()[¶](https://docs.python.org/3/library/importlib.resources.abc.html#importlib.resources.abc.ResourceReader.contents "Link to this definition")
    
> Returns an [iterable](https://docs.python.org/3/glossary.html#term-iterable) of strings over the contents of the package. Do note that it is not required that all names returned by the iterator be actual resources, e.g. it is acceptable to return names for which [`is_resource()`](https://docs.python.org/3/library/importlib.resources.abc.html#importlib.resources.abc.ResourceReader.is_resource "importlib.resources.abc.ResourceReader.is_resource") would be false.
> Allowing non-resource names to be returned is to allow for situations where how a package and its resources are stored are known a priori and the non-resource names would be useful. For instance, returning subdirectory names is allowed so that when it is known that the package and resources are stored on the file system then those subdirectory names can be used directly.
> The abstract method returns an iterable of no items. 

_class_ importlib.resources.abc.Traversable[¶](https://docs.python.org/3/library/importlib.resources.abc.html#importlib.resources.abc.Traversable "Link to this definition")
    
An object with a subset of [`pathlib.Path`](https://docs.python.org/3/library/pathlib.html#pathlib.Path "pathlib.Path") methods suitable for traversing directories and opening files.
For a representation of the object on the file-system, use [`importlib.resources.as_file()`](https://docs.python.org/3/library/importlib.resources.html#importlib.resources.as_file "importlib.resources.as_file"). 

name[¶](https://docs.python.org/3/library/importlib.resources.abc.html#importlib.resources.abc.Traversable.name "Link to this definition")
    
Abstract. The base name of this object without any parent references. 

_abstractmethod_ iterdir()[¶](https://docs.python.org/3/library/importlib.resources.abc.html#importlib.resources.abc.Traversable.iterdir "Link to this definition")
    
Yield Traversable objects in self. 

_abstractmethod_ is_dir()[¶](https://docs.python.org/3/library/importlib.resources.abc.html#importlib.resources.abc.Traversable.is_dir "Link to this definition")
    
Return `True` if self is a directory. 

_abstractmethod_ is_file()[¶](https://docs.python.org/3/library/importlib.resources.abc.html#importlib.resources.abc.Traversable.is_file "Link to this definition")
    
Return `True` if self is a file. 

_abstractmethod_ joinpath(_* pathsegments_)[¶](https://docs.python.org/3/library/importlib.resources.abc.html#importlib.resources.abc.Traversable.joinpath "Link to this definition")
    
Traverse directories according to _pathsegments_ and return the result as `Traversable`.
Each _pathsegments_ argument may contain multiple names separated by forward slashes (`/`, `posixpath.sep` ). For example, the following are equivalent:
```
files.joinpath('subdir', 'subsuddir', 'file.txt')
files.joinpath('subdir/subsuddir/file.txt')

```

Note that some `Traversable` implementations might not be updated to the latest version of the protocol. For compatibility with such implementations, provide a single argument without path separators to each call to `joinpath`. For example:
```
files.joinpath('subdir').joinpath('subsubdir').joinpath('file.txt')