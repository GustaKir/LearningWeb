Title: Memory Management Functions in Python C API
URL: https://docs.python.org/3/c-api/memory.html
Summary: This section describes the `PyMem_Resize` and `PyMem_Del` functions used for memory management in the Python C API. `PyMem_Resize` resizes a memory block and returns a pointer, while `PyMem_Del` is similar to `PyMem_Free`. It also notes the availability of macros for direct memory allocation, cautioning about binary compatibility.
---

PyMem_Resize(p, TYPE, n)[¶](https://docs.python.org/3/c-api/memory.html#c.PyMem_Resize "Link to this definition")
    
Same as [`PyMem_Realloc()`](https://docs.python.org/3/c-api/memory.html#c.PyMem_Realloc "PyMem_Realloc"), but the memory block is resized to `(n * sizeof(TYPE))` bytes. Returns a pointer cast to `TYPE*`. On return, _p_ will be a pointer to the new memory area, or `NULL` in the event of failure.
This is a C preprocessor macro; _p_ is always reassigned. Save the original value of _p_ to avoid losing memory when handling errors. 

voidPyMem_Del(void*p)[¶](https://docs.python.org/3/c-api/memory.html#c.PyMem_Del "Link to this definition")
    
Same as [`PyMem_Free()`](https://docs.python.org/3/c-api/memory.html#c.PyMem_Free "PyMem_Free").
In addition, the following macro sets are provided for calling the Python memory allocator directly, without involving the C API functions listed above. However, note that their use does not preserve binary compatibility across Python versions and is therefore deprecated in extension modules.
  * `PyMem_MALLOC(size)`
  * `PyMem_NEW(type, size)`
  * `PyMem_REALLOC(ptr, size)`
  * `PyMem_RESIZE(ptr, type, size)`
  * `PyMem_FREE(ptr)`
  * `PyMem_DEL(ptr)`


## Object allocators[¶](https://docs.python.org/3/c-api/memory.html#object-allocators "Link to this heading")
The following function sets, modeled after the ANSI C standard, but specifying behavior when requesting zero bytes, are available for allocating and releasing memory from the Python heap.
Note
There is no guarantee that the memory returned by these allocators can be successfully cast to a Python object when intercepting the allocating functions in this domain by the methods described in the [Customize Memory Allocators](https://docs.python.org/3/c-api/memory.html#customize-memory-allocators) section.
The [default object allocator](https://docs.python.org/3/c-api/memory.html#default-memory-allocators) uses the [pymalloc memory allocator](https://docs.python.org/3/c-api/memory.html#pymalloc).
Warning
The [GIL](https://docs.python.org/3/glossary.html#term-global-interpreter-lock) must be held when using these functions. 

void*PyObject_Malloc(size_tn)[¶](https://docs.python.org/3/c-api/memory.html#c.PyObject_Malloc "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Allocates _n_ bytes and returns a pointer of type void* to the allocated memory, or `NULL` if the request fails.
Requesting zero bytes returns a distinct non-`NULL` pointer if possible, as if `PyObject_Malloc(1)` had been called instead. The memory will not have been initialized in any way. 

void*PyObject_Calloc(size_tnelem, size_telsize)[¶](https://docs.python.org/3/c-api/memory.html#c.PyObject_Calloc "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.7._
Allocates _nelem_ elements each whose size in bytes is _elsize_ and returns a pointer of type void* to the allocated memory, or `NULL` if the request fails. The memory is initialized to zeros.
Requesting zero elements or elements of size zero bytes returns a distinct non-`NULL` pointer if possible, as if `PyObject_Calloc(1, 1)` had been called instead.
Added in version 3.5. 

void*PyObject_Realloc(void*p, size_tn)[¶](https://docs.python.org/3/c-api/memory.html#c.PyObject_Realloc "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Resizes the memory block pointed to by _p_ to _n_ bytes. The contents will be unchanged to the minimum of the old and the new sizes.
If _p_ is `NULL`, the call is equivalent to `PyObject_Malloc(n)`; else if _n_ is equal to zero, the memory block is resized but is not freed, and the returned pointer is non-`NULL`.
Unless _p_ is `NULL`, it must have been returned by a previous call to [`PyObject_Malloc()`](https://docs.python.org/3/c-api/memory.html#c.PyObject_Malloc "PyObject_Malloc"), [`PyObject_Realloc()`](https://docs.python.org/3/c-api/memory.html#c.PyObject_Realloc "PyObject_Realloc") or [`PyObject_Calloc()`](https://docs.python.org/3/c-api/memory.html#c.PyObject_Calloc "PyObject_Calloc").
If the request fails, [`PyObject_Realloc()`](https://docs.python.org/3/c-api/memory.html#c.PyObject_Realloc "PyObject_Realloc") returns `NULL` and _p_ remains a valid pointer to the previous memory area.