Title: Python 3.13.0 beta 1 Release Notes
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: The Python 3.13.0 beta 1 release, dated May 8, 2024, includes updates for security and core functionalities. Key security improvements involve updating the bundled libexpat and enhancing support detection for various hashing algorithms in the hashlib module. Additionally, changes have been made to core opcodes for better tracing in certain cases.
---

## Python 3.13.0 beta 1[¶](https://docs.python.org/3/whatsnew/changelog.html#python-3-13-0-beta-1 "Link to this heading")
_Release date: 2024-05-08_
### Security[¶](https://docs.python.org/3/whatsnew/changelog.html#id73 "Link to this heading")
  * [gh-116741](https://github.com/python/cpython/issues/116741): Update bundled libexpat to 2.6.2
  * [gh-117233](https://github.com/python/cpython/issues/117233): Detect BLAKE2, SHA3, Shake, & truncated SHA512 support in the OpenSSL-ish libcrypto library at build time. This allows [`hashlib`](https://docs.python.org/3/library/hashlib.html#module-hashlib "hashlib: Secure hash and message digest algorithms.") to be used with libraries that do not to support every algorithm that upstream OpenSSL does.


### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id74 "Link to this heading")
  * [gh-118414](https://github.com/python/cpython/issues/118414): Add instrumented opcodes to YIELD_VALUE assertion for tracing cases.
  * [gh-117953](https://github.com/python/cpython/issues/117953): When a builtin or extension module is imported for the first time, while a subinterpreter is active, the module’s init function is now run by the main interpreter first before import continues in the subinterpreter. Consequently, single-phase init modules now fail in an isolated subinterpreter without the init function running under that interpreter, whereas before it would run under the subinterpreter _before_ failing, potentially leaving behind global state and callbacks and otherwise leaving the module in an inconsistent state.
  * [gh-117549](https://github.com/python/cpython/issues/117549): Don’t use designated initializer syntax in inline functions in internal headers. They cause problems for C++ or MSVC users who aren’t yet using the latest C++ standard (C++20). While internal, pycore_backoff.h, is included (indirectly, via pycore_code.h) by some key 3rd party software that does so for speed.
  * [gh-95382](https://github.com/python/cpython/issues/95382): Improve performance of [`json.dumps()`](https://docs.python.org/3/library/json.html#json.dumps "json.dumps") and [`json.dump()`](https://docs.python.org/3/library/json.html#json.dump "json.dump") when using the argument _indent_. Depending on the data the encoding using [`json.dumps()`](https://docs.python.org/3/library/json.html#json.dumps "json.dumps") with _indent_ can be up to 2 to 3 times faster.
  * [gh-116322](https://github.com/python/cpython/issues/116322): In `--disable-gil` builds, the GIL will be enabled while loading C extension modules. If the module indicates that it supports running without the GIL, the GIL will be disabled once loading is complete. Otherwise, the GIL will remain enabled for the remainder of the interpreter’s lifetime. This behavior does not apply if the GIL has been explicitly enabled or disabled with `PYTHON_GIL` or `-Xgil`.
  * [gh-118513](https://github.com/python/cpython/issues/118513): Fix incorrect [`UnboundLocalError`](https://docs.python.org/3/library/exceptions.html#UnboundLocalError "UnboundLocalError") when two comprehensions in the same function both reference the same name, and in one comprehension the name is bound while in the other it’s an implicit global.
  * [gh-118518](https://github.com/python/cpython/issues/118518): Allow the Linux perf support to work without frame pointers using perf’s advanced JIT support. The feature is activated when using the `PYTHON_PERF_JIT_SUPPORT` environment variable or when running Python with `-Xperf_jit`. Patch by Pablo Galindo.
  * [gh-117514](https://github.com/python/cpython/issues/117514): Add `sys._is_gil_enabled()` function that returns whether the GIL is currently enabled. In the default build it always returns `True` because the GIL is always enabled. In the free-threaded build, it may return `True` or `False`.
  * [gh-118164](https://github.com/python/cpython/issues/118164): Break a loop between the Python implementation of the [`decimal`](https://docs.python.org/3/library/decimal.html#module-decimal "decimal: Implementation of the General Decimal Arithmetic Specification.") module and the Python code for integer to string conversion. Also optimize integer to string conversion for values in the range from 9_000 to 135_000 decimal digits.
  * [gh-118473](https://github.com/python/cpython/issues/118473): Fix [`sys.set_asyncgen_hooks()`](https://docs.python.org/3/library/sys.html#sys.set_asyncgen_hooks "sys.set_asyncgen_hooks") not to be partially set when raising [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError").
  * [gh-118465](https://github.com/python/cpython/issues/118465): Compiler populates the new `__firstlineno__` field on a class with the line number of the first line of the class definition.
  * [gh-118492](https://github.com/python/cpython/issues/118492): Fix an issue where the type cache can expose a previously accessed attribute when a finalizer is run.
  * [gh-117714](h