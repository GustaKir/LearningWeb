Title: File Object Management in Python
URL: https://docs.python.org/3/tutorial/inputoutput.html
Summary: This section explains the importance of properly closing file objects in Python. It emphasizes using the `with` keyword to manage file resources effectively, and warns that failing to close a file may result in incomplete writes and errors when attempting to read from a closed file.
---

```

If you’re not using the [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) keyword, then you should call `f.close()` to close the file and immediately free up any system resources used by it.
Warning
Calling `f.write()` without using the `with` keyword or calling `f.close()` **might** result in the arguments of `f.write()` not being completely written to the disk, even if the program exits successfully.
After a file object is closed, either by a [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement or by calling `f.close()`, attempts to use the file object will automatically fail.
>>>```
>>> f.close()
>>> f.read()
Traceback (most recent call last):
 File "<stdin>", line 1, in <module>
ValueError: I/O operation on closed file.

```

### 7.2.1. Methods of File Objects[¶](https://docs.python.org/3/tutorial/inputoutput.html#methods-of-file-objects "Link to this heading")
The rest of the examples in this section will assume that a file object called `f` has already been created.
To read a file’s contents, call `f.read(size)`, which reads some quantity of data and returns it as a string (in text mode) or bytes object (in binary mode). _size_ is an optional numeric argument. When _size_ is omitted or negative, the entire contents of the file will be read and returned; it’s your problem if the file is twice as large as your machine’s memory. Otherwise, at most _size_ characters (in text mode) or _size_ bytes (in binary mode) are read and returned. If the end of the file has been reached, `f.read()` will return an empty string (`''`).
>>>```
>>> f.read()
'This is the entire file.\n'
>>> f.read()
''

```

`f.readline()` reads a single line from the file; a newline character (`\n`) is left at the end of the string, and is only omitted on the last line of the file if the file doesn’t end in a newline. This makes the return value unambiguous; if `f.readline()` returns an empty string, the end of the file has been reached, while a blank line is represented by `'\n'`, a string containing only a single newline.
>>>```
>>> f.readline()
'This is the first line of the file.\n'
>>> f.readline()
'Second line of the file\n'
>>> f.readline()
''

```

For reading lines from a file, you can loop over the file object. This is memory efficient, fast, and leads to simple code:
>>>```
>>> for line in f:
...   print(line, end='')
...
This is the first line of the file.
Second line of the file

```

If you want to read all the lines of a file in a list you can also use `list(f)` or `f.readlines()`.
`f.write(string)` writes the contents of _string_ to the file, returning the number of characters written.
>>>```
>>> f.write('This is a test\n')
15

```

Other types of objects need to be converted – either to a string (in text mode) or a bytes object (in binary mode) – before writing them:
>>>```
>>> value = ('the answer', 42)
>>> s = str(value) # convert the tuple to string
>>> f.write(s)
18

```

`f.tell()` returns an integer giving the file object’s current position in the file represented as number of bytes from the beginning of the file when in binary mode and an opaque number when in text mode.
To change the file object’s position, use `f.seek(offset, whence)`. The position is computed from adding _offset_ to a reference point; the reference point is selected by the _whence_ argument. A _whence_ value of 0 measures from the beginning of the file, 1 uses the current file position, and 2 uses the end of the file as the reference point. _whence_ can be omitted and defaults to 0, using the beginning of the file as the reference point.
>>>```
>>> f = open('workfile', 'rb+')
>>> f.write(b'0123456789abcdef')
16
>>> f.seek(5)   # Go to the 6th byte in the file
5
>>> f.read(1)
b'5'
>>> f.seek(-3, 2) # Go to the 3rd byte before the end
13
>>> f.read(1)
b'd'