Title: New Features and Updates in Python 3.5
URL: https://docs.python.org/3/whatsnew/3.5.html
Summary: Python 3.5 introduces customizable task factories through the `asyncio.loop.get_task_factory()` method and adds new methods `Queue.join()` and `Queue.task_done()` to the `asyncio.Queue` class. The `JoinableQueue` has been removed in favor of `asyncio.Queue`. Updates in version 3.5.1 include enhancements to the `ensure_future()` function and related functions.
---

op.get_task_factory "asyncio.loop.get_task_factory") methods to customize the task factory that [`loop.create_task()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_task "asyncio.loop.create_task") method uses. (Contributed by Yury Selivanov.)
  * New [`Queue.join()`](https://docs.python.org/3/library/asyncio-queue.html#asyncio.Queue.join "asyncio.Queue.join") and [`Queue.task_done()`](https://docs.python.org/3/library/asyncio-queue.html#asyncio.Queue.task_done "asyncio.Queue.task_done") queue methods. (Contributed by Victor Stinner.)
  * The `JoinableQueue` class was removed, in favor of the [`asyncio.Queue`](https://docs.python.org/3/library/asyncio-queue.html#asyncio.Queue "asyncio.Queue") class. (Contributed by Victor Stinner.)


Updates in 3.5.1:
  * The [`ensure_future()`](https://docs.python.org/3/library/asyncio-future.html#asyncio.ensure_future "asyncio.ensure_future") function and all functions that use it, such as [`loop.run_until_complete()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.run_until_complete "asyncio.loop.run_until_complete"), now accept all kinds of [awaitable objects](https://docs.python.org/3/glossary.html#term-awaitable). (Contributed by Yury Selivanov.)
  * New [`run_coroutine_threadsafe()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.run_coroutine_threadsafe "asyncio.run_coroutine_threadsafe") function to submit coroutines to event loops from other threads. (Contributed by Vincent Michel.)
  * New [`Transport.is_closing()`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.BaseTransport.is_closing "asyncio.BaseTransport.is_closing") method to check if the transport is closing or closed. (Contributed by Yury Selivanov.)
  * The [`loop.create_server()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_server "asyncio.loop.create_server") method can now accept a list of hosts. (Contributed by Yann Sionneau.)


Updates in 3.5.2:
  * New [`loop.create_future()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_future "asyncio.loop.create_future") method to create Future objects. This allows alternative event loop implementations, such as [uvloop](https://github.com/MagicStack/uvloop), to provide a faster [`asyncio.Future`](https://docs.python.org/3/library/asyncio-future.html#asyncio.Future "asyncio.Future") implementation. (Contributed by Yury Selivanov.)
  * New [`loop.get_exception_handler()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.get_exception_handler "asyncio.loop.get_exception_handler") method to get the current exception handler. (Contributed by Yury Selivanov.)
  * New [`StreamReader.readuntil()`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamReader.readuntil "asyncio.StreamReader.readuntil") method to read data from the stream until a separator bytes sequence appears. (Contributed by Mark Korenberg.)
  * The [`loop.create_connection()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_connection "asyncio.loop.create_connection") and [`loop.create_server()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_server "asyncio.loop.create_server") methods are optimized to avoid calling the system `getaddrinfo` function if the address is already resolved. (Contributed by A. Jesse Jiryu Davis.)
  * The [`loop.sock_connect(sock, address)`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.sock_connect "asyncio.loop.sock_connect") no longer requires the _address_ to be resolved prior to the call. (Contributed by A. Jesse Jiryu Davis.)