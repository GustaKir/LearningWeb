Title: IPv6 Network Methods
URL: https://docs.python.org/3/library/ipaddress.html
Summary: This section outlines various methods available for IPv6Network objects in Python's ipaddress module, including overlaps, address_exclude, subnets, supernet, subnet_of, supernet_of, and compare_networks, each providing functionality for network manipulation and comparison.
---

overlaps(_other_)[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Network.overlaps "Link to this definition")


address_exclude(_network_)[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Network.address_exclude "Link to this definition")


subnets(_prefixlen_diff =1_, _new_prefix =None_)[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Network.subnets "Link to this definition")


supernet(_prefixlen_diff =1_, _new_prefix =None_)[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Network.supernet "Link to this definition")


subnet_of(_other_)[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Network.subnet_of "Link to this definition")


supernet_of(_other_)[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Network.supernet_of "Link to this definition")


compare_networks(_other_)[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Network.compare_networks "Link to this definition")
    
Refer to the corresponding attribute documentation in [`IPv4Network`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network "ipaddress.IPv4Network"). 

is_site_local[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Network.is_site_local "Link to this definition")
    
These attribute is true for the network as a whole if it is true for both the network address and the broadcast address.
### Operators[¶](https://docs.python.org/3/library/ipaddress.html#id1 "Link to this heading")
Network objects support some operators. Unless stated otherwise, operators can only be applied between compatible objects (i.e. IPv4 with IPv4, IPv6 with IPv6).
#### Logical operators[¶](https://docs.python.org/3/library/ipaddress.html#logical-operators "Link to this heading")
Network objects can be compared with the usual set of logical operators. Network objects are ordered first by network address, then by net mask.
#### Iteration[¶](https://docs.python.org/3/library/ipaddress.html#iteration "Link to this heading")
Network objects can be iterated to list all the addresses belonging to the network. For iteration, _all_ hosts are returned, including unusable hosts (for usable hosts, use the [`hosts()`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network.hosts "ipaddress.IPv4Network.hosts") method). An example:
>>>```
>>> for addr in IPv4Network('192.0.2.0/28'):
...   addr
...
IPv4Address('192.0.2.0')
IPv4Address('192.0.2.1')
IPv4Address('192.0.2.2')
IPv4Address('192.0.2.3')
IPv4Address('192.0.2.4')
IPv4Address('192.0.2.5')
IPv4Address('192.0.2.6')
IPv4Address('192.0.2.7')
IPv4Address('192.0.2.8')
IPv4Address('192.0.2.9')
IPv4Address('192.0.2.10')
IPv4Address('192.0.2.11')
IPv4Address('192.0.2.12')
IPv4Address('192.0.2.13')
IPv4Address('192.0.2.14')
IPv4Address('192.0.2.15')

```

#### Networks as containers of addresses[¶](https://docs.python.org/3/library/ipaddress.html#networks-as-containers-of-addresses "Link to this heading")
Network objects can act as containers of addresses. Some examples:
>>>```
>>> IPv4Network('192.0.2.0/28')[0]
IPv4Address('192.0.2.0')
>>> IPv4Network('192.0.2.0/28')[15]
IPv4Address('192.0.2.15')
>>> IPv4Address('192.0.2.6') in IPv4Network('192.0.2.0/28')
True
>>> IPv4Address('192.0.3.6') in IPv4Network('192.0.2.0/28')
False

```

## Interface objects[¶](https://docs.python.org/3/library/ipaddress.html#interface-objects "Link to this heading")
Interface objects are [hashable](https://docs.python.org/3/glossary.html#term-hashable), so they can be used as keys in dictionaries. 

_class_ ipaddress.IPv4Interface(_address_)[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Interface "Link to this definition")
    
Construct an IPv4 interface. The meaning of _address_ is as in the constructor of [`IPv4Network`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network "ipaddress.IPv4Network"), except that arbitrary host addresses are always accepted.
[`IPv4Interface`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Interface "ipaddress.IPv4Interface") is a subclass of [`IPv4Address`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address "ipaddress.IPv4Address"), so it inherits all the attributes from that class. In addition, the following attributes are available: 

ip[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Interface.ip "Link to this definition")
    
The address ([`IPv4Address`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address "ipaddress.IPv4Address")) without network information.
>>>```
>>> interface = IPv4Interface('192.0.2.5/24')
>>> interface.ip
IPv4Address('192.0.2.5')