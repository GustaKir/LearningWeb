Title: Python C API: System Initialization
URL: https://docs.python.org/3/c-api/init.html
Summary: This section details the management of system arguments in Python via the `PySys_SetArgvEx` function, which is part of the Stable ABI for backward compatibility. It notes that the returned version string should not be modified and emphasizes the use of `PyConfig` attributes for setting command line arguments instead.
---

```

The returned string points into static storage; the caller should not modify its value. The value is available to Python code as part of the variable `sys.version`. 

voidPySys_SetArgvEx(intargc, wchar_t**argv, intupdatepath)[¶](https://docs.python.org/3/c-api/init.html#c.PySys_SetArgvEx "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
This API is kept for backward compatibility: setting [`PyConfig.argv`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.argv "PyConfig.argv"), [`PyConfig.parse_argv`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.parse_argv "PyConfig.parse_argv") and [`PyConfig.safe_path`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.safe_path "PyConfig.safe_path") should be used instead, see [Python Initialization Configuration](https://docs.python.org/3/c-api/init_config.html#init-config).
Set [`sys.argv`](https://docs.python.org/3/library/sys.html#sys.argv "sys.argv") based on _argc_ and _argv_. These parameters are similar to those passed to the program’s `main()` function with the difference that the first entry should refer to the script file to be executed rather than the executable hosting the Python interpreter. If there isn’t a script that will be run, the first entry in _argv_ can be an empty string. If this function fails to initialize [`sys.argv`](https://docs.python.org/3/library/sys.html#sys.argv "sys.argv"), a fatal condition is signalled using [`Py_FatalError()`](https://docs.python.org/3/c-api/sys.html#c.Py_FatalError "Py_FatalError").
If _updatepath_ is zero, this is all the function does. If _updatepath_ is non-zero, the function also modifies [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path") according to the following algorithm:
  * If the name of an existing script is passed in `argv[0]`, the absolute path of the directory where the script is located is prepended to [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path").
  * Otherwise (that is, if _argc_ is `0` or `argv[0]` doesn’t point to an existing file name), an empty string is prepended to [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path"), which is the same as prepending the current working directory (`"."`).


Use [`Py_DecodeLocale()`](https://docs.python.org/3/c-api/sys.html#c.Py_DecodeLocale "Py_DecodeLocale") to decode a bytes string to get a wchar_t* string.
See also [`PyConfig.orig_argv`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.orig_argv "PyConfig.orig_argv") and [`PyConfig.argv`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.argv "PyConfig.argv") members of the [Python Initialization Configuration](https://docs.python.org/3/c-api/init_config.html#init-config).
Note
It is recommended that applications embedding the Python interpreter for purposes other than executing a single script pass `0` as _updatepath_ , and update [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path") themselves if desired. See [**CVE 2008-5983**](https://www.cve.org/CVERecord?id=CVE-2008-5983).
On versions before 3.1.3, you can achieve the same effect by manually popping the first [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path") element after having called [`PySys_SetArgv()`](https://docs.python.org/3/c-api/init.html#c.PySys_SetArgv "PySys_SetArgv"), for example using:
```
PyRun_SimpleString("import sys; sys.path.pop(0)\n");