Title: Python Changelog: Recent Updates and Features
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This document details several patches and updates to Python, including the implementation of extended color functions in ncurses for terminal support, the addition of private macros for improved diagnostics, and enhanced capabilities for the int type with the new x.is_integer() method for compatibility with floats.
---

Patch by Niklas Fiekas.
  * [bpo-36982](https://bugs.python.org/issue?@action=redirect&bpo=36982): Use ncurses extended color functions when available to support terminals with 256 colors, and add the new function [`curses.has_extended_color_support()`](https://docs.python.org/3/library/curses.html#curses.has_extended_color_support "curses.has_extended_color_support") to indicate whether extended color support is provided by the underlying ncurses library.
  * [bpo-19569](https://bugs.python.org/issue?@action=redirect&bpo=19569): Add the private macros `_Py_COMP_DIAG_PUSH`, `_Py_COMP_DIAG_IGNORE_DEPR_DECLS`, and `_Py_COMP_DIAG_POP`.
  * [bpo-26680](https://bugs.python.org/issue?@action=redirect&bpo=26680): The int type now supports the x.is_integer() method for compatibility with float.


### Library[¶](https://docs.python.org/3/whatsnew/changelog.html#id359 "Link to this heading")
  * [bpo-41900](https://bugs.python.org/issue?@action=redirect&bpo=41900): C14N 2.0 serialisation in xml.etree.ElementTree failed for unprefixed attributes when a default namespace was defined.
  * [bpo-41887](https://bugs.python.org/issue?@action=redirect&bpo=41887): Strip leading spaces and tabs on [`ast.literal_eval()`](https://docs.python.org/3/library/ast.html#ast.literal_eval "ast.literal_eval"). Also document stripping of spaces and tabs for [`eval()`](https://docs.python.org/3/library/functions.html#eval "eval").
  * [bpo-41773](https://bugs.python.org/issue?@action=redirect&bpo=41773): Note in documentation that [`random.choices()`](https://docs.python.org/3/library/random.html#random.choices "random.choices") doesn’t support non-finite weights, raise [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") when given non-finite weights.
  * [bpo-41840](https://bugs.python.org/issue?@action=redirect&bpo=41840): Fix a bug in the [`symtable`](https://docs.python.org/3/library/symtable.html#module-symtable "symtable: Interface to the compiler's internal symbol tables.") module that was causing module-scope global variables to not be reported as both local and global. Patch by Pablo Galindo.
  * [bpo-41842](https://bugs.python.org/issue?@action=redirect&bpo=41842): Add [`codecs.unregister()`](https://docs.python.org/3/library/codecs.html#codecs.unregister "codecs.unregister") function to unregister a codec search function.
  * [bpo-40564](https://bugs.python.org/issue?@action=redirect&bpo=40564): In `zipfile.Path`, mutate the passed ZipFile object type instead of making a copy. Prevents issues when both the local copy and the caller’s copy attempt to close the same file handle.
  * [bpo-40670](https://bugs.python.org/issue?@action=redirect&bpo=40670): More reliable validation of statements in [`timeit.Timer`](https://docs.python.org/3/library/timeit.html#timeit.Timer "timeit.Timer"). It now accepts “empty” statements (only whitespaces and comments) and rejects misindentent statements.
  * [bpo-41833](https://bugs.python.org/issue?@action=redirect&bpo=41833): The [`threading.Thread`](https://docs.python.org/3/library/threading.html#threading.Thread "threading.Thread") constructor now uses the target name if the _target_ argument is specified but the _name_ argument is omitted.
  * [bpo-41817](https://bugs.python.org/issue?@action=redirect&bpo=41817): fix `tkinter.EventType` Enum so all members are strings, and none are tuples
  * [bpo-41810](https://bugs.python.org/issue?@action=redirect&bpo=41810): [`types.EllipsisType`](https://docs.python.org/3/library/types.html#types.EllipsisType "types.EllipsisType"), [`types.NotImplementedType`](https://docs.python.org/3/library/types.html#types.NotImplementedType "types.NotImplementedType") and [`types.NoneType`](https://docs.python.org/3/library/types.html#types.NoneType "types.NoneType") have been reintroduced, providing a new set of types readily interpretable by static type checkers.
  * [bpo-41815](https://bugs.python.org/issue?@action=redirect&bpo=41815): Fix SQLite3 segfault when backing up closed database. Patch contributed by Peter David McCormick.
  * [bpo-41816](https://bugs.python.org/issue?@action=redirect&bpo=41816): StrEnum added: it ensures that all members are already strings or string candidates
  * [bpo-41517](https://bugs.python.org/issue?@action=redirect&bpo=41517): fix bug allowing Enums to be extended via multiple inheritance
  * [bpo-39587](https://bugs.python.org/issue?@action=redirect&bpo=39587): use the correct mix-in data type when constructing Enums
  * [bpo-41792](https://bugs.python.org/issue?@action=redirect&bpo=41792): Add is_typeddict function to typing.py to check if a type is a TypedDict class
Previously there was no way to check that without using private API. See the [relevant issue in python/typing](https://github.com/python/typing/issues/751).
  * [bpo-41789](https://bugs.python.org/issue?@action=redirect&bpo=41789): Honor `object` overrides in `Enum` class creation (specifically, `__str__`, `__repr__`, `__forma