Title: get_payload Method in email.compat32.message
URL: https://docs.python.org/3/library/email.compat32-message.html
Summary: The `get_payload()` method returns the current payload of a message, which is either a list of `Message` objects if the message is multipart, or a string if it is not. If the payload is a list, modifying it will change the message’s payload in place. The method also accepts an optional argument for further customization.
---

get_payload(_i =None_, _decode =False_)[¶](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.get_payload "Link to this definition")
    
Return the current payload, which will be a list of [`Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "email.message.Message") objects when [`is_multipart()`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.is_multipart "email.message.Message.is_multipart") is `True`, or a string when [`is_multipart()`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.is_multipart "email.message.Message.is_multipart") is `False`. If the payload is a list and you mutate the list object, you modify the message’s payload in place.
With optional argument _i_ , [`get_payload()`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.get_payload "email.message.Message.get_payload") will return the _i_ -th element of the payload, counting from zero, if [`is_multipart()`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.is_multipart "email.message.Message.is_multipart") is `True`. An [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError "IndexError") will be raised if _i_ is less than 0 or greater than or equal to the number of items in the payload. If the payload is a string (i.e. [`is_multipart()`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.is_multipart "email.message.Message.is_multipart") is `False`) and _i_ is given, a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") is raised.
Optional _decode_ is a flag indicating whether the payload should be decoded or not, according to the _Content-Transfer-Encoding_ header. When `True` and the message is not a multipart, the payload will be decoded if this header’s value is `quoted-printable` or `base64`. If some other encoding is used, or _Content-Transfer-Encoding_ header is missing, the payload is returned as-is (undecoded). In all cases the returned value is binary data. If the message is a multipart and the _decode_ flag is `True`, then `None` is returned. If the payload is base64 and it was not perfectly formed (missing padding, characters outside the base64 alphabet), then an appropriate defect will be added to the message’s defect property ([`InvalidBase64PaddingDefect`](https://docs.python.org/3/library/email.errors.html#email.errors.InvalidBase64PaddingDefect "email.errors.InvalidBase64PaddingDefect") or [`InvalidBase64CharactersDefect`](https://docs.python.org/3/library/email.errors.html#email.errors.InvalidBase64CharactersDefect "email.errors.InvalidBase64CharactersDefect"), respectively).
When _decode_ is `False` (the default) the body is returned as a string without decoding the _Content-Transfer-Encoding_. However, for a _Content-Transfer-Encoding_ of 8bit, an attempt is made to decode the original bytes using the `charset` specified by the _Content-Type_ header, using the `replace` error handler. If no `charset` is specified, or if the `charset` given is not recognized by the email package, the body is decoded using the default ASCII charset.
This is a legacy method. On the `EmailMessage` class its functionality is replaced by [`get_content()`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.get_content "email.message.EmailMessage.get_content") and [`iter_parts()`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.iter_parts "email.message.EmailMessage.iter_parts"). 

set_payload(_payload_ , _charset =None_)[¶](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.set_payload "Link to this definition")
    
Set the entire message object’s payload to _payload_. It is the client’s responsibility to ensure the payload invariants. Optional _charset_ sets the message’s default character set; see [`set_charset()`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.set_charset "email.message.Message.set_charset") for details.
This is a legacy method. On the `EmailMessage` class its functionality is replaced by [`set_content()`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.set_content "email.message.EmailMessage.set_content").