Title: with_traceback Method and __traceback__ Field
URL: https://docs.python.org/3/library/exceptions.html
Summary: The `with_traceback` method sets a new traceback for an exception and returns the exception object, commonly used before PEP 3134. It allows converting one exception type into another while preserving the original traceback. An example illustrates its usage, showing how to raise `OtherException` with the traceback of `SomeException`. Additionally, the `__traceback__` field is mentioned as a writable attribute that holds the traceback.
---

with_traceback(_tb_)[¶](https://docs.python.org/3/library/exceptions.html#BaseException.with_traceback "Link to this definition")
    
This method sets _tb_ as the new traceback for the exception and returns the exception object. It was more commonly used before the exception chaining features of [**PEP 3134**](https://peps.python.org/pep-3134/) became available. The following example shows how we can convert an instance of `SomeException` into an instance of `OtherException` while preserving the traceback. Once raised, the current frame is pushed onto the traceback of the `OtherException`, as would have happened to the traceback of the original `SomeException` had we allowed it to propagate to the caller.
```
try:
  ...
except SomeException:
  tb = sys.exception().__traceback__
  raise OtherException(...).with_traceback(tb)

```


__traceback__[¶](https://docs.python.org/3/library/exceptions.html#BaseException.__traceback__ "Link to this definition")
    
A writable field that holds the [traceback object](https://docs.python.org/3/reference/datamodel.html#traceback-objects) associated with this exception. See also: [The raise statement](https://docs.python.org/3/reference/simple_stmts.html#raise). 

add_note(_note_)[¶](https://docs.python.org/3/library/exceptions.html#BaseException.add_note "Link to this definition")
    
Add the string `note` to the exception’s notes which appear in the standard traceback after the exception string. A [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") is raised if `note` is not a string.
Added in version 3.11. 

__notes__[¶](https://docs.python.org/3/library/exceptions.html#BaseException.__notes__ "Link to this definition")
    
A list of the notes of this exception, which were added with [`add_note()`](https://docs.python.org/3/library/exceptions.html#BaseException.add_note "BaseException.add_note"). This attribute is created when [`add_note()`](https://docs.python.org/3/library/exceptions.html#BaseException.add_note "BaseException.add_note") is called.
Added in version 3.11. 

_exception_ Exception[¶](https://docs.python.org/3/library/exceptions.html#Exception "Link to this definition")
    
All built-in, non-system-exiting exceptions are derived from this class. All user-defined exceptions should also be derived from this class. 

_exception_ ArithmeticError[¶](https://docs.python.org/3/library/exceptions.html#ArithmeticError "Link to this definition")
    
The base class for those built-in exceptions that are raised for various arithmetic errors: [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError"), [`ZeroDivisionError`](https://docs.python.org/3/library/exceptions.html#ZeroDivisionError "ZeroDivisionError"), [`FloatingPointError`](https://docs.python.org/3/library/exceptions.html#FloatingPointError "FloatingPointError"). 

_exception_ BufferError[¶](https://docs.python.org/3/library/exceptions.html#BufferError "Link to this definition")
    
Raised when a [buffer](https://docs.python.org/3/c-api/buffer.html#bufferobjects) related operation cannot be performed. 

_exception_ LookupError[¶](https://docs.python.org/3/library/exceptions.html#LookupError "Link to this definition")
    
The base class for the exceptions that are raised when a key or index used on a mapping or sequence is invalid: [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError "IndexError"), [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError"). This can be raised directly by [`codecs.lookup()`](https://docs.python.org/3/library/codecs.html#codecs.lookup "codecs.lookup").
## Concrete exceptions[¶](https://docs.python.org/3/library/exceptions.html#concrete-exceptions "Link to this heading")
The following exceptions are the exceptions that are usually raised. 

_exception_ AssertionError[¶](https://docs.python.org/3/library/exceptions.html#AssertionError "Link to this definition")
    
Raised when an [`assert`](https://docs.python.org/3/reference/simple_stmts.html#assert) statement fails. 

_exception_ AttributeError[¶](https://docs.python.org/3/library/exceptions.html#AttributeError "Link to this definition")
    
Raised when an attribute reference (see [Attribute references](https://docs.python.org/3/reference/expressions.html#attribute-references)) or assignment fails. (When an object does not support attribute references or attribute assignments at all, [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") is raised.)
The `name` and `obj` attributes can be set using keyword-only arguments to the constructor. When set they represent the name of the attribute that was attempted to be accessed and the object that was accessed for said attribute, respectively.
Changed in version 3.10: Added the `name` and `obj` attributes.