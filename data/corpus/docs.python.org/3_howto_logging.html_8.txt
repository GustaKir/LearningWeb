Title: Using the getLogger() Function in Python Logging
URL: https://docs.python.org/3/howto/logging.html
Summary: The `getLogger()` function creates or retrieves a logger instance based on a specified name. Logger names form a hierarchical structure, allowing for parent-child relationships among loggers. If a logger's level isn't set, it inherits the level from its parent logger, continuing up the hierarchy until a level is found.
---

[`getLogger()`](https://docs.python.org/3/library/logging.html#logging.getLogger "logging.getLogger") returns a reference to a logger instance with the specified name if it is provided, or `root` if not. The names are period-separated hierarchical structures. Multiple calls to [`getLogger()`](https://docs.python.org/3/library/logging.html#logging.getLogger "logging.getLogger") with the same name will return a reference to the same logger object. Loggers that are further down in the hierarchical list are children of loggers higher up in the list. For example, given a logger with a name of `foo`, loggers with names of `foo.bar`, `foo.bar.baz`, and `foo.bam` are all descendants of `foo`.
Loggers have a concept of _effective level_. If a level is not explicitly set on a logger, the level of its parent is used instead as its effective level. If the parent has no explicit level set, _its_ parent is examined, and so on - all ancestors are searched until an explicitly set level is found. The root logger always has an explicit level set (`WARNING` by default). When deciding whether to process an event, the effective level of the logger is used to determine whether the event is passed to the logger’s handlers.
Child loggers propagate messages up to the handlers associated with their ancestor loggers. Because of this, it is unnecessary to define and configure handlers for all the loggers an application uses. It is sufficient to configure handlers for a top-level logger and create child loggers as needed. (You can, however, turn off propagation by setting the _propagate_ attribute of a logger to `False`.)
### Handlers[¶](https://docs.python.org/3/howto/logging.html#handlers "Link to this heading")
[`Handler`](https://docs.python.org/3/library/logging.html#logging.Handler "logging.Handler") objects are responsible for dispatching the appropriate log messages (based on the log messages’ severity) to the handler’s specified destination. [`Logger`](https://docs.python.org/3/library/logging.html#logging.Logger "logging.Logger") objects can add zero or more handler objects to themselves with an [`addHandler()`](https://docs.python.org/3/library/logging.html#logging.Logger.addHandler "logging.Logger.addHandler") method. As an example scenario, an application may want to send all log messages to a log file, all log messages of error or higher to stdout, and all messages of critical to an email address. This scenario requires three individual handlers where each handler is responsible for sending messages of a specific severity to a specific location.
The standard library includes quite a few handler types (see [Useful Handlers](https://docs.python.org/3/howto/logging.html#useful-handlers)); the tutorials use mainly [`StreamHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.StreamHandler "logging.StreamHandler") and [`FileHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.FileHandler "logging.FileHandler") in its examples.
There are very few methods in a handler for application developers to concern themselves with. The only handler methods that seem relevant for application developers who are using the built-in handler objects (that is, not creating custom handlers) are the following configuration methods:
  * The [`setLevel()`](https://docs.python.org/3/library/logging.html#logging.Handler.setLevel "logging.Handler.setLevel") method, just as in logger objects, specifies the lowest severity that will be dispatched to the appropriate destination. Why are there two [`setLevel()`](https://docs.python.org/3/library/logging.html#logging.Handler.setLevel "logging.Handler.setLevel") methods? The level set in the logger determines which severity of messages it will pass to its handlers. The level set in each handler determines which messages that handler will send on.
  * [`setFormatter()`](https://docs.python.org/3/library/logging.html#logging.Handler.setFormatter "logging.Handler.setFormatter") selects a Formatter object for this handler to use.
  * [`addFilter()`](https://docs.python.org/3/library/logging.html#logging.Handler.addFilter "logging.Handler.addFilter") and [`removeFilter()`](https://docs.python.org/3/library/logging.html#logging.Handler.removeFilter "logging.Handler.removeFilter") respectively configure and deconfigure filter objects on handlers.