Title: Locale Formatting Functions in Python
URL: https://docs.python.org/3/library/locale.html
Summary: This section describes two functions in the locale module: `locale.format_string`, which formats numbers based on the current `LC_NUMERIC` settings, and `locale.currency`, which formats numbers as currency. The formatting takes locale settings into account, with options for grouping and monetary symbols. It notes that the `_monetary` parameter was introduced in version 3.7.
---

locale.format_string(_format_ , _val_ , _grouping =False_, _monetary =False_)[¶](https://docs.python.org/3/library/locale.html#locale.format_string "Link to this definition")
    
Formats a number _val_ according to the current [`LC_NUMERIC`](https://docs.python.org/3/library/locale.html#locale.LC_NUMERIC "locale.LC_NUMERIC") setting. The format follows the conventions of the `%` operator. For floating-point values, the decimal point is modified if appropriate. If _grouping_ is `True`, also takes the grouping into account.
If _monetary_ is true, the conversion uses monetary thousands separator and grouping strings.
Processes formatting specifiers as in `format % val`, but takes the current locale settings into account.
Changed in version 3.7: The _monetary_ keyword parameter was added. 

locale.currency(_val_ , _symbol =True_, _grouping =False_, _international =False_)[¶](https://docs.python.org/3/library/locale.html#locale.currency "Link to this definition")
    
Formats a number _val_ according to the current [`LC_MONETARY`](https://docs.python.org/3/library/locale.html#locale.LC_MONETARY "locale.LC_MONETARY") settings.
The returned string includes the currency symbol if _symbol_ is true, which is the default. If _grouping_ is `True` (which is not the default), grouping is done with the value. If _international_ is `True` (which is not the default), the international currency symbol is used.
Note
This function will not work with the ‘C’ locale, so you have to set a locale via [`setlocale()`](https://docs.python.org/3/library/locale.html#locale.setlocale "locale.setlocale") first. 

locale.str(_float_)[¶](https://docs.python.org/3/library/locale.html#locale.str "Link to this definition")
    
Formats a floating-point number using the same format as the built-in function `str(float)`, but takes the decimal point into account. 

locale.delocalize(_string_)[¶](https://docs.python.org/3/library/locale.html#locale.delocalize "Link to this definition")
    
Converts a string into a normalized number string, following the [`LC_NUMERIC`](https://docs.python.org/3/library/locale.html#locale.LC_NUMERIC "locale.LC_NUMERIC") settings.
Added in version 3.5. 

locale.localize(_string_ , _grouping =False_, _monetary =False_)[¶](https://docs.python.org/3/library/locale.html#locale.localize "Link to this definition")
    
Converts a normalized number string into a formatted string following the [`LC_NUMERIC`](https://docs.python.org/3/library/locale.html#locale.LC_NUMERIC "locale.LC_NUMERIC") settings.
Added in version 3.10. 

locale.atof(_string_ , _func =float_)[¶](https://docs.python.org/3/library/locale.html#locale.atof "Link to this definition")
    
Converts a string to a number, following the [`LC_NUMERIC`](https://docs.python.org/3/library/locale.html#locale.LC_NUMERIC "locale.LC_NUMERIC") settings, by calling _func_ on the result of calling [`delocalize()`](https://docs.python.org/3/library/locale.html#locale.delocalize "locale.delocalize") on _string_. 

locale.atoi(_string_)[¶](https://docs.python.org/3/library/locale.html#locale.atoi "Link to this definition")
    
Converts a string to an integer, following the [`LC_NUMERIC`](https://docs.python.org/3/library/locale.html#locale.LC_NUMERIC "locale.LC_NUMERIC") conventions. 

locale.LC_CTYPE[¶](https://docs.python.org/3/library/locale.html#locale.LC_CTYPE "Link to this definition")
    
Locale category for the character type functions. Most importantly, this category defines the text encoding, i.e. how bytes are interpreted as Unicode codepoints. See [**PEP 538**](https://peps.python.org/pep-0538/) and [**PEP 540**](https://peps.python.org/pep-0540/) for how this variable might be automatically coerced to `C.UTF-8` to avoid issues created by invalid settings in containers or incompatible settings passed over remote SSH connections.
Python doesn’t internally use locale-dependent character transformation functions from `ctype.h`. Instead, an internal `pyctype.h` provides locale-independent equivalents like `Py_TOLOWER`. 

locale.LC_COLLATE[¶](https://docs.python.org/3/library/locale.html#locale.LC_COLLATE "Link to this definition")
    
Locale category for sorting strings. The functions [`strcoll()`](https://docs.python.org/3/library/locale.html#locale.strcoll "locale.strcoll") and [`strxfrm()`](https://docs.python.org/3/library/locale.html#locale.strxfrm "locale.strxfrm") of the [`locale`](https://docs.python.org/3/library/locale.html#module-locale "locale: Internationalization services.") module are affected. 

locale.LC_TIME[¶](https://docs.python.org/3/library/locale.html#locale.LC_TIME "Link to this definition")
    
Locale category for the formatting of time. The function [`time.strftime()`](https://docs.python.org/3/library/time.html#time.strftime "time.strftime") follows these conventions.