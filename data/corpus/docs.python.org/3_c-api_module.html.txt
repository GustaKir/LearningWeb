Title: Python C API: Module Objects
URL: https://docs.python.org/3/c-api/module.html
Summary: This section of the Python documentation focuses on the C API for module objects, detailing the initialization of C modules, including single-phase and multi-phase initialization, as well as low-level creation functions and support functions.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [Module Objects](https://docs.python.org/3/c-api/module.html)
    * [Initializing C modules](https://docs.python.org/3/c-api/module.html#initializing-c-modules)
      * [Single-phase initialization](https://docs.python.org/3/c-api/module.html#single-phase-initialization)
      * [Multi-phase initialization](https://docs.python.org/3/c-api/module.html#multi-phase-initialization)
      * [Low-level module creation functions](https://docs.python.org/3/c-api/module.html#low-level-module-creation-functions)
      * [Support functions](https://docs.python.org/3/c-api/module.html#support-functions)
    * [Module lookup](https://docs.python.org/3/c-api/module.html#module-lookup)


#### Previous topic
[File Objects](https://docs.python.org/3/c-api/file.html "previous chapter")
#### Next topic
[Iterator Objects](https://docs.python.org/3/c-api/iterator.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/c-api/module.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/c-api/iterator.html "Iterator Objects") |
  * [previous](https://docs.python.org/3/c-api/file.html "File Objects") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [Python/C API Reference Manual](https://docs.python.org/3/c-api/index.html) »
  * [Concrete Objects Layer](https://docs.python.org/3/c-api/concrete.html) »
  * [Module Objects](https://docs.python.org/3/c-api/module.html)
  * | 
  * Theme  Auto Light Dark |


# Module Objects[¶](https://docs.python.org/3/c-api/module.html#module-objects "Link to this heading") 

[PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject")PyModule_Type[¶](https://docs.python.org/3/c-api/module.html#c.PyModule_Type "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
This instance of [`PyTypeObject`](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject") represents the Python module type. This is exposed to Python programs as `types.ModuleType`. 

intPyModule_Check([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*p)[¶](https://docs.python.org/3/c-api/module.html#c.PyModule_Check "Link to this definition")
    
Return true if _p_ is a module object, or a subtype of a module object. This function always succeeds. 

intPyModule_CheckExact([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*p)[¶](https://docs.python.org/3/c-api/module.html#c.PyModule_CheckExact "Link to this definition")
    
Return true if _p_ is a module object, but not a subtype of [`PyModule_Type`](https://docs.python.org/3/c-api/module.html#c.PyModule_Type "PyModule_Type"). This function always succeeds.