Title: Raising Exceptions in Python
URL: https://docs.python.org/3/tutorial/errors.html
Summary: This section explains how to use the `raise` statement in Python to trigger exceptions. It describes the argument requirements for `raise`, which can be either an exception instance or a class derived from `BaseException`. It also outlines how to re-raise an exception for further handling.
---

```

The sole argument to [`raise`](https://docs.python.org/3/reference/simple_stmts.html#raise) indicates the exception to be raised. This must be either an exception instance or an exception class (a class that derives from [`BaseException`](https://docs.python.org/3/library/exceptions.html#BaseException "BaseException"), such as [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception "Exception") or one of its subclasses). If an exception class is passed, it will be implicitly instantiated by calling its constructor with no arguments:
```
raise ValueError # shorthand for 'raise ValueError()'

```

If you need to determine whether an exception was raised but don’t intend to handle it, a simpler form of the [`raise`](https://docs.python.org/3/reference/simple_stmts.html#raise) statement allows you to re-raise the exception:
>>>```
>>> try:
...   raise NameError('HiThere')
... except NameError:
...   print('An exception flew by!')
...   raise
...
An exception flew by!
Traceback (most recent call last):
 File "<stdin>", line 2, in <module>
raise NameError('HiThere')
NameError: HiThere

```

## 8.5. Exception Chaining[¶](https://docs.python.org/3/tutorial/errors.html#exception-chaining "Link to this heading")
If an unhandled exception occurs inside an [`except`](https://docs.python.org/3/reference/compound_stmts.html#except) section, it will have the exception being handled attached to it and included in the error message:
>>>```
>>> try:
...   open("database.sqlite")
... except OSError:
...   raise RuntimeError("unable to handle error")
...
Traceback (most recent call last):
 File "<stdin>", line 2, in <module>
open("database.sqlite")
~~~~^^^^^^^^^^^^^^^^^^^
FileNotFoundError: [Errno 2] No such file or directory: 'database.sqlite'
During handling of the above exception, another exception occurred:
Traceback (most recent call last):
 File "<stdin>", line 4, in <module>
raise RuntimeError("unable to handle error")
RuntimeError: unable to handle error

```

To indicate that an exception is a direct consequence of another, the [`raise`](https://docs.python.org/3/reference/simple_stmts.html#raise) statement allows an optional [`from`](https://docs.python.org/3/reference/simple_stmts.html#raise) clause:
```
# exc must be exception instance or None.
raise RuntimeError fromexc

```

This can be useful when you are transforming exceptions. For example:
>>>```
>>> deffunc():
...   raise ConnectionError
...
>>> try:
...   func()
... except ConnectionError as exc:
...   raise RuntimeError('Failed to open database') fromexc
...
Traceback (most recent call last):
 File "<stdin>", line 2, in <module>
func()
~~~~^^
 File "<stdin>", line 2, in func
ConnectionError
The above exception was the direct cause of the following exception:
Traceback (most recent call last):
 File "<stdin>", line 4, in <module>
raise RuntimeError('Failed to open database') fromexc
RuntimeError: Failed to open database

```

It also allows disabling automatic exception chaining using the `from None` idiom:
>>>```
>>> try:
...   open('database.sqlite')
... except OSError:
...   raise RuntimeError fromNone
...
Traceback (most recent call last):
 File "<stdin>", line 4, in <module>
raise RuntimeError fromNone
RuntimeError

```

For more information about chaining mechanics, see [Built-in Exceptions](https://docs.python.org/3/library/exceptions.html#bltin-exceptions).
## 8.6. User-defined Exceptions[¶](https://docs.python.org/3/tutorial/errors.html#user-defined-exceptions "Link to this heading")
Programs may name their own exceptions by creating a new exception class (see [Classes](https://docs.python.org/3/tutorial/classes.html#tut-classes) for more about Python classes). Exceptions should typically be derived from the [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception "Exception") class, either directly or indirectly.
Exception classes can be defined which do anything any other class can do, but are usually kept simple, often only offering a number of attributes that allow information about the error to be extracted by handlers for the exception.
Most exceptions are defined with names that end in “Error”, similar to the naming of the standard exceptions.
Many standard modules define their own exceptions to report errors that may occur in functions they define.
## 8.7. Defining Clean-up Actions[¶](https://docs.python.org/3/tutorial/errors.html#defining-clean-up-actions "Link to this heading")
The [`try`](https://docs.python.org/3/reference/compound_stmts.html#try) statement has another optional clause which is intended to define clean-up actions that must be executed under all circumstances. For example:
>>>```
>>> try:
...   raise KeyboardInterrupt
... finally:
...   print('Goodbye, world!')
...
Goodbye, world!
Traceback (most recent call last):
 File "<stdin>", line 2, in <module>
raise KeyboardInterrupt
KeyboardInterrupt