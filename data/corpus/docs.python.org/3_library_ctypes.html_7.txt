Title: Structures and Unions in ctypes
URL: https://docs.python.org/3/library/ctypes.html
Summary: Structures and unions in the ctypes module are derived from the Structure and Union base classes. Each subclass must define a _fields_ attribute, which is a list of 2-tuples containing field names and their corresponding ctypes types.
---

```

### Structures and unions[Â¶](https://docs.python.org/3/library/ctypes.html#structures-and-unions "Link to this heading")
Structures and unions must derive from the [`Structure`](https://docs.python.org/3/library/ctypes.html#ctypes.Structure "ctypes.Structure") and [`Union`](https://docs.python.org/3/library/ctypes.html#ctypes.Union "ctypes.Union") base classes which are defined in the [`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "ctypes: A foreign function library for Python.") module. Each subclass must define a [`_fields_`](https://docs.python.org/3/library/ctypes.html#ctypes.Structure._fields_ "ctypes.Structure._fields_") attribute. `_fields_` must be a list of _2-tuples_ , containing a _field name_ and a _field type_.
The field type must be a [`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "ctypes: A foreign function library for Python.") type like [`c_int`](https://docs.python.org/3/library/ctypes.html#ctypes.c_int "ctypes.c_int"), or any other derived [`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "ctypes: A foreign function library for Python.") type: structure, union, array, pointer.
Here is a simple example of a POINT structure, which contains two integers named _x_ and _y_ , and also shows how to initialize a structure in the constructor:
>>>```
>>> fromctypesimport *
>>> classPOINT(Structure):
...   _fields_ = [("x", c_int),
...         ("y", c_int)]
...
>>> point = POINT(10, 20)
>>> print(point.x, point.y)
10 20
>>> point = POINT(y=5)
>>> print(point.x, point.y)
0 5
>>> POINT(1, 2, 3)
Traceback (most recent call last):
 File "<stdin>", line 1, in <module>
TypeError: too many initializers
>>>

```

You can, however, build much more complicated structures. A structure can itself contain other structures by using a structure as a field type.
Here is a RECT structure which contains two POINTs named _upperleft_ and _lowerright_ :
>>>```
>>> classRECT(Structure):
...   _fields_ = [("upperleft", POINT),
...         ("lowerright", POINT)]
...
>>> rc = RECT(point)
>>> print(rc.upperleft.x, rc.upperleft.y)
0 5
>>> print(rc.lowerright.x, rc.lowerright.y)
0 0
>>>

```

Nested structures can also be initialized in the constructor in several ways:
>>>```
>>> r = RECT(POINT(1, 2), POINT(3, 4))
>>> r = RECT((1, 2), (3, 4))

```

Field [descriptor](https://docs.python.org/3/glossary.html#term-descriptor)s can be retrieved from the _class_ , they are useful for debugging because they can provide useful information:
>>>```
>>> print(POINT.x)
<Field type=c_long, ofs=0, size=4>
>>> print(POINT.y)
<Field type=c_long, ofs=4, size=4>
>>>