Title: Regular Expression Substitution in Python
URL: https://docs.python.org/3/library/re.html
Summary: This section explains the usage of the `sub()` method in Python's `re` library, which replaces occurrences of patterns in strings. An optional `_count` argument controls the maximum replacements, and details on using backreferences and named groups with `
` and `ackreference` syntax are provided. Special considerations for empty matches and non-adjacency are also noted.
---

```

The pattern may be a string or a [`Pattern`](https://docs.python.org/3/library/re.html#re.Pattern "re.Pattern").
The optional argument _count_ is the maximum number of pattern occurrences to be replaced; _count_ must be a non-negative integer. If omitted or zero, all occurrences will be replaced. Empty matches for the pattern are replaced only when not adjacent to a previous empty match, so `sub('x*', '-', 'abxd')` returns `'-a-b--d-'`.
In string-type _repl_ arguments, in addition to the character escapes and backreferences described above, `\g<name>` will use the substring matched by the group named `name`, as defined by the `(?P<name>...)` syntax. `\g<number>` uses the corresponding group number; `\g<2>` is therefore equivalent to `\2`, but isn’t ambiguous in a replacement such as `\g<2>0`. `\20` would be interpreted as a reference to group 20, not a reference to group 2 followed by the literal character `'0'`. The backreference `\g<0>` substitutes in the entire substring matched by the RE.
The expression’s behaviour can be modified by specifying a _flags_ value. Values can be any of the [flags](https://docs.python.org/3/library/re.html#flags) variables, combined using bitwise OR (the `|` operator).
Changed in version 3.1: Added the optional flags argument.
Changed in version 3.5: Unmatched groups are replaced with an empty string.
Changed in version 3.6: Unknown escapes in _pattern_ consisting of `'\'` and an ASCII letter now are errors.
Changed in version 3.7: Unknown escapes in _repl_ consisting of `'\'` and an ASCII letter now are errors. Empty matches for the pattern are replaced when adjacent to a previous non-empty match.
Changed in version 3.12: Group _id_ can only contain ASCII digits. In [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") replacement strings, group _name_ can only contain bytes in the ASCII range (`b'\x00'`-`b'\x7f'`).
Deprecated since version 3.13: Passing _count_ and _flags_ as positional arguments is deprecated. In future Python versions they will be [keyword-only parameters](https://docs.python.org/3/glossary.html#keyword-only-parameter). 

re.subn(_pattern_ , _repl_ , _string_ , _count =0_, _flags =0_)[¶](https://docs.python.org/3/library/re.html#re.subn "Link to this definition")
    
Perform the same operation as [`sub()`](https://docs.python.org/3/library/re.html#re.sub "re.sub"), but return a tuple `(new_string, number_of_subs_made)`.
The expression’s behaviour can be modified by specifying a _flags_ value. Values can be any of the [flags](https://docs.python.org/3/library/re.html#flags) variables, combined using bitwise OR (the `|` operator). 

re.escape(_pattern_)[¶](https://docs.python.org/3/library/re.html#re.escape "Link to this definition")
    
Escape special characters in _pattern_. This is useful if you want to match an arbitrary literal string that may have regular expression metacharacters in it. For example:
>>>```
>>> print(re.escape('https://www.python.org'))
https://www\.python\.org
>>> legal_chars = string.ascii_lowercase + string.digits + "!#$%&'*+-.^_`|~:"
>>> print('[%s]+' % re.escape(legal_chars))
[abcdefghijklmnopqrstuvwxyz0123456789!\#\$%\&'\*\+\-\.\^_`\|\~:]+
>>> operators = ['+', '-', '*', '/', '**']
>>> print('|'.join(map(re.escape, sorted(operators, reverse=True))))
/|\-|\+|\*\*|\*

```

This function must not be used for the replacement string in [`sub()`](https://docs.python.org/3/library/re.html#re.sub "re.sub") and [`subn()`](https://docs.python.org/3/library/re.html#re.subn "re.subn"), only backslashes should be escaped. For example:
>>>```
>>> digits_re = r'\d+'
>>> sample = '/usr/sbin/sendmail - 0 errors, 12 warnings'
>>> print(re.sub(digits_re, digits_re.replace('\\', r'\\'), sample))
/usr/sbin/sendmail - \d+ errors, \d+ warnings