Title: Logging Exception and Log Methods
URL: https://docs.python.org/3/library/logging.html
Summary: This section covers the `logging.exception()` method, which logs an ERROR level message along with exception information, intended for use in exception handlers. It also describes the `logging.log()` method for logging messages at a specified level and mentions the `logging.disable()` function to control logging behavior.
---

logging.exception(_msg_ , _* args_, _** kwargs_)[¶](https://docs.python.org/3/library/logging.html#logging.exception "Link to this definition")
    
Logs a message with level [`ERROR`](https://docs.python.org/3/library/logging.html#logging.ERROR "logging.ERROR") on the root logger. The arguments and behavior are otherwise the same as for [`debug()`](https://docs.python.org/3/library/logging.html#logging.debug "logging.debug"). Exception info is added to the logging message. This function should only be called from an exception handler. 

logging.log(_level_ , _msg_ , _* args_, _** kwargs_)[¶](https://docs.python.org/3/library/logging.html#logging.log "Link to this definition")
    
Logs a message with level _level_ on the root logger. The arguments and behavior are otherwise the same as for [`debug()`](https://docs.python.org/3/library/logging.html#logging.debug "logging.debug"). 

logging.disable(_level =CRITICAL_)[¶](https://docs.python.org/3/library/logging.html#logging.disable "Link to this definition")
    
Provides an overriding level _level_ for all loggers which takes precedence over the logger’s own level. When the need arises to temporarily throttle logging output down across the whole application, this function can be useful. Its effect is to disable all logging calls of severity _level_ and below, so that if you call it with a value of INFO, then all INFO and DEBUG events would be discarded, whereas those of severity WARNING and above would be processed according to the logger’s effective level. If `logging.disable(logging.NOTSET)` is called, it effectively removes this overriding level, so that logging output again depends on the effective levels of individual loggers.
Note that if you have defined any custom logging level higher than `CRITICAL` (this is not recommended), you won’t be able to rely on the default value for the _level_ parameter, but will have to explicitly supply a suitable value.
Changed in version 3.7: The _level_ parameter was defaulted to level `CRITICAL`. See [bpo-28524](https://bugs.python.org/issue?@action=redirect&bpo=28524) for more information about this change. 

logging.addLevelName(_level_ , _levelName_)[¶](https://docs.python.org/3/library/logging.html#logging.addLevelName "Link to this definition")
    
Associates level _level_ with text _levelName_ in an internal dictionary, which is used to map numeric levels to a textual representation, for example when a [`Formatter`](https://docs.python.org/3/library/logging.html#logging.Formatter "logging.Formatter") formats a message. This function can also be used to define your own levels. The only constraints are that all levels used must be registered using this function, levels should be positive integers and they should increase in increasing order of severity.
Note
If you are thinking of defining your own levels, please see the section on [Custom Levels](https://docs.python.org/3/howto/logging.html#custom-levels). 

logging.getLevelNamesMapping()[¶](https://docs.python.org/3/library/logging.html#logging.getLevelNamesMapping "Link to this definition")
    
Returns a mapping from level names to their corresponding logging levels. For example, the string “CRITICAL” maps to [`CRITICAL`](https://docs.python.org/3/library/logging.html#logging.CRITICAL "logging.CRITICAL"). The returned mapping is copied from an internal mapping on each call to this function.
Added in version 3.11.