Title: Abstract Base Classes (ABCs) in collections.abc
URL: https://docs.python.org/3/library/collections.abc.html
Summary: This document outlines the abstract base classes (ABCs) available in the collections.abc module, including ItemsView, KeysView, and ValuesView for mapping views, as well as the Awaitable ABC for awaitable objects.
---

_class_ collections.abc.ItemsView[¶](https://docs.python.org/3/library/collections.abc.html#collections.abc.ItemsView "Link to this definition")


_class_ collections.abc.KeysView[¶](https://docs.python.org/3/library/collections.abc.html#collections.abc.KeysView "Link to this definition")


_class_ collections.abc.ValuesView[¶](https://docs.python.org/3/library/collections.abc.html#collections.abc.ValuesView "Link to this definition")
    
ABCs for mapping, items, keys, and values [views](https://docs.python.org/3/glossary.html#term-dictionary-view). 

_class_ collections.abc.Awaitable[¶](https://docs.python.org/3/library/collections.abc.html#collections.abc.Awaitable "Link to this definition")
    
ABC for [awaitable](https://docs.python.org/3/glossary.html#term-awaitable) objects, which can be used in [`await`](https://docs.python.org/3/reference/expressions.html#await) expressions. Custom implementations must provide the [`__await__()`](https://docs.python.org/3/reference/datamodel.html#object.__await__ "object.__await__") method.
[Coroutine](https://docs.python.org/3/glossary.html#term-coroutine) objects and instances of the [`Coroutine`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Coroutine "collections.abc.Coroutine") ABC are all instances of this ABC.
Note
In CPython, generator-based coroutines ([generators](https://docs.python.org/3/glossary.html#term-generator) decorated with [`@types.coroutine`](https://docs.python.org/3/library/types.html#types.coroutine "types.coroutine")) are _awaitables_ , even though they do not have an [`__await__()`](https://docs.python.org/3/reference/datamodel.html#object.__await__ "object.__await__") method. Using `isinstance(gencoro, Awaitable)` for them will return `False`. Use [`inspect.isawaitable()`](https://docs.python.org/3/library/inspect.html#inspect.isawaitable "inspect.isawaitable") to detect them.
Added in version 3.5. 

_class_ collections.abc.Coroutine[¶](https://docs.python.org/3/library/collections.abc.html#collections.abc.Coroutine "Link to this definition")
    
ABC for [coroutine](https://docs.python.org/3/glossary.html#term-coroutine) compatible classes. These implement the following methods, defined in [Coroutine Objects](https://docs.python.org/3/reference/datamodel.html#coroutine-objects): [`send()`](https://docs.python.org/3/reference/datamodel.html#coroutine.send "coroutine.send"), [`throw()`](https://docs.python.org/3/reference/datamodel.html#coroutine.throw "coroutine.throw"), and [`close()`](https://docs.python.org/3/reference/datamodel.html#coroutine.close "coroutine.close"). Custom implementations must also implement [`__await__()`](https://docs.python.org/3/reference/datamodel.html#object.__await__ "object.__await__"). All [`Coroutine`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Coroutine "collections.abc.Coroutine") instances are also instances of [`Awaitable`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Awaitable "collections.abc.Awaitable").
Note
In CPython, generator-based coroutines ([generators](https://docs.python.org/3/glossary.html#term-generator) decorated with [`@types.coroutine`](https://docs.python.org/3/library/types.html#types.coroutine "types.coroutine")) are _awaitables_ , even though they do not have an [`__await__()`](https://docs.python.org/3/reference/datamodel.html#object.__await__ "object.__await__") method. Using `isinstance(gencoro, Coroutine)` for them will return `False`. Use [`inspect.isawaitable()`](https://docs.python.org/3/library/inspect.html#inspect.isawaitable "inspect.isawaitable") to detect them.
See [Annotating generators and coroutines](https://docs.python.org/3/library/typing.html#annotating-generators-and-coroutines) for details on using `Coroutine` in type annotations. The variance and order of type parameters correspond to those of [`Generator`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Generator "collections.abc.Generator").
Added in version 3.5. 

_class_ collections.abc.AsyncIterable[¶](https://docs.python.org/3/library/collections.abc.html#collections.abc.AsyncIterable "Link to this definition")
    
ABC for classes that provide an `__aiter__` method. See also the definition of [asynchronous iterable](https://docs.python.org/3/glossary.html#term-asynchronous-iterable).
Added in version 3.5. 

_class_ collections.abc.AsyncIterator[¶](https://docs.python.org/3/library/collections.abc.html#collections.abc.AsyncIterator "Link to this definition")
    
ABC for classes that provide `__aiter__` and `__anext__` methods. See also the definition of [asynchronous iterator](https://docs.python.org/3/glossary.html#term-asynchronous-iterator).
Added in version 3.5.