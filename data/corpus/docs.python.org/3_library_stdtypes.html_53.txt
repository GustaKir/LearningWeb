Title: contextmanager.__exit__ Method
URL: https://docs.python.org/3/library/stdtypes.html
Summary: The __exit__ method of the context manager allows for exiting the runtime context and indicates whether an exception should be suppressed. It takes in parameters for the exception type, value, and traceback, which are None if no exception occurred. Returning True suppresses the exception; otherwise, it propagates. Exceptions during this method replace any occurring in the body of the 'with' statement.
---

contextmanager.__exit__(_exc_type_ , _exc_val_ , _exc_tb_)[¶](https://docs.python.org/3/library/stdtypes.html#contextmanager.__exit__ "Link to this definition")
    
Exit the runtime context and return a Boolean flag indicating if any exception that occurred should be suppressed. If an exception occurred while executing the body of the [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement, the arguments contain the exception type, value and traceback information. Otherwise, all three arguments are `None`.
Returning a true value from this method will cause the [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement to suppress the exception and continue execution with the statement immediately following the `with` statement. Otherwise the exception continues propagating after this method has finished executing. Exceptions that occur during execution of this method will replace any exception that occurred in the body of the `with` statement.
The exception passed in should never be reraised explicitly - instead, this method should return a false value to indicate that the method completed successfully and does not want to suppress the raised exception. This allows context management code to easily detect whether or not an [`__exit__()`](https://docs.python.org/3/reference/datamodel.html#object.__exit__ "object.__exit__") method has actually failed.
Python defines several context managers to support easy thread synchronisation, prompt closure of files or other objects, and simpler manipulation of the active decimal arithmetic context. The specific types are not treated specially beyond their implementation of the context management protocol. See the [`contextlib`](https://docs.python.org/3/library/contextlib.html#module-contextlib "contextlib: Utilities for with-statement contexts.") module for some examples.
Python’s [generator](https://docs.python.org/3/glossary.html#term-generator)s and the [`contextlib.contextmanager`](https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager "contextlib.contextmanager") decorator provide a convenient way to implement these protocols. If a generator function is decorated with the [`contextlib.contextmanager`](https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager "contextlib.contextmanager") decorator, it will return a context manager implementing the necessary [`__enter__()`](https://docs.python.org/3/library/stdtypes.html#contextmanager.__enter__ "contextmanager.__enter__") and [`__exit__()`](https://docs.python.org/3/library/stdtypes.html#contextmanager.__exit__ "contextmanager.__exit__") methods, rather than the iterator produced by an undecorated generator function.
Note that there is no specific slot for any of these methods in the type structure for Python objects in the Python/C API. Extension types wanting to define these methods must provide them as a normal Python accessible method. Compared to the overhead of setting up the runtime context, the overhead of a single class dictionary lookup is negligible.
## Type Annotation Types — [Generic Alias](https://docs.python.org/3/library/stdtypes.html#types-genericalias), [Union](https://docs.python.org/3/library/stdtypes.html#types-union)[¶](https://docs.python.org/3/library/stdtypes.html#type-annotation-types-generic-alias-union "Link to this heading")
The core built-in types for [type annotations](https://docs.python.org/3/glossary.html#term-annotation) are [Generic Alias](https://docs.python.org/3/library/stdtypes.html#types-genericalias) and [Union](https://docs.python.org/3/library/stdtypes.html#types-union).
### Generic Alias Type[¶](https://docs.python.org/3/library/stdtypes.html#generic-alias-type "Link to this heading")
`GenericAlias` objects are generally created by [subscripting](https://docs.python.org/3/reference/expressions.html#subscriptions) a class. They are most often used with [container classes](https://docs.python.org/3/reference/datamodel.html#sequence-types), such as [`list`](https://docs.python.org/3/library/stdtypes.html#list "list") or [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict"). For example, `list[int]` is a `GenericAlias` object created by subscripting the `list` class with the argument [`int`](https://docs.python.org/3/library/functions.html#int "int"). `GenericAlias` objects are intended primarily for use with [type annotations](https://docs.python.org/3/glossary.html#term-annotation).
Note
It is generally only possible to subscript a class if the class implements the special method [`__class_getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__class_getitem__ "object.__class_getitem__").
A `GenericAlias` object acts as a proxy for a [generic type](https://docs.python.org/3/glossary.html#term-generic-type), implementing _parameterized generics_.
For a container class, the argument(s) supplied to a [subscription](https://docs.python.org/3/reference/expre