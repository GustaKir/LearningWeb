Title: Socket Module - Receiving Data
URL: https://docs.python.org/3/library/socket.html
Summary: This section covers the functions `recvfrom_into` and `recv_into` for receiving data from sockets in Unix environments. `recvfrom_into` writes received data into a provided buffer and returns the number of bytes received along with the sender's address. `recv_into` also stores received data in a buffer, allowing for controlled data reception.
---

```

[Availability](https://docs.python.org/3/library/intro.html#availability): Unix.
Most Unix platforms.
Added in version 3.3. 

socket.recvfrom_into(_buffer_[, _nbytes_[, _flags_]])[¶](https://docs.python.org/3/library/socket.html#socket.socket.recvfrom_into "Link to this definition")
    
Receive data from the socket, writing it into _buffer_ instead of creating a new bytestring. The return value is a pair `(nbytes, address)` where _nbytes_ is the number of bytes received and _address_ is the address of the socket sending the data. See the Unix manual page _[recv(2)](https://manpages.debian.org/recv\(2\))_ for the meaning of the optional argument _flags_ ; it defaults to zero. (The format of _address_ depends on the address family — see above.) 

socket.recv_into(_buffer_[, _nbytes_[, _flags_]])[¶](https://docs.python.org/3/library/socket.html#socket.socket.recv_into "Link to this definition")
    
Receive up to _nbytes_ bytes from the socket, storing the data into a buffer rather than creating a new bytestring. If _nbytes_ is not specified (or 0), receive up to the size available in the given buffer. Returns the number of bytes received. See the Unix manual page _[recv(2)](https://manpages.debian.org/recv\(2\))_ for the meaning of the optional argument _flags_ ; it defaults to zero. 

socket.send(_bytes_[, _flags_])[¶](https://docs.python.org/3/library/socket.html#socket.socket.send "Link to this definition")
    
Send data to the socket. The socket must be connected to a remote socket. The optional _flags_ argument has the same meaning as for [`recv()`](https://docs.python.org/3/library/socket.html#socket.socket.recv "socket.socket.recv") above. Returns the number of bytes sent. Applications are responsible for checking that all data has been sent; if only some of the data was transmitted, the application needs to attempt delivery of the remaining data. For further information on this topic, consult the [Socket Programming HOWTO](https://docs.python.org/3/howto/sockets.html#socket-howto).
Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an exception, the method now retries the system call instead of raising an [`InterruptedError`](https://docs.python.org/3/library/exceptions.html#InterruptedError "InterruptedError") exception (see [**PEP 475**](https://peps.python.org/pep-0475/) for the rationale). 

socket.sendall(_bytes_[, _flags_])[¶](https://docs.python.org/3/library/socket.html#socket.socket.sendall "Link to this definition")
    
Send data to the socket. The socket must be connected to a remote socket. The optional _flags_ argument has the same meaning as for [`recv()`](https://docs.python.org/3/library/socket.html#socket.socket.recv "socket.socket.recv") above. Unlike [`send()`](https://docs.python.org/3/library/socket.html#socket.socket.send "socket.socket.send"), this method continues to send data from _bytes_ until either all data has been sent or an error occurs. `None` is returned on success. On error, an exception is raised, and there is no way to determine how much data, if any, was successfully sent.
Changed in version 3.5: The socket timeout is no longer reset each time data is sent successfully. The socket timeout is now the maximum total duration to send all data.
Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an exception, the method now retries the system call instead of raising an [`InterruptedError`](https://docs.python.org/3/library/exceptions.html#InterruptedError "InterruptedError") exception (see [**PEP 475**](https://peps.python.org/pep-0475/) for the rationale). 

socket.sendto(_bytes_ , _address_)[¶](https://docs.python.org/3/library/socket.html#socket.socket.sendto "Link to this definition")


socket.sendto(_bytes_ , _flags_ , _address_)
    
Send data to the socket. The socket should not be connected to a remote socket, since the destination socket is specified by _address_. The optional _flags_ argument has the same meaning as for [`recv()`](https://docs.python.org/3/library/socket.html#socket.socket.recv "socket.socket.recv") above. Return the number of bytes sent. (The format of _address_ depends on the address family — see above.)
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `socket.sendto` with arguments `self`, `address`.
Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an exception, the method now retries the system call instead of raising an [`InterruptedError`](https://docs.python.org/3/library/exceptions.html#InterruptedError "InterruptedError") exception (see [**PEP 475**](https://peps.python.org/pep-0475/) for the rationale).