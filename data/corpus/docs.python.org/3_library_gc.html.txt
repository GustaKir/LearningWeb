Title: Garbage Collection in Python
URL: https://docs.python.org/3/library/gc.html
Summary: This section introduces the garbage collection module in Python, highlighting its role in automatic memory management. It provides navigation to previous and next topics in the documentation, along with links for reporting bugs and accessing the source code.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
#### Previous topic
[`__future__` — Future statement definitions](https://docs.python.org/3/library/__future__.html "previous chapter")
#### Next topic
[`inspect` — Inspect live objects](https://docs.python.org/3/library/inspect.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/gc.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/inspect.html "inspect — Inspect live objects") |
  * [previous](https://docs.python.org/3/library/__future__.html "__future__ — Future statement definitions") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Python Runtime Services](https://docs.python.org/3/library/python.html) »
  * [`gc` — Garbage Collector interface](https://docs.python.org/3/library/gc.html)
  * | 
  * Theme  Auto Light Dark |


# `gc` — Garbage Collector interface[¶](https://docs.python.org/3/library/gc.html#module-gc "Link to this heading")
This module provides an interface to the optional garbage collector. It provides the ability to disable the collector, tune the collection frequency, and set debugging options. It also provides access to unreachable objects that the collector found but cannot free. Since the collector supplements the reference counting already used in Python, you can disable the collector if you are sure your program does not create reference cycles. Automatic collection can be disabled by calling `gc.disable()`. To debug a leaking program call `gc.set_debug(gc.DEBUG_LEAK)`. Notice that this includes `gc.DEBUG_SAVEALL`, causing garbage-collected objects to be saved in gc.garbage for inspection.
The [`gc`](https://docs.python.org/3/library/gc.html#module-gc "gc: Interface to the cycle-detecting garbage collector.") module provides the following functions: 

gc.enable()[¶](https://docs.python.org/3/library/gc.html#gc.enable "Link to this definition")
    
Enable automatic garbage collection. 

gc.disable()[¶](https://docs.python.org/3/library/gc.html#gc.disable "Link to this definition")
    
Disable automatic garbage collection. 

gc.isenabled()[¶](https://docs.python.org/3/library/gc.html#gc.isenabled "Link to this definition")
    
Return `True` if automatic collection is enabled. 

gc.collect(_generation =2_)[¶](https://docs.python.org/3/library/gc.html#gc.collect "Link to this definition")
    
With no arguments, run a full collection. The optional argument _generation_ may be an integer specifying which generation to collect (from 0 to 2). A [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised if the generation number is invalid. The sum of collected objects and uncollectable objects is returned.
The free lists maintained for a number of built-in types are cleared whenever a full collection or collection of the highest generation (2) is run. Not all items in some free lists may be freed due to the particular implementation, in particular [`float`](https://docs.python.org/3/library/functions.html#float "float").
The effect of calling `gc.collect()` while the interpreter is already performing a collection is undefined. 

gc.set_debug(_flags_)[¶](https://docs.python.org/3/library/gc.html#gc.set_debug "Link to this definition")
    
Set the garbage collection debugging flags. Debugging information will be written to `sys.stderr`. See below for a list of debugging flags which can be combined using bit operations to control debugging. 

gc.get_debug()[¶](https://docs.python.org/3/library/gc.html#gc.get_debug "Link to this definition")
    
Return the debugging flags currently set.