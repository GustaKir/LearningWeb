Title: Changes in Python 3.7: Module Removals and Windows-only Enhancements
URL: https://docs.python.org/3/whatsnew/3.7.html
Summary: The `fpectl` module has been removed due to its instability and incompatibility with x86-64 architectures. Additionally, the python launcher (`py.exe`) now supports 32 and 64 bit specifiers without needing to specify a minor version, allowing various new command formats.
---

## Module Removals[¶](https://docs.python.org/3/whatsnew/3.7.html#module-removals "Link to this heading")
The `fpectl` module has been removed. It was never enabled by default, never worked correctly on x86-64, and it changed the Python ABI in ways that caused unexpected breakage of C extensions. (Contributed by Nathaniel J. Smith in [bpo-29137](https://bugs.python.org/issue?@action=redirect&bpo=29137).)
## Windows-only Changes[¶](https://docs.python.org/3/whatsnew/3.7.html#windows-only-changes "Link to this heading")
The python launcher, (py.exe), can accept 32 & 64 bit specifiers **without** having to specify a minor version as well. So `py -3-32` and `py -3-64` become valid as well as `py -3.7-32`, also the -_m_ -64 and -_m.n_ -64 forms are now accepted to force 64 bit python even if 32 bit would have otherwise been used. If the specified version is not available py.exe will error exit. (Contributed by Steve Barnes in [bpo-30291](https://bugs.python.org/issue?@action=redirect&bpo=30291).)
The launcher can be run as `py -0` to produce a list of the installed pythons, _with default marked with an asterisk_. Running `py -0p` will include the paths. If py is run with a version specifier that cannot be matched it will also print the _short form_ list of available specifiers. (Contributed by Steve Barnes in [bpo-30362](https://bugs.python.org/issue?@action=redirect&bpo=30362).)
## Porting to Python 3.7[¶](https://docs.python.org/3/whatsnew/3.7.html#porting-to-python-3-7 "Link to this heading")
This section lists previously described changes and other bugfixes that may require changes to your code.
### Changes in Python Behavior[¶](https://docs.python.org/3/whatsnew/3.7.html#changes-in-python-behavior "Link to this heading")
  * [`async`](https://docs.python.org/3/reference/compound_stmts.html#async) and [`await`](https://docs.python.org/3/reference/expressions.html#await) names are now reserved keywords. Code using these names as identifiers will now raise a [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError"). (Contributed by Jelle Zijlstra in [bpo-30406](https://bugs.python.org/issue?@action=redirect&bpo=30406).)
  * [**PEP 479**](https://peps.python.org/pep-0479/) is enabled for all code in Python 3.7, meaning that [`StopIteration`](https://docs.python.org/3/library/exceptions.html#StopIteration "StopIteration") exceptions raised directly or indirectly in coroutines and generators are transformed into [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError") exceptions. (Contributed by Yury Selivanov in [bpo-32670](https://bugs.python.org/issue?@action=redirect&bpo=32670).)
  * [`object.__aiter__()`](https://docs.python.org/3/reference/datamodel.html#object.__aiter__ "object.__aiter__") methods can no longer be declared as asynchronous. (Contributed by Yury Selivanov in [bpo-31709](https://bugs.python.org/issue?@action=redirect&bpo=31709).)
  * Due to an oversight, earlier Python versions erroneously accepted the following syntax:
```
f(1 for x in [1],)
classC(1 for x in [1]):
  pass