Title: Fraction Class Alternative Constructors
URL: https://docs.python.org/3/library/fractions.html
Summary: This documentation chunk describes the alternative constructors of the `Fraction` class in Python, specifically `from_float` and `from_decimal`. The `from_float` method converts a `float` to a `Fraction`, noting that `Fraction.from_float(0.3)` may not equal `Fraction(3, 10)`. From Python 3.2 onwards, `Fraction` can be directly constructed from a `float`. The `from_decimal` method is also mentioned for converting `decimal.Decimal` instances.
---

_classmethod_ from_float(_flt_)[¶](https://docs.python.org/3/library/fractions.html#fractions.Fraction.from_float "Link to this definition")
    
Alternative constructor which only accepts instances of [`float`](https://docs.python.org/3/library/functions.html#float "float") or [`numbers.Integral`](https://docs.python.org/3/library/numbers.html#numbers.Integral "numbers.Integral"). Beware that `Fraction.from_float(0.3)` is not the same value as `Fraction(3, 10)`.
Note
From Python 3.2 onwards, you can also construct a [`Fraction`](https://docs.python.org/3/library/fractions.html#fractions.Fraction "fractions.Fraction") instance directly from a [`float`](https://docs.python.org/3/library/functions.html#float "float"). 

_classmethod_ from_decimal(_dec_)[¶](https://docs.python.org/3/library/fractions.html#fractions.Fraction.from_decimal "Link to this definition")
    
Alternative constructor which only accepts instances of [`decimal.Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal") or [`numbers.Integral`](https://docs.python.org/3/library/numbers.html#numbers.Integral "numbers.Integral").
Note
From Python 3.2 onwards, you can also construct a [`Fraction`](https://docs.python.org/3/library/fractions.html#fractions.Fraction "fractions.Fraction") instance directly from a [`decimal.Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal") instance. 

limit_denominator(_max_denominator =1000000_)[¶](https://docs.python.org/3/library/fractions.html#fractions.Fraction.limit_denominator "Link to this definition")
    
Finds and returns the closest [`Fraction`](https://docs.python.org/3/library/fractions.html#fractions.Fraction "fractions.Fraction") to `self` that has denominator at most max_denominator. This method is useful for finding rational approximations to a given floating-point number:
>>>```
>>> fromfractionsimport Fraction
>>> Fraction('3.1415926535897932').limit_denominator(1000)
Fraction(355, 113)

```

or for recovering a rational number that’s represented as a float:
>>>```
>>> frommathimport pi, cos
>>> Fraction(cos(pi/3))
Fraction(4503599627370497, 9007199254740992)
>>> Fraction(cos(pi/3)).limit_denominator()
Fraction(1, 2)
>>> Fraction(1.1).limit_denominator()
Fraction(11, 10)

```


__floor__()[¶](https://docs.python.org/3/library/fractions.html#fractions.Fraction.__floor__ "Link to this definition")
    
Returns the greatest [`int`](https://docs.python.org/3/library/functions.html#int "int") `<= self`. This method can also be accessed through the [`math.floor()`](https://docs.python.org/3/library/math.html#math.floor "math.floor") function:
>>>```
>>> frommathimport floor
>>> floor(Fraction(355, 113))
3