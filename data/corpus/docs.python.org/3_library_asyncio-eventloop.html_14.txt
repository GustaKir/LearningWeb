Title: Asynchronous Socket Operations in asyncio
URL: https://docs.python.org/3/library/asyncio-eventloop.html
Summary: _async_ loop.sock_sendall() is an asynchronous method to send data to a non-blocking socket. It behaves similarly to socket.sendall(), sending all data or raising an error without indication of how much data was processed. Changed in Python 3.7, this method is now defined as an async def rather than returning a Future.
---

_async_ loop.sock_sendall(_sock_ , _data_)[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.sock_sendall "Link to this definition")
    
Send _data_ to the _sock_ socket. Asynchronous version of [`socket.sendall()`](https://docs.python.org/3/library/socket.html#socket.socket.sendall "socket.socket.sendall").
This method continues to send to the socket until either all data in _data_ has been sent or an error occurs. `None` is returned on success. On error, an exception is raised. Additionally, there is no way to determine how much data, if any, was successfully processed by the receiving end of the connection.
_sock_ must be a non-blocking socket.
Changed in version 3.7: Even though the method was always documented as a coroutine method, before Python 3.7 it returned a [`Future`](https://docs.python.org/3/library/asyncio-future.html#asyncio.Future "asyncio.Future"). Since Python 3.7, this is an `async def` method. 

_async_ loop.sock_sendto(_sock_ , _data_ , _address_)[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.sock_sendto "Link to this definition")
    
Send a datagram from _sock_ to _address_. Asynchronous version of [`socket.sendto()`](https://docs.python.org/3/library/socket.html#socket.socket.sendto "socket.socket.sendto").
Return the number of bytes sent.
_sock_ must be a non-blocking socket.
Added in version 3.11. 

_async_ loop.sock_connect(_sock_ , _address_)[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.sock_connect "Link to this definition")
    
Connect _sock_ to a remote socket at _address_.
Asynchronous version of [`socket.connect()`](https://docs.python.org/3/library/socket.html#socket.socket.connect "socket.socket.connect").
_sock_ must be a non-blocking socket.
Changed in version 3.5.2: `address` no longer needs to be resolved. `sock_connect` will try to check if the _address_ is already resolved by calling [`socket.inet_pton()`](https://docs.python.org/3/library/socket.html#socket.inet_pton "socket.inet_pton"). If not, [`loop.getaddrinfo()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.getaddrinfo "asyncio.loop.getaddrinfo") will be used to resolve the _address_.
See also
[`loop.create_connection()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_connection "asyncio.loop.create_connection") and [`asyncio.open_connection()`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.open_connection "asyncio.open_connection"). 

_async_ loop.sock_accept(_sock_)[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.sock_accept "Link to this definition")
    
Accept a connection. Modeled after the blocking [`socket.accept()`](https://docs.python.org/3/library/socket.html#socket.socket.accept "socket.socket.accept") method.
The socket must be bound to an address and listening for connections. The return value is a pair `(conn, address)` where _conn_ is a _new_ socket object usable to send and receive data on the connection, and _address_ is the address bound to the socket on the other end of the connection.
_sock_ must be a non-blocking socket.
Changed in version 3.7: Even though the method was always documented as a coroutine method, before Python 3.7 it returned a [`Future`](https://docs.python.org/3/library/asyncio-future.html#asyncio.Future "asyncio.Future"). Since Python 3.7, this is an `async def` method.
See also
[`loop.create_server()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_server "asyncio.loop.create_server") and [`start_server()`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.start_server "asyncio.start_server").