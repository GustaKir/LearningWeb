Title: Python Internal Changes and Fixes
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This chunk outlines several internal changes in Python that do not impact usage, including fixes for blocking in `os.fwalk()` and `shutil.rmtree()`, implementation of `ctypes.util.find_library()` on Android, improvements to `logging.TimedRotatingFileHandler`, and the removal of some internal elements from the `uuid` module.
---

This is an internal change that should not affect usage.
  * [gh-116401](https://github.com/python/cpython/issues/116401): Fix blocking [`os.fwalk()`](https://docs.python.org/3/library/os.html#os.fwalk "os.fwalk") and [`shutil.rmtree()`](https://docs.python.org/3/library/shutil.html#shutil.rmtree "shutil.rmtree") on opening named pipe.
  * [gh-71052](https://github.com/python/cpython/issues/71052): Implement [`ctypes.util.find_library()`](https://docs.python.org/3/library/ctypes.html#ctypes.util.find_library "ctypes.util.find_library") on Android.
  * [gh-90535](https://github.com/python/cpython/issues/90535): Fix support of _interval_ values > 1 in `logging.TimedRotatingFileHandler` for `when='MIDNIGHT'` and `when='Wx'`.
  * [gh-113308](https://github.com/python/cpython/issues/113308): Remove some internal protected parts from [`uuid`](https://docs.python.org/3/library/uuid.html#module-uuid "uuid: UUID objects \(universally unique identifiers\) according to RFC 4122"): `_has_uuid_generate_time_safe`, `_netbios_getnode`, `_ipconfig_getnode`, and `_load_system_functions`. They were unused.
  * [gh-115627](https://github.com/python/cpython/issues/115627): Fix the [`ssl`](https://docs.python.org/3/library/ssl.html#module-ssl "ssl: TLS/SSL wrapper for socket objects") module error handling of connection terminate by peer. It now throws an OSError with the appropriate error code instead of an EOFError.
  * [gh-114847](https://github.com/python/cpython/issues/114847): Speed up [`os.path.realpath()`](https://docs.python.org/3/library/os.path.html#os.path.realpath "os.path.realpath") on non-Windows platforms.
  * [gh-114271](https://github.com/python/cpython/issues/114271): Fix a race in `threading.Thread.join()`.
`threading._MainThread` now always represents the main thread of the main interpreter.
`PyThreadState.on_delete` and `PyThreadState.on_delete_data` have been removed.
  * [gh-113538](https://github.com/python/cpython/issues/113538): Add [`asyncio.Server.close_clients()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Server.close_clients "asyncio.Server.close_clients") and [`asyncio.Server.abort_clients()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Server.abort_clients "asyncio.Server.abort_clients") methods which allow to more forcefully close an asyncio server.
  * [gh-85287](https://github.com/python/cpython/issues/85287): Changes Unicode codecs to return UnicodeEncodeError or UnicodeDecodeError, rather than just UnicodeError.
  * [gh-113548](https://github.com/python/cpython/issues/113548): [`pdb`](https://docs.python.org/3/library/pdb.html#module-pdb "pdb: The Python debugger for interactive interpreters.") now allows CLI arguments to `pdb -m`.
  * [gh-112948](https://github.com/python/cpython/issues/112948): Make completion of [`pdb`](https://docs.python.org/3/library/pdb.html#module-pdb "pdb: The Python debugger for interactive interpreters.") similar to Python REPL
  * [gh-105866](https://github.com/python/cpython/issues/105866): Fixed `_get_slots` bug which caused error when defining dataclasses with slots and a weakref_slot.
  * [gh-96471](https://github.com/python/cpython/issues/96471): Add [`asyncio.Queue`](https://docs.python.org/3/library/asyncio-queue.html#asyncio.Queue "asyncio.Queue") termination with [`shutdown()`](https://docs.python.org/3/library/asyncio-queue.html#asyncio.Queue.shutdown "asyncio.Queue.shutdown") method.
  * [gh-89739](https://github.com/python/cpython/issues/89739): The [`zipimport`](https://docs.python.org/3/library/zipimport.html#module-zipimport "zipimport: Support for importing Python modules from ZIP archives.") module can now read ZIP64 files.
  * [bpo-33533](https://bugs.python.org/issue?@action=redirect&bpo=33533): [`asyncio.as_completed()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.as_completed "asyncio.as_completed") now returns an object that is both an asynchronous iterator and plain iterator. The new asynchronous iteration pattern allows for easier correlation between prior tasks and their completed results. This is a closer match to [`concurrent.futures.as_completed()`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.as_completed "concurrent.futures.as_completed")â€™s iteration pattern. Patch by Justin Arthur.
  * [bpo-27578](https://bugs.python.org/issue?@action=redirect&bpo=27578): [`inspect.getsource()`](https://docs.python.org/3/library/inspect.html#inspect.getsource "inspect.getsource") (and related functions) work with empty module files, returning `'\n'` (or reasonable equivalent) instead of raising `OSError`.