Title: Turtle Graphics: Shape Class and Window Control Methods
URL: https://docs.python.org/3/library/turtle.html
Summary: This section discusses the `Shape` class used in the `register_shape()` method, primarily relevant for compound shapes. It also introduces methods for window control, with most examples based on a TurtleScreen instance named `screen`, including details about setting the background color.
---

```



Note
The [`Shape`](https://docs.python.org/3/library/turtle.html#turtle.Shape "turtle.Shape") class is used internally by the [`register_shape()`](https://docs.python.org/3/library/turtle.html#turtle.register_shape "turtle.register_shape") method in different ways. The application programmer has to deal with the Shape class _only_ when using compound shapes like shown above!
## Methods of TurtleScreen/Screen and corresponding functions[¶](https://docs.python.org/3/library/turtle.html#methods-of-turtlescreen-screen-and-corresponding-functions "Link to this heading")
Most of the examples in this section refer to a TurtleScreen instance called `screen`.
### Window control[¶](https://docs.python.org/3/library/turtle.html#window-control "Link to this heading") 

turtle.bgcolor(_* args_)[¶](https://docs.python.org/3/library/turtle.html#turtle.bgcolor "Link to this definition")
     

Parameters:
    
**args** – a color string or three numbers in the range 0..colormode or a 3-tuple of such numbers
Set or return background color of the TurtleScreen.
>>>```
>>> screen.bgcolor("orange")
>>> screen.bgcolor()
'orange'
>>> screen.bgcolor("#800080")
>>> screen.bgcolor()
(128.0, 0.0, 128.0)

```


turtle.bgpic(_picname =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.bgpic "Link to this definition")
     

Parameters:
    
**picname** – a string, name of a gif-file or `"nopic"`, or `None`
Set background image or return name of current backgroundimage. If _picname_ is a filename, set the corresponding image as background. If _picname_ is `"nopic"`, delete background image, if present. If _picname_ is `None`, return the filename of the current backgroundimage.
>>>```
>>> screen.bgpic()
'nopic'
>>> screen.bgpic("landscape.gif")
>>> screen.bgpic()
"landscape.gif"

```


turtle.clear()
    
Note
This TurtleScreen method is available as a global function only under the name `clearscreen`. The global function `clear` is a different one derived from the Turtle method `clear`. 

turtle.clearscreen()[¶](https://docs.python.org/3/library/turtle.html#turtle.clearscreen "Link to this definition")
    
Delete all drawings and all turtles from the TurtleScreen. Reset the now empty TurtleScreen to its initial state: white background, no background image, no event bindings and tracing on. 

turtle.reset()
    
Note
This TurtleScreen method is available as a global function only under the name `resetscreen`. The global function `reset` is another one derived from the Turtle method `reset`. 

turtle.resetscreen()[¶](https://docs.python.org/3/library/turtle.html#turtle.resetscreen "Link to this definition")
    
Reset all Turtles on the Screen to their initial state. 

turtle.screensize(_canvwidth =None_, _canvheight =None_, _bg =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.screensize "Link to this definition")
     

Parameters:
    
  * **canvwidth** – positive integer, new width of canvas in pixels
  * **canvheight** – positive integer, new height of canvas in pixels
  * **bg** – colorstring or color-tuple, new background color


If no arguments are given, return current (canvaswidth, canvasheight). Else resize the canvas the turtles are drawing on. Do not alter the drawing window. To observe hidden parts of the canvas, use the scrollbars. With this method, one can make visible those parts of a drawing which were outside the canvas before.
>>>```
>>> screen.screensize()
(400, 300)
>>> screen.screensize(2000,1500)
>>> screen.screensize()
(2000, 1500)

```

e.g. to search for an erroneously escaped turtle ;-) 

turtle.setworldcoordinates(_llx_ , _lly_ , _urx_ , _ury_)[¶](https://docs.python.org/3/library/turtle.html#turtle.setworldcoordinates "Link to this definition")
     

Parameters:
    
  * **llx** – a number, x-coordinate of lower left corner of canvas
  * **lly** – a number, y-coordinate of lower left corner of canvas
  * **urx** – a number, x-coordinate of upper right corner of canvas
  * **ury** – a number, y-coordinate of upper right corner of canvas


Set up user-defined coordinate system and switch to mode “world” if necessary. This performs a `screen.reset()`. If mode “world” is already active, all drawings are redrawn according to the new coordinates.
**ATTENTION** : in user-defined coordinate systems angles may appear distorted.
>>>```
>>> screen.reset()
>>> screen.setworldcoordinates(-50,-7.5,50,7.5)
>>> for _ in range(72):
...   left(10)
...
>>> for _ in range(8):
...   left(45); fd(2)  # a regular octagon