Title: xml.dom — The Document Object Model API
URL: https://docs.python.org/3/library/xml.dom.html
Summary: The `xml.dom` module provides a cross-language API for accessing and modifying XML documents through a tree structure. It allows for random access to elements, unlike SAX, which processes XML sequentially, making it suitable for applications requiring multiple access points within a document.
---

# `xml.dom` — The Document Object Model API[¶](https://docs.python.org/3/library/xml.dom.html#module-xml.dom "Link to this heading")
**Source code:** [Lib/xml/dom/__init__.py](https://github.com/python/cpython/tree/3.13/Lib/xml/dom/__init__.py)
The Document Object Model, or “DOM,” is a cross-language API from the World Wide Web Consortium (W3C) for accessing and modifying XML documents. A DOM implementation presents an XML document as a tree structure, or allows client code to build such a structure from scratch. It then gives access to the structure through a set of objects which provided well-known interfaces.
The DOM is extremely useful for random-access applications. SAX only allows you a view of one bit of the document at a time. If you are looking at one SAX element, you have no access to another. If you are looking at a text node, you have no access to a containing element. When you write a SAX application, you need to keep track of your program’s position in the document somewhere in your own code. SAX does not do it for you. Also, if you need to look ahead in the XML document, you are just out of luck.
Some applications are simply impossible in an event driven model with no access to a tree. Of course you could build some sort of tree yourself in SAX events, but the DOM allows you to avoid writing that code. The DOM is a standard tree representation for XML data.
The Document Object Model is being defined by the W3C in stages, or “levels” in their terminology. The Python mapping of the API is substantially based on the DOM Level 2 recommendation.
DOM applications typically start by parsing some XML into a DOM. How this is accomplished is not covered at all by DOM Level 1, and Level 2 provides only limited improvements: There is a `DOMImplementation` object class which provides access to `Document` creation methods, but no way to access an XML reader/parser/Document builder in an implementation-independent way. There is also no well-defined way to access these methods without an existing `Document` object. In Python, each DOM implementation will provide a function [`getDOMImplementation()`](https://docs.python.org/3/library/xml.dom.html#xml.dom.getDOMImplementation "xml.dom.getDOMImplementation"). DOM Level 3 adds a Load/Store specification, which defines an interface to the reader, but this is not yet available in the Python standard library.
Once you have a DOM document object, you can access the parts of your XML document through its properties and methods. These properties are defined in the DOM specification; this portion of the reference manual describes the interpretation of the specification in Python.
The specification provided by the W3C defines the DOM API for Java, ECMAScript, and OMG IDL. The Python mapping defined here is based in large part on the IDL version of the specification, but strict compliance is not required (though implementations are free to support the strict mapping from IDL). See section [Conformance](https://docs.python.org/3/library/xml.dom.html#dom-conformance) for a detailed discussion of mapping requirements.
See also 

[Document Object Model (DOM) Level 2 Specification](https://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/)
    
The W3C recommendation upon which the Python DOM API is based. 

[Document Object Model (DOM) Level 1 Specification](https://www.w3.org/TR/REC-DOM-Level-1/)
    
The W3C recommendation for the DOM supported by [`xml.dom.minidom`](https://docs.python.org/3/library/xml.dom.minidom.html#module-xml.dom.minidom "xml.dom.minidom: Minimal Document Object Model \(DOM\) implementation."). 

[Python Language Mapping Specification](https://www.omg.org/spec/PYTH/1.2/PDF)
    
This specifies the mapping from OMG IDL to Python.
## Module Contents[¶](https://docs.python.org/3/library/xml.dom.html#module-contents "Link to this heading")
The [`xml.dom`](https://docs.python.org/3/library/xml.dom.html#module-xml.dom "xml.dom: Document Object Model API for Python.") contains the following functions: 

xml.dom.registerDOMImplementation(_name_ , _factory_)[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.registerDOMImplementation "Link to this definition")
    
Register the _factory_ function with the name _name_. The factory function should return an object which implements the `DOMImplementation` interface. The factory function can return the same object every time, or a new one for each call, as appropriate for the specific implementation (e.g. if that implementation supports some customization).