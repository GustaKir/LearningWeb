Title: unittest.mock.Mock Class
URL: https://docs.python.org/3/library/unittest.mock.html
Summary: The `Mock` class in the `unittest.mock` module allows for the creation of mock objects with customizable behaviors. It accepts several optional parameters such as `_spec`, which defines the specifications for the mock, allowing for flexible and controlled testing.
---

_class_ unittest.mock.Mock(_spec =None_, _side_effect =None_, _return_value =DEFAULT_, _wraps =None_, _name =None_, _spec_set =None_, _unsafe =False_, _** kwargs_)[¶](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock "Link to this definition")
    
Create a new [`Mock`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock "unittest.mock.Mock") object. [`Mock`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock "unittest.mock.Mock") takes several optional arguments that specify the behaviour of the Mock object:
  * _spec_ : This can be either a list of strings or an existing object (a class or instance) that acts as the specification for the mock object. If you pass in an object then a list of strings is formed by calling dir on the object (excluding unsupported magic attributes and methods). Accessing any attribute not in this list will raise an [`AttributeError`](https://docs.python.org/3/library/exceptions.html#AttributeError "AttributeError").
If _spec_ is an object (rather than a list of strings) then [`__class__`](https://docs.python.org/3/reference/datamodel.html#object.__class__ "object.__class__") returns the class of the spec object. This allows mocks to pass [`isinstance()`](https://docs.python.org/3/library/functions.html#isinstance "isinstance") tests.
  * _spec_set_ : A stricter variant of _spec_. If used, attempting to _set_ or get an attribute on the mock that isn’t on the object passed as _spec_set_ will raise an [`AttributeError`](https://docs.python.org/3/library/exceptions.html#AttributeError "AttributeError").
  * _side_effect_ : A function to be called whenever the Mock is called. See the [`side_effect`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect "unittest.mock.Mock.side_effect") attribute. Useful for raising exceptions or dynamically changing return values. The function is called with the same arguments as the mock, and unless it returns [`DEFAULT`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.DEFAULT "unittest.mock.DEFAULT"), the return value of this function is used as the return value.
Alternatively _side_effect_ can be an exception class or instance. In this case the exception will be raised when the mock is called.
If _side_effect_ is an iterable then each call to the mock will return the next value from the iterable.
A _side_effect_ can be cleared by setting it to `None`.
  * _return_value_ : The value returned when the mock is called. By default this is a new Mock (created on first access). See the [`return_value`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.return_value "unittest.mock.Mock.return_value") attribute.
  * _unsafe_ : By default, accessing any attribute whose name starts with _assert_ , _assret_ , _asert_ , _aseert_ or _assrt_ will raise an [`AttributeError`](https://docs.python.org/3/library/exceptions.html#AttributeError "AttributeError"). Passing `unsafe=True` will allow access to these attributes.
Added in version 3.5.
  * _wraps_ : Item for the mock object to wrap. If _wraps_ is not `None` then calling the Mock will pass the call through to the wrapped object (returning the real result). Attribute access on the mock will return a Mock object that wraps the corresponding attribute of the wrapped object (so attempting to access an attribute that doesn’t exist will raise an [`AttributeError`](https://docs.python.org/3/library/exceptions.html#AttributeError "AttributeError")).
If the mock has an explicit _return_value_ set then calls are not passed to the wrapped object and the _return_value_ is returned instead.
  * _name_ : If the mock has a name then it will be used in the repr of the mock. This can be useful for debugging. The name is propagated to child mocks.


Mocks can also be called with arbitrary keyword arguments. These will be used to set attributes on the mock after it is created. See the [`configure_mock()`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.configure_mock "unittest.mock.Mock.configure_mock") method for details. 

assert_called()[¶](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_called "Link to this definition")
    
Assert that the mock was called at least once.
>>>```
>>> mock = Mock()
>>> mock.method()
<Mock name='mock.method()' id='...'>
>>> mock.method.assert_called()

```

Added in version 3.6. 

assert_called_once()[¶](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_called_once "Link to this definition")
    
Assert that the mock was called exactly once.
>>>