Title: Understanding tp_dictoffset in PyTypeObject
URL: https://docs.python.org/3/c-api/typeobj.html
Summary: The tp_dictoffset field of PyTypeObject indicates the offset of the instance variable dictionary for types with instance variables. It is inherited by subtypes and should be used cautiously, with a preference for Py_TPFLAGS_MANAGED_DICT when possible. Setting its value to NULL deletes the value.
---

```

The _value_ argument is set to `NULL` to delete the value.
**Inheritance:**
This field is inherited by subtypes. 

[Py_ssize_t](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")[PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject").tp_dictoffset[¶](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_dictoffset "Link to this definition")
    
While this field is still supported, [`Py_TPFLAGS_MANAGED_DICT`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_MANAGED_DICT "Py_TPFLAGS_MANAGED_DICT") should be used instead, if at all possible.
If the instances of this type have a dictionary containing instance variables, this field is non-zero and contains the offset in the instances of the type of the instance variable dictionary; this offset is used by [`PyObject_GenericGetAttr()`](https://docs.python.org/3/c-api/object.html#c.PyObject_GenericGetAttr "PyObject_GenericGetAttr").
Do not confuse this field with [`tp_dict`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_dict "PyTypeObject.tp_dict"); that is the dictionary for attributes of the type object itself.
The value specifies the offset of the dictionary from the start of the instance structure.
The [`tp_dictoffset`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_dictoffset "PyTypeObject.tp_dictoffset") should be regarded as write-only. To get the pointer to the dictionary call [`PyObject_GenericGetDict()`](https://docs.python.org/3/c-api/object.html#c.PyObject_GenericGetDict "PyObject_GenericGetDict"). Calling [`PyObject_GenericGetDict()`](https://docs.python.org/3/c-api/object.html#c.PyObject_GenericGetDict "PyObject_GenericGetDict") may need to allocate memory for the dictionary, so it is may be more efficient to call [`PyObject_GetAttr()`](https://docs.python.org/3/c-api/object.html#c.PyObject_GetAttr "PyObject_GetAttr") when accessing an attribute on the object.
It is an error to set both the [`Py_TPFLAGS_MANAGED_DICT`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_MANAGED_DICT "Py_TPFLAGS_MANAGED_DICT") bit and [`tp_dictoffset`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_dictoffset "PyTypeObject.tp_dictoffset").
**Inheritance:**
This field is inherited by subtypes. A subtype should not override this offset; doing so could be unsafe, if C code tries to access the dictionary at the previous offset. To properly support inheritance, use [`Py_TPFLAGS_MANAGED_DICT`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_MANAGED_DICT "Py_TPFLAGS_MANAGED_DICT").
**Default:**
This slot has no default. For [static types](https://docs.python.org/3/c-api/typeobj.html#static-types), if the field is `NULL` then no [`__dict__`](https://docs.python.org/3/reference/datamodel.html#object.__dict__ "object.__dict__") gets created for instances.
If the [`Py_TPFLAGS_MANAGED_DICT`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_MANAGED_DICT "Py_TPFLAGS_MANAGED_DICT") bit is set in the [`tp_flags`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_flags "PyTypeObject.tp_flags") field, then [`tp_dictoffset`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_dictoffset "PyTypeObject.tp_dictoffset") will be set to `-1`, to indicate that it is unsafe to use this field. 

[initproc](https://docs.python.org/3/c-api/typeobj.html#c.initproc "initproc")[PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject").tp_init[¶](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_init "Link to this definition")
    
An optional pointer to an instance initialization function.
This function corresponds to the [`__init__()`](https://docs.python.org/3/reference/datamodel.html#object.__init__ "object.__init__") method of classes. Like `__init__()`, it is possible to create an instance without calling `__init__()`, and it is possible to reinitialize an instance by calling its `__init__()` method again.
The function signature is:
```
inttp_init(PyObject*self,PyObject*args,PyObject*kwds);