Title: Bytes and Bytearray Objects in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This section discusses bytes objects in Python, particularly the introduction of optional parameters in the `bytes.hex()` method for version 3.8 and the characteristics of indexing and slicing bytes objects. It highlights the byte representation format and the ability to convert bytes into a list of integers. Additionally, it introduces `bytearray` as a mutable version of `bytes`.
---

```

Added in version 3.5.
Changed in version 3.8: [`bytes.hex()`](https://docs.python.org/3/library/stdtypes.html#bytes.hex "bytes.hex") now supports optional _sep_ and _bytes_per_sep_ parameters to insert separators between bytes in the hex output.
Since bytes objects are sequences of integers (akin to a tuple), for a bytes object _b_ , `b[0]` will be an integer, while `b[0:1]` will be a bytes object of length 1. (This contrasts with text strings, where both indexing and slicing will produce a string of length 1)
The representation of bytes objects uses the literal format (`b'...'`) since it is often more useful than e.g. `bytes([46, 46, 46])`. You can always convert a bytes object into a list of integers using `list(b)`.
### Bytearray Objects[¶](https://docs.python.org/3/library/stdtypes.html#bytearray-objects "Link to this heading")
[`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") objects are a mutable counterpart to [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") objects. 

_class_ bytearray([_source_[, _encoding_[, _errors_]]])[¶](https://docs.python.org/3/library/stdtypes.html#bytearray "Link to this definition")
    
There is no dedicated literal syntax for bytearray objects, instead they are always created by calling the constructor:
  * Creating an empty instance: `bytearray()`
  * Creating a zero-filled instance with a given length: `bytearray(10)`
  * From an iterable of integers: `bytearray(range(20))`
  * Copying existing binary data via the buffer protocol: `bytearray(b'Hi!')`


As bytearray objects are mutable, they support the [mutable](https://docs.python.org/3/library/stdtypes.html#typesseq-mutable) sequence operations in addition to the common bytes and bytearray operations described in [Bytes and Bytearray Operations](https://docs.python.org/3/library/stdtypes.html#bytes-methods).
Also see the [bytearray](https://docs.python.org/3/library/functions.html#func-bytearray) built-in.
Since 2 hexadecimal digits correspond precisely to a single byte, hexadecimal numbers are a commonly used format for describing binary data. Accordingly, the bytearray type has an additional class method to read data in that format: 

_classmethod_ fromhex(_string_)[¶](https://docs.python.org/3/library/stdtypes.html#bytearray.fromhex "Link to this definition")
    
This [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") class method returns bytearray object, decoding the given string object. The string must contain two hexadecimal digits per byte, with ASCII whitespace being ignored.
>>>```
>>> bytearray.fromhex('2Ef0 F1f2 ')
bytearray(b'.\xf0\xf1\xf2')

```

Changed in version 3.7: [`bytearray.fromhex()`](https://docs.python.org/3/library/stdtypes.html#bytearray.fromhex "bytearray.fromhex") now skips all ASCII whitespace in the string, not just spaces.
A reverse conversion function exists to transform a bytearray object into its hexadecimal representation. 

hex([_sep_[, _bytes_per_sep_]])[¶](https://docs.python.org/3/library/stdtypes.html#bytearray.hex "Link to this definition")
    
Return a string object containing two hexadecimal digits for each byte in the instance.
>>>```
>>> bytearray(b'\xf0\xf1\xf2').hex()
'f0f1f2'

```

Added in version 3.5.
Changed in version 3.8: Similar to [`bytes.hex()`](https://docs.python.org/3/library/stdtypes.html#bytes.hex "bytes.hex"), [`bytearray.hex()`](https://docs.python.org/3/library/stdtypes.html#bytearray.hex "bytearray.hex") now supports optional _sep_ and _bytes_per_sep_ parameters to insert separators between bytes in the hex output.
Since bytearray objects are sequences of integers (akin to a list), for a bytearray object _b_ , `b[0]` will be an integer, while `b[0:1]` will be a bytearray object of length 1. (This contrasts with text strings, where both indexing and slicing will produce a string of length 1)
The representation of bytearray objects uses the bytes literal format (`bytearray(b'...')`) since it is often more useful than e.g. `bytearray([46, 46, 46])`. You can always convert a bytearray object into a list of integers using `list(b)`.
### Bytes and Bytearray Operations[¶](https://docs.python.org/3/library/stdtypes.html#bytes-and-bytearray-operations "Link to this heading")
Both bytes and bytearray objects support the [common](https://docs.python.org/3/library/stdtypes.html#typesseq-common) sequence operations. They interoperate not just with operands of the same type, but with any [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object). Due to this flexibility, they can be freely mixed in operations without causing errors. However, the return type of the result may depend on the order of operands.
Note
The methods on bytes and bytearray objects don’t accept strings as their arguments, just as the methods on strings don’t accept bytes as their arguments. For example, you have to write:
```
a = "abc"
b = a.replace("a", "f")