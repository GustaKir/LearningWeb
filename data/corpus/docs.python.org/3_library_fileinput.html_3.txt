Title: FileInput Class Documentation
URL: https://docs.python.org/3/library/fileinput.html
Summary: The `FileInput` class in Python facilitates iteration over lines from multiple input streams, including standard input. It provides various methods such as `filename()`, `fileno()`, `lineno()`, and others to manage files and line numbers effectively.
---

_class_ fileinput.FileInput(_files =None_, _inplace =False_, _backup =''_, _*_ , _mode ='r'_, _openhook =None_, _encoding =None_, _errors =None_)[Â¶](https://docs.python.org/3/library/fileinput.html#fileinput.FileInput "Link to this definition")
    
Class [`FileInput`](https://docs.python.org/3/library/fileinput.html#fileinput.FileInput "fileinput.FileInput") is the implementation; its methods [`filename()`](https://docs.python.org/3/library/fileinput.html#fileinput.filename "fileinput.filename"), [`fileno()`](https://docs.python.org/3/library/fileinput.html#fileinput.fileno "fileinput.fileno"), [`lineno()`](https://docs.python.org/3/library/fileinput.html#fileinput.lineno "fileinput.lineno"), [`filelineno()`](https://docs.python.org/3/library/fileinput.html#fileinput.filelineno "fileinput.filelineno"), [`isfirstline()`](https://docs.python.org/3/library/fileinput.html#fileinput.isfirstline "fileinput.isfirstline"), [`isstdin()`](https://docs.python.org/3/library/fileinput.html#fileinput.isstdin "fileinput.isstdin"), [`nextfile()`](https://docs.python.org/3/library/fileinput.html#fileinput.nextfile "fileinput.nextfile") and [`close()`](https://docs.python.org/3/library/fileinput.html#fileinput.close "fileinput.close") correspond to the functions of the same name in the module. In addition it is [iterable](https://docs.python.org/3/glossary.html#term-iterable) and has a [`readline()`](https://docs.python.org/3/library/io.html#io.TextIOBase.readline "io.TextIOBase.readline") method which returns the next input line. The sequence must be accessed in strictly sequential order; random access and [`readline()`](https://docs.python.org/3/library/io.html#io.TextIOBase.readline "io.TextIOBase.readline") cannot be mixed.
With _mode_ you can specify which file mode will be passed to [`open()`](https://docs.python.org/3/library/functions.html#open "open"). It must be one of `'r'` and `'rb'`.
The _openhook_ , when given, must be a function that takes two arguments, _filename_ and _mode_ , and returns an accordingly opened file-like object. You cannot use _inplace_ and _openhook_ together.
You can specify _encoding_ and _errors_ that is passed to [`open()`](https://docs.python.org/3/library/functions.html#open "open") or _openhook_.
A [`FileInput`](https://docs.python.org/3/library/fileinput.html#fileinput.FileInput "fileinput.FileInput") instance can be used as a context manager in the [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement. In this example, _input_ is closed after the `with` statement is exited, even if an exception occurs:
```
with FileInput(files=('spam.txt', 'eggs.txt')) as input:
  process(input)