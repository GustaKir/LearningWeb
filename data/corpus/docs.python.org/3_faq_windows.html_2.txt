Title: Running Python Scripts on Windows
URL: https://docs.python.org/3/faq/windows.html
Summary: This section provides information on how to make Python scripts executable on Windows by associating the .py file extension with the Python interpreter. It also notes that to run scripts without the .py extension, users need to modify the PATHEXT environment variable.
---

```

## [How do I make Python scripts executable?](https://docs.python.org/3/faq/windows.html#id3)[¶](https://docs.python.org/3/faq/windows.html#how-do-i-make-python-scripts-executable "Link to this heading")
On Windows, the standard Python installer already associates the .py extension with a file type (Python.File) and gives that file type an open command that runs the interpreter (`D:\Program Files\Python\python.exe "%1" %*`). This is enough to make scripts executable from the command prompt as ‘foo.py’. If you’d rather be able to execute the script by simple typing ‘foo’ with no extension you need to add .py to the PATHEXT environment variable.
## [Why does Python sometimes take so long to start?](https://docs.python.org/3/faq/windows.html#id4)[¶](https://docs.python.org/3/faq/windows.html#why-does-python-sometimes-take-so-long-to-start "Link to this heading")
Usually Python starts very quickly on Windows, but occasionally there are bug reports that Python suddenly begins to take a long time to start up. This is made even more puzzling because Python will work fine on other Windows systems which appear to be configured identically.
The problem may be caused by a misconfiguration of virus checking software on the problem machine. Some virus scanners have been known to introduce startup overhead of two orders of magnitude when the scanner is configured to monitor all reads from the filesystem. Try checking the configuration of virus scanning software on your systems to ensure that they are indeed configured identically. McAfee, when configured to scan all file system read activity, is a particular offender.
## [How do I make an executable from a Python script?](https://docs.python.org/3/faq/windows.html#id5)[¶](https://docs.python.org/3/faq/windows.html#how-do-i-make-an-executable-from-a-python-script "Link to this heading")
See [How can I create a stand-alone binary from a Python script?](https://docs.python.org/3/faq/programming.html#faq-create-standalone-binary) for a list of tools that can be used to make executables.
## [Is a `*.pyd` file the same as a DLL?](https://docs.python.org/3/faq/windows.html#id6)[¶](https://docs.python.org/3/faq/windows.html#is-a-pyd-file-the-same-as-a-dll "Link to this heading")
Yes, .pyd files are dll’s, but there are a few differences. If you have a DLL named `foo.pyd`, then it must have a function `PyInit_foo()`. You can then write Python “import foo”, and Python will search for foo.pyd (as well as foo.py, foo.pyc) and if it finds it, will attempt to call `PyInit_foo()` to initialize it. You do not link your .exe with foo.lib, as that would cause Windows to require the DLL to be present.
Note that the search path for foo.pyd is PYTHONPATH, not the same as the path that Windows uses to search for foo.dll. Also, foo.pyd need not be present to run your program, whereas if you linked your program with a dll, the dll is required. Of course, foo.pyd is required if you want to say `import foo`. In a DLL, linkage is declared in the source code with `__declspec(dllexport)`. In a .pyd, linkage is defined in a list of available functions.
## [How can I embed Python into a Windows application?](https://docs.python.org/3/faq/windows.html#id7)[¶](https://docs.python.org/3/faq/windows.html#how-can-i-embed-python-into-a-windows-application "Link to this heading")
Embedding the Python interpreter in a Windows app can be summarized as follows:
  1. Do **not** build Python into your .exe file directly. On Windows, Python must be a DLL to handle importing modules that are themselves DLL’s. (This is the first key undocumented fact.) Instead, link to `python_NN_.dll`; it is typically installed in`C:\Windows\System`. _NN_ is the Python version, a number such as “33” for Python 3.3.
You can link to Python in two different ways. Load-time linking means linking against `python_NN_.lib`, while run-time linking means linking against`python _NN_.dll`. (General note:`python_NN_.lib`is the so-called “import lib” corresponding to`python _NN_.dll`. It merely defines symbols for the linker.)
Run-time linking greatly simplifies link options; everything happens at run time. Your code must load `python_NN_.dll`using the Windows`LoadLibraryEx()` routine. The code must also use access routines and data in `python_NN_.dll`(that is, Python’s C API’s) using pointers obtained by the Windows`GetProcAddress()` routine. Macros can make using these pointers transparent to any C code that calls routines in Python’s C API.
  2. If you use SWIG, it is easy to create a Python “extension module” that will make the app’s data and methods available to Python. SWIG will handle just about all the grungy details for you. The result is C code that you link _into_ your .exe file (!) You do **not** have to create a DLL file, and this also simplifies linking.
  3. SWIG will create an init function (a C function) whose name depends on the name of the extension module. For example, if the name of the module is leo, the init function