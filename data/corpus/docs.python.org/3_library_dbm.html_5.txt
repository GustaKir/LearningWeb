Title: NDBM Database Functions and DBM Dumb Implementation
URL: https://docs.python.org/3/library/dbm.html
Summary: The NDBM database function 'clear' removes all items from the database. Additionally, the 'dbm.dumb' module provides a portable implementation of the simple DBM interface, serving as a fallback when more robust DBM modules are unavailable. This information was added in Python version 3.13.
---

ndbm.clear()[¶](https://docs.python.org/3/library/dbm.html#dbm.ndbm.ndbm.clear "Link to this definition")
    
Remove all items from the NDBM database.
Added in version 3.13.
## [`dbm.dumb`](https://docs.python.org/3/library/dbm.html#module-dbm.dumb "dbm.dumb: Portable implementation of the simple DBM interface.") — Portable DBM implementation[¶](https://docs.python.org/3/library/dbm.html#module-dbm.dumb "Link to this heading")
**Source code:** [Lib/dbm/dumb.py](https://github.com/python/cpython/tree/3.13/Lib/dbm/dumb.py)
Note
The [`dbm.dumb`](https://docs.python.org/3/library/dbm.html#module-dbm.dumb "dbm.dumb: Portable implementation of the simple DBM interface.") module is intended as a last resort fallback for the [`dbm`](https://docs.python.org/3/library/dbm.html#module-dbm "dbm: Interfaces to various Unix "database" formats.") module when a more robust module is not available. The [`dbm.dumb`](https://docs.python.org/3/library/dbm.html#module-dbm.dumb "dbm.dumb: Portable implementation of the simple DBM interface.") module is not written for speed and is not nearly as heavily used as the other database modules.
The [`dbm.dumb`](https://docs.python.org/3/library/dbm.html#module-dbm.dumb "dbm.dumb: Portable implementation of the simple DBM interface.") module provides a persistent [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict")-like interface which is written entirely in Python. Unlike other [`dbm`](https://docs.python.org/3/library/dbm.html#module-dbm "dbm: Interfaces to various Unix "database" formats.") backends, such as [`dbm.gnu`](https://docs.python.org/3/library/dbm.html#module-dbm.gnu "dbm.gnu: GNU database manager \(Unix\)"), no external library is required.
The `dbm.dumb` module defines the following: 

_exception_ dbm.dumb.error[¶](https://docs.python.org/3/library/dbm.html#dbm.dumb.error "Link to this definition")
    
Raised on [`dbm.dumb`](https://docs.python.org/3/library/dbm.html#module-dbm.dumb "dbm.dumb: Portable implementation of the simple DBM interface.")-specific errors, such as I/O errors. [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError") is raised for general mapping errors like specifying an incorrect key. 

dbm.dumb.open(_filename_ , _flag ='c'_, _mode =0o666_)[¶](https://docs.python.org/3/library/dbm.html#dbm.dumb.open "Link to this definition")
    
Open a `dbm.dumb` database. The returned database object behaves similar to a [mapping](https://docs.python.org/3/glossary.html#term-mapping), in addition to providing [`sync()`](https://docs.python.org/3/library/dbm.html#dbm.dumb.dumbdbm.sync "dbm.dumb.dumbdbm.sync") and [`close()`](https://docs.python.org/3/library/dbm.html#dbm.dumb.dumbdbm.close "dbm.dumb.dumbdbm.close") methods. 

Parameters:
    
  * **filename** – 
The basename of the database file (without extensions). A new database creates the following files:
    * `_filename_.dat`
    * `_filename_.dir`
  * **flag** ([_str_](https://docs.python.org/3/library/stdtypes.html#str "str")) – 
    * `'r'`: Open existing database for reading only.
    * `'w'`: Open existing database for reading and writing.
    * `'c'` (default): Open database for reading and writing, creating it if it doesn’t exist.
    * `'n'`: Always create a new, empty database, open for reading and writing.
  * **mode** ([_int_](https://docs.python.org/3/library/functions.html#int "int")) – The Unix file access mode of the file (default: octal `0o666`), used only when the database has to be created.


Warning
It is possible to crash the Python interpreter when loading a database with a sufficiently large/complex entry due to stack depth limitations in Python’s AST compiler.
Changed in version 3.5: [`open()`](https://docs.python.org/3/library/dbm.html#dbm.dumb.open "dbm.dumb.open") always creates a new database when _flag_ is `'n'`.
Changed in version 3.8: A database opened read-only if _flag_ is `'r'`. A database is not created if it does not exist if _flag_ is `'r'` or `'w'`.
Changed in version 3.11: _filename_ accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object).
In addition to the methods provided by the [`collections.abc.MutableMapping`](https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableMapping "collections.abc.MutableMapping") class, the following methods are provided: 

dumbdbm.sync()[¶](https://docs.python.org/3/library/dbm.html#dbm.dumb.dumbdbm.sync "Link to this definition")
    
Synchronize the on-disk directory and data files. This method is called by the [`shelve.Shelf.sync()`](https://docs.python.org/3/library/shelve.html#shelve.Shelf.sync "shelve.Shelf.sync") method.