Title: os.spawnvpe Function
URL: https://docs.python.org/3/library/os.html
Summary: The os.spawnvpe function executes a specified program in a new process, taking parameters for the execution mode, the file path, arguments, and environment variables. It returns the process ID or the exit code based on the execution mode. The subprocess module is recommended for more advanced process management.
---

os.spawnvpe(_mode_ , _file_ , _args_ , _env_)[¶](https://docs.python.org/3/library/os.html#os.spawnvpe "Link to this definition")
    
Execute the program _path_ in a new process.
(Note that the [`subprocess`](https://docs.python.org/3/library/subprocess.html#module-subprocess "subprocess: Subprocess management.") module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using these functions. Check especially the [Replacing Older Functions with the subprocess Module](https://docs.python.org/3/library/subprocess.html#subprocess-replacements) section.)
If _mode_ is [`P_NOWAIT`](https://docs.python.org/3/library/os.html#os.P_NOWAIT "os.P_NOWAIT"), this function returns the process id of the new process; if _mode_ is [`P_WAIT`](https://docs.python.org/3/library/os.html#os.P_WAIT "os.P_WAIT"), returns the process’s exit code if it exits normally, or `-signal`, where _signal_ is the signal that killed the process. On Windows, the process id will actually be the process handle, so can be used with the [`waitpid()`](https://docs.python.org/3/library/os.html#os.waitpid "os.waitpid") function.
Note on VxWorks, this function doesn’t return `-signal` when the new process is killed. Instead it raises OSError exception.
The “l” and “v” variants of the [`spawn*`](https://docs.python.org/3/library/os.html#os.spawnl "os.spawnl") functions differ in how command-line arguments are passed. The “l” variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the `spawnl*()` functions. The “v” variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the _args_ parameter. In either case, the arguments to the child process must start with the name of the command being run.
The variants which include a second “p” near the end ([`spawnlp()`](https://docs.python.org/3/library/os.html#os.spawnlp "os.spawnlp"), [`spawnlpe()`](https://docs.python.org/3/library/os.html#os.spawnlpe "os.spawnlpe"), [`spawnvp()`](https://docs.python.org/3/library/os.html#os.spawnvp "os.spawnvp"), and [`spawnvpe()`](https://docs.python.org/3/library/os.html#os.spawnvpe "os.spawnvpe")) will use the `PATH` environment variable to locate the program _file_. When the environment is being replaced (using one of the [`spawn*e`](https://docs.python.org/3/library/os.html#os.spawnl "os.spawnl") variants, discussed in the next paragraph), the new environment is used as the source of the `PATH` variable. The other variants, [`spawnl()`](https://docs.python.org/3/library/os.html#os.spawnl "os.spawnl"), [`spawnle()`](https://docs.python.org/3/library/os.html#os.spawnle "os.spawnle"), [`spawnv()`](https://docs.python.org/3/library/os.html#os.spawnv "os.spawnv"), and [`spawnve()`](https://docs.python.org/3/library/os.html#os.spawnve "os.spawnve"), will not use the `PATH` variable to locate the executable; _path_ must contain an appropriate absolute or relative path.
For [`spawnle()`](https://docs.python.org/3/library/os.html#os.spawnle "os.spawnle"), [`spawnlpe()`](https://docs.python.org/3/library/os.html#os.spawnlpe "os.spawnlpe"), [`spawnve()`](https://docs.python.org/3/library/os.html#os.spawnve "os.spawnve"), and [`spawnvpe()`](https://docs.python.org/3/library/os.html#os.spawnvpe "os.spawnvpe") (note that these all end in “e”), the _env_ parameter must be a mapping which is used to define the environment variables for the new process (they are used instead of the current process’ environment); the functions [`spawnl()`](https://docs.python.org/3/library/os.html#os.spawnl "os.spawnl"), [`spawnlp()`](https://docs.python.org/3/library/os.html#os.spawnlp "os.spawnlp"), [`spawnv()`](https://docs.python.org/3/library/os.html#os.spawnv "os.spawnv"), and [`spawnvp()`](https://docs.python.org/3/library/os.html#os.spawnvp "os.spawnvp") all cause the new process to inherit the environment of the current process. Note that keys and values in the _env_ dictionary must be strings; invalid keys or values will cause the function to fail, with a return value of `127`.
As an example, the following calls to [`spawnlp()`](https://docs.python.org/3/library/os.html#os.spawnlp "os.spawnlp") and [`spawnvpe()`](https://docs.python.org/3/library/os.html#os.spawnvpe "os.spawnvpe") are equivalent:
```
importos
os.spawnlp(os.P_WAIT, 'cp', 'cp', 'index.html', '/dev/null')
L = ['cp', 'index.html', '/dev/null']
os.spawnvpe(os.P_WAIT, 'cp', L, os.environ)