Title: Python Debugger (pdb) Commands
URL: https://docs.python.org/3/library/pdb.html
Summary: This section details two commands introduced in Python version 3.2 for the debugger (pdb). The `undisplay` command removes an expression from the current frame's display, and without an expression, it clears all display expressions. The `interact` command starts an interactive interpreter in a new global namespace, allowing users to execute code without affecting the original variables in the current scope.
---

```

Added in version 3.2. 

undisplay [expression][¶](https://docs.python.org/3/library/pdb.html#pdbcommand-undisplay "Link to this definition")
    
Do not display _expression_ anymore in the current frame. Without _expression_ , clear all display expressions for the current frame.
Added in version 3.2. 

interact[¶](https://docs.python.org/3/library/pdb.html#pdbcommand-interact "Link to this definition")
    
Start an interactive interpreter (using the [`code`](https://docs.python.org/3/library/code.html#module-code "code: Facilities to implement read-eval-print loops.") module) in a new global namespace initialised from the local and global namespaces for the current scope. Use `exit()` or `quit()` to exit the interpreter and return to the debugger.
Note
As `interact` creates a new dedicated namespace for code execution, assignments to variables will not affect the original namespaces. However, modifications to any referenced mutable objects will be reflected in the original namespaces as usual.
Added in version 3.2.
Changed in version 3.13: `exit()` and `quit()` can be used to exit the [`interact`](https://docs.python.org/3/library/pdb.html#pdbcommand-interact) command.
Changed in version 3.13: [`interact`](https://docs.python.org/3/library/pdb.html#pdbcommand-interact) directs its output to the debugger’s output channel rather than [`sys.stderr`](https://docs.python.org/3/library/sys.html#sys.stderr "sys.stderr"). 

alias [name [command]][¶](https://docs.python.org/3/library/pdb.html#pdbcommand-alias "Link to this definition")
    
Create an alias called _name_ that executes _command_. The _command_ must _not_ be enclosed in quotes. Replaceable parameters can be indicated by `%1`, `%2`, … and `%9`, while `%*` is replaced by all the parameters. If _command_ is omitted, the current alias for _name_ is shown. If no arguments are given, all aliases are listed.
Aliases may be nested and can contain anything that can be legally typed at the pdb prompt. Note that internal pdb commands _can_ be overridden by aliases. Such a command is then hidden until the alias is removed. Aliasing is recursively applied to the first word of the command line; all other words in the line are left alone.
As an example, here are two useful aliases (especially when placed in the `.pdbrc` file):
```
# Print instance variables (usage "pi classInst")
alias pi for k in %1.__dict__.keys(): print(f"%1.{k} = {%1.__dict__[k]}")
# Print instance variables in self
alias ps pi self

```


unalias name[¶](https://docs.python.org/3/library/pdb.html#pdbcommand-unalias "Link to this definition")
    
Delete the specified alias _name_. 

! statement[¶](https://docs.python.org/3/library/pdb.html#pdbcommand-0 "Link to this definition")
    
Execute the (one-line) _statement_ in the context of the current stack frame. The exclamation point can be omitted unless the first word of the statement resembles a debugger command, e.g.:
```
(Pdb) ! n=42
(Pdb)

```

To set a global variable, you can prefix the assignment command with a [`global`](https://docs.python.org/3/reference/simple_stmts.html#global) statement on the same line, e.g.:
```
(Pdb) global list_options; list_options = ['-l']
(Pdb)