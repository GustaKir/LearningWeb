Title: Mapping Patterns in Python
URL: https://docs.python.org/3/reference/compound_stmts.html
Summary: This section outlines the rules for using mapping patterns in Python. It specifies that a mapping pattern can include at most one double star pattern, which must be the last subpattern. It disallows duplicate keys, raising a SyntaxError for duplicate literal keys and a ValueError for keys with equivalent values. The validation process for matching a mapping pattern against a subject involves checks for mapping type, key presence, and key pattern matching.
---

```

At most one double star pattern may be in a mapping pattern. The double star pattern must be the last subpattern in the mapping pattern.
Duplicate keys in mapping patterns are disallowed. Duplicate literal keys will raise a [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError"). Two keys that otherwise have the same value will raise a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") at runtime.
The following is the logical flow for matching a mapping pattern against a subject value:
  1. If the subject value is not a mapping [[3]](https://docs.python.org/3/reference/compound_stmts.html#id22),the mapping pattern fails.
  2. If every key given in the mapping pattern is present in the subject mapping, and the pattern for each key matches the corresponding item of the subject mapping, the mapping pattern succeeds.
  3. If duplicate keys are detected in the mapping pattern, the pattern is considered invalid. A [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") is raised for duplicate literal values; or a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") for named keys of the same value.


Note
Key-value pairs are matched using the two-argument form of the mapping subject’s `get()` method. Matched key-value pairs must already be present in the mapping, and not created on-the-fly via `__missing__()` or [`__getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__getitem__ "object.__getitem__").
In simple terms `{KEY1: P1, KEY2: P2, ... }` matches only if all the following happens:
  * check `<subject>` is a mapping
  * `KEY1 in <subject>`
  * `P1` matches `<subject>[KEY1]`
  * … and so on for the corresponding KEY/pattern pair.


#### 8.6.4.10. Class Patterns[¶](https://docs.python.org/3/reference/compound_stmts.html#class-patterns "Link to this heading")
A class pattern represents a class and its positional and keyword arguments (if any). Syntax:
```
**class_pattern**    ::= [name_or_attr](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-name_or_attr) "(" [[pattern_arguments](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-pattern_arguments) ","?] ")"
**pattern_arguments**  ::= [positional_patterns](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-positional_patterns) ["," [keyword_patterns](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-keyword_patterns)]
            | [keyword_patterns](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-keyword_patterns)
**positional_patterns** ::= ",".[pattern](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-pattern)+
**keyword_patterns**  ::= ",".[keyword_pattern](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-keyword_pattern)+
**keyword_pattern**   ::= NAME "=" [pattern](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-pattern)