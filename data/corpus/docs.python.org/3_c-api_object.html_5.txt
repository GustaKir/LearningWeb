Title: PyObject_GenericGetDict Function
URL: https://docs.python.org/3/c-api/object.html
Summary: The `PyObject_GenericGetDict` function provides a generic implementation for retrieving the `__dict__` of a Python object. It creates the dictionary if it doesn't exist and should be called with `NULL` for context. This function is part of the Stable ABI since version 3.10 and may allocate memory, making `PyObject_GetAttr()` a potentially more efficient choice for attribute access.
---

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyObject_GenericGetDict([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o, void*context)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_GenericGetDict "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.10._
A generic implementation for the getter of a `__dict__` descriptor. It creates the dictionary if necessary.
This function may also be called to get the [`__dict__`](https://docs.python.org/3/reference/datamodel.html#object.__dict__ "object.__dict__") of the object _o_. Pass `NULL` for _context_ when calling it. Since this function may need to allocate memory for the dictionary, it may be more efficient to call [`PyObject_GetAttr()`](https://docs.python.org/3/c-api/object.html#c.PyObject_GetAttr "PyObject_GetAttr") when accessing an attribute on the object.
On failure, returns `NULL` with an exception set.
Added in version 3.3. 

intPyObject_GenericSetDict([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*value, void*context)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_GenericSetDict "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.7._
A generic implementation for the setter of a `__dict__` descriptor. This implementation does not allow the dictionary to be deleted.
Added in version 3.3. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")**_PyObject_GetDictPtr([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*obj)[¶](https://docs.python.org/3/c-api/object.html#c._PyObject_GetDictPtr "Link to this definition")
    
Return a pointer to [`__dict__`](https://docs.python.org/3/reference/datamodel.html#object.__dict__ "object.__dict__") of the object _obj_. If there is no `__dict__`, return `NULL` without setting an exception.
This function may need to allocate memory for the dictionary, so it may be more efficient to call [`PyObject_GetAttr()`](https://docs.python.org/3/c-api/object.html#c.PyObject_GetAttr "PyObject_GetAttr") when accessing an attribute on the object. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyObject_RichCompare([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o1, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o2, intopid)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_RichCompare "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Compare the values of _o1_ and _o2_ using the operation specified by _opid_ , which must be one of [`Py_LT`](https://docs.python.org/3/c-api/typeobj.html#c.Py_LT "Py_LT"), [`Py_LE`](https://docs.python.org/3/c-api/typeobj.html#c.Py_LE "Py_LE"), [`Py_EQ`](https://docs.python.org/3/c-api/typeobj.html#c.Py_EQ "Py_EQ"), [`Py_NE`](https://docs.python.org/3/c-api/typeobj.html#c.Py_NE "Py_NE"), [`Py_GT`](https://docs.python.org/3/c-api/typeobj.html#c.Py_GT "Py_GT"), or [`Py_GE`](https://docs.python.org/3/c-api/typeobj.html#c.Py_GE "Py_GE"), corresponding to `<`, `<=`, `==`, `!=`, `>`, or `>=` respectively. This is the equivalent of the Python expression `o1 op o2`, where `op` is the operator corresponding to _opid_. Returns the value of the comparison on success, or `NULL` on failure. 

intPyObject_RichCompareBool([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o1, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o2, intopid)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_RichCompareBool "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Compare the values of _o1_ and _o2_ using the operation specified by _opid_ , like [`PyObject_RichCompare()`](https://docs.python.org/3/c-api/object.html#c.PyObject_RichCompare "PyObject_RichCompare"), but returns `-1` on error, `0` if the result is false, `1` otherwise.
Note
If _o1_ and _o2_ are the same object, [`PyObject_RichCompareBool()`](https://docs.python.org/3/c-api/object.html#c.PyObject_RichCompareBool "PyObject_RichCompareBool") will always return `1` for [`Py_EQ`](https://docs.python.org/3/c-api/typeobj.html#c.Py_EQ "Py_EQ") and `0` for [`Py_NE`](https://docs.python.org/3/c-api/typeobj.html#c.Py_NE "Py_NE").