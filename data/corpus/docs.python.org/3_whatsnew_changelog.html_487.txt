Title: Python 3 Changelog Updates
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section details updates in Python 3, including normalization of exception values, restrictions on text following `# type: ignore` comments, storing type ignore text in the AST, treating line continuation at EOF as a `SyntaxError`, and fixing a crash related to keyword dictionary changes during function execution.
---

s.python.org/3/c-api/exceptions.html#c.PyException_SetTraceback "PyException_SetTraceback") to normalize the exception value. Ignore any error.
  * [bpo-36878](https://bugs.python.org/issue?@action=redirect&bpo=36878): Only accept text after `# type: ignore` if the first character is ASCII. This is to disallow things like `# type: ignoreé`.
  * [bpo-36878](https://bugs.python.org/issue?@action=redirect&bpo=36878): Store text appearing after a `# type: ignore` comment in the AST. For example a type ignore like `# type: ignore[E1000]` will have the string `"[E1000]"` stored in its AST node.
  * [bpo-2180](https://bugs.python.org/issue?@action=redirect&bpo=2180): Treat line continuation at EOF as a `SyntaxError` by Anthony Sottile.
  * [bpo-36907](https://bugs.python.org/issue?@action=redirect&bpo=36907): Fix a crash when calling a C function with a keyword dict (`f(**kwargs)`) and changing the dict `kwargs` while that function is running.
  * [bpo-36946](https://bugs.python.org/issue?@action=redirect&bpo=36946): Fix possible signed integer overflow when handling slices.
  * [bpo-36826](https://bugs.python.org/issue?@action=redirect&bpo=36826): Add NamedExpression kind support to ast_unparse.c
  * [bpo-1875](https://bugs.python.org/issue?@action=redirect&bpo=1875): A [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") is now raised if a code blocks that will be optimized away (e.g. if conditions that are always false) contains syntax errors. Patch by Pablo Galindo.
  * [bpo-36027](https://bugs.python.org/issue?@action=redirect&bpo=36027): Allow computation of modular inverses via three-argument `pow`: the second argument is now permitted to be negative in the case where the first and third arguments are relatively prime.
  * [bpo-36861](https://bugs.python.org/issue?@action=redirect&bpo=36861): Update the Unicode database to version 12.1.0.
  * [bpo-28866](https://bugs.python.org/issue?@action=redirect&bpo=28866): Avoid caching attributes of classes which type defines mro() to avoid a hard cache invalidation problem.
  * [bpo-36851](https://bugs.python.org/issue?@action=redirect&bpo=36851): The `FrameType` stack is now correctly cleaned up if the execution ends with a return and the stack is not empty.
  * [bpo-34616](https://bugs.python.org/issue?@action=redirect&bpo=34616): The `compile()` builtin functions now support the `ast.PyCF_ALLOW_TOP_LEVEL_AWAIT` flag, which allow to compile sources that contains top-level `await`, `async with` or `async for`. This is useful to evaluate async-code from with an already async functions; for example in a custom REPL.
  * [bpo-36842](https://bugs.python.org/issue?@action=redirect&bpo=36842): Implement PEP 578, adding sys.audit, io.open_code and related APIs.
  * [bpo-27639](https://bugs.python.org/issue?@action=redirect&bpo=27639): Correct return type for UserList slicing operations. Patch by Michael Blahay, Erick Cervantes, and vaultah
  * [bpo-36737](https://bugs.python.org/issue?@action=redirect&bpo=36737): Move PyRuntimeState.warnings into per-interpreter state (via “module state”).
  * [bpo-36793](https://bugs.python.org/issue?@action=redirect&bpo=36793): Removed `__str__` implementations from builtin types [`bool`](https://docs.python.org/3/library/functions.html#bool "bool"), [`int`](https://docs.python.org/3/library/functions.html#int "int"), [`float`](https://docs.python.org/3/library/functions.html#float "float"), [`complex`](https://docs.python.org/3/library/functions.html#complex "complex") and few classes from the standard library. They now inherit `__str__()` from [`object`](https://docs.python.org/3/library/functions.html#object "object").
  * [bpo-36817](https://bugs.python.org/issue?@action=redirect&bpo=36817): Add a `=` feature f-strings for debugging. This can precede `!s`, `!r`, or `!a`. It produces the text of the expression, followed by an equal sign, followed by the repr of the value of the expression. So `f'{3*9+15=}'` would be equal to the string `'3*9+15=42'`. If `=` is specified, the default conversion is set to `!r`, unless a format spec is given, in which case the formatting behavior is unchanged, and __format__ will be used.
  * [bpo-24048](https://bugs.python.org/issue?@action=redirect&bpo=24048): Save the live exception during import.c’s `remove_module()`.
  * [bpo-27987](https://bugs.python.org/issue?@action=redirect&bpo=27987): pymalloc returns memory blocks aligned by 16 bytes, instead of 8 bytes, on 64-bit platforms to conform x86-64 ABI. Recent compilers assume this alignment more often. Patch by Inada Naoki.
  * [bpo-36601](https://bugs.python.org/issue?@action=redirect&bpo=36601): A long-since-meaningless check for `getpid() == main_pid` was removed from Python’s internal C signal handler.
  * [bpo-36594](https://bugs.python.org/issue?@action=redirect&bpo=36594): Fix incorrect use of `%p` in format strings.