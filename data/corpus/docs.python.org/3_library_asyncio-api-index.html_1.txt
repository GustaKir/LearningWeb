Title: High-level API Index
URL: https://docs.python.org/3/library/asyncio-api-index.html
Summary: This section lists all high-level asyncio APIs that support async/await syntax, including utilities for running programs, managing Tasks, and awaiting multiple operations with timeouts.
---

# High-level API Index[¶](https://docs.python.org/3/library/asyncio-api-index.html#high-level-api-index "Link to this heading")
This page lists all high-level async/await enabled asyncio APIs.
## Tasks[¶](https://docs.python.org/3/library/asyncio-api-index.html#tasks "Link to this heading")
Utilities to run asyncio programs, create Tasks, and await on multiple things with timeouts.
[`run()`](https://docs.python.org/3/library/asyncio-runner.html#asyncio.run "asyncio.run") | Create event loop, run a coroutine, close the loop.  
---|---  
[`Runner`](https://docs.python.org/3/library/asyncio-runner.html#asyncio.Runner "asyncio.Runner") | A context manager that simplifies multiple async function calls.  
[`Task`](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task "asyncio.Task") | Task object.  
[`TaskGroup`](https://docs.python.org/3/library/asyncio-task.html#asyncio.TaskGroup "asyncio.TaskGroup") | A context manager that holds a group of tasks. Provides a convenient and reliable way to wait for all tasks in the group to finish.  
[`create_task()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.create_task "asyncio.create_task") | Start an asyncio Task, then returns it.  
[`current_task()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.current_task "asyncio.current_task") | Return the current Task.  
[`all_tasks()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.all_tasks "asyncio.all_tasks") | Return all tasks that are not yet finished for an event loop.  
`await` [`sleep()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.sleep "asyncio.sleep") | Sleep for a number of seconds.  
`await` [`gather()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.gather "asyncio.gather") | Schedule and wait for things concurrently.  
`await` [`wait_for()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.wait_for "asyncio.wait_for") | Run with a timeout.  
`await` [`shield()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.shield "asyncio.shield") | Shield from cancellation.  
`await` [`wait()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.wait "asyncio.wait") | Monitor for completion.  
[`timeout()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.timeout "asyncio.timeout") | Run with a timeout. Useful in cases when `wait_for` is not suitable.  
[`to_thread()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.to_thread "asyncio.to_thread") | Asynchronously run a function in a separate OS thread.  
[`run_coroutine_threadsafe()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.run_coroutine_threadsafe "asyncio.run_coroutine_threadsafe") | Schedule a coroutine from another OS thread.  
`for in` [`as_completed()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.as_completed "asyncio.as_completed") | Monitor for completion with a `for` loop.  
Examples
  * [Using asyncio.gather() to run things in parallel](https://docs.python.org/3/library/asyncio-task.html#asyncio-example-gather).
  * [Using asyncio.wait_for() to enforce a timeout](https://docs.python.org/3/library/asyncio-task.html#asyncio-example-waitfor).
  * [Cancellation](https://docs.python.org/3/library/asyncio-task.html#asyncio-example-task-cancel).
  * [Using asyncio.sleep()](https://docs.python.org/3/library/asyncio-task.html#asyncio-example-sleep).
  * See also the main [Tasks documentation page](https://docs.python.org/3/library/asyncio-task.html#coroutine).


## Queues[¶](https://docs.python.org/3/library/asyncio-api-index.html#queues "Link to this heading")
Queues should be used to distribute work amongst multiple asyncio Tasks, implement connection pools, and pub/sub patterns.
[`Queue`](https://docs.python.org/3/library/asyncio-queue.html#asyncio.Queue "asyncio.Queue") | A FIFO queue.  
---|---  
[`PriorityQueue`](https://docs.python.org/3/library/asyncio-queue.html#asyncio.PriorityQueue "asyncio.PriorityQueue") | A priority queue.  
[`LifoQueue`](https://docs.python.org/3/library/asyncio-queue.html#asyncio.LifoQueue "asyncio.LifoQueue") | A LIFO queue.  
Examples
  * [Using asyncio.Queue to distribute workload between several Tasks](https://docs.python.org/3/library/asyncio-queue.html#asyncio-example-queue-dist).
  * See also the [Queues documentation page](https://docs.python.org/3/library/asyncio-queue.html#asyncio-queues).