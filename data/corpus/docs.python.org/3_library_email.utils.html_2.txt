Title: Email Utilities - Date Parsing in Python
URL: https://docs.python.org/3/library/email.utils.html
Summary: The 'email.utils.parsedate' function attempts to parse an RFC 2822 formatted date string, accommodating some non-compliant mailers. It returns a 9-tuple for successfully parsed dates, which can be used with 'time.mktime()'. A new optional '_strict_' parameter was introduced in version 3.13 to reject malformed inputs by default.
---

```

Changed in version 3.13: Add _strict_ optional parameter and reject malformed inputs by default. 

email.utils.parsedate(_date_)[¶](https://docs.python.org/3/library/email.utils.html#email.utils.parsedate "Link to this definition")
    
Attempts to parse a date according to the rules in [**RFC 2822**](https://datatracker.ietf.org/doc/html/rfc2822.html). however, some mailers don’t follow that format as specified, so [`parsedate()`](https://docs.python.org/3/library/email.utils.html#email.utils.parsedate "email.utils.parsedate") tries to guess correctly in such cases. _date_ is a string containing an [**RFC 2822**](https://datatracker.ietf.org/doc/html/rfc2822.html) date, such as `"Mon, 20 Nov 1995 19:12:08 -0500"`. If it succeeds in parsing the date, [`parsedate()`](https://docs.python.org/3/library/email.utils.html#email.utils.parsedate "email.utils.parsedate") returns a 9-tuple that can be passed directly to [`time.mktime()`](https://docs.python.org/3/library/time.html#time.mktime "time.mktime"); otherwise `None` will be returned. Note that indexes 6, 7, and 8 of the result tuple are not usable. 

email.utils.parsedate_tz(_date_)[¶](https://docs.python.org/3/library/email.utils.html#email.utils.parsedate_tz "Link to this definition")
    
Performs the same function as [`parsedate()`](https://docs.python.org/3/library/email.utils.html#email.utils.parsedate "email.utils.parsedate"), but returns either `None` or a 10-tuple; the first 9 elements make up a tuple that can be passed directly to [`time.mktime()`](https://docs.python.org/3/library/time.html#time.mktime "time.mktime"), and the tenth is the offset of the date’s timezone from UTC (which is the official term for Greenwich Mean Time) [[1]](https://docs.python.org/3/library/email.utils.html#id2). If the input string has no timezone, the last element of the tuple returned is `0`, which represents UTC. Note that indexes 6, 7, and 8 of the result tuple are not usable. 

email.utils.parsedate_to_datetime(_date_)[¶](https://docs.python.org/3/library/email.utils.html#email.utils.parsedate_to_datetime "Link to this definition")
    
The inverse of [`format_datetime()`](https://docs.python.org/3/library/email.utils.html#email.utils.format_datetime "email.utils.format_datetime"). Performs the same function as [`parsedate()`](https://docs.python.org/3/library/email.utils.html#email.utils.parsedate "email.utils.parsedate"), but on success returns a [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime"); otherwise `ValueError` is raised if _date_ contains an invalid value such as an hour greater than 23 or a timezone offset not between -24 and 24 hours. If the input date has a timezone of `-0000`, the `datetime` will be a naive `datetime`, and if the date is conforming to the RFCs it will represent a time in UTC but with no indication of the actual source timezone of the message the date comes from. If the input date has any other valid timezone offset, the `datetime` will be an aware `datetime` with the corresponding a [`timezone`](https://docs.python.org/3/library/datetime.html#datetime.timezone "datetime.timezone") [`tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo "datetime.tzinfo").
Added in version 3.3. 

email.utils.mktime_tz(_tuple_)[¶](https://docs.python.org/3/library/email.utils.html#email.utils.mktime_tz "Link to this definition")
    
Turn a 10-tuple as returned by [`parsedate_tz()`](https://docs.python.org/3/library/email.utils.html#email.utils.parsedate_tz "email.utils.parsedate_tz") into a UTC timestamp (seconds since the Epoch). If the timezone item in the tuple is `None`, assume local time. 

email.utils.formatdate(_timeval =None_, _localtime =False_, _usegmt =False_)[¶](https://docs.python.org/3/library/email.utils.html#email.utils.formatdate "Link to this definition")
    
Returns a date string as per [**RFC 2822**](https://datatracker.ietf.org/doc/html/rfc2822.html), e.g.:
```
Fri, 09 Nov 2001 01:08:47 -0000