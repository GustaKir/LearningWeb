Title: Python 3.8 Changes and Enhancements
URL: https://docs.python.org/3/whatsnew/3.8.html
Summary: This document outlines notable changes in Python 3.8, including updates to the `expanduser()` function on Windows which now prioritizes `USERPROFILE`, and the modification of the `asyncio.CancelledError` to inherit from `BaseException` instead of `Exception`.
---

(Contributed by Serhiy Storchaka in [bpo-32892](https://bugs.python.org/issue?@action=redirect&bpo=32892).)
  * [`expanduser()`](https://docs.python.org/3/library/os.path.html#os.path.expanduser "os.path.expanduser") on Windows now prefers the `USERPROFILE` environment variable and does not use `HOME`, which is not normally set for regular user accounts. (Contributed by Anthony Sottile in [bpo-36264](https://bugs.python.org/issue?@action=redirect&bpo=36264).)
  * The exception [`asyncio.CancelledError`](https://docs.python.org/3/library/asyncio-exceptions.html#asyncio.CancelledError "asyncio.CancelledError") now inherits from [`BaseException`](https://docs.python.org/3/library/exceptions.html#BaseException "BaseException") rather than [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception "Exception") and no longer inherits from [`concurrent.futures.CancelledError`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.CancelledError "concurrent.futures.CancelledError"). (Contributed by Yury Selivanov in [bpo-32528](https://bugs.python.org/issue?@action=redirect&bpo=32528).)
  * The function [`asyncio.wait_for()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.wait_for "asyncio.wait_for") now correctly waits for cancellation when using an instance of [`asyncio.Task`](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task "asyncio.Task"). Previously, upon reaching _timeout_ , it was cancelled and immediately returned. (Contributed by Elvis Pranskevichus in [bpo-32751](https://bugs.python.org/issue?@action=redirect&bpo=32751).)
  * The function [`asyncio.BaseTransport.get_extra_info()`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.BaseTransport.get_extra_info "asyncio.BaseTransport.get_extra_info") now returns a safe to use socket object when ‘socket’ is passed to the _name_ parameter. (Contributed by Yury Selivanov in [bpo-37027](https://bugs.python.org/issue?@action=redirect&bpo=37027).)
  * [`asyncio.BufferedProtocol`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.BufferedProtocol "asyncio.BufferedProtocol") has graduated to the stable API.


  * DLL dependencies for extension modules and DLLs loaded with [`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "ctypes: A foreign function library for Python.") on Windows are now resolved more securely. Only the system paths, the directory containing the DLL or PYD file, and directories added with [`add_dll_directory()`](https://docs.python.org/3/library/os.html#os.add_dll_directory "os.add_dll_directory") are searched for load-time dependencies. Specifically, `PATH` and the current working directory are no longer used, and modifications to these will no longer have any effect on normal DLL resolution. If your application relies on these mechanisms, you should check for [`add_dll_directory()`](https://docs.python.org/3/library/os.html#os.add_dll_directory "os.add_dll_directory") and if it exists, use it to add your DLLs directory while loading your library. Note that Windows 7 users will need to ensure that Windows Update KB2533623 has been installed (this is also verified by the installer). (Contributed by Steve Dower in [bpo-36085](https://bugs.python.org/issue?@action=redirect&bpo=36085).)
  * The header files and functions related to pgen have been removed after its replacement by a pure Python implementation. (Contributed by Pablo Galindo in [bpo-36623](https://bugs.python.org/issue?@action=redirect&bpo=36623).)
  * [`types.CodeType`](https://docs.python.org/3/library/types.html#types.CodeType "types.CodeType") has a new parameter in the second position of the constructor (_posonlyargcount_) to support positional-only arguments defined in [**PEP 570**](https://peps.python.org/pep-0570/). The first argument (_argcount_) now represents the total number of positional arguments (including positional-only arguments). The new `replace()` method of [`types.CodeType`](https://docs.python.org/3/library/types.html#types.CodeType "types.CodeType") can be used to make the code future-proof.
  * The parameter `digestmod` for [`hmac.new()`](https://docs.python.org/3/library/hmac.html#hmac.new "hmac.new") no longer uses the MD5 digest by default.