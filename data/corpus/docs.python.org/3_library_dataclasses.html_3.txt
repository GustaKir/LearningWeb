Title: Data Classes in Python
URL: https://docs.python.org/3/library/dataclasses.html
Summary: This section discusses the `__match_args__` attribute in data classes, explaining how it is created from non keyword-only parameters in the generated `__init__()` method. It highlights that if certain conditions are met, `__match_args__` will not be generated, and it introduces the `_kw_only_` option that allows fields to be marked as keyword-only, affecting how `__init__()` is called.
---

ject.__match_args__ "object.__match_args__") tuple will be created from the list of non keyword-only parameters to the generated [`__init__()`](https://docs.python.org/3/reference/datamodel.html#object.__init__ "object.__init__") method (even if `__init__()` is not generated, see above). If false, or if `__match_args__` is already defined in the class, then `__match_args__` will not be generated.


> Added in version 3.10.
  * _kw_only_ : If true (the default value is `False`), then all fields will be marked as keyword-only. If a field is marked as keyword-only, then the only effect is that the [`__init__()`](https://docs.python.org/3/reference/datamodel.html#object.__init__ "object.__init__") parameter generated from a keyword-only field must be specified with a keyword when `__init__()` is called. See the [parameter](https://docs.python.org/3/glossary.html#term-parameter) glossary entry for details. Also see the [`KW_ONLY`](https://docs.python.org/3/library/dataclasses.html#dataclasses.KW_ONLY "dataclasses.KW_ONLY") section.
Keyword-only fields are not included in `__match_args__`.


> Added in version 3.10.
  * _slots_ : If true (the default is `False`), [`__slots__`](https://docs.python.org/3/reference/datamodel.html#object.__slots__ "object.__slots__") attribute will be generated and new class will be returned instead of the original one. If `__slots__` is already defined in the class, then [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") is raised.


> Warning
> Calling no-arg [`super()`](https://docs.python.org/3/library/functions.html#super "super") in dataclasses using `slots=True` will result in the following exception being raised: `TypeError: super(type, obj): obj must be an instance or subtype of type`. The two-arg [`super()`](https://docs.python.org/3/library/functions.html#super "super") is a valid workaround. See [gh-90562](https://github.com/python/cpython/issues/90562) for full details.
> Warning
> Passing parameters to a base class [`__init_subclass__()`](https://docs.python.org/3/reference/datamodel.html#object.__init_subclass__ "object.__init_subclass__") when using `slots=True` will result in a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError"). Either use `__init_subclass__` with no parameters or use default values as a workaround. See [gh-91126](https://github.com/python/cpython/issues/91126) for full details.
> Added in version 3.10.
> Changed in version 3.11: If a field name is already included in the `__slots__` of a base class, it will not be included in the generated `__slots__` to prevent [overriding them](https://docs.python.org/3/reference/datamodel.html#datamodel-note-slots). Therefore, do not use `__slots__` to retrieve the field names of a dataclass. Use [`fields()`](https://docs.python.org/3/library/dataclasses.html#dataclasses.fields "dataclasses.fields") instead. To be able to determine inherited slots, base class `__slots__` may be any iterable, but _not_ an iterator.
  * _weakref_slot_ : If true (the default is `False`), add a slot named “__weakref__”, which is required to make an instance [`weakref-able`](https://docs.python.org/3/library/weakref.html#weakref.ref "weakref.ref"). It is an error to specify `weakref_slot=True` without also specifying `slots=True`.


> Added in version 3.11.
`field`s may optionally specify a default value, using normal Python syntax:
```
@dataclass
classC:
  a: int    # 'a' has no default value
  b: int = 0  # assign a default value for 'b'

```

In this example, both `a` and `b` will be included in the added [`__init__()`](https://docs.python.org/3/reference/datamodel.html#object.__init__ "object.__init__") method, which will be defined as:
```
def__init__(self, a: int, b: int = 0):

```

[`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") will be raised if a field without a default value follows a field with a default value. This is true whether this occurs in a single class, or as a result of class inheritance. 

dataclasses.field(_*_ , _default =MISSING_, _default_factory =MISSING_, _init =True_, _repr =True_, _hash =None_, _compare =True_, _metadata =None_, _kw_only =MISSING_)[¶](https://docs.python.org/3/library/dataclasses.html#dataclasses.field "Link to this definition")
    
For common and simple use cases, no other functionality is required. There are, however, some dataclass features that require additional per-field information. To satisfy this need for additional information, you can replace the default field value with a call to the provided `field()` function. For example:
```
@dataclass
classC:
  mylist: list[int] = field(default_factory=list)
c = C()
c.mylist += [1, 2, 3]