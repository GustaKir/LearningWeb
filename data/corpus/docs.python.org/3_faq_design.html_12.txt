Title: Python FAQ: Design Choices and Syntax
URL: https://docs.python.org/3/faq/design.html
Summary: This section discusses design choices in Python syntax, highlighting the importance of using colons for readability and syntax highlighting in conditionals. It also explains the rationale behind allowing trailing commas in lists, tuples, and dictionaries, emphasizing the benefits of consistency and better style.
---

```
if a == b
  print(a)

```

versus
```
if a == b:
  print(a)

```

Notice how the second one is slightly easier to read. Notice further how a colon sets off the example in this FAQ answer; it’s a standard usage in English.
Another minor reason is that the colon makes it easier for editors with syntax highlighting; they can look for colons to decide when indentation needs to be increased instead of having to do a more elaborate parsing of the program text.
## [Why does Python allow commas at the end of lists and tuples?](https://docs.python.org/3/faq/design.html#id30)[¶](https://docs.python.org/3/faq/design.html#why-does-python-allow-commas-at-the-end-of-lists-and-tuples "Link to this heading")
Python lets you add a trailing comma at the end of lists, tuples, and dictionaries:
```
[1, 2, 3,]
('a', 'b', 'c',)
d = {
  "A": [1, 5],
  "B": [6, 7], # last trailing comma is optional but good style
}

```

There are several reasons to allow this.
When you have a literal value for a list, tuple, or dictionary spread across multiple lines, it’s easier to add more elements because you don’t have to remember to add a comma to the previous line. The lines can also be reordered without creating a syntax error.
Accidentally omitting the comma can lead to errors that are hard to diagnose. For example:
```
x = [
 "fee",
 "fie"
 "foo",
 "fum"
]

```

This list looks like it has four elements, but it actually contains three: “fee”, “fiefoo” and “fum”. Always adding the comma avoids this source of error.
Allowing the trailing comma may also make programmatic code generation easier.
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [Design and History FAQ](https://docs.python.org/3/faq/design.html)
    * [Why does Python use indentation for grouping of statements?](https://docs.python.org/3/faq/design.html#why-does-python-use-indentation-for-grouping-of-statements)
    * [Why am I getting strange results with simple arithmetic operations?](https://docs.python.org/3/faq/design.html#why-am-i-getting-strange-results-with-simple-arithmetic-operations)
    * [Why are floating-point calculations so inaccurate?](https://docs.python.org/3/faq/design.html#why-are-floating-point-calculations-so-inaccurate)
    * [Why are Python strings immutable?](https://docs.python.org/3/faq/design.html#why-are-python-strings-immutable)
    * [Why must ‘self’ be used explicitly in method definitions and calls?](https://docs.python.org/3/faq/design.html#why-must-self-be-used-explicitly-in-method-definitions-and-calls)
    * [Why can’t I use an assignment in an expression?](https://docs.python.org/3/faq/design.html#why-can-t-i-use-an-assignment-in-an-expression)
    * [Why does Python use methods for some functionality (e.g. list.index()) but functions for other (e.g. len(list))?](https://docs.python.org/3/faq/design.html#why-does-python-use-methods-for-some-functionality-e-g-list-index-but-functions-for-other-e-g-len-list)
    * [Why is join() a string method instead of a list or tuple method?](https://docs.python.org/3/faq/design.html#why-is-join-a-string-method-instead-of-a-list-or-tuple-method)
    * [How fast are exceptions?](https://docs.python.org/3/faq/design.html#how-fast-are-exceptions)
    * [Why isn’t there a switch or case statement in Python?](https://docs.python.org/3/faq/design.html#why-isn-t-there-a-switch-or-case-statement-in-python)
    * [Can’t you emulate threads in the interpreter instead of relying on an OS-specific thread implementation?](https://docs.python.org/3/faq/design.html#can-t-you-emulate-threads-in-the-interpreter-instead-of-relying-on-an-os-specific-thread-implementation)
    * [Why can’t lambda expressions contain statements?](https://docs.python.org/3/faq/design.html#why-can-t-lambda-expressions-contain-statements)
    * [Can Python be compiled to machine code, C or some other language?](https://docs.python.org/3/faq/design.html#can-python-be-compiled-to-machine-code-c-or-some-other-language)
    * [How does Python manage memory?](https://docs.python.org/3/faq/design.html#how-does-python-manage-memory)
    * [Why doesn’t CPython use a more traditional garbage collection scheme?](https://docs.python.org/3/faq/design.html#why-doesn-t-cpython-use-a-more-traditional-garbage-collection-scheme)
    * [Why isn’t all memory freed when CPython exits?](https://docs.python.org/3/faq/design.html#why-isn-t-all-memory-freed-when-cpython-exits)
    * [Why are there separate tuple and list data types?](https://docs.python.org/3/faq/design.html#why-are-there-separate-tuple-and-list-data-types)
    * [How are lists implemented in CPython?](https://docs.python.org/3/faq/design.html#how-are-lists-implemented-in-cpython)
    * [How are dictionaries implemented in CPython?](https://docs.python.org/3/faq/design.html#how-are-dictionaries-implemented-in-cpython)
    * [Why must dictionary keys be immutable?](https://docs.python.org/3/faq/design.html#why-must-dictionary-keys-be-immutable)
    * [Why doesn’t list.sort() re