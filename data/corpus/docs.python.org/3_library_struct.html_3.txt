Title: Byte Order and Size in the Struct Module
URL: https://docs.python.org/3/library/struct.html
Summary: This section explains the concept of native byte order, which varies by system (big-endian vs. little-endian), and how to check it using `sys.byteorder`. It notes the significance of native size and alignment, which are determined by the C compiler's `sizeof`, and the distinction between format characters like `'@'` and `'='` in the struct module. Additionally, it highlights the `'!'` format which denotes network byte order, always big-endian.
---

```

Native byte order is big-endian or little-endian, depending on the host system. For example, Intel x86, AMD64 (x86-64), and Apple M1 are little-endian; IBM z and many legacy architectures are big-endian. Use [`sys.byteorder`](https://docs.python.org/3/library/sys.html#sys.byteorder "sys.byteorder") to check the endianness of your system.
Native size and alignment are determined using the C compiler’s `sizeof` expression. This is always combined with native byte order.
Standard size depends only on the format character; see the table in the [Format Characters](https://docs.python.org/3/library/struct.html#format-characters) section.
Note the difference between `'@'` and `'='`: both use native byte order, but the size and alignment of the latter is standardized.
The form `'!'` represents the network byte order which is always big-endian as defined in [IETF RFC 1700](https://datatracker.ietf.org/doc/html/rfc1700).
There is no way to indicate non-native byte order (force byte-swapping); use the appropriate choice of `'<'` or `'>'`.
Notes:
  1. Padding is only automatically added between successive structure members. No padding is added at the beginning or the end of the encoded struct.
  2. No padding is added when using non-native size and alignment, e.g. with ‘<’, ‘>’, ‘=’, and ‘!’.
  3. To align the end of a structure to the alignment requirement of a particular type, end the format with the code for that type with a repeat count of zero. See [Examples](https://docs.python.org/3/library/struct.html#struct-examples).