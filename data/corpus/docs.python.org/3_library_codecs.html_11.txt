Title: StreamReader Constructor in Codecs Module
URL: https://docs.python.org/3/library/codecs.html
Summary: The `StreamReader` constructor initializes a StreamReader instance, requiring a file-like object for reading data. It allows additional keyword arguments while specifying 'errors' for different error handling schemes supported by the codec.
---

_class_ codecs.StreamReader(_stream_ , _errors ='strict'_)[¶](https://docs.python.org/3/library/codecs.html#codecs.StreamReader "Link to this definition")
    
Constructor for a [`StreamReader`](https://docs.python.org/3/library/codecs.html#codecs.StreamReader "codecs.StreamReader") instance.
All stream readers must provide this constructor interface. They are free to add additional keyword arguments, but only the ones defined here are used by the Python codec registry.
The _stream_ argument must be a file-like object open for reading text or binary data, as appropriate for the specific codec.
The [`StreamReader`](https://docs.python.org/3/library/codecs.html#codecs.StreamReader "codecs.StreamReader") may implement different error handling schemes by providing the _errors_ keyword argument. See [Error Handlers](https://docs.python.org/3/library/codecs.html#error-handlers) for the standard error handlers the underlying stream codec may support.
The _errors_ argument will be assigned to an attribute of the same name. Assigning to this attribute makes it possible to switch between different error handling strategies during the lifetime of the [`StreamReader`](https://docs.python.org/3/library/codecs.html#codecs.StreamReader "codecs.StreamReader") object.
The set of allowed values for the _errors_ argument can be extended with [`register_error()`](https://docs.python.org/3/library/codecs.html#codecs.register_error "codecs.register_error"). 

read(_size =-1_, _chars =-1_, _firstline =False_)[¶](https://docs.python.org/3/library/codecs.html#codecs.StreamReader.read "Link to this definition")
    
Decodes data from the stream and returns the resulting object.
The _chars_ argument indicates the number of decoded code points or bytes to return. The [`read()`](https://docs.python.org/3/library/codecs.html#codecs.StreamReader.read "codecs.StreamReader.read") method will never return more data than requested, but it might return less, if there is not enough available.
The _size_ argument indicates the approximate maximum number of encoded bytes or code points to read for decoding. The decoder can modify this setting as appropriate. The default value -1 indicates to read and decode as much as possible. This parameter is intended to prevent having to decode huge files in one step.
The _firstline_ flag indicates that it would be sufficient to only return the first line, if there are decoding errors on later lines.
The method should use a greedy read strategy meaning that it should read as much data as is allowed within the definition of the encoding and the given size, e.g. if optional encoding endings or state markers are available on the stream, these should be read too. 

readline(_size =None_, _keepends =True_)[¶](https://docs.python.org/3/library/codecs.html#codecs.StreamReader.readline "Link to this definition")
    
Read one line from the input stream and return the decoded data.
_size_ , if given, is passed as size argument to the stream’s [`read()`](https://docs.python.org/3/library/codecs.html#codecs.StreamReader.read "codecs.StreamReader.read") method.
If _keepends_ is false line-endings will be stripped from the lines returned. 

readlines(_sizehint =None_, _keepends =True_)[¶](https://docs.python.org/3/library/codecs.html#codecs.StreamReader.readlines "Link to this definition")
    
Read all lines available on the input stream and return them as a list of lines.
Line-endings are implemented using the codec’s [`decode()`](https://docs.python.org/3/library/codecs.html#codecs.decode "codecs.decode") method and are included in the list entries if _keepends_ is true.
_sizehint_ , if given, is passed as the _size_ argument to the stream’s [`read()`](https://docs.python.org/3/library/codecs.html#codecs.StreamReader.read "codecs.StreamReader.read") method. 

reset()[¶](https://docs.python.org/3/library/codecs.html#codecs.StreamReader.reset "Link to this definition")
    
Resets the codec buffers used for keeping internal state.
Note that no stream repositioning should take place. This method is primarily intended to be able to recover from decoding errors.
In addition to the above methods, the [`StreamReader`](https://docs.python.org/3/library/codecs.html#codecs.StreamReader "codecs.StreamReader") must also inherit all other methods and attributes from the underlying stream.
#### StreamReaderWriter Objects[¶](https://docs.python.org/3/library/codecs.html#streamreaderwriter-objects "Link to this heading")
The [`StreamReaderWriter`](https://docs.python.org/3/library/codecs.html#codecs.StreamReaderWriter "codecs.StreamReaderWriter") is a convenience class that allows wrapping streams which work in both read and write modes.
The design is such that one can use the factory functions returned by the [`lookup()`](https://docs.python.org/3/library/codecs.html#codecs.lookup "codecs.lookup") function to construct the instance.