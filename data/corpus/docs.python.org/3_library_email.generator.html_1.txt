Title: Generating MIME Documents with email.generator
URL: https://docs.python.org/3/library/email.generator.html
Summary: The `email.generator` module is used to create serialized versions of email messages from message object structures. This serialization is necessary for tasks like sending emails via `smtplib.SMTP.sendmail()` or printing messages. The module provides generator classes to perform this task, similar to the functionality found in the `email.parser` module.
---

# `email.generator`: Generating MIME documents[¶](https://docs.python.org/3/library/email.generator.html#module-email.generator "Link to this heading")
**Source code:** [Lib/email/generator.py](https://github.com/python/cpython/tree/3.13/Lib/email/generator.py)
One of the most common tasks is to generate the flat (serialized) version of the email message represented by a message object structure. You will need to do this if you want to send your message via [`smtplib.SMTP.sendmail()`](https://docs.python.org/3/library/smtplib.html#smtplib.SMTP.sendmail "smtplib.SMTP.sendmail"), or print the message on the console. Taking a message object structure and producing a serialized representation is the job of the generator classes.
As with the [`email.parser`](https://docs.python.org/3/library/email.parser.html#module-email.parser "email.parser: Parse flat text email messages to produce a message object structure.") module, you aren’t limited to the functionality of the bundled generator; you could write one from scratch yourself. However the bundled generator knows how to generate most email in a standards-compliant way, should handle MIME and non-MIME email messages just fine, and is designed so that the bytes-oriented parsing and generation operations are inverses, assuming the same non-transforming [`policy`](https://docs.python.org/3/library/email.policy.html#module-email.policy "email.policy: Controlling the parsing and generating of messages") is used for both. That is, parsing the serialized byte stream via the [`BytesParser`](https://docs.python.org/3/library/email.parser.html#email.parser.BytesParser "email.parser.BytesParser") class and then regenerating the serialized byte stream using [`BytesGenerator`](https://docs.python.org/3/library/email.generator.html#email.generator.BytesGenerator "email.generator.BytesGenerator") should produce output identical to the input [[1]](https://docs.python.org/3/library/email.generator.html#id3). (On the other hand, using the generator on an [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") constructed by program may result in changes to the [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") object as defaults are filled in.)
The [`Generator`](https://docs.python.org/3/library/email.generator.html#email.generator.Generator "email.generator.Generator") class can be used to flatten a message into a text (as opposed to binary) serialized representation, but since Unicode cannot represent binary data directly, the message is of necessity transformed into something that contains only ASCII characters, using the standard email RFC Content Transfer Encoding techniques for encoding email messages for transport over channels that are not “8 bit clean”.
To accommodate reproducible processing of SMIME-signed messages [`Generator`](https://docs.python.org/3/library/email.generator.html#email.generator.Generator "email.generator.Generator") disables header folding for message parts of type `multipart/signed` and all subparts.