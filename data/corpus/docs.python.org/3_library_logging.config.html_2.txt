Title: Customizing Logging Configuration with DictConfigurator
URL: https://docs.python.org/3/library/logging.config.html
Summary: This section describes how to create a subclass of `DictConfigurator` to customize logging configuration. It explains how to override the `__init__` method to set up custom prefixes for subsequent configuration calls. It also introduces the `fileConfig` function, which reads logging configurations from a `configparser` format file.
---

```

For example, a subclass of `DictConfigurator` could call `DictConfigurator.__init__()` in its own `__init__()`, then set up custom prefixes which would be usable in the subsequent `configure()` call. `dictConfigClass` would be bound to this new subclass, and then [`dictConfig()`](https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig "logging.config.dictConfig") could be called exactly as in the default, uncustomized state.
Added in version 3.2. 

logging.config.fileConfig(_fname_ , _defaults =None_, _disable_existing_loggers =True_, _encoding =None_)[¶](https://docs.python.org/3/library/logging.config.html#logging.config.fileConfig "Link to this definition")
    
Reads the logging configuration from a [`configparser`](https://docs.python.org/3/library/configparser.html#module-configparser "configparser: Configuration file parser.")-format file. The format of the file should be as described in [Configuration file format](https://docs.python.org/3/library/logging.config.html#logging-config-fileformat). This function can be called several times from an application, allowing an end user to select from various pre-canned configurations (if the developer provides a mechanism to present the choices and load the chosen configuration).
It will raise [`FileNotFoundError`](https://docs.python.org/3/library/exceptions.html#FileNotFoundError "FileNotFoundError") if the file doesn’t exist and [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError") if the file is invalid or empty. 

Parameters:
    
  * **fname** – A filename, or a file-like object, or an instance derived from [`RawConfigParser`](https://docs.python.org/3/library/configparser.html#configparser.RawConfigParser "configparser.RawConfigParser"). If a `RawConfigParser`-derived instance is passed, it is used as is. Otherwise, a [`ConfigParser`](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser "configparser.ConfigParser") is instantiated, and the configuration read by it from the object passed in `fname`. If that has a [`readline()`](https://docs.python.org/3/library/readline.html#module-readline "readline: GNU readline support for Python. \(Unix\)") method, it is assumed to be a file-like object and read using [`read_file()`](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.read_file "configparser.ConfigParser.read_file"); otherwise, it is assumed to be a filename and passed to [`read()`](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.read "configparser.ConfigParser.read").
  * **defaults** – Defaults to be passed to the `ConfigParser` can be specified in this argument.
  * **disable_existing_loggers** – If specified as `False`, loggers which exist when this call is made are left enabled. The default is `True` because this enables old behaviour in a backward-compatible way. This behaviour is to disable any existing non-root loggers unless they or their ancestors are explicitly named in the logging configuration.
  * **encoding** – The encoding used to open file when _fname_ is filename.


Changed in version 3.4: An instance of a subclass of [`RawConfigParser`](https://docs.python.org/3/library/configparser.html#configparser.RawConfigParser "configparser.RawConfigParser") is now accepted as a value for `fname`. This facilitates:
>   * Use of a configuration file where logging configuration is just part of the overall application configuration.
>   * Use of a configuration read from a file, and then modified by the using application (e.g. based on command-line parameters or other aspects of the runtime environment) before being passed to `fileConfig`.
> 

Changed in version 3.10: Added the _encoding_ parameter.
Changed in version 3.12: An exception will be thrown if the provided file doesn’t exist or is invalid or empty.