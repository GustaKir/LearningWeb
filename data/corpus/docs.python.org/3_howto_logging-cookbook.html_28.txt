Title: Logging Configuration Example
URL: https://docs.python.org/3/howto/logging-cookbook.html
Summary: This section outlines a logging configuration in Python using a dictionary format. It specifies version, log format, file handler settings, and root logger settings, including a custom file handler designed to manage file ownership and encoding.
---

```
LOGGING = {
  'version': 1,
  'disable_existing_loggers': False,
  'formatters': {
    'default': {
      'format': '%(asctime)s%(levelname)s%(name)s%(message)s'
    },
  },
  'handlers': {
    'file':{
      # The values below are popped from this dictionary and
      # used to create the handler, set the handler's level and
      # its formatter.
      '()': owned_file_handler,
      'level':'DEBUG',
      'formatter': 'default',
      # The values below are passed to the handler creator callable
      # as keyword arguments.
      'owner': ['pulse', 'pulse'],
      'filename': 'chowntest.log',
      'mode': 'w',
      'encoding': 'utf-8',
    },
  },
  'root': {
    'handlers': ['file'],
    'level': 'DEBUG',
  },
}

```

In this example I am setting the ownership using the `pulse` user and group, just for the purposes of illustration. Putting it together into a working script, `chowntest.py`:
```
importlogging,logging.config,os,shutil
defowned_file_handler(filename, mode='a', encoding=None, owner=None):
  if owner:
    if not os.path.exists(filename):
      open(filename, 'a').close()
    shutil.chown(filename, *owner)
  return logging.FileHandler(filename, mode, encoding)
LOGGING = {
  'version': 1,
  'disable_existing_loggers': False,
  'formatters': {
    'default': {
      'format': '%(asctime)s%(levelname)s%(name)s%(message)s'
    },
  },
  'handlers': {
    'file':{
      # The values below are popped from this dictionary and
      # used to create the handler, set the handler's level and
      # its formatter.
      '()': owned_file_handler,
      'level':'DEBUG',
      'formatter': 'default',
      # The values below are passed to the handler creator callable
      # as keyword arguments.
      'owner': ['pulse', 'pulse'],
      'filename': 'chowntest.log',
      'mode': 'w',
      'encoding': 'utf-8',
    },
  },
  'root': {
    'handlers': ['file'],
    'level': 'DEBUG',
  },
}
logging.config.dictConfig(LOGGING)
logger = logging.getLogger('mylogger')
logger.debug('A debug message')

```

To run this, you will probably need to run as `root`:
```
$ sudopython3.3chowntest.py
$ catchowntest.log
2013-11-05 09:34:51,128 DEBUG mylogger A debug message
$ ls-lchowntest.log
-rw-r--r-- 1 pulse pulse 55 2013-11-05 09:34 chowntest.log

```

Note that this example uses Python 3.3 because thatâ€™s where [`shutil.chown()`](https://docs.python.org/3/library/shutil.html#shutil.chown "shutil.chown") makes an appearance. This approach should work with any Python version that supports [`dictConfig()`](https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig "logging.config.dictConfig") - namely, Python 2.7, 3.2 or later. With pre-3.3 versions, you would need to implement the actual ownership change using e.g. [`os.chown()`](https://docs.python.org/3/library/os.html#os.chown "os.chown").
In practice, the handler-creating function may be in a utility module somewhere in your project. Instead of the line in the configuration:
```
'()': owned_file_handler,

```

you could use e.g.:
```
'()': 'ext://project.util.owned_file_handler',