Title: EmailMessage Class Methods for Multipart Conversion
URL: https://docs.python.org/3/library/email.message.html
Summary: The `make_related` method converts a non-multipart message to a multipart/related message, adjusting headers and payload. The `make_alternative` method converts a non-multipart or multipart/related message into a multipart/alternative format, also handling headers and payload similarly.
---

make_related(_boundary =None_)[¶](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.make_related "Link to this definition")
    
Convert a non-`multipart` message into a `multipart/related` message, moving any existing _Content-_ headers and payload into a (new) first part of the `multipart`. If _boundary_ is specified, use it as the boundary string in the multipart, otherwise leave the boundary to be automatically created when it is needed (for example, when the message is serialized). 

make_alternative(_boundary =None_)[¶](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.make_alternative "Link to this definition")
    
Convert a non-`multipart` or a `multipart/related` into a `multipart/alternative`, moving any existing _Content-_ headers and payload into a (new) first part of the `multipart`. If _boundary_ is specified, use it as the boundary string in the multipart, otherwise leave the boundary to be automatically created when it is needed (for example, when the message is serialized). 

make_mixed(_boundary =None_)[¶](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.make_mixed "Link to this definition")
    
Convert a non-`multipart`, a `multipart/related`, or a `multipart-alternative` into a `multipart/mixed`, moving any existing _Content-_ headers and payload into a (new) first part of the `multipart`. If _boundary_ is specified, use it as the boundary string in the multipart, otherwise leave the boundary to be automatically created when it is needed (for example, when the message is serialized). 

add_related(_* args_, _content_manager =None_, _** kw_)[¶](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.add_related "Link to this definition")
    
If the message is a `multipart/related`, create a new message object, pass all of the arguments to its [`set_content()`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.set_content "email.message.EmailMessage.set_content") method, and [`attach()`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.attach "email.message.Message.attach") it to the `multipart`. If the message is a non-`multipart`, call [`make_related()`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.make_related "email.message.EmailMessage.make_related") and then proceed as above. If the message is any other type of `multipart`, raise a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError"). If _content_manager_ is not specified, use the `content_manager` specified by the current [`policy`](https://docs.python.org/3/library/email.policy.html#module-email.policy "email.policy: Controlling the parsing and generating of messages"). If the added part has no _Content-Disposition_ header, add one with the value `inline`. 

add_alternative(_* args_, _content_manager =None_, _** kw_)[¶](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.add_alternative "Link to this definition")
    
If the message is a `multipart/alternative`, create a new message object, pass all of the arguments to its [`set_content()`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.set_content "email.message.EmailMessage.set_content") method, and [`attach()`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.attach "email.message.Message.attach") it to the `multipart`. If the message is a non-`multipart` or `multipart/related`, call [`make_alternative()`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.make_alternative "email.message.EmailMessage.make_alternative") and then proceed as above. If the message is any other type of `multipart`, raise a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError"). If _content_manager_ is not specified, use the `content_manager` specified by the current [`policy`](https://docs.python.org/3/library/email.policy.html#module-email.policy "email.policy: Controlling the parsing and generating of messages").