Title: Decimal Class Methods: rotate and same_quantum
URL: https://docs.python.org/3/library/decimal.html
Summary: This section explains two methods of the Decimal class: 'rotate', which rotates the digits of a decimal number by a specified integer amount, and 'same_quantum', which tests whether two Decimal instances have the same exponent or both are NaN. The 'rotate' method allows for left or right rotations and maintains the sign and exponent of the operand, while 'same_quantum' is a quiet operation that does not affect context.
---

```


rotate(_other_ , _context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.rotate "Link to this definition")
    
Return the result of rotating the digits of the first operand by an amount specified by the second operand. The second operand must be an integer in the range -precision through precision. The absolute value of the second operand gives the number of places to rotate. If the second operand is positive then rotation is to the left; otherwise rotation is to the right. The coefficient of the first operand is padded on the left with zeros to length precision if necessary. The sign and exponent of the first operand are unchanged. 

same_quantum(_other_ , _context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.same_quantum "Link to this definition")
    
Test whether self and other have the same exponent or whether both are `NaN`.
This operation is unaffected by context and is quiet: no flags are changed and no rounding is performed. As an exception, the C version may raise InvalidOperation if the second operand cannot be converted exactly. 

scaleb(_other_ , _context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.scaleb "Link to this definition")
    
Return the first operand with exponent adjusted by the second. Equivalently, return the first operand multiplied by `10**other`. The second operand must be an integer. 

shift(_other_ , _context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.shift "Link to this definition")
    
Return the result of shifting the digits of the first operand by an amount specified by the second operand. The second operand must be an integer in the range -precision through precision. The absolute value of the second operand gives the number of places to shift. If the second operand is positive then the shift is to the left; otherwise the shift is to the right. Digits shifted into the coefficient are zeros. The sign and exponent of the first operand are unchanged. 

sqrt(_context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.sqrt "Link to this definition")
    
Return the square root of the argument to full precision. 

to_eng_string(_context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.to_eng_string "Link to this definition")
    
Convert to a string, using engineering notation if an exponent is needed.
Engineering notation has an exponent which is a multiple of 3. This can leave up to 3 digits to the left of the decimal place and may require the addition of either one or two trailing zeros.
For example, this converts `Decimal('123E+1')` to `Decimal('1.23E+3')`. 

to_integral(_rounding =None_, _context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.to_integral "Link to this definition")
    
Identical to the [`to_integral_value()`](https://docs.python.org/3/library/decimal.html#decimal.Decimal.to_integral_value "decimal.Decimal.to_integral_value") method. The `to_integral` name has been kept for compatibility with older versions. 

to_integral_exact(_rounding =None_, _context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.to_integral_exact "Link to this definition")
    
Round to the nearest integer, signaling [`Inexact`](https://docs.python.org/3/library/decimal.html#decimal.Inexact "decimal.Inexact") or [`Rounded`](https://docs.python.org/3/library/decimal.html#decimal.Rounded "decimal.Rounded") as appropriate if rounding occurs. The rounding mode is determined by the `rounding` parameter if given, else by the given `context`. If neither parameter is given then the rounding mode of the current context is used. 

to_integral_value(_rounding =None_, _context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.to_integral_value "Link to this definition")
    
Round to the nearest integer without signaling [`Inexact`](https://docs.python.org/3/library/decimal.html#decimal.Inexact "decimal.Inexact") or [`Rounded`](https://docs.python.org/3/library/decimal.html#decimal.Rounded "decimal.Rounded"). If given, applies _rounding_ ; otherwise, uses the rounding method in either the supplied _context_ or the current context.
Decimal numbers can be rounded using the [`round()`](https://docs.python.org/3/library/functions.html#round "round") function: 

round(number)