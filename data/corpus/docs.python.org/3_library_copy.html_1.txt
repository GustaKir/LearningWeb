Title: Copying Objects in Python
URL: https://docs.python.org/3/library/copy.html
Summary: The copy module does not clone certain types such as modules or sockets but allows shallow and deep copying of functions and classes without modifying the original object. Dictionaries can be shallow copied with `dict.copy()` and lists with slicing. Classes can manage their copying behavior similarly to pickling.
---

This module does not copy types like module, method, stack trace, stack frame, file, socket, window, or any similar types. It does “copy” functions and classes (shallow and deeply), by returning the original object unchanged; this is compatible with the way these are treated by the [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "pickle: Convert Python objects to streams of bytes and back.") module.
Shallow copies of dictionaries can be made using [`dict.copy()`](https://docs.python.org/3/library/stdtypes.html#dict.copy "dict.copy"), and of lists by assigning a slice of the entire list, for example, `copied_list = original_list[:]`.
Classes can use the same interfaces to control copying that they use to control pickling. See the description of module [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "pickle: Convert Python objects to streams of bytes and back.") for information on these methods. In fact, the [`copy`](https://docs.python.org/3/library/copy.html#module-copy "copy: Shallow and deep copy operations.") module uses the registered pickle functions from the [`copyreg`](https://docs.python.org/3/library/copyreg.html#module-copyreg "copyreg: Register pickle support functions.") module.
In order for a class to define its own copy implementation, it can define special methods [`__copy__()`](https://docs.python.org/3/library/copy.html#object.__copy__ "object.__copy__") and [`__deepcopy__()`](https://docs.python.org/3/library/copy.html#object.__deepcopy__ "object.__deepcopy__"). 

object.__copy__(_self_)[¶](https://docs.python.org/3/library/copy.html#object.__copy__ "Link to this definition")
    
Called to implement the shallow copy operation; no additional arguments are passed. 

object.__deepcopy__(_self_ , _memo_)[¶](https://docs.python.org/3/library/copy.html#object.__deepcopy__ "Link to this definition")
    
Called to implement the deep copy operation; it is passed one argument, the _memo_ dictionary. If the `__deepcopy__` implementation needs to make a deep copy of a component, it should call the [`deepcopy()`](https://docs.python.org/3/library/copy.html#copy.deepcopy "copy.deepcopy") function with the component as first argument and the _memo_ dictionary as second argument. The _memo_ dictionary should be treated as an opaque object.
Function `copy.replace()` is more limited than [`copy()`](https://docs.python.org/3/library/copy.html#copy.copy "copy.copy") and [`deepcopy()`](https://docs.python.org/3/library/copy.html#copy.deepcopy "copy.deepcopy"), and only supports named tuples created by [`namedtuple()`](https://docs.python.org/3/library/collections.html#collections.namedtuple "collections.namedtuple"), [`dataclasses`](https://docs.python.org/3/library/dataclasses.html#module-dataclasses "dataclasses: Generate special methods on user-defined classes."), and other classes which define method [`__replace__()`](https://docs.python.org/3/library/copy.html#object.__replace__ "object.__replace__"). 

object.__replace__(_self_ , _/_ , _** changes_)[¶](https://docs.python.org/3/library/copy.html#object.__replace__ "Link to this definition")
    
This method should create a new object of the same type, replacing fields with values from _changes_.
See also 

Module [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "pickle: Convert Python objects to streams of bytes and back.")
    
Discussion of the special methods used to support object state retrieval and restoration.
#### Previous topic
[`types` — Dynamic type creation and names for built-in types](https://docs.python.org/3/library/types.html "previous chapter")
#### Next topic
[`pprint` — Data pretty printer](https://docs.python.org/3/library/pprint.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/copy.rst)