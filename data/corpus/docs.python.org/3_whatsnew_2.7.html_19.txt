Title: Enhancements in Python 3.x: __cmp__() Method and New Functions
URL: https://docs.python.org/3/whatsnew/2.7.html
Summary: The deprecation of the `__cmp__()` method in Python 3.x is addressed by a new decorator that simplifies defining ordered classes. The newly introduced `cmp_to_key()` function allows the adaptation of old-style comparison functions to work with sorting and min/max functions, facilitating compatibility with Python 3.x.
---

Since the `__cmp__()` method is being deprecated in Python 3.x, this decorator makes it easier to define ordered classes. (Added by Raymond Hettinger; [bpo-5479](https://bugs.python.org/issue?@action=redirect&bpo=5479).)
New function: [`cmp_to_key()`](https://docs.python.org/3/library/functools.html#functools.cmp_to_key "functools.cmp_to_key") will take an old-style comparison function that expects two arguments and return a new callable that can be used as the _key_ parameter to functions such as [`sorted()`](https://docs.python.org/3/library/functions.html#sorted "sorted"), [`min()`](https://docs.python.org/3/library/functions.html#min "min") and [`max()`](https://docs.python.org/3/library/functions.html#max "max"), etc. The primary intended use is to help with making code compatible with Python 3.x. (Added by Raymond Hettinger.)
  * New function: the [`gc`](https://docs.python.org/3/library/gc.html#module-gc "gc: Interface to the cycle-detecting garbage collector.") module’s [`is_tracked()`](https://docs.python.org/3/library/gc.html#gc.is_tracked "gc.is_tracked") returns true if a given instance is tracked by the garbage collector, false otherwise. (Contributed by Antoine Pitrou; [bpo-4688](https://bugs.python.org/issue?@action=redirect&bpo=4688).)
  * The [`gzip`](https://docs.python.org/3/library/gzip.html#module-gzip "gzip: Interfaces for gzip compression and decompression using file objects.") module’s [`GzipFile`](https://docs.python.org/3/library/gzip.html#gzip.GzipFile "gzip.GzipFile") now supports the context management protocol, so you can write `with gzip.GzipFile(...) as f:` (contributed by Hagen Fürstenau; [bpo-3860](https://bugs.python.org/issue?@action=redirect&bpo=3860)), and it now implements the [`io.BufferedIOBase`](https://docs.python.org/3/library/io.html#io.BufferedIOBase "io.BufferedIOBase") ABC, so you can wrap it with [`io.BufferedReader`](https://docs.python.org/3/library/io.html#io.BufferedReader "io.BufferedReader") for faster processing (contributed by Nir Aides; [bpo-7471](https://bugs.python.org/issue?@action=redirect&bpo=7471)). It’s also now possible to override the modification time recorded in a gzipped file by providing an optional timestamp to the constructor. (Contributed by Jacques Frechet; [bpo-4272](https://bugs.python.org/issue?@action=redirect&bpo=4272).)
Files in gzip format can be padded with trailing zero bytes; the [`gzip`](https://docs.python.org/3/library/gzip.html#module-gzip "gzip: Interfaces for gzip compression and decompression using file objects.") module will now consume these trailing bytes. (Fixed by Tadek Pietraszek and Brian Curtin; [bpo-2846](https://bugs.python.org/issue?@action=redirect&bpo=2846).)
  * New attribute: the [`hashlib`](https://docs.python.org/3/library/hashlib.html#module-hashlib "hashlib: Secure hash and message digest algorithms.") module now has an `algorithms` attribute containing a tuple naming the supported algorithms. In Python 2.7, `hashlib.algorithms` contains `('md5', 'sha1', 'sha224', 'sha256', 'sha384', 'sha512')`. (Contributed by Carl Chenet; [bpo-7418](https://bugs.python.org/issue?@action=redirect&bpo=7418).)
  * The default [`HTTPResponse`](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse "http.client.HTTPResponse") class used by the [`httplib`](https://docs.python.org/3/library/http.html#module-http "http: HTTP status codes and messages") module now supports buffering, resulting in much faster reading of HTTP responses. (Contributed by Kristján Valur Jónsson; [bpo-4879](https://bugs.python.org/issue?@action=redirect&bpo=4879).)
The [`HTTPConnection`](https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection "http.client.HTTPConnection") and [`HTTPSConnection`](https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection "http.client.HTTPSConnection") classes now support a _source_address_ parameter, a `(host, port)` 2-tuple giving the source address that will be used for the connection. (Contributed by Eldon Ziegler; [bpo-3972](https://bugs.python.org/issue?@action=redirect&bpo=3972).)
  * The `ihooks` module now supports relative imports. Note that `ihooks` is an older module for customizing imports, superseded by the `imputil` module added in Python 2.0. (Relative import support added by Neil Schemenauer.)
  * The [`imaplib`](https://docs.python.org/3/library/imaplib.html#module-imaplib "imaplib: IMAP4 protocol client \(requires sockets\).") module now supports IPv6 addresses.