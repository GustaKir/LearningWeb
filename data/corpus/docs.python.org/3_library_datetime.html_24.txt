Title: Custom Timezone Implementation for Kabul
URL: https://docs.python.org/3/library/datetime.html
Summary: This document presents a custom timezone class for Kabul, defining UTC offsets before and after 1945, including handling of ambiguous time periods due to the historical shift in timezone. The class includes methods for determining UTC offsets and converting from UTC with necessary validations.
---

```
fromdatetimeimport timedelta, datetime, tzinfo, timezone
classKabulTz(tzinfo):
  # Kabul used +4 until 1945, when they moved to +4:30
  UTC_MOVE_DATE = datetime(1944, 12, 31, 20, tzinfo=timezone.utc)
  defutcoffset(self, dt):
    if dt.year < 1945:
      return timedelta(hours=4)
    elif (1945, 1, 1, 0, 0) <= dt.timetuple()[:5] < (1945, 1, 1, 0, 30):
      # An ambiguous ("imaginary") half-hour range representing
      # a 'fold' in time due to the shift from +4 to +4:30.
      # If dt falls in the imaginary range, use fold to decide how
      # to resolve. See PEP495.
      return timedelta(hours=4, minutes=(30 if dt.fold else 0))
    else:
      return timedelta(hours=4, minutes=30)
  deffromutc(self, dt):
    # Follow same validations as in datetime.tzinfo
    if not isinstance(dt, datetime):
      raise TypeError("fromutc() requires a datetime argument")
    if dt.tzinfo is not self:
      raise ValueError("dt.tzinfo is not self")
    # A custom implementation is required for fromutc as
    # the input to this function is a datetime with utc values
    # but with a tzinfo set to self.
    # See datetime.astimezone or fromtimestamp.
    if dt.replace(tzinfo=timezone.utc) >= self.UTC_MOVE_DATE:
      return dt + timedelta(hours=4, minutes=30)
    else:
      return dt + timedelta(hours=4)
  defdst(self, dt):
    # Kabul does not observe daylight saving time.
    return timedelta(0)
  deftzname(self, dt):
    if dt >= self.UTC_MOVE_DATE:
      return "+04:30"
    return "+04"

```

Usage of `KabulTz` from above:
>>>```
>>> tz1 = KabulTz()
>>> # Datetime before the change
>>> dt1 = datetime(1900, 11, 21, 16, 30, tzinfo=tz1)
>>> print(dt1.utcoffset())
4:00:00
>>> # Datetime after the change
>>> dt2 = datetime(2006, 6, 14, 13, 0, tzinfo=tz1)
>>> print(dt2.utcoffset())
4:30:00
>>> # Convert datetime to another time zone
>>> dt3 = dt2.astimezone(timezone.utc)
>>> dt3
datetime.datetime(2006, 6, 14, 8, 30, tzinfo=datetime.timezone.utc)
>>> dt2
datetime.datetime(2006, 6, 14, 13, 0, tzinfo=KabulTz())
>>> dt2 == dt3
True