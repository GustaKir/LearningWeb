Title: xmlrpc.client.ServerProxy Class Overview
URL: https://docs.python.org/3/library/xmlrpc.client.html
Summary: The `ServerProxy` class in the xmlrpc.client module allows for communication with a remote XML-RPC server using a specified URI, offering optional customization for transport, encoding, debugging, and other features.
---

_class_ xmlrpc.client.ServerProxy(_uri_ , _transport =None_, _encoding =None_, _verbose =False_, _allow_none =False_, _use_datetime =False_, _use_builtin_types =False_, _*_ , _headers =()_, _context =None_)[¶](https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.ServerProxy "Link to this definition")
    
A [`ServerProxy`](https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.ServerProxy "xmlrpc.client.ServerProxy") instance is an object that manages communication with a remote XML-RPC server. The required first argument is a URI (Uniform Resource Indicator), and will normally be the URL of the server. The optional second argument is a transport factory instance; by default it is an internal `SafeTransport` instance for https: URLs and an internal HTTP `Transport` instance otherwise. The optional third argument is an encoding, by default UTF-8. The optional fourth argument is a debugging flag.
The following parameters govern the use of the returned proxy instance. If _allow_none_ is true, the Python constant `None` will be translated into XML; the default behaviour is for `None` to raise a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError"). This is a commonly used extension to the XML-RPC specification, but isn’t supported by all clients and servers; see [http://ontosys.com/xml-rpc/extensions.php](https://web.archive.org/web/20130120074804/http://ontosys.com/xml-rpc/extensions.php) for a description. The _use_builtin_types_ flag can be used to cause date/time values to be presented as [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") objects and binary data to be presented as [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") objects; this flag is false by default. [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime"), [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") and [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") objects may be passed to calls. The _headers_ parameter is an optional sequence of HTTP headers to send with each request, expressed as a sequence of 2-tuples representing the header name and value. (e.g. `[('Header-Name', 'value')]`). If an HTTPS URL is provided, _context_ may be [`ssl.SSLContext`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext "ssl.SSLContext") and configures the SSL settings of the underlying HTTPS connection. The obsolete _use_datetime_ flag is similar to _use_builtin_types_ but it applies only to date/time values.
Changed in version 3.3: The _use_builtin_types_ flag was added.
Changed in version 3.8: The _headers_ parameter was added.
Both the HTTP and HTTPS transports support the URL syntax extension for HTTP Basic Authentication: `http://user:pass@host:port/path`. The `user:pass` portion will be base64-encoded as an HTTP ‘Authorization’ header, and sent to the remote server as part of the connection process when invoking an XML-RPC method. You only need to use this if the remote server requires a Basic Authentication user and password.
The returned instance is a proxy object with methods that can be used to invoke corresponding RPC calls on the remote server. If the remote server supports the introspection API, the proxy can also be used to query the remote server for the methods it supports (service discovery) and fetch other server-associated metadata.
Types that are conformable (e.g. that can be marshalled through XML), include the following (and except where noted, they are unmarshalled as the same Python type):
XML-RPC type | Python type  
---|---  
`boolean` | [`bool`](https://docs.python.org/3/library/functions.html#bool "bool")  
`int`, `i1`, `i2`, `i4`, `i8` or `biginteger` | [`int`](https://docs.python.org/3/library/functions.html#int "int") in range from -2147483648 to 2147483647. Values get the `<int>` tag.  
`double` or `float` | [`float`](https://docs.python.org/3/library/functions.html#float "float"). Values get the `<double>` tag.  
`string` | [`str`](https://docs.python.org/3/library/stdtypes.html#str "str")  
`array` | [`list`](https://docs.python.org/3/library/stdtypes.html#list "list") or [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple") containing conformable elements. Arrays are returned as [`lists`](https://docs.python.org/3/library/stdtypes.html#list "list").  
`struct` | [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict"). Keys must be strings, values may be any conformable type. Objects of user-defined classes can be passed in; only their [`__dict__`](https://docs.python.org/3/reference/datamodel.html#object.__dict__ "object.__dict__") attribute is transmitted.  
`dateTime.iso8601` | [`DateTime`](https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.DateTime "xmlrpc.client.DateTime") or [`datetime.datetime`](https://docs.py