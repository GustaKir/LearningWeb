Title: C API Argument Parsing for Python Objects
URL: https://docs.python.org/3/c-api/arg.html
Summary: This section details various C API argument parsing formats for converting C data types to Python objects, including Unicode strings, integers, and characters. It describes formats such as `u#` for Unicode buffers, `U` for strings or None, and `i` for integers.
---

`u#` ([`str`](https://docs.python.org/3/library/stdtypes.html#str "str")) [const wchar_t *, [`Py_ssize_t`](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")]
    
Convert a Unicode (UTF-16 or UCS-4) data buffer and its length to a Python Unicode object. If the Unicode buffer pointer is `NULL`, the length is ignored and `None` is returned. 

`U` ([`str`](https://docs.python.org/3/library/stdtypes.html#str "str") or `None`) [const char *]
    
Same as `s`. 

`U#` ([`str`](https://docs.python.org/3/library/stdtypes.html#str "str") or `None`) [const char *, [`Py_ssize_t`](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")]
    
Same as `s#`. 

`i` ([`int`](https://docs.python.org/3/library/functions.html#int "int")) [int]
    
Convert a plain C int to a Python integer object. 

`b` ([`int`](https://docs.python.org/3/library/functions.html#int "int")) [char]
    
Convert a plain C char to a Python integer object. 

`h` ([`int`](https://docs.python.org/3/library/functions.html#int "int")) [short int]
    
Convert a plain C shortint to a Python integer object. 

`l` ([`int`](https://docs.python.org/3/library/functions.html#int "int")) [long int]
    
Convert a C longint to a Python integer object. 

`B` ([`int`](https://docs.python.org/3/library/functions.html#int "int")) [unsigned char]
    
Convert a C unsignedchar to a Python integer object. 

`H` ([`int`](https://docs.python.org/3/library/functions.html#int "int")) [unsigned short int]
    
Convert a C unsignedshortint to a Python integer object. 

`I` ([`int`](https://docs.python.org/3/library/functions.html#int "int")) [unsigned int]
    
Convert a C unsignedint to a Python integer object. 

`k` ([`int`](https://docs.python.org/3/library/functions.html#int "int")) [unsigned long]
    
Convert a C unsignedlong to a Python integer object. 

`L` ([`int`](https://docs.python.org/3/library/functions.html#int "int")) [long long]
    
Convert a C longlong to a Python integer object. 

`K` ([`int`](https://docs.python.org/3/library/functions.html#int "int")) [unsigned long long]
    
Convert a C unsignedlonglong to a Python integer object. 

`n` ([`int`](https://docs.python.org/3/library/functions.html#int "int")) [[`Py_ssize_t`](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")]
    
Convert a C [`Py_ssize_t`](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t") to a Python integer. 

`c` ([`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") of length 1) [char]
    
Convert a C int representing a byte to a Python [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") object of length 1. 

`C` ([`str`](https://docs.python.org/3/library/stdtypes.html#str "str") of length 1) [int]
    
Convert a C int representing a character to Python [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") object of length 1. 

`d` ([`float`](https://docs.python.org/3/library/functions.html#float "float")) [double]
    
Convert a C double to a Python floating-point number. 

`f` ([`float`](https://docs.python.org/3/library/functions.html#float "float")) [float]
    
Convert a C float to a Python floating-point number. 

`D` ([`complex`](https://docs.python.org/3/library/functions.html#complex "complex")) [Py_complex *]
    
Convert a C [`Py_complex`](https://docs.python.org/3/c-api/complex.html#c.Py_complex "Py_complex") structure to a Python complex number. 

`O` (object) [PyObject *]
    
Pass a Python object untouched but create a new [strong reference](https://docs.python.org/3/glossary.html#term-strong-reference) to it (i.e. its reference count is incremented by one). If the object passed in is a `NULL` pointer, it is assumed that this was caused because the call producing the argument found an error and set an exception. Therefore, [`Py_BuildValue()`](https://docs.python.org/3/c-api/arg.html#c.Py_BuildValue "Py_BuildValue") will return `NULL` but won’t raise an exception. If no exception has been raised yet, [`SystemError`](https://docs.python.org/3/library/exceptions.html#SystemError "SystemError") is set. 

`S` (object) [PyObject *]
    
Same as `O`. 

`N` (object) [PyObject *]
    
Same as `O`, except it doesn’t create a new [strong reference](https://docs.python.org/3/glossary.html#term-strong-reference). Useful when the object is created by a call to an object constructor in the argument list. 

`O&` (object) [_converter_ , _anything_]
    
Convert _anything_ to a Python object through a _converter_ function. The function is called with _anything_ (which should be compatible with void*) as its argument and should return a “new” Python object, or `NULL` if an error occurred. 

`(items)` ([`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple")) [_matching-items_]
    
Convert a sequence of C values to a Python tuple with the same number of items.