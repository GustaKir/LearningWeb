Title: array.array Constructor
URL: https://docs.python.org/3/library/array.html
Summary: The `array.array` constructor creates a new array restricted by a specified _typecode_ and can be initialized with an optional _initializer_ such as a bytes or bytearray object, a Unicode string, or an iterable of the appropriate type.
---

_class_ array.array(_typecode_[, _initializer_])[¶](https://docs.python.org/3/library/array.html#array.array "Link to this definition")
    
A new array whose items are restricted by _typecode_ , and initialized from the optional _initializer_ value, which must be a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") or [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") object, a Unicode string, or iterable over elements of the appropriate type.
If given a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") or [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") object, the initializer is passed to the new array’s [`frombytes()`](https://docs.python.org/3/library/array.html#array.array.frombytes "array.array.frombytes") method; if given a Unicode string, the initializer is passed to the [`fromunicode()`](https://docs.python.org/3/library/array.html#array.array.fromunicode "array.array.fromunicode") method; otherwise, the initializer’s iterator is passed to the [`extend()`](https://docs.python.org/3/library/array.html#array.array.extend "array.array.extend") method to add initial items to the array.
Array objects support the ordinary sequence operations of indexing, slicing, concatenation, and multiplication. When using slice assignment, the assigned value must be an array object with the same type code; in all other cases, [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") is raised. Array objects also implement the buffer interface, and may be used wherever [bytes-like objects](https://docs.python.org/3/glossary.html#term-bytes-like-object) are supported.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `array.__new__` with arguments `typecode`, `initializer`. 

typecode[¶](https://docs.python.org/3/library/array.html#array.array.typecode "Link to this definition")
    
The typecode character used to create the array. 

itemsize[¶](https://docs.python.org/3/library/array.html#array.array.itemsize "Link to this definition")
    
The length in bytes of one array item in the internal representation. 

append(_x_)[¶](https://docs.python.org/3/library/array.html#array.array.append "Link to this definition")
    
Append a new item with value _x_ to the end of the array. 

buffer_info()[¶](https://docs.python.org/3/library/array.html#array.array.buffer_info "Link to this definition")
    
Return a tuple `(address, length)` giving the current memory address and the length in elements of the buffer used to hold array’s contents. The size of the memory buffer in bytes can be computed as `array.buffer_info()[1] * array.itemsize`. This is occasionally useful when working with low-level (and inherently unsafe) I/O interfaces that require memory addresses, such as certain `ioctl()` operations. The returned numbers are valid as long as the array exists and no length-changing operations are applied to it.
Note
When using array objects from code written in C or C++ (the only way to effectively make use of this information), it makes more sense to use the buffer interface supported by array objects. This method is maintained for backward compatibility and should be avoided in new code. The buffer interface is documented in [Buffer Protocol](https://docs.python.org/3/c-api/buffer.html#bufferobjects). 

byteswap()[¶](https://docs.python.org/3/library/array.html#array.array.byteswap "Link to this definition")
    
“Byteswap” all items of the array. This is only supported for values which are 1, 2, 4, or 8 bytes in size; for other types of values, [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError") is raised. It is useful when reading data from a file written on a machine with a different byte order. 

count(_x_)[¶](https://docs.python.org/3/library/array.html#array.array.count "Link to this definition")
    
Return the number of occurrences of _x_ in the array. 

extend(_iterable_)[¶](https://docs.python.org/3/library/array.html#array.array.extend "Link to this definition")
    
Append items from _iterable_ to the end of the array. If _iterable_ is another array, it must have _exactly_ the same type code; if not, [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") will be raised. If _iterable_ is not an array, it must be iterable and its elements must be the right type to be appended to the array.