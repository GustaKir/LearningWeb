Title: LZMA Compression Functions
URL: https://docs.python.org/3/library/lzma.html
Summary: The `compress()` function compresses a `bytes` object and returns a `bytes` object containing the compressed data. It may buffer some input for later usage. The `flush()` function completes the compression process and returns the final compressed data.
---

compress(_data_)[¶](https://docs.python.org/3/library/lzma.html#lzma.LZMACompressor.compress "Link to this definition")
    
Compress _data_ (a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") object), returning a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") object containing compressed data for at least part of the input. Some of _data_ may be buffered internally, for use in later calls to [`compress()`](https://docs.python.org/3/library/lzma.html#lzma.compress "lzma.compress") and [`flush()`](https://docs.python.org/3/library/lzma.html#lzma.LZMACompressor.flush "lzma.LZMACompressor.flush"). The returned data should be concatenated with the output of any previous calls to [`compress()`](https://docs.python.org/3/library/lzma.html#lzma.compress "lzma.compress"). 

flush()[¶](https://docs.python.org/3/library/lzma.html#lzma.LZMACompressor.flush "Link to this definition")
    
Finish the compression process, returning a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") object containing any data stored in the compressor’s internal buffers.
The compressor cannot be used after this method has been called. 

_class_ lzma.LZMADecompressor(_format =FORMAT_AUTO_, _memlimit =None_, _filters =None_)[¶](https://docs.python.org/3/library/lzma.html#lzma.LZMADecompressor "Link to this definition")
    
Create a decompressor object, which can be used to decompress data incrementally.
For a more convenient way of decompressing an entire compressed stream at once, see [`decompress()`](https://docs.python.org/3/library/lzma.html#lzma.decompress "lzma.decompress").
The _format_ argument specifies the container format that should be used. The default is `FORMAT_AUTO`, which can decompress both `.xz` and `.lzma` files. Other possible values are `FORMAT_XZ`, `FORMAT_ALONE`, and `FORMAT_RAW`.
The _memlimit_ argument specifies a limit (in bytes) on the amount of memory that the decompressor can use. When this argument is used, decompression will fail with an [`LZMAError`](https://docs.python.org/3/library/lzma.html#lzma.LZMAError "lzma.LZMAError") if it is not possible to decompress the input within the given memory limit.
The _filters_ argument specifies the filter chain that was used to create the stream being decompressed. This argument is required if _format_ is `FORMAT_RAW`, but should not be used for other formats. See [Specifying custom filter chains](https://docs.python.org/3/library/lzma.html#filter-chain-specs) for more information about filter chains.
Note
This class does not transparently handle inputs containing multiple compressed streams, unlike [`decompress()`](https://docs.python.org/3/library/lzma.html#lzma.decompress "lzma.decompress") and [`LZMAFile`](https://docs.python.org/3/library/lzma.html#lzma.LZMAFile "lzma.LZMAFile"). To decompress a multi-stream input with [`LZMADecompressor`](https://docs.python.org/3/library/lzma.html#lzma.LZMADecompressor "lzma.LZMADecompressor"), you must create a new decompressor for each stream. 

decompress(_data_ , _max_length =-1_)[¶](https://docs.python.org/3/library/lzma.html#lzma.LZMADecompressor.decompress "Link to this definition")
    
Decompress _data_ (a [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object)), returning uncompressed data as bytes. Some of _data_ may be buffered internally, for use in later calls to [`decompress()`](https://docs.python.org/3/library/lzma.html#lzma.decompress "lzma.decompress"). The returned data should be concatenated with the output of any previous calls to [`decompress()`](https://docs.python.org/3/library/lzma.html#lzma.decompress "lzma.decompress").
If _max_length_ is nonnegative, returns at most _max_length_ bytes of decompressed data. If this limit is reached and further output can be produced, the [`needs_input`](https://docs.python.org/3/library/lzma.html#lzma.LZMADecompressor.needs_input "lzma.LZMADecompressor.needs_input") attribute will be set to `False`. In this case, the next call to [`decompress()`](https://docs.python.org/3/library/lzma.html#lzma.LZMADecompressor.decompress "lzma.LZMADecompressor.decompress") may provide _data_ as `b''` to obtain more of the output.
If all of the input data was decompressed and returned (either because this was less than _max_length_ bytes, or because _max_length_ was negative), the [`needs_input`](https://docs.python.org/3/library/lzma.html#lzma.LZMADecompressor.needs_input "lzma.LZMADecompressor.needs_input") attribute will be set to `True`.
Attempting to decompress data after the end of stream is reached raises an [`EOFError`](https://docs.python.org/3/library/exceptions.html#EOFError "EOFError"). Any data found after the end of the stream is ignored and saved in the [`unused_data`](https://docs.python.org/3/library/lzma.html#lzma.LZMADecompressor.unused_data "lzma.LZMADecompressor.unused_data") attribute.
Changed in version 3.5: Added the _max_length_ parameter.