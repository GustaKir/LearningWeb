Title: Python Logging and asyncio Enhancements
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: The patch, contributed by Giovanni Lombardo, addresses multiple issues in Python's logging and asyncio modules. Key changes include ensuring the logging global lock is released during exceptions in `Logger.isEnabledFor`, adding a check for running loops in `loop.run_until_complete()` to prevent premature task execution, and correcting parenthesization in filter-based statements. Additionally, updates were made to `logging.config.dictConfig` to handle instances of named arguments more effectively.
---

Giovanni Lombardo contributed part of the patch.
  * [bpo-39198](https://bugs.python.org/issue?@action=redirect&bpo=39198): If an exception were to be thrown in `Logger.isEnabledFor` (say, by asyncio timeouts or stopit) , the `logging` global lock may not be released appropriately, resulting in deadlock. This change wraps that block of code with `try...finally` to ensure the lock is released.
  * [bpo-39191](https://bugs.python.org/issue?@action=redirect&bpo=39191): Perform a check for running loop before starting a new task in `loop.run_until_complete()` to fail fast; it prevents the side effect of new task spawning before exception raising.
  * [bpo-38871](https://bugs.python.org/issue?@action=redirect&bpo=38871): Correctly parenthesize filter-based statements that contain lambda expressions in `lib2to3`. Patch by Donghee Na.
  * [bpo-39142](https://bugs.python.org/issue?@action=redirect&bpo=39142): A change was made to logging.config.dictConfig to avoid converting instances of named tuples to ConvertingTuple. It’s assumed that named tuples are too specialised to be treated like ordinary tuples; if a user of named tuples requires ConvertingTuple functionality, they will have to implement that themselves in their named tuple class.
  * [bpo-39158](https://bugs.python.org/issue?@action=redirect&bpo=39158): ast.literal_eval() now supports empty sets.
  * [bpo-39129](https://bugs.python.org/issue?@action=redirect&bpo=39129): Fix import path for `asyncio.TimeoutError`
  * [bpo-39057](https://bugs.python.org/issue?@action=redirect&bpo=39057): `urllib.request.proxy_bypass_environment()` now ignores leading dots and no longer ignores a trailing newline.
  * [bpo-39056](https://bugs.python.org/issue?@action=redirect&bpo=39056): Fixed handling invalid warning category in the -W option. No longer import the re module if it is not needed.
  * [bpo-39055](https://bugs.python.org/issue?@action=redirect&bpo=39055): [`base64.b64decode()`](https://docs.python.org/3/library/base64.html#base64.b64decode "base64.b64decode") with `validate=True` raises now a binascii.Error if the input ends with a single `\n`.
  * [bpo-21600](https://bugs.python.org/issue?@action=redirect&bpo=21600): Fix `mock.patch.stopall()` to stop active patches that were created with `mock.patch.dict()`.
  * [bpo-39019](https://bugs.python.org/issue?@action=redirect&bpo=39019): Implement dummy `__class_getitem__` for [`tempfile.SpooledTemporaryFile`](https://docs.python.org/3/library/tempfile.html#tempfile.SpooledTemporaryFile "tempfile.SpooledTemporaryFile").
  * [bpo-39019](https://bugs.python.org/issue?@action=redirect&bpo=39019): Implement dummy `__class_getitem__` for `subprocess.Popen`, `subprocess.CompletedProcess`
  * [bpo-38914](https://bugs.python.org/issue?@action=redirect&bpo=38914): Adjusted the wording of the warning issued by distutils’ `check` command when the `author` and `maintainer` fields are supplied but no corresponding e-mail field (`author_email` or `maintainer_email`) is found. The wording now reflects the fact that these fields are suggested, but not required. Patch by Juergen Gmach.
  * [bpo-38878](https://bugs.python.org/issue?@action=redirect&bpo=38878): Fixed __subclasshook__ of [`os.PathLike`](https://docs.python.org/3/library/os.html#os.PathLike "os.PathLike") to return a correct result upon inheritance. Patch by Bar Harel.
  * [bpo-38615](https://bugs.python.org/issue?@action=redirect&bpo=38615): [`IMAP4`](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4 "imaplib.IMAP4") and [`IMAP4_SSL`](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4_SSL "imaplib.IMAP4_SSL") now have an optional _timeout_ parameter for their constructors. Also, the [`open()`](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.open "imaplib.IMAP4.open") method now has an optional _timeout_ parameter with this change. The overridden methods of [`IMAP4_SSL`](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4_SSL "imaplib.IMAP4_SSL") and [`IMAP4_stream`](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4_stream "imaplib.IMAP4_stream") were applied to this change. Patch by Donghee Na.
  * [bpo-35182](https://bugs.python.org/issue?@action=redirect&bpo=35182): Fixed `Popen.communicate()` subsequent call crash when the child process has already closed any piped standard stream, but still continues to be running. Patch by Andriy Maletsky.
  * [bpo-38630](https://bugs.python.org/issue?@action=redirect&bpo=38630): On Unix, [`subprocess.Popen.send_signal()`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen.send_signal "subprocess.Popen.send_signal") now polls the process status.