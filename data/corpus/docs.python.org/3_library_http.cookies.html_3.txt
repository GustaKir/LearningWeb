Title: Morsel Class Methods in http.cookies
URL: https://docs.python.org/3/library/http.cookies.html
Summary: This section describes methods of the Morsel class in the http.cookies module, including 'output', which generates a string for HTTP headers, and 'js_output', which creates a JavaScript snippet to replicate the HTTP header behavior in browsers. Attributes for each method can be specified to customize the output.
---

Morsel.output(_attrs =None_, _header ='Set-Cookie:'_)[¶](https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel.output "Link to this definition")
    
Return a string representation of the Morsel, suitable to be sent as an HTTP header. By default, all the attributes are included, unless _attrs_ is given, in which case it should be a list of attributes to use. _header_ is by default `"Set-Cookie:"`. 

Morsel.js_output(_attrs =None_)[¶](https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel.js_output "Link to this definition")
    
Return an embeddable JavaScript snippet, which, if run on a browser which supports JavaScript, will act the same as if the HTTP header was sent.
The meaning for _attrs_ is the same as in [`output()`](https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel.output "http.cookies.Morsel.output"). 

Morsel.OutputString(_attrs =None_)[¶](https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel.OutputString "Link to this definition")
    
Return a string representing the Morsel, without any surrounding HTTP or JavaScript.
The meaning for _attrs_ is the same as in [`output()`](https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel.output "http.cookies.Morsel.output"). 

Morsel.update(_values_)[¶](https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel.update "Link to this definition")
    
Update the values in the Morsel dictionary with the values in the dictionary _values_. Raise an error if any of the keys in the _values_ dict is not a valid [**RFC 2109**](https://datatracker.ietf.org/doc/html/rfc2109.html) attribute.
Changed in version 3.5: an error is raised for invalid keys. 

Morsel.copy(_value_)[¶](https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel.copy "Link to this definition")
    
Return a shallow copy of the Morsel object.
Changed in version 3.5: return a Morsel object instead of a dict. 

Morsel.setdefault(_key_ , _value =None_)[¶](https://docs.python.org/3/library/http.cookies.html#http.cookies.Morsel.setdefault "Link to this definition")
    
Raise an error if key is not a valid [**RFC 2109**](https://datatracker.ietf.org/doc/html/rfc2109.html) attribute, otherwise behave the same as [`dict.setdefault()`](https://docs.python.org/3/library/stdtypes.html#dict.setdefault "dict.setdefault").
## Example[¶](https://docs.python.org/3/library/http.cookies.html#example "Link to this heading")
The following example demonstrates how to use the [`http.cookies`](https://docs.python.org/3/library/http.cookies.html#module-http.cookies "http.cookies: Support for HTTP state management \(cookies\).") module.
>>>```
>>> fromhttpimport cookies
>>> C = cookies.SimpleCookie()
>>> C["fig"] = "newton"
>>> C["sugar"] = "wafer"
>>> print(C) # generate HTTP headers
Set-Cookie: fig=newton
Set-Cookie: sugar=wafer
>>> print(C.output()) # same thing
Set-Cookie: fig=newton
Set-Cookie: sugar=wafer
>>> C = cookies.SimpleCookie()
>>> C["rocky"] = "road"
>>> C["rocky"]["path"] = "/cookie"
>>> print(C.output(header="Cookie:"))
Cookie: rocky=road; Path=/cookie
>>> print(C.output(attrs=[], header="Cookie:"))
Cookie: rocky=road
>>> C = cookies.SimpleCookie()
>>> C.load("chips=ahoy; vienna=finger") # load from a string (HTTP header)
>>> print(C)
Set-Cookie: chips=ahoy
Set-Cookie: vienna=finger
>>> C = cookies.SimpleCookie()
>>> C.load('keebler="E=everybody; L=\\"Loves\\"; fudge=\\012;";')
>>> print(C)
Set-Cookie: keebler="E=everybody; L=\"Loves\"; fudge=\012;"
>>> C = cookies.SimpleCookie()
>>> C["oreo"] = "doublestuff"
>>> C["oreo"]["path"] = "/"
>>> print(C)
Set-Cookie: oreo=doublestuff; Path=/
>>> C = cookies.SimpleCookie()
>>> C["twix"] = "none for you"
>>> C["twix"].value
'none for you'
>>> C = cookies.SimpleCookie()
>>> C["number"] = 7 # equivalent to C["number"] = str(7)
>>> C["string"] = "seven"
>>> C["number"].value
'7'
>>> C["string"].value
'seven'
>>> print(C)
Set-Cookie: number=7
Set-Cookie: string=seven