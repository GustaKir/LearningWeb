Title: os.sendfile - File Descriptor Transfer
URL: https://docs.python.org/3/library/os.html
Summary: The os.sendfile function copies a specified number of bytes from one file descriptor to another, optionally including headers and trailers. It supports different behaviors based on the operating system, allowing flexible file operations across platforms like Linux, macOS, and FreeBSD.
---

os.sendfile(_out_fd_ , _in_fd_ , _offset_ , _count_ , _headers =()_, _trailers =()_, _flags =0_)
    
Copy _count_ bytes from file descriptor _in_fd_ to file descriptor _out_fd_ starting at _offset_. Return the number of bytes sent. When EOF is reached return `0`.
The first function notation is supported by all platforms that define [`sendfile()`](https://docs.python.org/3/library/os.html#os.sendfile "os.sendfile").
On Linux, if _offset_ is given as `None`, the bytes are read from the current position of _in_fd_ and the position of _in_fd_ is updated.
The second case may be used on macOS and FreeBSD where _headers_ and _trailers_ are arbitrary sequences of buffers that are written before and after the data from _in_fd_ is written. It returns the same as the first case.
On macOS and FreeBSD, a value of `0` for _count_ specifies to send until the end of _in_fd_ is reached.
All platforms support sockets as _out_fd_ file descriptor, and some platforms allow other types (e.g. regular file, pipe) as well.
Cross-platform applications should not use _headers_ , _trailers_ and _flags_ arguments.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI.
Note
For a higher-level wrapper of [`sendfile()`](https://docs.python.org/3/library/os.html#os.sendfile "os.sendfile"), see [`socket.socket.sendfile()`](https://docs.python.org/3/library/socket.html#socket.socket.sendfile "socket.socket.sendfile").
Added in version 3.3.
Changed in version 3.9: Parameters _out_ and _in_ was renamed to _out_fd_ and _in_fd_. 

os.SF_NODISKIO[¶](https://docs.python.org/3/library/os.html#os.SF_NODISKIO "Link to this definition")


os.SF_MNOWAIT[¶](https://docs.python.org/3/library/os.html#os.SF_MNOWAIT "Link to this definition")


os.SF_SYNC[¶](https://docs.python.org/3/library/os.html#os.SF_SYNC "Link to this definition")
    
Parameters to the [`sendfile()`](https://docs.python.org/3/library/os.html#os.sendfile "os.sendfile") function, if the implementation supports them.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI.
Added in version 3.3. 

os.SF_NOCACHE[¶](https://docs.python.org/3/library/os.html#os.SF_NOCACHE "Link to this definition")
    
Parameter to the [`sendfile()`](https://docs.python.org/3/library/os.html#os.sendfile "os.sendfile") function, if the implementation supports it. The data won’t be cached in the virtual memory and will be freed afterwards.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI.
Added in version 3.11. 

os.set_blocking(_fd_ , _blocking_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.set_blocking "Link to this definition")
    
Set the blocking mode of the specified file descriptor. Set the [`O_NONBLOCK`](https://docs.python.org/3/library/os.html#os.O_NONBLOCK "os.O_NONBLOCK") flag if blocking is `False`, clear the flag otherwise.
See also [`get_blocking()`](https://docs.python.org/3/library/os.html#os.get_blocking "os.get_blocking") and [`socket.socket.setblocking()`](https://docs.python.org/3/library/socket.html#socket.socket.setblocking "socket.socket.setblocking").
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, Windows.
The function is limited on WASI, see [WebAssembly platforms](https://docs.python.org/3/library/intro.html#wasm-availability) for more information.
On Windows, this function is limited to pipes.
Added in version 3.5.
Changed in version 3.12: Added support for pipes on Windows.