Title: Thread-Local Data and Thread Objects in Python
URL: https://docs.python.org/3/library/threading.html
Summary: This section discusses thread-local data using the `threading.local` class, which maintains values unique to each thread. It also introduces the `Thread` class, which allows representing activities in separate threads, enabling customization through callable objects or by overriding the `run()` method.
---

```

The instance’s values will be different for separate threads. 

_class_ threading.local[¶](https://docs.python.org/3/library/threading.html#threading.local "Link to this definition")
    
A class that represents thread-local data.
For more details and extensive examples, see the documentation string of the `_threading_local` module: [Lib/_threading_local.py](https://github.com/python/cpython/tree/3.13/Lib/_threading_local.py).
## Thread Objects[¶](https://docs.python.org/3/library/threading.html#thread-objects "Link to this heading")
The [`Thread`](https://docs.python.org/3/library/threading.html#threading.Thread "threading.Thread") class represents an activity that is run in a separate thread of control. There are two ways to specify the activity: by passing a callable object to the constructor, or by overriding the [`run()`](https://docs.python.org/3/library/threading.html#threading.Thread.run "threading.Thread.run") method in a subclass. No other methods (except for the constructor) should be overridden in a subclass. In other words, _only_ override the `__init__()` and [`run()`](https://docs.python.org/3/library/threading.html#threading.Thread.run "threading.Thread.run") methods of this class.
Once a thread object is created, its activity must be started by calling the thread’s [`start()`](https://docs.python.org/3/library/threading.html#threading.Thread.start "threading.Thread.start") method. This invokes the [`run()`](https://docs.python.org/3/library/threading.html#threading.Thread.run "threading.Thread.run") method in a separate thread of control.
Once the thread’s activity is started, the thread is considered ‘alive’. It stops being alive when its [`run()`](https://docs.python.org/3/library/threading.html#threading.Thread.run "threading.Thread.run") method terminates – either normally, or by raising an unhandled exception. The [`is_alive()`](https://docs.python.org/3/library/threading.html#threading.Thread.is_alive "threading.Thread.is_alive") method tests whether the thread is alive.
Other threads can call a thread’s [`join()`](https://docs.python.org/3/library/threading.html#threading.Thread.join "threading.Thread.join") method. This blocks the calling thread until the thread whose [`join()`](https://docs.python.org/3/library/threading.html#threading.Thread.join "threading.Thread.join") method is called is terminated.
A thread has a name. The name can be passed to the constructor, and read or changed through the [`name`](https://docs.python.org/3/library/threading.html#threading.Thread.name "threading.Thread.name") attribute.
If the [`run()`](https://docs.python.org/3/library/threading.html#threading.Thread.run "threading.Thread.run") method raises an exception, [`threading.excepthook()`](https://docs.python.org/3/library/threading.html#threading.excepthook "threading.excepthook") is called to handle it. By default, [`threading.excepthook()`](https://docs.python.org/3/library/threading.html#threading.excepthook "threading.excepthook") ignores silently [`SystemExit`](https://docs.python.org/3/library/exceptions.html#SystemExit "SystemExit").
A thread can be flagged as a “daemon thread”. The significance of this flag is that the entire Python program exits when only daemon threads are left. The initial value is inherited from the creating thread. The flag can be set through the [`daemon`](https://docs.python.org/3/library/threading.html#threading.Thread.daemon "threading.Thread.daemon") property or the _daemon_ constructor argument.
Note
Daemon threads are abruptly stopped at shutdown. Their resources (such as open files, database transactions, etc.) may not be released properly. If you want your threads to stop gracefully, make them non-daemonic and use a suitable signalling mechanism such as an [`Event`](https://docs.python.org/3/library/threading.html#threading.Event "threading.Event").
There is a “main thread” object; this corresponds to the initial thread of control in the Python program. It is not a daemon thread.
There is the possibility that “dummy thread objects” are created. These are thread objects corresponding to “alien threads”, which are threads of control started outside the threading module, such as directly from C code. Dummy thread objects have limited functionality; they are always considered alive and daemonic, and cannot be [joined](https://docs.python.org/3/library/threading.html#meth-thread-join). They are never deleted, since it is impossible to detect the termination of alien threads.