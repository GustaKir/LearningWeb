Title: Understanding Regex Compilation and Flags in Python
URL: https://docs.python.org/3/howto/regex.html
Summary: The document explains how Python's regex functions create and cache pattern objects for efficiency in matching operations. It discusses the benefits of pre-compiling regex patterns, especially in loops, and introduces compilation flags that modify regex behavior, highlighting both long and short names for these flags.
---

```

Under the hood, these functions simply create a pattern object for you and call the appropriate method on it. They also store the compiled object in a cache, so future calls using the same RE won’t need to parse the pattern again and again.
Should you use these module-level functions, or should you get the pattern and call its methods yourself? If you’re accessing a regex within a loop, pre-compiling it will save a few function calls. Outside of loops, there’s not much difference thanks to the internal cache.
### Compilation Flags[¶](https://docs.python.org/3/howto/regex.html#compilation-flags "Link to this heading")
Compilation flags let you modify some aspects of how regular expressions work. Flags are available in the [`re`](https://docs.python.org/3/library/re.html#module-re "re: Regular expression operations.") module under two names, a long name such as [`IGNORECASE`](https://docs.python.org/3/library/re.html#re.IGNORECASE "re.IGNORECASE") and a short, one-letter form such as [`I`](https://docs.python.org/3/library/re.html#re.I "re.I"). (If you’re familiar with Perl’s pattern modifiers, the one-letter forms use the same letters; the short form of [`re.VERBOSE`](https://docs.python.org/3/library/re.html#re.VERBOSE "re.VERBOSE") is [`re.X`](https://docs.python.org/3/library/re.html#re.X "re.X"), for example.) Multiple flags can be specified by bitwise OR-ing them; `re.I | re.M` sets both the [`I`](https://docs.python.org/3/library/re.html#re.I "re.I") and [`M`](https://docs.python.org/3/library/re.html#re.M "re.M") flags, for example.
Here’s a table of the available flags, followed by a more detailed explanation of each one.
Flag | Meaning  
---|---  
[`ASCII`](https://docs.python.org/3/library/re.html#re.ASCII "re.ASCII"), [`A`](https://docs.python.org/3/library/re.html#re.A "re.A") | Makes several escapes like `\w`, `\b`, `\s` and `\d` match only on ASCII characters with the respective property.  
[`DOTALL`](https://docs.python.org/3/library/re.html#re.DOTALL "re.DOTALL"), [`S`](https://docs.python.org/3/library/re.html#re.S "re.S") | Make `.` match any character, including newlines.  
[`IGNORECASE`](https://docs.python.org/3/library/re.html#re.IGNORECASE "re.IGNORECASE"), [`I`](https://docs.python.org/3/library/re.html#re.I "re.I") | Do case-insensitive matches.  
[`LOCALE`](https://docs.python.org/3/library/re.html#re.LOCALE "re.LOCALE"), [`L`](https://docs.python.org/3/library/re.html#re.L "re.L") | Do a locale-aware match.  
[`MULTILINE`](https://docs.python.org/3/library/re.html#re.MULTILINE "re.MULTILINE"), [`M`](https://docs.python.org/3/library/re.html#re.M "re.M") | Multi-line matching, affecting `^` and `$`.  
[`VERBOSE`](https://docs.python.org/3/library/re.html#re.VERBOSE "re.VERBOSE"), [`X`](https://docs.python.org/3/library/re.html#re.X "re.X") (for ‘extended’) | Enable verbose REs, which can be organized more cleanly and understandably. 

re.I


re.IGNORECASE
      
Perform case-insensitive matching; character class and literal strings will match letters by ignoring case. For example, `[A-Z]` will match lowercase letters, too. Full Unicode matching also works unless the [`ASCII`](https://docs.python.org/3/library/re.html#re.ASCII "re.ASCII") flag is used to disable non-ASCII matches. When the Unicode patterns `[a-z]` or `[A-Z]` are used in combination with the [`IGNORECASE`](https://docs.python.org/3/library/re.html#re.IGNORECASE "re.IGNORECASE") flag, they will match the 52 ASCII letters and 4 additional non-ASCII letters: ‘İ’ (U+0130, Latin capital letter I with dot above), ‘ı’ (U+0131, Latin small letter dotless i), ‘ſ’ (U+017F, Latin small letter long s) and ‘K’ (U+212A, Kelvin sign). `Spam` will match `'Spam'`, `'spam'`, `'spAM'`, or `'ſpam'` (the latter is matched only in Unicode mode). This lowercasing doesn’t take the current locale into account; it will if you also set the [`LOCALE`](https://docs.python.org/3/library/re.html#re.LOCALE "re.LOCALE") flag. 

re.L