Title: Working with JSON in Python
URL: https://docs.python.org/3/library/json.html
Summary: This document provides examples of encoding Python objects into JSON format using the `json` library. It demonstrates the usage of `dumps` for converting lists and dictionaries, showcases compact encoding with custom separators, and illustrates pretty printing with indentation. Additionally, it introduces a custom JSON encoder for complex numbers.
---

```
>>> importjson
>>> json.dumps(['foo', {'bar': ('baz', None, 1.0, 2)}])
'["foo", {"bar": ["baz", null, 1.0, 2]}]'
>>> print(json.dumps("\"foo\bar"))
"\"foo\bar"
>>> print(json.dumps('\u1234'))
"\u1234"
>>> print(json.dumps('\\'))
"\\"
>>> print(json.dumps({"c": 0, "b": 0, "a": 0}, sort_keys=True))
{"a": 0, "b": 0, "c": 0}
>>> fromioimport StringIO
>>> io = StringIO()
>>> json.dump(['streaming API'], io)
>>> io.getvalue()
'["streaming API"]'

```

Compact encoding:
>>>```
>>> importjson
>>> json.dumps([1, 2, 3, {'4': 5, '6': 7}], separators=(',', ':'))
'[1,2,3,{"4":5,"6":7}]'

```

Pretty printing:
>>>```
>>> importjson
>>> print(json.dumps({'6': 7, '4': 5}, sort_keys=True, indent=4))
{
  "4": 5,
  "6": 7
}

```

Specializing JSON object encoding:
>>>```
>>> importjson
>>> defcustom_json(obj):
...   if isinstance(obj, complex):
...     return {'__complex__': True, 'real': obj.real, 'imag': obj.imag}
...   raise TypeError(f'Cannot serialize object of {type(obj)}')
...
>>> json.dumps(1 + 2j, default=custom_json)
'{"__complex__": true, "real": 1.0, "imag": 2.0}'

```

Decoding JSON:
>>>```
>>> importjson
>>> json.loads('["foo", {"bar":["baz", null, 1.0, 2]}]')
['foo', {'bar': ['baz', None, 1.0, 2]}]
>>> json.loads('"\\"foo\\bar"')
'"foo\x08ar'
>>> fromioimport StringIO
>>> io = StringIO('["streaming API"]')
>>> json.load(io)
['streaming API']

```

Specializing JSON object decoding:
>>>```
>>> importjson
>>> defas_complex(dct):
...   if '__complex__' in dct:
...     return complex(dct['real'], dct['imag'])
...   return dct
...
>>> json.loads('{"__complex__": true, "real": 1, "imag": 2}',
...   object_hook=as_complex)
(1+2j)
>>> importdecimal
>>> json.loads('1.1', parse_float=decimal.Decimal)
Decimal('1.1')

```

Extending [`JSONEncoder`](https://docs.python.org/3/library/json.html#json.JSONEncoder "json.JSONEncoder"):
>>>```
>>> importjson
>>> classComplexEncoder(json.JSONEncoder):
...   defdefault(self, obj):
...     if isinstance(obj, complex):
...       return [obj.real, obj.imag]
...     # Let the base class default method raise the TypeError
...     return super().default(obj)
...
>>> json.dumps(2 + 1j, cls=ComplexEncoder)
'[2.0, 1.0]'
>>> ComplexEncoder().encode(2 + 1j)
'[2.0, 1.0]'
>>> list(ComplexEncoder().iterencode(2 + 1j))
['[2.0', ', 1.0', ']']

```

Using [`json.tool`](https://docs.python.org/3/library/json.html#module-json.tool "json.tool: A command line to validate and pretty-print JSON.") from the shell to validate and pretty-print:
```
$ echo'{"json":"obj"}'|python-mjson.tool
{
  "json": "obj"
}
$ echo'{1.2:3.4}'|python-mjson.tool
Expecting property name enclosed in double quotes: line 1 column 2 (char 1)