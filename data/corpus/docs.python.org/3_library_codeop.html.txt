Title: Code Optimization in Python
URL: https://docs.python.org/3/library/codeop.html
Summary: This documentation chunk serves as an introduction to the 'codeop' library in Python, which is relevant for code optimization and execution. It provides navigation options to previous and next topics, facilitating a comprehensive understanding of Python's code handling functionalities.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
#### Previous topic
[`code` — Interpreter base classes](https://docs.python.org/3/library/code.html "previous chapter")
#### Next topic
[Importing Modules](https://docs.python.org/3/library/modules.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/codeop.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/modules.html "Importing Modules") |
  * [previous](https://docs.python.org/3/library/code.html "code — Interpreter base classes") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Custom Python Interpreters](https://docs.python.org/3/library/custominterp.html) »
  * [`codeop` — Compile Python code](https://docs.python.org/3/library/codeop.html)
  * | 
  * Theme  Auto Light Dark |


# `codeop` — Compile Python code[¶](https://docs.python.org/3/library/codeop.html#module-codeop "Link to this heading")
**Source code:** [Lib/codeop.py](https://github.com/python/cpython/tree/3.13/Lib/codeop.py)
The [`codeop`](https://docs.python.org/3/library/codeop.html#module-codeop "codeop: Compile \(possibly incomplete\) Python code.") module provides utilities upon which the Python read-eval-print loop can be emulated, as is done in the [`code`](https://docs.python.org/3/library/code.html#module-code "code: Facilities to implement read-eval-print loops.") module. As a result, you probably don’t want to use the module directly; if you want to include such a loop in your program you probably want to use the [`code`](https://docs.python.org/3/library/code.html#module-code "code: Facilities to implement read-eval-print loops.") module instead.
There are two parts to this job:
  1. Being able to tell if a line of input completes a Python statement: in short, telling whether to print ‘`>>>`’ or ‘`...`’ next.
  2. Remembering which future statements the user has entered, so subsequent input can be compiled with these in effect.


The [`codeop`](https://docs.python.org/3/library/codeop.html#module-codeop "codeop: Compile \(possibly incomplete\) Python code.") module provides a way of doing each of these things, and a way of doing them both.
To do just the former: 

codeop.compile_command(_source_ , _filename ='<input>'_, _symbol ='single'_)[¶](https://docs.python.org/3/library/codeop.html#codeop.compile_command "Link to this definition")
    
Tries to compile _source_ , which should be a string of Python code and return a code object if _source_ is valid Python code. In that case, the filename attribute of the code object will be _filename_ , which defaults to `'<input>'`. Returns `None` if _source_ is _not_ valid Python code, but is a prefix of valid Python code.
If there is a problem with _source_ , an exception will be raised. [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") is raised if there is invalid Python syntax, and [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError") or [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if there is an invalid literal.
The _symbol_ argument determines whether _source_ is compiled as a statement (`'single'`, the default), as a sequence of [statement](https://docs.python.org/3/glossary.html#term-statement) (`'exec'`) or as an [expression](https://docs.python.org/3/glossary.html#term-expression) (`'eval'`). Any other value will cause [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") to be raised.
Note
It is possible (but not likely) that the parser stops parsing with a successful outcome before reaching the end of the source; in this case, trailing symbols may be ignored instead of causing an error. For example, a backslash followed by two newlines may be followed by arbitrary garbage. This will be fixed once the API for the parser is better.