Title: Creating Elements with `element_create()` in tkinter.ttk
URL: https://docs.python.org/3/library/tkinter.ttk.html
Summary: The `element_create()` method in `tkinter.ttk.Style` allows for cloning existing elements or creating new elements based on the Microsoft Visual Styles API. When using 'from' as the element type, a specified theme's element is cloned, while 'vsapi' creates a new themed element. The method requires specific arguments for customization.
---

```

If “from” is used as the value of _etype_ , [`element_create()`](https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Style.element_create "tkinter.ttk.Style.element_create") will clone an existing element. _args_ is expected to contain a themename, from which the element will be cloned, and optionally an element to clone from. If this element to clone from is not specified, an empty element will be used. _kw_ is discarded.
Example:
```
style = ttk.Style(root)
style.element_create('plain.background', 'from', 'default')

```

If “vsapi” is used as the value of _etype_ , [`element_create()`](https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Style.element_create "tkinter.ttk.Style.element_create") will create a new element in the current theme whose visual appearance is drawn using the Microsoft Visual Styles API which is responsible for the themed styles on Windows XP and Vista. _args_ is expected to contain the Visual Styles class and part as given in the Microsoft documentation followed by an optional sequence of tuples of ttk states and the corresponding Visual Styles API state value. _kw_ may have the following options: 

padding=padding
    
Specify the element’s interior padding. _padding_ is a list of up to four integers specifying the left, top, right and bottom padding quantities respectively. If fewer than four elements are specified, bottom defaults to top, right defaults to left, and top defaults to left. In other words, a list of three numbers specify the left, vertical, and right padding; a list of two numbers specify the horizontal and the vertical padding; a single number specifies the same padding all the way around the widget. This option may not be mixed with any other options. 

margins=padding
    
Specifies the elements exterior padding. _padding_ is a list of up to four integers specifying the left, top, right and bottom padding quantities respectively. This option may not be mixed with any other options. 

width=width
    
Specifies the width for the element. If this option is set then the Visual Styles API will not be queried for the recommended size or the part. If this option is set then _height_ should also be set. The _width_ and _height_ options cannot be mixed with the _padding_ or _margins_ options. 

height=height
    
Specifies the height of the element. See the comments for _width_.
Example:
```
style = ttk.Style(root)
style.element_create('pin', 'vsapi', 'EXPLORERBAR', 3, [
           ('pressed', '!selected', 3),
           ('active', '!selected', 2),
           ('pressed', 'selected', 6),
           ('active', 'selected', 5),
           ('selected', 4),
           ('', 1)])
style.layout('Explorer.Pin',
       [('Explorer.Pin.pin', {'sticky': 'news'})])
pin = ttk.Checkbutton(style='Explorer.Pin')
pin.pack(expand=True, fill='both')

```

Changed in version 3.13: Added support of the “vsapi” element factory. 

element_names()[¶](https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Style.element_names "Link to this definition")
    
Returns the list of elements defined in the current theme. 

element_options(_elementname_)[¶](https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Style.element_options "Link to this definition")
    
Returns the list of _elementname_ ’s options. 

theme_create(_themename_ , _parent =None_, _settings =None_)[¶](https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Style.theme_create "Link to this definition")
    
Create a new theme.
It is an error if _themename_ already exists. If _parent_ is specified, the new theme will inherit styles, elements and layouts from the parent theme. If _settings_ are present they are expected to have the same syntax used for [`theme_settings()`](https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Style.theme_settings "tkinter.ttk.Style.theme_settings"). 

theme_settings(_themename_ , _settings_)[¶](https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Style.theme_settings "Link to this definition")
    
Temporarily sets the current theme to _themename_ , apply specified _settings_ and then restore the previous theme.
Each key in _settings_ is a style and each value may contain the keys ‘configure’, ‘map’, ‘layout’ and ‘element create’ and they are expected to have the same format as specified by the methods [`Style.configure()`](https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Style.configure "tkinter.ttk.Style.configure"), [`Style.map()`](https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Style.map "tkinter.ttk.Style.map"), [`Style.layout()`](https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Style.layout "tkinter.ttk.Style.layout") and [`Style.element_create()`](https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Style.element_create "tkinter.ttk.Style.element_create") respectively.
As an example, let’s change the Combobox for the default theme a bit: