Title: ResourceReader Methods in importlib
URL: https://docs.python.org/3/library/importlib.html
Summary: This section describes two abstract methods from the ResourceReader class in the importlib module. The `is_resource(name)` method checks if a given name corresponds to a resource, raising a FileNotFoundError if the name doesn't exist. The `contents()` method returns an iterable of strings representing the contents of a package, which may include names that are not strictly resources.
---

_abstractmethod_ is_resource(_name_)[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.ResourceReader.is_resource "Link to this definition")
    
> Returns `True` if the named _name_ is considered a resource. [`FileNotFoundError`](https://docs.python.org/3/library/exceptions.html#FileNotFoundError "FileNotFoundError") is raised if _name_ does not exist. 

_abstractmethod_ contents()[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.ResourceReader.contents "Link to this definition")
    
> Returns an [iterable](https://docs.python.org/3/glossary.html#term-iterable) of strings over the contents of the package. Do note that it is not required that all names returned by the iterator be actual resources, e.g. it is acceptable to return names for which [`is_resource()`](https://docs.python.org/3/library/importlib.html#importlib.abc.ResourceReader.is_resource "importlib.abc.ResourceReader.is_resource") would be false.
> Allowing non-resource names to be returned is to allow for situations where how a package and its resources are stored are known a priori and the non-resource names would be useful. For instance, returning subdirectory names is allowed so that when it is known that the package and resources are stored on the file system then those subdirectory names can be used directly.
> The abstract method returns an iterable of no items. 

_class_ importlib.abc.Traversable[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.Traversable "Link to this definition")
    
An object with a subset of [`pathlib.Path`](https://docs.python.org/3/library/pathlib.html#pathlib.Path "pathlib.Path") methods suitable for traversing directories and opening files.
For a representation of the object on the file-system, use [`importlib.resources.as_file()`](https://docs.python.org/3/library/importlib.resources.html#importlib.resources.as_file "importlib.resources.as_file").
Added in version 3.9.
Deprecated since version 3.12, will be removed in version 3.14: Use [`importlib.resources.abc.Traversable`](https://docs.python.org/3/library/importlib.resources.abc.html#importlib.resources.abc.Traversable "importlib.resources.abc.Traversable") instead. 

name[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.Traversable.name "Link to this definition")
    
Abstract. The base name of this object without any parent references. 

_abstractmethod_ iterdir()[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.Traversable.iterdir "Link to this definition")
    
Yield `Traversable` objects in `self`. 

_abstractmethod_ is_dir()[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.Traversable.is_dir "Link to this definition")
    
Return `True` if `self` is a directory. 

_abstractmethod_ is_file()[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.Traversable.is_file "Link to this definition")
    
Return `True` if `self` is a file. 

_abstractmethod_ joinpath(_child_)[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.Traversable.joinpath "Link to this definition")
    
Return Traversable child in `self`. 

_abstractmethod_ __truediv__(_child_)[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.Traversable.__truediv__ "Link to this definition")
    
Return `Traversable` child in `self`. 

_abstractmethod_ open(_mode ='r'_, _* args_, _** kwargs_)[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.Traversable.open "Link to this definition")
    
_mode_ may be ‘r’ or ‘rb’ to open as text or binary. Return a handle suitable for reading (same as [`pathlib.Path.open`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.open "pathlib.Path.open")).
When opening as text, accepts encoding parameters such as those accepted by [`io.TextIOWrapper`](https://docs.python.org/3/library/io.html#io.TextIOWrapper "io.TextIOWrapper"). 

read_bytes()[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.Traversable.read_bytes "Link to this definition")
    
Read contents of `self` as bytes. 

read_text(_encoding =None_)[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.Traversable.read_text "Link to this definition")
    
Read contents of `self` as text.