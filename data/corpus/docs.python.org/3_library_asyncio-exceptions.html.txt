Title: Asyncio Exceptions
URL: https://docs.python.org/3/library/asyncio-exceptions.html
Summary: This section of the Python documentation covers the exceptions related to the asyncio library. It provides a list of exception classes that are specifically used within the context of asynchronous programming, with links to related topics like Queues and Event Loop.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
#### Previous topic
[Queues](https://docs.python.org/3/library/asyncio-queue.html "previous chapter")
#### Next topic
[Event Loop](https://docs.python.org/3/library/asyncio-eventloop.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/asyncio-exceptions.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/asyncio-eventloop.html "Event Loop") |
  * [previous](https://docs.python.org/3/library/asyncio-queue.html "Queues") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Networking and Interprocess Communication](https://docs.python.org/3/library/ipc.html) »
  * [`asyncio` — Asynchronous I/O](https://docs.python.org/3/library/asyncio.html) »
  * [Exceptions](https://docs.python.org/3/library/asyncio-exceptions.html)
  * | 
  * Theme  Auto Light Dark |


# Exceptions[¶](https://docs.python.org/3/library/asyncio-exceptions.html#exceptions "Link to this heading")
**Source code:** [Lib/asyncio/exceptions.py](https://github.com/python/cpython/tree/3.13/Lib/asyncio/exceptions.py) 

_exception_ asyncio.TimeoutError[¶](https://docs.python.org/3/library/asyncio-exceptions.html#asyncio.TimeoutError "Link to this definition")
    
A deprecated alias of [`TimeoutError`](https://docs.python.org/3/library/exceptions.html#TimeoutError "TimeoutError"), raised when the operation has exceeded the given deadline.
Changed in version 3.11: This class was made an alias of [`TimeoutError`](https://docs.python.org/3/library/exceptions.html#TimeoutError "TimeoutError"). 

_exception_ asyncio.CancelledError[¶](https://docs.python.org/3/library/asyncio-exceptions.html#asyncio.CancelledError "Link to this definition")
    
The operation has been cancelled.
This exception can be caught to perform custom operations when asyncio Tasks are cancelled. In almost all situations the exception must be re-raised.
Changed in version 3.8: [`CancelledError`](https://docs.python.org/3/library/asyncio-exceptions.html#asyncio.CancelledError "asyncio.CancelledError") is now a subclass of [`BaseException`](https://docs.python.org/3/library/exceptions.html#BaseException "BaseException") rather than [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception "Exception"). 

_exception_ asyncio.InvalidStateError[¶](https://docs.python.org/3/library/asyncio-exceptions.html#asyncio.InvalidStateError "Link to this definition")
    
Invalid internal state of [`Task`](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task "asyncio.Task") or [`Future`](https://docs.python.org/3/library/asyncio-future.html#asyncio.Future "asyncio.Future").
Can be raised in situations like setting a result value for a _Future_ object that already has a result value set. 

_exception_ asyncio.SendfileNotAvailableError[¶](https://docs.python.org/3/library/asyncio-exceptions.html#asyncio.SendfileNotAvailableError "Link to this definition")
    
The “sendfile” syscall is not available for the given socket or file type.
A subclass of [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError"). 

_exception_ asyncio.IncompleteReadError[¶](https://docs.python.org/3/library/asyncio-exceptions.html#asyncio.IncompleteReadError "Link to this definition")
    
The requested read operation did not complete fully.
Raised by the [asyncio stream APIs](https://docs.python.org/3/library/asyncio-stream.html#asyncio-streams).
This exception is a subclass of [`EOFError`](https://docs.python.org/3/library/exceptions.html#EOFError "EOFError"). 

expected[¶](https://docs.python.org/3/library/asyncio-exceptions.html#asyncio.IncompleteReadError.expected "Link to this definition")
    
The total number ([`int`](https://docs.python.org/3/library/functions.html#int "int")) of expected bytes.