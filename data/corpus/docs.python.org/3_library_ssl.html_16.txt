Title: SSL Socket Protocol Selection
URL: https://docs.python.org/3/library/ssl.html
Summary: The SSLSocket class provides methods to retrieve the selected application layer protocols during the TLS handshake. The `selected_alpn_protocol()` method returns the ALPN protocol chosen, or `None` if none was selected or if handshake conditions are not met. Similarly, `selected_npn_protocol()` returns the NPN protocol used, with similar conditions for returning `None`. These features were introduced in Python version 3.5.
---

SSLSocket.selected_alpn_protocol()[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.selected_alpn_protocol "Link to this definition")
    
Return the protocol that was selected during the TLS handshake. If [`SSLContext.set_alpn_protocols()`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_alpn_protocols "ssl.SSLContext.set_alpn_protocols") was not called, if the other party does not support ALPN, if this socket does not support any of the client’s proposed protocols, or if the handshake has not happened yet, `None` is returned.
Added in version 3.5. 

SSLSocket.selected_npn_protocol()[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.selected_npn_protocol "Link to this definition")
    
Return the higher-level protocol that was selected during the TLS/SSL handshake. If [`SSLContext.set_npn_protocols()`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_npn_protocols "ssl.SSLContext.set_npn_protocols") was not called, or if the other party does not support NPN, or if the handshake has not yet happened, this will return `None`.
Added in version 3.3.
Deprecated since version 3.10: NPN has been superseded by ALPN 

SSLSocket.unwrap()[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.unwrap "Link to this definition")
    
Performs the SSL shutdown handshake, which removes the TLS layer from the underlying socket, and returns the underlying socket object. This can be used to go from encrypted operation over a connection to unencrypted. The returned socket should always be used for further communication with the other side of the connection, rather than the original socket. 

SSLSocket.verify_client_post_handshake()[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.verify_client_post_handshake "Link to this definition")
    
Requests post-handshake authentication (PHA) from a TLS 1.3 client. PHA can only be initiated for a TLS 1.3 connection from a server-side socket, after the initial TLS handshake and with PHA enabled on both sides, see [`SSLContext.post_handshake_auth`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.post_handshake_auth "ssl.SSLContext.post_handshake_auth").
The method does not perform a cert exchange immediately. The server-side sends a CertificateRequest during the next write event and expects the client to respond with a certificate on the next read event.
If any precondition isn’t met (e.g. not TLS 1.3, PHA not enabled), an [`SSLError`](https://docs.python.org/3/library/ssl.html#ssl.SSLError "ssl.SSLError") is raised.
Note
Only available with OpenSSL 1.1.1 and TLS 1.3 enabled. Without TLS 1.3 support, the method raises [`NotImplementedError`](https://docs.python.org/3/library/exceptions.html#NotImplementedError "NotImplementedError").
Added in version 3.8. 

SSLSocket.version()[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.version "Link to this definition")
    
Return the actual SSL protocol version negotiated by the connection as a string, or `None` if no secure connection is established. As of this writing, possible return values include `"SSLv2"`, `"SSLv3"`, `"TLSv1"`, `"TLSv1.1"` and `"TLSv1.2"`. Recent OpenSSL versions may define more return values.
Added in version 3.5. 

SSLSocket.pending()[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.pending "Link to this definition")
    
Returns the number of already decrypted bytes available for read, pending on the connection. 

SSLSocket.context[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.context "Link to this definition")
    
The [`SSLContext`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext "ssl.SSLContext") object this SSL socket is tied to.
Added in version 3.2. 

SSLSocket.server_side[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.server_side "Link to this definition")
    
A boolean which is `True` for server-side sockets and `False` for client-side sockets.
Added in version 3.2. 

SSLSocket.server_hostname[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.server_hostname "Link to this definition")
    
Hostname of the server: [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") type, or `None` for server-side socket or if the hostname was not specified in the constructor.
Added in version 3.2.
Changed in version 3.7: The attribute is now always ASCII text. When `server_hostname` is an internationalized domain name (IDN), this attribute now stores the A-label form (`"xn--pythn-mua.org"`), rather than the U-label form (`"pythön.org"`).