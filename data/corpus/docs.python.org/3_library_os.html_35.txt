Title: os.scandir() Function Details
URL: https://docs.python.org/3/library/os.html
Summary: The `scandir()` function in the os library uses different system calls on Unix and Windows for directory iteration. Introduced in Python 3.5, it received updates in 3.6 to include support for the context manager protocol and a close method. A ResourceWarning is issued if the iterator is not properly closed.
---

```

Note
On Unix-based systems, [`scandir()`](https://docs.python.org/3/library/os.html#os.scandir "os.scandir") uses the system’s [opendir()](https://pubs.opengroup.org/onlinepubs/009695399/functions/opendir.html) and [readdir()](https://pubs.opengroup.org/onlinepubs/009695399/functions/readdir_r.html) functions. On Windows, it uses the Win32 [FindFirstFileW](https://msdn.microsoft.com/en-us/library/windows/desktop/aa364418\(v=vs.85\).aspx) and [FindNextFileW](https://msdn.microsoft.com/en-us/library/windows/desktop/aa364428\(v=vs.85\).aspx) functions.
Added in version 3.5.
Changed in version 3.6: Added support for the [context manager](https://docs.python.org/3/glossary.html#term-context-manager) protocol and the [`close()`](https://docs.python.org/3/library/os.html#os.scandir.close "os.scandir.close") method. If a [`scandir()`](https://docs.python.org/3/library/os.html#os.scandir "os.scandir") iterator is neither exhausted nor explicitly closed a [`ResourceWarning`](https://docs.python.org/3/library/exceptions.html#ResourceWarning "ResourceWarning") will be emitted in its destructor.
The function accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object).
Changed in version 3.7: Added support for [file descriptors](https://docs.python.org/3/library/os.html#path-fd) on Unix. 

_class_ os.DirEntry[¶](https://docs.python.org/3/library/os.html#os.DirEntry "Link to this definition")
    
Object yielded by [`scandir()`](https://docs.python.org/3/library/os.html#os.scandir "os.scandir") to expose the file path and other file attributes of a directory entry.
[`scandir()`](https://docs.python.org/3/library/os.html#os.scandir "os.scandir") will provide as much of this information as possible without making additional system calls. When a `stat()` or `lstat()` system call is made, the `os.DirEntry` object will cache the result.
`os.DirEntry` instances are not intended to be stored in long-lived data structures; if you know the file metadata has changed or if a long time has elapsed since calling [`scandir()`](https://docs.python.org/3/library/os.html#os.scandir "os.scandir"), call `os.stat(entry.path)` to fetch up-to-date information.
Because the `os.DirEntry` methods can make operating system calls, they may also raise [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError"). If you need very fine-grained control over errors, you can catch [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") when calling one of the `os.DirEntry` methods and handle as appropriate.
To be directly usable as a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object), `os.DirEntry` implements the [`PathLike`](https://docs.python.org/3/library/os.html#os.PathLike "os.PathLike") interface.
Attributes and methods on a `os.DirEntry` instance are as follows: 

name[¶](https://docs.python.org/3/library/os.html#os.DirEntry.name "Link to this definition")
    
The entry’s base filename, relative to the [`scandir()`](https://docs.python.org/3/library/os.html#os.scandir "os.scandir") _path_ argument.
The [`name`](https://docs.python.org/3/library/os.html#os.name "os.name") attribute will be `bytes` if the [`scandir()`](https://docs.python.org/3/library/os.html#os.scandir "os.scandir") _path_ argument is of type `bytes` and `str` otherwise. Use [`fsdecode()`](https://docs.python.org/3/library/os.html#os.fsdecode "os.fsdecode") to decode byte filenames. 

path[¶](https://docs.python.org/3/library/os.html#os.DirEntry.path "Link to this definition")
    
The entry’s full path name: equivalent to `os.path.join(scandir_path, entry.name)` where _scandir_path_ is the [`scandir()`](https://docs.python.org/3/library/os.html#os.scandir "os.scandir") _path_ argument. The path is only absolute if the [`scandir()`](https://docs.python.org/3/library/os.html#os.scandir "os.scandir") _path_ argument was absolute. If the [`scandir()`](https://docs.python.org/3/library/os.html#os.scandir "os.scandir") _path_ argument was a [file descriptor](https://docs.python.org/3/library/os.html#path-fd), the [`path`](https://docs.python.org/3/library/os.path.html#module-os.path "os.path: Operations on pathnames.") attribute is the same as the [`name`](https://docs.python.org/3/library/os.html#os.name "os.name") attribute.
The [`path`](https://docs.python.org/3/library/os.path.html#module-os.path "os.path: Operations on pathnames.") attribute will be `bytes` if the [`scandir()`](https://docs.python.org/3/library/os.html#os.scandir "os.scandir") _path_ argument is of type `bytes` and `str` otherwise. Use [`fsdecode()`](https://docs.python.org/3/library/os.html#os.fsdecode "os.fsdecode") to decode byte filenames.