Title: Executing Modules and Standard Input in Python
URL: https://docs.python.org/3/using/cmdline.html
Summary: This section discusses the auditing event `cpython.run_module` for executing modules and equivalent functionalities outlined in PEP 338. It notes changes in version 3.1 related to package names for `__main__` submodules and the inclusion of namespace packages in version 3.4. Additionally, it explains how to read commands from standard input, which is implied when standard input is a terminal, and outlines adjustments to `sys.argv` and `sys.path` based on the input method.
---

```

Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `cpython.run_module` with argument `module-name`.
See also 

[`runpy.run_module()`](https://docs.python.org/3/library/runpy.html#runpy.run_module "runpy.run_module")
    
Equivalent functionality directly available to Python code
[**PEP 338**](https://peps.python.org/pep-0338/) – Executing modules as scripts
Changed in version 3.1: Supply the package name to run a `__main__` submodule.
Changed in version 3.4: namespace packages are also supported 

-
    
Read commands from standard input ([`sys.stdin`](https://docs.python.org/3/library/sys.html#sys.stdin "sys.stdin")). If standard input is a terminal, [`-i`](https://docs.python.org/3/using/cmdline.html#cmdoption-i) is implied.
If this option is given, the first element of [`sys.argv`](https://docs.python.org/3/library/sys.html#sys.argv "sys.argv") will be `"-"` and the current directory will be added to the start of [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path").
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `cpython.run_stdin` with no arguments. 

<script>
    
Execute the Python code contained in _script_ , which must be a filesystem path (absolute or relative) referring to either a Python file, a directory containing a `__main__.py` file, or a zipfile containing a `__main__.py` file.
If this option is given, the first element of [`sys.argv`](https://docs.python.org/3/library/sys.html#sys.argv "sys.argv") will be the script name as given on the command line.
If the script name refers directly to a Python file, the directory containing that file is added to the start of [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path"), and the file is executed as the [`__main__`](https://docs.python.org/3/library/__main__.html#module-__main__ "__main__: The environment where top-level code is run. Covers command-line interfaces, import-time behavior, and ``__name__ == '__main__'``.") module.
If the script name refers to a directory or zipfile, the script name is added to the start of [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path") and the `__main__.py` file in that location is executed as the [`__main__`](https://docs.python.org/3/library/__main__.html#module-__main__ "__main__: The environment where top-level code is run. Covers command-line interfaces, import-time behavior, and ``__name__ == '__main__'``.") module.
[`-I`](https://docs.python.org/3/using/cmdline.html#cmdoption-I) option can be used to run the script in isolated mode where [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path") contains neither the script’s directory nor the user’s site-packages directory. All `PYTHON*` environment variables are ignored, too.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `cpython.run_file` with argument `filename`.
See also 

[`runpy.run_path()`](https://docs.python.org/3/library/runpy.html#runpy.run_path "runpy.run_path")
    
Equivalent functionality directly available to Python code
If no interface option is given, [`-i`](https://docs.python.org/3/using/cmdline.html#cmdoption-i) is implied, `sys.argv[0]` is an empty string (`""`) and the current directory will be added to the start of [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path"). Also, tab-completion and history editing is automatically enabled, if available on your platform (see [Readline configuration](https://docs.python.org/3/library/site.html#rlcompleter-config)).
See also
[Invoking the Interpreter](https://docs.python.org/3/tutorial/interpreter.html#tut-invoking)
Changed in version 3.4: Automatic enabling of tab-completion and history editing.
### 1.1.2. Generic options[¶](https://docs.python.org/3/using/cmdline.html#generic-options "Link to this heading") 

-?[¶](https://docs.python.org/3/using/cmdline.html#cmdoption-0 "Link to this definition")


-h[¶](https://docs.python.org/3/using/cmdline.html#cmdoption-h "Link to this definition")


--help[¶](https://docs.python.org/3/using/cmdline.html#cmdoption-help "Link to this definition")
    
Print a short description of all command line options and corresponding environment variables and exit. 

--help-env[¶](https://docs.python.org/3/using/cmdline.html#cmdoption-help-env "Link to this definition")
    
Print a short description of Python-specific environment variables and exit.
Added in version 3.11. 

--help-xoptions[¶](https://docs.python.org/3/using/cmdline.html#cmdoption-help-xoptions "Link to this definition")
    
Print a description of implementation-specific [`-X`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) options and exit.
Added in version 3.11. 

--help-all[¶](https://docs.python.org/3/using/cmdline.html#cmdoption-help-all "Link to this definition")
    
Print complete usage information and exit.
Added in version 3.11.