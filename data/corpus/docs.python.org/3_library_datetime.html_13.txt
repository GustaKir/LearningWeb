Title: datetime.fromtimestamp Method
URL: https://docs.python.org/3/library/datetime.html
Summary: The `datetime.fromtimestamp` class method returns the local date and time corresponding to a given POSIX timestamp. If no time zone (`tz`) is specified, it converts the timestamp to the local time of the platform. If `tz` is provided, it must be a `tzinfo` subclass, and the timestamp is converted to that time zone. The method may raise an `OverflowError` under certain conditions.
---

_classmethod_ datetime.fromtimestamp(_timestamp_ , _tz =None_)[¶](https://docs.python.org/3/library/datetime.html#datetime.datetime.fromtimestamp "Link to this definition")
    
Return the local date and time corresponding to the POSIX timestamp, such as is returned by [`time.time()`](https://docs.python.org/3/library/time.html#time.time "time.time"). If optional argument _tz_ is `None` or not specified, the timestamp is converted to the platform’s local date and time, and the returned [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") object is naive.
If _tz_ is not `None`, it must be an instance of a [`tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo "datetime.tzinfo") subclass, and the timestamp is converted to _tz_ ’s time zone.
[`fromtimestamp()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.fromtimestamp "datetime.datetime.fromtimestamp") may raise [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError"), if the timestamp is out of the range of values supported by the platform C `localtime()` or `gmtime()` functions, and [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") on `localtime()` or `gmtime()` failure. It’s common for this to be restricted to years in 1970 through 2038. Note that on non-POSIX systems that include leap seconds in their notion of a timestamp, leap seconds are ignored by [`fromtimestamp()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.fromtimestamp "datetime.datetime.fromtimestamp"), and then it’s possible to have two timestamps differing by a second that yield identical [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") objects. This method is preferred over [`utcfromtimestamp()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.utcfromtimestamp "datetime.datetime.utcfromtimestamp").
Changed in version 3.3: Raise [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError") instead of [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if the timestamp is out of the range of values supported by the platform C `localtime()` or `gmtime()` functions. Raise [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") instead of [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") on `localtime()` or `gmtime()` failure.
Changed in version 3.6: [`fromtimestamp()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.fromtimestamp "datetime.datetime.fromtimestamp") may return instances with [`fold`](https://docs.python.org/3/library/datetime.html#datetime.datetime.fold "datetime.datetime.fold") set to 1. 

_classmethod_ datetime.utcfromtimestamp(_timestamp_)[¶](https://docs.python.org/3/library/datetime.html#datetime.datetime.utcfromtimestamp "Link to this definition")
    
Return the UTC [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") corresponding to the POSIX timestamp, with [`tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.datetime.tzinfo "datetime.datetime.tzinfo") `None`. (The resulting object is naive.)
This may raise [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError"), if the timestamp is out of the range of values supported by the platform C `gmtime()` function, and [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") on `gmtime()` failure. It’s common for this to be restricted to years in 1970 through 2038.
To get an aware [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") object, call [`fromtimestamp()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.fromtimestamp "datetime.datetime.fromtimestamp"):
```
datetime.fromtimestamp(timestamp, timezone.utc)

```

On the POSIX compliant platforms, it is equivalent to the following expression:
```
datetime(1970, 1, 1, tzinfo=timezone.utc) + timedelta(seconds=timestamp)