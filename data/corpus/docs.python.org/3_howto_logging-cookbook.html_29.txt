Title: Configuring Custom Logging Handlers
URL: https://docs.python.org/3/howto/logging-cookbook.html
Summary: This section discusses how to replace standard logging handlers with custom ones using 'ext://' syntax in the `dictConfig()` function. It illustrates how to implement specific functionalities like file permission changes with `os.chmod()` and suggests that this approach can be adapted for various types of logging handlers, including rotating file handlers.
---

```

where `project.util` can be replaced with the actual name of the package where the function resides. In the above working script, using `'ext://__main__.owned_file_handler'` should work. Here, the actual callable is resolved by [`dictConfig()`](https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig "logging.config.dictConfig") from the `ext://` specification.
This example hopefully also points the way to how you could implement other types of file change - e.g. setting specific POSIX permission bits - in the same way, using [`os.chmod()`](https://docs.python.org/3/library/os.html#os.chmod "os.chmod").
Of course, the approach could also be extended to types of handler other than a [`FileHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.FileHandler "logging.FileHandler") - for example, one of the rotating file handlers, or a different type of handler altogether.
## Using particular formatting styles throughout your application[¶](https://docs.python.org/3/howto/logging-cookbook.html#using-particular-formatting-styles-throughout-your-application "Link to this heading")
In Python 3.2, the [`Formatter`](https://docs.python.org/3/library/logging.html#logging.Formatter "logging.Formatter") gained a `style` keyword parameter which, while defaulting to `%` for backward compatibility, allowed the specification of `{` or `$` to support the formatting approaches supported by [`str.format()`](https://docs.python.org/3/library/stdtypes.html#str.format "str.format") and [`string.Template`](https://docs.python.org/3/library/string.html#string.Template "string.Template"). Note that this governs the formatting of logging messages for final output to logs, and is completely orthogonal to how an individual logging message is constructed.
Logging calls ([`debug()`](https://docs.python.org/3/library/logging.html#logging.Logger.debug "logging.Logger.debug"), [`info()`](https://docs.python.org/3/library/logging.html#logging.Logger.info "logging.Logger.info") etc.) only take positional parameters for the actual logging message itself, with keyword parameters used only for determining options for how to handle the logging call (e.g. the `exc_info` keyword parameter to indicate that traceback information should be logged, or the `extra` keyword parameter to indicate additional contextual information to be added to the log). So you cannot directly make logging calls using [`str.format()`](https://docs.python.org/3/library/stdtypes.html#str.format "str.format") or [`string.Template`](https://docs.python.org/3/library/string.html#string.Template "string.Template") syntax, because internally the logging package uses %-formatting to merge the format string and the variable arguments. There would be no changing this while preserving backward compatibility, since all logging calls which are out there in existing code will be using %-format strings.
There have been suggestions to associate format styles with specific loggers, but that approach also runs into backward compatibility problems because any existing code could be using a given logger name and using %-formatting.
For logging to work interoperably between any third-party libraries and your code, decisions about formatting need to be made at the level of the individual logging call. This opens up a couple of ways in which alternative formatting styles can be accommodated.
### Using LogRecord factories[¶](https://docs.python.org/3/howto/logging-cookbook.html#using-logrecord-factories "Link to this heading")
In Python 3.2, along with the [`Formatter`](https://docs.python.org/3/library/logging.html#logging.Formatter "logging.Formatter") changes mentioned above, the logging package gained the ability to allow users to set their own [`LogRecord`](https://docs.python.org/3/library/logging.html#logging.LogRecord "logging.LogRecord") subclasses, using the [`setLogRecordFactory()`](https://docs.python.org/3/library/logging.html#logging.setLogRecordFactory "logging.setLogRecordFactory") function. You can use this to set your own subclass of [`LogRecord`](https://docs.python.org/3/library/logging.html#logging.LogRecord "logging.LogRecord"), which does the Right Thing by overriding the [`getMessage()`](https://docs.python.org/3/library/logging.html#logging.LogRecord.getMessage "logging.LogRecord.getMessage") method. The base class implementation of this method is where the `msg % args` formatting happens, and where you can substitute your alternate formatting; however, you should be careful to support all formatting styles and allow %-formatting as the default, to ensure interoperability with other code. Care should also be taken to call `str(self.msg)`, just as the base implementation does.
Refer to the reference documentation on [`setLogRecordFactory()`](https://docs.python.org/3/library/logging.html#logging.setLogRecordFactory "logging.setLogRecordFactory") and [`LogRecord`](https://docs.python.org/3/library/logging.html#logging.LogRecord