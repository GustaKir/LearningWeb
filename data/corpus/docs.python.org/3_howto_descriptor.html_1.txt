Title: Descriptor How-To Guide
URL: https://docs.python.org/3/howto/descriptor.html
Summary: This document provides an overview of descriptors in Python, featuring a primer on their usage, including examples of simple descriptors, dynamic lookups, managed attributes, and customization. It also includes a complete practical example with sections on validator classes and custom validators.
---

Contact:
    
<python at rcn dot com>
Contents
  * [Descriptor Guide](https://docs.python.org/3/howto/descriptor.html#descriptor-guide)
    * [Primer](https://docs.python.org/3/howto/descriptor.html#primer)
      * [Simple example: A descriptor that returns a constant](https://docs.python.org/3/howto/descriptor.html#simple-example-a-descriptor-that-returns-a-constant)
      * [Dynamic lookups](https://docs.python.org/3/howto/descriptor.html#dynamic-lookups)
      * [Managed attributes](https://docs.python.org/3/howto/descriptor.html#managed-attributes)
      * [Customized names](https://docs.python.org/3/howto/descriptor.html#customized-names)
      * [Closing thoughts](https://docs.python.org/3/howto/descriptor.html#closing-thoughts)
    * [Complete Practical Example](https://docs.python.org/3/howto/descriptor.html#complete-practical-example)
      * [Validator class](https://docs.python.org/3/howto/descriptor.html#validator-class)
      * [Custom validators](https://docs.python.org/3/howto/descriptor.html#custom-validators)
      * [Practical application](https://docs.python.org/3/howto/descriptor.html#practical-application)
    * [Technical Tutorial](https://docs.python.org/3/howto/descriptor.html#technical-tutorial)
      * [Abstract](https://docs.python.org/3/howto/descriptor.html#abstract)
      * [Definition and introduction](https://docs.python.org/3/howto/descriptor.html#definition-and-introduction)
      * [Descriptor protocol](https://docs.python.org/3/howto/descriptor.html#descriptor-protocol)
      * [Overview of descriptor invocation](https://docs.python.org/3/howto/descriptor.html#overview-of-descriptor-invocation)
      * [Invocation from an instance](https://docs.python.org/3/howto/descriptor.html#invocation-from-an-instance)
      * [Invocation from a class](https://docs.python.org/3/howto/descriptor.html#invocation-from-a-class)
      * [Invocation from super](https://docs.python.org/3/howto/descriptor.html#invocation-from-super)
      * [Summary of invocation logic](https://docs.python.org/3/howto/descriptor.html#summary-of-invocation-logic)
      * [Automatic name notification](https://docs.python.org/3/howto/descriptor.html#automatic-name-notification)
      * [ORM example](https://docs.python.org/3/howto/descriptor.html#orm-example)
    * [Pure Python Equivalents](https://docs.python.org/3/howto/descriptor.html#pure-python-equivalents)
      * [Properties](https://docs.python.org/3/howto/descriptor.html#properties)
      * [Functions and methods](https://docs.python.org/3/howto/descriptor.html#functions-and-methods)
      * [Kinds of methods](https://docs.python.org/3/howto/descriptor.html#kinds-of-methods)
      * [Static methods](https://docs.python.org/3/howto/descriptor.html#static-methods)
      * [Class methods](https://docs.python.org/3/howto/descriptor.html#class-methods)
      * [Member objects and __slots__](https://docs.python.org/3/howto/descriptor.html#member-objects-and-slots)


[Descriptors](https://docs.python.org/3/glossary.html#term-descriptor) let objects customize attribute lookup, storage, and deletion.
This guide has four major sections:
  1. The “primer” gives a basic overview, moving gently from simple examples, adding one feature at a time. Start here if you’re new to descriptors.
  2. The second section shows a complete, practical descriptor example. If you already know the basics, start there.
  3. The third section provides a more technical tutorial that goes into the detailed mechanics of how descriptors work. Most people don’t need this level of detail.
  4. The last section has pure Python equivalents for built-in descriptors that are written in C. Read this if you’re curious about how functions turn into bound methods or about the implementation of common tools like [`classmethod()`](https://docs.python.org/3/library/functions.html#classmethod "classmethod"), [`staticmethod()`](https://docs.python.org/3/library/functions.html#staticmethod "staticmethod"), [`property()`](https://docs.python.org/3/library/functions.html#property "property"), and [__slots__](https://docs.python.org/3/glossary.html#term-__slots__).


## [Primer](https://docs.python.org/3/howto/descriptor.html#id2)[¶](https://docs.python.org/3/howto/descriptor.html#primer "Link to this heading")
In this primer, we start with the most basic possible example and then we’ll add new capabilities one by one.
### [Simple example: A descriptor that returns a constant](https://docs.python.org/3/howto/descriptor.html#id3)[¶](https://docs.python.org/3/howto/descriptor.html#simple-example-a-descriptor-that-returns-a-constant "Link to this heading")
The `Ten` class is a descriptor whose [`__get__()`](https://docs.python.org/3/reference/datamodel.html#object.__get__ "object.__get__") method always returns the constant `10`:
```
classTen:
  def__get__(self, obj, objtype=None):
    return 10

```

To use the descriptor, it must be stored as a class variable in another class: