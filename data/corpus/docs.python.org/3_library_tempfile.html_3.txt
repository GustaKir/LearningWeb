Title: SpooledTemporaryFile Rollover Method
URL: https://docs.python.org/3/library/tempfile.html
Summary: The `rollover()` method in `SpooledTemporaryFile` allows the file to switch from an in-memory representation to an on-disk file, irrespective of its size. The resulting file-like object can be either a `BytesIO`, `TextIOWrapper`, or a true file object, depending on the initial mode and the method call.
---

rollover()[¶](https://docs.python.org/3/library/tempfile.html#tempfile.SpooledTemporaryFile.rollover "Link to this definition")
    
The resulting file has one additional method, `rollover()`, which causes the file to roll over to an on-disk file regardless of its size.
The returned object is a file-like object whose `_file` attribute is either an [`io.BytesIO`](https://docs.python.org/3/library/io.html#io.BytesIO "io.BytesIO") or [`io.TextIOWrapper`](https://docs.python.org/3/library/io.html#io.TextIOWrapper "io.TextIOWrapper") object (depending on whether binary or text _mode_ was specified) or a true file object, depending on whether [`rollover()`](https://docs.python.org/3/library/tempfile.html#tempfile.SpooledTemporaryFile.rollover "tempfile.SpooledTemporaryFile.rollover") has been called. This file-like object can be used in a [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement, just like a normal file.
Changed in version 3.3: the truncate method now accepts a _size_ argument.
Changed in version 3.8: Added _errors_ parameter.
Changed in version 3.11: Fully implements the [`io.BufferedIOBase`](https://docs.python.org/3/library/io.html#io.BufferedIOBase "io.BufferedIOBase") and [`io.TextIOBase`](https://docs.python.org/3/library/io.html#io.TextIOBase "io.TextIOBase") abstract base classes (depending on whether binary or text _mode_ was specified). 

_class_ tempfile.TemporaryDirectory(_suffix =None_, _prefix =None_, _dir =None_, _ignore_cleanup_errors =False_, _*_ , _delete =True_)[¶](https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryDirectory "Link to this definition")
    
This class securely creates a temporary directory using the same rules as [`mkdtemp()`](https://docs.python.org/3/library/tempfile.html#tempfile.mkdtemp "tempfile.mkdtemp"). The resulting object can be used as a [context manager](https://docs.python.org/3/glossary.html#term-context-manager) (see [Examples](https://docs.python.org/3/library/tempfile.html#tempfile-examples)). On completion of the context or destruction of the temporary directory object, the newly created temporary directory and all its contents are removed from the filesystem. 

name[¶](https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryDirectory.name "Link to this definition")
    
The directory name can be retrieved from the `name` attribute of the returned object. When the returned object is used as a [context manager](https://docs.python.org/3/glossary.html#term-context-manager), the `name` will be assigned to the target of the `as` clause in the [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement, if there is one. 

cleanup()[¶](https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryDirectory.cleanup "Link to this definition")
    
The directory can be explicitly cleaned up by calling the `cleanup()` method. If _ignore_cleanup_errors_ is true, any unhandled exceptions during explicit or implicit cleanup (such as a [`PermissionError`](https://docs.python.org/3/library/exceptions.html#PermissionError "PermissionError") removing open files on Windows) will be ignored, and the remaining removable items deleted on a “best-effort” basis. Otherwise, errors will be raised in whatever context cleanup occurs (the `cleanup()` call, exiting the context manager, when the object is garbage-collected or during interpreter shutdown).
The _delete_ parameter can be used to disable cleanup of the directory tree upon exiting the context. While it may seem unusual for a context manager to disable the action taken when exiting the context, it can be useful during debugging or when you need your cleanup behavior to be conditional based on other logic.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `tempfile.mkdtemp` with argument `fullpath`.
Added in version 3.2.
Changed in version 3.10: Added _ignore_cleanup_errors_ parameter.
Changed in version 3.12: Added the _delete_ parameter.