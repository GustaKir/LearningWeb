Title: Class Attributes in Python Data Model
URL: https://docs.python.org/3/reference/datamodel.html
Summary: This section outlines key attributes of classes in Python's data model, including `__dict__` for read-only access to the class's namespace, `__bases__` for the class's inheritance structure, and `__doc__` for the class's documentation string.
---

type.__dict__[¶](https://docs.python.org/3/reference/datamodel.html#type.__dict__ "Link to this definition")
| A [`mapping proxy`](https://docs.python.org/3/library/types.html#types.MappingProxyType "types.MappingProxyType") providing a read-only view of the class’s namespace. See also: [`__dict__ attributes`](https://docs.python.org/3/reference/datamodel.html#object.__dict__ "object.__dict__"). 

type.__bases__[¶](https://docs.python.org/3/reference/datamodel.html#type.__bases__ "Link to this definition")
| A [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple") containing the class’s bases. In most cases, for a class defined as `class X(A, B, C)`, `X.__bases__` will be exactly equal to `(A, B, C)`. 

type.__doc__[¶](https://docs.python.org/3/reference/datamodel.html#type.__doc__ "Link to this definition")
| The class’s documentation string, or `None` if undefined. Not inherited by subclasses. 

type.__annotations__[¶](https://docs.python.org/3/reference/datamodel.html#type.__annotations__ "Link to this definition")
| A dictionary containing [variable annotations](https://docs.python.org/3/glossary.html#term-variable-annotation) collected during class body execution. For best practices on working with `__annotations__`, please see [Annotations Best Practices](https://docs.python.org/3/howto/annotations.html#annotations-howto). Caution Accessing the `__annotations__` attribute of a class object directly may yield incorrect results in the presence of metaclasses. In addition, the attribute may not exist for some classes. Use [`inspect.get_annotations()`](https://docs.python.org/3/library/inspect.html#inspect.get_annotations "inspect.get_annotations") to retrieve class annotations safely. 

type.__type_params__[¶](https://docs.python.org/3/reference/datamodel.html#type.__type_params__ "Link to this definition")
| A [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple") containing the [type parameters](https://docs.python.org/3/reference/compound_stmts.html#type-params) of a [generic class](https://docs.python.org/3/reference/compound_stmts.html#generic-classes). Added in version 3.12. 

type.__static_attributes__[¶](https://docs.python.org/3/reference/datamodel.html#type.__static_attributes__ "Link to this definition")
| A [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple") containing names of attributes of this class which are assigned through `self.X` from any function in its body. Added in version 3.13. 

type.__firstlineno__[¶](https://docs.python.org/3/reference/datamodel.html#type.__firstlineno__ "Link to this definition")
| The line number of the first line of the class definition, including decorators. Setting the `__module__` attribute removes the `__firstlineno__` item from the type’s dictionary. Added in version 3.13. 

type.__mro__[¶](https://docs.python.org/3/reference/datamodel.html#type.__mro__ "Link to this definition")
| The [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple") of classes that are considered when looking for base classes during method resolution.  
#### 3.2.10.2. Special methods[¶](https://docs.python.org/3/reference/datamodel.html#special-methods "Link to this heading")
In addition to the special attributes described above, all Python classes also have the following two methods available: 

type.mro()[¶](https://docs.python.org/3/reference/datamodel.html#type.mro "Link to this definition")
    
This method can be overridden by a metaclass to customize the method resolution order for its instances. It is called at class instantiation, and its result is stored in [`__mro__`](https://docs.python.org/3/reference/datamodel.html#type.__mro__ "type.__mro__"). 

type.__subclasses__()[¶](https://docs.python.org/3/reference/datamodel.html#type.__subclasses__ "Link to this definition")
    
Each class keeps a list of weak references to its immediate subclasses. This method returns a list of all those references still alive. The list is in definition order. Example:
>>>```
>>> classA: pass
>>> classB(A): pass
>>> A.__subclasses__()
[<class 'B'>]