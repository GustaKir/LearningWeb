Title: Argument Abbreviations in argparse
URL: https://docs.python.org/3/library/argparse.html
Summary: This section discusses the `parse_args()` method in the argparse library, which allows for the abbreviation of long options to a prefix when the abbreviation is unambiguous. Examples are provided to illustrate how the method works with different argument inputs.
---

```

See also [the argparse howto on ambiguous arguments](https://docs.python.org/3/howto/argparse.html#specifying-ambiguous-arguments) for more details.
### Argument abbreviations (prefix matching)[¶](https://docs.python.org/3/library/argparse.html#argument-abbreviations-prefix-matching "Link to this heading")
The [`parse_args()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.parse_args "argparse.ArgumentParser.parse_args") method [by default](https://docs.python.org/3/library/argparse.html#allow-abbrev) allows long options to be abbreviated to a prefix, if the abbreviation is unambiguous (the prefix matches a unique option):
>>>```
>>> parser = argparse.ArgumentParser(prog='PROG')
>>> parser.add_argument('-bacon')
>>> parser.add_argument('-badger')
>>> parser.parse_args('-bac MMM'.split())
Namespace(bacon='MMM', badger=None)
>>> parser.parse_args('-bad WOOD'.split())
Namespace(bacon=None, badger='WOOD')
>>> parser.parse_args('-ba BA'.split())
usage: PROG [-h] [-bacon BACON] [-badger BADGER]
PROG: error: ambiguous option: -ba could match -badger, -bacon

```

An error is produced for arguments that could produce more than one options. This feature can be disabled by setting [allow_abbrev](https://docs.python.org/3/library/argparse.html#allow-abbrev) to `False`.
### Beyond `sys.argv`[¶](https://docs.python.org/3/library/argparse.html#beyond-sys-argv "Link to this heading")
Sometimes it may be useful to have an [`ArgumentParser`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser "argparse.ArgumentParser") parse arguments other than those of [`sys.argv`](https://docs.python.org/3/library/sys.html#sys.argv "sys.argv"). This can be accomplished by passing a list of strings to [`parse_args()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.parse_args "argparse.ArgumentParser.parse_args"). This is useful for testing at the interactive prompt:
>>>```
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument(
...   'integers', metavar='int', type=int, choices=range(10),
...   nargs='+', help='an integer in the range 0..9')
>>> parser.add_argument(
...   '--sum', dest='accumulate', action='store_const', const=sum,
...   default=max, help='sum the integers (default: find the max)')
>>> parser.parse_args(['1', '2', '3', '4'])
Namespace(accumulate=<built-in function max>, integers=[1, 2, 3, 4])
>>> parser.parse_args(['1', '2', '3', '4', '--sum'])
Namespace(accumulate=<built-in function sum>, integers=[1, 2, 3, 4])

```

### The Namespace object[¶](https://docs.python.org/3/library/argparse.html#the-namespace-object "Link to this heading") 

_class_ argparse.Namespace[¶](https://docs.python.org/3/library/argparse.html#argparse.Namespace "Link to this definition")
    
Simple class used by default by [`parse_args()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.parse_args "argparse.ArgumentParser.parse_args") to create an object holding attributes and return it.
This class is deliberately simple, just an [`object`](https://docs.python.org/3/library/functions.html#object "object") subclass with a readable string representation. If you prefer to have dict-like view of the attributes, you can use the standard Python idiom, [`vars()`](https://docs.python.org/3/library/functions.html#vars "vars"):
>>>```
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('--foo')
>>> args = parser.parse_args(['--foo', 'BAR'])
>>> vars(args)
{'foo': 'BAR'}

```

It may also be useful to have an [`ArgumentParser`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser "argparse.ArgumentParser") assign attributes to an already existing object, rather than a new [`Namespace`](https://docs.python.org/3/library/argparse.html#argparse.Namespace "argparse.Namespace") object. This can be achieved by specifying the `namespace=` keyword argument:
>>>```
>>> classC:
...   pass
...
>>> c = C()
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('--foo')
>>> parser.parse_args(args=['--foo', 'BAR'], namespace=c)
>>> c.foo
'BAR'