Title: Bytes-like Object
URL: https://docs.python.org/3/glossary.html
Summary: A bytes-like object is any object that supports the Buffer Protocol, allowing it to export a C-contiguous buffer. This includes `bytes`, `bytearray`, and `array.array` objects, as well as specific `memoryview` objects. These objects facilitate operations with binary data such as compression, binary file saving, and socket communication, with some requiring mutability.
---

bytes-like object[¶](https://docs.python.org/3/glossary.html#term-bytes-like-object "Link to this term")
    
An object that supports the [Buffer Protocol](https://docs.python.org/3/c-api/buffer.html#bufferobjects) and can export a C-[contiguous](https://docs.python.org/3/glossary.html#term-contiguous) buffer. This includes all [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes"), [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray"), and [`array.array`](https://docs.python.org/3/library/array.html#array.array "array.array") objects, as well as many common [`memoryview`](https://docs.python.org/3/library/stdtypes.html#memoryview "memoryview") objects. Bytes-like objects can be used for various operations that work with binary data; these include compression, saving to a binary file, and sending over a socket.
Some operations need the binary data to be mutable. The documentation often refers to these as “read-write bytes-like objects”. Example mutable buffer objects include [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") and a [`memoryview`](https://docs.python.org/3/library/stdtypes.html#memoryview "memoryview") of a [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray"). Other operations require the binary data to be stored in immutable objects (“read-only bytes-like objects”); examples of these include [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") and a [`memoryview`](https://docs.python.org/3/library/stdtypes.html#memoryview "memoryview") of a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") object. 

bytecode[¶](https://docs.python.org/3/glossary.html#term-bytecode "Link to this term")
    
Python source code is compiled into bytecode, the internal representation of a Python program in the CPython interpreter. The bytecode is also cached in `.pyc` files so that executing the same file is faster the second time (recompilation from source to bytecode can be avoided). This “intermediate language” is said to run on a [virtual machine](https://docs.python.org/3/glossary.html#term-virtual-machine) that executes the machine code corresponding to each bytecode. Do note that bytecodes are not expected to work between different Python virtual machines, nor to be stable between Python releases.
A list of bytecode instructions can be found in the documentation for [the dis module](https://docs.python.org/3/library/dis.html#bytecodes). 

callable[¶](https://docs.python.org/3/glossary.html#term-callable "Link to this term")
    
A callable is an object that can be called, possibly with a set of arguments (see [argument](https://docs.python.org/3/glossary.html#term-argument)), with the following syntax:
```
callable(argument1, argument2, argumentN)

```

A [function](https://docs.python.org/3/glossary.html#term-function), and by extension a [method](https://docs.python.org/3/glossary.html#term-method), is a callable. An instance of a class that implements the [`__call__()`](https://docs.python.org/3/reference/datamodel.html#object.__call__ "object.__call__") method is also a callable. 

callback[¶](https://docs.python.org/3/glossary.html#term-callback "Link to this term")
    
A subroutine function which is passed as an argument to be executed at some point in the future. 

class[¶](https://docs.python.org/3/glossary.html#term-class "Link to this term")
    
A template for creating user-defined objects. Class definitions normally contain method definitions which operate on instances of the class. 

class variable[¶](https://docs.python.org/3/glossary.html#term-class-variable "Link to this term")
    
A variable defined in a class and intended to be modified only at class level (i.e., not in an instance of the class). 

closure variable[¶](https://docs.python.org/3/glossary.html#term-closure-variable "Link to this term")
    
A [free variable](https://docs.python.org/3/glossary.html#term-free-variable) referenced from a [nested scope](https://docs.python.org/3/glossary.html#term-nested-scope) that is defined in an outer scope rather than being resolved at runtime from the globals or builtin namespaces. May be explicitly defined with the [`nonlocal`](https://docs.python.org/3/reference/simple_stmts.html#nonlocal) keyword to allow write access, or implicitly defined if the variable is only being read.
For example, in the `inner` function in the following code, both `x` and `print` are [free variables](https://docs.python.org/3/glossary.html#term-free-variable), but only `x` is a _closure variable_ :
```
defouter():
  x = 0
  definner():
    nonlocal x
    x += 1
    print(x)
  return inner