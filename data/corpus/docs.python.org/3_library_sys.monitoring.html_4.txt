Title: sys.monitoring Module Functions
URL: https://docs.python.org/3/library/sys.monitoring.html
Summary: The `sys.monitoring` module contains functions for managing active events in Python. The `get_events` function returns an integer representing all active events, while `set_events` activates specified events based on a provided event set, raising a ValueError if the tool ID is not in use.
---

sys.monitoring.get_events(_tool_id :[int](https://docs.python.org/3/library/functions.html#int "int")_, _/_) → [int](https://docs.python.org/3/library/functions.html#int "int")[¶](https://docs.python.org/3/library/sys.monitoring.html#sys.monitoring.get_events "Link to this definition")
    
Returns the `int` representing all the active events. 

sys.monitoring.set_events(_tool_id :[int](https://docs.python.org/3/library/functions.html#int "int")_, _event_set :[int](https://docs.python.org/3/library/functions.html#int "int")_, _/_) → [None](https://docs.python.org/3/library/constants.html#None "None")[¶](https://docs.python.org/3/library/sys.monitoring.html#sys.monitoring.set_events "Link to this definition")
    
Activates all events which are set in _event_set_. Raises a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if _tool_id_ is not in use.
No events are active by default.
### Per code object events[¶](https://docs.python.org/3/library/sys.monitoring.html#per-code-object-events "Link to this heading")
Events can also be controlled on a per code object basis. The functions defined below which accept a [`types.CodeType`](https://docs.python.org/3/library/types.html#types.CodeType "types.CodeType") should be prepared to accept a look-alike object from functions which are not defined in Python (see [Monitoring C API](https://docs.python.org/3/c-api/monitoring.html#c-api-monitoring)). 

sys.monitoring.get_local_events(_tool_id :[int](https://docs.python.org/3/library/functions.html#int "int")_, _code :[CodeType](https://docs.python.org/3/library/types.html#types.CodeType "types.CodeType")_, _/_) → [int](https://docs.python.org/3/library/functions.html#int "int")[¶](https://docs.python.org/3/library/sys.monitoring.html#sys.monitoring.get_local_events "Link to this definition")
    
Returns all the local events for _code_ 

sys.monitoring.set_local_events(_tool_id :[int](https://docs.python.org/3/library/functions.html#int "int")_, _code :[CodeType](https://docs.python.org/3/library/types.html#types.CodeType "types.CodeType")_, _event_set :[int](https://docs.python.org/3/library/functions.html#int "int")_, _/_) → [None](https://docs.python.org/3/library/constants.html#None "None")[¶](https://docs.python.org/3/library/sys.monitoring.html#sys.monitoring.set_local_events "Link to this definition")
    
Activates all the local events for _code_ which are set in _event_set_. Raises a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if _tool_id_ is not in use.
Local events add to global events, but do not mask them. In other words, all global events will trigger for a code object, regardless of the local events.
### Disabling events[¶](https://docs.python.org/3/library/sys.monitoring.html#disabling-events "Link to this heading") 

sys.monitoring.DISABLE[¶](https://docs.python.org/3/library/sys.monitoring.html#sys.monitoring.DISABLE "Link to this definition")
    
A special value that can be returned from a callback function to disable events for the current code location.
Local events can be disabled for a specific code location by returning [`sys.monitoring.DISABLE`](https://docs.python.org/3/library/sys.monitoring.html#sys.monitoring.DISABLE "sys.monitoring.DISABLE") from a callback function. This does not change which events are set, or any other code locations for the same event.
Disabling events for specific locations is very important for high performance monitoring. For example, a program can be run under a debugger with no overhead if the debugger disables all monitoring except for a few breakpoints. 

sys.monitoring.restart_events() → [None](https://docs.python.org/3/library/constants.html#None "None")[¶](https://docs.python.org/3/library/sys.monitoring.html#sys.monitoring.restart_events "Link to this definition")
    
Enable all the events that were disabled by [`sys.monitoring.DISABLE`](https://docs.python.org/3/library/sys.monitoring.html#sys.monitoring.DISABLE "sys.monitoring.DISABLE") for all tools.
## Registering callback functions[¶](https://docs.python.org/3/library/sys.monitoring.html#registering-callback-functions "Link to this heading")
To register a callable for events call