Title: Validators in Python: Class Implementations
URL: https://docs.python.org/3/howto/descriptor.html
Summary: This document chunk describes three classes that implement validation in Python: `classOneOf`, which checks if a value is within a set of options; `classNumber`, which validates if a value is a number within specified min and max limits; and `classString`, which ensures that a string meets size and predicate conditions.
---

```
classOneOf(Validator):
  def__init__(self, *options):
    self.options = set(options)
  defvalidate(self, value):
    if value not in self.options:
      raise ValueError(
        f'Expected {value!r} to be one of {self.options!r}'
      )
classNumber(Validator):
  def__init__(self, minvalue=None, maxvalue=None):
    self.minvalue = minvalue
    self.maxvalue = maxvalue
  defvalidate(self, value):
    if not isinstance(value, (int, float)):
      raise TypeError(f'Expected {value!r} to be an int or float')
    if self.minvalue is not None and value < self.minvalue:
      raise ValueError(
        f'Expected {value!r} to be at least {self.minvalue!r}'
      )
    if self.maxvalue is not None and value > self.maxvalue:
      raise ValueError(
        f'Expected {value!r} to be no more than {self.maxvalue!r}'
      )
classString(Validator):
  def__init__(self, minsize=None, maxsize=None, predicate=None):
    self.minsize = minsize
    self.maxsize = maxsize
    self.predicate = predicate
  defvalidate(self, value):
    if not isinstance(value, str):
      raise TypeError(f'Expected {value!r} to be an str')
    if self.minsize is not None and len(value) < self.minsize:
      raise ValueError(
        f'Expected {value!r} to be no smaller than {self.minsize!r}'
      )
    if self.maxsize is not None and len(value) > self.maxsize:
      raise ValueError(
        f'Expected {value!r} to be no bigger than {self.maxsize!r}'
      )
    if self.predicate is not None and not self.predicate(value):
      raise ValueError(
        f'Expected {self.predicate} to be true for {value!r}'
      )

```

### [Practical application](https://docs.python.org/3/howto/descriptor.html#id11)[¶](https://docs.python.org/3/howto/descriptor.html#practical-application "Link to this heading")
Here’s how the data validators can be used in a real class:
```
classComponent:
  name = String(minsize=3, maxsize=10, predicate=str.isupper)
  kind = OneOf('wood', 'metal', 'plastic')
  quantity = Number(minvalue=0)
  def__init__(self, name, kind, quantity):
    self.name = name
    self.kind = kind
    self.quantity = quantity

```

The descriptors prevent invalid instances from being created:
>>>```
>>> Component('Widget', 'metal', 5)   # Blocked: 'Widget' is not all uppercase
Traceback (most recent call last):
...
ValueError: Expected <method 'isupper' of 'str' objects> to be true for 'Widget'
>>> Component('WIDGET', 'metle', 5)   # Blocked: 'metle' is misspelled
Traceback (most recent call last):
...
ValueError: Expected 'metle' to be one of {'metal', 'plastic', 'wood'}
>>> Component('WIDGET', 'metal', -5)   # Blocked: -5 is negative
Traceback (most recent call last):
...
ValueError: Expected -5 to be at least 0
>>> Component('WIDGET', 'metal', 'V')  # Blocked: 'V' isn't a number
Traceback (most recent call last):
...
TypeError: Expected 'V' to be an int or float
>>> c = Component('WIDGET', 'metal', 5) # Allowed: The inputs are valid