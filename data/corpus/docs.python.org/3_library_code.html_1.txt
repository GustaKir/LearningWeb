Title: code.interact Function
URL: https://docs.python.org/3/library/code.html
Summary: The code.interact function runs a read-eval-print loop by creating an instance of InteractiveConsole. It allows customization of the input function, local namespace, and exit messages, enhancing the interactive Python experience.
---

code.interact(_banner =None_, _readfunc =None_, _local =None_, _exitmsg =None_, _local_exit =False_)[¶](https://docs.python.org/3/library/code.html#code.interact "Link to this definition")
    
Convenience function to run a read-eval-print loop. This creates a new instance of [`InteractiveConsole`](https://docs.python.org/3/library/code.html#code.InteractiveConsole "code.InteractiveConsole") and sets _readfunc_ to be used as the [`InteractiveConsole.raw_input()`](https://docs.python.org/3/library/code.html#code.InteractiveConsole.raw_input "code.InteractiveConsole.raw_input") method, if provided. If _local_ is provided, it is passed to the [`InteractiveConsole`](https://docs.python.org/3/library/code.html#code.InteractiveConsole "code.InteractiveConsole") constructor for use as the default namespace for the interpreter loop. If _local_exit_ is provided, it is passed to the [`InteractiveConsole`](https://docs.python.org/3/library/code.html#code.InteractiveConsole "code.InteractiveConsole") constructor. The [`interact()`](https://docs.python.org/3/library/code.html#code.InteractiveConsole.interact "code.InteractiveConsole.interact") method of the instance is then run with _banner_ and _exitmsg_ passed as the banner and exit message to use, if provided. The console object is discarded after use.
Changed in version 3.6: Added _exitmsg_ parameter.
Changed in version 3.13: Added _local_exit_ parameter. 

code.compile_command(_source_ , _filename ='<input>'_, _symbol ='single'_)[¶](https://docs.python.org/3/library/code.html#code.compile_command "Link to this definition")
    
This function is useful for programs that want to emulate Python’s interpreter main loop (a.k.a. the read-eval-print loop). The tricky part is to determine when the user has entered an incomplete command that can be completed by entering more text (as opposed to a complete command or a syntax error). This function _almost_ always makes the same decision as the real interpreter main loop.
_source_ is the source string; _filename_ is the optional filename from which source was read, defaulting to `'<input>'`; and _symbol_ is the optional grammar start symbol, which should be `'single'` (the default), `'eval'` or `'exec'`.
Returns a code object (the same as `compile(source, filename, symbol)`) if the command is complete and valid; `None` if the command is incomplete; raises [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") if the command is complete and contains a syntax error, or raises [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError") or [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if the command contains an invalid literal.
## Interactive Interpreter Objects[¶](https://docs.python.org/3/library/code.html#interactive-interpreter-objects "Link to this heading")