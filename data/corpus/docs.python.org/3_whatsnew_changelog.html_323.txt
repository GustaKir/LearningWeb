Title: Recent Python Updates and Changes
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This chunk outlines several updates to Python, including the removal of an obsolete internal cache for shared object file handles, enhancements to the `typing` module for better handling of type parameters in `types.Union`, and the addition of column information in code objects for improved traceback printing. Contributions are credited to Victor Stinner and Yurii Karabas.
---

Patch by Victor Stinner.
  * [bpo-43895](https://bugs.python.org/issue?@action=redirect&bpo=43895): An obsolete internal cache of shared object file handles added in 1995 that attempted, but did not guarantee, that a .so would not be dlopenâ€™ed twice to work around flaws in mid-1990s posix-ish operating systems has been removed from dynload_shlib.c.
  * [bpo-44490](https://bugs.python.org/issue?@action=redirect&bpo=44490): [`typing`](https://docs.python.org/3/library/typing.html#module-typing "typing: Support for type hints \(see :pep:`484`\).") now searches for type parameters in `types.Union` objects. `get_type_hints` will also properly resolve annotations with nested `types.Union` objects. Patch provided by Yurii Karabas.
  * [bpo-43950](https://bugs.python.org/issue?@action=redirect&bpo=43950): Code objects can now provide the column information for instructions when available. This is levaraged during traceback printing to show the expressions responsible for errors.
Contributed by Pablo Galindo, Batuhan Taskaya and Ammar Askar as part of [**PEP 657**](https://peps.python.org/pep-0657/).
  * [bpo-44562](https://bugs.python.org/issue?@action=redirect&bpo=44562): Remove uses of [`PyObject_GC_Del()`](https://docs.python.org/3/c-api/gcsupport.html#c.PyObject_GC_Del "PyObject_GC_Del") in error path when initializing [`types.GenericAlias`](https://docs.python.org/3/library/types.html#types.GenericAlias "types.GenericAlias").
  * [bpo-41486](https://bugs.python.org/issue?@action=redirect&bpo=41486): Fix a memory consumption and copying performance regression in earlier 3.10 beta releases if someone used an output buffer larger than 4GiB with zlib.decompress on input data that expands that large.
  * [bpo-43908](https://bugs.python.org/issue?@action=redirect&bpo=43908): Heap types with the [`Py_TPFLAGS_IMMUTABLETYPE`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_IMMUTABLETYPE "Py_TPFLAGS_IMMUTABLETYPE") flag can now inherit the [**PEP 590**](https://peps.python.org/pep-0590/) vectorcall protocol. Previously, this was only possible for [static types](https://docs.python.org/3/c-api/typeobj.html#static-types). Patch by Erlend E. Aasland.
  * [bpo-44553](https://bugs.python.org/issue?@action=redirect&bpo=44553): Implement GC methods for `types.Union` to break reference cycles and prevent memory leaks.
  * [bpo-44490](https://bugs.python.org/issue?@action=redirect&bpo=44490): Add `__parameters__` attribute and `__getitem__` operator to `types.Union`. Patch provided by Yurii Karabas.
  * [bpo-44523](https://bugs.python.org/issue?@action=redirect&bpo=44523): Remove the pass-through for [`hash()`](https://docs.python.org/3/library/functions.html#hash "hash") of [`weakref.proxy`](https://docs.python.org/3/library/weakref.html#weakref.proxy "weakref.proxy") objects to prevent unintended consequences when the original referred object dies while the proxy is part of a hashable object. Patch by Pablo Galindo.
  * [bpo-44483](https://bugs.python.org/issue?@action=redirect&bpo=44483): Fix a crash in `types.Union` objects when creating a union of an object with bad `__module__` field.
  * [bpo-44486](https://bugs.python.org/issue?@action=redirect&bpo=44486): Modules will always have a dictionary, even when created by `types.ModuleType.__new__()`
  * [bpo-44472](https://bugs.python.org/issue?@action=redirect&bpo=44472): Fix ltrace functionality when exceptions are raised. Patch by Pablo Galindo
  * [bpo-12022](https://bugs.python.org/issue?@action=redirect&bpo=12022): A [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") is now raised instead of an [`AttributeError`](https://docs.python.org/3/library/exceptions.html#AttributeError "AttributeError") in [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) and [`async with`](https://docs.python.org/3/reference/compound_stmts.html#async-with) statements for objects which do not support the [context manager](https://docs.python.org/3/glossary.html#term-context-manager) or [asynchronous context manager](https://docs.python.org/3/glossary.html#term-asynchronous-context-manager) protocols correspondingly.
  * [bpo-44297](https://bugs.python.org/issue?@action=redirect&bpo=44297): Make sure that the line number is set when entering a comprehension scope. This ensures that backtraces including generator expressions show the correct line number.
  * [bpo-44456](https://bugs.python.org/issue?@action=redirect&bpo=44456): Improve the syntax error when mixing positional and keyword patterns. Patch by Pablo Galindo.
  * [bpo-44409](https://bugs.python.org/issue?@action=redirect&bpo=44409): Fix error location information for tokenizer errors raised on initialization of the tokenizer. Patch by Pablo Galindo.
  * [bpo-44396](https://bugs.python.org/issue?@action=redirect&bpo=44396): Fix a possible crash in the tokenizer when raising syntax errors for unclosed strings.