Title: Methods and Types in Python's Data Model
URL: https://docs.python.org/3/reference/datamodel.html
Summary: This section outlines various methods and object types in Python's data model, including code objects, frame objects (with special attributes and methods), traceback objects, slice objects, static method objects, and class method objects.
---

Methods on code objects](https://docs.python.org/3/reference/datamodel.html#methods-on-code-objects)
        * [3.2.13.2. Frame objects](https://docs.python.org/3/reference/datamodel.html#frame-objects)
          * [3.2.13.2.1. Special read-only attributes](https://docs.python.org/3/reference/datamodel.html#index-66)
          * [3.2.13.2.2. Special writable attributes](https://docs.python.org/3/reference/datamodel.html#index-67)
          * [3.2.13.2.3. Frame object methods](https://docs.python.org/3/reference/datamodel.html#frame-object-methods)
        * [3.2.13.3. Traceback objects](https://docs.python.org/3/reference/datamodel.html#traceback-objects)
        * [3.2.13.4. Slice objects](https://docs.python.org/3/reference/datamodel.html#slice-objects)
        * [3.2.13.5. Static method objects](https://docs.python.org/3/reference/datamodel.html#static-method-objects)
        * [3.2.13.6. Class method objects](https://docs.python.org/3/reference/datamodel.html#class-method-objects)
    * [3.3. Special method names](https://docs.python.org/3/reference/datamodel.html#special-method-names)
      * [3.3.1. Basic customization](https://docs.python.org/3/reference/datamodel.html#basic-customization)
      * [3.3.2. Customizing attribute access](https://docs.python.org/3/reference/datamodel.html#customizing-attribute-access)
        * [3.3.2.1. Customizing module attribute access](https://docs.python.org/3/reference/datamodel.html#customizing-module-attribute-access)
        * [3.3.2.2. Implementing Descriptors](https://docs.python.org/3/reference/datamodel.html#implementing-descriptors)
        * [3.3.2.3. Invoking Descriptors](https://docs.python.org/3/reference/datamodel.html#invoking-descriptors)
        * [3.3.2.4. __slots__](https://docs.python.org/3/reference/datamodel.html#slots)
      * [3.3.3. Customizing class creation](https://docs.python.org/3/reference/datamodel.html#customizing-class-creation)
        * [3.3.3.1. Metaclasses](https://docs.python.org/3/reference/datamodel.html#metaclasses)
        * [3.3.3.2. Resolving MRO entries](https://docs.python.org/3/reference/datamodel.html#resolving-mro-entries)
        * [3.3.3.3. Determining the appropriate metaclass](https://docs.python.org/3/reference/datamodel.html#determining-the-appropriate-metaclass)
        * [3.3.3.4. Preparing the class namespace](https://docs.python.org/3/reference/datamodel.html#preparing-the-class-namespace)
        * [3.3.3.5. Executing the class body](https://docs.python.org/3/reference/datamodel.html#executing-the-class-body)
        * [3.3.3.6. Creating the class object](https://docs.python.org/3/reference/datamodel.html#creating-the-class-object)
        * [3.3.3.7. Uses for metaclasses](https://docs.python.org/3/reference/datamodel.html#uses-for-metaclasses)
      * [3.3.4. Customizing instance and subclass checks](https://docs.python.org/3/reference/datamodel.html#customizing-instance-and-subclass-checks)
      * [3.3.5. Emulating generic types](https://docs.python.org/3/reference/datamodel.html#emulating-generic-types)
        * [3.3.5.1. The purpose of ___class_getitem___](https://docs.python.org/3/reference/datamodel.html#the-purpose-of-class-getitem)
        * [3.3.5.2. ___class_getitem___ versus ___getitem___](https://docs.python.org/3/reference/datamodel.html#class-getitem-versus-getitem)
      * [3.3.6. Emulating callable objects](https://docs.python.org/3/reference/datamodel.html#emulating-callable-objects)
      * [3.3.7. Emulating container types](https://docs.python.org/3/reference/datamodel.html#emulating-container-types)
      * [3.3.8. Emulating numeric types](https://docs.python.org/3/reference/datamodel.html#emulating-numeric-types)
      * [3.3.9. With Statement Context Managers](https://docs.python.org/3/reference/datamodel.html#with-statement-context-managers)
      * [3.3.10. Customizing positional arguments in class pattern matching](https://docs.python.org/3/reference/datamodel.html#customizing-positional-arguments-in-class-pattern-matching)
      * [3.3.11. Emulating buffer types](https://docs.python.org/3/reference/datamodel.html#emulating-buffer-types)
      * [3.3.12. Special method lookup](https://docs.python.org/3/reference/datamodel.html#special-method-lookup)
    * [3.4. Coroutines](https://docs.python.org/3/reference/datamodel.html#coroutines)
      * [3.4.1. Awaitable Objects](https://docs.python.org/3/reference/datamodel.html#awaitable-objects)
      * [3.4.2. Coroutine Objects](https://docs.python.org/3/reference/datamodel.html#coroutine-objects)
      * [3.4.3. Asynchronous Iterators](https://docs.python.org/3/reference/datamodel.html#asynchronous-iterators)
      * [3.4.4. Asynchronous Context Managers](https://docs.python.org/3/reference/datamodel.html#asynchronous-context-managers)