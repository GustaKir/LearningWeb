Title: Data Structures in Python
URL: https://docs.python.org/3/tutorial/datastructures.html
Summary: This section of the Python documentation covers various data structures, focusing on lists, their applications as stacks and queues, and features like list comprehensions and nested lists.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [5. Data Structures](https://docs.python.org/3/tutorial/datastructures.html)
    * [5.1. More on Lists](https://docs.python.org/3/tutorial/datastructures.html#more-on-lists)
      * [5.1.1. Using Lists as Stacks](https://docs.python.org/3/tutorial/datastructures.html#using-lists-as-stacks)
      * [5.1.2. Using Lists as Queues](https://docs.python.org/3/tutorial/datastructures.html#using-lists-as-queues)
      * [5.1.3. List Comprehensions](https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions)
      * [5.1.4. Nested List Comprehensions](https://docs.python.org/3/tutorial/datastructures.html#nested-list-comprehensions)
    * [5.2. The `del` statement](https://docs.python.org/3/tutorial/datastructures.html#the-del-statement)
    * [5.3. Tuples and Sequences](https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences)
    * [5.4. Sets](https://docs.python.org/3/tutorial/datastructures.html#sets)
    * [5.5. Dictionaries](https://docs.python.org/3/tutorial/datastructures.html#dictionaries)
    * [5.6. Looping Techniques](https://docs.python.org/3/tutorial/datastructures.html#looping-techniques)
    * [5.7. More on Conditions](https://docs.python.org/3/tutorial/datastructures.html#more-on-conditions)
    * [5.8. Comparing Sequences and Other Types](https://docs.python.org/3/tutorial/datastructures.html#comparing-sequences-and-other-types)


#### Previous topic
[4. More Control Flow Tools](https://docs.python.org/3/tutorial/controlflow.html "previous chapter")
#### Next topic
[6. Modules](https://docs.python.org/3/tutorial/modules.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/tutorial/datastructures.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/tutorial/modules.html "6. Modules") |
  * [previous](https://docs.python.org/3/tutorial/controlflow.html "4. More Control Flow Tools") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Tutorial](https://docs.python.org/3/tutorial/index.html) »
  * [5. Data Structures](https://docs.python.org/3/tutorial/datastructures.html)
  * | 
  * Theme  Auto Light Dark |


# 5. Data Structures[¶](https://docs.python.org/3/tutorial/datastructures.html#data-structures "Link to this heading")
This chapter describes some things you’ve learned about already in more detail, and adds some new things as well.
## 5.1. More on Lists[¶](https://docs.python.org/3/tutorial/datastructures.html#more-on-lists "Link to this heading")
The list data type has some more methods. Here are all of the methods of list objects: 

list.append(_x_)
    
Add an item to the end of the list. Similar to `a[len(a):] = [x]`. 

list.extend(_iterable_)
    
Extend the list by appending all the items from the iterable. Similar to `a[len(a):] = iterable`. 

list.insert(_i_ , _x_)
    
Insert an item at a given position. The first argument is the index of the element before which to insert, so `a.insert(0, x)` inserts at the front of the list, and `a.insert(len(a), x)` is equivalent to `a.append(x)`. 

list.remove(_x_)
    
Remove the first item from the list whose value is equal to _x_. It raises a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if there is no such item. 

list.pop([_i_])
    
Remove the item at the given position in the list, and return it. If no index is specified, `a.pop()` removes and returns the last item in the list. It raises an [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError "IndexError") if the list is empty or the index is outside the list range. 

list.clear()
    
Remove all items from the list. Similar to `del a[:]`.