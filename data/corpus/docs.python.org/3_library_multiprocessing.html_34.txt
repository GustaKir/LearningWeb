Title: Multiprocessing Pool: starmap and starmap_async
URL: https://docs.python.org/3/library/multiprocessing.html
Summary: The `starmap()` function applies a provided function to an iterable of argument tuples by unpacking the tuples as arguments. `starmap_async()` is its asynchronous counterpart, combining functionality of `starmap()` and `map_async()`. Both functions were introduced in Python 3.3.
---

starmap(_func_ , _iterable_[, _chunksize_])[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.starmap "Link to this definition")
    
Like [`map()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.map "multiprocessing.pool.Pool.map") except that the elements of the _iterable_ are expected to be iterables that are unpacked as arguments.
Hence an _iterable_ of `[(1,2), (3, 4)]` results in `[func(1,2), func(3,4)]`.
Added in version 3.3. 

starmap_async(_func_ , _iterable_[, _chunksize_[, _callback_[, _error_callback_]]])[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.starmap_async "Link to this definition")
    
A combination of [`starmap()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.starmap "multiprocessing.pool.Pool.starmap") and [`map_async()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.map_async "multiprocessing.pool.Pool.map_async") that iterates over _iterable_ of iterables and calls _func_ with the iterables unpacked. Returns a result object.
Added in version 3.3. 

close()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.close "Link to this definition")
    
Prevents any more tasks from being submitted to the pool. Once all the tasks have been completed the worker processes will exit. 

terminate()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.terminate "Link to this definition")
    
Stops the worker processes immediately without completing outstanding work. When the pool object is garbage collected [`terminate()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.terminate "multiprocessing.pool.Pool.terminate") will be called immediately. 

join()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.join "Link to this definition")
    
Wait for the worker processes to exit. One must call [`close()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.close "multiprocessing.pool.Pool.close") or [`terminate()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.terminate "multiprocessing.pool.Pool.terminate") before using [`join()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.join "multiprocessing.pool.Pool.join").
Changed in version 3.3: Pool objects now support the context management protocol – see [Context Manager Types](https://docs.python.org/3/library/stdtypes.html#typecontextmanager). [`__enter__()`](https://docs.python.org/3/library/stdtypes.html#contextmanager.__enter__ "contextmanager.__enter__") returns the pool object, and [`__exit__()`](https://docs.python.org/3/library/stdtypes.html#contextmanager.__exit__ "contextmanager.__exit__") calls [`terminate()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.terminate "multiprocessing.pool.Pool.terminate"). 

_class_ multiprocessing.pool.AsyncResult[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.AsyncResult "Link to this definition")
    
The class of the result returned by [`Pool.apply_async()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.apply_async "multiprocessing.pool.Pool.apply_async") and [`Pool.map_async()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.map_async "multiprocessing.pool.Pool.map_async"). 

get([_timeout_])[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.AsyncResult.get "Link to this definition")
    
Return the result when it arrives. If _timeout_ is not `None` and the result does not arrive within _timeout_ seconds then [`multiprocessing.TimeoutError`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.TimeoutError "multiprocessing.TimeoutError") is raised. If the remote call raised an exception then that exception will be reraised by [`get()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.AsyncResult.get "multiprocessing.pool.AsyncResult.get"). 

wait([_timeout_])[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.AsyncResult.wait "Link to this definition")
    
Wait until the result is available or until _timeout_ seconds pass. 

ready()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.AsyncResult.ready "Link to this definition")
    
Return whether the call has completed.