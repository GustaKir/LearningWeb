Title: Using Python on Mobile Platforms
URL: https://docs.python.org/3/library/intro.html
Summary: Mobile platforms like Android and iOS function as POSIX operating systems, allowing similar file I/O, socket handling, and threading. However, Python can only be used in embedded mode, without a REPL or standalone executables. Developers must utilize the Python embedding API to integrate Python code in mobile apps. On Android, subprocess creation is possible but officially unsupported.
---

### Mobile platforms[¶](https://docs.python.org/3/library/intro.html#mobile-platforms "Link to this heading")
Android and iOS are, in most respects, POSIX operating systems. File I/O, socket handling, and threading all behave as they would on any POSIX operating system. However, there are several major differences:
  * Mobile platforms can only use Python in “embedded” mode. There is no Python REPL, and no ability to use separate executables such as **python** or **pip**. To add Python code to your mobile app, you must use the [Python embedding API](https://docs.python.org/3/extending/embedding.html#embedding). For more details, see [Using Python on Android](https://docs.python.org/3/using/android.html#using-android) and [Using Python on iOS](https://docs.python.org/3/using/ios.html#using-ios).
  * Subprocesses:
    * On Android, creating subprocesses is possible but [officially unsupported](https://issuetracker.google.com/issues/128554619#comment4). In particular, Android does not support any part of the System V IPC API, so [`multiprocessing`](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing "multiprocessing: Process-based parallelism.") is not available.
    * An iOS app cannot use any form of subprocessing, multiprocessing, or inter-process communication. If an iOS app attempts to create a subprocess, the process creating the subprocess will either lock up, or crash. An iOS app has no visibility of other applications that are running, nor any ability to communicate with other running applications, outside of the iOS-specific APIs that exist for this purpose.
  * Mobile apps have limited access to modify system resources (such as the system clock). These resources will often be _readable_ , but attempts to modify those resources will usually fail.
  * Console input and output:
    * On Android, the native `stdout` and `stderr` are not connected to anything, so Python installs its own streams which redirect messages to the system log. These can be seen under the tags `python.stdout` and `python.stderr` respectively.
    * iOS apps have a limited concept of console output. `stdout` and `stderr` _exist_ , and content written to `stdout` and `stderr` will be visible in logs when running in Xcode, but this content _won’t_ be recorded in the system log. If a user who has installed your app provides their app logs as a diagnostic aid, they will not include any detail written to `stdout` or `stderr`.
    * Mobile apps have no usable `stdin` at all. While apps can display an on-screen keyboard, this is a software feature, not something that is attached to `stdin`.
As a result, Python modules that involve console manipulation (such as [`curses`](https://docs.python.org/3/library/curses.html#module-curses "curses: An interface to the curses library, providing portable terminal handling. \(Unix\)") and [`readline`](https://docs.python.org/3/library/readline.html#module-readline "readline: GNU readline support for Python. \(Unix\)")) are not available on mobile platforms.


### [Table of Contents](https://docs.python.org/3/contents.html)
  * [Introduction](https://docs.python.org/3/library/intro.html)
    * [Notes on availability](https://docs.python.org/3/library/intro.html#notes-on-availability)
      * [WebAssembly platforms](https://docs.python.org/3/library/intro.html#webassembly-platforms)
      * [Mobile platforms](https://docs.python.org/3/library/intro.html#mobile-platforms)


#### Previous topic
[The Python Standard Library](https://docs.python.org/3/library/index.html "previous chapter")
#### Next topic
[Built-in Functions](https://docs.python.org/3/library/functions.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/intro.rst)


«
### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/functions.html "Built-in Functions") |
  * [previous](https://docs.python.org/3/library/index.html "The Python Standard Library") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Introduction](https://docs.python.org/3/library/intro.html)
  * | 
  * Theme  Auto Light Dark |