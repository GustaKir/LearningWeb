Title: DBM Open Parameters
URL: https://docs.python.org/3/library/dbm.html
Summary: This section describes the parameters for opening a database in the DBM library, including the filename and various flags that control the mode of access, such as read/write options, synchronization, and database locking.
---

Parameters:
    
  * **filename** ([path-like object](https://docs.python.org/3/glossary.html#term-path-like-object)) – The database file to open.
  * **flag** ([_str_](https://docs.python.org/3/library/stdtypes.html#str "str")) – 
    * `'r'` (default): Open existing database for reading only.
    * `'w'`: Open existing database for reading and writing.
    * `'c'`: Open database for reading and writing, creating it if it doesn’t exist.
    * `'n'`: Always create a new, empty database, open for reading and writing.
The following additional characters may be appended to control how the database is opened:
    * `'f'`: Open the database in fast mode. Writes to the database will not be synchronized.
    * `'s'`: Synchronized mode. Changes to the database will be written immediately to the file.
    * `'u'`: Do not lock database.
Not all flags are valid for all versions of GDBM. See the [`open_flags`](https://docs.python.org/3/library/dbm.html#dbm.gnu.open_flags "dbm.gnu.open_flags") member for a list of supported flag characters.
  * **mode** ([_int_](https://docs.python.org/3/library/functions.html#int "int")) – The Unix file access mode of the file (default: octal `0o666`), used only when the database has to be created.



Raises:
    
[**error**](https://docs.python.org/3/library/dbm.html#dbm.gnu.error "dbm.gnu.error") – If an invalid _flag_ argument is passed.
Changed in version 3.11: _filename_ accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). 

dbm.gnu.open_flags[¶](https://docs.python.org/3/library/dbm.html#dbm.gnu.open_flags "Link to this definition")
    
A string of characters the _flag_ parameter of [`open()`](https://docs.python.org/3/library/dbm.html#dbm.gnu.open "dbm.gnu.open") supports.
`gdbm` objects behave similar to [mappings](https://docs.python.org/3/glossary.html#term-mapping), but `items()` and `values()` methods are not supported. The following methods are also provided: 

gdbm.firstkey()[¶](https://docs.python.org/3/library/dbm.html#dbm.gnu.gdbm.firstkey "Link to this definition")
    
It’s possible to loop over every key in the database using this method and the [`nextkey()`](https://docs.python.org/3/library/dbm.html#dbm.gnu.gdbm.nextkey "dbm.gnu.gdbm.nextkey") method. The traversal is ordered by GDBM’s internal hash values, and won’t be sorted by the key values. This method returns the starting key. 

gdbm.nextkey(_key_)[¶](https://docs.python.org/3/library/dbm.html#dbm.gnu.gdbm.nextkey "Link to this definition")
    
Returns the key that follows _key_ in the traversal. The following code prints every key in the database `db`, without having to create a list in memory that contains them all:
```
k = db.firstkey()
while k is not None:
  print(k)
  k = db.nextkey(k)