Title: Unicode Issues in Tar Archives
URL: https://docs.python.org/3/library/tarfile.html
Summary: The tar format, originally designed for tape drives, lacks support for different character encodings, leading to issues when sharing archives between systems using different encodings. This results in corrupted textual metadata for non-ASCII characters. The pax format was introduced to address these issues by using UTF-8 for metadata.
---

## Unicode issues[¶](https://docs.python.org/3/library/tarfile.html#unicode-issues "Link to this heading")
The tar format was originally conceived to make backups on tape drives with the main focus on preserving file system information. Nowadays tar archives are commonly used for file distribution and exchanging archives over networks. One problem of the original format (which is the basis of all other formats) is that there is no concept of supporting different character encodings. For example, an ordinary tar archive created on a _UTF-8_ system cannot be read correctly on a _Latin-1_ system if it contains non-_ASCII_ characters. Textual metadata (like filenames, linknames, user/group names) will appear damaged. Unfortunately, there is no way to autodetect the encoding of an archive. The pax format was designed to solve this problem. It stores non-ASCII metadata using the universal character encoding _UTF-8_.
The details of character conversion in [`tarfile`](https://docs.python.org/3/library/tarfile.html#module-tarfile "tarfile: Read and write tar-format archive files.") are controlled by the _encoding_ and _errors_ keyword arguments of the [`TarFile`](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile "tarfile.TarFile") class.
_encoding_ defines the character encoding to use for the metadata in the archive. The default value is [`sys.getfilesystemencoding()`](https://docs.python.org/3/library/sys.html#sys.getfilesystemencoding "sys.getfilesystemencoding") or `'ascii'` as a fallback. Depending on whether the archive is read or written, the metadata must be either decoded or encoded. If _encoding_ is not set appropriately, this conversion may fail.
The _errors_ argument defines how characters are treated that cannot be converted. Possible values are listed in section [Error Handlers](https://docs.python.org/3/library/codecs.html#error-handlers). The default scheme is `'surrogateescape'` which Python also uses for its file system calls, see [File Names, Command Line Arguments, and Environment Variables](https://docs.python.org/3/library/os.html#os-filenames).
For [`PAX_FORMAT`](https://docs.python.org/3/library/tarfile.html#tarfile.PAX_FORMAT "tarfile.PAX_FORMAT") archives (the default), _encoding_ is generally not needed because all the metadata is stored using _UTF-8_. _encoding_ is only used in the rare cases when binary pax headers are decoded or when strings with surrogate characters are stored.
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [`tarfile` — Read and write tar archive files](https://docs.python.org/3/library/tarfile.html)
    * [TarFile Objects](https://docs.python.org/3/library/tarfile.html#tarfile-objects)
    * [TarInfo Objects](https://docs.python.org/3/library/tarfile.html#tarinfo-objects)
    * [Extraction filters](https://docs.python.org/3/library/tarfile.html#extraction-filters)
      * [Default named filters](https://docs.python.org/3/library/tarfile.html#default-named-filters)
      * [Filter errors](https://docs.python.org/3/library/tarfile.html#filter-errors)
      * [Hints for further verification](https://docs.python.org/3/library/tarfile.html#hints-for-further-verification)
      * [Supporting older Python versions](https://docs.python.org/3/library/tarfile.html#supporting-older-python-versions)
      * [Stateful extraction filter example](https://docs.python.org/3/library/tarfile.html#stateful-extraction-filter-example)
    * [Command-Line Interface](https://docs.python.org/3/library/tarfile.html#command-line-interface)
      * [Command-line options](https://docs.python.org/3/library/tarfile.html#command-line-options)
    * [Examples](https://docs.python.org/3/library/tarfile.html#examples)
    * [Supported tar formats](https://docs.python.org/3/library/tarfile.html#supported-tar-formats)
    * [Unicode issues](https://docs.python.org/3/library/tarfile.html#unicode-issues)


#### Previous topic
[`zipfile` — Work with ZIP archives](https://docs.python.org/3/library/zipfile.html "previous chapter")
#### Next topic
[File Formats](https://docs.python.org/3/library/fileformats.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/tarfile.rst)