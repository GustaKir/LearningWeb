Title: Python 3.13 Updates
URL: https://docs.python.org/3/whatsnew/3.13.html
Summary: This document summarizes updates in Python 3.13, including deprecations related to the `sre` modules, changes to the `rmtree()` function in `shutil` (replacing the _onerror_ parameter with _onexc_), and deprecated behaviors in `ssl` regarding `SSLContext` and its methods.
---

(Contributed by Serhiy Storchaka in [gh-91760](https://github.com/python/cpython/issues/91760).)
  * `sre_compile`, `sre_constants` and `sre_parse` modules.
  * [`shutil`](https://docs.python.org/3/library/shutil.html#module-shutil "shutil: High-level file operations, including copying."): [`rmtree()`](https://docs.python.org/3/library/shutil.html#shutil.rmtree "shutil.rmtree")â€™s _onerror_ parameter is deprecated in Python 3.12; use the _onexc_ parameter instead.
  * [`ssl`](https://docs.python.org/3/library/ssl.html#module-ssl "ssl: TLS/SSL wrapper for socket objects") options and protocols:
    * [`ssl.SSLContext`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext "ssl.SSLContext") without protocol argument is deprecated.
    * [`ssl.SSLContext`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext "ssl.SSLContext"): [`set_npn_protocols()`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_npn_protocols "ssl.SSLContext.set_npn_protocols") and `selected_npn_protocol()` are deprecated: use ALPN instead.
    * `ssl.OP_NO_SSL*` options
    * `ssl.OP_NO_TLS*` options
    * `ssl.PROTOCOL_SSLv3`
    * `ssl.PROTOCOL_TLS`
    * `ssl.PROTOCOL_TLSv1`
    * `ssl.PROTOCOL_TLSv1_1`
    * `ssl.PROTOCOL_TLSv1_2`
    * `ssl.TLSVersion.SSLv3`
    * `ssl.TLSVersion.TLSv1`
    * `ssl.TLSVersion.TLSv1_1`
  * [`threading`](https://docs.python.org/3/library/threading.html#module-threading "threading: Thread-based parallelism.") methods:
    * `threading.Condition.notifyAll()`: use [`notify_all()`](https://docs.python.org/3/library/threading.html#threading.Condition.notify_all "threading.Condition.notify_all").
    * `threading.Event.isSet()`: use [`is_set()`](https://docs.python.org/3/library/threading.html#threading.Event.is_set "threading.Event.is_set").
    * `threading.Thread.isDaemon()`, [`threading.Thread.setDaemon()`](https://docs.python.org/3/library/threading.html#threading.Thread.setDaemon "threading.Thread.setDaemon"): use [`threading.Thread.daemon`](https://docs.python.org/3/library/threading.html#threading.Thread.daemon "threading.Thread.daemon") attribute.
    * `threading.Thread.getName()`, [`threading.Thread.setName()`](https://docs.python.org/3/library/threading.html#threading.Thread.setName "threading.Thread.setName"): use [`threading.Thread.name`](https://docs.python.org/3/library/threading.html#threading.Thread.name "threading.Thread.name") attribute.
    * `threading.currentThread()`: use [`threading.current_thread()`](https://docs.python.org/3/library/threading.html#threading.current_thread "threading.current_thread").
    * `threading.activeCount()`: use [`threading.active_count()`](https://docs.python.org/3/library/threading.html#threading.active_count "threading.active_count").
  * [`typing.Text`](https://docs.python.org/3/library/typing.html#typing.Text "typing.Text") ([gh-92332](https://github.com/python/cpython/issues/92332)).
  * [`unittest.IsolatedAsyncioTestCase`](https://docs.python.org/3/library/unittest.html#unittest.IsolatedAsyncioTestCase "unittest.IsolatedAsyncioTestCase"): it is deprecated to return a value that is not `None` from a test case.
  * [`urllib.parse`](https://docs.python.org/3/library/urllib.parse.html#module-urllib.parse "urllib.parse: Parse URLs into or assemble them from components.") deprecated functions: [`urlparse()`](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlparse "urllib.parse.urlparse") instead
    * `splitattr()`
    * `splithost()`
    * `splitnport()`
    * `splitpasswd()`
    * `splitport()`
    * `splitquery()`
    * `splittag()`
    * `splittype()`
    * `splituser()`
    * `splitvalue()`
    * `to_bytes()`
  * [`urllib.request`](https://docs.python.org/3/library/urllib.request.html#module-urllib.request "urllib.request: Extensible library for opening URLs."): [`URLopener`](https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener "urllib.request.URLopener") and [`FancyURLopener`](https://docs.python.org/3/library/urllib.request.html#urllib.request.FancyURLopener "urllib.request.FancyURLopener") style of invoking requests is deprecated. Use newer [`urlopen()`](https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen "urllib.request.urlopen") functions and methods.
  * [`wsgiref`](https://docs.python.org/3/library/wsgiref.html#module-wsgiref "wsgiref: WSGI Utilities and Reference Implementation."): `SimpleHandler.stdout.write()` should not do partial writes.
  * [`xml.etree.ElementTree`](https://docs.python.org/3/library/xml.etree.elementtree.html#module-xml.etree.ElementTree "xml.etree.ElementTree: Implementation of the ElementTree API."): Testing the truth value of an [`Element`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element "xml.etree.ElementTree.Element") is deprecated. In a future release it will always return `True`.