Title: Core and Builtins Updates in Python
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section outlines several updates to the core and builtins in Python, including optimizations for multithreaded applications to handle pending calls more efficiently, ports to multiphase initialization for the _weakref extension module as per PEP 489, and further enhancements to the _collection extension module.
---

### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id389 "Link to this heading")
  * [bpo-40010](https://bugs.python.org/issue?@action=redirect&bpo=40010): Optimize pending calls in multithreaded applications. If a thread different than the main thread schedules a pending call ([`Py_AddPendingCall()`](https://docs.python.org/3/c-api/init.html#c.Py_AddPendingCall "Py_AddPendingCall")), the bytecode evaluation loop is no longer interrupted at each bytecode instruction to check for pending calls which cannot be executed. Only the main thread can execute pending calls.
Previously, the bytecode evaluation loop was interrupted at each instruction until the main thread executes pending calls.
  * [bpo-1635741](https://bugs.python.org/issue?@action=redirect&bpo=1635741): Port _weakref extension module to multiphase initialization ([**PEP 489**](https://peps.python.org/pep-0489/)).
  * [bpo-1635741](https://bugs.python.org/issue?@action=redirect&bpo=1635741): Port _collections module to multiphase initialization ([**PEP 489**](https://peps.python.org/pep-0489/)).
  * [bpo-40010](https://bugs.python.org/issue?@action=redirect&bpo=40010): Optimize signal handling in multithreaded applications. If a thread different than the main thread gets a signal, the bytecode evaluation loop is no longer interrupted at each bytecode instruction to check for pending signals which cannot be handled. Only the main thread of the main interpreter can handle signals.
Previously, the bytecode evaluation loop was interrupted at each instruction until the main thread handles signals.
  * [bpo-39984](https://bugs.python.org/issue?@action=redirect&bpo=39984): If [`Py_AddPendingCall()`](https://docs.python.org/3/c-api/init.html#c.Py_AddPendingCall "Py_AddPendingCall") is called in a subinterpreter, the function is now scheduled to be called from the subinterpreter, rather than being called from the main interpreter. Each subinterpreter now has its own list of scheduled calls.
  * [bpo-1635741](https://bugs.python.org/issue?@action=redirect&bpo=1635741): Port _heapq module to multiphase initialization.
  * [bpo-1635741](https://bugs.python.org/issue?@action=redirect&bpo=1635741): Port itertools module to multiphase initialization ([**PEP 489**](https://peps.python.org/pep-0489/)).
  * [bpo-37207](https://bugs.python.org/issue?@action=redirect&bpo=37207): Speed up calls to `frozenset()` by using the [**PEP 590**](https://peps.python.org/pep-0590/) `vectorcall` calling convention. Patch by Donghee Na.
  * [bpo-39984](https://bugs.python.org/issue?@action=redirect&bpo=39984): subinterpreters: Move `_PyRuntimeState.ceval.tracing_possible` to `PyInterpreterState.ceval.tracing_possible`: each interpreter now has its own variable.
  * [bpo-37207](https://bugs.python.org/issue?@action=redirect&bpo=37207): Speed up calls to `set()` by using the [**PEP 590**](https://peps.python.org/pep-0590/) `vectorcall` calling convention. Patch by Donghee Na.
  * [bpo-1635741](https://bugs.python.org/issue?@action=redirect&bpo=1635741): Port _statistics module to multiphase initialization ([**PEP 489**](https://peps.python.org/pep-0489/)).
  * [bpo-39968](https://bugs.python.org/issue?@action=redirect&bpo=39968): Use inline function to replace extension modules’ get_module_state macros.
  * [bpo-39965](https://bugs.python.org/issue?@action=redirect&bpo=39965): Correctly raise `SyntaxError` if _await_ is used inside non-async functions and `PyCF_ALLOW_TOP_LEVEL_AWAIT` is set (like in the asyncio REPL). Patch by Pablo Galindo.
  * [bpo-39562](https://bugs.python.org/issue?@action=redirect&bpo=39562): Allow executing asynchronous comprehensions on the top level when the `PyCF_ALLOW_TOP_LEVEL_AWAIT` flag is given. Patch by Batuhan Taskaya.
  * [bpo-37207](https://bugs.python.org/issue?@action=redirect&bpo=37207): Speed up calls to `tuple()` by using the [**PEP 590**](https://peps.python.org/pep-0590/) `vectorcall` calling convention. Patch by Donghee Na.
  * [bpo-38373](https://bugs.python.org/issue?@action=redirect&bpo=38373): Changed list overallocation strategy. It no longer overallocates if the new size is closer to overallocated size than to the old size and adds padding.
  * [bpo-39926](https://bugs.python.org/issue?@action=redirect&bpo=39926): Update Unicode database to Unicode version 13.0.0.
  * [bpo-19466](https://bugs.python.org/issue?@action=redirect&bpo=19466): Clear the frames of daemon threads earlier during the Python shutdown to call objects destructors. So “unclosed file” resource warnings are now emitted for daemon threads in a more reliable way.
  * [bpo-38894](https://bugs.python.org/issue?@action=redirect&bpo=38894): Fix a bug that was causing incomplete results when calling `pathlib.Path.glob` in the presence of symlinks that point to files where the user does not have read access. Patch by Pablo Galindo and Matt Wozniski.
  * [bpo-39877](https://bugs.python.org/issue?@action=redirect&bpo=39877): Fix [`PyEval_RestoreThrea