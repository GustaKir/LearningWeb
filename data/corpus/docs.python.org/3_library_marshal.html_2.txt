Title: marshal.load Function
URL: https://docs.python.org/3/library/marshal.html
Summary: The `marshal.load` function reads a value from an open binary file and returns it. It raises errors if the value is invalid or incompatible with the current Python version. The function requires the file to be readable, and if the `_allow_code` flag is true, code objects can be loaded. It also triggers an auditing event.
---

marshal.load(_file_ , _/_ , _*_ , _allow_code =True_)[¶](https://docs.python.org/3/library/marshal.html#marshal.load "Link to this definition")
    
Read one value from the open file and return it. If no valid value is read (e.g. because the data has a different Python version’s incompatible marshal format), raise [`EOFError`](https://docs.python.org/3/library/exceptions.html#EOFError "EOFError"), [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") or [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError"). [Code objects](https://docs.python.org/3/reference/datamodel.html#code-objects) are only supported if _allow_code_ is true. The file must be a readable [binary file](https://docs.python.org/3/glossary.html#term-binary-file).
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `marshal.load` with no arguments.
Note
If an object containing an unsupported type was marshalled with [`dump()`](https://docs.python.org/3/library/marshal.html#marshal.dump "marshal.dump"), [`load()`](https://docs.python.org/3/library/marshal.html#marshal.load "marshal.load") will substitute `None` for the unmarshallable type.
Changed in version 3.10: This call used to raise a `code.__new__` audit event for each code object. Now it raises a single `marshal.load` event for the entire load operation.
Changed in version 3.13: Added the _allow_code_ parameter. 

marshal.dumps(_value_ , _version =version_, _/_ , _*_ , _allow_code =True_)[¶](https://docs.python.org/3/library/marshal.html#marshal.dumps "Link to this definition")
    
Return the bytes object that would be written to a file by `dump(value, file)`. The value must be a supported type. Raise a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") exception if value has (or contains an object that has) an unsupported type. [Code objects](https://docs.python.org/3/reference/datamodel.html#code-objects) are only supported if _allow_code_ is true.
The _version_ argument indicates the data format that `dumps` should use (see below).
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `marshal.dumps` with arguments `value`, `version`.
Changed in version 3.13: Added the _allow_code_ parameter. 

marshal.loads(_bytes_ , _/_ , _*_ , _allow_code =True_)[¶](https://docs.python.org/3/library/marshal.html#marshal.loads "Link to this definition")
    
Convert the [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object) to a value. If no valid value is found, raise [`EOFError`](https://docs.python.org/3/library/exceptions.html#EOFError "EOFError"), [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") or [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError"). [Code objects](https://docs.python.org/3/reference/datamodel.html#code-objects) are only supported if _allow_code_ is true. Extra bytes in the input are ignored.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `marshal.loads` with argument `bytes`.
Changed in version 3.10: This call used to raise a `code.__new__` audit event for each code object. Now it raises a single `marshal.loads` event for the entire load operation.
Changed in version 3.13: Added the _allow_code_ parameter.
In addition, the following constants are defined: 

marshal.version[¶](https://docs.python.org/3/library/marshal.html#marshal.version "Link to this definition")
    
Indicates the format that the module uses. Version 0 is the historical format, version 1 shares interned strings and version 2 uses a binary format for floating-point numbers. Version 3 adds support for object instancing and recursion. The current version is 4.
Footnotes
[[1](https://docs.python.org/3/library/marshal.html#id1)]
The name of this module stems from a bit of terminology used by the designers of Modula-3 (amongst others), who use the term “marshalling” for shipping of data around in a self-contained form. Strictly speaking, “to marshal” means to convert some data from internal to external form (in an RPC buffer for instance) and “unmarshalling” for the reverse process.
#### Previous topic
[`shelve` — Python object persistence](https://docs.python.org/3/library/shelve.html "previous chapter")
#### Next topic
[`dbm` — Interfaces to Unix “databases”](https://docs.python.org/3/library/dbm.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/marshal.rst)