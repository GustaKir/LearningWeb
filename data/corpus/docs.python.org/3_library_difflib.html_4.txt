Title: Comparison of Byte Sequences with difflib.diff_bytes
URL: https://docs.python.org/3/library/difflib.html
Summary: The difflib.diff_bytes function compares two lists of bytes objects and yields a sequence of delta lines based on a specified diff function, such as unified_diff or context_diff. It supports comparing data with unknown or inconsistent encoding, converting inputs to strings for processing.
---

```

See [A command-line interface to difflib](https://docs.python.org/3/library/difflib.html#difflib-interface) for a more detailed example. 

difflib.diff_bytes(_dfunc_ , _a_ , _b_ , _fromfile =b''_, _tofile =b''_, _fromfiledate =b''_, _tofiledate =b''_, _n =3_, _lineterm =b'\n'_)[¶](https://docs.python.org/3/library/difflib.html#difflib.diff_bytes "Link to this definition")
    
Compare _a_ and _b_ (lists of bytes objects) using _dfunc_ ; yield a sequence of delta lines (also bytes) in the format returned by _dfunc_. _dfunc_ must be a callable, typically either [`unified_diff()`](https://docs.python.org/3/library/difflib.html#difflib.unified_diff "difflib.unified_diff") or [`context_diff()`](https://docs.python.org/3/library/difflib.html#difflib.context_diff "difflib.context_diff").
Allows you to compare data with unknown or inconsistent encoding. All inputs except _n_ must be bytes objects, not str. Works by losslessly converting all inputs (except _n_) to str, and calling `dfunc(a, b, fromfile, tofile, fromfiledate, tofiledate, n, lineterm)`. The output of _dfunc_ is then converted back to bytes, so the delta lines that you receive have the same unknown/inconsistent encodings as _a_ and _b_.
Added in version 3.5. 

difflib.IS_LINE_JUNK(_line_)[¶](https://docs.python.org/3/library/difflib.html#difflib.IS_LINE_JUNK "Link to this definition")
    
Return `True` for ignorable lines. The line _line_ is ignorable if _line_ is blank or contains a single `'#'`, otherwise it is not ignorable. Used as a default for parameter _linejunk_ in [`ndiff()`](https://docs.python.org/3/library/difflib.html#difflib.ndiff "difflib.ndiff") in older versions. 

difflib.IS_CHARACTER_JUNK(_ch_)[¶](https://docs.python.org/3/library/difflib.html#difflib.IS_CHARACTER_JUNK "Link to this definition")
    
Return `True` for ignorable characters. The character _ch_ is ignorable if _ch_ is a space or tab, otherwise it is not ignorable. Used as a default for parameter _charjunk_ in [`ndiff()`](https://docs.python.org/3/library/difflib.html#difflib.ndiff "difflib.ndiff").
See also 

[Pattern Matching: The Gestalt Approach](https://www.drdobbs.com/database/pattern-matching-the-gestalt-approach/184407970)
    
Discussion of a similar algorithm by John W. Ratcliff and D. E. Metzener. This was published in [Dr. Dobb’s Journal](https://www.drdobbs.com/) in July, 1988.
## SequenceMatcher Objects[¶](https://docs.python.org/3/library/difflib.html#sequencematcher-objects "Link to this heading")
The [`SequenceMatcher`](https://docs.python.org/3/library/difflib.html#difflib.SequenceMatcher "difflib.SequenceMatcher") class has this constructor: 

_class_ difflib.SequenceMatcher(_isjunk =None_, _a =''_, _b =''_, _autojunk =True_)[¶](https://docs.python.org/3/library/difflib.html#difflib.SequenceMatcher "Link to this definition")
    
Optional argument _isjunk_ must be `None` (the default) or a one-argument function that takes a sequence element and returns true if and only if the element is “junk” and should be ignored. Passing `None` for _isjunk_ is equivalent to passing `lambda x: False`; in other words, no elements are ignored. For example, pass:
```
lambda x: x in " \t"