Title: mimetypes.init() Function
URL: https://docs.python.org/3/library/mimetypes.html
Summary: The `mimetypes.init()` function initializes internal data structures for MIME type handling. It can optionally accept a sequence of file names to augment the default type map. If not provided, it uses `knownfiles` and, on Windows, current registry settings. Repeated calls to `init()` are permitted, and passing an empty list for `_files_` ensures that only well-known values are present.
---

mimetypes.init(_files =None_)[¶](https://docs.python.org/3/library/mimetypes.html#mimetypes.init "Link to this definition")
    
Initialize the internal data structures. If given, _files_ must be a sequence of file names which should be used to augment the default type map. If omitted, the file names to use are taken from [`knownfiles`](https://docs.python.org/3/library/mimetypes.html#mimetypes.knownfiles "mimetypes.knownfiles"); on Windows, the current registry settings are loaded. Each file named in _files_ or [`knownfiles`](https://docs.python.org/3/library/mimetypes.html#mimetypes.knownfiles "mimetypes.knownfiles") takes precedence over those named before it. Calling [`init()`](https://docs.python.org/3/library/mimetypes.html#mimetypes.init "mimetypes.init") repeatedly is allowed.
Specifying an empty list for _files_ will prevent the system defaults from being applied: only the well-known values will be present from a built-in list.
If _files_ is `None` the internal data structure is completely rebuilt to its initial default value. This is a stable operation and will produce the same results when called multiple times.
Changed in version 3.2: Previously, Windows registry settings were ignored. 

mimetypes.read_mime_types(_filename_)[¶](https://docs.python.org/3/library/mimetypes.html#mimetypes.read_mime_types "Link to this definition")
    
Load the type map given in the file _filename_ , if it exists. The type map is returned as a dictionary mapping filename extensions, including the leading dot (`'.'`), to strings of the form `'type/subtype'`. If the file _filename_ does not exist or cannot be read, `None` is returned. 

mimetypes.add_type(_type_ , _ext_ , _strict =True_)[¶](https://docs.python.org/3/library/mimetypes.html#mimetypes.add_type "Link to this definition")
    
Add a mapping from the MIME type _type_ to the extension _ext_. When the extension is already known, the new type will replace the old one. When the type is already known the extension will be added to the list of known extensions.
When _strict_ is `True` (the default), the mapping will be added to the official MIME types, otherwise to the non-standard ones. 

mimetypes.inited[¶](https://docs.python.org/3/library/mimetypes.html#mimetypes.inited "Link to this definition")
    
Flag indicating whether or not the global data structures have been initialized. This is set to `True` by [`init()`](https://docs.python.org/3/library/mimetypes.html#mimetypes.init "mimetypes.init"). 

mimetypes.knownfiles[¶](https://docs.python.org/3/library/mimetypes.html#mimetypes.knownfiles "Link to this definition")
    
List of type map file names commonly installed. These files are typically named `mime.types` and are installed in different locations by different packages. 

mimetypes.suffix_map[¶](https://docs.python.org/3/library/mimetypes.html#mimetypes.suffix_map "Link to this definition")
    
Dictionary mapping suffixes to suffixes. This is used to allow recognition of encoded files for which the encoding and the type are indicated by the same extension. For example, the `.tgz` extension is mapped to `.tar.gz` to allow the encoding and type to be recognized separately. 

mimetypes.encodings_map[¶](https://docs.python.org/3/library/mimetypes.html#mimetypes.encodings_map "Link to this definition")
    
Dictionary mapping filename extensions to encoding types. 

mimetypes.types_map[¶](https://docs.python.org/3/library/mimetypes.html#mimetypes.types_map "Link to this definition")
    
Dictionary mapping filename extensions to MIME types. 

mimetypes.common_types[¶](https://docs.python.org/3/library/mimetypes.html#mimetypes.common_types "Link to this definition")
    
Dictionary mapping filename extensions to non-standard, but commonly found MIME types.
An example usage of the module:
>>>```
>>> importmimetypes
>>> mimetypes.init()
>>> mimetypes.knownfiles
['/etc/mime.types', '/etc/httpd/mime.types', ... ]
>>> mimetypes.suffix_map['.tgz']
'.tar.gz'
>>> mimetypes.encodings_map['.gz']
'gzip'
>>> mimetypes.types_map['.tgz']
'application/x-tar-gz'