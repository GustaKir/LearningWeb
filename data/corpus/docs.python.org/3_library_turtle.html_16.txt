Title: Turtle Module: Event Handling and Timer Functions
URL: https://docs.python.org/3/library/turtle.html
Summary: This section covers turtle graphics event handling with methods like `onscreenclick`, `ontimer`, and the importance of `mainloop`. It discusses parameters for the `ontimer` function and provides a code example illustrating how to use a timer to control turtle movement.
---

```

Note
This TurtleScreen method is available as a global function only under the name `onscreenclick`. The global function `onclick` is another one derived from the Turtle method `onclick`. 

turtle.ontimer(_fun_ , _t =0_)[¶](https://docs.python.org/3/library/turtle.html#turtle.ontimer "Link to this definition")
     

Parameters:
    
  * **fun** – a function with no arguments
  * **t** – a number >= 0


Install a timer that calls _fun_ after _t_ milliseconds.
>>>```
>>> running = True
>>> deff():
...   if running:
...     fd(50)
...     lt(60)
...     screen.ontimer(f, 250)
>>> f()  ### makes the turtle march around
>>> running = False

```


turtle.mainloop()[¶](https://docs.python.org/3/library/turtle.html#turtle.mainloop "Link to this definition")


turtle.done()[¶](https://docs.python.org/3/library/turtle.html#turtle.done "Link to this definition")
    
Starts event loop - calling Tkinter’s mainloop function. Must be the last statement in a turtle graphics program. Must _not_ be used if a script is run from within IDLE in -n mode (No subprocess) - for interactive use of turtle graphics.
>>>```
>>> screen.mainloop()

```

### Input methods[¶](https://docs.python.org/3/library/turtle.html#input-methods "Link to this heading") 

turtle.textinput(_title_ , _prompt_)[¶](https://docs.python.org/3/library/turtle.html#turtle.textinput "Link to this definition")
     

Parameters:
    
  * **title** – string
  * **prompt** – string


Pop up a dialog window for input of a string. Parameter title is the title of the dialog window, prompt is a text mostly describing what information to input. Return the string input. If the dialog is canceled, return `None`.
>>>```
>>> screen.textinput("NIM", "Name of first player:")

```


turtle.numinput(_title_ , _prompt_ , _default =None_, _minval =None_, _maxval =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.numinput "Link to this definition")
     

Parameters:
    
  * **title** – string
  * **prompt** – string
  * **default** – number (optional)
  * **minval** – number (optional)
  * **maxval** – number (optional)


Pop up a dialog window for input of a number. title is the title of the dialog window, prompt is a text mostly describing what numerical information to input. default: default value, minval: minimum value for input, maxval: maximum value for input. The number input must be in the range minval .. maxval if these are given. If not, a hint is issued and the dialog remains open for correction. Return the number input. If the dialog is canceled, return `None`.
>>>```
>>> screen.numinput("Poker", "Your stakes:", 1000, minval=10, maxval=10000)

```

### Settings and special methods[¶](https://docs.python.org/3/library/turtle.html#settings-and-special-methods "Link to this heading") 

turtle.mode(_mode =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.mode "Link to this definition")
     

Parameters:
    
**mode** – one of the strings “standard”, “logo” or “world”
Set turtle mode (“standard”, “logo” or “world”) and perform reset. If mode is not given, current mode is returned.
Mode “standard” is compatible with old [`turtle`](https://docs.python.org/3/library/turtle.html#module-turtle "turtle: An educational framework for simple graphics applications"). Mode “logo” is compatible with most Logo turtle graphics. Mode “world” uses user-defined “world coordinates”. **Attention** : in this mode angles appear distorted if `x/y` unit-ratio doesn’t equal 1.
Mode | Initial turtle heading | positive angles  
---|---|---  
“standard” | to the right (east) | counterclockwise  
“logo” | upward (north) | clockwise  
>>>```
>>> mode("logo")  # resets turtle heading to north
>>> mode()
'logo'

```


turtle.colormode(_cmode =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.colormode "Link to this definition")
     

Parameters:
    
**cmode** – one of the values 1.0 or 255
Return the colormode or set it to 1.0 or 255. Subsequently _r_ , _g_ , _b_ values of color triples have to be in the range 0..*cmode*.
>>>```
>>> screen.colormode(1)
>>> turtle.pencolor(240, 160, 80)
Traceback (most recent call last):
 ...
TurtleGraphicsError: bad color sequence: (240, 160, 80)
>>> screen.colormode()
1.0
>>> screen.colormode(255)
>>> screen.colormode()
255
>>> turtle.pencolor(240,160,80)

```


turtle.getcanvas()[¶](https://docs.python.org/3/library/turtle.html#turtle.getcanvas "Link to this definition")
    
Return the Canvas of this TurtleScreen. Useful for insiders who know what to do with a Tkinter Canvas.
>>>```
>>> cv = screen.getcanvas()
>>> cv
<turtle.ScrolledCanvas object ...>

```


turtle.getshapes()[¶](https://docs.python.org/3/library/turtle.html#turtle.getshapes "Link to this definition")
    
Return a list of names of all currently available turtle shapes.
>>>```
>>> screen.getshapes()
['arrow', 'blank', 'circle', ..., 'turtle']