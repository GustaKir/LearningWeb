Title: eval() - Python Built-in Function
URL: https://docs.python.org/3/library/functions.html
Summary: The eval() function evaluates a given Python expression (source) within specified global and local namespaces. It takes parameters to define the expression and optional dictionaries for globals and locals. The function returns the result of the evaluation but can raise syntax errors and poses security risks if used with untrusted input.
---

```


eval(_source_ , _/_ , _globals =None_, _locals =None_)[¶](https://docs.python.org/3/library/functions.html#eval "Link to this definition")
     

Parameters:
    
  * **source** ([`str`](https://docs.python.org/3/library/stdtypes.html#str "str") | [code object](https://docs.python.org/3/reference/datamodel.html#code-objects)) – A Python expression.
  * **globals** ([`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") | `None`) – The global namespace (default: `None`).
  * **locals** ([mapping](https://docs.python.org/3/glossary.html#term-mapping) | `None`) – The local namespace (default: `None`).



Returns:
    
The result of the evaluated expression. 

Raises:
    
Syntax errors are reported as exceptions.
Warning
This function executes arbitrary code. Calling it with user-supplied input may lead to security vulnerabilities.
The _expression_ argument is parsed and evaluated as a Python expression (technically speaking, a condition list) using the _globals_ and _locals_ mappings as global and local namespace. If the _globals_ dictionary is present and does not contain a value for the key `__builtins__`, a reference to the dictionary of the built-in module [`builtins`](https://docs.python.org/3/library/builtins.html#module-builtins "builtins: The module that provides the built-in namespace.") is inserted under that key before _expression_ is parsed. That way you can control what builtins are available to the executed code by inserting your own `__builtins__` dictionary into _globals_ before passing it to [`eval()`](https://docs.python.org/3/library/functions.html#eval "eval"). If the _locals_ mapping is omitted it defaults to the _globals_ dictionary. If both mappings are omitted, the expression is executed with the _globals_ and _locals_ in the environment where [`eval()`](https://docs.python.org/3/library/functions.html#eval "eval") is called. Note, _eval()_ will only have access to the [nested scopes](https://docs.python.org/3/glossary.html#term-nested-scope) (non-locals) in the enclosing environment if they are already referenced in the scope that is calling [`eval()`](https://docs.python.org/3/library/functions.html#eval "eval") (e.g. via a [`nonlocal`](https://docs.python.org/3/reference/simple_stmts.html#nonlocal) statement).
Example:
>>>```
>>> x = 1
>>> eval('x+1')
2