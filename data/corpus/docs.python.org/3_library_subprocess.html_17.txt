Title: Process Priority Classes in subprocess Module
URL: https://docs.python.org/3/library/subprocess.html
Summary: This section outlines two priority classes in the subprocess module: NORMAL_PRIORITY_CLASS for processes with normal priority (default) and REALTIME_PRIORITY_CLASS for processes with real-time priority, which should be used cautiously as it can disrupt essential system threads.
---

subprocess.NORMAL_PRIORITY_CLASS[¶](https://docs.python.org/3/library/subprocess.html#subprocess.NORMAL_PRIORITY_CLASS "Link to this definition")
    
A [`Popen`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen "subprocess.Popen") `creationflags` parameter to specify that a new process will have a normal priority. (default)
Added in version 3.7. 

subprocess.REALTIME_PRIORITY_CLASS[¶](https://docs.python.org/3/library/subprocess.html#subprocess.REALTIME_PRIORITY_CLASS "Link to this definition")
    
A [`Popen`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen "subprocess.Popen") `creationflags` parameter to specify that a new process will have realtime priority. You should almost never use REALTIME_PRIORITY_CLASS, because this interrupts system threads that manage mouse input, keyboard input, and background disk flushing. This class can be appropriate for applications that “talk” directly to hardware or that perform brief tasks that should have limited interruptions.
Added in version 3.7. 

subprocess.CREATE_NO_WINDOW[¶](https://docs.python.org/3/library/subprocess.html#subprocess.CREATE_NO_WINDOW "Link to this definition")
    
A [`Popen`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen "subprocess.Popen") `creationflags` parameter to specify that a new process will not create a window.
Added in version 3.7. 

subprocess.DETACHED_PROCESS[¶](https://docs.python.org/3/library/subprocess.html#subprocess.DETACHED_PROCESS "Link to this definition")
    
A [`Popen`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen "subprocess.Popen") `creationflags` parameter to specify that a new process will not inherit its parent’s console. This value cannot be used with CREATE_NEW_CONSOLE.
Added in version 3.7. 

subprocess.CREATE_DEFAULT_ERROR_MODE[¶](https://docs.python.org/3/library/subprocess.html#subprocess.CREATE_DEFAULT_ERROR_MODE "Link to this definition")
    
A [`Popen`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen "subprocess.Popen") `creationflags` parameter to specify that a new process does not inherit the error mode of the calling process. Instead, the new process gets the default error mode. This feature is particularly useful for multithreaded shell applications that run with hard errors disabled.
Added in version 3.7. 

subprocess.CREATE_BREAKAWAY_FROM_JOB[¶](https://docs.python.org/3/library/subprocess.html#subprocess.CREATE_BREAKAWAY_FROM_JOB "Link to this definition")
    
A [`Popen`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen "subprocess.Popen") `creationflags` parameter to specify that a new process is not associated with the job.
Added in version 3.7.
## Older high-level API[¶](https://docs.python.org/3/library/subprocess.html#older-high-level-api "Link to this heading")
Prior to Python 3.5, these three functions comprised the high level API to subprocess. You can now use [`run()`](https://docs.python.org/3/library/subprocess.html#subprocess.run "subprocess.run") in many cases, but lots of existing code calls these functions. 

subprocess.call(_args_ , _*_ , _stdin =None_, _stdout =None_, _stderr =None_, _shell =False_, _cwd =None_, _timeout =None_, _** other_popen_kwargs_)[¶](https://docs.python.org/3/library/subprocess.html#subprocess.call "Link to this definition")
    
Run the command described by _args_. Wait for command to complete, then return the [`returncode`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen.returncode "subprocess.Popen.returncode") attribute.
Code needing to capture stdout or stderr should use [`run()`](https://docs.python.org/3/library/subprocess.html#subprocess.run "subprocess.run") instead:
```
run(...).returncode