Title: Python 3.11.0 Alpha 2 Release Highlights
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section outlines key improvements in Python 3.11.0 Alpha 2, including enhanced error messages for `SyntaxError` related to keywords, the addition of the macOS-specific module `_scproxy` to `sys.stdlib_module_names`, and clarifications in `ImportError` messages.
---

## Python 3.11.0 alpha 2[¶](https://docs.python.org/3/whatsnew/changelog.html#python-3-11-0-alpha-2 "Link to this heading")
_Release date: 2021-11-05_
### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id269 "Link to this heading")
  * [bpo-45716](https://bugs.python.org/issue?@action=redirect&bpo=45716): Improve the [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") message when using `True`, `None` or `False` as keywords in a function call. Patch by Pablo Galindo.
  * [bpo-45688](https://bugs.python.org/issue?@action=redirect&bpo=45688): [`sys.stdlib_module_names`](https://docs.python.org/3/library/sys.html#sys.stdlib_module_names "sys.stdlib_module_names") now contains the macOS-specific module `_scproxy`.
  * [bpo-45379](https://bugs.python.org/issue?@action=redirect&bpo=45379): Clarify [`ImportError`](https://docs.python.org/3/library/exceptions.html#ImportError "ImportError") message when we try to explicitly import a frozen module but frozen modules are disabled.
  * [bpo-44525](https://bugs.python.org/issue?@action=redirect&bpo=44525): Specialize simple calls to Python functions (no starargs, keyword dict, or closure)
  * [bpo-45530](https://bugs.python.org/issue?@action=redirect&bpo=45530): Cases of sorting using tuples as keys may now be significantly faster in some cases. Patch by Tim Peters.
The order of the result may differ from earlier releases if the tuple elements don’t define a total ordering (see [Value comparisons](https://docs.python.org/3/reference/expressions.html#expressions-value-comparisons) for information on total ordering). It’s generally true that the result of sorting simply isn’t well-defined in the absence of a total ordering on list elements.
  * [bpo-45526](https://bugs.python.org/issue?@action=redirect&bpo=45526): In obmalloc, set ADDRESS_BITS to not ignore any bits (ignored 16 before). That is safer in the case that the kernel gives user-space virtual addresses that span a range greater than 48 bits.
  * [bpo-30570](https://bugs.python.org/issue?@action=redirect&bpo=30570): Fixed a crash in `issubclass()` from infinite recursion when searching pathological `__bases__` tuples.
  * [bpo-45521](https://bugs.python.org/issue?@action=redirect&bpo=45521): Fix a bug in the obmalloc radix tree code. On 64-bit machines, the bug causes the tree to hold 46-bits of virtual addresses, rather than the intended 48-bits.
  * [bpo-45494](https://bugs.python.org/issue?@action=redirect&bpo=45494): Fix parser crash when reporting errors involving invalid continuation characters. Patch by Pablo Galindo.
  * [bpo-45445](https://bugs.python.org/issue?@action=redirect&bpo=45445): Python now fails to initialize if it finds an invalid [`-X`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) option in the command line. Patch by Pablo Galindo.
  * [bpo-45340](https://bugs.python.org/issue?@action=redirect&bpo=45340): Object attributes are held in an array instead of a dictionary. An object’s dictionary are created lazily, only when needed. Reduces the memory consumption of a typical Python object by about 30%. Patch by Mark Shannon.
  * [bpo-45408](https://bugs.python.org/issue?@action=redirect&bpo=45408): Fix a crash in the parser when reporting tokenizer errors that occur at the same time unclosed parentheses are detected. Patch by Pablo Galindo.
  * [bpo-29410](https://bugs.python.org/issue?@action=redirect&bpo=29410): Add SipHash13 for string hash algorithm and use it by default.
  * [bpo-45385](https://bugs.python.org/issue?@action=redirect&bpo=45385): Fix reference leak from descr_check. Patch by Donghee Na.
  * [bpo-45367](https://bugs.python.org/issue?@action=redirect&bpo=45367): Specialized the `BINARY_MULTIPLY` opcode to `BINARY_MULTIPLY_INT` and `BINARY_MULTIPLY_FLOAT` using the PEP 659 machinery.
  * [bpo-21736](https://bugs.python.org/issue?@action=redirect&bpo=21736): Frozen stdlib modules now have `__file__` to the .py file they would otherwise be loaded from, if possible. For packages, `__path__` now has the correct entry instead of being an empty list, which allows unfrozen submodules to be imported. These are set only if the stdlib directory is known when the runtime is initialized. Note that the file at `__file__` is not guaranteed to exist. None of this affects non-stdlib frozen modules nor, for now, frozen modules imported using `PyImport_ImportFrozenModule()`. Also, at the moment `co_filename` is not updated for the module.
  * [bpo-45020](https://bugs.python.org/issue?@action=redirect&bpo=45020): For frozen stdlib modules, record the original module name as `module.__spec__.loader_state.origname`. If the value is different than `module.__spec__.name` then the module was defined as an alias in Tools/scripts/freeze_modules.py. If it is `None` then the module comes from a source file outside the stdlib.
  * [bpo-45324](https://bugs.python.org/issue?@action=redirect&bpo=45324): In FrozenImporter.find_spec