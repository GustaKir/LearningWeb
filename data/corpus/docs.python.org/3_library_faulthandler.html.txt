Title: faulthandler — Dump the Python traceback
URL: https://docs.python.org/3/library/faulthandler.html
Summary: The `faulthandler` module facilitates dumping Python tracebacks in response to faults, aiding in debugging and error handling. It includes functionalities for dumping tracebacks immediately, after a timeout, or on a user signal.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [`faulthandler` — Dump the Python traceback](https://docs.python.org/3/library/faulthandler.html)
    * [Dumping the traceback](https://docs.python.org/3/library/faulthandler.html#dumping-the-traceback)
    * [Fault handler state](https://docs.python.org/3/library/faulthandler.html#fault-handler-state)
    * [Dumping the tracebacks after a timeout](https://docs.python.org/3/library/faulthandler.html#dumping-the-tracebacks-after-a-timeout)
    * [Dumping the traceback on a user signal](https://docs.python.org/3/library/faulthandler.html#dumping-the-traceback-on-a-user-signal)
    * [Issue with file descriptors](https://docs.python.org/3/library/faulthandler.html#issue-with-file-descriptors)
    * [Example](https://docs.python.org/3/library/faulthandler.html#example)


#### Previous topic
[`bdb` — Debugger framework](https://docs.python.org/3/library/bdb.html "previous chapter")
#### Next topic
[`pdb` — The Python Debugger](https://docs.python.org/3/library/pdb.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/faulthandler.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/pdb.html "pdb — The Python Debugger") |
  * [previous](https://docs.python.org/3/library/bdb.html "bdb — Debugger framework") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Debugging and Profiling](https://docs.python.org/3/library/debug.html) »
  * [`faulthandler` — Dump the Python traceback](https://docs.python.org/3/library/faulthandler.html)
  * | 
  * Theme  Auto Light Dark |


# `faulthandler` — Dump the Python traceback[¶](https://docs.python.org/3/library/faulthandler.html#module-faulthandler "Link to this heading")
Added in version 3.3.
This module contains functions to dump Python tracebacks explicitly, on a fault, after a timeout, or on a user signal. Call [`faulthandler.enable()`](https://docs.python.org/3/library/faulthandler.html#faulthandler.enable "faulthandler.enable") to install fault handlers for the [`SIGSEGV`](https://docs.python.org/3/library/signal.html#signal.SIGSEGV "signal.SIGSEGV"), [`SIGFPE`](https://docs.python.org/3/library/signal.html#signal.SIGFPE "signal.SIGFPE"), [`SIGABRT`](https://docs.python.org/3/library/signal.html#signal.SIGABRT "signal.SIGABRT"), [`SIGBUS`](https://docs.python.org/3/library/signal.html#signal.SIGBUS "signal.SIGBUS"), and [`SIGILL`](https://docs.python.org/3/library/signal.html#signal.SIGILL "signal.SIGILL") signals. You can also enable them at startup by setting the [`PYTHONFAULTHANDLER`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONFAULTHANDLER) environment variable or by using the [`-X`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) `faulthandler` command line option.
The fault handler is compatible with system fault handlers like Apport or the Windows fault handler. The module uses an alternative stack for signal handlers if the `sigaltstack()` function is available. This allows it to dump the traceback even on a stack overflow.
The fault handler is called on catastrophic cases and therefore can only use signal-safe functions (e.g. it cannot allocate memory on the heap). Because of this limitation traceback dumping is minimal compared to normal Python tracebacks:
  * Only ASCII is supported. The `backslashreplace` error handler is used on encoding.
  * Each string is limited to 500 characters.
  * Only the filename, the function name and the line number are displayed. (no source code)
  * It is limited to 100 frames and 100 threads.
  * The order is reversed: the most recent call is shown first.