Title: sysconfig.get_path
URL: https://docs.python.org/3/library/sysconfig.html
Summary: The `sysconfig.get_path()` function returns an installation path for a specified path name based on a given install scheme. The path name must be one of those returned by `get_path_names()`. The function utilizes configuration variables from `get_config_vars()` to determine the appropriate paths for different platforms.
---

sysconfig.get_path(_name_[, _scheme_[, _vars_[, _expand_]]])[¶](https://docs.python.org/3/library/sysconfig.html#sysconfig.get_path "Link to this definition")
    
Return an installation path corresponding to the path _name_ , from the install scheme named _scheme_.
_name_ has to be a value from the list returned by [`get_path_names()`](https://docs.python.org/3/library/sysconfig.html#sysconfig.get_path_names "sysconfig.get_path_names").
[`sysconfig`](https://docs.python.org/3/library/sysconfig.html#module-sysconfig "sysconfig: Python's configuration information") stores installation paths corresponding to each path name, for each platform, with variables to be expanded. For instance the _stdlib_ path for the _nt_ scheme is: `{base}/Lib`.
[`get_path()`](https://docs.python.org/3/library/sysconfig.html#sysconfig.get_path "sysconfig.get_path") will use the variables returned by [`get_config_vars()`](https://docs.python.org/3/library/sysconfig.html#sysconfig.get_config_vars "sysconfig.get_config_vars") to expand the path. All variables have default values for each platform so one may call this function and get the default value.
If _scheme_ is provided, it must be a value from the list returned by [`get_scheme_names()`](https://docs.python.org/3/library/sysconfig.html#sysconfig.get_scheme_names "sysconfig.get_scheme_names"). Otherwise, the default scheme for the current platform is used.
If _vars_ is provided, it must be a dictionary of variables that will update the dictionary returned by [`get_config_vars()`](https://docs.python.org/3/library/sysconfig.html#sysconfig.get_config_vars "sysconfig.get_config_vars").
If _expand_ is set to `False`, the path will not be expanded using the variables.
If _name_ is not found, raise a [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError"). 

sysconfig.get_paths([_scheme_[, _vars_[, _expand_]]])[¶](https://docs.python.org/3/library/sysconfig.html#sysconfig.get_paths "Link to this definition")
    
Return a dictionary containing all installation paths corresponding to an installation scheme. See [`get_path()`](https://docs.python.org/3/library/sysconfig.html#sysconfig.get_path "sysconfig.get_path") for more information.
If _scheme_ is not provided, will use the default scheme for the current platform.
If _vars_ is provided, it must be a dictionary of variables that will update the dictionary used to expand the paths.
If _expand_ is set to false, the paths will not be expanded.
If _scheme_ is not an existing scheme, [`get_paths()`](https://docs.python.org/3/library/sysconfig.html#sysconfig.get_paths "sysconfig.get_paths") will raise a [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError").
## Other functions[¶](https://docs.python.org/3/library/sysconfig.html#other-functions "Link to this heading") 

sysconfig.get_python_version()[¶](https://docs.python.org/3/library/sysconfig.html#sysconfig.get_python_version "Link to this definition")
    
Return the `MAJOR.MINOR` Python version number as a string. Similar to `'%d.%d' % sys.version_info[:2]`. 

sysconfig.get_platform()[¶](https://docs.python.org/3/library/sysconfig.html#sysconfig.get_platform "Link to this definition")
    
Return a string that identifies the current platform.
This is used mainly to distinguish platform-specific build directories and platform-specific built distributions. Typically includes the OS name and version and the architecture (as supplied by [`os.uname()`](https://docs.python.org/3/library/os.html#os.uname "os.uname")), although the exact information included depends on the OS; e.g., on Linux, the kernel version isn’t particularly important.
Examples of returned values:
  * linux-i586
  * linux-alpha (?)
  * solaris-2.6-sun4u


Windows will return one of:
  * win-amd64 (64-bit Windows on AMD64, aka x86_64, Intel64, and EM64T)
  * win-arm64 (64-bit Windows on ARM64, aka AArch64)
  * win32 (all others - specifically, sys.platform is returned)


macOS can return:
  * macosx-10.6-ppc
  * macosx-10.4-ppc64
  * macosx-10.3-i386
  * macosx-10.4-fat


For other non-POSIX platforms, currently just returns [`sys.platform`](https://docs.python.org/3/library/sys.html#sys.platform "sys.platform"). 

sysconfig.is_python_build()[¶](https://docs.python.org/3/library/sysconfig.html#sysconfig.is_python_build "Link to this definition")
    
Return `True` if the running Python interpreter was built from source and is being run from its built location, and not from a location resulting from e.g. running `make install` or installing via a binary installer.