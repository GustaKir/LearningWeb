Title: Python Collections: OrderedDict Class
URL: https://docs.python.org/3/library/collections.html
Summary: The `collections.OrderedDict` class, added in version 3.1, is a specialized dictionary subclass that maintains the order of items. Key methods include `popitem()`, which removes and returns a (key, value) pair in LIFO or FIFO order based on the boolean argument, and `move_to_end()`, which moves a specified key to either the end or beginning of the dictionary.
---

.python.org/3/reference/datamodel.html#object.__reversed__ "object.__reversed__") method.



_class_ collections.OrderedDict([_items_])[¶](https://docs.python.org/3/library/collections.html#collections.OrderedDict "Link to this definition")
    
Return an instance of a [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") subclass that has methods specialized for rearranging dictionary order.
Added in version 3.1. 

popitem(_last =True_)[¶](https://docs.python.org/3/library/collections.html#collections.OrderedDict.popitem "Link to this definition")
    
The [`popitem()`](https://docs.python.org/3/library/collections.html#collections.OrderedDict.popitem "collections.OrderedDict.popitem") method for ordered dictionaries returns and removes a (key, value) pair. The pairs are returned in LIFO order if _last_ is true or FIFO order if false. 

move_to_end(_key_ , _last =True_)[¶](https://docs.python.org/3/library/collections.html#collections.OrderedDict.move_to_end "Link to this definition")
    
Move an existing _key_ to either end of an ordered dictionary. The item is moved to the right end if _last_ is true (the default) or to the beginning if _last_ is false. Raises [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError") if the _key_ does not exist:
>>>```
>>> d = OrderedDict.fromkeys('abcde')
>>> d.move_to_end('b')
>>> ''.join(d)
'acdeb'
>>> d.move_to_end('b', last=False)
>>> ''.join(d)
'bacde'

```

Added in version 3.2.
In addition to the usual mapping methods, ordered dictionaries also support reverse iteration using [`reversed()`](https://docs.python.org/3/library/functions.html#reversed "reversed").
Equality tests between [`OrderedDict`](https://docs.python.org/3/library/collections.html#collections.OrderedDict "collections.OrderedDict") objects are order-sensitive and are roughly equivalent to `list(od1.items())==list(od2.items())`.
Equality tests between [`OrderedDict`](https://docs.python.org/3/library/collections.html#collections.OrderedDict "collections.OrderedDict") objects and other [`Mapping`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping "collections.abc.Mapping") objects are order-insensitive like regular dictionaries. This allows [`OrderedDict`](https://docs.python.org/3/library/collections.html#collections.OrderedDict "collections.OrderedDict") objects to be substituted anywhere a regular dictionary is used.
Changed in version 3.5: The items, keys, and values [views](https://docs.python.org/3/glossary.html#term-dictionary-view) of [`OrderedDict`](https://docs.python.org/3/library/collections.html#collections.OrderedDict "collections.OrderedDict") now support reverse iteration using [`reversed()`](https://docs.python.org/3/library/functions.html#reversed "reversed").
Changed in version 3.6: With the acceptance of [**PEP 468**](https://peps.python.org/pep-0468/), order is retained for keyword arguments passed to the [`OrderedDict`](https://docs.python.org/3/library/collections.html#collections.OrderedDict "collections.OrderedDict") constructor and its [`update()`](https://docs.python.org/3/library/stdtypes.html#dict.update "dict.update") method.
Changed in version 3.9: Added merge (`|`) and update (`|=`) operators, specified in [**PEP 584**](https://peps.python.org/pep-0584/).
### [`OrderedDict`](https://docs.python.org/3/library/collections.html#collections.OrderedDict "collections.OrderedDict") Examples and Recipes[¶](https://docs.python.org/3/library/collections.html#ordereddict-examples-and-recipes "Link to this heading")
It is straightforward to create an ordered dictionary variant that remembers the order the keys were _last_ inserted. If a new entry overwrites an existing entry, the original insertion position is changed and moved to the end:
```
classLastUpdatedOrderedDict(OrderedDict):
  'Store items in the order the keys were last added'
  def__setitem__(self, key, value):
    super().__setitem__(key, value)
    self.move_to_end(key)

```

An [`OrderedDict`](https://docs.python.org/3/library/collections.html#collections.OrderedDict "collections.OrderedDict") would also be useful for implementing variants of [`functools.lru_cache()`](https://docs.python.org/3/library/functools.html#functools.lru_cache "functools.lru_cache"):
```
fromcollectionsimport OrderedDict
fromtimeimport time
classTimeBoundedLRU:
  "LRU Cache that invalidates and refreshes old entries."
  def__init__(self, func, maxsize=128, maxage=30):
    self.cache = OrderedDict()   # { args : (timestamp, result)}
    self.func = func
    self.maxsize = maxsize
    self.maxage = maxage
  def__call__(self, *args):
    if args in self.cache:
      self.cache.move_to_end(args)
      timestamp, result = self.cache[args]
      if time() - timestamp <= self.maxage:
        return result
    result = self.func(*args)
    self.cache[args] = time(), result
    if len(self.cache) > self.maxsize:
      self.cache.popitem(last=False)
    return result

```