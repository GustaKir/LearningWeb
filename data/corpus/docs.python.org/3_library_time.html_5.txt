Title: Time Module Functions: process_time_ns and sleep
URL: https://docs.python.org/3/library/time.html
Summary: This chunk describes two functions from Python's time module: `process_time_ns`, which returns process time in nanoseconds (added in version 3.7), and `sleep`, which suspends execution for a specified number of seconds, allowing for floating-point values and rescheduling if interrupted.
---

time.process_time_ns() → [int](https://docs.python.org/3/library/functions.html#int "int")[¶](https://docs.python.org/3/library/time.html#time.process_time_ns "Link to this definition")
    
Similar to [`process_time()`](https://docs.python.org/3/library/time.html#time.process_time "time.process_time") but return time as nanoseconds.
Added in version 3.7. 

time.sleep(_secs_)[¶](https://docs.python.org/3/library/time.html#time.sleep "Link to this definition")
    
Suspend execution of the calling thread for the given number of seconds. The argument may be a floating-point number to indicate a more precise sleep time.
If the sleep is interrupted by a signal and no exception is raised by the signal handler, the sleep is restarted with a recomputed timeout.
The suspension time may be longer than requested by an arbitrary amount, because of the scheduling of other activity in the system.
Windows implementation
On Windows, if _secs_ is zero, the thread relinquishes the remainder of its time slice to any other thread that is ready to run. If there are no other threads ready to run, the function returns immediately, and the thread continues execution. On Windows 8.1 and newer the implementation uses a [high-resolution timer](https://learn.microsoft.com/windows-hardware/drivers/kernel/high-resolution-timers) which provides resolution of 100 nanoseconds. If _secs_ is zero, `Sleep(0)` is used.
Unix implementation
  * Use `clock_nanosleep()` if available (resolution: 1 nanosecond);
  * Or use `nanosleep()` if available (resolution: 1 nanosecond);
  * Or use `select()` (resolution: 1 microsecond).


Note
To emulate a “no-op”, use [`pass`](https://docs.python.org/3/reference/simple_stmts.html#pass) instead of `time.sleep(0)`.
To voluntarily relinquish the CPU, specify a real-time [scheduling policy](https://docs.python.org/3/library/os.html#os-scheduling-policy) and use [`os.sched_yield()`](https://docs.python.org/3/library/os.html#os.sched_yield "os.sched_yield") instead.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `time.sleep` with argument `secs`.
Changed in version 3.5: The function now sleeps at least _secs_ even if the sleep is interrupted by a signal, except if the signal handler raises an exception (see [**PEP 475**](https://peps.python.org/pep-0475/) for the rationale).
Changed in version 3.11: On Unix, the `clock_nanosleep()` and `nanosleep()` functions are now used if available. On Windows, a waitable timer is now used.
Changed in version 3.13: Raises an auditing event. 

time.strftime(_format_[, _t_])[¶](https://docs.python.org/3/library/time.html#time.strftime "Link to this definition")
    
Convert a tuple or [`struct_time`](https://docs.python.org/3/library/time.html#time.struct_time "time.struct_time") representing a time as returned by [`gmtime()`](https://docs.python.org/3/library/time.html#time.gmtime "time.gmtime") or [`localtime()`](https://docs.python.org/3/library/time.html#time.localtime "time.localtime") to a string as specified by the _format_ argument. If _t_ is not provided, the current time as returned by [`localtime()`](https://docs.python.org/3/library/time.html#time.localtime "time.localtime") is used. _format_ must be a string. [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised if any field in _t_ is outside of the allowed range.
0 is a legal argument for any position in the time tuple; if it is normally illegal the value is forced to a correct one.
The following directives can be embedded in the _format_ string. They are shown without the optional field width and precision specification, and are replaced by the indicated characters in the [`strftime()`](https://docs.python.org/3/library/time.html#time.strftime "time.strftime") result:
Directive | Meaning | Notes  
---|---|---  
`%a` | Locale’s abbreviated weekday name. |   
`%A` | Locale’s full weekday name. |   
`%b` | Locale’s abbreviated month name. |   
`%B` | Locale’s full month name. |   
`%c` | Locale’s appropriate date and time representation. |   
`%d` | Day of the month as a decimal number [01,31]. |   
`%f` |