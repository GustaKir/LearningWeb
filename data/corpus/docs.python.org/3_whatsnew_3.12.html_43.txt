Title: Python 3.12 Changes: Exception Handling Enhancements
URL: https://docs.python.org/3/whatsnew/3.12.html
Summary: This section highlights the addition of new convenience functions `PyException_GetArgs()` and `PyException_SetArgs()` for managing exception arguments, along with `PyErr_DisplayException()` to replace the legacy API. These updates improve exception handling in Python 3.12.
---

(Contributed by Mark Shannon in [gh-101578](https://github.com/python/cpython/issues/101578).)
  * Add [`PyException_GetArgs()`](https://docs.python.org/3/c-api/exceptions.html#c.PyException_GetArgs "PyException_GetArgs") and [`PyException_SetArgs()`](https://docs.python.org/3/c-api/exceptions.html#c.PyException_SetArgs "PyException_SetArgs") as convenience functions for retrieving and modifying the [`args`](https://docs.python.org/3/library/exceptions.html#BaseException.args "BaseException.args") passed to the exceptionâ€™s constructor. (Contributed by Mark Shannon in [gh-101578](https://github.com/python/cpython/issues/101578).)
  * Add [`PyErr_DisplayException()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_DisplayException "PyErr_DisplayException"), which takes an exception instance, to replace the legacy-api `PyErr_Display()`. (Contributed by Irit Katriel in [gh-102755](https://github.com/python/cpython/issues/102755)).


  * [**PEP 683**](https://peps.python.org/pep-0683/): Introduce _Immortal Objects_ , which allows objects to bypass reference counts, and related changes to the C-API:
    * 

`_Py_IMMORTAL_REFCNT`: The reference count that defines an object
    
as immortal.
    * `_Py_IsImmortal` Checks if an object has the immortal reference count.
    * 

`PyObject_HEAD_INIT` This will now initialize reference count to
    
`_Py_IMMORTAL_REFCNT` when used with `Py_BUILD_CORE`.
    * 

`SSTATE_INTERNED_IMMORTAL` An identifier for interned unicode objects
    
that are immortal.
    * 

`SSTATE_INTERNED_IMMORTAL_STATIC` An identifier for interned unicode
    
objects that are immortal and static
    * 

`sys.getunicodeinternedsize` This returns the total number of unicode
    
objects that have been interned. This is now needed for `refleak.py` to correctly track reference counts and allocated blocks
(Contributed by Eddie Elizondo in [gh-84436](https://github.com/python/cpython/issues/84436).)
  * [**PEP 684**](https://peps.python.org/pep-0684/): Add the new [`Py_NewInterpreterFromConfig()`](https://docs.python.org/3/c-api/init.html#c.Py_NewInterpreterFromConfig "Py_NewInterpreterFromConfig") function and [`PyInterpreterConfig`](https://docs.python.org/3/c-api/init.html#c.PyInterpreterConfig "PyInterpreterConfig"), which may be used to create sub-interpreters with their own GILs. (See [PEP 684: A Per-Interpreter GIL](https://docs.python.org/3/whatsnew/3.12.html#whatsnew312-pep684) for more info.) (Contributed by Eric Snow in [gh-104110](https://github.com/python/cpython/issues/104110).)
  * In the limited C API version 3.12, [`Py_INCREF()`](https://docs.python.org/3/c-api/refcounting.html#c.Py_INCREF "Py_INCREF") and [`Py_DECREF()`](https://docs.python.org/3/c-api/refcounting.html#c.Py_DECREF "Py_DECREF") functions are now implemented as opaque function calls to hide implementation details. (Contributed by Victor Stinner in [gh-105387](https://github.com/python/cpython/issues/105387).)