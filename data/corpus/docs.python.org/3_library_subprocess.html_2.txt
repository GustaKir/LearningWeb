Title: subprocess.run Function
URL: https://docs.python.org/3/library/subprocess.html
Summary: The `subprocess.run()` function allows you to execute a command specified by the arguments and waits for it to complete, returning a `CompletedProcess` instance. It features several common arguments, along with a full signature similar to `Popen`. Detailed usage of these arguments can be found under 'Frequently Used Arguments'.
---

subprocess.run(_args_ , _*_ , _stdin =None_, _input =None_, _stdout =None_, _stderr =None_, _capture_output =False_, _shell =False_, _cwd =None_, _timeout =None_, _check =False_, _encoding =None_, _errors =None_, _text =None_, _env =None_, _universal_newlines =None_, _** other_popen_kwargs_)[¶](https://docs.python.org/3/library/subprocess.html#subprocess.run "Link to this definition")
    
Run the command described by _args_. Wait for command to complete, then return a [`CompletedProcess`](https://docs.python.org/3/library/subprocess.html#subprocess.CompletedProcess "subprocess.CompletedProcess") instance.
The arguments shown above are merely the most common ones, described below in [Frequently Used Arguments](https://docs.python.org/3/library/subprocess.html#frequently-used-arguments) (hence the use of keyword-only notation in the abbreviated signature). The full function signature is largely the same as that of the [`Popen`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen "subprocess.Popen") constructor - most of the arguments to this function are passed through to that interface. (_timeout_ , _input_ , _check_ , and _capture_output_ are not.)
If _capture_output_ is true, stdout and stderr will be captured. When used, the internal [`Popen`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen "subprocess.Popen") object is automatically created with _stdout_ and _stderr_ both set to [`PIPE`](https://docs.python.org/3/library/subprocess.html#subprocess.PIPE "subprocess.PIPE"). The _stdout_ and _stderr_ arguments may not be supplied at the same time as _capture_output_. If you wish to capture and combine both streams into one, set _stdout_ to [`PIPE`](https://docs.python.org/3/library/subprocess.html#subprocess.PIPE "subprocess.PIPE") and _stderr_ to [`STDOUT`](https://docs.python.org/3/library/subprocess.html#subprocess.STDOUT "subprocess.STDOUT"), instead of using _capture_output_.
A _timeout_ may be specified in seconds, it is internally passed on to [`Popen.communicate()`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate "subprocess.Popen.communicate"). If the timeout expires, the child process will be killed and waited for. The [`TimeoutExpired`](https://docs.python.org/3/library/subprocess.html#subprocess.TimeoutExpired "subprocess.TimeoutExpired") exception will be re-raised after the child process has terminated. The initial process creation itself cannot be interrupted on many platform APIs so you are not guaranteed to see a timeout exception until at least after however long process creation takes.
The _input_ argument is passed to [`Popen.communicate()`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate "subprocess.Popen.communicate") and thus to the subprocess’s stdin. If used it must be a byte sequence, or a string if _encoding_ or _errors_ is specified or _text_ is true. When used, the internal [`Popen`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen "subprocess.Popen") object is automatically created with _stdin_ set to [`PIPE`](https://docs.python.org/3/library/subprocess.html#subprocess.PIPE "subprocess.PIPE"), and the _stdin_ argument may not be used as well.
If _check_ is true, and the process exits with a non-zero exit code, a [`CalledProcessError`](https://docs.python.org/3/library/subprocess.html#subprocess.CalledProcessError "subprocess.CalledProcessError") exception will be raised. Attributes of that exception hold the arguments, the exit code, and stdout and stderr if they were captured.
If _encoding_ or _errors_ are specified, or _text_ is true, file objects for stdin, stdout and stderr are opened in text mode using the specified _encoding_ and _errors_ or the [`io.TextIOWrapper`](https://docs.python.org/3/library/io.html#io.TextIOWrapper "io.TextIOWrapper") default. The _universal_newlines_ argument is equivalent to _text_ and is provided for backwards compatibility. By default, file objects are opened in binary mode.
If _env_ is not `None`, it must be a mapping that defines the environment variables for the new process; these are used instead of the default behavior of inheriting the current process’ environment. It is passed directly to [`Popen`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen "subprocess.Popen"). This mapping can be str to str on any platform or bytes to bytes on POSIX platforms much like [`os.environ`](https://docs.python.org/3/library/os.html#os.environ "os.environ") or [`os.environb`](https://docs.python.org/3/library/os.html#os.environb "os.environb").
Examples:
>>>