Title: Decimal Logical Operations
URL: https://docs.python.org/3/library/decimal.html
Summary: This section details the logical operations available for decimal operands in Python's Decimal module, including `logical_and()`, `logical_invert()`, and `logical_or()`, which perform logical operations such as digit-wise AND, inversion, and OR, respectively.
---

logical_and(_other_ , _context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.logical_and "Link to this definition")
    
[`logical_and()`](https://docs.python.org/3/library/decimal.html#decimal.Decimal.logical_and "decimal.Decimal.logical_and") is a logical operation which takes two _logical operands_ (see [Logical operands](https://docs.python.org/3/library/decimal.html#logical-operands-label)). The result is the digit-wise `and` of the two operands. 

logical_invert(_context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.logical_invert "Link to this definition")
    
[`logical_invert()`](https://docs.python.org/3/library/decimal.html#decimal.Decimal.logical_invert "decimal.Decimal.logical_invert") is a logical operation. The result is the digit-wise inversion of the operand. 

logical_or(_other_ , _context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.logical_or "Link to this definition")
    
[`logical_or()`](https://docs.python.org/3/library/decimal.html#decimal.Decimal.logical_or "decimal.Decimal.logical_or") is a logical operation which takes two _logical operands_ (see [Logical operands](https://docs.python.org/3/library/decimal.html#logical-operands-label)). The result is the digit-wise `or` of the two operands. 

logical_xor(_other_ , _context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.logical_xor "Link to this definition")
    
[`logical_xor()`](https://docs.python.org/3/library/decimal.html#decimal.Decimal.logical_xor "decimal.Decimal.logical_xor") is a logical operation which takes two _logical operands_ (see [Logical operands](https://docs.python.org/3/library/decimal.html#logical-operands-label)). The result is the digit-wise exclusive or of the two operands. 

max(_other_ , _context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.max "Link to this definition")
    
Like `max(self, other)` except that the context rounding rule is applied before returning and that `NaN` values are either signaled or ignored (depending on the context and whether they are signaling or quiet). 

max_mag(_other_ , _context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.max_mag "Link to this definition")
    
Similar to the [`max()`](https://docs.python.org/3/library/decimal.html#decimal.Decimal.max "decimal.Decimal.max") method, but the comparison is done using the absolute values of the operands. 

min(_other_ , _context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.min "Link to this definition")
    
Like `min(self, other)` except that the context rounding rule is applied before returning and that `NaN` values are either signaled or ignored (depending on the context and whether they are signaling or quiet). 

min_mag(_other_ , _context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.min_mag "Link to this definition")
    
Similar to the [`min()`](https://docs.python.org/3/library/decimal.html#decimal.Decimal.min "decimal.Decimal.min") method, but the comparison is done using the absolute values of the operands. 

next_minus(_context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.next_minus "Link to this definition")
    
Return the largest number representable in the given context (or in the current thread’s context if no context is given) that is smaller than the given operand. 

next_plus(_context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.next_plus "Link to this definition")
    
Return the smallest number representable in the given context (or in the current thread’s context if no context is given) that is larger than the given operand. 

next_toward(_other_ , _context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.next_toward "Link to this definition")
    
If the two operands are unequal, return the number closest to the first operand in the direction of the second operand. If both operands are numerically equal, return a copy of the first operand with the sign set to be the same as the sign of the second operand.