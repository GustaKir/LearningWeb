Title: zipimport Module Overview
URL: https://docs.python.org/3/library/zipimport.html
Summary: The zipimport module provides functionality for importing Python modules from ZIP files. It defines the ZipImportError exception, a subclass of ImportError, and introduces the zipimporter class, which is used to create instances for importing from ZIP archives.
---

_exception_ zipimport.ZipImportError[¶](https://docs.python.org/3/library/zipimport.html#zipimport.ZipImportError "Link to this definition")
    
Exception raised by zipimporter objects. It’s a subclass of [`ImportError`](https://docs.python.org/3/library/exceptions.html#ImportError "ImportError"), so it can be caught as [`ImportError`](https://docs.python.org/3/library/exceptions.html#ImportError "ImportError"), too.
## zipimporter Objects[¶](https://docs.python.org/3/library/zipimport.html#zipimporter-objects "Link to this heading")
[`zipimporter`](https://docs.python.org/3/library/zipimport.html#zipimport.zipimporter "zipimport.zipimporter") is the class for importing ZIP files. 

_class_ zipimport.zipimporter(_archivepath_)[¶](https://docs.python.org/3/library/zipimport.html#zipimport.zipimporter "Link to this definition")
    
Create a new zipimporter instance. _archivepath_ must be a path to a ZIP file, or to a specific path within a ZIP file. For example, an _archivepath_ of `foo/bar.zip/lib` will look for modules in the `lib` directory inside the ZIP file `foo/bar.zip` (provided that it exists).
[`ZipImportError`](https://docs.python.org/3/library/zipimport.html#zipimport.ZipImportError "zipimport.ZipImportError") is raised if _archivepath_ doesn’t point to a valid ZIP archive.
Changed in version 3.12: Methods `find_loader()` and `find_module()`, deprecated in 3.10 are now removed. Use [`find_spec()`](https://docs.python.org/3/library/zipimport.html#zipimport.zipimporter.find_spec "zipimport.zipimporter.find_spec") instead. 

create_module(_spec_)[¶](https://docs.python.org/3/library/zipimport.html#zipimport.zipimporter.create_module "Link to this definition")
    
Implementation of [`importlib.abc.Loader.create_module()`](https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.create_module "importlib.abc.Loader.create_module") that returns [`None`](https://docs.python.org/3/library/constants.html#None "None") to explicitly request the default semantics.
Added in version 3.10. 

exec_module(_module_)[¶](https://docs.python.org/3/library/zipimport.html#zipimport.zipimporter.exec_module "Link to this definition")
    
Implementation of [`importlib.abc.Loader.exec_module()`](https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.exec_module "importlib.abc.Loader.exec_module").
Added in version 3.10. 

find_spec(_fullname_ , _target =None_)[¶](https://docs.python.org/3/library/zipimport.html#zipimport.zipimporter.find_spec "Link to this definition")
    
An implementation of [`importlib.abc.PathEntryFinder.find_spec()`](https://docs.python.org/3/library/importlib.html#importlib.abc.PathEntryFinder.find_spec "importlib.abc.PathEntryFinder.find_spec").
Added in version 3.10. 

get_code(_fullname_)[¶](https://docs.python.org/3/library/zipimport.html#zipimport.zipimporter.get_code "Link to this definition")
    
Return the code object for the specified module. Raise [`ZipImportError`](https://docs.python.org/3/library/zipimport.html#zipimport.ZipImportError "zipimport.ZipImportError") if the module couldn’t be imported. 

get_data(_pathname_)[¶](https://docs.python.org/3/library/zipimport.html#zipimport.zipimporter.get_data "Link to this definition")
    
Return the data associated with _pathname_. Raise [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") if the file wasn’t found.
Changed in version 3.3: [`IOError`](https://docs.python.org/3/library/exceptions.html#IOError "IOError") used to be raised, it is now an alias of [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError"). 

get_filename(_fullname_)[¶](https://docs.python.org/3/library/zipimport.html#zipimport.zipimporter.get_filename "Link to this definition")
    
Return the value `__file__` would be set to if the specified module was imported. Raise [`ZipImportError`](https://docs.python.org/3/library/zipimport.html#zipimport.ZipImportError "zipimport.ZipImportError") if the module couldn’t be imported.
Added in version 3.1. 

get_source(_fullname_)[¶](https://docs.python.org/3/library/zipimport.html#zipimport.zipimporter.get_source "Link to this definition")
    
Return the source code for the specified module. Raise [`ZipImportError`](https://docs.python.org/3/library/zipimport.html#zipimport.ZipImportError "zipimport.ZipImportError") if the module couldn’t be found, return [`None`](https://docs.python.org/3/library/constants.html#None "None") if the archive does contain the module, but has no source for it. 

is_package(_fullname_)[¶](https://docs.python.org/3/library/zipimport.html#zipimport.zipimporter.is_package "Link to this definition")
    
Return `True` if the module specified by _fullname_ is a package. Raise [`ZipImportError`](https://docs.python.org/3/library/zipimport.html#zipimport.ZipImportError "zipimport.ZipImportError") if the module couldn’t be found.