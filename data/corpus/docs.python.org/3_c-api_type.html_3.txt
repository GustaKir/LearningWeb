Title: PyType Functions in Python C API
URL: https://docs.python.org/3/c-api/type.html
Summary: The document describes two functions in the Python C API for obtaining a type's qualified name and fully qualified name. The `PyType_GetQualName` function, introduced in version 3.11, returns the qualified name of a type, similar to accessing its `__qualname__` attribute. The `PyType_GetFullyQualifiedName` function is also introduced but details on its functionality are not fully provided in this excerpt.
---

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyType_GetQualName([PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject")*type)[¶](https://docs.python.org/3/c-api/type.html#c.PyType_GetQualName "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.11._
Return the type’s qualified name. Equivalent to getting the type’s [`__qualname__`](https://docs.python.org/3/reference/datamodel.html#type.__qualname__ "type.__qualname__") attribute.
Added in version 3.11. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyType_GetFullyQualifiedName([PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject")*type)[¶](https://docs.python.org/3/c-api/type.html#c.PyType_GetFullyQualifiedName "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.13._
Return the type’s fully qualified name. Equivalent to `f"{type.__module__}.{type.__qualname__}"`, or [`type.__qualname__`](https://docs.python.org/3/reference/datamodel.html#type.__qualname__ "type.__qualname__") if [`type.__module__`](https://docs.python.org/3/reference/datamodel.html#type.__module__ "type.__module__") is not a string or is equal to `"builtins"`.
Added in version 3.13. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyType_GetModuleName([PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject")*type)[¶](https://docs.python.org/3/c-api/type.html#c.PyType_GetModuleName "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.13._
Return the type’s module name. Equivalent to getting the [`type.__module__`](https://docs.python.org/3/reference/datamodel.html#type.__module__ "type.__module__") attribute.
Added in version 3.13. 

void*PyType_GetSlot([PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject")*type, intslot)[¶](https://docs.python.org/3/c-api/type.html#c.PyType_GetSlot "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.4._
Return the function pointer stored in the given slot. If the result is `NULL`, this indicates that either the slot is `NULL`, or that the function was called with invalid parameters. Callers will typically cast the result pointer into the appropriate function type.
See [`PyType_Slot.slot`](https://docs.python.org/3/c-api/type.html#c.PyType_Slot.slot "PyType_Slot.slot") for possible values of the _slot_ argument.
Added in version 3.4.
Changed in version 3.10: [`PyType_GetSlot()`](https://docs.python.org/3/c-api/type.html#c.PyType_GetSlot "PyType_GetSlot") can now accept all types. Previously, it was limited to [heap types](https://docs.python.org/3/c-api/typeobj.html#heap-types). 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyType_GetModule([PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject")*type)[¶](https://docs.python.org/3/c-api/type.html#c.PyType_GetModule "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.10._
Return the module object associated with the given type when the type was created using [`PyType_FromModuleAndSpec()`](https://docs.python.org/3/c-api/type.html#c.PyType_FromModuleAndSpec "PyType_FromModuleAndSpec").
If no module is associated with the given type, sets [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") and returns `NULL`.
This function is usually used to get the module in which a method is defined. Note that in such a method, `PyType_GetModule(Py_TYPE(self))` may not return the intended result. `Py_TYPE(self)` may be a _subclass_ of the intended class, and subclasses are not necessarily defined in the same module as their superclass. See [`PyCMethod`](https://docs.python.org/3/c-api/structures.html#c.PyCMethod "PyCMethod") to get the class that defines the method. See [`PyType_GetModuleByDef()`](https://docs.python.org/3/c-api/type.html#c.PyType_GetModuleByDef "PyType_GetModuleByDef") for cases when `PyCMethod` cannot be used.
Added in version 3.9.