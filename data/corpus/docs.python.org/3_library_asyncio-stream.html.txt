Title: Asyncio Streams Documentation
URL: https://docs.python.org/3/library/asyncio-stream.html
Summary: This section of the Python documentation provides an overview of asyncio streams, detailing the StreamReader and StreamWriter classes, along with examples like TCP echo client and server implementations.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [Streams](https://docs.python.org/3/library/asyncio-stream.html)
    * [StreamReader](https://docs.python.org/3/library/asyncio-stream.html#streamreader)
    * [StreamWriter](https://docs.python.org/3/library/asyncio-stream.html#streamwriter)
    * [Examples](https://docs.python.org/3/library/asyncio-stream.html#examples)
      * [TCP echo client using streams](https://docs.python.org/3/library/asyncio-stream.html#tcp-echo-client-using-streams)
      * [TCP echo server using streams](https://docs.python.org/3/library/asyncio-stream.html#tcp-echo-server-using-streams)
      * [Get HTTP headers](https://docs.python.org/3/library/asyncio-stream.html#get-http-headers)
      * [Register an open socket to wait for data using streams](https://docs.python.org/3/library/asyncio-stream.html#register-an-open-socket-to-wait-for-data-using-streams)


#### Previous topic
[Coroutines and Tasks](https://docs.python.org/3/library/asyncio-task.html "previous chapter")
#### Next topic
[Synchronization Primitives](https://docs.python.org/3/library/asyncio-sync.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/asyncio-stream.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/asyncio-sync.html "Synchronization Primitives") |
  * [previous](https://docs.python.org/3/library/asyncio-task.html "Coroutines and Tasks") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Networking and Interprocess Communication](https://docs.python.org/3/library/ipc.html) »
  * [`asyncio` — Asynchronous I/O](https://docs.python.org/3/library/asyncio.html) »
  * [Streams](https://docs.python.org/3/library/asyncio-stream.html)
  * | 
  * Theme  Auto Light Dark |


# Streams[¶](https://docs.python.org/3/library/asyncio-stream.html#streams "Link to this heading")
**Source code:** [Lib/asyncio/streams.py](https://github.com/python/cpython/tree/3.13/Lib/asyncio/streams.py)
Streams are high-level async/await-ready primitives to work with network connections. Streams allow sending and receiving data without using callbacks or low-level protocols and transports.
Here is an example of a TCP echo client written using asyncio streams:
```
importasyncio
async deftcp_echo_client(message):
  reader, writer = await asyncio.open_connection(
    '127.0.0.1', 8888)
  print(f'Send: {message!r}')
  writer.write(message.encode())
  await writer.drain()
  data = await reader.read(100)
  print(f'Received: {data.decode()!r}')
  print('Close the connection')
  writer.close()
  await writer.wait_closed()
asyncio.run(tcp_echo_client('Hello World!'))