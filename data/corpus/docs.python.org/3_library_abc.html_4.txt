Title: Functions in the abc Module
URL: https://docs.python.org/3/library/abc.html
Summary: The `abc` module provides functions like `abc.get_cache_token()` to retrieve the current abstract base class cache token and `abc.update_abstractmethods(_cls_)` to refresh a class's abstract methods status. The former helps identify the current version of the abstract base class cache, while the latter should be used when abstract methods are modified after class creation.
---

```

The `abc` module also provides the following functions: 

abc.get_cache_token()[¶](https://docs.python.org/3/library/abc.html#abc.get_cache_token "Link to this definition")
    
Returns the current abstract base class cache token.
The token is an opaque object (that supports equality testing) identifying the current version of the abstract base class cache for virtual subclasses. The token changes with every call to [`ABCMeta.register()`](https://docs.python.org/3/library/abc.html#abc.ABCMeta.register "abc.ABCMeta.register") on any ABC.
Added in version 3.4. 

abc.update_abstractmethods(_cls_)[¶](https://docs.python.org/3/library/abc.html#abc.update_abstractmethods "Link to this definition")
    
A function to recalculate an abstract class’s abstraction status. This function should be called if a class’s abstract methods have been implemented or changed after it was created. Usually, this function should be called from within a class decorator.
Returns _cls_ , to allow usage as a class decorator.
If _cls_ is not an instance of [`ABCMeta`](https://docs.python.org/3/library/abc.html#abc.ABCMeta "abc.ABCMeta"), does nothing.
Note
This function assumes that _cls_ ’s superclasses are already updated. It does not update any subclasses.
Added in version 3.10.
Footnotes
[[1](https://docs.python.org/3/library/abc.html#id1)]
C++ programmers should note that Python’s virtual base class concept is not the same as C++’s.
#### Previous topic
[`contextlib` — Utilities for `with`-statement contexts](https://docs.python.org/3/library/contextlib.html "previous chapter")
#### Next topic
[`atexit` — Exit handlers](https://docs.python.org/3/library/atexit.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/abc.rst)


«
### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/atexit.html "atexit — Exit handlers") |
  * [previous](https://docs.python.org/3/library/contextlib.html "contextlib — Utilities for with-statement contexts") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Python Runtime Services](https://docs.python.org/3/library/python.html) »
  * [`abc` — Abstract Base Classes](https://docs.python.org/3/library/abc.html)
  * | 
  * Theme  Auto Light Dark |


© [ Copyright ](https://docs.python.org/3/copyright.html) 2001-2025, Python Software Foundation. This page is licensed under the Python Software Foundation License Version 2. Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License. See [History and License](https://docs.python.org/license.html) for more information. The Python Software Foundation is a non-profit corporation. [Please donate.](https://www.python.org/psf/donations/) Last updated on Apr 27, 2025 (05:38 UTC). [Found a bug](https://docs.python.org/bugs.html)? Created using [Sphinx](https://www.sphinx-doc.org/) 8.2.3.