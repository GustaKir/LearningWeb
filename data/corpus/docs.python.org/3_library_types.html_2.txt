Title: Standard Interpreter Types in Python
URL: https://docs.python.org/3/library/types.html
Summary: This section introduces standard interpreter types available in Python, which are essential for implementing a Python interpreter. It emphasizes their typical use in type checks with `isinstance()` and `issubclass()`, and notes that signatures may differ across Python versions. The module specifically mentions `NoneType` and other fundamental types.
---

```

Added in version 3.12.
See also
[**PEP 560**](https://peps.python.org/pep-0560/) - Core support for typing module and generic types
## Standard Interpreter Types[¶](https://docs.python.org/3/library/types.html#standard-interpreter-types "Link to this heading")
This module provides names for many of the types that are required to implement a Python interpreter. It deliberately avoids including some of the types that arise only incidentally during processing such as the `listiterator` type.
Typical use of these names is for [`isinstance()`](https://docs.python.org/3/library/functions.html#isinstance "isinstance") or [`issubclass()`](https://docs.python.org/3/library/functions.html#issubclass "issubclass") checks.
If you instantiate any of these types, note that signatures may vary between Python versions.
Standard names are defined for the following types: 

types.NoneType[¶](https://docs.python.org/3/library/types.html#types.NoneType "Link to this definition")
    
The type of [`None`](https://docs.python.org/3/library/constants.html#None "None").
Added in version 3.10. 

types.FunctionType[¶](https://docs.python.org/3/library/types.html#types.FunctionType "Link to this definition")


types.LambdaType[¶](https://docs.python.org/3/library/types.html#types.LambdaType "Link to this definition")
    
The type of user-defined functions and functions created by [`lambda`](https://docs.python.org/3/reference/expressions.html#lambda) expressions.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `function.__new__` with argument `code`.
The audit event only occurs for direct instantiation of function objects, and is not raised for normal compilation. 

types.GeneratorType[¶](https://docs.python.org/3/library/types.html#types.GeneratorType "Link to this definition")
    
The type of [generator](https://docs.python.org/3/glossary.html#term-generator)-iterator objects, created by generator functions. 

types.CoroutineType[¶](https://docs.python.org/3/library/types.html#types.CoroutineType "Link to this definition")
    
The type of [coroutine](https://docs.python.org/3/glossary.html#term-coroutine) objects, created by [`async def`](https://docs.python.org/3/reference/compound_stmts.html#async-def) functions.
Added in version 3.5. 

types.AsyncGeneratorType[¶](https://docs.python.org/3/library/types.html#types.AsyncGeneratorType "Link to this definition")
    
The type of [asynchronous generator](https://docs.python.org/3/glossary.html#term-asynchronous-generator)-iterator objects, created by asynchronous generator functions.
Added in version 3.6. 

_class_ types.CodeType(_** kwargs_)[¶](https://docs.python.org/3/library/types.html#types.CodeType "Link to this definition")
    
The type of [code objects](https://docs.python.org/3/reference/datamodel.html#code-objects) such as returned by [`compile()`](https://docs.python.org/3/library/functions.html#compile "compile").
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `code.__new__` with arguments `code`, `filename`, `name`, `argcount`, `posonlyargcount`, `kwonlyargcount`, `nlocals`, `stacksize`, `flags`.
Note that the audited arguments may not match the names or positions required by the initializer. The audit event only occurs for direct instantiation of code objects, and is not raised for normal compilation. 

types.CellType[¶](https://docs.python.org/3/library/types.html#types.CellType "Link to this definition")
    
The type for cell objects: such objects are used as containers for a function’s [closure variables](https://docs.python.org/3/glossary.html#term-closure-variable).
Added in version 3.8. 

types.MethodType[¶](https://docs.python.org/3/library/types.html#types.MethodType "Link to this definition")
    
The type of methods of user-defined class instances. 

types.BuiltinFunctionType[¶](https://docs.python.org/3/library/types.html#types.BuiltinFunctionType "Link to this definition")


types.BuiltinMethodType[¶](https://docs.python.org/3/library/types.html#types.BuiltinMethodType "Link to this definition")
    
The type of built-in functions like [`len()`](https://docs.python.org/3/library/functions.html#len "len") or [`sys.exit()`](https://docs.python.org/3/library/sys.html#sys.exit "sys.exit"), and methods of built-in classes. (Here, the term “built-in” means “written in C”.) 

types.WrapperDescriptorType[¶](https://docs.python.org/3/library/types.html#types.WrapperDescriptorType "Link to this definition")
    
The type of methods of some built-in data types and base classes such as [`object.__init__()`](https://docs.python.org/3/reference/datamodel.html#object.__init__ "object.__init__") or [`object.__lt__()`](https://docs.python.org/3/reference/datamodel.html#object.__lt__ "object.__lt__").
Added in version 3.7.