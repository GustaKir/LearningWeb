Title: Python 3.2 Release Notes: Performance Improvements
URL: https://docs.python.org/3/whatsnew/3.2.html
Summary: The Python 3.2 release introduces significant performance enhancements, including faster serialization with the `pickle` module and improved memory efficiency of the Timsort algorithm used in `list.sort()` and `sorted()` when utilizing key functions.
---

```

(Patch and additional tests contributed by Dave Malcolm; [bpo-6690](https://bugs.python.org/issue?@action=redirect&bpo=6690)).
  * Serializing and unserializing data using the [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "pickle: Convert Python objects to streams of bytes and back.") module is now several times faster.
(Contributed by Alexandre Vassalotti, Antoine Pitrou and the Unladen Swallow team in [bpo-9410](https://bugs.python.org/issue?@action=redirect&bpo=9410) and [bpo-3873](https://bugs.python.org/issue?@action=redirect&bpo=3873).)
  * The [Timsort algorithm](https://en.wikipedia.org/wiki/Timsort) used in [`list.sort()`](https://docs.python.org/3/library/stdtypes.html#list.sort "list.sort") and [`sorted()`](https://docs.python.org/3/library/functions.html#sorted "sorted") now runs faster and uses less memory when called with a [key function](https://docs.python.org/3/glossary.html#term-key-function). Previously, every element of a list was wrapped with a temporary object that remembered the key value associated with each element. Now, two arrays of keys and values are sorted in parallel. This saves the memory consumed by the sort wrappers, and it saves time lost to delegating comparisons.
(Patch by Daniel Stutzbach in [bpo-9915](https://bugs.python.org/issue?@action=redirect&bpo=9915).)
  * JSON decoding performance is improved and memory consumption is reduced whenever the same string is repeated for multiple keys. Also, JSON encoding now uses the C speedups when the `sort_keys` argument is true.
(Contributed by Antoine Pitrou in [bpo-7451](https://bugs.python.org/issue?@action=redirect&bpo=7451) and by Raymond Hettinger and Antoine Pitrou in [bpo-10314](https://bugs.python.org/issue?@action=redirect&bpo=10314).)
  * Recursive locks (created with the [`threading.RLock()`](https://docs.python.org/3/library/threading.html#threading.RLock "threading.RLock") API) now benefit from a C implementation which makes them as fast as regular locks, and between 10x and 15x faster than their previous pure Python implementation.
(Contributed by Antoine Pitrou; [bpo-3001](https://bugs.python.org/issue?@action=redirect&bpo=3001).)
  * The fast-search algorithm in stringlib is now used by the [`split()`](https://docs.python.org/3/library/stdtypes.html#str.split "str.split"), [`rsplit()`](https://docs.python.org/3/library/stdtypes.html#str.rsplit "str.rsplit"), [`splitlines()`](https://docs.python.org/3/library/stdtypes.html#str.splitlines "str.splitlines") and [`replace()`](https://docs.python.org/3/library/stdtypes.html#str.replace "str.replace") methods on [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes"), [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") and [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") objects. Likewise, the algorithm is also used by [`rfind()`](https://docs.python.org/3/library/stdtypes.html#str.rfind "str.rfind"), [`rindex()`](https://docs.python.org/3/library/stdtypes.html#str.rindex "str.rindex"), [`rsplit()`](https://docs.python.org/3/library/stdtypes.html#str.rsplit "str.rsplit") and [`rpartition()`](https://docs.python.org/3/library/stdtypes.html#str.rpartition "str.rpartition").
(Patch by Florent Xicluna in [bpo-7622](https://bugs.python.org/issue?@action=redirect&bpo=7622) and [bpo-7462](https://bugs.python.org/issue?@action=redirect&bpo=7462).)
  * Integer to string conversions now work two “digits” at a time, reducing the number of division and modulo operations.
([bpo-6713](https://bugs.python.org/issue?@action=redirect&bpo=6713) by Gawain Bolton, Mark Dickinson, and Victor Stinner.)