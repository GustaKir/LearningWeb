Title: Python 3.8 What's New Overview
URL: https://docs.python.org/3/whatsnew/3.8.html
Summary: Python 3.8 introduces enhancements in the number protocol, where `PyNumber_Check()` recognizes objects that implement `__index__()`. Additionally, memory management for heap-allocated type objects has been optimized by increasing their reference count during initialization. These improvements come from contributions by Serhiy Storchaka and address specific issues in the Python bug tracker.
---

ecimal.Decimal") and [`Fraction`](https://docs.python.org/3/library/fractions.html#fractions.Fraction "fractions.Fraction")). [`PyNumber_Check()`](https://docs.python.org/3/c-api/number.html#c.PyNumber_Check "PyNumber_Check") will now return `1` for objects implementing `__index__()`. [`PyNumber_Long()`](https://docs.python.org/3/c-api/number.html#c.PyNumber_Long "PyNumber_Long"), [`PyNumber_Float()`](https://docs.python.org/3/c-api/number.html#c.PyNumber_Float "PyNumber_Float") and [`PyFloat_AsDouble()`](https://docs.python.org/3/c-api/float.html#c.PyFloat_AsDouble "PyFloat_AsDouble") also now use the `__index__()` method if available. (Contributed by Serhiy Storchaka in [bpo-36048](https://bugs.python.org/issue?@action=redirect&bpo=36048) and [bpo-20092](https://bugs.python.org/issue?@action=redirect&bpo=20092).)
  * Heap-allocated type objects will now increase their reference count in [`PyObject_Init()`](https://docs.python.org/3/c-api/allocation.html#c.PyObject_Init "PyObject_Init") (and its parallel macro `PyObject_INIT`) instead of in [`PyType_GenericAlloc()`](https://docs.python.org/3/c-api/type.html#c.PyType_GenericAlloc "PyType_GenericAlloc"). Types that modify instance allocation or deallocation may need to be adjusted. (Contributed by Eddie Elizondo in [bpo-35810](https://bugs.python.org/issue?@action=redirect&bpo=35810).)
  * The new function `PyCode_NewWithPosOnlyArgs()` allows to create code objects like `PyCode_New()`, but with an extra _posonlyargcount_ parameter for indicating the number of positional-only arguments. (Contributed by Pablo Galindo in [bpo-37221](https://bugs.python.org/issue?@action=redirect&bpo=37221).)
  * `Py_SetPath()` now sets [`sys.executable`](https://docs.python.org/3/library/sys.html#sys.executable "sys.executable") to the program full path ([`Py_GetProgramFullPath()`](https://docs.python.org/3/c-api/init.html#c.Py_GetProgramFullPath "Py_GetProgramFullPath")) rather than to the program name ([`Py_GetProgramName()`](https://docs.python.org/3/c-api/init.html#c.Py_GetProgramName "Py_GetProgramName")). (Contributed by Victor Stinner in [bpo-38234](https://bugs.python.org/issue?@action=redirect&bpo=38234).)