Title: IPv4Interface Network and Representation Methods
URL: https://docs.python.org/3/library/ipaddress.html
Summary: This section describes methods of the `IPv4Interface` class, including `network`, which returns the network associated with the interface, `with_prefixlen`, which gives a string representation with the mask in prefix notation, and `with_netmask`, which provides a string representation using the network as a net mask.
---

```


network[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Interface.network "Link to this definition")
    
The network ([`IPv4Network`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network "ipaddress.IPv4Network")) this interface belongs to.
>>>```
>>> interface = IPv4Interface('192.0.2.5/24')
>>> interface.network
IPv4Network('192.0.2.0/24')

```


with_prefixlen[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Interface.with_prefixlen "Link to this definition")
    
A string representation of the interface with the mask in prefix notation.
>>>```
>>> interface = IPv4Interface('192.0.2.5/24')
>>> interface.with_prefixlen
'192.0.2.5/24'

```


with_netmask[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Interface.with_netmask "Link to this definition")
    
A string representation of the interface with the network as a net mask.
>>>```
>>> interface = IPv4Interface('192.0.2.5/24')
>>> interface.with_netmask
'192.0.2.5/255.255.255.0'

```


with_hostmask[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Interface.with_hostmask "Link to this definition")
    
A string representation of the interface with the network as a host mask.
>>>```
>>> interface = IPv4Interface('192.0.2.5/24')
>>> interface.with_hostmask
'192.0.2.5/0.0.0.255'

```


_class_ ipaddress.IPv6Interface(_address_)[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Interface "Link to this definition")
    
Construct an IPv6 interface. The meaning of _address_ is as in the constructor of [`IPv6Network`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Network "ipaddress.IPv6Network"), except that arbitrary host addresses are always accepted.
[`IPv6Interface`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Interface "ipaddress.IPv6Interface") is a subclass of [`IPv6Address`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Address "ipaddress.IPv6Address"), so it inherits all the attributes from that class. In addition, the following attributes are available: 

ip[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Interface.ip "Link to this definition")


network[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Interface.network "Link to this definition")


with_prefixlen[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Interface.with_prefixlen "Link to this definition")


with_netmask[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Interface.with_netmask "Link to this definition")


with_hostmask[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Interface.with_hostmask "Link to this definition")
    
Refer to the corresponding attribute documentation in [`IPv4Interface`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Interface "ipaddress.IPv4Interface").
### Operators[¶](https://docs.python.org/3/library/ipaddress.html#id2 "Link to this heading")
Interface objects support some operators. Unless stated otherwise, operators can only be applied between compatible objects (i.e. IPv4 with IPv4, IPv6 with IPv6).
#### Logical operators[¶](https://docs.python.org/3/library/ipaddress.html#id3 "Link to this heading")
Interface objects can be compared with the usual set of logical operators.
For equality comparison (`==` and `!=`), both the IP address and network must be the same for the objects to be equal. An interface will not compare equal to any address or network object.
For ordering (`<`, `>`, etc) the rules are different. Interface and address objects with the same IP version can be compared, and the address objects will always sort before the interface objects. Two interface objects are first compared by their networks and, if those are the same, then by their IP addresses.
## Other Module Level Functions[¶](https://docs.python.org/3/library/ipaddress.html#other-module-level-functions "Link to this heading")
The module also provides the following module level functions: 

ipaddress.v4_int_to_packed(_address_)[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.v4_int_to_packed "Link to this definition")
    
Represent an address as 4 packed bytes in network (big-endian) order. _address_ is an integer representation of an IPv4 IP address. A [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised if the integer is negative or too large to be an IPv4 IP address.
>>>```
>>> ipaddress.ip_address(3221225985)
IPv4Address('192.0.2.1')
>>> ipaddress.v4_int_to_packed(3221225985)
b'\xc0\x00\x02\x01'