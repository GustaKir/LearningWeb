Title: MemoryError and NameError Exceptions in Python
URL: https://docs.python.org/3/library/exceptions.html
Summary: This chunk details two specific exceptions in Python: MemoryError, which is raised when an operation runs out of memory but recovery may be possible, and NameError, which occurs when a local or global name cannot be found. Each exception includes information on how the associated values and messages can aid in debugging.
---

_exception_ MemoryError[¶](https://docs.python.org/3/library/exceptions.html#MemoryError "Link to this definition")
    
Raised when an operation runs out of memory but the situation may still be rescued (by deleting some objects). The associated value is a string indicating what kind of (internal) operation ran out of memory. Note that because of the underlying memory management architecture (C’s `malloc()` function), the interpreter may not always be able to completely recover from this situation; it nevertheless raises an exception so that a stack traceback can be printed, in case a run-away program was the cause. 

_exception_ NameError[¶](https://docs.python.org/3/library/exceptions.html#NameError "Link to this definition")
    
Raised when a local or global name is not found. This applies only to unqualified names. The associated value is an error message that includes the name that could not be found.
The `name` attribute can be set using a keyword-only argument to the constructor. When set it represent the name of the variable that was attempted to be accessed.
Changed in version 3.10: Added the `name` attribute. 

_exception_ NotImplementedError[¶](https://docs.python.org/3/library/exceptions.html#NotImplementedError "Link to this definition")
    
This exception is derived from [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError"). In user defined base classes, abstract methods should raise this exception when they require derived classes to override the method, or while the class is being developed to indicate that the real implementation still needs to be added.
Note
It should not be used to indicate that an operator or method is not meant to be supported at all – in that case either leave the operator / method undefined or, if a subclass, set it to [`None`](https://docs.python.org/3/library/constants.html#None "None").
Caution
`NotImplementedError` and `NotImplemented` are not interchangeable. This exception should only be used as described above; see [`NotImplemented`](https://docs.python.org/3/library/constants.html#NotImplemented "NotImplemented") for details on correct usage of the built-in constant. 

_exception_ OSError([_arg_])[¶](https://docs.python.org/3/library/exceptions.html#OSError "Link to this definition")


_exception_ OSError(_errno_ , _strerror_[, _filename_[, _winerror_[, _filename2_]]])
    
This exception is raised when a system function returns a system-related error, including I/O failures such as “file not found” or “disk full” (not for illegal argument types or other incidental errors).
The second form of the constructor sets the corresponding attributes, described below. The attributes default to [`None`](https://docs.python.org/3/library/constants.html#None "None") if not specified. For backwards compatibility, if three arguments are passed, the [`args`](https://docs.python.org/3/library/exceptions.html#BaseException.args "BaseException.args") attribute contains only a 2-tuple of the first two constructor arguments.
The constructor often actually returns a subclass of [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError"), as described in [OS exceptions](https://docs.python.org/3/library/exceptions.html#os-exceptions) below. The particular subclass depends on the final [`errno`](https://docs.python.org/3/library/exceptions.html#OSError.errno "OSError.errno") value. This behaviour only occurs when constructing [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") directly or via an alias, and is not inherited when subclassing. 

errno[¶](https://docs.python.org/3/library/exceptions.html#OSError.errno "Link to this definition")
    
A numeric error code from the C variable `errno`. 

winerror[¶](https://docs.python.org/3/library/exceptions.html#OSError.winerror "Link to this definition")
    
Under Windows, this gives you the native Windows error code. The [`errno`](https://docs.python.org/3/library/exceptions.html#OSError.errno "OSError.errno") attribute is then an approximate translation, in POSIX terms, of that native error code.
Under Windows, if the _winerror_ constructor argument is an integer, the [`errno`](https://docs.python.org/3/library/exceptions.html#OSError.errno "OSError.errno") attribute is determined from the Windows error code, and the _errno_ argument is ignored. On other platforms, the _winerror_ argument is ignored, and the [`winerror`](https://docs.python.org/3/library/exceptions.html#OSError.winerror "OSError.winerror") attribute does not exist. 

strerror[¶](https://docs.python.org/3/library/exceptions.html#OSError.strerror "Link to this definition")
    
The corresponding error message, as provided by the operating system. It is formatted by the C functions `perror()` under POSIX, and `FormatMessage()` under Windows. 

filename[¶](https://docs.python.org/3/library/exceptions.html#OSError.filename "Link to this definition")