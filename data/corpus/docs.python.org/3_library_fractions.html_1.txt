Title: Fraction Constructor in Python
URL: https://docs.python.org/3/library/fractions.html
Summary: The Fraction constructor in Python accepts both integers and strings, where strings can represent fractions, floating-point numbers, and can include optional signs and whitespace. Examples demonstrate various ways to create Fraction objects, including handling of signs and decimal representations.
---

```

where the optional `sign` may be either ‘+’ or ‘-’ and `numerator` and `denominator` (if present) are strings of decimal digits (underscores may be used to delimit digits as with integral literals in code). In addition, any string that represents a finite value and is accepted by the [`float`](https://docs.python.org/3/library/functions.html#float "float") constructor is also accepted by the [`Fraction`](https://docs.python.org/3/library/fractions.html#fractions.Fraction "fractions.Fraction") constructor. In either form the input string may also have leading and/or trailing whitespace. Here are some examples:
>>>```
>>> fromfractionsimport Fraction
>>> Fraction(16, -10)
Fraction(-8, 5)
>>> Fraction(123)
Fraction(123, 1)
>>> Fraction()
Fraction(0, 1)
>>> Fraction('3/7')
Fraction(3, 7)
>>> Fraction(' -3/7 ')
Fraction(-3, 7)
>>> Fraction('1.414213 \t\n')
Fraction(1414213, 1000000)
>>> Fraction('-.125')
Fraction(-1, 8)
>>> Fraction('7e-6')
Fraction(7, 1000000)
>>> Fraction(2.25)
Fraction(9, 4)
>>> Fraction(1.1)
Fraction(2476979795053773, 2251799813685248)
>>> fromdecimalimport Decimal
>>> Fraction(Decimal('1.1'))
Fraction(11, 10)

```

The [`Fraction`](https://docs.python.org/3/library/fractions.html#fractions.Fraction "fractions.Fraction") class inherits from the abstract base class [`numbers.Rational`](https://docs.python.org/3/library/numbers.html#numbers.Rational "numbers.Rational"), and implements all of the methods and operations from that class. [`Fraction`](https://docs.python.org/3/library/fractions.html#fractions.Fraction "fractions.Fraction") instances are [hashable](https://docs.python.org/3/glossary.html#term-hashable), and should be treated as immutable. In addition, [`Fraction`](https://docs.python.org/3/library/fractions.html#fractions.Fraction "fractions.Fraction") has the following properties and methods:
Changed in version 3.2: The [`Fraction`](https://docs.python.org/3/library/fractions.html#fractions.Fraction "fractions.Fraction") constructor now accepts [`float`](https://docs.python.org/3/library/functions.html#float "float") and [`decimal.Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal") instances.
Changed in version 3.9: The [`math.gcd()`](https://docs.python.org/3/library/math.html#math.gcd "math.gcd") function is now used to normalize the _numerator_ and _denominator_. [`math.gcd()`](https://docs.python.org/3/library/math.html#math.gcd "math.gcd") always returns an [`int`](https://docs.python.org/3/library/functions.html#int "int") type. Previously, the GCD type depended on _numerator_ and _denominator_.
Changed in version 3.11: Underscores are now permitted when creating a [`Fraction`](https://docs.python.org/3/library/fractions.html#fractions.Fraction "fractions.Fraction") instance from a string, following [**PEP 515**](https://peps.python.org/pep-0515/) rules.
Changed in version 3.11: [`Fraction`](https://docs.python.org/3/library/fractions.html#fractions.Fraction "fractions.Fraction") implements `__int__` now to satisfy `typing.SupportsInt` instance checks.
Changed in version 3.12: Space is allowed around the slash for string inputs: `Fraction('2 / 3')`.
Changed in version 3.12: [`Fraction`](https://docs.python.org/3/library/fractions.html#fractions.Fraction "fractions.Fraction") instances now support float-style formatting, with presentation types `"e"`, `"E"`, `"f"`, `"F"`, `"g"`, `"G"` and `"%""`.
Changed in version 3.13: Formatting of [`Fraction`](https://docs.python.org/3/library/fractions.html#fractions.Fraction "fractions.Fraction") instances without a presentation type now supports fill, alignment, sign handling, minimum width and grouping. 

numerator[¶](https://docs.python.org/3/library/fractions.html#fractions.Fraction.numerator "Link to this definition")
    
Numerator of the Fraction in lowest term. 

denominator[¶](https://docs.python.org/3/library/fractions.html#fractions.Fraction.denominator "Link to this definition")
    
Denominator of the Fraction in lowest term. 

as_integer_ratio()[¶](https://docs.python.org/3/library/fractions.html#fractions.Fraction.as_integer_ratio "Link to this definition")
    
Return a tuple of two integers, whose ratio is equal to the original Fraction. The ratio is in lowest terms and has a positive denominator.
Added in version 3.8. 

is_integer()[¶](https://docs.python.org/3/library/fractions.html#fractions.Fraction.is_integer "Link to this definition")
    
Return `True` if the Fraction is an integer.
Added in version 3.12.