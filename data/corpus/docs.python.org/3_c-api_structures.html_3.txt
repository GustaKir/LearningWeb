Title: Initialization Macros for PyObject and PyVarObject
URL: https://docs.python.org/3/c-api/structures.html
Summary: The document discusses macros for initializing PyObject and PyVarObject types in Python's C API. It describes PyObject_HEAD_INIT for PyObject initialization and PyVarObject_HEAD_INIT for PyVarObject, which include critical fields such as ob_size.
---

PyObject_HEAD_INIT(type)[¶](https://docs.python.org/3/c-api/structures.html#c.PyObject_HEAD_INIT "Link to this definition")
    
This is a macro which expands to initialization values for a new [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject") type. This macro expands to:
```
_PyObject_EXTRA_INIT
1,type,

```


PyVarObject_HEAD_INIT(type, size)[¶](https://docs.python.org/3/c-api/structures.html#c.PyVarObject_HEAD_INIT "Link to this definition")
    
This is a macro which expands to initialization values for a new [`PyVarObject`](https://docs.python.org/3/c-api/structures.html#c.PyVarObject "PyVarObject") type, including the [`ob_size`](https://docs.python.org/3/c-api/typeobj.html#c.PyVarObject.ob_size "PyVarObject.ob_size") field. This macro expands to:
```
_PyObject_EXTRA_INIT
1,type,size,

```

## Implementing functions and methods[¶](https://docs.python.org/3/c-api/structures.html#implementing-functions-and-methods "Link to this heading") 

typePyCFunction[¶](https://docs.python.org/3/c-api/structures.html#c.PyCFunction "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Type of the functions used to implement most Python callables in C. Functions of this type take two [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")* parameters and return one such value. If the return value is `NULL`, an exception shall have been set. If not `NULL`, the return value is interpreted as the return value of the function as exposed in Python. The function must return a new reference.
The function signature is:
```
PyObject*PyCFunction(PyObject*self,
PyObject*args);

```


typePyCFunctionWithKeywords[¶](https://docs.python.org/3/c-api/structures.html#c.PyCFunctionWithKeywords "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Type of the functions used to implement Python callables in C with signature [METH_VARARGS | METH_KEYWORDS](https://docs.python.org/3/c-api/structures.html#meth-varargs-meth-keywords). The function signature is:
```
PyObject*PyCFunctionWithKeywords(PyObject*self,
PyObject*args,
PyObject*kwargs);

```


typePyCFunctionFast[¶](https://docs.python.org/3/c-api/structures.html#c.PyCFunctionFast "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.13._
Type of the functions used to implement Python callables in C with signature [`METH_FASTCALL`](https://docs.python.org/3/c-api/structures.html#c.METH_FASTCALL "METH_FASTCALL"). The function signature is:
```
PyObject*PyCFunctionFast(PyObject*self,
PyObject*const*args,
Py_ssize_tnargs);

```


typePyCFunctionFastWithKeywords[¶](https://docs.python.org/3/c-api/structures.html#c.PyCFunctionFastWithKeywords "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.13._
Type of the functions used to implement Python callables in C with signature [METH_FASTCALL | METH_KEYWORDS](https://docs.python.org/3/c-api/structures.html#meth-fastcall-meth-keywords). The function signature is:
```
PyObject*PyCFunctionFastWithKeywords(PyObject*self,
PyObject*const*args,
Py_ssize_tnargs,
PyObject*kwnames);

```


typePyCMethod[¶](https://docs.python.org/3/c-api/structures.html#c.PyCMethod "Link to this definition")
    
Type of the functions used to implement Python callables in C with signature [METH_METHOD | METH_FASTCALL | METH_KEYWORDS](https://docs.python.org/3/c-api/structures.html#meth-method-meth-fastcall-meth-keywords). The function signature is:
```
PyObject*PyCMethod(PyObject*self,
PyTypeObject*defining_class,
PyObject*const*args,
Py_ssize_tnargs,
PyObject*kwnames)