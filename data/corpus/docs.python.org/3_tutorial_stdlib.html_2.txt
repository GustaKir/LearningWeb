Title: Internet Access in Python
URL: https://docs.python.org/3/tutorial/stdlib.html
Summary: This section discusses Python's modules for internet access, highlighting `urllib.request` for retrieving data from URLs and `smtplib` for sending emails. An example demonstrates how to fetch and decode data from a URL using `urllib.request`.
---

```

The SciPy project <<https://scipy.org>> has many other modules for numerical computations.
## 10.7. Internet Access[¶](https://docs.python.org/3/tutorial/stdlib.html#internet-access "Link to this heading")
There are a number of modules for accessing the internet and processing internet protocols. Two of the simplest are [`urllib.request`](https://docs.python.org/3/library/urllib.request.html#module-urllib.request "urllib.request: Extensible library for opening URLs.") for retrieving data from URLs and [`smtplib`](https://docs.python.org/3/library/smtplib.html#module-smtplib "smtplib: SMTP protocol client \(requires sockets\).") for sending mail:
>>>```
>>> fromurllib.requestimport urlopen
>>> with urlopen('http://worldtimeapi.org/api/timezone/etc/UTC.txt') as response:
...   for line in response:
...     line = line.decode()       # Convert bytes to a str
...     if line.startswith('datetime'):
...       print(line.rstrip())     # Remove trailing newline
...
datetime: 2022-01-01T01:36:47.689215+00:00
>>> importsmtplib
>>> server = smtplib.SMTP('localhost')
>>> server.sendmail('soothsayer@example.org', 'jcaesar@example.org',
... """To: jcaesar@example.org
... From: soothsayer@example.org
...
... Beware the Ides of March.
... """)
>>> server.quit()

```

(Note that the second example needs a mailserver running on localhost.)
## 10.8. Dates and Times[¶](https://docs.python.org/3/tutorial/stdlib.html#dates-and-times "Link to this heading")
The [`datetime`](https://docs.python.org/3/library/datetime.html#module-datetime "datetime: Basic date and time types.") module supplies classes for manipulating dates and times in both simple and complex ways. While date and time arithmetic is supported, the focus of the implementation is on efficient member extraction for output formatting and manipulation. The module also supports objects that are timezone aware.
>>>```
>>> # dates are easily constructed and formatted
>>> fromdatetimeimport date
>>> now = date.today()
>>> now
datetime.date(2003, 12, 2)
>>> now.strftime("%m-%d-%y. %d %b %Y is a %A on the %d day of %B.")
'12-02-03. 02 Dec 2003 is a Tuesday on the 02 day of December.'
>>> # dates support calendar arithmetic
>>> birthday = date(1964, 7, 31)
>>> age = now - birthday
>>> age.days
14368

```

## 10.9. Data Compression[¶](https://docs.python.org/3/tutorial/stdlib.html#data-compression "Link to this heading")
Common data archiving and compression formats are directly supported by modules including: [`zlib`](https://docs.python.org/3/library/zlib.html#module-zlib "zlib: Low-level interface to compression and decompression routines compatible with gzip."), [`gzip`](https://docs.python.org/3/library/gzip.html#module-gzip "gzip: Interfaces for gzip compression and decompression using file objects."), [`bz2`](https://docs.python.org/3/library/bz2.html#module-bz2 "bz2: Interfaces for bzip2 compression and decompression."), [`lzma`](https://docs.python.org/3/library/lzma.html#module-lzma "lzma: A Python wrapper for the liblzma compression library."), [`zipfile`](https://docs.python.org/3/library/zipfile.html#module-zipfile "zipfile: Read and write ZIP-format archive files.") and [`tarfile`](https://docs.python.org/3/library/tarfile.html#module-tarfile "tarfile: Read and write tar-format archive files.").
>>>```
>>> importzlib
>>> s = b'witch which has which witches wrist watch'
>>> len(s)
41
>>> t = zlib.compress(s)
>>> len(t)
37
>>> zlib.decompress(t)
b'witch which has which witches wrist watch'
>>> zlib.crc32(s)
226805979

```

## 10.10. Performance Measurement[¶](https://docs.python.org/3/tutorial/stdlib.html#performance-measurement "Link to this heading")
Some Python users develop a deep interest in knowing the relative performance of different approaches to the same problem. Python provides a measurement tool that answers those questions immediately.
For example, it may be tempting to use the tuple packing and unpacking feature instead of the traditional approach to swapping arguments. The [`timeit`](https://docs.python.org/3/library/timeit.html#module-timeit "timeit: Measure the execution time of small code snippets.") module quickly demonstrates a modest performance advantage:
>>>```
>>> fromtimeitimport Timer
>>> Timer('t=a; a=b; b=t', 'a=1; b=2').timeit()
0.57535828626024577
>>> Timer('a,b = b,a', 'a=1; b=2').timeit()
0.54962537085770791