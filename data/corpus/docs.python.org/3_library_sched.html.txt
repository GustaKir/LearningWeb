Title: Event Scheduler in Python
URL: https://docs.python.org/3/library/sched.html
Summary: This section introduces the Python library's `sched` module, which provides classes and functions for scheduling events. It connects to previous and following topics on subprocess management and synchronized queues, respectively.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [`sched` — Event scheduler](https://docs.python.org/3/library/sched.html)
    * [Scheduler Objects](https://docs.python.org/3/library/sched.html#scheduler-objects)


#### Previous topic
[`subprocess` — Subprocess management](https://docs.python.org/3/library/subprocess.html "previous chapter")
#### Next topic
[`queue` — A synchronized queue class](https://docs.python.org/3/library/queue.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/sched.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/queue.html "queue — A synchronized queue class") |
  * [previous](https://docs.python.org/3/library/subprocess.html "subprocess — Subprocess management") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Concurrent Execution](https://docs.python.org/3/library/concurrency.html) »
  * [`sched` — Event scheduler](https://docs.python.org/3/library/sched.html)
  * | 
  * Theme  Auto Light Dark |


# `sched` — Event scheduler[¶](https://docs.python.org/3/library/sched.html#module-sched "Link to this heading")
**Source code:** [Lib/sched.py](https://github.com/python/cpython/tree/3.13/Lib/sched.py)
The [`sched`](https://docs.python.org/3/library/sched.html#module-sched "sched: General purpose event scheduler.") module defines a class which implements a general purpose event scheduler: 

_class_ sched.scheduler(_timefunc =time.monotonic_, _delayfunc =time.sleep_)[¶](https://docs.python.org/3/library/sched.html#sched.scheduler "Link to this definition")
    
The [`scheduler`](https://docs.python.org/3/library/sched.html#sched.scheduler "sched.scheduler") class defines a generic interface to scheduling events. It needs two functions to actually deal with the “outside world” — _timefunc_ should be callable without arguments, and return a number (the “time”, in any units whatsoever). The _delayfunc_ function should be callable with one argument, compatible with the output of _timefunc_ , and should delay that many time units. _delayfunc_ will also be called with the argument `0` after each event is run to allow other threads an opportunity to run in multi-threaded applications.
Changed in version 3.3: _timefunc_ and _delayfunc_ parameters are optional.
Changed in version 3.3: [`scheduler`](https://docs.python.org/3/library/sched.html#sched.scheduler "sched.scheduler") class can be safely used in multi-threaded environments.
Example:
>>>```
>>> importsched,time
>>> s = sched.scheduler(time.time, time.sleep)
>>> defprint_time(a='default'):
...   print("From print_time", time.time(), a)
...
>>> defprint_some_times():
...   print(time.time())
...   s.enter(10, 1, print_time)
...   s.enter(5, 2, print_time, argument=('positional',))
...   # despite having higher priority, 'keyword' runs after 'positional' as enter() is relative
...   s.enter(5, 1, print_time, kwargs={'a': 'keyword'})
...   s.enterabs(1_650_000_000, 10, print_time, argument=("first enterabs",))
...   s.enterabs(1_650_000_000, 5, print_time, argument=("second enterabs",))
...   s.run()
...   print(time.time())
...
>>> print_some_times()
1652342830.3640375
From print_time 1652342830.3642538 second enterabs
From print_time 1652342830.3643398 first enterabs
From print_time 1652342835.3694863 positional
From print_time 1652342835.3696074 keyword
From print_time 1652342840.369612 default
1652342840.3697174