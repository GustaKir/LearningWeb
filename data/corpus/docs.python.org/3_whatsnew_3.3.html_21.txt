Title: Python 3.3 Release Notes: IMAP and Inspect Modules Updates
URL: https://docs.python.org/3/whatsnew/3.3.html
Summary: The IMAP4_SSL constructor in the imaplib module now accepts an SSLContext parameter for enhanced secure channel settings. Additionally, a new getclosurevars() function has been introduced in the inspect module, which provides insights into the current bindings of names in a function's closure, aiding in testing correctness related to state.
---

ti in [bpo-11113](https://bugs.python.org/issue?@action=redirect&bpo=11113) and [bpo-15156](https://bugs.python.org/issue?@action=redirect&bpo=15156).)
### imaplib[¶](https://docs.python.org/3/whatsnew/3.3.html#imaplib "Link to this heading")
The [`IMAP4_SSL`](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4_SSL "imaplib.IMAP4_SSL") constructor now accepts an SSLContext parameter to control parameters of the secure channel.
(Contributed by Sijin Joseph in [bpo-8808](https://bugs.python.org/issue?@action=redirect&bpo=8808).)
### inspect[¶](https://docs.python.org/3/whatsnew/3.3.html#inspect "Link to this heading")
A new [`getclosurevars()`](https://docs.python.org/3/library/inspect.html#inspect.getclosurevars "inspect.getclosurevars") function has been added. This function reports the current binding of all names referenced from the function body and where those names were resolved, making it easier to verify correct internal state when testing code that relies on stateful closures.
(Contributed by Meador Inge and Nick Coghlan in [bpo-13062](https://bugs.python.org/issue?@action=redirect&bpo=13062).)
A new [`getgeneratorlocals()`](https://docs.python.org/3/library/inspect.html#inspect.getgeneratorlocals "inspect.getgeneratorlocals") function has been added. This function reports the current binding of local variables in the generator’s stack frame, making it easier to verify correct internal state when testing generators.
(Contributed by Meador Inge in [bpo-15153](https://bugs.python.org/issue?@action=redirect&bpo=15153).)
### io[¶](https://docs.python.org/3/whatsnew/3.3.html#io "Link to this heading")
The [`open()`](https://docs.python.org/3/library/io.html#io.open "io.open") function has a new `'x'` mode that can be used to exclusively create a new file, and raise a [`FileExistsError`](https://docs.python.org/3/library/exceptions.html#FileExistsError "FileExistsError") if the file already exists. It is based on the C11 ‘x’ mode to fopen().
(Contributed by David Townshend in [bpo-12760](https://bugs.python.org/issue?@action=redirect&bpo=12760).)
The constructor of the [`TextIOWrapper`](https://docs.python.org/3/library/io.html#io.TextIOWrapper "io.TextIOWrapper") class has a new _write_through_ optional argument. If _write_through_ is `True`, calls to `write()` are guaranteed not to be buffered: any data written on the [`TextIOWrapper`](https://docs.python.org/3/library/io.html#io.TextIOWrapper "io.TextIOWrapper") object is immediately handled to its underlying binary buffer.
### itertools[¶](https://docs.python.org/3/whatsnew/3.3.html#itertools "Link to this heading")
[`accumulate()`](https://docs.python.org/3/library/itertools.html#itertools.accumulate "itertools.accumulate") now takes an optional `func` argument for providing a user-supplied binary function.
### logging[¶](https://docs.python.org/3/whatsnew/3.3.html#logging "Link to this heading")
The [`basicConfig()`](https://docs.python.org/3/library/logging.html#logging.basicConfig "logging.basicConfig") function now supports an optional `handlers` argument taking an iterable of handlers to be added to the root logger.
A class level attribute `append_nul` has been added to [`SysLogHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.SysLogHandler "logging.handlers.SysLogHandler") to allow control of the appending of the `NUL` (`\000`) byte to syslog records, since for some daemons it is required while for others it is passed through to the log.
### math[¶](https://docs.python.org/3/whatsnew/3.3.html#math "Link to this heading")
The [`math`](https://docs.python.org/3/library/math.html#module-math "math: Mathematical functions \(sin\(\) etc.\).") module has a new function, [`log2()`](https://docs.python.org/3/library/math.html#math.log2 "math.log2"), which returns the base-2 logarithm of _x_.
(Written by Mark Dickinson in [bpo-11888](https://bugs.python.org/issue?@action=redirect&bpo=11888).)
### mmap[¶](https://docs.python.org/3/whatsnew/3.3.html#mmap "Link to this heading")
The [`read()`](https://docs.python.org/3/library/mmap.html#mmap.mmap.read "mmap.mmap.read") method is now more compatible with other file-like objects: if the argument is omitted or specified as `None`, it returns the bytes from the current file position to the end of the mapping. (Contributed by Petri Lehtinen in [bpo-12021](https://bugs.python.org/issue?@action=redirect&bpo=12021).)
### multiprocessing[¶](https://docs.python.org/3/whatsnew/3.3.html#multiprocessing "Link to this heading")
The new [`multiprocessing.connection.wait()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.connection.wait "multiprocessing.connection.wait") function allows polling multiple objects (such as connections, sockets and pipes) with a timeout.