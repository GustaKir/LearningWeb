Title: ctypes._CFuncPtr - Base Class for C Callable Functions
URL: https://docs.python.org/3/library/ctypes.html
Summary: The _CFuncPtr class in the ctypes library serves as a base for C callable foreign functions, allowing instances to represent C function pointers. The result type can be specified using the 'restype' attribute, which can accept ctypes types or a callable Python object (deprecated). For better error handling, it's recommended to use ctypes data types for 'restype'.
---

```


_class_ ctypes._CFuncPtr[¶](https://docs.python.org/3/library/ctypes.html#ctypes._CFuncPtr "Link to this definition")
    
Base class for C callable foreign functions.
Instances of foreign functions are also C compatible data types; they represent C function pointers.
This behavior can be customized by assigning to special attributes of the foreign function object. 

restype[¶](https://docs.python.org/3/library/ctypes.html#ctypes._CFuncPtr.restype "Link to this definition")
    
Assign a ctypes type to specify the result type of the foreign function. Use `None` for void, a function not returning anything.
It is possible to assign a callable Python object that is not a ctypes type, in this case the function is assumed to return a C int, and the callable will be called with this integer, allowing further processing or error checking. Using this is deprecated, for more flexible post processing or error checking use a ctypes data type as `restype` and assign a callable to the [`errcheck`](https://docs.python.org/3/library/ctypes.html#ctypes._CFuncPtr.errcheck "ctypes._CFuncPtr.errcheck") attribute. 

argtypes[¶](https://docs.python.org/3/library/ctypes.html#ctypes._CFuncPtr.argtypes "Link to this definition")
    
Assign a tuple of ctypes types to specify the argument types that the function accepts. Functions using the `stdcall` calling convention can only be called with the same number of arguments as the length of this tuple; functions using the C calling convention accept additional, unspecified arguments as well.
When a foreign function is called, each actual argument is passed to the [`from_param()`](https://docs.python.org/3/library/ctypes.html#ctypes._CData.from_param "ctypes._CData.from_param") class method of the items in the [`argtypes`](https://docs.python.org/3/library/ctypes.html#ctypes._CFuncPtr.argtypes "ctypes._CFuncPtr.argtypes") tuple, this method allows adapting the actual argument to an object that the foreign function accepts. For example, a [`c_char_p`](https://docs.python.org/3/library/ctypes.html#ctypes.c_char_p "ctypes.c_char_p") item in the [`argtypes`](https://docs.python.org/3/library/ctypes.html#ctypes._CFuncPtr.argtypes "ctypes._CFuncPtr.argtypes") tuple will convert a string passed as argument into a bytes object using ctypes conversion rules.
New: It is now possible to put items in argtypes which are not ctypes types, but each item must have a [`from_param()`](https://docs.python.org/3/library/ctypes.html#ctypes._CData.from_param "ctypes._CData.from_param") method which returns a value usable as argument (integer, string, ctypes instance). This allows defining adapters that can adapt custom objects as function parameters. 

errcheck[¶](https://docs.python.org/3/library/ctypes.html#ctypes._CFuncPtr.errcheck "Link to this definition")
    
Assign a Python function or another callable to this attribute. The callable will be called with three or more arguments: 

callable(_result_ , _func_ , _arguments_)
    
_result_ is what the foreign function returns, as specified by the `restype` attribute.
_func_ is the foreign function object itself, this allows reusing the same callable object to check or post process the results of several functions.
_arguments_ is a tuple containing the parameters originally passed to the function call, this allows specializing the behavior on the arguments used.
The object that this function returns will be returned from the foreign function call, but it can also check the result value and raise an exception if the foreign function call failed. 

_exception_ ctypes.ArgumentError[¶](https://docs.python.org/3/library/ctypes.html#ctypes.ArgumentError "Link to this definition")
    
This exception is raised when a foreign function call cannot convert one of the passed arguments.
On Windows, when a foreign function call raises a system exception (for example, due to an access violation), it will be captured and replaced with a suitable Python exception. Further, an auditing event `ctypes.set_exception` with argument `code` will be raised, allowing an audit hook to replace the exception with its own.
Some ways to invoke foreign function calls may raise an auditing event `ctypes.call_function` with arguments `function pointer` and `arguments`.
### Function prototypes[¶](https://docs.python.org/3/library/ctypes.html#function-prototypes "Link to this heading")
Foreign functions can also be created by instantiating function prototypes. Function prototypes are similar to function prototypes in C; they describe a function (return type, argument types, calling convention) without defining an implementation. The factory functions must be called with the desired result type and the argument types of the function, and can be used as decorator factories, and as such, be applied to functions through the `@wrapper` syntax. See [Callback functions](https://docs.python.org/3/library/ctypes.html#ctypes-callback-functions) for examples.