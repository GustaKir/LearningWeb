Title: Python 3 Changelog - New Features and Bug Fixes
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section outlines recent improvements and bug fixes in Python 3, including support for additional encodings (koi8_t and kz1048), enhancements to BufferedReader methods, SMTP and IMAP support for new RFCs, and optimizations for heapq.heapify() for better performance.
---

t&bpo=22681): Added support for the koi8_t encoding.
  * [bpo-22682](https://bugs.python.org/issue?@action=redirect&bpo=22682): Added support for the kz1048 encoding.
  * [bpo-23796](https://bugs.python.org/issue?@action=redirect&bpo=23796): peek and read1 methods of BufferedReader now raise ValueError if they called on a closed object. Patch by John Hergenroeder.
  * [bpo-21795](https://bugs.python.org/issue?@action=redirect&bpo=21795): smtpd now supports the 8BITMIME extension whenever the new _decode_data_ constructor argument is set to False.
  * [bpo-24155](https://bugs.python.org/issue?@action=redirect&bpo=24155): optimize heapq.heapify() for better cache performance when heapifying large lists.
  * [bpo-21800](https://bugs.python.org/issue?@action=redirect&bpo=21800): imaplib now supports RFC 5161 (enable), RFC 6855 (utf8/internationalized email) and automatically encodes non-ASCII usernames and passwords to UTF8.
  * [bpo-20274](https://bugs.python.org/issue?@action=redirect&bpo=20274): When calling a _sqlite.Connection, it now complains if passed any keyword arguments. Previously it silently ignored them.
  * [bpo-20274](https://bugs.python.org/issue?@action=redirect&bpo=20274): Remove ignored and erroneous “kwargs” parameters from three METH_VARARGS methods on _sqlite.Connection.
  * [bpo-24134](https://bugs.python.org/issue?@action=redirect&bpo=24134): assertRaises(), assertRaisesRegex(), assertWarns() and assertWarnsRegex() checks now emits a deprecation warning when callable is None or keyword arguments except msg is passed in the context manager mode.
  * [bpo-24018](https://bugs.python.org/issue?@action=redirect&bpo=24018): Add a collections.abc.Generator abstract base class. Contributed by Stefan Behnel.
  * [bpo-23880](https://bugs.python.org/issue?@action=redirect&bpo=23880): Tkinter’s getint() and getdouble() now support Tcl_Obj. Tkinter’s getdouble() now supports any numbers (in particular int).
  * [bpo-22619](https://bugs.python.org/issue?@action=redirect&bpo=22619): Added negative limit support in the traceback module. Based on patch by Dmitry Kazakov.
  * [bpo-24094](https://bugs.python.org/issue?@action=redirect&bpo=24094): Fix possible crash in json.encode with poorly behaved dict subclasses.
  * [bpo-9246](https://bugs.python.org/issue?@action=redirect&bpo=9246): On POSIX, os.getcwd() now supports paths longer than 1025 bytes. Patch written by William Orr.
  * [bpo-17445](https://bugs.python.org/issue?@action=redirect&bpo=17445): add difflib.diff_bytes() to support comparison of byte strings (fixes a regression from Python 2).
  * [bpo-23917](https://bugs.python.org/issue?@action=redirect&bpo=23917): Fall back to sequential compilation when ProcessPoolExecutor doesn’t exist. Patch by Claudiu Popa.
  * [bpo-23008](https://bugs.python.org/issue?@action=redirect&bpo=23008): Fixed resolving attributes with boolean value is False in pydoc.
  * Fix asyncio issue 235: LifoQueue and PriorityQueue’s put didn’t increment unfinished tasks (this bug was introduced when JoinableQueue was merged with Queue).
  * [bpo-23908](https://bugs.python.org/issue?@action=redirect&bpo=23908): os functions now reject paths with embedded null character on Windows instead of silently truncating them.
  * [bpo-23728](https://bugs.python.org/issue?@action=redirect&bpo=23728): binascii.crc_hqx() could return an integer outside of the range 0-0xffff for empty data.
  * [bpo-23887](https://bugs.python.org/issue?@action=redirect&bpo=23887): urllib.error.HTTPError now has a proper repr() representation. Patch by Berker Peksag.
  * asyncio: New event loop APIs: set_task_factory() and get_task_factory().
  * asyncio: async() function is deprecated in favour of ensure_future().
  * [bpo-24178](https://bugs.python.org/issue?@action=redirect&bpo=24178): asyncio.Lock, Condition, Semaphore, and BoundedSemaphore support new ‘async with’ syntax. Contributed by Yury Selivanov.
  * [bpo-24179](https://bugs.python.org/issue?@action=redirect&bpo=24179): Support ‘async for’ for asyncio.StreamReader. Contributed by Yury Selivanov.
  * [bpo-24184](https://bugs.python.org/issue?@action=redirect&bpo=24184): Add AsyncIterator and AsyncIterable ABCs to collections.abc. Contributed by Yury Selivanov.
  * [bpo-22547](https://bugs.python.org/issue?@action=redirect&bpo=22547): Implement informative __repr__ for inspect.BoundArguments. Contributed by Yury Selivanov.
  * [bpo-24190](https://bugs.python.org/issue?@action=redirect&bpo=24190): Implement inspect.BoundArgument.apply_defaults() method. Contributed by Yury Selivanov.
  * [bpo-20691](https://bugs.python.org/issue?@action=redirect&bpo=20691): Add ‘follow_wrapped’ argument to inspect.Signature.from_callable() and inspect.signature().