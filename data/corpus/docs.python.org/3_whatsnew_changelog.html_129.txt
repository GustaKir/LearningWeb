Title: Changes in Core and Builtins
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section highlights various bug fixes and improvements in Python's core and built-in features, including fixes for crashes related to `typing.TypeVar`, adjustments to `ceval.eval_breaker`, enhancements in error messaging during argument unpacking, and updates to the `traceback` implementation for error display.
---

### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id131 "Link to this heading")
  * [gh-110782](https://github.com/python/cpython/issues/110782): Fix crash when [`typing.TypeVar`](https://docs.python.org/3/library/typing.html#typing.TypeVar "typing.TypeVar") is constructed with a keyword argument. Patch by Jelle Zijlstra.
  * [gh-110752](https://github.com/python/cpython/issues/110752): Reset `ceval.eval_breaker` in `interpreter_clear()`
  * [gh-110721](https://github.com/python/cpython/issues/110721): Use the [`traceback`](https://docs.python.org/3/library/traceback.html#module-traceback "traceback: Print or retrieve a stack traceback.") implementation for the default `PyErr_Display()` functionality. Patch by Pablo Galindo
  * [gh-110696](https://github.com/python/cpython/issues/110696): Fix incorrect error message for invalid argument unpacking. Patch by Pablo Galindo
  * [gh-104169](https://github.com/python/cpython/issues/104169): Split the tokenizer into two separate directories: - One part includes the actual lexeme producing logic and lives in `Parser/lexer`. - The second part wraps the lexer according to the different tokenization modes we have (string, utf-8, file, interactive, readline) and lives in `Parser/tokenizer`.
  * [gh-110688](https://github.com/python/cpython/issues/110688): Remove undocumented `test_c_api` method from [`set`](https://docs.python.org/3/library/stdtypes.html#set "set"), which was only defined for testing purposes under `Py_DEBUG`. Now we have proper CAPI tests.
  * [gh-104584](https://github.com/python/cpython/issues/104584): Fix a reference leak when running with `PYTHONUOPS` or [`-X uops`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) enabled.
  * [gh-110514](https://github.com/python/cpython/issues/110514): Add `PY_THROW` to [`sys.setprofile()`](https://docs.python.org/3/library/sys.html#sys.setprofile "sys.setprofile") events
  * [gh-110489](https://github.com/python/cpython/issues/110489): Optimise [`math.ceil()`](https://docs.python.org/3/library/math.html#math.ceil "math.ceil") when the input is exactly a float, resulting in about a 10% improvement.
  * [gh-110455](https://github.com/python/cpython/issues/110455): Guard `assert(tstate->thread_id > 0)` with `#ifndef HAVE_PTHREAD_STUBS`. This allows for for pydebug builds to work under WASI which (currently) lacks thread support.
  * [gh-110309](https://github.com/python/cpython/issues/110309): Remove unnecessary empty constant nodes in the ast of f-string specs.
  * [gh-110259](https://github.com/python/cpython/issues/110259): Correctly identify the format spec in f-strings (with single or triple quotes) that have multiple lines in the expression part and include a formatting spec. Patch by Pablo Galindo
  * [gh-110237](https://github.com/python/cpython/issues/110237): Fix missing error checks for calls to `PyList_Append` in `_PyEval_MatchClass`.
  * [gh-110164](https://github.com/python/cpython/issues/110164): regrtest: If the `SOURCE_DATE_EPOCH` environment variable is defined, regrtest now disables tests randomization. Patch by Victor Stinner.
  * [gh-109889](https://github.com/python/cpython/issues/109889): Fix the compiler’s redundant NOP detection algorithm to skip over NOPs with no line number when looking for the next instruction’s lineno.
  * [gh-109853](https://github.com/python/cpython/issues/109853): `sys.path[0]` is now set correctly for subinterpreters.
  * [gh-109923](https://github.com/python/cpython/issues/109923): Set line number on the `POP_TOP` that follows a `RETURN_GENERATOR`.
  * [gh-105716](https://github.com/python/cpython/issues/105716): Subinterpreters now correctly handle the case where they have threads running in the background. Before, such threads would interfere with cleaning up and destroying them, as well as prevent running another script.
  * [gh-109369](https://github.com/python/cpython/issues/109369): The internal eval_breaker and supporting flags, plus the monitoring version have been merged into a single atomic integer to speed up checks.
  * [gh-109823](https://github.com/python/cpython/issues/109823): Fix bug where compiler does not adjust labels when removing an empty basic block which is a jump target.
  * [gh-109793](https://github.com/python/cpython/issues/109793): The main thread no longer exits prematurely when a subinterpreter is cleaned up during runtime finalization. The bug was a problem particularly because, when triggered, the Python process would always return with a 0 exitcode, even if it failed.
  * [gh-109719](https://github.com/python/cpython/issues/109719): Fix missing jump target labels when compiler reorders cold/warm blocks.
  * [gh-109595](https://github.com/python/cpython/issues/109595): Add [`-X cpu_count`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) command line option to override return results of [`os.cpu_count()`](https://docs.python.org/3/library/os.html#os.cpu_count "os.cpu_count") and [`os.pro