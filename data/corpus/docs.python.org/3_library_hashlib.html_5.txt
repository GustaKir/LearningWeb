Title: Key Derivation in hashlib
URL: https://docs.python.org/3/library/hashlib.html
Summary: This section discusses key derivation and key stretching algorithms in the hashlib library for secure password hashing, emphasizing the importance of using tunable, slow functions with salts. It details the `hashlib.pbkdf2_hmac` function, which implements PKCS#5 password-based key derivation using HMAC.
---

```

Added in version 3.11.
Changed in version 3.13.3 (unreleased): Now raises a [`BlockingIOError`](https://docs.python.org/3/library/exceptions.html#BlockingIOError "BlockingIOError") if the file is opened in blocking mode. Previously, spurious null bytes were added to the digest.
## Key derivation[¶](https://docs.python.org/3/library/hashlib.html#key-derivation "Link to this heading")
Key derivation and key stretching algorithms are designed for secure password hashing. Naive algorithms such as `sha1(password)` are not resistant against brute-force attacks. A good password hashing function must be tunable, slow, and include a [salt](https://en.wikipedia.org/wiki/Salt_%28cryptography%29). 

hashlib.pbkdf2_hmac(_hash_name_ , _password_ , _salt_ , _iterations_ , _dklen =None_)[¶](https://docs.python.org/3/library/hashlib.html#hashlib.pbkdf2_hmac "Link to this definition")
    
The function provides PKCS#5 password-based key derivation function 2. It uses HMAC as pseudorandom function.
The string _hash_name_ is the desired name of the hash digest algorithm for HMAC, e.g. ‘sha1’ or ‘sha256’. _password_ and _salt_ are interpreted as buffers of bytes. Applications and libraries should limit _password_ to a sensible length (e.g. 1024). _salt_ should be about 16 or more bytes from a proper source, e.g. [`os.urandom()`](https://docs.python.org/3/library/os.html#os.urandom "os.urandom").
The number of _iterations_ should be chosen based on the hash algorithm and computing power. As of 2022, hundreds of thousands of iterations of SHA-256 are suggested. For rationale as to why and how to choose what is best for your application, read _Appendix A.2.2_ of [NIST-SP-800-132](https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf). The answers on the [stackexchange pbkdf2 iterations question](https://security.stackexchange.com/questions/3959/recommended-of-iterations-when-using-pbkdf2-sha256/) explain in detail.
_dklen_ is the length of the derived key in bytes. If _dklen_ is `None` then the digest size of the hash algorithm _hash_name_ is used, e.g. 64 for SHA-512.
>>>```
>>> fromhashlibimport pbkdf2_hmac
>>> our_app_iters = 500_000 # Application specific, read above.
>>> dk = pbkdf2_hmac('sha256', b'password', b'bad salt' * 2, our_app_iters)
>>> dk.hex()
'15530bba69924174860db778f2c6f8104d3aaf9d26241840c8c4a641c8d000a9'