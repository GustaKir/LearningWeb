Title: __reduce__ Method in Python's Pickle Module
URL: https://docs.python.org/3/library/pickle.html
Summary: The `__reduce__()` method is part of the pickle interface, returning either a string as the object's global variable name or a tuple of 2 to 6 items that describes how to reconstruct the object. If a string is returned, it should reference the object's local name relative to its module. The tuple can include a callable for object creation, followed by additional parameters for reconstruction.
---

object.__reduce__()[¶](https://docs.python.org/3/library/pickle.html#object.__reduce__ "Link to this definition")
    
The interface is currently defined as follows. The [`__reduce__()`](https://docs.python.org/3/library/pickle.html#object.__reduce__ "object.__reduce__") method takes no argument and shall return either a string or preferably a tuple (the returned object is often referred to as the “reduce value”).
If a string is returned, the string should be interpreted as the name of a global variable. It should be the object’s local name relative to its module; the pickle module searches the module namespace to determine the object’s module. This behaviour is typically useful for singletons.
When a tuple is returned, it must be between two and six items long. Optional items can either be omitted, or `None` can be provided as their value. The semantics of each item are in order:
  * A callable object that will be called to create the initial version of the object.
  * A tuple of arguments for the callable object. An empty tuple must be given if the callable does not accept any argument.
  * Optionally, the object’s state, which will be passed to the object’s [`__setstate__()`](https://docs.python.org/3/library/pickle.html#object.__setstate__ "object.__setstate__") method as previously described. If the object has no such method then, the value must be a dictionary and it will be added to the object’s [`__dict__`](https://docs.python.org/3/reference/datamodel.html#object.__dict__ "object.__dict__") attribute.
  * Optionally, an iterator (and not a sequence) yielding successive items. These items will be appended to the object either using `obj.append(item)` or, in batch, using `obj.extend(list_of_items)`. This is primarily used for list subclasses, but may be used by other classes as long as they have [append and extend methods](https://docs.python.org/3/library/stdtypes.html#typesseq-common) with the appropriate signature. (Whether `append()` or `extend()` is used depends on which pickle protocol version is used as well as the number of items to append, so both must be supported.)
  * Optionally, an iterator (not a sequence) yielding successive key-value pairs. These items will be stored to the object using `obj[key] = value`. This is primarily used for dictionary subclasses, but may be used by other classes as long as they implement [`__setitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__setitem__ "object.__setitem__").
  * Optionally, a callable with a `(obj, state)` signature. This callable allows the user to programmatically control the state-updating behavior of a specific object, instead of using `obj`’s static [`__setstate__()`](https://docs.python.org/3/library/pickle.html#object.__setstate__ "object.__setstate__") method. If not `None`, this callable will have priority over `obj`’s [`__setstate__()`](https://docs.python.org/3/library/pickle.html#object.__setstate__ "object.__setstate__").
Added in version 3.8: The optional sixth tuple item, `(obj, state)`, was added.