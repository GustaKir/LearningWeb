Title: Defining Iterator Behavior in Python C API
URL: https://docs.python.org/3/c-api/typeobj.html
Summary: This section outlines the necessary behavior for iterator types in the Python C API, specifying that an exhausted iterator must return NULL, and may or may not set a StopIteration exception. It emphasizes the need for the tp_iter function to return the iterator instance itself and notes that the tp_methods field is inherited by subtypes.
---

```

When the iterator is exhausted, it must return `NULL`; a [`StopIteration`](https://docs.python.org/3/library/exceptions.html#StopIteration "StopIteration") exception may or may not be set. When another error occurs, it must return `NULL` too. Its presence signals that the instances of this type are iterators.
Iterator types should also define the [`tp_iter`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_iter "PyTypeObject.tp_iter") function, and that function should return the iterator instance itself (not a new iterator instance).
This function has the same signature as [`PyIter_Next()`](https://docs.python.org/3/c-api/iter.html#c.PyIter_Next "PyIter_Next").
**Inheritance:**
This field is inherited by subtypes. 

struct[PyMethodDef](https://docs.python.org/3/c-api/structures.html#c.PyMethodDef "PyMethodDef")*[PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject").tp_methods[¶](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_methods "Link to this definition")
    
An optional pointer to a static `NULL`-terminated array of [`PyMethodDef`](https://docs.python.org/3/c-api/structures.html#c.PyMethodDef "PyMethodDef") structures, declaring regular methods of this type.
For each entry in the array, an entry is added to the type’s dictionary (see [`tp_dict`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_dict "PyTypeObject.tp_dict") below) containing a method descriptor.
**Inheritance:**
This field is not inherited by subtypes (methods are inherited through a different mechanism). 

struct[PyMemberDef](https://docs.python.org/3/c-api/structures.html#c.PyMemberDef "PyMemberDef")*[PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject").tp_members[¶](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_members "Link to this definition")
    
An optional pointer to a static `NULL`-terminated array of [`PyMemberDef`](https://docs.python.org/3/c-api/structures.html#c.PyMemberDef "PyMemberDef") structures, declaring regular data members (fields or slots) of instances of this type.
For each entry in the array, an entry is added to the type’s dictionary (see [`tp_dict`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_dict "PyTypeObject.tp_dict") below) containing a member descriptor.
**Inheritance:**
This field is not inherited by subtypes (members are inherited through a different mechanism). 

struct[PyGetSetDef](https://docs.python.org/3/c-api/structures.html#c.PyGetSetDef "PyGetSetDef")*[PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject").tp_getset[¶](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_getset "Link to this definition")
    
An optional pointer to a static `NULL`-terminated array of [`PyGetSetDef`](https://docs.python.org/3/c-api/structures.html#c.PyGetSetDef "PyGetSetDef") structures, declaring computed attributes of instances of this type.
For each entry in the array, an entry is added to the type’s dictionary (see [`tp_dict`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_dict "PyTypeObject.tp_dict") below) containing a getset descriptor.
**Inheritance:**
This field is not inherited by subtypes (computed attributes are inherited through a different mechanism). 

[PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject")*[PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject").tp_base[¶](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_base "Link to this definition")
    
An optional pointer to a base type from which type properties are inherited. At this level, only single inheritance is supported; multiple inheritance require dynamically creating a type object by calling the metatype.
Note
Slot initialization is subject to the rules of initializing globals. C99 requires the initializers to be “address constants”. Function designators like [`PyType_GenericNew()`](https://docs.python.org/3/c-api/type.html#c.PyType_GenericNew "PyType_GenericNew"), with implicit conversion to a pointer, are valid C99 address constants.
However, the unary ‘&’ operator applied to a non-static variable like [`PyBaseObject_Type`](https://docs.python.org/3/c-api/structures.html#c.PyBaseObject_Type "PyBaseObject_Type") is not required to produce an address constant. Compilers may support this (gcc does), MSVC does not. Both compilers are strictly standard conforming in this particular behavior.
Consequently, [`tp_base`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_base "PyTypeObject.tp_base") should be set in the extension module’s init function.
**Inheritance:**
This field is not inherited by subtypes (obviously).
**Default:**
This field defaults to `&PyBaseObject_Type` (which to Python programmers is known as the type [`object`](https://docs.python.org/3/library/functions.html#object "object")).