Title: ExtendedEnvBuilder Class in the venv Module
URL: https://docs.python.org/3/library/venv.html
Summary: The ExtendedEnvBuilder class extends the venv.EnvBuilder for creating virtual environments in Python. It allows for the installation of setuptools and pip, with options to skip these installations through the 'nodist' and 'nopip' parameters. Additionally, it supports progress monitoring during installations via a callback function.
---

```
importos
importos.path
fromsubprocessimport Popen, PIPE
importsys
fromthreadingimport Thread
fromurllib.parseimport urlparse
fromurllib.requestimport urlretrieve
importvenv
classExtendedEnvBuilder(venv.EnvBuilder):
"""
  This builder installs setuptools and pip so that you can pip or
  easy_install other packages into the created virtual environment.
  :param nodist: If true, setuptools and pip are not installed into the
          created virtual environment.
  :param nopip: If true, pip is not installed into the created
         virtual environment.
  :param progress: If setuptools or pip are installed, the progress of the
           installation can be monitored by passing a progress
           callable. If specified, it is called with two
           arguments: a string indicating some progress, and a
           context indicating where the string is coming from.
           The context argument can have one of three values:
           'main', indicating that it is called from virtualize()
           itself, and 'stdout' and 'stderr', which are obtained
           by reading lines from the output streams of a subprocess
           which is used to install the app.
           If a callable is not specified, default progress
           information is output to sys.stderr.
  """
  def__init__(self, *args, **kwargs):
    self.nodist = kwargs.pop('nodist', False)
    self.nopip = kwargs.pop('nopip', False)
    self.progress = kwargs.pop('progress', None)
    self.verbose = kwargs.pop('verbose', False)
    super().__init__(*args, **kwargs)
  defpost_setup(self, context):
"""
    Set up any packages which need to be pre-installed into the
    virtual environment being created.
    :param context: The information for the virtual environment
            creation request being processed.
    """
    os.environ['VIRTUAL_ENV'] = context.env_dir
    if not self.nodist:
      self.install_setuptools(context)
    # Can't install pip without setuptools
    if not self.nopip and not self.nodist:
      self.install_pip(context)
  defreader(self, stream, context):
"""
    Read lines from a subprocess' output stream and either pass to a progress
    callable (if specified) or write progress information to sys.stderr.
    """
    progress = self.progress
    while True:
      s = stream.readline()
      if not s:
        break
      if progress is not None:
        progress(s, context)
      else:
        if not self.verbose:
          sys.stderr.write('.')
        else:
          sys.stderr.write(s.decode('utf-8'))
        sys.stderr.flush()
    stream.close()
  definstall_script(self, context, name, url):
    _, _, path, _, _, _ = urlparse(url)
    fn = os.path.split(path)[-1]
    binpath = context.bin_path
    distpath = os.path.join(binpath, fn)
    # Download script into the virtual environment's binaries folder
    urlretrieve(url, distpath)
    progress = self.progress
    if self.verbose:
      term = '\n'
    else:
      term = ''
    if progress is not None:
      progress('Installing %s ...%s' % (name, term), 'main')
    else:
      sys.stderr.write('Installing %s ...%s' % (name, term))
      sys.stderr.flush()
    # Install in the virtual environment
    args = [context.env_exe, fn]
    p = Popen(args, stdout=PIPE, stderr=PIPE, cwd=binpath)
    t1 = Thread(target=self.reader, args=(p.stdout, 'stdout'))
    t1.start()
    t2 = Thread(target=self.reader, args=(p.stderr, 'stderr'))
    t2.start()
    p.wait()
    t1.join()
    t2.join()
    if progress is not None:
      progress('done.', 'main')
    else:
      sys.stderr.write('done.\n')
    # Clean up - no longer needed
    os.unlink(distpath)
  definstall_setuptools(self, context):
"""
    Install setuptools in the virtual environment.
    :param context: The information for the virtual environment
            creation request being processed.
    """
    url = "https://bootstrap.pypa.io/ez_setup.py"
    self.install_script(context, 'setuptools', url)
    # clear up the setuptools archive which gets downloaded
    pred = lambda o: o.startswith('setuptools-') and o.endswith('.tar.gz')
    files = filter(pred, os.listdir(context.bin_path))
    for f in files:
      f = os.path.join(context.bin_path, f)
      os.unlink(f)
  definstall_pip(self, context):
"""
    Install pip in the virtual environment.
    :param context: The information for the virtual environment
            creation request being processed.
    """
    url = 'https://bootstrap.pypa.io/get-pip.py'
    self.install_script(context, 'pip', url)