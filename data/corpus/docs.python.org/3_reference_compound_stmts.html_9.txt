Title: Guard Evaluation in Case Blocks
URL: https://docs.python.org/3/reference/compound_stmts.html
Summary: A guard in a case block must succeed for its code to execute. It involves checking the pattern first; if successful, the guard expression is evaluated. The case block is selected if the guard is true. Guards can have side effects and are evaluated sequentially.
---

```

A `guard` (which is part of the `case`) must succeed for code inside the `case` block to execute. It takes the form: [`if`](https://docs.python.org/3/reference/compound_stmts.html#if) followed by an expression.
The logical flow of a `case` block with a `guard` follows:
  1. Check that the pattern in the `case` block succeeded. If the pattern failed, the `guard` is not evaluated and the next `case` block is checked.
  2. If the pattern succeeded, evaluate the `guard`.
     * If the `guard` condition evaluates as true, the case block is selected.
     * If the `guard` condition evaluates as false, the case block is not selected.
     * If the `guard` raises an exception during evaluation, the exception bubbles up.


Guards are allowed to have side effects as they are expressions. Guard evaluation must proceed from the first to the last case block, one at a time, skipping case blocks whose pattern(s) don’t all succeed. (I.e., guard evaluation must happen in order.) Guard evaluation must stop once a case block is selected.
### 8.6.3. Irrefutable Case Blocks[¶](https://docs.python.org/3/reference/compound_stmts.html#irrefutable-case-blocks "Link to this heading")
An irrefutable case block is a match-all case block. A match statement may have at most one irrefutable case block, and it must be last.
A case block is considered irrefutable if it has no guard and its pattern is irrefutable. A pattern is considered irrefutable if we can prove from its syntax alone that it will always succeed. Only the following patterns are irrefutable:
  * [AS Patterns](https://docs.python.org/3/reference/compound_stmts.html#as-patterns) whose left-hand side is irrefutable
  * [OR Patterns](https://docs.python.org/3/reference/compound_stmts.html#or-patterns) containing at least one irrefutable pattern
  * [Capture Patterns](https://docs.python.org/3/reference/compound_stmts.html#capture-patterns)
  * [Wildcard Patterns](https://docs.python.org/3/reference/compound_stmts.html#wildcard-patterns)
  * parenthesized irrefutable patterns


### 8.6.4. Patterns[¶](https://docs.python.org/3/reference/compound_stmts.html#patterns "Link to this heading")
Note
This section uses grammar notations beyond standard EBNF:
  * the notation `SEP.RULE+` is shorthand for `RULE (SEP RULE)*`
  * the notation `!RULE` is shorthand for a negative lookahead assertion


The top-level syntax for `patterns` is:
```
**patterns**    ::= [open_sequence_pattern](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-open_sequence_pattern) | [pattern](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-pattern)
**pattern**    ::= [as_pattern](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-as_pattern) | [or_pattern](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-or_pattern)
**closed_pattern** ::= | [literal_pattern](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-literal_pattern)
          | [capture_pattern](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-capture_pattern)
          | [wildcard_pattern](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-wildcard_pattern)
          | [value_pattern](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-value_pattern)
          | [group_pattern](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-group_pattern)
          | [sequence_pattern](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-sequence_pattern)
          | [mapping_pattern](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-mapping_pattern)
          | [class_pattern](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-class_pattern)

```

The descriptions below will include a description “in simple terms” of what a pattern does for illustration purposes (credits to Raymond Hettinger for a document that inspired most of the descriptions). Note that these descriptions are purely for illustration purposes and **may not** reflect the underlying implementation. Furthermore, they do not cover all valid forms.
#### 8.6.4.1. OR Patterns[¶](https://docs.python.org/3/reference/compound_stmts.html#or-patterns "Link to this heading")
An OR pattern is two or more patterns separated by vertical bars `|`. Syntax:
```
**or_pattern** ::= "|".[closed_pattern](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-closed_pattern)+