Title: Py_TPFLAGS_ITEMS_AT_END Documentation
URL: https://docs.python.org/3/c-api/typeobj.html
Summary: This documentation describes the Py_TPFLAGS_ITEMS_AT_END flag, which is applicable only to variable-size types with a non-zero tp_itemsize. It indicates that the variable-sized portion of an instance is located at the end of the memory area, requiring that all superclasses adhere to this layout. This flag was introduced in Python version 3.12 and is inheritable.
---

Py_TPFLAGS_ITEMS_AT_END[¶](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_ITEMS_AT_END "Link to this definition")
    
Only usable with variable-size types, i.e. ones with non-zero [`tp_itemsize`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_itemsize "PyTypeObject.tp_itemsize").
Indicates that the variable-sized portion of an instance of this type is at the end of the instance’s memory area, at an offset of `Py_TYPE(obj)->tp_basicsize` (which may be different in each subclass).
When setting this flag, be sure that all superclasses either use this memory layout, or are not variable-sized. Python does not check this.
Added in version 3.12.
**Inheritance:**
This flag is inherited. 

Py_TPFLAGS_LONG_SUBCLASS[¶](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_LONG_SUBCLASS "Link to this definition")


Py_TPFLAGS_LIST_SUBCLASS[¶](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_LIST_SUBCLASS "Link to this definition")


Py_TPFLAGS_TUPLE_SUBCLASS[¶](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_TUPLE_SUBCLASS "Link to this definition")


Py_TPFLAGS_BYTES_SUBCLASS[¶](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_BYTES_SUBCLASS "Link to this definition")


Py_TPFLAGS_UNICODE_SUBCLASS[¶](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_UNICODE_SUBCLASS "Link to this definition")


Py_TPFLAGS_DICT_SUBCLASS[¶](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_DICT_SUBCLASS "Link to this definition")


Py_TPFLAGS_BASE_EXC_SUBCLASS[¶](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_BASE_EXC_SUBCLASS "Link to this definition")


Py_TPFLAGS_TYPE_SUBCLASS[¶](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_TYPE_SUBCLASS "Link to this definition")
    
These flags are used by functions such as [`PyLong_Check()`](https://docs.python.org/3/c-api/long.html#c.PyLong_Check "PyLong_Check") to quickly determine if a type is a subclass of a built-in type; such specific checks are faster than a generic check, like [`PyObject_IsInstance()`](https://docs.python.org/3/c-api/object.html#c.PyObject_IsInstance "PyObject_IsInstance"). Custom types that inherit from built-ins should have their [`tp_flags`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_flags "PyTypeObject.tp_flags") set appropriately, or the code that interacts with such types will behave differently depending on what kind of check is used. 

Py_TPFLAGS_HAVE_FINALIZE[¶](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_HAVE_FINALIZE "Link to this definition")
    
This bit is set when the [`tp_finalize`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_finalize "PyTypeObject.tp_finalize") slot is present in the type structure.
Added in version 3.4.
Deprecated since version 3.8: This flag isn’t necessary anymore, as the interpreter assumes the [`tp_finalize`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_finalize "PyTypeObject.tp_finalize") slot is always present in the type structure. 

Py_TPFLAGS_HAVE_VECTORCALL[¶](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_HAVE_VECTORCALL "Link to this definition")
    
This bit is set when the class implements the [vectorcall protocol](https://docs.python.org/3/c-api/call.html#vectorcall). See [`tp_vectorcall_offset`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_vectorcall_offset "PyTypeObject.tp_vectorcall_offset") for details.
**Inheritance:**
This bit is inherited if [`tp_call`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_call "PyTypeObject.tp_call") is also inherited.
Added in version 3.9.
Changed in version 3.12: This flag is now removed from a class when the class’s [`__call__()`](https://docs.python.org/3/reference/datamodel.html#object.__call__ "object.__call__") method is reassigned.
This flag can now be inherited by mutable classes. 

Py_TPFLAGS_IMMUTABLETYPE[¶](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_IMMUTABLETYPE "Link to this definition")
    
This bit is set for type objects that are immutable: type attributes cannot be set nor deleted.
[`PyType_Ready()`](https://docs.python.org/3/c-api/type.html#c.PyType_Ready "PyType_Ready") automatically applies this flag to [static types](https://docs.python.org/3/c-api/typeobj.html#static-types).
**Inheritance:**
This flag is not inherited.
Added in version 3.10.