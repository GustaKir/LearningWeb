Title: Email MIME Types in Python
URL: https://docs.python.org/3/library/email.mime.html
Summary: This section of the Python documentation covers the `email.mime` module, which provides classes for creating and handling email messages with various MIME types. It links to related topics, such as representing an email message and internationalized headers.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
#### Previous topic
[`email.message.Message`: Representing an email message using the `compat32` API](https://docs.python.org/3/library/email.compat32-message.html "previous chapter")
#### Next topic
[`email.header`: Internationalized headers](https://docs.python.org/3/library/email.header.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/email.mime.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/email.header.html "email.header: Internationalized headers") |
  * [previous](https://docs.python.org/3/library/email.compat32-message.html "email.message.Message: Representing an email message using the compat32 API") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Internet Data Handling](https://docs.python.org/3/library/netdata.html) »
  * [`email` — An email and MIME handling package](https://docs.python.org/3/library/email.html) »
  * [`email.mime`: Creating email and MIME objects from scratch](https://docs.python.org/3/library/email.mime.html)
  * | 
  * Theme  Auto Light Dark |


# `email.mime`: Creating email and MIME objects from scratch[¶](https://docs.python.org/3/library/email.mime.html#module-email.mime "Link to this heading")
**Source code:** [Lib/email/mime/](https://github.com/python/cpython/tree/3.13/Lib/email/mime/)
This module is part of the legacy (`Compat32`) email API. Its functionality is partially replaced by the [`contentmanager`](https://docs.python.org/3/library/email.contentmanager.html#module-email.contentmanager "email.contentmanager: Storing and Retrieving Content from MIME Parts") in the new API, but in certain applications these classes may still be useful, even in non-legacy code.
Ordinarily, you get a message object structure by passing a file or some text to a parser, which parses the text and returns the root message object. However you can also build a complete message structure from scratch, or even individual [`Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "email.message.Message") objects by hand. In fact, you can also take an existing structure and add new [`Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "email.message.Message") objects, move them around, etc. This makes a very convenient interface for slicing-and-dicing MIME messages.
You can create a new object structure by creating [`Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "email.message.Message") instances, adding attachments and all the appropriate headers manually. For MIME messages though, the [`email`](https://docs.python.org/3/library/email.html#module-email "email: Package supporting the parsing, manipulating, and generating email messages.") package provides some convenient subclasses to make things easier.
Here are the classes: