Title: Subclassing Enum in Python
URL: https://docs.python.org/3/howto/enum.html
Summary: This section discusses subclassing the EnumType in Python to create customized enum behaviors. It includes an example of defining a Period class with dynamic attributes representing different lengths of time using timedelta.
---

```
>>> fromdatetimeimport timedelta
>>> classPeriod(timedelta, Enum):
...   "different lengths of time"
...   _ignore_ = 'Period i'
...   Period = vars()
...   for i in range(367):
...     Period['day_%d' % i] = i
...
>>> list(Period)[:2]
[<Period.day_0: datetime.timedelta(0)>, <Period.day_1: datetime.timedelta(days=1)>]
>>> list(Period)[-2:]
[<Period.day_365: datetime.timedelta(days=365)>, <Period.day_366: datetime.timedelta(days=366)>]

```

## Subclassing EnumType[Â¶](https://docs.python.org/3/howto/enum.html#subclassing-enumtype "Link to this heading")
While most enum needs can be met by customizing [`Enum`](https://docs.python.org/3/library/enum.html#enum.Enum "enum.Enum") subclasses, either with class decorators or custom functions, [`EnumType`](https://docs.python.org/3/library/enum.html#enum.EnumType "enum.EnumType") can be subclassed to provide a different Enum experience.
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [Enum HOWTO](https://docs.python.org/3/howto/enum.html)
    * [Programmatic access to enumeration members and their attributes](https://docs.python.org/3/howto/enum.html#programmatic-access-to-enumeration-members-and-their-attributes)
    * [Duplicating enum members and values](https://docs.python.org/3/howto/enum.html#duplicating-enum-members-and-values)
    * [Ensuring unique enumeration values](https://docs.python.org/3/howto/enum.html#ensuring-unique-enumeration-values)
    * [Using automatic values](https://docs.python.org/3/howto/enum.html#using-automatic-values)
    * [Iteration](https://docs.python.org/3/howto/enum.html#iteration)
    * [Comparisons](https://docs.python.org/3/howto/enum.html#comparisons)
    * [Allowed members and attributes of enumerations](https://docs.python.org/3/howto/enum.html#allowed-members-and-attributes-of-enumerations)
    * [Restricted Enum subclassing](https://docs.python.org/3/howto/enum.html#restricted-enum-subclassing)
    * [Dataclass support](https://docs.python.org/3/howto/enum.html#dataclass-support)
    * [Pickling](https://docs.python.org/3/howto/enum.html#pickling)
    * [Functional API](https://docs.python.org/3/howto/enum.html#functional-api)
    * [Derived Enumerations](https://docs.python.org/3/howto/enum.html#derived-enumerations)
      * [IntEnum](https://docs.python.org/3/howto/enum.html#intenum)
      * [StrEnum](https://docs.python.org/3/howto/enum.html#strenum)
      * [IntFlag](https://docs.python.org/3/howto/enum.html#intflag)
      * [Flag](https://docs.python.org/3/howto/enum.html#flag)
      * [Others](https://docs.python.org/3/howto/enum.html#others)
    * [When to use `__new__()` vs. `__init__()`](https://docs.python.org/3/howto/enum.html#when-to-use-new-vs-init)
      * [Finer Points](https://docs.python.org/3/howto/enum.html#finer-points)
        * [Supported `__dunder__` names](https://docs.python.org/3/howto/enum.html#supported-dunder-names)
        * [Supported `_sunder_` names](https://docs.python.org/3/howto/enum.html#supported-sunder-names)
        * [_Private__names](https://docs.python.org/3/howto/enum.html#private-names)
        * [`Enum` member type](https://docs.python.org/3/howto/enum.html#enum-member-type)
        * [Creating members that are mixed with other data types](https://docs.python.org/3/howto/enum.html#creating-members-that-are-mixed-with-other-data-types)
        * [Boolean value of `Enum` classes and members](https://docs.python.org/3/howto/enum.html#boolean-value-of-enum-classes-and-members)
        * [`Enum` classes with methods](https://docs.python.org/3/howto/enum.html#enum-classes-with-methods)
        * [Combining members of `Flag`](https://docs.python.org/3/howto/enum.html#combining-members-of-flag)
        * [`Flag` and `IntFlag` minutia](https://docs.python.org/3/howto/enum.html#flag-and-intflag-minutia)
    * [How are Enums and Flags different?](https://docs.python.org/3/howto/enum.html#how-are-enums-and-flags-different)
      * [Enum Classes](https://docs.python.org/3/howto/enum.html#enum-classes)
      * [Flag Classes](https://docs.python.org/3/howto/enum.html#flag-classes)
      * [Enum Members (aka instances)](https://docs.python.org/3/howto/enum.html#enum-members-aka-instances)
      * [Flag Members](https://docs.python.org/3/howto/enum.html#flag-members)
    * [Enum Cookbook](https://docs.python.org/3/howto/enum.html#enum-cookbook)
      * [Omitting values](https://docs.python.org/3/howto/enum.html#omitting-values)
        * [Using `auto`](https://docs.python.org/3/howto/enum.html#using-auto)
        * [Using `object`](https://docs.python.org/3/howto/enum.html#using-object)
        * [Using a descriptive string](https://docs.python.org/3/howto/enum.html#using-a-descriptive-string)
        * [Using a custom `__new__()`](https://docs.python.org/3/howto/enum.html#using-a-custom-new)
      * [OrderedEnum](https://docs.python.org/3/howto/enum.html#orderedenum)
      * [DuplicateFreeEnum](https://docs.python.org/3/howto/enum.html#duplicatefreeenum)
      * [Mult