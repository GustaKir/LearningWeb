Title: Core and Builtins Enhancements in Python
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section outlines updates to the Python core and built-in functions, including enforced restrictions on using certain import functions post-initialization, improvements to error handling related to bytecode instructions, and other compiler enhancements.
---

### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id197 "Link to this heading")
  * [gh-81057](https://github.com/python/cpython/issues/81057): The docs clearly say that `PyImport_Inittab`, [`PyImport_AppendInittab()`](https://docs.python.org/3/c-api/import.html#c.PyImport_AppendInittab "PyImport_AppendInittab"), and [`PyImport_ExtendInittab()`](https://docs.python.org/3/c-api/import.html#c.PyImport_ExtendInittab "PyImport_ExtendInittab") should not be used after [`Py_Initialize()`](https://docs.python.org/3/c-api/init.html#c.Py_Initialize "Py_Initialize") has been called. We now enforce this for the two functions. Additionally, the runtime now uses an internal copy of `PyImport_Inittab`, to guard against modification.
  * [gh-99298](https://github.com/python/cpython/issues/99298): Fix an issue that could potentially cause incorrect error handling for some bytecode instructions.
  * [gh-99254](https://github.com/python/cpython/issues/99254): The compiler now removes all unused constants from code objects (except the first one, which may be a docstring).
  * [gh-99205](https://github.com/python/cpython/issues/99205): Fix an issue that prevented [`PyThreadState`](https://docs.python.org/3/c-api/init.html#c.PyThreadState "PyThreadState") and [`PyInterpreterState`](https://docs.python.org/3/c-api/init.html#c.PyInterpreterState "PyInterpreterState") memory from being freed properly.
  * [gh-81057](https://github.com/python/cpython/issues/81057): The 18 global C variables holding the state of the allocators have been moved to `_PyRuntimeState`. This is a strictly internal change with no change in behavior.
  * [gh-99181](https://github.com/python/cpython/issues/99181): Fix failure in [`except*`](https://docs.python.org/3/reference/compound_stmts.html#except-star) with unhashable exceptions.
  * [gh-99204](https://github.com/python/cpython/issues/99204): Fix calculation of `sys._base_executable` when inside a POSIX virtual environment using copies of the python binary when the base installation does not provide the executable name used by the venv. Calculation will fall back to alternative names (“python<MAJOR>”, “python<MAJOR>.<MINOR>”).
  * [gh-96055](https://github.com/python/cpython/issues/96055): Update [`faulthandler`](https://docs.python.org/3/library/faulthandler.html#module-faulthandler "faulthandler: Dump the Python traceback.") to emit an error message with the proper unexpected signal number. Patch by Donghee Na.
  * [gh-99153](https://github.com/python/cpython/issues/99153): Fix location of [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") for a [`try`](https://docs.python.org/3/reference/compound_stmts.html#try) block with both [`except`](https://docs.python.org/3/reference/compound_stmts.html#except) and [`except*`](https://docs.python.org/3/reference/compound_stmts.html#except-star).
  * [gh-98686](https://github.com/python/cpython/issues/98686): Merge the adaptive opcode logic into each instruction’s unquickened variant, and merge the logic in `EXTENDED_ARG_QUICK` into [`EXTENDED_ARG`](https://docs.python.org/3/library/dis.html#opcode-EXTENDED_ARG). With these changes, the quickening that happens at code object creation is now only responsible for initializing warmup counters and inserting superinstructions.
  * [gh-99103](https://github.com/python/cpython/issues/99103): Fix the error reporting positions of specialized traceback anchors when the source line contains Unicode characters.
  * [gh-99139](https://github.com/python/cpython/issues/99139): Improve the error suggestion for [`NameError`](https://docs.python.org/3/library/exceptions.html#NameError "NameError") exceptions for instances. Now if a [`NameError`](https://docs.python.org/3/library/exceptions.html#NameError "NameError") is raised in a method and the instance has an attribute that’s exactly equal to the name in the exception, the suggestion will include `self.<NAME>` instead of the closest match in the method scope. Patch by Pablo Galindo
  * [gh-98401](https://github.com/python/cpython/issues/98401): Octal escapes with value larger than `0o377` (ex: `"\477"`), deprecated in Python 3.11, now produce a [`SyntaxWarning`](https://docs.python.org/3/library/exceptions.html#SyntaxWarning "SyntaxWarning"), instead of [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning"). In a future Python version they will be eventually a [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError"). Patch by Victor Stinner.
  * [gh-98401](https://github.com/python/cpython/issues/98401): A backslash-character pair that is not a valid escape sequence now generates a [`SyntaxWarning`](https://docs.python.org/3/library/exceptions.html#SyntaxWarning "SyntaxWarning"), instead of [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning"). For exampl