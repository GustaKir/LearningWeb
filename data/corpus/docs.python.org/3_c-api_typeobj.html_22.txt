Title: Py_TPFLAGS_DISALLOW_INSTANTIATION
URL: https://docs.python.org/3/c-api/typeobj.html
Summary: This section discusses the Py_TPFLAGS_DISALLOW_INSTANTIATION flag in Python's C API, which prevents instances of a type from being created. It highlights the importance of setting this flag before calling PyType_Ready() and notes that it is automatically set for static types under certain conditions. The flag is not inherited by subclasses.
---

Py_TPFLAGS_DISALLOW_INSTANTIATION[¶](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_DISALLOW_INSTANTIATION "Link to this definition")
    
Disallow creating instances of the type: set [`tp_new`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_new "PyTypeObject.tp_new") to NULL and don’t create the `__new__` key in the type dictionary.
The flag must be set before creating the type, not after. For example, it must be set before [`PyType_Ready()`](https://docs.python.org/3/c-api/type.html#c.PyType_Ready "PyType_Ready") is called on the type.
The flag is set automatically on [static types](https://docs.python.org/3/c-api/typeobj.html#static-types) if [`tp_base`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_base "PyTypeObject.tp_base") is NULL or `&PyBaseObject_Type` and [`tp_new`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_new "PyTypeObject.tp_new") is NULL.
**Inheritance:**
This flag is not inherited. However, subclasses will not be instantiable unless they provide a non-NULL [`tp_new`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_new "PyTypeObject.tp_new") (which is only possible via the C API).
Note
To disallow instantiating a class directly but allow instantiating its subclasses (e.g. for an [abstract base class](https://docs.python.org/3/glossary.html#term-abstract-base-class)), do not use this flag. Instead, make [`tp_new`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_new "PyTypeObject.tp_new") only succeed for subclasses.
Added in version 3.10. 

Py_TPFLAGS_MAPPING[¶](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_MAPPING "Link to this definition")
    
This bit indicates that instances of the class may match mapping patterns when used as the subject of a [`match`](https://docs.python.org/3/reference/compound_stmts.html#match) block. It is automatically set when registering or subclassing [`collections.abc.Mapping`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping "collections.abc.Mapping"), and unset when registering [`collections.abc.Sequence`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence "collections.abc.Sequence").
Note
[`Py_TPFLAGS_MAPPING`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_MAPPING "Py_TPFLAGS_MAPPING") and [`Py_TPFLAGS_SEQUENCE`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_SEQUENCE "Py_TPFLAGS_SEQUENCE") are mutually exclusive; it is an error to enable both flags simultaneously.
**Inheritance:**
This flag is inherited by types that do not already set [`Py_TPFLAGS_SEQUENCE`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_SEQUENCE "Py_TPFLAGS_SEQUENCE").
See also
[**PEP 634**](https://peps.python.org/pep-0634/) – Structural Pattern Matching: Specification
Added in version 3.10. 

Py_TPFLAGS_SEQUENCE[¶](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_SEQUENCE "Link to this definition")
    
This bit indicates that instances of the class may match sequence patterns when used as the subject of a [`match`](https://docs.python.org/3/reference/compound_stmts.html#match) block. It is automatically set when registering or subclassing [`collections.abc.Sequence`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence "collections.abc.Sequence"), and unset when registering [`collections.abc.Mapping`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping "collections.abc.Mapping").
Note
[`Py_TPFLAGS_MAPPING`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_MAPPING "Py_TPFLAGS_MAPPING") and [`Py_TPFLAGS_SEQUENCE`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_SEQUENCE "Py_TPFLAGS_SEQUENCE") are mutually exclusive; it is an error to enable both flags simultaneously.
**Inheritance:**
This flag is inherited by types that do not already set [`Py_TPFLAGS_MAPPING`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_MAPPING "Py_TPFLAGS_MAPPING").
See also
[**PEP 634**](https://peps.python.org/pep-0634/) – Structural Pattern Matching: Specification
Added in version 3.10. 

Py_TPFLAGS_VALID_VERSION_TAG[¶](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_VALID_VERSION_TAG "Link to this definition")
    
Internal. Do not set or unset this flag. To indicate that a class has changed call [`PyType_Modified()`](https://docs.python.org/3/c-api/type.html#c.PyType_Modified "PyType_Modified")
Warning
This flag is present in header files, but is not be used. It will be removed in a future version of CPython