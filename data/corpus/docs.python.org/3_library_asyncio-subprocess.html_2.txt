Title: asyncio.subprocess.PIPE Parameters
URL: https://docs.python.org/3/library/asyncio-subprocess.html
Summary: The `asyncio.subprocess.PIPE` can be used for the `_stdin_`, `_stdout_`, and `_stderr_` parameters of subprocesses. When used with `_stdin_`, it allows access to a `StreamWriter`, and with `_stdout_` or `_stderr_`, it provides access to `StreamReader` instances.
---

asyncio.subprocess.PIPE[¶](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.subprocess.PIPE "Link to this definition")
    
Can be passed to the _stdin_ , _stdout_ or _stderr_ parameters.
If _PIPE_ is passed to _stdin_ argument, the [`Process.stdin`](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.subprocess.Process.stdin "asyncio.subprocess.Process.stdin") attribute will point to a [`StreamWriter`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamWriter "asyncio.StreamWriter") instance.
If _PIPE_ is passed to _stdout_ or _stderr_ arguments, the [`Process.stdout`](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.subprocess.Process.stdout "asyncio.subprocess.Process.stdout") and [`Process.stderr`](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.subprocess.Process.stderr "asyncio.subprocess.Process.stderr") attributes will point to [`StreamReader`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamReader "asyncio.StreamReader") instances. 

asyncio.subprocess.STDOUT[¶](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.subprocess.STDOUT "Link to this definition")
    
Special value that can be used as the _stderr_ argument and indicates that standard error should be redirected into standard output. 

asyncio.subprocess.DEVNULL[¶](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.subprocess.DEVNULL "Link to this definition")
    
Special value that can be used as the _stdin_ , _stdout_ or _stderr_ argument to process creation functions. It indicates that the special file [`os.devnull`](https://docs.python.org/3/library/os.html#os.devnull "os.devnull") will be used for the corresponding subprocess stream.
## Interacting with Subprocesses[¶](https://docs.python.org/3/library/asyncio-subprocess.html#interacting-with-subprocesses "Link to this heading")
Both [`create_subprocess_exec()`](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec "asyncio.create_subprocess_exec") and [`create_subprocess_shell()`](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_shell "asyncio.create_subprocess_shell") functions return instances of the _Process_ class. _Process_ is a high-level wrapper that allows communicating with subprocesses and watching for their completion. 

_class_ asyncio.subprocess.Process[¶](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.subprocess.Process "Link to this definition")
    
An object that wraps OS processes created by the [`create_subprocess_exec()`](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec "asyncio.create_subprocess_exec") and [`create_subprocess_shell()`](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_shell "asyncio.create_subprocess_shell") functions.
This class is designed to have a similar API to the [`subprocess.Popen`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen "subprocess.Popen") class, but there are some notable differences:
  * unlike Popen, Process instances do not have an equivalent to the [`poll()`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen.poll "subprocess.Popen.poll") method;
  * the [`communicate()`](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.subprocess.Process.communicate "asyncio.subprocess.Process.communicate") and [`wait()`](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.subprocess.Process.wait "asyncio.subprocess.Process.wait") methods don’t have a _timeout_ parameter: use the [`wait_for()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.wait_for "asyncio.wait_for") function;
  * the [`Process.wait()`](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.subprocess.Process.wait "asyncio.subprocess.Process.wait") method is asynchronous, whereas [`subprocess.Popen.wait()`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen.wait "subprocess.Popen.wait") method is implemented as a blocking busy loop;
  * the _universal_newlines_ parameter is not supported.


This class is [not thread safe](https://docs.python.org/3/library/asyncio-dev.html#asyncio-multithreading).
See also the [Subprocess and Threads](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio-subprocess-threads) section.