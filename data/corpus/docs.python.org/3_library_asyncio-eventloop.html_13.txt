Title: File Descriptor Write Monitoring in asyncio
URL: https://docs.python.org/3/library/asyncio-eventloop.html
Summary: The `loop.add_writer(_fd_, _callback_, *_args_)` function in asyncio starts monitoring a file descriptor (_fd_) for write availability, triggering the provided callback with arguments when the _fd_ is ready. Any existing callback for that descriptor is replaced. To pass keyword arguments to the callback, `functools.partial()` can be utilized. Conversely, `loop.remove_writer(_fd_)` stops monitoring the file descriptor and returns `True` if it was being monitored.
---

loop.add_writer(_fd_ , _callback_ , _* args_)[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.add_writer "Link to this definition")
    
Start monitoring the _fd_ file descriptor for write availability and invoke _callback_ with the specified arguments once _fd_ is available for writing.
Any preexisting callback registered for _fd_ is cancelled and replaced by _callback_.
Use [`functools.partial()`](https://docs.python.org/3/library/functools.html#functools.partial "functools.partial") [to pass keyword arguments](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio-pass-keywords) to _callback_. 

loop.remove_writer(_fd_)[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.remove_writer "Link to this definition")
    
Stop monitoring the _fd_ file descriptor for write availability. Returns `True` if _fd_ was previously being monitored for writes.
See also [Platform Support](https://docs.python.org/3/library/asyncio-platforms.html#asyncio-platform-support) section for some limitations of these methods.
### [Working with socket objects directly](https://docs.python.org/3/library/asyncio-eventloop.html#id10)[¶](https://docs.python.org/3/library/asyncio-eventloop.html#working-with-socket-objects-directly "Link to this heading")
In general, protocol implementations that use transport-based APIs such as [`loop.create_connection()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_connection "asyncio.loop.create_connection") and [`loop.create_server()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_server "asyncio.loop.create_server") are faster than implementations that work with sockets directly. However, there are some use cases when performance is not critical, and working with [`socket`](https://docs.python.org/3/library/socket.html#socket.socket "socket.socket") objects directly is more convenient. 

_async_ loop.sock_recv(_sock_ , _nbytes_)[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.sock_recv "Link to this definition")
    
Receive up to _nbytes_ from _sock_. Asynchronous version of [`socket.recv()`](https://docs.python.org/3/library/socket.html#socket.socket.recv "socket.socket.recv").
Return the received data as a bytes object.
_sock_ must be a non-blocking socket.
Changed in version 3.7: Even though this method was always documented as a coroutine method, releases before Python 3.7 returned a [`Future`](https://docs.python.org/3/library/asyncio-future.html#asyncio.Future "asyncio.Future"). Since Python 3.7 this is an `async def` method. 

_async_ loop.sock_recv_into(_sock_ , _buf_)[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.sock_recv_into "Link to this definition")
    
Receive data from _sock_ into the _buf_ buffer. Modeled after the blocking [`socket.recv_into()`](https://docs.python.org/3/library/socket.html#socket.socket.recv_into "socket.socket.recv_into") method.
Return the number of bytes written to the buffer.
_sock_ must be a non-blocking socket.
Added in version 3.7. 

_async_ loop.sock_recvfrom(_sock_ , _bufsize_)[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.sock_recvfrom "Link to this definition")
    
Receive a datagram of up to _bufsize_ from _sock_. Asynchronous version of [`socket.recvfrom()`](https://docs.python.org/3/library/socket.html#socket.socket.recvfrom "socket.socket.recvfrom").
Return a tuple of (received data, remote address).
_sock_ must be a non-blocking socket.
Added in version 3.11. 

_async_ loop.sock_recvfrom_into(_sock_ , _buf_ , _nbytes =0_)[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.sock_recvfrom_into "Link to this definition")
    
Receive a datagram of up to _nbytes_ from _sock_ into _buf_. Asynchronous version of [`socket.recvfrom_into()`](https://docs.python.org/3/library/socket.html#socket.socket.recvfrom_into "socket.socket.recvfrom_into").
Return a tuple of (number of bytes received, remote address).
_sock_ must be a non-blocking socket.
Added in version 3.11.