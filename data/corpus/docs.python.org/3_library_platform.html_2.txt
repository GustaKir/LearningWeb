Title: Platform Module - Version and Uname Functions
URL: https://docs.python.org/3/library/platform.html
Summary: The `platform.version()` function returns the system's release version, or an empty string if unavailable. On iOS and Android, it provides the user-facing OS version. The `platform.uname()` function offers a portable interface to retrieve system information in the form of a named tuple with attributes like `system`, `node`, and `release`.
---

platform.version()[¶](https://docs.python.org/3/library/platform.html#platform.version "Link to this definition")
    
Returns the system’s release version, e.g. `'#3 on degas'`. An empty string is returned if the value cannot be determined.
On iOS and Android, this is the user-facing OS version. To obtain the Darwin or Linux kernel version, use [`os.uname()`](https://docs.python.org/3/library/os.html#os.uname "os.uname"). 

platform.uname()[¶](https://docs.python.org/3/library/platform.html#platform.uname "Link to this definition")
    
Fairly portable uname interface. Returns a [`namedtuple()`](https://docs.python.org/3/library/collections.html#collections.namedtuple "collections.namedtuple") containing six attributes: [`system`](https://docs.python.org/3/library/platform.html#platform.system "platform.system"), [`node`](https://docs.python.org/3/library/platform.html#platform.node "platform.node"), [`release`](https://docs.python.org/3/library/platform.html#platform.release "platform.release"), [`version`](https://docs.python.org/3/library/platform.html#platform.version "platform.version"), [`machine`](https://docs.python.org/3/library/platform.html#platform.machine "platform.machine"), and [`processor`](https://docs.python.org/3/library/platform.html#platform.processor "platform.processor").
[`processor`](https://docs.python.org/3/library/platform.html#platform.processor "platform.processor") is resolved late, on demand.
Note: the first two attribute names differ from the names presented by [`os.uname()`](https://docs.python.org/3/library/os.html#os.uname "os.uname"), where they are named `sysname` and `nodename`.
Entries which cannot be determined are set to `''`.
Changed in version 3.3: Result changed from a tuple to a [`namedtuple()`](https://docs.python.org/3/library/collections.html#collections.namedtuple "collections.namedtuple").
Changed in version 3.9: [`processor`](https://docs.python.org/3/library/platform.html#platform.processor "platform.processor") is resolved late instead of immediately.
## Java Platform[¶](https://docs.python.org/3/library/platform.html#java-platform "Link to this heading") 

platform.java_ver(_release =''_, _vendor =''_, _vminfo =('', '', '')_, _osinfo =('', '', '')_)[¶](https://docs.python.org/3/library/platform.html#platform.java_ver "Link to this definition")
    
Version interface for Jython.
Returns a tuple `(release, vendor, vminfo, osinfo)` with _vminfo_ being a tuple `(vm_name, vm_release, vm_vendor)` and _osinfo_ being a tuple `(os_name, os_version, os_arch)`. Values which cannot be determined are set to the defaults given as parameters (which all default to `''`).
Deprecated since version 3.13, will be removed in version 3.15: It was largely untested, had a confusing API, and was only useful for Jython support.
## Windows Platform[¶](https://docs.python.org/3/library/platform.html#windows-platform "Link to this heading") 

platform.win32_ver(_release =''_, _version =''_, _csd =''_, _ptype =''_)[¶](https://docs.python.org/3/library/platform.html#platform.win32_ver "Link to this definition")
    
Get additional version information from the Windows Registry and return a tuple `(release, version, csd, ptype)` referring to OS release, version number, CSD level (service pack) and OS type (multi/single processor). Values which cannot be determined are set to the defaults given as parameters (which all default to an empty string).
As a hint: _ptype_ is `'Uniprocessor Free'` on single processor NT machines and `'Multiprocessor Free'` on multi processor machines. The `'Free'` refers to the OS version being free of debugging code. It could also state `'Checked'` which means the OS version uses debugging code, i.e. code that checks arguments, ranges, etc. 

platform.win32_edition()[¶](https://docs.python.org/3/library/platform.html#platform.win32_edition "Link to this definition")
    
Returns a string representing the current Windows edition, or `None` if the value cannot be determined. Possible values include but are not limited to `'Enterprise'`, `'IoTUAP'`, `'ServerStandard'`, and `'nanoserver'`.
Added in version 3.8. 

platform.win32_is_iot()[¶](https://docs.python.org/3/library/platform.html#platform.win32_is_iot "Link to this definition")
    
Return `True` if the Windows edition returned by [`win32_edition()`](https://docs.python.org/3/library/platform.html#platform.win32_edition "platform.win32_edition") is recognized as an IoT edition.
Added in version 3.8.
## macOS Platform[¶](https://docs.python.org/3/library/platform.html#macos-platform "Link to this heading")