Title: Changes in Python 3.13: Time C API Enhancements
URL: https://docs.python.org/3/whatsnew/3.13.html
Summary: This section outlines enhancements to the Time C API in Python 3.13, detailing various functions including `_PyTime_GetPerfCounter()`, `_PyTime_GetSystemClock()`, and constants like `_PyTime_MAX` and `_PyTime_MIN`. The documentation provides links for further exploration of these updates.
---

c-api/time.html#c.PyTime_MonotonicRaw "PyTime_MonotonicRaw");
    * `_PyTime_GetPerfCounter()`: [`PyTime_PerfCounter()`](https://docs.python.org/3/c-api/time.html#c.PyTime_PerfCounter "PyTime_PerfCounter") or [`PyTime_PerfCounterRaw()`](https://docs.python.org/3/c-api/time.html#c.PyTime_PerfCounterRaw "PyTime_PerfCounterRaw");
    * `_PyTime_GetSystemClock()`: [`PyTime_Time()`](https://docs.python.org/3/c-api/time.html#c.PyTime_Time "PyTime_Time") or [`PyTime_TimeRaw()`](https://docs.python.org/3/c-api/time.html#c.PyTime_TimeRaw "PyTime_TimeRaw");
    * `_PyTime_MAX`: [`PyTime_MAX`](https://docs.python.org/3/c-api/time.html#c.PyTime_MAX "PyTime_MAX");
    * `_PyTime_MIN`: [`PyTime_MIN`](https://docs.python.org/3/c-api/time.html#c.PyTime_MIN "PyTime_MIN");
    * `_PyTime_t`: [`PyTime_t`](https://docs.python.org/3/c-api/time.html#c.PyTime_t "PyTime_t");
    * `_Py_HashPointer()`: [`Py_HashPointer()`](https://docs.python.org/3/c-api/hash.html#c.Py_HashPointer "Py_HashPointer");
    * `_Py_IsFinalizing()`: [`Py_IsFinalizing()`](https://docs.python.org/3/c-api/init.html#c.Py_IsFinalizing "Py_IsFinalizing").
The [pythoncapi-compat project](https://github.com/python/pythoncapi-compat/) can be used to get most of these new functions on Python 3.12 and older.


## Regression Test Changes[¶](https://docs.python.org/3/whatsnew/3.13.html#regression-test-changes "Link to this heading")
  * Python built with `configure` [`--with-pydebug`](https://docs.python.org/3/using/configure.html#cmdoption-with-pydebug) now supports a [`-X presite=package.module`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) command-line option. If used, it specifies a module that should be imported early in the lifecycle of the interpreter, before `site.py` is executed. (Contributed by Łukasz Langa in [gh-110769](https://github.com/python/cpython/issues/110769).)


## Notable changes in 3.13.1[¶](https://docs.python.org/3/whatsnew/3.13.html#notable-changes-in-3-13-1 "Link to this heading")
### sys[¶](https://docs.python.org/3/whatsnew/3.13.html#id11 "Link to this heading")
  * The previously undocumented special function [`sys.getobjects()`](https://docs.python.org/3/library/sys.html#sys.getobjects "sys.getobjects"), which only exists in specialized builds of Python, may now return objects from other interpreters than the one it’s called in.