Title: Using MagicMock in Python's unittest.mock
URL: https://docs.python.org/3/library/unittest.mock.html
Summary: This section demonstrates the usage of MagicMock in Python's unittest.mock module. It shows how to create a MagicMock instance, call it with arguments, and access the arguments and keyword arguments used in the call. It also highlights how to extract the name, args, and kwargs from mock calls.
---

```
>>> m = MagicMock(return_value=None)
>>> m(1, 2, 3, arg='one', arg2='two')
>>> kall = m.call_args
>>> kall.args
(1, 2, 3)
>>> kall.kwargs
{'arg': 'one', 'arg2': 'two'}
>>> kall.args is kall[0]
True
>>> kall.kwargs is kall[1]
True

```

>>>```
>>> m = MagicMock()
>>> m.foo(4, 5, 6, arg='two', arg2='three')
<MagicMock name='mock.foo()' id='...'>
>>> kall = m.mock_calls[0]
>>> name, args, kwargs = kall
>>> name
'foo'
>>> args
(4, 5, 6)
>>> kwargs
{'arg': 'two', 'arg2': 'three'}
>>> name is m.mock_calls[0][0]
True

```

### create_autospec[¶](https://docs.python.org/3/library/unittest.mock.html#create-autospec "Link to this heading") 

unittest.mock.create_autospec(_spec_ , _spec_set =False_, _instance =False_, _** kwargs_)[¶](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.create_autospec "Link to this definition")
    
Create a mock object using another object as a spec. Attributes on the mock will use the corresponding attribute on the _spec_ object as their spec.
Functions or methods being mocked will have their arguments checked to ensure that they are called with the correct signature.
If _spec_set_ is `True` then attempting to set attributes that don’t exist on the spec object will raise an [`AttributeError`](https://docs.python.org/3/library/exceptions.html#AttributeError "AttributeError").
If a class is used as a spec then the return value of the mock (the instance of the class) will have the same spec. You can use a class as the spec for an instance object by passing `instance=True`. The returned mock will only be callable if instances of the mock are callable.
[`create_autospec()`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.create_autospec "unittest.mock.create_autospec") also takes arbitrary keyword arguments that are passed to the constructor of the created mock.
See [Autospeccing](https://docs.python.org/3/library/unittest.mock.html#auto-speccing) for examples of how to use auto-speccing with [`create_autospec()`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.create_autospec "unittest.mock.create_autospec") and the _autospec_ argument to [`patch()`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch "unittest.mock.patch").
Changed in version 3.8: [`create_autospec()`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.create_autospec "unittest.mock.create_autospec") now returns an [`AsyncMock`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.AsyncMock "unittest.mock.AsyncMock") if the target is an async function.
### ANY[¶](https://docs.python.org/3/library/unittest.mock.html#any "Link to this heading") 

unittest.mock.ANY[¶](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.ANY "Link to this definition")

Sometimes you may need to make assertions about _some_ of the arguments in a call to mock, but either not care about some of the arguments or want to pull them individually out of [`call_args`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.call_args "unittest.mock.Mock.call_args") and make more complex assertions on them.
To ignore certain arguments you can pass in objects that compare equal to _everything_. Calls to [`assert_called_with()`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_called_with "unittest.mock.Mock.assert_called_with") and [`assert_called_once_with()`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.assert_called_once_with "unittest.mock.Mock.assert_called_once_with") will then succeed no matter what was passed in.
>>>```
>>> mock = Mock(return_value=None)
>>> mock('foo', bar=object())
>>> mock.assert_called_once_with('foo', bar=ANY)

```

[`ANY`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.ANY "unittest.mock.ANY") can also be used in comparisons with call lists like [`mock_calls`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.mock_calls "unittest.mock.Mock.mock_calls"):
>>>```
>>> m = MagicMock(return_value=None)
>>> m(1)
>>> m(1, 2)
>>> m(object())
>>> m.mock_calls == [call(1), call(1, 2), ANY]
True

```

[`ANY`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.ANY "unittest.mock.ANY") is not limited to comparisons with call objects and so can also be used in test assertions:
```
classTestStringMethods(unittest.TestCase):
  deftest_split(self):
    s = 'hello world'
    self.assertEqual(s.split(), ['hello', ANY])