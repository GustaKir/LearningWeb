Title: Python 3.3 Release Notes
URL: https://docs.python.org/3/whatsnew/3.3.html
Summary: The Python 3.3 release introduces several enhancements including a new 'typed' keyword for the functools.lru_cache() decorator, allowing differentiation of cached values based on type. Additionally, the garbage collector can now utilize registered callback functions to run before and after garbage collection. A new compare_digest() function is also introduced in the hmac module.
---

### functools[¶](https://docs.python.org/3/whatsnew/3.3.html#functools "Link to this heading")
The [`functools.lru_cache()`](https://docs.python.org/3/library/functools.html#functools.lru_cache "functools.lru_cache") decorator now accepts a `typed` keyword argument (that defaults to `False` to ensure that it caches values of different types that compare equal in separate cache slots. (Contributed by Raymond Hettinger in [bpo-13227](https://bugs.python.org/issue?@action=redirect&bpo=13227).)
### gc[¶](https://docs.python.org/3/whatsnew/3.3.html#gc "Link to this heading")
It is now possible to register callbacks invoked by the garbage collector before and after collection using the new [`callbacks`](https://docs.python.org/3/library/gc.html#gc.callbacks "gc.callbacks") list.
### hmac[¶](https://docs.python.org/3/whatsnew/3.3.html#hmac "Link to this heading")
A new [`compare_digest()`](https://docs.python.org/3/library/hmac.html#hmac.compare_digest "hmac.compare_digest") function has been added to prevent side channel attacks on digests through timing analysis. (Contributed by Nick Coghlan and Christian Heimes in [bpo-15061](https://bugs.python.org/issue?@action=redirect&bpo=15061).)
### http[¶](https://docs.python.org/3/whatsnew/3.3.html#http "Link to this heading")
[`http.server.BaseHTTPRequestHandler`](https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler "http.server.BaseHTTPRequestHandler") now buffers the headers and writes them all at once when [`end_headers()`](https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.end_headers "http.server.BaseHTTPRequestHandler.end_headers") is called. A new method [`flush_headers()`](https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.flush_headers "http.server.BaseHTTPRequestHandler.flush_headers") can be used to directly manage when the accumulated headers are sent. (Contributed by Andrew Schaaf in [bpo-3709](https://bugs.python.org/issue?@action=redirect&bpo=3709).)
[`http.server`](https://docs.python.org/3/library/http.server.html#module-http.server "http.server: HTTP server and request handlers.") now produces valid `HTML 4.01 strict` output. (Contributed by Ezio Melotti in [bpo-13295](https://bugs.python.org/issue?@action=redirect&bpo=13295).)
[`http.client.HTTPResponse`](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse "http.client.HTTPResponse") now has a [`readinto()`](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.readinto "http.client.HTTPResponse.readinto") method, which means it can be used as an [`io.RawIOBase`](https://docs.python.org/3/library/io.html#io.RawIOBase "io.RawIOBase") class. (Contributed by John Kuhn in [bpo-13464](https://bugs.python.org/issue?@action=redirect&bpo=13464).)
### html[¶](https://docs.python.org/3/whatsnew/3.3.html#html "Link to this heading")
[`html.parser.HTMLParser`](https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser "html.parser.HTMLParser") is now able to parse broken markup without raising errors, therefore the _strict_ argument of the constructor and the `HTMLParseError` exception are now deprecated. The ability to parse broken markup is the result of a number of bug fixes that are also available on the latest bug fix releases of Python 2.7/3.2. (Contributed by Ezio Melotti in [bpo-15114](https://bugs.python.org/issue?@action=redirect&bpo=15114), and [bpo-14538](https://bugs.python.org/issue?@action=redirect&bpo=14538), [bpo-13993](https://bugs.python.org/issue?@action=redirect&bpo=13993), [bpo-13960](https://bugs.python.org/issue?@action=redirect&bpo=13960), [bpo-13358](https://bugs.python.org/issue?@action=redirect&bpo=13358), [bpo-1745761](https://bugs.python.org/issue?@action=redirect&bpo=1745761), [bpo-755670](https://bugs.python.org/issue?@action=redirect&bpo=755670), [bpo-13357](https://bugs.python.org/issue?@action=redirect&bpo=13357), [bpo-12629](https://bugs.python.org/issue?@action=redirect&bpo=12629), [bpo-1200313](https://bugs.python.org/issue?@action=redirect&bpo=1200313), [bpo-670664](https://bugs.python.org/issue?@action=redirect&bpo=670664), [bpo-13273](https://bugs.python.org/issue?@action=redirect&bpo=13273), [bpo-12888](https://bugs.python.org/issue?@action=redirect&bpo=12888), [bpo-7311](https://bugs.python.org/issue?@action=redirect&bpo=7311).)
A new [`html5`](https://docs.python.org/3/library/html.entities.html#html.entities.html5 "html.entities.html5") dictionary that maps HTML5 named character references to the equivalent Unicode character(s) (e.g. `html5['gt;'] == '>'`) has been added to the [`html.entities`](https://docs.python.org/3/library/html.entities.html#module-html.entities "html.entities: Definitions of HTML general entities.") module. The dictionary is now also used by [`HTMLParser`](https://docs.python.org/3/library/html.parser.html#html.parser.HTMLParser "html.parser.HTMLParser"). (Contributed by Ezio Melot