Title: OS Module Functions - Device Number and System Configuration
URL: https://docs.python.org/3/library/os.html
Summary: This chunk describes functions in the os module for handling device numbers and system configuration. The `os.minor` function extracts the minor number from a raw device number, while `os.makedev` composes a raw device number from major and minor numbers. The `os.pathconf` function retrieves system configuration information relevant to a specified file, using names from defined standards and potentially additional platform-specific values.
---

os.minor(_device_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.minor "Link to this definition")
    
Extract the device minor number from a raw device number (usually the `st_dev` or `st_rdev` field from `stat`). 

os.makedev(_major_ , _minor_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.makedev "Link to this definition")
    
Compose a raw device number from the major and minor device numbers. 

os.pathconf(_path_ , _name_)[¶](https://docs.python.org/3/library/os.html#os.pathconf "Link to this definition")
    
Return system configuration information relevant to a named file. _name_ specifies the configuration value to retrieve; it may be a string which is the name of a defined system value; these names are specified in a number of standards (POSIX.1, Unix 95, Unix 98, and others). Some platforms define additional names as well. The names known to the host operating system are given in the `pathconf_names` dictionary. For configuration variables not included in that mapping, passing an integer for _name_ is also accepted.
If _name_ is a string and is not known, [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised. If a specific value for _name_ is not supported by the host system, even if it is included in `pathconf_names`, an [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") is raised with [`errno.EINVAL`](https://docs.python.org/3/library/errno.html#errno.EINVAL "errno.EINVAL") for the error number.
This function can support [specifying a file descriptor](https://docs.python.org/3/library/os.html#path-fd).
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). 

os.pathconf_names[¶](https://docs.python.org/3/library/os.html#os.pathconf_names "Link to this definition")
    
Dictionary mapping names accepted by [`pathconf()`](https://docs.python.org/3/library/os.html#os.pathconf "os.pathconf") and [`fpathconf()`](https://docs.python.org/3/library/os.html#os.fpathconf "os.fpathconf") to the integer values defined for those names by the host operating system. This can be used to determine the set of names known to the system.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix. 

os.readlink(_path_ , _*_ , _dir_fd =None_)[¶](https://docs.python.org/3/library/os.html#os.readlink "Link to this definition")
    
Return a string representing the path to which the symbolic link points. The result may be either an absolute or relative pathname; if it is relative, it may be converted to an absolute pathname using `os.path.join(os.path.dirname(path), result)`.
If the _path_ is a string object (directly or indirectly through a [`PathLike`](https://docs.python.org/3/library/os.html#os.PathLike "os.PathLike") interface), the result will also be a string object, and the call may raise a UnicodeDecodeError. If the _path_ is a bytes object (direct or indirectly), the result will be a bytes object.
This function can also support [paths relative to directory descriptors](https://docs.python.org/3/library/os.html#dir-fd).
When trying to resolve a path that may contain links, use [`realpath()`](https://docs.python.org/3/library/os.path.html#os.path.realpath "os.path.realpath") to properly handle recursion and platform differences.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, Windows.
Changed in version 3.2: Added support for Windows 6.0 (Vista) symbolic links.
Changed in version 3.3: Added the _dir_fd_ parameter.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object) on Unix.
Changed in version 3.8: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object) and a bytes object on Windows.
Added support for directory junctions, and changed to return the substitution path (which typically includes `\\?\` prefix) rather than the optional “print name” field that was previously returned.