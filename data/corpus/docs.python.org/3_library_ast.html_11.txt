Title: Abstract Syntax Trees in Python
URL: https://docs.python.org/3/library/ast.html
Summary: This document section provides examples of using the Python `ast` module to parse and analyze Python code. It includes examples of the `Raise`, `Assert`, and `Delete` nodes, illustrating how to represent code structures as abstract syntax trees.
---

```
>>> print(ast.dump(ast.parse('raise x from y'), indent=4))
Module(
  body=[
    Raise(
      exc=Name(id='x', ctx=Load()),
      cause=Name(id='y', ctx=Load()))])

```


_class_ ast.Assert(_test_ , _msg_)[¶](https://docs.python.org/3/library/ast.html#ast.Assert "Link to this definition")
    
An assertion. `test` holds the condition, such as a [`Compare`](https://docs.python.org/3/library/ast.html#ast.Compare "ast.Compare") node. `msg` holds the failure message.
>>>```
>>> print(ast.dump(ast.parse('assert x,y'), indent=4))
Module(
  body=[
    Assert(
      test=Name(id='x', ctx=Load()),
      msg=Name(id='y', ctx=Load()))])

```


_class_ ast.Delete(_targets_)[¶](https://docs.python.org/3/library/ast.html#ast.Delete "Link to this definition")
    
Represents a `del` statement. `targets` is a list of nodes, such as [`Name`](https://docs.python.org/3/library/ast.html#ast.Name "ast.Name"), [`Attribute`](https://docs.python.org/3/library/ast.html#ast.Attribute "ast.Attribute") or [`Subscript`](https://docs.python.org/3/library/ast.html#ast.Subscript "ast.Subscript") nodes.
>>>```
>>> print(ast.dump(ast.parse('del x,y,z'), indent=4))
Module(
  body=[
    Delete(
      targets=[
        Name(id='x', ctx=Del()),
        Name(id='y', ctx=Del()),
        Name(id='z', ctx=Del())])])

```


_class_ ast.Pass[¶](https://docs.python.org/3/library/ast.html#ast.Pass "Link to this definition")
    
A `pass` statement.
>>>```
>>> print(ast.dump(ast.parse('pass'), indent=4))
Module(
  body=[
    Pass()])

```


_class_ ast.TypeAlias(_name_ , _type_params_ , _value_)[¶](https://docs.python.org/3/library/ast.html#ast.TypeAlias "Link to this definition")
    
A [type alias](https://docs.python.org/3/library/typing.html#type-aliases) created through the [`type`](https://docs.python.org/3/reference/simple_stmts.html#type) statement. `name` is the name of the alias, `type_params` is a list of [type parameters](https://docs.python.org/3/library/ast.html#ast-type-params), and `value` is the value of the type alias.
>>>```
>>> print(ast.dump(ast.parse('type Alias = int'), indent=4))
Module(
  body=[
    TypeAlias(
      name=Name(id='Alias', ctx=Store()),
      value=Name(id='int', ctx=Load()))])

```

Added in version 3.12.
Other statements which are only applicable inside functions or loops are described in other sections.
#### Imports[¶](https://docs.python.org/3/library/ast.html#imports "Link to this heading") 

_class_ ast.Import(_names_)[¶](https://docs.python.org/3/library/ast.html#ast.Import "Link to this definition")
    
An import statement. `names` is a list of [`alias`](https://docs.python.org/3/library/ast.html#ast.alias "ast.alias") nodes.
>>>```
>>> print(ast.dump(ast.parse('import x,y,z'), indent=4))
Module(
  body=[
    Import(
      names=[
        alias(name='x'),
        alias(name='y'),
        alias(name='z')])])

```


_class_ ast.ImportFrom(_module_ , _names_ , _level_)[¶](https://docs.python.org/3/library/ast.html#ast.ImportFrom "Link to this definition")
    
Represents `from x import y`. `module` is a raw string of the ‘from’ name, without any leading dots, or `None` for statements such as `from . import foo`. `level` is an integer holding the level of the relative import (0 means absolute import).
>>>```
>>> print(ast.dump(ast.parse('from y import x,y,z'), indent=4))
Module(
  body=[
    ImportFrom(
      module='y',
      names=[
        alias(name='x'),
        alias(name='y'),
        alias(name='z')],
      level=0)])

```


_class_ ast.alias(_name_ , _asname_)[¶](https://docs.python.org/3/library/ast.html#ast.alias "Link to this definition")
    
Both parameters are raw strings of the names. `asname` can be `None` if the regular name is to be used.
>>>```
>>> print(ast.dump(ast.parse('from ..foo.bar import a as b, c'), indent=4))
Module(
  body=[
    ImportFrom(
      module='foo.bar',
      names=[
        alias(name='a', asname='b'),
        alias(name='c')],
      level=2)])

```

### Control flow[¶](https://docs.python.org/3/library/ast.html#control-flow "Link to this heading")
Note
Optional clauses such as `else` are stored as an empty list if they’re not present. 

_class_ ast.If(_test_ , _body_ , _orelse_)[¶](https://docs.python.org/3/library/ast.html#ast.If "Link to this definition")
    
An `if` statement. `test` holds a single node, such as a [`Compare`](https://docs.python.org/3/library/ast.html#ast.Compare "ast.Compare") node. `body` and `orelse` each hold a list of nodes.
`elif` clauses don’t have a special representation in the AST, but rather appear as extra [`If`](https://docs.python.org/3/library/ast.html#ast.If "ast.If") nodes within the `orelse` section of the previous one.
>>>