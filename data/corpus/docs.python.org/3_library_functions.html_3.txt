Title: bool() Function in Python
URL: https://docs.python.org/3/library/functions.html
Summary: The `bool()` function returns a Boolean value (`True` or `False`) based on the truth testing of its argument. If omitted or falsely evaluated, it returns `False`; otherwise, it returns `True`. The `bool` class is a subclass of `int` and cannot be subclassed; its only instances are `False` and `True`. Notably, this function has been updated in version 3.7 regarding parameter positioning.
---

```

See also [`format()`](https://docs.python.org/3/library/functions.html#format "format") for more information. 

_class_ bool(_object =False_, _/_)[¶](https://docs.python.org/3/library/functions.html#bool "Link to this definition")
    
Return a Boolean value, i.e. one of `True` or `False`. The argument is converted using the standard [truth testing procedure](https://docs.python.org/3/library/stdtypes.html#truth). If the argument is false or omitted, this returns `False`; otherwise, it returns `True`. The [`bool`](https://docs.python.org/3/library/functions.html#bool "bool") class is a subclass of [`int`](https://docs.python.org/3/library/functions.html#int "int") (see [Numeric Types — int, float, complex](https://docs.python.org/3/library/stdtypes.html#typesnumeric)). It cannot be subclassed further. Its only instances are `False` and `True` (see [Boolean Type - bool](https://docs.python.org/3/library/stdtypes.html#typebool)).
Changed in version 3.7: The parameter is now positional-only. 

breakpoint(_* args_, _** kws_)[¶](https://docs.python.org/3/library/functions.html#breakpoint "Link to this definition")
    
This function drops you into the debugger at the call site. Specifically, it calls [`sys.breakpointhook()`](https://docs.python.org/3/library/sys.html#sys.breakpointhook "sys.breakpointhook"), passing `args` and `kws` straight through. By default, `sys.breakpointhook()` calls [`pdb.set_trace()`](https://docs.python.org/3/library/pdb.html#pdb.set_trace "pdb.set_trace") expecting no arguments. In this case, it is purely a convenience function so you don’t have to explicitly import [`pdb`](https://docs.python.org/3/library/pdb.html#module-pdb "pdb: The Python debugger for interactive interpreters.") or type as much code to enter the debugger. However, [`sys.breakpointhook()`](https://docs.python.org/3/library/sys.html#sys.breakpointhook "sys.breakpointhook") can be set to some other function and [`breakpoint()`](https://docs.python.org/3/library/functions.html#breakpoint "breakpoint") will automatically call that, allowing you to drop into the debugger of choice. If [`sys.breakpointhook()`](https://docs.python.org/3/library/sys.html#sys.breakpointhook "sys.breakpointhook") is not accessible, this function will raise [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError").
By default, the behavior of [`breakpoint()`](https://docs.python.org/3/library/functions.html#breakpoint "breakpoint") can be changed with the [`PYTHONBREAKPOINT`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONBREAKPOINT) environment variable. See [`sys.breakpointhook()`](https://docs.python.org/3/library/sys.html#sys.breakpointhook "sys.breakpointhook") for usage details.
Note that this is not guaranteed if [`sys.breakpointhook()`](https://docs.python.org/3/library/sys.html#sys.breakpointhook "sys.breakpointhook") has been replaced.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `builtins.breakpoint` with argument `breakpointhook`.
Added in version 3.7. 

_class_ bytearray(_source =b''_)


_class_ bytearray(_source_ , _encoding_)


_class_ bytearray(_source_ , _encoding_ , _errors_)
    
Return a new array of bytes. The [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") class is a mutable sequence of integers in the range 0 <= x < 256. It has most of the usual methods of mutable sequences, described in [Mutable Sequence Types](https://docs.python.org/3/library/stdtypes.html#typesseq-mutable), as well as most methods that the [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") type has, see [Bytes and Bytearray Operations](https://docs.python.org/3/library/stdtypes.html#bytes-methods).
The optional _source_ parameter can be used to initialize the array in a few different ways:
  * If it is a _string_ , you must also give the _encoding_ (and optionally, _errors_) parameters; [`bytearray()`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") then converts the string to bytes using [`str.encode()`](https://docs.python.org/3/library/stdtypes.html#str.encode "str.encode").
  * If it is an _integer_ , the array will have that size and will be initialized with null bytes.
  * If it is an object conforming to the [buffer interface](https://docs.python.org/3/c-api/buffer.html#bufferobjects), a read-only buffer of the object will be used to initialize the bytes array.
  * If it is an _iterable_ , it must be an iterable of integers in the range `0 <= x < 256`, which are used as the initial contents of the array.


Without an argument, an array of size 0 is created.
See also [Binary Sequence Types — bytes, bytearray, memoryview](https://docs.python.org/3/library/stdtypes.html#binaryseq) and [Bytearray Objects](https://docs.python.org/3/library/stdtypes.html#typebytearray). 

_class_ bytes(_source =b''_)


_class_ bytes(_source_ , _encoding_)