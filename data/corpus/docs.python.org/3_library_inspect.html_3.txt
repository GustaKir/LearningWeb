Title: Generator and Coroutine Functions in Python Inspect Module
URL: https://docs.python.org/3/library/inspect.html
Summary: This section describes the functions `inspect.isgeneratorfunction`, `inspect.isgenerator`, and `inspect.iscoroutinefunction`, which are used to determine if an object is a Python generator function, a generator, or a coroutine function, respectively. Notable changes in versions 3.8 and 3.13 are mentioned, where the behavior of `functools.partial()` and `functools.partialmethod()` was updated to recognize generator functions.
---

inspect.isgeneratorfunction(_object_)[¶](https://docs.python.org/3/library/inspect.html#inspect.isgeneratorfunction "Link to this definition")
    
Return `True` if the object is a Python generator function.
Changed in version 3.8: Functions wrapped in [`functools.partial()`](https://docs.python.org/3/library/functools.html#functools.partial "functools.partial") now return `True` if the wrapped function is a Python generator function.
Changed in version 3.13: Functions wrapped in [`functools.partialmethod()`](https://docs.python.org/3/library/functools.html#functools.partialmethod "functools.partialmethod") now return `True` if the wrapped function is a Python generator function. 

inspect.isgenerator(_object_)[¶](https://docs.python.org/3/library/inspect.html#inspect.isgenerator "Link to this definition")
    
Return `True` if the object is a generator. 

inspect.iscoroutinefunction(_object_)[¶](https://docs.python.org/3/library/inspect.html#inspect.iscoroutinefunction "Link to this definition")
    
Return `True` if the object is a [coroutine function](https://docs.python.org/3/glossary.html#term-coroutine-function) (a function defined with an [`async def`](https://docs.python.org/3/reference/compound_stmts.html#async-def) syntax), a [`functools.partial()`](https://docs.python.org/3/library/functools.html#functools.partial "functools.partial") wrapping a [coroutine function](https://docs.python.org/3/glossary.html#term-coroutine-function), or a sync function marked with [`markcoroutinefunction()`](https://docs.python.org/3/library/inspect.html#inspect.markcoroutinefunction "inspect.markcoroutinefunction").
Added in version 3.5.
Changed in version 3.8: Functions wrapped in [`functools.partial()`](https://docs.python.org/3/library/functools.html#functools.partial "functools.partial") now return `True` if the wrapped function is a [coroutine function](https://docs.python.org/3/glossary.html#term-coroutine-function).
Changed in version 3.12: Sync functions marked with [`markcoroutinefunction()`](https://docs.python.org/3/library/inspect.html#inspect.markcoroutinefunction "inspect.markcoroutinefunction") now return `True`.
Changed in version 3.13: Functions wrapped in [`functools.partialmethod()`](https://docs.python.org/3/library/functools.html#functools.partialmethod "functools.partialmethod") now return `True` if the wrapped function is a [coroutine function](https://docs.python.org/3/glossary.html#term-coroutine-function). 

inspect.markcoroutinefunction(_func_)[¶](https://docs.python.org/3/library/inspect.html#inspect.markcoroutinefunction "Link to this definition")
    
Decorator to mark a callable as a [coroutine function](https://docs.python.org/3/glossary.html#term-coroutine-function) if it would not otherwise be detected by [`iscoroutinefunction()`](https://docs.python.org/3/library/inspect.html#inspect.iscoroutinefunction "inspect.iscoroutinefunction").
This may be of use for sync functions that return a [coroutine](https://docs.python.org/3/glossary.html#term-coroutine), if the function is passed to an API that requires [`iscoroutinefunction()`](https://docs.python.org/3/library/inspect.html#inspect.iscoroutinefunction "inspect.iscoroutinefunction").
When possible, using an [`async def`](https://docs.python.org/3/reference/compound_stmts.html#async-def) function is preferred. Also acceptable is calling the function and testing the return with [`iscoroutine()`](https://docs.python.org/3/library/inspect.html#inspect.iscoroutine "inspect.iscoroutine").
Added in version 3.12. 

inspect.iscoroutine(_object_)[¶](https://docs.python.org/3/library/inspect.html#inspect.iscoroutine "Link to this definition")
    
Return `True` if the object is a [coroutine](https://docs.python.org/3/glossary.html#term-coroutine) created by an [`async def`](https://docs.python.org/3/reference/compound_stmts.html#async-def) function.
Added in version 3.5. 

inspect.isawaitable(_object_)[¶](https://docs.python.org/3/library/inspect.html#inspect.isawaitable "Link to this definition")
    
Return `True` if the object can be used in [`await`](https://docs.python.org/3/reference/expressions.html#await) expression.
Can also be used to distinguish generator-based coroutines from regular generators:
```
importtypes
defgen():
  yield
@types.coroutine
defgen_coro():
  yield
assert not isawaitable(gen())
assert isawaitable(gen_coro())

```

Added in version 3.5. 

inspect.isasyncgenfunction(_object_)[¶](https://docs.python.org/3/library/inspect.html#inspect.isasyncgenfunction "Link to this definition")
    
Return `True` if the object is an [asynchronous generator](https://docs.python.org/3/glossary.html#term-asynchronous-generator) function, for example:
>>>```
>>> async defagen():
...   yield 1
...
>>> inspect.isasyncgenfunction(agen)
True