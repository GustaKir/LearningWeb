Title: PyTypeObject.tp_bases Field in Python C API
URL: https://docs.python.org/3/c-api/typeobj.html
Summary: The `tp_bases` field within the `PyTypeObject` structure is a tuple of base types that should be set to NULL and treated as read-only, with Python assigning values during type initialization. This slot is inherited by subtypes and lacks a default value; if NULL, `Py_TPFLAGS_HAVE_GC` serves as a functional equivalent.
---

```

(The only example of this are types themselves. The metatype, [`PyType_Type`](https://docs.python.org/3/c-api/type.html#c.PyType_Type "PyType_Type"), defines this function to distinguish between statically and [dynamically allocated types](https://docs.python.org/3/c-api/typeobj.html#heap-types).)
**Inheritance:**
This field is inherited by subtypes.
**Default:**
This slot has no default. If this field is `NULL`, [`Py_TPFLAGS_HAVE_GC`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_HAVE_GC "Py_TPFLAGS_HAVE_GC") is used as the functional equivalent. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*[PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject").tp_bases[¶](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_bases "Link to this definition")
    
Tuple of base types.
This field should be set to `NULL` and treated as read-only. Python will fill it in when the type is [`initialized`](https://docs.python.org/3/c-api/type.html#c.PyType_Ready "PyType_Ready").
For dynamically created classes, the `Py_tp_bases` [`slot`](https://docs.python.org/3/c-api/type.html#c.PyType_Slot "PyType_Slot") can be used instead of the _bases_ argument of [`PyType_FromSpecWithBases()`](https://docs.python.org/3/c-api/type.html#c.PyType_FromSpecWithBases "PyType_FromSpecWithBases"). The argument form is preferred.
Warning
Multiple inheritance does not work well for statically defined types. If you set `tp_bases` to a tuple, Python will not raise an error, but some slots will only be inherited from the first base.
**Inheritance:**
This field is not inherited. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*[PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject").tp_mro[¶](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_mro "Link to this definition")
    
Tuple containing the expanded set of base types, starting with the type itself and ending with [`object`](https://docs.python.org/3/library/functions.html#object "object"), in Method Resolution Order.
This field should be set to `NULL` and treated as read-only. Python will fill it in when the type is [`initialized`](https://docs.python.org/3/c-api/type.html#c.PyType_Ready "PyType_Ready").
**Inheritance:**
This field is not inherited; it is calculated fresh by [`PyType_Ready()`](https://docs.python.org/3/c-api/type.html#c.PyType_Ready "PyType_Ready"). 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*[PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject").tp_cache[¶](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_cache "Link to this definition")
    
Unused. Internal use only.
**Inheritance:**
This field is not inherited. 

void*[PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject").tp_subclasses[¶](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_subclasses "Link to this definition")
    
A collection of subclasses. Internal use only. May be an invalid pointer.
To get a list of subclasses, call the Python method [`__subclasses__()`](https://docs.python.org/3/reference/datamodel.html#type.__subclasses__ "type.__subclasses__").
Changed in version 3.12: For some types, this field does not hold a valid [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*. The type was changed to void* to indicate this.
**Inheritance:**
This field is not inherited. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*[PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject").tp_weaklist[¶](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_weaklist "Link to this definition")
    
Weak reference list head, for weak references to this type object. Not inherited. Internal use only.
Changed in version 3.12: Internals detail: For the static builtin types this is always `NULL`, even if weakrefs are added. Instead, the weakrefs for each are stored on `PyInterpreterState`. Use the public C-API or the internal `_PyObject_GET_WEAKREFS_LISTPTR()` macro to avoid the distinction.
**Inheritance:**
This field is not inherited. 

[destructor](https://docs.python.org/3/c-api/typeobj.html#c.destructor "destructor")[PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject").tp_del[¶](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_del "Link to this definition")
    
This field is deprecated. Use [`tp_finalize`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_finalize "PyTypeObject.tp_finalize") instead.