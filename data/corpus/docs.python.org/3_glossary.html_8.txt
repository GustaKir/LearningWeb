Title: EAFP and Expression in Python
URL: https://docs.python.org/3/glossary.html
Summary: The document explains EAFP (Easier to Ask for Forgiveness than Permission), a Python coding style that relies on catching exceptions for invalid keys or attributes, contrasting it with the LBYL (Look Before You Leap) style. It also defines an expression as a syntax piece evaluated to a value, composed of elements like literals and operators.
---

EAFP[¶](https://docs.python.org/3/glossary.html#term-EAFP "Link to this term")
    
Easier to ask for forgiveness than permission. This common Python coding style assumes the existence of valid keys or attributes and catches exceptions if the assumption proves false. This clean and fast style is characterized by the presence of many [`try`](https://docs.python.org/3/reference/compound_stmts.html#try) and [`except`](https://docs.python.org/3/reference/compound_stmts.html#except) statements. The technique contrasts with the [LBYL](https://docs.python.org/3/glossary.html#term-LBYL) style common to many other languages such as C. 

expression[¶](https://docs.python.org/3/glossary.html#term-expression "Link to this term")
    
A piece of syntax which can be evaluated to some value. In other words, an expression is an accumulation of expression elements like literals, names, attribute access, operators or function calls which all return a value. In contrast to many other languages, not all language constructs are expressions. There are also [statement](https://docs.python.org/3/glossary.html#term-statement)s which cannot be used as expressions, such as [`while`](https://docs.python.org/3/reference/compound_stmts.html#while). Assignments are also statements, not expressions. 

extension module[¶](https://docs.python.org/3/glossary.html#term-extension-module "Link to this term")
    
A module written in C or C++, using Python’s C API to interact with the core and with user code. 

f-string[¶](https://docs.python.org/3/glossary.html#term-f-string "Link to this term")
    
String literals prefixed with `'f'` or `'F'` are commonly called “f-strings” which is short for [formatted string literals](https://docs.python.org/3/reference/lexical_analysis.html#f-strings). See also [**PEP 498**](https://peps.python.org/pep-0498/). 

file object[¶](https://docs.python.org/3/glossary.html#term-file-object "Link to this term")
    
An object exposing a file-oriented API (with methods such as `read()` or `write()`) to an underlying resource. Depending on the way it was created, a file object can mediate access to a real on-disk file or to another type of storage or communication device (for example standard input/output, in-memory buffers, sockets, pipes, etc.). File objects are also called _file-like objects_ or _streams_.
There are actually three categories of file objects: raw [binary files](https://docs.python.org/3/glossary.html#term-binary-file), buffered [binary files](https://docs.python.org/3/glossary.html#term-binary-file) and [text files](https://docs.python.org/3/glossary.html#term-text-file). Their interfaces are defined in the [`io`](https://docs.python.org/3/library/io.html#module-io "io: Core tools for working with streams.") module. The canonical way to create a file object is by using the [`open()`](https://docs.python.org/3/library/functions.html#open "open") function. 

file-like object[¶](https://docs.python.org/3/glossary.html#term-file-like-object "Link to this term")
    
A synonym for [file object](https://docs.python.org/3/glossary.html#term-file-object). 

filesystem encoding and error handler[¶](https://docs.python.org/3/glossary.html#term-filesystem-encoding-and-error-handler "Link to this term")
    
Encoding and error handler used by Python to decode bytes from the operating system and encode Unicode to the operating system.
The filesystem encoding must guarantee to successfully decode all bytes below 128. If the file system encoding fails to provide this guarantee, API functions can raise [`UnicodeError`](https://docs.python.org/3/library/exceptions.html#UnicodeError "UnicodeError").
The [`sys.getfilesystemencoding()`](https://docs.python.org/3/library/sys.html#sys.getfilesystemencoding "sys.getfilesystemencoding") and [`sys.getfilesystemencodeerrors()`](https://docs.python.org/3/library/sys.html#sys.getfilesystemencodeerrors "sys.getfilesystemencodeerrors") functions can be used to get the filesystem encoding and error handler.
The [filesystem encoding and error handler](https://docs.python.org/3/glossary.html#term-filesystem-encoding-and-error-handler) are configured at Python startup by the [`PyConfig_Read()`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig_Read "PyConfig_Read") function: see [`filesystem_encoding`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.filesystem_encoding "PyConfig.filesystem_encoding") and [`filesystem_errors`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.filesystem_errors "PyConfig.filesystem_errors") members of [`PyConfig`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig "PyConfig").
See also the [locale encoding](https://docs.python.org/3/glossary.html#term-locale-encoding).