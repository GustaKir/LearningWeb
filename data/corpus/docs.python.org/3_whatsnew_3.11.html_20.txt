Title: Changes to typing in Python 3.11
URL: https://docs.python.org/3/whatsnew/3.11.html
Summary: Python 3.11 introduces significant updates to type hints, including the addition of `typing.assert_never()` for confirming unreachable code and `typing.Never` for indicating types that should never occur. It also includes `typing.reveal_type()` for revealing the type of an expression.
---

### typing[Â¶](https://docs.python.org/3/whatsnew/3.11.html#typing "Link to this heading")
For major changes, see [New Features Related to Type Hints](https://docs.python.org/3/whatsnew/3.11.html#new-feat-related-type-hints-311).
  * Add [`typing.assert_never()`](https://docs.python.org/3/library/typing.html#typing.assert_never "typing.assert_never") and [`typing.Never`](https://docs.python.org/3/library/typing.html#typing.Never "typing.Never"). [`typing.assert_never()`](https://docs.python.org/3/library/typing.html#typing.assert_never "typing.assert_never") is useful for asking a type checker to confirm that a line of code is not reachable. At runtime, it raises an [`AssertionError`](https://docs.python.org/3/library/exceptions.html#AssertionError "AssertionError"). (Contributed by Jelle Zijlstra in [gh-90633](https://github.com/python/cpython/issues/90633).)
  * Add [`typing.reveal_type()`](https://docs.python.org/3/library/typing.html#typing.reveal_type "typing.reveal_type"). This is useful for asking a type checker what type it has inferred for a given expression. At runtime it prints the type of the received value. (Contributed by Jelle Zijlstra in [gh-90572](https://github.com/python/cpython/issues/90572).)
  * Add [`typing.assert_type()`](https://docs.python.org/3/library/typing.html#typing.assert_type "typing.assert_type"). This is useful for asking a type checker to confirm that the type it has inferred for a given expression matches the given type. At runtime it simply returns the received value. (Contributed by Jelle Zijlstra in [gh-90638](https://github.com/python/cpython/issues/90638).)
  * [`typing.TypedDict`](https://docs.python.org/3/library/typing.html#typing.TypedDict "typing.TypedDict") types can now be generic. (Contributed by Samodya Abeysiriwardane in [gh-89026](https://github.com/python/cpython/issues/89026).)
  * [`NamedTuple`](https://docs.python.org/3/library/typing.html#typing.NamedTuple "typing.NamedTuple") types can now be generic. (Contributed by Serhiy Storchaka in [bpo-43923](https://bugs.python.org/issue?@action=redirect&bpo=43923).)
  * Allow subclassing of [`typing.Any`](https://docs.python.org/3/library/typing.html#typing.Any "typing.Any"). This is useful for avoiding type checker errors related to highly dynamic class, such as mocks. (Contributed by Shantanu Jain in [gh-91154](https://github.com/python/cpython/issues/91154).)
  * The [`typing.final()`](https://docs.python.org/3/library/typing.html#typing.final "typing.final") decorator now sets the `__final__` attributed on the decorated object. (Contributed by Jelle Zijlstra in [gh-90500](https://github.com/python/cpython/issues/90500).)
  * The [`typing.get_overloads()`](https://docs.python.org/3/library/typing.html#typing.get_overloads "typing.get_overloads") function can be used for introspecting the overloads of a function. [`typing.clear_overloads()`](https://docs.python.org/3/library/typing.html#typing.clear_overloads "typing.clear_overloads") can be used to clear all registered overloads of a function. (Contributed by Jelle Zijlstra in [gh-89263](https://github.com/python/cpython/issues/89263).)
  * The [`__init__()`](https://docs.python.org/3/reference/datamodel.html#object.__init__ "object.__init__") method of [`Protocol`](https://docs.python.org/3/library/typing.html#typing.Protocol "typing.Protocol") subclasses is now preserved. (Contributed by Adrian Garcia Badarasco in [gh-88970](https://github.com/python/cpython/issues/88970).)
  * The representation of empty tuple types (`Tuple[()]`) is simplified. This affects introspection, e.g. `get_args(Tuple[()])` now evaluates to `()` instead of `((),)`. (Contributed by Serhiy Storchaka in [gh-91137](https://github.com/python/cpython/issues/91137).)
  * Loosen runtime requirements for type annotations by removing the callable check in the private `typing._type_check` function. (Contributed by Gregory Beauregard in [gh-90802](https://github.com/python/cpython/issues/90802).)
  * [`typing.get_type_hints()`](https://docs.python.org/3/library/typing.html#typing.get_type_hints "typing.get_type_hints") now supports evaluating strings as forward references in [PEP 585 generic aliases](https://docs.python.org/3/library/stdtypes.html#types-genericalias). (Contributed by Niklas Rosenstein in [gh-85542](https://github.com/python/cpython/issues/85542).)
  * [`typing.get_type_hints()`](https://docs.python.org/3/library/typing.html#typing.get_type_hints "typing.get_type_hints") no longer adds [`Optional`](https://docs.python.org/3/library/typing.html#typing.Optional "typing.Optional") to parameters with `None` as a default. (Contributed by Nikita Sobolev in [gh-90353](https://github.com/python/cpython/issues/90353).)
  * [`typing.get_type_hints()`](https://docs.python.org/3/library/typing.html#typing.get_type_hints "typing.get_type_hints") now supports evaluating bare stringified [`ClassVar`](https://docs.python.org/3/library/typing.html#typing.ClassVar "typing.ClassVar") annota