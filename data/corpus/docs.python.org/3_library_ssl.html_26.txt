Title: Changes to SSLContext in Python SSL Library
URL: https://docs.python.org/3/library/ssl.html
Summary: This document highlights updates to the SSLContext class in Python's SSL library, including changes in version 3.7 regarding the `verify_mode` property when hostname checking is enabled, and introduces the `keylog_filename` attribute for logging TLS keys for debugging purposes.
---

```

Added in version 3.4.
Changed in version 3.7: [`verify_mode`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.verify_mode "ssl.SSLContext.verify_mode") is now automatically changed to [`CERT_REQUIRED`](https://docs.python.org/3/library/ssl.html#ssl.CERT_REQUIRED "ssl.CERT_REQUIRED") when hostname checking is enabled and [`verify_mode`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.verify_mode "ssl.SSLContext.verify_mode") is [`CERT_NONE`](https://docs.python.org/3/library/ssl.html#ssl.CERT_NONE "ssl.CERT_NONE"). Previously the same operation would have failed with a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError"). 

SSLContext.keylog_filename[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.keylog_filename "Link to this definition")
    
Write TLS keys to a keylog file, whenever key material is generated or received. The keylog file is designed for debugging purposes only. The file format is specified by NSS and used by many traffic analyzers such as Wireshark. The log file is opened in append-only mode. Writes are synchronized between threads, but not between processes.
Added in version 3.8. 

SSLContext.maximum_version[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.maximum_version "Link to this definition")
    
A [`TLSVersion`](https://docs.python.org/3/library/ssl.html#ssl.TLSVersion "ssl.TLSVersion") enum member representing the highest supported TLS version. The value defaults to [`TLSVersion.MAXIMUM_SUPPORTED`](https://docs.python.org/3/library/ssl.html#ssl.TLSVersion.MAXIMUM_SUPPORTED "ssl.TLSVersion.MAXIMUM_SUPPORTED"). The attribute is read-only for protocols other than [`PROTOCOL_TLS`](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS "ssl.PROTOCOL_TLS"), [`PROTOCOL_TLS_CLIENT`](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS_CLIENT "ssl.PROTOCOL_TLS_CLIENT"), and [`PROTOCOL_TLS_SERVER`](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS_SERVER "ssl.PROTOCOL_TLS_SERVER").
The attributes [`maximum_version`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.maximum_version "ssl.SSLContext.maximum_version"), [`minimum_version`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.minimum_version "ssl.SSLContext.minimum_version") and [`SSLContext.options`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.options "ssl.SSLContext.options") all affect the supported SSL and TLS versions of the context. The implementation does not prevent invalid combination. For example a context with [`OP_NO_TLSv1_2`](https://docs.python.org/3/library/ssl.html#ssl.OP_NO_TLSv1_2 "ssl.OP_NO_TLSv1_2") in [`options`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.options "ssl.SSLContext.options") and [`maximum_version`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.maximum_version "ssl.SSLContext.maximum_version") set to [`TLSVersion.TLSv1_2`](https://docs.python.org/3/library/ssl.html#ssl.TLSVersion.TLSv1_2 "ssl.TLSVersion.TLSv1_2") will not be able to establish a TLS 1.2 connection.
Added in version 3.7. 

SSLContext.minimum_version[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.minimum_version "Link to this definition")
    
Like [`SSLContext.maximum_version`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.maximum_version "ssl.SSLContext.maximum_version") except it is the lowest supported version or [`TLSVersion.MINIMUM_SUPPORTED`](https://docs.python.org/3/library/ssl.html#ssl.TLSVersion.MINIMUM_SUPPORTED "ssl.TLSVersion.MINIMUM_SUPPORTED").
Added in version 3.7. 

SSLContext.num_tickets[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.num_tickets "Link to this definition")
    
Control the number of TLS 1.3 session tickets of a [`PROTOCOL_TLS_SERVER`](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS_SERVER "ssl.PROTOCOL_TLS_SERVER") context. The setting has no impact on TLS 1.0 to 1.2 connections.
Added in version 3.8. 

SSLContext.options[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.options "Link to this definition")
    
An integer representing the set of SSL options enabled on this context. The default value is [`OP_ALL`](https://docs.python.org/3/library/ssl.html#ssl.OP_ALL "ssl.OP_ALL"), but you can specify other options such as [`OP_NO_SSLv2`](https://docs.python.org/3/library/ssl.html#ssl.OP_NO_SSLv2 "ssl.OP_NO_SSLv2") by ORing them together.
Changed in version 3.6: [`SSLContext.options`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.options "ssl.SSLContext.options") returns [`Options`](https://docs.python.org/3/library/ssl.html#ssl.Options "ssl.Options") flags:
>>>```
>>> ssl.create_default_context().options
<Options.OP_ALL|OP_NO_SSLv3|OP_NO_SSLv2|OP_NO_COMPRESSION: 2197947391>