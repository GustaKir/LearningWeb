Title: Numeric Types in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This section covers the creation and representation of different numeric types in Python, including integers, floating-point numbers, and complex numbers. It highlights the use of numeric literals and built-in functions to create these types, detailing how to represent each type, including the use of fractional and decimal types for precision.
---

rts from a complex number _z_ , use `z.real` and `z.imag`. (The standard library includes the additional numeric types [`fractions.Fraction`](https://docs.python.org/3/library/fractions.html#fractions.Fraction "fractions.Fraction"), for rationals, and [`decimal.Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal"), for floating-point numbers with user-definable precision.)
Numbers are created by numeric literals or as the result of built-in functions and operators. Unadorned integer literals (including hex, octal and binary numbers) yield integers. Numeric literals containing a decimal point or an exponent sign yield floating-point numbers. Appending `'j'` or `'J'` to a numeric literal yields an imaginary number (a complex number with a zero real part) which you can add to an integer or float to get a complex number with real and imaginary parts.
Python fully supports mixed arithmetic: when a binary arithmetic operator has operands of different numeric types, the operand with the “narrower” type is widened to that of the other, where integer is narrower than floating point, which is narrower than complex. A comparison between numbers of different types behaves as though the exact values of those numbers were being compared. [[2]](https://docs.python.org/3/library/stdtypes.html#id13)
The constructors [`int()`](https://docs.python.org/3/library/functions.html#int "int"), [`float()`](https://docs.python.org/3/library/functions.html#float "float"), and [`complex()`](https://docs.python.org/3/library/functions.html#complex "complex") can be used to produce numbers of a specific type.
All numeric types (except complex) support the following operations (for priorities of the operations, see [Operator precedence](https://docs.python.org/3/reference/expressions.html#operator-summary)):
Operation | Result | Notes | Full documentation  
---|---|---|---  
`x + y` | sum of _x_ and _y_ |  |   
`x - y` | difference of _x_ and _y_ |  |   
`x * y` | product of _x_ and _y_ |  |   
`x / y` | quotient of _x_ and _y_ |  |   
`x // y` | floored quotient of _x_ and _y_ | (1)(2) |   
`x % y` | remainder of `x / y` | (2) |   
`-x` | _x_ negated |  |   
`+x` | _x_ unchanged |  |   
`abs(x)` | absolute value or magnitude of _x_ |  | [`abs()`](https://docs.python.org/3/library/functions.html#abs "abs")  
`int(x)` | _x_ converted to integer | (3)(6) | [`int()`](https://docs.python.org/3/library/functions.html#int "int")  
`float(x)` | _x_ converted to floating point | (4)(6) | [`float()`](https://docs.python.org/3/library/functions.html#float "float")  
`complex(re, im)` | a complex number with real part _re_ , imaginary part _im_. _im_ defaults to zero. | (6) | [`complex()`](https://docs.python.org/3/library/functions.html#complex "complex")  
`c.conjugate()` | conjugate of the complex number _c_ |  |   
`divmod(x, y)` | the pair `(x // y, x % y)` | (2) | [`divmod()`](https://docs.python.org/3/library/functions.html#divmod "divmod")  
`pow(x, y)` | _x_ to the power _y_ | (5) | [`pow()`](https://docs.python.org/3/library/functions.html#pow "pow")  
`x ** y` | _x_ to the power _y_ | (5) |   
Notes:
  1. Also referred to as integer division. For operands of type [`int`](https://docs.python.org/3/library/functions.html#int "int"), the result has type [`int`](https://docs.python.org/3/library/functions.html#int "int"). For operands of type [`float`](https://docs.python.org/3/library/functions.html#float "float"), the result has type [`float`](https://docs.python.org/3/library/functions.html#float "float"). In general, the result is a whole integer, though the result’s type is not necessarily [`int`](https://docs.python.org/3/library/functions.html#int "int"). The result is always rounded towards minus infinity: `1//2` is `0`, `(-1)//2` is `-1`, `1//(-2)` is `-1`, and `(-1)//(-2)` is `0`.
  2. Not for complex numbers. Instead convert to floats using [`abs()`](https://docs.python.org/3/library/functions.html#abs "abs") if appropriate.
  3. Conversion from [`float`](https://docs.python.org/3/library/functions.html#float "float") to [`int`](https://docs.python.org/3/library/functions.html#int "int") truncates, discarding the fractional part. See functions [`math.floor()`](https://docs.python.org/3/library/math.html#math.floor "math.floor") and [`math.ceil()`](https://docs.python.org/3/library/math.html#math.ceil "math.ceil") for alternative conversions.
  4. float also accepts the strings “nan” and “inf” with an optional prefix “+” or “-” for Not a Number (NaN) and positive or negative infinity.
  5. Python defines `pow(0, 0)` and `0 ** 0` to be `1`, as is common for programming languages.
  6. The numeric literals accepted include the digits `0` to `9` or any Unicode equivalent (code points with the `Nd` property).
See [the Unicode Standard](https://unicode.org/Public/UNIDATA/extracted/DerivedNumericType.txt) for a complete list of code points with the `Nd` property.