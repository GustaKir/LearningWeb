Title: winreg Module Functions
URL: https://docs.python.org/3/library/winreg.html
Summary: The chunk describes the `FlushKey` function in the `winreg` module, which writes all attributes of an open registry key to the registry. It explains that the function is not necessary for changes to take effect immediately, as registry changes are typically flushed automatically. The `FlushKey` method completes once all data is written.
---

```

Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `winreg.ExpandEnvironmentStrings` with argument `str`. 

winreg.FlushKey(_key_)[¶](https://docs.python.org/3/library/winreg.html#winreg.FlushKey "Link to this definition")
    
Writes all the attributes of a key to the registry.
_key_ is an already open key, or one of the predefined [HKEY_* constants](https://docs.python.org/3/library/winreg.html#hkey-constants).
It is not necessary to call [`FlushKey()`](https://docs.python.org/3/library/winreg.html#winreg.FlushKey "winreg.FlushKey") to change a key. Registry changes are flushed to disk by the registry using its lazy flusher. Registry changes are also flushed to disk at system shutdown. Unlike [`CloseKey()`](https://docs.python.org/3/library/winreg.html#winreg.CloseKey "winreg.CloseKey"), the [`FlushKey()`](https://docs.python.org/3/library/winreg.html#winreg.FlushKey "winreg.FlushKey") method returns only when all the data has been written to the registry. An application should only call [`FlushKey()`](https://docs.python.org/3/library/winreg.html#winreg.FlushKey "winreg.FlushKey") if it requires absolute certainty that registry changes are on disk.
Note
If you don’t know whether a [`FlushKey()`](https://docs.python.org/3/library/winreg.html#winreg.FlushKey "winreg.FlushKey") call is required, it probably isn’t. 

winreg.LoadKey(_key_ , _sub_key_ , _file_name_)[¶](https://docs.python.org/3/library/winreg.html#winreg.LoadKey "Link to this definition")
    
Creates a subkey under the specified key and stores registration information from a specified file into that subkey.
_key_ is a handle returned by [`ConnectRegistry()`](https://docs.python.org/3/library/winreg.html#winreg.ConnectRegistry "winreg.ConnectRegistry") or one of the constants [`HKEY_USERS`](https://docs.python.org/3/library/winreg.html#winreg.HKEY_USERS "winreg.HKEY_USERS") or [`HKEY_LOCAL_MACHINE`](https://docs.python.org/3/library/winreg.html#winreg.HKEY_LOCAL_MACHINE "winreg.HKEY_LOCAL_MACHINE").
_sub_key_ is a string that identifies the subkey to load.
_file_name_ is the name of the file to load registry data from. This file must have been created with the [`SaveKey()`](https://docs.python.org/3/library/winreg.html#winreg.SaveKey "winreg.SaveKey") function. Under the file allocation table (FAT) file system, the filename may not have an extension.
A call to [`LoadKey()`](https://docs.python.org/3/library/winreg.html#winreg.LoadKey "winreg.LoadKey") fails if the calling process does not have the `SE_RESTORE_PRIVILEGE` privilege. Note that privileges are different from permissions – see the [RegLoadKey documentation](https://msdn.microsoft.com/en-us/library/ms724889%28v=VS.85%29.aspx) for more details.
If _key_ is a handle returned by [`ConnectRegistry()`](https://docs.python.org/3/library/winreg.html#winreg.ConnectRegistry "winreg.ConnectRegistry"), then the path specified in _file_name_ is relative to the remote computer.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `winreg.LoadKey` with arguments `key`, `sub_key`, `file_name`. 

winreg.OpenKey(_key_ , _sub_key_ , _reserved =0_, _access =KEY_READ_)[¶](https://docs.python.org/3/library/winreg.html#winreg.OpenKey "Link to this definition")


winreg.OpenKeyEx(_key_ , _sub_key_ , _reserved =0_, _access =KEY_READ_)[¶](https://docs.python.org/3/library/winreg.html#winreg.OpenKeyEx "Link to this definition")
    
Opens the specified key, returning a [handle object](https://docs.python.org/3/library/winreg.html#handle-object).
_key_ is an already open key, or one of the predefined [HKEY_* constants](https://docs.python.org/3/library/winreg.html#hkey-constants).
_sub_key_ is a string that identifies the sub_key to open.
_reserved_ is a reserved integer, and must be zero. The default is zero.
_access_ is an integer that specifies an access mask that describes the desired security access for the key. Default is [`KEY_READ`](https://docs.python.org/3/library/winreg.html#winreg.KEY_READ "winreg.KEY_READ"). See [Access Rights](https://docs.python.org/3/library/winreg.html#access-rights) for other allowed values.
The result is a new handle to the specified key.
If the function fails, [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") is raised.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `winreg.OpenKey` with arguments `key`, `sub_key`, `access`.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `winreg.OpenKey/result` with argument `key`.
Changed in version 3.2: Allow the use of named arguments.
Changed in version 3.3: See [above](https://docs.python.org/3/library/winreg.html#exception-changed).