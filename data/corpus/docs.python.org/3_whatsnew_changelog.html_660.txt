Title: Python 3.6.0 Beta 2 Release Notes
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section outlines the changes and improvements in Python 3.6.0 beta 2, released on October 10, 2016. Key updates include optimizations in dictionary iteration, the addition of a C implementation of asyncio.Future, and enhanced checks for PyUnicode_CopyCharacters().
---

## Python 3.6.0 beta 2[¶](https://docs.python.org/3/whatsnew/changelog.html#python-3-6-0-beta-2 "Link to this heading")
_Release date: 2016-10-10_
### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id654 "Link to this heading")
  * [bpo-28183](https://bugs.python.org/issue?@action=redirect&bpo=28183): Optimize and cleanup dict iteration.
  * [bpo-26081](https://bugs.python.org/issue?@action=redirect&bpo=26081): Added C implementation of asyncio.Future. Original patch by Yury Selivanov.
  * [bpo-28379](https://bugs.python.org/issue?@action=redirect&bpo=28379): Added sanity checks and tests for PyUnicode_CopyCharacters(). Patch by Xiang Zhang.
  * [bpo-28376](https://bugs.python.org/issue?@action=redirect&bpo=28376): The type of long range iterator is now registered as Iterator. Patch by Oren Milman.
  * [bpo-28376](https://bugs.python.org/issue?@action=redirect&bpo=28376): Creating instances of range_iterator by calling range_iterator type now is deprecated. Patch by Oren Milman.
  * [bpo-28376](https://bugs.python.org/issue?@action=redirect&bpo=28376): The constructor of range_iterator now checks that step is not 0. Patch by Oren Milman.
  * [bpo-26906](https://bugs.python.org/issue?@action=redirect&bpo=26906): Resolving special methods of uninitialized type now causes implicit initialization of the type instead of a fail.
  * [bpo-18287](https://bugs.python.org/issue?@action=redirect&bpo=18287): PyType_Ready() now checks that tp_name is not NULL. Original patch by Niklas Koep.
  * [bpo-24098](https://bugs.python.org/issue?@action=redirect&bpo=24098): Fixed possible crash when AST is changed in process of compiling it.
  * [bpo-28201](https://bugs.python.org/issue?@action=redirect&bpo=28201): Dict reduces possibility of 2nd conflict in hash table when hashes have same lower bits.
  * [bpo-28350](https://bugs.python.org/issue?@action=redirect&bpo=28350): String constants with null character no longer interned.
  * [bpo-26617](https://bugs.python.org/issue?@action=redirect&bpo=26617): Fix crash when GC runs during weakref callbacks.
  * [bpo-27942](https://bugs.python.org/issue?@action=redirect&bpo=27942): String constants now interned recursively in tuples and frozensets.
  * [bpo-21578](https://bugs.python.org/issue?@action=redirect&bpo=21578): Fixed misleading error message when ImportError called with invalid keyword args.
  * [bpo-28203](https://bugs.python.org/issue?@action=redirect&bpo=28203): Fix incorrect type in complex(1.0, {2:3}) error message. Patch by Soumya Sharma.
  * [bpo-28086](https://bugs.python.org/issue?@action=redirect&bpo=28086): Single var-positional argument of tuple subtype was passed unscathed to the C-defined function. Now it is converted to exact tuple.
  * [bpo-28214](https://bugs.python.org/issue?@action=redirect&bpo=28214): Now __set_name__ is looked up on the class instead of the instance.
  * [bpo-27955](https://bugs.python.org/issue?@action=redirect&bpo=27955): Fallback on reading /dev/urandom device when the getrandom() syscall fails with EPERM, for example when blocked by SECCOMP.
  * [bpo-28192](https://bugs.python.org/issue?@action=redirect&bpo=28192): Don’t import readline in isolated mode.
  * Upgrade internal unicode databases to Unicode version 9.0.0.
  * [bpo-28131](https://bugs.python.org/issue?@action=redirect&bpo=28131): Fix a regression in zipimport’s compile_source(). zipimport should use the same optimization level as the interpreter.
  * [bpo-28126](https://bugs.python.org/issue?@action=redirect&bpo=28126): Replace Py_MEMCPY with memcpy(). Visual Studio can properly optimize memcpy().
  * [bpo-28120](https://bugs.python.org/issue?@action=redirect&bpo=28120): Fix dict.pop() for splitted dictionary when trying to remove a “pending key” (Not yet inserted in split-table). Patch by Xiang Zhang.
  * [bpo-26182](https://bugs.python.org/issue?@action=redirect&bpo=26182): Raise DeprecationWarning when async and await keywords are used as variable/attribute/class/function name.