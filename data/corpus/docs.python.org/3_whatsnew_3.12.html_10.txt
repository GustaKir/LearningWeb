Title: Improvements in asyncio for Python 3.12
URL: https://docs.python.org/3/whatsnew/3.12.html
Summary: Python 3.12 introduces significant performance enhancements in the asyncio module, particularly in socket writing, by reducing unnecessary copying and using sendmsg() where supported. Additionally, new functions asyncio.eager_task_factory() and asyncio.create_eager_task_factory() have been added to enable eager task execution, improving speed in various use cases.
---

### asyncio[¶](https://docs.python.org/3/whatsnew/3.12.html#asyncio "Link to this heading")
  * The performance of writing to sockets in [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O.") has been significantly improved. `asyncio` now avoids unnecessary copying when writing to sockets and uses [`sendmsg()`](https://docs.python.org/3/library/socket.html#socket.socket.sendmsg "socket.socket.sendmsg") if the platform supports it. (Contributed by Kumar Aditya in [gh-91166](https://github.com/python/cpython/issues/91166).)
  * Add [`asyncio.eager_task_factory()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.eager_task_factory "asyncio.eager_task_factory") and [`asyncio.create_eager_task_factory()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.create_eager_task_factory "asyncio.create_eager_task_factory") functions to allow opting an event loop in to eager task execution, making some use-cases 2x to 5x faster. (Contributed by Jacob Bower & Itamar Oren in [gh-102853](https://github.com/python/cpython/issues/102853), [gh-104140](https://github.com/python/cpython/issues/104140), and [gh-104138](https://github.com/python/cpython/issues/104138))
  * On Linux, [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O.") uses [`asyncio.PidfdChildWatcher`](https://docs.python.org/3/library/asyncio-policy.html#asyncio.PidfdChildWatcher "asyncio.PidfdChildWatcher") by default if [`os.pidfd_open()`](https://docs.python.org/3/library/os.html#os.pidfd_open "os.pidfd_open") is available and functional instead of [`asyncio.ThreadedChildWatcher`](https://docs.python.org/3/library/asyncio-policy.html#asyncio.ThreadedChildWatcher "asyncio.ThreadedChildWatcher"). (Contributed by Kumar Aditya in [gh-98024](https://github.com/python/cpython/issues/98024).)
  * The event loop now uses the best available child watcher for each platform ([`asyncio.PidfdChildWatcher`](https://docs.python.org/3/library/asyncio-policy.html#asyncio.PidfdChildWatcher "asyncio.PidfdChildWatcher") if supported and [`asyncio.ThreadedChildWatcher`](https://docs.python.org/3/library/asyncio-policy.html#asyncio.ThreadedChildWatcher "asyncio.ThreadedChildWatcher") otherwise), so manually configuring a child watcher is not recommended. (Contributed by Kumar Aditya in [gh-94597](https://github.com/python/cpython/issues/94597).)
  * Add _loop_factory_ parameter to [`asyncio.run()`](https://docs.python.org/3/library/asyncio-runner.html#asyncio.run "asyncio.run") to allow specifying a custom event loop factory. (Contributed by Kumar Aditya in [gh-99388](https://github.com/python/cpython/issues/99388).)
  * Add C implementation of [`asyncio.current_task()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.current_task "asyncio.current_task") for 4x-6x speedup. (Contributed by Itamar Oren and Pranav Thulasiram Bhat in [gh-100344](https://github.com/python/cpython/issues/100344).)
  * [`asyncio.iscoroutine()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.iscoroutine "asyncio.iscoroutine") now returns `False` for generators as [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O.") does not support legacy generator-based coroutines. (Contributed by Kumar Aditya in [gh-102748](https://github.com/python/cpython/issues/102748).)
  * [`asyncio.wait()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.wait "asyncio.wait") and [`asyncio.as_completed()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.as_completed "asyncio.as_completed") now accepts generators yielding tasks. (Contributed by Kumar Aditya in [gh-78530](https://github.com/python/cpython/issues/78530).)


### calendar[¶](https://docs.python.org/3/whatsnew/3.12.html#calendar "Link to this heading")
  * Add enums [`calendar.Month`](https://docs.python.org/3/library/calendar.html#calendar.Month "calendar.Month") and [`calendar.Day`](https://docs.python.org/3/library/calendar.html#calendar.Day "calendar.Day") defining months of the year and days of the week. (Contributed by Prince Roshan in [gh-103636](https://github.com/python/cpython/issues/103636).)


### csv[¶](https://docs.python.org/3/whatsnew/3.12.html#csv "Link to this heading")
  * Add [`csv.QUOTE_NOTNULL`](https://docs.python.org/3/library/csv.html#csv.QUOTE_NOTNULL "csv.QUOTE_NOTNULL") and [`csv.QUOTE_STRINGS`](https://docs.python.org/3/library/csv.html#csv.QUOTE_STRINGS "csv.QUOTE_STRINGS") flags to provide finer grained control of `None` and empty strings by [`reader`](https://docs.python.org/3/library/csv.html#csv.reader "csv.reader") and [`writer`](https://docs.python.org/3/library/csv.html#csv.writer "csv.writer") objects.