Title: Changes to C API in Python
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section details modifications to the C API, including the relocation of the `bytes_methods.h` and `dtoa.h` header files to the internal C API as `pycore_bytes_methods.h` and `pycore_dtoa.h`, respectively. It also notes that the `math` and `cmath` modules will require the `Py_BUILD_CORE` macro for compilation, and introduces the `Py_SET_SIZE()` function.
---

### C API[Â¶](https://docs.python.org/3/whatsnew/changelog.html#id407 "Link to this heading")
  * [bpo-35081](https://bugs.python.org/issue?@action=redirect&bpo=35081): Move the `bytes_methods.h` header file to the internal C API as `pycore_bytes_methods.h`: it only contains private symbols (prefixed by `_Py`), except of the `PyDoc_STRVAR_shared()` macro.
  * [bpo-35081](https://bugs.python.org/issue?@action=redirect&bpo=35081): Move the `dtoa.h` header file to the internal C API as `pycore_dtoa.h`: it only contains private functions (prefixed by `_Py`). The [`math`](https://docs.python.org/3/library/math.html#module-math "math: Mathematical functions \(sin\(\) etc.\).") and [`cmath`](https://docs.python.org/3/library/cmath.html#module-cmath "cmath: Mathematical functions for complex numbers.") modules must now be compiled with the `Py_BUILD_CORE` macro defined.
  * [bpo-39573](https://bugs.python.org/issue?@action=redirect&bpo=39573): Add [`Py_SET_SIZE()`](https://docs.python.org/3/c-api/structures.html#c.Py_SET_SIZE "Py_SET_SIZE") function to set the size of an object.
  * [bpo-39500](https://bugs.python.org/issue?@action=redirect&bpo=39500): [`PyUnicode_IsIdentifier()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_IsIdentifier "PyUnicode_IsIdentifier") does not call [`Py_FatalError()`](https://docs.python.org/3/c-api/sys.html#c.Py_FatalError "Py_FatalError") anymore if the string is not ready.
  * [bpo-39573](https://bugs.python.org/issue?@action=redirect&bpo=39573): Add [`Py_SET_TYPE()`](https://docs.python.org/3/c-api/structures.html#c.Py_SET_TYPE "Py_SET_TYPE") function to set the type of an object.
  * [bpo-39573](https://bugs.python.org/issue?@action=redirect&bpo=39573): Add a [`Py_SET_REFCNT()`](https://docs.python.org/3/c-api/refcounting.html#c.Py_SET_REFCNT "Py_SET_REFCNT") function to set the reference counter of an object.
  * [bpo-39542](https://bugs.python.org/issue?@action=redirect&bpo=39542): Convert [`PyType_HasFeature()`](https://docs.python.org/3/c-api/type.html#c.PyType_HasFeature "PyType_HasFeature"), [`PyType_Check()`](https://docs.python.org/3/c-api/type.html#c.PyType_Check "PyType_Check") and [`PyType_CheckExact()`](https://docs.python.org/3/c-api/type.html#c.PyType_CheckExact "PyType_CheckExact") macros to static inline functions.
  * [bpo-39542](https://bugs.python.org/issue?@action=redirect&bpo=39542): In the limited C API, `PyObject_INIT()` and `PyObject_INIT_VAR()` are now defined as aliases to [`PyObject_Init()`](https://docs.python.org/3/c-api/allocation.html#c.PyObject_Init "PyObject_Init") and [`PyObject_InitVar()`](https://docs.python.org/3/c-api/allocation.html#c.PyObject_InitVar "PyObject_InitVar") to make their implementation opaque. It avoids to leak implementation details in the limited C API. Exclude the following functions from the limited C API: `_Py_NewReference()`, `_Py_ForgetReference()`, `_PyTraceMalloc_NewReference()` and `_Py_GetRefTotal()`.
  * [bpo-39542](https://bugs.python.org/issue?@action=redirect&bpo=39542): Exclude trashcan mechanism from the limited C API: it requires access to PyTypeObject and PyThreadState structure fields, whereas these structures are opaque in the limited C API.
  * [bpo-39511](https://bugs.python.org/issue?@action=redirect&bpo=39511): The [`PyThreadState_Clear()`](https://docs.python.org/3/c-api/init.html#c.PyThreadState_Clear "PyThreadState_Clear") function now calls the `PyThreadState.on_delete` callback. Previously, that happened in [`PyThreadState_Delete()`](https://docs.python.org/3/c-api/init.html#c.PyThreadState_Delete "PyThreadState_Delete").
  * [bpo-38076](https://bugs.python.org/issue?@action=redirect&bpo=38076): Fix to clear the interpreter state only after clearing module globals to guarantee module state access from C Extensions during runtime destruction
  * [bpo-39245](https://bugs.python.org/issue?@action=redirect&bpo=39245): The Vectorcall API (PEP 590) was made public, adding the functions `PyObject_Vectorcall`, `PyObject_VectorcallMethod`, `PyVectorcall_Function`, `PyObject_CallOneArg`, `PyObject_CallMethodNoArgs`, `PyObject_CallMethodOneArg`, `PyObject_FastCallDict`, and the flag `Py_TPFLAGS_HAVE_VECTORCALL`.