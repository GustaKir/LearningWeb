Title: Converting Fields and Format String Syntax in Python
URL: https://docs.python.org/3/library/string.html
Summary: The `convert_field()` method in Python's string library converts values using specified conversion types ('s', 'r', 'a') based on the output of the `get_field()` method. The `str.format()` method and the `Formatter` class utilize the same syntax for format strings.
---

convert_field(_value_ , _conversion_)[¶](https://docs.python.org/3/library/string.html#string.Formatter.convert_field "Link to this definition")
    
Converts the value (returned by [`get_field()`](https://docs.python.org/3/library/string.html#string.Formatter.get_field "string.Formatter.get_field")) given a conversion type (as in the tuple returned by the [`parse()`](https://docs.python.org/3/library/string.html#string.Formatter.parse "string.Formatter.parse") method). The default version understands ‘s’ (str), ‘r’ (repr) and ‘a’ (ascii) conversion types.
## Format String Syntax[¶](https://docs.python.org/3/library/string.html#format-string-syntax "Link to this heading")
The [`str.format()`](https://docs.python.org/3/library/stdtypes.html#str.format "str.format") method and the [`Formatter`](https://docs.python.org/3/library/string.html#string.Formatter "string.Formatter") class share the same syntax for format strings (although in the case of [`Formatter`](https://docs.python.org/3/library/string.html#string.Formatter "string.Formatter"), subclasses can define their own format string syntax). The syntax is related to that of [formatted string literals](https://docs.python.org/3/reference/lexical_analysis.html#f-strings), but it is less sophisticated and, in particular, does not support arbitrary expressions.
Format strings contain “replacement fields” surrounded by curly braces `{}`. Anything that is not contained in braces is considered literal text, which is copied unchanged to the output. If you need to include a brace character in the literal text, it can be escaped by doubling: `{{` and `}}`.
The grammar for a replacement field is as follows:
```
**replacement_field** ::= "{" [[field_name](https://docs.python.org/3/library/string.html#grammar-token-format-string-field_name)] ["!" [conversion](https://docs.python.org/3/library/string.html#grammar-token-format-string-conversion)] [":" [format_spec](https://docs.python.org/3/library/string.html#grammar-token-format-string-format_spec)] "}"
**field_name**    ::= [arg_name](https://docs.python.org/3/library/string.html#grammar-token-format-string-arg_name) ("." [attribute_name](https://docs.python.org/3/library/string.html#grammar-token-format-string-attribute_name) | "[" [element_index](https://docs.python.org/3/library/string.html#grammar-token-format-string-element_index) "]")*
**arg_name**     ::= [[identifier](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-identifier) | [digit](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-digit)+]
**attribute_name**  ::= [identifier](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-identifier)
**element_index**   ::= [digit](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-digit)+ | [index_string](https://docs.python.org/3/library/string.html#grammar-token-format-string-index_string)
**index_string**   ::= <any source character except "]"> +
**conversion**    ::= "r" | "s" | "a"
**format_spec**    ::= [format-spec:format_spec](https://docs.python.org/3/library/string.html#grammar-token-format-spec-format_spec)