Title: Collections Module Overview
URL: https://docs.python.org/3/library/collections.html
Summary: The `collections` module provides specialized container datatypes that serve as alternatives to Python's built-in containers like `dict`, `list`, `set`, and `tuple`. It includes features such as `namedtuple()` for creating tuple subclasses with named fields and `deque`, a list-like container optimized for fast appends and pops.
---

# `collections` — Container datatypes[¶](https://docs.python.org/3/library/collections.html#module-collections "Link to this heading")
**Source code:** [Lib/collections/__init__.py](https://github.com/python/cpython/tree/3.13/Lib/collections/__init__.py)
This module implements specialized container datatypes providing alternatives to Python’s general purpose built-in containers, [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict"), [`list`](https://docs.python.org/3/library/stdtypes.html#list "list"), [`set`](https://docs.python.org/3/library/stdtypes.html#set "set"), and [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple").
[`namedtuple()`](https://docs.python.org/3/library/collections.html#collections.namedtuple "collections.namedtuple") | factory function for creating tuple subclasses with named fields  
---|---  
[`deque`](https://docs.python.org/3/library/collections.html#collections.deque "collections.deque") | list-like container with fast appends and pops on either end  
[`ChainMap`](https://docs.python.org/3/library/collections.html#collections.ChainMap "collections.ChainMap") | dict-like class for creating a single view of multiple mappings  
[`Counter`](https://docs.python.org/3/library/collections.html#collections.Counter "collections.Counter") | dict subclass for counting [hashable](https://docs.python.org/3/glossary.html#term-hashable) objects  
[`OrderedDict`](https://docs.python.org/3/library/collections.html#collections.OrderedDict "collections.OrderedDict") | dict subclass that remembers the order entries were added  
[`defaultdict`](https://docs.python.org/3/library/collections.html#collections.defaultdict "collections.defaultdict") | dict subclass that calls a factory function to supply missing values  
[`UserDict`](https://docs.python.org/3/library/collections.html#collections.UserDict "collections.UserDict") | wrapper around dictionary objects for easier dict subclassing  
[`UserList`](https://docs.python.org/3/library/collections.html#collections.UserList "collections.UserList") | wrapper around list objects for easier list subclassing  
[`UserString`](https://docs.python.org/3/library/collections.html#collections.UserString "collections.UserString") | wrapper around string objects for easier string subclassing  
## [`ChainMap`](https://docs.python.org/3/library/collections.html#collections.ChainMap "collections.ChainMap") objects[¶](https://docs.python.org/3/library/collections.html#chainmap-objects "Link to this heading")
Added in version 3.3.
A [`ChainMap`](https://docs.python.org/3/library/collections.html#collections.ChainMap "collections.ChainMap") class is provided for quickly linking a number of mappings so they can be treated as a single unit. It is often much faster than creating a new dictionary and running multiple [`update()`](https://docs.python.org/3/library/stdtypes.html#dict.update "dict.update") calls.
The class can be used to simulate nested scopes and is useful in templating. 

_class_ collections.ChainMap(_* maps_)[¶](https://docs.python.org/3/library/collections.html#collections.ChainMap "Link to this definition")
    
A [`ChainMap`](https://docs.python.org/3/library/collections.html#collections.ChainMap "collections.ChainMap") groups multiple dicts or other mappings together to create a single, updateable view. If no _maps_ are specified, a single empty dictionary is provided so that a new chain always has at least one mapping.
The underlying mappings are stored in a list. That list is public and can be accessed or updated using the _maps_ attribute. There is no other state.
Lookups search the underlying mappings successively until a key is found. In contrast, writes, updates, and deletions only operate on the first mapping.
A [`ChainMap`](https://docs.python.org/3/library/collections.html#collections.ChainMap "collections.ChainMap") incorporates the underlying mappings by reference. So, if one of the underlying mappings gets updated, those changes will be reflected in [`ChainMap`](https://docs.python.org/3/library/collections.html#collections.ChainMap "collections.ChainMap").
All of the usual dictionary methods are supported. In addition, there is a _maps_ attribute, a method for creating new subcontexts, and a property for accessing all but the first mapping: 

maps[¶](https://docs.python.org/3/library/collections.html#collections.ChainMap.maps "Link to this definition")
    
A user updateable list of mappings. The list is ordered from first-searched to last-searched. It is the only stored state and can be modified to change which mappings are searched. The list should always contain at least one mapping.