Title: Fixing Sentence Endings in TextWrapper
URL: https://docs.python.org/3/library/textwrap.html
Summary: The `fix_sentence_endings` option in `TextWrapper` allows detection of sentence endings to ensure two spaces separate sentences, which is useful for monospaced fonts. However, its algorithm has limitations, as it may misinterpret certain abbreviations and sentence structures, leading to incorrect formatting.
---

fix_sentence_endings[¶](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper.fix_sentence_endings "Link to this definition")
    
(default: `False`) If true, [`TextWrapper`](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper "textwrap.TextWrapper") attempts to detect sentence endings and ensure that sentences are always separated by exactly two spaces. This is generally desired for text in a monospaced font. However, the sentence detection algorithm is imperfect: it assumes that a sentence ending consists of a lowercase letter followed by one of `'.'`, `'!'`, or `'?'`, possibly followed by one of `'"'` or `"'"`, followed by a space. One problem with this algorithm is that it is unable to detect the difference between “Dr.” in
```
[...] Dr. Frankenstein's monster [...]

```

and “Spot.” in
```
[...] See Spot. See Spot run [...]

```

[`fix_sentence_endings`](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper.fix_sentence_endings "textwrap.TextWrapper.fix_sentence_endings") is false by default.
Since the sentence detection algorithm relies on `string.lowercase` for the definition of “lowercase letter”, and a convention of using two spaces after a period to separate sentences on the same line, it is specific to English-language texts. 

break_long_words[¶](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper.break_long_words "Link to this definition")
    
(default: `True`) If true, then words longer than [`width`](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper.width "textwrap.TextWrapper.width") will be broken in order to ensure that no lines are longer than [`width`](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper.width "textwrap.TextWrapper.width"). If it is false, long words will not be broken, and some lines may be longer than [`width`](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper.width "textwrap.TextWrapper.width"). (Long words will be put on a line by themselves, in order to minimize the amount by which [`width`](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper.width "textwrap.TextWrapper.width") is exceeded.) 

break_on_hyphens[¶](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper.break_on_hyphens "Link to this definition")
    
(default: `True`) If true, wrapping will occur preferably on whitespaces and right after hyphens in compound words, as it is customary in English. If false, only whitespaces will be considered as potentially good places for line breaks, but you need to set [`break_long_words`](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper.break_long_words "textwrap.TextWrapper.break_long_words") to false if you want truly insecable words. Default behaviour in previous versions was to always allow breaking hyphenated words. 

max_lines[¶](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper.max_lines "Link to this definition")
    
(default: `None`) If not `None`, then the output will contain at most _max_lines_ lines, with _placeholder_ appearing at the end of the output.
Added in version 3.4. 

placeholder[¶](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper.placeholder "Link to this definition")
    
(default: `' [...]'`) String that will appear at the end of the output text if it has been truncated.
Added in version 3.4.
[`TextWrapper`](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper "textwrap.TextWrapper") also provides some public methods, analogous to the module-level convenience functions: 

wrap(_text_)[¶](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper.wrap "Link to this definition")
    
Wraps the single paragraph in _text_ (a string) so every line is at most [`width`](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper.width "textwrap.TextWrapper.width") characters long. All wrapping options are taken from instance attributes of the [`TextWrapper`](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper "textwrap.TextWrapper") instance. Returns a list of output lines, without final newlines. If the wrapped output has no content, the returned list is empty. 

fill(_text_)[¶](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper.fill "Link to this definition")
    
Wraps the single paragraph in _text_ , and returns a single string containing the wrapped paragraph.
#### Previous topic
[`difflib` — Helpers for computing deltas](https://docs.python.org/3/library/difflib.html "previous chapter")
#### Next topic
[`unicodedata` — Unicode Database](https://docs.python.org/3/library/unicodedata.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/textwrap.rst)