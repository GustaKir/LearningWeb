Title: String Formatting Alignment in Python
URL: https://docs.python.org/3/library/string.html
Summary: This section explains how to specify alignment values in Python string formatting, detailing the use of fill characters (defaulting to a space) and the limitations regarding the curly brace characters. It outlines the meanings of different alignment options: left ('<'), right ('>'), and equal ('=').
---

```

If a valid _align_ value is specified, it can be preceded by a _fill_ character that can be any character and defaults to a space if omitted. It is not possible to use a literal curly brace (”`{`” or “`}`”) as the _fill_ character in a [formatted string literal](https://docs.python.org/3/reference/lexical_analysis.html#f-strings) or when using the [`str.format()`](https://docs.python.org/3/library/stdtypes.html#str.format "str.format") method. However, it is possible to insert a curly brace with a nested replacement field. This limitation doesn’t affect the [`format()`](https://docs.python.org/3/library/functions.html#format "format") function.
The meaning of the various alignment options is as follows:
Option | Meaning  
---|---  
`'<'` | Forces the field to be left-aligned within the available space (this is the default for most objects).  
`'>'` | Forces the field to be right-aligned within the available space (this is the default for numbers).  
`'='` | Forces the padding to be placed after the sign (if any) but before the digits. This is used for printing fields in the form ‘+000000120’. This alignment option is only valid for numeric types, excluding [`complex`](https://docs.python.org/3/library/functions.html#complex "complex"). It becomes the default for numbers when ‘0’ immediately precedes the field width.  
`'^'` | Forces the field to be centered within the available space.  
Note that unless a minimum field width is defined, the field width will always be the same size as the data to fill it, so that the alignment option has no meaning in this case.
The _sign_ option is only valid for number types, and can be one of the following:
Option | Meaning  
---|---  
`'+'` | Indicates that a sign should be used for both positive as well as negative numbers.  
`'-'` | Indicates that a sign should be used only for negative numbers (this is the default behavior).  
space | Indicates that a leading space should be used on positive numbers, and a minus sign on negative numbers.  
The `'z'` option coerces negative zero floating-point values to positive zero after rounding to the format precision. This option is only valid for floating-point presentation types.
Changed in version 3.11: Added the `'z'` option (see also [**PEP 682**](https://peps.python.org/pep-0682/)).
The `'#'` option causes the “alternate form” to be used for the conversion. The alternate form is defined differently for different types. This option is only valid for integer, float and complex types. For integers, when binary, octal, or hexadecimal output is used, this option adds the respective prefix `'0b'`, `'0o'`, `'0x'`, or `'0X'` to the output value. For float and complex the alternate form causes the result of the conversion to always contain a decimal-point character, even if no digits follow it. Normally, a decimal-point character appears in the result of these conversions only if a digit follows it. In addition, for `'g'` and `'G'` conversions, trailing zeros are not removed from the result.
The _width_ is a decimal integer defining the minimum total field width, including any prefixes, separators, and other formatting characters. If not specified, then the field width will be determined by the content.
When no explicit alignment is given, preceding the _width_ field by a zero (`'0'`) character enables sign-aware zero-padding for numeric types, excluding [`complex`](https://docs.python.org/3/library/functions.html#complex "complex"). This is equivalent to a _fill_ character of `'0'` with an _alignment_ type of `'='`.
Changed in version 3.10: Preceding the _width_ field by `'0'` no longer affects the default alignment for strings.
The _grouping_ option after the _width_ field specifies a digit group separator for the integral part of a number. It can be one of the following:
Option | Meaning  
---|---  
`','` | Inserts a comma every 3 digits for integer presentation type `'d'` and floating-point presentation types, excluding `'n'`. For other presentation types, this option is not supported.  
`'_'` | Inserts an underscore every 3 digits for integer presentation type `'d'` and floating-point presentation types, excluding `'n'`. For integer presentation types `'b'`, `'o'`, `'x'`, and `'X'`, underscores are inserted every 4 digits. For other presentation types, this option is not supported.  
For a locale aware separator, use the `'n'` presentation type instead.
Changed in version 3.1: Added the `','` option (see also [**PEP 378**](https://peps.python.org/pep-0378/)).
Changed in version 3.6: Added the `'_'` option (see also [**PEP 515**](https://peps.python.org/pep-0515/)).
The _precision_ is a decimal integer indicating how many digits should be displayed after the decimal point for presentation types `'f'` and `'F'`, or before and after the decimal point for presentation types `'g'` or `'G'`. For string presentation types the field indicates the maximum field size - in other words, how many characters will be used from the field c