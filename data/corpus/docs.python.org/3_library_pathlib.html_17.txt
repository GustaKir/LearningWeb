Title: Pathlib Module Updates and Pattern Language
URL: https://docs.python.org/3/library/pathlib.html
Summary: In version 3.10, the _follow_symlinks_ parameter was introduced. The Path.lchmod() method allows changing the mode of a symbolic link, similar to Path.chmod(). Additionally, the document describes supported wildcards in patterns for methods like full_match(), glob(), and rglob(), such as '**' which matches any number of file or directory segments.
---

```

Changed in version 3.10: The _follow_symlinks_ parameter was added. 

Path.lchmod(_mode_)[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.lchmod "Link to this definition")
    
Like [`Path.chmod()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.chmod "pathlib.Path.chmod") but, if the path points to a symbolic link, the symbolic link’s mode is changed rather than its target’s.
## Pattern language[¶](https://docs.python.org/3/library/pathlib.html#pattern-language "Link to this heading")
The following wildcards are supported in patterns for [`full_match()`](https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.full_match "pathlib.PurePath.full_match"), [`glob()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.glob "pathlib.Path.glob") and [`rglob()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.rglob "pathlib.Path.rglob"): 

`**` (entire segment)
    
Matches any number of file or directory segments, including zero. 

`*` (entire segment)
    
Matches one file or directory segment. 

`*` (part of a segment)
    
Matches any number of non-separator characters, including zero. 

`?`
    
Matches one non-separator character. 

`[seq]`
    
Matches one character in _seq_. 

`[!seq]`
    
Matches one character not in _seq_.
For a literal match, wrap the meta-characters in brackets. For example, `"[?]"` matches the character `"?"`.
The “`**`” wildcard enables recursive globbing. A few examples:
Pattern | Meaning  
---|---  
“`**/*`” | Any path with at least one segment.  
“`**/*.py`” | Any path with a final segment ending “`.py`”.  
“`assets/**`” | Any path starting with “`assets/`”.  
“`assets/**/*`” | Any path starting with “`assets/`”, excluding “`assets/`” itself.  
Note
Globbing with the “`**`” wildcard visits every directory in the tree. Large directory trees may take a long time to search.
Changed in version 3.13: Globbing with a pattern that ends with “`**`” returns both files and directories. In previous versions, only directories were returned.
In [`Path.glob()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.glob "pathlib.Path.glob") and [`rglob()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.rglob "pathlib.Path.rglob"), a trailing slash may be added to the pattern to match only directories.
Changed in version 3.11: Globbing with a pattern that ends with a pathname components separator ([`sep`](https://docs.python.org/3/library/os.html#os.sep "os.sep") or [`altsep`](https://docs.python.org/3/library/os.html#os.altsep "os.altsep")) returns only directories.
## Comparison to the [`glob`](https://docs.python.org/3/library/glob.html#module-glob "glob: Unix shell style pathname pattern expansion.") module[¶](https://docs.python.org/3/library/pathlib.html#comparison-to-the-glob-module "Link to this heading")
The patterns accepted and results generated by [`Path.glob()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.glob "pathlib.Path.glob") and [`Path.rglob()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.rglob "pathlib.Path.rglob") differ slightly from those by the [`glob`](https://docs.python.org/3/library/glob.html#module-glob "glob: Unix shell style pathname pattern expansion.") module:
  1. Files beginning with a dot are not special in pathlib. This is like passing `include_hidden=True` to [`glob.glob()`](https://docs.python.org/3/library/glob.html#glob.glob "glob.glob").
  2. “`**`” pattern components are always recursive in pathlib. This is like passing `recursive=True` to [`glob.glob()`](https://docs.python.org/3/library/glob.html#glob.glob "glob.glob").
  3. “`**`” pattern components do not follow symlinks by default in pathlib. This behaviour has no equivalent in [`glob.glob()`](https://docs.python.org/3/library/glob.html#glob.glob "glob.glob"), but you can pass `recurse_symlinks=True` to [`Path.glob()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.glob "pathlib.Path.glob") for compatible behaviour.
  4. Like all [`PurePath`](https://docs.python.org/3/library/pathlib.html#pathlib.PurePath "pathlib.PurePath") and [`Path`](https://docs.python.org/3/library/pathlib.html#pathlib.Path "pathlib.Path") objects, the values returned from [`Path.glob()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.glob "pathlib.Path.glob") and [`Path.rglob()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.rglob "pathlib.Path.rglob") don’t include trailing slashes.
  5. The values returned from pathlib’s `path.glob()` and `path.rglob()` include the _path_ as a prefix, unlike the results of `glob.glob(root_dir=path)`.
  6. The values returned from pathlib’s `path.glob()` and `path.rglob()` may include _path_ itself, for example when globbing “`**`”, whereas the results of `glob.glob(root_dir=path)` never include an empty string that would correspond to _path_.