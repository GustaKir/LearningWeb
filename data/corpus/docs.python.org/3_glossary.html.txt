Title: Python Glossary
URL: https://docs.python.org/3/glossary.html
Summary: This page serves as a glossary for Python terminology, providing definitions and explanations of key concepts used in Python programming. It also includes links for navigation to previous and next topics, as well as resources for reporting bugs and accessing the documentation's source.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
#### Previous topic
[Deprecations](https://docs.python.org/3/deprecations/index.html "previous chapter")
#### Next topic
[About this documentation](https://docs.python.org/3/about.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/glossary.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/about.html "About this documentation") |
  * [previous](https://docs.python.org/3/deprecations/index.html "Deprecations") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [Glossary](https://docs.python.org/3/glossary.html)
  * | 
  * Theme  Auto Light Dark |


# Glossary[¶](https://docs.python.org/3/glossary.html#glossary "Link to this heading") 

`>>>`[¶](https://docs.python.org/3/glossary.html#term-0 "Link to this term")
    
The default Python prompt of the [interactive](https://docs.python.org/3/glossary.html#term-interactive) shell. Often seen for code examples which can be executed interactively in the interpreter. 

`...`[¶](https://docs.python.org/3/glossary.html#term-... "Link to this term")
    
Can refer to:
  * The default Python prompt of the [interactive](https://docs.python.org/3/glossary.html#term-interactive) shell when entering the code for an indented code block, when within a pair of matching left and right delimiters (parentheses, square brackets, curly braces or triple quotes), or after specifying a decorator.
  * The [`Ellipsis`](https://docs.python.org/3/library/constants.html#Ellipsis "Ellipsis") built-in constant.



abstract base class[¶](https://docs.python.org/3/glossary.html#term-abstract-base-class "Link to this term")
    
Abstract base classes complement [duck-typing](https://docs.python.org/3/glossary.html#term-duck-typing) by providing a way to define interfaces when other techniques like [`hasattr()`](https://docs.python.org/3/library/functions.html#hasattr "hasattr") would be clumsy or subtly wrong (for example with [magic methods](https://docs.python.org/3/reference/datamodel.html#special-lookup)). ABCs introduce virtual subclasses, which are classes that don’t inherit from a class but are still recognized by [`isinstance()`](https://docs.python.org/3/library/functions.html#isinstance "isinstance") and [`issubclass()`](https://docs.python.org/3/library/functions.html#issubclass "issubclass"); see the [`abc`](https://docs.python.org/3/library/abc.html#module-abc "abc: Abstract base classes according to :pep:`3119`.") module documentation. Python comes with many built-in ABCs for data structures (in the [`collections.abc`](https://docs.python.org/3/library/collections.abc.html#module-collections.abc "collections.abc: Abstract base classes for containers") module), numbers (in the [`numbers`](https://docs.python.org/3/library/numbers.html#module-numbers "numbers: Numeric abstract base classes \(Complex, Real, Integral, etc.\).") module), streams (in the [`io`](https://docs.python.org/3/library/io.html#module-io "io: Core tools for working with streams.") module), import finders and loaders (in the [`importlib.abc`](https://docs.python.org/3/library/importlib.html#module-importlib.abc "importlib.abc: Abstract base classes related to import") module). You can create your own ABCs with the [`abc`](https://docs.python.org/3/library/abc.html#module-abc "abc: Abstract base classes according to :pep:`3119`.") module.