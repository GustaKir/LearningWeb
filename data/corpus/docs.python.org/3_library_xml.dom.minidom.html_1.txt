Title: xml.dom.minidom Module: Parsing XML Documents
URL: https://docs.python.org/3/library/xml.dom.minidom.html
Summary: The `parse()` function in the xml.dom.minidom module allows you to create a `Document` from either a filename or an open file object. It supports passing a SAX2 parser for additional configuration. For XML in string format, the `parseString()` function can be used.
---

```

The [`parse()`](https://docs.python.org/3/library/xml.dom.minidom.html#xml.dom.minidom.parse "xml.dom.minidom.parse") function can take either a filename or an open file object. 

xml.dom.minidom.parse(_filename_or_file_ , _parser =None_, _bufsize =None_)[¶](https://docs.python.org/3/library/xml.dom.minidom.html#xml.dom.minidom.parse "Link to this definition")
    
Return a `Document` from the given input. _filename_or_file_ may be either a file name, or a file-like object. _parser_ , if given, must be a SAX2 parser object. This function will change the document handler of the parser and activate namespace support; other parser configuration (like setting an entity resolver) must have been done in advance.
If you have XML in a string, you can use the [`parseString()`](https://docs.python.org/3/library/xml.dom.minidom.html#xml.dom.minidom.parseString "xml.dom.minidom.parseString") function instead: 

xml.dom.minidom.parseString(_string_ , _parser =None_)[¶](https://docs.python.org/3/library/xml.dom.minidom.html#xml.dom.minidom.parseString "Link to this definition")
    
Return a `Document` that represents the _string_. This method creates an [`io.StringIO`](https://docs.python.org/3/library/io.html#io.StringIO "io.StringIO") object for the string and passes that on to [`parse()`](https://docs.python.org/3/library/xml.dom.minidom.html#xml.dom.minidom.parse "xml.dom.minidom.parse").
Both functions return a `Document` object representing the content of the document.
What the [`parse()`](https://docs.python.org/3/library/xml.dom.minidom.html#xml.dom.minidom.parse "xml.dom.minidom.parse") and [`parseString()`](https://docs.python.org/3/library/xml.dom.minidom.html#xml.dom.minidom.parseString "xml.dom.minidom.parseString") functions do is connect an XML parser with a “DOM builder” that can accept parse events from any SAX parser and convert them into a DOM tree. The name of the functions are perhaps misleading, but are easy to grasp when learning the interfaces. The parsing of the document will be completed before these functions return; it’s simply that these functions do not provide a parser implementation themselves.
You can also create a `Document` by calling a method on a “DOM Implementation” object. You can get this object either by calling the `getDOMImplementation()` function in the [`xml.dom`](https://docs.python.org/3/library/xml.dom.html#module-xml.dom "xml.dom: Document Object Model API for Python.") package or the [`xml.dom.minidom`](https://docs.python.org/3/library/xml.dom.minidom.html#module-xml.dom.minidom "xml.dom.minidom: Minimal Document Object Model \(DOM\) implementation.") module. Once you have a `Document`, you can add child nodes to it to populate the DOM:
```
fromxml.dom.minidomimport getDOMImplementation
impl = getDOMImplementation()
newdoc = impl.createDocument(None, "some_tag", None)
top_element = newdoc.documentElement
text = newdoc.createTextNode('Some textual content.')
top_element.appendChild(text)

```

Once you have a DOM document object, you can access the parts of your XML document through its properties and methods. These properties are defined in the DOM specification. The main property of the document object is the `documentElement` property. It gives you the main element in the XML document: the one that holds all others. Here is an example program:
```
dom3 = parseString("<myxml>Some data</myxml>")
assert dom3.documentElement.tagName == "myxml"