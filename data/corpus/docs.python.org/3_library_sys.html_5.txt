Title: sys Module Overview
URL: https://docs.python.org/3/library/sys.html
Summary: This section details the sys module, highlighting changes in version 3.2 regarding the `'backslashreplace'` error handler for `UnicodeEncodeError`. It also explains the `sys.dont_write_bytecode` attribute, which controls the writing of `.pyc` files based on command line options or environment variables, and introduces `sys._emscripten_info`, a named tuple containing environment information.
---

```

Changed in version 3.2: Use `'backslashreplace'` error handler on [`UnicodeEncodeError`](https://docs.python.org/3/library/exceptions.html#UnicodeEncodeError "UnicodeEncodeError"). 

sys.dont_write_bytecode[¶](https://docs.python.org/3/library/sys.html#sys.dont_write_bytecode "Link to this definition")
    
If this is true, Python won’t try to write `.pyc` files on the import of source modules. This value is initially set to `True` or `False` depending on the [`-B`](https://docs.python.org/3/using/cmdline.html#cmdoption-B) command line option and the [`PYTHONDONTWRITEBYTECODE`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONDONTWRITEBYTECODE) environment variable, but you can set it yourself to control bytecode file generation. 

sys._emscripten_info[¶](https://docs.python.org/3/library/sys.html#sys._emscripten_info "Link to this definition")
    
A [named tuple](https://docs.python.org/3/glossary.html#term-named-tuple) holding information about the environment on the _wasm32-emscripten_ platform. The named tuple is provisional and may change in the future. 

_emscripten_info.emscripten_version[¶](https://docs.python.org/3/library/sys.html#sys._emscripten_info.emscripten_version "Link to this definition")
    
Emscripten version as tuple of ints (major, minor, micro), e.g. `(3, 1, 8)`. 

_emscripten_info.runtime[¶](https://docs.python.org/3/library/sys.html#sys._emscripten_info.runtime "Link to this definition")
    
Runtime string, e.g. browser user agent, `'Node.js v14.18.2'`, or `'UNKNOWN'`. 

_emscripten_info.pthreads[¶](https://docs.python.org/3/library/sys.html#sys._emscripten_info.pthreads "Link to this definition")
    
`True` if Python is compiled with Emscripten pthreads support. 

_emscripten_info.shared_memory[¶](https://docs.python.org/3/library/sys.html#sys._emscripten_info.shared_memory "Link to this definition")
    
`True` if Python is compiled with shared memory support.
[Availability](https://docs.python.org/3/library/intro.html#availability): Emscripten.
Added in version 3.11. 

sys.pycache_prefix[¶](https://docs.python.org/3/library/sys.html#sys.pycache_prefix "Link to this definition")
    
If this is set (not `None`), Python will write bytecode-cache `.pyc` files to (and read them from) a parallel directory tree rooted at this directory, rather than from `__pycache__` directories in the source code tree. Any `__pycache__` directories in the source code tree will be ignored and new `.pyc` files written within the pycache prefix. Thus if you use [`compileall`](https://docs.python.org/3/library/compileall.html#module-compileall "compileall: Tools for byte-compiling all Python source files in a directory tree.") as a pre-build step, you must ensure you run it with the same pycache prefix (if any) that you will use at runtime.
A relative path is interpreted relative to the current working directory.
This value is initially set based on the value of the [`-X`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) `pycache_prefix=PATH` command-line option or the [`PYTHONPYCACHEPREFIX`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPYCACHEPREFIX) environment variable (command-line takes precedence). If neither are set, it is `None`.
Added in version 3.8. 

sys.excepthook(_type_ , _value_ , _traceback_)[¶](https://docs.python.org/3/library/sys.html#sys.excepthook "Link to this definition")
    
This function prints out a given traceback and exception to `sys.stderr`.
When an exception other than [`SystemExit`](https://docs.python.org/3/library/exceptions.html#SystemExit "SystemExit") is raised and uncaught, the interpreter calls `sys.excepthook` with three arguments, the exception class, exception instance, and a traceback object. In an interactive session this happens just before control is returned to the prompt; in a Python program this happens just before the program exits. The handling of such top-level exceptions can be customized by assigning another three-argument function to `sys.excepthook`.
Raise an auditing event `sys.excepthook` with arguments `hook`, `type`, `value`, `traceback` when an uncaught exception occurs. If no hook has been set, `hook` may be `None`. If any hook raises an exception derived from [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError") the call to the hook will be suppressed. Otherwise, the audit hook exception will be reported as unraisable and `sys.excepthook` will be called.
See also
The [`sys.unraisablehook()`](https://docs.python.org/3/library/sys.html#sys.unraisablehook "sys.unraisablehook") function handles unraisable exceptions and the [`threading.excepthook()`](https://docs.python.org/3/library/threading.html#threading.excepthook "threading.excepthook") function handles exception raised by [`threading.Thread.run()`](https://docs.python.org/3/library/threading.html#threading.Thread.run "threading.Thread.run").