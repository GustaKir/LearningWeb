Title: Adding Contextual Information to Logging Output
URL: https://docs.python.org/3/howto/logging-cookbook.html
Summary: This section discusses the importance of including contextual information in logging, particularly for networked applications. It suggests using the _extra_ parameter for adding client-specific details (like username or IP address) but warns against creating Logger instances for each connection, as they are not garbage collected. This approach could lead to performance issues.
---

## Adding contextual information to your logging output[¶](https://docs.python.org/3/howto/logging-cookbook.html#adding-contextual-information-to-your-logging-output "Link to this heading")
Sometimes you want logging output to contain contextual information in addition to the parameters passed to the logging call. For example, in a networked application, it may be desirable to log client-specific information in the log (e.g. remote client’s username, or IP address). Although you could use the _extra_ parameter to achieve this, it’s not always convenient to pass the information in this way. While it might be tempting to create [`Logger`](https://docs.python.org/3/library/logging.html#logging.Logger "logging.Logger") instances on a per-connection basis, this is not a good idea because these instances are not garbage collected. While this is not a problem in practice, when the number of [`Logger`](https://docs.python.org/3/library/logging.html#logging.Logger "logging.Logger") instances is dependent on the level of granularity you want to use in logging an application, it could be hard to manage if the number of [`Logger`](https://docs.python.org/3/library/logging.html#logging.Logger "logging.Logger") instances becomes effectively unbounded.
### Using LoggerAdapters to impart contextual information[¶](https://docs.python.org/3/howto/logging-cookbook.html#using-loggeradapters-to-impart-contextual-information "Link to this heading")
An easy way in which you can pass contextual information to be output along with logging event information is to use the [`LoggerAdapter`](https://docs.python.org/3/library/logging.html#logging.LoggerAdapter "logging.LoggerAdapter") class. This class is designed to look like a [`Logger`](https://docs.python.org/3/library/logging.html#logging.Logger "logging.Logger"), so that you can call [`debug()`](https://docs.python.org/3/library/logging.html#logging.debug "logging.debug"), [`info()`](https://docs.python.org/3/library/logging.html#logging.info "logging.info"), [`warning()`](https://docs.python.org/3/library/logging.html#logging.warning "logging.warning"), [`error()`](https://docs.python.org/3/library/logging.html#logging.error "logging.error"), [`exception()`](https://docs.python.org/3/library/logging.html#logging.exception "logging.exception"), [`critical()`](https://docs.python.org/3/library/logging.html#logging.critical "logging.critical") and [`log()`](https://docs.python.org/3/library/logging.html#logging.log "logging.log"). These methods have the same signatures as their counterparts in [`Logger`](https://docs.python.org/3/library/logging.html#logging.Logger "logging.Logger"), so you can use the two types of instances interchangeably.
When you create an instance of [`LoggerAdapter`](https://docs.python.org/3/library/logging.html#logging.LoggerAdapter "logging.LoggerAdapter"), you pass it a [`Logger`](https://docs.python.org/3/library/logging.html#logging.Logger "logging.Logger") instance and a dict-like object which contains your contextual information. When you call one of the logging methods on an instance of [`LoggerAdapter`](https://docs.python.org/3/library/logging.html#logging.LoggerAdapter "logging.LoggerAdapter"), it delegates the call to the underlying instance of [`Logger`](https://docs.python.org/3/library/logging.html#logging.Logger "logging.Logger") passed to its constructor, and arranges to pass the contextual information in the delegated call. Here’s a snippet from the code of [`LoggerAdapter`](https://docs.python.org/3/library/logging.html#logging.LoggerAdapter "logging.LoggerAdapter"):
```
defdebug(self, msg, /, *args, **kwargs):
"""
  Delegate a debug call to the underlying logger, after adding
  contextual information from this adapter instance.
  """
  msg, kwargs = self.process(msg, kwargs)
  self.logger.debug(msg, *args, **kwargs)