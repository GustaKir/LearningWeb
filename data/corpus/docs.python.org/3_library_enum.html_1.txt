Title: Overview of Enums in Python
URL: https://docs.python.org/3/library/enum.html
Summary: Enums in Python are special types that differ from regular classes. They consist of enumeration types, where members like `Color.RED` serve as constant values identified by names and associated values. This section outlines the definition, nomenclature, and basic components of the Enum module.
---

```

Even though we can use [`class`](https://docs.python.org/3/reference/compound_stmts.html#class) syntax to create Enums, Enums are not normal Python classes. See [How are Enums different?](https://docs.python.org/3/howto/enum.html#enum-class-differences) for more details.
Note
Nomenclature
  * The class `Color` is an _enumeration_ (or _enum_)
  * The attributes `Color.RED`, `Color.GREEN`, etc., are _enumeration members_ (or _members_) and are functionally constants.
  * The enum members have _names_ and _values_ (the name of `Color.RED` is `RED`, the value of `Color.BLUE` is `3`, etc.)


## Module Contents[Â¶](https://docs.python.org/3/library/enum.html#module-contents "Link to this heading")
> [`EnumType`](https://docs.python.org/3/library/enum.html#enum.EnumType "enum.EnumType")
>> The `type` for Enum and its subclasses.
> [`Enum`](https://docs.python.org/3/library/enum.html#enum.Enum "enum.Enum")
>> Base class for creating enumerated constants.
> [`IntEnum`](https://docs.python.org/3/library/enum.html#enum.IntEnum "enum.IntEnum")
>> Base class for creating enumerated constants that are also subclasses of [`int`](https://docs.python.org/3/library/functions.html#int "int"). ([Notes](https://docs.python.org/3/library/enum.html#notes))
> [`StrEnum`](https://docs.python.org/3/library/enum.html#enum.StrEnum "enum.StrEnum")
>> Base class for creating enumerated constants that are also subclasses of [`str`](https://docs.python.org/3/library/stdtypes.html#str "str"). ([Notes](https://docs.python.org/3/library/enum.html#notes))
> [`Flag`](https://docs.python.org/3/library/enum.html#enum.Flag "enum.Flag")
>> Base class for creating enumerated constants that can be combined using the bitwise operations without losing their [`Flag`](https://docs.python.org/3/library/enum.html#enum.Flag "enum.Flag") membership.
> [`IntFlag`](https://docs.python.org/3/library/enum.html#enum.IntFlag "enum.IntFlag")
>> Base class for creating enumerated constants that can be combined using the bitwise operators without losing their [`IntFlag`](https://docs.python.org/3/library/enum.html#enum.IntFlag "enum.IntFlag") membership. [`IntFlag`](https://docs.python.org/3/library/enum.html#enum.IntFlag "enum.IntFlag") members are also subclasses of [`int`](https://docs.python.org/3/library/functions.html#int "int"). ([Notes](https://docs.python.org/3/library/enum.html#notes))
> [`ReprEnum`](https://docs.python.org/3/library/enum.html#enum.ReprEnum "enum.ReprEnum")
>> Used by [`IntEnum`](https://docs.python.org/3/library/enum.html#enum.IntEnum "enum.IntEnum"), [`StrEnum`](https://docs.python.org/3/library/enum.html#enum.StrEnum "enum.StrEnum"), and [`IntFlag`](https://docs.python.org/3/library/enum.html#enum.IntFlag "enum.IntFlag") to keep the [`str()`](https://docs.python.org/3/library/stdtypes.html#str "str") of the mixed-in type.
> [`EnumCheck`](https://docs.python.org/3/library/enum.html#enum.EnumCheck "enum.EnumCheck")
>> An enumeration with the values `CONTINUOUS`, `NAMED_FLAGS`, and `UNIQUE`, for use with [`verify()`](https://docs.python.org/3/library/enum.html#enum.verify "enum.verify") to ensure various constraints are met by a given enumeration.
> [`FlagBoundary`](https://docs.python.org/3/library/enum.html#enum.FlagBoundary "enum.FlagBoundary")
>> An enumeration with the values `STRICT`, `CONFORM`, `EJECT`, and `KEEP` which allows for more fine-grained control over how invalid values are dealt with in an enumeration.
> [`EnumDict`](https://docs.python.org/3/library/enum.html#enum.EnumDict "enum.EnumDict")
>> A subclass of [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") for use when subclassing [`EnumType`](https://docs.python.org/3/library/enum.html#enum.EnumType "enum.EnumType").
> [`auto`](https://docs.python.org/3/library/enum.html#enum.auto "enum.auto")
>> Instances are replaced with an appropriate value for Enum members. [`StrEnum`](https://docs.python.org/3/library/enum.html#enum.StrEnum "enum.StrEnum") defaults to the lower-cased version of the member name, while other Enums default to 1 and increase from there.
> [`property()`](https://docs.python.org/3/library/enum.html#enum.property "enum.property")
>> Allows [`Enum`](https://docs.python.org/3/library/enum.html#enum.Enum "enum.Enum") members to have attributes without conflicting with member names. The `value` and `name` attributes are implemented this way.
> [`unique()`](https://docs.python.org/3/library/enum.html#enum.unique "enum.unique")
>> Enum class decorator that ensures only one name is bound to any one value.
> [`verify()`](https://docs.python.org/3/library/enum.html#enum.verify "enum.verify")
>> Enum class decorator that checks user-selectable constraints on an enumeration.
> [`member()`](https://docs.python.org/3/library/enum.html#enum.member "enum.member")
>> Make `obj` a member. Can be used as a decorator.
> [`nonmember()`](https://docs.python.org/3/library/enum.html#enum.nonmember "enum.nonmember")
>> Do not make `obj` a member. Can be u