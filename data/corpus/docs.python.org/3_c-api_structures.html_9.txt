Title: Py_RELATIVE_OFFSET Constant
URL: https://docs.python.org/3/c-api/structures.html
Summary: The Py_RELATIVE_OFFSET constant specifies that the offset for a PyMemberDef entry is relative to subclass-specific data instead of PyObject. It is required for Py_tp_members slots when creating a class with a negative basicsize.
---

Py_RELATIVE_OFFSET[¶](https://docs.python.org/3/c-api/structures.html#c.Py_RELATIVE_OFFSET "Link to this definition")
    
Indicates that the [`offset`](https://docs.python.org/3/c-api/structures.html#c.PyMemberDef.offset "PyMemberDef.offset") of this `PyMemberDef` entry indicates an offset from the subclass-specific data, rather than from `PyObject`.
Can only be used as part of [`Py_tp_members`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_members "PyTypeObject.tp_members") [`slot`](https://docs.python.org/3/c-api/type.html#c.PyType_Slot "PyType_Slot") when creating a class using negative [`basicsize`](https://docs.python.org/3/c-api/type.html#c.PyType_Spec.basicsize "PyType_Spec.basicsize"). It is mandatory in that case.
This flag is only used in [`PyType_Slot`](https://docs.python.org/3/c-api/type.html#c.PyType_Slot "PyType_Slot"). When setting [`tp_members`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_members "PyTypeObject.tp_members") during class creation, Python clears it and sets [`PyMemberDef.offset`](https://docs.python.org/3/c-api/structures.html#c.PyMemberDef.offset "PyMemberDef.offset") to the offset from the `PyObject` struct.
Changed in version 3.10: The `RESTRICTED`, `READ_RESTRICTED` and `WRITE_RESTRICTED` macros available with `#include "structmember.h"` are deprecated. `READ_RESTRICTED` and `RESTRICTED` are equivalent to [`Py_AUDIT_READ`](https://docs.python.org/3/c-api/structures.html#c.Py_AUDIT_READ "Py_AUDIT_READ"); `WRITE_RESTRICTED` does nothing.
Changed in version 3.12: The `READONLY` macro was renamed to [`Py_READONLY`](https://docs.python.org/3/c-api/structures.html#c.Py_READONLY "Py_READONLY"). The `PY_AUDIT_READ` macro was renamed with the `Py_` prefix. The new names are now always available. Previously, these required `#include "structmember.h"`. The header is still available and it provides the old names.
### Member types[¶](https://docs.python.org/3/c-api/structures.html#member-types "Link to this heading")
[`PyMemberDef.type`](https://docs.python.org/3/c-api/structures.html#c.PyMemberDef.type "PyMemberDef.type") can be one of the following macros corresponding to various C types. When the member is accessed in Python, it will be converted to the equivalent Python type. When it is set from Python, it will be converted back to the C type. If that is not possible, an exception such as [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") or [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised.
Unless marked (D), attributes defined this way cannot be deleted using e.g. [`del`](https://docs.python.org/3/reference/simple_stmts.html#del) or [`delattr()`](https://docs.python.org/3/library/functions.html#delattr "delattr").
Macro name | C type | Python type  
---|---|--- 

Py_T_BYTE[¶](https://docs.python.org/3/c-api/structures.html#c.Py_T_BYTE "Link to this definition")
| char | [`int`](https://docs.python.org/3/library/functions.html#int "int") 

Py_T_SHORT[¶](https://docs.python.org/3/c-api/structures.html#c.Py_T_SHORT "Link to this definition")
| short | [`int`](https://docs.python.org/3/library/functions.html#int "int") 

Py_T_INT[¶](https://docs.python.org/3/c-api/structures.html#c.Py_T_INT "Link to this definition")
| int | [`int`](https://docs.python.org/3/library/functions.html#int "int") 

Py_T_LONG[¶](https://docs.python.org/3/c-api/structures.html#c.Py_T_LONG "Link to this definition")
| long | [`int`](https://docs.python.org/3/library/functions.html#int "int") 

Py_T_LONGLONG[¶](https://docs.python.org/3/c-api/structures.html#c.Py_T_LONGLONG "Link to this definition")
| longlong | [`int`](https://docs.python.org/3/library/functions.html#int "int") 

Py_T_UBYTE[¶](https://docs.python.org/3/c-api/structures.html#c.Py_T_UBYTE "Link to this definition")
| unsignedchar | [`int`](https://docs.python.org/3/library/functions.html#int "int") 

Py_T_UINT[¶](https://docs.python.org/3/c-api/structures.html#c.Py_T_UINT "Link to this definition")
| unsignedint | [`int`](https://docs.python.org/3/library/functions.html#int "int") 

Py_T_USHORT[¶](https://docs.python.org/3/c-api/structures.html#c.Py_T_USHORT "Link to this definition")
| unsignedshort | [`int`](https://docs.python.org/3/library/functions.html#int "int") 

Py_T_ULONG[¶](https://docs.python.org/3/c-api/structures.html#c.Py_T_ULONG "Link to this definition")
| unsignedlong | [`int`](https://docs.python.org/3/library/functions.html#int "int") 

Py_T_ULONGLONG[¶](https://docs.python.org/3/c-api/structures.html#c.Py_T_ULONGLONG "Link to this definition")
| unsignedlonglong | [`int`](https://docs.python.org/3/library/functions.html#int "int") 

Py_T_PYSSIZET[¶](https://docs.python.org/3/c-api/structures.html#c.Py_T_PYSSIZET "Link to this definition")
| [Py_ssize_t](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t") | [`int`](https://docs.python.org/3/library/functions.html#int "int")