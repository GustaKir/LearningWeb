Title: General Information about Python
URL: https://docs.python.org/3/faq/general.html
Summary: Python is an interpreted, interactive, object-oriented programming language known for its clear syntax and support for multiple programming paradigms. It includes features like modules, exceptions, and dynamic typing, and is extensible in C or C++. Python is portable across various operating systems including Unix variants, Linux, macOS, and Windows.
---

## [General Information](https://docs.python.org/3/faq/general.html#id3)[¶](https://docs.python.org/3/faq/general.html#general-information "Link to this heading")
### [What is Python?](https://docs.python.org/3/faq/general.html#id4)[¶](https://docs.python.org/3/faq/general.html#what-is-python "Link to this heading")
Python is an interpreted, interactive, object-oriented programming language. It incorporates modules, exceptions, dynamic typing, very high level dynamic data types, and classes. It supports multiple programming paradigms beyond object-oriented programming, such as procedural and functional programming. Python combines remarkable power with very clear syntax. It has interfaces to many system calls and libraries, as well as to various window systems, and is extensible in C or C++. It is also usable as an extension language for applications that need a programmable interface. Finally, Python is portable: it runs on many Unix variants including Linux and macOS, and on Windows.
To find out more, start with [The Python Tutorial](https://docs.python.org/3/tutorial/index.html#tutorial-index). The [Beginner’s Guide to Python](https://wiki.python.org/moin/BeginnersGuide) links to other introductory tutorials and resources for learning Python.
### [What is the Python Software Foundation?](https://docs.python.org/3/faq/general.html#id5)[¶](https://docs.python.org/3/faq/general.html#what-is-the-python-software-foundation "Link to this heading")
The Python Software Foundation is an independent non-profit organization that holds the copyright on Python versions 2.1 and newer. The PSF’s mission is to advance open source technology related to the Python programming language and to publicize the use of Python. The PSF’s home page is at <https://www.python.org/psf/>.
Donations to the PSF are tax-exempt in the US. If you use Python and find it helpful, please contribute via [the PSF donation page](https://www.python.org/psf/donations/).
### [Are there copyright restrictions on the use of Python?](https://docs.python.org/3/faq/general.html#id6)[¶](https://docs.python.org/3/faq/general.html#are-there-copyright-restrictions-on-the-use-of-python "Link to this heading")
You can do anything you want with the source, as long as you leave the copyrights in and display those copyrights in any documentation about Python that you produce. If you honor the copyright rules, it’s OK to use Python for commercial use, to sell copies of Python in source or binary form (modified or unmodified), or to sell products that incorporate Python in some form. We would still like to know about all commercial use of Python, of course.
See [the license page](https://docs.python.org/3/license.html) to find further explanations and the full text of the PSF License.
The Python logo is trademarked, and in certain cases permission is required to use it. Consult [the Trademark Usage Policy](https://www.python.org/psf/trademarks/) for more information.
### [Why was Python created in the first place?](https://docs.python.org/3/faq/general.html#id7)[¶](https://docs.python.org/3/faq/general.html#why-was-python-created-in-the-first-place "Link to this heading")
Here’s a _very_ brief summary of what started it all, written by Guido van Rossum:
> I had extensive experience with implementing an interpreted language in the ABC group at CWI, and from working with this group I had learned a lot about language design. This is the origin of many Python features, including the use of indentation for statement grouping and the inclusion of very-high-level data types (although the details are all different in Python).
> I had a number of gripes about the ABC language, but also liked many of its features. It was impossible to extend the ABC language (or its implementation) to remedy my complaints – in fact its lack of extensibility was one of its biggest problems. I had some experience with using Modula-2+ and talked with the designers of Modula-3 and read the Modula-3 report. Modula-3 is the origin of the syntax and semantics used for exceptions, and some other Python features.
> I was working in the Amoeba distributed operating system group at CWI. We needed a better way to do system administration than by writing either C programs or Bourne shell scripts, since Amoeba had its own system call interface which wasn’t easily accessible from the Bourne shell. My experience with error handling in Amoeba made me acutely aware of the importance of exceptions as a programming language feature.
> It occurred to me that a scripting language with a syntax like ABC but with access to the Amoeba system calls would fill the need. I realized that it would be foolish to write an Amoeba-specific language, so I decided that I needed a language that was generally extensible.
> During the 1989 Christmas holidays, I had a lot of time on my hand, so I decided to give it a try. During the next year, while still mostly working on it in my own time, Python was used in the Amoeba projec