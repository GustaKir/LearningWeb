Title: PyImport_ExecCodeModuleEx Function
URL: https://docs.python.org/3/c-api/import.html
Summary: The `PyImport_ExecCodeModuleEx` function executes a code object and initializes a module with its specified name and path. Unlike `PyImport_ExecCodeModule()`, this function allows setting the module's `__file__` attribute to a given pathname, if it is not NULL.
---

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyImport_ExecCodeModuleEx(constchar*name, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*co, constchar*pathname)[¶](https://docs.python.org/3/c-api/import.html#c.PyImport_ExecCodeModuleEx "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Like [`PyImport_ExecCodeModule()`](https://docs.python.org/3/c-api/import.html#c.PyImport_ExecCodeModule "PyImport_ExecCodeModule"), but the [`__file__`](https://docs.python.org/3/reference/datamodel.html#module.__file__ "module.__file__") attribute of the module object is set to _pathname_ if it is non-`NULL`.
See also [`PyImport_ExecCodeModuleWithPathnames()`](https://docs.python.org/3/c-api/import.html#c.PyImport_ExecCodeModuleWithPathnames "PyImport_ExecCodeModuleWithPathnames"). 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyImport_ExecCodeModuleObject([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*name, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*co, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*pathname, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*cpathname)[¶](https://docs.python.org/3/c-api/import.html#c.PyImport_ExecCodeModuleObject "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.7._
Like [`PyImport_ExecCodeModuleEx()`](https://docs.python.org/3/c-api/import.html#c.PyImport_ExecCodeModuleEx "PyImport_ExecCodeModuleEx"), but the [`__cached__`](https://docs.python.org/3/reference/datamodel.html#module.__cached__ "module.__cached__") attribute of the module object is set to _cpathname_ if it is non-`NULL`. Of the three functions, this is the preferred one to use.
Added in version 3.3.
Changed in version 3.12: Setting [`__cached__`](https://docs.python.org/3/reference/datamodel.html#module.__cached__ "module.__cached__") is deprecated. See [`ModuleSpec`](https://docs.python.org/3/library/importlib.html#importlib.machinery.ModuleSpec "importlib.machinery.ModuleSpec") for alternatives. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyImport_ExecCodeModuleWithPathnames(constchar*name, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*co, constchar*pathname, constchar*cpathname)[¶](https://docs.python.org/3/c-api/import.html#c.PyImport_ExecCodeModuleWithPathnames "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Like [`PyImport_ExecCodeModuleObject()`](https://docs.python.org/3/c-api/import.html#c.PyImport_ExecCodeModuleObject "PyImport_ExecCodeModuleObject"), but _name_ , _pathname_ and _cpathname_ are UTF-8 encoded strings. Attempts are also made to figure out what the value for _pathname_ should be from _cpathname_ if the former is set to `NULL`.
Added in version 3.2.
Changed in version 3.3: Uses `imp.source_from_cache()` in calculating the source path if only the bytecode path is provided.
Changed in version 3.12: No longer uses the removed `imp` module. 

longPyImport_GetMagicNumber()[¶](https://docs.python.org/3/c-api/import.html#c.PyImport_GetMagicNumber "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return the magic number for Python bytecode files (a.k.a. `.pyc` file). The magic number should be present in the first four bytes of the bytecode file, in little-endian byte order. Returns `-1` on error.
Changed in version 3.3: Return value of `-1` upon failure. 

constchar*PyImport_GetMagicTag()[¶](https://docs.python.org/3/c-api/import.html#c.PyImport_GetMagicTag "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return the magic tag string for [**PEP 3147**](https://peps.python.org/pep-3147/) format Python bytecode file names. Keep in mind that the value at `sys.implementation.cache_tag` is authoritative and should be used instead of this function.
Added in version 3.2. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyImport_GetModuleDict()[¶](https://docs.python.org/3/c-api/import.html#c.PyImport_GetModuleDict "Link to this definition")
    _Return value: Borrowed reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return the dictionary used for the module administration (a.k.a. `sys.modules`). Note that this is a per-interpreter variable.