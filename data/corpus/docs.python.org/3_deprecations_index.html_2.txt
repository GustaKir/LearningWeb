Title: Deprecations in Python 3
URL: https://docs.python.org/3/deprecations/index.html
Summary: This document discusses the deprecation of certain features in Python 3, specifically the removal of inefficient and inconsistent support for copy, deepcopy, and pickle operations in the `itertools` module, effective in version 3.14. It also references the use of abstract base classes from the `importlib.resources.abc` module.
---

g/3/library/importlib.resources.abc.html#module-importlib.resources.abc "importlib.resources.abc: Abstract base classes for resources") classes instead:
    * [`importlib.resources.abc.Traversable`](https://docs.python.org/3/library/importlib.resources.abc.html#importlib.resources.abc.Traversable "importlib.resources.abc.Traversable")
    * [`importlib.resources.abc.TraversableResources`](https://docs.python.org/3/library/importlib.resources.abc.html#importlib.resources.abc.TraversableResources "importlib.resources.abc.TraversableResources")
(Contributed by Jason R. Coombs and Hugo van Kemenade in [gh-93963](https://github.com/python/cpython/issues/93963).)
  * [`itertools`](https://docs.python.org/3/library/itertools.html#module-itertools "itertools: Functions creating iterators for efficient looping.") had undocumented, inefficient, historically buggy, and inconsistent support for copy, deepcopy, and pickle operations. This will be removed in 3.14 for a significant reduction in code volume and maintenance burden. (Contributed by Raymond Hettinger in [gh-101588](https://github.com/python/cpython/issues/101588).)
  * [`multiprocessing`](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing "multiprocessing: Process-based parallelism."): The default start method will change to a safer one on Linux, BSDs, and other non-macOS POSIX platforms where `'fork'` is currently the default ([gh-84559](https://github.com/python/cpython/issues/84559)). Adding a runtime warning about this was deemed too disruptive as the majority of code is not expected to care. Use the [`get_context()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.get_context "multiprocessing.get_context") or [`set_start_method()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.set_start_method "multiprocessing.set_start_method") APIs to explicitly specify when your code _requires_ `'fork'`. See [Contexts and start methods](https://docs.python.org/3/library/multiprocessing.html#multiprocessing-start-methods).
  * [`pathlib`](https://docs.python.org/3/library/pathlib.html#module-pathlib "pathlib: Object-oriented filesystem paths"): [`is_relative_to()`](https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.is_relative_to "pathlib.PurePath.is_relative_to") and [`relative_to()`](https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.relative_to "pathlib.PurePath.relative_to"): passing additional arguments is deprecated.
  * [`pkgutil`](https://docs.python.org/3/library/pkgutil.html#module-pkgutil "pkgutil: Utilities for the import system."): [`find_loader()`](https://docs.python.org/3/library/pkgutil.html#pkgutil.find_loader "pkgutil.find_loader") and [`get_loader()`](https://docs.python.org/3/library/pkgutil.html#pkgutil.get_loader "pkgutil.get_loader") now raise [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning"); use [`importlib.util.find_spec()`](https://docs.python.org/3/library/importlib.html#importlib.util.find_spec "importlib.util.find_spec") instead. (Contributed by Nikita Sobolev in [gh-97850](https://github.com/python/cpython/issues/97850).)
  * [`pty`](https://docs.python.org/3/library/pty.html#module-pty "pty: Pseudo-Terminal Handling for Unix. \(Unix\)"):
    * `master_open()`: use [`pty.openpty()`](https://docs.python.org/3/library/pty.html#pty.openpty "pty.openpty").
    * `slave_open()`: use [`pty.openpty()`](https://docs.python.org/3/library/pty.html#pty.openpty "pty.openpty").
  * [`sqlite3`](https://docs.python.org/3/library/sqlite3.html#module-sqlite3 "sqlite3: A DB-API 2.0 implementation using SQLite 3.x."):
    * [`version`](https://docs.python.org/3/library/sqlite3.html#sqlite3.version "sqlite3.version") and [`version_info`](https://docs.python.org/3/library/sqlite3.html#sqlite3.version_info "sqlite3.version_info").
    * [`execute()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute "sqlite3.Cursor.execute") and [`executemany()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.executemany "sqlite3.Cursor.executemany") if [named placeholders](https://docs.python.org/3/library/sqlite3.html#sqlite3-placeholders) are used and _parameters_ is a sequence instead of a [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict").
  * [`typing`](https://docs.python.org/3/library/typing.html#module-typing "typing: Support for type hints \(see :pep:`484`\)."): [`ByteString`](https://docs.python.org/3/library/typing.html#typing.ByteString "typing.ByteString"), deprecated since Python 3.9, now causes a [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning") to be emitted when it is used.
  * [`urllib`](https://docs.python.org/3/library/urllib.html#module-urllib "urllib"): `urllib.parse.Quoter` is deprecated: it was not intended to be a public API. (Contributed by Gregory P.