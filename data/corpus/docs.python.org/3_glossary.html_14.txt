Title: Key Function
URL: https://docs.python.org/3/glossary.html
Summary: A key function, or collation function, is a callable that returns a value used for sorting or ordering elements in Python. Examples include `locale.strxfrm()` for locale-specific sort conventions. Several built-in functions, such as `min()`, `max()`, `sorted()`, and others, accept key functions to control element ordering or grouping.
---

key function[¶](https://docs.python.org/3/glossary.html#term-key-function "Link to this term")
    
A key function or collation function is a callable that returns a value used for sorting or ordering. For example, [`locale.strxfrm()`](https://docs.python.org/3/library/locale.html#locale.strxfrm "locale.strxfrm") is used to produce a sort key that is aware of locale specific sort conventions.
A number of tools in Python accept key functions to control how elements are ordered or grouped. They include [`min()`](https://docs.python.org/3/library/functions.html#min "min"), [`max()`](https://docs.python.org/3/library/functions.html#max "max"), [`sorted()`](https://docs.python.org/3/library/functions.html#sorted "sorted"), [`list.sort()`](https://docs.python.org/3/library/stdtypes.html#list.sort "list.sort"), [`heapq.merge()`](https://docs.python.org/3/library/heapq.html#heapq.merge "heapq.merge"), [`heapq.nsmallest()`](https://docs.python.org/3/library/heapq.html#heapq.nsmallest "heapq.nsmallest"), [`heapq.nlargest()`](https://docs.python.org/3/library/heapq.html#heapq.nlargest "heapq.nlargest"), and [`itertools.groupby()`](https://docs.python.org/3/library/itertools.html#itertools.groupby "itertools.groupby").
There are several ways to create a key function. For example. the [`str.lower()`](https://docs.python.org/3/library/stdtypes.html#str.lower "str.lower") method can serve as a key function for case insensitive sorts. Alternatively, a key function can be built from a [`lambda`](https://docs.python.org/3/reference/expressions.html#lambda) expression such as `lambda r: (r[0], r[2])`. Also, [`operator.attrgetter()`](https://docs.python.org/3/library/operator.html#operator.attrgetter "operator.attrgetter"), [`operator.itemgetter()`](https://docs.python.org/3/library/operator.html#operator.itemgetter "operator.itemgetter"), and [`operator.methodcaller()`](https://docs.python.org/3/library/operator.html#operator.methodcaller "operator.methodcaller") are three key function constructors. See the [Sorting HOW TO](https://docs.python.org/3/howto/sorting.html#sortinghowto) for examples of how to create and use key functions. 

keyword argument[¶](https://docs.python.org/3/glossary.html#term-keyword-argument "Link to this term")
    
See [argument](https://docs.python.org/3/glossary.html#term-argument). 

lambda[¶](https://docs.python.org/3/glossary.html#term-lambda "Link to this term")
    
An anonymous inline function consisting of a single [expression](https://docs.python.org/3/glossary.html#term-expression) which is evaluated when the function is called. The syntax to create a lambda function is `lambda [parameters]: expression` 

LBYL[¶](https://docs.python.org/3/glossary.html#term-LBYL "Link to this term")
    
Look before you leap. This coding style explicitly tests for pre-conditions before making calls or lookups. This style contrasts with the [EAFP](https://docs.python.org/3/glossary.html#term-EAFP) approach and is characterized by the presence of many [`if`](https://docs.python.org/3/reference/compound_stmts.html#if) statements.
In a multi-threaded environment, the LBYL approach can risk introducing a race condition between “the looking” and “the leaping”. For example, the code, `if key in mapping: return mapping[key]` can fail if another thread removes _key_ from _mapping_ after the test, but before the lookup. This issue can be solved with locks or by using the EAFP approach. 

lexical analyzer[¶](https://docs.python.org/3/glossary.html#term-lexical-analyzer "Link to this term")
    
Formal name for the _tokenizer_ ; see [token](https://docs.python.org/3/glossary.html#term-token). 

list[¶](https://docs.python.org/3/glossary.html#term-list "Link to this term")
    
A built-in Python [sequence](https://docs.python.org/3/glossary.html#term-sequence). Despite its name it is more akin to an array in other languages than to a linked list since access to elements is _O_(1). 

list comprehension[¶](https://docs.python.org/3/glossary.html#term-list-comprehension "Link to this term")
    
A compact way to process all or part of the elements in a sequence and return a list with the results. `result = ['{:#04x}'.format(x) for x in range(256) if x % 2 == 0]` generates a list of strings containing even hex numbers (0x..) in the range from 0 to 255. The [`if`](https://docs.python.org/3/reference/compound_stmts.html#if) clause is optional. If omitted, all elements in `range(256)` are processed.