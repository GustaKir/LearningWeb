Title: Python 3.3 Feature Enhancements
URL: https://docs.python.org/3/whatsnew/3.3.html
Summary: This section highlights various Python Enhancement Proposals (PEPs) introduced in Python 3.3, including PEP 3155, which provides qualified names for classes and functions, PEP 412, which introduces key-sharing dictionaries to reduce memory consumption, and PEP 362, which implements a function signature object for improved function signature handling.
---

```

See also 

[**PEP 3155**](https://peps.python.org/pep-3155/) - Qualified name for classes and functions
    
PEP written and implemented by Antoine Pitrou.
## PEP 412: Key-Sharing Dictionary[¶](https://docs.python.org/3/whatsnew/3.3.html#pep-412-key-sharing-dictionary "Link to this heading")
Dictionaries used for the storage of objects’ attributes are now able to share part of their internal storage between each other (namely, the part which stores the keys and their respective hashes). This reduces the memory consumption of programs creating many instances of non-builtin types.
See also 

[**PEP 412**](https://peps.python.org/pep-0412/) - Key-Sharing Dictionary
    
PEP written and implemented by Mark Shannon.
## PEP 362: Function Signature Object[¶](https://docs.python.org/3/whatsnew/3.3.html#pep-362-function-signature-object "Link to this heading")
A new function [`inspect.signature()`](https://docs.python.org/3/library/inspect.html#inspect.signature "inspect.signature") makes introspection of python callables easy and straightforward. A broad range of callables is supported: python functions, decorated or not, classes, and [`functools.partial()`](https://docs.python.org/3/library/functools.html#functools.partial "functools.partial") objects. New classes [`inspect.Signature`](https://docs.python.org/3/library/inspect.html#inspect.Signature "inspect.Signature"), [`inspect.Parameter`](https://docs.python.org/3/library/inspect.html#inspect.Parameter "inspect.Parameter") and [`inspect.BoundArguments`](https://docs.python.org/3/library/inspect.html#inspect.BoundArguments "inspect.BoundArguments") hold information about the call signatures, such as, annotations, default values, parameters kinds, and bound arguments, which considerably simplifies writing decorators and any code that validates or amends calling signatures or arguments.
See also 

[**PEP 362**](https://peps.python.org/pep-0362/): - Function Signature Object
    
PEP written by Brett Cannon, Yury Selivanov, Larry Hastings, Jiwon Seo; implemented by Yury Selivanov.
## PEP 421: Adding sys.implementation[¶](https://docs.python.org/3/whatsnew/3.3.html#pep-421-adding-sys-implementation "Link to this heading")
A new attribute on the [`sys`](https://docs.python.org/3/library/sys.html#module-sys "sys: Access system-specific parameters and functions.") module exposes details specific to the implementation of the currently running interpreter. The initial set of attributes on [`sys.implementation`](https://docs.python.org/3/library/sys.html#sys.implementation "sys.implementation") are `name`, `version`, `hexversion`, and `cache_tag`.
The intention of `sys.implementation` is to consolidate into one namespace the implementation-specific data used by the standard library. This allows different Python implementations to share a single standard library code base much more easily. In its initial state, `sys.implementation` holds only a small portion of the implementation-specific data. Over time that ratio will shift in order to make the standard library more portable.
One example of improved standard library portability is `cache_tag`. As of Python 3.3, `sys.implementation.cache_tag` is used by [`importlib`](https://docs.python.org/3/library/importlib.html#module-importlib "importlib: The implementation of the import machinery.") to support [**PEP 3147**](https://peps.python.org/pep-3147/) compliance. Any Python implementation that uses `importlib` for its built-in import system may use `cache_tag` to control the caching behavior for modules.
### SimpleNamespace[¶](https://docs.python.org/3/whatsnew/3.3.html#simplenamespace "Link to this heading")
The implementation of `sys.implementation` also introduces a new type to Python: [`types.SimpleNamespace`](https://docs.python.org/3/library/types.html#types.SimpleNamespace "types.SimpleNamespace"). In contrast to a mapping-based namespace, like [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict"), `SimpleNamespace` is attribute-based, like [`object`](https://docs.python.org/3/library/functions.html#object "object"). However, unlike `object`, `SimpleNamespace` instances are writable. This means that you can add, remove, and modify the namespace through normal attribute access.
See also