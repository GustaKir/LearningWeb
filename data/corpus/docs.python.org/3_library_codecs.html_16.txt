Title: Python Predefined Codecs and Encodings
URL: https://docs.python.org/3/library/codecs.html
Summary: This section details predefined codecs specific to Python, categorized by expected input and output types. It emphasizes that while text encodings are common, the codec infrastructure supports various data transformations. Asymmetric codecs are noted for their directionality in encoding.
---

Encodings[¶](https://docs.python.org/3/library/codecs.html#python-specific-encodings "Link to this heading")
A number of predefined codecs are specific to Python, so their codec names have no meaning outside Python. These are listed in the tables below based on the expected input and output types (note that while text encodings are the most common use case for codecs, the underlying codec infrastructure supports arbitrary data transforms rather than just text encodings). For asymmetric codecs, the stated meaning describes the encoding direction.
### Text Encodings[¶](https://docs.python.org/3/library/codecs.html#text-encodings "Link to this heading")
The following codecs provide [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") to [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") encoding and [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object) to [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") decoding, similar to the Unicode text encodings.
Codec | Aliases | Meaning  
---|---|---  
idna |  | Implement [**RFC 3490**](https://datatracker.ietf.org/doc/html/rfc3490.html), see also [`encodings.idna`](https://docs.python.org/3/library/codecs.html#module-encodings.idna "encodings.idna: Internationalized Domain Names implementation"). Only `errors='strict'` is supported.  
mbcs | ansi, dbcs | Windows only: Encode the operand according to the ANSI codepage (CP_ACP).  
oem |  | Windows only: Encode the operand according to the OEM codepage (CP_OEMCP). Added in version 3.6.  
palmos |  | Encoding of PalmOS 3.5.  
punycode |  | Implement [**RFC 3492**](https://datatracker.ietf.org/doc/html/rfc3492.html). Stateful codecs are not supported.  
raw_unicode_escape |  | Latin-1 encoding with `\u_XXXX_`and`\U _XXXXXXXX_`for other code points. Existing backslashes are not escaped in any way. It is used in the Python pickle protocol.  
undefined |  | Raise an exception for all conversions, even empty strings. The error handler is ignored.  
unicode_escape |  | Encoding suitable as the contents of a Unicode literal in ASCII-encoded Python source code, except that quotes are not escaped. Decode from Latin-1 source code. Beware that Python source code actually uses UTF-8 by default.  
Changed in version 3.8: “unicode_internal” codec is removed.
### Binary Transforms[¶](https://docs.python.org/3/library/codecs.html#binary-transforms "Link to this heading")
The following codecs provide binary transforms: [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object) to [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") mappings. They are not supported by [`bytes.decode()`](https://docs.python.org/3/library/stdtypes.html#bytes.decode "bytes.decode") (which only produces [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") output).
Codec | Aliases | Meaning | Encoder / decoder  
---|---|---|---  
base64_codec [[1]](https://docs.python.org/3/library/codecs.html#b64) | base64, base_64 | Convert the operand to multiline MIME base64 (the result always includes a trailing `'\n'`). Changed in version 3.4: accepts any [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object) as input for encoding and decoding | [`base64.encodebytes()`](https://docs.python.org/3/library/base64.html#base64.encodebytes "base64.encodebytes") / [`base64.decodebytes()`](https://docs.python.org/3/library/base64.html#base64.decodebytes "base64.decodebytes")  
bz2_codec | bz2 | Compress the operand using bz2. | [`bz2.compress()`](https://docs.python.org/3/library/bz2.html#bz2.compress "bz2.compress") / [`bz2.decompress()`](https://docs.python.org/3/library/bz2.html#bz2.decompress "bz2.decompress")  
hex_codec | hex | Convert the operand to hexadecimal representation, with two digits per byte. | [`binascii.b2a_hex()`](https://docs.python.org/3/library/binascii.html#binascii.b2a_hex "binascii.b2a_hex") / [`binascii.a2b_hex()`](https://docs.python.org/3/library/binascii.html#binascii.a2b_hex "binascii.a2b_hex")  
quopri_codec | quopri, quotedprintable, quoted_printable | Convert the operand to MIME quoted printable. | [`quopri.encode()`](https://docs.python.org/3/library/quopri.html#quopri.encode "quopri.encode") with `quotetabs=True` / [`quopri.decode()`](https://docs.python.org/3/library/quopri.html#quopri.decode "quopri.decode")  
uu_codec | uu | Convert the operand using uuencode. |   
zlib_codec | zip, zlib | Compress the operand using gzip.