Title: os.path.isdevdrive Function
URL: https://docs.python.org/3/library/os.path.html
Summary: The `os.path.isdevdrive` function checks if a given pathname is on a Windows Dev Drive, which is optimized for developer use. It returns `True` for valid paths on Dev Drives and `False` on unsupported platforms. Introduced in Python 3.12 and updated in 3.13 to support all platforms, where it returns `False` if Dev Drives are not supported.
---

os.path.isdevdrive(_path_)[¶](https://docs.python.org/3/library/os.path.html#os.path.isdevdrive "Link to this definition")
    
Return `True` if pathname _path_ is located on a Windows Dev Drive. A Dev Drive is optimized for developer scenarios, and offers faster performance for reading and writing files. It is recommended for use for source code, temporary build directories, package caches, and other IO-intensive operations.
May raise an error for an invalid path, for example, one without a recognizable drive, but returns `False` on platforms that do not support Dev Drives. See [the Windows documentation](https://learn.microsoft.com/windows/dev-drive/) for information on enabling and creating Dev Drives.
Added in version 3.12.
Changed in version 3.13: The function is now available on all platforms, and will always return `False` on those that have no support for Dev Drives 

os.path.isreserved(_path_)[¶](https://docs.python.org/3/library/os.path.html#os.path.isreserved "Link to this definition")
    
Return `True` if _path_ is a reserved pathname on the current system.
On Windows, reserved filenames include those that end with a space or dot; those that contain colons (i.e. file streams such as “name:stream”), wildcard characters (i.e. `'*?"<>'`), pipe, or ASCII control characters; as well as DOS device names such as “NUL”, “CON”, “CONIN$”, “CONOUT$”, “AUX”, “PRN”, “COM1”, and “LPT1”.
Note
This function approximates rules for reserved paths on most Windows systems. These rules change over time in various Windows releases. This function may be updated in future Python releases as changes to the rules become broadly available.
[Availability](https://docs.python.org/3/library/intro.html#availability): Windows.
Added in version 3.13. 

os.path.join(_path_ , _* paths_)[¶](https://docs.python.org/3/library/os.path.html#os.path.join "Link to this definition")
    
Join one or more path segments intelligently. The return value is the concatenation of _path_ and all members of _*paths_ , with exactly one directory separator following each non-empty part, except the last. That is, the result will only end in a separator if the last part is either empty or ends in a separator. If a segment is an absolute path (which on Windows requires both a drive and a root), then all previous segments are ignored and joining continues from the absolute path segment.
On Windows, the drive is not reset when a rooted path segment (e.g., `r'\foo'`) is encountered. If a segment is on a different drive or is an absolute path, all previous segments are ignored and the drive is reset. Note that since there is a current directory for each drive, `os.path.join("c:", "foo")` represents a path relative to the current directory on drive `C:` (`c:foo`), not `c:\foo`.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object) for _path_ and _paths_. 

os.path.normcase(_path_)[¶](https://docs.python.org/3/library/os.path.html#os.path.normcase "Link to this definition")
    
Normalize the case of a pathname. On Windows, convert all characters in the pathname to lowercase, and also convert forward slashes to backward slashes. On other operating systems, return the path unchanged.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). 

os.path.normpath(_path_)[¶](https://docs.python.org/3/library/os.path.html#os.path.normpath "Link to this definition")
    
Normalize a pathname by collapsing redundant separators and up-level references so that `A//B`, `A/B/`, `A/./B` and `A/foo/../B` all become `A/B`. This string manipulation may change the meaning of a path that contains symbolic links. On Windows, it converts forward slashes to backward slashes. To normalize case, use [`normcase()`](https://docs.python.org/3/library/os.path.html#os.path.normcase "os.path.normcase").
Note
On POSIX systems, in accordance with [IEEE Std 1003.1 2013 Edition; 4.13 Pathname Resolution](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_13), if a pathname begins with exactly two slashes, the first component following the leading characters may be interpreted in an implementation-defined manner, although more than two leading characters shall be treated as a single character.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object).