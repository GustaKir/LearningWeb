Title: PyUnicode_AsASCIIString Function and Character Map Codecs
URL: https://docs.python.org/3/c-api/unicode.html
Summary: The `PyUnicode_AsASCIIString` function encodes a Unicode object to ASCII and returns it as a bytes object, with strict error handling. If an exception occurs, it returns `NULL`. Additionally, there is a discussion about character map codecs, which utilize mappings to facilitate encoding and decoding characters, forming the basis for many standard codecs in the `encodings` package.
---

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyUnicode_AsASCIIString([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*unicode)[¶](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_AsASCIIString "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Encode a Unicode object using ASCII and return the result as Python bytes object. Error handling is “strict”. Return `NULL` if an exception was raised by the codec.
### Character Map Codecs[¶](https://docs.python.org/3/c-api/unicode.html#character-map-codecs "Link to this heading")
This codec is special in that it can be used to implement many different codecs (and this is in fact what was done to obtain most of the standard codecs included in the `encodings` package). The codec uses mappings to encode and decode characters. The mapping objects provided must support the [`__getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__getitem__ "object.__getitem__") mapping interface; dictionaries and sequences work well.
These are the mapping codec APIs: 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyUnicode_DecodeCharmap(constchar*str, [Py_ssize_t](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")length, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*mapping, constchar*errors)[¶](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_DecodeCharmap "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Create a Unicode object by decoding _size_ bytes of the encoded string _str_ using the given _mapping_ object. Return `NULL` if an exception was raised by the codec.
If _mapping_ is `NULL`, Latin-1 decoding will be applied. Else _mapping_ must map bytes ordinals (integers in the range from 0 to 255) to Unicode strings, integers (which are then interpreted as Unicode ordinals) or `None`. Unmapped data bytes – ones which cause a [`LookupError`](https://docs.python.org/3/library/exceptions.html#LookupError "LookupError"), as well as ones which get mapped to `None`, `0xFFFE` or `'\ufffe'`, are treated as undefined mappings and cause an error. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyUnicode_AsCharmapString([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*unicode, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*mapping)[¶](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_AsCharmapString "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Encode a Unicode object using the given _mapping_ object and return the result as a bytes object. Error handling is “strict”. Return `NULL` if an exception was raised by the codec.
The _mapping_ object must map Unicode ordinal integers to bytes objects, integers in the range from 0 to 255 or `None`. Unmapped character ordinals (ones which cause a [`LookupError`](https://docs.python.org/3/library/exceptions.html#LookupError "LookupError")) as well as mapped to `None` are treated as “undefined mapping” and cause an error.
The following codec API is special in that maps Unicode to Unicode.