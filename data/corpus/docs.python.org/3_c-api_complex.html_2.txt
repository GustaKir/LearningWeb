Title: Python C API: Complex Number Functions
URL: https://docs.python.org/3/c-api/complex.html
Summary: This document provides details on specific functions for handling complex numbers in the Python C API, including `PyComplex_CheckExact`, which checks if an object is exactly a `PyComplexObject`, and `PyComplex_FromCComplex`, which creates a new Python complex number from a C `Py_complex` value.
---

intPyComplex_CheckExact([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*p)[¶](https://docs.python.org/3/c-api/complex.html#c.PyComplex_CheckExact "Link to this definition")
    
Return true if its argument is a [`PyComplexObject`](https://docs.python.org/3/c-api/complex.html#c.PyComplexObject "PyComplexObject"), but not a subtype of [`PyComplexObject`](https://docs.python.org/3/c-api/complex.html#c.PyComplexObject "PyComplexObject"). This function always succeeds. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyComplex_FromCComplex([Py_complex](https://docs.python.org/3/c-api/complex.html#c.Py_complex "Py_complex")v)[¶](https://docs.python.org/3/c-api/complex.html#c.PyComplex_FromCComplex "Link to this definition")
    _Return value: New reference._
Create a new Python complex number object from a C [`Py_complex`](https://docs.python.org/3/c-api/complex.html#c.Py_complex "Py_complex") value. Return `NULL` with an exception set on error. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyComplex_FromDoubles(doublereal, doubleimag)[¶](https://docs.python.org/3/c-api/complex.html#c.PyComplex_FromDoubles "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return a new [`PyComplexObject`](https://docs.python.org/3/c-api/complex.html#c.PyComplexObject "PyComplexObject") object from _real_ and _imag_. Return `NULL` with an exception set on error. 

doublePyComplex_RealAsDouble([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*op)[¶](https://docs.python.org/3/c-api/complex.html#c.PyComplex_RealAsDouble "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return the real part of _op_ as a C double.
If _op_ is not a Python complex number object but has a [`__complex__()`](https://docs.python.org/3/reference/datamodel.html#object.__complex__ "object.__complex__") method, this method will first be called to convert _op_ to a Python complex number object. If `__complex__()` is not defined then it falls back to call [`PyFloat_AsDouble()`](https://docs.python.org/3/c-api/float.html#c.PyFloat_AsDouble "PyFloat_AsDouble") and returns its result.
Upon failure, this method returns `-1.0` with an exception set, so one should call [`PyErr_Occurred()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_Occurred "PyErr_Occurred") to check for errors.
Changed in version 3.13: Use [`__complex__()`](https://docs.python.org/3/reference/datamodel.html#object.__complex__ "object.__complex__") if available. 

doublePyComplex_ImagAsDouble([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*op)[¶](https://docs.python.org/3/c-api/complex.html#c.PyComplex_ImagAsDouble "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return the imaginary part of _op_ as a C double.
If _op_ is not a Python complex number object but has a [`__complex__()`](https://docs.python.org/3/reference/datamodel.html#object.__complex__ "object.__complex__") method, this method will first be called to convert _op_ to a Python complex number object. If `__complex__()` is not defined then it falls back to call [`PyFloat_AsDouble()`](https://docs.python.org/3/c-api/float.html#c.PyFloat_AsDouble "PyFloat_AsDouble") and returns `0.0` on success.
Upon failure, this method returns `-1.0` with an exception set, so one should call [`PyErr_Occurred()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_Occurred "PyErr_Occurred") to check for errors.
Changed in version 3.13: Use [`__complex__()`](https://docs.python.org/3/reference/datamodel.html#object.__complex__ "object.__complex__") if available.