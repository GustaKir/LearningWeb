Title: Fault Handler Module in Python
URL: https://docs.python.org/3/library/faulthandler.html
Summary: The faulthandler module outputs Python tracebacks to sys.stderr by default, requiring terminal execution to view them. Tracebacks can also be logged to a file using faulthandler.enable(). Since the module is implemented in C, it can provide tracebacks during crashes or deadlocks. The Python Development Mode automatically enables this function at startup.
---

By default, the Python traceback is written to [`sys.stderr`](https://docs.python.org/3/library/sys.html#sys.stderr "sys.stderr"). To see tracebacks, applications must be run in the terminal. A log file can alternatively be passed to [`faulthandler.enable()`](https://docs.python.org/3/library/faulthandler.html#faulthandler.enable "faulthandler.enable").
The module is implemented in C, so tracebacks can be dumped on a crash or when Python is deadlocked.
The [Python Development Mode](https://docs.python.org/3/library/devmode.html#devmode) calls [`faulthandler.enable()`](https://docs.python.org/3/library/faulthandler.html#faulthandler.enable "faulthandler.enable") at Python startup.
See also 

Module [`pdb`](https://docs.python.org/3/library/pdb.html#module-pdb "pdb: The Python debugger for interactive interpreters.")
    
Interactive source code debugger for Python programs. 

Module [`traceback`](https://docs.python.org/3/library/traceback.html#module-traceback "traceback: Print or retrieve a stack traceback.")
    
Standard interface to extract, format and print stack traces of Python programs.
## Dumping the traceback[¶](https://docs.python.org/3/library/faulthandler.html#dumping-the-traceback "Link to this heading") 

faulthandler.dump_traceback(_file =sys.stderr_, _all_threads =True_)[¶](https://docs.python.org/3/library/faulthandler.html#faulthandler.dump_traceback "Link to this definition")
    
Dump the tracebacks of all threads into _file_. If _all_threads_ is `False`, dump only the current thread.
See also
[`traceback.print_tb()`](https://docs.python.org/3/library/traceback.html#traceback.print_tb "traceback.print_tb"), which can be used to print a traceback object.
Changed in version 3.5: Added support for passing file descriptor to this function.
## Fault handler state[¶](https://docs.python.org/3/library/faulthandler.html#fault-handler-state "Link to this heading") 

faulthandler.enable(_file =sys.stderr_, _all_threads =True_)[¶](https://docs.python.org/3/library/faulthandler.html#faulthandler.enable "Link to this definition")
    
Enable the fault handler: install handlers for the [`SIGSEGV`](https://docs.python.org/3/library/signal.html#signal.SIGSEGV "signal.SIGSEGV"), [`SIGFPE`](https://docs.python.org/3/library/signal.html#signal.SIGFPE "signal.SIGFPE"), [`SIGABRT`](https://docs.python.org/3/library/signal.html#signal.SIGABRT "signal.SIGABRT"), [`SIGBUS`](https://docs.python.org/3/library/signal.html#signal.SIGBUS "signal.SIGBUS") and [`SIGILL`](https://docs.python.org/3/library/signal.html#signal.SIGILL "signal.SIGILL") signals to dump the Python traceback. If _all_threads_ is `True`, produce tracebacks for every running thread. Otherwise, dump only the current thread.
The _file_ must be kept open until the fault handler is disabled: see [issue with file descriptors](https://docs.python.org/3/library/faulthandler.html#faulthandler-fd).
Changed in version 3.5: Added support for passing file descriptor to this function.
Changed in version 3.6: On Windows, a handler for Windows exception is also installed.
Changed in version 3.10: The dump now mentions if a garbage collector collection is running if _all_threads_ is true. 

faulthandler.disable()[¶](https://docs.python.org/3/library/faulthandler.html#faulthandler.disable "Link to this definition")
    
Disable the fault handler: uninstall the signal handlers installed by [`enable()`](https://docs.python.org/3/library/faulthandler.html#faulthandler.enable "faulthandler.enable"). 

faulthandler.is_enabled()[¶](https://docs.python.org/3/library/faulthandler.html#faulthandler.is_enabled "Link to this definition")
    
Check if the fault handler is enabled.
## Dumping the tracebacks after a timeout[¶](https://docs.python.org/3/library/faulthandler.html#dumping-the-tracebacks-after-a-timeout "Link to this heading")