Title: Quality Control in Python Development
URL: https://docs.python.org/3/tutorial/stdlib.html
Summary: This section discusses tools for profiling and testing in Python, specifically the 'profile' and 'pstats' modules for identifying time-critical code sections, and the 'doctest' module for validating code within docstrings to ensure high-quality software development.
---

```

In contrast to [`timeit`](https://docs.python.org/3/library/timeit.html#module-timeit "timeit: Measure the execution time of small code snippets.")’s fine level of granularity, the [`profile`](https://docs.python.org/3/library/profile.html#module-profile "profile: Python source profiler.") and [`pstats`](https://docs.python.org/3/library/profile.html#module-pstats "pstats: Statistics object for use with the profiler.") modules provide tools for identifying time critical sections in larger blocks of code.
## 10.11. Quality Control[¶](https://docs.python.org/3/tutorial/stdlib.html#quality-control "Link to this heading")
One approach for developing high quality software is to write tests for each function as it is developed and to run those tests frequently during the development process.
The [`doctest`](https://docs.python.org/3/library/doctest.html#module-doctest "doctest: Test pieces of code within docstrings.") module provides a tool for scanning a module and validating tests embedded in a program’s docstrings. Test construction is as simple as cutting-and-pasting a typical call along with its results into the docstring. This improves the documentation by providing the user with an example and it allows the doctest module to make sure the code remains true to the documentation:
```
defaverage(values):
"""Computes the arithmetic mean of a list of numbers.
  >>> print(average([20, 30, 70]))
  40.0
  """
  return sum(values) / len(values)
importdoctest
doctest.testmod()  # automatically validate the embedded tests

```

The [`unittest`](https://docs.python.org/3/library/unittest.html#module-unittest "unittest: Unit testing framework for Python.") module is not as effortless as the [`doctest`](https://docs.python.org/3/library/doctest.html#module-doctest "doctest: Test pieces of code within docstrings.") module, but it allows a more comprehensive set of tests to be maintained in a separate file:
```
importunittest
classTestStatisticalFunctions(unittest.TestCase):
  deftest_average(self):
    self.assertEqual(average([20, 30, 70]), 40.0)
    self.assertEqual(round(average([1, 5, 7]), 1), 4.3)
    with self.assertRaises(ZeroDivisionError):
      average([])
    with self.assertRaises(TypeError):
      average(20, 30, 70)
unittest.main() # Calling from the command line invokes all tests