Title: Updates to Static Methods and String Class in Python 3.10
URL: https://docs.python.org/3/library/functions.html
Summary: In Python 3.10, static methods now inherit method attributes such as `__module__`, `__name__`, `__qualname__`, `__doc__`, and `__annotations__`, and they have a new `__wrapped__` attribute, allowing them to be callable as regular functions. The documentation also mentions the usage of the `str` class with various parameters.
---

```

For more information on static methods, see [The standard type hierarchy](https://docs.python.org/3/reference/datamodel.html#types).
Changed in version 3.10: Static methods now inherit the method attributes ([`__module__`](https://docs.python.org/3/reference/datamodel.html#function.__module__ "function.__module__"), [`__name__`](https://docs.python.org/3/reference/datamodel.html#function.__name__ "function.__name__"), [`__qualname__`](https://docs.python.org/3/reference/datamodel.html#function.__qualname__ "function.__qualname__"), [`__doc__`](https://docs.python.org/3/reference/datamodel.html#function.__doc__ "function.__doc__") and [`__annotations__`](https://docs.python.org/3/reference/datamodel.html#function.__annotations__ "function.__annotations__")), have a new `__wrapped__` attribute, and are now callable as regular functions. 

_class_ str(_object =''_)


_class_ str(_object =b''_, _encoding ='utf-8'_, _errors ='strict'_)
    
Return a [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") version of _object_. See [`str()`](https://docs.python.org/3/library/stdtypes.html#str "str") for details.
`str` is the built-in string [class](https://docs.python.org/3/glossary.html#term-class). For general information about strings, see [Text Sequence Type — str](https://docs.python.org/3/library/stdtypes.html#textseq). 

sum(_iterable_ , _/_ , _start =0_)[¶](https://docs.python.org/3/library/functions.html#sum "Link to this definition")
    
Sums _start_ and the items of an _iterable_ from left to right and returns the total. The _iterable_ ’s items are normally numbers, and the start value is not allowed to be a string.
For some use cases, there are good alternatives to [`sum()`](https://docs.python.org/3/library/functions.html#sum "sum"). The preferred, fast way to concatenate a sequence of strings is by calling `''.join(sequence)`. To add floating-point values with extended precision, see [`math.fsum()`](https://docs.python.org/3/library/math.html#math.fsum "math.fsum"). To concatenate a series of iterables, consider using [`itertools.chain()`](https://docs.python.org/3/library/itertools.html#itertools.chain "itertools.chain").
Changed in version 3.8: The _start_ parameter can be specified as a keyword argument.
Changed in version 3.12: Summation of floats switched to an algorithm that gives higher accuracy and better commutativity on most builds. 

_class_ super[¶](https://docs.python.org/3/library/functions.html#super "Link to this definition")