Title: Python Changelog Highlights
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section highlights several improvements and bug fixes in Python, including reduced memory usage for `LOAD_ATTR` and `STORE_ATTR` instructions, enhancements to `BaseException.__str__()`, and improvements in specialization stats gathering. Notable updates include a bump to libexpat version 2.4.6 and the implementation of a specialized opcode for better performance.
---

37): Reduce the memory usage of specialized [`LOAD_ATTR`](https://docs.python.org/3/library/dis.html#opcode-LOAD_ATTR) and [`STORE_ATTR`](https://docs.python.org/3/library/dis.html#opcode-STORE_ATTR) instructions.
  * [bpo-46729](https://bugs.python.org/issue?@action=redirect&bpo=46729): Add number of sub-exceptions to `BaseException.__str__()`.
  * [bpo-45885](https://bugs.python.org/issue?@action=redirect&bpo=45885): Don’t un-adapt [`COMPARE_OP`](https://docs.python.org/3/library/dis.html#opcode-COMPARE_OP) when collecting specialization stats.
  * [bpo-46329](https://bugs.python.org/issue?@action=redirect&bpo=46329): Fix specialization stats gathering for `PRECALL` instructions.
  * [bpo-46794](https://bugs.python.org/issue?@action=redirect&bpo=46794): Bump up the libexpat version into 2.4.6
  * [bpo-46823](https://bugs.python.org/issue?@action=redirect&bpo=46823): Implement a specialized combined opcode `LOAD_FAST__LOAD_ATTR_INSTANCE_VALUE`. Patch by Dennis Sweeney.
  * [bpo-46820](https://bugs.python.org/issue?@action=redirect&bpo=46820): Fix parsing a numeric literal immediately (without spaces) followed by “not in” keywords, like in `1not in x`. Now the parser only emits a warning, not a syntax error.
  * [bpo-46329](https://bugs.python.org/issue?@action=redirect&bpo=46329): Move `KW_NAMES` before `PRECALL` instruction in call sequence. Change `operand` of `CALL` to match `PRECALL` for easier specialization.
  * [bpo-46808](https://bugs.python.org/issue?@action=redirect&bpo=46808): Remove the `NEXT_BLOCK` macro from compile.c, and make the compiler automatically generate implicit blocks when they are needed.
  * [bpo-46329](https://bugs.python.org/issue?@action=redirect&bpo=46329): Add `PUSH_NULL` instruction. This is used as a prefix when evaluating a callable, so that the stack has the same shape for methods and other calls. `PRECALL_FUNCTION` and `PRECALL_METHOD` are merged into a single `PRECALL` instruction.
There is no change in semantics.
  * [bpo-46762](https://bugs.python.org/issue?@action=redirect&bpo=46762): Fix an assert failure in debug builds when a ‘<’, ‘>’, or ‘=’ is the last character in an f-string that’s missing a closing right brace.
  * [bpo-46730](https://bugs.python.org/issue?@action=redirect&bpo=46730): Message of AttributeError caused by getting, setting or deleting a property without the corresponding function now mentions that the attribute is in fact a property and also specifies type of the class that it belongs to.
  * [bpo-46724](https://bugs.python.org/issue?@action=redirect&bpo=46724): Make sure that all backwards jumps use the `JUMP_ABSOLUTE` instruction, rather than `JUMP_FORWARD` with an argument of `(2**32)+offset`.
  * [bpo-46732](https://bugs.python.org/issue?@action=redirect&bpo=46732): Correct the docstring for the [`__bool__()`](https://docs.python.org/3/reference/datamodel.html#object.__bool__ "object.__bool__") method. Patch by Jelle Zijlstra.
  * [bpo-46072](https://bugs.python.org/issue?@action=redirect&bpo=46072): Add more detailed specialization failure statistics for [`BINARY_OP`](https://docs.python.org/3/library/dis.html#opcode-BINARY_OP).
  * [bpo-46707](https://bugs.python.org/issue?@action=redirect&bpo=46707): Avoid potential exponential backtracking when producing some syntax errors involving lots of brackets. Patch by Pablo Galindo.
  * [bpo-46323](https://bugs.python.org/issue?@action=redirect&bpo=46323): [`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "ctypes: A foreign function library for Python.") now allocates memory on the stack instead of on the heap to pass arguments while calling a Python callback function. Patch by Donghee Na.
  * [bpo-45923](https://bugs.python.org/issue?@action=redirect&bpo=45923): Add a quickened form of [`RESUME`](https://docs.python.org/3/library/dis.html#opcode-RESUME) that skips quickening checks.
  * [bpo-46702](https://bugs.python.org/issue?@action=redirect&bpo=46702): Specialize [`UNPACK_SEQUENCE`](https://docs.python.org/3/library/dis.html#opcode-UNPACK_SEQUENCE) for [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple") and [`list`](https://docs.python.org/3/library/stdtypes.html#list "list") unpackings.
  * [bpo-46072](https://bugs.python.org/issue?@action=redirect&bpo=46072): Opcode pair stats are now gathered with `--enable-pystats`. Defining `DYNAMIC_EXECUTION_PROFILE` or `DXPAIRS` no longer has any effect.
  * [bpo-46675](https://bugs.python.org/issue?@action=redirect&bpo=46675): Allow more than 16 items in a split dict before it is combined. The limit is now 254.
  * [bpo-40479](https://bugs.python.org/issue?@action=redirect&bpo=40479): Add a missing call to `va_end()` in `Modules/_hashopenssl.c`.
  * [bpo-46323](https://bugs.python.org/issue?@action=redirect&bpo=46323): Use [`PyObject_Vectorcall()`](https://docs.python.org/3/c-api/call.html#c.PyObject_Vectorcall "PyObject_Vectorcall") while calling ctypes callback function.