Title: math Module: frexp and isclose Functions
URL: https://docs.python.org/3/library/math.html
Summary: The 'math.frexp(x)' function returns the mantissa and exponent of a float 'x' as a pair (m, e), useful for analyzing the internal representation of floats. The 'math.isclose(a, b, rel_tol=1e-09, abs_tol=0.0)' function checks if two values 'a' and 'b' are approximately equal within specified tolerances.
---

math.frexp(_x_)[¶](https://docs.python.org/3/library/math.html#math.frexp "Link to this definition")
    
Return the mantissa and exponent of _x_ as the pair `(m, e)`. _m_ is a float and _e_ is an integer such that `x == m * 2**e` exactly. If _x_ is zero, returns `(0.0, 0)`, otherwise `0.5 <= abs(m) < 1`. This is used to “pick apart” the internal representation of a float in a portable way.
Note that [`frexp()`](https://docs.python.org/3/library/math.html#math.frexp "math.frexp") has a different call/return pattern than its C equivalents: it takes a single argument and return a pair of values, rather than returning its second return value through an ‘output parameter’ (there is no such thing in Python). 

math.isclose(_a_ , _b_ , _*_ , _rel_tol =1e-09_, _abs_tol =0.0_)[¶](https://docs.python.org/3/library/math.html#math.isclose "Link to this definition")
    
Return `True` if the values _a_ and _b_ are close to each other and `False` otherwise.
Whether or not two values are considered close is determined according to given absolute and relative tolerances. If no errors occur, the result will be: `abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol)`.
_rel_tol_ is the relative tolerance – it is the maximum allowed difference between _a_ and _b_ , relative to the larger absolute value of _a_ or _b_. For example, to set a tolerance of 5%, pass `rel_tol=0.05`. The default tolerance is `1e-09`, which assures that the two values are the same within about 9 decimal digits. _rel_tol_ must be nonnegative and less than `1.0`.
_abs_tol_ is the absolute tolerance; it defaults to `0.0` and it must be nonnegative. When comparing `x` to `0.0`, `isclose(x, 0)` is computed as `abs(x) <= rel_tol  * abs(x)`, which is `False` for any nonzero `x` and _rel_tol_ less than `1.0`. So add an appropriate positive _abs_tol_ argument to the call.
The IEEE 754 special values of `NaN`, `inf`, and `-inf` will be handled according to IEEE rules. Specifically, `NaN` is not considered close to any other value, including `NaN`. `inf` and `-inf` are only considered close to themselves.
Added in version 3.5.
See also
[**PEP 485**](https://peps.python.org/pep-0485/) – A function for testing approximate equality 

math.isfinite(_x_)[¶](https://docs.python.org/3/library/math.html#math.isfinite "Link to this definition")
    
Return `True` if _x_ is neither an infinity nor a NaN, and `False` otherwise. (Note that `0.0` _is_ considered finite.)
Added in version 3.2. 

math.isinf(_x_)[¶](https://docs.python.org/3/library/math.html#math.isinf "Link to this definition")
    
Return `True` if _x_ is a positive or negative infinity, and `False` otherwise. 

math.isnan(_x_)[¶](https://docs.python.org/3/library/math.html#math.isnan "Link to this definition")
    
Return `True` if _x_ is a NaN (not a number), and `False` otherwise. 

math.ldexp(_x_ , _i_)[¶](https://docs.python.org/3/library/math.html#math.ldexp "Link to this definition")
    
Return `x * (2**i)`. This is essentially the inverse of function [`frexp()`](https://docs.python.org/3/library/math.html#math.frexp "math.frexp"). 

math.nextafter(_x_ , _y_ , _steps =1_)[¶](https://docs.python.org/3/library/math.html#math.nextafter "Link to this definition")
    
Return the floating-point value _steps_ steps after _x_ towards _y_.
If _x_ is equal to _y_ , return _y_ , unless _steps_ is zero.
Examples:
  * `math.nextafter(x, math.inf)` goes up: towards positive infinity.
  * `math.nextafter(x, -math.inf)` goes down: towards minus infinity.
  * `math.nextafter(x, 0.0)` goes towards zero.
  * `math.nextafter(x, math.copysign(math.inf, x))` goes away from zero.


See also [`math.ulp()`](https://docs.python.org/3/library/math.html#math.ulp "math.ulp").
Added in version 3.9.
Changed in version 3.12: Added the _steps_ argument. 

math.ulp(_x_)[¶](https://docs.python.org/3/library/math.html#math.ulp "Link to this definition")
    
Return the value of the least significant bit of the float _x_ :
  * If _x_ is a NaN (not a number), return _x_.
  * If _x_ is negative, return `ulp(-x)`.
  * If _x_ is a positive infinity, return _x_.
  * If _x_ is equal to zero, return the smallest positive _denormalized_ representable float (smaller than the minimum positive _normalized_ float, [`sys.float_info.min`](https://docs.python.org/3/library/sys.html#sys.float_info "sys.float_info")).
  * If _x_ is equal to the largest positive representable float, return the value of the least significant bit of _x_ , such that the first float smaller than _x_ is `x - ulp(x)`.
  * Otherwise (_x_ is a positive finite number), return the value of the least significant bit of _x_ , such that the first float bigger than _x_ is `x + ulp(x)`.