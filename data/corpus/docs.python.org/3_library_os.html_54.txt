Title: os.execvpe Function Documentation
URL: https://docs.python.org/3/library/os.html
Summary: The os.execvpe function executes a new program, replacing the current process without returning. On Unix, the new executable retains the original process ID, and errors are reported as OSError exceptions. It is important to flush open file objects before calling exec functions to avoid data loss.
---

os.execvpe(_file_ , _args_ , _env_)[¶](https://docs.python.org/3/library/os.html#os.execvpe "Link to this definition")
    
These functions all execute a new program, replacing the current process; they do not return. On Unix, the new executable is loaded into the current process, and will have the same process id as the caller. Errors will be reported as [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") exceptions.
The current process is replaced immediately. Open file objects and descriptors are not flushed, so if there may be data buffered on these open files, you should flush them using `sys.stdout.flush()` or [`os.fsync()`](https://docs.python.org/3/library/os.html#os.fsync "os.fsync") before calling an [`exec*`](https://docs.python.org/3/library/os.html#os.execl "os.execl") function.
The “l” and “v” variants of the [`exec*`](https://docs.python.org/3/library/os.html#os.execl "os.execl") functions differ in how command-line arguments are passed. The “l” variants are perhaps the easiest to work with if the number of parameters is fixed when the code is written; the individual parameters simply become additional parameters to the `execl*()` functions. The “v” variants are good when the number of parameters is variable, with the arguments being passed in a list or tuple as the _args_ parameter. In either case, the arguments to the child process should start with the name of the command being run, but this is not enforced.
The variants which include a “p” near the end ([`execlp()`](https://docs.python.org/3/library/os.html#os.execlp "os.execlp"), [`execlpe()`](https://docs.python.org/3/library/os.html#os.execlpe "os.execlpe"), [`execvp()`](https://docs.python.org/3/library/os.html#os.execvp "os.execvp"), and [`execvpe()`](https://docs.python.org/3/library/os.html#os.execvpe "os.execvpe")) will use the `PATH` environment variable to locate the program _file_. When the environment is being replaced (using one of the [`exec*e`](https://docs.python.org/3/library/os.html#os.execl "os.execl") variants, discussed in the next paragraph), the new environment is used as the source of the `PATH` variable. The other variants, [`execl()`](https://docs.python.org/3/library/os.html#os.execl "os.execl"), [`execle()`](https://docs.python.org/3/library/os.html#os.execle "os.execle"), [`execv()`](https://docs.python.org/3/library/os.html#os.execv "os.execv"), and [`execve()`](https://docs.python.org/3/library/os.html#os.execve "os.execve"), will not use the `PATH` variable to locate the executable; _path_ must contain an appropriate absolute or relative path. Relative paths must include at least one slash, even on Windows, as plain names will not be resolved.
For [`execle()`](https://docs.python.org/3/library/os.html#os.execle "os.execle"), [`execlpe()`](https://docs.python.org/3/library/os.html#os.execlpe "os.execlpe"), [`execve()`](https://docs.python.org/3/library/os.html#os.execve "os.execve"), and [`execvpe()`](https://docs.python.org/3/library/os.html#os.execvpe "os.execvpe") (note that these all end in “e”), the _env_ parameter must be a mapping which is used to define the environment variables for the new process (these are used instead of the current process’ environment); the functions [`execl()`](https://docs.python.org/3/library/os.html#os.execl "os.execl"), [`execlp()`](https://docs.python.org/3/library/os.html#os.execlp "os.execlp"), [`execv()`](https://docs.python.org/3/library/os.html#os.execv "os.execv"), and [`execvp()`](https://docs.python.org/3/library/os.html#os.execvp "os.execvp") all cause the new process to inherit the environment of the current process.
For [`execve()`](https://docs.python.org/3/library/os.html#os.execve "os.execve") on some platforms, _path_ may also be specified as an open file descriptor. This functionality may not be supported on your platform; you can check whether or not it is available using [`os.supports_fd`](https://docs.python.org/3/library/os.html#os.supports_fd "os.supports_fd"). If it is unavailable, using it will raise a [`NotImplementedError`](https://docs.python.org/3/library/exceptions.html#NotImplementedError "NotImplementedError").
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.exec` with arguments `path`, `args`, `env`.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, Windows, not WASI, not Android, not iOS.
Changed in version 3.3: Added support for specifying _path_ as an open file descriptor for [`execve()`](https://docs.python.org/3/library/os.html#os.execve "os.execve").
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object).