Title: Deprecations in Python 3.8
URL: https://docs.python.org/3/whatsnew/3.8.html
Summary: Python 3.8 deprecates the `bdist_wininst` command, recommending the use of `bdist_wheel` instead. Additionally, the `getchildren()` and `getiterator()` methods in the `ElementTree` module are now marked with a `DeprecationWarning`, set for removal in Python 3.9.
---

## Deprecated[Â¶](https://docs.python.org/3/whatsnew/3.8.html#deprecated "Link to this heading")
  * The distutils `bdist_wininst` command is now deprecated, use `bdist_wheel` (wheel packages) instead. (Contributed by Victor Stinner in [bpo-37481](https://bugs.python.org/issue?@action=redirect&bpo=37481).)
  * Deprecated methods `getchildren()` and `getiterator()` in the [`ElementTree`](https://docs.python.org/3/library/xml.etree.elementtree.html#module-xml.etree.ElementTree "xml.etree.ElementTree: Implementation of the ElementTree API.") module now emit a [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning") instead of [`PendingDeprecationWarning`](https://docs.python.org/3/library/exceptions.html#PendingDeprecationWarning "PendingDeprecationWarning"). They will be removed in Python 3.9. (Contributed by Serhiy Storchaka in [bpo-29209](https://bugs.python.org/issue?@action=redirect&bpo=29209).)
  * Passing an object that is not an instance of [`concurrent.futures.ThreadPoolExecutor`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor "concurrent.futures.ThreadPoolExecutor") to [`loop.set_default_executor()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.set_default_executor "asyncio.loop.set_default_executor") is deprecated and will be prohibited in Python 3.9. (Contributed by Elvis Pranskevichus in [bpo-34075](https://bugs.python.org/issue?@action=redirect&bpo=34075).)
  * The [`__getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__getitem__ "object.__getitem__") methods of [`xml.dom.pulldom.DOMEventStream`](https://docs.python.org/3/library/xml.dom.pulldom.html#xml.dom.pulldom.DOMEventStream "xml.dom.pulldom.DOMEventStream"), [`wsgiref.util.FileWrapper`](https://docs.python.org/3/library/wsgiref.html#wsgiref.util.FileWrapper "wsgiref.util.FileWrapper") and [`fileinput.FileInput`](https://docs.python.org/3/library/fileinput.html#fileinput.FileInput "fileinput.FileInput") have been deprecated.
Implementations of these methods have been ignoring their _index_ parameter, and returning the next item instead. (Contributed by Berker Peksag in [bpo-9372](https://bugs.python.org/issue?@action=redirect&bpo=9372).)
  * The [`typing.NamedTuple`](https://docs.python.org/3/library/typing.html#typing.NamedTuple "typing.NamedTuple") class has deprecated the `_field_types` attribute in favor of the `__annotations__` attribute which has the same information. (Contributed by Raymond Hettinger in [bpo-36320](https://bugs.python.org/issue?@action=redirect&bpo=36320).)
  * [`ast`](https://docs.python.org/3/library/ast.html#module-ast "ast: Abstract Syntax Tree classes and manipulation.") classes `Num`, `Str`, `Bytes`, `NameConstant` and `Ellipsis` are considered deprecated and will be removed in future Python versions. [`Constant`](https://docs.python.org/3/library/ast.html#ast.Constant "ast.Constant") should be used instead. (Contributed by Serhiy Storchaka in [bpo-32892](https://bugs.python.org/issue?@action=redirect&bpo=32892).)
  * [`ast.NodeVisitor`](https://docs.python.org/3/library/ast.html#ast.NodeVisitor "ast.NodeVisitor") methods `visit_Num()`, `visit_Str()`, `visit_Bytes()`, `visit_NameConstant()` and `visit_Ellipsis()` are deprecated now and will not be called in future Python versions. Add the [`visit_Constant()`](https://docs.python.org/3/library/ast.html#ast.NodeVisitor.visit_Constant "ast.NodeVisitor.visit_Constant") method to handle all constant nodes. (Contributed by Serhiy Storchaka in [bpo-36917](https://bugs.python.org/issue?@action=redirect&bpo=36917).)
  * The `asyncio.coroutine()` [decorator](https://docs.python.org/3/glossary.html#term-decorator) is deprecated and will be removed in version 3.10. Instead of `@asyncio.coroutine`, use [`async def`](https://docs.python.org/3/reference/compound_stmts.html#async-def) instead. (Contributed by Andrew Svetlov in [bpo-36921](https://bugs.python.org/issue?@action=redirect&bpo=36921).)
  * In [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O."), the explicit passing of a _loop_ argument has been deprecated and will be removed in version 3.10 for the following: [`asyncio.sleep()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.sleep "asyncio.sleep"), [`asyncio.gather()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.gather "asyncio.gather"), [`asyncio.shield()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.shield "asyncio.shield"), [`asyncio.wait_for()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.wait_for "asyncio.wait_for"), [`asyncio.wait()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.wait "asyncio.wait"), [`asyncio.as_completed()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.as_completed "asyncio.as_completed"), [`asyncio.Task`](https://docs.python.org/3/library/asyncio-t