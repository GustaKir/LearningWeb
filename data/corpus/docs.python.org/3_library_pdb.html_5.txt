Title: Breakpoint Command Overview in PDB
URL: https://docs.python.org/3/library/pdb.html
Summary: This section details how to set conditions for breakpoints using the 'condition' command in PDB, which allows an expression to dictate when the breakpoint is activated. It also explains the 'commands' command, where users can specify actions for a given breakpoint. Users can remove or clear commands easily by using specific syntax.
---

condition bpnumber [condition][¶](https://docs.python.org/3/library/pdb.html#pdbcommand-condition "Link to this definition")
    
Set a new _condition_ for the breakpoint, an expression which must evaluate to true before the breakpoint is honored. If _condition_ is absent, any existing condition is removed; i.e., the breakpoint is made unconditional. 

commands [bpnumber][¶](https://docs.python.org/3/library/pdb.html#pdbcommand-commands "Link to this definition")
    
Specify a list of commands for breakpoint number _bpnumber_. The commands themselves appear on the following lines. Type a line containing just `end` to terminate the commands. An example:
```
(Pdb) commands 1
(com) p some_variable
(com) end
(Pdb)

```

To remove all commands from a breakpoint, type `commands` and follow it immediately with `end`; that is, give no commands.
With no _bpnumber_ argument, `commands` refers to the last breakpoint set.
You can use breakpoint commands to start your program up again. Simply use the [`continue`](https://docs.python.org/3/library/pdb.html#pdbcommand-continue) command, or [`step`](https://docs.python.org/3/library/pdb.html#pdbcommand-step), or any other command that resumes execution.
Specifying any command resuming execution (currently [`continue`](https://docs.python.org/3/library/pdb.html#pdbcommand-continue), [`step`](https://docs.python.org/3/library/pdb.html#pdbcommand-step), [`next`](https://docs.python.org/3/library/pdb.html#pdbcommand-next), [`return`](https://docs.python.org/3/library/pdb.html#pdbcommand-return), [`jump`](https://docs.python.org/3/library/pdb.html#pdbcommand-jump), [`quit`](https://docs.python.org/3/library/pdb.html#pdbcommand-quit) and their abbreviations) terminates the command list (as if that command was immediately followed by end). This is because any time you resume execution (even with a simple next or step), you may encounter another breakpoint—which could have its own command list, leading to ambiguities about which list to execute.
If you use the `silent` command in the command list, the usual message about stopping at a breakpoint is not printed. This may be desirable for breakpoints that are to print a specific message and then continue. If none of the other commands print anything, you see no sign that the breakpoint was reached. 

s(tep)[¶](https://docs.python.org/3/library/pdb.html#pdbcommand-step "Link to this definition")
    
Execute the current line, stop at the first possible occasion (either in a function that is called or on the next line in the current function). 

n(ext)[¶](https://docs.python.org/3/library/pdb.html#pdbcommand-next "Link to this definition")
    
Continue execution until the next line in the current function is reached or it returns. (The difference between [`next`](https://docs.python.org/3/library/pdb.html#pdbcommand-next) and [`step`](https://docs.python.org/3/library/pdb.html#pdbcommand-step) is that [`step`](https://docs.python.org/3/library/pdb.html#pdbcommand-step) stops inside a called function, while [`next`](https://docs.python.org/3/library/pdb.html#pdbcommand-next) executes called functions at (nearly) full speed, only stopping at the next line in the current function.) 

unt(il) [lineno][¶](https://docs.python.org/3/library/pdb.html#pdbcommand-until "Link to this definition")
    
Without argument, continue execution until the line with a number greater than the current one is reached.
With _lineno_ , continue execution until a line with a number greater or equal to _lineno_ is reached. In both cases, also stop when the current frame returns.
Changed in version 3.2: Allow giving an explicit line number. 

r(eturn)[¶](https://docs.python.org/3/library/pdb.html#pdbcommand-return "Link to this definition")
    
Continue execution until the current function returns. 

c(ont(inue))[¶](https://docs.python.org/3/library/pdb.html#pdbcommand-continue "Link to this definition")
    
Continue execution, only stop when a breakpoint is encountered. 

j(ump) lineno[¶](https://docs.python.org/3/library/pdb.html#pdbcommand-jump "Link to this definition")
    
Set the next line that will be executed. Only available in the bottom-most frame. This lets you jump back and execute code again, or jump forward to skip code that you don’t want to run.
It should be noted that not all jumps are allowed – for instance it is not possible to jump into the middle of a [`for`](https://docs.python.org/3/reference/compound_stmts.html#for) loop or out of a [`finally`](https://docs.python.org/3/reference/compound_stmts.html#finally) clause.