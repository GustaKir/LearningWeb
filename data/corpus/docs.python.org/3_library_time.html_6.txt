Title: Time Format Specifiers in Python
URL: https://docs.python.org/3/library/time.html
Summary: This section lists format specifiers for various time components in Python, including microseconds, hours (both 12-hour and 24-hour formats), days of the year, months, minutes, seconds, and week numbers. Each specifier describes the range of acceptable values and their respective representations.
---

Microseconds as a decimal number
    [000000,999999]. | (1)  
`%H` | Hour (24-hour clock) as a decimal number [00,23]. |   
`%I` | Hour (12-hour clock) as a decimal number [01,12]. |   
`%j` | Day of the year as a decimal number [001,366]. |   
`%m` | Month as a decimal number [01,12]. |   
`%M` | Minute as a decimal number [00,59]. |   
`%p` | Locale’s equivalent of either AM or PM. | (2)  
`%S` | Second as a decimal number [00,61]. | (3)  
`%U` | Week number of the year (Sunday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Sunday are considered to be in week 0. | (4)  
`%u` | Day of the week (Monday is 1; Sunday is 7) as a decimal number [1, 7]. |   
`%w` | Weekday as a decimal number [0(Sunday),6]. |   
`%W` | Week number of the year (Monday as the first day of the week) as a decimal number [00,53]. All days in a new year preceding the first Monday are considered to be in week 0. | (4)  
`%x` | Locale’s appropriate date representation. |   
`%X` | Locale’s appropriate time representation. |   
`%y` | Year without century as a decimal number [00,99]. |   
`%Y` | Year with century as a decimal number. |   
`%z` | Time zone offset indicating a positive or negative time difference from UTC/GMT of the form +HHMM or -HHMM, where H represents decimal hour digits and M represents decimal minute digits [-23:59, +23:59]. [[1]](https://docs.python.org/3/library/time.html#id4) |   
`%Z` | Time zone name (no characters if no time zone exists). Deprecated. [[1]](https://docs.python.org/3/library/time.html#id4) |   
`%G` | ISO 8601 year (similar to `%Y` but follows the rules for the ISO 8601 calendar year). The year starts with the week that contains the first Thursday of the calendar year. |   
`%V` | ISO 8601 week number (as a decimal number [01,53]). The first week of the year is the one that contains the first Thursday of the year. Weeks start on Monday. |   
`%%` | A literal `'%'` character. |   
Notes:
  1. The `%f` format directive only applies to [`strptime()`](https://docs.python.org/3/library/time.html#time.strptime "time.strptime"), not to [`strftime()`](https://docs.python.org/3/library/time.html#time.strftime "time.strftime"). However, see also [`datetime.datetime.strptime()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime "datetime.datetime.strptime") and [`datetime.datetime.strftime()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.strftime "datetime.datetime.strftime") where the `%f` format directive [applies to microseconds](https://docs.python.org/3/library/datetime.html#format-codes).
  2. When used with the [`strptime()`](https://docs.python.org/3/library/time.html#time.strptime "time.strptime") function, the `%p` directive only affects the output hour field if the `%I` directive is used to parse the hour.


  1. The range really is `0` to `61`; value `60` is valid in timestamps representing [leap seconds](https://en.wikipedia.org/wiki/Leap_second) and value `61` is supported for historical reasons.
  2. When used with the [`strptime()`](https://docs.python.org/3/library/time.html#time.strptime "time.strptime") function, `%U` and `%W` are only used in calculations when the day of the week and the year are specified.


Here is an example, a format for dates compatible with that specified in the [**RFC 2822**](https://datatracker.ietf.org/doc/html/rfc2822.html) Internet email standard. [[1]](https://docs.python.org/3/library/time.html#id4)
>>>```
>>> fromtimeimport gmtime, strftime
>>> strftime("%a, %d %b %Y %H:%M:%S +0000", gmtime())
'Thu, 28 Jun 2001 14:17:15 +0000'