Title: Memory View Object Attributes
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This section describes the attributes of the memory view object in Python, including 'ndim', which indicates the number of dimensions, 'shape', which provides the dimensions as a tuple, and 'strides', which details the byte size required to access each element. It also notes changes in version 3.3 regarding the representation of 'ndim' as an empty tuple.
---

```


ndim[¶](https://docs.python.org/3/library/stdtypes.html#memoryview.ndim "Link to this definition")
    
An integer indicating how many dimensions of a multi-dimensional array the memory represents. 

shape[¶](https://docs.python.org/3/library/stdtypes.html#memoryview.shape "Link to this definition")
    
A tuple of integers the length of [`ndim`](https://docs.python.org/3/library/stdtypes.html#memoryview.ndim "memoryview.ndim") giving the shape of the memory as an N-dimensional array.
Changed in version 3.3: An empty tuple instead of `None` when ndim = 0. 

strides[¶](https://docs.python.org/3/library/stdtypes.html#memoryview.strides "Link to this definition")
    
A tuple of integers the length of [`ndim`](https://docs.python.org/3/library/stdtypes.html#memoryview.ndim "memoryview.ndim") giving the size in bytes to access each element for each dimension of the array.
Changed in version 3.3: An empty tuple instead of `None` when ndim = 0. 

suboffsets[¶](https://docs.python.org/3/library/stdtypes.html#memoryview.suboffsets "Link to this definition")
    
Used internally for PIL-style arrays. The value is informational only. 

c_contiguous[¶](https://docs.python.org/3/library/stdtypes.html#memoryview.c_contiguous "Link to this definition")
    
A bool indicating whether the memory is C-[contiguous](https://docs.python.org/3/glossary.html#term-contiguous).
Added in version 3.3. 

f_contiguous[¶](https://docs.python.org/3/library/stdtypes.html#memoryview.f_contiguous "Link to this definition")
    
A bool indicating whether the memory is Fortran [contiguous](https://docs.python.org/3/glossary.html#term-contiguous).
Added in version 3.3. 

contiguous[¶](https://docs.python.org/3/library/stdtypes.html#memoryview.contiguous "Link to this definition")
    
A bool indicating whether the memory is [contiguous](https://docs.python.org/3/glossary.html#term-contiguous).
Added in version 3.3.
## Set Types — [`set`](https://docs.python.org/3/library/stdtypes.html#set "set"), [`frozenset`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset")[¶](https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset "Link to this heading")
A _set_ object is an unordered collection of distinct [hashable](https://docs.python.org/3/glossary.html#term-hashable) objects. Common uses include membership testing, removing duplicates from a sequence, and computing mathematical operations such as intersection, union, difference, and symmetric difference. (For other containers see the built-in [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict"), [`list`](https://docs.python.org/3/library/stdtypes.html#list "list"), and [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple") classes, and the [`collections`](https://docs.python.org/3/library/collections.html#module-collections "collections: Container datatypes") module.)
Like other collections, sets support `x in set`, `len(set)`, and `for x in set`. Being an unordered collection, sets do not record element position or order of insertion. Accordingly, sets do not support indexing, slicing, or other sequence-like behavior.
There are currently two built-in set types, [`set`](https://docs.python.org/3/library/stdtypes.html#set "set") and [`frozenset`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset"). The [`set`](https://docs.python.org/3/library/stdtypes.html#set "set") type is mutable — the contents can be changed using methods like `add()` and `remove()`. Since it is mutable, it has no hash value and cannot be used as either a dictionary key or as an element of another set. The [`frozenset`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset") type is immutable and [hashable](https://docs.python.org/3/glossary.html#term-hashable) — its contents cannot be altered after it is created; it can therefore be used as a dictionary key or as an element of another set.
Non-empty sets (not frozensets) can be created by placing a comma-separated list of elements within braces, for example: `{'jack', 'sjoerd'}`, in addition to the [`set`](https://docs.python.org/3/library/stdtypes.html#set "set") constructor.
The constructors for both classes work the same: 

_class_ set([_iterable_])[¶](https://docs.python.org/3/library/stdtypes.html#set "Link to this definition")