Title: Statistics Module in Python
URL: https://docs.python.org/3/library/statistics.html
Summary: The `statistics` module, introduced in Python 3.4, provides functions to calculate mathematical statistics for numeric data. It is designed for use at the level of basic calculators, rather than competing with advanced libraries like NumPy or statistical software such as Minitab and SAS.
---

# `statistics` — Mathematical statistics functions[¶](https://docs.python.org/3/library/statistics.html#module-statistics "Link to this heading")
Added in version 3.4.
**Source code:** [Lib/statistics.py](https://github.com/python/cpython/tree/3.13/Lib/statistics.py)
This module provides functions for calculating mathematical statistics of numeric ([`Real`](https://docs.python.org/3/library/numbers.html#numbers.Real "numbers.Real")-valued) data.
The module is not intended to be a competitor to third-party libraries such as [NumPy](https://numpy.org), [SciPy](https://scipy.org/), or proprietary full-featured statistics packages aimed at professional statisticians such as Minitab, SAS and Matlab. It is aimed at the level of graphing and scientific calculators.
Unless explicitly noted, these functions support [`int`](https://docs.python.org/3/library/functions.html#int "int"), [`float`](https://docs.python.org/3/library/functions.html#float "float"), [`Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal") and [`Fraction`](https://docs.python.org/3/library/fractions.html#fractions.Fraction "fractions.Fraction"). Behaviour with other types (whether in the numeric tower or not) is currently unsupported. Collections with a mix of types are also undefined and implementation-dependent. If your input data consists of mixed types, you may be able to use [`map()`](https://docs.python.org/3/library/functions.html#map "map") to ensure a consistent result, for example: `map(float, input_data)`.
Some datasets use `NaN` (not a number) values to represent missing data. Since NaNs have unusual comparison semantics, they cause surprising or undefined behaviors in the statistics functions that sort data or that count occurrences. The functions affected are `median()`, `median_low()`, `median_high()`, `median_grouped()`, `mode()`, `multimode()`, and `quantiles()`. The `NaN` values should be stripped before calling these functions:
>>>```
>>> fromstatisticsimport median
>>> frommathimport isnan
>>> fromitertoolsimport filterfalse
>>> data = [20.7, float('NaN'),19.2, 18.3, float('NaN'), 14.4]
>>> sorted(data) # This has surprising behavior
[20.7, nan, 14.4, 18.3, 19.2, nan]
>>> median(data) # This result is unexpected
16.35
>>> sum(map(isnan, data))  # Number of missing values
2
>>> clean = list(filterfalse(isnan, data)) # Strip NaN values
>>> clean
[20.7, 19.2, 18.3, 14.4]
>>> sorted(clean) # Sorting now works as expected
[14.4, 18.3, 19.2, 20.7]
>>> median(clean)    # This result is now well defined
18.75