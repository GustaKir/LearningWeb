Title: Datetime Module: ISO Calendar and Date Attributes
URL: https://docs.python.org/3/library/datetime.html
Summary: This section covers the 'date.fromisocalendar' method, introduced in version 3.8, which returns a date based on the ISO calendar. It also mentions class attributes for the earliest and latest representable dates, defined by 'date.min' and 'date.max'. Notably, the method's format was updated in version 3.11 to enhance support.
---

```

Added in version 3.7.
Changed in version 3.11: Previously, this method only supported the format `YYYY-MM-DD`. 

_classmethod_ date.fromisocalendar(_year_ , _week_ , _day_)[¶](https://docs.python.org/3/library/datetime.html#datetime.date.fromisocalendar "Link to this definition")
    
Return a [`date`](https://docs.python.org/3/library/datetime.html#datetime.date "datetime.date") corresponding to the ISO calendar date specified by year, week and day. This is the inverse of the function [`date.isocalendar()`](https://docs.python.org/3/library/datetime.html#datetime.date.isocalendar "datetime.date.isocalendar").
Added in version 3.8.
Class attributes: 

date.min[¶](https://docs.python.org/3/library/datetime.html#datetime.date.min "Link to this definition")
    
The earliest representable date, `date(MINYEAR, 1, 1)`. 

date.max[¶](https://docs.python.org/3/library/datetime.html#datetime.date.max "Link to this definition")
    
The latest representable date, `date(MAXYEAR, 12, 31)`. 

date.resolution[¶](https://docs.python.org/3/library/datetime.html#datetime.date.resolution "Link to this definition")
    
The smallest possible difference between non-equal date objects, `timedelta(days=1)`.
Instance attributes (read-only): 

date.year[¶](https://docs.python.org/3/library/datetime.html#datetime.date.year "Link to this definition")
    
Between [`MINYEAR`](https://docs.python.org/3/library/datetime.html#datetime.MINYEAR "datetime.MINYEAR") and [`MAXYEAR`](https://docs.python.org/3/library/datetime.html#datetime.MAXYEAR "datetime.MAXYEAR") inclusive. 

date.month[¶](https://docs.python.org/3/library/datetime.html#datetime.date.month "Link to this definition")
    
Between 1 and 12 inclusive. 

date.day[¶](https://docs.python.org/3/library/datetime.html#datetime.date.day "Link to this definition")
    
Between 1 and the number of days in the given month of the given year.
Supported operations:
Operation | Result  
---|---  
`date2 = date1 + timedelta` | `date2` will be `timedelta.days` days after `date1`. (1)  
`date2 = date1 - timedelta` | Computes `date2` such that `date2 + timedelta == date1`. (2)  
`timedelta = date1 - date2` | (3)  
`date1 == date2` `date1 != date2` | Equality comparison. (4)  
`date1 < date2` `date1 > date2` `date1 <= date2` `date1 >= date2` | Order comparison. (5)  
Notes:
  1. _date2_ is moved forward in time if `timedelta.days > 0`, or backward if `timedelta.days < 0`. Afterward `date2 - date1 == timedelta.days`. `timedelta.seconds` and `timedelta.microseconds` are ignored. [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError") is raised if `date2.year` would be smaller than [`MINYEAR`](https://docs.python.org/3/library/datetime.html#datetime.MINYEAR "datetime.MINYEAR") or larger than [`MAXYEAR`](https://docs.python.org/3/library/datetime.html#datetime.MAXYEAR "datetime.MAXYEAR").
  2. `timedelta.seconds` and `timedelta.microseconds` are ignored.
  3. This is exact, and cannot overflow. `timedelta.seconds` and `timedelta.microseconds` are 0, and `date2 + timedelta == date1` after.
  4. [`date`](https://docs.python.org/3/library/datetime.html#datetime.date "datetime.date") objects are equal if they represent the same date.
`date` objects that are not also [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") instances are never equal to `datetime` objects, even if they represent the same date.
  5. _date1_ is considered less than _date2_ when _date1_ precedes _date2_ in time. In other words, `date1 < date2` if and only if `date1.toordinal() < date2.toordinal()`.
Order comparison between a `date` object that is not also a [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") instance and a `datetime` object raises [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError").


Changed in version 3.13: Comparison between [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") object and an instance of the [`date`](https://docs.python.org/3/library/datetime.html#datetime.date "datetime.date") subclass that is not a `datetime` subclass no longer converts the latter to `date`, ignoring the time part and the time zone. The default behavior can be changed by overriding the special comparison methods in subclasses.
In Boolean contexts, all [`date`](https://docs.python.org/3/library/datetime.html#datetime.date "datetime.date") objects are considered to be true.
Instance methods: 

date.replace(_year =self.year_, _month =self.month_, _day =self.day_)[¶](https://docs.python.org/3/library/datetime.html#datetime.date.replace "Link to this definition")
    
Return a new [`date`](https://docs.python.org/3/library/datetime.html#datetime.date "datetime.date") object with the same values, but with specified parameters updated.
Example:
>>>