Title: User Scheme in Python's sysconfig
URL: https://docs.python.org/3/library/sysconfig.html
Summary: The user scheme allows installation of Python modules in a user-specific directory when there is no write permission for the global site-packages. It installs both pure Python and extension modules in a designated location under `site.USER_BASE`, typically within `_userbase_/lib/python_X.Y_/site-packages`.
---

## User scheme[¶](https://docs.python.org/3/library/sysconfig.html#user-scheme "Link to this heading")
This scheme is designed to be the most convenient solution for users that don’t have write permission to the global site-packages directory or don’t want to install into it.
Files will be installed into subdirectories of [`site.USER_BASE`](https://docs.python.org/3/library/site.html#site.USER_BASE "site.USER_BASE") (written as `_userbase_`hereafter). This scheme installs pure Python modules and extension modules in the same location (also known as[`site.USER_SITE`](https://docs.python.org/3/library/site.html#site.USER_SITE "site.USER_SITE")).
### `posix_user`[¶](https://docs.python.org/3/library/sysconfig.html#posix-user "Link to this heading")
Path | Installation directory  
---|---  
_stdlib_ | `_userbase_/lib/python_X.Y_`  
_platstdlib_ | `_userbase_/lib/python_X.Y_`  
_platlib_ | `_userbase_/lib/python_X.Y_/site-packages`  
_purelib_ | `_userbase_/lib/python_X.Y_/site-packages`  
_include_ | `_userbase_/include/python_X.Y_`  
_scripts_ | `_userbase_/bin`  
_data_ | `_userbase_`  
### `nt_user`[¶](https://docs.python.org/3/library/sysconfig.html#nt-user "Link to this heading")
Path | Installation directory  
---|---  
_stdlib_ | `_userbase_\Python_XY_`  
_platstdlib_ | `_userbase_\Python_XY_`  
_platlib_ | `_userbase_\Python_XY_\site-packages`  
_purelib_ | `_userbase_\Python_XY_\site-packages`  
_include_ | `_userbase_\Python_XY_\Include`  
_scripts_ | `_userbase_\Python_XY_\Scripts`  
_data_ | `_userbase_`  
### `osx_framework_user`[¶](https://docs.python.org/3/library/sysconfig.html#osx-framework-user "Link to this heading")
Path | Installation directory  
---|---  
_stdlib_ | `_userbase_/lib/python`  
_platstdlib_ | `_userbase_/lib/python`  
_platlib_ | `_userbase_/lib/python/site-packages`  
_purelib_ | `_userbase_/lib/python/site-packages`  
_include_ | `_userbase_/include/python_X.Y_`  
_scripts_ | `_userbase_/bin`  
_data_ | `_userbase_`  
## Home scheme[¶](https://docs.python.org/3/library/sysconfig.html#home-scheme "Link to this heading")
The idea behind the “home scheme” is that you build and maintain a personal stash of Python modules. This scheme’s name is derived from the idea of a “home” directory on Unix, since it’s not unusual for a Unix user to make their home directory have a layout similar to `/usr/` or `/usr/local/`. This scheme can be used by anyone, regardless of the operating system they are installing for.
### `posix_home`[¶](https://docs.python.org/3/library/sysconfig.html#posix-home "Link to this heading")
Path | Installation directory  
---|---  
_stdlib_ | `_home_/lib/python`  
_platstdlib_ | `_home_/lib/python`  
_platlib_ | `_home_/lib/python`  
_purelib_ | `_home_/lib/python`  
_include_ | `_home_/include/python`  
_platinclude_ | `_home_/include/python`  
_scripts_ | `_home_/bin`  
_data_ | `_home_`  
## Prefix scheme[¶](https://docs.python.org/3/library/sysconfig.html#prefix-scheme "Link to this heading")
The “prefix scheme” is useful when you wish to use one Python installation to perform the build/install (i.e., to run the setup script), but install modules into the third-party module directory of a different Python installation (or something that looks like a different Python installation). If this sounds a trifle unusual, it is—that’s why the user and home schemes come before. However, there are at least two known cases where the prefix scheme will be useful.
First, consider that many Linux distributions put Python in `/usr`, rather than the more traditional `/usr/local`. This is entirely appropriate, since in those cases Python is part of “the system” rather than a local add-on. However, if you are installing Python modules from source, you probably want them to go in `/usr/local/lib/python2._X_`rather than`/usr/lib/python2. _X_`.
Another possibility is a network filesystem where the name used to write to a remote directory is different from the name used to read it: for example, the Python interpreter accessed as `/usr/local/bin/python` might search for modules in `/usr/local/lib/python2._X_`, but those modules would have to be installed to, say,`/mnt/_@server_/export/lib/python2._X_`.
### `posix_prefix`[¶](https://docs.python.org/3/library/sysconfig.html#posix-prefix "Link to this heading")
Path | Installation directory  
---|---  
_stdlib_ | `_prefix_/lib/python_X.Y_`  
_platstdlib_ | `_prefix_/lib/python_X.Y_`  
_platlib_ | `_prefix_/lib/python_X.Y_/site-packages`  
_purelib_ | `_prefix_/lib/python_X.Y_/site-packages`  
_include_ | `_prefix_/include/python_X.Y_`  
_platinclude_ | `_prefix_/include/python_X.Y_`  
_scripts_ | `_prefix_/bin`  
_data_ | `_prefix_`  
### `nt`[¶](https://docs.python.org/3/library/sysconfig.html#nt "Link to this heading")
Path | Installation directory  
---|---  
_stdlib_ | `_prefix_\Lib`  
_platstdlib_ | `_prefix_\Lib`  
_platlib_ | `_prefix_\Lib\site-packages`  
_purelib_ | `_prefix_\Lib\site-packages`  
_include_ | `_prefix_\Incl