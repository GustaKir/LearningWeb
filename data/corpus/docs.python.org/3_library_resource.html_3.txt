Title: Resource Limits in Python
URL: https://docs.python.org/3/library/resource.html
Summary: This document section describes various resource limits in Python, including RLIMIT_SWAP, RLIMIT_NPTS, and RLIMIT_KQUEUES, detailing their purpose, enforcement conditions, and system availability, specifically for FreeBSD, and indicates their introduction in version 3.4.
---

resource.RLIMIT_SWAP[¶](https://docs.python.org/3/library/resource.html#resource.RLIMIT_SWAP "Link to this definition")
    
The maximum size (in bytes) of the swap space that may be reserved or used by all of this user id’s processes. This limit is enforced only if bit 1 of the vm.overcommit sysctl is set. Please see [tuning(7)](https://man.freebsd.org/cgi/man.cgi?query=tuning&sektion=7) for a complete description of this sysctl.
[Availability](https://docs.python.org/3/library/intro.html#availability): FreeBSD.
Added in version 3.4. 

resource.RLIMIT_NPTS[¶](https://docs.python.org/3/library/resource.html#resource.RLIMIT_NPTS "Link to this definition")
    
The maximum number of pseudo-terminals created by this user id.
[Availability](https://docs.python.org/3/library/intro.html#availability): FreeBSD.
Added in version 3.4. 

resource.RLIMIT_KQUEUES[¶](https://docs.python.org/3/library/resource.html#resource.RLIMIT_KQUEUES "Link to this definition")
    
The maximum number of kqueues this user id is allowed to create.
[Availability](https://docs.python.org/3/library/intro.html#availability): FreeBSD >= 11.
Added in version 3.10.
## Resource Usage[¶](https://docs.python.org/3/library/resource.html#resource-usage "Link to this heading")
These functions are used to retrieve resource usage information: 

resource.getrusage(_who_)[¶](https://docs.python.org/3/library/resource.html#resource.getrusage "Link to this definition")
    
This function returns an object that describes the resources consumed by either the current process or its children, as specified by the _who_ parameter. The _who_ parameter should be specified using one of the `RUSAGE_*` constants described below.
A simple example:
```
fromresourceimport *
importtime
# a non CPU-bound task
time.sleep(3)
print(getrusage(RUSAGE_SELF))
# a CPU-bound task
for i in range(10 ** 8):
  _ = 1 + 1
print(getrusage(RUSAGE_SELF))