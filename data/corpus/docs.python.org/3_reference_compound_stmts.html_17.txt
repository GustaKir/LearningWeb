Title: Function Call Semantics in Python
URL: https://docs.python.org/3/reference/compound_stmts.html
Summary: This section elaborates on the semantics of function calls in Python, discussing how parameters are assigned from positional and keyword arguments, as well as the use of *args and **kwargs for handling excess arguments. It also highlights the introduction of positional-only parameters with the '/' syntax in Python 3.8, referencing PEP 570.
---

```

Function call semantics are described in more detail in section [Calls](https://docs.python.org/3/reference/expressions.html#calls). A function call always assigns values to all parameters mentioned in the parameter list, either from positional arguments, from keyword arguments, or from default values. If the form “`*identifier`” is present, it is initialized to a tuple receiving any excess positional parameters, defaulting to the empty tuple. If the form “`**identifier`” is present, it is initialized to a new ordered mapping receiving any excess keyword arguments, defaulting to a new empty mapping of the same type. Parameters after “`*`” or “`*identifier`” are keyword-only parameters and may only be passed by keyword arguments. Parameters before “`/`” are positional-only parameters and may only be passed by positional arguments.
Changed in version 3.8: The `/` function parameter syntax may be used to indicate positional-only parameters. See [**PEP 570**](https://peps.python.org/pep-0570/) for details.
Parameters may have an [annotation](https://docs.python.org/3/glossary.html#term-function-annotation) of the form “`: expression`” following the parameter name. Any parameter may have an annotation, even those of the form `*identifier` or `**identifier`. (As a special case, parameters of the form `*identifier` may have an annotation “`: *expression`”.) Functions may have “return” annotation of the form “`-> expression`” after the parameter list. These annotations can be any valid Python expression. The presence of annotations does not change the semantics of a function. The annotation values are available as values of a dictionary keyed by the parameters’ names in the `__annotations__` attribute of the function object. If the `annotations` import from [`__future__`](https://docs.python.org/3/library/__future__.html#module-__future__ "__future__: Future statement definitions") is used, annotations are preserved as strings at runtime which enables postponed evaluation. Otherwise, they are evaluated when the function definition is executed. In this case annotations may be evaluated in a different order than they appear in the source code.
Changed in version 3.11: Parameters of the form “`*identifier`” may have an annotation “`: *expression`”. See [**PEP 646**](https://peps.python.org/pep-0646/).
It is also possible to create anonymous functions (functions not bound to a name), for immediate use in expressions. This uses lambda expressions, described in section [Lambdas](https://docs.python.org/3/reference/expressions.html#lambda). Note that the lambda expression is merely a shorthand for a simplified function definition; a function defined in a “[`def`](https://docs.python.org/3/reference/compound_stmts.html#def)” statement can be passed around or assigned to another name just like a function defined by a lambda expression. The “`def`” form is actually more powerful since it allows the execution of multiple statements and annotations.
**Programmer’s note:** Functions are first-class objects. A “`def`” statement executed inside a function definition defines a local function that can be returned or passed around. Free variables used in the nested function can access the local variables of the function containing the def. See section [Naming and binding](https://docs.python.org/3/reference/executionmodel.html#naming) for details.
See also 

[**PEP 3107**](https://peps.python.org/pep-3107/) - Function Annotations
    
The original specification for function annotations. 

[**PEP 484**](https://peps.python.org/pep-0484/) - Type Hints
    
Definition of a standard meaning for annotations: type hints. 

[**PEP 526**](https://peps.python.org/pep-0526/) - Syntax for Variable Annotations
    
Ability to type hint variable declarations, including class variables and instance variables. 

[**PEP 563**](https://peps.python.org/pep-0563/) - Postponed Evaluation of Annotations
    
Support for forward references within annotations by preserving annotations in a string form at runtime instead of eager evaluation. 

[**PEP 318**](https://peps.python.org/pep-0318/) - Decorators for Functions and Methods
    
Function and method decorators were introduced. Class decorators were introduced in [**PEP 3129**](https://peps.python.org/pep-3129/).
## 8.8. Class definitions[¶](https://docs.python.org/3/reference/compound_stmts.html#class-definitions "Link to this heading")
A class definition defines a class object (see section [The standard type hierarchy](https://docs.python.org/3/reference/datamodel.html#types)):