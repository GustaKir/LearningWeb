Title: ExtensionFileLoader Class in importlib.machinery
URL: https://docs.python.org/3/library/importlib.html
Summary: The ExtensionFileLoader class is an implementation of importlib.abc.ExecutionLoader for extension modules, requiring the module name (_fullname_) and file path (_path_). Importing extension modules in subinterpreters will fail without multi-phase init, mandated since version 3.12, although it was previously necessary for version 3.3.
---

_class_ importlib.machinery.ExtensionFileLoader(_fullname_ , _path_)[¶](https://docs.python.org/3/library/importlib.html#importlib.machinery.ExtensionFileLoader "Link to this definition")
    
A concrete implementation of [`importlib.abc.ExecutionLoader`](https://docs.python.org/3/library/importlib.html#importlib.abc.ExecutionLoader "importlib.abc.ExecutionLoader") for extension modules.
The _fullname_ argument specifies the name of the module the loader is to support. The _path_ argument is the path to the extension module’s file.
Note that, by default, importing an extension module will fail in subinterpreters if it doesn’t implement multi-phase init (see [**PEP 489**](https://peps.python.org/pep-0489/)), even if it would otherwise import successfully.
Added in version 3.3.
Changed in version 3.12: Multi-phase init is now required for use in subinterpreters. 

name[¶](https://docs.python.org/3/library/importlib.html#importlib.machinery.ExtensionFileLoader.name "Link to this definition")
    
Name of the module the loader supports. 

path[¶](https://docs.python.org/3/library/importlib.html#importlib.machinery.ExtensionFileLoader.path "Link to this definition")
    
Path to the extension module. 

create_module(_spec_)[¶](https://docs.python.org/3/library/importlib.html#importlib.machinery.ExtensionFileLoader.create_module "Link to this definition")
    
Creates the module object from the given specification in accordance with [**PEP 489**](https://peps.python.org/pep-0489/).
Added in version 3.5. 

exec_module(_module_)[¶](https://docs.python.org/3/library/importlib.html#importlib.machinery.ExtensionFileLoader.exec_module "Link to this definition")
    
Initializes the given module object in accordance with [**PEP 489**](https://peps.python.org/pep-0489/).
Added in version 3.5. 

is_package(_fullname_)[¶](https://docs.python.org/3/library/importlib.html#importlib.machinery.ExtensionFileLoader.is_package "Link to this definition")
    
Returns `True` if the file path points to a package’s `__init__` module based on [`EXTENSION_SUFFIXES`](https://docs.python.org/3/library/importlib.html#importlib.machinery.EXTENSION_SUFFIXES "importlib.machinery.EXTENSION_SUFFIXES"). 

get_code(_fullname_)[¶](https://docs.python.org/3/library/importlib.html#importlib.machinery.ExtensionFileLoader.get_code "Link to this definition")
    
Returns `None` as extension modules lack a code object. 

get_source(_fullname_)[¶](https://docs.python.org/3/library/importlib.html#importlib.machinery.ExtensionFileLoader.get_source "Link to this definition")
    
Returns `None` as extension modules do not have source code. 

get_filename(_fullname_)[¶](https://docs.python.org/3/library/importlib.html#importlib.machinery.ExtensionFileLoader.get_filename "Link to this definition")
    
Returns [`path`](https://docs.python.org/3/library/importlib.html#importlib.machinery.ExtensionFileLoader.path "importlib.machinery.ExtensionFileLoader.path").
Added in version 3.4. 

_class_ importlib.machinery.NamespaceLoader(_name_ , _path_ , _path_finder_)[¶](https://docs.python.org/3/library/importlib.html#importlib.machinery.NamespaceLoader "Link to this definition")
    
A concrete implementation of [`importlib.abc.InspectLoader`](https://docs.python.org/3/library/importlib.html#importlib.abc.InspectLoader "importlib.abc.InspectLoader") for namespace packages. This is an alias for a private class and is only made public for introspecting the `__loader__` attribute on namespace packages:
>>>```
>>> fromimportlib.machineryimport NamespaceLoader
>>> importmy_namespace
>>> isinstance(my_namespace.__loader__, NamespaceLoader)
True
>>> importimportlib.abc
>>> isinstance(my_namespace.__loader__, importlib.abc.Loader)
True