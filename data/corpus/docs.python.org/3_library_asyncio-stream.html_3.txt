Title: StreamReader Methods in asyncio
URL: https://docs.python.org/3/library/asyncio-stream.html
Summary: This document section describes two methods of the StreamReader class in Python's asyncio library: `readexactly(n)` which reads exactly 'n' bytes and raises `IncompleteReadError` if EOF is encountered prematurely, and `readuntil(separator=b'
')`, which reads data until a specified separator is found, returning data including the separator.
---

_async_ readexactly(_n_)[¶](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamReader.readexactly "Link to this definition")
    
Read exactly _n_ bytes.
Raise an [`IncompleteReadError`](https://docs.python.org/3/library/asyncio-exceptions.html#asyncio.IncompleteReadError "asyncio.IncompleteReadError") if EOF is reached before _n_ can be read. Use the [`IncompleteReadError.partial`](https://docs.python.org/3/library/asyncio-exceptions.html#asyncio.IncompleteReadError.partial "asyncio.IncompleteReadError.partial") attribute to get the partially read data. 

_async_ readuntil(_separator =b'\n'_)[¶](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamReader.readuntil "Link to this definition")
    
Read data from the stream until _separator_ is found.
On success, the data and separator will be removed from the internal buffer (consumed). Returned data will include the separator at the end.
If the amount of data read exceeds the configured stream limit, a [`LimitOverrunError`](https://docs.python.org/3/library/asyncio-exceptions.html#asyncio.LimitOverrunError "asyncio.LimitOverrunError") exception is raised, and the data is left in the internal buffer and can be read again.
If EOF is reached before the complete separator is found, an [`IncompleteReadError`](https://docs.python.org/3/library/asyncio-exceptions.html#asyncio.IncompleteReadError "asyncio.IncompleteReadError") exception is raised, and the internal buffer is reset. The [`IncompleteReadError.partial`](https://docs.python.org/3/library/asyncio-exceptions.html#asyncio.IncompleteReadError.partial "asyncio.IncompleteReadError.partial") attribute may contain a portion of the separator.
The _separator_ may also be a tuple of separators. In this case the return value will be the shortest possible that has any separator as the suffix. For the purposes of [`LimitOverrunError`](https://docs.python.org/3/library/asyncio-exceptions.html#asyncio.LimitOverrunError "asyncio.LimitOverrunError"), the shortest possible separator is considered to be the one that matched.
Added in version 3.5.2.
Changed in version 3.13: The _separator_ parameter may now be a [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple") of separators. 

at_eof()[¶](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamReader.at_eof "Link to this definition")
    
Return `True` if the buffer is empty and [`feed_eof()`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamReader.feed_eof "asyncio.StreamReader.feed_eof") was called.
## StreamWriter[¶](https://docs.python.org/3/library/asyncio-stream.html#streamwriter "Link to this heading") 

_class_ asyncio.StreamWriter[¶](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamWriter "Link to this definition")
    
Represents a writer object that provides APIs to write data to the IO stream.
It is not recommended to instantiate _StreamWriter_ objects directly; use [`open_connection()`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.open_connection "asyncio.open_connection") and [`start_server()`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.start_server "asyncio.start_server") instead. 

write(_data_)[¶](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamWriter.write "Link to this definition")
    
The method attempts to write the _data_ to the underlying socket immediately. If that fails, the data is queued in an internal write buffer until it can be sent.
The method should be used along with the `drain()` method:
```
stream.write(data)
await stream.drain()

```


writelines(_data_)[¶](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamWriter.writelines "Link to this definition")
    
The method writes a list (or any iterable) of bytes to the underlying socket immediately. If that fails, the data is queued in an internal write buffer until it can be sent.
The method should be used along with the `drain()` method:
```
stream.writelines(lines)
await stream.drain()

```


close()[¶](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamWriter.close "Link to this definition")
    
The method closes the stream and the underlying socket.
The method should be used, though not mandatory, along with the `wait_closed()` method:
```
stream.close()
await stream.wait_closed()