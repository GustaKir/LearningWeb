Title: Lexical Analysis in Python
URL: https://docs.python.org/3/reference/lexical_analysis.html
Summary: This section discusses the interpretation of integer and floating-point literals in Python, including the use of radix 10 for exponent parts and the implementation-dependent range of floating-point literals. It also highlights the support for underscores in digit grouping, which was introduced in version 3.6, and provides examples of valid floating-point literals. Additionally, it introduces imaginary literals, defining them through specific lexical definitions.
---

```

Note that the integer and exponent parts are always interpreted using radix 10. For example, `077e010` is legal, and denotes the same number as `77e10`. The allowed range of floating-point literals is implementation-dependent. As in integer literals, underscores are supported for digit grouping.
Some examples of floating-point literals:
```
3.14  10.  .001  1e100  3.14e-10  0e0  3.14_15_93

```

Changed in version 3.6: Underscores are now allowed for grouping purposes in literals.
### 2.4.7. Imaginary literals[¶](https://docs.python.org/3/reference/lexical_analysis.html#imaginary-literals "Link to this heading")
Imaginary literals are described by the following lexical definitions:
```
**imagnumber** ::= ([floatnumber](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-floatnumber) | [digitpart](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-digitpart)) ("j" | "J")

```

An imaginary literal yields a complex number with a real part of 0.0. Complex numbers are represented as a pair of floating-point numbers and have the same restrictions on their range. To create a complex number with a nonzero real part, add a floating-point number to it, e.g., `(3+4j)`. Some examples of imaginary literals:
```
3.14j  10.j  10j   .001j  1e100j  3.14e-10j  3.14_15_93j

```

## 2.5. Operators[¶](https://docs.python.org/3/reference/lexical_analysis.html#operators "Link to this heading")
The following tokens are operators:
```
+    -    *    **   /    //   %   @
<<   >>   &    |    ^    ~    :=
<    >    <=   >=   ==   !=

```

## 2.6. Delimiters[¶](https://docs.python.org/3/reference/lexical_analysis.html#delimiters "Link to this heading")
The following tokens serve as delimiters in the grammar:
```
(    )    [    ]    {    }
,    :    !    .    ;    @    =
->   +=   -=   *=   /=   //=   %=
@=   &=   |=   ^=   >>=   <<=   **=

```

The period can also occur in floating-point and imaginary literals. A sequence of three periods has a special meaning as an ellipsis literal. The second half of the list, the augmented assignment operators, serve lexically as delimiters, but also perform an operation.
The following printing ASCII characters have special meaning as part of other tokens or are otherwise significant to the lexical analyzer:
```
'    "    #    \

```

The following printing ASCII characters are not used in Python. Their occurrence outside string literals and comments is an unconditional error:
```
$    ?    `