Title: Creating a Subprocess with asyncio
URL: https://docs.python.org/3/library/asyncio-eventloop.html
Summary: The function loop.subprocess_shell creates a subprocess from a command string using the platform’s shell syntax. The command can be provided as a string or bytes encoded to the filesystem encoding. It requires a protocol factory that must return a subclass of the SubprocessProtocol.
---

_async_ loop.subprocess_shell(_protocol_factory_ , _cmd_ , _*_ , _stdin =subprocess.PIPE_, _stdout =subprocess.PIPE_, _stderr =subprocess.PIPE_, _** kwargs_)[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_shell "Link to this definition")
    
Create a subprocess from _cmd_ , which can be a [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") or a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") string encoded to the [filesystem encoding](https://docs.python.org/3/library/os.html#filesystem-encoding), using the platform’s “shell” syntax.
This is similar to the standard library [`subprocess.Popen`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen "subprocess.Popen") class called with `shell=True`.
The _protocol_factory_ must be a callable returning a subclass of the [`SubprocessProtocol`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.SubprocessProtocol "asyncio.SubprocessProtocol") class.
See [`subprocess_exec()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec "asyncio.loop.subprocess_exec") for more details about the remaining arguments.
Returns a pair of `(transport, protocol)`, where _transport_ conforms to the [`SubprocessTransport`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.SubprocessTransport "asyncio.SubprocessTransport") base class and _protocol_ is an object instantiated by the _protocol_factory_.
Note
It is the application’s responsibility to ensure that all whitespace and special characters are quoted appropriately to avoid [shell injection](https://en.wikipedia.org/wiki/Shell_injection#Shell_injection) vulnerabilities. The [`shlex.quote()`](https://docs.python.org/3/library/shlex.html#shlex.quote "shlex.quote") function can be used to properly escape whitespace and special characters in strings that are going to be used to construct shell commands.
## Callback Handles[¶](https://docs.python.org/3/library/asyncio-eventloop.html#callback-handles "Link to this heading") 

_class_ asyncio.Handle[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Handle "Link to this definition")
    
A callback wrapper object returned by [`loop.call_soon()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.call_soon "asyncio.loop.call_soon"), [`loop.call_soon_threadsafe()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.call_soon_threadsafe "asyncio.loop.call_soon_threadsafe"). 

get_context()[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Handle.get_context "Link to this definition")
    
Return the [`contextvars.Context`](https://docs.python.org/3/library/contextvars.html#contextvars.Context "contextvars.Context") object associated with the handle.
Added in version 3.12. 

cancel()[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Handle.cancel "Link to this definition")
    
Cancel the callback. If the callback has already been canceled or executed, this method has no effect. 

cancelled()[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Handle.cancelled "Link to this definition")
    
Return `True` if the callback was cancelled.
Added in version 3.7. 

_class_ asyncio.TimerHandle[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.TimerHandle "Link to this definition")
    
A callback wrapper object returned by [`loop.call_later()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.call_later "asyncio.loop.call_later"), and [`loop.call_at()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.call_at "asyncio.loop.call_at").
This class is a subclass of [`Handle`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Handle "asyncio.Handle").