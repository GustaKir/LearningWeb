Title: Frozen Sets and Mappings in Python
URL: https://docs.python.org/3/reference/datamodel.html
Summary: This section explains frozensets, which are immutable and hashable sets created using the `frozenset()` constructor. It also introduces mappings, which consist of indexed objects using the subscript notation `a[k]`, and mentions that the `len()` function can be used to get the number of items in a mapping.
---

Frozen sets
    
These represent an immutable set. They are created by the built-in [`frozenset()`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset") constructor. As a frozenset is immutable and [hashable](https://docs.python.org/3/glossary.html#term-hashable), it can be used again as an element of another set, or as a dictionary key.
### 3.2.7. Mappings[¶](https://docs.python.org/3/reference/datamodel.html#mappings "Link to this heading")
These represent finite sets of objects indexed by arbitrary index sets. The subscript notation `a[k]` selects the item indexed by `k` from the mapping `a`; this can be used in expressions and as the target of assignments or [`del`](https://docs.python.org/3/reference/simple_stmts.html#del) statements. The built-in function [`len()`](https://docs.python.org/3/library/functions.html#len "len") returns the number of items in a mapping.
There is currently a single intrinsic mapping type:
#### 3.2.7.1. Dictionaries[¶](https://docs.python.org/3/reference/datamodel.html#dictionaries "Link to this heading")
These represent finite sets of objects indexed by nearly arbitrary values. The only types of values not acceptable as keys are values containing lists or dictionaries or other mutable types that are compared by value rather than by object identity, the reason being that the efficient implementation of dictionaries requires a key’s hash value to remain constant. Numeric types used for keys obey the normal rules for numeric comparison: if two numbers compare equal (e.g., `1` and `1.0`) then they can be used interchangeably to index the same dictionary entry.
Dictionaries preserve insertion order, meaning that keys will be produced in the same order they were added sequentially over the dictionary. Replacing an existing key does not change the order, however removing a key and re-inserting it will add it to the end instead of keeping its old place.
Dictionaries are mutable; they can be created by the `{}` notation (see section [Dictionary displays](https://docs.python.org/3/reference/expressions.html#dict)).
The extension modules [`dbm.ndbm`](https://docs.python.org/3/library/dbm.html#module-dbm.ndbm "dbm.ndbm: The New Database Manager \(Unix\)") and [`dbm.gnu`](https://docs.python.org/3/library/dbm.html#module-dbm.gnu "dbm.gnu: GNU database manager \(Unix\)") provide additional examples of mapping types, as does the [`collections`](https://docs.python.org/3/library/collections.html#module-collections "collections: Container datatypes") module.
Changed in version 3.7: Dictionaries did not preserve insertion order in versions of Python before 3.6. In CPython 3.6, insertion order was preserved, but it was considered an implementation detail at that time rather than a language guarantee.
### 3.2.8. Callable types[¶](https://docs.python.org/3/reference/datamodel.html#callable-types "Link to this heading")
These are the types to which the function call operation (see section [Calls](https://docs.python.org/3/reference/expressions.html#calls)) can be applied:
#### 3.2.8.1. User-defined functions[¶](https://docs.python.org/3/reference/datamodel.html#user-defined-functions "Link to this heading")
A user-defined function object is created by a function definition (see section [Function definitions](https://docs.python.org/3/reference/compound_stmts.html#function)). It should be called with an argument list containing the same number of items as the function’s formal parameter list.
##### 3.2.8.1.1. Special read-only attributes[¶](https://docs.python.org/3/reference/datamodel.html#special-read-only-attributes "Link to this heading")
Attribute | Meaning  
---|--- 

function.__globals__[¶](https://docs.python.org/3/reference/datamodel.html#function.__globals__ "Link to this definition")
| A reference to the [`dictionary`](https://docs.python.org/3/library/stdtypes.html#dict "dict") that holds the function’s [global variables](https://docs.python.org/3/reference/executionmodel.html#naming) – the global namespace of the module in which the function was defined. 

function.__closure__[¶](https://docs.python.org/3/reference/datamodel.html#function.__closure__ "Link to this definition")
| `None` or a [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple") of cells that contain bindings for the names specified in the [`co_freevars`](https://docs.python.org/3/reference/datamodel.html#codeobject.co_freevars "codeobject.co_freevars") attribute of the function’s [`code object`](https://docs.python.org/3/reference/datamodel.html#function.__code__ "function.__code__"). A cell object has the attribute `cell_contents`. This can be used to get the value of the cell, as well as set the value.  
##### 3.2.8.1.2. Special writable attributes[¶](https://docs.python.org/3/reference/datamodel.html#special-writable-attributes "Link to this heading")
Most of these attributes check the type of the assigned value:
Attribute | Meaning  
---|---