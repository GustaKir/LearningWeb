Title: cmd.Cmd Class Overview
URL: https://docs.python.org/3/library/cmd.html
Summary: The cmd.Cmd class provides a framework for creating line-oriented interpreters. It is intended to be subclassed rather than instantiated directly, allowing users to define their own interpreter classes while inheriting cmd's methods. An optional argument, completekey, defines the key used for command completion, defaulting to Tab.
---

_class_ cmd.Cmd(_completekey ='tab'_, _stdin =None_, _stdout =None_)[¶](https://docs.python.org/3/library/cmd.html#cmd.Cmd "Link to this definition")
    
A [`Cmd`](https://docs.python.org/3/library/cmd.html#cmd.Cmd "cmd.Cmd") instance or subclass instance is a line-oriented interpreter framework. There is no good reason to instantiate [`Cmd`](https://docs.python.org/3/library/cmd.html#cmd.Cmd "cmd.Cmd") itself; rather, it’s useful as a superclass of an interpreter class you define yourself in order to inherit [`Cmd`](https://docs.python.org/3/library/cmd.html#cmd.Cmd "cmd.Cmd")’s methods and encapsulate action methods.
The optional argument _completekey_ is the [`readline`](https://docs.python.org/3/library/readline.html#module-readline "readline: GNU readline support for Python. \(Unix\)") name of a completion key; it defaults to `Tab`. If _completekey_ is not [`None`](https://docs.python.org/3/library/constants.html#None "None") and [`readline`](https://docs.python.org/3/library/readline.html#module-readline "readline: GNU readline support for Python. \(Unix\)") is available, command completion is done automatically.
The default, `'tab'`, is treated specially, so that it refers to the `Tab` key on every [`readline.backend`](https://docs.python.org/3/library/readline.html#readline.backend "readline.backend"). Specifically, if [`readline.backend`](https://docs.python.org/3/library/readline.html#readline.backend "readline.backend") is `editline`, `Cmd` will use `'^I'` instead of `'tab'`. Note that other values are not treated this way, and might only work with a specific backend.
The optional arguments _stdin_ and _stdout_ specify the input and output file objects that the Cmd instance or subclass instance will use for input and output. If not specified, they will default to [`sys.stdin`](https://docs.python.org/3/library/sys.html#sys.stdin "sys.stdin") and [`sys.stdout`](https://docs.python.org/3/library/sys.html#sys.stdout "sys.stdout").
If you want a given _stdin_ to be used, make sure to set the instance’s [`use_rawinput`](https://docs.python.org/3/library/cmd.html#cmd.Cmd.use_rawinput "cmd.Cmd.use_rawinput") attribute to `False`, otherwise _stdin_ will be ignored.
Changed in version 3.13: `completekey='tab'` is replaced by `'^I'` for `editline`.
## Cmd Objects[¶](https://docs.python.org/3/library/cmd.html#cmd-objects "Link to this heading")
A [`Cmd`](https://docs.python.org/3/library/cmd.html#cmd.Cmd "cmd.Cmd") instance has the following methods: 

Cmd.cmdloop(_intro =None_)[¶](https://docs.python.org/3/library/cmd.html#cmd.Cmd.cmdloop "Link to this definition")
    
Repeatedly issue a prompt, accept input, parse an initial prefix off the received input, and dispatch to action methods, passing them the remainder of the line as argument.
The optional argument is a banner or intro string to be issued before the first prompt (this overrides the [`intro`](https://docs.python.org/3/library/cmd.html#cmd.Cmd.intro "cmd.Cmd.intro") class attribute).
If the [`readline`](https://docs.python.org/3/library/readline.html#module-readline "readline: GNU readline support for Python. \(Unix\)") module is loaded, input will automatically inherit **bash** -like history-list editing (e.g. `Control`-`P` scrolls back to the last command, `Control`-`N` forward to the next one, `Control`-`F` moves the cursor to the right non-destructively, `Control`-`B` moves the cursor to the left non-destructively, etc.).
An end-of-file on input is passed back as the string `'EOF'`.
An interpreter instance will recognize a command name `foo` if and only if it has a method `do_foo()`. As a special case, a line beginning with the character `'?'` is dispatched to the method [`do_help()`](https://docs.python.org/3/library/cmd.html#cmd.Cmd.do_help "cmd.Cmd.do_help"). As another special case, a line beginning with the character `'!'` is dispatched to the method `do_shell()` (if such a method is defined).
This method will return when the [`postcmd()`](https://docs.python.org/3/library/cmd.html#cmd.Cmd.postcmd "cmd.Cmd.postcmd") method returns a true value. The _stop_ argument to [`postcmd()`](https://docs.python.org/3/library/cmd.html#cmd.Cmd.postcmd "cmd.Cmd.postcmd") is the return value from the command’s corresponding `do_*()` method.
If completion is enabled, completing commands will be done automatically, and completing of commands args is done by calling `complete_foo()` with arguments _text_ , _line_ , _begidx_ , and _endidx_. _text_ is the string prefix we are attempting to match: all returned matches must begin with it. _line_ is the current input line with leading whitespace removed, _begidx_ and _endidx_ are the beginning and ending indexes of the prefix text, which could be used to provide different completion depending upon which position the argument is in.