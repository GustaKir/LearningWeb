Title: Email Policy: Verify Generated Headers
URL: https://docs.python.org/3/library/email.policy.html
Summary: The `verify_generated_headers` setting in the email policy, defaulting to `True`, raises a `HeaderWriteError` for improperly formatted headers to enhance security. It can be set to `False` for backward compatibility, enabling unsafe behavior. This feature was introduced in version 3.13.
---

verify_generated_headers[¶](https://docs.python.org/3/library/email.policy.html#email.policy.Policy.verify_generated_headers "Link to this definition")
    
If `True` (the default), the generator will raise [`HeaderWriteError`](https://docs.python.org/3/library/email.errors.html#email.errors.HeaderWriteError "email.errors.HeaderWriteError") instead of writing a header that is improperly folded or delimited, such that it would be parsed as multiple headers or joined with adjacent data. Such headers can be generated by custom header classes or bugs in the `email` module.
As it’s a security feature, this defaults to `True` even in the [`Compat32`](https://docs.python.org/3/library/email.policy.html#email.policy.Compat32 "email.policy.Compat32") policy. For backwards compatible, but unsafe, behavior, it must be set to `False` explicitly.
Added in version 3.13.
The following [`Policy`](https://docs.python.org/3/library/email.policy.html#email.policy.Policy "email.policy.Policy") method is intended to be called by code using the email library to create policy instances with custom settings: 

clone(_** kw_)[¶](https://docs.python.org/3/library/email.policy.html#email.policy.Policy.clone "Link to this definition")
    
Return a new [`Policy`](https://docs.python.org/3/library/email.policy.html#email.policy.Policy "email.policy.Policy") instance whose attributes have the same values as the current instance, except where those attributes are given new values by the keyword arguments.
The remaining [`Policy`](https://docs.python.org/3/library/email.policy.html#email.policy.Policy "email.policy.Policy") methods are called by the email package code, and are not intended to be called by an application using the email package. A custom policy must implement all of these methods. 

handle_defect(_obj_ , _defect_)[¶](https://docs.python.org/3/library/email.policy.html#email.policy.Policy.handle_defect "Link to this definition")
    
Handle a _defect_ found on _obj_. When the email package calls this method, _defect_ will always be a subclass of [`MessageDefect`](https://docs.python.org/3/library/email.errors.html#email.errors.MessageDefect "email.errors.MessageDefect").
The default implementation checks the [`raise_on_defect`](https://docs.python.org/3/library/email.policy.html#email.policy.Policy.raise_on_defect "email.policy.Policy.raise_on_defect") flag. If it is `True`, _defect_ is raised as an exception. If it is `False` (the default), _obj_ and _defect_ are passed to [`register_defect()`](https://docs.python.org/3/library/email.policy.html#email.policy.Policy.register_defect "email.policy.Policy.register_defect"). 

register_defect(_obj_ , _defect_)[¶](https://docs.python.org/3/library/email.policy.html#email.policy.Policy.register_defect "Link to this definition")
    
Register a _defect_ on _obj_. In the email package, _defect_ will always be a subclass of [`MessageDefect`](https://docs.python.org/3/library/email.errors.html#email.errors.MessageDefect "email.errors.MessageDefect").
The default implementation calls the `append` method of the `defects` attribute of _obj_. When the email package calls [`handle_defect`](https://docs.python.org/3/library/email.policy.html#email.policy.Policy.handle_defect "email.policy.Policy.handle_defect"), _obj_ will normally have a `defects` attribute that has an `append` method. Custom object types used with the email package (for example, custom `Message` objects) should also provide such an attribute, otherwise defects in parsed messages will raise unexpected errors. 

header_max_count(_name_)[¶](https://docs.python.org/3/library/email.policy.html#email.policy.Policy.header_max_count "Link to this definition")
    
Return the maximum allowed number of headers named _name_.
Called when a header is added to an [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") or [`Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "email.message.Message") object. If the returned value is not `0` or `None`, and there are already a number of headers with the name _name_ greater than or equal to the value returned, a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised.
Because the default behavior of `Message.__setitem__` is to append the value to the list of headers, it is easy to create duplicate headers without realizing it. This method allows certain headers to be limited in the number of instances of that header that may be added to a `Message` programmatically. (The limit is not observed by the parser, which will faithfully produce as many headers as exist in the message being parsed.)
The default implementation returns `None` for all header names.