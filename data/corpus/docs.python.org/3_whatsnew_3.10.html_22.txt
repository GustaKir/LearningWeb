Title: Deprecated Numeric Literals in Python 3.10
URL: https://docs.python.org/3/whatsnew/3.10.html
Summary: Python 3.10 introduces a deprecation warning for numeric literals immediately followed by specific keywords (such as 'and', 'or', 'if', 'for', 'in', 'is', 'else') due to potential ambiguity in expressions. This aims to clarify parsing of these expressions in future releases.
---

## Deprecated[Â¶](https://docs.python.org/3/whatsnew/3.10.html#deprecated "Link to this heading")
  * Currently Python accepts numeric literals immediately followed by keywords, for example `0in x`, `1or x`, `0if 1else 2`. It allows confusing and ambiguous expressions like `[0x1for x in y]` (which can be interpreted as `[0x1 for x in y]` or `[0x1f or x in y]`). Starting in this release, a deprecation warning is raised if the numeric literal is immediately followed by one of keywords [`and`](https://docs.python.org/3/reference/expressions.html#and), [`else`](https://docs.python.org/3/reference/compound_stmts.html#else), [`for`](https://docs.python.org/3/reference/compound_stmts.html#for), [`if`](https://docs.python.org/3/reference/compound_stmts.html#if), [`in`](https://docs.python.org/3/reference/expressions.html#in), [`is`](https://docs.python.org/3/reference/expressions.html#is) and [`or`](https://docs.python.org/3/reference/expressions.html#or). In future releases it will be changed to syntax warning, and finally to syntax error. (Contributed by Serhiy Storchaka in [bpo-43833](https://bugs.python.org/issue?@action=redirect&bpo=43833).)
  * Starting in this release, there will be a concerted effort to begin cleaning up old import semantics that were kept for Python 2.7 compatibility. Specifically, `find_loader()`/`find_module()` (superseded by [`find_spec()`](https://docs.python.org/3/library/importlib.html#importlib.abc.MetaPathFinder.find_spec "importlib.abc.MetaPathFinder.find_spec")), [`load_module()`](https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.load_module "importlib.abc.Loader.load_module") (superseded by [`exec_module()`](https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.exec_module "importlib.abc.Loader.exec_module")), `module_repr()` (which the import system takes care of for you), the `__package__` attribute (superseded by `__spec__.parent`), the `__loader__` attribute (superseded by `__spec__.loader`), and the `__cached__` attribute (superseded by `__spec__.cached`) will slowly be removed (as well as other classes and methods in [`importlib`](https://docs.python.org/3/library/importlib.html#module-importlib "importlib: The implementation of the import machinery.")). [`ImportWarning`](https://docs.python.org/3/library/exceptions.html#ImportWarning "ImportWarning") and/or [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning") will be raised as appropriate to help identify code which needs updating during this transition.
  * The entire `distutils` namespace is deprecated, to be removed in Python 3.12. Refer to the [module changes](https://docs.python.org/3/whatsnew/3.10.html#distutils-deprecated) section for more information.
  * Non-integer arguments to [`random.randrange()`](https://docs.python.org/3/library/random.html#random.randrange "random.randrange") are deprecated. The [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is deprecated in favor of a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError"). (Contributed by Serhiy Storchaka and Raymond Hettinger in [bpo-37319](https://bugs.python.org/issue?@action=redirect&bpo=37319).)
  * The various `load_module()` methods of [`importlib`](https://docs.python.org/3/library/importlib.html#module-importlib "importlib: The implementation of the import machinery.") have been documented as deprecated since Python 3.6, but will now also trigger a [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning"). Use [`exec_module()`](https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.exec_module "importlib.abc.Loader.exec_module") instead. (Contributed by Brett Cannon in [bpo-26131](https://bugs.python.org/issue?@action=redirect&bpo=26131).)
  * `zimport.zipimporter.load_module()` has been deprecated in preference for [`exec_module()`](https://docs.python.org/3/library/zipimport.html#zipimport.zipimporter.exec_module "zipimport.zipimporter.exec_module"). (Contributed by Brett Cannon in [bpo-26131](https://bugs.python.org/issue?@action=redirect&bpo=26131).)
  * The use of [`load_module()`](https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.load_module "importlib.abc.Loader.load_module") by the import system now triggers an [`ImportWarning`](https://docs.python.org/3/library/exceptions.html#ImportWarning "ImportWarning") as [`exec_module()`](https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.exec_module "importlib.abc.Loader.exec_module") is preferred. (Contributed by Brett Cannon in [bpo-26131](https://bugs.python.org/issue?@action=redirect&bpo=26131).)
  * The use of `importlib.abc.MetaPathFinder.find_module()` and `importlib.abc.PathEntryFinder.find_module()` by the import system now trigger an [`ImportWarning`](https://docs.python.org/3/library/exceptions.html#ImportWar