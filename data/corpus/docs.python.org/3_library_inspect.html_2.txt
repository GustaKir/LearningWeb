Title: Local Variables and State in Python Functions, Generators, and Coroutines
URL: https://docs.python.org/3/library/inspect.html
Summary: This section describes various attributes related to local variables and the state of functions, generators, and coroutines in Python, including the number of local variables, stack size, names, and information on whether they are currently running, along with their associated code and frame.
---

nction locals  
| co_nlocals | number of local variables  
| co_stacksize | virtual machine stack space required  
| co_varnames | tuple of names of arguments and local variables  
generator | __name__ | name  
| __qualname__ | qualified name  
| gi_frame | frame  
| gi_running | is the generator running?  
| gi_code | code  
| gi_yieldfrom | object being iterated by `yield from`, or `None`  
async generator | __name__ | name  
| __qualname__ | qualified name  
| ag_await | object being awaited on, or `None`  
| ag_frame | frame  
| ag_running | is the generator running?  
| ag_code | code  
coroutine | __name__ | name  
| __qualname__ | qualified name  
| cr_await | object being awaited on, or `None`  
| cr_frame | frame  
| cr_running | is the coroutine running?  
| cr_code | code  
| cr_origin | where coroutine was created, or `None`. See [`sys.set_coroutine_origin_tracking_depth()`](https://docs.python.org/3/library/sys.html#sys.set_coroutine_origin_tracking_depth "sys.set_coroutine_origin_tracking_depth")  
builtin | __doc__ | documentation string  
| __name__ | original name of this function or method  
| __qualname__ | qualified name  
| __self__ | instance to which a method is bound, or `None`  
Changed in version 3.5: Add `__qualname__` and `gi_yieldfrom` attributes to generators.
The `__name__` attribute of generators is now set from the function name, instead of the code name, and it can now be modified.
Changed in version 3.7: Add `cr_origin` attribute to coroutines.
Changed in version 3.10: Add `__builtins__` attribute to functions. 

inspect.getmembers(_object_[, _predicate_])[¶](https://docs.python.org/3/library/inspect.html#inspect.getmembers "Link to this definition")
    
Return all the members of an object in a list of `(name, value)` pairs sorted by name. If the optional _predicate_ argument—which will be called with the `value` object of each member—is supplied, only members for which the predicate returns a true value are included.
Note
[`getmembers()`](https://docs.python.org/3/library/inspect.html#inspect.getmembers "inspect.getmembers") will only return class attributes defined in the metaclass when the argument is a class and those attributes have been listed in the metaclass’ custom [`__dir__()`](https://docs.python.org/3/reference/datamodel.html#object.__dir__ "object.__dir__"). 

inspect.getmembers_static(_object_[, _predicate_])[¶](https://docs.python.org/3/library/inspect.html#inspect.getmembers_static "Link to this definition")
    
Return all the members of an object in a list of `(name, value)` pairs sorted by name without triggering dynamic lookup via the descriptor protocol, __getattr__ or __getattribute__. Optionally, only return members that satisfy a given predicate.
Note
[`getmembers_static()`](https://docs.python.org/3/library/inspect.html#inspect.getmembers_static "inspect.getmembers_static") may not be able to retrieve all members that getmembers can fetch (like dynamically created attributes) and may find members that getmembers can’t (like descriptors that raise AttributeError). It can also return descriptor objects instead of instance members in some cases.
Added in version 3.11. 

inspect.getmodulename(_path_)[¶](https://docs.python.org/3/library/inspect.html#inspect.getmodulename "Link to this definition")
    
Return the name of the module named by the file _path_ , without including the names of enclosing packages. The file extension is checked against all of the entries in [`importlib.machinery.all_suffixes()`](https://docs.python.org/3/library/importlib.html#importlib.machinery.all_suffixes "importlib.machinery.all_suffixes"). If it matches, the final path component is returned with the extension removed. Otherwise, `None` is returned.
Note that this function _only_ returns a meaningful name for actual Python modules - paths that potentially refer to Python packages will still return `None`.
Changed in version 3.3: The function is based directly on [`importlib`](https://docs.python.org/3/library/importlib.html#module-importlib "importlib: The implementation of the import machinery."). 

inspect.ismodule(_object_)[¶](https://docs.python.org/3/library/inspect.html#inspect.ismodule "Link to this definition")
    
Return `True` if the object is a module. 

inspect.isclass(_object_)[¶](https://docs.python.org/3/library/inspect.html#inspect.isclass "Link to this definition")
    
Return `True` if the object is a class, whether built-in or created in Python code. 

inspect.ismethod(_object_)[¶](https://docs.python.org/3/library/inspect.html#inspect.ismethod "Link to this definition")
    
Return `True` if the object is a bound method written in Python. 

inspect.isfunction(_object_)[¶](https://docs.python.org/3/library/inspect.html#inspect.isfunction "Link to this definition")
    
Return `True` if the object is a Python function, which includes functions created by a [lambda](https://docs.python.org/3/glossary.html#term-lambda) expression.