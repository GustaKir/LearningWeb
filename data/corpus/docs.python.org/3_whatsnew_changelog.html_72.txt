Title: Python 3 Enhancements - Pathlib Performance Improvements
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This document chunk outlines performance enhancements to Python's `pathlib` module, including speed improvements for `Path.glob()`, `Path.iterdir()`, and `Path.walk()` methods. Key changes involve reducing unnecessary directory scans and using `os.scandir()` to optimize operations.
---

See <https://discuss.python.org/t/pep-734-multiple-interpreters-in-the-stdlib/41147/26>.
  * [gh-115060](https://github.com/python/cpython/issues/115060): Speed up [`pathlib.Path.glob()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.glob "pathlib.Path.glob") by not scanning directories for non-wildcard pattern segments.
  * [gh-117727](https://github.com/python/cpython/issues/117727): Speed up [`pathlib.Path.iterdir()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.iterdir "pathlib.Path.iterdir") by using [`os.scandir()`](https://docs.python.org/3/library/os.html#os.scandir "os.scandir") internally.
  * [gh-117586](https://github.com/python/cpython/issues/117586): Speed up [`pathlib.Path.walk()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.walk "pathlib.Path.walk") by working with strings internally.
  * [gh-117722](https://github.com/python/cpython/issues/117722): Change the new multi-separator support in [`asyncio.StreamReader.readuntil()`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamReader.readuntil "asyncio.StreamReader.readuntil") to only accept tuples of separators rather than arbitrary iterables.
  * [gh-117692](https://github.com/python/cpython/issues/117692): Fixes a bug when [`doctest.DocTestFinder`](https://docs.python.org/3/library/doctest.html#doctest.DocTestFinder "doctest.DocTestFinder") was failing on wrapped `builtin_function_or_method`.
  * [gh-117348](https://github.com/python/cpython/issues/117348): Largely restored import time performance of configparser by avoiding dataclasses.
  * [gh-117641](https://github.com/python/cpython/issues/117641): Speedup [`os.path.commonpath()`](https://docs.python.org/3/library/os.path.html#os.path.commonpath "os.path.commonpath") on Unix.
  * [gh-117663](https://github.com/python/cpython/issues/117663): Fix `_simple_enum` to detect aliases when multiple arguments are present but only one is the member value.
  * [gh-117636](https://github.com/python/cpython/issues/117636): Speedup [`os.path.join()`](https://docs.python.org/3/library/os.path.html#os.path.join "os.path.join").
  * [gh-117618](https://github.com/python/cpython/issues/117618): Support `package.module` as `filename` for `break` command of [`pdb`](https://docs.python.org/3/library/pdb.html#module-pdb "pdb: The Python debugger for interactive interpreters.")
  * [gh-102247](https://github.com/python/cpython/issues/102247): the status codes enum with constants in http.HTTPStatus are updated to include the names from RFC9110. This RFC includes some HTTP statuses previously only used for WEBDAV and assigns more generic names to them.
The old constants are preserved for backwards compatibility.
  * [gh-117607](https://github.com/python/cpython/issues/117607): Speedup [`os.path.relpath()`](https://docs.python.org/3/library/os.path.html#os.path.relpath "os.path.relpath").
  * [gh-117586](https://github.com/python/cpython/issues/117586): Speed up [`pathlib.Path.glob()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.glob "pathlib.Path.glob") by working with strings internally.
  * [gh-117225](https://github.com/python/cpython/issues/117225): Add colour to doctest output. Patch by Hugo van Kemenade.
  * [gh-117566](https://github.com/python/cpython/issues/117566): [`ipaddress.IPv6Address.is_loopback()`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Address.is_loopback "ipaddress.IPv6Address.is_loopback") will now return `True` for IPv4-mapped loopback addresses, i.e. addresses in the `::ffff:127.0.0.0/104` address space.
  * [gh-117546](https://github.com/python/cpython/issues/117546): Fix issue where [`os.path.realpath()`](https://docs.python.org/3/library/os.path.html#os.path.realpath "os.path.realpath") stopped resolving symlinks after encountering a symlink loop on POSIX.
  * [gh-116720](https://github.com/python/cpython/issues/116720): Improved behavior of [`asyncio.TaskGroup`](https://docs.python.org/3/library/asyncio-task.html#asyncio.TaskGroup "asyncio.TaskGroup") when an external cancellation collides with an internal cancellation. For example, when two task groups are nested and both experience an exception in a child task simultaneously, it was possible that the outer task group would misbehave, because its internal cancellation was swallowed by the inner task group.
In the case where a task group is cancelled externally and also must raise an [`ExceptionGroup`](https://docs.python.org/3/library/exceptions.html#ExceptionGroup "ExceptionGroup"), it will now call the parent taskâ€™s [`cancel()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.cancel "asyncio.Task.cancel") method.