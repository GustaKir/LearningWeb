Title: String Methods in Python 3.9
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This documentation chunk covers the string method `str.replace()` introduced in Python 3.9, which allows replacing substrings in a string, with an optional count of occurrences to replace. It also mentions changes in version 3.13 where the count can be specified as a keyword argument. Additionally, it describes `str.rfind()` and `str.rindex()`, which are used to find the highest index of a substring within a specified range of the string, returning -1 if not found.
---

```

Added in version 3.9. 

str.replace(_old_ , _new_ , _count =-1_)[¶](https://docs.python.org/3/library/stdtypes.html#str.replace "Link to this definition")
    
Return a copy of the string with all occurrences of substring _old_ replaced by _new_. If _count_ is given, only the first _count_ occurrences are replaced. If _count_ is not specified or `-1`, then all occurrences are replaced.
Changed in version 3.13: _count_ is now supported as a keyword argument. 

str.rfind(_sub_[, _start_[, _end_]])[¶](https://docs.python.org/3/library/stdtypes.html#str.rfind "Link to this definition")
    
Return the highest index in the string where substring _sub_ is found, such that _sub_ is contained within `s[start:end]`. Optional arguments _start_ and _end_ are interpreted as in slice notation. Return `-1` on failure. 

str.rindex(_sub_[, _start_[, _end_]])[¶](https://docs.python.org/3/library/stdtypes.html#str.rindex "Link to this definition")
    
Like [`rfind()`](https://docs.python.org/3/library/stdtypes.html#str.rfind "str.rfind") but raises [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") when the substring _sub_ is not found. 

str.rjust(_width_[, _fillchar_])[¶](https://docs.python.org/3/library/stdtypes.html#str.rjust "Link to this definition")
    
Return the string right justified in a string of length _width_. Padding is done using the specified _fillchar_ (default is an ASCII space). The original string is returned if _width_ is less than or equal to `len(s)`. 

str.rpartition(_sep_)[¶](https://docs.python.org/3/library/stdtypes.html#str.rpartition "Link to this definition")
    
Split the string at the last occurrence of _sep_ , and return a 3-tuple containing the part before the separator, the separator itself, and the part after the separator. If the separator is not found, return a 3-tuple containing two empty strings, followed by the string itself. 

str.rsplit(_sep =None_, _maxsplit =-1_)[¶](https://docs.python.org/3/library/stdtypes.html#str.rsplit "Link to this definition")
    
Return a list of the words in the string, using _sep_ as the delimiter string. If _maxsplit_ is given, at most _maxsplit_ splits are done, the _rightmost_ ones. If _sep_ is not specified or `None`, any whitespace string is a separator. Except for splitting from the right, [`rsplit()`](https://docs.python.org/3/library/stdtypes.html#str.rsplit "str.rsplit") behaves like [`split()`](https://docs.python.org/3/library/stdtypes.html#str.split "str.split") which is described in detail below. 

str.rstrip([_chars_])[¶](https://docs.python.org/3/library/stdtypes.html#str.rstrip "Link to this definition")
    
Return a copy of the string with trailing characters removed. The _chars_ argument is a string specifying the set of characters to be removed. If omitted or `None`, the _chars_ argument defaults to removing whitespace. The _chars_ argument is not a suffix; rather, all combinations of its values are stripped:
>>>```
>>> '  spacious  '.rstrip()
'  spacious'
>>> 'mississippi'.rstrip('ipz')
'mississ'

```

See [`str.removesuffix()`](https://docs.python.org/3/library/stdtypes.html#str.removesuffix "str.removesuffix") for a method that will remove a single suffix string rather than all of a set of characters. For example:
>>>```
>>> 'Monty Python'.rstrip(' Python')
'M'
>>> 'Monty Python'.removesuffix(' Python')
'Monty'

```


str.split(_sep =None_, _maxsplit =-1_)[¶](https://docs.python.org/3/library/stdtypes.html#str.split "Link to this definition")
    
Return a list of the words in the string, using _sep_ as the delimiter string. If _maxsplit_ is given, at most _maxsplit_ splits are done (thus, the list will have at most `maxsplit+1` elements). If _maxsplit_ is not specified or `-1`, then there is no limit on the number of splits (all possible splits are made).
If _sep_ is given, consecutive delimiters are not grouped together and are deemed to delimit empty strings (for example, `'1,,2'.split(',')` returns `['1', '', '2']`). The _sep_ argument may consist of multiple characters as a single delimiter (to split with multiple delimiters, use [`re.split()`](https://docs.python.org/3/library/re.html#re.split "re.split")). Splitting an empty string with a specified separator returns `['']`.
For example:
>>>```
>>> '1,2,3'.split(',')
['1', '2', '3']
>>> '1,2,3'.split(',', maxsplit=1)
['1', '2,3']
>>> '1,2,,3,'.split(',')
['1', '2', '', '3', '']
>>> '1<>2<>3<4'.split('<>')
['1', '2', '3<4']

```

If _sep_ is not specified or is `None`, a different splitting algorithm is applied: runs of consecutive whitespace are regarded as a single separator, and the result will contain no empty strings at the start or end if the string has leading or trailing whitespace. Consequently, splitting an empty string or a string consisting of just whitespace with a `None` separator returns `[]`.
For example:
>>>