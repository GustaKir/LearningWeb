Title: Python Traceback Module Overview
URL: https://docs.python.org/3/library/traceback.html
Summary: The Python traceback module provides an interactive source code debugger with an API divided into module-level functions for basic exception inspection, and the `TracebackException` class along with its helper classes `StackSummary` and `FrameSummary` for flexible output generation and deferred formatting.
---

Module [`pdb`](https://docs.python.org/3/library/pdb.html#module-pdb "pdb: The Python debugger for interactive interpreters.")
    
Interactive source code debugger for Python programs.
The module’s API can be divided into two parts:
  * Module-level functions offering basic functionality, which are useful for interactive inspection of exceptions and tracebacks.
  * [`TracebackException`](https://docs.python.org/3/library/traceback.html#traceback.TracebackException "traceback.TracebackException") class and its helper classes [`StackSummary`](https://docs.python.org/3/library/traceback.html#traceback.StackSummary "traceback.StackSummary") and [`FrameSummary`](https://docs.python.org/3/library/traceback.html#traceback.FrameSummary "traceback.FrameSummary"). These offer both more flexibility in the output generated and the ability to store the information necessary for later formatting without holding references to actual exception and traceback objects.


## Module-Level Functions[¶](https://docs.python.org/3/library/traceback.html#module-level-functions "Link to this heading") 

traceback.print_tb(_tb_ , _limit =None_, _file =None_)[¶](https://docs.python.org/3/library/traceback.html#traceback.print_tb "Link to this definition")
    
Print up to _limit_ stack trace entries from [traceback object](https://docs.python.org/3/reference/datamodel.html#traceback-objects) _tb_ (starting from the caller’s frame) if _limit_ is positive. Otherwise, print the last `abs(limit)` entries. If _limit_ is omitted or `None`, all entries are printed. If _file_ is omitted or `None`, the output goes to [`sys.stderr`](https://docs.python.org/3/library/sys.html#sys.stderr "sys.stderr"); otherwise it should be an open [file](https://docs.python.org/3/glossary.html#term-file-object) or [file-like object](https://docs.python.org/3/glossary.html#term-file-like-object) to receive the output.
Note
The meaning of the _limit_ parameter is different than the meaning of [`sys.tracebacklimit`](https://docs.python.org/3/library/sys.html#sys.tracebacklimit "sys.tracebacklimit"). A negative _limit_ value corresponds to a positive value of `sys.tracebacklimit`, whereas the behaviour of a positive _limit_ value cannot be achieved with `sys.tracebacklimit`.
Changed in version 3.5: Added negative _limit_ support. 

traceback.print_exception(_exc_ , _/_ , [_value_ , _tb_ , ]_limit=None_ , _file=None_ , _chain=True_)[¶](https://docs.python.org/3/library/traceback.html#traceback.print_exception "Link to this definition")
    
Print exception information and stack trace entries from [traceback object](https://docs.python.org/3/reference/datamodel.html#traceback-objects) _tb_ to _file_. This differs from [`print_tb()`](https://docs.python.org/3/library/traceback.html#traceback.print_tb "traceback.print_tb") in the following ways:
  * if _tb_ is not `None`, it prints a header `Traceback (most recent call last):`
  * it prints the exception type and _value_ after the stack trace


  * if _type(value)_ is [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") and _value_ has the appropriate format, it prints the line where the syntax error occurred with a caret indicating the approximate position of the error.


Since Python 3.10, instead of passing _value_ and _tb_ , an exception object can be passed as the first argument. If _value_ and _tb_ are provided, the first argument is ignored in order to provide backwards compatibility.
The optional _limit_ argument has the same meaning as for [`print_tb()`](https://docs.python.org/3/library/traceback.html#traceback.print_tb "traceback.print_tb"). If _chain_ is true (the default), then chained exceptions (the [`__cause__`](https://docs.python.org/3/library/exceptions.html#BaseException.__cause__ "BaseException.__cause__") or [`__context__`](https://docs.python.org/3/library/exceptions.html#BaseException.__context__ "BaseException.__context__") attributes of the exception) will be printed as well, like the interpreter itself does when printing an unhandled exception.
Changed in version 3.5: The _etype_ argument is ignored and inferred from the type of _value_.
Changed in version 3.10: The _etype_ parameter has been renamed to _exc_ and is now positional-only. 

traceback.print_exc(_limit =None_, _file =None_, _chain =True_)[¶](https://docs.python.org/3/library/traceback.html#traceback.print_exc "Link to this definition")
    
This is a shorthand for `print_exception(sys.exception(), limit=limit, file=file, chain=chain)`. 

traceback.print_last(_limit =None_, _file =None_, _chain =True_)[¶](https://docs.python.org/3/library/traceback.html#traceback.print_last "Link to this definition")
    
This is a shorthand for `print_exception(sys.last_exc, limit=limit, file=file, chain=chain)`. In general it will work only after an exception has reached an interactive prompt (see [`sys.last_exc`](https://docs.python.org/3/library/sys.html#sys.last_exc "sys.last_exc")).