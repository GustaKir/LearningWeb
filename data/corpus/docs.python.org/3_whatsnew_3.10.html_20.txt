Title: What's New in Python 3.10
URL: https://docs.python.org/3/whatsnew/3.10.html
Summary: Python 3.10 introduces a new module-level variable in `urllib.parse` to control character removal for enhanced security against URL attacks. It also adds a `LexicalHandler` class to `xml.sax.handler`, improving XML processing capabilities. Additionally, new methods related to PEP 451 are introduced in the `zipimport` module.
---

r assemble them from components.") preventing such attacks. The removal characters are controlled by a new module level variable `urllib.parse._UNSAFE_URL_BYTES_TO_REMOVE`. (See [gh-88048](https://github.com/python/cpython/issues/88048))
### xml[¶](https://docs.python.org/3/whatsnew/3.10.html#xml "Link to this heading")
Add a [`LexicalHandler`](https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.LexicalHandler "xml.sax.handler.LexicalHandler") class to the [`xml.sax.handler`](https://docs.python.org/3/library/xml.sax.handler.html#module-xml.sax.handler "xml.sax.handler: Base classes for SAX event handlers.") module. (Contributed by Jonathan Gossage and Zackery Spytz in [bpo-35018](https://bugs.python.org/issue?@action=redirect&bpo=35018).)
### zipimport[¶](https://docs.python.org/3/whatsnew/3.10.html#zipimport "Link to this heading")
Add methods related to [**PEP 451**](https://peps.python.org/pep-0451/): [`find_spec()`](https://docs.python.org/3/library/zipimport.html#zipimport.zipimporter.find_spec "zipimport.zipimporter.find_spec"), [`zipimport.zipimporter.create_module()`](https://docs.python.org/3/library/zipimport.html#zipimport.zipimporter.create_module "zipimport.zipimporter.create_module"), and [`zipimport.zipimporter.exec_module()`](https://docs.python.org/3/library/zipimport.html#zipimport.zipimporter.exec_module "zipimport.zipimporter.exec_module"). (Contributed by Brett Cannon in [bpo-42131](https://bugs.python.org/issue?@action=redirect&bpo=42131).)
Add [`invalidate_caches()`](https://docs.python.org/3/library/zipimport.html#zipimport.zipimporter.invalidate_caches "zipimport.zipimporter.invalidate_caches") method. (Contributed by Desmond Cheong in [bpo-14678](https://bugs.python.org/issue?@action=redirect&bpo=14678).)
## Optimizations[¶](https://docs.python.org/3/whatsnew/3.10.html#optimizations "Link to this heading")
  * Constructors [`str()`](https://docs.python.org/3/library/stdtypes.html#str "str"), [`bytes()`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") and [`bytearray()`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") are now faster (around 30–40% for small objects). (Contributed by Serhiy Storchaka in [bpo-41334](https://bugs.python.org/issue?@action=redirect&bpo=41334).)
  * The [`runpy`](https://docs.python.org/3/library/runpy.html#module-runpy "runpy: Locate and run Python modules without importing them first.") module now imports fewer modules. The `python3 -m module-name` command startup time is 1.4x faster in average. On Linux, `python3 -I -m module-name` imports 69 modules on Python 3.9, whereas it only imports 51 modules (-18) on Python 3.10. (Contributed by Victor Stinner in [bpo-41006](https://bugs.python.org/issue?@action=redirect&bpo=41006) and [bpo-41718](https://bugs.python.org/issue?@action=redirect&bpo=41718).)
  * The `LOAD_ATTR` instruction now uses new “per opcode cache” mechanism. It is about 36% faster now for regular attributes and 44% faster for slots. (Contributed by Pablo Galindo and Yury Selivanov in [bpo-42093](https://bugs.python.org/issue?@action=redirect&bpo=42093) and Guido van Rossum in [bpo-42927](https://bugs.python.org/issue?@action=redirect&bpo=42927), based on ideas implemented originally in PyPy and MicroPython.)
  * When building Python with [`--enable-optimizations`](https://docs.python.org/3/using/configure.html#cmdoption-enable-optimizations) now `-fno-semantic-interposition` is added to both the compile and link line. This speeds builds of the Python interpreter created with [`--enable-shared`](https://docs.python.org/3/using/configure.html#cmdoption-enable-shared) with `gcc` by up to 30%. See [this article](https://developers.redhat.com/blog/2020/06/25/red-hat-enterprise-linux-8-2-brings-faster-python-3-8-run-speeds/) for more details. (Contributed by Victor Stinner and Pablo Galindo in [bpo-38980](https://bugs.python.org/issue?@action=redirect&bpo=38980).)
  * Use a new output buffer management code for [`bz2`](https://docs.python.org/3/library/bz2.html#module-bz2 "bz2: Interfaces for bzip2 compression and decompression.") / [`lzma`](https://docs.python.org/3/library/lzma.html#module-lzma "lzma: A Python wrapper for the liblzma compression library.") / [`zlib`](https://docs.python.org/3/library/zlib.html#module-zlib "zlib: Low-level interface to compression and decompression routines compatible with gzip.") modules, and add `.readall()` function to `_compression.DecompressReader` class. bz2 decompression is now 1.09x ~ 1.17x faster, lzma decompression 1.20x ~ 1.32x faster, `GzipFile.read(-1)` 1.11x ~ 1.18x faster. (Contributed by Ma Lin, reviewed by Gregory P. Smith, in [bpo-41486](https://bugs.python.org/issue?@action=redirect&bpo=41486))
  * When using stringized annotations, annotations dicts for functions are no longer created when the function is created.