Title: Doctest Module Overview
URL: https://docs.python.org/3/library/doctest.html
Summary: This chunk describes a function from the doctest module that converts the doctests of an object into a Python script. It outlines the use of the function `doctest.testsource(module, name)`, detailing the required parameters and expected output, which is the object's docstring formatted as a script.
---

```
# Set x and y to 1 and 2.
x, y = 1, 2
#
# Print their sum:
print(x+y)
# Expected:
## 3

```

This function is used internally by other functions (see below), but can also be useful when you want to transform an interactive Python session into a Python script. 

doctest.testsource(_module_ , _name_)[¶](https://docs.python.org/3/library/doctest.html#doctest.testsource "Link to this definition")
    
Convert the doctest for an object to a script.
Argument _module_ is a module object, or dotted name of a module, containing the object whose doctests are of interest. Argument _name_ is the name (within the module) of the object with the doctests of interest. The result is a string, containing the object’s docstring converted to a Python script, as described for [`script_from_examples()`](https://docs.python.org/3/library/doctest.html#doctest.script_from_examples "doctest.script_from_examples") above. For example, if module `a.py` contains a top-level function `f()`, then
```
importa,doctest
print(doctest.testsource(a, "a.f"))

```

prints a script version of function `f()`’s docstring, with doctests converted to code, and the rest placed in comments. 

doctest.debug(_module_ , _name_ , _pm =False_)[¶](https://docs.python.org/3/library/doctest.html#doctest.debug "Link to this definition")
    
Debug the doctests for an object.
The _module_ and _name_ arguments are the same as for function [`testsource()`](https://docs.python.org/3/library/doctest.html#doctest.testsource "doctest.testsource") above. The synthesized Python script for the named object’s docstring is written to a temporary file, and then that file is run under the control of the Python debugger, [`pdb`](https://docs.python.org/3/library/pdb.html#module-pdb "pdb: The Python debugger for interactive interpreters.").
A shallow copy of `module.__dict__` is used for both local and global execution context.
Optional argument _pm_ controls whether post-mortem debugging is used. If _pm_ has a true value, the script file is run directly, and the debugger gets involved only if the script terminates via raising an unhandled exception. If it does, then post-mortem debugging is invoked, via [`pdb.post_mortem()`](https://docs.python.org/3/library/pdb.html#pdb.post_mortem "pdb.post_mortem"), passing the traceback object from the unhandled exception. If _pm_ is not specified, or is false, the script is run under the debugger from the start, via passing an appropriate [`exec()`](https://docs.python.org/3/library/functions.html#exec "exec") call to [`pdb.run()`](https://docs.python.org/3/library/pdb.html#pdb.run "pdb.run"). 

doctest.debug_src(_src_ , _pm =False_, _globs =None_)[¶](https://docs.python.org/3/library/doctest.html#doctest.debug_src "Link to this definition")
    
Debug the doctests in a string.
This is like function [`debug()`](https://docs.python.org/3/library/doctest.html#doctest.debug "doctest.debug") above, except that a string containing doctest examples is specified directly, via the _src_ argument.
Optional argument _pm_ has the same meaning as in function [`debug()`](https://docs.python.org/3/library/doctest.html#doctest.debug "doctest.debug") above.
Optional argument _globs_ gives a dictionary to use as both local and global execution context. If not specified, or `None`, an empty dictionary is used. If specified, a shallow copy of the dictionary is used.
The [`DebugRunner`](https://docs.python.org/3/library/doctest.html#doctest.DebugRunner "doctest.DebugRunner") class, and the special exceptions it may raise, are of most interest to testing framework authors, and will only be sketched here. See the source code, and especially [`DebugRunner`](https://docs.python.org/3/library/doctest.html#doctest.DebugRunner "doctest.DebugRunner")’s docstring (which is a doctest!) for more details: