Title: Python C API - System Functions
URL: https://docs.python.org/3/c-api/sys.html
Summary: This documentation chunk describes two functions in the Python C API: `PySys_ResetWarnOptions`, which resets `sys.warnoptions` to an empty list and is deprecated since version 3.13, and `PySys_WriteStdout`, which writes formatted output to `sys.stdout`. The former will be removed in version 3.15.
---

voidPySys_ResetWarnOptions()[¶](https://docs.python.org/3/c-api/sys.html#c.PySys_ResetWarnOptions "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Reset [`sys.warnoptions`](https://docs.python.org/3/library/sys.html#sys.warnoptions "sys.warnoptions") to an empty list. This function may be called prior to [`Py_Initialize()`](https://docs.python.org/3/c-api/init.html#c.Py_Initialize "Py_Initialize").
Deprecated since version 3.13, will be removed in version 3.15: Clear [`sys.warnoptions`](https://docs.python.org/3/library/sys.html#sys.warnoptions "sys.warnoptions") and `warnings.filters` instead. 

voidPySys_WriteStdout(constchar*format, ...)[¶](https://docs.python.org/3/c-api/sys.html#c.PySys_WriteStdout "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Write the output string described by _format_ to [`sys.stdout`](https://docs.python.org/3/library/sys.html#sys.stdout "sys.stdout"). No exceptions are raised, even if truncation occurs (see below).
_format_ should limit the total size of the formatted output string to 1000 bytes or less – after 1000 bytes, the output string is truncated. In particular, this means that no unrestricted “%s” formats should occur; these should be limited using “%.<N>s” where <N> is a decimal number calculated so that <N> plus the maximum size of other formatted text does not exceed 1000 bytes. Also watch out for “%f”, which can print hundreds of digits for very large numbers.
If a problem occurs, or [`sys.stdout`](https://docs.python.org/3/library/sys.html#sys.stdout "sys.stdout") is unset, the formatted message is written to the real (C level) _stdout_. 

voidPySys_WriteStderr(constchar*format, ...)[¶](https://docs.python.org/3/c-api/sys.html#c.PySys_WriteStderr "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
As [`PySys_WriteStdout()`](https://docs.python.org/3/c-api/sys.html#c.PySys_WriteStdout "PySys_WriteStdout"), but write to [`sys.stderr`](https://docs.python.org/3/library/sys.html#sys.stderr "sys.stderr") or _stderr_ instead. 

voidPySys_FormatStdout(constchar*format, ...)[¶](https://docs.python.org/3/c-api/sys.html#c.PySys_FormatStdout "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Function similar to PySys_WriteStdout() but format the message using [`PyUnicode_FromFormatV()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FromFormatV "PyUnicode_FromFormatV") and don’t truncate the message to an arbitrary length.
Added in version 3.2. 

voidPySys_FormatStderr(constchar*format, ...)[¶](https://docs.python.org/3/c-api/sys.html#c.PySys_FormatStderr "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
As [`PySys_FormatStdout()`](https://docs.python.org/3/c-api/sys.html#c.PySys_FormatStdout "PySys_FormatStdout"), but write to [`sys.stderr`](https://docs.python.org/3/library/sys.html#sys.stderr "sys.stderr") or _stderr_ instead.
Added in version 3.2. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PySys_GetXOptions()[¶](https://docs.python.org/3/c-api/sys.html#c.PySys_GetXOptions "Link to this definition")
    _Return value: Borrowed reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.7._
Return the current dictionary of [`-X`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) options, similarly to [`sys._xoptions`](https://docs.python.org/3/library/sys.html#sys._xoptions "sys._xoptions"). On error, `NULL` is returned and an exception is set.
Added in version 3.2.