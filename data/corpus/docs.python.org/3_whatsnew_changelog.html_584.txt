Title: C API Changes Overview
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section highlights several updates to the C API, including changes to Py_Initialize() behavior regarding memory allocators, the exclusion of the undocumented OrderedDict C API, relocation of the pygetopt.h header to internal, and modifications to Py_SetProgramName() and Py_SetPythonHome() to accept const wchar * arguments.
---

### C API[¶](https://docs.python.org/3/whatsnew/changelog.html#id543 "Link to this heading")
  * [bpo-32030](https://bugs.python.org/issue?@action=redirect&bpo=32030): Py_Initialize() doesn’t reset the memory allocators to default if the `PYTHONMALLOC` environment variable is not set.
  * [bpo-29084](https://bugs.python.org/issue?@action=redirect&bpo=29084): Undocumented C API for OrderedDict has been excluded from the limited C API. It was added by mistake and actually never worked in the limited C API.
  * [bpo-32264](https://bugs.python.org/issue?@action=redirect&bpo=32264): Moved the pygetopt.h header into internal/, since it has no public APIs.
  * [bpo-32241](https://bugs.python.org/issue?@action=redirect&bpo=32241): `Py_SetProgramName()` and `Py_SetPythonHome()` now take the `const wchar *` arguments instead of `wchar *`.


## Python 3.7.0 alpha 3[¶](https://docs.python.org/3/whatsnew/changelog.html#python-3-7-0-alpha-3 "Link to this heading")
_Release date: 2017-12-05_
### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id544 "Link to this heading")
  * [bpo-32176](https://bugs.python.org/issue?@action=redirect&bpo=32176): co_flags.CO_NOFREE is now always set correctly by the code object constructor based on freevars and cellvars, rather than needing to be set correctly by the caller. This ensures it will be cleared automatically when additional cell references are injected into a modified code object and function.
  * [bpo-10544](https://bugs.python.org/issue?@action=redirect&bpo=10544): Yield expressions are now deprecated in comprehensions and generator expressions. They are still permitted in the definition of the outermost iterable, as that is evaluated directly in the enclosing scope.
  * [bpo-32137](https://bugs.python.org/issue?@action=redirect&bpo=32137): The repr of deeply nested dict now raises a RecursionError instead of crashing due to a stack overflow.
  * [bpo-32096](https://bugs.python.org/issue?@action=redirect&bpo=32096): Revert memory allocator changes in the C API: move structures back from _PyRuntime to Objects/obmalloc.c. The memory allocators are once again initialized statically, and so PyMem_RawMalloc() and Py_DecodeLocale() can be called before _PyRuntime_Initialize().
  * [bpo-32043](https://bugs.python.org/issue?@action=redirect&bpo=32043): Add a new “developer mode”: new “-X dev” command line option to enable debug checks at runtime.
  * [bpo-32023](https://bugs.python.org/issue?@action=redirect&bpo=32023): SyntaxError is now correctly raised when a generator expression without parenthesis is used instead of an inheritance list in a class definition. The duplication of the parentheses can be omitted only on calls.
  * [bpo-32012](https://bugs.python.org/issue?@action=redirect&bpo=32012): SyntaxError is now correctly raised when a generator expression without parenthesis is passed as an argument, but followed by a trailing comma. A generator expression always needs to be directly inside a set of parentheses and cannot have a comma on either side.
  * [bpo-28180](https://bugs.python.org/issue?@action=redirect&bpo=28180): A new internal `_Py_SetLocaleFromEnv(category)` helper function has been added in order to improve the consistency of behaviour across different `libc` implementations (e.g. Android doesn’t support setting the locale from the environment by default).
  * [bpo-31949](https://bugs.python.org/issue?@action=redirect&bpo=31949): Fixed several issues in printing tracebacks (PyTraceBack_Print()). Setting sys.tracebacklimit to 0 or less now suppresses printing tracebacks. Setting sys.tracebacklimit to None now causes using the default limit. Setting sys.tracebacklimit to an integer larger than LONG_MAX now means using the limit LONG_MAX rather than the default limit. Fixed integer overflows in the case of more than `2**31` traceback items on Windows. Fixed output errors handling.
  * [bpo-30696](https://bugs.python.org/issue?@action=redirect&bpo=30696): Fix the interactive interpreter looping endlessly when no memory.
  * [bpo-20047](https://bugs.python.org/issue?@action=redirect&bpo=20047): Bytearray methods partition() and rpartition() now accept only bytes-like objects as separator, as documented. In particular they now raise TypeError rather of returning a bogus result when an integer is passed as a separator.
  * [bpo-21720](https://bugs.python.org/issue?@action=redirect&bpo=21720): BytesWarning no longer emitted when the _fromlist_ argument of `__import__()` or the `__all__` attribute of the module contain bytes instances.
  * [bpo-31845](https://bugs.python.org/issue?@action=redirect&bpo=31845): Environment variables are once more read correctly at interpreter startup.
  * [bpo-28936](https://bugs.python.org/issue?@action=redirect&bpo=28936): Ensure that lexically first syntax error involving a parameter and `global` or `nonlocal` is detected first at a given scope. Patch by Ivan Levkivskyi.
  * [bpo-31825](https://bugs.python.org/i