Title: Reading and Writing Files with Pathlib
URL: https://docs.python.org/3/library/pathlib.html
Summary: This section introduces file handling using the Pathlib library in Python 3.5. It explains how to open files using the `Path.open()` method and read their contents as strings with `Path.read_text()`, showcasing examples for both methods.
---

```

Added in version 3.5.
### Reading and writing files[¶](https://docs.python.org/3/library/pathlib.html#reading-and-writing-files "Link to this heading") 

Path.open(_mode ='r'_, _buffering =-1_, _encoding =None_, _errors =None_, _newline =None_)[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.open "Link to this definition")
    
Open the file pointed to by the path, like the built-in [`open()`](https://docs.python.org/3/library/functions.html#open "open") function does:
>>>```
>>> p = Path('setup.py')
>>> with p.open() as f:
...   f.readline()
...
'#!/usr/bin/env python3\n'

```


Path.read_text(_encoding =None_, _errors =None_, _newline =None_)[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.read_text "Link to this definition")
    
Return the decoded contents of the pointed-to file as a string:
>>>```
>>> p = Path('my_text_file')
>>> p.write_text('Text file contents')
18
>>> p.read_text()
'Text file contents'

```

The file is opened and then closed. The optional parameters have the same meaning as in [`open()`](https://docs.python.org/3/library/functions.html#open "open").
Added in version 3.5.
Changed in version 3.13: The _newline_ parameter was added. 

Path.read_bytes()[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.read_bytes "Link to this definition")
    
Return the binary contents of the pointed-to file as a bytes object:
>>>```
>>> p = Path('my_binary_file')
>>> p.write_bytes(b'Binary file contents')
20
>>> p.read_bytes()
b'Binary file contents'

```

Added in version 3.5. 

Path.write_text(_data_ , _encoding =None_, _errors =None_, _newline =None_)[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.write_text "Link to this definition")
    
Open the file pointed to in text mode, write _data_ to it, and close the file:
>>>```
>>> p = Path('my_text_file')
>>> p.write_text('Text file contents')
18
>>> p.read_text()
'Text file contents'

```

An existing file of the same name is overwritten. The optional parameters have the same meaning as in [`open()`](https://docs.python.org/3/library/functions.html#open "open").
Added in version 3.5.
Changed in version 3.10: The _newline_ parameter was added. 

Path.write_bytes(_data_)[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.write_bytes "Link to this definition")
    
Open the file pointed to in bytes mode, write _data_ to it, and close the file:
>>>```
>>> p = Path('my_binary_file')
>>> p.write_bytes(b'Binary file contents')
20
>>> p.read_bytes()
b'Binary file contents'

```

An existing file of the same name is overwritten.
Added in version 3.5.
### Reading directories[¶](https://docs.python.org/3/library/pathlib.html#reading-directories "Link to this heading") 

Path.iterdir()[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.iterdir "Link to this definition")
    
When the path points to a directory, yield path objects of the directory contents:
>>>```
>>> p = Path('docs')
>>> for child in p.iterdir(): child
...
PosixPath('docs/conf.py')
PosixPath('docs/_templates')
PosixPath('docs/make.bat')
PosixPath('docs/index.rst')
PosixPath('docs/_build')
PosixPath('docs/_static')
PosixPath('docs/Makefile')

```

The children are yielded in arbitrary order, and the special entries `'.'` and `'..'` are not included. If a file is removed from or added to the directory after creating the iterator, it is unspecified whether a path object for that file is included.
If the path is not a directory or otherwise inaccessible, [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") is raised. 

Path.glob(_pattern_ , _*_ , _case_sensitive =None_, _recurse_symlinks =False_)[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.glob "Link to this definition")
    
Glob the given relative _pattern_ in the directory represented by this path, yielding all matching files (of any kind):
>>>```
>>> sorted(Path('.').glob('*.py'))
[PosixPath('pathlib.py'), PosixPath('setup.py'), PosixPath('test_pathlib.py')]
>>> sorted(Path('.').glob('*/*.py'))
[PosixPath('docs/conf.py')]
>>> sorted(Path('.').glob('**/*.py'))
[PosixPath('build/lib/pathlib.py'),
 PosixPath('docs/conf.py'),
 PosixPath('pathlib.py'),
 PosixPath('setup.py'),
 PosixPath('test_pathlib.py')]