Title: METH_COEXIST: Handling Method Definitions in Python C API
URL: https://docs.python.org/3/c-api/structures.html
Summary: The METH_COEXIST flag allows a PyCFunction to coexist with existing method definitions by replacing them, whereas by default, Python skips duplicate definitions. This feature is particularly advantageous for optimized method calls in performance-critical code.
---

METH_COEXIST[¶](https://docs.python.org/3/c-api/structures.html#c.METH_COEXIST "Link to this definition")
    
The method will be loaded in place of existing definitions. Without _METH_COEXIST_ , the default is to skip repeated definitions. Since slot wrappers are loaded before the method table, the existence of a _sq_contains_ slot, for example, would generate a wrapped method named [`__contains__()`](https://docs.python.org/3/reference/datamodel.html#object.__contains__ "object.__contains__") and preclude the loading of a corresponding PyCFunction with the same name. With the flag defined, the PyCFunction will be loaded in place of the wrapper object and will co-exist with the slot. This is helpful because calls to PyCFunctions are optimized more than wrapper object calls. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyCMethod_New([PyMethodDef](https://docs.python.org/3/c-api/structures.html#c.PyMethodDef "PyMethodDef")*ml, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*self, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*module, [PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject")*cls)[¶](https://docs.python.org/3/c-api/structures.html#c.PyCMethod_New "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.9._
Turn _ml_ into a Python [callable](https://docs.python.org/3/glossary.html#term-callable) object. The caller must ensure that _ml_ outlives the [callable](https://docs.python.org/3/glossary.html#term-callable). Typically, _ml_ is defined as a static variable.
The _self_ parameter will be passed as the _self_ argument to the C function in `ml->ml_meth` when invoked. _self_ can be `NULL`.
The [callable](https://docs.python.org/3/glossary.html#term-callable) object’s `__module__` attribute can be set from the given _module_ argument. _module_ should be a Python string, which will be used as name of the module the function is defined in. If unavailable, it can be set to [`None`](https://docs.python.org/3/library/constants.html#None "None") or `NULL`.
See also
[`function.__module__`](https://docs.python.org/3/reference/datamodel.html#function.__module__ "function.__module__")
The _cls_ parameter will be passed as the _defining_class_ argument to the C function. Must be set if [`METH_METHOD`](https://docs.python.org/3/c-api/structures.html#c.METH_METHOD "METH_METHOD") is set on `ml->ml_flags`.
Added in version 3.9. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyCFunction_NewEx([PyMethodDef](https://docs.python.org/3/c-api/structures.html#c.PyMethodDef "PyMethodDef")*ml, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*self, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*module)[¶](https://docs.python.org/3/c-api/structures.html#c.PyCFunction_NewEx "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Equivalent to `PyCMethod_New(ml, self, module, NULL)`. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyCFunction_New([PyMethodDef](https://docs.python.org/3/c-api/structures.html#c.PyMethodDef "PyMethodDef")*ml, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*self)[¶](https://docs.python.org/3/c-api/structures.html#c.PyCFunction_New "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.4._
Equivalent to `PyCMethod_New(ml, self, NULL, NULL)`.
## Accessing attributes of extension types[¶](https://docs.python.org/3/c-api/structures.html#accessing-attributes-of-extension-types "Link to this heading") 

typePyMemberDef[¶](https://docs.python.org/3/c-api/structures.html#c.PyMemberDef "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) (including all members)._
Structure which describes an attribute of a type which corresponds to a C struct member. When defining a class, put a NULL-terminated array of these structures in the [`tp_members`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_members "PyTypeObject.tp_members") slot.
Its fields are, in order: 

constchar*name[¶](https://docs.python.org/3/c-api/structures.html#c.PyMemberDef.name "Link to this definition")
    
Name of the member. A NULL value marks the end of a `PyMemberDef[]` array.
The string should be static, no copy is made of it.