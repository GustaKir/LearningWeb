Title: New Features in the os Module
URL: https://docs.python.org/3/whatsnew/3.3.html
Summary: The os module introduces two new functions: pipe2(), enabling atomic pipe creation with O_CLOEXEC or O_NONBLOCK flags to prevent race conditions, and sendfile(), which allows efficient 'zero-copy' file transfer.
---

```

(Contributed by Giampaolo Rodolà in [bpo-9795](https://bugs.python.org/issue?@action=redirect&bpo=9795).)
### os[¶](https://docs.python.org/3/whatsnew/3.3.html#os "Link to this heading")
  * The [`os`](https://docs.python.org/3/library/os.html#module-os "os: Miscellaneous operating system interfaces.") module has a new [`pipe2()`](https://docs.python.org/3/library/os.html#os.pipe2 "os.pipe2") function that makes it possible to create a pipe with [`O_CLOEXEC`](https://docs.python.org/3/library/os.html#os.O_CLOEXEC "os.O_CLOEXEC") or [`O_NONBLOCK`](https://docs.python.org/3/library/os.html#os.O_NONBLOCK "os.O_NONBLOCK") flags set atomically. This is especially useful to avoid race conditions in multi-threaded programs.
  * The [`os`](https://docs.python.org/3/library/os.html#module-os "os: Miscellaneous operating system interfaces.") module has a new [`sendfile()`](https://docs.python.org/3/library/os.html#os.sendfile "os.sendfile") function which provides an efficient “zero-copy” way for copying data from one file (or socket) descriptor to another. The phrase “zero-copy” refers to the fact that all of the copying of data between the two descriptors is done entirely by the kernel, with no copying of data into userspace buffers. [`sendfile()`](https://docs.python.org/3/library/os.html#os.sendfile "os.sendfile") can be used to efficiently copy data from a file on disk to a network socket, e.g. for downloading a file.
(Patch submitted by Ross Lagerwall and Giampaolo Rodolà in [bpo-10882](https://bugs.python.org/issue?@action=redirect&bpo=10882).)
  * To avoid race conditions like symlink attacks and issues with temporary files and directories, it is more reliable (and also faster) to manipulate file descriptors instead of file names. Python 3.3 enhances existing functions and introduces new functions to work on file descriptors ([bpo-4761](https://bugs.python.org/issue?@action=redirect&bpo=4761), [bpo-10755](https://bugs.python.org/issue?@action=redirect&bpo=10755) and [bpo-14626](https://bugs.python.org/issue?@action=redirect&bpo=14626)).
    * The [`os`](https://docs.python.org/3/library/os.html#module-os "os: Miscellaneous operating system interfaces.") module has a new [`fwalk()`](https://docs.python.org/3/library/os.html#os.fwalk "os.fwalk") function similar to [`walk()`](https://docs.python.org/3/library/os.html#os.walk "os.walk") except that it also yields file descriptors referring to the directories visited. This is especially useful to avoid symlink races.
    * The following functions get new optional _dir_fd_ ([paths relative to directory descriptors](https://docs.python.org/3/library/os.html#dir-fd)) and/or _follow_symlinks_ ([not following symlinks](https://docs.python.org/3/library/os.html#follow-symlinks)): [`access()`](https://docs.python.org/3/library/os.html#os.access "os.access"), [`chflags()`](https://docs.python.org/3/library/os.html#os.chflags "os.chflags"), [`chmod()`](https://docs.python.org/3/library/os.html#os.chmod "os.chmod"), [`chown()`](https://docs.python.org/3/library/os.html#os.chown "os.chown"), [`link()`](https://docs.python.org/3/library/os.html#os.link "os.link"), [`lstat()`](https://docs.python.org/3/library/os.html#os.lstat "os.lstat"), [`mkdir()`](https://docs.python.org/3/library/os.html#os.mkdir "os.mkdir"), [`mkfifo()`](https://docs.python.org/3/library/os.html#os.mkfifo "os.mkfifo"), [`mknod()`](https://docs.python.org/3/library/os.html#os.mknod "os.mknod"), [`open()`](https://docs.python.org/3/library/os.html#os.open "os.open"), [`readlink()`](https://docs.python.org/3/library/os.html#os.readlink "os.readlink"), [`remove()`](https://docs.python.org/3/library/os.html#os.remove "os.remove"), [`rename()`](https://docs.python.org/3/library/os.html#os.rename "os.rename"), [`replace()`](https://docs.python.org/3/library/os.html#os.replace "os.replace"), [`rmdir()`](https://docs.python.org/3/library/os.html#os.rmdir "os.rmdir"), [`stat()`](https://docs.python.org/3/library/os.html#os.stat "os.stat"), [`symlink()`](https://docs.python.org/3/library/os.html#os.symlink "os.symlink"), [`unlink()`](https://docs.python.org/3/library/os.html#os.unlink "os.unlink"), [`utime()`](https://docs.python.org/3/library/os.html#os.utime "os.utime"). Platform support for using these parameters can be checked via the sets [`os.supports_dir_fd`](https://docs.python.org/3/library/os.html#os.supports_dir_fd "os.supports_dir_fd") and `os.supports_follows_symlinks`.
    * The following functions now support a file descriptor for their path argument: [`chdir()`](https://docs.python.org/3/library/os.html#os.chdir "os.chdir"), [`chmod()`](https://docs.python.org/3/library/os.html#os.chmod "os.chmod"), [`chown()`](https://docs.python.org/3/library/os.html#os.chown "os.chown"), [`execve()`](https://docs.python.org/3/library/os.html#os.execve "os.execve"), [`listdir()`](https://docs.python.org/3/library/os.html#os.listdir "os.listdir"), [`pathconf()`](https://docs.python.org/3/library/os.html#os.pa