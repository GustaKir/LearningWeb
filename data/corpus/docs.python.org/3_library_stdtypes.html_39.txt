Title: Bytes Formatting in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: The bytearray method does not modify the object in place but returns a new one. Python offers a bytes formatting method using the `%` operator, similar to C's `sprintf()`, but users must be cautious with tuples and dictionaries to avoid common formatting errors.
---

```

Note
The bytearray version of this method does _not_ operate in place - it always produces a new object, even if no changes were made.
### `printf`-style Bytes Formatting[Â¶](https://docs.python.org/3/library/stdtypes.html#printf-style-bytes-formatting "Link to this heading")
Note
The formatting operations described here exhibit a variety of quirks that lead to a number of common errors (such as failing to display tuples and dictionaries correctly). If the value being printed may be a tuple or dictionary, wrap it in a tuple.
Bytes objects (`bytes`/`bytearray`) have one unique built-in operation: the `%` operator (modulo). This is also known as the bytes _formatting_ or _interpolation_ operator. Given `format % values` (where _format_ is a bytes object), `%` conversion specifications in _format_ are replaced with zero or more elements of _values_. The effect is similar to using the `sprintf()` in the C language.
If _format_ requires a single argument, _values_ may be a single non-tuple object. [[5]](https://docs.python.org/3/library/stdtypes.html#id16) Otherwise, _values_ must be a tuple with exactly the number of items specified by the format bytes object, or a single mapping object (for example, a dictionary).
A conversion specifier contains two or more characters and has the following components, which must occur in this order:
  1. The `'%'` character, which marks the start of the specifier.
  2. Mapping key (optional), consisting of a parenthesised sequence of characters (for example, `(somename)`).
  3. Conversion flags (optional), which affect the result of some conversion types.
  4. Minimum field width (optional). If specified as an `'*'` (asterisk), the actual width is read from the next element of the tuple in _values_ , and the object to convert comes after the minimum field width and optional precision.
  5. Precision (optional), given as a `'.'` (dot) followed by the precision. If specified as `'*'` (an asterisk), the actual precision is read from the next element of the tuple in _values_ , and the value to convert comes after the precision.
  6. Length modifier (optional).
  7. Conversion type.


When the right argument is a dictionary (or other mapping type), then the formats in the bytes object _must_ include a parenthesised mapping key into that dictionary inserted immediately after the `'%'` character. The mapping key selects the value to be formatted from the mapping. For example:
>>>```
>>> print(b'%(language)s has %(number)03d quote types.' %
...    {b'language': b"Python", b"number": 2})
b'Python has 002 quote types.'