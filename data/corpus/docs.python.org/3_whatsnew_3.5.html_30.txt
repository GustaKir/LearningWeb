Title: Python 3.5 Changes Overview
URL: https://docs.python.org/3/whatsnew/3.5.html
Summary: This section highlights significant updates in Python 3.5, including the introduction of the 'x' mode in the ZipFile.open() method for exclusive file creation and various changes across multiple modules such as mmap, ossaudiodev, socket, ssl, and codecs.
---

tps://bugs.python.org/issue?@action=redirect&bpo=23252).)
The _mode_ argument of [`ZipFile.open()`](https://docs.python.org/3/library/zipfile.html#zipfile.ZipFile.open "zipfile.ZipFile.open") method now accepts `"x"` to request exclusive creation. (Contributed by Serhiy Storchaka in [bpo-21717](https://bugs.python.org/issue?@action=redirect&bpo=21717).)
## Other module-level changes[¶](https://docs.python.org/3/whatsnew/3.5.html#other-module-level-changes "Link to this heading")
Many functions in the [`mmap`](https://docs.python.org/3/library/mmap.html#module-mmap "mmap: Interface to memory-mapped files for Unix and Windows."), `ossaudiodev`, [`socket`](https://docs.python.org/3/library/socket.html#module-socket "socket: Low-level networking interface."), [`ssl`](https://docs.python.org/3/library/ssl.html#module-ssl "ssl: TLS/SSL wrapper for socket objects"), and [`codecs`](https://docs.python.org/3/library/codecs.html#module-codecs "codecs: Encode and decode data and streams.") modules now accept writable [bytes-like objects](https://docs.python.org/3/glossary.html#term-bytes-like-object). (Contributed by Serhiy Storchaka in [bpo-23001](https://bugs.python.org/issue?@action=redirect&bpo=23001).)
## Optimizations[¶](https://docs.python.org/3/whatsnew/3.5.html#optimizations "Link to this heading")
The [`os.walk()`](https://docs.python.org/3/library/os.html#os.walk "os.walk") function has been sped up by 3 to 5 times on POSIX systems, and by 7 to 20 times on Windows. This was done using the new [`os.scandir()`](https://docs.python.org/3/library/os.html#os.scandir "os.scandir") function, which exposes file information from the underlying `readdir` or `FindFirstFile`/`FindNextFile` system calls. (Contributed by Ben Hoyt with help from Victor Stinner in [bpo-23605](https://bugs.python.org/issue?@action=redirect&bpo=23605).)
Construction of `bytes(int)` (filled by zero bytes) is faster and uses less memory for large objects. `calloc()` is used instead of `malloc()` to allocate memory for these objects. (Contributed by Victor Stinner in [bpo-21233](https://bugs.python.org/issue?@action=redirect&bpo=21233).)
Some operations on [`ipaddress`](https://docs.python.org/3/library/ipaddress.html#module-ipaddress "ipaddress: IPv4/IPv6 manipulation library.") [`IPv4Network`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network "ipaddress.IPv4Network") and [`IPv6Network`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Network "ipaddress.IPv6Network") have been massively sped up, such as [`subnets()`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network.subnets "ipaddress.IPv4Network.subnets"), [`supernet()`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network.supernet "ipaddress.IPv4Network.supernet"), [`summarize_address_range()`](https://docs.python.org/3/library/ipaddress.html#ipaddress.summarize_address_range "ipaddress.summarize_address_range"), [`collapse_addresses()`](https://docs.python.org/3/library/ipaddress.html#ipaddress.collapse_addresses "ipaddress.collapse_addresses"). The speed up can range from 3 to 15 times. (Contributed by Antoine Pitrou, Michel Albert, and Markus in [bpo-21486](https://bugs.python.org/issue?@action=redirect&bpo=21486), [bpo-21487](https://bugs.python.org/issue?@action=redirect&bpo=21487), [bpo-20826](https://bugs.python.org/issue?@action=redirect&bpo=20826), [bpo-23266](https://bugs.python.org/issue?@action=redirect&bpo=23266).)
Pickling of [`ipaddress`](https://docs.python.org/3/library/ipaddress.html#module-ipaddress "ipaddress: IPv4/IPv6 manipulation library.") objects was optimized to produce significantly smaller output. (Contributed by Serhiy Storchaka in [bpo-23133](https://bugs.python.org/issue?@action=redirect&bpo=23133).)
Many operations on [`io.BytesIO`](https://docs.python.org/3/library/io.html#io.BytesIO "io.BytesIO") are now 50% to 100% faster. (Contributed by Serhiy Storchaka in [bpo-15381](https://bugs.python.org/issue?@action=redirect&bpo=15381) and David Wilson in [bpo-22003](https://bugs.python.org/issue?@action=redirect&bpo=22003).)
The [`marshal.dumps()`](https://docs.python.org/3/library/marshal.html#marshal.dumps "marshal.dumps") function is now faster: 65–85% with versions 3 and 4, 20–25% with versions 0 to 2 on typical data, and up to 5 times in best cases. (Contributed by Serhiy Storchaka in [bpo-20416](https://bugs.python.org/issue?@action=redirect&bpo=20416) and [bpo-23344](https://bugs.python.org/issue?@action=redirect&bpo=23344).)
The UTF-32 encoder is now 3 to 7 times faster. (Contributed by Serhiy Storchaka in [bpo-15027](https://bugs.python.org/issue?@action=redirect&bpo=15027).)
Regular expressions are now parsed up to 10% faster.