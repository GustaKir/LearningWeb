Title: Efficient File Copying in Python 3.8
URL: https://docs.python.org/3/whatsnew/3.8.html
Summary: Python 3.8 introduces 'fast-copy' functionality for file copying on Linux and macOS, allowing operations to occur within the kernel and improving efficiency. Windows benefits from a larger default buffer size and a memoryview-based copying variant. Speed increases are noted at approximately +26% on Linux, +50% on macOS, and +40% on Windows, with reduced CPU usage. Further details can be found in the Platform-dependent efficient copy operations section.
---

scalls on Linux and macOS in order to copy the file more efficiently. “fast-copy” means that the copying operation occurs within the kernel, avoiding the use of userspace buffers in Python as in “`outfd.write(infd.read())`”. On Windows [`shutil.copyfile()`](https://docs.python.org/3/library/shutil.html#shutil.copyfile "shutil.copyfile") uses a bigger default buffer size (1 MiB instead of 16 KiB) and a [`memoryview()`](https://docs.python.org/3/library/stdtypes.html#memoryview "memoryview")-based variant of [`shutil.copyfileobj()`](https://docs.python.org/3/library/shutil.html#shutil.copyfileobj "shutil.copyfileobj") is used. The speedup for copying a 512 MiB file within the same partition is about +26% on Linux, +50% on macOS and +40% on Windows. Also, much less CPU cycles are consumed. See [Platform-dependent efficient copy operations](https://docs.python.org/3/library/shutil.html#shutil-platform-dependent-efficient-copy-operations) section. (Contributed by Giampaolo Rodolà in [bpo-33671](https://bugs.python.org/issue?@action=redirect&bpo=33671).)
  * [`shutil.copytree()`](https://docs.python.org/3/library/shutil.html#shutil.copytree "shutil.copytree") uses [`os.scandir()`](https://docs.python.org/3/library/os.html#os.scandir "os.scandir") function and all copy functions depending from it use cached [`os.stat()`](https://docs.python.org/3/library/os.html#os.stat "os.stat") values. The speedup for copying a directory with 8000 files is around +9% on Linux, +20% on Windows and +30% on a Windows SMB share. Also the number of [`os.stat()`](https://docs.python.org/3/library/os.html#os.stat "os.stat") syscalls is reduced by 38% making [`shutil.copytree()`](https://docs.python.org/3/library/shutil.html#shutil.copytree "shutil.copytree") especially faster on network filesystems. (Contributed by Giampaolo Rodolà in [bpo-33695](https://bugs.python.org/issue?@action=redirect&bpo=33695).)
  * The default protocol in the [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "pickle: Convert Python objects to streams of bytes and back.") module is now Protocol 4, first introduced in Python 3.4. It offers better performance and smaller size compared to Protocol 3 available since Python 3.0.
  * Removed one [`Py_ssize_t`](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t") member from `PyGC_Head`. All GC tracked objects (e.g. tuple, list, dict) size is reduced 4 or 8 bytes. (Contributed by Inada Naoki in [bpo-33597](https://bugs.python.org/issue?@action=redirect&bpo=33597).)
  * [`uuid.UUID`](https://docs.python.org/3/library/uuid.html#uuid.UUID "uuid.UUID") now uses `__slots__` to reduce its memory footprint. (Contributed by Wouter Bolsterlee and Tal Einat in [bpo-30977](https://bugs.python.org/issue?@action=redirect&bpo=30977))
  * Improved performance of [`operator.itemgetter()`](https://docs.python.org/3/library/operator.html#operator.itemgetter "operator.itemgetter") by 33%. Optimized argument handling and added a fast path for the common case of a single non-negative integer index into a tuple (which is the typical use case in the standard library). (Contributed by Raymond Hettinger in [bpo-35664](https://bugs.python.org/issue?@action=redirect&bpo=35664).)
  * Sped-up field lookups in [`collections.namedtuple()`](https://docs.python.org/3/library/collections.html#collections.namedtuple "collections.namedtuple"). They are now more than two times faster, making them the fastest form of instance variable lookup in Python. (Contributed by Raymond Hettinger, Pablo Galindo, and Joe Jevnik, Serhiy Storchaka in [bpo-32492](https://bugs.python.org/issue?@action=redirect&bpo=32492).)
  * The [`list`](https://docs.python.org/3/library/stdtypes.html#list "list") constructor does not overallocate the internal item buffer if the input iterable has a known length (the input implements `__len__`). This makes the created list 12% smaller on average. (Contributed by Raymond Hettinger and Pablo Galindo in [bpo-33234](https://bugs.python.org/issue?@action=redirect&bpo=33234).)
  * Doubled the speed of class variable writes. When a non-dunder attribute was updated, there was an unnecessary call to update slots. (Contributed by Stefan Behnel, Pablo Galindo Salgado, Raymond Hettinger, Neil Schemenauer, and Serhiy Storchaka in [bpo-36012](https://bugs.python.org/issue?@action=redirect&bpo=36012).)
  * Reduced an overhead of converting arguments passed to many builtin functions and methods. This sped up calling some simple builtin functions and methods up to 20–50%. (Contributed by Serhiy Storchaka in [bpo-23867](https://bugs.python.org/issue?@action=redirect&bpo=23867), [bpo-35582](https://bugs.python.org/issue?@action=redirect&bpo=35582) and [bpo-36127](https://bugs.python.org/issue?@action=redirect&bpo=36127).)
  * `LOAD_GLOBAL` instruction now uses new “per opcode cache” mechanism. It is about 40% faster now.