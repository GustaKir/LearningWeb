Title: Python Change Log Updates
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: Recent patches include allowing the '_count_' argument in 'str.replace()' to be keyword-based, improving the error message for 'list.remove()', and stripping indents from docstrings which reduces 'pyc' file size by 5%. Additionally, changes were made to how empty format specifications in f-string expressions are parsed.
---

Patch by Pablo Galindo
  * [gh-106487](https://github.com/python/cpython/issues/106487): Allow the _count_ argument of [`str.replace()`](https://docs.python.org/3/library/stdtypes.html#str.replace "str.replace") to be a keyword. Patch by Hugo van Kemenade.
  * [gh-96844](https://github.com/python/cpython/issues/96844): Improve error message of `list.remove()`. Patch by Donghee Na.
  * [gh-81283](https://github.com/python/cpython/issues/81283): Compiler now strips indents from docstrings. It reduces `pyc` file size 5% when the module is heavily documented. This change affects to `__doc__` so tools like doctest will be affected.
  * [gh-106396](https://github.com/python/cpython/issues/106396): When the format specification of an f-string expression is empty, the parser now generates an empty [`ast.JoinedStr`](https://docs.python.org/3/library/ast.html#ast.JoinedStr "ast.JoinedStr") node for it instead of an one-element [`ast.JoinedStr`](https://docs.python.org/3/library/ast.html#ast.JoinedStr "ast.JoinedStr") with an empty string [`ast.Constant`](https://docs.python.org/3/library/ast.html#ast.Constant "ast.Constant").
  * [gh-100288](https://github.com/python/cpython/issues/100288): Specialize [`LOAD_ATTR`](https://docs.python.org/3/library/dis.html#opcode-LOAD_ATTR) for non-descriptors on the class. Adds `LOAD_ATTR_NONDESCRIPTOR_WITH_VALUES` and `LOAD_ATTR_NONDESCRIPTOR_NO_DICT`.
  * [gh-106008](https://github.com/python/cpython/issues/106008): Fix possible reference leaks when failing to optimize comparisons with [`None`](https://docs.python.org/3/library/constants.html#None "None") in the bytecode compiler.
  * [gh-106145](https://github.com/python/cpython/issues/106145): Make `end_lineno` and `end_col_offset` required on `type_param` ast nodes.
  * [gh-106213](https://github.com/python/cpython/issues/106213): Changed the way that Emscripten call trampolines work for compatibility with Wasm/JS Promise integration.
  * [gh-106182](https://github.com/python/cpython/issues/106182): [`sys.getfilesystemencoding()`](https://docs.python.org/3/library/sys.html#sys.getfilesystemencoding "sys.getfilesystemencoding") and [`sys.getfilesystemencodeerrors`](https://docs.python.org/3/library/sys.html#sys.getfilesystemencodeerrors "sys.getfilesystemencodeerrors") now return interned Unicode object.
  * [gh-106210](https://github.com/python/cpython/issues/106210): Removed Emscripten import trampoline as it was no longer necessary for Pyodide.
  * [gh-104584](https://github.com/python/cpython/issues/104584): Added a new, experimental, tracing optimizer and interpreter (a.k.a. “tier 2”). This currently pessimizes, so don’t use yet – this is infrastructure so we can experiment with optimizing passes. To enable it, pass `-Xuops` or set `PYTHONUOPS=1`. To get debug output, set `PYTHONUOPSDEBUG=N` where `N` is a debug level (0-4, where 0 is no debug output and 4 is excessively verbose).
  * [gh-105775](https://github.com/python/cpython/issues/105775): [`LOAD_CLOSURE`](https://docs.python.org/3/library/dis.html#opcode-LOAD_CLOSURE) is now a pseudo-op.
  * [gh-105730](https://github.com/python/cpython/issues/105730): Allow any callable other than type objects as the condition predicate in [`BaseExceptionGroup.split()`](https://docs.python.org/3/library/exceptions.html#BaseExceptionGroup.split "BaseExceptionGroup.split") and [`BaseExceptionGroup.subgroup()`](https://docs.python.org/3/library/exceptions.html#BaseExceptionGroup.subgroup "BaseExceptionGroup.subgroup").
  * [gh-105979](https://github.com/python/cpython/issues/105979): Fix crash in `_imp.get_frozen_object()` due to improper exception handling.
  * [gh-106003](https://github.com/python/cpython/issues/106003): Add a new [`TO_BOOL`](https://docs.python.org/3/library/dis.html#opcode-TO_BOOL) instruction, which performs boolean conversions for [`POP_JUMP_IF_TRUE`](https://docs.python.org/3/library/dis.html#opcode-POP_JUMP_IF_TRUE), [`POP_JUMP_IF_FALSE`](https://docs.python.org/3/library/dis.html#opcode-POP_JUMP_IF_FALSE), and [`UNARY_NOT`](https://docs.python.org/3/library/dis.html#opcode-UNARY_NOT) (which all expect exact [`bool`](https://docs.python.org/3/library/functions.html#bool "bool") values now). Also, modify the oparg of [`COMPARE_OP`](https://docs.python.org/3/library/dis.html#opcode-COMPARE_OP) to include an optional “boolean conversion” flag.
  * [gh-98931](https://github.com/python/cpython/issues/98931): Ensure custom [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") error messages are raised for invalid imports with multiple targets.