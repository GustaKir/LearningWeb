Title: Threading and Multiprocessing in Python
URL: https://docs.python.org/3/contents.html
Summary: This section of the documentation covers various threading objects such as RLock, Condition, Semaphore, Event, Timer, and Barrier objects, as well as their usage in conjunction with the 'with' statement. It also includes a reference to the 'multiprocessing' library for process-based parallelism.
---

reading.html#lock-objects)
        * [RLock Objects](https://docs.python.org/3/library/threading.html#rlock-objects)
        * [Condition Objects](https://docs.python.org/3/library/threading.html#condition-objects)
        * [Semaphore Objects](https://docs.python.org/3/library/threading.html#semaphore-objects)
          * [`Semaphore` Example](https://docs.python.org/3/library/threading.html#semaphore-example)
        * [Event Objects](https://docs.python.org/3/library/threading.html#event-objects)
        * [Timer Objects](https://docs.python.org/3/library/threading.html#timer-objects)
        * [Barrier Objects](https://docs.python.org/3/library/threading.html#barrier-objects)
        * [Using locks, conditions, and semaphores in the `with` statement](https://docs.python.org/3/library/threading.html#using-locks-conditions-and-semaphores-in-the-with-statement)
      * [`multiprocessing` — Process-based parallelism](https://docs.python.org/3/library/multiprocessing.html)
        * [Introduction](https://docs.python.org/3/library/multiprocessing.html#introduction)
          * [The `Process` class](https://docs.python.org/3/library/multiprocessing.html#the-process-class)
          * [Contexts and start methods](https://docs.python.org/3/library/multiprocessing.html#contexts-and-start-methods)
          * [Exchanging objects between processes](https://docs.python.org/3/library/multiprocessing.html#exchanging-objects-between-processes)
          * [Synchronization between processes](https://docs.python.org/3/library/multiprocessing.html#synchronization-between-processes)
          * [Sharing state between processes](https://docs.python.org/3/library/multiprocessing.html#sharing-state-between-processes)
          * [Using a pool of workers](https://docs.python.org/3/library/multiprocessing.html#using-a-pool-of-workers)
        * [Reference](https://docs.python.org/3/library/multiprocessing.html#reference)
          * [`Process` and exceptions](https://docs.python.org/3/library/multiprocessing.html#process-and-exceptions)
          * [Pipes and Queues](https://docs.python.org/3/library/multiprocessing.html#pipes-and-queues)
          * [Miscellaneous](https://docs.python.org/3/library/multiprocessing.html#miscellaneous)
          * [Connection Objects](https://docs.python.org/3/library/multiprocessing.html#connection-objects)
          * [Synchronization primitives](https://docs.python.org/3/library/multiprocessing.html#synchronization-primitives)
          * [Shared `ctypes` Objects](https://docs.python.org/3/library/multiprocessing.html#shared-ctypes-objects)
            * [The `multiprocessing.sharedctypes` module](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.sharedctypes)
          * [Managers](https://docs.python.org/3/library/multiprocessing.html#managers)
            * [Customized managers](https://docs.python.org/3/library/multiprocessing.html#customized-managers)
            * [Using a remote manager](https://docs.python.org/3/library/multiprocessing.html#using-a-remote-manager)
          * [Proxy Objects](https://docs.python.org/3/library/multiprocessing.html#proxy-objects)
            * [Cleanup](https://docs.python.org/3/library/multiprocessing.html#cleanup)
          * [Process Pools](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.pool)
          * [Listeners and Clients](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.connection)
            * [Address Formats](https://docs.python.org/3/library/multiprocessing.html#address-formats)
          * [Authentication keys](https://docs.python.org/3/library/multiprocessing.html#authentication-keys)
          * [Logging](https://docs.python.org/3/library/multiprocessing.html#logging)
          * [The `multiprocessing.dummy` module](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.dummy)
        * [Programming guidelines](https://docs.python.org/3/library/multiprocessing.html#programming-guidelines)
          * [All start methods](https://docs.python.org/3/library/multiprocessing.html#all-start-methods)
          * [The _spawn_ and _forkserver_ start methods](https://docs.python.org/3/library/multiprocessing.html#the-spawn-and-forkserver-start-methods)
        * [Examples](https://docs.python.org/3/library/multiprocessing.html#examples)
      * [`multiprocessing.shared_memory` — Shared memory for direct access across processes](https://docs.python.org/3/library/multiprocessing.shared_memory.html)
      * [The `concurrent` package](https://docs.python.org/3/library/concurrent.html)
      * [`concurrent.futures` — Launching parallel tasks](https://docs.python.org/3/library/concurrent.futures.html)
        * [Executor Objects](https://docs.python.org/3/library/concurrent.futures.html#executor-objects)
        * [ThreadPoolExecutor](https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor)
          * [ThreadPoolExecutor E