Title: ipaddress module: IPv6Address Constructor
URL: https://docs.python.org/3/library/ipaddress.html
Summary: Introduced in Python 3.9, the _ipaddress.IPv6Address_ class constructs an IPv6 address from a valid string. It accepts both exploded and compressed notations, representing the address through eight groups of hexadecimal digits separated by colons. An _AddressValueError_ is raised for invalid addresses, and the notation may optionally include a scope zone ID.
---

```

Added in version 3.9. 

_class_ ipaddress.IPv6Address(_address_)[Â¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Address "Link to this definition")
    
Construct an IPv6 address. An [`AddressValueError`](https://docs.python.org/3/library/ipaddress.html#ipaddress.AddressValueError "ipaddress.AddressValueError") is raised if _address_ is not a valid IPv6 address.
The following constitutes a valid IPv6 address:
  1. A string consisting of eight groups of four hexadecimal digits, each group representing 16 bits. The groups are separated by colons. This describes an _exploded_ (longhand) notation. The string can also be _compressed_ (shorthand notation) by various means. See [**RFC 4291**](https://datatracker.ietf.org/doc/html/rfc4291.html) for details. For example, `"0000:0000:0000:0000:0000:0abc:0007:0def"` can be compressed to `"::abc:7:def"`.
Optionally, the string may also have a scope zone ID, expressed with a suffix `%scope_id`. If present, the scope ID must be non-empty, and may not contain `%`. See [**RFC 4007**](https://datatracker.ietf.org/doc/html/rfc4007.html) for details. For example, `fe80::1234%1` might identify address `fe80::1234` on the first link of the node.
  2. An integer that fits into 128 bits.
  3. An integer packed into a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") object of length 16, big-endian.


>>>```
>>> ipaddress.IPv6Address('2001:db8::1000')
IPv6Address('2001:db8::1000')
>>> ipaddress.IPv6Address('ff02::5678%1')
IPv6Address('ff02::5678%1')