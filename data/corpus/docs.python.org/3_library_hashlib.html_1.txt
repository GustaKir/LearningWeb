Title: hashlib — Secure Hashes and Message Digests
URL: https://docs.python.org/3/library/hashlib.html
Summary: The `hashlib` module provides a unified interface for various hash algorithms, including FIPS secure hashes (SHA224, SHA256, SHA384, SHA512), the SHA-3 series, and legacy algorithms like SHA1 and MD5. For adler32 and crc32 functions, refer to the `zlib` module.
---

# `hashlib` — Secure hashes and message digests[¶](https://docs.python.org/3/library/hashlib.html#module-hashlib "Link to this heading")
**Source code:** [Lib/hashlib.py](https://github.com/python/cpython/tree/3.13/Lib/hashlib.py)
This module implements a common interface to many different hash algorithms. Included are the FIPS secure hash algorithms SHA224, SHA256, SHA384, SHA512, (defined in [the FIPS 180-4 standard](https://csrc.nist.gov/pubs/fips/180-4/upd1/final)), the SHA-3 series (defined in [the FIPS 202 standard](https://csrc.nist.gov/pubs/fips/202/final)) as well as the legacy algorithms SHA1 ([formerly part of FIPS](https://csrc.nist.gov/news/2023/decision-to-revise-fips-180-4)) and the MD5 algorithm (defined in internet [**RFC 1321**](https://datatracker.ietf.org/doc/html/rfc1321.html)).
Note
If you want the adler32 or crc32 hash functions, they are available in the [`zlib`](https://docs.python.org/3/library/zlib.html#module-zlib "zlib: Low-level interface to compression and decompression routines compatible with gzip.") module.
## Hash algorithms[¶](https://docs.python.org/3/library/hashlib.html#hash-algorithms "Link to this heading")
There is one constructor method named for each type of _hash_. All return a hash object with the same simple interface. For example: use [`sha256()`](https://docs.python.org/3/library/hashlib.html#hashlib.sha256 "hashlib.sha256") to create a SHA-256 hash object. You can now feed this object with [bytes-like objects](https://docs.python.org/3/glossary.html#term-bytes-like-object) (normally [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes")) using the [`update`](https://docs.python.org/3/library/hashlib.html#hashlib.hash.update "hashlib.hash.update") method. At any point you can ask it for the _digest_ of the concatenation of the data fed to it so far using the [`digest()`](https://docs.python.org/3/library/hashlib.html#hashlib.hash.digest "hashlib.hash.digest") or [`hexdigest()`](https://docs.python.org/3/library/hashlib.html#hashlib.hash.hexdigest "hashlib.hash.hexdigest") methods.
To allow multithreading, the Python [GIL](https://docs.python.org/3/glossary.html#term-GIL) is released while computing a hash supplied more than 2047 bytes of data at once in its constructor or [`.update`](https://docs.python.org/3/library/hashlib.html#hashlib.hash.update "hashlib.hash.update") method.
Constructors for hash algorithms that are always present in this module are [`sha1()`](https://docs.python.org/3/library/hashlib.html#hashlib.sha1 "hashlib.sha1"), [`sha224()`](https://docs.python.org/3/library/hashlib.html#hashlib.sha224 "hashlib.sha224"), [`sha256()`](https://docs.python.org/3/library/hashlib.html#hashlib.sha256 "hashlib.sha256"), [`sha384()`](https://docs.python.org/3/library/hashlib.html#hashlib.sha384 "hashlib.sha384"), [`sha512()`](https://docs.python.org/3/library/hashlib.html#hashlib.sha512 "hashlib.sha512"), [`sha3_224()`](https://docs.python.org/3/library/hashlib.html#hashlib.sha3_224 "hashlib.sha3_224"), [`sha3_256()`](https://docs.python.org/3/library/hashlib.html#hashlib.sha3_256 "hashlib.sha3_256"), [`sha3_384()`](https://docs.python.org/3/library/hashlib.html#hashlib.sha3_384 "hashlib.sha3_384"), [`sha3_512()`](https://docs.python.org/3/library/hashlib.html#hashlib.sha3_512 "hashlib.sha3_512"), [`shake_128()`](https://docs.python.org/3/library/hashlib.html#hashlib.shake_128 "hashlib.shake_128"), [`shake_256()`](https://docs.python.org/3/library/hashlib.html#hashlib.shake_256 "hashlib.shake_256"), [`blake2b()`](https://docs.python.org/3/library/hashlib.html#hashlib.blake2b "hashlib.blake2b"), and [`blake2s()`](https://docs.python.org/3/library/hashlib.html#hashlib.blake2s "hashlib.blake2s"). [`md5()`](https://docs.python.org/3/library/hashlib.html#hashlib.md5 "hashlib.md5") is normally available as well, though it may be missing or blocked if you are using a rare “FIPS compliant” build of Python. These correspond to [`algorithms_guaranteed`](https://docs.python.org/3/library/hashlib.html#hashlib.algorithms_guaranteed "hashlib.algorithms_guaranteed").
Additional algorithms may also be available if your Python distribution’s [`hashlib`](https://docs.python.org/3/library/hashlib.html#module-hashlib "hashlib: Secure hash and message digest algorithms.") was linked against a build of OpenSSL that provides others. Others _are not guaranteed available_ on all installations and will only be accessible by name via [`new()`](https://docs.python.org/3/library/hashlib.html#hashlib.new "hashlib.new"). See [`algorithms_available`](https://docs.python.org/3/library/hashlib.html#hashlib.algorithms_available "hashlib.algorithms_available").
Warning
Some algorithms have known hash collision weaknesses (including MD5 and SHA1). Refer to [Attacks on cryptographic hash algorithms](https://en.wikipedia.org/wiki/Cryptographic_hash_function#Attacks_on_cryptographic_hash_algorithms) and the [hashlib-seealso](https://docs.python.org/3/library/hashlib.html#has