Title: Logging in Python's Multiprocessing Module
URL: https://docs.python.org/3/library/multiprocessing.html
Summary: This section illustrates how to configure logging for processes in Python's multiprocessing module. It demonstrates logging warnings from a subprocess and shows the lifecycle of a multiprocessing manager, including its creation, operation, and shutdown procedure.
---

```
>>> importmultiprocessing,logging
>>> logger = multiprocessing.log_to_stderr()
>>> logger.setLevel(logging.INFO)
>>> logger.warning('doomed')
[WARNING/MainProcess] doomed
>>> m = multiprocessing.Manager()
[INFO/SyncManager-...] child process calling self.run()
[INFO/SyncManager-...] created temp directory /.../pymp-...
[INFO/SyncManager-...] manager serving at '/.../listener-...'
>>> del m
[INFO/MainProcess] sending shutdown message to manager
[INFO/SyncManager-...] manager exiting with exitcode 0

```

For a full table of logging levels, see the [`logging`](https://docs.python.org/3/library/logging.html#module-logging "logging: Flexible event logging system for applications.") module.
### The [`multiprocessing.dummy`](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.dummy "multiprocessing.dummy: Dumb wrapper around threading.") module[Â¶](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.dummy "Link to this heading")
[`multiprocessing.dummy`](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.dummy "multiprocessing.dummy: Dumb wrapper around threading.") replicates the API of [`multiprocessing`](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing "multiprocessing: Process-based parallelism.") but is no more than a wrapper around the [`threading`](https://docs.python.org/3/library/threading.html#module-threading "threading: Thread-based parallelism.") module.
In particular, the `Pool` function provided by [`multiprocessing.dummy`](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.dummy "multiprocessing.dummy: Dumb wrapper around threading.") returns an instance of [`ThreadPool`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.ThreadPool "multiprocessing.pool.ThreadPool"), which is a subclass of [`Pool`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool "multiprocessing.pool.Pool") that supports all the same method calls but uses a pool of worker threads rather than worker processes.