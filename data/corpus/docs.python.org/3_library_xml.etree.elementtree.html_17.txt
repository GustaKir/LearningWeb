Title: Namespace Handling in ElementTree
URL: https://docs.python.org/3/library/xml.etree.elementtree.html
Summary: The `start_ns` function is called when a new namespace declaration is encountered, using _prefix_ for the namespace prefix and _uri_ for the URI. The `end_ns` function is invoked after an element that declared a namespace prefix goes out of scope. Both functions were added in version 3.8.
---

start_ns(_prefix_ , _uri_)[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.TreeBuilder.start_ns "Link to this definition")
    
Is called whenever the parser encounters a new namespace declaration, before the `start()` callback for the opening element that defines it. _prefix_ is `''` for the default namespace and the declared namespace prefix name otherwise. _uri_ is the namespace URI.
Added in version 3.8. 

end_ns(_prefix_)[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.TreeBuilder.end_ns "Link to this definition")
    
Is called after the `end()` callback of an element that declared a namespace prefix mapping, with the name of the _prefix_ that went out of scope.
Added in version 3.8. 

_class_ xml.etree.ElementTree.C14NWriterTarget(_write_ , _*_ , _with_comments =False_, _strip_text =False_, _rewrite_prefixes =False_, _qname_aware_tags =None_, _qname_aware_attrs =None_, _exclude_attrs =None_, _exclude_tags =None_)[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.C14NWriterTarget "Link to this definition")
    
A [C14N 2.0](https://www.w3.org/TR/xml-c14n2/) writer. Arguments are the same as for the [`canonicalize()`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.canonicalize "xml.etree.ElementTree.canonicalize") function. This class does not build a tree but translates the callback events directly into a serialised form using the _write_ function.
Added in version 3.8.
### XMLParser Objects[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xmlparser-objects "Link to this heading") 

_class_ xml.etree.ElementTree.XMLParser(_*_ , _target =None_, _encoding =None_)[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLParser "Link to this definition")
    
This class is the low-level building block of the module. It uses [`xml.parsers.expat`](https://docs.python.org/3/library/pyexpat.html#module-xml.parsers.expat "xml.parsers.expat: An interface to the Expat non-validating XML parser.") for efficient, event-based parsing of XML. It can be fed XML data incrementally with the [`feed()`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLParser.feed "xml.etree.ElementTree.XMLParser.feed") method, and parsing events are translated to a push API - by invoking callbacks on the _target_ object. If _target_ is omitted, the standard [`TreeBuilder`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.TreeBuilder "xml.etree.ElementTree.TreeBuilder") is used. If _encoding_ [[1]](https://docs.python.org/3/library/xml.etree.elementtree.html#id9) is given, the value overrides the encoding specified in the XML file.
Changed in version 3.8: Parameters are now [keyword-only](https://docs.python.org/3/glossary.html#keyword-only-parameter). The _html_ argument is no longer supported. 

close()[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLParser.close "Link to this definition")
    
Finishes feeding data to the parser. Returns the result of calling the `close()` method of the _target_ passed during construction; by default, this is the toplevel document element. 

feed(_data_)[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLParser.feed "Link to this definition")
    
Feeds data to the parser. _data_ is encoded data.