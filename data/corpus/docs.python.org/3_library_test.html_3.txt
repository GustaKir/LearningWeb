Title: Testing in Python: Inheriting from unittest.TestCase
URL: https://docs.python.org/3/library/test.html
Summary: Classes that inherit from unittest.TestCase are executed as tests. The TestFuncAcceptsSequencesMixin class cannot be run independently as it does not inherit from unittest.TestCase. The document also references Test Driven Development and introduces the command-line interface for running Python's regression tests.
---

```

When using this pattern, remember that all classes that inherit from [`unittest.TestCase`](https://docs.python.org/3/library/unittest.html#unittest.TestCase "unittest.TestCase") are run as tests. The `TestFuncAcceptsSequencesMixin` class in the example above does not have any data and so can’t be run by itself, thus it does not inherit from [`unittest.TestCase`](https://docs.python.org/3/library/unittest.html#unittest.TestCase "unittest.TestCase").


See also 

Test Driven Development
    
A book by Kent Beck on writing tests before code.
## Running tests using the command-line interface[¶](https://docs.python.org/3/library/test.html#module-test.regrtest "Link to this heading")
The [`test`](https://docs.python.org/3/library/test.html#module-test "test: Regression tests package containing the testing suite for Python.") package can be run as a script to drive Python’s regression test suite, thanks to the [`-m`](https://docs.python.org/3/using/cmdline.html#cmdoption-m) option: **python -m test**. Under the hood, it uses [`test.regrtest`](https://docs.python.org/3/library/test.html#module-test.regrtest "test.regrtest: Drives the regression test suite."); the call **python -m test.regrtest** used in previous Python versions still works. Running the script by itself automatically starts running all regression tests in the [`test`](https://docs.python.org/3/library/test.html#module-test "test: Regression tests package containing the testing suite for Python.") package. It does this by finding all modules in the package whose name starts with `test_`, importing them, and executing the function `test_main()` if present or loading the tests via unittest.TestLoader.loadTestsFromModule if `test_main` does not exist. The names of tests to execute may also be passed to the script. Specifying a single regression test (**python -m test test_spam**) will minimize output and only print whether the test passed or failed.
Running [`test`](https://docs.python.org/3/library/test.html#module-test "test: Regression tests package containing the testing suite for Python.") directly allows what resources are available for tests to use to be set. You do this by using the `-u` command-line option. Specifying `all` as the value for the `-u` option enables all possible resources: **python -m test -uall**. If all but one resource is desired (a more common case), a comma-separated list of resources that are not desired may be listed after `all`. The command **python -m test -uall,-audio,-largefile** will run [`test`](https://docs.python.org/3/library/test.html#module-test "test: Regression tests package containing the testing suite for Python.") with all resources except the `audio` and `largefile` resources. For a list of all resources and more command-line options, run **python -m test -h**.
Some other ways to execute the regression tests depend on what platform the tests are being executed on. On Unix, you can run **make test** at the top-level directory where Python was built. On Windows, executing **rt.bat** from your `PCbuild` directory will run all regression tests.
# [`test.support`](https://docs.python.org/3/library/test.html#module-test.support "test.support: Support for Python's regression test suite.") — Utilities for the Python test suite[¶](https://docs.python.org/3/library/test.html#module-test.support "Link to this heading")
The [`test.support`](https://docs.python.org/3/library/test.html#module-test.support "test.support: Support for Python's regression test suite.") module provides support for Python’s regression test suite.
Note
[`test.support`](https://docs.python.org/3/library/test.html#module-test.support "test.support: Support for Python's regression test suite.") is not a public module. It is documented here to help Python developers write tests. The API of this module is subject to change without backwards compatibility concerns between releases.
This module defines the following exceptions: 

_exception_ test.support.TestFailed[¶](https://docs.python.org/3/library/test.html#test.support.TestFailed "Link to this definition")
    
Exception to be raised when a test fails. This is deprecated in favor of [`unittest`](https://docs.python.org/3/library/unittest.html#module-unittest "unittest: Unit testing framework for Python.")-based tests and [`unittest.TestCase`](https://docs.python.org/3/library/unittest.html#unittest.TestCase "unittest.TestCase")’s assertion methods.