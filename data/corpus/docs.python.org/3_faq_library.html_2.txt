Title: General Library Questions
URL: https://docs.python.org/3/faq/library.html
Summary: This section addresses common inquiries related to finding specific modules or applications in Python's standard library and third-party packages. For tasks that require a module, users are encouraged to consult the Library Reference or search the Python Package Index and online search engines.
---

## [General Library Questions](https://docs.python.org/3/faq/library.html#id2)[¶](https://docs.python.org/3/faq/library.html#general-library-questions "Link to this heading")
### [How do I find a module or application to perform task X?](https://docs.python.org/3/faq/library.html#id3)[¶](https://docs.python.org/3/faq/library.html#how-do-i-find-a-module-or-application-to-perform-task-x "Link to this heading")
Check [the Library Reference](https://docs.python.org/3/library/index.html#library-index) to see if there’s a relevant standard library module. (Eventually you’ll learn what’s in the standard library and will be able to skip this step.)
For third-party packages, search the [Python Package Index](https://pypi.org) or try [Google](https://www.google.com) or another web search engine. Searching for “Python” plus a keyword or two for your topic of interest will usually find something helpful.
### [Where is the math.py (socket.py, regex.py, etc.) source file?](https://docs.python.org/3/faq/library.html#id4)[¶](https://docs.python.org/3/faq/library.html#where-is-the-math-py-socket-py-regex-py-etc-source-file "Link to this heading")
If you can’t find a source file for a module it may be a built-in or dynamically loaded module implemented in C, C++ or other compiled language. In this case you may not have the source file or it may be something like `mathmodule.c`, somewhere in a C source directory (not on the Python Path).
There are (at least) three kinds of modules in Python:
  1. modules written in Python (.py);
  2. modules written in C and dynamically loaded (.dll, .pyd, .so, .sl, etc);
  3. modules written in C and linked with the interpreter; to get a list of these, type:
```
importsys
print(sys.builtin_module_names)

```



### [How do I make a Python script executable on Unix?](https://docs.python.org/3/faq/library.html#id5)[¶](https://docs.python.org/3/faq/library.html#how-do-i-make-a-python-script-executable-on-unix "Link to this heading")
You need to do two things: the script file’s mode must be executable and the first line must begin with `#!` followed by the path of the Python interpreter.
The first is done by executing `chmod +x scriptfile` or perhaps `chmod 755 scriptfile`.
The second can be done in a number of ways. The most straightforward way is to write
```
#!/usr/local/bin/python

```

as the very first line of your file, using the pathname for where the Python interpreter is installed on your platform.
If you would like the script to be independent of where the Python interpreter lives, you can use the **env** program. Almost all Unix variants support the following, assuming the Python interpreter is in a directory on the user’s `PATH`:
```
#!/usr/bin/env python

```

_Don’t_ do this for CGI scripts. The `PATH` variable for CGI scripts is often very minimal, so you need to use the actual absolute pathname of the interpreter.
Occasionally, a user’s environment is so full that the **/usr/bin/env** program fails; or there’s no env program at all. In that case, you can try the following hack (due to Alex Rezinsky):
```
#! /bin/sh
""":"
execpython$0${1+"$@"}
"""

```

The minor disadvantage is that this defines the script’s __doc__ string. However, you can fix that by adding
```
__doc__ = """...Whatever..."""