Title: Creating Subprocesses in asyncio
URL: https://docs.python.org/3/library/asyncio-subprocess.html
Summary: This section explains how to create subprocesses using the asyncio library in Python. It focuses on the function asyncio.create_subprocess_exec, detailing its parameters, including program arguments and buffer limits for StreamReader wrappers for stdout and stderr.
---

```

See also the [Examples](https://docs.python.org/3/library/asyncio-subprocess.html#examples) subsection.
## Creating Subprocesses[¶](https://docs.python.org/3/library/asyncio-subprocess.html#creating-subprocesses "Link to this heading") 

_async_ asyncio.create_subprocess_exec(_program_ , _* args_, _stdin =None_, _stdout =None_, _stderr =None_, _limit =None_, _** kwds_)[¶](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec "Link to this definition")
    
Create a subprocess.
The _limit_ argument sets the buffer limit for [`StreamReader`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamReader "asyncio.StreamReader") wrappers for [`stdout`](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.subprocess.Process.stdout "asyncio.subprocess.Process.stdout") and [`stderr`](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.subprocess.Process.stderr "asyncio.subprocess.Process.stderr") (if [`subprocess.PIPE`](https://docs.python.org/3/library/subprocess.html#subprocess.PIPE "subprocess.PIPE") is passed to _stdout_ and _stderr_ arguments).
Return a [`Process`](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.subprocess.Process "asyncio.subprocess.Process") instance.
See the documentation of [`loop.subprocess_exec()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec "asyncio.loop.subprocess_exec") for other parameters.
Changed in version 3.10: Removed the _loop_ parameter. 

_async_ asyncio.create_subprocess_shell(_cmd_ , _stdin =None_, _stdout =None_, _stderr =None_, _limit =None_, _** kwds_)[¶](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_shell "Link to this definition")
    
Run the _cmd_ shell command.
The _limit_ argument sets the buffer limit for [`StreamReader`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamReader "asyncio.StreamReader") wrappers for [`stdout`](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.subprocess.Process.stdout "asyncio.subprocess.Process.stdout") and [`stderr`](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.subprocess.Process.stderr "asyncio.subprocess.Process.stderr") (if [`subprocess.PIPE`](https://docs.python.org/3/library/subprocess.html#subprocess.PIPE "subprocess.PIPE") is passed to _stdout_ and _stderr_ arguments).
Return a [`Process`](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.subprocess.Process "asyncio.subprocess.Process") instance.
See the documentation of [`loop.subprocess_shell()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_shell "asyncio.loop.subprocess_shell") for other parameters.
Important
It is the application’s responsibility to ensure that all whitespace and special characters are quoted appropriately to avoid [shell injection](https://en.wikipedia.org/wiki/Shell_injection#Shell_injection) vulnerabilities. The [`shlex.quote()`](https://docs.python.org/3/library/shlex.html#shlex.quote "shlex.quote") function can be used to properly escape whitespace and special shell characters in strings that are going to be used to construct shell commands.
Changed in version 3.10: Removed the _loop_ parameter.
Note
Subprocesses are available for Windows if a [`ProactorEventLoop`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.ProactorEventLoop "asyncio.ProactorEventLoop") is used. See [Subprocess Support on Windows](https://docs.python.org/3/library/asyncio-platforms.html#asyncio-windows-subprocess) for details.
See also
asyncio also has the following _low-level_ APIs to work with subprocesses: [`loop.subprocess_exec()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec "asyncio.loop.subprocess_exec"), [`loop.subprocess_shell()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_shell "asyncio.loop.subprocess_shell"), [`loop.connect_read_pipe()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.connect_read_pipe "asyncio.loop.connect_read_pipe"), [`loop.connect_write_pipe()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.connect_write_pipe "asyncio.loop.connect_write_pipe"), as well as the [Subprocess Transports](https://docs.python.org/3/library/asyncio-protocol.html#asyncio-subprocess-transports) and [Subprocess Protocols](https://docs.python.org/3/library/asyncio-protocol.html#asyncio-subprocess-protocols).
## Constants[¶](https://docs.python.org/3/library/asyncio-subprocess.html#constants "Link to this heading")