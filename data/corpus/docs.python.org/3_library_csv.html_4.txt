Title: CSV Dialects in Python
URL: https://docs.python.org/3/library/csv.html
Summary: This section describes the various CSV dialects in Python's CSV library, including the 'excel' class for Excel-generated CSV files, the 'excel_tab' class for Excel-generated TAB-delimited files, and the 'unix_dialect' for CSV files generated on UNIX systems.
---

```


_class_ csv.excel[¶](https://docs.python.org/3/library/csv.html#csv.excel "Link to this definition")
    
The [`excel`](https://docs.python.org/3/library/csv.html#csv.excel "csv.excel") class defines the usual properties of an Excel-generated CSV file. It is registered with the dialect name `'excel'`. 

_class_ csv.excel_tab[¶](https://docs.python.org/3/library/csv.html#csv.excel_tab "Link to this definition")
    
The [`excel_tab`](https://docs.python.org/3/library/csv.html#csv.excel_tab "csv.excel_tab") class defines the usual properties of an Excel-generated TAB-delimited file. It is registered with the dialect name `'excel-tab'`. 

_class_ csv.unix_dialect[¶](https://docs.python.org/3/library/csv.html#csv.unix_dialect "Link to this definition")
    
The [`unix_dialect`](https://docs.python.org/3/library/csv.html#csv.unix_dialect "csv.unix_dialect") class defines the usual properties of a CSV file generated on UNIX systems, i.e. using `'\n'` as line terminator and quoting all fields. It is registered with the dialect name `'unix'`.
Added in version 3.2. 

_class_ csv.Sniffer[¶](https://docs.python.org/3/library/csv.html#csv.Sniffer "Link to this definition")
    
The [`Sniffer`](https://docs.python.org/3/library/csv.html#csv.Sniffer "csv.Sniffer") class is used to deduce the format of a CSV file.
The [`Sniffer`](https://docs.python.org/3/library/csv.html#csv.Sniffer "csv.Sniffer") class provides two methods: 

sniff(_sample_ , _delimiters =None_)[¶](https://docs.python.org/3/library/csv.html#csv.Sniffer.sniff "Link to this definition")
    
Analyze the given _sample_ and return a [`Dialect`](https://docs.python.org/3/library/csv.html#csv.Dialect "csv.Dialect") subclass reflecting the parameters found. If the optional _delimiters_ parameter is given, it is interpreted as a string containing possible valid delimiter characters. 

has_header(_sample_)[¶](https://docs.python.org/3/library/csv.html#csv.Sniffer.has_header "Link to this definition")
    
Analyze the sample text (presumed to be in CSV format) and return [`True`](https://docs.python.org/3/library/constants.html#True "True") if the first row appears to be a series of column headers. Inspecting each column, one of two key criteria will be considered to estimate if the sample contains a header:
  * the second through n-th rows contain numeric values
  * the second through n-th rows contain strings where at least one value’s length differs from that of the putative header of that column.


Twenty rows after the first row are sampled; if more than half of columns + rows meet the criteria, [`True`](https://docs.python.org/3/library/constants.html#True "True") is returned.
Note
This method is a rough heuristic and may produce both false positives and negatives.
An example for [`Sniffer`](https://docs.python.org/3/library/csv.html#csv.Sniffer "csv.Sniffer") use:
```
with open('example.csv', newline='') as csvfile:
  dialect = csv.Sniffer().sniff(csvfile.read(1024))
  csvfile.seek(0)
  reader = csv.reader(csvfile, dialect)
  # ... process CSV file contents here ...