Title: PyConfig Structure: Command Line Argument Parsing
URL: https://docs.python.org/3/c-api/init_config.html
Summary: The `parse_argv` field in the `PyConfig` structure determines if command line arguments should be parsed. If set to `1`, it parses `argv` similarly to standard Python execution, removing Python-specific arguments. After the initial parsing by `PyConfig_Read()`, `parse_argv` is automatically set to `2` to prevent re-parsing.
---

intparse_argv[¶](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.parse_argv "Link to this definition")
    
Parse command line arguments?
If equals to `1`, parse [`argv`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.argv "PyConfig.argv") the same way the regular Python parses [command line arguments](https://docs.python.org/3/using/cmdline.html#using-on-cmdline), and strip Python arguments from [`argv`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.argv "PyConfig.argv").
The [`PyConfig_Read()`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig_Read "PyConfig_Read") function only parses [`PyConfig.argv`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.argv "PyConfig.argv") arguments once: [`PyConfig.parse_argv`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.parse_argv "PyConfig.parse_argv") is set to `2` after arguments are parsed. Since Python arguments are stripped from [`PyConfig.argv`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.argv "PyConfig.argv"), parsing arguments twice would parse the application options as Python options.
Default: `1` in Python mode, `0` in isolated mode.
Changed in version 3.10: The [`PyConfig.argv`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.argv "PyConfig.argv") arguments are now only parsed if [`PyConfig.parse_argv`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.parse_argv "PyConfig.parse_argv") equals to `1`. 

intparser_debug[¶](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.parser_debug "Link to this definition")
    
Parser debug mode. If greater than `0`, turn on parser debugging output (for expert only, depending on compilation options).
Incremented by the [`-d`](https://docs.python.org/3/using/cmdline.html#cmdoption-d) command line option. Set to the [`PYTHONDEBUG`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONDEBUG) environment variable value.
Needs a [debug build of Python](https://docs.python.org/3/using/configure.html#debug-build) (the `Py_DEBUG` macro must be defined).
Default: `0`. 

intpathconfig_warnings[¶](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.pathconfig_warnings "Link to this definition")
    
If non-zero, calculation of path configuration is allowed to log warnings into `stderr`. If equals to `0`, suppress these warnings.
Default: `1` in Python mode, `0` in isolated mode.
Part of the [Python Path Configuration](https://docs.python.org/3/c-api/init_config.html#init-path-config) input.
Changed in version 3.11: Now also applies on Windows. 

wchar_t*prefix[¶](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.prefix "Link to this definition")
    
The site-specific directory prefix where the platform independent Python files are installed: [`sys.prefix`](https://docs.python.org/3/library/sys.html#sys.prefix "sys.prefix").
Default: `NULL`.
Part of the [Python Path Configuration](https://docs.python.org/3/c-api/init_config.html#init-path-config) output.
See also [`PyConfig.base_prefix`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.base_prefix "PyConfig.base_prefix"). 

wchar_t*program_name[¶](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.program_name "Link to this definition")
    
Program name used to initialize [`executable`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.executable "PyConfig.executable") and in early error messages during Python initialization.
  * On macOS, use [`PYTHONEXECUTABLE`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONEXECUTABLE) environment variable if set.
  * If the `WITH_NEXT_FRAMEWORK` macro is defined, use `__PYVENV_LAUNCHER__` environment variable if set.
  * Use `argv[0]` of [`argv`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.argv "PyConfig.argv") if available and non-empty.
  * Otherwise, use `L"python"` on Windows, or `L"python3"` on other platforms.


Default: `NULL`.
Part of the [Python Path Configuration](https://docs.python.org/3/c-api/init_config.html#init-path-config) input. 

wchar_t*pycache_prefix[¶](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.pycache_prefix "Link to this definition")
    
Directory where cached `.pyc` files are written: [`sys.pycache_prefix`](https://docs.python.org/3/library/sys.html#sys.pycache_prefix "sys.pycache_prefix").
Set by the [`-X pycache_prefix=PATH`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) command line option and the [`PYTHONPYCACHEPREFIX`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPYCACHEPREFIX) environment variable. The command-line option takes precedence.
If `NULL`, [`sys.pycache_prefix`](https://docs.python.org/3/library/sys.html#sys.pycache_prefix "sys.pycache_prefix") is set to `None`.
Default: `NULL`.