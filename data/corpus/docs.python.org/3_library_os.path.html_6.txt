Title: os.path.split Function
URL: https://docs.python.org/3/library/os.path.html
Summary: The os.path.split function splits a given pathname into a tuple (head, tail), where 'tail' is the last component of the pathname and 'head' is everything before it. It handles cases for empty paths and trailing slashes, ensuring that 'join(head, tail)' reconstructs the original path. The function was updated in version 3.6 to accept path-like objects.
---

os.path.split(_path_)[¶](https://docs.python.org/3/library/os.path.html#os.path.split "Link to this definition")
    
Split the pathname _path_ into a pair, `(head, tail)` where _tail_ is the last pathname component and _head_ is everything leading up to that. The _tail_ part will never contain a slash; if _path_ ends in a slash, _tail_ will be empty. If there is no slash in _path_ , _head_ will be empty. If _path_ is empty, both _head_ and _tail_ are empty. Trailing slashes are stripped from _head_ unless it is the root (one or more slashes only). In all cases, `join(head, tail)` returns a path to the same location as _path_ (but the strings may differ). Also see the functions [`dirname()`](https://docs.python.org/3/library/os.path.html#os.path.dirname "os.path.dirname") and [`basename()`](https://docs.python.org/3/library/os.path.html#os.path.basename "os.path.basename").
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). 

os.path.splitdrive(_path_)[¶](https://docs.python.org/3/library/os.path.html#os.path.splitdrive "Link to this definition")
    
Split the pathname _path_ into a pair `(drive, tail)` where _drive_ is either a mount point or the empty string. On systems which do not use drive specifications, _drive_ will always be the empty string. In all cases, `drive + tail` will be the same as _path_.
On Windows, splits a pathname into drive/UNC sharepoint and relative path.
If the path contains a drive letter, drive will contain everything up to and including the colon:
>>>```
>>> splitdrive("c:/dir")
("c:", "/dir")

```

If the path contains a UNC path, drive will contain the host name and share:
>>>```
>>> splitdrive("//host/computer/dir")
("//host/computer", "/dir")

```

Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). 

os.path.splitroot(_path_)[¶](https://docs.python.org/3/library/os.path.html#os.path.splitroot "Link to this definition")
    
Split the pathname _path_ into a 3-item tuple `(drive, root, tail)` where _drive_ is a device name or mount point, _root_ is a string of separators after the drive, and _tail_ is everything after the root. Any of these items may be the empty string. In all cases, `drive + root + tail` will be the same as _path_.
On POSIX systems, _drive_ is always empty. The _root_ may be empty (if _path_ is relative), a single forward slash (if _path_ is absolute), or two forward slashes (implementation-defined per [IEEE Std 1003.1-2017; 4.13 Pathname Resolution](https://pubs.opengroup.org/onlinepubs/9699919799/basedefs/V1_chap04.html#tag_04_13).) For example:
>>>```
>>> splitroot('/home/sam')
('', '/', 'home/sam')
>>> splitroot('//home/sam')
('', '//', 'home/sam')
>>> splitroot('///home/sam')
('', '/', '//home/sam')

```

On Windows, _drive_ may be empty, a drive-letter name, a UNC share, or a device name. The _root_ may be empty, a forward slash, or a backward slash. For example:
>>>```
>>> splitroot('C:/Users/Sam')
('C:', '/', 'Users/Sam')
>>> splitroot('//Server/Share/Users/Sam')
('//Server/Share', '/', 'Users/Sam')

```

Added in version 3.12. 

os.path.splitext(_path_)[¶](https://docs.python.org/3/library/os.path.html#os.path.splitext "Link to this definition")
    
Split the pathname _path_ into a pair `(root, ext)` such that `root + ext == path`, and the extension, _ext_ , is empty or begins with a period and contains at most one period.
If the path contains no extension, _ext_ will be `''`:
>>>```
>>> splitext('bar')
('bar', '')

```

If the path contains an extension, then _ext_ will be set to this extension, including the leading period. Note that previous periods will be ignored:
>>>```
>>> splitext('foo.bar.exe')
('foo.bar', '.exe')
>>> splitext('/foo/bar.exe')
('/foo/bar', '.exe')

```

Leading periods of the last component of the path are considered to be part of the root:
>>>```
>>> splitext('.cshrc')
('.cshrc', '')
>>> splitext('/foo/....jpg')
('/foo/....jpg', '')