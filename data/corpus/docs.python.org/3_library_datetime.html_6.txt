Title: Operations with Timedelta Objects
URL: https://docs.python.org/3/library/datetime.html
Summary: Timedelta objects support addition and subtraction with date and datetime objects. The expression `t2 - t3` equals `t2 + (-t3)` except when `t3` equals `timedelta.max`, which could lead to overflow. Version 3.2 introduced support for floor and true division, remainder operations, and `divmod()` with timedelta objects.
---

```

  6. The expression `t2 - t3` will always be equal to the expression `t2 + (-t3)` except when t3 is equal to `timedelta.max`; in that case the former will produce a result while the latter will overflow.


In addition to the operations listed above, [`timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta "datetime.timedelta") objects support certain additions and subtractions with [`date`](https://docs.python.org/3/library/datetime.html#datetime.date "datetime.date") and [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") objects (see below).
Changed in version 3.2: Floor division and true division of a [`timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta "datetime.timedelta") object by another [`timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta "datetime.timedelta") object are now supported, as are remainder operations and the [`divmod()`](https://docs.python.org/3/library/functions.html#divmod "divmod") function. True division and multiplication of a [`timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta "datetime.timedelta") object by a [`float`](https://docs.python.org/3/library/functions.html#float "float") object are now supported.
[`timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta "datetime.timedelta") objects support equality and order comparisons.
In Boolean contexts, a [`timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta "datetime.timedelta") object is considered to be true if and only if it isn’t equal to `timedelta(0)`.
Instance methods: 

timedelta.total_seconds()[¶](https://docs.python.org/3/library/datetime.html#datetime.timedelta.total_seconds "Link to this definition")
    
Return the total number of seconds contained in the duration. Equivalent to `td / timedelta(seconds=1)`. For interval units other than seconds, use the division form directly (e.g. `td / timedelta(microseconds=1)`).
Note that for very large time intervals (greater than 270 years on most platforms) this method will lose microsecond accuracy.
Added in version 3.2.
### Examples of usage: [`timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta "datetime.timedelta")[¶](https://docs.python.org/3/library/datetime.html#examples-of-usage-timedelta "Link to this heading")
An additional example of normalization:
>>>```
>>> # Components of another_year add up to exactly 365 days
>>> fromdatetimeimport timedelta
>>> year = timedelta(days=365)
>>> another_year = timedelta(weeks=40, days=84, hours=23,
...              minutes=50, seconds=600)
>>> year == another_year
True
>>> year.total_seconds()
31536000.0

```

Examples of [`timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta "datetime.timedelta") arithmetic:
>>>```
>>> fromdatetimeimport timedelta
>>> year = timedelta(days=365)
>>> ten_years = 10 * year
>>> ten_years
datetime.timedelta(days=3650)
>>> ten_years.days // 365
10
>>> nine_years = ten_years - year
>>> nine_years
datetime.timedelta(days=3285)
>>> three_years = nine_years // 3
>>> three_years, three_years.days // 365
(datetime.timedelta(days=1095), 3)