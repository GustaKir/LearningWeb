Title: New Time API in Python 3.13
URL: https://docs.python.org/3/whatsnew/3.13.html
Summary: Python 3.13 introduces an updated time API through `PyTime_t` and related functions, providing access to various system clocks including monotonic, performance, and standard time measurements.
---

api-time) to provide access to system clocks:
    * [`PyTime_t`](https://docs.python.org/3/c-api/time.html#c.PyTime_t "PyTime_t").
    * [`PyTime_MIN`](https://docs.python.org/3/c-api/time.html#c.PyTime_MIN "PyTime_MIN") and [`PyTime_MAX`](https://docs.python.org/3/c-api/time.html#c.PyTime_MAX "PyTime_MAX").
    * [`PyTime_AsSecondsDouble()`](https://docs.python.org/3/c-api/time.html#c.PyTime_AsSecondsDouble "PyTime_AsSecondsDouble").
    * [`PyTime_Monotonic()`](https://docs.python.org/3/c-api/time.html#c.PyTime_Monotonic "PyTime_Monotonic").
    * [`PyTime_MonotonicRaw()`](https://docs.python.org/3/c-api/time.html#c.PyTime_MonotonicRaw "PyTime_MonotonicRaw").
    * [`PyTime_PerfCounter()`](https://docs.python.org/3/c-api/time.html#c.PyTime_PerfCounter "PyTime_PerfCounter").
    * [`PyTime_PerfCounterRaw()`](https://docs.python.org/3/c-api/time.html#c.PyTime_PerfCounterRaw "PyTime_PerfCounterRaw").
    * [`PyTime_Time()`](https://docs.python.org/3/c-api/time.html#c.PyTime_Time "PyTime_Time").
    * [`PyTime_TimeRaw()`](https://docs.python.org/3/c-api/time.html#c.PyTime_TimeRaw "PyTime_TimeRaw").
(Contributed by Victor Stinner and Petr Viktorin in [gh-110850](https://github.com/python/cpython/issues/110850).)
  * Add the [`PyDict_ContainsString()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_ContainsString "PyDict_ContainsString") function with the same behavior as [`PyDict_Contains()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_Contains "PyDict_Contains"), but _key_ is specified as a constchar* UTF-8 encoded bytes string, rather than a [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*. (Contributed by Victor Stinner in [gh-108314](https://github.com/python/cpython/issues/108314).)
  * Add the [`PyDict_GetItemRef()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_GetItemRef "PyDict_GetItemRef") and [`PyDict_GetItemStringRef()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_GetItemStringRef "PyDict_GetItemStringRef") functions, which behave similarly to [`PyDict_GetItemWithError()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_GetItemWithError "PyDict_GetItemWithError"), but return a [strong reference](https://docs.python.org/3/glossary.html#term-strong-reference) instead of a [borrowed reference](https://docs.python.org/3/glossary.html#term-borrowed-reference). Moreover, these functions return `-1` on error, removing the need to check `PyErr_Occurred()`. (Contributed by Victor Stinner in [gh-106004](https://github.com/python/cpython/issues/106004).)
  * Add the [`PyDict_SetDefaultRef()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_SetDefaultRef "PyDict_SetDefaultRef") function, which behaves similarly to [`PyDict_SetDefault()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_SetDefault "PyDict_SetDefault"), but returns a [strong reference](https://docs.python.org/3/glossary.html#term-strong-reference) instead of a [borrowed reference](https://docs.python.org/3/glossary.html#term-borrowed-reference). This function returns `-1` on error, `0` on insertion, and `1` if the key was already present in the dictionary. (Contributed by Sam Gross in [gh-112066](https://github.com/python/cpython/issues/112066).)
  * Add the [`PyDict_Pop()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_Pop "PyDict_Pop") and [`PyDict_PopString()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_PopString "PyDict_PopString") functions to remove a key from a dictionary and optionally return the removed value. This is similar to [`dict.pop()`](https://docs.python.org/3/library/stdtypes.html#dict.pop "dict.pop"), though there is no default value, and [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError") is not raised for missing keys. (Contributed by Stefan Behnel and Victor Stinner in [gh-111262](https://github.com/python/cpython/issues/111262).)
  * Add the [`PyMapping_GetOptionalItem()`](https://docs.python.org/3/c-api/mapping.html#c.PyMapping_GetOptionalItem "PyMapping_GetOptionalItem") and [`PyMapping_GetOptionalItemString()`](https://docs.python.org/3/c-api/mapping.html#c.PyMapping_GetOptionalItemString "PyMapping_GetOptionalItemString") functions as alternatives to [`PyObject_GetItem()`](https://docs.python.org/3/c-api/object.html#c.PyObject_GetItem "PyObject_GetItem") and [`PyMapping_GetItemString()`](https://docs.python.org/3/c-api/mapping.html#c.PyMapping_GetItemString "PyMapping_GetItemString") respectively. The new functions do not raise [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError") if the requested key is missing from the mapping. These variants are more convenient and faster if a missing key should not be treated as a failure.