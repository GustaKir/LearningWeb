Title: addClassCleanup Method in unittest
URL: https://docs.python.org/3/library/unittest.html
Summary: The `addClassCleanup` method in the unittest framework adds a cleanup function to be called after `tearDownClass`. Cleanup functions are executed in reverse order (LIFO) and can accept arguments and keyword arguments. If `setUpClass` fails, it affects the execution of `tearDownClass`.
---

_classmethod_ addClassCleanup(_function_ , _/_ , _* args_, _** kwargs_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.addClassCleanup "Link to this definition")
    
Add a function to be called after [`tearDownClass()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.tearDownClass "unittest.TestCase.tearDownClass") to cleanup resources used during the test class. Functions will be called in reverse order to the order they are added (LIFO). They are called with any arguments and keyword arguments passed into [`addClassCleanup()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.addClassCleanup "unittest.TestCase.addClassCleanup") when they are added.
If [`setUpClass()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.setUpClass "unittest.TestCase.setUpClass") fails, meaning that [`tearDownClass()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.tearDownClass "unittest.TestCase.tearDownClass") is not called, then any cleanup functions added will still be called.
Added in version 3.8. 

_classmethod_ enterClassContext(_cm_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.enterClassContext "Link to this definition")
    
Enter the supplied [context manager](https://docs.python.org/3/glossary.html#term-context-manager). If successful, also add its [`__exit__()`](https://docs.python.org/3/reference/datamodel.html#object.__exit__ "object.__exit__") method as a cleanup function by [`addClassCleanup()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.addClassCleanup "unittest.TestCase.addClassCleanup") and return the result of the [`__enter__()`](https://docs.python.org/3/reference/datamodel.html#object.__enter__ "object.__enter__") method.
Added in version 3.11. 

_classmethod_ doClassCleanups()[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.doClassCleanups "Link to this definition")
    
This method is called unconditionally after [`tearDownClass()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.tearDownClass "unittest.TestCase.tearDownClass"), or after [`setUpClass()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.setUpClass "unittest.TestCase.setUpClass") if [`setUpClass()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.setUpClass "unittest.TestCase.setUpClass") raises an exception.
It is responsible for calling all the cleanup functions added by [`addClassCleanup()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.addClassCleanup "unittest.TestCase.addClassCleanup"). If you need cleanup functions to be called _prior_ to [`tearDownClass()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.tearDownClass "unittest.TestCase.tearDownClass") then you can call [`doClassCleanups()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.doClassCleanups "unittest.TestCase.doClassCleanups") yourself.
[`doClassCleanups()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.doClassCleanups "unittest.TestCase.doClassCleanups") pops methods off the stack of cleanup functions one at a time, so it can be called at any time.
Added in version 3.8. 

_class_ unittest.IsolatedAsyncioTestCase(_methodName ='runTest'_)[¶](https://docs.python.org/3/library/unittest.html#unittest.IsolatedAsyncioTestCase "Link to this definition")
    
This class provides an API similar to [`TestCase`](https://docs.python.org/3/library/unittest.html#unittest.TestCase "unittest.TestCase") and also accepts coroutines as test functions.
Added in version 3.8. 

loop_factory[¶](https://docs.python.org/3/library/unittest.html#unittest.IsolatedAsyncioTestCase.loop_factory "Link to this definition")
    
The _loop_factory_ passed to [`asyncio.Runner`](https://docs.python.org/3/library/asyncio-runner.html#asyncio.Runner "asyncio.Runner"). Override in subclasses with [`asyncio.EventLoop`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.EventLoop "asyncio.EventLoop") to avoid using the asyncio policy system.
Added in version 3.13. 

_async_ asyncSetUp()[¶](https://docs.python.org/3/library/unittest.html#unittest.IsolatedAsyncioTestCase.asyncSetUp "Link to this definition")
    
Method called to prepare the test fixture. This is called after `setUp()`. This is called immediately before calling the test method; other than [`AssertionError`](https://docs.python.org/3/library/exceptions.html#AssertionError "AssertionError") or [`SkipTest`](https://docs.python.org/3/library/unittest.html#unittest.SkipTest "unittest.SkipTest"), any exception raised by this method will be considered an error rather than a test failure. The default implementation does nothing.