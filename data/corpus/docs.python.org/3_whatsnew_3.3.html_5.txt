Title: PEP 393 and PEP 397 Overview
URL: https://docs.python.org/3/whatsnew/3.3.html
Summary: This document discusses PEP 393, which introduces a flexible string representation, and PEP 397, which adds a `py` launcher for Windows that enables version-independent execution of Python applications. The launcher simplifies script execution by selecting the appropriate Python version based on the installation and script shebang line.
---

[**PEP 393**](https://peps.python.org/pep-0393/) - Flexible String Representation
    
PEP written by Martin von Löwis; implementation by Torsten Becker and Martin von Löwis.
## PEP 397: Python Launcher for Windows[¶](https://docs.python.org/3/whatsnew/3.3.html#pep-397-python-launcher-for-windows "Link to this heading")
The Python 3.3 Windows installer now includes a `py` launcher application that can be used to launch Python applications in a version independent fashion.
This launcher is invoked implicitly when double-clicking `*.py` files. If only a single Python version is installed on the system, that version will be used to run the file. If multiple versions are installed, the most recent version is used by default, but this can be overridden by including a Unix-style “shebang line” in the Python script.
The launcher can also be used explicitly from the command line as the `py` application. Running `py` follows the same version selection rules as implicitly launching scripts, but a more specific version can be selected by passing appropriate arguments (such as `-3` to request Python 3 when Python 2 is also installed, or `-2.6` to specifically request an earlier Python version when a more recent version is installed).
In addition to the launcher, the Windows installer now includes an option to add the newly installed Python to the system PATH. (Contributed by Brian Curtin in [bpo-3561](https://bugs.python.org/issue?@action=redirect&bpo=3561).)
See also 

[**PEP 397**](https://peps.python.org/pep-0397/) - Python Launcher for Windows
    
PEP written by Mark Hammond and Martin v. Löwis; implementation by Vinay Sajip.
Launcher documentation: [Python Launcher for Windows](https://docs.python.org/3/using/windows.html#launcher)
Installer PATH modification: [Finding the Python executable](https://docs.python.org/3/using/windows.html#windows-path-mod)
## PEP 3151: Reworking the OS and IO exception hierarchy[¶](https://docs.python.org/3/whatsnew/3.3.html#pep-3151-reworking-the-os-and-io-exception-hierarchy "Link to this heading")
The hierarchy of exceptions raised by operating system errors is now both simplified and finer-grained.
You don’t have to worry anymore about choosing the appropriate exception type between [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError"), [`IOError`](https://docs.python.org/3/library/exceptions.html#IOError "IOError"), [`EnvironmentError`](https://docs.python.org/3/library/exceptions.html#EnvironmentError "EnvironmentError"), [`WindowsError`](https://docs.python.org/3/library/exceptions.html#WindowsError "WindowsError"), `mmap.error`, [`socket.error`](https://docs.python.org/3/library/socket.html#socket.error "socket.error") or [`select.error`](https://docs.python.org/3/library/select.html#select.error "select.error"). All these exception types are now only one: [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError"). The other names are kept as aliases for compatibility reasons.
Also, it is now easier to catch a specific error condition. Instead of inspecting the `errno` attribute (or `args[0]`) for a particular constant from the [`errno`](https://docs.python.org/3/library/errno.html#module-errno "errno: Standard errno system symbols.") module, you can catch the adequate [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") subclass. The available subclasses are the following:
  * [`BlockingIOError`](https://docs.python.org/3/library/exceptions.html#BlockingIOError "BlockingIOError")
  * [`ChildProcessError`](https://docs.python.org/3/library/exceptions.html#ChildProcessError "ChildProcessError")
  * [`ConnectionError`](https://docs.python.org/3/library/exceptions.html#ConnectionError "ConnectionError")
  * [`FileExistsError`](https://docs.python.org/3/library/exceptions.html#FileExistsError "FileExistsError")
  * [`FileNotFoundError`](https://docs.python.org/3/library/exceptions.html#FileNotFoundError "FileNotFoundError")
  * [`InterruptedError`](https://docs.python.org/3/library/exceptions.html#InterruptedError "InterruptedError")
  * [`IsADirectoryError`](https://docs.python.org/3/library/exceptions.html#IsADirectoryError "IsADirectoryError")
  * [`NotADirectoryError`](https://docs.python.org/3/library/exceptions.html#NotADirectoryError "NotADirectoryError")
  * [`PermissionError`](https://docs.python.org/3/library/exceptions.html#PermissionError "PermissionError")
  * [`ProcessLookupError`](https://docs.python.org/3/library/exceptions.html#ProcessLookupError "ProcessLookupError")
  * [`TimeoutError`](https://docs.python.org/3/library/exceptions.html#TimeoutError "TimeoutError")