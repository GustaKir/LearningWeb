Title: Python 3.8 New Features: Typing Enhancements
URL: https://docs.python.org/3/whatsnew/3.8.html
Summary: Python 3.8 introduces several enhancements to typing, including literal types for specific values using `typing.Literal`, final qualifiers for restricting subclassing and reassignment with `typing.Final`, and new protocol definitions with `typing.Protocol`.
---

```

  * Literal types. See [**PEP 586**](https://peps.python.org/pep-0586/) and [`typing.Literal`](https://docs.python.org/3/library/typing.html#typing.Literal "typing.Literal"). Literal types indicate that a parameter or return value is constrained to one or more specific literal values:
```
defget_status(port: int) -> Literal['connected', 'disconnected']:
  ...

```

  * “Final” variables, functions, methods and classes. See [**PEP 591**](https://peps.python.org/pep-0591/), [`typing.Final`](https://docs.python.org/3/library/typing.html#typing.Final "typing.Final") and [`typing.final()`](https://docs.python.org/3/library/typing.html#typing.final "typing.final"). The final qualifier instructs a static type checker to restrict subclassing, overriding, or reassignment:
```
pi: Final[float] = 3.1415926536

```

  * Protocol definitions. See [**PEP 544**](https://peps.python.org/pep-0544/), [`typing.Protocol`](https://docs.python.org/3/library/typing.html#typing.Protocol "typing.Protocol") and [`typing.runtime_checkable()`](https://docs.python.org/3/library/typing.html#typing.runtime_checkable "typing.runtime_checkable"). Simple ABCs like [`typing.SupportsInt`](https://docs.python.org/3/library/typing.html#typing.SupportsInt "typing.SupportsInt") are now `Protocol` subclasses.
  * New protocol class [`typing.SupportsIndex`](https://docs.python.org/3/library/typing.html#typing.SupportsIndex "typing.SupportsIndex").
  * New functions [`typing.get_origin()`](https://docs.python.org/3/library/typing.html#typing.get_origin "typing.get_origin") and [`typing.get_args()`](https://docs.python.org/3/library/typing.html#typing.get_args "typing.get_args").


### unicodedata[¶](https://docs.python.org/3/whatsnew/3.8.html#unicodedata "Link to this heading")
The [`unicodedata`](https://docs.python.org/3/library/unicodedata.html#module-unicodedata "unicodedata: Access the Unicode Database.") module has been upgraded to use the [Unicode 12.1.0](https://blog.unicode.org/2019/05/unicode-12-1-en.html) release.
New function [`is_normalized()`](https://docs.python.org/3/library/unicodedata.html#unicodedata.is_normalized "unicodedata.is_normalized") can be used to verify a string is in a specific normal form, often much faster than by actually normalizing the string. (Contributed by Max Belanger, David Euresti, and Greg Price in [bpo-32285](https://bugs.python.org/issue?@action=redirect&bpo=32285) and [bpo-37966](https://bugs.python.org/issue?@action=redirect&bpo=37966)).
### unittest[¶](https://docs.python.org/3/whatsnew/3.8.html#unittest "Link to this heading")
Added [`AsyncMock`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.AsyncMock "unittest.mock.AsyncMock") to support an asynchronous version of [`Mock`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock "unittest.mock.Mock"). Appropriate new assert functions for testing have been added as well. (Contributed by Lisa Roach in [bpo-26467](https://bugs.python.org/issue?@action=redirect&bpo=26467)).
Added [`addModuleCleanup()`](https://docs.python.org/3/library/unittest.html#unittest.addModuleCleanup "unittest.addModuleCleanup") and [`addClassCleanup()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.addClassCleanup "unittest.TestCase.addClassCleanup") to unittest to support cleanups for `setUpModule()` and [`setUpClass()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.setUpClass "unittest.TestCase.setUpClass"). (Contributed by Lisa Roach in [bpo-24412](https://bugs.python.org/issue?@action=redirect&bpo=24412).)
Several mock assert functions now also print a list of actual calls upon failure. (Contributed by Petter Strandmark in [bpo-35047](https://bugs.python.org/issue?@action=redirect&bpo=35047).)
[`unittest`](https://docs.python.org/3/library/unittest.html#module-unittest "unittest: Unit testing framework for Python.") module gained support for coroutines to be used as test cases with [`unittest.IsolatedAsyncioTestCase`](https://docs.python.org/3/library/unittest.html#unittest.IsolatedAsyncioTestCase "unittest.IsolatedAsyncioTestCase"). (Contributed by Andrew Svetlov in [bpo-32972](https://bugs.python.org/issue?@action=redirect&bpo=32972).)
Example:
```
importunittest

classTestRequest(unittest.IsolatedAsyncioTestCase):
  async defasyncSetUp(self):
    self.connection = await AsyncConnection()
  async deftest_get(self):
    response = await self.connection.get("https://example.com")
    self.assertEqual(response.status_code, 200)
  async defasyncTearDown(self):
    await self.connection.close()

if __name__ == "__main__":
  unittest.main()