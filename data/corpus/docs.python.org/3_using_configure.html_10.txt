Title: Configuration Options for OpenSSL and Hash Algorithms
URL: https://docs.python.org/3/using/configure.html
Summary: This section outlines the configuration options for setting the runtime library directory (rpath) for OpenSSL libraries and selecting hash algorithms in Python. It details the choices for `--with-openssl-rpath`, including options like 'no', 'auto', and a specific directory. Additionally, it covers the `--with-hash-algorithm` option, its default values, and updates in versions 3.4 and 3.11.
---

--with-openssl-rpath=[no|auto|DIR][¶](https://docs.python.org/3/using/configure.html#cmdoption-with-openssl-rpath "Link to this definition")
    
Set runtime library directory (rpath) for OpenSSL libraries:
  * `no` (default): don’t set rpath;
  * `auto`: auto-detect rpath from [`--with-openssl`](https://docs.python.org/3/using/configure.html#cmdoption-with-openssl) and `pkg-config`;
  * _DIR_ : set an explicit rpath.


Added in version 3.10.
### 3.3.12. Security Options[¶](https://docs.python.org/3/using/configure.html#security-options "Link to this heading") 

--with-hash-algorithm=[fnv|siphash13|siphash24][¶](https://docs.python.org/3/using/configure.html#cmdoption-with-hash-algorithm "Link to this definition")
    
Select hash algorithm for use in `Python/pyhash.c`:
  * `siphash13` (default);
  * `siphash24`;
  * `fnv`.


Added in version 3.4.
Added in version 3.11: `siphash13` is added and it is the new default. 

--with-builtin-hashlib-hashes=md5,sha1,sha256,sha512,sha3,blake2[¶](https://docs.python.org/3/using/configure.html#cmdoption-with-builtin-hashlib-hashes "Link to this definition")
    
Built-in hash modules:
  * `md5`;
  * `sha1`;
  * `sha256`;
  * `sha512`;
  * `sha3` (with shake);
  * `blake2`.


Added in version 3.9. 

--with-ssl-default-suites=[python|openssl|STRING][¶](https://docs.python.org/3/using/configure.html#cmdoption-with-ssl-default-suites "Link to this definition")
    
Override the OpenSSL default cipher suites string:
  * `python` (default): use Python’s preferred selection;
  * `openssl`: leave OpenSSL’s defaults untouched;
  * _STRING_ : use a custom string


See the [`ssl`](https://docs.python.org/3/library/ssl.html#module-ssl "ssl: TLS/SSL wrapper for socket objects") module.
Added in version 3.7.
Changed in version 3.10: The settings `python` and _STRING_ also set TLS 1.2 as minimum protocol version.
### 3.3.13. macOS Options[¶](https://docs.python.org/3/using/configure.html#macos-options "Link to this heading")
See [Mac/README.rst](https://github.com/python/cpython/tree/3.13/Mac/README.rst). 

--enable-universalsdk[¶](https://docs.python.org/3/using/configure.html#cmdoption-enable-universalsdk "Link to this definition")


--enable-universalsdk=SDKDIR[¶](https://docs.python.org/3/using/configure.html#cmdoption-0 "Link to this definition")
    
Create a universal binary build. _SDKDIR_ specifies which macOS SDK should be used to perform the build (default is no). 

--enable-framework[¶](https://docs.python.org/3/using/configure.html#cmdoption-enable-framework "Link to this definition")


--enable-framework=INSTALLDIR[¶](https://docs.python.org/3/using/configure.html#cmdoption-1 "Link to this definition")
    
Create a Python.framework rather than a traditional Unix install. Optional _INSTALLDIR_ specifies the installation path (default is no). 

--with-universal-archs=ARCH[¶](https://docs.python.org/3/using/configure.html#cmdoption-with-universal-archs "Link to this definition")
    
Specify the kind of universal binary that should be created. This option is only valid when [`--enable-universalsdk`](https://docs.python.org/3/using/configure.html#cmdoption-enable-universalsdk) is set.
Options:
  * `universal2` (x86-64 and arm64);
  * `32-bit` (PPC and i386);
  * `64-bit` (PPC64 and x86-64);
  * `3-way` (i386, PPC and x86-64);
  * `intel` (i386 and x86-64);
  * `intel-32` (i386);
  * `intel-64` (x86-64);
  * `all` (PPC, i386, PPC64 and x86-64).


Note that values for this configuration item are _not_ the same as the identifiers used for universal binary wheels on macOS. See the Python Packaging User Guide for details on the [packaging platform compatibility tags used on macOS](https://packaging.python.org/en/latest/specifications/platform-compatibility-tags/#macos) 

--with-framework-name=FRAMEWORK[¶](https://docs.python.org/3/using/configure.html#cmdoption-with-framework-name "Link to this definition")
    
Specify the name for the python framework on macOS only valid when [`--enable-framework`](https://docs.python.org/3/using/configure.html#cmdoption-enable-framework) is set (default: `Python`). 

--with-app-store-compliance[¶](https://docs.python.org/3/using/configure.html#cmdoption-with-app-store-compliance "Link to this definition")


--with-app-store-compliance=PATCH-FILE[¶](https://docs.python.org/3/using/configure.html#cmdoption-2 "Link to this definition")
    
The Python standard library contains strings that are known to trigger automated inspection tool errors when submitted for distribution by the macOS and iOS App Stores. If enabled, this option will apply the list of patches that are known to correct app store compliance. A custom patch file can also be specified. This option is disabled by default.
Added in version 3.13.
### 3.3.14. iOS Options[¶](https://docs.python.org/3/using/configure.html#ios-options "Link to this heading")
See [iOS/README.rst](https://github.com/python/cpython/tree/3.13/iOS/README.rst).