Title: The Python Debugger (`pdb`)
URL: https://docs.python.org/3/library/pdb.html
Summary: This section provides an overview of the Python Debugger, known as `pdb`, including its capabilities and commands for debugging Python code.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [`pdb` — The Python Debugger](https://docs.python.org/3/library/pdb.html)
    * [Debugger Commands](https://docs.python.org/3/library/pdb.html#debugger-commands)


#### Previous topic
[`faulthandler` — Dump the Python traceback](https://docs.python.org/3/library/faulthandler.html "previous chapter")
#### Next topic
[The Python Profilers](https://docs.python.org/3/library/profile.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/pdb.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/profile.html "The Python Profilers") |
  * [previous](https://docs.python.org/3/library/faulthandler.html "faulthandler — Dump the Python traceback") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Debugging and Profiling](https://docs.python.org/3/library/debug.html) »
  * [`pdb` — The Python Debugger](https://docs.python.org/3/library/pdb.html)
  * | 
  * Theme  Auto Light Dark |


# [`pdb`](https://docs.python.org/3/library/pdb.html#module-pdb "pdb: The Python debugger for interactive interpreters.") — The Python Debugger[¶](https://docs.python.org/3/library/pdb.html#module-pdb "Link to this heading")
**Source code:** [Lib/pdb.py](https://github.com/python/cpython/tree/3.13/Lib/pdb.py)
The module [`pdb`](https://docs.python.org/3/library/pdb.html#module-pdb "pdb: The Python debugger for interactive interpreters.") defines an interactive source code debugger for Python programs. It supports setting (conditional) breakpoints and single stepping at the source line level, inspection of stack frames, source code listing, and evaluation of arbitrary Python code in the context of any stack frame. It also supports post-mortem debugging and can be called under program control.
The debugger is extensible – it is actually defined as the class [`Pdb`](https://docs.python.org/3/library/pdb.html#pdb.Pdb "pdb.Pdb"). This is currently undocumented but easily understood by reading the source. The extension interface uses the modules [`bdb`](https://docs.python.org/3/library/bdb.html#module-bdb "bdb: Debugger framework.") and [`cmd`](https://docs.python.org/3/library/cmd.html#module-cmd "cmd: Build line-oriented command interpreters.").
See also 

Module [`faulthandler`](https://docs.python.org/3/library/faulthandler.html#module-faulthandler "faulthandler: Dump the Python traceback.")
    
Used to dump Python tracebacks explicitly, on a fault, after a timeout, or on a user signal. 

Module [`traceback`](https://docs.python.org/3/library/traceback.html#module-traceback "traceback: Print or retrieve a stack traceback.")
    
Standard interface to extract, format and print stack traces of Python programs.
The typical usage to break into the debugger is to insert:
```
importpdb; pdb.set_trace()

```

Or:
```
breakpoint()

```

at the location you want to break into the debugger, and then run the program. You can then step through the code following this statement, and continue running without the debugger using the [`continue`](https://docs.python.org/3/library/pdb.html#pdbcommand-continue) command.
Changed in version 3.7: The built-in [`breakpoint()`](https://docs.python.org/3/library/functions.html#breakpoint "breakpoint"), when called with defaults, can be used instead of `import pdb; pdb.set_trace()`.
```
defdouble(x):
  breakpoint()
  return x * 2
val = 3
print(f"{val} * 2 is {double(val)}")

```

The debugger’s prompt is `(Pdb)`, which is the indicator that you are in debug mode:
```
> ...(2)double()
-> breakpoint()
(Pdb) p x
3
(Pdb) continue
3 * 2 is 6