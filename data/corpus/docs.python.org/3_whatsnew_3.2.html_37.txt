Title: Python 3.2 Changes and Updates
URL: https://docs.python.org/3/whatsnew/3.2.html
Summary: The document outlines various small changes to the C-API and updates made to the Mac OS X build in Python 3.2. It highlights a known issue with the default Tcl/Tk on Mac OS X 10.6 and recommends using an updated version. Additionally, it introduces the 'Porting to Python 3.2' section, which discusses changes and bugfixes that users may need to address in their code.
---

There were a number of other small changes to the C-API. See the [Misc/NEWS](https://github.com/python/cpython/blob/v3.2.6/Misc/NEWS) file for a complete list.
Also, there were a number of updates to the Mac OS X build, see [Mac/BuildScript/README.txt](https://github.com/python/cpython/blob/v3.2.6/Mac/BuildScript/README.txt) for details. For users running a 32/64-bit build, there is a known problem with the default Tcl/Tk on Mac OS X 10.6. Accordingly, we recommend installing an updated alternative such as [ActiveState Tcl/Tk 8.5.9](https://web.archive.org/web/20101208191259/https://www.activestate.com/activetcl/downloads). See <https://www.python.org/download/mac/tcltk/> for additional details.
## Porting to Python 3.2[¶](https://docs.python.org/3/whatsnew/3.2.html#porting-to-python-3-2 "Link to this heading")
This section lists previously described changes and other bugfixes that may require changes to your code:
  * The [`configparser`](https://docs.python.org/3/library/configparser.html#module-configparser "configparser: Configuration file parser.") module has a number of clean-ups. The major change is to replace the old `ConfigParser` class with long-standing preferred alternative `SafeConfigParser`. In addition there are a number of smaller incompatibilities:
    * The interpolation syntax is now validated on [`get()`](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.get "configparser.ConfigParser.get") and [`set()`](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.set "configparser.ConfigParser.set") operations. In the default interpolation scheme, only two tokens with percent signs are valid: `%(name)s` and `%%`, the latter being an escaped percent sign.
    * The [`set()`](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.set "configparser.ConfigParser.set") and [`add_section()`](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.add_section "configparser.ConfigParser.add_section") methods now verify that values are actual strings. Formerly, unsupported types could be introduced unintentionally.
    * Duplicate sections or options from a single source now raise either [`DuplicateSectionError`](https://docs.python.org/3/library/configparser.html#configparser.DuplicateSectionError "configparser.DuplicateSectionError") or [`DuplicateOptionError`](https://docs.python.org/3/library/configparser.html#configparser.DuplicateOptionError "configparser.DuplicateOptionError"). Formerly, duplicates would silently overwrite a previous entry.
    * Inline comments are now disabled by default so now the **;** character can be safely used in values.
    * Comments now can be indented. Consequently, for **;** or **#** to appear at the start of a line in multiline values, it has to be interpolated. This keeps comment prefix characters in values from being mistaken as comments.
    * `""` is now a valid value and is no longer automatically converted to an empty string. For empty strings, use `"option ="` in a line.
  * The `nntplib` module was reworked extensively, meaning that its APIs are often incompatible with the 3.1 APIs.
  * [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") objects can no longer be used as filenames; instead, they should be converted to [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes").
  * The `array.tostring()` and `array.fromstring()` have been renamed to [`array.tobytes()`](https://docs.python.org/3/library/array.html#array.array.tobytes "array.array.tobytes") and [`array.frombytes()`](https://docs.python.org/3/library/array.html#array.array.frombytes "array.array.frombytes") for clarity. The old names have been deprecated. (See [bpo-8990](https://bugs.python.org/issue?@action=redirect&bpo=8990).)
  * `PyArg_Parse*()` functions:
    * “t#” format has been removed: use “s#” or “s*” instead
    * “w” and “w#” formats has been removed: use “w*” instead
  * The `PyCObject` type, deprecated in 3.1, has been removed. To wrap opaque C pointers in Python objects, the [`PyCapsule`](https://docs.python.org/3/c-api/capsule.html#c.PyCapsule "PyCapsule") API should be used instead; the new type has a well-defined interface for passing typing safety information and a less complicated signature for calling a destructor.
  * The `sys.setfilesystemencoding()` function was removed because it had a flawed design.
  * The [`random.seed()`](https://docs.python.org/3/library/random.html#random.seed "random.seed") function and method now salt string seeds with an sha512 hash function. To access the previous version of _seed_ in order to reproduce Python 3.1 sequences, set the _version_ argument to _1_ , `random.seed(s, version=1)`.
  * The previously deprecated `string.maketrans()` function has been removed in favor of the static methods [`bytes.maketrans()`](https://docs.python.org/3/library/stdtypes.html#bytes.maketrans "bytes.maketrans") an