Title: String and Integer Presentation Types in Python
URL: https://docs.python.org/3/library/string.html
Summary: This section outlines the various string and integer presentation types available in Python. String types include `'s'` and `None`, while integer types include binary (`'b'`), character (`'c'`), decimal (`'d'`), octal (`'o'`), and hexadecimal formats (`'x'`, `'X'`). Each type dictates the manner in which data is formatted and presented.
---

ontent. The _precision_ is not allowed for integer presentation types.
Finally, the _type_ determines how the data should be presented.
The available string presentation types are:
> Type | Meaning  
> ---|---  
> `'s'` | String format. This is the default type for strings and may be omitted.  
> None | The same as `'s'`.  
The available integer presentation types are:
> Type | Meaning  
> ---|---  
> `'b'` | Binary format. Outputs the number in base 2.  
> `'c'` | Character. Converts the integer to the corresponding unicode character before printing.  
> `'d'` | Decimal Integer. Outputs the number in base 10.  
> `'o'` | Octal format. Outputs the number in base 8.  
> `'x'` | Hex format. Outputs the number in base 16, using lower-case letters for the digits above 9.  
> `'X'` | Hex format. Outputs the number in base 16, using upper-case letters for the digits above 9. In case `'#'` is specified, the prefix `'0x'` will be upper-cased to `'0X'` as well.  
> `'n'` | Number. This is the same as `'d'`, except that it uses the current locale setting to insert the appropriate digit group separators.  
> None | The same as `'d'`.  
In addition to the above presentation types, integers can be formatted with the floating-point presentation types listed below (except `'n'` and `None`). When doing so, [`float()`](https://docs.python.org/3/library/functions.html#float "float") is used to convert the integer to a floating-point number before formatting.
The available presentation types for [`float`](https://docs.python.org/3/library/functions.html#float "float") and [`Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal") values are:
> Type | Meaning  
> ---|---  
> `'e'` | Scientific notation. For a given precision `p`, formats the number in scientific notation with the letter ‘e’ separating the coefficient from the exponent. The coefficient has one digit before and `p` digits after the decimal point, for a total of `p + 1` significant digits. With no precision given, uses a precision of `6` digits after the decimal point for [`float`](https://docs.python.org/3/library/functions.html#float "float"), and shows all coefficient digits for [`Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal"). If `p=0`, the decimal point is omitted unless the `#` option is used.  
> `'E'` | Scientific notation. Same as `'e'` except it uses an upper case ‘E’ as the separator character.  
> `'f'` | Fixed-point notation. For a given precision `p`, formats the number as a decimal number with exactly `p` digits following the decimal point. With no precision given, uses a precision of `6` digits after the decimal point for [`float`](https://docs.python.org/3/library/functions.html#float "float"), and uses a precision large enough to show all coefficient digits for [`Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal"). If `p=0`, the decimal point is omitted unless the `#` option is used.  
> `'F'` | Fixed-point notation. Same as `'f'`, but converts `nan` to `NAN` and `inf` to `INF`.  
> `'g'` | General format. For a given precision `p >= 1`, this rounds the number to `p` significant digits and then formats the result in either fixed-point format or in scientific notation, depending on its magnitude. A precision of `0` is treated as equivalent to a precision of `1`. The precise rules are as follows: suppose that the result formatted with presentation type `'e'` and precision `p-1` would have exponent `exp`. Then, if `m <= exp < p`, where `m` is -4 for floats and -6 for [`Decimals`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal"), the number is formatted with presentation type `'f'` and precision `p-1-exp`. Otherwise, the number is formatted with presentation type `'e'` and precision `p-1`. In both cases insignificant trailing zeros are removed from the significand, and the decimal point is also removed if there are no remaining digits following it, unless the `'#'` option is used. With no precision given, uses a precision of `6` significant digits for [`float`](https://docs.python.org/3/library/functions.html#float "float"). For [`Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal"), the coefficient of the result is formed from the coefficient digits of the value; scientific notation is used for values smaller than `1e-6` in absolute value and values where the place value of the least significant digit is larger than 1, and fixed-point notation is used otherwise. Positive and negative infinity, positive and negative zero, and nans, are formatted as `inf`, `-inf`, `0`, `-0` and `nan` respectively, regardless of the precision.  
> `'G'` | General format. Same as `'g'` except switches to `'E'` if the number gets too large. The representations of infinity and NaN are uppercased, too.  
> `'n'` | Number.