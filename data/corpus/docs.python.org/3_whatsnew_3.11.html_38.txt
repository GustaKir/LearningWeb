Title: Porting to Python 3.11
URL: https://docs.python.org/3/whatsnew/3.11.html
Summary: Python 3.11 introduces changes where some macros are replaced with static inline functions, which primarily benefits users by reducing compilation warnings. However, for the limited C API set to 3.11 or higher, users must manually cast their arguments. Additionally, the `PyErr_SetExcInfo()` function no longer requires `type` and `traceback` arguments as these are automatically derived by the interpreter.
---

### Porting to Python 3.11[Â¶](https://docs.python.org/3/whatsnew/3.11.html#whatsnew311-c-api-porting "Link to this heading")
  * Some macros have been converted to static inline functions to avoid [macro pitfalls](https://gcc.gnu.org/onlinedocs/cpp/Macro-Pitfalls.html). The change should be mostly transparent to users, as the replacement functions will cast their arguments to the expected types to avoid compiler warnings due to static type checks. However, when the limited C API is set to >=3.11, these casts are not done, and callers will need to cast arguments to their expected types. See [**PEP 670**](https://peps.python.org/pep-0670/) for more details. (Contributed by Victor Stinner and Erlend E. Aasland in [gh-89653](https://github.com/python/cpython/issues/89653).)
  * [`PyErr_SetExcInfo()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_SetExcInfo "PyErr_SetExcInfo") no longer uses the `type` and `traceback` arguments, the interpreter now derives those values from the exception instance (the `value` argument). The function still steals references of all three arguments. (Contributed by Irit Katriel in [bpo-45711](https://bugs.python.org/issue?@action=redirect&bpo=45711).)
  * [`PyErr_GetExcInfo()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_GetExcInfo "PyErr_GetExcInfo") now derives the `type` and `traceback` fields of the result from the exception instance (the `value` field). (Contributed by Irit Katriel in [bpo-45711](https://bugs.python.org/issue?@action=redirect&bpo=45711).)
  * [`_frozen`](https://docs.python.org/3/c-api/import.html#c._frozen "_frozen") has a new `is_package` field to indicate whether or not the frozen module is a package. Previously, a negative value in the `size` field was the indicator. Now only non-negative values be used for `size`. (Contributed by Kumar Aditya in [bpo-46608](https://bugs.python.org/issue?@action=redirect&bpo=46608).)
  * [`_PyFrameEvalFunction()`](https://docs.python.org/3/c-api/init.html#c._PyFrameEvalFunction "_PyFrameEvalFunction") now takes `_PyInterpreterFrame*` as its second parameter, instead of `PyFrameObject*`. See [**PEP 523**](https://peps.python.org/pep-0523/) for more details of how to use this function pointer type.
  * `PyCode_New()` and `PyCode_NewWithPosOnlyArgs()` now take an additional `exception_table` argument. Using these functions should be avoided, if at all possible. To get a custom code object: create a code object using the compiler, then get a modified version with the `replace` method.
  * [`PyCodeObject`](https://docs.python.org/3/c-api/code.html#c.PyCodeObject "PyCodeObject") no longer has the `co_code`, `co_varnames`, `co_cellvars` and `co_freevars` fields. Instead, use [`PyCode_GetCode()`](https://docs.python.org/3/c-api/code.html#c.PyCode_GetCode "PyCode_GetCode"), [`PyCode_GetVarnames()`](https://docs.python.org/3/c-api/code.html#c.PyCode_GetVarnames "PyCode_GetVarnames"), [`PyCode_GetCellvars()`](https://docs.python.org/3/c-api/code.html#c.PyCode_GetCellvars "PyCode_GetCellvars") and [`PyCode_GetFreevars()`](https://docs.python.org/3/c-api/code.html#c.PyCode_GetFreevars "PyCode_GetFreevars") respectively to access them via the C API. (Contributed by Brandt Bucher in [bpo-46841](https://bugs.python.org/issue?@action=redirect&bpo=46841) and Ken Jin in [gh-92154](https://github.com/python/cpython/issues/92154) and [gh-94936](https://github.com/python/cpython/issues/94936).)
  * The old trashcan macros (`Py_TRASHCAN_SAFE_BEGIN`/`Py_TRASHCAN_SAFE_END`) are now deprecated. They should be replaced by the new macros `Py_TRASHCAN_BEGIN` and `Py_TRASHCAN_END`.
A tp_dealloc function that has the old macros, such as:
```
static void
mytype_dealloc(mytype *p)
{
  PyObject_GC_UnTrack(p);
  Py_TRASHCAN_SAFE_BEGIN(p);
  ...
  Py_TRASHCAN_SAFE_END
}

```

should migrate to the new macros as follows:
```
static void
mytype_dealloc(mytype *p)
{
  PyObject_GC_UnTrack(p);
  Py_TRASHCAN_BEGIN(p, mytype_dealloc)
  ...
  Py_TRASHCAN_END
}

```

Note that `Py_TRASHCAN_BEGIN` has a second argument which should be the deallocation function it is in.
To support older Python versions in the same codebase, you can define the following macros and use them throughout the code (credit: these were copied from the `mypy` codebase):
```
#if PY_VERSION_HEX >= 0x03080000
# define CPy_TRASHCAN_BEGIN(op, dealloc) Py_TRASHCAN_BEGIN(op, dealloc)
# define CPy_TRASHCAN_END(op) Py_TRASHCAN_END
#else
# define CPy_TRASHCAN_BEGIN(op, dealloc) Py_TRASHCAN_SAFE_BEGIN(op)
# define CPy_TRASHCAN_END(op) Py_TRASHCAN_SAFE_END(op)
#endif