Title: METH_KEYWORDS in Python C API
URL: https://docs.python.org/3/c-api/structures.html
Summary: METH_KEYWORDS is an extension of METH_FASTCALL that supports keyword arguments in Python's C API. It uses PyCFunctionFastWithKeywords, passing keyword argument names as an additional fourth parameter in the form of a tuple, with positional arguments following in the _args_ array.
---

[METH_FASTCALL](https://docs.python.org/3/c-api/structures.html#c.METH_FASTCALL "METH_FASTCALL")|[METH_KEYWORDS](https://docs.python.org/3/c-api/structures.html#c.METH_KEYWORDS "METH_KEYWORDS")
    
Extension of [`METH_FASTCALL`](https://docs.python.org/3/c-api/structures.html#c.METH_FASTCALL "METH_FASTCALL") supporting also keyword arguments, with methods of type [`PyCFunctionFastWithKeywords`](https://docs.python.org/3/c-api/structures.html#c.PyCFunctionFastWithKeywords "PyCFunctionFastWithKeywords"). Keyword arguments are passed the same way as in the [vectorcall protocol](https://docs.python.org/3/c-api/call.html#vectorcall): there is an additional fourth [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")* parameter which is a tuple representing the names of the keyword arguments (which are guaranteed to be strings) or possibly `NULL` if there are no keywords. The values of the keyword arguments are stored in the _args_ array, after the positional arguments.
Added in version 3.7. 

METH_METHOD[¶](https://docs.python.org/3/c-api/structures.html#c.METH_METHOD "Link to this definition")
    
Can only be used in the combination with other flags: [METH_METHOD | METH_FASTCALL | METH_KEYWORDS](https://docs.python.org/3/c-api/structures.html#meth-method-meth-fastcall-meth-keywords). 

[METH_METHOD](https://docs.python.org/3/c-api/structures.html#c.METH_METHOD "METH_METHOD")|[METH_FASTCALL](https://docs.python.org/3/c-api/structures.html#c.METH_FASTCALL "METH_FASTCALL")|[METH_KEYWORDS](https://docs.python.org/3/c-api/structures.html#c.METH_KEYWORDS "METH_KEYWORDS")
    
Extension of [METH_FASTCALL | METH_KEYWORDS](https://docs.python.org/3/c-api/structures.html#meth-fastcall-meth-keywords) supporting the _defining class_ , that is, the class that contains the method in question. The defining class might be a superclass of `Py_TYPE(self)`.
The method needs to be of type [`PyCMethod`](https://docs.python.org/3/c-api/structures.html#c.PyCMethod "PyCMethod"), the same as for `METH_FASTCALL | METH_KEYWORDS` with `defining_class` argument added after `self`.
Added in version 3.9. 

METH_NOARGS[¶](https://docs.python.org/3/c-api/structures.html#c.METH_NOARGS "Link to this definition")
    
Methods without parameters don’t need to check whether arguments are given if they are listed with the [`METH_NOARGS`](https://docs.python.org/3/c-api/structures.html#c.METH_NOARGS "METH_NOARGS") flag. They need to be of type [`PyCFunction`](https://docs.python.org/3/c-api/structures.html#c.PyCFunction "PyCFunction"). The first parameter is typically named _self_ and will hold a reference to the module or object instance. In all cases the second parameter will be `NULL`.
The function must have 2 parameters. Since the second parameter is unused, [`Py_UNUSED`](https://docs.python.org/3/c-api/intro.html#c.Py_UNUSED "Py_UNUSED") can be used to prevent a compiler warning. 

METH_O[¶](https://docs.python.org/3/c-api/structures.html#c.METH_O "Link to this definition")
    
Methods with a single object argument can be listed with the [`METH_O`](https://docs.python.org/3/c-api/structures.html#c.METH_O "METH_O") flag, instead of invoking [`PyArg_ParseTuple()`](https://docs.python.org/3/c-api/arg.html#c.PyArg_ParseTuple "PyArg_ParseTuple") with a `"O"` argument. They have the type [`PyCFunction`](https://docs.python.org/3/c-api/structures.html#c.PyCFunction "PyCFunction"), with the _self_ parameter, and a [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")* parameter representing the single argument.
These two constants are not used to indicate the calling convention but the binding when use with methods of classes. These may not be used for functions defined for modules. At most one of these flags may be set for any given method. 

METH_CLASS[¶](https://docs.python.org/3/c-api/structures.html#c.METH_CLASS "Link to this definition")
    
The method will be passed the type object as the first parameter rather than an instance of the type. This is used to create _class methods_ , similar to what is created when using the [`classmethod()`](https://docs.python.org/3/library/functions.html#classmethod "classmethod") built-in function. 

METH_STATIC[¶](https://docs.python.org/3/c-api/structures.html#c.METH_STATIC "Link to this definition")
    
The method will be passed `NULL` as the first parameter rather than an instance of the type. This is used to create _static methods_ , similar to what is created when using the [`staticmethod()`](https://docs.python.org/3/library/functions.html#staticmethod "staticmethod") built-in function.
One other constant controls whether a method is loaded in place of another definition with the same method name.