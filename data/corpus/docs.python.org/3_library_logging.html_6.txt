Title: Logger Methods in Python's Logging Module
URL: https://docs.python.org/3/library/logging.html
Summary: This section describes various methods of the Logger class in Python's logging module, including how to remove filters, apply filters to records, and add or remove handlers. It explains the functionality of each method, detailing how filters determine the processing of log records.
---

removeFilter(_filter_)[¶](https://docs.python.org/3/library/logging.html#logging.Logger.removeFilter "Link to this definition")
    
Removes the specified filter _filter_ from this logger. 

filter(_record_)[¶](https://docs.python.org/3/library/logging.html#logging.Logger.filter "Link to this definition")
    
Apply this logger’s filters to the record and return `True` if the record is to be processed. The filters are consulted in turn, until one of them returns a false value. If none of them return a false value, the record will be processed (passed to handlers). If one returns a false value, no further processing of the record occurs. 

addHandler(_hdlr_)[¶](https://docs.python.org/3/library/logging.html#logging.Logger.addHandler "Link to this definition")
    
Adds the specified handler _hdlr_ to this logger. 

removeHandler(_hdlr_)[¶](https://docs.python.org/3/library/logging.html#logging.Logger.removeHandler "Link to this definition")
    
Removes the specified handler _hdlr_ from this logger. 

findCaller(_stack_info =False_, _stacklevel =1_)[¶](https://docs.python.org/3/library/logging.html#logging.Logger.findCaller "Link to this definition")
    
Finds the caller’s source filename and line number. Returns the filename, line number, function name and stack information as a 4-element tuple. The stack information is returned as `None` unless _stack_info_ is `True`.
The _stacklevel_ parameter is passed from code calling the [`debug()`](https://docs.python.org/3/library/logging.html#logging.debug "logging.debug") and other APIs. If greater than 1, the excess is used to skip stack frames before determining the values to be returned. This will generally be useful when calling logging APIs from helper/wrapper code, so that the information in the event log refers not to the helper/wrapper code, but to the code that calls it. 

handle(_record_)[¶](https://docs.python.org/3/library/logging.html#logging.Logger.handle "Link to this definition")
    
Handles a record by passing it to all handlers associated with this logger and its ancestors (until a false value of _propagate_ is found). This method is used for unpickled records received from a socket, as well as those created locally. Logger-level filtering is applied using [`filter()`](https://docs.python.org/3/library/logging.html#logging.Logger.filter "logging.Logger.filter"). 

makeRecord(_name_ , _level_ , _fn_ , _lno_ , _msg_ , _args_ , _exc_info_ , _func =None_, _extra =None_, _sinfo =None_)[¶](https://docs.python.org/3/library/logging.html#logging.Logger.makeRecord "Link to this definition")
    
This is a factory method which can be overridden in subclasses to create specialized [`LogRecord`](https://docs.python.org/3/library/logging.html#logging.LogRecord "logging.LogRecord") instances. 

hasHandlers()[¶](https://docs.python.org/3/library/logging.html#logging.Logger.hasHandlers "Link to this definition")
    
Checks to see if this logger has any handlers configured. This is done by looking for handlers in this logger and its parents in the logger hierarchy. Returns `True` if a handler was found, else `False`. The method stops searching up the hierarchy whenever a logger with the ‘propagate’ attribute set to false is found - that will be the last logger which is checked for the existence of handlers.
Added in version 3.2.
Changed in version 3.7: Loggers can now be pickled and unpickled.
## Logging Levels[¶](https://docs.python.org/3/library/logging.html#logging-levels "Link to this heading")
The numeric values of logging levels are given in the following table. These are primarily of interest if you want to define your own levels, and need them to have specific values relative to the predefined levels. If you define a level with the same numeric value, it overwrites the predefined value; the predefined name is lost.
Level | Numeric value | What it means / When to use it  
---|---|--- 

logging.NOTSET[¶](https://docs.python.org/3/library/logging.html#logging.NOTSET "Link to this definition")
| 0 | When set on a logger, indicates that ancestor loggers are to be consulted to determine the effective level. If that still resolves to `NOTSET`, then all events are logged. When set on a handler, all events are handled. 

logging.DEBUG[¶](https://docs.python.org/3/library/logging.html#logging.DEBUG "Link to this definition")
| 10 | Detailed information, typically only of interest to a developer trying to diagnose a problem. 

logging.INFO[¶](https://docs.python.org/3/library/logging.html#logging.INFO "Link to this definition")
| 20 | Confirmation that things are working as expected. 

logging.WARNING[¶](https://docs.python.org/3/library/logging.html#logging.WARNING "Link to this definition")
| 30 | An indication that something unexpected happened, or that a problem might occur in the near future (e.g. ‘disk space low’). The software is still working as expected.