Title: Action Classes in argparse
URL: https://docs.python.org/3/library/argparse.html
Summary: This section discusses Action classes in the argparse library, introduced in version 3.13. It outlines how Action classes implement the Action API for processing command-line arguments and details the properties of the argparse.Action class used for argument parsing.
---

```

Added in version 3.13.
### Action classes[¶](https://docs.python.org/3/library/argparse.html#action-classes "Link to this heading")
`Action` classes implement the Action API, a callable which returns a callable which processes arguments from the command-line. Any object which follows this API may be passed as the `action` parameter to [`add_argument()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument "argparse.ArgumentParser.add_argument"). 

_class_ argparse.Action(_option_strings_ , _dest_ , _nargs =None_, _const =None_, _default =None_, _type =None_, _choices =None_, _required =False_, _help =None_, _metavar =None_)[¶](https://docs.python.org/3/library/argparse.html#argparse.Action "Link to this definition")
    
`Action` objects are used by an [`ArgumentParser`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser "argparse.ArgumentParser") to represent the information needed to parse a single argument from one or more strings from the command line. The `Action` class must accept the two positional arguments plus any keyword arguments passed to [`ArgumentParser.add_argument()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument "argparse.ArgumentParser.add_argument") except for the `action` itself.
Instances of `Action` (or return value of any callable to the `action` parameter) should have attributes `dest`, `option_strings`, `default`, `type`, `required`, `help`, etc. defined. The easiest way to ensure these attributes are defined is to call `Action.__init__()`. 

__call__(_parser_ , _namespace_ , _values_ , _option_string =None_)[¶](https://docs.python.org/3/library/argparse.html#argparse.Action.__call__ "Link to this definition")
    
`Action` instances should be callable, so subclasses must override the `__call__()` method, which should accept four parameters:
  * _parser_ - The [`ArgumentParser`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser "argparse.ArgumentParser") object which contains this action.
  * _namespace_ - The [`Namespace`](https://docs.python.org/3/library/argparse.html#argparse.Namespace "argparse.Namespace") object that will be returned by [`parse_args()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.parse_args "argparse.ArgumentParser.parse_args"). Most actions add an attribute to this object using [`setattr()`](https://docs.python.org/3/library/functions.html#setattr "setattr").
  * _values_ - The associated command-line arguments, with any type conversions applied. Type conversions are specified with the [type](https://docs.python.org/3/library/argparse.html#type) keyword argument to [`add_argument()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument "argparse.ArgumentParser.add_argument").
  * _option_string_ - The option string that was used to invoke this action. The `option_string` argument is optional, and will be absent if the action is associated with a positional argument.


The `__call__()` method may perform arbitrary actions, but will typically set attributes on the `namespace` based on `dest` and `values`. 

format_usage()[¶](https://docs.python.org/3/library/argparse.html#argparse.Action.format_usage "Link to this definition")
    
`Action` subclasses can define a `format_usage()` method that takes no argument and return a string which will be used when printing the usage of the program. If such method is not provided, a sensible default will be used.
## The parse_args() method[¶](https://docs.python.org/3/library/argparse.html#the-parse-args-method "Link to this heading") 

ArgumentParser.parse_args(_args =None_, _namespace =None_)[¶](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.parse_args "Link to this definition")
    
Convert argument strings to objects and assign them as attributes of the namespace. Return the populated namespace.
Previous calls to [`add_argument()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument "argparse.ArgumentParser.add_argument") determine exactly what objects are created and how they are assigned. See the documentation for `add_argument()` for details.
  * [args](https://docs.python.org/3/library/argparse.html#args) - List of strings to parse. The default is taken from [`sys.argv`](https://docs.python.org/3/library/sys.html#sys.argv "sys.argv").
  * [namespace](https://docs.python.org/3/library/argparse.html#namespace) - An object to take the attributes. The default is a new empty [`Namespace`](https://docs.python.org/3/library/argparse.html#argparse.Namespace "argparse.Namespace") object.