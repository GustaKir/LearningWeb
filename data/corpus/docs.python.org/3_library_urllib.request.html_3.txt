Title: Updating SSL Parameters and Installing Default Opener
URL: https://docs.python.org/3/library/urllib.request.html
Summary: This section details how to set ALPN protocols using set_alpn_protocols() and highlights changes in version 3.13, which removes the _cafile_, _capath_, and _cadefault_ parameters, advising the use of the _context_ parameter instead. It also explains how to install a default OpenerDirector instance using urllib.request.install_opener(), which is necessary for custom opener functionality.
---

should set ALPN protocols with [`set_alpn_protocols()`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_alpn_protocols "ssl.SSLContext.set_alpn_protocols").
Changed in version 3.13: Remove _cafile_ , _capath_ and _cadefault_ parameters: use the _context_ parameter instead. 

urllib.request.install_opener(_opener_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.install_opener "Link to this definition")
    
Install an [`OpenerDirector`](https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector "urllib.request.OpenerDirector") instance as the default global opener. Installing an opener is only necessary if you want urlopen to use that opener; otherwise, simply call [`OpenerDirector.open()`](https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector.open "urllib.request.OpenerDirector.open") instead of [`urlopen()`](https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen "urllib.request.urlopen"). The code does not check for a real [`OpenerDirector`](https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector "urllib.request.OpenerDirector"), and any class with the appropriate interface will work. 

urllib.request.build_opener([_handler_ , _..._])[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.build_opener "Link to this definition")
    
Return an [`OpenerDirector`](https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector "urllib.request.OpenerDirector") instance, which chains the handlers in the order given. _handler_ s can be either instances of [`BaseHandler`](https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler "urllib.request.BaseHandler"), or subclasses of [`BaseHandler`](https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler "urllib.request.BaseHandler") (in which case it must be possible to call the constructor without any parameters). Instances of the following classes will be in front of the _handler_ s, unless the _handler_ s contain them, instances of them or subclasses of them: [`ProxyHandler`](https://docs.python.org/3/library/urllib.request.html#urllib.request.ProxyHandler "urllib.request.ProxyHandler") (if proxy settings are detected), [`UnknownHandler`](https://docs.python.org/3/library/urllib.request.html#urllib.request.UnknownHandler "urllib.request.UnknownHandler"), [`HTTPHandler`](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPHandler "urllib.request.HTTPHandler"), [`HTTPDefaultErrorHandler`](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPDefaultErrorHandler "urllib.request.HTTPDefaultErrorHandler"), [`HTTPRedirectHandler`](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPRedirectHandler "urllib.request.HTTPRedirectHandler"), [`FTPHandler`](https://docs.python.org/3/library/urllib.request.html#urllib.request.FTPHandler "urllib.request.FTPHandler"), [`FileHandler`](https://docs.python.org/3/library/urllib.request.html#urllib.request.FileHandler "urllib.request.FileHandler"), [`HTTPErrorProcessor`](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPErrorProcessor "urllib.request.HTTPErrorProcessor").
If the Python installation has SSL support (i.e., if the [`ssl`](https://docs.python.org/3/library/ssl.html#module-ssl "ssl: TLS/SSL wrapper for socket objects") module can be imported), [`HTTPSHandler`](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPSHandler "urllib.request.HTTPSHandler") will also be added.
A [`BaseHandler`](https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler "urllib.request.BaseHandler") subclass may also change its `handler_order` attribute to modify its position in the handlers list. 

urllib.request.pathname2url(_path_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.pathname2url "Link to this definition")
    
Convert the given local path to a `file:` URL. This function uses [`quote()`](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote "urllib.parse.quote") function to encode the path. For historical reasons, the return value omits the `file:` scheme prefix. This example shows the function being used on Windows:
>>>```
>>> fromurllib.requestimport pathname2url
>>> path = 'C:\\Program Files'
>>> 'file:' + pathname2url(path)
'file:///C:/Program%20Files'

```


urllib.request.url2pathname(_url_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.url2pathname "Link to this definition")
    
Convert the given `file:` URL to a local path. This function uses [`unquote()`](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.unquote "urllib.parse.unquote") to decode the URL. For historical reasons, the given value _must_ omit the `file:` scheme prefix. This example shows the function being used on Windows:
>>>