Title: threading.TIMEOUT_MAX Constant
URL: https://docs.python.org/3/library/threading.html
Summary: threading.TIMEOUT_MAX defines the maximum value for the _timeout_ parameter in blocking functions such as Lock.acquire() and Condition.wait(). Specifying a timeout exceeding this limit will result in an OverflowError. This feature was introduced in version 3.2.
---

threading.TIMEOUT_MAX[¶](https://docs.python.org/3/library/threading.html#threading.TIMEOUT_MAX "Link to this definition")
    
The maximum value allowed for the _timeout_ parameter of blocking functions ([`Lock.acquire()`](https://docs.python.org/3/library/threading.html#threading.Lock.acquire "threading.Lock.acquire"), [`RLock.acquire()`](https://docs.python.org/3/library/threading.html#threading.RLock.acquire "threading.RLock.acquire"), [`Condition.wait()`](https://docs.python.org/3/library/threading.html#threading.Condition.wait "threading.Condition.wait"), etc.). Specifying a timeout greater than this value will raise an [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError").
Added in version 3.2.
This module defines a number of classes, which are detailed in the sections below.
The design of this module is loosely based on Java’s threading model. However, where Java makes locks and condition variables basic behavior of every object, they are separate objects in Python. Python’s [`Thread`](https://docs.python.org/3/library/threading.html#threading.Thread "threading.Thread") class supports a subset of the behavior of Java’s Thread class; currently, there are no priorities, no thread groups, and threads cannot be destroyed, stopped, suspended, resumed, or interrupted. The static methods of Java’s Thread class, when implemented, are mapped to module-level functions.
All of the methods described below are executed atomically.
## Thread-Local Data[¶](https://docs.python.org/3/library/threading.html#thread-local-data "Link to this heading")
Thread-local data is data whose values are thread specific. To manage thread-local data, just create an instance of [`local`](https://docs.python.org/3/library/threading.html#threading.local "threading.local") (or a subclass) and store attributes on it:
```
mydata = threading.local()
mydata.x = 1