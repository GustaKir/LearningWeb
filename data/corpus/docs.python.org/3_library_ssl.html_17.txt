Title: SSLSocket and SSL Contexts Overview
URL: https://docs.python.org/3/library/ssl.html
Summary: This section discusses the SSLSession for an SSL connection associated with SSLSocket, available post-TLS handshake for both client and server sockets. It highlights the ability to set the session for client sockets before calling do_handshake() to enable session reuse. Additionally, it introduces SSL contexts, which store longer-lived SSL configuration options and certificates, essential for maintaining secure connections.
---

SSLSocket.session[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.session "Link to this definition")
    
The [`SSLSession`](https://docs.python.org/3/library/ssl.html#ssl.SSLSession "ssl.SSLSession") for this SSL connection. The session is available for client and server side sockets after the TLS handshake has been performed. For client sockets the session can be set before [`do_handshake()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.do_handshake "ssl.SSLSocket.do_handshake") has been called to reuse a session.
Added in version 3.6. 

SSLSocket.session_reused[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.session_reused "Link to this definition")
    
Added in version 3.6.
## SSL Contexts[¶](https://docs.python.org/3/library/ssl.html#ssl-contexts "Link to this heading")
Added in version 3.2.
An SSL context holds various data longer-lived than single SSL connections, such as SSL configuration options, certificate(s) and private key(s). It also manages a cache of SSL sessions for server-side sockets, in order to speed up repeated connections from the same clients. 

_class_ ssl.SSLContext(_protocol =None_)[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLContext "Link to this definition")
    
Create a new SSL context. You may pass _protocol_ which must be one of the `PROTOCOL_*` constants defined in this module. The parameter specifies which version of the SSL protocol to use. Typically, the server chooses a particular protocol version, and the client must adapt to the server’s choice. Most of the versions are not interoperable with the other versions. If not specified, the default is [`PROTOCOL_TLS`](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS "ssl.PROTOCOL_TLS"); it provides the most compatibility with other versions.
Here’s a table showing which versions in a client (down the side) can connect to which versions in a server (along the top):
_client_ / **server** | **SSLv2** | **SSLv3** | **TLS** [[3]](https://docs.python.org/3/library/ssl.html#id9) | **TLSv1** | **TLSv1.1** | **TLSv1.2**  
---|---|---|---|---|---|---  
_SSLv2_ | yes | no | no [[1]](https://docs.python.org/3/library/ssl.html#id7) | no | no | no  
_SSLv3_ | no | yes | no [[2]](https://docs.python.org/3/library/ssl.html#id8) | no | no | no  
_TLS_ (_SSLv23_) [[3]](https://docs.python.org/3/library/ssl.html#id9) | no [[1]](https://docs.python.org/3/library/ssl.html#id7) | no [[2]](https://docs.python.org/3/library/ssl.html#id8) | yes | yes | yes | yes  
_TLSv1_ | no | no | yes | yes | no | no  
_TLSv1.1_ | no | no | yes | no | yes | no  
_TLSv1.2_ | no | no | yes | no | no | yes  
Footnotes
[1] ([1](https://docs.python.org/3/library/ssl.html#id2),[2](https://docs.python.org/3/library/ssl.html#id5))
[`SSLContext`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext "ssl.SSLContext") disables SSLv2 with [`OP_NO_SSLv2`](https://docs.python.org/3/library/ssl.html#ssl.OP_NO_SSLv2 "ssl.OP_NO_SSLv2") by default.
[2] ([1](https://docs.python.org/3/library/ssl.html#id3),[2](https://docs.python.org/3/library/ssl.html#id6))
[`SSLContext`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext "ssl.SSLContext") disables SSLv3 with [`OP_NO_SSLv3`](https://docs.python.org/3/library/ssl.html#ssl.OP_NO_SSLv3 "ssl.OP_NO_SSLv3") by default.
[3] ([1](https://docs.python.org/3/library/ssl.html#id1),[2](https://docs.python.org/3/library/ssl.html#id4))
TLS 1.3 protocol will be available with [`PROTOCOL_TLS`](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS "ssl.PROTOCOL_TLS") in OpenSSL >= 1.1.1. There is no dedicated PROTOCOL constant for just TLS 1.3.
See also
[`create_default_context()`](https://docs.python.org/3/library/ssl.html#ssl.create_default_context "ssl.create_default_context") lets the [`ssl`](https://docs.python.org/3/library/ssl.html#module-ssl "ssl: TLS/SSL wrapper for socket objects") module choose security settings for a given purpose.
Changed in version 3.6: The context is created with secure default values. The options [`OP_NO_COMPRESSION`](https://docs.python.org/3/library/ssl.html#ssl.OP_NO_COMPRESSION "ssl.OP_NO_COMPRESSION"), [`OP_CIPHER_SERVER_PREFERENCE`](https://docs.python.org/3/library/ssl.html#ssl.OP_CIPHER_SERVER_PREFERENCE "ssl.OP_CIPHER_SERVER_PREFERENCE"), [`OP_SINGLE_DH_USE`](https://docs.python.org/3/library/ssl.html#ssl.OP_SINGLE_DH_USE "ssl.OP_SINGLE_DH_USE"), [`OP_SINGLE_ECDH_USE`](https://docs.python.org/3/library/ssl.html#ssl.OP_SINGLE_ECDH_USE "ssl.OP_SINGLE_ECDH_USE"), [`OP_NO_SSLv2`](https://docs.python.org/3/library/ssl.html#ssl.OP_NO_SSLv2 "ssl.OP_NO_SSLv2"), and [`OP_NO_SSLv3`](https://docs.python.org/3/library/ssl.html#ssl.OP_NO_SSLv3 "ssl.OP_NO_SSLv3") (except for [`PROTOCOL_SSLv3`](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_SSLv3 "ssl.PROTOCOL_SSLv3")) are set by default. The initial cipher suite list contains only `HIGH` ciphers, no `NULL` ciphers and no `MD5` ciphers.
Deprecated since version 3.10: [`SSLContext`](https: