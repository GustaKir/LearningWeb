Title: Float Function in Python
URL: https://docs.python.org/3/library/functions.html
Summary: The `float()` function in Python converts its argument to a floating-point number, accepting various forms of 'infinity' and numeric types. If the input exceeds the range of a Python float, an `OverflowError` is raised. The function returns 0.0 if no argument is provided, and specific delegation methods are used for general Python objects.
---

```

Case is not significant, so, for example, “inf”, “Inf”, “INFINITY”, and “iNfINity” are all acceptable spellings for positive infinity.
Otherwise, if the argument is an integer or a floating-point number, a floating-point number with the same value (within Python’s floating-point precision) is returned. If the argument is outside the range of a Python float, an [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError") will be raised.
For a general Python object `x`, `float(x)` delegates to `x.__float__()`. If [`__float__()`](https://docs.python.org/3/reference/datamodel.html#object.__float__ "object.__float__") is not defined then it falls back to [`__index__()`](https://docs.python.org/3/reference/datamodel.html#object.__index__ "object.__index__").
If no argument is given, `0.0` is returned.
The float type is described in [Numeric Types — int, float, complex](https://docs.python.org/3/library/stdtypes.html#typesnumeric).
Changed in version 3.6: Grouping digits with underscores as in code literals is allowed.
Changed in version 3.7: The parameter is now positional-only.
Changed in version 3.8: Falls back to [`__index__()`](https://docs.python.org/3/reference/datamodel.html#object.__index__ "object.__index__") if [`__float__()`](https://docs.python.org/3/reference/datamodel.html#object.__float__ "object.__float__") is not defined. 

format(_value_ , _format_spec =''_)[¶](https://docs.python.org/3/library/functions.html#format "Link to this definition")
    
Convert a _value_ to a “formatted” representation, as controlled by _format_spec_. The interpretation of _format_spec_ will depend on the type of the _value_ argument; however, there is a standard formatting syntax that is used by most built-in types: [Format Specification Mini-Language](https://docs.python.org/3/library/string.html#formatspec).
The default _format_spec_ is an empty string which usually gives the same effect as calling [`str(value)`](https://docs.python.org/3/library/stdtypes.html#str "str").
A call to `format(value, format_spec)` is translated to `type(value).__format__(value, format_spec)` which bypasses the instance dictionary when searching for the value’s [`__format__()`](https://docs.python.org/3/reference/datamodel.html#object.__format__ "object.__format__") method. A [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") exception is raised if the method search reaches [`object`](https://docs.python.org/3/library/functions.html#object "object") and the _format_spec_ is non-empty, or if either the _format_spec_ or the return value are not strings.
Changed in version 3.4: `object().__format__(format_spec)` raises [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") if _format_spec_ is not an empty string. 

_class_ frozenset(_iterable =set()_)
    
Return a new [`frozenset`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset") object, optionally with elements taken from _iterable_. `frozenset` is a built-in class. See [`frozenset`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset") and [Set Types — set, frozenset](https://docs.python.org/3/library/stdtypes.html#types-set) for documentation about this class.
For other containers see the built-in [`set`](https://docs.python.org/3/library/stdtypes.html#set "set"), [`list`](https://docs.python.org/3/library/stdtypes.html#list "list"), [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple"), and [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") classes, as well as the [`collections`](https://docs.python.org/3/library/collections.html#module-collections "collections: Container datatypes") module. 

getattr(_object_ , _name_)[¶](https://docs.python.org/3/library/functions.html#getattr "Link to this definition")


getattr(_object_ , _name_ , _default_)
    
Return the value of the named attribute of _object_. _name_ must be a string. If the string is the name of one of the object’s attributes, the result is the value of that attribute. For example, `getattr(x, 'foobar')` is equivalent to `x.foobar`. If the named attribute does not exist, _default_ is returned if provided, otherwise [`AttributeError`](https://docs.python.org/3/library/exceptions.html#AttributeError "AttributeError") is raised. _name_ need not be a Python identifier (see [`setattr()`](https://docs.python.org/3/library/functions.html#setattr "setattr")).
Note
Since [private name mangling](https://docs.python.org/3/reference/expressions.html#private-name-mangling) happens at compilation time, one must manually mangle a private attribute’s (attributes with two leading underscores) name in order to retrieve it with [`getattr()`](https://docs.python.org/3/library/functions.html#getattr "getattr").