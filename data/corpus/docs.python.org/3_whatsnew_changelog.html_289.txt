Title: Python 3.11.0 Alpha 5 Release Notes
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This release introduces several updates including the removal of invalid optimizations from the bytecode compiler, improved frame object creation during super object construction, enhanced specialization failure statistics for the COMPARE_OP bytecode, and the deprecation of delegating int() calls to __trunc__().
---

## Python 3.11.0 alpha 5[¶](https://docs.python.org/3/whatsnew/changelog.html#python-3-11-0-alpha-5 "Link to this heading")
_Release date: 2022-02-03_
### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id244 "Link to this heading")
  * [bpo-45773](https://bugs.python.org/issue?@action=redirect&bpo=45773): Remove two invalid “peephole” optimizations from the bytecode compiler.
  * [bpo-46564](https://bugs.python.org/issue?@action=redirect&bpo=46564): Do not create frame objects when creating [`super`](https://docs.python.org/3/library/functions.html#super "super") object. Patch by Kumar Aditya.
  * [bpo-45885](https://bugs.python.org/issue?@action=redirect&bpo=45885): Added more fined-grained specialization failure stats regarding the `COMPARE_OP` bytecode.
  * [bpo-44977](https://bugs.python.org/issue?@action=redirect&bpo=44977): The delegation of [`int()`](https://docs.python.org/3/library/functions.html#int "int") to `__trunc__()` is now deprecated. Calling `int(a)` when `type(a)` implements `__trunc__()` but not `__int__()` or `__index__()` now raises a [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning").
  * [bpo-46458](https://bugs.python.org/issue?@action=redirect&bpo=46458): Reorder code emitted by the compiler for a [`try`](https://docs.python.org/3/reference/compound_stmts.html#try)-[`except`](https://docs.python.org/3/reference/compound_stmts.html#except) block so that the [`else`](https://docs.python.org/3/reference/compound_stmts.html#else) block’s code immediately follows the [`try`](https://docs.python.org/3/reference/compound_stmts.html#try) body (without a jump). This is more optimal for the happy path.
  * [bpo-46527](https://bugs.python.org/issue?@action=redirect&bpo=46527): Allow passing `iterable` as a keyword argument to [`enumerate()`](https://docs.python.org/3/library/functions.html#enumerate "enumerate") again. Patch by Jelle Zijlstra.
  * [bpo-46528](https://bugs.python.org/issue?@action=redirect&bpo=46528): Replace several stack manipulation instructions (`DUP_TOP`, `DUP_TOP_TWO`, `ROT_TWO`, `ROT_THREE`, `ROT_FOUR`, and `ROT_N`) with new [`COPY`](https://docs.python.org/3/library/dis.html#opcode-COPY) and [`SWAP`](https://docs.python.org/3/library/dis.html#opcode-SWAP) instructions.
  * [bpo-46329](https://bugs.python.org/issue?@action=redirect&bpo=46329): Use two or three bytecodes to implement most calls.
Calls without named arguments are implemented as a sequence of two instructions: `PRECALL; CALL`. Calls with named arguments are implemented as a sequence of three instructions: `PRECALL; KW_NAMES; CALL`. There are two different `PRECALL` instructions: `PRECALL_FUNTION` and `PRECALL_METHOD`. The latter pairs with `LOAD_METHOD`.
This partition into pre-call and call allows better specialization, and thus better performance ultimately.
There is no change in semantics.
  * [bpo-46503](https://bugs.python.org/issue?@action=redirect&bpo=46503): Fix an assert when parsing some invalid N escape sequences in f-strings.
  * [bpo-46431](https://bugs.python.org/issue?@action=redirect&bpo=46431): Improve error message on invalid calls to `BaseExceptionGroup.__new__()`.
  * [bpo-46476](https://bugs.python.org/issue?@action=redirect&bpo=46476): Fix memory leak in code objects generated by deepfreeze. Patch by Kumar Aditya.
  * [bpo-46481](https://bugs.python.org/issue?@action=redirect&bpo=46481): Speed up calls to `weakref.ref.__call__()` by using the [**PEP 590**](https://peps.python.org/pep-0590/) `vectorcall` calling convention. Patch by Donghee Na.
  * [bpo-46417](https://bugs.python.org/issue?@action=redirect&bpo=46417): Fix a race condition on setting a type `__bases__` attribute: the internal function `add_subclass()` now gets the `PyTypeObject.tp_subclasses` member after calling [`PyWeakref_NewRef()`](https://docs.python.org/3/c-api/weakref.html#c.PyWeakref_NewRef "PyWeakref_NewRef") which can trigger a garbage collection which can indirectly modify `PyTypeObject.tp_subclasses`. Patch by Victor Stinner.
  * [bpo-46417](https://bugs.python.org/issue?@action=redirect&bpo=46417): `python -X showrefcount` now shows the total reference count after clearing and destroyed the main Python interpreter. Previously, it was shown before. Patch by Victor Stinner.
  * [bpo-43683](https://bugs.python.org/issue?@action=redirect&bpo=43683): Add ASYNC_GEN_WRAP opcode to wrap the value to be yielded in async generators. Removes the need to special case async generators in the `YIELD_VALUE` instruction.
  * [bpo-46407](https://bugs.python.org/issue?@action=redirect&bpo=46407): Optimize some modulo operations in `Objects/longobject.c`. Patch by Jeremiah Vivian.
  * [bpo-46409](https://bugs.python.org/issue?@action=redirect&bpo=46409): Add new `RETURN_GENERATOR` bytecode to make generators. Simplifies calling Python functions in the VM, as they no longer any need to special case generator functions.
Also add `JUMP_NO_IN