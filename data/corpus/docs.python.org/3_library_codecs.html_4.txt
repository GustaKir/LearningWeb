Title: Byte Order Marks in Python Codecs
URL: https://docs.python.org/3/library/codecs.html
Summary: This section lists various byte order marks (BOM) used in Python's codecs library, including BOM values for Big Endian and Little Endian formats for UTF-8, UTF-16, and UTF-32 character encodings.
---

codecs.BOM_BE[¶](https://docs.python.org/3/library/codecs.html#codecs.BOM_BE "Link to this definition")


codecs.BOM_LE[¶](https://docs.python.org/3/library/codecs.html#codecs.BOM_LE "Link to this definition")


codecs.BOM_UTF8[¶](https://docs.python.org/3/library/codecs.html#codecs.BOM_UTF8 "Link to this definition")


codecs.BOM_UTF16[¶](https://docs.python.org/3/library/codecs.html#codecs.BOM_UTF16 "Link to this definition")


codecs.BOM_UTF16_BE[¶](https://docs.python.org/3/library/codecs.html#codecs.BOM_UTF16_BE "Link to this definition")


codecs.BOM_UTF16_LE[¶](https://docs.python.org/3/library/codecs.html#codecs.BOM_UTF16_LE "Link to this definition")


codecs.BOM_UTF32[¶](https://docs.python.org/3/library/codecs.html#codecs.BOM_UTF32 "Link to this definition")


codecs.BOM_UTF32_BE[¶](https://docs.python.org/3/library/codecs.html#codecs.BOM_UTF32_BE "Link to this definition")


codecs.BOM_UTF32_LE[¶](https://docs.python.org/3/library/codecs.html#codecs.BOM_UTF32_LE "Link to this definition")
    
These constants define various byte sequences, being Unicode byte order marks (BOMs) for several encodings. They are used in UTF-16 and UTF-32 data streams to indicate the byte order used, and in UTF-8 as a Unicode signature. [`BOM_UTF16`](https://docs.python.org/3/library/codecs.html#codecs.BOM_UTF16 "codecs.BOM_UTF16") is either [`BOM_UTF16_BE`](https://docs.python.org/3/library/codecs.html#codecs.BOM_UTF16_BE "codecs.BOM_UTF16_BE") or [`BOM_UTF16_LE`](https://docs.python.org/3/library/codecs.html#codecs.BOM_UTF16_LE "codecs.BOM_UTF16_LE") depending on the platform’s native byte order, [`BOM`](https://docs.python.org/3/library/codecs.html#codecs.BOM "codecs.BOM") is an alias for [`BOM_UTF16`](https://docs.python.org/3/library/codecs.html#codecs.BOM_UTF16 "codecs.BOM_UTF16"), [`BOM_LE`](https://docs.python.org/3/library/codecs.html#codecs.BOM_LE "codecs.BOM_LE") for [`BOM_UTF16_LE`](https://docs.python.org/3/library/codecs.html#codecs.BOM_UTF16_LE "codecs.BOM_UTF16_LE") and [`BOM_BE`](https://docs.python.org/3/library/codecs.html#codecs.BOM_BE "codecs.BOM_BE") for [`BOM_UTF16_BE`](https://docs.python.org/3/library/codecs.html#codecs.BOM_UTF16_BE "codecs.BOM_UTF16_BE"). The others represent the BOM in UTF-8 and UTF-32 encodings.
## Codec Base Classes[¶](https://docs.python.org/3/library/codecs.html#codec-base-classes "Link to this heading")
The [`codecs`](https://docs.python.org/3/library/codecs.html#module-codecs "codecs: Encode and decode data and streams.") module defines a set of base classes which define the interfaces for working with codec objects, and can also be used as the basis for custom codec implementations.
Each codec has to define four interfaces to make it usable as codec in Python: stateless encoder, stateless decoder, stream reader and stream writer. The stream reader and writers typically reuse the stateless encoder/decoder to implement the file protocols. Codec authors also need to define how the codec will handle encoding and decoding errors.
### Error Handlers[¶](https://docs.python.org/3/library/codecs.html#error-handlers "Link to this heading")
To simplify and standardize error handling, codecs may implement different error handling schemes by accepting the _errors_ string argument:
>>>```
>>> 'German ß, ♬'.encode(encoding='ascii', errors='backslashreplace')
b'German \\xdf, \\u266c'
>>> 'German ß, ♬'.encode(encoding='ascii', errors='xmlcharrefreplace')
b'German &#223;, &#9836;'