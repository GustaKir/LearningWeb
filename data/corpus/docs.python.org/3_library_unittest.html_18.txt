Title: Unit Testing: Set and Dictionary Equality Assertions
URL: https://docs.python.org/3/library/unittest.html
Summary: This section describes two assertion methods, `assertSetEqual` and `assertDictEqual`, used in Python's unittest framework. `assertSetEqual` checks if two sets are equal, providing detailed error messages if they differ. `assertDictEqual` serves a similar purpose for dictionaries, highlighting differences in the event of inequality. Both methods were added in version 3.1.
---

assertSetEqual(_first_ , _second_ , _msg =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertSetEqual "Link to this definition")
    
Tests that two sets are equal. If not, an error message is constructed that lists the differences between the sets. This method is used by default when comparing sets or frozensets with [`assertEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertEqual "unittest.TestCase.assertEqual").
Fails if either of _first_ or _second_ does not have a `set.difference()` method.
Added in version 3.1. 

assertDictEqual(_first_ , _second_ , _msg =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertDictEqual "Link to this definition")
    
Test that two dictionaries are equal. If not, an error message is constructed that shows the differences in the dictionaries. This method will be used by default to compare dictionaries in calls to [`assertEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertEqual "unittest.TestCase.assertEqual").
Added in version 3.1.
Finally the [`TestCase`](https://docs.python.org/3/library/unittest.html#unittest.TestCase "unittest.TestCase") provides the following methods and attributes: 

fail(_msg =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.fail "Link to this definition")
    
Signals a test failure unconditionally, with _msg_ or `None` for the error message. 

failureException[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.failureException "Link to this definition")
    
This class attribute gives the exception raised by the test method. If a test framework needs to use a specialized exception, possibly to carry additional information, it must subclass this exception in order to “play fair” with the framework. The initial value of this attribute is [`AssertionError`](https://docs.python.org/3/library/exceptions.html#AssertionError "AssertionError"). 

longMessage[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.longMessage "Link to this definition")
    
This class attribute determines what happens when a custom failure message is passed as the msg argument to an assertXYY call that fails. `True` is the default value. In this case, the custom message is appended to the end of the standard failure message. When set to `False`, the custom message replaces the standard message.
The class setting can be overridden in individual test methods by assigning an instance attribute, self.longMessage, to `True` or `False` before calling the assert methods.
The class setting gets reset before each test call.
Added in version 3.1. 

maxDiff[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.maxDiff "Link to this definition")
    
This attribute controls the maximum length of diffs output by assert methods that report diffs on failure. It defaults to 80*8 characters. Assert methods affected by this attribute are [`assertSequenceEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertSequenceEqual "unittest.TestCase.assertSequenceEqual") (including all the sequence comparison methods that delegate to it), [`assertDictEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertDictEqual "unittest.TestCase.assertDictEqual") and [`assertMultiLineEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertMultiLineEqual "unittest.TestCase.assertMultiLineEqual").
Setting `maxDiff` to `None` means that there is no maximum length of diffs.
Added in version 3.2.
Testing frameworks can use the following methods to collect information on the test: 

countTestCases()[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.countTestCases "Link to this definition")
    
Return the number of tests represented by this test object. For [`TestCase`](https://docs.python.org/3/library/unittest.html#unittest.TestCase "unittest.TestCase") instances, this will always be `1`. 

defaultTestResult()[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.defaultTestResult "Link to this definition")
    
Return an instance of the test result class that should be used for this test case class (if no other result instance is provided to the [`run()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.run "unittest.TestCase.run") method).
For [`TestCase`](https://docs.python.org/3/library/unittest.html#unittest.TestCase "unittest.TestCase") instances, this will always be an instance of [`TestResult`](https://docs.python.org/3/library/unittest.html#unittest.TestResult "unittest.TestResult"); subclasses of [`TestCase`](https://docs.python.org/3/library/unittest.html#unittest.TestCase "unittest.TestCase") should override this as necessary.