Title: Logging to a Qt GUI Application
URL: https://docs.python.org/3/howto/logging-cookbook.html
Summary: This section discusses how to implement logging in a Qt GUI application using Python. It introduces the `QtHandler` class to facilitate logging through a callable slot for GUI updates, demonstrating how to log from both the UI and a background worker thread.
---

```

In this case, the commands don’t print anything to the console, since nothing at `WARNING` level or above is logged by them.
## A Qt GUI for logging[¶](https://docs.python.org/3/howto/logging-cookbook.html#a-qt-gui-for-logging "Link to this heading")
A question that comes up from time to time is about how to log to a GUI application. The [Qt](https://www.qt.io/) framework is a popular cross-platform UI framework with Python bindings using [PySide2](https://pypi.org/project/PySide2/) or [PyQt5](https://pypi.org/project/PyQt5/) libraries.
The following example shows how to log to a Qt GUI. This introduces a simple `QtHandler` class which takes a callable, which should be a slot in the main thread that does GUI updates. A worker thread is also created to show how you can log to the GUI from both the UI itself (via a button for manual logging) as well as a worker thread doing work in the background (here, just logging messages at random levels with random short delays in between).
The worker thread is implemented using Qt’s `QThread` class rather than the [`threading`](https://docs.python.org/3/library/threading.html#module-threading "threading: Thread-based parallelism.") module, as there are circumstances where one has to use `QThread`, which offers better integration with other `Qt` components.
The code should work with recent releases of any of `PySide6`, `PyQt6`, `PySide2` or `PyQt5`. You should be able to adapt the approach to earlier versions of Qt. Please refer to the comments in the code snippet for more detailed information.