Title: List Construction in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: Python lists can be created using various methods: as an empty list with `[]`, by specifying items within square brackets, through list comprehensions, or by using the `list()` constructor with an iterable. If an iterable is provided, a list is made, reflecting the items' order. An empty list is returned if no argument is given.
---

_class_ list([_iterable_])[¶](https://docs.python.org/3/library/stdtypes.html#list "Link to this definition")
    
Lists may be constructed in several ways:
  * Using a pair of square brackets to denote the empty list: `[]`
  * Using square brackets, separating items with commas: `[a]`, `[a, b, c]`
  * Using a list comprehension: `[x for x in iterable]`
  * Using the type constructor: `list()` or `list(iterable)`


The constructor builds a list whose items are the same and in the same order as _iterable_ ’s items. _iterable_ may be either a sequence, a container that supports iteration, or an iterator object. If _iterable_ is already a list, a copy is made and returned, similar to `iterable[:]`. For example, `list('abc')` returns `['a', 'b', 'c']` and `list( (1, 2, 3) )` returns `[1, 2, 3]`. If no argument is given, the constructor creates a new empty list, `[]`.
Many other operations also produce lists, including the [`sorted()`](https://docs.python.org/3/library/functions.html#sorted "sorted") built-in.
Lists implement all of the [common](https://docs.python.org/3/library/stdtypes.html#typesseq-common) and [mutable](https://docs.python.org/3/library/stdtypes.html#typesseq-mutable) sequence operations. Lists also provide the following additional method: 

sort(_*_ , _key =None_, _reverse =False_)[¶](https://docs.python.org/3/library/stdtypes.html#list.sort "Link to this definition")
    
This method sorts the list in place, using only `<` comparisons between items. Exceptions are not suppressed - if any comparison operations fail, the entire sort operation will fail (and the list will likely be left in a partially modified state).
[`sort()`](https://docs.python.org/3/library/stdtypes.html#list.sort "list.sort") accepts two arguments that can only be passed by keyword ([keyword-only arguments](https://docs.python.org/3/glossary.html#keyword-only-parameter)):
_key_ specifies a function of one argument that is used to extract a comparison key from each list element (for example, `key=str.lower`). The key corresponding to each item in the list is calculated once and then used for the entire sorting process. The default value of `None` means that list items are sorted directly without calculating a separate key value.
The [`functools.cmp_to_key()`](https://docs.python.org/3/library/functools.html#functools.cmp_to_key "functools.cmp_to_key") utility is available to convert a 2.x style _cmp_ function to a _key_ function.
_reverse_ is a boolean value. If set to `True`, then the list elements are sorted as if each comparison were reversed.
This method modifies the sequence in place for economy of space when sorting a large sequence. To remind users that it operates by side effect, it does not return the sorted sequence (use [`sorted()`](https://docs.python.org/3/library/functions.html#sorted "sorted") to explicitly request a new sorted list instance).
The [`sort()`](https://docs.python.org/3/library/stdtypes.html#list.sort "list.sort") method is guaranteed to be stable. A sort is stable if it guarantees not to change the relative order of elements that compare equal — this is helpful for sorting in multiple passes (for example, sort by department, then by salary grade).
For sorting examples and a brief sorting tutorial, see [Sorting Techniques](https://docs.python.org/3/howto/sorting.html#sortinghowto).
**CPython implementation detail:** While a list is being sorted, the effect of attempting to mutate, or even inspect, the list is undefined. The C implementation of Python makes the list appear empty for the duration, and raises [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if it can detect that the list has been mutated during a sort.
### Tuples[¶](https://docs.python.org/3/library/stdtypes.html#tuples "Link to this heading")
Tuples are immutable sequences, typically used to store collections of heterogeneous data (such as the 2-tuples produced by the [`enumerate()`](https://docs.python.org/3/library/functions.html#enumerate "enumerate") built-in). Tuples are also used for cases where an immutable sequence of homogeneous data is needed (such as allowing storage in a [`set`](https://docs.python.org/3/library/stdtypes.html#set "set") or [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") instance). 

_class_ tuple([_iterable_])[¶](https://docs.python.org/3/library/stdtypes.html#tuple "Link to this definition")
    
Tuples may be constructed in a number of ways:
  * Using a pair of parentheses to denote the empty tuple: `()`
  * Using a trailing comma for a singleton tuple: `a,` or `(a,)`
  * Separating items with commas: `a, b, c` or `(a, b, c)`
  * Using the [`tuple()`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple") built-in: `tuple()` or `tuple(iterable)`