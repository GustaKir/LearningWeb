Title: XML DOM XHTML Namespace and Node Class
URL: https://docs.python.org/3/library/xml.dom.html
Summary: This section describes the URI of the XHTML namespace as per XHTML 1.0 and introduces the `Node` class in the `xml.dom` module, which serves as a base for concrete DOM implementations. It notes that while the `Node` class does not implement DOM methods or attributes, it provides constants for the `nodeType` attribute, adhering to the DOM specifications.
---

xml.dom.XHTML_NAMESPACE[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.XHTML_NAMESPACE "Link to this definition")
    
The URI of the XHTML namespace as defined by [XHTML 1.0: The Extensible HyperText Markup Language](https://www.w3.org/TR/xhtml1/) (section 3.1.1).
In addition, [`xml.dom`](https://docs.python.org/3/library/xml.dom.html#module-xml.dom "xml.dom: Document Object Model API for Python.") contains a base `Node` class and the DOM exception classes. The `Node` class provided by this module does not implement any of the methods or attributes defined by the DOM specification; concrete DOM implementations must provide those. The `Node` class provided as part of this module does provide the constants used for the `nodeType` attribute on concrete `Node` objects; they are located within the class rather than at the module level to conform with the DOM specifications.
## Objects in the DOM[¶](https://docs.python.org/3/library/xml.dom.html#objects-in-the-dom "Link to this heading")
The definitive documentation for the DOM is the DOM specification from the W3C.
Note that DOM attributes may also be manipulated as nodes instead of as simple strings. It is fairly rare that you must do this, however, so this usage is not yet documented.
Interface | Section | Purpose  
---|---|---  
`DOMImplementation` | [DOMImplementation Objects](https://docs.python.org/3/library/xml.dom.html#dom-implementation-objects) | Interface to the underlying implementation.  
`Node` | [Node Objects](https://docs.python.org/3/library/xml.dom.html#dom-node-objects) | Base interface for most objects in a document.  
`NodeList` | [NodeList Objects](https://docs.python.org/3/library/xml.dom.html#dom-nodelist-objects) | Interface for a sequence of nodes.  
`DocumentType` | [DocumentType Objects](https://docs.python.org/3/library/xml.dom.html#dom-documenttype-objects) | Information about the declarations needed to process a document.  
`Document` | [Document Objects](https://docs.python.org/3/library/xml.dom.html#dom-document-objects) | Object which represents an entire document.  
`Element` | [Element Objects](https://docs.python.org/3/library/xml.dom.html#dom-element-objects) | Element nodes in the document hierarchy.  
`Attr` | [Attr Objects](https://docs.python.org/3/library/xml.dom.html#dom-attr-objects) | Attribute value nodes on element nodes.  
`Comment` | [Comment Objects](https://docs.python.org/3/library/xml.dom.html#dom-comment-objects) | Representation of comments in the source document.  
`Text` | [Text and CDATASection Objects](https://docs.python.org/3/library/xml.dom.html#dom-text-objects) | Nodes containing textual content from the document.  
`ProcessingInstruction` | [ProcessingInstruction Objects](https://docs.python.org/3/library/xml.dom.html#dom-pi-objects) | Processing instruction representation.  
An additional section describes the exceptions defined for working with the DOM in Python.
### DOMImplementation Objects[¶](https://docs.python.org/3/library/xml.dom.html#domimplementation-objects "Link to this heading")
The `DOMImplementation` interface provides a way for applications to determine the availability of particular features in the DOM they are using. DOM Level 2 added the ability to create new `Document` and `DocumentType` objects using the `DOMImplementation` as well. 

DOMImplementation.hasFeature(_feature_ , _version_)[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.DOMImplementation.hasFeature "Link to this definition")
    
Return `True` if the feature identified by the pair of strings _feature_ and _version_ is implemented. 

DOMImplementation.createDocument(_namespaceUri_ , _qualifiedName_ , _doctype_)[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.DOMImplementation.createDocument "Link to this definition")
    
Return a new `Document` object (the root of the DOM), with a child `Element` object having the given _namespaceUri_ and _qualifiedName_. The _doctype_ must be a `DocumentType` object created by [`createDocumentType()`](https://docs.python.org/3/library/xml.dom.html#xml.dom.DOMImplementation.createDocumentType "xml.dom.DOMImplementation.createDocumentType"), or `None`. In the Python DOM API, the first two arguments can also be `None` in order to indicate that no `Element` child is to be created. 

DOMImplementation.createDocumentType(_qualifiedName_ , _publicId_ , _systemId_)[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.DOMImplementation.createDocumentType "Link to this definition")
    
Return a new `DocumentType` object that encapsulates the given _qualifiedName_ , _publicId_ , and _systemId_ strings, representing the information contained in an XML document type declaration.
### Node Objects[¶](https://docs.python.org/3/library/xml.dom.html#node-objects "Link to this heading")
All of the components of an XML document are subclasses of `Node`.