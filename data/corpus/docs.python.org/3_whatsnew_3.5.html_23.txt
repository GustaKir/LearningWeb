Title: Python 3.5 Release Notes: New Features
URL: https://docs.python.org/3/whatsnew/3.5.html
Summary: The Python 3.5 release introduces new features including the `append_history_file()` function in the `readline` module, which allows appending history to a file, and a new `DevpollSelector` for efficient polling on Solaris in the `selectors` module.
---

```

(Contributed by Serhiy Storchaka in [bpo-22578](https://bugs.python.org/issue?@action=redirect&bpo=22578).)
### readline[¶](https://docs.python.org/3/whatsnew/3.5.html#readline "Link to this heading")
A new [`append_history_file()`](https://docs.python.org/3/library/readline.html#readline.append_history_file "readline.append_history_file") function can be used to append the specified number of trailing elements in history to the given file. (Contributed by Bruno Cauet in [bpo-22940](https://bugs.python.org/issue?@action=redirect&bpo=22940).)
### selectors[¶](https://docs.python.org/3/whatsnew/3.5.html#selectors "Link to this heading")
The new [`DevpollSelector`](https://docs.python.org/3/library/selectors.html#selectors.DevpollSelector "selectors.DevpollSelector") supports efficient `/dev/poll` polling on Solaris. (Contributed by Giampaolo Rodola’ in [bpo-18931](https://bugs.python.org/issue?@action=redirect&bpo=18931).)
### shutil[¶](https://docs.python.org/3/whatsnew/3.5.html#shutil "Link to this heading")
The [`move()`](https://docs.python.org/3/library/shutil.html#shutil.move "shutil.move") function now accepts a _copy_function_ argument, allowing, for example, the [`copy()`](https://docs.python.org/3/library/shutil.html#shutil.copy "shutil.copy") function to be used instead of the default [`copy2()`](https://docs.python.org/3/library/shutil.html#shutil.copy2 "shutil.copy2") if there is a need to ignore file metadata when moving. (Contributed by Claudiu Popa in [bpo-19840](https://bugs.python.org/issue?@action=redirect&bpo=19840).)
The [`make_archive()`](https://docs.python.org/3/library/shutil.html#shutil.make_archive "shutil.make_archive") function now supports the _xztar_ format. (Contributed by Serhiy Storchaka in [bpo-5411](https://bugs.python.org/issue?@action=redirect&bpo=5411).)
### signal[¶](https://docs.python.org/3/whatsnew/3.5.html#signal "Link to this heading")
On Windows, the [`set_wakeup_fd()`](https://docs.python.org/3/library/signal.html#signal.set_wakeup_fd "signal.set_wakeup_fd") function now also supports socket handles. (Contributed by Victor Stinner in [bpo-22018](https://bugs.python.org/issue?@action=redirect&bpo=22018).)
Various `SIG*` constants in the [`signal`](https://docs.python.org/3/library/signal.html#module-signal "signal: Set handlers for asynchronous events.") module have been converted into [`Enums`](https://docs.python.org/3/library/enum.html#module-enum "enum: Implementation of an enumeration class."). This allows meaningful names to be printed during debugging, instead of integer “magic numbers”. (Contributed by Giampaolo Rodola’ in [bpo-21076](https://bugs.python.org/issue?@action=redirect&bpo=21076).)
### smtpd[¶](https://docs.python.org/3/whatsnew/3.5.html#smtpd "Link to this heading")
Both the `SMTPServer` and `SMTPChannel` classes now accept a _decode_data_ keyword argument to determine if the `DATA` portion of the SMTP transaction is decoded using the `"utf-8"` codec or is instead provided to the `SMTPServer.process_message()` method as a byte string. The default is `True` for backward compatibility reasons, but will change to `False` in Python 3.6. If _decode_data_ is set to `False`, the `process_message` method must be prepared to accept keyword arguments. (Contributed by Maciej Szulik in [bpo-19662](https://bugs.python.org/issue?@action=redirect&bpo=19662).)
The `SMTPServer` class now advertises the `8BITMIME` extension ([**RFC 6152**](https://datatracker.ietf.org/doc/html/rfc6152.html)) if _decode_data_ has been set `True`. If the client specifies `BODY=8BITMIME` on the `MAIL` command, it is passed to `SMTPServer.process_message()` via the _mail_options_ keyword. (Contributed by Milan Oberkirch and R. David Murray in [bpo-21795](https://bugs.python.org/issue?@action=redirect&bpo=21795).)
The `SMTPServer` class now also supports the `SMTPUTF8` extension ([**RFC 6531**](https://datatracker.ietf.org/doc/html/rfc6531.html): Internationalized Email). If the client specified `SMTPUTF8 BODY=8BITMIME` on the `MAIL` command, they are passed to `SMTPServer.process_message()` via the _mail_options_ keyword. It is the responsibility of the `process_message` method to correctly handle the `SMTPUTF8` data. (Contributed by Milan Oberkirch in [bpo-21725](https://bugs.python.org/issue?@action=redirect&bpo=21725).)
It is now possible to provide, directly or via name resolution, IPv6 addresses in the `SMTPServer` constructor, and have it successfully connect. (Contributed by Milan Oberkirch in [bpo-14758](https://bugs.python.org/issue?@action=redirect&bpo=14758).)
### smtplib[¶](https://docs.python.org/3/whatsnew/3.5.html#smtplib "Link to this heading")
A new [`SMTP.auth()`](https://docs.python.org/3/library/smtplib.html#smtplib.SMTP.auth "smtplib.SMTP.auth") method provides a convenient way to implement custom authentication mechanisms. (Contributed by Milan Oberkirch in [bpo-15014](https://bugs.python.org/issue?@action=redirect&bpo=15014).)
The [`SMTP.set_debuglevel()