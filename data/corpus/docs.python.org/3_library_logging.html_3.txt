Title: Logger Methods: isEnabledFor and getEffectiveLevel
URL: https://docs.python.org/3/library/logging.html
Summary: This section discusses two methods of the logger in the logging module: `isEnabledFor(_level_)`, which checks if messages of a given severity level would be processed, and `getEffectiveLevel()`, which returns the effective logging level for the logger.
---

isEnabledFor(_level_)[¶](https://docs.python.org/3/library/logging.html#logging.Logger.isEnabledFor "Link to this definition")
    
Indicates if a message of severity _level_ would be processed by this logger. This method checks first the module-level level set by `logging.disable(level)` and then the logger’s effective level as determined by [`getEffectiveLevel()`](https://docs.python.org/3/library/logging.html#logging.Logger.getEffectiveLevel "logging.Logger.getEffectiveLevel"). 

getEffectiveLevel()[¶](https://docs.python.org/3/library/logging.html#logging.Logger.getEffectiveLevel "Link to this definition")
    
Indicates the effective level for this logger. If a value other than [`NOTSET`](https://docs.python.org/3/library/logging.html#logging.NOTSET "logging.NOTSET") has been set using [`setLevel()`](https://docs.python.org/3/library/logging.html#logging.Logger.setLevel "logging.Logger.setLevel"), it is returned. Otherwise, the hierarchy is traversed towards the root until a value other than [`NOTSET`](https://docs.python.org/3/library/logging.html#logging.NOTSET "logging.NOTSET") is found, and that value is returned. The value returned is an integer, typically one of [`logging.DEBUG`](https://docs.python.org/3/library/logging.html#logging.DEBUG "logging.DEBUG"), [`logging.INFO`](https://docs.python.org/3/library/logging.html#logging.INFO "logging.INFO") etc. 

getChild(_suffix_)[¶](https://docs.python.org/3/library/logging.html#logging.Logger.getChild "Link to this definition")
    
Returns a logger which is a descendant to this logger, as determined by the suffix. Thus, `logging.getLogger('abc').getChild('def.ghi')` would return the same logger as would be returned by `logging.getLogger('abc.def.ghi')`. This is a convenience method, useful when the parent logger is named using e.g. `__name__` rather than a literal string.
Added in version 3.2. 

getChildren()[¶](https://docs.python.org/3/library/logging.html#logging.Logger.getChildren "Link to this definition")
    
Returns a set of loggers which are immediate children of this logger. So for example `logging.getLogger().getChildren()` might return a set containing loggers named `foo` and `bar`, but a logger named `foo.bar` wouldn’t be included in the set. Likewise, `logging.getLogger('foo').getChildren()` might return a set including a logger named `foo.bar`, but it wouldn’t include one named `foo.bar.baz`.
Added in version 3.12. 

debug(_msg_ , _* args_, _** kwargs_)[¶](https://docs.python.org/3/library/logging.html#logging.Logger.debug "Link to this definition")
    
Logs a message with level [`DEBUG`](https://docs.python.org/3/library/logging.html#logging.DEBUG "logging.DEBUG") on this logger. The _msg_ is the message format string, and the _args_ are the arguments which are merged into _msg_ using the string formatting operator. (Note that this means that you can use keywords in the format string, together with a single dictionary argument.) No % formatting operation is performed on _msg_ when no _args_ are supplied.
There are four keyword arguments in _kwargs_ which are inspected: _exc_info_ , _stack_info_ , _stacklevel_ and _extra_.
If _exc_info_ does not evaluate as false, it causes exception information to be added to the logging message. If an exception tuple (in the format returned by [`sys.exc_info()`](https://docs.python.org/3/library/sys.html#sys.exc_info "sys.exc_info")) or an exception instance is provided, it is used; otherwise, [`sys.exc_info()`](https://docs.python.org/3/library/sys.html#sys.exc_info "sys.exc_info") is called to get the exception information.
The second optional keyword argument is _stack_info_ , which defaults to `False`. If true, stack information is added to the logging message, including the actual logging call. Note that this is not the same stack information as that displayed through specifying _exc_info_ : The former is stack frames from the bottom of the stack up to the logging call in the current thread, whereas the latter is information about stack frames which have been unwound, following an exception, while searching for exception handlers.
You can specify _stack_info_ independently of _exc_info_ , e.g. to just show how you got to a certain point in your code, even when no exceptions were raised. The stack frames are printed following a header line which says:
```
Stack (most recent call last):