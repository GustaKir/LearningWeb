Title: Creating a New Event Loop in asyncio
URL: https://docs.python.org/3/library/asyncio-eventloop.html
Summary: The function asyncio.new_event_loop() creates and returns a new event loop object. The behavior of related functions like get_event_loop() and set_event_loop() can be influenced by setting a custom event loop policy.
---

asyncio.new_event_loop()[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.new_event_loop "Link to this definition")
    
Create and return a new event loop object.
Note that the behaviour of [`get_event_loop()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.get_event_loop "asyncio.get_event_loop"), [`set_event_loop()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.set_event_loop "asyncio.set_event_loop"), and [`new_event_loop()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.new_event_loop "asyncio.new_event_loop") functions can be altered by [setting a custom event loop policy](https://docs.python.org/3/library/asyncio-policy.html#asyncio-policies).
Contents
This documentation page contains the following sections:
  * The [Event Loop Methods](https://docs.python.org/3/library/asyncio-eventloop.html#event-loop-methods) section is the reference documentation of the event loop APIs;
  * The [Callback Handles](https://docs.python.org/3/library/asyncio-eventloop.html#callback-handles) section documents the [`Handle`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Handle "asyncio.Handle") and [`TimerHandle`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.TimerHandle "asyncio.TimerHandle") instances which are returned from scheduling methods such as [`loop.call_soon()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.call_soon "asyncio.loop.call_soon") and [`loop.call_later()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.call_later "asyncio.loop.call_later");
  * The [Server Objects](https://docs.python.org/3/library/asyncio-eventloop.html#server-objects) section documents types returned from event loop methods like [`loop.create_server()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_server "asyncio.loop.create_server");
  * The [Event Loop Implementations](https://docs.python.org/3/library/asyncio-eventloop.html#event-loop-implementations) section documents the [`SelectorEventLoop`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.SelectorEventLoop "asyncio.SelectorEventLoop") and [`ProactorEventLoop`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.ProactorEventLoop "asyncio.ProactorEventLoop") classes;
  * The [Examples](https://docs.python.org/3/library/asyncio-eventloop.html#examples) section showcases how to work with some event loop APIs.


## Event Loop Methods[¶](https://docs.python.org/3/library/asyncio-eventloop.html#event-loop-methods "Link to this heading")
Event loops have **low-level** APIs for the following:
  * [Running and stopping the loop](https://docs.python.org/3/library/asyncio-eventloop.html#running-and-stopping-the-loop)
  * [Scheduling callbacks](https://docs.python.org/3/library/asyncio-eventloop.html#scheduling-callbacks)
  * [Scheduling delayed callbacks](https://docs.python.org/3/library/asyncio-eventloop.html#scheduling-delayed-callbacks)
  * [Creating Futures and Tasks](https://docs.python.org/3/library/asyncio-eventloop.html#creating-futures-and-tasks)
  * [Opening network connections](https://docs.python.org/3/library/asyncio-eventloop.html#opening-network-connections)
  * [Creating network servers](https://docs.python.org/3/library/asyncio-eventloop.html#creating-network-servers)
  * [Transferring files](https://docs.python.org/3/library/asyncio-eventloop.html#transferring-files)
  * [TLS Upgrade](https://docs.python.org/3/library/asyncio-eventloop.html#tls-upgrade)
  * [Watching file descriptors](https://docs.python.org/3/library/asyncio-eventloop.html#watching-file-descriptors)
  * [Working with socket objects directly](https://docs.python.org/3/library/asyncio-eventloop.html#working-with-socket-objects-directly)
  * [DNS](https://docs.python.org/3/library/asyncio-eventloop.html#dns)
  * [Working with pipes](https://docs.python.org/3/library/asyncio-eventloop.html#working-with-pipes)
  * [Unix signals](https://docs.python.org/3/library/asyncio-eventloop.html#unix-signals)
  * [Executing code in thread or process pools](https://docs.python.org/3/library/asyncio-eventloop.html#executing-code-in-thread-or-process-pools)
  * [Error Handling API](https://docs.python.org/3/library/asyncio-eventloop.html#error-handling-api)
  * [Enabling debug mode](https://docs.python.org/3/library/asyncio-eventloop.html#enabling-debug-mode)
  * [Running Subprocesses](https://docs.python.org/3/library/asyncio-eventloop.html#running-subprocesses)


### [Running and stopping the loop](https://docs.python.org/3/library/asyncio-eventloop.html#id1)[¶](https://docs.python.org/3/library/asyncio-eventloop.html#running-and-stopping-the-loop "Link to this heading")