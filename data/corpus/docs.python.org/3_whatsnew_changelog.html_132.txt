Title: Python Change Log Updates
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section highlights recent changes in Python, including fixes for segmentation faults related to type watcher slots, addressing assertion failures with `PYTHONUOPS`, reverting some functions to non-argument clinic usage, and improvements in the autogeneration of signatures for specific extension functions.
---

Since PEP 669 has been implemented, this optimization no longer applies.
  * [gh-91051](https://github.com/python/cpython/issues/91051): Fix abort / segfault when using all eight type watcher slots, on platforms where `char` is signed by default.
  * [gh-106581](https://github.com/python/cpython/issues/106581): Fix possible assertion failures and missing instrumentation events when `PYTHONUOPS` or [`-X uops`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) is enabled.
  * [gh-107526](https://github.com/python/cpython/issues/107526): Revert converting `vars`, `dir`, `next`, `getattr`, and `iter` to argument clinic.
  * [gh-84805](https://github.com/python/cpython/issues/84805): Autogenerate signature for [`METH_NOARGS`](https://docs.python.org/3/c-api/structures.html#c.METH_NOARGS "METH_NOARGS") and [`METH_O`](https://docs.python.org/3/c-api/structures.html#c.METH_O "METH_O") extension functions.
  * [gh-107758](https://github.com/python/cpython/issues/107758): Make the `dump_stack()` routine used by the `lltrace` feature (low-level interpreter debugging) robust against recursion by ensuring that it never calls a `__repr__` method implemented in Python. Also make the similar output for Tier-2 uops appear on `stdout` (instead of `stderr`), to match the `lltrace` code in ceval.c.
  * [gh-107659](https://github.com/python/cpython/issues/107659): Add docstrings for [`ctypes.pointer()`](https://docs.python.org/3/library/ctypes.html#ctypes.pointer "ctypes.pointer") and [`ctypes.POINTER()`](https://docs.python.org/3/library/ctypes.html#ctypes.POINTER "ctypes.POINTER").
  * [gh-105848](https://github.com/python/cpython/issues/105848): Modify the bytecode so that the actual callable for a [`CALL`](https://docs.python.org/3/library/dis.html#opcode-CALL) is at a consistent position on the stack (regardless of whether or not bound-method-calling optimizations are active).
  * [gh-107674](https://github.com/python/cpython/issues/107674): Fixed performance regression in `sys.settrace`.
  * [gh-107724](https://github.com/python/cpython/issues/107724): In pre-release versions of 3.12, up to rc1, the sys.monitoring callback function for the `PY_THROW` event was missing the third, exception argument. That is now fixed.
  * [gh-84436](https://github.com/python/cpython/issues/84436): Skip reference count modifications for many known immortal objects.
  * [gh-107596](https://github.com/python/cpython/issues/107596): Specialize subscripting [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") objects by [`int`](https://docs.python.org/3/library/functions.html#int "int") indexes.
  * [gh-107080](https://github.com/python/cpython/issues/107080): Trace refs builds (`--with-trace-refs`) were crashing when used with isolated subinterpreters. The problematic global state has been isolated to each interpreter. Other fixing the crashes, this change does not affect users.
  * [gh-107557](https://github.com/python/cpython/issues/107557): Generate the cases needed for the barebones tier 2 abstract interpreter for optimization passes in CPython.
  * [gh-106608](https://github.com/python/cpython/issues/106608): Make `_PyUOpExecutorObject` variable length.
  * [gh-100964](https://github.com/python/cpython/issues/100964): Clear generatorsâ€™ exception state after `return` to break reference cycles.
  * [gh-107455](https://github.com/python/cpython/issues/107455): Improve error messages when converting an incompatible type to [`ctypes.c_char_p`](https://docs.python.org/3/library/ctypes.html#ctypes.c_char_p "ctypes.c_char_p"), [`ctypes.c_wchar_p`](https://docs.python.org/3/library/ctypes.html#ctypes.c_wchar_p "ctypes.c_wchar_p") and [`ctypes.c_void_p`](https://docs.python.org/3/library/ctypes.html#ctypes.c_void_p "ctypes.c_void_p").
  * [gh-107263](https://github.com/python/cpython/issues/107263): Increase C recursion limit for functions other than the main interpreter from 800 to 1500. This should allow functions like `list.__repr__` and `json.dumps` to handle all the inputs that they could prior to 3.12
  * [gh-104584](https://github.com/python/cpython/issues/104584): Fix an issue which caused incorrect inline caches to be read when running with `PYTHONUOPS` or [`-X uops`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) enabled.
  * [gh-104432](https://github.com/python/cpython/issues/104432): Fix potential unaligned memory access on C APIs involving returned sequences of `char *` pointers within the [`grp`](https://docs.python.org/3/library/grp.html#module-grp "grp: The group database \(getgrnam\(\) and friends\). \(Unix\)") and [`socket`](https://docs.python.org/3/library/socket.html#module-socket "socket: Low-level networking interface.") modules. These were revealed using a `-fsaniziter=alignment` build on ARM macOS. Patch by Christopher Chavez.
  * [gh-106078](https://github.com/python/cpython/issues/106078): Isolate `_decimal` (apply [**PEP 687**](https://peps.python.org/pep-0687/)).