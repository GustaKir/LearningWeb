Title: Python AST Module - Expression Parsing
URL: https://docs.python.org/3/library/ast.html
Summary: This section demonstrates how to parse an expression using the `ast` module in Python. It shows a sample code snippet that parses a simple arithmetic expression 'x + y' in 'eval' mode, illustrating the structure of the resulting Abstract Syntax Tree (AST) with a detailed dump output.
---

```
>>> print(ast.dump(ast.parse('x + y', mode='eval'), indent=4))
Expression(
  body=BinOp(
    left=Name(id='x', ctx=Load()),
    op=Add(),
    right=Name(id='y', ctx=Load())))

```


_class_ ast.Add[¶](https://docs.python.org/3/library/ast.html#ast.Add "Link to this definition")


_class_ ast.Sub[¶](https://docs.python.org/3/library/ast.html#ast.Sub "Link to this definition")


_class_ ast.Mult[¶](https://docs.python.org/3/library/ast.html#ast.Mult "Link to this definition")


_class_ ast.Div[¶](https://docs.python.org/3/library/ast.html#ast.Div "Link to this definition")


_class_ ast.FloorDiv[¶](https://docs.python.org/3/library/ast.html#ast.FloorDiv "Link to this definition")


_class_ ast.Mod[¶](https://docs.python.org/3/library/ast.html#ast.Mod "Link to this definition")


_class_ ast.Pow[¶](https://docs.python.org/3/library/ast.html#ast.Pow "Link to this definition")


_class_ ast.LShift[¶](https://docs.python.org/3/library/ast.html#ast.LShift "Link to this definition")


_class_ ast.RShift[¶](https://docs.python.org/3/library/ast.html#ast.RShift "Link to this definition")


_class_ ast.BitOr[¶](https://docs.python.org/3/library/ast.html#ast.BitOr "Link to this definition")


_class_ ast.BitXor[¶](https://docs.python.org/3/library/ast.html#ast.BitXor "Link to this definition")


_class_ ast.BitAnd[¶](https://docs.python.org/3/library/ast.html#ast.BitAnd "Link to this definition")


_class_ ast.MatMult[¶](https://docs.python.org/3/library/ast.html#ast.MatMult "Link to this definition")
    
Binary operator tokens. 

_class_ ast.BoolOp(_op_ , _values_)[¶](https://docs.python.org/3/library/ast.html#ast.BoolOp "Link to this definition")
    
A boolean operation, ‘or’ or ‘and’. `op` is [`Or`](https://docs.python.org/3/library/ast.html#ast.Or "ast.Or") or [`And`](https://docs.python.org/3/library/ast.html#ast.And "ast.And"). `values` are the values involved. Consecutive operations with the same operator, such as `a or b or c`, are collapsed into one node with several values.
This doesn’t include `not`, which is a [`UnaryOp`](https://docs.python.org/3/library/ast.html#ast.UnaryOp "ast.UnaryOp").
>>>```
>>> print(ast.dump(ast.parse('x or y', mode='eval'), indent=4))
Expression(
  body=BoolOp(
    op=Or(),
    values=[
      Name(id='x', ctx=Load()),
      Name(id='y', ctx=Load())]))

```


_class_ ast.And[¶](https://docs.python.org/3/library/ast.html#ast.And "Link to this definition")


_class_ ast.Or[¶](https://docs.python.org/3/library/ast.html#ast.Or "Link to this definition")
    
Boolean operator tokens. 

_class_ ast.Compare(_left_ , _ops_ , _comparators_)[¶](https://docs.python.org/3/library/ast.html#ast.Compare "Link to this definition")
    
A comparison of two or more values. `left` is the first value in the comparison, `ops` the list of operators, and `comparators` the list of values after the first element in the comparison.
>>>```
>>> print(ast.dump(ast.parse('1 <= a < 10', mode='eval'), indent=4))
Expression(
  body=Compare(
    left=Constant(value=1),
    ops=[
      LtE(),
      Lt()],
    comparators=[
      Name(id='a', ctx=Load()),
      Constant(value=10)]))

```


_class_ ast.Eq[¶](https://docs.python.org/3/library/ast.html#ast.Eq "Link to this definition")


_class_ ast.NotEq[¶](https://docs.python.org/3/library/ast.html#ast.NotEq "Link to this definition")


_class_ ast.Lt[¶](https://docs.python.org/3/library/ast.html#ast.Lt "Link to this definition")


_class_ ast.LtE[¶](https://docs.python.org/3/library/ast.html#ast.LtE "Link to this definition")


_class_ ast.Gt[¶](https://docs.python.org/3/library/ast.html#ast.Gt "Link to this definition")


_class_ ast.GtE[¶](https://docs.python.org/3/library/ast.html#ast.GtE "Link to this definition")


_class_ ast.Is[¶](https://docs.python.org/3/library/ast.html#ast.Is "Link to this definition")


_class_ ast.IsNot[¶](https://docs.python.org/3/library/ast.html#ast.IsNot "Link to this definition")


_class_ ast.In[¶](https://docs.python.org/3/library/ast.html#ast.In "Link to this definition")


_class_ ast.NotIn[¶](https://docs.python.org/3/library/ast.html#ast.NotIn "Link to this definition")
    
Comparison operator tokens. 

_class_ ast.Call(_func_ , _args_ , _keywords_)[¶](https://docs.python.org/3/library/ast.html#ast.Call "Link to this definition")
    
A function call. `func` is the function, which will often be a [`Name`](https://docs.python.org/3/library/ast.html#ast.Name "ast.Name") or [`Attribute`](https://docs.python.org/3/library/ast.html#ast.Attribute "ast.Attribute") object. Of the arguments:
  * `args` holds a list of the arguments passed by position.
  * `keywords` holds a list of [`keyword`](https://docs.python.org/3/library/ast.html#ast.keyword "ast.keyword") objects representing arguments passed by keyword.


The `args` and `keywords` arguments are optional and default to empty lists.
>>>