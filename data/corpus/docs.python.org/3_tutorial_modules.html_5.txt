Title: Importing Modules and Functions in Python
URL: https://docs.python.org/3/tutorial/modules.html
Summary: This section explains how to load and use submodules and functions in Python. It demonstrates importing the `echo` submodule directly for use with `echofilter()`, and discusses the flexibility of the `import` statement, which can load items defined in a package or assume them to be modules. It also notes that an `ImportError` may occur if the specified item cannot be found.
---

```

This also loads the submodule `echo`, and makes it available without its package prefix, so it can be used as follows:
```
echo.echofilter(input, output, delay=0.7, atten=4)

```

Yet another variation is to import the desired function or variable directly:
```
fromsound.effects.echoimport echofilter

```

Again, this loads the submodule `echo`, but this makes its function `echofilter()` directly available:
```
echofilter(input, output, delay=0.7, atten=4)

```

Note that when using `from package import item`, the item can be either a submodule (or subpackage) of the package, or some other name defined in the package, like a function, class or variable. The `import` statement first tests whether the item is defined in the package; if not, it assumes it is a module and attempts to load it. If it fails to find it, an [`ImportError`](https://docs.python.org/3/library/exceptions.html#ImportError "ImportError") exception is raised.
Contrarily, when using syntax like `import item.subitem.subsubitem`, each item except for the last must be a package; the last item can be a module or a package but can’t be a class or function or variable defined in the previous item.
### 6.4.1. Importing * From a Package[¶](https://docs.python.org/3/tutorial/modules.html#importing-from-a-package "Link to this heading")
Now what happens when the user writes `from sound.effects import *`? Ideally, one would hope that this somehow goes out to the filesystem, finds which submodules are present in the package, and imports them all. This could take a long time and importing sub-modules might have unwanted side-effects that should only happen when the sub-module is explicitly imported.
The only solution is for the package author to provide an explicit index of the package. The [`import`](https://docs.python.org/3/reference/simple_stmts.html#import) statement uses the following convention: if a package’s `__init__.py` code defines a list named `__all__`, it is taken to be the list of module names that should be imported when `from package import *` is encountered. It is up to the package author to keep this list up-to-date when a new version of the package is released. Package authors may also decide not to support it, if they don’t see a use for importing * from their package. For example, the file `sound/effects/__init__.py` could contain the following code:
```
__all__ = ["echo", "surround", "reverse"]

```

This would mean that `from sound.effects import *` would import the three named submodules of the `sound.effects` package.
Be aware that submodules might become shadowed by locally defined names. For example, if you added a `reverse` function to the `sound/effects/__init__.py` file, the `from sound.effects import *` would only import the two submodules `echo` and `surround`, but _not_ the `reverse` submodule, because it is shadowed by the locally defined `reverse` function:
```
__all__ = [
  "echo",   # refers to the 'echo.py' file
  "surround", # refers to the 'surround.py' file
  "reverse",  # !!! refers to the 'reverse' function now !!!
]
defreverse(msg: str): # <-- this name shadows the 'reverse.py' submodule
  return msg[::-1]  #   in the case of a 'from sound.effects import *'

```

If `__all__` is not defined, the statement `from sound.effects import *` does _not_ import all submodules from the package `sound.effects` into the current namespace; it only ensures that the package `sound.effects` has been imported (possibly running any initialization code in `__init__.py`) and then imports whatever names are defined in the package. This includes any names defined (and submodules explicitly loaded) by `__init__.py`. It also includes any submodules of the package that were explicitly loaded by previous [`import`](https://docs.python.org/3/reference/simple_stmts.html#import) statements. Consider this code:
```
importsound.effects.echo
importsound.effects.surround
fromsound.effectsimport *