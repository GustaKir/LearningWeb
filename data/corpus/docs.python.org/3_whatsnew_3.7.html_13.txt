Title: Python 3.7 New Features in asyncio
URL: https://docs.python.org/3/whatsnew/3.7.html
Summary: Python 3.7 introduces several enhancements to the asyncio library, including a new 'when()' method for callback objects from 'loop.call_later()' that returns a scheduled callback timestamp, and support for Unix sockets in 'loop.create_datagram_endpoint()'.
---

```

(Contributed by Yury Selivanov in [bpo-32662](https://bugs.python.org/issue?@action=redirect&bpo=32662).)
  * Callback objects returned by [`loop.call_later()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.call_later "asyncio.loop.call_later") gained the new [`when()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.TimerHandle.when "asyncio.TimerHandle.when") method which returns an absolute scheduled callback timestamp. (Contributed by Andrew Svetlov in [bpo-32741](https://bugs.python.org/issue?@action=redirect&bpo=32741).)
  * The [`loop.create_datagram_endpoint() `](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_datagram_endpoint "asyncio.loop.create_datagram_endpoint") method gained support for Unix sockets. (Contributed by Quentin Dawans in [bpo-31245](https://bugs.python.org/issue?@action=redirect&bpo=31245).)
  * The [`asyncio.open_connection()`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.open_connection "asyncio.open_connection"), [`asyncio.start_server()`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.start_server "asyncio.start_server") functions, [`loop.create_connection()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_connection "asyncio.loop.create_connection"), [`loop.create_server()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_server "asyncio.loop.create_server"), [`loop.create_accepted_socket()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.connect_accepted_socket "asyncio.loop.connect_accepted_socket") methods and their corresponding UNIX socket variants now accept the _ssl_handshake_timeout_ keyword argument. (Contributed by Neil Aspinall in [bpo-29970](https://bugs.python.org/issue?@action=redirect&bpo=29970).)
  * The new [`Handle.cancelled()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Handle.cancelled "asyncio.Handle.cancelled") method returns `True` if the callback was cancelled. (Contributed by Marat Sharafutdinov in [bpo-31943](https://bugs.python.org/issue?@action=redirect&bpo=31943).)
  * The asyncio source has been converted to use the [`async`](https://docs.python.org/3/reference/compound_stmts.html#async)/[`await`](https://docs.python.org/3/reference/expressions.html#await) syntax. (Contributed by Andrew Svetlov in [bpo-32193](https://bugs.python.org/issue?@action=redirect&bpo=32193).)
  * The new [`ReadTransport.is_reading()`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.ReadTransport.is_reading "asyncio.ReadTransport.is_reading") method can be used to determine the reading state of the transport. Additionally, calls to [`ReadTransport.resume_reading()`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.ReadTransport.resume_reading "asyncio.ReadTransport.resume_reading") and [`ReadTransport.pause_reading()`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.ReadTransport.pause_reading "asyncio.ReadTransport.pause_reading") are now idempotent. (Contributed by Yury Selivanov in [bpo-32356](https://bugs.python.org/issue?@action=redirect&bpo=32356).)
  * Loop methods which accept socket paths now support passing [path-like objects](https://docs.python.org/3/glossary.html#term-path-like-object). (Contributed by Yury Selivanov in [bpo-32066](https://bugs.python.org/issue?@action=redirect&bpo=32066).)
  * In [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O.") TCP sockets on Linux are now created with `TCP_NODELAY` flag set by default. (Contributed by Yury Selivanov and Victor Stinner in [bpo-27456](https://bugs.python.org/issue?@action=redirect&bpo=27456).)
  * Exceptions occurring in cancelled tasks are no longer logged. (Contributed by Yury Selivanov in [bpo-30508](https://bugs.python.org/issue?@action=redirect&bpo=30508).)
  * New `WindowsSelectorEventLoopPolicy` and `WindowsProactorEventLoopPolicy` classes. (Contributed by Yury Selivanov in [bpo-33792](https://bugs.python.org/issue?@action=redirect&bpo=33792).)