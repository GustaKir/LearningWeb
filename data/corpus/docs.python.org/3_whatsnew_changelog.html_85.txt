Title: Updates to C API in Python
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section details several updates to the C API, including fixes to PEP 737 implementation, improvements to the `_PyBytes_Resize()` function, a correction for integer overflow in `PyLong_AsPid()`, and the renaming of `PyCode_GetFirstFree()` to `PyUnstable_Code_GetFirstFree()`, indicating its unstable API status.
---

### C API[¶](https://docs.python.org/3/whatsnew/changelog.html#id88 "Link to this heading")
  * [gh-117642](https://github.com/python/cpython/issues/117642): Fix [**PEP 737**](https://peps.python.org/pep-0737/) implementation for `%#T` and `%#N`.
  * [gh-87193](https://github.com/python/cpython/issues/87193): [`_PyBytes_Resize()`](https://docs.python.org/3/c-api/bytes.html#c._PyBytes_Resize "_PyBytes_Resize") can now be called for bytes objects with reference count > 1, including 1-byte bytes objects. It creates a new bytes object and destroys the old one if it has reference count > 1.
  * [gh-117021](https://github.com/python/cpython/issues/117021): Fix integer overflow in `PyLong_AsPid()` on non-Windows 64-bit platforms.
  * [gh-115756](https://github.com/python/cpython/issues/115756): `PyCode_GetFirstFree()` is an ustable API now and has been renamed to [`PyUnstable_Code_GetFirstFree()`](https://docs.python.org/3/c-api/code.html#c.PyUnstable_Code_GetFirstFree "PyUnstable_Code_GetFirstFree"). (Contributed by Bogdan Romanyuk in [gh-115781](https://github.com/python/cpython/issues/115781))
  * [gh-116869](https://github.com/python/cpython/issues/116869): Add `test_cext` test: build a C extension to check if the Python C API emits C compiler warnings. Patch by Victor Stinner.
  * [gh-116869](https://github.com/python/cpython/issues/116869): Make the C API compatible with `-Werror=declaration-after-statement` compiler flag again. Patch by Victor Stinner.
  * [gh-116936](https://github.com/python/cpython/issues/116936): Add [`PyType_GetModuleByDef()`](https://docs.python.org/3/c-api/type.html#c.PyType_GetModuleByDef "PyType_GetModuleByDef") to the limited C API. Patch by Victor Stinner.
  * [gh-116809](https://github.com/python/cpython/issues/116809): Restore removed private `_PyErr_ChainExceptions1()` function. Patch by Victor Stinner.
  * [gh-115754](https://github.com/python/cpython/issues/115754): In the limited C API version 3.13, getting `Py_None`, `Py_False`, `Py_True`, `Py_Ellipsis` and `Py_NotImplemented` singletons is now implemented as function calls at the stable ABI level to hide implementation details. Getting these constants still return borrowed references. Patch by Victor Stinner.
  * [gh-115754](https://github.com/python/cpython/issues/115754): Add [`Py_GetConstant()`](https://docs.python.org/3/c-api/object.html#c.Py_GetConstant "Py_GetConstant") and [`Py_GetConstantBorrowed()`](https://docs.python.org/3/c-api/object.html#c.Py_GetConstantBorrowed "Py_GetConstantBorrowed") functions to get constants. For example, `Py_GetConstant(Py_CONSTANT_ZERO)` returns a [strong reference](https://docs.python.org/3/glossary.html#term-strong-reference) to the constant zero. Patch by Victor Stinner.
  * [gh-111696](https://github.com/python/cpython/issues/111696): Add support for `%T`, `%T#`, `%N` and `%N#` formats to [`PyUnicode_FromFormat()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FromFormat "PyUnicode_FromFormat"): format the fully qualified name of an object type and of a type: call [`PyType_GetModuleName()`](https://docs.python.org/3/c-api/type.html#c.PyType_GetModuleName "PyType_GetModuleName"). See [**PEP 737**](https://peps.python.org/pep-0737/) for more information. Patch by Victor Stinner.
  * [gh-111696](https://github.com/python/cpython/issues/111696): Add [`PyType_GetModuleName()`](https://docs.python.org/3/c-api/type.html#c.PyType_GetModuleName "PyType_GetModuleName") function to get the type’s module name. Equivalent to getting the `type.__module__` attribute. Patch by Eric Snow and Victor Stinner.
  * [gh-111696](https://github.com/python/cpython/issues/111696): Add [`PyType_GetFullyQualifiedName()`](https://docs.python.org/3/c-api/type.html#c.PyType_GetFullyQualifiedName "PyType_GetFullyQualifiedName") function to get the type’s fully qualified name. Equivalent to `f"{type.__module__}.{type.__qualname__}"`, or `type.__qualname__` if `type.__module__` is not a string or is equal to `"builtins"`. Patch by Victor Stinner.
  * [gh-85283](https://github.com/python/cpython/issues/85283): The `fcntl`, `grp`, `pwd`, `termios`, `_statistics` and `_testconsole` C extensions are now built with the [limited C API](https://docs.python.org/3/c-api/stable.html#limited-c-api). Patch by Victor Stinner.
  * [gh-111140](https://github.com/python/cpython/issues/111140): Add additional flags to [`PyLong_AsNativeBytes()`](https://docs.python.org/3/c-api/long.html#c.PyLong_AsNativeBytes "PyLong_AsNativeBytes") and [`PyLong_FromNativeBytes()`](https://docs.python.org/3/c-api/long.html#c.PyLong_FromNativeBytes "PyLong_FromNativeBytes") to allow the caller to determine how to handle edge cases around values that fill the entire buffer.
  * [gh-113024](https://github.com/python/cpython/issues/113024): Add [`PyObject_GenericHash()`](https://docs.python.org/3/c-api/hash.html#c.PyObject_GenericHash "PyObject_GenericHash") function.