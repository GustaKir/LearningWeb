Title: Signals and Threads in Python
URL: https://docs.python.org/3/library/signal.html
Summary: Python signal handlers operate solely in the main thread of the interpreter, limiting their use for thread communication. Only the main thread can set new signal handlers, and for inter-thread communication, developers should utilize the threading module's synchronization primitives.
---

### Signals and threads[¶](https://docs.python.org/3/library/signal.html#signals-and-threads "Link to this heading")
Python signal handlers are always executed in the main Python thread of the main interpreter, even if the signal was received in another thread. This means that signals can’t be used as a means of inter-thread communication. You can use the synchronization primitives from the [`threading`](https://docs.python.org/3/library/threading.html#module-threading "threading: Thread-based parallelism.") module instead.
Besides, only the main thread of the main interpreter is allowed to set a new signal handler.
## Module contents[¶](https://docs.python.org/3/library/signal.html#module-contents "Link to this heading")
Changed in version 3.5: signal (SIG*), handler ([`SIG_DFL`](https://docs.python.org/3/library/signal.html#signal.SIG_DFL "signal.SIG_DFL"), [`SIG_IGN`](https://docs.python.org/3/library/signal.html#signal.SIG_IGN "signal.SIG_IGN")) and sigmask ([`SIG_BLOCK`](https://docs.python.org/3/library/signal.html#signal.SIG_BLOCK "signal.SIG_BLOCK"), [`SIG_UNBLOCK`](https://docs.python.org/3/library/signal.html#signal.SIG_UNBLOCK "signal.SIG_UNBLOCK"), [`SIG_SETMASK`](https://docs.python.org/3/library/signal.html#signal.SIG_SETMASK "signal.SIG_SETMASK")) related constants listed below were turned into [`enums`](https://docs.python.org/3/library/enum.html#enum.IntEnum "enum.IntEnum") ([`Signals`](https://docs.python.org/3/library/signal.html#signal.Signals "signal.Signals"), [`Handlers`](https://docs.python.org/3/library/signal.html#signal.Handlers "signal.Handlers") and [`Sigmasks`](https://docs.python.org/3/library/signal.html#signal.Sigmasks "signal.Sigmasks") respectively). [`getsignal()`](https://docs.python.org/3/library/signal.html#signal.getsignal "signal.getsignal"), [`pthread_sigmask()`](https://docs.python.org/3/library/signal.html#signal.pthread_sigmask "signal.pthread_sigmask"), [`sigpending()`](https://docs.python.org/3/library/signal.html#signal.sigpending "signal.sigpending") and [`sigwait()`](https://docs.python.org/3/library/signal.html#signal.sigwait "signal.sigwait") functions return human-readable [`enums`](https://docs.python.org/3/library/enum.html#enum.IntEnum "enum.IntEnum") as [`Signals`](https://docs.python.org/3/library/signal.html#signal.Signals "signal.Signals") objects.
The signal module defines three enums: 

_class_ signal.Signals[¶](https://docs.python.org/3/library/signal.html#signal.Signals "Link to this definition")
    
[`enum.IntEnum`](https://docs.python.org/3/library/enum.html#enum.IntEnum "enum.IntEnum") collection of SIG* constants and the CTRL_* constants.
Added in version 3.5. 

_class_ signal.Handlers[¶](https://docs.python.org/3/library/signal.html#signal.Handlers "Link to this definition")
    
[`enum.IntEnum`](https://docs.python.org/3/library/enum.html#enum.IntEnum "enum.IntEnum") collection the constants [`SIG_DFL`](https://docs.python.org/3/library/signal.html#signal.SIG_DFL "signal.SIG_DFL") and [`SIG_IGN`](https://docs.python.org/3/library/signal.html#signal.SIG_IGN "signal.SIG_IGN").
Added in version 3.5. 

_class_ signal.Sigmasks[¶](https://docs.python.org/3/library/signal.html#signal.Sigmasks "Link to this definition")
    
[`enum.IntEnum`](https://docs.python.org/3/library/enum.html#enum.IntEnum "enum.IntEnum") collection the constants [`SIG_BLOCK`](https://docs.python.org/3/library/signal.html#signal.SIG_BLOCK "signal.SIG_BLOCK"), [`SIG_UNBLOCK`](https://docs.python.org/3/library/signal.html#signal.SIG_UNBLOCK "signal.SIG_UNBLOCK") and [`SIG_SETMASK`](https://docs.python.org/3/library/signal.html#signal.SIG_SETMASK "signal.SIG_SETMASK").
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix.
See the man page _[sigprocmask(2)](https://manpages.debian.org/sigprocmask\(2\))_ and _[pthread_sigmask(3)](https://manpages.debian.org/pthread_sigmask\(3\))_ for further information.
Added in version 3.5.
The variables defined in the [`signal`](https://docs.python.org/3/library/signal.html#module-signal "signal: Set handlers for asynchronous events.") module are: 

signal.SIG_DFL[¶](https://docs.python.org/3/library/signal.html#signal.SIG_DFL "Link to this definition")
    
This is one of two standard signal handling options; it will simply perform the default function for the signal. For example, on most systems the default action for `SIGQUIT` is to dump core and exit, while the default action for [`SIGCHLD`](https://docs.python.org/3/library/signal.html#signal.SIGCHLD "signal.SIGCHLD") is to simply ignore it. 

signal.SIG_IGN[¶](https://docs.python.org/3/library/signal.html#signal.SIG_IGN "Link to this definition")
    
This is another standard signal handler, which will simply ignore the given signal. 

signal.SIGABRT[¶](https://docs.python.org/3/library/signal.html#signal.SIGABRT "Link to this definition")
    
Abort signal from _[abort(3)](https://manpages.debian.org/abort\(3\))_.