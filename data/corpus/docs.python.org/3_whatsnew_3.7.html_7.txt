Title: New Features and Changes in Python 3.7
URL: https://docs.python.org/3/whatsnew/3.7.html
Summary: Python 3.7 introduces PEP 564, which adds new time functions with nanosecond resolution. Additionally, PEP 565 modifies the handling of DeprecationWarning, making these warnings visible by default when code runs in the __main__ module, benefiting developers of single-file scripts and interactive Python users.
---

[**PEP 564**](https://peps.python.org/pep-0564/) – Add new time functions with nanosecond resolution
    
PEP written and implemented by Victor Stinner
### PEP 565: Show DeprecationWarning in `__main__`[¶](https://docs.python.org/3/whatsnew/3.7.html#pep-565-show-deprecationwarning-in-main "Link to this heading")
The default handling of [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning") has been changed such that these warnings are once more shown by default, but only when the code triggering them is running directly in the [`__main__`](https://docs.python.org/3/library/__main__.html#module-__main__ "__main__: The environment where top-level code is run. Covers command-line interfaces, import-time behavior, and ``__name__ == '__main__'``.") module. As a result, developers of single file scripts and those using Python interactively should once again start seeing deprecation warnings for the APIs they use, but deprecation warnings triggered by imported application, library and framework modules will continue to be hidden by default.
As a result of this change, the standard library now allows developers to choose between three different deprecation warning behaviours:
  * [`FutureWarning`](https://docs.python.org/3/library/exceptions.html#FutureWarning "FutureWarning"): always displayed by default, recommended for warnings intended to be seen by application end users (e.g. for deprecated application configuration settings).
  * [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning"): displayed by default only in [`__main__`](https://docs.python.org/3/library/__main__.html#module-__main__ "__main__: The environment where top-level code is run. Covers command-line interfaces, import-time behavior, and ``__name__ == '__main__'``.") and when running tests, recommended for warnings intended to be seen by other Python developers where a version upgrade may result in changed behaviour or an error.
  * [`PendingDeprecationWarning`](https://docs.python.org/3/library/exceptions.html#PendingDeprecationWarning "PendingDeprecationWarning"): displayed by default only when running tests, intended for cases where a future version upgrade will change the warning category to [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning") or [`FutureWarning`](https://docs.python.org/3/library/exceptions.html#FutureWarning "FutureWarning").


Previously both [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning") and [`PendingDeprecationWarning`](https://docs.python.org/3/library/exceptions.html#PendingDeprecationWarning "PendingDeprecationWarning") were only visible when running tests, which meant that developers primarily writing single file scripts or using Python interactively could be surprised by breaking changes in the APIs they used.
See also 

[**PEP 565**](https://peps.python.org/pep-0565/) – Show DeprecationWarning in `__main__`
    
PEP written and implemented by Nick Coghlan
### PEP 560: Core Support for `typing` module and Generic Types[¶](https://docs.python.org/3/whatsnew/3.7.html#pep-560-core-support-for-typing-module-and-generic-types "Link to this heading")
Initially [**PEP 484**](https://peps.python.org/pep-0484/) was designed in such way that it would not introduce _any_ changes to the core CPython interpreter. Now type hints and the [`typing`](https://docs.python.org/3/library/typing.html#module-typing "typing: Support for type hints \(see :pep:`484`\).") module are extensively used by the community, so this restriction is removed. The PEP introduces two special methods `__class_getitem__()` and `__mro_entries__`, these methods are now used by most classes and special constructs in [`typing`](https://docs.python.org/3/library/typing.html#module-typing "typing: Support for type hints \(see :pep:`484`\)."). As a result, the speed of various operations with types increased up to 7 times, the generic types can be used without metaclass conflicts, and several long standing bugs in [`typing`](https://docs.python.org/3/library/typing.html#module-typing "typing: Support for type hints \(see :pep:`484`\).") module are fixed.
See also