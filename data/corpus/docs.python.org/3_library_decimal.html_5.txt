Title: Decimal Module: Unicode Digits and Tuple Formatting
URL: https://docs.python.org/3/library/decimal.html
Summary: The Decimal module in Python accepts various Unicode decimal digits, including those from different alphabets and fullwidth digits. The representation can be specified using a tuple that includes a sign, a tuple of digits, and an exponent. Additionally, float values can be converted to their exact decimal equivalents with high precision.
---

```

Other Unicode decimal digits are also permitted where `digit` appears above. These include decimal digits from various other alphabets (for example, Arabic-Indic and Devanāgarī digits) along with the fullwidth digits `'\uff10'` through `'\uff19'`. Case is not significant, so, for example, `inf`, `Inf`, `INFINITY`, and `iNfINity` are all acceptable spellings for positive infinity.
If _value_ is a [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple"), it should have three components, a sign (`0` for positive or `1` for negative), a [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple") of digits, and an integer exponent. For example, `Decimal((0, (1, 4, 1, 4), -3))` returns `Decimal('1.414')`.
If _value_ is a [`float`](https://docs.python.org/3/library/functions.html#float "float"), the binary floating-point value is losslessly converted to its exact decimal equivalent. This conversion can often require 53 or more digits of precision. For example, `Decimal(float('1.1'))` converts to `Decimal('1.100000000000000088817841970012523233890533447265625')`.
The _context_ precision does not affect how many digits are stored. That is determined exclusively by the number of digits in _value_. For example, `Decimal('3.00000')` records all five zeros even if the context precision is only three.
The purpose of the _context_ argument is determining what to do if _value_ is a malformed string. If the context traps [`InvalidOperation`](https://docs.python.org/3/library/decimal.html#decimal.InvalidOperation "decimal.InvalidOperation"), an exception is raised; otherwise, the constructor returns a new Decimal with the value of `NaN`.
Once constructed, [`Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal") objects are immutable.
Changed in version 3.2: The argument to the constructor is now permitted to be a [`float`](https://docs.python.org/3/library/functions.html#float "float") instance.
Changed in version 3.3: [`float`](https://docs.python.org/3/library/functions.html#float "float") arguments raise an exception if the [`FloatOperation`](https://docs.python.org/3/library/decimal.html#decimal.FloatOperation "decimal.FloatOperation") trap is set. By default the trap is off.
Changed in version 3.6: Underscores are allowed for grouping, as with integral and floating-point literals in code.
Decimal floating-point objects share many properties with the other built-in numeric types such as [`float`](https://docs.python.org/3/library/functions.html#float "float") and [`int`](https://docs.python.org/3/library/functions.html#int "int"). All of the usual math operations and special methods apply. Likewise, decimal objects can be copied, pickled, printed, used as dictionary keys, used as set elements, compared, sorted, and coerced to another type (such as [`float`](https://docs.python.org/3/library/functions.html#float "float") or [`int`](https://docs.python.org/3/library/functions.html#int "int")).
There are some small differences between arithmetic on Decimal objects and arithmetic on integers and floats. When the remainder operator `%` is applied to Decimal objects, the sign of the result is the sign of the _dividend_ rather than the sign of the divisor:
>>>```
>>> (-7) % 4
1
>>> Decimal(-7) % Decimal(4)
Decimal('-3')

```

The integer division operator `//` behaves analogously, returning the integer part of the true quotient (truncating towards zero) rather than its floor, so as to preserve the usual identity `x == (x // y) * y + x % y`:
>>>```
>>> -7 // 4
-2
>>> Decimal(-7) // Decimal(4)
Decimal('-1')