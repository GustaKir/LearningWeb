Title: Command-Line Interface for Tarfile Module
URL: https://docs.python.org/3/library/tarfile.html
Summary: The tarfile module offers a simple command-line interface to interact with tar archives. Users can create a new tar archive with the `-c` option, specifying the archive name and including files. It also supports directory input. To extract an archive, the `-e` option is used, allowing extraction into the current or a specified directory.
---

```

## Command-Line Interface[¶](https://docs.python.org/3/library/tarfile.html#command-line-interface "Link to this heading")
Added in version 3.4.
The [`tarfile`](https://docs.python.org/3/library/tarfile.html#module-tarfile "tarfile: Read and write tar-format archive files.") module provides a simple command-line interface to interact with tar archives.
If you want to create a new tar archive, specify its name after the [`-c`](https://docs.python.org/3/library/tarfile.html#cmdoption-tarfile-c) option and then list the filename(s) that should be included:
```
$ python-mtarfile-cmonty.tarspam.txteggs.txt

```

Passing a directory is also acceptable:
```
$ python-mtarfile-cmonty.tarlife-of-brian_1979/

```

If you want to extract a tar archive into the current directory, use the [`-e`](https://docs.python.org/3/library/tarfile.html#cmdoption-tarfile-e) option:
```
$ python-mtarfile-emonty.tar

```

You can also extract a tar archive into a different directory by passing the directory’s name:
```
$ python-mtarfile-emonty.tarother-dir/

```

For a list of the files in a tar archive, use the [`-l`](https://docs.python.org/3/library/tarfile.html#cmdoption-tarfile-l) option:
```
$ python-mtarfile-lmonty.tar

```

### Command-line options[¶](https://docs.python.org/3/library/tarfile.html#command-line-options "Link to this heading") 

-l <tarfile>[¶](https://docs.python.org/3/library/tarfile.html#cmdoption-tarfile-l "Link to this definition")


--list <tarfile>[¶](https://docs.python.org/3/library/tarfile.html#cmdoption-tarfile-list "Link to this definition")
    
List files in a tarfile. 

-c <tarfile> <source1> ... <sourceN>[¶](https://docs.python.org/3/library/tarfile.html#cmdoption-tarfile-c "Link to this definition")


--create <tarfile> <source1> ... <sourceN>[¶](https://docs.python.org/3/library/tarfile.html#cmdoption-tarfile-create "Link to this definition")
    
Create tarfile from source files. 

-e <tarfile> [<output_dir>][¶](https://docs.python.org/3/library/tarfile.html#cmdoption-tarfile-e "Link to this definition")


--extract <tarfile> [<output_dir>][¶](https://docs.python.org/3/library/tarfile.html#cmdoption-tarfile-extract "Link to this definition")
    
Extract tarfile into the current directory if _output_dir_ is not specified. 

-t <tarfile>[¶](https://docs.python.org/3/library/tarfile.html#cmdoption-tarfile-t "Link to this definition")


--test <tarfile>[¶](https://docs.python.org/3/library/tarfile.html#cmdoption-tarfile-test "Link to this definition")
    
Test whether the tarfile is valid or not. 

-v, --verbose[¶](https://docs.python.org/3/library/tarfile.html#cmdoption-tarfile-v "Link to this definition")
    
Verbose output. 

--filter <filtername>[¶](https://docs.python.org/3/library/tarfile.html#cmdoption-tarfile-filter "Link to this definition")
    
Specifies the _filter_ for `--extract`. See [Extraction filters](https://docs.python.org/3/library/tarfile.html#tarfile-extraction-filter) for details. Only string names are accepted (that is, `fully_trusted`, `tar`, and `data`).
## Examples[¶](https://docs.python.org/3/library/tarfile.html#examples "Link to this heading")
How to extract an entire tar archive to the current working directory:
```
importtarfile
tar = tarfile.open("sample.tar.gz")
tar.extractall(filter='data')
tar.close()

```

How to extract a subset of a tar archive with [`TarFile.extractall()`](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile.extractall "tarfile.TarFile.extractall") using a generator function instead of a list:
```
importos
importtarfile
defpy_files(members):
  for tarinfo in members:
    if os.path.splitext(tarinfo.name)[1] == ".py":
      yield tarinfo
tar = tarfile.open("sample.tar.gz")
tar.extractall(members=py_files(tar))
tar.close()

```

How to create an uncompressed tar archive from a list of filenames:
```
importtarfile
tar = tarfile.open("sample.tar", "w")
for name in ["foo", "bar", "quux"]:
  tar.add(name)
tar.close()

```

The same example using the [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement:
```
importtarfile
with tarfile.open("sample.tar", "w") as tar:
  for name in ["foo", "bar", "quux"]:
    tar.add(name)

```

How to read a gzip compressed tar archive and display some member information:
```
importtarfile
tar = tarfile.open("sample.tar.gz", "r:gz")
for tarinfo in tar:
  print(tarinfo.name, "is", tarinfo.size, "bytes in size and is ", end="")
  if tarinfo.isreg():
    print("a regular file.")
  elif tarinfo.isdir():
    print("a directory.")
  else:
    print("something else.")
tar.close()

```

How to create an archive and reset the user information using the _filter_ parameter in [`TarFile.add()`](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile.add "tarfile.TarFile.add"):