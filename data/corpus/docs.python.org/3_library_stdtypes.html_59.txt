Title: Instance Method Attributes in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This section demonstrates how to assign attributes to an instance method's underlying function in Python. An example shows that directly setting an attribute on a method raises an AttributeError, while accessing the method's __func__ allows attribute assignment. It concludes with a reference to more information on instance methods.
---

```
>>> classC:
...   defmethod(self):
...     pass
...
>>> c = C()
>>> c.method.whoami = 'my name is method' # can't set on the method
Traceback (most recent call last):
 File "<stdin>", line 1, in <module>
AttributeError: 'method' object has no attribute 'whoami'
>>> c.method.__func__.whoami = 'my name is method'
>>> c.method.whoami
'my name is method'

```

See [Instance methods](https://docs.python.org/3/reference/datamodel.html#instance-methods) for more information.
### Code Objects[¶](https://docs.python.org/3/library/stdtypes.html#code-objects "Link to this heading")
Code objects are used by the implementation to represent “pseudo-compiled” executable Python code such as a function body. They differ from function objects because they don’t contain a reference to their global execution environment. Code objects are returned by the built-in [`compile()`](https://docs.python.org/3/library/functions.html#compile "compile") function and can be extracted from function objects through their [`__code__`](https://docs.python.org/3/reference/datamodel.html#function.__code__ "function.__code__") attribute. See also the [`code`](https://docs.python.org/3/library/code.html#module-code "code: Facilities to implement read-eval-print loops.") module.
Accessing [`__code__`](https://docs.python.org/3/reference/datamodel.html#function.__code__ "function.__code__") raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `object.__getattr__` with arguments `obj` and `"__code__"`.
A code object can be executed or evaluated by passing it (instead of a source string) to the [`exec()`](https://docs.python.org/3/library/functions.html#exec "exec") or [`eval()`](https://docs.python.org/3/library/functions.html#eval "eval") built-in functions.
See [The standard type hierarchy](https://docs.python.org/3/reference/datamodel.html#types) for more information.
### Type Objects[¶](https://docs.python.org/3/library/stdtypes.html#type-objects "Link to this heading")
Type objects represent the various object types. An object’s type is accessed by the built-in function [`type()`](https://docs.python.org/3/library/functions.html#type "type"). There are no special operations on types. The standard module [`types`](https://docs.python.org/3/library/types.html#module-types "types: Names for built-in types.") defines names for all standard built-in types.
Types are written like this: `<class 'int'>`.
### The Null Object[¶](https://docs.python.org/3/library/stdtypes.html#the-null-object "Link to this heading")
This object is returned by functions that don’t explicitly return a value. It supports no special operations. There is exactly one null object, named `None` (a built-in name). `type(None)()` produces the same singleton.
It is written as `None`.
### The Ellipsis Object[¶](https://docs.python.org/3/library/stdtypes.html#the-ellipsis-object "Link to this heading")
This object is commonly used by slicing (see [Slicings](https://docs.python.org/3/reference/expressions.html#slicings)). It supports no special operations. There is exactly one ellipsis object, named [`Ellipsis`](https://docs.python.org/3/library/constants.html#Ellipsis "Ellipsis") (a built-in name). `type(Ellipsis)()` produces the [`Ellipsis`](https://docs.python.org/3/library/constants.html#Ellipsis "Ellipsis") singleton.
It is written as `Ellipsis` or `...`.
### The NotImplemented Object[¶](https://docs.python.org/3/library/stdtypes.html#the-notimplemented-object "Link to this heading")
This object is returned from comparisons and binary operations when they are asked to operate on types they don’t support. See [Comparisons](https://docs.python.org/3/reference/expressions.html#comparisons) for more information. There is exactly one [`NotImplemented`](https://docs.python.org/3/library/constants.html#NotImplemented "NotImplemented") object. `type(NotImplemented)()` produces the singleton instance.
It is written as `NotImplemented`.
### Internal Objects[¶](https://docs.python.org/3/library/stdtypes.html#internal-objects "Link to this heading")
See [The standard type hierarchy](https://docs.python.org/3/reference/datamodel.html#types) for this information. It describes [stack frame objects](https://docs.python.org/3/reference/datamodel.html#frame-objects), [traceback objects](https://docs.python.org/3/reference/datamodel.html#traceback-objects), and slice objects.
## Special Attributes[¶](https://docs.python.org/3/library/stdtypes.html#special-attributes "Link to this heading")
The implementation adds a few special read-only attributes to several object types, where they are relevant. Some of these are not reported by the [`dir()`](https://docs.python.org/3/library/functions.html#dir "dir") built-in function. 

definition.__name__[¶](https://docs.python.org/3/library/stdtypes.html#definition.__name__ "Link to this definition")
    
The name of the class, function, method, descriptor, or generator instance.