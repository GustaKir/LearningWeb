Title: SSLContext Methods: get_ca_certs and get_ciphers
URL: https://docs.python.org/3/library/ssl.html
Summary: The `get_ca_certs` method retrieves loaded certification authority certificates, returning either a dictionary format or DER-encoded certificates based on the `binary_form` parameter. Certificates in a capath directory are only loaded if previously used. The `get_ciphers` method provides a list of enabled ciphers, ordered by preference.
---

SSLContext.get_ca_certs(_binary_form =False_)[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.get_ca_certs "Link to this definition")
    
Get a list of loaded “certification authority” (CA) certificates. If the `binary_form` parameter is [`False`](https://docs.python.org/3/library/constants.html#False "False") each list entry is a dict like the output of [`SSLSocket.getpeercert()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.getpeercert "ssl.SSLSocket.getpeercert"). Otherwise the method returns a list of DER-encoded certificates. The returned list does not contain certificates from _capath_ unless a certificate was requested and loaded by a SSL connection.
Note
Certificates in a capath directory aren’t loaded unless they have been used at least once.
Added in version 3.4. 

SSLContext.get_ciphers()[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.get_ciphers "Link to this definition")
    
Get a list of enabled ciphers. The list is in order of cipher priority. See [`SSLContext.set_ciphers()`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_ciphers "ssl.SSLContext.set_ciphers").
Example:
>>>```
>>> ctx = ssl.SSLContext(ssl.PROTOCOL_SSLv23)
>>> ctx.set_ciphers('ECDHE+AESGCM:!ECDSA')
>>> ctx.get_ciphers()
[{'aead': True,
 'alg_bits': 256,
 'auth': 'auth-rsa',
 'description': 'ECDHE-RSA-AES256-GCM-SHA384 TLSv1.2 Kx=ECDH   Au=RSA '
         'Enc=AESGCM(256) Mac=AEAD',
 'digest': None,
 'id': 50380848,
 'kea': 'kx-ecdhe',
 'name': 'ECDHE-RSA-AES256-GCM-SHA384',
 'protocol': 'TLSv1.2',
 'strength_bits': 256,
 'symmetric': 'aes-256-gcm'},
 {'aead': True,
 'alg_bits': 128,
 'auth': 'auth-rsa',
 'description': 'ECDHE-RSA-AES128-GCM-SHA256 TLSv1.2 Kx=ECDH   Au=RSA '
         'Enc=AESGCM(128) Mac=AEAD',
 'digest': None,
 'id': 50380847,
 'kea': 'kx-ecdhe',
 'name': 'ECDHE-RSA-AES128-GCM-SHA256',
 'protocol': 'TLSv1.2',
 'strength_bits': 128,
 'symmetric': 'aes-128-gcm'}]