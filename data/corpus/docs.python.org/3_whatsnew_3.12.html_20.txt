Title: Changes to `datetime` Functions in Python 3.12
URL: https://docs.python.org/3/whatsnew/3.12.html
Summary: `utcnow()` and `utcfromtimestamp()` methods in the `datetime` module are deprecated and set for removal. Users should instead utilize timezone-aware objects by using `now()` and `fromtimestamp()` with the `_tz` parameter set to `datetime.UTC`.
---

`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime")â€™s [`utcnow()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.utcnow "datetime.datetime.utcnow") and [`utcfromtimestamp()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.utcfromtimestamp "datetime.datetime.utcfromtimestamp") are deprecated and will be removed in a future version. Instead, use timezone-aware objects to represent datetimes in UTC: respectively, call [`now()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.now "datetime.datetime.now") and [`fromtimestamp()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.fromtimestamp "datetime.datetime.fromtimestamp") with the _tz_ parameter set to [`datetime.UTC`](https://docs.python.org/3/library/datetime.html#datetime.UTC "datetime.UTC"). (Contributed by Paul Ganssle in [gh-103857](https://github.com/python/cpython/issues/103857).)
  * [`email`](https://docs.python.org/3/library/email.html#module-email "email: Package supporting the parsing, manipulating, and generating email messages."): Deprecate the _isdst_ parameter in [`email.utils.localtime()`](https://docs.python.org/3/library/email.utils.html#email.utils.localtime "email.utils.localtime"). (Contributed by Alan Williams in [gh-72346](https://github.com/python/cpython/issues/72346).)
  * [`importlib.abc`](https://docs.python.org/3/library/importlib.html#module-importlib.abc "importlib.abc: Abstract base classes related to import"): Deprecated the following classes, scheduled for removal in Python 3.14:
    * `importlib.abc.ResourceReader`
    * `importlib.abc.Traversable`
    * `importlib.abc.TraversableResources`
Use [`importlib.resources.abc`](https://docs.python.org/3/library/importlib.resources.abc.html#module-importlib.resources.abc "importlib.resources.abc: Abstract base classes for resources") classes instead:
    * [`importlib.resources.abc.Traversable`](https://docs.python.org/3/library/importlib.resources.abc.html#importlib.resources.abc.Traversable "importlib.resources.abc.Traversable")
    * [`importlib.resources.abc.TraversableResources`](https://docs.python.org/3/library/importlib.resources.abc.html#importlib.resources.abc.TraversableResources "importlib.resources.abc.TraversableResources")
(Contributed by Jason R. Coombs and Hugo van Kemenade in [gh-93963](https://github.com/python/cpython/issues/93963).)
  * [`itertools`](https://docs.python.org/3/library/itertools.html#module-itertools "itertools: Functions creating iterators for efficient looping."): Deprecate the support for copy, deepcopy, and pickle operations, which is undocumented, inefficient, historically buggy, and inconsistent. This will be removed in 3.14 for a significant reduction in code volume and maintenance burden. (Contributed by Raymond Hettinger in [gh-101588](https://github.com/python/cpython/issues/101588).)
  * [`multiprocessing`](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing "multiprocessing: Process-based parallelism."): In Python 3.14, the default [`multiprocessing`](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing "multiprocessing: Process-based parallelism.") start method will change to a safer one on Linux, BSDs, and other non-macOS POSIX platforms where `'fork'` is currently the default ([gh-84559](https://github.com/python/cpython/issues/84559)). Adding a runtime warning about this was deemed too disruptive as the majority of code is not expected to care. Use the [`get_context()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.get_context "multiprocessing.get_context") or [`set_start_method()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.set_start_method "multiprocessing.set_start_method") APIs to explicitly specify when your code _requires_ `'fork'`. See [contexts and start methods](https://docs.python.org/3/library/multiprocessing.html#multiprocessing-start-methods).
  * [`pkgutil`](https://docs.python.org/3/library/pkgutil.html#module-pkgutil "pkgutil: Utilities for the import system."): [`pkgutil.find_loader()`](https://docs.python.org/3/library/pkgutil.html#pkgutil.find_loader "pkgutil.find_loader") and [`pkgutil.get_loader()`](https://docs.python.org/3/library/pkgutil.html#pkgutil.get_loader "pkgutil.get_loader") are deprecated and will be removed in Python 3.14; use [`importlib.util.find_spec()`](https://docs.python.org/3/library/importlib.html#importlib.util.find_spec "importlib.util.find_spec") instead. (Contributed by Nikita Sobolev in [gh-97850](https://github.com/python/cpython/issues/97850).)
  * [`pty`](https://docs.python.org/3/library/pty.html#module-pty "pty: Pseudo-Terminal Handling for Unix.