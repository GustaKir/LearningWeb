Title: _thread.interrupt_main Function
URL: https://docs.python.org/3/library/_thread.html
Summary: The _thread.interrupt_main function simulates the arrival of a signal in the main thread, allowing a separate thread to interrupt it. It can simulate a specific signal if provided, defaulting to signal.SIGINT if not. The function does nothing if the signal is not handled by Python, and the _signum argument was added in version 3.10 for customization.
---

_thread.interrupt_main(_signum =signal.SIGINT_, _/_)[¶](https://docs.python.org/3/library/_thread.html#thread.interrupt_main "Link to this definition")
    
Simulate the effect of a signal arriving in the main thread. A thread can use this function to interrupt the main thread, though there is no guarantee that the interruption will happen immediately.
If given, _signum_ is the number of the signal to simulate. If _signum_ is not given, [`signal.SIGINT`](https://docs.python.org/3/library/signal.html#signal.SIGINT "signal.SIGINT") is simulated.
If the given signal isn’t handled by Python (it was set to [`signal.SIG_DFL`](https://docs.python.org/3/library/signal.html#signal.SIG_DFL "signal.SIG_DFL") or [`signal.SIG_IGN`](https://docs.python.org/3/library/signal.html#signal.SIG_IGN "signal.SIG_IGN")), this function does nothing.
Changed in version 3.10: The _signum_ argument is added to customize the signal number.
Note
This does not emit the corresponding signal but schedules a call to the associated handler (if it exists). If you want to truly emit the signal, use [`signal.raise_signal()`](https://docs.python.org/3/library/signal.html#signal.raise_signal "signal.raise_signal"). 

_thread.exit()[¶](https://docs.python.org/3/library/_thread.html#thread.exit "Link to this definition")
    
Raise the [`SystemExit`](https://docs.python.org/3/library/exceptions.html#SystemExit "SystemExit") exception. When not caught, this will cause the thread to exit silently. 

_thread.allocate_lock()[¶](https://docs.python.org/3/library/_thread.html#thread.allocate_lock "Link to this definition")
    
Return a new lock object. Methods of locks are described below. The lock is initially unlocked. 

_thread.get_ident()[¶](https://docs.python.org/3/library/_thread.html#thread.get_ident "Link to this definition")
    
Return the ‘thread identifier’ of the current thread. This is a nonzero integer. Its value has no direct meaning; it is intended as a magic cookie to be used e.g. to index a dictionary of thread-specific data. Thread identifiers may be recycled when a thread exits and another thread is created. 

_thread.get_native_id()[¶](https://docs.python.org/3/library/_thread.html#thread.get_native_id "Link to this definition")
    
Return the native integral Thread ID of the current thread assigned by the kernel. This is a non-negative integer. Its value may be used to uniquely identify this particular thread system-wide (until the thread terminates, after which the value may be recycled by the OS).
[Availability](https://docs.python.org/3/library/intro.html#availability): Windows, FreeBSD, Linux, macOS, OpenBSD, NetBSD, AIX, DragonFlyBSD, GNU/kFreeBSD.
Added in version 3.8.
Changed in version 3.13: Added support for GNU/kFreeBSD. 

_thread.stack_size([_size_])[¶](https://docs.python.org/3/library/_thread.html#thread.stack_size "Link to this definition")
    
Return the thread stack size used when creating new threads. The optional _size_ argument specifies the stack size to be used for subsequently created threads, and must be 0 (use platform or configured default) or a positive integer value of at least 32,768 (32 KiB). If _size_ is not specified, 0 is used. If changing the thread stack size is unsupported, a [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError") is raised. If the specified stack size is invalid, a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised and the stack size is unmodified. 32 KiB is currently the minimum supported stack size value to guarantee sufficient stack space for the interpreter itself. Note that some platforms may have particular restrictions on values for the stack size, such as requiring a minimum stack size > 32 KiB or requiring allocation in multiples of the system memory page size - platform documentation should be referred to for more information (4 KiB pages are common; using multiples of 4096 for the stack size is the suggested approach in the absence of more specific information).
[Availability](https://docs.python.org/3/library/intro.html#availability): Windows, pthreads.
Unix platforms with POSIX threads support. 

_thread.TIMEOUT_MAX[¶](https://docs.python.org/3/library/_thread.html#thread.TIMEOUT_MAX "Link to this definition")
    
The maximum value allowed for the _timeout_ parameter of [`Lock.acquire`](https://docs.python.org/3/library/threading.html#threading.Lock.acquire "threading.Lock.acquire"). Specifying a timeout greater than this value will raise an [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError").
Added in version 3.2.
Lock objects have the following methods: