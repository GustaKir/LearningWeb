Title: Make Targets and C Extensions
URL: https://docs.python.org/3/using/configure.html
Summary: This section discusses specific make targets such as 'make buildbottest' which differs from 'make test' by using a longer timeout and the 'make regen-all' which regenerates various files. Additionally, it addresses the building of C extensions as built-in modules in Python.
---

#### 3.4.3.8. make buildbottest[¶](https://docs.python.org/3/using/configure.html#make-buildbottest "Link to this heading")
This is similar to `make test`, but uses the `--slow-ci` option and default timeout of 20 minutes, instead of `--fast-ci` option.
#### 3.4.3.9. make regen-all[¶](https://docs.python.org/3/using/configure.html#make-regen-all "Link to this heading")
Regenerate (almost) all generated files. These include (but are not limited to) bytecode cases, and parser generator file. `make regen-stdlib-module-names` and `autoconf` must be run separately for the remaining [generated files](https://docs.python.org/3/using/configure.html#generated-files).
### 3.4.4. C extensions[¶](https://docs.python.org/3/using/configure.html#c-extensions "Link to this heading")
Some C extensions are built as built-in modules, like the `sys` module. They are built with the `Py_BUILD_CORE_BUILTIN` macro defined. Built-in modules have no `__file__` attribute:
>>>```
>>> importsys
>>> sys
<module 'sys' (built-in)>
>>> sys.__file__
Traceback (most recent call last):
 File "<stdin>", line 1, in <module>
AttributeError: module 'sys' has no attribute '__file__'

```

Other C extensions are built as dynamic libraries, like the `_asyncio` module. They are built with the `Py_BUILD_CORE_MODULE` macro defined. Example on Linux x86-64:
>>>```
>>> import_asyncio
>>> _asyncio
<module '_asyncio' from '/usr/lib64/python3.9/lib-dynload/_asyncio.cpython-39-x86_64-linux-gnu.so'>
>>> _asyncio.__file__
'/usr/lib64/python3.9/lib-dynload/_asyncio.cpython-39-x86_64-linux-gnu.so'