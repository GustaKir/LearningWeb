Title: Understanding `+=` Operator Behavior in Python Lists
URL: https://docs.python.org/3/faq/programming.html
Summary: This section explains how the `+=` augmented assignment works for lists in Python, detailing the role of the `__iadd__()` magic method, which calls `extend()` and mutates the original list. It illustrates that the operation results in a no-op assignment, as the pointer remains to the same object.
---

```

To see why this happens, you need to know that (a) if an object implements an [`__iadd__()`](https://docs.python.org/3/reference/datamodel.html#object.__iadd__ "object.__iadd__") magic method, it gets called when the `+=` augmented assignment is executed, and its return value is what gets used in the assignment statement; and (b) for lists, `__iadd__()` is equivalent to calling `extend()` on the list and returning the list. That’s why we say that for lists, `+=` is a “shorthand” for `list.extend()`:
>>>```
>>> a_list = []
>>> a_list += [1]
>>> a_list
[1]

```

This is equivalent to:
>>>```
>>> result = a_list.__iadd__([1])
>>> a_list = result

```

The object pointed to by a_list has been mutated, and the pointer to the mutated object is assigned back to `a_list`. The end result of the assignment is a no-op, since it is a pointer to the same object that `a_list` was previously pointing to, but the assignment still happens.
Thus, in our tuple example what is happening is equivalent to:
>>>```
>>> result = a_tuple[0].__iadd__(['item'])
>>> a_tuple[0] = result
Traceback (most recent call last):
...
TypeError: 'tuple' object does not support item assignment

```

The `__iadd__()` succeeds, and thus the list is extended, but even though `result` points to the same object that `a_tuple[0]` already points to, that final assignment still results in an error, because tuples are immutable.
### [I want to do a complicated sort: can you do a Schwartzian Transform in Python?](https://docs.python.org/3/faq/programming.html#id52)[¶](https://docs.python.org/3/faq/programming.html#i-want-to-do-a-complicated-sort-can-you-do-a-schwartzian-transform-in-python "Link to this heading")
The technique, attributed to Randal Schwartz of the Perl community, sorts the elements of a list by a metric which maps each element to its “sort value”. In Python, use the `key` argument for the [`list.sort()`](https://docs.python.org/3/library/stdtypes.html#list.sort "list.sort") method:
```
Isorted = L[:]
Isorted.sort(key=lambda s: int(s[10:15]))

```

### [How can I sort one list by values from another list?](https://docs.python.org/3/faq/programming.html#id53)[¶](https://docs.python.org/3/faq/programming.html#how-can-i-sort-one-list-by-values-from-another-list "Link to this heading")
Merge them into an iterator of tuples, sort the resulting list, and then pick out the element you want.
>>>```
>>> list1 = ["what", "I'm", "sorting", "by"]
>>> list2 = ["something", "else", "to", "sort"]
>>> pairs = zip(list1, list2)
>>> pairs = sorted(pairs)
>>> pairs
[("I'm", 'else'), ('by', 'sort'), ('sorting', 'to'), ('what', 'something')]
>>> result = [x[1] for x in pairs]
>>> result
['else', 'sort', 'to', 'something']

```

## [Objects](https://docs.python.org/3/faq/programming.html#id54)[¶](https://docs.python.org/3/faq/programming.html#objects "Link to this heading")
### [What is a class?](https://docs.python.org/3/faq/programming.html#id55)[¶](https://docs.python.org/3/faq/programming.html#what-is-a-class "Link to this heading")
A class is the particular object type created by executing a class statement. Class objects are used as templates to create instance objects, which embody both the data (attributes) and code (methods) specific to a datatype.
A class can be based on one or more other classes, called its base class(es). It then inherits the attributes and methods of its base classes. This allows an object model to be successively refined by inheritance. You might have a generic `Mailbox` class that provides basic accessor methods for a mailbox, and subclasses such as `MboxMailbox`, `MaildirMailbox`, `OutlookMailbox` that handle various specific mailbox formats.
### [What is a method?](https://docs.python.org/3/faq/programming.html#id56)[¶](https://docs.python.org/3/faq/programming.html#what-is-a-method "Link to this heading")
A method is a function on some object `x` that you normally call as `x.name(arguments...)`. Methods are defined as functions inside the class definition:
```
classC:
  defmeth(self, arg):
    return arg * 2 + self.attribute