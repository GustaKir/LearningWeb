Title: logging.getLevelName Method
URL: https://docs.python.org/3/library/logging.html
Summary: This method returns the string or numeric representation of a given logging level. For predefined levels such as CRITICAL, ERROR, WARNING, INFO, or DEBUG, it returns the corresponding string. Additionally, if custom names have been associated with levels using addLevelName(), it will return the custom name for the level.
---

logging.getLevelName(_level_)[¶](https://docs.python.org/3/library/logging.html#logging.getLevelName "Link to this definition")
    
Returns the textual or numeric representation of logging level _level_.
If _level_ is one of the predefined levels [`CRITICAL`](https://docs.python.org/3/library/logging.html#logging.CRITICAL "logging.CRITICAL"), [`ERROR`](https://docs.python.org/3/library/logging.html#logging.ERROR "logging.ERROR"), [`WARNING`](https://docs.python.org/3/library/logging.html#logging.WARNING "logging.WARNING"), [`INFO`](https://docs.python.org/3/library/logging.html#logging.INFO "logging.INFO") or [`DEBUG`](https://docs.python.org/3/library/logging.html#logging.DEBUG "logging.DEBUG") then you get the corresponding string. If you have associated levels with names using [`addLevelName()`](https://docs.python.org/3/library/logging.html#logging.addLevelName "logging.addLevelName") then the name you have associated with _level_ is returned. If a numeric value corresponding to one of the defined levels is passed in, the corresponding string representation is returned.
The _level_ parameter also accepts a string representation of the level such as ‘INFO’. In such cases, this functions returns the corresponding numeric value of the level.
If no matching numeric or string value is passed in, the string ‘Level %s’ % level is returned.
Note
Levels are internally integers (as they need to be compared in the logging logic). This function is used to convert between an integer level and the level name displayed in the formatted log output by means of the `%(levelname)s` format specifier (see [LogRecord attributes](https://docs.python.org/3/library/logging.html#logrecord-attributes)), and vice versa.
Changed in version 3.4: In Python versions earlier than 3.4, this function could also be passed a text level, and would return the corresponding numeric value of the level. This undocumented behaviour was considered a mistake, and was removed in Python 3.4, but reinstated in 3.4.2 due to retain backward compatibility. 

logging.getHandlerByName(_name_)[¶](https://docs.python.org/3/library/logging.html#logging.getHandlerByName "Link to this definition")
    
Returns a handler with the specified _name_ , or `None` if there is no handler with that name.
Added in version 3.12. 

logging.getHandlerNames()[¶](https://docs.python.org/3/library/logging.html#logging.getHandlerNames "Link to this definition")
    
Returns an immutable set of all known handler names.
Added in version 3.12. 

logging.makeLogRecord(_attrdict_)[¶](https://docs.python.org/3/library/logging.html#logging.makeLogRecord "Link to this definition")
    
Creates and returns a new [`LogRecord`](https://docs.python.org/3/library/logging.html#logging.LogRecord "logging.LogRecord") instance whose attributes are defined by _attrdict_. This function is useful for taking a pickled [`LogRecord`](https://docs.python.org/3/library/logging.html#logging.LogRecord "logging.LogRecord") attribute dictionary, sent over a socket, and reconstituting it as a [`LogRecord`](https://docs.python.org/3/library/logging.html#logging.LogRecord "logging.LogRecord") instance at the receiving end.