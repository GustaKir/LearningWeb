Title: Python Changelog: Updates and Fixes
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: The Windows installer is updated to SSL version 1.1.1c. Fixes include enhanced email address parsing to prevent invalid formats from being recognized as valid. Additionally, modifications in core functionalities include replacing a fatal error with a RuntimeError in float formatting, and optimizations applied to mathematical functions like floor, ceil, and trunc.
---

SSL to 1.1.1c in Windows installer
  * [bpo-34155](https://bugs.python.org/issue?@action=redirect&bpo=34155): Fix parsing of invalid email addresses with more than one `@` (e.g. a@b@c.com.) to not return the part before 2nd `@` as valid email address. Patch by maxking & jpic.


### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id425 "Link to this heading")
  * [bpo-38631](https://bugs.python.org/issue?@action=redirect&bpo=38631): Replace `Py_FatalError()` call with a regular [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError") exception in `float.__getformat__()`.
  * [bpo-38639](https://bugs.python.org/issue?@action=redirect&bpo=38639): Optimized [`math.floor()`](https://docs.python.org/3/library/math.html#math.floor "math.floor"), [`math.ceil()`](https://docs.python.org/3/library/math.html#math.ceil "math.ceil") and [`math.trunc()`](https://docs.python.org/3/library/math.html#math.trunc "math.trunc") for floats.
  * [bpo-38640](https://bugs.python.org/issue?@action=redirect&bpo=38640): Fixed a bug in the compiler that was causing to raise in the presence of break statements and continue statements inside always false while loops. Patch by Pablo Galindo.
  * [bpo-38613](https://bugs.python.org/issue?@action=redirect&bpo=38613): Optimized some set operations (e.g. `|`, `^`, and `-`) of `dict_keys`. `d.keys() | other` was slower than `set(d) | other` but they are almost same performance for now.
  * [bpo-28029](https://bugs.python.org/issue?@action=redirect&bpo=28029): `"".replace("", s, n)` now returns `s` instead of an empty string for all non-zero `n`. There are similar changes for [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") and [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") objects.
  * [bpo-38535](https://bugs.python.org/issue?@action=redirect&bpo=38535): Fixed line numbers and column offsets for AST nodes for calls without arguments in decorators.
  * [bpo-38525](https://bugs.python.org/issue?@action=redirect&bpo=38525): Fix a segmentation fault when using reverse iterators of empty `dict` objects. Patch by Donghee Na and Inada Naoki.
  * [bpo-38465](https://bugs.python.org/issue?@action=redirect&bpo=38465): [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray"), [`array`](https://docs.python.org/3/library/array.html#array.array "array.array") and [`mmap`](https://docs.python.org/3/library/mmap.html#mmap.mmap "mmap.mmap") objects allow now to export more than `2**31` buffers at a time.
  * [bpo-38469](https://bugs.python.org/issue?@action=redirect&bpo=38469): Fixed a bug where the scope of named expressions was not being resolved correctly in the presence of the _global_ keyword. Patch by Pablo Galindo.
  * [bpo-38437](https://bugs.python.org/issue?@action=redirect&bpo=38437): Activate the `GC_DEBUG` macro for debug builds of the interpreter (when `Py_DEBUG` is set). Patch by Pablo Galindo.
  * [bpo-38379](https://bugs.python.org/issue?@action=redirect&bpo=38379): When the garbage collector makes a collection in which some objects resurrect (they are reachable from outside the isolated cycles after the finalizers have been executed), do not block the collection of all objects that are still unreachable. Patch by Pablo Galindo and Tim Peters.
  * [bpo-38379](https://bugs.python.org/issue?@action=redirect&bpo=38379): When cyclic garbage collection (gc) runs finalizers that resurrect unreachable objects, the current gc run ends, without collecting any cyclic trash. However, the statistics reported by `collect()` and `get_stats()` claimed that all cyclic trash found was collected, and that the resurrected objects were collected. Changed the stats to report that none were collected.
  * [bpo-38392](https://bugs.python.org/issue?@action=redirect&bpo=38392): In debug mode, [`PyObject_GC_Track()`](https://docs.python.org/3/c-api/gcsupport.html#c.PyObject_GC_Track "PyObject_GC_Track") now calls `tp_traverse()` of the object type to ensure that the object is valid: test that objects visited by `tp_traverse()` are valid.
  * [bpo-38210](https://bugs.python.org/issue?@action=redirect&bpo=38210): Remove unnecessary intersection and update set operation in dictview with empty set. (Contributed by Donghee Na in [bpo-38210](https://bugs.python.org/issue?@action=redirect&bpo=38210).)
  * [bpo-38402](https://bugs.python.org/issue?@action=redirect&bpo=38402): Check the error from the system’s underlying `crypt` or `crypt_r`.
  * [bpo-37474](https://bugs.python.org/issue?@action=redirect&bpo=37474): On FreeBSD, Python no longer calls `fedisableexcept()` at startup to control the floating-point control mode. The call became useless since FreeBSD 6: it became the default mode.
  * [bpo-38006](https://bugs.python.org/issue?@action=redirect&bpo=38006): Fix a bug due to the interaction of weakrefs and the cyclic garbage collector. We must clear any weakrefs in garb