Title: Python 3.0 Changes: Tkinter and Turtle Modules
URL: https://docs.python.org/3/whatsnew/3.0.html
Summary: This section discusses the relationship between the Tkinter modules and the Turtle graphics framework, noting that Turtle's audience does not require knowledge of Tkinter. It also highlights enhancements made to the Turtle module since Python 2.6.
---

) (all `Tkinter`-related modules except [`turtle`](https://docs.python.org/3/library/turtle.html#module-turtle "turtle: An educational framework for simple graphics applications")). The target audience of [`turtle`](https://docs.python.org/3/library/turtle.html#module-turtle "turtle: An educational framework for simple graphics applications") doesn’t really care about [`tkinter`](https://docs.python.org/3/library/tkinter.html#module-tkinter "tkinter: Interface to Tcl/Tk for graphical user interfaces"). Also note that as of Python 2.6, the functionality of [`turtle`](https://docs.python.org/3/library/turtle.html#module-turtle "turtle: An educational framework for simple graphics applications") has been greatly enhanced.
    * [`urllib`](https://docs.python.org/3/library/urllib.html#module-urllib "urllib") (`urllib`, `urllib2`, `urlparse`, `robotparse`).
    * [`xmlrpc`](https://docs.python.org/3/library/xmlrpc.html#module-xmlrpc "xmlrpc: Server and client modules implementing XML-RPC.") (`xmlrpclib`, `DocXMLRPCServer`, `SimpleXMLRPCServer`).


Some other changes to standard library modules, not covered by [**PEP 3108**](https://peps.python.org/pep-3108/):
  * Killed `sets`. Use the built-in [`set()`](https://docs.python.org/3/library/stdtypes.html#set "set") class.
  * Cleanup of the [`sys`](https://docs.python.org/3/library/sys.html#module-sys "sys: Access system-specific parameters and functions.") module: removed `sys.exitfunc()`, `sys.exc_clear()`, `sys.exc_type`, `sys.exc_value`, `sys.exc_traceback`. (Note that [`sys.last_type`](https://docs.python.org/3/library/sys.html#sys.last_type "sys.last_type") etc. remain.)
  * Cleanup of the [`array.array`](https://docs.python.org/3/library/array.html#array.array "array.array") type: the `read()` and `write()` methods are gone; use [`fromfile()`](https://docs.python.org/3/library/array.html#array.array.fromfile "array.array.fromfile") and [`tofile()`](https://docs.python.org/3/library/array.html#array.array.tofile "array.array.tofile") instead. Also, the `'c'` typecode for array is gone – use either `'b'` for bytes or `'u'` for Unicode characters.
  * Cleanup of the [`operator`](https://docs.python.org/3/library/operator.html#module-operator "operator: Functions corresponding to the standard operators.") module: removed `sequenceIncludes()` and `isCallable()`.
  * Cleanup of the `thread` module: `acquire_lock()` and `release_lock()` are gone; use [`acquire()`](https://docs.python.org/3/library/threading.html#threading.Lock.acquire "threading.Lock.acquire") and [`release()`](https://docs.python.org/3/library/threading.html#threading.Lock.release "threading.Lock.release") instead.
  * Cleanup of the [`random`](https://docs.python.org/3/library/random.html#module-random "random: Generate pseudo-random numbers with various common distributions.") module: removed the `jumpahead()` API.
  * The `new` module is gone.
  * The functions `os.tmpnam()`, `os.tempnam()` and `os.tmpfile()` have been removed in favor of the [`tempfile`](https://docs.python.org/3/library/tempfile.html#module-tempfile "tempfile: Generate temporary files and directories.") module.
  * The [`tokenize`](https://docs.python.org/3/library/tokenize.html#module-tokenize "tokenize: Lexical scanner for Python source code.") module has been changed to work with bytes. The main entry point is now [`tokenize.tokenize()`](https://docs.python.org/3/library/tokenize.html#tokenize.tokenize "tokenize.tokenize"), instead of generate_tokens.
  * `string.letters` and its friends (`string.lowercase` and `string.uppercase`) are gone. Use [`string.ascii_letters`](https://docs.python.org/3/library/string.html#string.ascii_letters "string.ascii_letters") etc. instead. (The reason for the removal is that `string.letters` and friends had locale-specific behavior, which is a bad idea for such attractively named global “constants”.)
  * Renamed module `__builtin__` to [`builtins`](https://docs.python.org/3/library/builtins.html#module-builtins "builtins: The module that provides the built-in namespace.") (removing the underscores, adding an ‘s’). The `__builtins__` variable found in most global namespaces is unchanged. To modify a builtin, you should use [`builtins`](https://docs.python.org/3/library/builtins.html#module-builtins "builtins: The module that provides the built-in namespace."), not `__builtins__`!


## [**PEP 3101**](https://peps.python.org/pep-3101/): A New Approach To String Formatting[¶](https://docs.python.org/3/whatsnew/3.0.html#pep-3101-a-new-approach-to-string-formatting "Link to this heading")
  * A new system for built-in string formatting operations replaces the `%` string formatting operator. (However, the `%` operator is still supported; it will be deprecated in Python 3.1 and removed from the language at some later time.) Read [**PEP 3101**](https://peps.python.org/pep-3101/) for the full scoop.