Title: Python Glossary - Key Terms
URL: https://docs.python.org/3/glossary.html
Summary: Defines terms such as 'portion' referring to files in a directory for namespace packages, 'positional argument' pertaining to arguments in functions, and 'provisional API' which is an API excluded from standard library's backward compatibility guarantees.
---

portion[¶](https://docs.python.org/3/glossary.html#term-portion "Link to this term")
    
A set of files in a single directory (possibly stored in a zip file) that contribute to a namespace package, as defined in [**PEP 420**](https://peps.python.org/pep-0420/). 

positional argument[¶](https://docs.python.org/3/glossary.html#term-positional-argument "Link to this term")
    
See [argument](https://docs.python.org/3/glossary.html#term-argument). 

provisional API[¶](https://docs.python.org/3/glossary.html#term-provisional-API "Link to this term")
    
A provisional API is one which has been deliberately excluded from the standard library’s backwards compatibility guarantees. While major changes to such interfaces are not expected, as long as they are marked provisional, backwards incompatible changes (up to and including removal of the interface) may occur if deemed necessary by core developers. Such changes will not be made gratuitously – they will occur only if serious fundamental flaws are uncovered that were missed prior to the inclusion of the API.
Even for provisional APIs, backwards incompatible changes are seen as a “solution of last resort” - every attempt will still be made to find a backwards compatible resolution to any identified problems.
This process allows the standard library to continue to evolve over time, without locking in problematic design errors for extended periods of time. See [**PEP 411**](https://peps.python.org/pep-0411/) for more details. 

provisional package[¶](https://docs.python.org/3/glossary.html#term-provisional-package "Link to this term")
    
See [provisional API](https://docs.python.org/3/glossary.html#term-provisional-API). 

Python 3000[¶](https://docs.python.org/3/glossary.html#term-Python-3000 "Link to this term")
    
Nickname for the Python 3.x release line (coined long ago when the release of version 3 was something in the distant future.) This is also abbreviated “Py3k”. 

Pythonic[¶](https://docs.python.org/3/glossary.html#term-Pythonic "Link to this term")
    
An idea or piece of code which closely follows the most common idioms of the Python language, rather than implementing code using concepts common to other languages. For example, a common idiom in Python is to loop over all elements of an iterable using a [`for`](https://docs.python.org/3/reference/compound_stmts.html#for) statement. Many other languages don’t have this type of construct, so people unfamiliar with Python sometimes use a numerical counter instead:
```
for i in range(len(food)):
  print(food[i])

```

As opposed to the cleaner, Pythonic method:
```
for piece in food:
  print(piece)

```


qualified name[¶](https://docs.python.org/3/glossary.html#term-qualified-name "Link to this term")
    
A dotted name showing the “path” from a module’s global scope to a class, function or method defined in that module, as defined in [**PEP 3155**](https://peps.python.org/pep-3155/). For top-level functions and classes, the qualified name is the same as the object’s name:
>>>```
>>> classC:
...   classD:
...     defmeth(self):
...       pass
...
>>> C.__qualname__
'C'
>>> C.D.__qualname__
'C.D'
>>> C.D.meth.__qualname__
'C.D.meth'

```

When used to refer to modules, the _fully qualified name_ means the entire dotted path to the module, including any parent packages, e.g. `email.mime.text`:
>>>```
>>> importemail.mime.text
>>> email.mime.text.__name__
'email.mime.text'