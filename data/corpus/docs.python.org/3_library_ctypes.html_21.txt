Title: ctypes Module Functions
URL: https://docs.python.org/3/library/ctypes.html
Summary: This section describes functions in the ctypes module, including `get_errno` which retrieves the current value of the `errno` variable for the thread, and `get_last_error` which retrieves the `LastError` value, specifically available on Windows. Both functions also trigger auditing events without arguments.
---

ctypes.get_errno()[¶](https://docs.python.org/3/library/ctypes.html#ctypes.get_errno "Link to this definition")
    
Returns the current value of the ctypes-private copy of the system [`errno`](https://docs.python.org/3/library/errno.html#module-errno "errno: Standard errno system symbols.") variable in the calling thread.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `ctypes.get_errno` with no arguments. 

ctypes.get_last_error()[¶](https://docs.python.org/3/library/ctypes.html#ctypes.get_last_error "Link to this definition")
    
Returns the current value of the ctypes-private copy of the system `LastError` variable in the calling thread.
[Availability](https://docs.python.org/3/library/intro.html#availability): Windows
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `ctypes.get_last_error` with no arguments. 

ctypes.memmove(_dst_ , _src_ , _count_)[¶](https://docs.python.org/3/library/ctypes.html#ctypes.memmove "Link to this definition")
    
Same as the standard C memmove library function: copies _count_ bytes from _src_ to _dst_. _dst_ and _src_ must be integers or ctypes instances that can be converted to pointers. 

ctypes.memset(_dst_ , _c_ , _count_)[¶](https://docs.python.org/3/library/ctypes.html#ctypes.memset "Link to this definition")
    
Same as the standard C memset library function: fills the memory block at address _dst_ with _count_ bytes of value _c_. _dst_ must be an integer specifying an address, or a ctypes instance. 

ctypes.POINTER(_type_ , _/_)[¶](https://docs.python.org/3/library/ctypes.html#ctypes.POINTER "Link to this definition")
    
Create and return a new ctypes pointer type. Pointer types are cached and reused internally, so calling this function repeatedly is cheap. _type_ must be a ctypes type. 

ctypes.pointer(_obj_ , _/_)[¶](https://docs.python.org/3/library/ctypes.html#ctypes.pointer "Link to this definition")
    
Create a new pointer instance, pointing to _obj_. The returned object is of the type `POINTER(type(obj))`.
Note: If you just want to pass a pointer to an object to a foreign function call, you should use `byref(obj)` which is much faster. 

ctypes.resize(_obj_ , _size_)[¶](https://docs.python.org/3/library/ctypes.html#ctypes.resize "Link to this definition")
    
This function resizes the internal memory buffer of _obj_ , which must be an instance of a ctypes type. It is not possible to make the buffer smaller than the native size of the objects type, as given by `sizeof(type(obj))`, but it is possible to enlarge the buffer. 

ctypes.set_errno(_value_)[¶](https://docs.python.org/3/library/ctypes.html#ctypes.set_errno "Link to this definition")
    
Set the current value of the ctypes-private copy of the system [`errno`](https://docs.python.org/3/library/errno.html#module-errno "errno: Standard errno system symbols.") variable in the calling thread to _value_ and return the previous value.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `ctypes.set_errno` with argument `errno`. 

ctypes.set_last_error(_value_)[¶](https://docs.python.org/3/library/ctypes.html#ctypes.set_last_error "Link to this definition")
    
Sets the current value of the ctypes-private copy of the system `LastError` variable in the calling thread to _value_ and return the previous value.
[Availability](https://docs.python.org/3/library/intro.html#availability): Windows
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `ctypes.set_last_error` with argument `error`. 

ctypes.sizeof(_obj_or_type_)[¶](https://docs.python.org/3/library/ctypes.html#ctypes.sizeof "Link to this definition")
    
Returns the size in bytes of a ctypes type or instance memory buffer. Does the same as the C `sizeof` operator. 

ctypes.string_at(_ptr_ , _size =-1_)[¶](https://docs.python.org/3/library/ctypes.html#ctypes.string_at "Link to this definition")
    
Return the byte string at _void *ptr_. If _size_ is specified, it is used as size, otherwise the string is assumed to be zero-terminated.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `ctypes.string_at` with arguments `ptr`, `size`.