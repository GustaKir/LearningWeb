Title: Comparing Decimal Operands in Python
URL: https://docs.python.org/3/library/decimal.html
Summary: The `compare_total_mag` function compares two Decimal operands based on their total order, returning specific decimal values based on their relation. It is unaffected by context and does not change flags or round results, although an InvalidOperation may be raised by the C version if conversion fails.
---

```

Quiet and signaling NaNs are also included in the total ordering. The result of this function is `Decimal('0')` if both operands have the same representation, `Decimal('-1')` if the first operand is lower in the total order than the second, and `Decimal('1')` if the first operand is higher in the total order than the second operand. See the specification for details of the total order.
This operation is unaffected by context and is quiet: no flags are changed and no rounding is performed. As an exception, the C version may raise InvalidOperation if the second operand cannot be converted exactly. 

compare_total_mag(_other_ , _context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.compare_total_mag "Link to this definition")
    
Compare two operands using their abstract representation rather than their value as in [`compare_total()`](https://docs.python.org/3/library/decimal.html#decimal.Decimal.compare_total "decimal.Decimal.compare_total"), but ignoring the sign of each operand. `x.compare_total_mag(y)` is equivalent to `x.copy_abs().compare_total(y.copy_abs())`.
This operation is unaffected by context and is quiet: no flags are changed and no rounding is performed. As an exception, the C version may raise InvalidOperation if the second operand cannot be converted exactly. 

conjugate()[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.conjugate "Link to this definition")
    
Just returns self, this method is only to comply with the Decimal Specification. 

copy_abs()[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.copy_abs "Link to this definition")
    
Return the absolute value of the argument. This operation is unaffected by the context and is quiet: no flags are changed and no rounding is performed. 

copy_negate()[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.copy_negate "Link to this definition")
    
Return the negation of the argument. This operation is unaffected by the context and is quiet: no flags are changed and no rounding is performed. 

copy_sign(_other_ , _context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.copy_sign "Link to this definition")
    
Return a copy of the first operand with the sign set to be the same as the sign of the second operand. For example:
>>>```
>>> Decimal('2.3').copy_sign(Decimal('-1.5'))
Decimal('-2.3')

```

This operation is unaffected by context and is quiet: no flags are changed and no rounding is performed. As an exception, the C version may raise InvalidOperation if the second operand cannot be converted exactly. 

exp(_context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.exp "Link to this definition")
    
Return the value of the (natural) exponential function `e**x` at the given number. The result is correctly rounded using the [`ROUND_HALF_EVEN`](https://docs.python.org/3/library/decimal.html#decimal.ROUND_HALF_EVEN "decimal.ROUND_HALF_EVEN") rounding mode.
>>>```
>>> Decimal(1).exp()
Decimal('2.718281828459045235360287471')
>>> Decimal(321).exp()
Decimal('2.561702493119680037517373933E+139')

```


_classmethod_ from_float(_f_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.from_float "Link to this definition")
    
Alternative constructor that only accepts instances of [`float`](https://docs.python.org/3/library/functions.html#float "float") or [`int`](https://docs.python.org/3/library/functions.html#int "int").
Note `Decimal.from_float(0.1)` is not the same as `Decimal('0.1')`. Since 0.1 is not exactly representable in binary floating point, the value is stored as the nearest representable value which is `0x1.999999999999ap-4`. That equivalent value in decimal is `0.1000000000000000055511151231257827021181583404541015625`.
Note
From Python 3.2 onwards, a [`Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal") instance can also be constructed directly from a [`float`](https://docs.python.org/3/library/functions.html#float "float").
>>>```
>>> Decimal.from_float(0.1)
Decimal('0.1000000000000000055511151231257827021181583404541015625')
>>> Decimal.from_float(float('nan'))
Decimal('NaN')
>>> Decimal.from_float(float('inf'))
Decimal('Infinity')
>>> Decimal.from_float(float('-inf'))
Decimal('-Infinity')

```

Added in version 3.1. 

fma(_other_ , _third_ , _context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.fma "Link to this definition")
    
Fused multiply-add. Return self*other+third with no rounding of the intermediate product self*other.
>>>```
>>> Decimal(2).fma(3, 5)
Decimal('11')