Title: Porting to Python 3.10
URL: https://docs.python.org/3/whatsnew/3.10.html
Summary: Changes in Python 3.10 require defining the `PY_SSIZE_T_CLEAN` macro for specific parsing and building functions, as outlined in PEP 353. Additionally, the way reference counts are modified has changed, necessitating the use of `Py_SET_REFCNT()` instead of direct assignment.
---

### Porting to Python 3.10[Â¶](https://docs.python.org/3/whatsnew/3.10.html#id2 "Link to this heading")
  * The `PY_SSIZE_T_CLEAN` macro must now be defined to use [`PyArg_ParseTuple()`](https://docs.python.org/3/c-api/arg.html#c.PyArg_ParseTuple "PyArg_ParseTuple") and [`Py_BuildValue()`](https://docs.python.org/3/c-api/arg.html#c.Py_BuildValue "Py_BuildValue") formats which use `#`: `es#`, `et#`, `s#`, `u#`, `y#`, `z#`, `U#` and `Z#`. See [Parsing arguments and building values](https://docs.python.org/3/c-api/arg.html#arg-parsing) and [**PEP 353**](https://peps.python.org/pep-0353/). (Contributed by Victor Stinner in [bpo-40943](https://bugs.python.org/issue?@action=redirect&bpo=40943).)
  * Since [`Py_REFCNT()`](https://docs.python.org/3/c-api/refcounting.html#c.Py_REFCNT "Py_REFCNT") is changed to the inline static function, `Py_REFCNT(obj) = new_refcnt` must be replaced with `Py_SET_REFCNT(obj, new_refcnt)`: see [`Py_SET_REFCNT()`](https://docs.python.org/3/c-api/refcounting.html#c.Py_SET_REFCNT "Py_SET_REFCNT") (available since Python 3.9). For backward compatibility, this macro can be used:
```
#if PY_VERSION_HEX < 0x030900A4
# define Py_SET_REFCNT(obj, refcnt) ((Py_REFCNT(obj) = (refcnt)), (void)0)
#endif

```

(Contributed by Victor Stinner in [bpo-39573](https://bugs.python.org/issue?@action=redirect&bpo=39573).)
  * Calling [`PyDict_GetItem()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_GetItem "PyDict_GetItem") without [GIL](https://docs.python.org/3/glossary.html#term-GIL) held had been allowed for historical reason. It is no longer allowed. (Contributed by Victor Stinner in [bpo-40839](https://bugs.python.org/issue?@action=redirect&bpo=40839).)
  * `PyUnicode_FromUnicode(NULL, size)` and `PyUnicode_FromStringAndSize(NULL, size)` raise `DeprecationWarning` now. Use [`PyUnicode_New()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_New "PyUnicode_New") to allocate Unicode object without initial data. (Contributed by Inada Naoki in [bpo-36346](https://bugs.python.org/issue?@action=redirect&bpo=36346).)
  * The private `_PyUnicode_Name_CAPI` structure of the PyCapsule API `unicodedata.ucnhash_CAPI` has been moved to the internal C API. (Contributed by Victor Stinner in [bpo-42157](https://bugs.python.org/issue?@action=redirect&bpo=42157).)
  * [`Py_GetPath()`](https://docs.python.org/3/c-api/init.html#c.Py_GetPath "Py_GetPath"), [`Py_GetPrefix()`](https://docs.python.org/3/c-api/init.html#c.Py_GetPrefix "Py_GetPrefix"), [`Py_GetExecPrefix()`](https://docs.python.org/3/c-api/init.html#c.Py_GetExecPrefix "Py_GetExecPrefix"), [`Py_GetProgramFullPath()`](https://docs.python.org/3/c-api/init.html#c.Py_GetProgramFullPath "Py_GetProgramFullPath"), [`Py_GetPythonHome()`](https://docs.python.org/3/c-api/init.html#c.Py_GetPythonHome "Py_GetPythonHome") and [`Py_GetProgramName()`](https://docs.python.org/3/c-api/init.html#c.Py_GetProgramName "Py_GetProgramName") functions now return `NULL` if called before [`Py_Initialize()`](https://docs.python.org/3/c-api/init.html#c.Py_Initialize "Py_Initialize") (before Python is initialized). Use the new [Python Initialization Configuration](https://docs.python.org/3/c-api/init_config.html#init-config) API to get the [Python Path Configuration](https://docs.python.org/3/c-api/init_config.html#init-path-config). (Contributed by Victor Stinner in [bpo-42260](https://bugs.python.org/issue?@action=redirect&bpo=42260).)
  * [`PyList_SET_ITEM()`](https://docs.python.org/3/c-api/list.html#c.PyList_SET_ITEM "PyList_SET_ITEM"), [`PyTuple_SET_ITEM()`](https://docs.python.org/3/c-api/tuple.html#c.PyTuple_SET_ITEM "PyTuple_SET_ITEM") and [`PyCell_SET()`](https://docs.python.org/3/c-api/cell.html#c.PyCell_SET "PyCell_SET") macros can no longer be used as l-value or r-value. For example, `x = PyList_SET_ITEM(a, b, c)` and `PyList_SET_ITEM(a, b, c) = x` now fail with a compiler error. It prevents bugs like `if (PyList_SET_ITEM (a, b, c) < 0) ...` test. (Contributed by Zackery Spytz and Victor Stinner in [bpo-30459](https://bugs.python.org/issue?@action=redirect&bpo=30459).)
  * The non-limited API files `odictobject.h`, `parser_interface.h`, `picklebufobject.h`, `pyarena.h`, `pyctype.h`, `pydebug.h`, `pyfpe.h`, and `pytime.h` have been moved to the `Include/cpython` directory. These files must not be included directly, as they are already included in `Python.h`; see [Include Files](https://docs.python.org/3/c-api/intro.html#api-includes). If they have been included directly, consider including `Python.h` instead. (Contributed by Nicholas Sim in [bpo-35134](https://bugs.python.org/issue?@action=redirect&bpo=35134).)
  * Use the [`Py_TPFLAGS_IMMUTABLETYPE`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_IMMUTABLETYPE "Py_TPFLAGS_IMMUTABLETYPE") type flag to create immutable type objects. Do not rely on [`Py_TPFLAGS_HEAPTYPE`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_HEAPTYPE "Py_TPFLAGS_HEAPTYPE") to decide if a type object is mutable or no