Title: Creating the Parser with optparse
URL: https://docs.python.org/3/library/optparse.html
Summary: This section explains how to create an OptionParser instance using the optparse library in Python. It highlights that the constructor has no required arguments, and emphasizes the importance of passing optional parameters as keyword arguments. Additionally, it mentions the default usage summary provided for incorrect program usage.
---

```

## Reference Guide[¶](https://docs.python.org/3/library/optparse.html#reference-guide "Link to this heading")
### Creating the parser[¶](https://docs.python.org/3/library/optparse.html#creating-the-parser "Link to this heading")
The first step in using [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") is to create an OptionParser instance. 

_class_ optparse.OptionParser(_..._)[¶](https://docs.python.org/3/library/optparse.html#optparse.OptionParser "Link to this definition")
    
The OptionParser constructor has no required arguments, but a number of optional keyword arguments. You should always pass them as keyword arguments, i.e. do not rely on the order in which the arguments are declared. 

`usage` (default: `"%prog [options]"`)
    
The usage summary to print when your program is run incorrectly or with a help option. When [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") prints the usage string, it expands `%prog` to `os.path.basename(sys.argv[0])` (or to `prog` if you passed that keyword argument). To suppress a usage message, pass the special value `optparse.SUPPRESS_USAGE`. 

`option_list` (default: `[]`)
    
A list of Option objects to populate the parser with. The options in `option_list` are added after any options in `standard_option_list` (a class attribute that may be set by OptionParser subclasses), but before any version or help options. Deprecated; use [`add_option()`](https://docs.python.org/3/library/optparse.html#optparse.OptionParser.add_option "optparse.OptionParser.add_option") after creating the parser instead. 

`option_class` (default: optparse.Option)
    
Class to use when adding options to the parser in [`add_option()`](https://docs.python.org/3/library/optparse.html#optparse.OptionParser.add_option "optparse.OptionParser.add_option"). 

`version` (default: `None`)
    
A version string to print when the user supplies a version option. If you supply a true value for `version`, [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") automatically adds a version option with the single option string `--version`. The substring `%prog` is expanded the same as for `usage`. 

`conflict_handler` (default: `"error"`)
    
Specifies what to do when options with conflicting option strings are added to the parser; see section [Conflicts between options](https://docs.python.org/3/library/optparse.html#optparse-conflicts-between-options). 

`description` (default: `None`)
    
A paragraph of text giving a brief overview of your program. [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") reformats this paragraph to fit the current terminal width and prints it when the user requests help (after `usage`, but before the list of options). 

`formatter` (default: a new `IndentedHelpFormatter`)
    
An instance of optparse.HelpFormatter that will be used for printing help text. [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") provides two concrete classes for this purpose: IndentedHelpFormatter and TitledHelpFormatter. 

`add_help_option` (default: `True`)
    
If true, [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") will add a help option (with option strings `-h` and `--help`) to the parser. 

`prog`
    
The string to use when expanding `%prog` in `usage` and `version` instead of `os.path.basename(sys.argv[0])`. 

`epilog` (default: `None`)
    
A paragraph of help text to print after the option help.
### Populating the parser[¶](https://docs.python.org/3/library/optparse.html#populating-the-parser "Link to this heading")
There are several ways to populate the parser with options. The preferred way is by using [`OptionParser.add_option()`](https://docs.python.org/3/library/optparse.html#optparse.OptionParser.add_option "optparse.OptionParser.add_option"), as shown in section [Tutorial](https://docs.python.org/3/library/optparse.html#optparse-tutorial). `add_option()` can be called in one of two ways:
  * pass it an Option instance (as returned by `make_option()`)
  * pass it any combination of positional and keyword arguments that are acceptable to `make_option()` (i.e., to the Option constructor), and it will create the Option instance for you


The other alternative is to pass a list of pre-constructed Option instances to the OptionParser constructor, as in:
```
option_list = [
  make_option("-f", "--filename",
        action="store", type="string", dest="filename"),
  make_option("-q", "--quiet",
        action="store_false", dest="verbose"),
  ]
parser = OptionParser(option_list=option_list)