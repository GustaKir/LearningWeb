Title: TarFile Extraction Filter
URL: https://docs.python.org/3/library/tarfile.html
Summary: Introduces the `extraction_filter` attribute in TarFile, added in Python 3.12, which serves as the default for the _filter_ argument in `extract()` and `extractall()`. The attribute can be `None` or a callable, with string names not permitted. If `extraction_filter` is `None`, using extraction methods without a filter will trigger a `DeprecationWarning`.
---

TarFile.extraction_filter[¶](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile.extraction_filter "Link to this definition")
    
Added in version 3.12.
The [extraction filter](https://docs.python.org/3/library/tarfile.html#tarfile-extraction-filter) used as a default for the _filter_ argument of [`extract()`](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile.extract "tarfile.TarFile.extract") and [`extractall()`](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile.extractall "tarfile.TarFile.extractall").
The attribute may be `None` or a callable. String names are not allowed for this attribute, unlike the _filter_ argument to [`extract()`](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile.extract "tarfile.TarFile.extract").
If `extraction_filter` is `None` (the default), calling an extraction method without a _filter_ argument will raise a `DeprecationWarning`, and fall back to the [`fully_trusted`](https://docs.python.org/3/library/tarfile.html#tarfile.fully_trusted_filter "tarfile.fully_trusted_filter") filter, whose dangerous behavior matches previous versions of Python.
In Python 3.14+, leaving `extraction_filter=None` will cause extraction methods to use the [`data`](https://docs.python.org/3/library/tarfile.html#tarfile.data_filter "tarfile.data_filter") filter by default.
The attribute may be set on instances or overridden in subclasses. It also is possible to set it on the `TarFile` class itself to set a global default, although, since it affects all uses of _tarfile_ , it is best practice to only do so in top-level applications or [`site configuration`](https://docs.python.org/3/library/site.html#module-site "site: Module responsible for site-specific configuration."). To set a global default this way, a filter function needs to be wrapped in [`staticmethod()`](https://docs.python.org/3/library/functions.html#staticmethod "staticmethod") to prevent injection of a `self` argument. 

TarFile.add(_name_ , _arcname =None_, _recursive =True_, _*_ , _filter =None_)[¶](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile.add "Link to this definition")
    
Add the file _name_ to the archive. _name_ may be any type of file (directory, fifo, symbolic link, etc.). If given, _arcname_ specifies an alternative name for the file in the archive. Directories are added recursively by default. This can be avoided by setting _recursive_ to [`False`](https://docs.python.org/3/library/constants.html#False "False"). Recursion adds entries in sorted order. If _filter_ is given, it should be a function that takes a [`TarInfo`](https://docs.python.org/3/library/tarfile.html#tarfile.TarInfo "tarfile.TarInfo") object argument and returns the changed [`TarInfo`](https://docs.python.org/3/library/tarfile.html#tarfile.TarInfo "tarfile.TarInfo") object. If it instead returns [`None`](https://docs.python.org/3/library/constants.html#None "None") the [`TarInfo`](https://docs.python.org/3/library/tarfile.html#tarfile.TarInfo "tarfile.TarInfo") object will be excluded from the archive. See [Examples](https://docs.python.org/3/library/tarfile.html#tar-examples) for an example.
Changed in version 3.2: Added the _filter_ parameter.
Changed in version 3.7: Recursion adds entries in sorted order. 

TarFile.addfile(_tarinfo_ , _fileobj =None_)[¶](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile.addfile "Link to this definition")
    
Add the [`TarInfo`](https://docs.python.org/3/library/tarfile.html#tarfile.TarInfo "tarfile.TarInfo") object _tarinfo_ to the archive. If _tarinfo_ represents a non zero-size regular file, the _fileobj_ argument should be a [binary file](https://docs.python.org/3/glossary.html#term-binary-file), and `tarinfo.size` bytes are read from it and added to the archive. You can create [`TarInfo`](https://docs.python.org/3/library/tarfile.html#tarfile.TarInfo "tarfile.TarInfo") objects directly, or by using [`gettarinfo()`](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile.gettarinfo "tarfile.TarFile.gettarinfo").
Changed in version 3.13: _fileobj_ must be given for non-zero-sized regular files.