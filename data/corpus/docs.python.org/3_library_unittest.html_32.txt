Title: Testing Module Cleanup in unittest
URL: https://docs.python.org/3/library/unittest.html
Summary: This section explains the behavior of the `setUpModule` and `tearDownModule` functions in Python's unittest framework, highlighting that if an exception occurs in `setUpModule`, subsequent tests will not run. It introduces `addModuleCleanup` for adding cleanup functions that execute after `tearDownModule`, ensuring cleanup actions are retained even if exceptions occur.
---

```

If an exception is raised in a `setUpModule` then none of the tests in the module will be run and the `tearDownModule` will not be run. If the exception is a [`SkipTest`](https://docs.python.org/3/library/unittest.html#unittest.SkipTest "unittest.SkipTest") exception then the module will be reported as having been skipped instead of as an error.
To add cleanup code that must be run even in the case of an exception, use `addModuleCleanup`: 

unittest.addModuleCleanup(_function_ , _/_ , _* args_, _** kwargs_)[¶](https://docs.python.org/3/library/unittest.html#unittest.addModuleCleanup "Link to this definition")
    
Add a function to be called after `tearDownModule()` to cleanup resources used during the test class. Functions will be called in reverse order to the order they are added (LIFO). They are called with any arguments and keyword arguments passed into [`addModuleCleanup()`](https://docs.python.org/3/library/unittest.html#unittest.addModuleCleanup "unittest.addModuleCleanup") when they are added.
If `setUpModule()` fails, meaning that `tearDownModule()` is not called, then any cleanup functions added will still be called.
Added in version 3.8. 

_classmethod_ unittest.enterModuleContext(_cm_)[¶](https://docs.python.org/3/library/unittest.html#unittest.enterModuleContext "Link to this definition")
    
Enter the supplied [context manager](https://docs.python.org/3/glossary.html#term-context-manager). If successful, also add its [`__exit__()`](https://docs.python.org/3/reference/datamodel.html#object.__exit__ "object.__exit__") method as a cleanup function by [`addModuleCleanup()`](https://docs.python.org/3/library/unittest.html#unittest.addModuleCleanup "unittest.addModuleCleanup") and return the result of the [`__enter__()`](https://docs.python.org/3/reference/datamodel.html#object.__enter__ "object.__enter__") method.
Added in version 3.11. 

unittest.doModuleCleanups()[¶](https://docs.python.org/3/library/unittest.html#unittest.doModuleCleanups "Link to this definition")
    
This function is called unconditionally after `tearDownModule()`, or after `setUpModule()` if `setUpModule()` raises an exception.
It is responsible for calling all the cleanup functions added by [`addModuleCleanup()`](https://docs.python.org/3/library/unittest.html#unittest.addModuleCleanup "unittest.addModuleCleanup"). If you need cleanup functions to be called _prior_ to `tearDownModule()` then you can call [`doModuleCleanups()`](https://docs.python.org/3/library/unittest.html#unittest.doModuleCleanups "unittest.doModuleCleanups") yourself.
[`doModuleCleanups()`](https://docs.python.org/3/library/unittest.html#unittest.doModuleCleanups "unittest.doModuleCleanups") pops methods off the stack of cleanup functions one at a time, so it can be called at any time.
Added in version 3.8.
## Signal Handling[¶](https://docs.python.org/3/library/unittest.html#signal-handling "Link to this heading")
Added in version 3.2.
The [`-c/--catch`](https://docs.python.org/3/library/unittest.html#cmdoption-unittest-c) command-line option to unittest, along with the `catchbreak` parameter to [`unittest.main()`](https://docs.python.org/3/library/unittest.html#unittest.main "unittest.main"), provide more friendly handling of control-C during a test run. With catch break behavior enabled control-C will allow the currently running test to complete, and the test run will then end and report all the results so far. A second control-c will raise a [`KeyboardInterrupt`](https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt "KeyboardInterrupt") in the usual way.
The control-c handling signal handler attempts to remain compatible with code or tests that install their own [`signal.SIGINT`](https://docs.python.org/3/library/signal.html#signal.SIGINT "signal.SIGINT") handler. If the `unittest` handler is called but _isn’t_ the installed [`signal.SIGINT`](https://docs.python.org/3/library/signal.html#signal.SIGINT "signal.SIGINT") handler, i.e. it has been replaced by the system under test and delegated to, then it calls the default handler. This will normally be the expected behavior by code that replaces an installed handler and delegates to it. For individual tests that need `unittest` control-c handling disabled the [`removeHandler()`](https://docs.python.org/3/library/unittest.html#unittest.removeHandler "unittest.removeHandler") decorator can be used.
There are a few utility functions for framework authors to enable control-c handling functionality within test frameworks.