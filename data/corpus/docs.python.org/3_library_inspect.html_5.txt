Title: inspect.ismethoddescriptor() Function
URL: https://docs.python.org/3/library/inspect.html
Summary: The `inspect.ismethoddescriptor()` function returns `True` if the provided object is a method descriptor. It excludes cases where the object qualifies as a method, class, function, or built-in. An example includes `int.__add__`, which has a `__get__()` method but lacks `__set__()` and `__delete__()` methods.
---

inspect.ismethoddescriptor(_object_)[¶](https://docs.python.org/3/library/inspect.html#inspect.ismethoddescriptor "Link to this definition")
    
Return `True` if the object is a method descriptor, but not if [`ismethod()`](https://docs.python.org/3/library/inspect.html#inspect.ismethod "inspect.ismethod"), [`isclass()`](https://docs.python.org/3/library/inspect.html#inspect.isclass "inspect.isclass"), [`isfunction()`](https://docs.python.org/3/library/inspect.html#inspect.isfunction "inspect.isfunction") or [`isbuiltin()`](https://docs.python.org/3/library/inspect.html#inspect.isbuiltin "inspect.isbuiltin") are true.
This, for example, is true of `int.__add__`. An object passing this test has a [`__get__()`](https://docs.python.org/3/reference/datamodel.html#object.__get__ "object.__get__") method, but not a [`__set__()`](https://docs.python.org/3/reference/datamodel.html#object.__set__ "object.__set__") method or a [`__delete__()`](https://docs.python.org/3/reference/datamodel.html#object.__delete__ "object.__delete__") method. Beyond that, the set of attributes varies. A [`__name__`](https://docs.python.org/3/library/stdtypes.html#definition.__name__ "definition.__name__") attribute is usually sensible, and [`__doc__`](https://docs.python.org/3/library/stdtypes.html#definition.__doc__ "definition.__doc__") often is.
Methods implemented via descriptors that also pass one of the other tests return `False` from the [`ismethoddescriptor()`](https://docs.python.org/3/library/inspect.html#inspect.ismethoddescriptor "inspect.ismethoddescriptor") test, simply because the other tests promise more – you can, e.g., count on having the [`__func__`](https://docs.python.org/3/reference/datamodel.html#method.__func__ "method.__func__") attribute (etc) when an object passes [`ismethod()`](https://docs.python.org/3/library/inspect.html#inspect.ismethod "inspect.ismethod").
Changed in version 3.13: This function no longer incorrectly reports objects with [`__get__()`](https://docs.python.org/3/reference/datamodel.html#object.__get__ "object.__get__") and [`__delete__()`](https://docs.python.org/3/reference/datamodel.html#object.__delete__ "object.__delete__"), but not [`__set__()`](https://docs.python.org/3/reference/datamodel.html#object.__set__ "object.__set__"), as being method descriptors (such objects are data descriptors, not method descriptors). 

inspect.isdatadescriptor(_object_)[¶](https://docs.python.org/3/library/inspect.html#inspect.isdatadescriptor "Link to this definition")
    
Return `True` if the object is a data descriptor.
Data descriptors have a [`__set__`](https://docs.python.org/3/reference/datamodel.html#object.__set__ "object.__set__") or a [`__delete__`](https://docs.python.org/3/reference/datamodel.html#object.__delete__ "object.__delete__") method. Examples are properties (defined in Python), getsets, and members. The latter two are defined in C and there are more specific tests available for those types, which is robust across Python implementations. Typically, data descriptors will also have [`__name__`](https://docs.python.org/3/library/stdtypes.html#definition.__name__ "definition.__name__") and `__doc__` attributes (properties, getsets, and members have both of these attributes), but this is not guaranteed. 

inspect.isgetsetdescriptor(_object_)[¶](https://docs.python.org/3/library/inspect.html#inspect.isgetsetdescriptor "Link to this definition")
    
Return `True` if the object is a getset descriptor.
**CPython implementation detail:** getsets are attributes defined in extension modules via [`PyGetSetDef`](https://docs.python.org/3/c-api/structures.html#c.PyGetSetDef "PyGetSetDef") structures. For Python implementations without such types, this method will always return `False`. 

inspect.ismemberdescriptor(_object_)[¶](https://docs.python.org/3/library/inspect.html#inspect.ismemberdescriptor "Link to this definition")
    
Return `True` if the object is a member descriptor.
**CPython implementation detail:** Member descriptors are attributes defined in extension modules via [`PyMemberDef`](https://docs.python.org/3/c-api/structures.html#c.PyMemberDef "PyMemberDef") structures. For Python implementations without such types, this method will always return `False`.
## Retrieving source code[¶](https://docs.python.org/3/library/inspect.html#retrieving-source-code "Link to this heading")