Title: Graphlib - Functionality to Operate with Graph-like Structures
URL: https://docs.python.org/3/library/graphlib.html
Summary: This document section introduces the `graphlib` module, which provides functionality for working with graph-like structures in Python. It serves as a resource for developers interested in utilizing graph algorithms and data representations.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [`graphlib` — Functionality to operate with graph-like structures](https://docs.python.org/3/library/graphlib.html)
    * [Exceptions](https://docs.python.org/3/library/graphlib.html#exceptions)


#### Previous topic
[`enum` — Support for enumerations](https://docs.python.org/3/library/enum.html "previous chapter")
#### Next topic
[Numeric and Mathematical Modules](https://docs.python.org/3/library/numeric.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/graphlib.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/numeric.html "Numeric and Mathematical Modules") |
  * [previous](https://docs.python.org/3/library/enum.html "enum — Support for enumerations") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Data Types](https://docs.python.org/3/library/datatypes.html) »
  * [`graphlib` — Functionality to operate with graph-like structures](https://docs.python.org/3/library/graphlib.html)
  * | 
  * Theme  Auto Light Dark |


# `graphlib` — Functionality to operate with graph-like structures[¶](https://docs.python.org/3/library/graphlib.html#module-graphlib "Link to this heading")
**Source code:** [Lib/graphlib.py](https://github.com/python/cpython/tree/3.13/Lib/graphlib.py) 

_class_ graphlib.TopologicalSorter(_graph =None_)[¶](https://docs.python.org/3/library/graphlib.html#graphlib.TopologicalSorter "Link to this definition")
    
Provides functionality to topologically sort a graph of [hashable](https://docs.python.org/3/glossary.html#term-hashable) nodes.
A topological order is a linear ordering of the vertices in a graph such that for every directed edge u -> v from vertex u to vertex v, vertex u comes before vertex v in the ordering. For instance, the vertices of the graph may represent tasks to be performed, and the edges may represent constraints that one task must be performed before another; in this example, a topological ordering is just a valid sequence for the tasks. A complete topological ordering is possible if and only if the graph has no directed cycles, that is, if it is a directed acyclic graph.
If the optional _graph_ argument is provided it must be a dictionary representing a directed acyclic graph where the keys are nodes and the values are iterables of all predecessors of that node in the graph (the nodes that have edges that point to the value in the key). Additional nodes can be added to the graph using the [`add()`](https://docs.python.org/3/library/graphlib.html#graphlib.TopologicalSorter.add "graphlib.TopologicalSorter.add") method.
In the general case, the steps required to perform the sorting of a given graph are as follows:
  * Create an instance of the [`TopologicalSorter`](https://docs.python.org/3/library/graphlib.html#graphlib.TopologicalSorter "graphlib.TopologicalSorter") with an optional initial graph.
  * Add additional nodes to the graph.
  * Call [`prepare()`](https://docs.python.org/3/library/graphlib.html#graphlib.TopologicalSorter.prepare "graphlib.TopologicalSorter.prepare") on the graph.
  * While [`is_active()`](https://docs.python.org/3/library/graphlib.html#graphlib.TopologicalSorter.is_active "graphlib.TopologicalSorter.is_active") is `True`, iterate over the nodes returned by [`get_ready()`](https://docs.python.org/3/library/graphlib.html#graphlib.TopologicalSorter.get_ready "graphlib.TopologicalSorter.get_ready") and process them. Call [`done()`](https://docs.python.org/3/library/graphlib.html#graphlib.TopologicalSorter.done "graphlib.TopologicalSorter.done") on each node as it finishes processing.