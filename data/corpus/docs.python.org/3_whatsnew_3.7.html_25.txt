Title: Python 3.7 Release Notes
URL: https://docs.python.org/3/whatsnew/3.7.html
Summary: Python 3.7 introduces updates to `urllib.parse.quote`, aligning it with RFC 3986, which adds `~` to the characters that are not quoted. The `uu.encode()` function now includes a `_backtick` argument to change zero representations. Additionally, a new `UUID.is_safe` attribute has been added to the UUID library.
---

rary/urllib.parse.html#urllib.parse.quote "urllib.parse.quote") has been updated from [**RFC 2396**](https://datatracker.ietf.org/doc/html/rfc2396.html) to [**RFC 3986**](https://datatracker.ietf.org/doc/html/rfc3986.html), adding `~` to the set of characters that are never quoted by default. (Contributed by Christian Theune and Ratnadeep Debnath in [bpo-16285](https://bugs.python.org/issue?@action=redirect&bpo=16285).)
### uu[¶](https://docs.python.org/3/whatsnew/3.7.html#uu "Link to this heading")
The `uu.encode()` function now accepts an optional _backtick_ keyword argument. When it’s true, zeros are represented by `'`'` instead of spaces. (Contributed by Xiang Zhang in [bpo-30103](https://bugs.python.org/issue?@action=redirect&bpo=30103).)
### uuid[¶](https://docs.python.org/3/whatsnew/3.7.html#uuid "Link to this heading")
The new [`UUID.is_safe`](https://docs.python.org/3/library/uuid.html#uuid.UUID.is_safe "uuid.UUID.is_safe") attribute relays information from the platform about whether generated UUIDs are generated with a multiprocessing-safe method. (Contributed by Barry Warsaw in [bpo-22807](https://bugs.python.org/issue?@action=redirect&bpo=22807).)
[`uuid.getnode()`](https://docs.python.org/3/library/uuid.html#uuid.getnode "uuid.getnode") now prefers universally administered MAC addresses over locally administered MAC addresses. This makes a better guarantee for global uniqueness of UUIDs returned from [`uuid.uuid1()`](https://docs.python.org/3/library/uuid.html#uuid.uuid1 "uuid.uuid1"). If only locally administered MAC addresses are available, the first such one found is returned. (Contributed by Barry Warsaw in [bpo-32107](https://bugs.python.org/issue?@action=redirect&bpo=32107).)
### warnings[¶](https://docs.python.org/3/whatsnew/3.7.html#warnings "Link to this heading")
The initialization of the default warnings filters has changed as follows:
  * warnings enabled via command line options (including those for [`-b`](https://docs.python.org/3/using/cmdline.html#cmdoption-b) and the new CPython-specific [`-X`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) `dev` option) are always passed to the warnings machinery via the [`sys.warnoptions`](https://docs.python.org/3/library/sys.html#sys.warnoptions "sys.warnoptions") attribute.
  * warnings filters enabled via the command line or the environment now have the following order of precedence:
    * the `BytesWarning` filter for [`-b`](https://docs.python.org/3/using/cmdline.html#cmdoption-b) (or `-bb`)
    * any filters specified with the [`-W`](https://docs.python.org/3/using/cmdline.html#cmdoption-W) option
    * any filters specified with the [`PYTHONWARNINGS`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONWARNINGS) environment variable
    * any other CPython specific filters (e.g. the `default` filter added for the new `-X dev` mode)
    * any implicit filters defined directly by the warnings machinery
  * in [CPython debug builds](https://docs.python.org/3/using/configure.html#debug-build), all warnings are now displayed by default (the implicit filter list is empty)