Title: Setting Character Set in Email Payload
URL: https://docs.python.org/3/library/email.compat32-message.html
Summary: The `set_charset` method sets the character set of the email payload to a specified charset, which can be a `Charset` instance, a string, or `None`. If a string is provided, it is converted to a `Charset`. Setting it to `None` removes the `charset` from the `Content-Type` header. Unsupported types will raise a `TypeError`.
---

set_charset(_charset_)[¶](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.set_charset "Link to this definition")
    
Set the character set of the payload to _charset_ , which can either be a [`Charset`](https://docs.python.org/3/library/email.charset.html#email.charset.Charset "email.charset.Charset") instance (see [`email.charset`](https://docs.python.org/3/library/email.charset.html#module-email.charset "email.charset: Character Sets")), a string naming a character set, or `None`. If it is a string, it will be converted to a [`Charset`](https://docs.python.org/3/library/email.charset.html#email.charset.Charset "email.charset.Charset") instance. If _charset_ is `None`, the `charset` parameter will be removed from the _Content-Type_ header (the message will not be otherwise modified). Anything else will generate a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError").
If there is no existing _MIME-Version_ header one will be added. If there is no existing _Content-Type_ header, one will be added with a value of _text/plain_. Whether the _Content-Type_ header already exists or not, its `charset` parameter will be set to _charset.output_charset_. If _charset.input_charset_ and _charset.output_charset_ differ, the payload will be re-encoded to the _output_charset_. If there is no existing _Content-Transfer-Encoding_ header, then the payload will be transfer-encoded, if needed, using the specified [`Charset`](https://docs.python.org/3/library/email.charset.html#email.charset.Charset "email.charset.Charset"), and a header with the appropriate value will be added. If a _Content-Transfer-Encoding_ header already exists, the payload is assumed to already be correctly encoded using that _Content-Transfer-Encoding_ and is not modified.
This is a legacy method. On the `EmailMessage` class its functionality is replaced by the _charset_ parameter of the `email.emailmessage.EmailMessage.set_content()` method. 

get_charset()[¶](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.get_charset "Link to this definition")
    
Return the [`Charset`](https://docs.python.org/3/library/email.charset.html#email.charset.Charset "email.charset.Charset") instance associated with the message’s payload.
This is a legacy method. On the `EmailMessage` class it always returns `None`.
The following methods implement a mapping-like interface for accessing the message’s [**RFC 2822**](https://datatracker.ietf.org/doc/html/rfc2822.html) headers. Note that there are some semantic differences between these methods and a normal mapping (i.e. dictionary) interface. For example, in a dictionary there are no duplicate keys, but here there may be duplicate message headers. Also, in dictionaries there is no guaranteed order to the keys returned by [`keys()`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.keys "email.message.Message.keys"), but in a [`Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "email.message.Message") object, headers are always returned in the order they appeared in the original message, or were added to the message later. Any header deleted and then re-added are always appended to the end of the header list.
These semantic differences are intentional and are biased toward maximal convenience.
Note that in all cases, any envelope header present in the message is not included in the mapping interface.
In a model generated from bytes, any header values that (in contravention of the RFCs) contain non-ASCII bytes will, when retrieved through this interface, be represented as [`Header`](https://docs.python.org/3/library/email.header.html#email.header.Header "email.header.Header") objects with a charset of `unknown-8bit`. 

__len__()[¶](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.__len__ "Link to this definition")
    
Return the total number of headers, including duplicates. 

__contains__(_name_)[¶](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.__contains__ "Link to this definition")
    
Return `True` if the message object has a field named _name_. Matching is done case-insensitively and _name_ should not include the trailing colon. Used for the `in` operator, e.g.:
```
if 'message-id' in myMessage:
  print('Message-ID:', myMessage['message-id'])