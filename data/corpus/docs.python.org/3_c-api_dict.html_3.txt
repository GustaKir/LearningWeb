Title: PyDict_GetItemStringRef Function
URL: https://docs.python.org/3/c-api/dict.html
Summary: The `PyDict_GetItemStringRef` function retrieves an item from a Python dictionary using a UTF-8 encoded string as the key. It is part of the Stable ABI since Python version 3.13 and is similar to `PyDict_GetItemRef`, which uses a PyObject key.
---

intPyDict_GetItemStringRef([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*p, constchar*key, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")**result)[¶](https://docs.python.org/3/c-api/dict.html#c.PyDict_GetItemStringRef "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.13._
Similar to [`PyDict_GetItemRef()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_GetItemRef "PyDict_GetItemRef"), but _key_ is specified as a constchar* UTF-8 encoded bytes string, rather than a [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*.
Added in version 3.13. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyDict_SetDefault([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*p, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*key, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*defaultobj)[¶](https://docs.python.org/3/c-api/dict.html#c.PyDict_SetDefault "Link to this definition")
    _Return value: Borrowed reference._
This is the same as the Python-level [`dict.setdefault()`](https://docs.python.org/3/library/stdtypes.html#dict.setdefault "dict.setdefault"). If present, it returns the value corresponding to _key_ from the dictionary _p_. If the key is not in the dict, it is inserted with value _defaultobj_ and _defaultobj_ is returned. This function evaluates the hash function of _key_ only once, instead of evaluating it independently for the lookup and the insertion.
Added in version 3.4. 

intPyDict_SetDefaultRef([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*p, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*key, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*default_value, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")**result)[¶](https://docs.python.org/3/c-api/dict.html#c.PyDict_SetDefaultRef "Link to this definition")
    
Inserts _default_value_ into the dictionary _p_ with a key of _key_ if the key is not already present in the dictionary. If _result_ is not `NULL`, then _*result_ is set to a [strong reference](https://docs.python.org/3/glossary.html#term-strong-reference) to either _default_value_ , if the key was not present, or the existing value, if _key_ was already present in the dictionary. Returns `1` if the key was present and _default_value_ was not inserted, or `0` if the key was not present and _default_value_ was inserted. On failure, returns `-1`, sets an exception, and sets `*result` to `NULL`.
For clarity: if you have a strong reference to _default_value_ before calling this function, then after it returns, you hold a strong reference to both _default_value_ and _*result_ (if it’s not `NULL`). These may refer to the same object: in that case you hold two separate references to it.
Added in version 3.13. 

intPyDict_Pop([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*p, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*key, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")**result)[¶](https://docs.python.org/3/c-api/dict.html#c.PyDict_Pop "Link to this definition")
    
Remove _key_ from dictionary _p_ and optionally return the removed value. Do not raise [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError") if the key missing.
  * If the key is present, set _*result_ to a new reference to the removed value if _result_ is not `NULL`, and return `1`.
  * If the key is missing, set _*result_ to `NULL` if _result_ is not `NULL`, and return `0`.
  * On error, raise an exception and return `-1`.


Similar to [`dict.pop()`](https://docs.python.org/3/library/stdtypes.html#dict.pop "dict.pop"), but without the default value and not raising [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError") if the key missing.
Added in version 3.13. 

intPyDict_PopString([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*p, constchar*key, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")**result)[¶](https://docs.python.org/3/c-api/dict.html#c.PyDict_PopString "Link to this definition")
    
Similar to [`PyDict_Pop()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_Pop "PyDict_Pop"), but _key_ is specified as a constchar* UTF-8 encoded bytes string, rather than a [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*.
Added in version 3.13.