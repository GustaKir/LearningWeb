Title: Glossary: Reference Count and Regular Package
URL: https://docs.python.org/3/glossary.html
Summary: This document chunk defines 'reference count' as the number of references to an object in Python, explaining its significance in object deallocation and its implementation in CPython. It mentions the `sys.getrefcount()` function for retrieving an object's reference count. Additionally, it introduces the term 'regular package,' referring to a traditional package structure in Python.
---

```


reference count[¶](https://docs.python.org/3/glossary.html#term-reference-count "Link to this term")
    
The number of references to an object. When the reference count of an object drops to zero, it is deallocated. Some objects are [immortal](https://docs.python.org/3/glossary.html#term-immortal) and have reference counts that are never modified, and therefore the objects are never deallocated. Reference counting is generally not visible to Python code, but it is a key element of the [CPython](https://docs.python.org/3/glossary.html#term-CPython) implementation. Programmers can call the [`sys.getrefcount()`](https://docs.python.org/3/library/sys.html#sys.getrefcount "sys.getrefcount") function to return the reference count for a particular object. 

regular package[¶](https://docs.python.org/3/glossary.html#term-regular-package "Link to this term")
    
A traditional [package](https://docs.python.org/3/glossary.html#term-package), such as a directory containing an `__init__.py` file.
See also [namespace package](https://docs.python.org/3/glossary.html#term-namespace-package). 

REPL[¶](https://docs.python.org/3/glossary.html#term-REPL "Link to this term")
    
An acronym for the “read–eval–print loop”, another name for the [interactive](https://docs.python.org/3/glossary.html#term-interactive) interpreter shell. 

__slots__[¶](https://docs.python.org/3/glossary.html#term-__slots__ "Link to this term")
    
A declaration inside a class that saves memory by pre-declaring space for instance attributes and eliminating instance dictionaries. Though popular, the technique is somewhat tricky to get right and is best reserved for rare cases where there are large numbers of instances in a memory-critical application. 

sequence[¶](https://docs.python.org/3/glossary.html#term-sequence "Link to this term")
    
An [iterable](https://docs.python.org/3/glossary.html#term-iterable) which supports efficient element access using integer indices via the [`__getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__getitem__ "object.__getitem__") special method and defines a [`__len__()`](https://docs.python.org/3/reference/datamodel.html#object.__len__ "object.__len__") method that returns the length of the sequence. Some built-in sequence types are [`list`](https://docs.python.org/3/library/stdtypes.html#list "list"), [`str`](https://docs.python.org/3/library/stdtypes.html#str "str"), [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple"), and [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes"). Note that [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") also supports [`__getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__getitem__ "object.__getitem__") and `__len__()`, but is considered a mapping rather than a sequence because the lookups use arbitrary [hashable](https://docs.python.org/3/glossary.html#term-hashable) keys rather than integers.
The [`collections.abc.Sequence`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence "collections.abc.Sequence") abstract base class defines a much richer interface that goes beyond just [`__getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__getitem__ "object.__getitem__") and [`__len__()`](https://docs.python.org/3/reference/datamodel.html#object.__len__ "object.__len__"), adding `count()`, `index()`, [`__contains__()`](https://docs.python.org/3/reference/datamodel.html#object.__contains__ "object.__contains__"), and [`__reversed__()`](https://docs.python.org/3/reference/datamodel.html#object.__reversed__ "object.__reversed__"). Types that implement this expanded interface can be registered explicitly using [`register()`](https://docs.python.org/3/library/abc.html#abc.ABCMeta.register "abc.ABCMeta.register"). For more documentation on sequence methods generally, see [Common Sequence Operations](https://docs.python.org/3/library/stdtypes.html#typesseq-common). 

set comprehension[¶](https://docs.python.org/3/glossary.html#term-set-comprehension "Link to this term")
    
A compact way to process all or part of the elements in an iterable and return a set with the results. `results = {c for c in 'abracadabra' if c not in 'abc'}` generates the set of strings `{'r', 'd'}`. See [Displays for lists, sets and dictionaries](https://docs.python.org/3/reference/expressions.html#comprehensions). 

single dispatch[¶](https://docs.python.org/3/glossary.html#term-single-dispatch "Link to this term")
    
A form of [generic function](https://docs.python.org/3/glossary.html#term-generic-function) dispatch where the implementation is chosen based on the type of a single argument.