Title: Logging Configuration - Stopping the Listening Server
URL: https://docs.python.org/3/library/logging.config.html
Summary: The `logging.config.stopListening()` function halts the listening server initiated by the `listen()` method, usually called before executing `join()` on the resulting object from `listen()`. The documentation also discusses security considerations regarding the conversion of text in configuration files into Python objects for logging.
---

logging.config.stopListening()[¶](https://docs.python.org/3/library/logging.config.html#logging.config.stopListening "Link to this definition")
    
Stops the listening server which was created with a call to [`listen()`](https://docs.python.org/3/library/logging.config.html#logging.config.listen "logging.config.listen"). This is typically called before calling `join()` on the return value from [`listen()`](https://docs.python.org/3/library/logging.config.html#logging.config.listen "logging.config.listen").
## Security considerations[¶](https://docs.python.org/3/library/logging.config.html#security-considerations "Link to this heading")
The logging configuration functionality tries to offer convenience, and in part this is done by offering the ability to convert text in configuration files into Python objects used in logging configuration - for example, as described in [User-defined objects](https://docs.python.org/3/library/logging.config.html#logging-config-dict-userdef). However, these same mechanisms (importing callables from user-defined modules and calling them with parameters from the configuration) could be used to invoke any code you like, and for this reason you should treat configuration files from untrusted sources with _extreme caution_ and satisfy yourself that nothing bad can happen if you load them, before actually loading them.
## Configuration dictionary schema[¶](https://docs.python.org/3/library/logging.config.html#configuration-dictionary-schema "Link to this heading")
Describing a logging configuration requires listing the various objects to create and the connections between them; for example, you may create a handler named ‘console’ and then say that the logger named ‘startup’ will send its messages to the ‘console’ handler. These objects aren’t limited to those provided by the [`logging`](https://docs.python.org/3/library/logging.html#module-logging "logging: Flexible event logging system for applications.") module because you might write your own formatter or handler class. The parameters to these classes may also need to include external objects such as `sys.stderr`. The syntax for describing these objects and connections is defined in [Object connections](https://docs.python.org/3/library/logging.config.html#logging-config-dict-connections) below.
### Dictionary Schema Details[¶](https://docs.python.org/3/library/logging.config.html#dictionary-schema-details "Link to this heading")
The dictionary passed to [`dictConfig()`](https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig "logging.config.dictConfig") must contain the following keys:
  * _version_ - to be set to an integer value representing the schema version. The only valid value at present is 1, but having this key allows the schema to evolve while still preserving backwards compatibility.