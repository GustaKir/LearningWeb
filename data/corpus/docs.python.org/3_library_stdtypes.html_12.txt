Title: Sequence Types in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This section discusses the characteristics of immutable sequence types in Python, highlighting their ability to support the `hash()` function, which enables them to be used as keys in dictionaries and stored in sets. It also notes that attempting to hash an immutable sequence containing unhashable values will raise a TypeError.
---

### Immutable Sequence Types[¶](https://docs.python.org/3/library/stdtypes.html#immutable-sequence-types "Link to this heading")
The only operation that immutable sequence types generally implement that is not also implemented by mutable sequence types is support for the [`hash()`](https://docs.python.org/3/library/functions.html#hash "hash") built-in.
This support allows immutable sequences, such as [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple") instances, to be used as [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") keys and stored in [`set`](https://docs.python.org/3/library/stdtypes.html#set "set") and [`frozenset`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset") instances.
Attempting to hash an immutable sequence that contains unhashable values will result in [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError").
### Mutable Sequence Types[¶](https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types "Link to this heading")
The operations in the following table are defined on mutable sequence types. The [`collections.abc.MutableSequence`](https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableSequence "collections.abc.MutableSequence") ABC is provided to make it easier to correctly implement these operations on custom sequence types.
In the table _s_ is an instance of a mutable sequence type, _t_ is any iterable object and _x_ is an arbitrary object that meets any type and value restrictions imposed by _s_ (for example, [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") only accepts integers that meet the value restriction `0 <= x <= 255`).
Operation | Result | Notes  
---|---|---  
`s[i] = x` | item _i_ of _s_ is replaced by _x_ |   
`s[i:j] = t` | slice of _s_ from _i_ to _j_ is replaced by the contents of the iterable _t_ |   
`del s[i:j]` | same as `s[i:j] = []` |   
`s[i:j:k] = t` | the elements of `s[i:j:k]` are replaced by those of _t_ | (1)  
`del s[i:j:k]` | removes the elements of `s[i:j:k]` from the list |   
`s.append(x)` | appends _x_ to the end of the sequence (same as `s[len(s):len(s)] = [x]`) |   
`s.clear()` | removes all items from _s_ (same as `del s[:]`) | (5)  
`s.copy()` | creates a shallow copy of _s_ (same as `s[:]`) | (5)  
`s.extend(t)` or `s += t` | extends _s_ with the contents of _t_ (for the most part the same as `s[len(s):len(s)] = t`) |   
`s *= n` | updates _s_ with its contents repeated _n_ times | (6)  
`s.insert(i, x)` | inserts _x_ into _s_ at the index given by _i_ (same as `s[i:i] = [x]`) |   
`s.pop()` or `s.pop(i)` | retrieves the item at _i_ and also removes it from _s_ | (2)  
`s.remove(x)` | removes the first item from _s_ where `s[i]` is equal to _x_ | (3)  
`s.reverse()` | reverses the items of _s_ in place | (4)  
Notes:
  1. If _k_ is not equal to `1`, _t_ must have the same length as the slice it is replacing.
  2. The optional argument _i_ defaults to `-1`, so that by default the last item is removed and returned.
  3. `remove()` raises [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") when _x_ is not found in _s_.
  4. The `reverse()` method modifies the sequence in place for economy of space when reversing a large sequence. To remind users that it operates by side effect, it does not return the reversed sequence.
  5. `clear()` and `copy()` are included for consistency with the interfaces of mutable containers that don’t support slicing operations (such as [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") and [`set`](https://docs.python.org/3/library/stdtypes.html#set "set")). `copy()` is not part of the [`collections.abc.MutableSequence`](https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableSequence "collections.abc.MutableSequence") ABC, but most concrete mutable sequence classes provide it.
Added in version 3.3: `clear()` and `copy()` methods.
  6. The value _n_ is an integer, or an object implementing [`__index__()`](https://docs.python.org/3/reference/datamodel.html#object.__index__ "object.__index__"). Zero and negative values of _n_ clear the sequence. Items in the sequence are not copied; they are referenced multiple times, as explained for `s * n` under [Common Sequence Operations](https://docs.python.org/3/library/stdtypes.html#typesseq-common).


### Lists[¶](https://docs.python.org/3/library/stdtypes.html#lists "Link to this heading")
Lists are mutable sequences, typically used to store collections of homogeneous items (where the precise degree of similarity will vary by application).