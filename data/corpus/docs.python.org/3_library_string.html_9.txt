Title: String Formatting in Python
URL: https://docs.python.org/3/library/string.html
Summary: This section provides examples of how to format strings in Python using the `format` method. It demonstrates formatting floating-point numbers with signs, converting integers to different bases (decimal, hexadecimal, octal, binary), and using commas or underscores as digit group separators. Additionally, formatting to express percentages is introduced.
---

```
>>> '{:+f}; {:+f}'.format(3.14, -3.14) # show it always
'+3.140000; -3.140000'
>>> '{: f}; {: f}'.format(3.14, -3.14) # show a space for positive numbers
' 3.140000; -3.140000'
>>> '{:-f}; {:-f}'.format(3.14, -3.14) # show only the minus -- same as '{:f}; {:f}'
'3.140000; -3.140000'

```

Replacing `%x` and `%o` and converting the value to different bases:
>>>```
>>> # format also supports binary numbers
>>> "int: {0:d}; hex: {0:x}; oct: {0:o}; bin: {0:b}".format(42)
'int: 42; hex: 2a; oct: 52; bin: 101010'
>>> # with 0x, 0o, or 0b as prefix:
>>> "int: {0:d}; hex: {0:#x}; oct: {0:#o}; bin: {0:#b}".format(42)
'int: 42; hex: 0x2a; oct: 0o52; bin: 0b101010'

```

Using the comma or the underscore as a digit group separator:
>>>```
>>> '{:,}'.format(1234567890)
'1,234,567,890'
>>> '{:_}'.format(1234567890)
'1_234_567_890'
>>> '{:_b}'.format(1234567890)
'100_1001_1001_0110_0000_0010_1101_0010'
>>> '{:_x}'.format(1234567890)
'4996_02d2'

```

Expressing a percentage:
>>>```
>>> points = 19
>>> total = 22
>>> 'Correct answers: {:.2%}'.format(points/total)
'Correct answers: 86.36%'

```

Using type-specific formatting:
>>>```
>>> importdatetime
>>> d = datetime.datetime(2010, 7, 4, 12, 15, 58)
>>> '{:%Y-%m-%d %H:%M:%S}'.format(d)
'2010-07-04 12:15:58'

```

Nesting arguments and more complex examples:
>>>```
>>> for align, text in zip('<^>', ['left', 'center', 'right']):
...   '{0:{fill}{align}16}'.format(text, fill=align, align=align)
...
'left<<<<<<<<<<<<'
'^^^^^center^^^^^'
'>>>>>>>>>>>right'
>>>
>>> octets = [192, 168, 0, 1]
>>> '{:02X}{:02X}{:02X}{:02X}'.format(*octets)
'C0A80001'
>>> int(_, 16)
3232235521
>>>
>>> width = 5
>>> for num in range(5,12):
...   for base in 'dXob':
...     print('{0:{width}{base}}'.format(num, base=base, width=width), end=' ')
...   print()
...
  5   5   5  101
  6   6   6  110
  7   7   7  111
  8   8  10 1000
  9   9  11 1001
  10   A  12 1010
  11   B  13 1011