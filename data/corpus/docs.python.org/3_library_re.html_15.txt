Title: re.Match Class Overview
URL: https://docs.python.org/3/library/re.html
Summary: The re.Match class represents match objects returned by successful regex matches or searches. In version 3.9, it has been updated to support indexing for Unicode or bytes matches. The Match.expand method allows for backslash substitution on a template string, replacing escapes and backreferences with corresponding group contents.
---

```


_class_ re.Match[¶](https://docs.python.org/3/library/re.html#re.Match "Link to this definition")
    
Match object returned by successful `match`es and `search`es.
Changed in version 3.9: [`re.Match`](https://docs.python.org/3/library/re.html#re.Match "re.Match") supports `[]` to indicate a Unicode (str) or bytes match. See [Generic Alias Type](https://docs.python.org/3/library/stdtypes.html#types-genericalias). 

Match.expand(_template_)[¶](https://docs.python.org/3/library/re.html#re.Match.expand "Link to this definition")
    
Return the string obtained by doing backslash substitution on the template string _template_ , as done by the [`sub()`](https://docs.python.org/3/library/re.html#re.Pattern.sub "re.Pattern.sub") method. Escapes such as `\n` are converted to the appropriate characters, and numeric backreferences (`\1`, `\2`) and named backreferences (`\g<1>`, `\g<name>`) are replaced by the contents of the corresponding group. The backreference `\g<0>` will be replaced by the entire match.
Changed in version 3.5: Unmatched groups are replaced with an empty string. 

Match.group([_group1_ , _..._])[¶](https://docs.python.org/3/library/re.html#re.Match.group "Link to this definition")
    
Returns one or more subgroups of the match. If there is a single argument, the result is a single string; if there are multiple arguments, the result is a tuple with one item per argument. Without arguments, _group1_ defaults to zero (the whole match is returned). If a _groupN_ argument is zero, the corresponding return value is the entire matching string; if it is in the inclusive range [1..99], it is the string matching the corresponding parenthesized group. If a group number is negative or larger than the number of groups defined in the pattern, an [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError "IndexError") exception is raised. If a group is contained in a part of the pattern that did not match, the corresponding result is `None`. If a group is contained in a part of the pattern that matched multiple times, the last match is returned.
>>>```
>>> m = re.match(r"(\w+) (\w+)", "Isaac Newton, physicist")
>>> m.group(0)    # The entire match
'Isaac Newton'
>>> m.group(1)    # The first parenthesized subgroup.
'Isaac'
>>> m.group(2)    # The second parenthesized subgroup.
'Newton'
>>> m.group(1, 2)  # Multiple arguments give us a tuple.
('Isaac', 'Newton')

```

If the regular expression uses the `(?P<name>...)` syntax, the _groupN_ arguments may also be strings identifying groups by their group name. If a string argument is not used as a group name in the pattern, an [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError "IndexError") exception is raised.
A moderately complicated example:
>>>```
>>> m = re.match(r"(?P<first_name>\w+) (?P<last_name>\w+)", "Malcolm Reynolds")
>>> m.group('first_name')
'Malcolm'
>>> m.group('last_name')
'Reynolds'

```

Named groups can also be referred to by their index:
>>>```
>>> m.group(1)
'Malcolm'
>>> m.group(2)
'Reynolds'

```

If a group matches multiple times, only the last match is accessible:
>>>```
>>> m = re.match(r"(..)+", "a1b2c3") # Matches 3 times.
>>> m.group(1)            # Returns only the last match.
'c3'

```


Match.__getitem__(_g_)[¶](https://docs.python.org/3/library/re.html#re.Match.__getitem__ "Link to this definition")
    
This is identical to `m.group(g)`. This allows easier access to an individual group from a match:
>>>```
>>> m = re.match(r"(\w+) (\w+)", "Isaac Newton, physicist")
>>> m[0]    # The entire match
'Isaac Newton'
>>> m[1]    # The first parenthesized subgroup.
'Isaac'
>>> m[2]    # The second parenthesized subgroup.
'Newton'

```

Named groups are supported as well:
>>>```
>>> m = re.match(r"(?P<first_name>\w+) (?P<last_name>\w+)", "Isaac Newton")
>>> m['first_name']
'Isaac'
>>> m['last_name']
'Newton'

```

Added in version 3.6. 

Match.groups(_default =None_)[¶](https://docs.python.org/3/library/re.html#re.Match.groups "Link to this definition")
    
Return a tuple containing all the subgroups of the match, from 1 up to however many groups are in the pattern. The _default_ argument is used for groups that did not participate in the match; it defaults to `None`.
For example:
>>>```
>>> m = re.match(r"(\d+)\.(\d+)", "24.1632")
>>> m.groups()
('24', '1632')

```

If we make the decimal place and everything after it optional, not all groups might participate in the match. These groups will default to `None` unless the _default_ argument is given:
>>>```
>>> m = re.match(r"(\d+)\.?(\d+)?", "24")
>>> m.groups()   # Second group defaults to None.
('24', None)
>>> m.groups('0')  # Now, the second group defaults to '0'.
('24', '0')