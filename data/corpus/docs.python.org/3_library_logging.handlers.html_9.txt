Title: SysLogHandler in Python Logging
URL: https://docs.python.org/3/library/logging.handlers.html
Summary: The SysLogHandler class allows for sending logging messages to remote or local Unix syslog. It is part of the logging.handlers module, and includes functionality for sending pickled byte-strings to a socket.
---

send(_s_)[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.DatagramHandler.send "Link to this definition")
    
Send a pickled byte-string to a socket. The format of the sent byte-string is as described in the documentation for [`SocketHandler.makePickle()`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.SocketHandler.makePickle "logging.handlers.SocketHandler.makePickle").
## SysLogHandler[¶](https://docs.python.org/3/library/logging.handlers.html#sysloghandler "Link to this heading")
The [`SysLogHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.SysLogHandler "logging.handlers.SysLogHandler") class, located in the [`logging.handlers`](https://docs.python.org/3/library/logging.handlers.html#module-logging.handlers "logging.handlers: Handlers for the logging module.") module, supports sending logging messages to a remote or local Unix syslog. 

_class_ logging.handlers.SysLogHandler(_address =('localhost', SYSLOG_UDP_PORT)_, _facility =LOG_USER_, _socktype =socket.SOCK_DGRAM_)[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.SysLogHandler "Link to this definition")
    
Returns a new instance of the [`SysLogHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.SysLogHandler "logging.handlers.SysLogHandler") class intended to communicate with a remote Unix machine whose address is given by _address_ in the form of a `(host, port)` tuple. If _address_ is not specified, `('localhost', 514)` is used. The address is used to open a socket. An alternative to providing a `(host, port)` tuple is providing an address as a string, for example ‘/dev/log’. In this case, a Unix domain socket is used to send the message to the syslog. If _facility_ is not specified, `LOG_USER` is used. The type of socket opened depends on the _socktype_ argument, which defaults to [`socket.SOCK_DGRAM`](https://docs.python.org/3/library/socket.html#socket.SOCK_DGRAM "socket.SOCK_DGRAM") and thus opens a UDP socket. To open a TCP socket (for use with the newer syslog daemons such as rsyslog), specify a value of [`socket.SOCK_STREAM`](https://docs.python.org/3/library/socket.html#socket.SOCK_STREAM "socket.SOCK_STREAM").
Note that if your server is not listening on UDP port 514, [`SysLogHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.SysLogHandler "logging.handlers.SysLogHandler") may appear not to work. In that case, check what address you should be using for a domain socket - it’s system dependent. For example, on Linux it’s usually ‘/dev/log’ but on OS/X it’s ‘/var/run/syslog’. You’ll need to check your platform and use the appropriate address (you may need to do this check at runtime if your application needs to run on several platforms). On Windows, you pretty much have to use the UDP option.
Note
On macOS 12.x (Monterey), Apple has changed the behaviour of their syslog daemon - it no longer listens on a domain socket. Therefore, you cannot expect [`SysLogHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.SysLogHandler "logging.handlers.SysLogHandler") to work on this system.
See [gh-91070](https://github.com/python/cpython/issues/91070) for more information.
Changed in version 3.2: _socktype_ was added. 

close()[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.SysLogHandler.close "Link to this definition")
    
Closes the socket to the remote host. 

createSocket()[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.SysLogHandler.createSocket "Link to this definition")
    
Tries to create a socket and, if it’s not a datagram socket, connect it to the other end. This method is called during handler initialization, but it’s not regarded as an error if the other end isn’t listening at this point - the method will be called again when emitting an event, if there is no socket at that point.
Added in version 3.11.