Title: Logger Class and Log Record Factory in Python Logging
URL: https://docs.python.org/3/library/logging.html
Summary: The `logging.getLoggerClass()` function returns the standard Logger class or the last customized class from `setLoggerClass()`, allowing for consistent Logger customizations. The chunk also mentions `logging.getLogRecordFactory()`, which returns a callable for creating LogRecord objects.
---

logging.getLoggerClass()[¶](https://docs.python.org/3/library/logging.html#logging.getLoggerClass "Link to this definition")
    
Return either the standard [`Logger`](https://docs.python.org/3/library/logging.html#logging.Logger "logging.Logger") class, or the last class passed to [`setLoggerClass()`](https://docs.python.org/3/library/logging.html#logging.setLoggerClass "logging.setLoggerClass"). This function may be called from within a new class definition, to ensure that installing a customized [`Logger`](https://docs.python.org/3/library/logging.html#logging.Logger "logging.Logger") class will not undo customizations already applied by other code. For example:
```
classMyLogger(logging.getLoggerClass()):
  # ... override behaviour here

```


logging.getLogRecordFactory()[¶](https://docs.python.org/3/library/logging.html#logging.getLogRecordFactory "Link to this definition")
    
Return a callable which is used to create a [`LogRecord`](https://docs.python.org/3/library/logging.html#logging.LogRecord "logging.LogRecord").
Added in version 3.2: This function has been provided, along with [`setLogRecordFactory()`](https://docs.python.org/3/library/logging.html#logging.setLogRecordFactory "logging.setLogRecordFactory"), to allow developers more control over how the [`LogRecord`](https://docs.python.org/3/library/logging.html#logging.LogRecord "logging.LogRecord") representing a logging event is constructed.
See [`setLogRecordFactory()`](https://docs.python.org/3/library/logging.html#logging.setLogRecordFactory "logging.setLogRecordFactory") for more information about the how the factory is called. 

logging.debug(_msg_ , _* args_, _** kwargs_)[¶](https://docs.python.org/3/library/logging.html#logging.debug "Link to this definition")
    
This is a convenience function that calls [`Logger.debug()`](https://docs.python.org/3/library/logging.html#logging.Logger.debug "logging.Logger.debug"), on the root logger. The handling of the arguments is in every way identical to what is described in that method.
The only difference is that if the root logger has no handlers, then [`basicConfig()`](https://docs.python.org/3/library/logging.html#logging.basicConfig "logging.basicConfig") is called, prior to calling `debug` on the root logger.
For very short scripts or quick demonstrations of `logging` facilities, `debug` and the other module-level functions may be convenient. However, most programs will want to carefully and explicitly control the logging configuration, and should therefore prefer creating a module-level logger and calling [`Logger.debug()`](https://docs.python.org/3/library/logging.html#logging.Logger.debug "logging.Logger.debug") (or other level-specific methods) on it, as described at the beginnning of this documentation. 

logging.info(_msg_ , _* args_, _** kwargs_)[¶](https://docs.python.org/3/library/logging.html#logging.info "Link to this definition")
    
Logs a message with level [`INFO`](https://docs.python.org/3/library/logging.html#logging.INFO "logging.INFO") on the root logger. The arguments and behavior are otherwise the same as for [`debug()`](https://docs.python.org/3/library/logging.html#logging.debug "logging.debug"). 

logging.warning(_msg_ , _* args_, _** kwargs_)[¶](https://docs.python.org/3/library/logging.html#logging.warning "Link to this definition")
    
Logs a message with level [`WARNING`](https://docs.python.org/3/library/logging.html#logging.WARNING "logging.WARNING") on the root logger. The arguments and behavior are otherwise the same as for [`debug()`](https://docs.python.org/3/library/logging.html#logging.debug "logging.debug").
Note
There is an obsolete function `warn` which is functionally identical to `warning`. As `warn` is deprecated, please do not use it - use `warning` instead. 

logging.error(_msg_ , _* args_, _** kwargs_)[¶](https://docs.python.org/3/library/logging.html#logging.error "Link to this definition")
    
Logs a message with level [`ERROR`](https://docs.python.org/3/library/logging.html#logging.ERROR "logging.ERROR") on the root logger. The arguments and behavior are otherwise the same as for [`debug()`](https://docs.python.org/3/library/logging.html#logging.debug "logging.debug"). 

logging.critical(_msg_ , _* args_, _** kwargs_)[¶](https://docs.python.org/3/library/logging.html#logging.critical "Link to this definition")
    
Logs a message with level [`CRITICAL`](https://docs.python.org/3/library/logging.html#logging.CRITICAL "logging.CRITICAL") on the root logger. The arguments and behavior are otherwise the same as for [`debug()`](https://docs.python.org/3/library/logging.html#logging.debug "logging.debug").