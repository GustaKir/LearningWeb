Title: Thread Constructor in Python's threading Module
URL: https://docs.python.org/3/library/threading.html
Summary: The `threading.Thread` constructor allows for creating thread objects using keyword arguments. Key parameters include `target` for the callable to invoke, `name` for the thread's identification, and `args` and `kwargs` for passing arguments to the target. The `_group` parameter is reserved for future use and should be `None`.
---

_class_ threading.Thread(_group =None_, _target =None_, _name =None_, _args =()_, _kwargs ={}_, _*_ , _daemon =None_)[¶](https://docs.python.org/3/library/threading.html#threading.Thread "Link to this definition")
    
This constructor should always be called with keyword arguments. Arguments are:
_group_ should be `None`; reserved for future extension when a `ThreadGroup` class is implemented.
_target_ is the callable object to be invoked by the [`run()`](https://docs.python.org/3/library/threading.html#threading.Thread.run "threading.Thread.run") method. Defaults to `None`, meaning nothing is called.
_name_ is the thread name. By default, a unique name is constructed of the form “Thread-_N_ ” where _N_ is a small decimal number, or “Thread-_N_ (target)” where “target” is `target.__name__` if the _target_ argument is specified.
_args_ is a list or tuple of arguments for the target invocation. Defaults to `()`.
_kwargs_ is a dictionary of keyword arguments for the target invocation. Defaults to `{}`.
If not `None`, _daemon_ explicitly sets whether the thread is daemonic. If `None` (the default), the daemonic property is inherited from the current thread.
If the subclass overrides the constructor, it must make sure to invoke the base class constructor (`Thread.__init__()`) before doing anything else to the thread.
Changed in version 3.3: Added the _daemon_ parameter.
Changed in version 3.10: Use the _target_ name if _name_ argument is omitted. 

start()[¶](https://docs.python.org/3/library/threading.html#threading.Thread.start "Link to this definition")
    
Start the thread’s activity.
It must be called at most once per thread object. It arranges for the object’s [`run()`](https://docs.python.org/3/library/threading.html#threading.Thread.run "threading.Thread.run") method to be invoked in a separate thread of control.
This method will raise a [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError") if called more than once on the same thread object. 

run()[¶](https://docs.python.org/3/library/threading.html#threading.Thread.run "Link to this definition")
    
Method representing the thread’s activity.
You may override this method in a subclass. The standard [`run()`](https://docs.python.org/3/library/threading.html#threading.Thread.run "threading.Thread.run") method invokes the callable object passed to the object’s constructor as the _target_ argument, if any, with positional and keyword arguments taken from the _args_ and _kwargs_ arguments, respectively.
Using list or tuple as the _args_ argument which passed to the [`Thread`](https://docs.python.org/3/library/threading.html#threading.Thread "threading.Thread") could achieve the same effect.
Example:
>>>```
>>> fromthreadingimport Thread
>>> t = Thread(target=print, args=[1])
>>> t.run()
1
>>> t = Thread(target=print, args=(1,))
>>> t.run()
1