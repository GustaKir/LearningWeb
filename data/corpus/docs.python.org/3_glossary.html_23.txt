Title: Glossary of Python Terms
URL: https://docs.python.org/3/glossary.html
Summary: This section defines key terms in Python, starting with 'token', which refers to a small unit of source code generated by the lexical analyzer. It also mentions the 'tokenize' module, which exposes the lexical analyzer, and the 'token' module, which provides information about different token types. Additionally, it begins to describe 'triple-quoted strings', which are strings enclosed by three quotation marks or apostrophes.
---

token[¶](https://docs.python.org/3/glossary.html#term-token "Link to this term")
    
A small unit of source code, generated by the [lexical analyzer](https://docs.python.org/3/reference/lexical_analysis.html#lexical) (also called the _tokenizer_). Names, numbers, strings, operators, newlines and similar are represented by tokens.
The [`tokenize`](https://docs.python.org/3/library/tokenize.html#module-tokenize "tokenize: Lexical scanner for Python source code.") module exposes Python’s lexical analyzer. The [`token`](https://docs.python.org/3/library/token.html#module-token "token: Constants representing terminal nodes of the parse tree.") module contains information on the various types of tokens. 

triple-quoted string[¶](https://docs.python.org/3/glossary.html#term-triple-quoted-string "Link to this term")
    
A string which is bound by three instances of either a quotation mark (”) or an apostrophe (‘). While they don’t provide any functionality not available with single-quoted strings, they are useful for a number of reasons. They allow you to include unescaped single and double quotes within a string and they can span multiple lines without the use of the continuation character, making them especially useful when writing docstrings. 

type[¶](https://docs.python.org/3/glossary.html#term-type "Link to this term")
    
The type of a Python object determines what kind of object it is; every object has a type. An object’s type is accessible as its [`__class__`](https://docs.python.org/3/reference/datamodel.html#object.__class__ "object.__class__") attribute or can be retrieved with `type(obj)`. 

type alias[¶](https://docs.python.org/3/glossary.html#term-type-alias "Link to this term")
    
A synonym for a type, created by assigning the type to an identifier.
Type aliases are useful for simplifying [type hints](https://docs.python.org/3/glossary.html#term-type-hint). For example:
```
defremove_gray_shades(
    colors: list[tuple[int, int, int]]) -> list[tuple[int, int, int]]:
  pass

```

could be made more readable like this:
```
Color = tuple[int, int, int]
defremove_gray_shades(colors: list[Color]) -> list[Color]:
  pass

```

See [`typing`](https://docs.python.org/3/library/typing.html#module-typing "typing: Support for type hints \(see :pep:`484`\).") and [**PEP 484**](https://peps.python.org/pep-0484/), which describe this functionality. 

type hint[¶](https://docs.python.org/3/glossary.html#term-type-hint "Link to this term")
    
An [annotation](https://docs.python.org/3/glossary.html#term-annotation) that specifies the expected type for a variable, a class attribute, or a function parameter or return value.
Type hints are optional and are not enforced by Python but they are useful to [static type checkers](https://docs.python.org/3/glossary.html#term-static-type-checker). They can also aid IDEs with code completion and refactoring.
Type hints of global variables, class attributes, and functions, but not local variables, can be accessed using [`typing.get_type_hints()`](https://docs.python.org/3/library/typing.html#typing.get_type_hints "typing.get_type_hints").
See [`typing`](https://docs.python.org/3/library/typing.html#module-typing "typing: Support for type hints \(see :pep:`484`\).") and [**PEP 484**](https://peps.python.org/pep-0484/), which describe this functionality. 

universal newlines[¶](https://docs.python.org/3/glossary.html#term-universal-newlines "Link to this term")
    
A manner of interpreting text streams in which all of the following are recognized as ending a line: the Unix end-of-line convention `'\n'`, the Windows convention `'\r\n'`, and the old Macintosh convention `'\r'`. See [**PEP 278**](https://peps.python.org/pep-0278/) and [**PEP 3116**](https://peps.python.org/pep-3116/), as well as [`bytes.splitlines()`](https://docs.python.org/3/library/stdtypes.html#bytes.splitlines "bytes.splitlines") for an additional use. 

variable annotation[¶](https://docs.python.org/3/glossary.html#term-variable-annotation "Link to this term")
    
An [annotation](https://docs.python.org/3/glossary.html#term-annotation) of a variable or a class attribute.
When annotating a variable or a class attribute, assignment is optional:
```
classC:
  field: 'annotation'

```

Variable annotations are usually used for [type hints](https://docs.python.org/3/glossary.html#term-type-hint): for example this variable is expected to take [`int`](https://docs.python.org/3/library/functions.html#int "int") values:
```
count: int = 0