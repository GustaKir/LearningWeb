Title: Python Error Handling and Bug Fixes
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This patch includes multiple improvements and fixes: enhanced `assert` error messages, a resolution for a bug affecting `barry_as_FLUFL` in the REPL, fixes for potential crashes related to function call defaults, an issue with f-strings and debug expressions, and the correct issuance of `SyntaxWarning` for invalid sequences in f-strings.
---

Patch by Pablo Galindo
  * [gh-105724](https://github.com/python/cpython/issues/105724): Improve `assert` error messages by providing exact error range.
  * [gh-105908](https://github.com/python/cpython/issues/105908): Fixed bug where [gh-99111](https://github.com/python/cpython/issues/99111) breaks future import `barry_as_FLUFL` in the Python REPL.
  * [gh-105840](https://github.com/python/cpython/issues/105840): Fix possible crashes when specializing function calls with too many `__defaults__`.
  * [gh-105831](https://github.com/python/cpython/issues/105831): Fix an f-string bug, where using a debug expression (the `=` sign) that appears in the last line of a file results to the debug buffer that holds the expression text being one character too small.
  * [gh-105800](https://github.com/python/cpython/issues/105800): Correctly issue [`SyntaxWarning`](https://docs.python.org/3/library/exceptions.html#SyntaxWarning "SyntaxWarning") in f-strings if invalid sequences are used. Patch by Pablo Galindo
  * [gh-105340](https://github.com/python/cpython/issues/105340): Include the comprehension iteration variable in `locals()` inside a module- or class-scope comprehension.
  * [gh-105331](https://github.com/python/cpython/issues/105331): Raise [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if the `delay` argument to [`asyncio.sleep()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.sleep "asyncio.sleep") is a NaN (matching [`time.sleep()`](https://docs.python.org/3/library/time.html#time.sleep "time.sleep")).
  * [gh-105587](https://github.com/python/cpython/issues/105587): The runtime can’t guarantee that immortal objects will not be mutated by Extensions. Thus, this modifies _PyStaticObject_CheckRefcnt to warn instead of asserting.
  * [gh-105564](https://github.com/python/cpython/issues/105564): Don’t include artificil newlines in the `line` attribute of tokens in the APIs of the [`tokenize`](https://docs.python.org/3/library/tokenize.html#module-tokenize "tokenize: Lexical scanner for Python source code.") module. Patch by Pablo Galindo
  * [gh-105549](https://github.com/python/cpython/issues/105549): Tokenize separately `NUMBER` and `NAME` tokens that are not ambiguous. Patch by Pablo Galindo.
  * [gh-105588](https://github.com/python/cpython/issues/105588): Fix an issue that could result in crashes when compiling malformed [`ast`](https://docs.python.org/3/library/ast.html#module-ast "ast: Abstract Syntax Tree classes and manipulation.") nodes.
  * [gh-100987](https://github.com/python/cpython/issues/100987): Allow objects other than code objects as the “executable” in internal frames. In the long term, this can help tools like Cython and PySpy interact more efficiently. In the shorter term, it allows us to perform some optimizations more simply.
  * [gh-105375](https://github.com/python/cpython/issues/105375): Fix bugs in the [`builtins`](https://docs.python.org/3/library/builtins.html#module-builtins "builtins: The module that provides the built-in namespace.") module where exceptions could end up being overwritten.
  * [gh-105375](https://github.com/python/cpython/issues/105375): Fix bug in the compiler where an exception could end up being overwritten.
  * [gh-105375](https://github.com/python/cpython/issues/105375): Improve error handling in `PyUnicode_BuildEncodingMap()` where an exception could end up being overwritten.
  * [gh-105486](https://github.com/python/cpython/issues/105486): Change the repr of `ParamSpec` list of args in `types.GenericAlias`.
  * [gh-105678](https://github.com/python/cpython/issues/105678): Break the `MAKE_FUNCTION` instruction into two parts, `MAKE_FUNCTION` which makes the function and `SET_FUNCTION_ATTRIBUTE` which sets the attributes on the function. This makes the stack effect of `MAKE_FUNCTION` regular to ease optimization and code generation.
  * [gh-105435](https://github.com/python/cpython/issues/105435): Fix spurious newline character if file ends on a comment without a newline. Patch by Pablo Galindo
  * [gh-105390](https://github.com/python/cpython/issues/105390): Correctly raise [`tokenize.TokenError`](https://docs.python.org/3/library/tokenize.html#tokenize.TokenError "tokenize.TokenError") exceptions instead of [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") for tokenize errors such as incomplete input. Patch by Pablo Galindo
  * [gh-105259](https://github.com/python/cpython/issues/105259): Don’t include newline character for trailing `NEWLINE` tokens emitted in the [`tokenize`](https://docs.python.org/3/library/tokenize.html#module-tokenize "tokenize: Lexical scanner for Python source code.") module. Patch by Pablo Galindo
  * [gh-104635](https://github.com/python/cpython/issues/104635): Eliminate redundant [`STORE_FAST`](https://docs.python.org/3/library/dis.html#opcode-STORE_FAST) instructions in the compiler.