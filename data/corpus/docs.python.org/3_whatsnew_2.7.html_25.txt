Title: Python 2.7 Release Notes
URL: https://docs.python.org/3/whatsnew/2.7.html
Summary: The Python 2.7 release notes highlight contributions including enhancements to the 'subprocess' module, which now retries system calls on receiving an EINTR signal, and the addition of the 'is_declared_global()' function in the 'symtable' module that differentiates explicitly declared global variables from implicitly global ones.
---

```

(Contributed by Gregory P. Smith.)
The [`subprocess`](https://docs.python.org/3/library/subprocess.html#module-subprocess "subprocess: Subprocess management.") module will now retry its internal system calls on receiving an [`EINTR`](https://docs.python.org/3/library/errno.html#errno.EINTR "errno.EINTR") signal. (Reported by several people; final patch by Gregory P. Smith in [bpo-1068268](https://bugs.python.org/issue?@action=redirect&bpo=1068268).)
  * New function: [`is_declared_global()`](https://docs.python.org/3/library/symtable.html#symtable.Symbol.is_declared_global "symtable.Symbol.is_declared_global") in the [`symtable`](https://docs.python.org/3/library/symtable.html#module-symtable "symtable: Interface to the compiler's internal symbol tables.") module returns true for variables that are explicitly declared to be global, false for ones that are implicitly global. (Contributed by Jeremy Hylton.)
  * The [`syslog`](https://docs.python.org/3/library/syslog.html#module-syslog "syslog: An interface to the Unix syslog library routines. \(Unix\)") module will now use the value of `sys.argv[0]` as the identifier instead of the previous default value of `'python'`. (Changed by Sean Reifschneider; [bpo-8451](https://bugs.python.org/issue?@action=redirect&bpo=8451).)
  * The [`sys.version_info`](https://docs.python.org/3/library/sys.html#sys.version_info "sys.version_info") value is now a named tuple, with attributes named `major`, `minor`, `micro`, `releaselevel`, and `serial`. (Contributed by Ross Light; [bpo-4285](https://bugs.python.org/issue?@action=redirect&bpo=4285).)
[`sys.getwindowsversion()`](https://docs.python.org/3/library/sys.html#sys.getwindowsversion "sys.getwindowsversion") also returns a named tuple, with attributes named `major`, `minor`, `build`, `platform`, `service_pack`, `service_pack_major`, `service_pack_minor`, `suite_mask`, and `product_type`. (Contributed by Brian Curtin; [bpo-7766](https://bugs.python.org/issue?@action=redirect&bpo=7766).)
  * The [`tarfile`](https://docs.python.org/3/library/tarfile.html#module-tarfile "tarfile: Read and write tar-format archive files.") module’s default error handling has changed, to no longer suppress fatal errors. The default error level was previously 0, which meant that errors would only result in a message being written to the debug log, but because the debug log is not activated by default, these errors go unnoticed. The default error level is now 1, which raises an exception if there’s an error. (Changed by Lars Gustäbel; [bpo-7357](https://bugs.python.org/issue?@action=redirect&bpo=7357).)
[`tarfile`](https://docs.python.org/3/library/tarfile.html#module-tarfile "tarfile: Read and write tar-format archive files.") now supports filtering the [`TarInfo`](https://docs.python.org/3/library/tarfile.html#tarfile.TarInfo "tarfile.TarInfo") objects being added to a tar file. When you call [`add()`](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile.add "tarfile.TarFile.add"), you may supply an optional _filter_ argument that’s a callable. The _filter_ callable will be passed the [`TarInfo`](https://docs.python.org/3/library/tarfile.html#tarfile.TarInfo "tarfile.TarInfo") for every file being added, and can modify and return it. If the callable returns `None`, the file will be excluded from the resulting archive. This is more powerful than the existing _exclude_ argument, which has therefore been deprecated. (Added by Lars Gustäbel; [bpo-6856](https://bugs.python.org/issue?@action=redirect&bpo=6856).) The [`TarFile`](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile "tarfile.TarFile") class also now supports the context management protocol. (Added by Lars Gustäbel; [bpo-7232](https://bugs.python.org/issue?@action=redirect&bpo=7232).)
  * The [`wait()`](https://docs.python.org/3/library/threading.html#threading.Event.wait "threading.Event.wait") method of the [`threading.Event`](https://docs.python.org/3/library/threading.html#threading.Event "threading.Event") class now returns the internal flag on exit. This means the method will usually return true because [`wait()`](https://docs.python.org/3/library/threading.html#threading.Event.wait "threading.Event.wait") is supposed to block until the internal flag becomes true. The return value will only be false if a timeout was provided and the operation timed out. (Contributed by Tim Lesher; [bpo-1674032](https://bugs.python.org/issue?@action=redirect&bpo=1674032).)
  * The Unicode database provided by the [`unicodedata`](https://docs.python.org/3/library/unicodedata.html#module-unicodedata "unicodedata: Access the Unicode Database.") module is now used internally to determine which characters are numeric, whitespace, or represent line breaks. The database also includes information from the `Unihan.txt` data file (patch by Anders Chrigström and Amaury Forgeot d’Arc; [bpo-1571184](https://bugs.python.org/issue?@action=redirect&bpo=1571184)) and has been updated to version