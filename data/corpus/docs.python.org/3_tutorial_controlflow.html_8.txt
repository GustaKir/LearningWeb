Title: Function Argument Types in Python
URL: https://docs.python.org/3/tutorial/controlflow.html
Summary: This section discusses different types of function arguments in Python, illustrating how standard arguments can be passed by position or keyword, positional-only parameters are enforced using a '/', and keyword-only parameters are enforced using a '*'. Examples are provided for each function type, demonstrating their calling conventions and the resulting errors when incorrect usage occurs.
---

```

The first function definition, `standard_arg`, the most familiar form, places no restrictions on the calling convention and arguments may be passed by position or keyword:
>>>```
>>> standard_arg(2)
2
>>> standard_arg(arg=2)
2

```

The second function `pos_only_arg` is restricted to only use positional parameters as there is a `/` in the function definition:
>>>```
>>> pos_only_arg(1)
1
>>> pos_only_arg(arg=1)
Traceback (most recent call last):
 File "<stdin>", line 1, in <module>
TypeError: pos_only_arg() got some positional-only arguments passed as keyword arguments: 'arg'

```

The third function `kwd_only_arg` only allows keyword arguments as indicated by a `*` in the function definition:
>>>```
>>> kwd_only_arg(3)
Traceback (most recent call last):
 File "<stdin>", line 1, in <module>
TypeError: kwd_only_arg() takes 0 positional arguments but 1 was given
>>> kwd_only_arg(arg=3)
3

```

And the last uses all three calling conventions in the same function definition:
>>>```
>>> combined_example(1, 2, 3)
Traceback (most recent call last):
 File "<stdin>", line 1, in <module>
TypeError: combined_example() takes 2 positional arguments but 3 were given
>>> combined_example(1, 2, kwd_only=3)
1 2 3
>>> combined_example(1, standard=2, kwd_only=3)
1 2 3
>>> combined_example(pos_only=1, standard=2, kwd_only=3)
Traceback (most recent call last):
 File "<stdin>", line 1, in <module>
TypeError: combined_example() got some positional-only arguments passed as keyword arguments: 'pos_only'

```

Finally, consider this function definition which has a potential collision between the positional argument `name` and `**kwds` which has `name` as a key:
```
deffoo(name, **kwds):
  return 'name' in kwds

```

There is no possible call that will make it return `True` as the keyword `'name'` will always bind to the first parameter. For example:
>>>```
>>> foo(1, **{'name': 2})
Traceback (most recent call last):
 File "<stdin>", line 1, in <module>
TypeError: foo() got multiple values for argument 'name'
>>>

```

But using `/` (positional only arguments), it is possible since it allows `name` as a positional argument and `'name'` as a key in the keyword arguments:
>>>```
>>> deffoo(name, /, **kwds):
...   return 'name' in kwds
...
>>> foo(1, **{'name': 2})
True

```

In other words, the names of positional-only parameters can be used in `**kwds` without ambiguity.
#### 4.9.3.5. Recap[¶](https://docs.python.org/3/tutorial/controlflow.html#recap "Link to this heading")
The use case will determine which parameters to use in the function definition:
```
deff(pos1, pos2, /, pos_or_kwd, *, kwd1, kwd2):

```

As guidance:
  * Use positional-only if you want the name of the parameters to not be available to the user. This is useful when parameter names have no real meaning, if you want to enforce the order of the arguments when the function is called or if you need to take some positional parameters and arbitrary keywords.
  * Use keyword-only when names have meaning and the function definition is more understandable by being explicit with names or you want to prevent users relying on the position of the argument being passed.
  * For an API, use positional-only to prevent breaking API changes if the parameter’s name is modified in the future.


### 4.9.4. Arbitrary Argument Lists[¶](https://docs.python.org/3/tutorial/controlflow.html#arbitrary-argument-lists "Link to this heading")
Finally, the least frequently used option is to specify that a function can be called with an arbitrary number of arguments. These arguments will be wrapped up in a tuple (see [Tuples and Sequences](https://docs.python.org/3/tutorial/datastructures.html#tut-tuples)). Before the variable number of arguments, zero or more normal arguments may occur.
```
defwrite_multiple_items(file, separator, *args):
  file.write(separator.join(args))

```

Normally, these _variadic_ arguments will be last in the list of formal parameters, because they scoop up all remaining input arguments that are passed to the function. Any formal parameters which occur after the `*args` parameter are ‘keyword-only’ arguments, meaning that they can only be used as keywords rather than positional arguments.
>>>```
>>> defconcat(*args, sep="/"):
...   return sep.join(args)
...
>>> concat("earth", "mars", "venus")
'earth/mars/venus'
>>> concat("earth", "mars", "venus", sep=".")
'earth.mars.venus'