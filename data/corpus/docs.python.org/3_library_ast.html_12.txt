Title: Python Abstract Syntax Tree (AST) Example
URL: https://docs.python.org/3/library/ast.html
Summary: This chunk demonstrates the use of Python's AST module to parse and display the structure of a conditional statement using 'ast.parse' and 'ast.dump'. It showcases the representation of 'if', 'elif', and 'else' constructs in the Abstract Syntax Tree format.
---

```
>>> print(ast.dump(ast.parse("""
... if x:
...   ...
... elif y:
...   ...
... else:
...   ...
... """), indent=4))
Module(
  body=[
    If(
      test=Name(id='x', ctx=Load()),
      body=[
        Expr(
          value=Constant(value=Ellipsis))],
      orelse=[
        If(
          test=Name(id='y', ctx=Load()),
          body=[
            Expr(
              value=Constant(value=Ellipsis))],
          orelse=[
            Expr(
              value=Constant(value=Ellipsis))])])])

```


_class_ ast.For(_target_ , _iter_ , _body_ , _orelse_ , _type_comment_)[¶](https://docs.python.org/3/library/ast.html#ast.For "Link to this definition")
    
A `for` loop. `target` holds the variable(s) the loop assigns to, as a single [`Name`](https://docs.python.org/3/library/ast.html#ast.Name "ast.Name"), [`Tuple`](https://docs.python.org/3/library/ast.html#ast.Tuple "ast.Tuple"), [`List`](https://docs.python.org/3/library/ast.html#ast.List "ast.List"), [`Attribute`](https://docs.python.org/3/library/ast.html#ast.Attribute "ast.Attribute") or [`Subscript`](https://docs.python.org/3/library/ast.html#ast.Subscript "ast.Subscript") node. `iter` holds the item to be looped over, again as a single node. `body` and `orelse` contain lists of nodes to execute. Those in `orelse` are executed if the loop finishes normally, rather than via a `break` statement. 

type_comment[¶](https://docs.python.org/3/library/ast.html#ast.For.type_comment "Link to this definition")
    
`type_comment` is an optional string with the type annotation as a comment.
>>>```
>>> print(ast.dump(ast.parse("""
... for x in y:
...   ...
... else:
...   ...
... """), indent=4))
Module(
  body=[
    For(
      target=Name(id='x', ctx=Store()),
      iter=Name(id='y', ctx=Load()),
      body=[
        Expr(
          value=Constant(value=Ellipsis))],
      orelse=[
        Expr(
          value=Constant(value=Ellipsis))])])

```


_class_ ast.While(_test_ , _body_ , _orelse_)[¶](https://docs.python.org/3/library/ast.html#ast.While "Link to this definition")
    
A `while` loop. `test` holds the condition, such as a [`Compare`](https://docs.python.org/3/library/ast.html#ast.Compare "ast.Compare") node.
>>>```
>>> print(ast.dump(ast.parse("""
... while x:
...   ...
... else:
...   ...
... """), indent=4))
Module(
  body=[
    While(
      test=Name(id='x', ctx=Load()),
      body=[
        Expr(
          value=Constant(value=Ellipsis))],
      orelse=[
        Expr(
          value=Constant(value=Ellipsis))])])

```


_class_ ast.Break[¶](https://docs.python.org/3/library/ast.html#ast.Break "Link to this definition")


_class_ ast.Continue[¶](https://docs.python.org/3/library/ast.html#ast.Continue "Link to this definition")
    
The `break` and `continue` statements.
>>>```
>>> print(ast.dump(ast.parse("""\
... for a in b:
...   if a > 5:
...     break
...   else:
...     continue
...
... """), indent=4))
Module(
  body=[
    For(
      target=Name(id='a', ctx=Store()),
      iter=Name(id='b', ctx=Load()),
      body=[
        If(
          test=Compare(
            left=Name(id='a', ctx=Load()),
            ops=[
              Gt()],
            comparators=[
              Constant(value=5)]),
          body=[
            Break()],
          orelse=[
            Continue()])])])

```


_class_ ast.Try(_body_ , _handlers_ , _orelse_ , _finalbody_)[¶](https://docs.python.org/3/library/ast.html#ast.Try "Link to this definition")
    
`try` blocks. All attributes are list of nodes to execute, except for `handlers`, which is a list of [`ExceptHandler`](https://docs.python.org/3/library/ast.html#ast.ExceptHandler "ast.ExceptHandler") nodes.
>>>```
>>> print(ast.dump(ast.parse("""
... try:
...   ...
... except Exception:
...   ...
... except OtherException as e:
...   ...
... else:
...   ...
... finally:
...   ...
... """), indent=4))
Module(
  body=[
    Try(
      body=[
        Expr(
          value=Constant(value=Ellipsis))],
      handlers=[
        ExceptHandler(
          type=Name(id='Exception', ctx=Load()),
          body=[
            Expr(
              value=Constant(value=Ellipsis))]),
        ExceptHandler(
          type=Name(id='OtherException', ctx=Load()),
          name='e',
          body=[
            Expr(
              value=Constant(value=Ellipsis))])],
      orelse=[
        Expr(
          value=Constant(value=Ellipsis))],
      finalbody=[
        Expr(
          value=Constant(value=Ellipsis))])])

```


_class_ ast.TryStar(_body_ , _handlers_ , _orelse_ , _finalbody_)[¶](https://docs.python.org/3/library/ast.html#ast.TryStar "Link to this definition")
    
`try` blocks which are followed by `except*` clauses. The attributes are the same as for [`Try`](https://docs.python.org/3/library/ast.html#ast.Try "ast.Try") but the [`ExceptHandler`](https://docs.python.org/3/library/ast.html#ast.ExceptHandler "ast.ExceptHandler") nodes in `handlers` are interpreted as `except*` blocks rather then `except`.
>>>