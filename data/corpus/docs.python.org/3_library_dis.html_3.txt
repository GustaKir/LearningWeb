Title: Analysis Functions in dis Module
URL: https://docs.python.org/3/library/dis.html
Summary: The `dis` module provides analysis functions like `dis.code_info()` that return detailed information about code objects such as functions and generators. This function outputs a formatted multi-line string with specifics about the code object, although its contents may vary across different Python versions and implementations.
---

```

## Analysis functions[¶](https://docs.python.org/3/library/dis.html#analysis-functions "Link to this heading")
The [`dis`](https://docs.python.org/3/library/dis.html#module-dis "dis: Disassembler for Python bytecode.") module also defines the following analysis functions that convert the input directly to the desired output. They can be useful if only a single operation is being performed, so the intermediate analysis object isn’t useful: 

dis.code_info(_x_)[¶](https://docs.python.org/3/library/dis.html#dis.code_info "Link to this definition")
    
Return a formatted multi-line string with detailed code object information for the supplied function, generator, asynchronous generator, coroutine, method, source code string or code object.
Note that the exact contents of code info strings are highly implementation dependent and they may change arbitrarily across Python VMs or Python releases.
Added in version 3.2.
Changed in version 3.7: This can now handle coroutine and asynchronous generator objects. 

dis.show_code(_x_ , _*_ , _file =None_)[¶](https://docs.python.org/3/library/dis.html#dis.show_code "Link to this definition")
    
Print detailed code object information for the supplied function, method, source code string or code object to _file_ (or `sys.stdout` if _file_ is not specified).
This is a convenient shorthand for `print(code_info(x), file=file)`, intended for interactive exploration at the interpreter prompt.
Added in version 3.2.
Changed in version 3.4: Added _file_ parameter. 

dis.dis(_x =None_, _*_ , _file =None_, _depth =None_, _show_caches =False_, _adaptive =False_)[¶](https://docs.python.org/3/library/dis.html#dis.dis "Link to this definition")
    
Disassemble the _x_ object. _x_ can denote either a module, a class, a method, a function, a generator, an asynchronous generator, a coroutine, a code object, a string of source code or a byte sequence of raw bytecode. For a module, it disassembles all functions. For a class, it disassembles all methods (including class and static methods). For a code object or sequence of raw bytecode, it prints one line per bytecode instruction. It also recursively disassembles nested code objects. These can include generator expressions, nested functions, the bodies of nested classes, and the code objects used for [annotation scopes](https://docs.python.org/3/reference/executionmodel.html#annotation-scopes). Strings are first compiled to code objects with the [`compile()`](https://docs.python.org/3/library/functions.html#compile "compile") built-in function before being disassembled. If no object is provided, this function disassembles the last traceback.
The disassembly is written as text to the supplied _file_ argument if provided and to `sys.stdout` otherwise.
The maximal depth of recursion is limited by _depth_ unless it is `None`. `depth=0` means no recursion.
If _show_caches_ is `True`, this function will display inline cache entries used by the interpreter to specialize the bytecode.
If _adaptive_ is `True`, this function will display specialized bytecode that may be different from the original bytecode.
Changed in version 3.4: Added _file_ parameter.
Changed in version 3.7: Implemented recursive disassembling and added _depth_ parameter.
Changed in version 3.7: This can now handle coroutine and asynchronous generator objects.
Changed in version 3.11: Added the _show_caches_ and _adaptive_ parameters. 

distb(tb=None, *, file=None, show_caches=False, adaptive=False,


show_offset=False)
    
Disassemble the top-of-stack function of a traceback, using the last traceback if none was passed. The instruction causing the exception is indicated.
The disassembly is written as text to the supplied _file_ argument if provided and to `sys.stdout` otherwise.
Changed in version 3.4: Added _file_ parameter.
Changed in version 3.11: Added the _show_caches_ and _adaptive_ parameters.
Changed in version 3.13: Added the _show_offsets_ parameter. 

dis.disassemble(_code_ , _lasti =-1_, _*_ , _file =None_, _show_caches =False_, _adaptive =False_)[¶](https://docs.python.org/3/library/dis.html#dis.disassemble "Link to this definition")


disco(code, lasti=-1, *, file=None, show_caches=False, adaptive=False,


show_offsets=False)
    
Disassemble a code object, indicating the last instruction if _lasti_ was provided. The output is divided in the following columns:
  1. the line number, for the first instruction of each line
  2. the current instruction, indicated as `-->`,
  3. a labelled instruction, indicated with `>>`,
  4. the address of the instruction,
  5. the operation code name,
  6. operation parameters, and
  7. interpretation of the parameters in parentheses.