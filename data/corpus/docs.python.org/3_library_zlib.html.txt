Title: zlib - Data Compression Library
URL: https://docs.python.org/3/library/zlib.html
Summary: The zlib module in Python provides support for data compression and decompression using the DEFLATE algorithm. It is commonly used for data archiving and reduces the size of data to optimize storage or transmission. The documentation includes references to related topics such as gzip support.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
#### Previous topic
[Data Compression and Archiving](https://docs.python.org/3/library/archiving.html "previous chapter")
#### Next topic
[`gzip` — Support for **gzip** files](https://docs.python.org/3/library/gzip.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/zlib.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/gzip.html "gzip — Support for gzip files") |
  * [previous](https://docs.python.org/3/library/archiving.html "Data Compression and Archiving") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Data Compression and Archiving](https://docs.python.org/3/library/archiving.html) »
  * [`zlib` — Compression compatible with **gzip**](https://docs.python.org/3/library/zlib.html)
  * | 
  * Theme  Auto Light Dark |


# `zlib` — Compression compatible with **gzip**[¶](https://docs.python.org/3/library/zlib.html#module-zlib "Link to this heading")
For applications that require data compression, the functions in this module allow compression and decompression, using the zlib library. The zlib library has its own home page at <https://www.zlib.net>. There are known incompatibilities between the Python module and versions of the zlib library earlier than 1.1.3; 1.1.3 has a [security vulnerability](https://zlib.net/zlib_faq.html#faq33), so we recommend using 1.1.4 or later.
zlib’s functions have many options and often need to be used in a particular order. This documentation doesn’t attempt to cover all of the permutations; consult the zlib manual at <http://www.zlib.net/manual.html> for authoritative information.
For reading and writing `.gz` files see the [`gzip`](https://docs.python.org/3/library/gzip.html#module-gzip "gzip: Interfaces for gzip compression and decompression using file objects.") module.
The available exception and functions in this module are: 

_exception_ zlib.error[¶](https://docs.python.org/3/library/zlib.html#zlib.error "Link to this definition")
    
Exception raised on compression and decompression errors. 

zlib.adler32(_data_[, _value_])[¶](https://docs.python.org/3/library/zlib.html#zlib.adler32 "Link to this definition")
    
Computes an Adler-32 checksum of _data_. (An Adler-32 checksum is almost as reliable as a CRC32 but can be computed much more quickly.) The result is an unsigned 32-bit integer. If _value_ is present, it is used as the starting value of the checksum; otherwise, a default value of 1 is used. Passing in _value_ allows computing a running checksum over the concatenation of several inputs. The algorithm is not cryptographically strong, and should not be used for authentication or digital signatures. Since the algorithm is designed for use as a checksum algorithm, it is not suitable for use as a general hash algorithm.
Changed in version 3.0: The result is always unsigned.