Title: Codecs Module Overview
URL: https://docs.python.org/3/library/codecs.html
Summary: The `codecs` module provides base classes for Python codecs and manages the codec registry for encoding and decoding text and bytes. It supports standard text encodings and allows for custom codecs while enforcing restrictions on certain features.
---

# `codecs` — Codec registry and base classes[¶](https://docs.python.org/3/library/codecs.html#module-codecs "Link to this heading")
**Source code:** [Lib/codecs.py](https://github.com/python/cpython/tree/3.13/Lib/codecs.py)
This module defines base classes for standard Python codecs (encoders and decoders) and provides access to the internal Python codec registry, which manages the codec and error handling lookup process. Most standard codecs are [text encodings](https://docs.python.org/3/glossary.html#term-text-encoding), which encode text to bytes (and decode bytes to text), but there are also codecs provided that encode text to text, and bytes to bytes. Custom codecs may encode and decode between arbitrary types, but some module features are restricted to be used specifically with [text encodings](https://docs.python.org/3/glossary.html#term-text-encoding) or with codecs that encode to [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes").
The module defines the following functions for encoding and decoding with any codec: 

codecs.encode(_obj_ , _encoding ='utf-8'_, _errors ='strict'_)[¶](https://docs.python.org/3/library/codecs.html#codecs.encode "Link to this definition")
    
Encodes _obj_ using the codec registered for _encoding_.
_Errors_ may be given to set the desired error handling scheme. The default error handler is `'strict'` meaning that encoding errors raise [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") (or a more codec specific subclass, such as [`UnicodeEncodeError`](https://docs.python.org/3/library/exceptions.html#UnicodeEncodeError "UnicodeEncodeError")). Refer to [Codec Base Classes](https://docs.python.org/3/library/codecs.html#codec-base-classes) for more information on codec error handling. 

codecs.decode(_obj_ , _encoding ='utf-8'_, _errors ='strict'_)[¶](https://docs.python.org/3/library/codecs.html#codecs.decode "Link to this definition")
    
Decodes _obj_ using the codec registered for _encoding_.
_Errors_ may be given to set the desired error handling scheme. The default error handler is `'strict'` meaning that decoding errors raise [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") (or a more codec specific subclass, such as [`UnicodeDecodeError`](https://docs.python.org/3/library/exceptions.html#UnicodeDecodeError "UnicodeDecodeError")). Refer to [Codec Base Classes](https://docs.python.org/3/library/codecs.html#codec-base-classes) for more information on codec error handling.
The full details for each codec can also be looked up directly: 

codecs.lookup(_encoding_)[¶](https://docs.python.org/3/library/codecs.html#codecs.lookup "Link to this definition")
    
Looks up the codec info in the Python codec registry and returns a [`CodecInfo`](https://docs.python.org/3/library/codecs.html#codecs.CodecInfo "codecs.CodecInfo") object as defined below.
Encodings are first looked up in the registry’s cache. If not found, the list of registered search functions is scanned. If no [`CodecInfo`](https://docs.python.org/3/library/codecs.html#codecs.CodecInfo "codecs.CodecInfo") object is found, a [`LookupError`](https://docs.python.org/3/library/exceptions.html#LookupError "LookupError") is raised. Otherwise, the [`CodecInfo`](https://docs.python.org/3/library/codecs.html#codecs.CodecInfo "codecs.CodecInfo") object is stored in the cache and returned to the caller. 

_class_ codecs.CodecInfo(_encode_ , _decode_ , _streamreader =None_, _streamwriter =None_, _incrementalencoder =None_, _incrementaldecoder =None_, _name =None_)[¶](https://docs.python.org/3/library/codecs.html#codecs.CodecInfo "Link to this definition")
    
Codec details when looking up the codec registry. The constructor arguments are stored in attributes of the same name: 

name[¶](https://docs.python.org/3/library/codecs.html#codecs.CodecInfo.name "Link to this definition")
    
The name of the encoding. 

encode[¶](https://docs.python.org/3/library/codecs.html#codecs.CodecInfo.encode "Link to this definition")


decode[¶](https://docs.python.org/3/library/codecs.html#codecs.CodecInfo.decode "Link to this definition")
    
The stateless encoding and decoding functions. These must be functions or methods which have the same interface as the [`encode()`](https://docs.python.org/3/library/codecs.html#codecs.Codec.encode "codecs.Codec.encode") and [`decode()`](https://docs.python.org/3/library/codecs.html#codecs.Codec.decode "codecs.Codec.decode") methods of Codec instances (see [Codec Interface](https://docs.python.org/3/library/codecs.html#codec-objects)). The functions or methods are expected to work in a stateless mode. 

incrementalencoder[¶](https://docs.python.org/3/library/codecs.html#codecs.CodecInfo.incrementalencoder "Link to this definition")