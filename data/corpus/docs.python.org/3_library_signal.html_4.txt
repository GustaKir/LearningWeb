Title: Signal Numbers in Python's signal Module
URL: https://docs.python.org/3/library/signal.html
Summary: This section describes the symbolic representation of signal numbers in Python's signal module, showing that names like `signal.SIGHUP` correspond to standard signals defined in C's `<signal.h>`. It notes the variability of signal names across different systems and introduces the `signal.CTRL_C_EVENT`, which represents the `Ctrl`+`C` keystroke event and is compatible only with `os.kill()`.
---

SIG*
    
All the signal numbers are defined symbolically. For example, the hangup signal is defined as [`signal.SIGHUP`](https://docs.python.org/3/library/signal.html#signal.SIGHUP "signal.SIGHUP"); the variable names are identical to the names used in C programs, as found in `<signal.h>`. The Unix man page for ‘`signal()`’ lists the existing signals (on some systems this is _[signal(2)](https://manpages.debian.org/signal\(2\))_ , on others the list is in _[signal(7)](https://manpages.debian.org/signal\(7\))_). Note that not all systems define the same set of signal names; only those names defined by the system are defined by this module. 

signal.CTRL_C_EVENT[¶](https://docs.python.org/3/library/signal.html#signal.CTRL_C_EVENT "Link to this definition")
    
The signal corresponding to the `Ctrl`+`C` keystroke event. This signal can only be used with [`os.kill()`](https://docs.python.org/3/library/os.html#os.kill "os.kill").
[Availability](https://docs.python.org/3/library/intro.html#availability): Windows.
Added in version 3.2. 

signal.CTRL_BREAK_EVENT[¶](https://docs.python.org/3/library/signal.html#signal.CTRL_BREAK_EVENT "Link to this definition")
    
The signal corresponding to the `Ctrl`+`Break` keystroke event. This signal can only be used with [`os.kill()`](https://docs.python.org/3/library/os.html#os.kill "os.kill").
[Availability](https://docs.python.org/3/library/intro.html#availability): Windows.
Added in version 3.2. 

signal.NSIG[¶](https://docs.python.org/3/library/signal.html#signal.NSIG "Link to this definition")
    
One more than the number of the highest signal number. Use [`valid_signals()`](https://docs.python.org/3/library/signal.html#signal.valid_signals "signal.valid_signals") to get valid signal numbers. 

signal.ITIMER_REAL[¶](https://docs.python.org/3/library/signal.html#signal.ITIMER_REAL "Link to this definition")
    
Decrements interval timer in real time, and delivers [`SIGALRM`](https://docs.python.org/3/library/signal.html#signal.SIGALRM "signal.SIGALRM") upon expiration. 

signal.ITIMER_VIRTUAL[¶](https://docs.python.org/3/library/signal.html#signal.ITIMER_VIRTUAL "Link to this definition")
    
Decrements interval timer only when the process is executing, and delivers SIGVTALRM upon expiration. 

signal.ITIMER_PROF[¶](https://docs.python.org/3/library/signal.html#signal.ITIMER_PROF "Link to this definition")
    
Decrements interval timer both when the process executes and when the system is executing on behalf of the process. Coupled with ITIMER_VIRTUAL, this timer is usually used to profile the time spent by the application in user and kernel space. SIGPROF is delivered upon expiration. 

signal.SIG_BLOCK[¶](https://docs.python.org/3/library/signal.html#signal.SIG_BLOCK "Link to this definition")
    
A possible value for the _how_ parameter to [`pthread_sigmask()`](https://docs.python.org/3/library/signal.html#signal.pthread_sigmask "signal.pthread_sigmask") indicating that signals are to be blocked.
Added in version 3.3. 

signal.SIG_UNBLOCK[¶](https://docs.python.org/3/library/signal.html#signal.SIG_UNBLOCK "Link to this definition")
    
A possible value for the _how_ parameter to [`pthread_sigmask()`](https://docs.python.org/3/library/signal.html#signal.pthread_sigmask "signal.pthread_sigmask") indicating that signals are to be unblocked.
Added in version 3.3. 

signal.SIG_SETMASK[¶](https://docs.python.org/3/library/signal.html#signal.SIG_SETMASK "Link to this definition")
    
A possible value for the _how_ parameter to [`pthread_sigmask()`](https://docs.python.org/3/library/signal.html#signal.pthread_sigmask "signal.pthread_sigmask") indicating that the signal mask is to be replaced.
Added in version 3.3.
The [`signal`](https://docs.python.org/3/library/signal.html#module-signal "signal: Set handlers for asynchronous events.") module defines one exception: 

_exception_ signal.ItimerError[¶](https://docs.python.org/3/library/signal.html#signal.ItimerError "Link to this definition")
    
Raised to signal an error from the underlying [`setitimer()`](https://docs.python.org/3/library/signal.html#signal.setitimer "signal.setitimer") or [`getitimer()`](https://docs.python.org/3/library/signal.html#signal.getitimer "signal.getitimer") implementation. Expect this error if an invalid interval timer or a negative time is passed to [`setitimer()`](https://docs.python.org/3/library/signal.html#signal.setitimer "signal.setitimer"). This error is a subtype of [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError").
Added in version 3.3: This error used to be a subtype of [`IOError`](https://docs.python.org/3/library/exceptions.html#IOError "IOError"), which is now an alias of [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError").
The [`signal`](https://docs.python.org/3/library/signal.html#module-signal "signal: Set handlers for asynchronous events.") module defines the following functions: