Title: random.sample() Method
URL: https://docs.python.org/3/library/random.html
Summary: The random.sample() function returns a list of unique elements chosen from a population sequence, allowing for random sampling without replacement. It preserves the original population and provides the sampled elements in selection order. The function accommodates populations that contain repeated elements and allows for specifying counts of each element using the optional 'counts' parameter.
---

random.sample(_population_ , _k_ , _*_ , _counts =None_)[¶](https://docs.python.org/3/library/random.html#random.sample "Link to this definition")
    
Return a _k_ length list of unique elements chosen from the population sequence. Used for random sampling without replacement.
Returns a new list containing elements from the population while leaving the original population unchanged. The resulting list is in selection order so that all sub-slices will also be valid random samples. This allows raffle winners (the sample) to be partitioned into grand prize and second place winners (the subslices).
Members of the population need not be [hashable](https://docs.python.org/3/glossary.html#term-hashable) or unique. If the population contains repeats, then each occurrence is a possible selection in the sample.
Repeated elements can be specified one at a time or with the optional keyword-only _counts_ parameter. For example, `sample(['red', 'blue'], counts=[4, 2], k=5)` is equivalent to `sample(['red', 'red', 'red', 'red', 'blue', 'blue'], k=5)`.
To choose a sample from a range of integers, use a [`range()`](https://docs.python.org/3/library/stdtypes.html#range "range") object as an argument. This is especially fast and space efficient for sampling from a large population: `sample(range(10000000), k=60)`.
If the sample size is larger than the population size, a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised.
Changed in version 3.9: Added the _counts_ parameter.
Changed in version 3.11: The _population_ must be a sequence. Automatic conversion of sets to lists is no longer supported.
## Discrete distributions[¶](https://docs.python.org/3/library/random.html#discrete-distributions "Link to this heading")
The following function generates a discrete distribution. 

random.binomialvariate(_n =1_, _p =0.5_)[¶](https://docs.python.org/3/library/random.html#random.binomialvariate "Link to this definition")
    
[Binomial distribution](https://mathworld.wolfram.com/BinomialDistribution.html). Return the number of successes for _n_ independent trials with the probability of success in each trial being _p_ :
Mathematically equivalent to:
```
sum(random() < p for i in range(n))

```

The number of trials _n_ should be a non-negative integer. The probability of success _p_ should be between `0.0 <= p <= 1.0`. The result is an integer in the range `0 <= X <= n`.
Added in version 3.12.
## Real-valued distributions[¶](https://docs.python.org/3/library/random.html#real-valued-distributions "Link to this heading")
The following functions generate specific real-valued distributions. Function parameters are named after the corresponding variables in the distribution’s equation, as used in common mathematical practice; most of these equations can be found in any statistics text. 

random.random()[¶](https://docs.python.org/3/library/random.html#random.random "Link to this definition")
    
Return the next random floating-point number in the range `0.0 <= X < 1.0` 

random.uniform(_a_ , _b_)[¶](https://docs.python.org/3/library/random.html#random.uniform "Link to this definition")
    
Return a random floating-point number _N_ such that `a <= N <= b` for `a <= b` and `b <= N <= a` for `b < a`.
The end-point value `b` may or may not be included in the range depending on floating-point rounding in the expression `a + (b-a) * random()`. 

random.triangular(_low_ , _high_ , _mode_)[¶](https://docs.python.org/3/library/random.html#random.triangular "Link to this definition")
    
Return a random floating-point number _N_ such that `low <= N <= high` and with the specified _mode_ between those bounds. The _low_ and _high_ bounds default to zero and one. The _mode_ argument defaults to the midpoint between the bounds, giving a symmetric distribution. 

random.betavariate(_alpha_ , _beta_)[¶](https://docs.python.org/3/library/random.html#random.betavariate "Link to this definition")
    
Beta distribution. Conditions on the parameters are `alpha > 0` and `beta > 0`. Returned values range between 0 and 1. 

random.expovariate(_lambd =1.0_)[¶](https://docs.python.org/3/library/random.html#random.expovariate "Link to this definition")
    
Exponential distribution. _lambd_ is 1.0 divided by the desired mean. It should be nonzero. (The parameter would be called “lambda”, but that is a reserved word in Python.) Returned values range from 0 to positive infinity if _lambd_ is positive, and from negative infinity to 0 if _lambd_ is negative.
Changed in version 3.12: Added the default value for `lambd`. 

random.gammavariate(_alpha_ , _beta_)[¶](https://docs.python.org/3/library/random.html#random.gammavariate "Link to this definition")
    
Gamma distribution. (_Not_ the gamma function!) The shape and scale parameters, _alpha_ and _beta_ , must have positive values. (Calling conventions vary and some sources define ‘beta’ as the inverse of the scale).
The probability distribution function is: