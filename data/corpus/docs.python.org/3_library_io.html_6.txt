Title: IOBase Class Methods and Attributes
URL: https://docs.python.org/3/library/io.html
Summary: The `IOBase` class in Python provides several key methods and attributes, including `close()` for flushing and closing the stream, the `closed` attribute to indicate if the stream is closed, and `fileno()` for retrieving the underlying file descriptor. Additionally, multiple calls to `close()` are permitted but only the first will take effect.
---

```

[`IOBase`](https://docs.python.org/3/library/io.html#io.IOBase "io.IOBase") provides these data attributes and methods: 

close()[¶](https://docs.python.org/3/library/io.html#io.IOBase.close "Link to this definition")
    
Flush and close this stream. This method has no effect if the file is already closed. Once the file is closed, any operation on the file (e.g. reading or writing) will raise a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError").
As a convenience, it is allowed to call this method more than once; only the first call, however, will have an effect. 

closed[¶](https://docs.python.org/3/library/io.html#io.IOBase.closed "Link to this definition")
    
`True` if the stream is closed. 

fileno()[¶](https://docs.python.org/3/library/io.html#io.IOBase.fileno "Link to this definition")
    
Return the underlying file descriptor (an integer) of the stream if it exists. An [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") is raised if the IO object does not use a file descriptor. 

flush()[¶](https://docs.python.org/3/library/io.html#io.IOBase.flush "Link to this definition")
    
Flush the write buffers of the stream if applicable. This does nothing for read-only and non-blocking streams. 

isatty()[¶](https://docs.python.org/3/library/io.html#io.IOBase.isatty "Link to this definition")
    
Return `True` if the stream is interactive (i.e., connected to a terminal/tty device). 

readable()[¶](https://docs.python.org/3/library/io.html#io.IOBase.readable "Link to this definition")
    
Return `True` if the stream can be read from. If `False`, `read()` will raise [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError"). 

readline(_size =-1_, _/_)[¶](https://docs.python.org/3/library/io.html#io.IOBase.readline "Link to this definition")
    
Read and return one line from the stream. If _size_ is specified, at most _size_ bytes will be read.
The line terminator is always `b'\n'` for binary files; for text files, the _newline_ argument to [`open()`](https://docs.python.org/3/library/functions.html#open "open") can be used to select the line terminator(s) recognized. 

readlines(_hint =-1_, _/_)[¶](https://docs.python.org/3/library/io.html#io.IOBase.readlines "Link to this definition")
    
Read and return a list of lines from the stream. _hint_ can be specified to control the number of lines read: no more lines will be read if the total size (in bytes/characters) of all lines so far exceeds _hint_.
_hint_ values of `0` or less, as well as `None`, are treated as no hint.
Note that it’s already possible to iterate on file objects using `for line in file: ...` without calling `file.readlines()`. 

seek(_offset_ , _whence =os.SEEK_SET_, _/_)[¶](https://docs.python.org/3/library/io.html#io.IOBase.seek "Link to this definition")
    
Change the stream position to the given byte _offset_ , interpreted relative to the position indicated by _whence_ , and return the new absolute position. Values for _whence_ are:
  * [`os.SEEK_SET`](https://docs.python.org/3/library/os.html#os.SEEK_SET "os.SEEK_SET") or `0` – start of the stream (the default); _offset_ should be zero or positive
  * [`os.SEEK_CUR`](https://docs.python.org/3/library/os.html#os.SEEK_CUR "os.SEEK_CUR") or `1` – current stream position; _offset_ may be negative
  * [`os.SEEK_END`](https://docs.python.org/3/library/os.html#os.SEEK_END "os.SEEK_END") or `2` – end of the stream; _offset_ is usually negative


Added in version 3.1: The `SEEK_*` constants.
Added in version 3.3: Some operating systems could support additional values, like [`os.SEEK_HOLE`](https://docs.python.org/3/library/os.html#os.SEEK_HOLE "os.SEEK_HOLE") or [`os.SEEK_DATA`](https://docs.python.org/3/library/os.html#os.SEEK_DATA "os.SEEK_DATA"). The valid values for a file could depend on it being open in text or binary mode. 

seekable()[¶](https://docs.python.org/3/library/io.html#io.IOBase.seekable "Link to this definition")
    
Return `True` if the stream supports random access. If `False`, [`seek()`](https://docs.python.org/3/library/io.html#io.IOBase.seek "io.IOBase.seek"), [`tell()`](https://docs.python.org/3/library/io.html#io.IOBase.tell "io.IOBase.tell") and [`truncate()`](https://docs.python.org/3/library/io.html#io.IOBase.truncate "io.IOBase.truncate") will raise [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError"). 

tell()[¶](https://docs.python.org/3/library/io.html#io.IOBase.tell "Link to this definition")
    
Return the current stream position.