Title: Warning on Implementing tp_traverse in Python C API
URL: https://docs.python.org/3/c-api/typeobj.html
Summary: When implementing the tp_traverse function, only visit members owned by the instance with strong references. Weak references in the tp_weaklist should not be visited, as the instance does not own them. Additionally, the use of Py_VISIT is mentioned regarding its parameters.
---

```

Warning
When implementing [`tp_traverse`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_traverse "PyTypeObject.tp_traverse"), only the members that the instance _owns_ (by having [strong references](https://docs.python.org/3/glossary.html#term-strong-reference) to them) must be visited. For instance, if an object supports weak references via the [`tp_weaklist`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_weaklist "PyTypeObject.tp_weaklist") slot, the pointer supporting the linked list (what _tp_weaklist_ points to) must **not** be visited as the instance does not directly own the weak references to itself (the weakreference list is there to support the weak reference machinery, but the instance has no strong reference to the elements inside it, as they are allowed to be removed even if the instance is still alive).
Note that [`Py_VISIT()`](https://docs.python.org/3/c-api/gcsupport.html#c.Py_VISIT "Py_VISIT") requires the _visit_ and _arg_ parameters to `local_traverse()` to have these specific names; don’t name them just anything.
Instances of [heap-allocated types](https://docs.python.org/3/c-api/typeobj.html#heap-types) hold a reference to their type. Their traversal function must therefore either visit [`Py_TYPE(self)`](https://docs.python.org/3/c-api/structures.html#c.Py_TYPE "Py_TYPE"), or delegate this responsibility by calling `tp_traverse` of another heap-allocated type (such as a heap-allocated superclass). If they do not, the type object may not be garbage-collected.
Changed in version 3.9: Heap-allocated types are expected to visit `Py_TYPE(self)` in `tp_traverse`. In earlier versions of Python, due to [bug 40217](https://bugs.python.org/issue40217), doing this may lead to crashes in subclasses.
**Inheritance:**
Group: [`Py_TPFLAGS_HAVE_GC`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_HAVE_GC "Py_TPFLAGS_HAVE_GC"), [`tp_traverse`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_traverse "PyTypeObject.tp_traverse"), [`tp_clear`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_clear "PyTypeObject.tp_clear")
This field is inherited by subtypes together with [`tp_clear`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_clear "PyTypeObject.tp_clear") and the [`Py_TPFLAGS_HAVE_GC`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_HAVE_GC "Py_TPFLAGS_HAVE_GC") flag bit: the flag bit, [`tp_traverse`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_traverse "PyTypeObject.tp_traverse"), and [`tp_clear`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_clear "PyTypeObject.tp_clear") are all inherited from the base type if they are all zero in the subtype. 

[inquiry](https://docs.python.org/3/c-api/gcsupport.html#c.inquiry "inquiry")[PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject").tp_clear[¶](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_clear "Link to this definition")
    
An optional pointer to a clear function for the garbage collector. This is only used if the [`Py_TPFLAGS_HAVE_GC`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_HAVE_GC "Py_TPFLAGS_HAVE_GC") flag bit is set. The signature is:
```
inttp_clear(PyObject*);

```

The [`tp_clear`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_clear "PyTypeObject.tp_clear") member function is used to break reference cycles in cyclic garbage detected by the garbage collector. Taken together, all [`tp_clear`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_clear "PyTypeObject.tp_clear") functions in the system must combine to break all reference cycles. This is subtle, and if in any doubt supply a [`tp_clear`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_clear "PyTypeObject.tp_clear") function. For example, the tuple type does not implement a [`tp_clear`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_clear "PyTypeObject.tp_clear") function, because it’s possible to prove that no reference cycle can be composed entirely of tuples. Therefore the [`tp_clear`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_clear "PyTypeObject.tp_clear") functions of other types must be sufficient to break any cycle containing a tuple. This isn’t immediately obvious, and there’s rarely a good reason to avoid implementing [`tp_clear`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_clear "PyTypeObject.tp_clear").
Implementations of [`tp_clear`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_clear "PyTypeObject.tp_clear") should drop the instance’s references to those of its members that may be Python objects, and set its pointers to those members to `NULL`, as in the following example:
```
staticint
local_clear(localobject*self)
{
Py_CLEAR(self->key);
Py_CLEAR(self->args);
Py_CLEAR(self->kw);
Py_CLEAR(self->dict);
return0;
}