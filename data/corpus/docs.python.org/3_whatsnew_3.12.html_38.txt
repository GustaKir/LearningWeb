Title: Porting to Python 3.12
URL: https://docs.python.org/3/whatsnew/3.12.html
Summary: This section highlights significant changes and bug fixes in Python 3.12 that may affect code compatibility, including stricter rules for numerical group references in regular expressions and the removal of deprecated `randrange()` functionality.
---

## Porting to Python 3.12[¶](https://docs.python.org/3/whatsnew/3.12.html#porting-to-python-3-12 "Link to this heading")
This section lists previously described changes and other bugfixes that may require changes to your code.
### Changes in the Python API[¶](https://docs.python.org/3/whatsnew/3.12.html#changes-in-the-python-api "Link to this heading")
  * More strict rules are now applied for numerical group references and group names in regular expressions. Only sequence of ASCII digits is now accepted as a numerical reference. The group name in bytes patterns and replacement strings can now only contain ASCII letters and digits and underscore. (Contributed by Serhiy Storchaka in [gh-91760](https://github.com/python/cpython/issues/91760).)
  * Remove `randrange()` functionality deprecated since Python 3.10. Formerly, `randrange(10.0)` losslessly converted to `randrange(10)`. Now, it raises a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError"). Also, the exception raised for non-integer values such as `randrange(10.5)` or `randrange('10')` has been changed from [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") to [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError"). This also prevents bugs where `randrange(1e25)` would silently select from a larger range than `randrange(10**25)`. (Originally suggested by Serhiy Storchaka [gh-86388](https://github.com/python/cpython/issues/86388).)
  * [`argparse.ArgumentParser`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser "argparse.ArgumentParser") changed encoding and error handler for reading arguments from file (e.g. `fromfile_prefix_chars` option) from default text encoding (e.g. [`locale.getpreferredencoding(False)`](https://docs.python.org/3/library/locale.html#locale.getpreferredencoding "locale.getpreferredencoding")) to [filesystem encoding and error handler](https://docs.python.org/3/glossary.html#term-filesystem-encoding-and-error-handler). Argument files should be encoded in UTF-8 instead of ANSI Codepage on Windows.
  * Remove the `asyncore`-based `smtpd` module deprecated in Python 3.4.7 and 3.5.4. A recommended replacement is the [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O.")-based [aiosmtpd](https://pypi.org/project/aiosmtpd/) PyPI module.
  * [`shlex.split()`](https://docs.python.org/3/library/shlex.html#shlex.split "shlex.split"): Passing `None` for _s_ argument now raises an exception, rather than reading [`sys.stdin`](https://docs.python.org/3/library/sys.html#sys.stdin "sys.stdin"). The feature was deprecated in Python 3.9. (Contributed by Victor Stinner in [gh-94352](https://github.com/python/cpython/issues/94352).)
  * The [`os`](https://docs.python.org/3/library/os.html#module-os "os: Miscellaneous operating system interfaces.") module no longer accepts bytes-like paths, like [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") and [`memoryview`](https://docs.python.org/3/library/stdtypes.html#memoryview "memoryview") types: only the exact [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") type is accepted for bytes strings. (Contributed by Victor Stinner in [gh-98393](https://github.com/python/cpython/issues/98393).)
  * [`syslog.openlog()`](https://docs.python.org/3/library/syslog.html#syslog.openlog "syslog.openlog") and [`syslog.closelog()`](https://docs.python.org/3/library/syslog.html#syslog.closelog "syslog.closelog") now fail if used in subinterpreters. [`syslog.syslog()`](https://docs.python.org/3/library/syslog.html#syslog.syslog "syslog.syslog") may still be used in subinterpreters, but now only if [`syslog.openlog()`](https://docs.python.org/3/library/syslog.html#syslog.openlog "syslog.openlog") has already been called in the main interpreter. These new restrictions do not apply to the main interpreter, so only a very small set of users might be affected. This change helps with interpreter isolation. Furthermore, [`syslog`](https://docs.python.org/3/library/syslog.html#module-syslog "syslog: An interface to the Unix syslog library routines. \(Unix\)") is a wrapper around process-global resources, which are best managed from the main interpreter. (Contributed by Donghee Na in [gh-99127](https://github.com/python/cpython/issues/99127).)
  * The undocumented locking behavior of [`cached_property()`](https://docs.python.org/3/library/functools.html#functools.cached_property "functools.cached_property") is removed, because it locked across all instances of the class, leading to high lock contention. This means that a cached property getter function could now run more than once for a single instance, if two threads race. For most simple cached properties (e.g. those that are idempotent and simply calculate a value based on other attributes of the instance) this will be fine. If synchronization is n