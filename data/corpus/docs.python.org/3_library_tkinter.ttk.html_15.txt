Title: Customizing Tkinter Themes with Ttk
URL: https://docs.python.org/3/library/tkinter.ttk.html
Summary: This document demonstrates how to customize the appearance of a Tkinter application using Ttk styles. It provides an example of setting up a default theme and configuring the TCombobox widget with specific padding and color properties based on its state. It also includes function definitions for retrieving and setting themes in the Ttk framework.
---

```
fromtkinterimport ttk
importtkinter
root = tkinter.Tk()
style = ttk.Style()
style.theme_settings("default", {
  "TCombobox": {
    "configure": {"padding": 5},
    "map": {
      "background": [("active", "green2"),
             ("!disabled", "green4")],
      "fieldbackground": [("!disabled", "green3")],
      "foreground": [("focus", "OliveDrab1"),
             ("!disabled", "OliveDrab2")]
    }
  }
})
combo = ttk.Combobox().pack()
root.mainloop()

```


theme_names()[¶](https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Style.theme_names "Link to this definition")
    
Returns a list of all known themes. 

theme_use(_themename =None_)[¶](https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Style.theme_use "Link to this definition")
    
If _themename_ is not given, returns the theme in use. Otherwise, sets the current theme to _themename_ , refreshes all widgets and emits a <<ThemeChanged>> event.
### Layouts[¶](https://docs.python.org/3/library/tkinter.ttk.html#layouts "Link to this heading")
A layout can be just `None`, if it takes no options, or a dict of options specifying how to arrange the element. The layout mechanism uses a simplified version of the pack geometry manager: given an initial cavity, each element is allocated a parcel.
The valid options/values are: 

_side_ : whichside
    
Specifies which side of the cavity to place the element; one of top, right, bottom or left. If omitted, the element occupies the entire cavity. 

_sticky_ : nswe
    
Specifies where the element is placed inside its allocated parcel. 

_unit_ : 0 or 1
    
If set to 1, causes the element and all of its descendants to be treated as a single element for the purposes of [`Widget.identify()`](https://docs.python.org/3/library/tkinter.ttk.html#tkinter.ttk.Widget.identify "tkinter.ttk.Widget.identify") et al. It’s used for things like scrollbar thumbs with grips.