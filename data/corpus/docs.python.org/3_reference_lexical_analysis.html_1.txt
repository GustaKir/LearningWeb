Title: Lexical Analysis in Python
URL: https://docs.python.org/3/reference/lexical_analysis.html
Summary: This section discusses Python's lexical analysis, which involves reading program text as Unicode code points and breaking it into tokens via a lexical analyzer. It mentions encoding declarations, the default encoding (UTF-8), and how decoding issues can lead to a SyntaxError.
---

# 2. Lexical analysis[¶](https://docs.python.org/3/reference/lexical_analysis.html#lexical-analysis "Link to this heading")
A Python program is read by a _parser_. Input to the parser is a stream of [tokens](https://docs.python.org/3/glossary.html#term-token), generated by the _lexical analyzer_ (also known as the _tokenizer_). This chapter describes how the lexical analyzer breaks a file into tokens.
Python reads program text as Unicode code points; the encoding of a source file can be given by an encoding declaration and defaults to UTF-8, see [**PEP 3120**](https://peps.python.org/pep-3120/) for details. If the source file cannot be decoded, a [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") is raised.
## 2.1. Line structure[¶](https://docs.python.org/3/reference/lexical_analysis.html#line-structure "Link to this heading")
A Python program is divided into a number of _logical lines_.
### 2.1.1. Logical lines[¶](https://docs.python.org/3/reference/lexical_analysis.html#logical-lines "Link to this heading")
The end of a logical line is represented by the token NEWLINE. Statements cannot cross logical line boundaries except where NEWLINE is allowed by the syntax (e.g., between statements in compound statements). A logical line is constructed from one or more _physical lines_ by following the explicit or implicit _line joining_ rules.
### 2.1.2. Physical lines[¶](https://docs.python.org/3/reference/lexical_analysis.html#physical-lines "Link to this heading")
A physical line is a sequence of characters terminated by an end-of-line sequence. In source files and strings, any of the standard platform line termination sequences can be used - the Unix form using ASCII LF (linefeed), the Windows form using the ASCII sequence CR LF (return followed by linefeed), or the old Macintosh form using the ASCII CR (return) character. All of these forms can be used equally, regardless of platform. The end of input also serves as an implicit terminator for the final physical line.
When embedding Python, source code strings should be passed to Python APIs using the standard C conventions for newline characters (the `\n` character, representing ASCII LF, is the line terminator).
### 2.1.3. Comments[¶](https://docs.python.org/3/reference/lexical_analysis.html#comments "Link to this heading")
A comment starts with a hash character (`#`) that is not part of a string literal, and ends at the end of the physical line. A comment signifies the end of the logical line unless the implicit line joining rules are invoked. Comments are ignored by the syntax.
### 2.1.4. Encoding declarations[¶](https://docs.python.org/3/reference/lexical_analysis.html#encoding-declarations "Link to this heading")
If a comment in the first or second line of the Python script matches the regular expression `coding[=:]\s*([-\w.]+)`, this comment is processed as an encoding declaration; the first group of this expression names the encoding of the source code file. The encoding declaration must appear on a line of its own. If it is the second line, the first line must also be a comment-only line. The recommended forms of an encoding expression are
```
# -*- coding: <encoding-name> -*-

```

which is recognized also by GNU Emacs, and
```
# vim:fileencoding=<encoding-name>

```

which is recognized by Bram Moolenaar’s VIM.
If no encoding declaration is found, the default encoding is UTF-8. If the implicit or explicit encoding of a file is UTF-8, an initial UTF-8 byte-order mark (b’xefxbbxbf’) is ignored rather than being a syntax error.
If an encoding is declared, the encoding name must be recognized by Python (see [Standard Encodings](https://docs.python.org/3/library/codecs.html#standard-encodings)). The encoding is used for all lexical analysis, including string literals, comments and identifiers.
### 2.1.5. Explicit line joining[¶](https://docs.python.org/3/reference/lexical_analysis.html#explicit-line-joining "Link to this heading")
Two or more physical lines may be joined into logical lines using backslash characters (`\`), as follows: when a physical line ends in a backslash that is not part of a string literal or comment, it is joined with the following forming a single logical line, deleting the backslash and the following end-of-line character. For example:
```
if 1900 < year < 2100 and 1 <= month <= 12 \
  and 1 <= day <= 31 and 0 <= hour < 24 \
  and 0 <= minute < 60 and 0 <= second < 60:  # Looks like a valid date
    return 1