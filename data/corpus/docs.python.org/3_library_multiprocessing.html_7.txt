Title: Multiprocessing Module Overview
URL: https://docs.python.org/3/library/multiprocessing.html
Summary: The `multiprocessing` package provides a process-based parallelism API that mirrors the `threading` module. It allows for concurrent execution of processes and handles various exceptions that may arise during operation.
---

```

(If you try this it will actually output three full tracebacks interleaved in a semi-random fashion, and then you may have to stop the parent process somehow.)
## Reference[¶](https://docs.python.org/3/library/multiprocessing.html#reference "Link to this heading")
The [`multiprocessing`](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing "multiprocessing: Process-based parallelism.") package mostly replicates the API of the [`threading`](https://docs.python.org/3/library/threading.html#module-threading "threading: Thread-based parallelism.") module.
### [`Process`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process "multiprocessing.Process") and exceptions[¶](https://docs.python.org/3/library/multiprocessing.html#process-and-exceptions "Link to this heading") 

_class_ multiprocessing.Process(_group =None_, _target =None_, _name =None_, _args =()_, _kwargs ={}_, _*_ , _daemon =None_)[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process "Link to this definition")
    
Process objects represent activity that is run in a separate process. The [`Process`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process "multiprocessing.Process") class has equivalents of all the methods of [`threading.Thread`](https://docs.python.org/3/library/threading.html#threading.Thread "threading.Thread").
The constructor should always be called with keyword arguments. _group_ should always be `None`; it exists solely for compatibility with [`threading.Thread`](https://docs.python.org/3/library/threading.html#threading.Thread "threading.Thread"). _target_ is the callable object to be invoked by the [`run()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.run "multiprocessing.Process.run") method. It defaults to `None`, meaning nothing is called. _name_ is the process name (see [`name`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.name "multiprocessing.Process.name") for more details). _args_ is the argument tuple for the target invocation. _kwargs_ is a dictionary of keyword arguments for the target invocation. If provided, the keyword-only _daemon_ argument sets the process [`daemon`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.daemon "multiprocessing.Process.daemon") flag to `True` or `False`. If `None` (the default), this flag will be inherited from the creating process.
By default, no arguments are passed to _target_. The _args_ argument, which defaults to `()`, can be used to specify a list or tuple of the arguments to pass to _target_.
If a subclass overrides the constructor, it must make sure it invokes the base class constructor (`Process.__init__()`) before doing anything else to the process.
Changed in version 3.3: Added the _daemon_ parameter. 

run()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.run "Link to this definition")
    
Method representing the process’s activity.
You may override this method in a subclass. The standard [`run()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.run "multiprocessing.Process.run") method invokes the callable object passed to the object’s constructor as the target argument, if any, with sequential and keyword arguments taken from the _args_ and _kwargs_ arguments, respectively.
Using a list or tuple as the _args_ argument passed to [`Process`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process "multiprocessing.Process") achieves the same effect.
Example:
>>>```
>>> frommultiprocessingimport Process
>>> p = Process(target=print, args=[1])
>>> p.run()
1
>>> p = Process(target=print, args=(1,))
>>> p.run()
1