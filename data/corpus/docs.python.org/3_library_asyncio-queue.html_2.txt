Title: task_done() Method in asyncio.Queue
URL: https://docs.python.org/3/library/asyncio-queue.html
Summary: The task_done() method signals that a previously enqueued work item has been completed. It is used by consumers of the queue; after calling get() to retrieve a work item, task_done() indicates the completion of that work. If join() is blocking, it will only resume once all items have been processed and task_done() has been called for each item that was put into the queue.
---

task_done()[¶](https://docs.python.org/3/library/asyncio-queue.html#asyncio.Queue.task_done "Link to this definition")
    
Indicate that a formerly enqueued work item is complete.
Used by queue consumers. For each [`get()`](https://docs.python.org/3/library/asyncio-queue.html#asyncio.Queue.get "asyncio.Queue.get") used to fetch a work item, a subsequent call to [`task_done()`](https://docs.python.org/3/library/asyncio-queue.html#asyncio.Queue.task_done "asyncio.Queue.task_done") tells the queue that the processing on the work item is complete.
If a [`join()`](https://docs.python.org/3/library/asyncio-queue.html#asyncio.Queue.join "asyncio.Queue.join") is currently blocking, it will resume when all items have been processed (meaning that a [`task_done()`](https://docs.python.org/3/library/asyncio-queue.html#asyncio.Queue.task_done "asyncio.Queue.task_done") call was received for every item that had been [`put()`](https://docs.python.org/3/library/asyncio-queue.html#asyncio.Queue.put "asyncio.Queue.put") into the queue).
`shutdown(immediate=True)` calls [`task_done()`](https://docs.python.org/3/library/asyncio-queue.html#asyncio.Queue.task_done "asyncio.Queue.task_done") for each remaining item in the queue.
Raises [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if called more times than there were items placed in the queue.
## Priority Queue[¶](https://docs.python.org/3/library/asyncio-queue.html#priority-queue "Link to this heading") 

_class_ asyncio.PriorityQueue[¶](https://docs.python.org/3/library/asyncio-queue.html#asyncio.PriorityQueue "Link to this definition")
    
A variant of [`Queue`](https://docs.python.org/3/library/asyncio-queue.html#asyncio.Queue "asyncio.Queue"); retrieves entries in priority order (lowest first).
Entries are typically tuples of the form `(priority_number, data)`.
## LIFO Queue[¶](https://docs.python.org/3/library/asyncio-queue.html#lifo-queue "Link to this heading") 

_class_ asyncio.LifoQueue[¶](https://docs.python.org/3/library/asyncio-queue.html#asyncio.LifoQueue "Link to this definition")
    
A variant of [`Queue`](https://docs.python.org/3/library/asyncio-queue.html#asyncio.Queue "asyncio.Queue") that retrieves most recently added entries first (last in, first out).
## Exceptions[¶](https://docs.python.org/3/library/asyncio-queue.html#exceptions "Link to this heading") 

_exception_ asyncio.QueueEmpty[¶](https://docs.python.org/3/library/asyncio-queue.html#asyncio.QueueEmpty "Link to this definition")
    
This exception is raised when the [`get_nowait()`](https://docs.python.org/3/library/asyncio-queue.html#asyncio.Queue.get_nowait "asyncio.Queue.get_nowait") method is called on an empty queue. 

_exception_ asyncio.QueueFull[¶](https://docs.python.org/3/library/asyncio-queue.html#asyncio.QueueFull "Link to this definition")
    
Exception raised when the [`put_nowait()`](https://docs.python.org/3/library/asyncio-queue.html#asyncio.Queue.put_nowait "asyncio.Queue.put_nowait") method is called on a queue that has reached its _maxsize_. 

_exception_ asyncio.QueueShutDown[¶](https://docs.python.org/3/library/asyncio-queue.html#asyncio.QueueShutDown "Link to this definition")
    
Exception raised when [`put()`](https://docs.python.org/3/library/asyncio-queue.html#asyncio.Queue.put "asyncio.Queue.put") or [`get()`](https://docs.python.org/3/library/asyncio-queue.html#asyncio.Queue.get "asyncio.Queue.get") is called on a queue which has been shut down.
Added in version 3.13.
## Examples[¶](https://docs.python.org/3/library/asyncio-queue.html#examples "Link to this heading")
Queues can be used to distribute workload between several concurrent tasks: