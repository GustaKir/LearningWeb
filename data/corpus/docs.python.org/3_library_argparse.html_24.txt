Title: Printing Help in argparse
URL: https://docs.python.org/3/library/argparse.html
Summary: This section explains how to print help and usage messages when using the argparse module in Python. It highlights that the `parse_args()` function automatically handles formatting and suggests several methods for formatting, including `print_usage()` for a brief description of command-line usage and `print_help()` for more detailed help instructions.
---

```

### Printing help[¶](https://docs.python.org/3/library/argparse.html#printing-help "Link to this heading")
In most typical applications, [`parse_args()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.parse_args "argparse.ArgumentParser.parse_args") will take care of formatting and printing any usage or error messages. However, several formatting methods are available: 

ArgumentParser.print_usage(_file =None_)[¶](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.print_usage "Link to this definition")
    
Print a brief description of how the [`ArgumentParser`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser "argparse.ArgumentParser") should be invoked on the command line. If _file_ is `None`, [`sys.stdout`](https://docs.python.org/3/library/sys.html#sys.stdout "sys.stdout") is assumed. 

ArgumentParser.print_help(_file =None_)[¶](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.print_help "Link to this definition")
    
Print a help message, including the program usage and information about the arguments registered with the [`ArgumentParser`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser "argparse.ArgumentParser"). If _file_ is `None`, [`sys.stdout`](https://docs.python.org/3/library/sys.html#sys.stdout "sys.stdout") is assumed.
There are also variants of these methods that simply return a string instead of printing it: 

ArgumentParser.format_usage()[¶](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.format_usage "Link to this definition")
    
Return a string containing a brief description of how the [`ArgumentParser`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser "argparse.ArgumentParser") should be invoked on the command line. 

ArgumentParser.format_help()[¶](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.format_help "Link to this definition")
    
Return a string containing a help message, including the program usage and information about the arguments registered with the [`ArgumentParser`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser "argparse.ArgumentParser").
### Partial parsing[¶](https://docs.python.org/3/library/argparse.html#partial-parsing "Link to this heading") 

ArgumentParser.parse_known_args(_args =None_, _namespace =None_)[¶](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.parse_known_args "Link to this definition")
    
Sometimes a script may only parse a few of the command-line arguments, passing the remaining arguments on to another script or program. In these cases, the [`parse_known_args()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.parse_known_args "argparse.ArgumentParser.parse_known_args") method can be useful. It works much like [`parse_args()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.parse_args "argparse.ArgumentParser.parse_args") except that it does not produce an error when extra arguments are present. Instead, it returns a two item tuple containing the populated namespace and the list of remaining argument strings.
>>>```
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('--foo', action='store_true')
>>> parser.add_argument('bar')
>>> parser.parse_known_args(['--foo', '--badger', 'BAR', 'spam'])
(Namespace(bar='BAR', foo=True), ['--badger', 'spam'])