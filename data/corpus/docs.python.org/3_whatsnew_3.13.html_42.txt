Title: New Functions for Optional Attribute Access in Python 3.13
URL: https://docs.python.org/3/whatsnew/3.13.html
Summary: Python 3.13 introduces `PyObject_GetOptionalAttr()` and `PyObject_GetOptionalAttrString()` as alternatives to `PyObject_GetAttr()` and `PyObject_GetAttrString()`. These new functions do not raise an `AttributeError` if an attribute is not found, making them more convenient and faster for cases where the absence of an attribute is not considered a failure.
---

(Contributed by Serhiy Storchaka in [gh-106307](https://github.com/python/cpython/issues/106307).)
  * Add the [`PyObject_GetOptionalAttr()`](https://docs.python.org/3/c-api/object.html#c.PyObject_GetOptionalAttr "PyObject_GetOptionalAttr") and [`PyObject_GetOptionalAttrString()`](https://docs.python.org/3/c-api/object.html#c.PyObject_GetOptionalAttrString "PyObject_GetOptionalAttrString") functions as alternatives to [`PyObject_GetAttr()`](https://docs.python.org/3/c-api/object.html#c.PyObject_GetAttr "PyObject_GetAttr") and [`PyObject_GetAttrString()`](https://docs.python.org/3/c-api/object.html#c.PyObject_GetAttrString "PyObject_GetAttrString") respectively. The new functions do not raise [`AttributeError`](https://docs.python.org/3/library/exceptions.html#AttributeError "AttributeError") if the requested attribute is not found on the object. These variants are more convenient and faster if the missing attribute should not be treated as a failure. (Contributed by Serhiy Storchaka in [gh-106521](https://github.com/python/cpython/issues/106521).)
  * Add the [`PyErr_FormatUnraisable()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_FormatUnraisable "PyErr_FormatUnraisable") function as an extension to [`PyErr_WriteUnraisable()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_WriteUnraisable "PyErr_WriteUnraisable") that allows customizing the warning message. (Contributed by Serhiy Storchaka in [gh-108082](https://github.com/python/cpython/issues/108082).)
  * Add new functions that return a [strong reference](https://docs.python.org/3/glossary.html#term-strong-reference) instead of a [borrowed reference](https://docs.python.org/3/glossary.html#term-borrowed-reference) for frame locals, globals, and builtins, as part of [PEP 667](https://docs.python.org/3/whatsnew/3.13.html#whatsnew313-locals-semantics):
    * [`PyEval_GetFrameBuiltins()`](https://docs.python.org/3/c-api/reflection.html#c.PyEval_GetFrameBuiltins "PyEval_GetFrameBuiltins") replaces [`PyEval_GetBuiltins()`](https://docs.python.org/3/c-api/reflection.html#c.PyEval_GetBuiltins "PyEval_GetBuiltins")
    * [`PyEval_GetFrameGlobals()`](https://docs.python.org/3/c-api/reflection.html#c.PyEval_GetFrameGlobals "PyEval_GetFrameGlobals") replaces [`PyEval_GetGlobals()`](https://docs.python.org/3/c-api/reflection.html#c.PyEval_GetGlobals "PyEval_GetGlobals")
    * [`PyEval_GetFrameLocals()`](https://docs.python.org/3/c-api/reflection.html#c.PyEval_GetFrameLocals "PyEval_GetFrameLocals") replaces [`PyEval_GetLocals()`](https://docs.python.org/3/c-api/reflection.html#c.PyEval_GetLocals "PyEval_GetLocals")
(Contributed by Mark Shannon and Tian Gao in [gh-74929](https://github.com/python/cpython/issues/74929).)
  * Add the [`Py_GetConstant()`](https://docs.python.org/3/c-api/object.html#c.Py_GetConstant "Py_GetConstant") and [`Py_GetConstantBorrowed()`](https://docs.python.org/3/c-api/object.html#c.Py_GetConstantBorrowed "Py_GetConstantBorrowed") functions to get [strong](https://docs.python.org/3/glossary.html#term-strong-reference) or [borrowed](https://docs.python.org/3/glossary.html#term-borrowed-reference) references to constants. For example, `Py_GetConstant(Py_CONSTANT_ZERO)` returns a strong reference to the constant zero. (Contributed by Victor Stinner in [gh-115754](https://github.com/python/cpython/issues/115754).)
  * Add the [`PyImport_AddModuleRef()`](https://docs.python.org/3/c-api/import.html#c.PyImport_AddModuleRef "PyImport_AddModuleRef") function as a replacement for [`PyImport_AddModule()`](https://docs.python.org/3/c-api/import.html#c.PyImport_AddModule "PyImport_AddModule") that returns a [strong reference](https://docs.python.org/3/glossary.html#term-strong-reference) instead of a [borrowed reference](https://docs.python.org/3/glossary.html#term-borrowed-reference). (Contributed by Victor Stinner in [gh-105922](https://github.com/python/cpython/issues/105922).)
  * Add the [`Py_IsFinalizing()`](https://docs.python.org/3/c-api/init.html#c.Py_IsFinalizing "Py_IsFinalizing") function to check whether the main Python interpreter is [shutting down](https://docs.python.org/3/glossary.html#term-interpreter-shutdown). (Contributed by Victor Stinner in [gh-108014](https://github.com/python/cpython/issues/108014).)
  * Add the [`PyList_GetItemRef()`](https://docs.python.org/3/c-api/list.html#c.PyList_GetItemRef "PyList_GetItemRef") function as a replacement for [`PyList_GetItem()`](https://docs.python.org/3/c-api/list.html#c.PyList_GetItem "PyList_GetItem") that returns a [strong reference](https://docs.python.org/3/glossary.html#term-strong-reference) instead of a [borrowed reference](https://docs.python.org/3/glossary.html#term-borrowed-reference).