Title: Public Names and Importing in Python Modules
URL: https://docs.python.org/3/reference/simple_stmts.html
Summary: This section explains how to use the wildcard import statement in Python, specifically `from module import *`. It details how public names are determined within a module, primarily through the `__all__` variable, which dictates what names will be imported. If `__all__` is not defined, all names not starting with an underscore are considered public. This mechanism helps ensure that only intended components are exported from a module's API.
---

```

If the list of identifiers is replaced by a star (`'*'`), all public names defined in the module are bound in the local namespace for the scope where the [`import`](https://docs.python.org/3/reference/simple_stmts.html#import) statement occurs.
The _public names_ defined by a module are determined by checking the module’s namespace for a variable named `__all__`; if defined, it must be a sequence of strings which are names defined or imported by that module. The names given in `__all__` are all considered public and are required to exist. If `__all__` is not defined, the set of public names includes all names found in the module’s namespace which do not begin with an underscore character (`'_'`). `__all__` should contain the entire public API. It is intended to avoid accidentally exporting items that are not part of the API (such as library modules which were imported and used within the module).
The wild card form of import — `from module import *` — is only allowed at the module level. Attempting to use it in class or function definitions will raise a [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError").
When specifying what module to import you do not have to specify the absolute name of the module. When a module or package is contained within another package it is possible to make a relative import within the same top package without having to mention the package name. By using leading dots in the specified module or package after [`from`](https://docs.python.org/3/reference/simple_stmts.html#from) you can specify how high to traverse up the current package hierarchy without specifying exact names. One leading dot means the current package where the module making the import exists. Two dots means up one package level. Three dots is up two levels, etc. So if you execute `from . import mod` from a module in the `pkg` package then you will end up importing `pkg.mod`. If you execute `from ..subpkg2 import mod` from within `pkg.subpkg1` you will import `pkg.subpkg2.mod`. The specification for relative imports is contained in the [Package Relative Imports](https://docs.python.org/3/reference/import.html#relativeimports) section.
[`importlib.import_module()`](https://docs.python.org/3/library/importlib.html#importlib.import_module "importlib.import_module") is provided to support applications that determine dynamically the modules to be loaded.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `import` with arguments `module`, `filename`, `sys.path`, `sys.meta_path`, `sys.path_hooks`.
### 7.11.1. Future statements[¶](https://docs.python.org/3/reference/simple_stmts.html#future-statements "Link to this heading")
A _future statement_ is a directive to the compiler that a particular module should be compiled using syntax or semantics that will be available in a specified future release of Python where the feature becomes standard.
The future statement is intended to ease migration to future versions of Python that introduce incompatible changes to the language. It allows use of the new features on a per-module basis before the release in which the feature becomes standard.
```
**future_stmt** ::= "from" "__future__" "import" [feature](https://docs.python.org/3/reference/simple_stmts.html#grammar-token-python-grammar-feature) ["as" [identifier](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-identifier)]
        ("," [feature](https://docs.python.org/3/reference/simple_stmts.html#grammar-token-python-grammar-feature) ["as" [identifier](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-identifier)])*
        | "from" "__future__" "import" "(" [feature](https://docs.python.org/3/reference/simple_stmts.html#grammar-token-python-grammar-feature) ["as" [identifier](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-identifier)]
        ("," [feature](https://docs.python.org/3/reference/simple_stmts.html#grammar-token-python-grammar-feature) ["as" [identifier](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-identifier)])* [","] ")"
**feature**   ::= [identifier](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-identifier)