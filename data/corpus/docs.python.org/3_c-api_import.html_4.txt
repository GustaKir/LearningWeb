Title: PyImport Functions
URL: https://docs.python.org/3/c-api/import.html
Summary: This section covers the PyImport_GetModule and PyImport_GetImporter functions in the Python C API. PyImport_GetModule retrieves an already imported module by name, returning NULL if it hasn't been imported or if the lookup fails. PyImport_GetImporter is also introduced, although details are truncated.
---

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyImport_GetModule([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*name)[¶](https://docs.python.org/3/c-api/import.html#c.PyImport_GetModule "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.8._
Return the already imported module with the given name. If the module has not been imported yet then returns `NULL` but does not set an error. Returns `NULL` and sets an error if the lookup failed.
Added in version 3.7. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyImport_GetImporter([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*path)[¶](https://docs.python.org/3/c-api/import.html#c.PyImport_GetImporter "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return a finder object for a [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path")/`pkg.__path__` item _path_ , possibly by fetching it from the [`sys.path_importer_cache`](https://docs.python.org/3/library/sys.html#sys.path_importer_cache "sys.path_importer_cache") dict. If it wasn’t yet cached, traverse [`sys.path_hooks`](https://docs.python.org/3/library/sys.html#sys.path_hooks "sys.path_hooks") until a hook is found that can handle the path item. Return `None` if no hook could; this tells our caller that the [path based finder](https://docs.python.org/3/glossary.html#term-path-based-finder) could not find a finder for this path item. Cache the result in [`sys.path_importer_cache`](https://docs.python.org/3/library/sys.html#sys.path_importer_cache "sys.path_importer_cache"). Return a new reference to the finder object. 

intPyImport_ImportFrozenModuleObject([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*name)[¶](https://docs.python.org/3/c-api/import.html#c.PyImport_ImportFrozenModuleObject "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.7._
Load a frozen module named _name_. Return `1` for success, `0` if the module is not found, and `-1` with an exception set if the initialization failed. To access the imported module on a successful load, use [`PyImport_ImportModule()`](https://docs.python.org/3/c-api/import.html#c.PyImport_ImportModule "PyImport_ImportModule"). (Note the misnomer — this function would reload the module if it was already imported.)
Added in version 3.3.
Changed in version 3.4: The `__file__` attribute is no longer set on the module. 

intPyImport_ImportFrozenModule(constchar*name)[¶](https://docs.python.org/3/c-api/import.html#c.PyImport_ImportFrozenModule "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Similar to [`PyImport_ImportFrozenModuleObject()`](https://docs.python.org/3/c-api/import.html#c.PyImport_ImportFrozenModuleObject "PyImport_ImportFrozenModuleObject"), but the name is a UTF-8 encoded string instead of a Unicode object. 

struct_frozen[¶](https://docs.python.org/3/c-api/import.html#c._frozen "Link to this definition")
    
This is the structure type definition for frozen module descriptors, as generated by the **freeze** utility (see `Tools/freeze/` in the Python source distribution). Its definition, found in `Include/import.h`, is:
```
struct_frozen{
constchar*name;
constunsignedchar*code;
intsize;
boolis_package;
};