Title: Creating Normal Distribution from Samples
URL: https://docs.python.org/3/library/statistics.html
Summary: The `from_samples` class method creates a normal distribution instance by estimating the mean (_mu_) and standard deviation (_sigma_) from the provided data using `fmean()` and `stdev()`. The input data must be an iterable that can be converted to floats, and it must contain at least two elements; otherwise, a `StatisticsError` is raised.
---

_classmethod_ from_samples(_data_)[¶](https://docs.python.org/3/library/statistics.html#statistics.NormalDist.from_samples "Link to this definition")
    
Makes a normal distribution instance with _mu_ and _sigma_ parameters estimated from the _data_ using [`fmean()`](https://docs.python.org/3/library/statistics.html#statistics.fmean "statistics.fmean") and [`stdev()`](https://docs.python.org/3/library/statistics.html#statistics.stdev "statistics.stdev").
The _data_ can be any [iterable](https://docs.python.org/3/glossary.html#term-iterable) and should consist of values that can be converted to type [`float`](https://docs.python.org/3/library/functions.html#float "float"). If _data_ does not contain at least two elements, raises [`StatisticsError`](https://docs.python.org/3/library/statistics.html#statistics.StatisticsError "statistics.StatisticsError") because it takes at least one point to estimate a central value and at least two points to estimate dispersion. 

samples(_n_ , _*_ , _seed =None_)[¶](https://docs.python.org/3/library/statistics.html#statistics.NormalDist.samples "Link to this definition")
    
Generates _n_ random samples for a given mean and standard deviation. Returns a [`list`](https://docs.python.org/3/library/stdtypes.html#list "list") of [`float`](https://docs.python.org/3/library/functions.html#float "float") values.
If _seed_ is given, creates a new instance of the underlying random number generator. This is useful for creating reproducible results, even in a multi-threading context.
Changed in version 3.13.
Switched to a faster algorithm. To reproduce samples from previous versions, use [`random.seed()`](https://docs.python.org/3/library/random.html#random.seed "random.seed") and [`random.gauss()`](https://docs.python.org/3/library/random.html#random.gauss "random.gauss"). 

pdf(_x_)[¶](https://docs.python.org/3/library/statistics.html#statistics.NormalDist.pdf "Link to this definition")
    
Using a [probability density function (pdf)](https://en.wikipedia.org/wiki/Probability_density_function), compute the relative likelihood that a random variable _X_ will be near the given value _x_. Mathematically, it is the limit of the ratio `P(x <= X < x+dx) / dx` as _dx_ approaches zero.
The relative likelihood is computed as the probability of a sample occurring in a narrow range divided by the width of the range (hence the word “density”). Since the likelihood is relative to other points, its value can be greater than `1.0`. 

cdf(_x_)[¶](https://docs.python.org/3/library/statistics.html#statistics.NormalDist.cdf "Link to this definition")
    
Using a [cumulative distribution function (cdf)](https://en.wikipedia.org/wiki/Cumulative_distribution_function), compute the probability that a random variable _X_ will be less than or equal to _x_. Mathematically, it is written `P(X <= x)`. 

inv_cdf(_p_)[¶](https://docs.python.org/3/library/statistics.html#statistics.NormalDist.inv_cdf "Link to this definition")
    
Compute the inverse cumulative distribution function, also known as the [quantile function](https://en.wikipedia.org/wiki/Quantile_function) or the [percent-point](https://web.archive.org/web/20190203145224/https://www.statisticshowto.datasciencecentral.com/inverse-distribution-function/) function. Mathematically, it is written `x : P(X <= x) = p`.
Finds the value _x_ of the random variable _X_ such that the probability of the variable being less than or equal to that value equals the given probability _p_. 

overlap(_other_)[¶](https://docs.python.org/3/library/statistics.html#statistics.NormalDist.overlap "Link to this definition")
    
Measures the agreement between two normal probability distributions. Returns a value between 0.0 and 1.0 giving [the overlapping area for the two probability density functions](https://www.rasch.org/rmt/rmt101r.htm). 

quantiles(_n =4_)[¶](https://docs.python.org/3/library/statistics.html#statistics.NormalDist.quantiles "Link to this definition")
    
Divide the normal distribution into _n_ continuous intervals with equal probability. Returns a list of (n - 1) cut points separating the intervals.
Set _n_ to 4 for quartiles (the default). Set _n_ to 10 for deciles. Set _n_ to 100 for percentiles which gives the 99 cuts points that separate the normal distribution into 100 equal sized groups. 

zscore(_x_)[¶](https://docs.python.org/3/library/statistics.html#statistics.NormalDist.zscore "Link to this definition")
    
Compute the [Standard Score](https://www.statisticshowto.com/probability-and-statistics/z-score/) describing _x_ in terms of the number of standard deviations above or below the mean of the normal distribution: `(x - mean) / stdev`.
Added in version 3.9.
Instances of [`NormalDist`](https://docs.python.org/3/library/statistics.html#statistics.NormalDist "statistics.NormalDist") support addition, subtraction, multiplication and division by a constant. These operations are used for translation and scaling. For example:
>>>