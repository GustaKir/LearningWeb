Title: Python Queue Library Documentation
URL: https://docs.python.org/3/library/queue.html
Summary: This section introduces the Python `queue` module, which provides a synchronized queue class, detailing its subcomponents, including Queue and SimpleQueue objects. It also includes references to related topics in the documentation.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [`queue` — A synchronized queue class](https://docs.python.org/3/library/queue.html)
    * [Queue Objects](https://docs.python.org/3/library/queue.html#queue-objects)
      * [Terminating queues](https://docs.python.org/3/library/queue.html#terminating-queues)
    * [SimpleQueue Objects](https://docs.python.org/3/library/queue.html#simplequeue-objects)


#### Previous topic
[`sched` — Event scheduler](https://docs.python.org/3/library/sched.html "previous chapter")
#### Next topic
[`contextvars` — Context Variables](https://docs.python.org/3/library/contextvars.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/queue.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/contextvars.html "contextvars — Context Variables") |
  * [previous](https://docs.python.org/3/library/sched.html "sched — Event scheduler") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Concurrent Execution](https://docs.python.org/3/library/concurrency.html) »
  * [`queue` — A synchronized queue class](https://docs.python.org/3/library/queue.html)
  * | 
  * Theme  Auto Light Dark |


# `queue` — A synchronized queue class[¶](https://docs.python.org/3/library/queue.html#module-queue "Link to this heading")
**Source code:** [Lib/queue.py](https://github.com/python/cpython/tree/3.13/Lib/queue.py)
The [`queue`](https://docs.python.org/3/library/queue.html#module-queue "queue: A synchronized queue class.") module implements multi-producer, multi-consumer queues. It is especially useful in threaded programming when information must be exchanged safely between multiple threads. The [`Queue`](https://docs.python.org/3/library/queue.html#queue.Queue "queue.Queue") class in this module implements all the required locking semantics.
The module implements three types of queue, which differ only in the order in which the entries are retrieved. In a FIFO queue, the first tasks added are the first retrieved. In a LIFO queue, the most recently added entry is the first retrieved (operating like a stack). With a priority queue, the entries are kept sorted (using the [`heapq`](https://docs.python.org/3/library/heapq.html#module-heapq "heapq: Heap queue algorithm \(a.k.a. priority queue\).") module) and the lowest valued entry is retrieved first.
Internally, those three types of queues use locks to temporarily block competing threads; however, they are not designed to handle reentrancy within a thread.
In addition, the module implements a “simple” FIFO queue type, [`SimpleQueue`](https://docs.python.org/3/library/queue.html#queue.SimpleQueue "queue.SimpleQueue"), whose specific implementation provides additional guarantees in exchange for the smaller functionality.
The [`queue`](https://docs.python.org/3/library/queue.html#module-queue "queue: A synchronized queue class.") module defines the following classes and exceptions: 

_class_ queue.Queue(_maxsize =0_)[¶](https://docs.python.org/3/library/queue.html#queue.Queue "Link to this definition")
    
Constructor for a FIFO queue. _maxsize_ is an integer that sets the upperbound limit on the number of items that can be placed in the queue. Insertion will block once this size has been reached, until queue items are consumed. If _maxsize_ is less than or equal to zero, the queue size is infinite. 

_class_ queue.LifoQueue(_maxsize =0_)[¶](https://docs.python.org/3/library/queue.html#queue.LifoQueue "Link to this definition")
    
Constructor for a LIFO queue. _maxsize_ is an integer that sets the upperbound limit on the number of items that can be placed in the queue. Insertion will block once this size has been reached, until queue items are consumed. If _maxsize_ is less than or equal to zero, the queue size is infinite.