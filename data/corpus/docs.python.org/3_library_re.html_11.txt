Title: Regular expression flags and re.findall() functionality
URL: https://docs.python.org/3/library/re.html
Summary: This section discusses how to modify the behavior of regular expressions with the _flags_ value and mentions changes in Python versions regarding optional arguments. It explains the usage of the re.findall() function, which retrieves all non-overlapping matches of a specified pattern in a string, with empty matches included.
---

```

The expression’s behaviour can be modified by specifying a _flags_ value. Values can be any of the [flags](https://docs.python.org/3/library/re.html#flags) variables, combined using bitwise OR (the `|` operator).
Changed in version 3.1: Added the optional flags argument.
Changed in version 3.7: Added support of splitting on a pattern that could match an empty string.
Deprecated since version 3.13: Passing _maxsplit_ and _flags_ as positional arguments is deprecated. In future Python versions they will be [keyword-only parameters](https://docs.python.org/3/glossary.html#keyword-only-parameter). 

re.findall(_pattern_ , _string_ , _flags =0_)[¶](https://docs.python.org/3/library/re.html#re.findall "Link to this definition")
    
Return all non-overlapping matches of _pattern_ in _string_ , as a list of strings or tuples. The _string_ is scanned left-to-right, and matches are returned in the order found. Empty matches are included in the result.
The result depends on the number of capturing groups in the pattern. If there are no groups, return a list of strings matching the whole pattern. If there is exactly one group, return a list of strings matching that group. If multiple groups are present, return a list of tuples of strings matching the groups. Non-capturing groups do not affect the form of the result.
>>>```
>>> re.findall(r'\bf[a-z]*', 'which foot or hand fell fastest')
['foot', 'fell', 'fastest']
>>> re.findall(r'(\w+)=(\d+)', 'set width=20 and height=10')
[('width', '20'), ('height', '10')]

```

The expression’s behaviour can be modified by specifying a _flags_ value. Values can be any of the [flags](https://docs.python.org/3/library/re.html#flags) variables, combined using bitwise OR (the `|` operator).
Changed in version 3.7: Non-empty matches can now start just after a previous empty match. 

re.finditer(_pattern_ , _string_ , _flags =0_)[¶](https://docs.python.org/3/library/re.html#re.finditer "Link to this definition")
    
Return an [iterator](https://docs.python.org/3/glossary.html#term-iterator) yielding [`Match`](https://docs.python.org/3/library/re.html#re.Match "re.Match") objects over all non-overlapping matches for the RE _pattern_ in _string_. The _string_ is scanned left-to-right, and matches are returned in the order found. Empty matches are included in the result.
The expression’s behaviour can be modified by specifying a _flags_ value. Values can be any of the [flags](https://docs.python.org/3/library/re.html#flags) variables, combined using bitwise OR (the `|` operator).
Changed in version 3.7: Non-empty matches can now start just after a previous empty match. 

re.sub(_pattern_ , _repl_ , _string_ , _count =0_, _flags =0_)[¶](https://docs.python.org/3/library/re.html#re.sub "Link to this definition")
    
Return the string obtained by replacing the leftmost non-overlapping occurrences of _pattern_ in _string_ by the replacement _repl_. If the pattern isn’t found, _string_ is returned unchanged. _repl_ can be a string or a function; if it is a string, any backslash escapes in it are processed. That is, `\n` is converted to a single newline character, `\r` is converted to a carriage return, and so forth. Unknown escapes of ASCII letters are reserved for future use and treated as errors. Other unknown escapes such as `\&` are left alone. Backreferences, such as `\6`, are replaced with the substring matched by group 6 in the pattern. For example:
>>>```
>>> re.sub(r'def\s+([a-zA-Z_][a-zA-Z_0-9]*)\s*\(\s*\):',
...     r'static PyObject*\npy_\1(void)\n{',
...     'def myfunc():')
'static PyObject*\npy_myfunc(void)\n{'

```

If _repl_ is a function, it is called for every non-overlapping occurrence of _pattern_. The function takes a single [`Match`](https://docs.python.org/3/library/re.html#re.Match "re.Match") argument, and returns the replacement string. For example:
>>>```
>>> defdashrepl(matchobj):
...   if matchobj.group(0) == '-': return ' '
...   else: return '-'
...
>>> re.sub('-{1,2}', dashrepl, 'pro----gram-files')
'pro--gram files'
>>> re.sub(r'\sAND\s', ' & ', 'Baked Beans And Spam', flags=re.IGNORECASE)
'Baked Beans & Spam'