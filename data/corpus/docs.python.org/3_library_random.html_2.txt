Title: random.seed() - Initialize Random Number Generator
URL: https://docs.python.org/3/library/random.html
Summary: The `random.seed()` function initializes the random number generator. It uses the current system time if no argument is provided, or an operating system randomness source if available. An integer argument sets the seed directly, while version 2 allows strings, bytes, and bytearrays to be converted to integers. Version 1 is available for compatibility with older Python random sequences.
---

random.seed(_a =None_, _version =2_)[¶](https://docs.python.org/3/library/random.html#random.seed "Link to this definition")
    
Initialize the random number generator.
If _a_ is omitted or `None`, the current system time is used. If randomness sources are provided by the operating system, they are used instead of the system time (see the [`os.urandom()`](https://docs.python.org/3/library/os.html#os.urandom "os.urandom") function for details on availability).
If _a_ is an int, it is used directly.
With version 2 (the default), a [`str`](https://docs.python.org/3/library/stdtypes.html#str "str"), [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes"), or [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") object gets converted to an [`int`](https://docs.python.org/3/library/functions.html#int "int") and all of its bits are used.
With version 1 (provided for reproducing random sequences from older versions of Python), the algorithm for [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") and [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") generates a narrower range of seeds.
Changed in version 3.2: Moved to the version 2 scheme which uses all of the bits in a string seed.
Changed in version 3.11: The _seed_ must be one of the following types: `None`, [`int`](https://docs.python.org/3/library/functions.html#int "int"), [`float`](https://docs.python.org/3/library/functions.html#float "float"), [`str`](https://docs.python.org/3/library/stdtypes.html#str "str"), [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes"), or [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray"). 

random.getstate()[¶](https://docs.python.org/3/library/random.html#random.getstate "Link to this definition")
    
Return an object capturing the current internal state of the generator. This object can be passed to [`setstate()`](https://docs.python.org/3/library/random.html#random.setstate "random.setstate") to restore the state. 

random.setstate(_state_)[¶](https://docs.python.org/3/library/random.html#random.setstate "Link to this definition")
    
_state_ should have been obtained from a previous call to [`getstate()`](https://docs.python.org/3/library/random.html#random.getstate "random.getstate"), and [`setstate()`](https://docs.python.org/3/library/random.html#random.setstate "random.setstate") restores the internal state of the generator to what it was at the time [`getstate()`](https://docs.python.org/3/library/random.html#random.getstate "random.getstate") was called.
## Functions for bytes[¶](https://docs.python.org/3/library/random.html#functions-for-bytes "Link to this heading") 

random.randbytes(_n_)[¶](https://docs.python.org/3/library/random.html#random.randbytes "Link to this definition")
    
Generate _n_ random bytes.
This method should not be used for generating security tokens. Use [`secrets.token_bytes()`](https://docs.python.org/3/library/secrets.html#secrets.token_bytes "secrets.token_bytes") instead.
Added in version 3.9.
## Functions for integers[¶](https://docs.python.org/3/library/random.html#functions-for-integers "Link to this heading") 

random.randrange(_stop_)[¶](https://docs.python.org/3/library/random.html#random.randrange "Link to this definition")


random.randrange(_start_ , _stop_[, _step_])
    
Return a randomly selected element from `range(start, stop, step)`.
This is roughly equivalent to `choice(range(start, stop, step))` but supports arbitrarily large ranges and is optimized for common cases.
The positional argument pattern matches the [`range()`](https://docs.python.org/3/library/stdtypes.html#range "range") function.
Keyword arguments should not be used because they can be interpreted in unexpected ways. For example `randrange(start=100)` is interpreted as `randrange(0, 100, 1)`.
Changed in version 3.2: [`randrange()`](https://docs.python.org/3/library/random.html#random.randrange "random.randrange") is more sophisticated about producing equally distributed values. Formerly it used a style like `int(random()*n)` which could produce slightly uneven distributions.
Changed in version 3.12: Automatic conversion of non-integer types is no longer supported. Calls such as `randrange(10.0)` and `randrange(Fraction(10, 1))` now raise a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError"). 

random.randint(_a_ , _b_)[¶](https://docs.python.org/3/library/random.html#random.randint "Link to this definition")
    
Return a random integer _N_ such that `a <= N <= b`. Alias for `randrange(a, b+1)`.