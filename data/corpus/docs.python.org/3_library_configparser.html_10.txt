Title: ConfigParser Module Usage
URL: https://docs.python.org/3/library/configparser.html
Summary: This section illustrates how to use the ConfigParser module to read and write configuration files in Python. It highlights the creation of a default configuration, saving to a file, and reading from multiple configuration files. Moreover, it mentions several changes made to the module across versions 3.1 to 3.7, such as the introduction of OrderedDict as the default dictionary type, additional features like allow_no_value, delimiters, comment_prefixes, and more.
---

```
[DEFAULT]
ServerAliveInterval=-1

```

>>>```
>>> config_override = configparser.ConfigParser()
>>> config_override['DEFAULT'] = {'ServerAliveInterval': '-1'}
>>> with open('override.ini', 'w') as configfile:
...   config_override.write(configfile)
...
>>> config_override = configparser.ConfigParser()
>>> config_override.read(['example.ini', 'override.ini'])
['example.ini', 'override.ini']
>>> print(config_override.get('DEFAULT', 'ServerAliveInterval'))
-1

```

Changed in version 3.1: The default _dict_type_ is [`collections.OrderedDict`](https://docs.python.org/3/library/collections.html#collections.OrderedDict "collections.OrderedDict").
Changed in version 3.2: _allow_no_value_ , _delimiters_ , _comment_prefixes_ , _strict_ , _empty_lines_in_values_ , _default_section_ and _interpolation_ were added.
Changed in version 3.5: The _converters_ argument was added.
Changed in version 3.7: The _defaults_ argument is read with [`read_dict()`](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.read_dict "configparser.ConfigParser.read_dict"), providing consistent behavior across the parser: non-string keys and values are implicitly converted to strings.
Changed in version 3.8: The default _dict_type_ is [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict"), since it now preserves insertion order.
Changed in version 3.13: Raise a [`MultilineContinuationError`](https://docs.python.org/3/library/configparser.html#configparser.MultilineContinuationError "configparser.MultilineContinuationError") when _allow_no_value_ is `True`, and a key without a value is continued with an indented line.
Changed in version 3.13: The _allow_unnamed_section_ argument was added. 

defaults()[¶](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.defaults "Link to this definition")
    
Return a dictionary containing the instance-wide defaults. 

sections()[¶](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.sections "Link to this definition")
    
Return a list of the sections available; the _default section_ is not included in the list. 

add_section(_section_)[¶](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.add_section "Link to this definition")
    
Add a section named _section_ to the instance. If a section by the given name already exists, [`DuplicateSectionError`](https://docs.python.org/3/library/configparser.html#configparser.DuplicateSectionError "configparser.DuplicateSectionError") is raised. If the _default section_ name is passed, [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised. The name of the section must be a string; if not, [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") is raised.
Changed in version 3.2: Non-string section names raise [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError"). 

has_section(_section_)[¶](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.has_section "Link to this definition")
    
Indicates whether the named _section_ is present in the configuration. The _default section_ is not acknowledged. 

options(_section_)[¶](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.options "Link to this definition")
    
Return a list of options available in the specified _section_. 

has_option(_section_ , _option_)[¶](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.has_option "Link to this definition")
    
If the given _section_ exists, and contains the given _option_ , return [`True`](https://docs.python.org/3/library/constants.html#True "True"); otherwise return [`False`](https://docs.python.org/3/library/constants.html#False "False"). If the specified _section_ is [`None`](https://docs.python.org/3/library/constants.html#None "None") or an empty string, DEFAULT is assumed.