Title: Decimal Methods: is_canonical, is_finite, is_infinite
URL: https://docs.python.org/3/library/decimal.html
Summary: This section describes methods of the Decimal class in Python. The is_canonical() method returns True for all Decimal instances, indicating they are always canonical. The is_finite() method checks if a number is finite, returning True for finite numbers and False for infinity or NaN. The is_infinite() method checks for infinite values.
---

```


is_canonical()[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.is_canonical "Link to this definition")
    
Return [`True`](https://docs.python.org/3/library/constants.html#True "True") if the argument is canonical and [`False`](https://docs.python.org/3/library/constants.html#False "False") otherwise. Currently, a [`Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal") instance is always canonical, so this operation always returns [`True`](https://docs.python.org/3/library/constants.html#True "True"). 

is_finite()[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.is_finite "Link to this definition")
    
Return [`True`](https://docs.python.org/3/library/constants.html#True "True") if the argument is a finite number, and [`False`](https://docs.python.org/3/library/constants.html#False "False") if the argument is an infinity or a NaN. 

is_infinite()[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.is_infinite "Link to this definition")
    
Return [`True`](https://docs.python.org/3/library/constants.html#True "True") if the argument is either positive or negative infinity and [`False`](https://docs.python.org/3/library/constants.html#False "False") otherwise. 

is_nan()[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.is_nan "Link to this definition")
    
Return [`True`](https://docs.python.org/3/library/constants.html#True "True") if the argument is a (quiet or signaling) NaN and [`False`](https://docs.python.org/3/library/constants.html#False "False") otherwise. 

is_normal(_context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.is_normal "Link to this definition")
    
Return [`True`](https://docs.python.org/3/library/constants.html#True "True") if the argument is a _normal_ finite number. Return [`False`](https://docs.python.org/3/library/constants.html#False "False") if the argument is zero, subnormal, infinite or a NaN. 

is_qnan()[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.is_qnan "Link to this definition")
    
Return [`True`](https://docs.python.org/3/library/constants.html#True "True") if the argument is a quiet NaN, and [`False`](https://docs.python.org/3/library/constants.html#False "False") otherwise. 

is_signed()[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.is_signed "Link to this definition")
    
Return [`True`](https://docs.python.org/3/library/constants.html#True "True") if the argument has a negative sign and [`False`](https://docs.python.org/3/library/constants.html#False "False") otherwise. Note that zeros and NaNs can both carry signs. 

is_snan()[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.is_snan "Link to this definition")
    
Return [`True`](https://docs.python.org/3/library/constants.html#True "True") if the argument is a signaling NaN and [`False`](https://docs.python.org/3/library/constants.html#False "False") otherwise. 

is_subnormal(_context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.is_subnormal "Link to this definition")
    
Return [`True`](https://docs.python.org/3/library/constants.html#True "True") if the argument is subnormal, and [`False`](https://docs.python.org/3/library/constants.html#False "False") otherwise. 

is_zero()[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.is_zero "Link to this definition")
    
Return [`True`](https://docs.python.org/3/library/constants.html#True "True") if the argument is a (positive or negative) zero and [`False`](https://docs.python.org/3/library/constants.html#False "False") otherwise. 

ln(_context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.ln "Link to this definition")
    
Return the natural (base e) logarithm of the operand. The result is correctly rounded using the [`ROUND_HALF_EVEN`](https://docs.python.org/3/library/decimal.html#decimal.ROUND_HALF_EVEN "decimal.ROUND_HALF_EVEN") rounding mode. 

log10(_context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.log10 "Link to this definition")
    
Return the base ten logarithm of the operand. The result is correctly rounded using the [`ROUND_HALF_EVEN`](https://docs.python.org/3/library/decimal.html#decimal.ROUND_HALF_EVEN "decimal.ROUND_HALF_EVEN") rounding mode. 

logb(_context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.logb "Link to this definition")
    
For a nonzero number, return the adjusted exponent of its operand as a [`Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal") instance. If the operand is a zero then `Decimal('-Infinity')` is returned and the [`DivisionByZero`](https://docs.python.org/3/library/decimal.html#decimal.DivisionByZero "decimal.DivisionByZero") flag is raised. If the operand is an infinity then `Decimal('Infinity')` is returned.