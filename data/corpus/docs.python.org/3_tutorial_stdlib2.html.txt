Title: Brief Tour of the Standard Library — Part II
URL: https://docs.python.org/3/tutorial/stdlib2.html
Summary: This section of the Python documentation provides an overview of various components of the standard library, including output formatting, templating, working with binary data, multi-threading, and logging.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [11. Brief Tour of the Standard Library — Part II](https://docs.python.org/3/tutorial/stdlib2.html)
    * [11.1. Output Formatting](https://docs.python.org/3/tutorial/stdlib2.html#output-formatting)
    * [11.2. Templating](https://docs.python.org/3/tutorial/stdlib2.html#templating)
    * [11.3. Working with Binary Data Record Layouts](https://docs.python.org/3/tutorial/stdlib2.html#working-with-binary-data-record-layouts)
    * [11.4. Multi-threading](https://docs.python.org/3/tutorial/stdlib2.html#multi-threading)
    * [11.5. Logging](https://docs.python.org/3/tutorial/stdlib2.html#logging)
    * [11.6. Weak References](https://docs.python.org/3/tutorial/stdlib2.html#weak-references)
    * [11.7. Tools for Working with Lists](https://docs.python.org/3/tutorial/stdlib2.html#tools-for-working-with-lists)
    * [11.8. Decimal Floating-Point Arithmetic](https://docs.python.org/3/tutorial/stdlib2.html#decimal-floating-point-arithmetic)


#### Previous topic
[10. Brief Tour of the Standard Library](https://docs.python.org/3/tutorial/stdlib.html "previous chapter")
#### Next topic
[12. Virtual Environments and Packages](https://docs.python.org/3/tutorial/venv.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/tutorial/stdlib2.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/tutorial/venv.html "12. Virtual Environments and Packages") |
  * [previous](https://docs.python.org/3/tutorial/stdlib.html "10. Brief Tour of the Standard Library") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Tutorial](https://docs.python.org/3/tutorial/index.html) »
  * [11. Brief Tour of the Standard Library — Part II](https://docs.python.org/3/tutorial/stdlib2.html)
  * | 
  * Theme  Auto Light Dark |


# 11. Brief Tour of the Standard Library — Part II[¶](https://docs.python.org/3/tutorial/stdlib2.html#brief-tour-of-the-standard-library-part-ii "Link to this heading")
This second tour covers more advanced modules that support professional programming needs. These modules rarely occur in small scripts.
## 11.1. Output Formatting[¶](https://docs.python.org/3/tutorial/stdlib2.html#output-formatting "Link to this heading")
The [`reprlib`](https://docs.python.org/3/library/reprlib.html#module-reprlib "reprlib: Alternate repr\(\) implementation with size limits.") module provides a version of [`repr()`](https://docs.python.org/3/library/functions.html#repr "repr") customized for abbreviated displays of large or deeply nested containers:
>>>```
>>> importreprlib
>>> reprlib.repr(set('supercalifragilisticexpialidocious'))
"{'a', 'c', 'd', 'e', 'f', 'g', ...}"

```

The [`pprint`](https://docs.python.org/3/library/pprint.html#module-pprint "pprint: Data pretty printer.") module offers more sophisticated control over printing both built-in and user defined objects in a way that is readable by the interpreter. When the result is longer than one line, the “pretty printer” adds line breaks and indentation to more clearly reveal data structure:
>>>```
>>> importpprint
>>> t = [[[['black', 'cyan'], 'white', ['green', 'red']], [['magenta',
...   'yellow'], 'blue']]]
...
>>> pprint.pprint(t, width=30)
[[[['black', 'cyan'],
  'white',
  ['green', 'red']],
 [['magenta', 'yellow'],
  'blue']]]

```

The [`textwrap`](https://docs.python.org/3/library/textwrap.html#module-textwrap "textwrap: Text wrapping and filling") module formats paragraphs of text to fit a given screen width:
>>>```
>>> importtextwrap
>>> doc = """The wrap() method is just like fill() except that it returns
... a list of strings instead of one big string with newlines to separate
... the wrapped lines."""
...
>>> print(textwrap.fill(doc, width=40))
The wrap() method is just like fill()
except that it returns a list of strings
instead of one big string with newlines
to separate the wrapped lines.