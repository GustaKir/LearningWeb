Title: Python 3.7 Performance Improvements
URL: https://docs.python.org/3/whatsnew/3.7.html
Summary: Python 3.7 includes several performance enhancements: import time for the `typing` module is reduced by 7 times, `sorted()` and `list.sort()` are now 40-75% faster in common cases, and `dict.copy()` improved to be up to 5.5 times faster.
---

As a result of [PEP 560 work](https://docs.python.org/3/whatsnew/3.7.html#whatsnew37-pep560), the import time of [`typing`](https://docs.python.org/3/library/typing.html#module-typing "typing: Support for type hints \(see :pep:`484`\).") has been reduced by a factor of 7, and many typing operations are now faster. (Contributed by Ivan Levkivskyi in [bpo-32226](https://bugs.python.org/issue?@action=redirect&bpo=32226).)
[`sorted()`](https://docs.python.org/3/library/functions.html#sorted "sorted") and [`list.sort()`](https://docs.python.org/3/library/stdtypes.html#list.sort "list.sort") have been optimized for common cases to be up to 40-75% faster. (Contributed by Elliot Gorokhovsky in [bpo-28685](https://bugs.python.org/issue?@action=redirect&bpo=28685).)
[`dict.copy()`](https://docs.python.org/3/library/stdtypes.html#dict.copy "dict.copy") is now up to 5.5 times faster. (Contributed by Yury Selivanov in [bpo-31179](https://bugs.python.org/issue?@action=redirect&bpo=31179).)
[`hasattr()`](https://docs.python.org/3/library/functions.html#hasattr "hasattr") and [`getattr()`](https://docs.python.org/3/library/functions.html#getattr "getattr") are now about 4 times faster when _name_ is not found and _obj_ does not override [`object.__getattr__()`](https://docs.python.org/3/reference/datamodel.html#object.__getattr__ "object.__getattr__") or [`object.__getattribute__()`](https://docs.python.org/3/reference/datamodel.html#object.__getattribute__ "object.__getattribute__"). (Contributed by INADA Naoki in [bpo-32544](https://bugs.python.org/issue?@action=redirect&bpo=32544).)
Searching for certain Unicode characters (like Ukrainian capital “Є”) in a string was up to 25 times slower than searching for other characters. It is now only 3 times slower in the worst case. (Contributed by Serhiy Storchaka in [bpo-24821](https://bugs.python.org/issue?@action=redirect&bpo=24821).)
The [`collections.namedtuple()`](https://docs.python.org/3/library/collections.html#collections.namedtuple "collections.namedtuple") factory has been reimplemented to make the creation of named tuples 4 to 6 times faster. (Contributed by Jelle Zijlstra with further improvements by INADA Naoki, Serhiy Storchaka, and Raymond Hettinger in [bpo-28638](https://bugs.python.org/issue?@action=redirect&bpo=28638).)
`date.fromordinal()` and `date.fromtimestamp()` are now up to 30% faster in the common case. (Contributed by Paul Ganssle in [bpo-32403](https://bugs.python.org/issue?@action=redirect&bpo=32403).)
The [`os.fwalk()`](https://docs.python.org/3/library/os.html#os.fwalk "os.fwalk") function is now up to 2 times faster thanks to the use of [`os.scandir()`](https://docs.python.org/3/library/os.html#os.scandir "os.scandir"). (Contributed by Serhiy Storchaka in [bpo-25996](https://bugs.python.org/issue?@action=redirect&bpo=25996).)
The speed of the [`shutil.rmtree()`](https://docs.python.org/3/library/shutil.html#shutil.rmtree "shutil.rmtree") function has been improved by 20–40% thanks to the use of the [`os.scandir()`](https://docs.python.org/3/library/os.html#os.scandir "os.scandir") function. (Contributed by Serhiy Storchaka in [bpo-28564](https://bugs.python.org/issue?@action=redirect&bpo=28564).)
Optimized case-insensitive matching and searching of [`regular expressions`](https://docs.python.org/3/library/re.html#module-re "re: Regular expression operations."). Searching some patterns can now be up to 20 times faster. (Contributed by Serhiy Storchaka in [bpo-30285](https://bugs.python.org/issue?@action=redirect&bpo=30285).)
[`re.compile()`](https://docs.python.org/3/library/re.html#re.compile "re.compile") now converts `flags` parameter to int object if it is `RegexFlag`. It is now as fast as Python 3.5, and faster than Python 3.6 by about 10% depending on the pattern. (Contributed by INADA Naoki in [bpo-31671](https://bugs.python.org/issue?@action=redirect&bpo=31671).)
The [`modify()`](https://docs.python.org/3/library/selectors.html#selectors.BaseSelector.modify "selectors.BaseSelector.modify") methods of classes [`selectors.EpollSelector`](https://docs.python.org/3/library/selectors.html#selectors.EpollSelector "selectors.EpollSelector"), [`selectors.PollSelector`](https://docs.python.org/3/library/selectors.html#selectors.PollSelector "selectors.PollSelector") and [`selectors.DevpollSelector`](https://docs.python.org/3/library/selectors.html#selectors.DevpollSelector "selectors.DevpollSelector") may be around 10% faster under heavy loads. (Contributed by Giampaolo Rodola’ in [bpo-30014](https://bugs.python.org/issue?@action=redirect&bpo=30014))
Constant folding has been moved from the peephole optimizer to the new AST optimizer, which is able perform optimizations more consistently. (Contributed by Eugene Toder and INADA Naoki in [bpo-29469](https://bugs.python.org/issue?@action=redirect&bpo=29469) and [bpo-11549](https://bugs.python.org/issue?@action=redirect&bpo=11549).)
Most functions and methods in [`abc`](https://docs.python.org/3/lib