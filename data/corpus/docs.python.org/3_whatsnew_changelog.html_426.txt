Title: Python Changes and Fixes Summary
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This document lists recent changes and fixes in Python, including the addition of the `os.waitstatus_to_exitcode()` function for converting wait status to exit code, improvements to `threading._after_fork()` behavior when handling threads, and the introduction of a `_at_fork_reinit()` method for reinitializing locks in child processes.
---

Patch by Pablo Galindo.
  * [bpo-40094](https://bugs.python.org/issue?@action=redirect&bpo=40094): Add [`os.waitstatus_to_exitcode()`](https://docs.python.org/3/library/os.html#os.waitstatus_to_exitcode "os.waitstatus_to_exitcode") function: convert a wait status to an exit code.
  * [bpo-40089](https://bugs.python.org/issue?@action=redirect&bpo=40089): Fix threading._after_fork(): if fork was not called by a thread spawned by threading.Thread, threading._after_fork() now creates a _MainThread instance for _main_thread, instead of a _DummyThread instance.
  * [bpo-40089](https://bugs.python.org/issue?@action=redirect&bpo=40089): Add a private `_at_fork_reinit()` method to `_thread.Lock`, `_thread.RLock`, [`threading.RLock`](https://docs.python.org/3/library/threading.html#threading.RLock "threading.RLock") and [`threading.Condition`](https://docs.python.org/3/library/threading.html#threading.Condition "threading.Condition") classes: reinitialize the lock at fork in the child process, reset the lock to the unlocked state. Rename also the private `_reset_internal_locks()` method of [`threading.Event`](https://docs.python.org/3/library/threading.html#threading.Event "threading.Event") to `_at_fork_reinit()`.
  * [bpo-25780](https://bugs.python.org/issue?@action=redirect&bpo=25780): Expose [`CAN_RAW_JOIN_FILTERS`](https://docs.python.org/3/library/socket.html#socket.CAN_RAW_JOIN_FILTERS "socket.CAN_RAW_JOIN_FILTERS") in the [`socket`](https://docs.python.org/3/library/socket.html#module-socket "socket: Low-level networking interface.") module.
  * [bpo-39503](https://bugs.python.org/issue?@action=redirect&bpo=39503): [`AbstractBasicAuthHandler`](https://docs.python.org/3/library/urllib.request.html#urllib.request.AbstractBasicAuthHandler "urllib.request.AbstractBasicAuthHandler") of [`urllib.request`](https://docs.python.org/3/library/urllib.request.html#module-urllib.request "urllib.request: Extensible library for opening URLs.") now parses all WWW-Authenticate HTTP headers and accepts multiple challenges per header: use the realm of the first Basic challenge.
  * [bpo-39812](https://bugs.python.org/issue?@action=redirect&bpo=39812): Removed daemon threads from [`concurrent.futures`](https://docs.python.org/3/library/concurrent.futures.html#module-concurrent.futures "concurrent.futures: Execute computations concurrently using threads or processes.") by adding an internal `threading._register_atexit()`, which calls registered functions prior to joining all non-daemon threads. This allows for compatibility with subinterpreters, which don’t support daemon threads.
  * [bpo-40050](https://bugs.python.org/issue?@action=redirect&bpo=40050): Fix `importlib._bootstrap_external`: avoid creating a new `winreg` builtin module if it’s already available in [`sys.modules`](https://docs.python.org/3/library/sys.html#sys.modules "sys.modules"), and remove redundant imports.
  * [bpo-40014](https://bugs.python.org/issue?@action=redirect&bpo=40014): Fix `os.getgrouplist()`: if `getgrouplist()` function fails because the group list is too small, retry with a larger group list. On failure, the glibc implementation of `getgrouplist()` sets `ngroups` to the total number of groups. For other implementations, double the group list size.
  * [bpo-40017](https://bugs.python.org/issue?@action=redirect&bpo=40017): Add [`time.CLOCK_TAI`](https://docs.python.org/3/library/time.html#time.CLOCK_TAI "time.CLOCK_TAI") constant if the operating system support it.
  * [bpo-40016](https://bugs.python.org/issue?@action=redirect&bpo=40016): In re docstring, clarify the relationship between inline and argument compile flags.
  * [bpo-39953](https://bugs.python.org/issue?@action=redirect&bpo=39953): Update internal table of OpenSSL error codes in the `ssl` module.
  * [bpo-36144](https://bugs.python.org/issue?@action=redirect&bpo=36144): Added [**PEP 584**](https://peps.python.org/pep-0584/) operators to [`weakref.WeakValueDictionary`](https://docs.python.org/3/library/weakref.html#weakref.WeakValueDictionary "weakref.WeakValueDictionary").
  * [bpo-36144](https://bugs.python.org/issue?@action=redirect&bpo=36144): Added [**PEP 584**](https://peps.python.org/pep-0584/) operators to [`weakref.WeakKeyDictionary`](https://docs.python.org/3/library/weakref.html#weakref.WeakKeyDictionary "weakref.WeakKeyDictionary").
  * [bpo-38891](https://bugs.python.org/issue?@action=redirect&bpo=38891): Fix linear runtime behaviour of the `__getitem__` and `__setitem__` methods in [`multiprocessing.shared_memory.ShareableList`](https://docs.python.org/3/library/multiprocessing.shared_memory.html#multiprocessing.shared_memory.ShareableList "multiprocessing.shared_memory.ShareableList"). This avoids quadratic performance when iterating a `ShareableList`. Patch by Thomas Krennwallner.
  * [bpo-39682](https://bugs.python.org/issue?@action=redirect&bpo=39682): Remove undocumented support for _closing_ a `pathlib.Path` object via its context manager.