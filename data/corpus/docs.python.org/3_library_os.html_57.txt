Title: os.forkpty() - Creating Child Processes with Pseudo-Terminals
URL: https://docs.python.org/3/library/os.html
Summary: The function os.forkpty() forks a child process utilizing a new pseudo-terminal as the controlling terminal. It returns a tuple of the child's process ID and the file descriptor for the master end of the pseudo-terminal. If an error occurs, an OSError is raised. A warning is noted about the function's unsafe usage on macOS when combined with higher-level system APIs.
---

os.forkpty()[¶](https://docs.python.org/3/library/os.html#os.forkpty "Link to this definition")
    
Fork a child process, using a new pseudo-terminal as the child’s controlling terminal. Return a pair of `(pid, fd)`, where _pid_ is `0` in the child, the new child’s process id in the parent, and _fd_ is the file descriptor of the master end of the pseudo-terminal. For a more portable approach, use the [`pty`](https://docs.python.org/3/library/pty.html#module-pty "pty: Pseudo-Terminal Handling for Unix. \(Unix\)") module. If an error occurs [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") is raised.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.forkpty` with no arguments.
Warning
On macOS the use of this function is unsafe when mixed with using higher-level system APIs, and that includes using [`urllib.request`](https://docs.python.org/3/library/urllib.request.html#module-urllib.request "urllib.request: Extensible library for opening URLs.").
Changed in version 3.8: Calling `forkpty()` in a subinterpreter is no longer supported ([`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError") is raised).
Changed in version 3.12: If Python is able to detect that your process has multiple threads, this now raises a [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning"). See the longer explanation on [`os.fork()`](https://docs.python.org/3/library/os.html#os.fork "os.fork").
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI, not Android, not iOS. 

os.kill(_pid_ , _sig_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.kill "Link to this definition")
    
Send signal _sig_ to the process _pid_. Constants for the specific signals available on the host platform are defined in the [`signal`](https://docs.python.org/3/library/signal.html#module-signal "signal: Set handlers for asynchronous events.") module.
Windows: The [`signal.CTRL_C_EVENT`](https://docs.python.org/3/library/signal.html#signal.CTRL_C_EVENT "signal.CTRL_C_EVENT") and [`signal.CTRL_BREAK_EVENT`](https://docs.python.org/3/library/signal.html#signal.CTRL_BREAK_EVENT "signal.CTRL_BREAK_EVENT") signals are special signals which can only be sent to console processes which share a common console window, e.g., some subprocesses. Any other value for _sig_ will cause the process to be unconditionally killed by the TerminateProcess API, and the exit code will be set to _sig_.
See also [`signal.pthread_kill()`](https://docs.python.org/3/library/signal.html#signal.pthread_kill "signal.pthread_kill").
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.kill` with arguments `pid`, `sig`.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, Windows, not WASI, not iOS.
Changed in version 3.2: Added Windows support. 

os.killpg(_pgid_ , _sig_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.killpg "Link to this definition")
    
Send the signal _sig_ to the process group _pgid_.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.killpg` with arguments `pgid`, `sig`.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI, not iOS. 

os.nice(_increment_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.nice "Link to this definition")
    
Add _increment_ to the process’s “niceness”. Return the new niceness.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI. 

os.pidfd_open(_pid_ , _flags =0_)[¶](https://docs.python.org/3/library/os.html#os.pidfd_open "Link to this definition")
    
Return a file descriptor referring to the process _pid_ with _flags_ set. This descriptor can be used to perform process management without races and signals.
See the _[pidfd_open(2)](https://manpages.debian.org/pidfd_open\(2\))_ man page for more details.
[Availability](https://docs.python.org/3/library/intro.html#availability): Linux >= 5.3, Android >= [`build-time`](https://docs.python.org/3/library/sys.html#sys.getandroidapilevel "sys.getandroidapilevel") API level 31
Added in version 3.9. 

os.PIDFD_NONBLOCK[¶](https://docs.python.org/3/library/os.html#os.PIDFD_NONBLOCK "Link to this definition")
    
This flag indicates that the file descriptor will be non-blocking. If the process referred to by the file descriptor has not yet terminated, then an attempt to wait on the file descriptor using _[waitid(2)](https://manpages.debian.org/waitid\(2\))_ will immediately return the error [`EAGAIN`](https://docs.python.org/3/library/errno.html#errno.EAGAIN "errno.EAGAIN") rather than blocking.
[Availability](https://docs.python.org/3/library/intro.html#availability): Linux >= 5.10
Added in version 3.12.