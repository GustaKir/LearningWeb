Title: Core and Builtins Changes in Python
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section covers various bug fixes and optimizations in Python's core and builtins, including resolving TypeErrors, fixing memory leaks in function annotations and Py_BuildValue(), improvements to bytearray.remove(), prevention of subclass constructor bypassing in int.from_bytes(), and optimization of the float.fromhex() method.
---

### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id694 "Link to this heading")
  * [bpo-20041](https://bugs.python.org/issue?@action=redirect&bpo=20041): Fixed TypeError when frame.f_trace is set to None. Patch by Xavier de Gaye.
  * [bpo-26168](https://bugs.python.org/issue?@action=redirect&bpo=26168): Fixed possible refleaks in failing Py_BuildValue() with the “N” format unit.
  * [bpo-26991](https://bugs.python.org/issue?@action=redirect&bpo=26991): Fix possible refleak when creating a function with annotations.
  * [bpo-27039](https://bugs.python.org/issue?@action=redirect&bpo=27039): Fixed bytearray.remove() for values greater than 127. Based on patch by Joe Jevnik.
  * [bpo-23640](https://bugs.python.org/issue?@action=redirect&bpo=23640): int.from_bytes() no longer bypasses constructors for subclasses.
  * [bpo-27005](https://bugs.python.org/issue?@action=redirect&bpo=27005): Optimized the float.fromhex() class method for exact float. It is now 2 times faster.
  * [bpo-18531](https://bugs.python.org/issue?@action=redirect&bpo=18531): Single var-keyword argument of dict subtype was passed unscathed to the C-defined function. Now it is converted to exact dict.
  * [bpo-26811](https://bugs.python.org/issue?@action=redirect&bpo=26811): gc.get_objects() no longer contains a broken tuple with NULL pointer.
  * [bpo-20120](https://bugs.python.org/issue?@action=redirect&bpo=20120): Use RawConfigParser for .pypirc parsing, removing support for interpolation unintentionally added with move to Python 3. Behavior no longer does any interpolation in .pypirc files, matching behavior in Python 2.7 and Setuptools 19.0.
  * [bpo-26249](https://bugs.python.org/issue?@action=redirect&bpo=26249): Memory functions of the [`PyMem_Malloc()`](https://docs.python.org/3/c-api/memory.html#c.PyMem_Malloc "PyMem_Malloc") domain ([`PYMEM_DOMAIN_MEM`](https://docs.python.org/3/c-api/memory.html#c.PYMEM_DOMAIN_MEM "PYMEM_DOMAIN_MEM")) now use the [pymalloc allocator](https://docs.python.org/3/c-api/memory.html#pymalloc) rather than system `malloc()`. Applications calling [`PyMem_Malloc()`](https://docs.python.org/3/c-api/memory.html#c.PyMem_Malloc "PyMem_Malloc") without holding the GIL can now crash: use `PYTHONMALLOC=debug` environment variable to validate the usage of memory allocators in your application.
  * [bpo-26802](https://bugs.python.org/issue?@action=redirect&bpo=26802): Optimize function calls only using unpacking like `func(*tuple)` (no other positional argument, no keyword): avoid copying the tuple. Patch written by Joe Jevnik.
  * [bpo-26659](https://bugs.python.org/issue?@action=redirect&bpo=26659): Make the builtin slice type support cycle collection.
  * [bpo-26718](https://bugs.python.org/issue?@action=redirect&bpo=26718): super.__init__ no longer leaks memory if called multiple times. NOTE: A direct call of super.__init__ is not endorsed!
  * [bpo-27138](https://bugs.python.org/issue?@action=redirect&bpo=27138): Fix the doc comment for FileFinder.find_spec().
  * [bpo-27147](https://bugs.python.org/issue?@action=redirect&bpo=27147): Mention [**PEP 420**](https://peps.python.org/pep-0420/) in the importlib docs.
  * [bpo-25339](https://bugs.python.org/issue?@action=redirect&bpo=25339): PYTHONIOENCODING now has priority over locale in setting the error handler for stdin and stdout.
  * [bpo-26494](https://bugs.python.org/issue?@action=redirect&bpo=26494): Fixed crash on iterating exhausting iterators. Affected classes are generic sequence iterators, iterators of str, bytes, bytearray, list, tuple, set, frozenset, dict, OrderedDict, corresponding views and os.scandir() iterator.
  * [bpo-26574](https://bugs.python.org/issue?@action=redirect&bpo=26574): Optimize `bytes.replace(b'', b'.')` and `bytearray.replace(b'', b'.')`. Patch written by Josh Snider.
  * [bpo-26581](https://bugs.python.org/issue?@action=redirect&bpo=26581): If coding cookie is specified multiple times on a line in Python source code file, only the first one is taken to account.
  * [bpo-19711](https://bugs.python.org/issue?@action=redirect&bpo=19711): Add tests for reloading namespace packages.
  * [bpo-21099](https://bugs.python.org/issue?@action=redirect&bpo=21099): Switch applicable importlib tests to use [**PEP 451**](https://peps.python.org/pep-0451/) API.
  * [bpo-26563](https://bugs.python.org/issue?@action=redirect&bpo=26563): Debug hooks on Python memory allocators now raise a fatal error if functions of the [`PyMem_Malloc()`](https://docs.python.org/3/c-api/memory.html#c.PyMem_Malloc "PyMem_Malloc") family are called without holding the GIL.
  * [bpo-26564](https://bugs.python.org/issue?@action=redirect&bpo=26564): On error, the debug hooks on Python memory allocators now use the [`tracemalloc`](https://docs.python.org/3/library/tracemalloc.html#module-tracemalloc "tracemalloc: Trace memory allocations.") module to get the traceback where a memory block was allocated.
  * [bpo-26558](https://bugs.python.org/i