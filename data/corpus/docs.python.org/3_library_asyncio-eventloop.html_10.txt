Title: Creating a TCP Server with asyncio
URL: https://docs.python.org/3/library/asyncio-eventloop.html
Summary: The `loop.create_server` method creates a TCP server using a protocol factory. It binds to a specified host and port, and returns a `Server` object. This method includes various parameters such as backlog, SSL options, and server behavior controls.
---

_async_ loop.create_server(_protocol_factory_ , _host =None_, _port =None_, _*_ , _family =socket.AF_UNSPEC_, _flags =socket.AI_PASSIVE_, _sock =None_, _backlog =100_, _ssl =None_, _reuse_address =None_, _reuse_port =None_, _keep_alive =None_, _ssl_handshake_timeout =None_, _ssl_shutdown_timeout =None_, _start_serving =True_)[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_server "Link to this definition")
    
Create a TCP server (socket type [`SOCK_STREAM`](https://docs.python.org/3/library/socket.html#socket.SOCK_STREAM "socket.SOCK_STREAM")) listening on _port_ of the _host_ address.
Returns a [`Server`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Server "asyncio.Server") object.
Arguments:
  * _protocol_factory_ must be a callable returning a [protocol](https://docs.python.org/3/library/asyncio-protocol.html#asyncio-protocol) implementation.
  * The _host_ parameter can be set to several types which determine where the server would be listening:
    * If _host_ is a string, the TCP server is bound to a single network interface specified by _host_.
    * If _host_ is a sequence of strings, the TCP server is bound to all network interfaces specified by the sequence.
    * If _host_ is an empty string or `None`, all interfaces are assumed and a list of multiple sockets will be returned (most likely one for IPv4 and another one for IPv6).
  * The _port_ parameter can be set to specify which port the server should listen on. If `0` or `None` (the default), a random unused port will be selected (note that if _host_ resolves to multiple network interfaces, a different random port will be selected for each interface).
  * _family_ can be set to either [`socket.AF_INET`](https://docs.python.org/3/library/socket.html#socket.AF_INET "socket.AF_INET") or [`AF_INET6`](https://docs.python.org/3/library/socket.html#socket.AF_INET6 "socket.AF_INET6") to force the socket to use IPv4 or IPv6. If not set, the _family_ will be determined from host name (defaults to [`AF_UNSPEC`](https://docs.python.org/3/library/socket.html#socket.AF_UNSPEC "socket.AF_UNSPEC")).
  * _flags_ is a bitmask for [`getaddrinfo()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.getaddrinfo "asyncio.loop.getaddrinfo").
  * _sock_ can optionally be specified in order to use a preexisting socket object. If specified, _host_ and _port_ must not be specified.
Note
The _sock_ argument transfers ownership of the socket to the server created. To close the socket, call the server’s [`close()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Server.close "asyncio.Server.close") method.
  * _backlog_ is the maximum number of queued connections passed to [`listen()`](https://docs.python.org/3/library/socket.html#socket.socket.listen "socket.socket.listen") (defaults to 100).
  * _ssl_ can be set to an [`SSLContext`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext "ssl.SSLContext") instance to enable TLS over the accepted connections.
  * _reuse_address_ tells the kernel to reuse a local socket in `TIME_WAIT` state, without waiting for its natural timeout to expire. If not specified will automatically be set to `True` on Unix.
  * _reuse_port_ tells the kernel to allow this endpoint to be bound to the same port as other existing endpoints are bound to, so long as they all set this flag when being created. This option is not supported on Windows.
  * _keep_alive_ set to `True` keeps connections active by enabling the periodic transmission of messages.


Changed in version 3.13: Added the _keep_alive_ parameter.
  * _ssl_handshake_timeout_ is (for a TLS server) the time in seconds to wait for the TLS handshake to complete before aborting the connection. `60.0` seconds if `None` (default).
  * _ssl_shutdown_timeout_ is the time in seconds to wait for the SSL shutdown to complete before aborting the connection. `30.0` seconds if `None` (default).
  * _start_serving_ set to `True` (the default) causes the created server to start accepting connections immediately. When set to `False`, the user should await on [`Server.start_serving()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Server.start_serving "asyncio.Server.start_serving") or [`Server.serve_forever()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Server.serve_forever "asyncio.Server.serve_forever") to make the server to start accepting connections.