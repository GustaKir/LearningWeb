Title: Bytes and Bytearray Methods in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This section discusses the behavior of the 'split' and 'splitlines' methods for byte strings, highlighting that 'split' returns an empty list for empty strings and does not create extra lines for terminal line breaks. It also describes the 'swapcase' method, which creates a copy of byte sequences with lowercase ASCII characters converted to uppercase and vice versa, with an example provided.
---

```

Unlike [`split()`](https://docs.python.org/3/library/stdtypes.html#bytes.split "bytes.split") when a delimiter string _sep_ is given, this method returns an empty list for the empty string, and a terminal line break does not result in an extra line:
>>>```
>>> b"".split(b'\n'), b"Two lines\n".split(b'\n')
([b''], [b'Two lines', b''])
>>> b"".splitlines(), b"One line\n".splitlines()
([], [b'One line'])

```


bytes.swapcase()[¶](https://docs.python.org/3/library/stdtypes.html#bytes.swapcase "Link to this definition")


bytearray.swapcase()[¶](https://docs.python.org/3/library/stdtypes.html#bytearray.swapcase "Link to this definition")
    
Return a copy of the sequence with all the lowercase ASCII characters converted to their corresponding uppercase counterpart and vice-versa.
For example:
>>>```
>>> b'Hello World'.swapcase()
b'hELLO wORLD'

```

Lowercase ASCII characters are those byte values in the sequence `b'abcdefghijklmnopqrstuvwxyz'`. Uppercase ASCII characters are those byte values in the sequence `b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`.
Unlike [`str.swapcase()`](https://docs.python.org/3/library/stdtypes.html#str.swapcase "str.swapcase"), it is always the case that `bin.swapcase().swapcase() == bin` for the binary versions. Case conversions are symmetrical in ASCII, even though that is not generally true for arbitrary Unicode code points.
Note
The bytearray version of this method does _not_ operate in place - it always produces a new object, even if no changes were made. 

bytes.title()[¶](https://docs.python.org/3/library/stdtypes.html#bytes.title "Link to this definition")


bytearray.title()[¶](https://docs.python.org/3/library/stdtypes.html#bytearray.title "Link to this definition")
    
Return a titlecased version of the binary sequence where words start with an uppercase ASCII character and the remaining characters are lowercase. Uncased byte values are left unmodified.
For example:
>>>```
>>> b'Hello world'.title()
b'Hello World'

```

Lowercase ASCII characters are those byte values in the sequence `b'abcdefghijklmnopqrstuvwxyz'`. Uppercase ASCII characters are those byte values in the sequence `b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`. All other byte values are uncased.
The algorithm uses a simple language-independent definition of a word as groups of consecutive letters. The definition works in many contexts but it means that apostrophes in contractions and possessives form word boundaries, which may not be the desired result:
>>>```
>>> b"they're bill's friends from the UK".title()
b"They'Re Bill'S Friends From The Uk"

```

A workaround for apostrophes can be constructed using regular expressions:
>>>```
>>> importre
>>> deftitlecase(s):
...   return re.sub(rb"[A-Za-z]+('[A-Za-z]+)?",
...          lambda mo: mo.group(0)[0:1].upper() +
...                mo.group(0)[1:].lower(),
...          s)
...
>>> titlecase(b"they're bill's friends.")
b"They're Bill's Friends."

```

Note
The bytearray version of this method does _not_ operate in place - it always produces a new object, even if no changes were made. 

bytes.upper()[¶](https://docs.python.org/3/library/stdtypes.html#bytes.upper "Link to this definition")


bytearray.upper()[¶](https://docs.python.org/3/library/stdtypes.html#bytearray.upper "Link to this definition")
    
Return a copy of the sequence with all the lowercase ASCII characters converted to their corresponding uppercase counterpart.
For example:
>>>```
>>> b'Hello World'.upper()
b'HELLO WORLD'

```

Lowercase ASCII characters are those byte values in the sequence `b'abcdefghijklmnopqrstuvwxyz'`. Uppercase ASCII characters are those byte values in the sequence `b'ABCDEFGHIJKLMNOPQRSTUVWXYZ'`.
Note
The bytearray version of this method does _not_ operate in place - it always produces a new object, even if no changes were made. 

bytes.zfill(_width_)[¶](https://docs.python.org/3/library/stdtypes.html#bytes.zfill "Link to this definition")


bytearray.zfill(_width_)[¶](https://docs.python.org/3/library/stdtypes.html#bytearray.zfill "Link to this definition")
    
Return a copy of the sequence left filled with ASCII `b'0'` digits to make a sequence of length _width_. A leading sign prefix (`b'+'`/ `b'-'`) is handled by inserting the padding _after_ the sign character rather than before. For [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") objects, the original sequence is returned if _width_ is less than or equal to `len(seq)`.
For example:
>>>```
>>> b"42".zfill(5)
b'00042'
>>> b"-42".zfill(5)
b'-0042'