Title: Byte and Bytearray Operations in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This section outlines the operations available for bytes and bytearray objects in Python, highlighting that certain methods assume ASCII compatibility and should be avoided with arbitrary binary data. It specifically mentions the `count` method for both bytes and bytearray, which counts non-overlapping occurrences of a specified subsequence within a defined range.
---

```

and:
```
a = b"abc"
b = a.replace(b"a", b"f")

```

Some bytes and bytearray operations assume the use of ASCII compatible binary formats, and hence should be avoided when working with arbitrary binary data. These restrictions are covered below.
Note
Using these ASCII based operations to manipulate binary data that is not stored in an ASCII based format may lead to data corruption.
The following methods on bytes and bytearray objects can be used with arbitrary binary data. 

bytes.count(_sub_[, _start_[, _end_]])[¶](https://docs.python.org/3/library/stdtypes.html#bytes.count "Link to this definition")


bytearray.count(_sub_[, _start_[, _end_]])[¶](https://docs.python.org/3/library/stdtypes.html#bytearray.count "Link to this definition")
    
Return the number of non-overlapping occurrences of subsequence _sub_ in the range [_start_ , _end_]. Optional arguments _start_ and _end_ are interpreted as in slice notation.
The subsequence to search for may be any [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object) or an integer in the range 0 to 255.
If _sub_ is empty, returns the number of empty slices between characters which is the length of the bytes object plus one.
Changed in version 3.3: Also accept an integer in the range 0 to 255 as the subsequence. 

bytes.removeprefix(_prefix_ , _/_)[¶](https://docs.python.org/3/library/stdtypes.html#bytes.removeprefix "Link to this definition")


bytearray.removeprefix(_prefix_ , _/_)[¶](https://docs.python.org/3/library/stdtypes.html#bytearray.removeprefix "Link to this definition")
    
If the binary data starts with the _prefix_ string, return `bytes[len(prefix):]`. Otherwise, return a copy of the original binary data:
>>>```
>>> b'TestHook'.removeprefix(b'Test')
b'Hook'
>>> b'BaseTestCase'.removeprefix(b'Test')
b'BaseTestCase'

```

The _prefix_ may be any [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object).
Note
The bytearray version of this method does _not_ operate in place - it always produces a new object, even if no changes were made.
Added in version 3.9. 

bytes.removesuffix(_suffix_ , _/_)[¶](https://docs.python.org/3/library/stdtypes.html#bytes.removesuffix "Link to this definition")


bytearray.removesuffix(_suffix_ , _/_)[¶](https://docs.python.org/3/library/stdtypes.html#bytearray.removesuffix "Link to this definition")
    
If the binary data ends with the _suffix_ string and that _suffix_ is not empty, return `bytes[:-len(suffix)]`. Otherwise, return a copy of the original binary data:
>>>```
>>> b'MiscTests'.removesuffix(b'Tests')
b'Misc'
>>> b'TmpDirMixin'.removesuffix(b'Tests')
b'TmpDirMixin'