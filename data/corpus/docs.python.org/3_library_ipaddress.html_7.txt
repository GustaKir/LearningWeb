Title: IPv6Address Formatting and Conversion
URL: https://docs.python.org/3/library/ipaddress.html
Summary: This section covers the `IPv6Address.__format__` method and its similarity to `IPv4Address`. It discusses how to convert IP addresses to strings and integers for compatibility with networking interfaces, demonstrating the use of `str()` and `int()` functions to achieve this.
---

IPv6Address.__format__(_fmt_)[¶](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Address.__format__ "Link to this definition")
    
Refer to the corresponding method documentation in [`IPv4Address`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address "ipaddress.IPv4Address").
Added in version 3.9.
### Conversion to Strings and Integers[¶](https://docs.python.org/3/library/ipaddress.html#conversion-to-strings-and-integers "Link to this heading")
To interoperate with networking interfaces such as the socket module, addresses must be converted to strings or integers. This is handled using the [`str()`](https://docs.python.org/3/library/stdtypes.html#str "str") and [`int()`](https://docs.python.org/3/library/functions.html#int "int") builtin functions:
>>>```
>>> str(ipaddress.IPv4Address('192.168.0.1'))
'192.168.0.1'
>>> int(ipaddress.IPv4Address('192.168.0.1'))
3232235521
>>> str(ipaddress.IPv6Address('::1'))
'::1'
>>> int(ipaddress.IPv6Address('::1'))
1

```

Note that IPv6 scoped addresses are converted to integers without scope zone ID.
### Operators[¶](https://docs.python.org/3/library/ipaddress.html#operators "Link to this heading")
Address objects support some operators. Unless stated otherwise, operators can only be applied between compatible objects (i.e. IPv4 with IPv4, IPv6 with IPv6).
#### Comparison operators[¶](https://docs.python.org/3/library/ipaddress.html#comparison-operators "Link to this heading")
Address objects can be compared with the usual set of comparison operators. Same IPv6 addresses with different scope zone IDs are not equal. Some examples:
>>>```
>>> IPv4Address('127.0.0.2') > IPv4Address('127.0.0.1')
True
>>> IPv4Address('127.0.0.2') == IPv4Address('127.0.0.1')
False
>>> IPv4Address('127.0.0.2') != IPv4Address('127.0.0.1')
True
>>> IPv6Address('fe80::1234') == IPv6Address('fe80::1234%1')
False
>>> IPv6Address('fe80::1234%1') != IPv6Address('fe80::1234%2')
True

```

#### Arithmetic operators[¶](https://docs.python.org/3/library/ipaddress.html#arithmetic-operators "Link to this heading")
Integers can be added to or subtracted from address objects. Some examples:
>>>```
>>> IPv4Address('127.0.0.2') + 3
IPv4Address('127.0.0.5')
>>> IPv4Address('127.0.0.2') - 3
IPv4Address('126.255.255.255')
>>> IPv4Address('255.255.255.255') + 1
Traceback (most recent call last):
 File "<stdin>", line 1, in <module>
ipaddress.AddressValueError: 4294967296 (>= 2**32) is not permitted as an IPv4 address