Title: Request Methods in urllib
URL: https://docs.python.org/3/library/urllib.request.html
Summary: This section outlines methods for the Request class in the urllib library, including removing headers, retrieving the full URL, and setting up a proxy server. Changes were introduced in version 3.4.
---

Request.remove_header(_header_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.remove_header "Link to this definition")
    
Remove named header from the request instance (both from regular and unredirected headers).
Added in version 3.4. 

Request.get_full_url()[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.get_full_url "Link to this definition")
    
Return the URL given in the constructor.
Changed in version 3.4.
Returns [`Request.full_url`](https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.full_url "urllib.request.Request.full_url") 

Request.set_proxy(_host_ , _type_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.set_proxy "Link to this definition")
    
Prepare the request by connecting to a proxy server. The _host_ and _type_ will replace those of the instance, and the instance’s selector will be the original URL given in the constructor. 

Request.get_header(_header_name_ , _default =None_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.get_header "Link to this definition")
    
Return the value of the given header. If the header is not present, return the default value. 

Request.header_items()[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.header_items "Link to this definition")
    
Return a list of tuples (header_name, header_value) of the Request headers.
Changed in version 3.4: The request methods add_data, has_data, get_data, get_type, get_host, get_selector, get_origin_req_host and is_unverifiable that were deprecated since 3.3 have been removed.
## OpenerDirector Objects[¶](https://docs.python.org/3/library/urllib.request.html#openerdirector-objects "Link to this heading")
[`OpenerDirector`](https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector "urllib.request.OpenerDirector") instances have the following methods: 

OpenerDirector.add_handler(_handler_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector.add_handler "Link to this definition")
    
_handler_ should be an instance of [`BaseHandler`](https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler "urllib.request.BaseHandler"). The following methods are searched, and added to the possible chains (note that HTTP errors are a special case). Note that, in the following, _protocol_ should be replaced with the actual protocol to handle, for example `http_response()` would be the HTTP protocol response handler. Also _type_ should be replaced with the actual HTTP code, for example `http_error_404()` would handle HTTP 404 errors.
  * `<protocol>_open()` — signal that the handler knows how to open _protocol_ URLs.
See [`BaseHandler.<protocol>_open()`](https://docs.python.org/3/library/urllib.request.html#protocol-open) for more information.
  * `http_error_<type>()` — signal that the handler knows how to handle HTTP errors with HTTP error code _type_.
See [`BaseHandler.http_error_<nnn>()`](https://docs.python.org/3/library/urllib.request.html#http-error-nnn) for more information.
  * `<protocol>_error()` — signal that the handler knows how to handle errors from (non-`http`) _protocol_.
  * `<protocol>_request()` — signal that the handler knows how to pre-process _protocol_ requests.
See [`BaseHandler.<protocol>_request()`](https://docs.python.org/3/library/urllib.request.html#protocol-request) for more information.
  * `<protocol>_response()` — signal that the handler knows how to post-process _protocol_ responses.
See [`BaseHandler.<protocol>_response()`](https://docs.python.org/3/library/urllib.request.html#protocol-response) for more information.



OpenerDirector.open(_url_ , _data=None_[, _timeout_])[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector.open "Link to this definition")
    
Open the given _url_ (which can be a request object or a string), optionally passing the given _data_. Arguments, return values and exceptions raised are the same as those of [`urlopen()`](https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen "urllib.request.urlopen") (which simply calls the [`open()`](https://docs.python.org/3/library/functions.html#open "open") method on the currently installed global [`OpenerDirector`](https://docs.python.org/3/library/urllib.request.html#urllib.request.OpenerDirector "urllib.request.OpenerDirector")). The optional _timeout_ parameter specifies a timeout in seconds for blocking operations like the connection attempt (if not specified, the global default timeout setting will be used). The timeout feature actually works only for HTTP, HTTPS and FTP connections.