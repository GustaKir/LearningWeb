Title: Python C API: Code Object Functions
URL: https://docs.python.org/3/c-api/code.html
Summary: This section describes two functions in the Python C API for code objects: `PyCode_Addr2Line`, which returns the line number corresponding to a given byte offset, and `PyCode_Addr2Location`, which provides detailed information about the range of lines and columns for a given byte offset. It also references `PyFrame_GetLineNumber()` for retrieving the line number of a frame and mentions PEP 626 for efficient line number iteration.
---

intPyCode_Addr2Line([PyCodeObject](https://docs.python.org/3/c-api/code.html#c.PyCodeObject "PyCodeObject")*co, intbyte_offset)[¶](https://docs.python.org/3/c-api/code.html#c.PyCode_Addr2Line "Link to this definition")
    
Return the line number of the instruction that occurs on or before `byte_offset` and ends after it. If you just need the line number of a frame, use [`PyFrame_GetLineNumber()`](https://docs.python.org/3/c-api/frame.html#c.PyFrame_GetLineNumber "PyFrame_GetLineNumber") instead.
For efficiently iterating over the line numbers in a code object, use [**the API described in PEP 626**](https://peps.python.org/pep-0626/#out-of-process-debuggers-and-profilers). 

intPyCode_Addr2Location([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*co, intbyte_offset, int*start_line, int*start_column, int*end_line, int*end_column)[¶](https://docs.python.org/3/c-api/code.html#c.PyCode_Addr2Location "Link to this definition")
    
Sets the passed `int` pointers to the source code line and column numbers for the instruction at `byte_offset`. Sets the value to `0` when information is not available for any particular element.
Returns `1` if the function succeeds and 0 otherwise.
Added in version 3.11. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyCode_GetCode([PyCodeObject](https://docs.python.org/3/c-api/code.html#c.PyCodeObject "PyCodeObject")*co)[¶](https://docs.python.org/3/c-api/code.html#c.PyCode_GetCode "Link to this definition")
    
Equivalent to the Python code `getattr(co, 'co_code')`. Returns a strong reference to a [`PyBytesObject`](https://docs.python.org/3/c-api/bytes.html#c.PyBytesObject "PyBytesObject") representing the bytecode in a code object. On error, `NULL` is returned and an exception is raised.
This `PyBytesObject` may be created on-demand by the interpreter and does not necessarily represent the bytecode actually executed by CPython. The primary use case for this function is debuggers and profilers.
Added in version 3.11. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyCode_GetVarnames([PyCodeObject](https://docs.python.org/3/c-api/code.html#c.PyCodeObject "PyCodeObject")*co)[¶](https://docs.python.org/3/c-api/code.html#c.PyCode_GetVarnames "Link to this definition")
    
Equivalent to the Python code `getattr(co, 'co_varnames')`. Returns a new reference to a [`PyTupleObject`](https://docs.python.org/3/c-api/tuple.html#c.PyTupleObject "PyTupleObject") containing the names of the local variables. On error, `NULL` is returned and an exception is raised.
Added in version 3.11. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyCode_GetCellvars([PyCodeObject](https://docs.python.org/3/c-api/code.html#c.PyCodeObject "PyCodeObject")*co)[¶](https://docs.python.org/3/c-api/code.html#c.PyCode_GetCellvars "Link to this definition")
    
Equivalent to the Python code `getattr(co, 'co_cellvars')`. Returns a new reference to a [`PyTupleObject`](https://docs.python.org/3/c-api/tuple.html#c.PyTupleObject "PyTupleObject") containing the names of the local variables that are referenced by nested functions. On error, `NULL` is returned and an exception is raised.
Added in version 3.11. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyCode_GetFreevars([PyCodeObject](https://docs.python.org/3/c-api/code.html#c.PyCodeObject "PyCodeObject")*co)[¶](https://docs.python.org/3/c-api/code.html#c.PyCode_GetFreevars "Link to this definition")
    
Equivalent to the Python code `getattr(co, 'co_freevars')`. Returns a new reference to a [`PyTupleObject`](https://docs.python.org/3/c-api/tuple.html#c.PyTupleObject "PyTupleObject") containing the names of the [free (closure) variables](https://docs.python.org/3/glossary.html#term-closure-variable). On error, `NULL` is returned and an exception is raised.
Added in version 3.11. 

intPyCode_AddWatcher([PyCode_WatchCallback](https://docs.python.org/3/c-api/code.html#c.PyCode_WatchCallback "PyCode_WatchCallback")callback)[¶](https://docs.python.org/3/c-api/code.html#c.PyCode_AddWatcher "Link to this definition")
    
Register _callback_ as a code object watcher for the current interpreter. Return an ID which may be passed to [`PyCode_ClearWatcher()`](https://docs.python.org/3/c-api/code.html#c.PyCode_ClearWatcher "PyCode_ClearWatcher"). In case of error (e.g. no more watcher IDs available), return `-1` and set an exception.
Added in version 3.12.