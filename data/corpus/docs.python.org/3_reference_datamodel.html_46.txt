Title: Custom Implementation of Rounding Functions in Python
URL: https://docs.python.org/3/reference/datamodel.html
Summary: The `object.__ceil__()` method is used to implement built-in functions like `round()`, `trunc()`, `floor()`, and `ceil()`. It returns the object's value truncated to an Integral type, typically an integer, unless additional parameters are provided.
---

object.__ceil__(_self_)[¶](https://docs.python.org/3/reference/datamodel.html#object.__ceil__ "Link to this definition")
    
Called to implement the built-in function [`round()`](https://docs.python.org/3/library/functions.html#round "round") and [`math`](https://docs.python.org/3/library/math.html#module-math "math: Mathematical functions \(sin\(\) etc.\).") functions [`trunc()`](https://docs.python.org/3/library/math.html#math.trunc "math.trunc"), [`floor()`](https://docs.python.org/3/library/math.html#math.floor "math.floor") and [`ceil()`](https://docs.python.org/3/library/math.html#math.ceil "math.ceil"). Unless _ndigits_ is passed to `__round__()` all these methods should return the value of the object truncated to an [`Integral`](https://docs.python.org/3/library/numbers.html#numbers.Integral "numbers.Integral") (typically an [`int`](https://docs.python.org/3/library/functions.html#int "int")).
The built-in function [`int()`](https://docs.python.org/3/library/functions.html#int "int") falls back to [`__trunc__()`](https://docs.python.org/3/reference/datamodel.html#object.__trunc__ "object.__trunc__") if neither [`__int__()`](https://docs.python.org/3/reference/datamodel.html#object.__int__ "object.__int__") nor [`__index__()`](https://docs.python.org/3/reference/datamodel.html#object.__index__ "object.__index__") is defined.
Changed in version 3.11: The delegation of [`int()`](https://docs.python.org/3/library/functions.html#int "int") to [`__trunc__()`](https://docs.python.org/3/reference/datamodel.html#object.__trunc__ "object.__trunc__") is deprecated.
### 3.3.9. With Statement Context Managers[¶](https://docs.python.org/3/reference/datamodel.html#with-statement-context-managers "Link to this heading")
A _context manager_ is an object that defines the runtime context to be established when executing a [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement. The context manager handles the entry into, and the exit from, the desired runtime context for the execution of the block of code. Context managers are normally invoked using the `with` statement (described in section [The with statement](https://docs.python.org/3/reference/compound_stmts.html#with)), but can also be used by directly invoking their methods.
Typical uses of context managers include saving and restoring various kinds of global state, locking and unlocking resources, closing opened files, etc.
For more information on context managers, see [Context Manager Types](https://docs.python.org/3/library/stdtypes.html#typecontextmanager). The [`object`](https://docs.python.org/3/library/functions.html#object "object") class itself does not provide the context manager methods. 

object.__enter__(_self_)[¶](https://docs.python.org/3/reference/datamodel.html#object.__enter__ "Link to this definition")
    
Enter the runtime context related to this object. The [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement will bind this method’s return value to the target(s) specified in the `as` clause of the statement, if any. 

object.__exit__(_self_ , _exc_type_ , _exc_value_ , _traceback_)[¶](https://docs.python.org/3/reference/datamodel.html#object.__exit__ "Link to this definition")
    
Exit the runtime context related to this object. The parameters describe the exception that caused the context to be exited. If the context was exited without an exception, all three arguments will be [`None`](https://docs.python.org/3/library/constants.html#None "None").
If an exception is supplied, and the method wishes to suppress the exception (i.e., prevent it from being propagated), it should return a true value. Otherwise, the exception will be processed normally upon exit from this method.
Note that [`__exit__()`](https://docs.python.org/3/reference/datamodel.html#object.__exit__ "object.__exit__") methods should not reraise the passed-in exception; this is the caller’s responsibility.
See also 

[**PEP 343**](https://peps.python.org/pep-0343/) - The “with” statement
    
The specification, background, and examples for the Python [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement.
### 3.3.10. Customizing positional arguments in class pattern matching[¶](https://docs.python.org/3/reference/datamodel.html#customizing-positional-arguments-in-class-pattern-matching "Link to this heading")
When using a class name in a pattern, positional arguments in the pattern are not allowed by default, i.e. `case MyClass(x, y)` is typically invalid without special support in `MyClass`. To be able to use that kind of pattern, the class needs to define a ___match_args___ attribute.