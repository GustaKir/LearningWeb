Title: Overview of TimerHandle and Server Objects in asyncio
URL: https://docs.python.org/3/library/asyncio-eventloop.html
Summary: The 'when()' method returns the absolute scheduled callback time as a float in seconds, using the same reference as 'loop.time()', introduced in version 3.7. Server objects can be created via methods like 'loop.create_server()' and 'loop.create_unix_server()'.
---

when()[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.TimerHandle.when "Link to this definition")
    
Return a scheduled callback time as [`float`](https://docs.python.org/3/library/functions.html#float "float") seconds.
The time is an absolute timestamp, using the same time reference as [`loop.time()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.time "asyncio.loop.time").
Added in version 3.7.
## Server Objects[¶](https://docs.python.org/3/library/asyncio-eventloop.html#server-objects "Link to this heading")
Server objects are created by [`loop.create_server()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_server "asyncio.loop.create_server"), [`loop.create_unix_server()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_unix_server "asyncio.loop.create_unix_server"), [`start_server()`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.start_server "asyncio.start_server"), and [`start_unix_server()`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.start_unix_server "asyncio.start_unix_server") functions.
Do not instantiate the [`Server`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Server "asyncio.Server") class directly. 

_class_ asyncio.Server[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Server "Link to this definition")
    
_Server_ objects are asynchronous context managers. When used in an `async with` statement, it’s guaranteed that the Server object is closed and not accepting new connections when the `async with` statement is completed:
```
srv = await loop.create_server(...)
async with srv:
  # some code
# At this point, srv is closed and no longer accepts new connections.