Title: Out-of-band Buffers in the Pickle Module
URL: https://docs.python.org/3/library/pickle.html
Summary: Introduced in Python 3.8, this section discusses how the `pickle` module can be optimized for transferring large datasets by minimizing memory copies. It highlights the need for both the data provider and consumer to support out-of-band buffers to enhance performance and resource management during the pickling process.
---

```

## Out-of-band Buffers[¶](https://docs.python.org/3/library/pickle.html#out-of-band-buffers "Link to this heading")
Added in version 3.8.
In some contexts, the [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "pickle: Convert Python objects to streams of bytes and back.") module is used to transfer massive amounts of data. Therefore, it can be important to minimize the number of memory copies, to preserve performance and resource consumption. However, normal operation of the [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "pickle: Convert Python objects to streams of bytes and back.") module, as it transforms a graph-like structure of objects into a sequential stream of bytes, intrinsically involves copying data to and from the pickle stream.
This constraint can be eschewed if both the _provider_ (the implementation of the object types to be transferred) and the _consumer_ (the implementation of the communications system) support the out-of-band transfer facilities provided by pickle protocol 5 and higher.
### Provider API[¶](https://docs.python.org/3/library/pickle.html#provider-api "Link to this heading")
The large data objects to be pickled must implement a [`__reduce_ex__()`](https://docs.python.org/3/library/pickle.html#object.__reduce_ex__ "object.__reduce_ex__") method specialized for protocol 5 and higher, which returns a [`PickleBuffer`](https://docs.python.org/3/library/pickle.html#pickle.PickleBuffer "pickle.PickleBuffer") instance (instead of e.g. a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") object) for any large data.
A [`PickleBuffer`](https://docs.python.org/3/library/pickle.html#pickle.PickleBuffer "pickle.PickleBuffer") object _signals_ that the underlying buffer is eligible for out-of-band data transfer. Those objects remain compatible with normal usage of the [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "pickle: Convert Python objects to streams of bytes and back.") module. However, consumers can also opt-in to tell [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "pickle: Convert Python objects to streams of bytes and back.") that they will handle those buffers by themselves.
### Consumer API[¶](https://docs.python.org/3/library/pickle.html#consumer-api "Link to this heading")
A communications system can enable custom handling of the [`PickleBuffer`](https://docs.python.org/3/library/pickle.html#pickle.PickleBuffer "pickle.PickleBuffer") objects generated when serializing an object graph.
On the sending side, it needs to pass a _buffer_callback_ argument to [`Pickler`](https://docs.python.org/3/library/pickle.html#pickle.Pickler "pickle.Pickler") (or to the [`dump()`](https://docs.python.org/3/library/pickle.html#pickle.dump "pickle.dump") or [`dumps()`](https://docs.python.org/3/library/pickle.html#pickle.dumps "pickle.dumps") function), which will be called with each [`PickleBuffer`](https://docs.python.org/3/library/pickle.html#pickle.PickleBuffer "pickle.PickleBuffer") generated while pickling the object graph. Buffers accumulated by the _buffer_callback_ will not see their data copied into the pickle stream, only a cheap marker will be inserted.
On the receiving side, it needs to pass a _buffers_ argument to [`Unpickler`](https://docs.python.org/3/library/pickle.html#pickle.Unpickler "pickle.Unpickler") (or to the [`load()`](https://docs.python.org/3/library/pickle.html#pickle.load "pickle.load") or [`loads()`](https://docs.python.org/3/library/pickle.html#pickle.loads "pickle.loads") function), which is an iterable of the buffers which were passed to _buffer_callback_. That iterable should produce buffers in the same order as they were passed to _buffer_callback_. Those buffers will provide the data expected by the reconstructors of the objects whose pickling produced the original [`PickleBuffer`](https://docs.python.org/3/library/pickle.html#pickle.PickleBuffer "pickle.PickleBuffer") objects.
Between the sending side and the receiving side, the communications system is free to implement its own transfer mechanism for out-of-band buffers. Potential optimizations include the use of shared memory or datatype-dependent compression.
### Example[¶](https://docs.python.org/3/library/pickle.html#example "Link to this heading")
Here is a trivial example where we implement a [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") subclass able to participate in out-of-band buffer pickling: