Title: Using POST Requests with urllib
URL: https://docs.python.org/3/library/urllib.request.html
Summary: This section explains how to use the `data` argument with `http:` URLs in `urllib` for `POST` requests, detailing that the data must be in bytes in `application/x-www-form-urlencoded` format. It also mentions that `urlretrieve()` can raise a `ContentTooShortError` if the downloaded data is less than expected based on the `Content-Length` header.
---

```

If the _url_ uses the `http:` scheme identifier, the optional _data_ argument may be given to specify a `POST` request (normally the request type is `GET`). The _data_ argument must be a bytes object in standard _application/x-www-form-urlencoded_ format; see the [`urllib.parse.urlencode()`](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode "urllib.parse.urlencode") function.
[`urlretrieve()`](https://docs.python.org/3/library/urllib.request.html#urllib.request.urlretrieve "urllib.request.urlretrieve") will raise [`ContentTooShortError`](https://docs.python.org/3/library/urllib.error.html#urllib.error.ContentTooShortError "urllib.error.ContentTooShortError") when it detects that the amount of data available was less than the expected amount (which is the size reported by a _Content-Length_ header). This can occur, for example, when the download is interrupted.
The _Content-Length_ is treated as a lower bound: if there’s more data to read, urlretrieve reads more data, but if less data is available, it raises the exception.
You can still retrieve the downloaded data in this case, it is stored in the `content` attribute of the exception instance.
If no _Content-Length_ header was supplied, urlretrieve can not check the size of the data it has downloaded, and just returns it. In this case you just have to assume that the download was successful. 

urllib.request.urlcleanup()[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.urlcleanup "Link to this definition")
    
Cleans up temporary files that may have been left behind by previous calls to [`urlretrieve()`](https://docs.python.org/3/library/urllib.request.html#urllib.request.urlretrieve "urllib.request.urlretrieve"). 

_class_ urllib.request.URLopener(_proxies =None_, _** x509_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener "Link to this definition")
    
Deprecated since version 3.3.
Base class for opening and reading URLs. Unless you need to support opening objects using schemes other than `http:`, `ftp:`, or `file:`, you probably want to use [`FancyURLopener`](https://docs.python.org/3/library/urllib.request.html#urllib.request.FancyURLopener "urllib.request.FancyURLopener").
By default, the [`URLopener`](https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener "urllib.request.URLopener") class sends a _User-Agent_ header of `urllib/VVV`, where _VVV_ is the [`urllib`](https://docs.python.org/3/library/urllib.html#module-urllib "urllib") version number. Applications can define their own _User-Agent_ header by subclassing [`URLopener`](https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener "urllib.request.URLopener") or [`FancyURLopener`](https://docs.python.org/3/library/urllib.request.html#urllib.request.FancyURLopener "urllib.request.FancyURLopener") and setting the class attribute [`version`](https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.version "urllib.request.URLopener.version") to an appropriate string value in the subclass definition.
The optional _proxies_ parameter should be a dictionary mapping scheme names to proxy URLs, where an empty dictionary turns proxies off completely. Its default value is `None`, in which case environmental proxy settings will be used if present, as discussed in the definition of [`urlopen()`](https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen "urllib.request.urlopen"), above.
Additional keyword parameters, collected in _x509_ , may be used for authentication of the client when using the `https:` scheme. The keywords _key_file_ and _cert_file_ are supported to provide an SSL key and certificate; both are needed to support client authentication.
[`URLopener`](https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener "urllib.request.URLopener") objects will raise an [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") exception if the server returns an error code. 

open(_fullurl_ , _data =None_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.open "Link to this definition")
    
Open _fullurl_ using the appropriate protocol. This method sets up cache and proxy information, then calls the appropriate open method with its input arguments. If the scheme is not recognized, [`open_unknown()`](https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.open_unknown "urllib.request.URLopener.open_unknown") is called. The _data_ argument has the same meaning as the _data_ argument of [`urlopen()`](https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen "urllib.request.urlopen").
This method always quotes _fullurl_ using [`quote()`](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote "urllib.parse.quote").