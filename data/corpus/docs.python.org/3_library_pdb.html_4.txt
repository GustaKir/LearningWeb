Title: Python Debugger (_pdb_) Enhancements
URL: https://docs.python.org/3/library/pdb.html
Summary: In version 3.12, a new '_convenience variable_' feature was added. The `.pdbrc` file is now read with 'utf-8' encoding, allowing customization of the debugger environment with ignored empty lines and comments. Versions 3.2 and 3.11 introduced changes allowing `.pdbrc` to include debugging commands and improved encoding handling, respectively.
---

Added in version 3.12: Added the _convenience variable_ feature.
If a file `.pdbrc` exists in the user’s home directory or in the current directory, it is read with `'utf-8'` encoding and executed as if it had been typed at the debugger prompt, with the exception that empty lines and lines starting with `#` are ignored. This is particularly useful for aliases. If both files exist, the one in the home directory is read first and aliases defined there can be overridden by the local file.
Changed in version 3.2: `.pdbrc` can now contain commands that continue debugging, such as [`continue`](https://docs.python.org/3/library/pdb.html#pdbcommand-continue) or [`next`](https://docs.python.org/3/library/pdb.html#pdbcommand-next). Previously, these commands had no effect.
Changed in version 3.11: `.pdbrc` is now read with `'utf-8'` encoding. Previously, it was read with the system locale encoding. 

h(elp) [command][¶](https://docs.python.org/3/library/pdb.html#pdbcommand-help "Link to this definition")
    
Without argument, print the list of available commands. With a _command_ as argument, print help about that command. `help pdb` displays the full documentation (the docstring of the [`pdb`](https://docs.python.org/3/library/pdb.html#module-pdb "pdb: The Python debugger for interactive interpreters.") module). Since the _command_ argument must be an identifier, `help exec` must be entered to get help on the `!` command. 

w(here)[¶](https://docs.python.org/3/library/pdb.html#pdbcommand-where "Link to this definition")
    
Print a stack trace, with the most recent frame at the bottom. An arrow (`>`) indicates the current frame, which determines the context of most commands. 

d(own) [count][¶](https://docs.python.org/3/library/pdb.html#pdbcommand-down "Link to this definition")
    
Move the current frame _count_ (default one) levels down in the stack trace (to a newer frame). 

u(p) [count][¶](https://docs.python.org/3/library/pdb.html#pdbcommand-up "Link to this definition")
    
Move the current frame _count_ (default one) levels up in the stack trace (to an older frame). 

b(reak) [([filename:]lineno | function) [, condition]][¶](https://docs.python.org/3/library/pdb.html#pdbcommand-break "Link to this definition")
    
With a _lineno_ argument, set a break at line _lineno_ in the current file. The line number may be prefixed with a _filename_ and a colon, to specify a breakpoint in another file (possibly one that hasn’t been loaded yet). The file is searched on [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path"). Accepatable forms of _filename_ are `/abspath/to/file.py`, `relpath/file.py`, `module` and `package.module`.
With a _function_ argument, set a break at the first executable statement within that function. _function_ can be any expression that evaluates to a function in the current namespace.
If a second argument is present, it is an expression which must evaluate to true before the breakpoint is honored.
Without argument, list all breaks, including for each breakpoint, the number of times that breakpoint has been hit, the current ignore count, and the associated condition if any.
Each breakpoint is assigned a number to which all the other breakpoint commands refer. 

tbreak [([filename:]lineno | function) [, condition]][¶](https://docs.python.org/3/library/pdb.html#pdbcommand-tbreak "Link to this definition")
    
Temporary breakpoint, which is removed automatically when it is first hit. The arguments are the same as for [`break`](https://docs.python.org/3/library/pdb.html#pdbcommand-break). 

cl(ear) [filename:lineno | bpnumber ...][¶](https://docs.python.org/3/library/pdb.html#pdbcommand-clear "Link to this definition")
    
With a _filename:lineno_ argument, clear all the breakpoints at this line. With a space separated list of breakpoint numbers, clear those breakpoints. Without argument, clear all breaks (but first ask confirmation). 

disable bpnumber [bpnumber ...][¶](https://docs.python.org/3/library/pdb.html#pdbcommand-disable "Link to this definition")
    
Disable the breakpoints given as a space separated list of breakpoint numbers. Disabling a breakpoint means it cannot cause the program to stop execution, but unlike clearing a breakpoint, it remains in the list of breakpoints and can be (re-)enabled. 

enable bpnumber [bpnumber ...][¶](https://docs.python.org/3/library/pdb.html#pdbcommand-enable "Link to this definition")
    
Enable the breakpoints specified. 

ignore bpnumber [count][¶](https://docs.python.org/3/library/pdb.html#pdbcommand-ignore "Link to this definition")
    
Set the ignore count for the given breakpoint number. If _count_ is omitted, the ignore count is set to 0. A breakpoint becomes active when the ignore count is zero. When non-zero, the _count_ is decremented each time the breakpoint is reached and the breakpoint is not disabled and any associated condition evaluates to true.