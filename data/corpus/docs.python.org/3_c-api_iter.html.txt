Title: Python C API: Iterators
URL: https://docs.python.org/3/c-api/iter.html
Summary: This document provides information on the Python C API related to iterators, including navigation links to previous and next topics on the mapping and buffer protocols.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
#### Previous topic
[Mapping Protocol](https://docs.python.org/3/c-api/mapping.html "previous chapter")
#### Next topic
[Buffer Protocol](https://docs.python.org/3/c-api/buffer.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/c-api/iter.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/c-api/buffer.html "Buffer Protocol") |
  * [previous](https://docs.python.org/3/c-api/mapping.html "Mapping Protocol") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [Python/C API Reference Manual](https://docs.python.org/3/c-api/index.html) »
  * [Abstract Objects Layer](https://docs.python.org/3/c-api/abstract.html) »
  * [Iterator Protocol](https://docs.python.org/3/c-api/iter.html)
  * | 
  * Theme  Auto Light Dark |


# Iterator Protocol[¶](https://docs.python.org/3/c-api/iter.html#iterator-protocol "Link to this heading")
There are two functions specifically for working with iterators. 

intPyIter_Check([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o)[¶](https://docs.python.org/3/c-api/iter.html#c.PyIter_Check "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.8._
Return non-zero if the object _o_ can be safely passed to [`PyIter_Next()`](https://docs.python.org/3/c-api/iter.html#c.PyIter_Next "PyIter_Next"), and `0` otherwise. This function always succeeds. 

intPyAIter_Check([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o)[¶](https://docs.python.org/3/c-api/iter.html#c.PyAIter_Check "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.10._
Return non-zero if the object _o_ provides the `AsyncIterator` protocol, and `0` otherwise. This function always succeeds.
Added in version 3.10. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyIter_Next([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o)[¶](https://docs.python.org/3/c-api/iter.html#c.PyIter_Next "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return the next value from the iterator _o_. The object must be an iterator according to [`PyIter_Check()`](https://docs.python.org/3/c-api/iter.html#c.PyIter_Check "PyIter_Check") (it is up to the caller to check this). If there are no remaining values, returns `NULL` with no exception set. If an error occurs while retrieving the item, returns `NULL` and passes along the exception.
To write a loop which iterates over an iterator, the C code should look something like this:
```
PyObject*iterator=PyObject_GetIter(obj);
PyObject*item;
if(iterator==NULL){
/* propagate error */
}
while((item=PyIter_Next(iterator))){
/* do something with item */
...
/* release reference when done */
Py_DECREF(item);
}
Py_DECREF(iterator);
if(PyErr_Occurred()){
/* propagate error */
}
else{
/* continue doing useful work */
}