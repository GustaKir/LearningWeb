Title: Introduction of importlib Module
URL: https://docs.python.org/3/whatsnew/2.7.html
Summary: Python 3.1 introduces the importlib package, which re-implements the Python import statement logic. It is particularly beneficial for Python interpreter developers and those creating new importers. While Python 2.7 features only a minimal subset of importlib, it includes the import_module() function.
---

### New module: importlib[¶](https://docs.python.org/3/whatsnew/2.7.html#new-module-importlib "Link to this heading")
Python 3.1 includes the [`importlib`](https://docs.python.org/3/library/importlib.html#module-importlib "importlib: The implementation of the import machinery.") package, a re-implementation of the logic underlying Python’s [`import`](https://docs.python.org/3/reference/simple_stmts.html#import) statement. [`importlib`](https://docs.python.org/3/library/importlib.html#module-importlib "importlib: The implementation of the import machinery.") is useful for implementers of Python interpreters and to users who wish to write new importers that can participate in the import process. Python 2.7 doesn’t contain the complete [`importlib`](https://docs.python.org/3/library/importlib.html#module-importlib "importlib: The implementation of the import machinery.") package, but instead has a tiny subset that contains a single function, [`import_module()`](https://docs.python.org/3/library/importlib.html#importlib.import_module "importlib.import_module").
`import_module(name, package=None)` imports a module. _name_ is a string containing the module or package’s name. It’s possible to do relative imports by providing a string that begins with a `.` character, such as `..utils.errors`. For relative imports, the _package_ argument must be provided and is the name of the package that will be used as the anchor for the relative import. [`import_module()`](https://docs.python.org/3/library/importlib.html#importlib.import_module "importlib.import_module") both inserts the imported module into `sys.modules` and returns the module object.
Here are some examples:
>>>```
>>> fromimportlibimport import_module
>>> anydbm = import_module('anydbm') # Standard absolute import
>>> anydbm
<module 'anydbm' from '/p/python/Lib/anydbm.py'>
>>> # Relative import
>>> file_util = import_module('..file_util', 'distutils.command')
>>> file_util
<module 'distutils.file_util' from '/python/Lib/distutils/file_util.pyc'>