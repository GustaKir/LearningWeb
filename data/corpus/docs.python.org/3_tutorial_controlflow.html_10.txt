Title: Function Annotations in Python
URL: https://docs.python.org/3/tutorial/controlflow.html
Summary: Function annotations are optional metadata about parameter and return types in user-defined functions. They are stored in the `__annotations__` attribute as a dictionary and do not affect function behavior. Annotations for parameters use a colon followed by an expression, while return annotations use a literal '->'.
---

```

### 4.9.8. Function Annotations[¶](https://docs.python.org/3/tutorial/controlflow.html#function-annotations "Link to this heading")
[Function annotations](https://docs.python.org/3/reference/compound_stmts.html#function) are completely optional metadata information about the types used by user-defined functions (see [**PEP 3107**](https://peps.python.org/pep-3107/) and [**PEP 484**](https://peps.python.org/pep-0484/) for more information).
[Annotations](https://docs.python.org/3/glossary.html#term-function-annotation) are stored in the `__annotations__` attribute of the function as a dictionary and have no effect on any other part of the function. Parameter annotations are defined by a colon after the parameter name, followed by an expression evaluating to the value of the annotation. Return annotations are defined by a literal `->`, followed by an expression, between the parameter list and the colon denoting the end of the [`def`](https://docs.python.org/3/reference/compound_stmts.html#def) statement. The following example has a required argument, an optional argument, and the return value annotated:
>>>```
>>> deff(ham: str, eggs: str = 'eggs') -> str:
...   print("Annotations:", f.__annotations__)
...   print("Arguments:", ham, eggs)
...   return ham + ' and ' + eggs
...
>>> f('spam')
Annotations: {'ham': <class 'str'>, 'return': <class 'str'>, 'eggs': <class 'str'>}
Arguments: spam eggs
'spam and eggs'

```

## 4.10. Intermezzo: Coding Style[¶](https://docs.python.org/3/tutorial/controlflow.html#intermezzo-coding-style "Link to this heading")
Now that you are about to write longer, more complex pieces of Python, it is a good time to talk about _coding style_. Most languages can be written (or more concise, _formatted_) in different styles; some are more readable than others. Making it easy for others to read your code is always a good idea, and adopting a nice coding style helps tremendously for that.
For Python, [**PEP 8**](https://peps.python.org/pep-0008/) has emerged as the style guide that most projects adhere to; it promotes a very readable and eye-pleasing coding style. Every Python developer should read it at some point; here are the most important points extracted for you:
  * Use 4-space indentation, and no tabs.
4 spaces are a good compromise between small indentation (allows greater nesting depth) and large indentation (easier to read). Tabs introduce confusion, and are best left out.
  * Wrap lines so that they don’t exceed 79 characters.
This helps users with small displays and makes it possible to have several code files side-by-side on larger displays.
  * Use blank lines to separate functions and classes, and larger blocks of code inside functions.
  * When possible, put comments on a line of their own.
  * Use docstrings.
  * Use spaces around operators and after commas, but not directly inside bracketing constructs: `a = f(1, 2) + g(3, 4)`.
  * Name your classes and functions consistently; the convention is to use `UpperCamelCase` for classes and `lowercase_with_underscores` for functions and methods. Always use `self` as the name for the first method argument (see [A First Look at Classes](https://docs.python.org/3/tutorial/classes.html#tut-firstclasses) for more on classes and methods).
  * Don’t use fancy encodings if your code is meant to be used in international environments. Python’s default, UTF-8, or even plain ASCII work best in any case.
  * Likewise, don’t use non-ASCII characters in identifiers if there is only the slightest chance people speaking a different language will read or maintain the code.