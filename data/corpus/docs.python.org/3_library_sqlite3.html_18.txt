Title: sqlite3.Cursor Class Overview
URL: https://docs.python.org/3/library/sqlite3.html
Summary: The sqlite3.Cursor class includes methods and attributes for executing SQL statements. The execute method allows a single SQL statement to be executed with optional parameter binding using placeholders, where parameters can be provided as a dictionary or sequence.
---

```


_class_ sqlite3.Cursor[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor "Link to this definition")
    
A [`Cursor`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor "sqlite3.Cursor") instance has the following attributes and methods. 

execute(_sql_ , _parameters =()_, _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute "Link to this definition")
    
Execute a single SQL statement, optionally binding Python values using [placeholders](https://docs.python.org/3/library/sqlite3.html#sqlite3-placeholders). 

Parameters:
    
  * **sql** ([_str_](https://docs.python.org/3/library/stdtypes.html#str "str")) – A single SQL statement.
  * **parameters** ([`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") | [sequence](https://docs.python.org/3/glossary.html#term-sequence)) – Python values to bind to placeholders in _sql_. A `dict` if named placeholders are used. A sequence if unnamed placeholders are used. See [How to use placeholders to bind values in SQL queries](https://docs.python.org/3/library/sqlite3.html#sqlite3-placeholders).



Raises:
    
[**ProgrammingError**](https://docs.python.org/3/library/sqlite3.html#sqlite3.ProgrammingError "sqlite3.ProgrammingError") – If _sql_ contains more than one SQL statement.
If [`autocommit`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.autocommit "sqlite3.Connection.autocommit") is [`LEGACY_TRANSACTION_CONTROL`](https://docs.python.org/3/library/sqlite3.html#sqlite3.LEGACY_TRANSACTION_CONTROL "sqlite3.LEGACY_TRANSACTION_CONTROL"), [`isolation_level`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.isolation_level "sqlite3.Connection.isolation_level") is not `None`, _sql_ is an `INSERT`, `UPDATE`, `DELETE`, or `REPLACE` statement, and there is no open transaction, a transaction is implicitly opened before executing _sql_.
Deprecated since version 3.12, will be removed in version 3.14: [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning") is emitted if [named placeholders](https://docs.python.org/3/library/sqlite3.html#sqlite3-placeholders) are used and _parameters_ is a sequence instead of a [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict"). Starting with Python 3.14, [`ProgrammingError`](https://docs.python.org/3/library/sqlite3.html#sqlite3.ProgrammingError "sqlite3.ProgrammingError") will be raised instead.
Use [`executescript()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.executescript "sqlite3.Cursor.executescript") to execute multiple SQL statements. 

executemany(_sql_ , _parameters_ , _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.executemany "Link to this definition")
    
For every item in _parameters_ , repeatedly execute the [parameterized](https://docs.python.org/3/library/sqlite3.html#sqlite3-placeholders) DML SQL statement _sql_.
Uses the same implicit transaction handling as [`execute()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute "sqlite3.Cursor.execute"). 

Parameters:
    
  * **sql** ([_str_](https://docs.python.org/3/library/stdtypes.html#str "str")) – A single SQL DML statement.
  * **parameters** ([iterable](https://docs.python.org/3/glossary.html#term-iterable)) – An iterable of parameters to bind with the placeholders in _sql_. See [How to use placeholders to bind values in SQL queries](https://docs.python.org/3/library/sqlite3.html#sqlite3-placeholders).



Raises:
    
[**ProgrammingError**](https://docs.python.org/3/library/sqlite3.html#sqlite3.ProgrammingError "sqlite3.ProgrammingError") – If _sql_ contains more than one SQL statement, or is not a DML statement.
Example:
```
rows = [
  ("row1",),
  ("row2",),
]
# cur is an sqlite3.Cursor object
cur.executemany("INSERT INTO data VALUES(?)", rows)