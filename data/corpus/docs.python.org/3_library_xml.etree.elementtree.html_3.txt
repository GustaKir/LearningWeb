Title: Element Methods in xml.etree.ElementTree
URL: https://docs.python.org/3/library/xml.etree.elementtree.html
Summary: This section describes key methods of the `Element` class in the `xml.etree.ElementTree` module, including `findall()`, `find()`, `text`, and `get()`. It highlights how to retrieve child elements, their text content, and element attributes with examples.
---

```

[`Element.findall()`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.findall "xml.etree.ElementTree.Element.findall") finds only elements with a tag which are direct children of the current element. [`Element.find()`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.find "xml.etree.ElementTree.Element.find") finds the _first_ child with a particular tag, and [`Element.text`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.text "xml.etree.ElementTree.Element.text") accesses the element’s text content. [`Element.get()`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.get "xml.etree.ElementTree.Element.get") accesses the element’s attributes:
>>>```
>>> for country in root.findall('country'):
...   rank = country.find('rank').text
...   name = country.get('name')
...   print(name, rank)
...
Liechtenstein 1
Singapore 4
Panama 68

```

More sophisticated specification of which elements to look for is possible by using [XPath](https://docs.python.org/3/library/xml.etree.elementtree.html#elementtree-xpath).
### Modifying an XML File[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#modifying-an-xml-file "Link to this heading")
[`ElementTree`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree "xml.etree.ElementTree.ElementTree") provides a simple way to build XML documents and write them to files. The [`ElementTree.write()`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree.write "xml.etree.ElementTree.ElementTree.write") method serves this purpose.
Once created, an [`Element`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element "xml.etree.ElementTree.Element") object may be manipulated by directly changing its fields (such as [`Element.text`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.text "xml.etree.ElementTree.Element.text")), adding and modifying attributes ([`Element.set()`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.set "xml.etree.ElementTree.Element.set") method), as well as adding new children (for example with [`Element.append()`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.append "xml.etree.ElementTree.Element.append")).
Let’s say we want to add one to each country’s rank, and add an `updated` attribute to the rank element:
>>>```
>>> for rank in root.iter('rank'):
...   new_rank = int(rank.text) + 1
...   rank.text = str(new_rank)
...   rank.set('updated', 'yes')
...
>>> tree.write('output.xml')

```

Our XML now looks like this:
```
<?xml version="1.0"?>
<data>
<countryname="Liechtenstein">
<rankupdated="yes">2</rank>
<year>2008</year>
<gdppc>141100</gdppc>
<neighborname="Austria"direction="E"/>
<neighborname="Switzerland"direction="W"/>
</country>
<countryname="Singapore">
<rankupdated="yes">5</rank>
<year>2011</year>
<gdppc>59900</gdppc>
<neighborname="Malaysia"direction="N"/>
</country>
<countryname="Panama">
<rankupdated="yes">69</rank>
<year>2011</year>
<gdppc>13600</gdppc>
<neighborname="Costa Rica"direction="W"/>
<neighborname="Colombia"direction="E"/>
</country>
</data>

```

We can remove elements using [`Element.remove()`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element.remove "xml.etree.ElementTree.Element.remove"). Let’s say we want to remove all countries with a rank higher than 50:
>>>```
>>> for country in root.findall('country'):
...   # using root.findall() to avoid removal during traversal
...   rank = int(country.find('rank').text)
...   if rank > 50:
...     root.remove(country)
...
>>> tree.write('output.xml')

```

Note that concurrent modification while iterating can lead to problems, just like when iterating and modifying Python lists or dicts. Therefore, the example first collects all matching elements with `root.findall()`, and only then iterates over the list of matches.
Our XML now looks like this:
```
<?xml version="1.0"?>
<data>
<countryname="Liechtenstein">
<rankupdated="yes">2</rank>
<year>2008</year>
<gdppc>141100</gdppc>
<neighborname="Austria"direction="E"/>
<neighborname="Switzerland"direction="W"/>
</country>
<countryname="Singapore">
<rankupdated="yes">5</rank>
<year>2011</year>
<gdppc>59900</gdppc>
<neighborname="Malaysia"direction="N"/>
</country>
</data>

```

### Building XML documents[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#building-xml-documents "Link to this heading")
The [`SubElement()`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.SubElement "xml.etree.ElementTree.SubElement") function also provides a convenient way to create new sub-elements for a given element:
>>>