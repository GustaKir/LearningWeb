Title: Python C API Integer Conversion
URL: https://docs.python.org/3/c-api/arg.html
Summary: This section details the conversion of Python integers to various C integer types using specific format codes, including long int, unsigned long, long long, unsigned long long, and Py_ssize_t. It highlights the distinctions between signed and unsigned types, and mentions the lack of overflow checking for certain conversions.
---

`l` ([`int`](https://docs.python.org/3/library/functions.html#int "int")) [long int]
    
Convert a Python integer to a C longint. 

`k` ([`int`](https://docs.python.org/3/library/functions.html#int "int")) [unsigned long]
    
Convert a Python integer to a C unsignedlong without overflow checking. 

`L` ([`int`](https://docs.python.org/3/library/functions.html#int "int")) [long long]
    
Convert a Python integer to a C longlong. 

`K` ([`int`](https://docs.python.org/3/library/functions.html#int "int")) [unsigned long long]
    
Convert a Python integer to a C unsignedlonglong without overflow checking. 

`n` ([`int`](https://docs.python.org/3/library/functions.html#int "int")) [[`Py_ssize_t`](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")]
    
Convert a Python integer to a C [`Py_ssize_t`](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t"). 

`c` ([`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") or [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") of length 1) [char]
    
Convert a Python byte, represented as a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") or [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") object of length 1, to a C char.
Changed in version 3.3: Allow [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") objects. 

`C` ([`str`](https://docs.python.org/3/library/stdtypes.html#str "str") of length 1) [int]
    
Convert a Python character, represented as a [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") object of length 1, to a C int. 

`f` ([`float`](https://docs.python.org/3/library/functions.html#float "float")) [float]
    
Convert a Python floating-point number to a C float. 

`d` ([`float`](https://docs.python.org/3/library/functions.html#float "float")) [double]
    
Convert a Python floating-point number to a C double. 

`D` ([`complex`](https://docs.python.org/3/library/functions.html#complex "complex")) [Py_complex]
    
Convert a Python complex number to a C [`Py_complex`](https://docs.python.org/3/c-api/complex.html#c.Py_complex "Py_complex") structure.
### Other objects[Â¶](https://docs.python.org/3/c-api/arg.html#other-objects "Link to this heading") 

`O` (object) [PyObject *]
    
Store a Python object (without any conversion) in a C object pointer. The C program thus receives the actual object that was passed. A new [strong reference](https://docs.python.org/3/glossary.html#term-strong-reference) to the object is not created (i.e. its reference count is not increased). The pointer stored is not `NULL`. 

`O!` (object) [_typeobject_ , PyObject *]
    
Store a Python object in a C object pointer. This is similar to `O`, but takes two C arguments: the first is the address of a Python type object, the second is the address of the C variable (of type [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*) into which the object pointer is stored. If the Python object does not have the required type, [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") is raised. 

`O&` (object) [_converter_ , _address_]
    
Convert a Python object to a C variable through a _converter_ function. This takes two arguments: the first is a function, the second is the address of a C variable (of arbitrary type), converted to void*. The _converter_ function in turn is called as follows:
```
status=converter(object,address);