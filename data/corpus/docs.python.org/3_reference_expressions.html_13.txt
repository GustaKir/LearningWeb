Title: Slicing in Python Expressions
URL: https://docs.python.org/3/reference/expressions.html
Summary: This section outlines the grammar rules for slicing in Python expressions, detailing the structure of slicing syntax, including definitions for slice list, slice item, and proper slice.
---

```
**slicing**   ::= [primary](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-primary) "[" [slice_list](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-slice_list) "]"
**slice_list**  ::= [slice_item](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-slice_item) ("," [slice_item](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-slice_item))* [","]
**slice_item**  ::= [expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-expression) | [proper_slice](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-proper_slice)
**proper_slice** ::= [[lower_bound](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-lower_bound)] ":" [[upper_bound](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-upper_bound)] [ ":" [[stride](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-stride)] ]
**lower_bound** ::= [expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-expression)
**upper_bound** ::= [expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-expression)
**stride**    ::= [expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-expression)

```

There is ambiguity in the formal syntax here: anything that looks like an expression list also looks like a slice list, so any subscription can be interpreted as a slicing. Rather than further complicating the syntax, this is disambiguated by defining that in this case the interpretation as a subscription takes priority over the interpretation as a slicing (this is the case if the slice list contains no proper slice).
The semantics for a slicing are as follows. The primary is indexed (using the same [`__getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__getitem__ "object.__getitem__") method as normal subscription) with a key that is constructed from the slice list, as follows. If the slice list contains at least one comma, the key is a tuple containing the conversion of the slice items; otherwise, the conversion of the lone slice item is the key. The conversion of a slice item that is an expression is that expression. The conversion of a proper slice is a slice object (see section [The standard type hierarchy](https://docs.python.org/3/reference/datamodel.html#types)) whose [`start`](https://docs.python.org/3/library/functions.html#slice.start "slice.start"), [`stop`](https://docs.python.org/3/library/functions.html#slice.stop "slice.stop") and [`step`](https://docs.python.org/3/library/functions.html#slice.step "slice.step") attributes are the values of the expressions given as lower bound, upper bound and stride, respectively, substituting `None` for missing expressions.
### 6.3.4. Calls[Â¶](https://docs.python.org/3/reference/expressions.html#calls "Link to this heading")
A call calls a callable object (e.g., a [function](https://docs.python.org/3/glossary.html#term-function)) with a possibly empty series of [arguments](https://docs.python.org/3/glossary.html#term-argument):