Title: assertNoLogs Context Manager in unittest
URL: https://docs.python.org/3/library/unittest.html
Summary: Introduced in version 3.4, the assertNoLogs method is a context manager for verifying that no log messages are emitted by a specified logger or its children at a specified logging level. The logger can be provided directly or by its name, defaulting to the root logger. The logging level can be numeric or in string form, with a default level of logging.INFO.
---

```

Added in version 3.4. 

assertNoLogs(_logger =None_, _level =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNoLogs "Link to this definition")
    
A context manager to test that no messages are logged on the _logger_ or one of its children, with at least the given _level_.
If given, _logger_ should be a [`logging.Logger`](https://docs.python.org/3/library/logging.html#logging.Logger "logging.Logger") object or a [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") giving the name of a logger. The default is the root logger, which will catch all messages.
If given, _level_ should be either a numeric logging level or its string equivalent (for example either `"ERROR"` or [`logging.ERROR`](https://docs.python.org/3/library/logging.html#logging.ERROR "logging.ERROR")). The default is [`logging.INFO`](https://docs.python.org/3/library/logging.html#logging.INFO "logging.INFO").
Unlike [`assertLogs()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertLogs "unittest.TestCase.assertLogs"), nothing will be returned by the context manager.
Added in version 3.10.
There are also other methods used to perform more specific checks, such as:
Method | Checks that | New in  
---|---|---  
[`assertAlmostEqual(a, b)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertAlmostEqual "unittest.TestCase.assertAlmostEqual") | `round(a-b, 7) == 0` |   
[`assertNotAlmostEqual(a, b)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotAlmostEqual "unittest.TestCase.assertNotAlmostEqual") | `round(a-b, 7) != 0` |   
[`assertGreater(a, b)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertGreater "unittest.TestCase.assertGreater") | `a > b` | 3.1  
[`assertGreaterEqual(a, b)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertGreaterEqual "unittest.TestCase.assertGreaterEqual") | `a >= b` | 3.1  
[`assertLess(a, b)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertLess "unittest.TestCase.assertLess") | `a < b` | 3.1  
[`assertLessEqual(a, b)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertLessEqual "unittest.TestCase.assertLessEqual") | `a <= b` | 3.1  
[`assertRegex(s, r)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRegex "unittest.TestCase.assertRegex") | `r.search(s)` | 3.1  
[`assertNotRegex(s, r)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotRegex "unittest.TestCase.assertNotRegex") | `not r.search(s)` | 3.2  
[`assertCountEqual(a, b)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertCountEqual "unittest.TestCase.assertCountEqual") | _a_ and _b_ have the same elements in the same number, regardless of their order. | 3.2 

assertAlmostEqual(_first_ , _second_ , _places =7_, _msg =None_, _delta =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertAlmostEqual "Link to this definition")


assertNotAlmostEqual(_first_ , _second_ , _places =7_, _msg =None_, _delta =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotAlmostEqual "Link to this definition")
      
Test that _first_ and _second_ are approximately (or not approximately) equal by computing the difference, rounding to the given number of decimal _places_ (default 7), and comparing to zero. Note that these methods round the values to the given number of _decimal places_ (i.e. like the [`round()`](https://docs.python.org/3/library/functions.html#round "round") function) and not _significant digits_.
If _delta_ is supplied instead of _places_ then the difference between _first_ and _second_ must be less or equal to (or greater than) _delta_.
Supplying both _delta_ and _places_ raises a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError").
Changed in version 3.2: [`assertAlmostEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertAlmostEqual "unittest.TestCase.assertAlmostEqual") automatically considers almost equal objects that compare equal. [`assertNotAlmostEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotAlmostEqual "unittest.TestCase.assertNotAlmostEqual") automatically fails if the objects compare equal. Added the _delta_ keyword argument. 

assertGreater(_first_ , _second_ , _msg =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertGreater "Link to this definition")


assertGreaterEqual(_first_ , _second_ , _msg =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertGreaterEqual "Link to this definition")


assertLess(_first_ , _second_ , _msg =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertLess "Link to this definition")