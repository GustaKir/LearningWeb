Title: Subprocess stderr and Frequently Used Arguments
URL: https://docs.python.org/3/library/subprocess.html
Summary: The `stderr` attribute of the child process captures standard error output when using the `run()` function, being `None` if not captured. Since version 3.5, both `stdout` and `stderr` attributes are available. The `Popen` constructor offers many optional arguments, with `_args` being mandatory. Many arguments can use default values for common use cases.
---

stderr[¶](https://docs.python.org/3/library/subprocess.html#subprocess.CalledProcessError.stderr "Link to this definition")
    
Stderr output of the child process if it was captured by [`run()`](https://docs.python.org/3/library/subprocess.html#subprocess.run "subprocess.run"). Otherwise, `None`.
Changed in version 3.5: _stdout_ and _stderr_ attributes added
### Frequently Used Arguments[¶](https://docs.python.org/3/library/subprocess.html#frequently-used-arguments "Link to this heading")
To support a wide variety of use cases, the [`Popen`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen "subprocess.Popen") constructor (and the convenience functions) accept a large number of optional arguments. For most typical use cases, many of these arguments can be safely left at their default values. The arguments that are most commonly needed are:
> _args_ is required for all calls and should be a string, or a sequence of program arguments. Providing a sequence of arguments is generally preferred, as it allows the module to take care of any required escaping and quoting of arguments (e.g. to permit spaces in file names). If passing a single string, either _shell_ must be [`True`](https://docs.python.org/3/library/constants.html#True "True") (see below) or else the string must simply name the program to be executed without specifying any arguments.
> _stdin_ , _stdout_ and _stderr_ specify the executed program’s standard input, standard output and standard error file handles, respectively. Valid values are `None`, [`PIPE`](https://docs.python.org/3/library/subprocess.html#subprocess.PIPE "subprocess.PIPE"), [`DEVNULL`](https://docs.python.org/3/library/subprocess.html#subprocess.DEVNULL "subprocess.DEVNULL"), an existing file descriptor (a positive integer), and an existing [file object](https://docs.python.org/3/glossary.html#term-file-object) with a valid file descriptor. With the default settings of `None`, no redirection will occur. [`PIPE`](https://docs.python.org/3/library/subprocess.html#subprocess.PIPE "subprocess.PIPE") indicates that a new pipe to the child should be created. [`DEVNULL`](https://docs.python.org/3/library/subprocess.html#subprocess.DEVNULL "subprocess.DEVNULL") indicates that the special file [`os.devnull`](https://docs.python.org/3/library/os.html#os.devnull "os.devnull") will be used. Additionally, _stderr_ can be [`STDOUT`](https://docs.python.org/3/library/subprocess.html#subprocess.STDOUT "subprocess.STDOUT"), which indicates that the stderr data from the child process should be captured into the same file handle as for _stdout_.
> If _encoding_ or _errors_ are specified, or _text_ (also known as _universal_newlines_) is true, the file objects _stdin_ , _stdout_ and _stderr_ will be opened in text mode using the _encoding_ and _errors_ specified in the call or the defaults for [`io.TextIOWrapper`](https://docs.python.org/3/library/io.html#io.TextIOWrapper "io.TextIOWrapper").
> For _stdin_ , line ending characters `'\n'` in the input will be converted to the default line separator [`os.linesep`](https://docs.python.org/3/library/os.html#os.linesep "os.linesep"). For _stdout_ and _stderr_ , all line endings in the output will be converted to `'\n'`. For more information see the documentation of the [`io.TextIOWrapper`](https://docs.python.org/3/library/io.html#io.TextIOWrapper "io.TextIOWrapper") class when the _newline_ argument to its constructor is `None`.
> If text mode is not used, _stdin_ , _stdout_ and _stderr_ will be opened as binary streams. No encoding or line ending conversion is performed.
> Changed in version 3.6: Added the _encoding_ and _errors_ parameters.
> Changed in version 3.7: Added the _text_ parameter as an alias for _universal_newlines_.
> Note
> The newlines attribute of the file objects [`Popen.stdin`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen.stdin "subprocess.Popen.stdin"), [`Popen.stdout`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen.stdout "subprocess.Popen.stdout") and [`Popen.stderr`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen.stderr "subprocess.Popen.stderr") are not updated by the [`Popen.communicate()`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate "subprocess.Popen.communicate") method.
> If _shell_ is `True`, the specified command will be executed through the shell. This can be useful if you are using Python primarily for the enhanced control flow it offers over most system shells and still want convenient access to other shell features such as shell pipes, filename wildcards, environment variable expansion, and expansion of `~` to a user’s home directory. However, note that Python itself offers implementations of many shell-like features (in particular, [`glob`](https://docs.python.org/3/library/glob.html#module-glob "glob: Unix shell style pathname pattern expansion."), [`fnmatch`](https://docs.python.org/3/library/fnmatch.ht