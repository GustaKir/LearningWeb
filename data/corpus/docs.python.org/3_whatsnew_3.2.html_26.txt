Title: Enhancements to the unittest Module
URL: https://docs.python.org/3/whatsnew/3.2.html
Summary: The unittest module introduces improved diagnostics for test failures, including a maxDiff attribute to limit the output of diffs. Additionally, method names have been cleaned up, with assertRegex replacing the former misnamed assertRegexpMatches.
---

```

(Contributed by Raymond Hettinger.)
  * A principal feature of the unittest module is an effort to produce meaningful diagnostics when a test fails. When possible, the failure is recorded along with a diff of the output. This is especially helpful for analyzing log files of failed test runs. However, since diffs can sometime be voluminous, there is a new [`maxDiff`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.maxDiff "unittest.TestCase.maxDiff") attribute that sets maximum length of diffs displayed.
  * In addition, the method names in the module have undergone a number of clean-ups.
For example, [`assertRegex()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRegex "unittest.TestCase.assertRegex") is the new name for `assertRegexpMatches()` which was misnamed because the test uses [`re.search()`](https://docs.python.org/3/library/re.html#re.search "re.search"), not [`re.match()`](https://docs.python.org/3/library/re.html#re.match "re.match"). Other methods using regular expressions are now named using short form “Regex” in preference to “Regexp” – this matches the names used in other unittest implementations, matches Python’s old name for the [`re`](https://docs.python.org/3/library/re.html#module-re "re: Regular expression operations.") module, and it has unambiguous camel-casing.
(Contributed by Raymond Hettinger and implemented by Ezio Melotti.)
  * To improve consistency, some long-standing method aliases are being deprecated in favor of the preferred names:
> Old Name | Preferred Name  
> ---|---  
> `assert_()` | [`assertTrue()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertTrue "unittest.TestCase.assertTrue")  
> `assertEquals()` | [`assertEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertEqual "unittest.TestCase.assertEqual")  
> `assertNotEquals()` | [`assertNotEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotEqual "unittest.TestCase.assertNotEqual")  
> `assertAlmostEquals()` | [`assertAlmostEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertAlmostEqual "unittest.TestCase.assertAlmostEqual")  
> `assertNotAlmostEquals()` | [`assertNotAlmostEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotAlmostEqual "unittest.TestCase.assertNotAlmostEqual")  
Likewise, the `TestCase.fail*` methods deprecated in Python 3.1 are expected to be removed in Python 3.3.
(Contributed by Ezio Melotti; [bpo-9424](https://bugs.python.org/issue?@action=redirect&bpo=9424).)
  * The `assertDictContainsSubset()` method was deprecated because it was misimplemented with the arguments in the wrong order. This created hard-to-debug optical illusions where tests like `TestCase().assertDictContainsSubset({'a':1, 'b':2}, {'a':1})` would fail.
(Contributed by Raymond Hettinger.)