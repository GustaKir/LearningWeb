Title: doctest.OutputChecker Class
URL: https://docs.python.org/3/library/doctest.html
Summary: The doctest.OutputChecker class is designed to verify if the actual output of a doctest example matches the expected output. It includes methods for comparing outputs, specifically `check_output()` for validation and `output_difference()` for detailing discrepancies.
---

_class_ doctest.OutputChecker[¶](https://docs.python.org/3/library/doctest.html#doctest.OutputChecker "Link to this definition")
    
A class used to check the whether the actual output from a doctest example matches the expected output. [`OutputChecker`](https://docs.python.org/3/library/doctest.html#doctest.OutputChecker "doctest.OutputChecker") defines two methods: [`check_output()`](https://docs.python.org/3/library/doctest.html#doctest.OutputChecker.check_output "doctest.OutputChecker.check_output"), which compares a given pair of outputs, and returns `True` if they match; and [`output_difference()`](https://docs.python.org/3/library/doctest.html#doctest.OutputChecker.output_difference "doctest.OutputChecker.output_difference"), which returns a string describing the differences between two outputs.
[`OutputChecker`](https://docs.python.org/3/library/doctest.html#doctest.OutputChecker "doctest.OutputChecker") defines the following methods: 

check_output(_want_ , _got_ , _optionflags_)[¶](https://docs.python.org/3/library/doctest.html#doctest.OutputChecker.check_output "Link to this definition")
    
Return `True` iff the actual output from an example (_got_) matches the expected output (_want_). These strings are always considered to match if they are identical; but depending on what option flags the test runner is using, several non-exact match types are also possible. See section [Option Flags](https://docs.python.org/3/library/doctest.html#doctest-options) for more information about option flags. 

output_difference(_example_ , _got_ , _optionflags_)[¶](https://docs.python.org/3/library/doctest.html#doctest.OutputChecker.output_difference "Link to this definition")
    
Return a string describing the differences between the expected output for a given example (_example_) and the actual output (_got_). _optionflags_ is the set of option flags used to compare _want_ and _got_.
## Debugging[¶](https://docs.python.org/3/library/doctest.html#debugging "Link to this heading")
Doctest provides several mechanisms for debugging doctest examples:
  * Several functions convert doctests to executable Python programs, which can be run under the Python debugger, [`pdb`](https://docs.python.org/3/library/pdb.html#module-pdb "pdb: The Python debugger for interactive interpreters.").
  * The [`DebugRunner`](https://docs.python.org/3/library/doctest.html#doctest.DebugRunner "doctest.DebugRunner") class is a subclass of [`DocTestRunner`](https://docs.python.org/3/library/doctest.html#doctest.DocTestRunner "doctest.DocTestRunner") that raises an exception for the first failing example, containing information about that example. This information can be used to perform post-mortem debugging on the example.
  * The [`unittest`](https://docs.python.org/3/library/unittest.html#module-unittest "unittest: Unit testing framework for Python.") cases generated by [`DocTestSuite()`](https://docs.python.org/3/library/doctest.html#doctest.DocTestSuite "doctest.DocTestSuite") support the [`debug()`](https://docs.python.org/3/library/doctest.html#doctest.debug "doctest.debug") method defined by [`unittest.TestCase`](https://docs.python.org/3/library/unittest.html#unittest.TestCase "unittest.TestCase").
  * You can add a call to [`pdb.set_trace()`](https://docs.python.org/3/library/pdb.html#pdb.set_trace "pdb.set_trace") in a doctest example, and you’ll drop into the Python debugger when that line is executed. Then you can inspect current values of variables, and so on. For example, suppose `a.py` contains just this module docstring:
```
"""
>>> def f(x):
...   g(x*2)
>>> def g(x):
...   print(x+3)
...   import pdb; pdb.set_trace()
>>> f(3)
9
"""

```

Then an interactive Python session may look like this:
>>>```
>>> importa,doctest
>>> doctest.testmod(a)
--Return--
> <doctest a[1]>(3)g()->None
-> import pdb; pdb.set_trace()
(Pdb) list
 1   def g(x):
 2     print(x+3)
 3 ->   import pdb; pdb.set_trace()
[EOF]
(Pdb) p x
6
(Pdb) step
--Return--
> <doctest a[0]>(2)f()->None
-> g(x*2)
(Pdb) list
 1   def f(x):
 2 ->   g(x*2)
[EOF]
(Pdb) p x
3
(Pdb) step
--Return--
> <doctest a[2]>(1)?()->None
-> f(3)
(Pdb) cont
(0, 3)
>>>

```



Functions that convert doctests to Python code, and possibly run the synthesized code under the debugger: 

doctest.script_from_examples(_s_)[¶](https://docs.python.org/3/library/doctest.html#doctest.script_from_examples "Link to this definition")
    
Convert text with examples to a script.
Argument _s_ is a string containing doctest examples. The string is converted to a Python script, where doctest examples in _s_ are converted to regular code, and everything else is converted to Python comments. The generated script is returned as a string. For example,
```
importdoctest
print(doctest.script_from_examples(r"""
  Set x and y to 1 and 2.
  >>> x, y = 1, 2
  Print their sum:
  >>> print(x+y)
  3
"""))

```

displays: