Title: Python 3.8 New Features
URL: https://docs.python.org/3/whatsnew/3.8.html
Summary: This document outlines new features in Python 3.8, including enhancements to the `classmethod` and `staticmethod`, the introduction of `__slots__` in class definitions for attribute management, and improvements to the `io` module which adds exception logging for failures during the `close()` method in development mode.
---

lassmethod"), and [`staticmethod()`](https://docs.python.org/3/library/functions.html#staticmethod "staticmethod"):
```
classAudioClip:
  __slots__ = {'bit_rate': 'expressed in kilohertz to one decimal place',
         'duration': 'in seconds, rounded up to an integer'}
  def__init__(self, bit_rate, duration):
    self.bit_rate = round(bit_rate / 1000.0, 1)
    self.duration = ceil(duration)

```

(Contributed by Raymond Hettinger in [bpo-36326](https://bugs.python.org/issue?@action=redirect&bpo=36326).)
### io[¶](https://docs.python.org/3/whatsnew/3.8.html#io "Link to this heading")
In development mode ([`-X`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) `env`) and in [debug build](https://docs.python.org/3/using/configure.html#debug-build), the [`io.IOBase`](https://docs.python.org/3/library/io.html#io.IOBase "io.IOBase") finalizer now logs the exception if the `close()` method fails. The exception is ignored silently by default in release build. (Contributed by Victor Stinner in [bpo-18748](https://bugs.python.org/issue?@action=redirect&bpo=18748).)
### itertools[¶](https://docs.python.org/3/whatsnew/3.8.html#itertools "Link to this heading")
The [`itertools.accumulate()`](https://docs.python.org/3/library/itertools.html#itertools.accumulate "itertools.accumulate") function added an option _initial_ keyword argument to specify an initial value:
>>>```
>>> fromitertoolsimport accumulate
>>> list(accumulate([10, 5, 30, 15], initial=1000))
[1000, 1010, 1015, 1045, 1060]

```

(Contributed by Lisa Roach in [bpo-34659](https://bugs.python.org/issue?@action=redirect&bpo=34659).)
### json.tool[¶](https://docs.python.org/3/whatsnew/3.8.html#json-tool "Link to this heading")
Add option `--json-lines` to parse every input line as a separate JSON object. (Contributed by Weipeng Hong in [bpo-31553](https://bugs.python.org/issue?@action=redirect&bpo=31553).)
### logging[¶](https://docs.python.org/3/whatsnew/3.8.html#logging "Link to this heading")
Added a _force_ keyword argument to [`logging.basicConfig()`](https://docs.python.org/3/library/logging.html#logging.basicConfig "logging.basicConfig"). When set to true, any existing handlers attached to the root logger are removed and closed before carrying out the configuration specified by the other arguments.
This solves a long-standing problem. Once a logger or _basicConfig()_ had been called, subsequent calls to _basicConfig()_ were silently ignored. This made it difficult to update, experiment with, or teach the various logging configuration options using the interactive prompt or a Jupyter notebook.
(Suggested by Raymond Hettinger, implemented by Donghee Na, and reviewed by Vinay Sajip in [bpo-33897](https://bugs.python.org/issue?@action=redirect&bpo=33897).)
### math[¶](https://docs.python.org/3/whatsnew/3.8.html#math "Link to this heading")
Added new function [`math.dist()`](https://docs.python.org/3/library/math.html#math.dist "math.dist") for computing Euclidean distance between two points. (Contributed by Raymond Hettinger in [bpo-33089](https://bugs.python.org/issue?@action=redirect&bpo=33089).)
Expanded the [`math.hypot()`](https://docs.python.org/3/library/math.html#math.hypot "math.hypot") function to handle multiple dimensions. Formerly, it only supported the 2-D case. (Contributed by Raymond Hettinger in [bpo-33089](https://bugs.python.org/issue?@action=redirect&bpo=33089).)
Added new function, [`math.prod()`](https://docs.python.org/3/library/math.html#math.prod "math.prod"), as analogous function to [`sum()`](https://docs.python.org/3/library/functions.html#sum "sum") that returns the product of a ‘start’ value (default: 1) times an iterable of numbers:
>>>```
>>> prior = 0.8
>>> likelihoods = [0.625, 0.84, 0.30]
>>> math.prod(likelihoods, start=prior)
0.126

```

(Contributed by Pablo Galindo in [bpo-35606](https://bugs.python.org/issue?@action=redirect&bpo=35606).)
Added two new combinatoric functions [`math.perm()`](https://docs.python.org/3/library/math.html#math.perm "math.perm") and [`math.comb()`](https://docs.python.org/3/library/math.html#math.comb "math.comb"):
>>>```
>>> math.perm(10, 3)  # Permutations of 10 things taken 3 at a time
720
>>> math.comb(10, 3)  # Combinations of 10 things taken 3 at a time
120

```

(Contributed by Yash Aggarwal, Keller Fuchs, Serhiy Storchaka, and Raymond Hettinger in [bpo-37128](https://bugs.python.org/issue?@action=redirect&bpo=37128), [bpo-37178](https://bugs.python.org/issue?@action=redirect&bpo=37178), and [bpo-35431](https://bugs.python.org/issue?@action=redirect&bpo=35431).)
Added a new function [`math.isqrt()`](https://docs.python.org/3/library/math.html#math.isqrt "math.isqrt") for computing accurate integer square roots without conversion to floating point. The new function supports arbitrarily large integers. It is faster than `floor(sqrt(n))` but slower than [`math.sqrt()`](https://docs.python.org/3/library/math.html#math.sqrt "math.sqrt"):
>>>