Title: Performance Degradation in Child Processes Related to sys.path
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This documentation chunk discusses a performance issue in child processes linked to `sys.path`, resulting in unnecessary work for each worker. It highlights the risk of `sys.path` containing `''` instead of the expected absolute path during multiprocessing import time, which could lead to incorrect imports, although no practical incidents have been reported.
---

This manifested as a performance degration in child processes when the `sys.path` was required due to additional repeated work in every worker.
It could also have a side effect of `""` remaining in [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path") during forkserver preload imports instead of the absolute path from [`os.getcwd()`](https://docs.python.org/3/library/os.html#os.getcwd "os.getcwd") at multiprocessing import time used in the worker `sys.path`.
The `sys.path` differences between phases in the child process could potentially have caused preload to import incorrect things from the wrong location. We are unaware of that actually having happened in practice.
  * [gh-125679](https://github.com/python/cpython/issues/125679): The [`multiprocessing.Lock`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Lock "multiprocessing.Lock") and [`multiprocessing.RLock`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.RLock "multiprocessing.RLock") `repr` values no longer say “unknown” on macOS.
  * [gh-126476](https://github.com/python/cpython/issues/126476): Raise [`calendar.IllegalMonthError`](https://docs.python.org/3/library/calendar.html#calendar.IllegalMonthError "calendar.IllegalMonthError") (now a subclass of [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError "IndexError")) for [`calendar.month()`](https://docs.python.org/3/library/calendar.html#calendar.month "calendar.month") when the input month is not correct.
  * [gh-126489](https://github.com/python/cpython/issues/126489): The Python implementation of [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "pickle: Convert Python objects to streams of bytes and back.") no longer calls [`pickle.Pickler.persistent_id()`](https://docs.python.org/3/library/pickle.html#pickle.Pickler.persistent_id "pickle.Pickler.persistent_id") for the result of `persistent_id()`.
  * [gh-126313](https://github.com/python/cpython/issues/126313): Fix an issue in [`curses.napms()`](https://docs.python.org/3/library/curses.html#curses.napms "curses.napms") when [`curses.initscr()`](https://docs.python.org/3/library/curses.html#curses.initscr "curses.initscr") has not yet been called. Patch by Bénédikt Tran.
  * [gh-126303](https://github.com/python/cpython/issues/126303): Fix pickling and copying of [`os.sched_param`](https://docs.python.org/3/library/os.html#os.sched_param "os.sched_param") objects.
  * [gh-126138](https://github.com/python/cpython/issues/126138): Fix a use-after-free crash on [`asyncio.Task`](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task "asyncio.Task") objects whose underlying coroutine yields an object that implements an evil [`__getattribute__()`](https://docs.python.org/3/reference/datamodel.html#object.__getattribute__ "object.__getattribute__").