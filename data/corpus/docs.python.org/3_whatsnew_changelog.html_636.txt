Title: Python 3 Changelog Updates
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: Recent updates include fixes for reference cycles in subclasses with persistent_load(), improvements in multiprocessing when stdout/stderr are closed, adjustments in nested log adapters, proper setting of the manager property on LoggerAdapter objects, correct timeout rounding in sleep and lock acquisition methods, and a TypeError fix in traceback. Various bugs have been addressed.
---

r subclass with the persistent_load() method no longer create reference cycles.
  * [bpo-28326](https://bugs.python.org/issue?@action=redirect&bpo=28326): Fix multiprocessing.Process when stdout and/or stderr is closed or None.
  * [bpo-31457](https://bugs.python.org/issue?@action=redirect&bpo=31457): If nested log adapters are used, the inner `process()` methods are no longer omitted.
  * [bpo-31457](https://bugs.python.org/issue?@action=redirect&bpo=31457): The `manager` property on LoggerAdapter objects is now properly settable.
  * [bpo-31806](https://bugs.python.org/issue?@action=redirect&bpo=31806): Fix timeout rounding in time.sleep(), threading.Lock.acquire() and socket.socket.settimeout() to round correctly negative timeouts between -1.0 and 0.0. The functions now block waiting for events as expected. Previously, the call was incorrectly non-blocking. Patch by Pablo Galindo.
  * [bpo-28603](https://bugs.python.org/issue?@action=redirect&bpo=28603): traceback: Fix a TypeError that occurred during printing of exception tracebacks when either the current exception or an exception in its context/cause chain is unhashable. Patch by Zane Bitter.
  * [bpo-30058](https://bugs.python.org/issue?@action=redirect&bpo=30058): Fixed buffer overflow in select.kqueue.control().
  * [bpo-31770](https://bugs.python.org/issue?@action=redirect&bpo=31770): Prevent a crash when calling the `__init__()` method of a `sqlite3.Cursor` object more than once. Patch by Oren Milman.
  * [bpo-31672](https://bugs.python.org/issue?@action=redirect&bpo=31672): `idpattern` in `string.Template` matched some non-ASCII characters. Now it uses `-i` regular expression local flag to avoid non-ASCII characters.
  * [bpo-31764](https://bugs.python.org/issue?@action=redirect&bpo=31764): Prevent a crash in `sqlite3.Cursor.close()` in case the `Cursor` object is uninitialized. Patch by Oren Milman.
  * [bpo-31752](https://bugs.python.org/issue?@action=redirect&bpo=31752): Fix possible crash in timedelta constructor called with custom integers.
  * [bpo-31701](https://bugs.python.org/issue?@action=redirect&bpo=31701): On Windows, faulthandler.enable() now ignores MSC and COM exceptions.
  * [bpo-31728](https://bugs.python.org/issue?@action=redirect&bpo=31728): Prevent crashes in `_elementtree` due to unsafe cleanup of `Element.text` and `Element.tail`. Patch by Oren Milman.
  * [bpo-31620](https://bugs.python.org/issue?@action=redirect&bpo=31620): an empty asyncio.Queue now doesn’t leak memory when queue.get pollers timeout
  * [bpo-31632](https://bugs.python.org/issue?@action=redirect&bpo=31632): Fix method set_protocol() of class _SSLProtocolTransport in asyncio module. This method was previously modifying a wrong reference to the protocol.
  * [bpo-31675](https://bugs.python.org/issue?@action=redirect&bpo=31675): Fixed memory leaks in Tkinter’s methods splitlist() and split() when pass a string larger than 2 GiB.
  * [bpo-31673](https://bugs.python.org/issue?@action=redirect&bpo=31673): Fixed typo in the name of Tkinter’s method adderrorinfo().
  * [bpo-30806](https://bugs.python.org/issue?@action=redirect&bpo=30806): Fix the string representation of a netrc object.
  * [bpo-15037](https://bugs.python.org/issue?@action=redirect&bpo=15037): Added a workaround for getkey() in curses for ncurses 5.7 and earlier.
  * [bpo-25351](https://bugs.python.org/issue?@action=redirect&bpo=25351): Avoid venv activate failures with undefined variables
  * [bpo-25532](https://bugs.python.org/issue?@action=redirect&bpo=25532): inspect.unwrap() will now only try to unwrap an object sys.getrecursionlimit() times, to protect against objects which create a new object on every attribute access.
  * [bpo-30347](https://bugs.python.org/issue?@action=redirect&bpo=30347): Stop crashes when concurrently iterate over itertools.groupby() iterators.
  * [bpo-31516](https://bugs.python.org/issue?@action=redirect&bpo=31516): `threading.current_thread()` should not return a dummy thread at shutdown.
  * [bpo-31351](https://bugs.python.org/issue?@action=redirect&bpo=31351): python -m ensurepip now exits with non-zero exit code if pip bootstrapping has failed.
  * [bpo-31482](https://bugs.python.org/issue?@action=redirect&bpo=31482): `random.seed()` now works with bytes in version=1
  * [bpo-31334](https://bugs.python.org/issue?@action=redirect&bpo=31334): Fix `poll.poll([timeout])` in the `select` module for arbitrary negative timeouts on all OSes where it can only be a non-negative integer or -1. Patch by Riccardo Coccioli.
  * [bpo-31310](https://bugs.python.org/issue?@action=redirect&bpo=31310): multiprocessing’s semaphore tracker should be launched again if crashed.
  * [bpo-31308](https://bugs.python.org/issue?@action=redirect&bpo=31308): Make multiprocessing’s forkserver process immune to Ctrl-C and other user interruptions. If it crashes, restart it when necessary.