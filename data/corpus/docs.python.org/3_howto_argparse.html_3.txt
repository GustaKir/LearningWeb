Title: Using the argparse Library
URL: https://docs.python.org/3/howto/argparse.html
Summary: This section discusses the usage of the argparse library for managing command-line options in Python programs. It highlights the use of flags without values, implements the 'store_true' action for boolean flags, and provides examples of command-line behavior, including error messages for unrecognized arguments and the display of help options.
---

```
$ pythonprog.py--verbose
verbosity turned on
$ pythonprog.py--verbose1
usage: prog.py [-h] [--verbose]
prog.py: error: unrecognized arguments: 1
$ pythonprog.py--help
usage: prog.py [-h] [--verbose]
options:
 -h, --help show this help message and exit
 --verbose  increase output verbosity

```

Here is what is happening:
  * The option is now more of a flag than something that requires a value. We even changed the name of the option to match that idea. Note that we now specify a new keyword, `action`, and give it the value `"store_true"`. This means that, if the option is specified, assign the value `True` to `args.verbose`. Not specifying it implies `False`.
  * It complains when you specify a value, in true spirit of what flags actually are.
  * Notice the different help text.


### Short options[¶](https://docs.python.org/3/howto/argparse.html#short-options "Link to this heading")
If you are familiar with command line usage, you will notice that I haven’t yet touched on the topic of short versions of the options. It’s quite simple:
```
importargparse
parser = argparse.ArgumentParser()
parser.add_argument("-v", "--verbose", help="increase output verbosity",
          action="store_true")
args = parser.parse_args()
if args.verbose:
  print("verbosity turned on")

```

And here goes:
```
$ pythonprog.py-v
verbosity turned on
$ pythonprog.py--help
usage: prog.py [-h] [-v]
options:
 -h, --help   show this help message and exit
 -v, --verbose increase output verbosity

```

Note that the new ability is also reflected in the help text.
## Combining Positional and Optional arguments[¶](https://docs.python.org/3/howto/argparse.html#combining-positional-and-optional-arguments "Link to this heading")
Our program keeps growing in complexity:
```
importargparse
parser = argparse.ArgumentParser()
parser.add_argument("square", type=int,
          help="display a square of a given number")
parser.add_argument("-v", "--verbose", action="store_true",
          help="increase output verbosity")
args = parser.parse_args()
answer = args.square**2
if args.verbose:
  print(f"the square of {args.square} equals {answer}")
else:
  print(answer)

```

And now the output:
```
$ pythonprog.py
usage: prog.py [-h] [-v] square
prog.py: error: the following arguments are required: square
$ pythonprog.py4
16
$ pythonprog.py4--verbose
the square of 4 equals 16
$ pythonprog.py--verbose4
the square of 4 equals 16

```

  * We’ve brought back a positional argument, hence the complaint.
  * Note that the order does not matter.


How about we give this program of ours back the ability to have multiple verbosity values, and actually get to use them:
```
importargparse
parser = argparse.ArgumentParser()
parser.add_argument("square", type=int,
          help="display a square of a given number")
parser.add_argument("-v", "--verbosity", type=int,
          help="increase output verbosity")
args = parser.parse_args()
answer = args.square**2
if args.verbosity == 2:
  print(f"the square of {args.square} equals {answer}")
elif args.verbosity == 1:
  print(f"{args.square}^2 == {answer}")
else:
  print(answer)

```

And the output:
```
$ pythonprog.py4
16
$ pythonprog.py4-v
usage: prog.py [-h] [-v VERBOSITY] square
prog.py: error: argument -v/--verbosity: expected one argument
$ pythonprog.py4-v1
4^2 == 16
$ pythonprog.py4-v2
the square of 4 equals 16
$ pythonprog.py4-v3
16

```

These all look good except the last one, which exposes a bug in our program. Let’s fix it by restricting the values the `--verbosity` option can accept:
```
importargparse
parser = argparse.ArgumentParser()
parser.add_argument("square", type=int,
          help="display a square of a given number")
parser.add_argument("-v", "--verbosity", type=int, choices=[0, 1, 2],
          help="increase output verbosity")
args = parser.parse_args()
answer = args.square**2
if args.verbosity == 2:
  print(f"the square of {args.square} equals {answer}")
elif args.verbosity == 1:
  print(f"{args.square}^2 == {answer}")
else:
  print(answer)

```

And the output:
```
$ pythonprog.py4-v3
usage: prog.py [-h] [-v {0,1,2}] square
prog.py: error: argument -v/--verbosity: invalid choice: 3 (choose from 0, 1, 2)
$ pythonprog.py4-h
usage: prog.py [-h] [-v {0,1,2}] square
positional arguments:
 square        display a square of a given number
options:
 -h, --help      show this help message and exit
 -v, --verbosity {0,1,2}
            increase output verbosity

```

Note that the change also reflects both in the error message as well as the help string.
Now, let’s use a different approach of playing with verbosity, which is pretty common. It also matches the way the CPython executable handles its own verbosity argument (check the output of `python --help`):