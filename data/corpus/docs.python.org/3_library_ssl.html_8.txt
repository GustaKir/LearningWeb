Title: SSL Protocol Versions in Python
URL: https://docs.python.org/3/library/ssl.html
Summary: This section outlines various SSL protocol constants available in Python's ssl module. `PROTOCOL_TLS_SERVER` automatically negotiates the highest protocol version for server-side connections, while `PROTOCOL_SSLv23` is an alias for `PROTOCOL_TLS` and is deprecated. Additionally, `PROTOCOL_SSLv3` selects SSL version 3, which is highly discouraged due to known security vulnerabilities and is also deprecated.
---

ssl.PROTOCOL_TLS_SERVER[¶](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS_SERVER "Link to this definition")
    
Auto-negotiate the highest protocol version that both the client and server support, and configure the context server-side connections.
Added in version 3.6. 

ssl.PROTOCOL_SSLv23[¶](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_SSLv23 "Link to this definition")
    
Alias for [`PROTOCOL_TLS`](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS "ssl.PROTOCOL_TLS").
Deprecated since version 3.6: Use [`PROTOCOL_TLS`](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS "ssl.PROTOCOL_TLS") instead. 

ssl.PROTOCOL_SSLv3[¶](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_SSLv3 "Link to this definition")
    
Selects SSL version 3 as the channel encryption protocol.
This protocol is not available if OpenSSL is compiled with the `no-ssl3` option.
Warning
SSL version 3 is insecure. Its use is highly discouraged.
Deprecated since version 3.6: OpenSSL has deprecated all version specific protocols. Use the default protocol [`PROTOCOL_TLS_SERVER`](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS_SERVER "ssl.PROTOCOL_TLS_SERVER") or [`PROTOCOL_TLS_CLIENT`](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS_CLIENT "ssl.PROTOCOL_TLS_CLIENT") with [`SSLContext.minimum_version`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.minimum_version "ssl.SSLContext.minimum_version") and [`SSLContext.maximum_version`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.maximum_version "ssl.SSLContext.maximum_version") instead. 

ssl.PROTOCOL_TLSv1[¶](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLSv1 "Link to this definition")
    
Selects TLS version 1.0 as the channel encryption protocol.
Deprecated since version 3.6: OpenSSL has deprecated all version specific protocols. 

ssl.PROTOCOL_TLSv1_1[¶](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLSv1_1 "Link to this definition")
    
Selects TLS version 1.1 as the channel encryption protocol. Available only with openssl version 1.0.1+.
Added in version 3.4.
Deprecated since version 3.6: OpenSSL has deprecated all version specific protocols. 

ssl.PROTOCOL_TLSv1_2[¶](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLSv1_2 "Link to this definition")
    
Selects TLS version 1.2 as the channel encryption protocol. Available only with openssl version 1.0.1+.
Added in version 3.4.
Deprecated since version 3.6: OpenSSL has deprecated all version specific protocols. 

ssl.OP_ALL[¶](https://docs.python.org/3/library/ssl.html#ssl.OP_ALL "Link to this definition")
    
Enables workarounds for various bugs present in other SSL implementations. This option is set by default. It does not necessarily set the same flags as OpenSSL’s `SSL_OP_ALL` constant.
Added in version 3.2. 

ssl.OP_NO_SSLv2[¶](https://docs.python.org/3/library/ssl.html#ssl.OP_NO_SSLv2 "Link to this definition")
    
Prevents an SSLv2 connection. This option is only applicable in conjunction with [`PROTOCOL_TLS`](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS "ssl.PROTOCOL_TLS"). It prevents the peers from choosing SSLv2 as the protocol version.
Added in version 3.2.
Deprecated since version 3.6: SSLv2 is deprecated 

ssl.OP_NO_SSLv3[¶](https://docs.python.org/3/library/ssl.html#ssl.OP_NO_SSLv3 "Link to this definition")
    
Prevents an SSLv3 connection. This option is only applicable in conjunction with [`PROTOCOL_TLS`](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS "ssl.PROTOCOL_TLS"). It prevents the peers from choosing SSLv3 as the protocol version.
Added in version 3.2.
Deprecated since version 3.6: SSLv3 is deprecated 

ssl.OP_NO_TLSv1[¶](https://docs.python.org/3/library/ssl.html#ssl.OP_NO_TLSv1 "Link to this definition")
    
Prevents a TLSv1 connection. This option is only applicable in conjunction with [`PROTOCOL_TLS`](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS "ssl.PROTOCOL_TLS"). It prevents the peers from choosing TLSv1 as the protocol version.
Added in version 3.2.
Deprecated since version 3.7: The option is deprecated since OpenSSL 1.1.0, use the new [`SSLContext.minimum_version`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.minimum_version "ssl.SSLContext.minimum_version") and [`SSLContext.maximum_version`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.maximum_version "ssl.SSLContext.maximum_version") instead. 

ssl.OP_NO_TLSv1_1[¶](https://docs.python.org/3/library/ssl.html#ssl.OP_NO_TLSv1_1 "Link to this definition")
    
Prevents a TLSv1.1 connection. This option is only applicable in conjunction with [`PROTOCOL_TLS`](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS "ssl.PROTOCOL_TLS"). It prevents the peers from choosing TLSv1.1 as the protocol version. Available only with openssl version 1.0.1+.
Added in version 3.4.
Deprecated since version 3.7: The option is deprecated since OpenSSL 1.1.0.