Title: Python 3.7 Release Notes
URL: https://docs.python.org/3/whatsnew/3.7.html
Summary: The release notes for Python 3.7 highlight key changes, including the behavior of socket types on OSes that support non-blocking and close-on-exec flags, ensuring that type checks work consistently across platforms. Additionally, the default value for the _close_fds_ argument in subprocess.Popen was changed from False to True on Windows.
---

(Contributed by Jesse Bakker in [bpo-32121](https://bugs.python.org/issue?@action=redirect&bpo=32121).)
  * On OSes that support [`socket.SOCK_NONBLOCK`](https://docs.python.org/3/library/socket.html#socket.SOCK_NONBLOCK "socket.SOCK_NONBLOCK") or [`socket.SOCK_CLOEXEC`](https://docs.python.org/3/library/socket.html#socket.SOCK_CLOEXEC "socket.SOCK_CLOEXEC") bit flags, the [`socket.type`](https://docs.python.org/3/library/socket.html#socket.socket.type "socket.socket.type") no longer has them applied. Therefore, checks like `if sock.type == socket.SOCK_STREAM` work as expected on all platforms. (Contributed by Yury Selivanov in [bpo-32331](https://bugs.python.org/issue?@action=redirect&bpo=32331).)
  * On Windows the default for the _close_fds_ argument of [`subprocess.Popen`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen "subprocess.Popen") was changed from [`False`](https://docs.python.org/3/library/constants.html#False "False") to [`True`](https://docs.python.org/3/library/constants.html#True "True") when redirecting the standard handles. If you previously depended on handles being inherited when using [`subprocess.Popen`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen "subprocess.Popen") with standard io redirection, you will have to pass `close_fds=False` to preserve the previous behaviour, or use [`STARTUPINFO.lpAttributeList`](https://docs.python.org/3/library/subprocess.html#subprocess.STARTUPINFO.lpAttributeList "subprocess.STARTUPINFO.lpAttributeList").
  * [`importlib.machinery.PathFinder.invalidate_caches()`](https://docs.python.org/3/library/importlib.html#importlib.machinery.PathFinder.invalidate_caches "importlib.machinery.PathFinder.invalidate_caches") – which implicitly affects [`importlib.invalidate_caches()`](https://docs.python.org/3/library/importlib.html#importlib.invalidate_caches "importlib.invalidate_caches") – now deletes entries in [`sys.path_importer_cache`](https://docs.python.org/3/library/sys.html#sys.path_importer_cache "sys.path_importer_cache") which are set to `None`. (Contributed by Brett Cannon in [bpo-33169](https://bugs.python.org/issue?@action=redirect&bpo=33169).)
  * In [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O."), [`loop.sock_recv()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.sock_recv "asyncio.loop.sock_recv"), [`loop.sock_sendall()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.sock_sendall "asyncio.loop.sock_sendall"), [`loop.sock_accept()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.sock_accept "asyncio.loop.sock_accept"), [`loop.getaddrinfo()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.getaddrinfo "asyncio.loop.getaddrinfo"), [`loop.getnameinfo()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.getnameinfo "asyncio.loop.getnameinfo") have been changed to be proper coroutine methods to match their documentation. Previously, these methods returned [`asyncio.Future`](https://docs.python.org/3/library/asyncio-future.html#asyncio.Future "asyncio.Future") instances. (Contributed by Yury Selivanov in [bpo-32327](https://bugs.python.org/issue?@action=redirect&bpo=32327).)
  * [`asyncio.Server.sockets`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Server.sockets "asyncio.Server.sockets") now returns a copy of the internal list of server sockets, instead of returning it directly. (Contributed by Yury Selivanov in [bpo-32662](https://bugs.python.org/issue?@action=redirect&bpo=32662).)
  * [`Struct.format`](https://docs.python.org/3/library/struct.html#struct.Struct.format "struct.Struct.format") is now a [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") instance instead of a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") instance. (Contributed by Victor Stinner in [bpo-21071](https://bugs.python.org/issue?@action=redirect&bpo=21071).)
  * [`argparse`](https://docs.python.org/3/library/argparse.html#module-argparse "argparse: Command-line option and argument parsing library.") subparsers can now be made mandatory by passing `required=True` to [`ArgumentParser.add_subparsers()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_subparsers "argparse.ArgumentParser.add_subparsers"). (Contributed by Anthony Sottile in [bpo-26510](https://bugs.python.org/issue?@action=redirect&bpo=26510).)
  * [`ast.literal_eval()`](https://docs.python.org/3/library/ast.html#ast.literal_eval "ast.literal_eval") is now stricter. Addition and subtraction of arbitrary numbers are no longer allowed.