Title: Command Line Options for AST Module
URL: https://docs.python.org/3/library/ast.html
Summary: This section lists the command line options for the AST module, including help messages, mode specification, type comment parsing, attribute inclusion, and indentation settings.
---

```

The following options are accepted: 

-h, --help[¶](https://docs.python.org/3/library/ast.html#cmdoption-ast-h "Link to this definition")
    
Show the help message and exit. 

-m <mode>[¶](https://docs.python.org/3/library/ast.html#cmdoption-ast-m "Link to this definition")


--mode <mode>[¶](https://docs.python.org/3/library/ast.html#cmdoption-ast-mode "Link to this definition")
    
Specify what kind of code must be compiled, like the _mode_ argument in [`parse()`](https://docs.python.org/3/library/ast.html#ast.parse "ast.parse"). 

--no-type-comments[¶](https://docs.python.org/3/library/ast.html#cmdoption-ast-no-type-comments "Link to this definition")
    
Don’t parse type comments. 

-a, --include-attributes[¶](https://docs.python.org/3/library/ast.html#cmdoption-ast-a "Link to this definition")
    
Include attributes such as line numbers and column offsets. 

-i <indent>[¶](https://docs.python.org/3/library/ast.html#cmdoption-ast-i "Link to this definition")


--indent <indent>[¶](https://docs.python.org/3/library/ast.html#cmdoption-ast-indent "Link to this definition")
    
Indentation of nodes in AST (number of spaces).
If `infile` is specified its contents are parsed to AST and dumped to stdout. Otherwise, the content is read from stdin.
See also
[Green Tree Snakes](https://greentreesnakes.readthedocs.io/), an external documentation resource, has good details on working with Python ASTs.
[ASTTokens](https://asttokens.readthedocs.io/en/latest/user-guide.html) annotates Python ASTs with the positions of tokens and text in the source code that generated them. This is helpful for tools that make source code transformations.
[leoAst.py](https://leo-editor.github.io/leo-editor/appendices.html#leoast-py) unifies the token-based and parse-tree-based views of python programs by inserting two-way links between tokens and ast nodes.
[LibCST](https://libcst.readthedocs.io/) parses code as a Concrete Syntax Tree that looks like an ast tree and keeps all formatting details. It’s useful for building automated refactoring (codemod) applications and linters.
[Parso](https://parso.readthedocs.io) is a Python parser that supports error recovery and round-trip parsing for different Python versions (in multiple Python versions). Parso is also able to list multiple syntax errors in your Python file.
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [`ast` — Abstract Syntax Trees](https://docs.python.org/3/library/ast.html)
    * [Abstract Grammar](https://docs.python.org/3/library/ast.html#abstract-grammar)
    * [Node classes](https://docs.python.org/3/library/ast.html#node-classes)
      * [Root nodes](https://docs.python.org/3/library/ast.html#root-nodes)
      * [Literals](https://docs.python.org/3/library/ast.html#literals)
      * [Variables](https://docs.python.org/3/library/ast.html#variables)
      * [Expressions](https://docs.python.org/3/library/ast.html#expressions)
        * [Subscripting](https://docs.python.org/3/library/ast.html#subscripting)
        * [Comprehensions](https://docs.python.org/3/library/ast.html#comprehensions)
      * [Statements](https://docs.python.org/3/library/ast.html#statements)
        * [Imports](https://docs.python.org/3/library/ast.html#imports)
      * [Control flow](https://docs.python.org/3/library/ast.html#control-flow)
      * [Pattern matching](https://docs.python.org/3/library/ast.html#pattern-matching)
      * [Type parameters](https://docs.python.org/3/library/ast.html#type-parameters)
      * [Function and class definitions](https://docs.python.org/3/library/ast.html#function-and-class-definitions)
      * [Async and await](https://docs.python.org/3/library/ast.html#async-and-await)
    * [`ast` Helpers](https://docs.python.org/3/library/ast.html#ast-helpers)
    * [Compiler Flags](https://docs.python.org/3/library/ast.html#compiler-flags)
    * [Command-Line Usage](https://docs.python.org/3/library/ast.html#command-line-usage)


#### Previous topic
[Python Language Services](https://docs.python.org/3/library/language.html "previous chapter")
#### Next topic
[`symtable` — Access to the compiler’s symbol tables](https://docs.python.org/3/library/symtable.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/ast.rst)