Title: Datetime Module Overview: Instance Methods and Changes
URL: https://docs.python.org/3/library/datetime.html
Summary: This section discusses the `time.replace` method added in Python 3.7 and updated in 3.11. It describes how this method can create a new `time` instance with updated values, including the ability to specify `tzinfo=None` to convert an aware `time` to a naive one.
---

```

Added in version 3.7.
Changed in version 3.11: Previously, this method only supported formats that could be emitted by [`time.isoformat()`](https://docs.python.org/3/library/datetime.html#datetime.time.isoformat "datetime.time.isoformat").
Instance methods: 

time.replace(_hour =self.hour_, _minute =self.minute_, _second =self.second_, _microsecond =self.microsecond_, _tzinfo =self.tzinfo_, _*_ , _fold =0_)[¶](https://docs.python.org/3/library/datetime.html#datetime.time.replace "Link to this definition")
    
Return a new [`time`](https://docs.python.org/3/library/datetime.html#datetime.time "datetime.time") with the same values, but with specified parameters updated. Note that `tzinfo=None` can be specified to create a naive [`time`](https://docs.python.org/3/library/datetime.html#datetime.time "datetime.time") from an aware [`time`](https://docs.python.org/3/library/datetime.html#datetime.time "datetime.time"), without conversion of the time data.
[`time`](https://docs.python.org/3/library/datetime.html#datetime.time "datetime.time") objects are also supported by generic function [`copy.replace()`](https://docs.python.org/3/library/copy.html#copy.replace "copy.replace").
Changed in version 3.6: Added the _fold_ parameter. 

time.isoformat(_timespec ='auto'_)[¶](https://docs.python.org/3/library/datetime.html#datetime.time.isoformat "Link to this definition")
    
Return a string representing the time in ISO 8601 format, one of:
  * `HH:MM:SS.ffffff`, if [`microsecond`](https://docs.python.org/3/library/datetime.html#datetime.time.microsecond "datetime.time.microsecond") is not 0
  * `HH:MM:SS`, if [`microsecond`](https://docs.python.org/3/library/datetime.html#datetime.time.microsecond "datetime.time.microsecond") is 0
  * `HH:MM:SS.ffffff+HH:MM[:SS[.ffffff]]`, if [`utcoffset()`](https://docs.python.org/3/library/datetime.html#datetime.time.utcoffset "datetime.time.utcoffset") does not return `None`
  * `HH:MM:SS+HH:MM[:SS[.ffffff]]`, if [`microsecond`](https://docs.python.org/3/library/datetime.html#datetime.time.microsecond "datetime.time.microsecond") is 0 and [`utcoffset()`](https://docs.python.org/3/library/datetime.html#datetime.time.utcoffset "datetime.time.utcoffset") does not return `None`


The optional argument _timespec_ specifies the number of additional components of the time to include (the default is `'auto'`). It can be one of the following:
  * `'auto'`: Same as `'seconds'` if [`microsecond`](https://docs.python.org/3/library/datetime.html#datetime.time.microsecond "datetime.time.microsecond") is 0, same as `'microseconds'` otherwise.
  * `'hours'`: Include the [`hour`](https://docs.python.org/3/library/datetime.html#datetime.time.hour "datetime.time.hour") in the two-digit `HH` format.
  * `'minutes'`: Include [`hour`](https://docs.python.org/3/library/datetime.html#datetime.time.hour "datetime.time.hour") and [`minute`](https://docs.python.org/3/library/datetime.html#datetime.time.minute "datetime.time.minute") in `HH:MM` format.
  * `'seconds'`: Include [`hour`](https://docs.python.org/3/library/datetime.html#datetime.time.hour "datetime.time.hour"), [`minute`](https://docs.python.org/3/library/datetime.html#datetime.time.minute "datetime.time.minute"), and [`second`](https://docs.python.org/3/library/datetime.html#datetime.time.second "datetime.time.second") in `HH:MM:SS` format.
  * `'milliseconds'`: Include full time, but truncate fractional second part to milliseconds. `HH:MM:SS.sss` format.
  * `'microseconds'`: Include full time in `HH:MM:SS.ffffff` format.


Note
Excluded time components are truncated, not rounded.
[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") will be raised on an invalid _timespec_ argument.
Example:
>>>```
>>> fromdatetimeimport time
>>> time(hour=12, minute=34, second=56, microsecond=123456).isoformat(timespec='minutes')
'12:34'
>>> dt = time(hour=12, minute=34, second=56, microsecond=0)
>>> dt.isoformat(timespec='microseconds')
'12:34:56.000000'
>>> dt.isoformat(timespec='auto')
'12:34:56'