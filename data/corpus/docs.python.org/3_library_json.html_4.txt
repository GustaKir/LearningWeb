Title: json.dumps() Function
URL: https://docs.python.org/3/library/json.html
Summary: The json.dumps() function serializes a Python object to a JSON formatted string. It accepts various parameters to control the serialization process, similar to the dump() function. Notably, JSON keys are always strings, which may affect the equality of dictionaries when converted to and from JSON.
---

json.dumps(_obj_ , _*_ , _skipkeys =False_, _ensure_ascii =True_, _check_circular =True_, _allow_nan =True_, _cls =None_, _indent =None_, _separators =None_, _default =None_, _sort_keys =False_, _** kw_)[¶](https://docs.python.org/3/library/json.html#json.dumps "Link to this definition")
    
Serialize _obj_ to a JSON formatted [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") using this [conversion table](https://docs.python.org/3/library/json.html#py-to-json-table). The arguments have the same meaning as in [`dump()`](https://docs.python.org/3/library/json.html#json.dump "json.dump").
Note
Keys in key/value pairs of JSON are always of the type [`str`](https://docs.python.org/3/library/stdtypes.html#str "str"). When a dictionary is converted into JSON, all the keys of the dictionary are coerced to strings. As a result of this, if a dictionary is converted into JSON and then back into a dictionary, the dictionary may not equal the original one. That is, `loads(dumps(x)) != x` if x has non-string keys. 

json.load(_fp_ , _*_ , _cls =None_, _object_hook =None_, _parse_float =None_, _parse_int =None_, _parse_constant =None_, _object_pairs_hook =None_, _** kw_)[¶](https://docs.python.org/3/library/json.html#json.load "Link to this definition")
    
Deserialize _fp_ to a Python object using the [JSON-to-Python conversion table](https://docs.python.org/3/library/json.html#json-to-py-table). 

Parameters:
    
  * **fp** ([file-like object](https://docs.python.org/3/glossary.html#term-file-like-object)) – A `.read()`-supporting [text file](https://docs.python.org/3/glossary.html#term-text-file) or [binary file](https://docs.python.org/3/glossary.html#term-binary-file) containing the JSON document to be deserialized.
  * **cls** (a [`JSONDecoder`](https://docs.python.org/3/library/json.html#json.JSONDecoder "json.JSONDecoder") subclass) – If set, a custom JSON decoder. Additional keyword arguments to `load()` will be passed to the constructor of _cls_. If `None` (the default), `JSONDecoder` is used.
  * **object_hook** ([callable](https://docs.python.org/3/glossary.html#term-callable) | None) – If set, a function that is called with the result of any object literal decoded (a [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict")). The return value of this function will be used instead of the [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict"). This feature can be used to implement custom decoders, for example [JSON-RPC](https://www.jsonrpc.org) class hinting. Default `None`.
  * **object_pairs_hook** ([callable](https://docs.python.org/3/glossary.html#term-callable) | None) – If set, a function that is called with the result of any object literal decoded with an ordered list of pairs. The return value of this function will be used instead of the [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict"). This feature can be used to implement custom decoders. If _object_hook_ is also set, _object_pairs_hook_ takes priority. Default `None`.
  * **parse_float** ([callable](https://docs.python.org/3/glossary.html#term-callable) | None) – If set, a function that is called with the string of every JSON float to be decoded. If `None` (the default), it is equivalent to `float(num_str)`. This can be used to parse JSON floats into custom datatypes, for example [`decimal.Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal").
  * **parse_int** ([callable](https://docs.python.org/3/glossary.html#term-callable) | None) – If set, a function that is called with the string of every JSON int to be decoded. If `None` (the default), it is equivalent to `int(num_str)`. This can be used to parse JSON integers into custom datatypes, for example [`float`](https://docs.python.org/3/library/functions.html#float "float").
  * **parse_constant** ([callable](https://docs.python.org/3/glossary.html#term-callable) | None) – If set, a function that is called with one of the following strings: `'-Infinity'`, `'Infinity'`, or `'NaN'`. This can be used to raise an exception if invalid JSON numbers are encountered. Default `None`.



Raises:
    
  * [**JSONDecodeError**](https://docs.python.org/3/library/json.html#json.JSONDecodeError "json.JSONDecodeError") – When the data being deserialized is not a valid JSON document.
  * [**UnicodeDecodeError**](https://docs.python.org/3/library/exceptions.html#UnicodeDecodeError "UnicodeDecodeError") – When the data being deserialized does not contain UTF-8, UTF-16 or UTF-32 encoded data.


Changed in version 3.1: 
  * Added the optional _object_pairs_hook_ parameter.
  * _parse_constant_ doesn’t get called on ‘null’, ‘true’, ‘false’ anymore.