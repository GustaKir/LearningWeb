Title: Update on Calendar Module in Python 3.7
URL: https://docs.python.org/3/whatsnew/3.7.html
Summary: Python 3.7 introduces changes to the `Calendar` module. The method `Calendar.itermonthdates` now raises exceptions for dates outside the range of `0001-01-01` to `9999-12-31`. To handle applications needing consistent outputs, new methods `Calendar.itermonthdays3` and `Calendar.itermonthdays4` have been added, which return tuples and are not bound by the date range limitations of `datetime.date`.
---

(Contributed by Serhiy Storchaka in [bpo-31778](https://bugs.python.org/issue?@action=redirect&bpo=31778).)
  * [`Calendar.itermonthdates`](https://docs.python.org/3/library/calendar.html#calendar.Calendar.itermonthdates "calendar.Calendar.itermonthdates") will now consistently raise an exception when a date falls outside of the `0001-01-01` through `9999-12-31` range. To support applications that cannot tolerate such exceptions, the new [`Calendar.itermonthdays3`](https://docs.python.org/3/library/calendar.html#calendar.Calendar.itermonthdays3 "calendar.Calendar.itermonthdays3") and [`Calendar.itermonthdays4`](https://docs.python.org/3/library/calendar.html#calendar.Calendar.itermonthdays4 "calendar.Calendar.itermonthdays4") can be used. The new methods return tuples and are not restricted by the range supported by [`datetime.date`](https://docs.python.org/3/library/datetime.html#datetime.date "datetime.date"). (Contributed by Alexander Belopolsky in [bpo-28292](https://bugs.python.org/issue?@action=redirect&bpo=28292).)
  * [`collections.ChainMap`](https://docs.python.org/3/library/collections.html#collections.ChainMap "collections.ChainMap") now preserves the order of the underlying mappings. (Contributed by Raymond Hettinger in [bpo-32792](https://bugs.python.org/issue?@action=redirect&bpo=32792).)
  * The `submit()` method of [`concurrent.futures.ThreadPoolExecutor`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor "concurrent.futures.ThreadPoolExecutor") and [`concurrent.futures.ProcessPoolExecutor`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor "concurrent.futures.ProcessPoolExecutor") now raises a [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError") if called during interpreter shutdown. (Contributed by Mark Nemec in [bpo-33097](https://bugs.python.org/issue?@action=redirect&bpo=33097).)
  * The [`configparser.ConfigParser`](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser "configparser.ConfigParser") constructor now uses `read_dict()` to process the default values, making its behavior consistent with the rest of the parser. Non-string keys and values in the defaults dictionary are now being implicitly converted to strings. (Contributed by James Tocknell in [bpo-23835](https://bugs.python.org/issue?@action=redirect&bpo=23835).)
  * Several undocumented internal imports were removed. One example is that `os.errno` is no longer available; use `import errno` directly instead. Note that such undocumented internal imports may be removed any time without notice, even in micro version releases.