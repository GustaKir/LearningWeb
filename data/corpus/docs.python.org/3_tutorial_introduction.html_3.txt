Title: Introduction to Strings in Python
URL: https://docs.python.org/3/tutorial/introduction.html
Summary: This section discusses creating new strings by manipulating existing ones, demonstrating with examples. It introduces the built-in function `len()` for obtaining string length and emphasizes that strings are sequence types supporting a variety of common operations. Additional references include string methods, f-strings for embedded expressions, and formatting syntax.
---

```

If you need a different string, you should create a new one:
>>>```
>>> 'J' + word[1:]
'Jython'
>>> word[:2] + 'py'
'Pypy'

```

The built-in function [`len()`](https://docs.python.org/3/library/functions.html#len "len") returns the length of a string:
>>>```
>>> s = 'supercalifragilisticexpialidocious'
>>> len(s)
34

```

See also 

[Text Sequence Type — str](https://docs.python.org/3/library/stdtypes.html#textseq)
    
Strings are examples of _sequence types_ , and support the common operations supported by such types. 

[String Methods](https://docs.python.org/3/library/stdtypes.html#string-methods)
    
Strings support a large number of methods for basic transformations and searching. 

[f-strings](https://docs.python.org/3/reference/lexical_analysis.html#f-strings)
    
String literals that have embedded expressions. 

[Format String Syntax](https://docs.python.org/3/library/string.html#formatstrings)
    
Information about string formatting with [`str.format()`](https://docs.python.org/3/library/stdtypes.html#str.format "str.format"). 

[printf-style String Formatting](https://docs.python.org/3/library/stdtypes.html#old-string-formatting)
    
The old formatting operations invoked when strings are the left operand of the `%` operator are described in more detail here.
### 3.1.3. Lists[¶](https://docs.python.org/3/tutorial/introduction.html#lists "Link to this heading")
Python knows a number of _compound_ data types, used to group together other values. The most versatile is the _list_ , which can be written as a list of comma-separated values (items) between square brackets. Lists might contain items of different types, but usually the items all have the same type.
>>>```
>>> squares = [1, 4, 9, 16, 25]
>>> squares
[1, 4, 9, 16, 25]

```

Like strings (and all other built-in [sequence](https://docs.python.org/3/glossary.html#term-sequence) types), lists can be indexed and sliced:
>>>```
>>> squares[0] # indexing returns the item
1
>>> squares[-1]
25
>>> squares[-3:] # slicing returns a new list
[9, 16, 25]

```

Lists also support operations like concatenation:
>>>```
>>> squares + [36, 49, 64, 81, 100]
[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]

```

Unlike strings, which are [immutable](https://docs.python.org/3/glossary.html#term-immutable), lists are a [mutable](https://docs.python.org/3/glossary.html#term-mutable) type, i.e. it is possible to change their content:
>>>```
>>> cubes = [1, 8, 27, 65, 125] # something's wrong here
>>> 4 ** 3 # the cube of 4 is 64, not 65!
64
>>> cubes[3] = 64 # replace the wrong value
>>> cubes
[1, 8, 27, 64, 125]

```

You can also add new items at the end of the list, by using the `list.append()` _method_ (we will see more about methods later):
>>>```
>>> cubes.append(216) # add the cube of 6
>>> cubes.append(7 ** 3) # and the cube of 7
>>> cubes
[1, 8, 27, 64, 125, 216, 343]

```

Simple assignment in Python never copies data. When you assign a list to a variable, the variable refers to the _existing list_. Any changes you make to the list through one variable will be seen through all other variables that refer to it.:
>>>```
>>> rgb = ["Red", "Green", "Blue"]
>>> rgba = rgb
>>> id(rgb) == id(rgba) # they reference the same object
True
>>> rgba.append("Alph")
>>> rgb
["Red", "Green", "Blue", "Alph"]

```

All slice operations return a new list containing the requested elements. This means that the following slice returns a [shallow copy](https://docs.python.org/3/library/copy.html#shallow-vs-deep-copy) of the list:
>>>```
>>> correct_rgba = rgba[:]
>>> correct_rgba[-1] = "Alpha"
>>> correct_rgba
["Red", "Green", "Blue", "Alpha"]
>>> rgba
["Red", "Green", "Blue", "Alph"]

```

Assignment to slices is also possible, and this can even change the size of the list or clear it entirely:
>>>```
>>> letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g']
>>> letters
['a', 'b', 'c', 'd', 'e', 'f', 'g']
>>> # replace some values
>>> letters[2:5] = ['C', 'D', 'E']
>>> letters
['a', 'b', 'C', 'D', 'E', 'f', 'g']
>>> # now remove them
>>> letters[2:5] = []
>>> letters
['a', 'b', 'f', 'g']
>>> # clear the list by replacing all the elements with an empty list
>>> letters[:] = []
>>> letters
[]

```

The built-in function [`len()`](https://docs.python.org/3/library/functions.html#len "len") also applies to lists:
>>>```
>>> letters = ['a', 'b', 'c', 'd']
>>> len(letters)
4

```

It is possible to nest lists (create lists containing other lists), for example:
>>>```
>>> a = ['a', 'b', 'c']
>>> n = [1, 2, 3]
>>> x = [a, n]
>>> x
[['a', 'b', 'c'], [1, 2, 3]]
>>> x[0]
['a', 'b', 'c']
>>> x[0][1]
'b'

```

## 3.2. First Steps Towards Programming[¶](https://docs.python.org/3/tutorial/introduction.html#first-steps-towards-programming "Link to this heading")
Of course, we can use Python for more complicated tasks than adding two and two together. For instance, we can write an initial sub-sequence of the [Fibonacci series](https://en.wikipedia.org/wiki/Fibonacci_sequence) as follows:
>>>