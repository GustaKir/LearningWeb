Title: JSON Module Serialization Parameters
URL: https://docs.python.org/3/library/json.html
Summary: This section details the parameters for serializing a Python object using the JSON module, including the object to serialize, the file-like object for output, the option to skip keys of non-basic types, and the requirement for string input for the file-like object's write method.
---

Parameters:
    
  * **obj** ([_object_](https://docs.python.org/3/library/functions.html#object "object")) – The Python object to be serialized.
  * **fp** ([file-like object](https://docs.python.org/3/glossary.html#term-file-like-object)) – The file-like object _obj_ will be serialized to. The `json` module always produces [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") objects, not [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") objects, therefore `fp.write()` must support [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") input.
  * **skipkeys** ([_bool_](https://docs.python.org/3/library/functions.html#bool "bool")) – If `True`, keys that are not of a basic type ([`str`](https://docs.python.org/3/library/stdtypes.html#str "str"), [`int`](https://docs.python.org/3/library/functions.html#int "int"), [`float`](https://docs.python.org/3/library/functions.html#float "float"), [`bool`](https://docs.python.org/3/library/functions.html#bool "bool"), `None`) will be skipped instead of raising a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError"). Default `False`.
  * **ensure_ascii** ([_bool_](https://docs.python.org/3/library/functions.html#bool "bool")) – If `True` (the default), the output is guaranteed to have all incoming non-ASCII characters escaped. If `False`, these characters will be outputted as-is.
  * **check_circular** ([_bool_](https://docs.python.org/3/library/functions.html#bool "bool")) – If `False`, the circular reference check for container types is skipped and a circular reference will result in a [`RecursionError`](https://docs.python.org/3/library/exceptions.html#RecursionError "RecursionError") (or worse). Default `True`.
  * **allow_nan** ([_bool_](https://docs.python.org/3/library/functions.html#bool "bool")) – If `False`, serialization of out-of-range [`float`](https://docs.python.org/3/library/functions.html#float "float") values (`nan`, `inf`, `-inf`) will result in a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError"), in strict compliance with the JSON specification. If `True` (the default), their JavaScript equivalents (`NaN`, `Infinity`, `-Infinity`) are used.
  * **cls** (a [`JSONEncoder`](https://docs.python.org/3/library/json.html#json.JSONEncoder "json.JSONEncoder") subclass) – If set, a custom JSON encoder with the [`default()`](https://docs.python.org/3/library/json.html#json.JSONEncoder.default "json.JSONEncoder.default") method overridden, for serializing into custom datatypes. If `None` (the default), `JSONEncoder` is used.
  * **indent** ([_int_](https://docs.python.org/3/library/functions.html#int "int") _|_[_str_](https://docs.python.org/3/library/stdtypes.html#str "str") _|__None_) – If a positive integer or string, JSON array elements and object members will be pretty-printed with that indent level. A positive integer indents that many spaces per level; a string (such as `"\t"`) is used to indent each level. If zero, negative, or `""` (the empty string), only newlines are inserted. If `None` (the default), the most compact representation is used.
  * **separators** ([_tuple_](https://docs.python.org/3/library/stdtypes.html#tuple "tuple") _|__None_) – A two-tuple: `(item_separator, key_separator)`. If `None` (the default), _separators_ defaults to `(', ', ': ')` if _indent_ is `None`, and `(',', ': ')` otherwise. For the most compact JSON, specify `(',', ':')` to eliminate whitespace.
  * **default** ([callable](https://docs.python.org/3/glossary.html#term-callable) | None) – A function that is called for objects that can’t otherwise be serialized. It should return a JSON encodable version of the object or raise a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError"). If `None` (the default), `TypeError` is raised.
  * **sort_keys** ([_bool_](https://docs.python.org/3/library/functions.html#bool "bool")) – If `True`, dictionaries will be outputted sorted by key. Default `False`.


Changed in version 3.2: Allow strings for _indent_ in addition to integers.
Changed in version 3.4: Use `(',', ': ')` as default if _indent_ is not `None`.
Changed in version 3.6: All optional parameters are now [keyword-only](https://docs.python.org/3/glossary.html#keyword-only-parameter).