Title: String Formatting Flags and Conversion Types in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This section outlines the conversion flag characters used in Python's string formatting, explaining their meanings and functionalities. It includes details on how certain flags affect the conversion of numeric values and introduces various conversion types, such as signed integers and octal values, while noting the irrelevance of length modifiers for Python.
---

```

In this case no `*` specifiers may occur in a format (since they require a sequential parameter list).
The conversion flag characters are:
Flag | Meaning  
---|---  
`'#'` | The value conversion will use the “alternate form” (where defined below).  
`'0'` | The conversion will be zero padded for numeric values.  
`'-'` | The converted value is left adjusted (overrides the `'0'` conversion if both are given).  
`' '` | (a space) A blank should be left before a positive number (or empty string) produced by a signed conversion.  
`'+'` | A sign character (`'+'` or `'-'`) will precede the conversion (overrides a “space” flag).  
A length modifier (`h`, `l`, or `L`) may be present, but is ignored as it is not necessary for Python – so e.g. `%ld` is identical to `%d`.
The conversion types are:
Conversion | Meaning | Notes  
---|---|---  
`'d'` | Signed integer decimal. |   
`'i'` | Signed integer decimal. |   
`'o'` | Signed octal value. | (1)  
`'u'` | Obsolete type – it is identical to `'d'`. | (8)  
`'x'` | Signed hexadecimal (lowercase). | (2)  
`'X'` | Signed hexadecimal (uppercase). | (2)  
`'e'` | Floating-point exponential format (lowercase). | (3)  
`'E'` | Floating-point exponential format (uppercase). | (3)  
`'f'` | Floating-point decimal format. | (3)  
`'F'` | Floating-point decimal format. | (3)  
`'g'` | Floating-point format. Uses lowercase exponential format if exponent is less than -4 or not less than precision, decimal format otherwise. | (4)  
`'G'` | Floating-point format. Uses uppercase exponential format if exponent is less than -4 or not less than precision, decimal format otherwise. | (4)  
`'c'` | Single byte (accepts integer or single byte objects). |   
`'b'` | Bytes (any object that follows the [buffer protocol](https://docs.python.org/3/c-api/buffer.html#bufferobjects) or has [`__bytes__()`](https://docs.python.org/3/reference/datamodel.html#object.__bytes__ "object.__bytes__")). | (5)  
`'s'` | `'s'` is an alias for `'b'` and should only be used for Python2/3 code bases. | (6)  
`'a'` | Bytes (converts any Python object using `repr(obj).encode('ascii', 'backslashreplace')`). | (5)  
`'r'` | `'r'` is an alias for `'a'` and should only be used for Python2/3 code bases. | (7)  
`'%'` | No argument is converted, results in a `'%'` character in the result. |   
Notes:
  1. The alternate form causes a leading octal specifier (`'0o'`) to be inserted before the first digit.
  2. The alternate form causes a leading `'0x'` or `'0X'` (depending on whether the `'x'` or `'X'` format was used) to be inserted before the first digit.
  3. The alternate form causes the result to always contain a decimal point, even if no digits follow it.
The precision determines the number of digits after the decimal point and defaults to 6.
  4. The alternate form causes the result to always contain a decimal point, and trailing zeroes are not removed as they would otherwise be.
The precision determines the number of significant digits before and after the decimal point and defaults to 6.
  5. If precision is `N`, the output is truncated to `N` characters.
  6. `b'%s'` is deprecated, but will not be removed during the 3.x series.
  7. `b'%r'` is deprecated, but will not be removed during the 3.x series.
  8. See [**PEP 237**](https://peps.python.org/pep-0237/).


Note
The bytearray version of this method does _not_ operate in place - it always produces a new object, even if no changes were made.
See also
[**PEP 461**](https://peps.python.org/pep-0461/) - Adding % formatting to bytes and bytearray
Added in version 3.5.
### Memory Views[¶](https://docs.python.org/3/library/stdtypes.html#memory-views "Link to this heading")
[`memoryview`](https://docs.python.org/3/library/stdtypes.html#memoryview "memoryview") objects allow Python code to access the internal data of an object that supports the [buffer protocol](https://docs.python.org/3/c-api/buffer.html#bufferobjects) without copying.