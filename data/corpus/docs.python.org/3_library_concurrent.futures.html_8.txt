Title: Exception Classes in Concurrent Futures
URL: https://docs.python.org/3/library/concurrent.futures.html
Summary: This section details exception classes in the concurrent.futures library, including CancelledError, which is raised when a future is cancelled, and TimeoutError, which is a deprecated alias for the built-in TimeoutError, raised when a future operation times out. Note that with the changes in version 3.11, TimeoutError is now an alias of the built-in TimeoutError.
---

[**PEP 3148**](https://peps.python.org/pep-3148/) – futures - execute computations asynchronously
    
The proposal which described this feature for inclusion in the Python standard library.
## Exception classes[¶](https://docs.python.org/3/library/concurrent.futures.html#exception-classes "Link to this heading") 

_exception_ concurrent.futures.CancelledError[¶](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.CancelledError "Link to this definition")
    
Raised when a future is cancelled. 

_exception_ concurrent.futures.TimeoutError[¶](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.TimeoutError "Link to this definition")
    
A deprecated alias of [`TimeoutError`](https://docs.python.org/3/library/exceptions.html#TimeoutError "TimeoutError"), raised when a future operation exceeds the given timeout.
Changed in version 3.11: This class was made an alias of [`TimeoutError`](https://docs.python.org/3/library/exceptions.html#TimeoutError "TimeoutError"). 

_exception_ concurrent.futures.BrokenExecutor[¶](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.BrokenExecutor "Link to this definition")
    
Derived from [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError"), this exception class is raised when an executor is broken for some reason, and cannot be used to submit or execute new tasks.
Added in version 3.7. 

_exception_ concurrent.futures.InvalidStateError[¶](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.InvalidStateError "Link to this definition")
    
Raised when an operation is performed on a future that is not allowed in the current state.
Added in version 3.8. 

_exception_ concurrent.futures.thread.BrokenThreadPool[¶](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.thread.BrokenThreadPool "Link to this definition")
    
Derived from [`BrokenExecutor`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.BrokenExecutor "concurrent.futures.BrokenExecutor"), this exception class is raised when one of the workers of a [`ThreadPoolExecutor`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor "concurrent.futures.ThreadPoolExecutor") has failed initializing.
Added in version 3.7. 

_exception_ concurrent.futures.process.BrokenProcessPool[¶](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.process.BrokenProcessPool "Link to this definition")
    
Derived from [`BrokenExecutor`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.BrokenExecutor "concurrent.futures.BrokenExecutor") (formerly [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError")), this exception class is raised when one of the workers of a [`ProcessPoolExecutor`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor "concurrent.futures.ProcessPoolExecutor") has terminated in a non-clean fashion (for example, if it was killed from the outside).
Added in version 3.3.
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [`concurrent.futures` — Launching parallel tasks](https://docs.python.org/3/library/concurrent.futures.html)
    * [Executor Objects](https://docs.python.org/3/library/concurrent.futures.html#executor-objects)
    * [ThreadPoolExecutor](https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor)
      * [ThreadPoolExecutor Example](https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor-example)
    * [ProcessPoolExecutor](https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor)
      * [ProcessPoolExecutor Example](https://docs.python.org/3/library/concurrent.futures.html#processpoolexecutor-example)
    * [Future Objects](https://docs.python.org/3/library/concurrent.futures.html#future-objects)
    * [Module Functions](https://docs.python.org/3/library/concurrent.futures.html#module-functions)
    * [Exception classes](https://docs.python.org/3/library/concurrent.futures.html#exception-classes)


#### Previous topic
[The `concurrent` package](https://docs.python.org/3/library/concurrent.html "previous chapter")
#### Next topic
[`subprocess` — Subprocess management](https://docs.python.org/3/library/subprocess.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/concurrent.futures.rst)