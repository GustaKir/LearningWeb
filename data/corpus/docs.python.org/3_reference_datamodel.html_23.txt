Title: __new__ Method in Python Object Creation
URL: https://docs.python.org/3/reference/datamodel.html
Summary: The `__new__()` method is a static method called to create a new instance of a class. It takes the class as the first argument and additional arguments for the constructor. The method should return an instance of the class, typically created by invoking the superclass's `__new__()` method.
---

object.__new__(_cls_[, _..._])[¶](https://docs.python.org/3/reference/datamodel.html#object.__new__ "Link to this definition")
    
Called to create a new instance of class _cls_. [`__new__()`](https://docs.python.org/3/reference/datamodel.html#object.__new__ "object.__new__") is a static method (special-cased so you need not declare it as such) that takes the class of which an instance was requested as its first argument. The remaining arguments are those passed to the object constructor expression (the call to the class). The return value of [`__new__()`](https://docs.python.org/3/reference/datamodel.html#object.__new__ "object.__new__") should be the new object instance (usually an instance of _cls_).
Typical implementations create a new instance of the class by invoking the superclass’s [`__new__()`](https://docs.python.org/3/reference/datamodel.html#object.__new__ "object.__new__") method using `super().__new__(cls[, ...])` with appropriate arguments and then modifying the newly created instance as necessary before returning it.
If [`__new__()`](https://docs.python.org/3/reference/datamodel.html#object.__new__ "object.__new__") is invoked during object construction and it returns an instance of _cls_ , then the new instance’s [`__init__()`](https://docs.python.org/3/reference/datamodel.html#object.__init__ "object.__init__") method will be invoked like `__init__(self[, ...])`, where _self_ is the new instance and the remaining arguments are the same as were passed to the object constructor.
If [`__new__()`](https://docs.python.org/3/reference/datamodel.html#object.__new__ "object.__new__") does not return an instance of _cls_ , then the new instance’s [`__init__()`](https://docs.python.org/3/reference/datamodel.html#object.__init__ "object.__init__") method will not be invoked.
[`__new__()`](https://docs.python.org/3/reference/datamodel.html#object.__new__ "object.__new__") is intended mainly to allow subclasses of immutable types (like int, str, or tuple) to customize instance creation. It is also commonly overridden in custom metaclasses in order to customize class creation. 

object.__init__(_self_[, _..._])[¶](https://docs.python.org/3/reference/datamodel.html#object.__init__ "Link to this definition")
    
Called after the instance has been created (by [`__new__()`](https://docs.python.org/3/reference/datamodel.html#object.__new__ "object.__new__")), but before it is returned to the caller. The arguments are those passed to the class constructor expression. If a base class has an [`__init__()`](https://docs.python.org/3/reference/datamodel.html#object.__init__ "object.__init__") method, the derived class’s [`__init__()`](https://docs.python.org/3/reference/datamodel.html#object.__init__ "object.__init__") method, if any, must explicitly call it to ensure proper initialization of the base class part of the instance; for example: `super().__init__([args...])`.
Because [`__new__()`](https://docs.python.org/3/reference/datamodel.html#object.__new__ "object.__new__") and [`__init__()`](https://docs.python.org/3/reference/datamodel.html#object.__init__ "object.__init__") work together in constructing objects ([`__new__()`](https://docs.python.org/3/reference/datamodel.html#object.__new__ "object.__new__") to create it, and [`__init__()`](https://docs.python.org/3/reference/datamodel.html#object.__init__ "object.__init__") to customize it), no non-`None` value may be returned by [`__init__()`](https://docs.python.org/3/reference/datamodel.html#object.__init__ "object.__init__"); doing so will cause a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") to be raised at runtime.