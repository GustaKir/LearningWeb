Title: Analyzing Memory Usage with tracemalloc
URL: https://docs.python.org/3/library/tracemalloc.html
Summary: This section provides insights into Python's memory usage by displaying loaded module data, including bytecode and source code caching. It mentions the ability to write snapshots to disk for offline analysis using the `Snapshot.dump()` and `Snapshot.load()` methods.
---

```

We can see that Python has loaded `8173 KiB` of module data (bytecode and constants), and that this is `4428 KiB` more than had been loaded before the tests, when the previous snapshot was taken. Similarly, the [`linecache`](https://docs.python.org/3/library/linecache.html#module-linecache "linecache: Provides random access to individual lines from text files.") module has cached `940 KiB` of Python source code to format tracebacks, all of it since the previous snapshot.
If the system has little free memory, snapshots can be written on disk using the [`Snapshot.dump()`](https://docs.python.org/3/library/tracemalloc.html#tracemalloc.Snapshot.dump "tracemalloc.Snapshot.dump") method to analyze the snapshot offline. Then use the [`Snapshot.load()`](https://docs.python.org/3/library/tracemalloc.html#tracemalloc.Snapshot.load "tracemalloc.Snapshot.load") method reload the snapshot.
### Get the traceback of a memory block[¶](https://docs.python.org/3/library/tracemalloc.html#get-the-traceback-of-a-memory-block "Link to this heading")
Code to display the traceback of the biggest memory block:
```
importtracemalloc
# Store 25 frames
tracemalloc.start(25)
# ... run your application ...
snapshot = tracemalloc.take_snapshot()
top_stats = snapshot.statistics('traceback')
# pick the biggest memory block
stat = top_stats[0]
print("%s memory blocks: %.1f KiB" % (stat.count, stat.size / 1024))
for line in stat.traceback.format():
  print(line)

```

Example of output of the Python test suite (traceback limited to 25 frames):
```
903 memory blocks: 870.1 KiB
 File "<frozen importlib._bootstrap>", line 716
 File "<frozen importlib._bootstrap>", line 1036
 File "<frozen importlib._bootstrap>", line 934
 File "<frozen importlib._bootstrap>", line 1068
 File "<frozen importlib._bootstrap>", line 619
 File "<frozen importlib._bootstrap>", line 1581
 File "<frozen importlib._bootstrap>", line 1614
 File "/usr/lib/python3.4/doctest.py", line 101
  importpdb
 File "<frozen importlib._bootstrap>", line 284
 File "<frozen importlib._bootstrap>", line 938
 File "<frozen importlib._bootstrap>", line 1068
 File "<frozen importlib._bootstrap>", line 619
 File "<frozen importlib._bootstrap>", line 1581
 File "<frozen importlib._bootstrap>", line 1614
 File "/usr/lib/python3.4/test/support/__init__.py", line 1728
  importdoctest
 File "/usr/lib/python3.4/test/test_pickletools.py", line 21
  support.run_doctest(pickletools)
 File "/usr/lib/python3.4/test/regrtest.py", line 1276
  test_runner()
 File "/usr/lib/python3.4/test/regrtest.py", line 976
  display_failure=not verbose)
 File "/usr/lib/python3.4/test/regrtest.py", line 761
  match_tests=ns.match_tests)
 File "/usr/lib/python3.4/test/regrtest.py", line 1563
  main()
 File "/usr/lib/python3.4/test/__main__.py", line 3
  regrtest.main_in_temp_cwd()
 File "/usr/lib/python3.4/runpy.py", line 73
  exec(code, run_globals)
 File "/usr/lib/python3.4/runpy.py", line 160
  "__main__", fname, loader, pkg_name)

```

We can see that the most memory was allocated in the [`importlib`](https://docs.python.org/3/library/importlib.html#module-importlib "importlib: The implementation of the import machinery.") module to load data (bytecode and constants) from modules: `870.1 KiB`. The traceback is where the [`importlib`](https://docs.python.org/3/library/importlib.html#module-importlib "importlib: The implementation of the import machinery.") loaded data most recently: on the `import pdb` line of the [`doctest`](https://docs.python.org/3/library/doctest.html#module-doctest "doctest: Test pieces of code within docstrings.") module. The traceback may change if a new module is loaded.
### Pretty top[¶](https://docs.python.org/3/library/tracemalloc.html#pretty-top "Link to this heading")
Code to display the 10 lines allocating the most memory with a pretty output, ignoring `<frozen importlib._bootstrap>` and `<unknown>` files:
```
importlinecache
importos
importtracemalloc
defdisplay_top(snapshot, key_type='lineno', limit=10):
  snapshot = snapshot.filter_traces((
    tracemalloc.Filter(False, "<frozen importlib._bootstrap>"),
    tracemalloc.Filter(False, "<unknown>"),
  ))
  top_stats = snapshot.statistics(key_type)
  print("Top %s lines" % limit)
  for index, stat in enumerate(top_stats[:limit], 1):
    frame = stat.traceback[0]
    print("#%s: %s:%s: %.1f KiB"
       % (index, frame.filename, frame.lineno, stat.size / 1024))
    line = linecache.getline(frame.filename, frame.lineno).strip()
    if line:
      print('  %s' % line)
  other = top_stats[limit:]
  if other:
    size = sum(stat.size for stat in other)
    print("%s other: %.1f KiB" % (len(other), size / 1024))
  total = sum(stat.size for stat in top_stats)
  print("Total allocated size: %.1f KiB" % (total / 1024))
tracemalloc.start()
# ... run your application ...
snapshot = tracemalloc.take_snapshot()
display_top(snapshot)

```

Example of output of the Python test suite: