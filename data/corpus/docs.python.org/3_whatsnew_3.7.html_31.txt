Title: Python 3.7 Speed Improvements
URL: https://docs.python.org/3/whatsnew/3.7.html
Summary: Python 3.7 introduces significant speed enhancements, including C rewrites of the abstract base classes leading to a 1.5x performance boost for `isinstance()` and `issubclass()`, as well as a reduction in Python startup time by up to 10%. Additionally, there are speed improvements for alternate constructors in the `datetime.date` and `datetime.datetime` classes through optimized fast-path constructors.
---

rary/abc.html#module-abc "abc: Abstract base classes according to :pep:`3119`.") have been rewritten in C. This makes creation of abstract base classes, and calling [`isinstance()`](https://docs.python.org/3/library/functions.html#isinstance "isinstance") and [`issubclass()`](https://docs.python.org/3/library/functions.html#issubclass "issubclass") on them 1.5x faster. This also reduces Python start-up time by up to 10%. (Contributed by Ivan Levkivskyi and INADA Naoki in [bpo-31333](https://bugs.python.org/issue?@action=redirect&bpo=31333))
Significant speed improvements to alternate constructors for [`datetime.date`](https://docs.python.org/3/library/datetime.html#datetime.date "datetime.date") and [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") by using fast-path constructors when not constructing subclasses. (Contributed by Paul Ganssle in [bpo-32403](https://bugs.python.org/issue?@action=redirect&bpo=32403))
The speed of comparison of [`array.array`](https://docs.python.org/3/library/array.html#array.array "array.array") instances has been improved considerably in certain cases. It is now from 10x to 70x faster when comparing arrays holding values of the same integer type. (Contributed by Adrian Wielgosik in [bpo-24700](https://bugs.python.org/issue?@action=redirect&bpo=24700).)
The [`math.erf()`](https://docs.python.org/3/library/math.html#math.erf "math.erf") and [`math.erfc()`](https://docs.python.org/3/library/math.html#math.erfc "math.erfc") functions now use the (faster) C library implementation on most platforms. (Contributed by Serhiy Storchaka in [bpo-26121](https://bugs.python.org/issue?@action=redirect&bpo=26121).)
## Other CPython Implementation Changes[¶](https://docs.python.org/3/whatsnew/3.7.html#other-cpython-implementation-changes "Link to this heading")
  * Trace hooks may now opt out of receiving the `line` and opt into receiving the `opcode` events from the interpreter by setting the corresponding new [`f_trace_lines`](https://docs.python.org/3/reference/datamodel.html#frame.f_trace_lines "frame.f_trace_lines") and [`f_trace_opcodes`](https://docs.python.org/3/reference/datamodel.html#frame.f_trace_opcodes "frame.f_trace_opcodes") attributes on the frame being traced. (Contributed by Nick Coghlan in [bpo-31344](https://bugs.python.org/issue?@action=redirect&bpo=31344).)
  * Fixed some consistency problems with namespace package module attributes. Namespace module objects now have an `__file__` that is set to `None` (previously unset), and their `__spec__.origin` is also set to `None` (previously the string `"namespace"`). See [bpo-32305](https://bugs.python.org/issue?@action=redirect&bpo=32305). Also, the namespace module object’s `__spec__.loader` is set to the same value as `__loader__` (previously, the former was set to `None`). See [bpo-32303](https://bugs.python.org/issue?@action=redirect&bpo=32303).
  * The [`locals()`](https://docs.python.org/3/library/functions.html#locals "locals") dictionary now displays in the lexical order that variables were defined. Previously, the order was undefined. (Contributed by Raymond Hettinger in [bpo-32690](https://bugs.python.org/issue?@action=redirect&bpo=32690).)
  * The `distutils` `upload` command no longer tries to change CR end-of-line characters to CRLF. This fixes a corruption issue with sdists that ended with a byte equivalent to CR. (Contributed by Bo Bayles in [bpo-32304](https://bugs.python.org/issue?@action=redirect&bpo=32304).)