Title: Regular Expression Enhancements in Python
URL: https://docs.python.org/3/library/re.html
Summary: This section details enhancements to Python's regular expression library introduced in versions 3.5 and 3.12. It covers the addition of negative lookbehind assertions, which match positions not preceded by a specified pattern, and conditional matching based on the existence of groups. The summary also notes that from version 3.12, group identifiers must consist only of ASCII digits.
---

```

Changed in version 3.5: Added support for group references of fixed length. 

`(?<!...)`
    
Matches if the current position in the string is not preceded by a match for `...`. This is called a _negative lookbehind assertion_. Similar to positive lookbehind assertions, the contained pattern must only match strings of some fixed length. Patterns which start with negative lookbehind assertions may match at the beginning of the string being searched. 

`(?(id/name)yes-pattern|no-pattern)`
    
Will try to match with `yes-pattern` if the group with given _id_ or _name_ exists, and with `no-pattern` if it doesn’t. `no-pattern` is optional and can be omitted. For example, `(<)?(\w+@\w+(?:\.\w+)+)(?(1)>|$)` is a poor email matching pattern, which will match with `'<user@host.com>'` as well as `'user@host.com'`, but not with `'<user@host.com'` nor `'user@host.com>'`.
Changed in version 3.12: Group _id_ can only contain ASCII digits. In [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") patterns, group _name_ can only contain bytes in the ASCII range (`b'\x00'`-`b'\x7f'`).
The special sequences consist of `'\'` and a character from the list below. If the ordinary character is not an ASCII digit or an ASCII letter, then the resulting RE will match the second character. For example, `\$` matches the character `'$'`. 

`\number`
    
Matches the contents of the group of the same number. Groups are numbered starting from 1. For example, `(.+) \1` matches `'the the'` or `'55 55'`, but not `'thethe'` (note the space after the group). This special sequence can only be used to match one of the first 99 groups. If the first digit of _number_ is 0, or _number_ is 3 octal digits long, it will not be interpreted as a group match, but as the character with octal value _number_. Inside the `'['` and `']'` of a character class, all numeric escapes are treated as characters. 

`\A`
    
Matches only at the start of the string. 

`\b`
    
Matches the empty string, but only at the beginning or end of a word. A word is defined as a sequence of word characters. Note that formally, `\b` is defined as the boundary between a `\w` and a `\W` character (or vice versa), or between `\w` and the beginning or end of the string. This means that `r'\bat\b'` matches `'at'`, `'at.'`, `'(at)'`, and `'as at ay'` but not `'attempt'` or `'atlas'`.
The default word characters in Unicode (str) patterns are Unicode alphanumerics and the underscore, but this can be changed by using the [`ASCII`](https://docs.python.org/3/library/re.html#re.ASCII "re.ASCII") flag. Word boundaries are determined by the current locale if the [`LOCALE`](https://docs.python.org/3/library/re.html#re.LOCALE "re.LOCALE") flag is used.
Note
Inside a character range, `\b` represents the backspace character, for compatibility with Python’s string literals. 

`\B`
    
Matches the empty string, but only when it is _not_ at the beginning or end of a word. This means that `r'at\B'` matches `'athens'`, `'atom'`, `'attorney'`, but not `'at'`, `'at.'`, or `'at!'`. `\B` is the opposite of `\b`, so word characters in Unicode (str) patterns are Unicode alphanumerics or the underscore, although this can be changed by using the [`ASCII`](https://docs.python.org/3/library/re.html#re.ASCII "re.ASCII") flag. Word boundaries are determined by the current locale if the [`LOCALE`](https://docs.python.org/3/library/re.html#re.LOCALE "re.LOCALE") flag is used.
Note
Note that `\B` does not match an empty string, which differs from RE implementations in other programming languages such as Perl. This behavior is kept for compatibility reasons. 

`\d`
     

For Unicode (str) patterns:
    
Matches any Unicode decimal digit (that is, any character in Unicode character category [[Nd]](https://www.unicode.org/versions/Unicode15.0.0/ch04.pdf#G134153)). This includes `[0-9]`, and also many other digit characters.
Matches `[0-9]` if the [`ASCII`](https://docs.python.org/3/library/re.html#re.ASCII "re.ASCII") flag is used. 

For 8-bit (bytes) patterns:
    
Matches any decimal digit in the ASCII character set; this is equivalent to `[0-9]`. 

`\D`
    
Matches any character which is not a decimal digit. This is the opposite of `\d`.
Matches `[^0-9]` if the [`ASCII`](https://docs.python.org/3/library/re.html#re.ASCII "re.ASCII") flag is used. 

`\s`
     

For Unicode (str) patterns:
    
Matches Unicode whitespace characters (as defined by [`str.isspace()`](https://docs.python.org/3/library/stdtypes.html#str.isspace "str.isspace")). This includes `[ \t\n\r\f\v]`, and also many other characters, for example the non-breaking spaces mandated by typography rules in many languages.
Matches `[ \t\n\r\f\v]` if the [`ASCII`](https://docs.python.org/3/library/re.html#re.ASCII "re.ASCII") flag is used. 

For 8-bit (bytes) patterns:
    
Matches characters considered whitespace in the ASCII character set; this is equivalent to `[ \t\n\r\f\v]`.