Title: Turtle Graphics: Home and Circle Functions
URL: https://docs.python.org/3/library/turtle.html
Summary: This document describes the `turtle.home()` function, which moves the turtle to the origin (0,0) and resets its heading. It also introduces the `turtle.circle(radius, extent=None, steps=None)` function, which draws a circle based on the specified radius and optional extent or steps parameters.
---

```


turtle.home()[¶](https://docs.python.org/3/library/turtle.html#turtle.home "Link to this definition")
    
Move turtle to the origin – coordinates (0,0) – and set its heading to its start-orientation (which depends on the mode, see [`mode()`](https://docs.python.org/3/library/turtle.html#turtle.mode "turtle.mode")).
>>>```
>>> turtle.heading()
90.0
>>> turtle.position()
(0.00,-10.00)
>>> turtle.home()
>>> turtle.position()
(0.00,0.00)
>>> turtle.heading()
0.0

```


turtle.circle(_radius_ , _extent =None_, _steps =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.circle "Link to this definition")
     

Parameters:
    
  * **radius** – a number
  * **extent** – a number (or `None`)
  * **steps** – an integer (or `None`)


Draw a circle with given _radius_. The center is _radius_ units left of the turtle; _extent_ – an angle – determines which part of the circle is drawn. If _extent_ is not given, draw the entire circle. If _extent_ is not a full circle, one endpoint of the arc is the current pen position. Draw the arc in counterclockwise direction if _radius_ is positive, otherwise in clockwise direction. Finally the direction of the turtle is changed by the amount of _extent_.
As the circle is approximated by an inscribed regular polygon, _steps_ determines the number of steps to use. If not given, it will be calculated automatically. May be used to draw regular polygons.
>>>```
>>> turtle.home()
>>> turtle.position()
(0.00,0.00)
>>> turtle.heading()
0.0
>>> turtle.circle(50)
>>> turtle.position()
(-0.00,0.00)
>>> turtle.heading()
0.0
>>> turtle.circle(120, 180) # draw a semicircle
>>> turtle.position()
(0.00,240.00)
>>> turtle.heading()
180.0

```


turtle.dot(_size =None_, _* color_)[¶](https://docs.python.org/3/library/turtle.html#turtle.dot "Link to this definition")
     

Parameters:
    
  * **size** – an integer >= 1 (if given)
  * **color** – a colorstring or a numeric color tuple


Draw a circular dot with diameter _size_ , using _color_. If _size_ is not given, the maximum of pensize+4 and 2*pensize is used.
>>>```
>>> turtle.home()
>>> turtle.dot()
>>> turtle.fd(50); turtle.dot(20, "blue"); turtle.fd(50)
>>> turtle.position()
(100.00,-0.00)
>>> turtle.heading()
0.0

```


turtle.stamp()[¶](https://docs.python.org/3/library/turtle.html#turtle.stamp "Link to this definition")
    
Stamp a copy of the turtle shape onto the canvas at the current turtle position. Return a stamp_id for that stamp, which can be used to delete it by calling `clearstamp(stamp_id)`.
>>>```
>>> turtle.color("blue")
>>> stamp_id = turtle.stamp()
>>> turtle.fd(50)

```


turtle.clearstamp(_stampid_)[¶](https://docs.python.org/3/library/turtle.html#turtle.clearstamp "Link to this definition")
     

Parameters:
    
**stampid** – an integer, must be return value of previous [`stamp()`](https://docs.python.org/3/library/turtle.html#turtle.stamp "turtle.stamp") call
Delete stamp with given _stampid_.
>>>```
>>> turtle.position()
(150.00,-0.00)
>>> turtle.color("blue")
>>> astamp = turtle.stamp()
>>> turtle.fd(50)
>>> turtle.position()
(200.00,-0.00)
>>> turtle.clearstamp(astamp)
>>> turtle.position()
(200.00,-0.00)

```


turtle.clearstamps(_n =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.clearstamps "Link to this definition")
     

Parameters:
    
**n** – an integer (or `None`)
Delete all or first/last _n_ of turtle’s stamps. If _n_ is `None`, delete all stamps, if _n_ > 0 delete first _n_ stamps, else if _n_ < 0 delete last _n_ stamps.
>>>```
>>> for i in range(8):
...   unused_stamp_id = turtle.stamp()
...   turtle.fd(30)
>>> turtle.clearstamps(2)
>>> turtle.clearstamps(-2)
>>> turtle.clearstamps()

```


turtle.undo()[¶](https://docs.python.org/3/library/turtle.html#turtle.undo "Link to this definition")
    
Undo (repeatedly) the last turtle action(s). Number of available undo actions is determined by the size of the undobuffer.
>>>```
>>> for i in range(4):
...   turtle.fd(50); turtle.lt(80)
...
>>> for i in range(8):
...   turtle.undo()

```


turtle.speed(_speed =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.speed "Link to this definition")
     

Parameters:
    
**speed** – an integer in the range 0..10 or a speedstring (see below)
Set the turtle’s speed to an integer value in the range 0..10. If no argument is given, return current speed.
If input is a number greater than 10 or smaller than 0.5, speed is set to 0. Speedstrings are mapped to speedvalues as follows:
  * “fastest”: 0
  * “fast”: 10
  * “normal”: 6
  * “slow”: 3
  * “slowest”: 1


Speeds from 1 to 10 enforce increasingly faster animation of line drawing and turtle turning.
Attention: _speed_ = 0 means that _no_ animation takes place. forward/back makes turtle jump and likewise left/right make the turtle turn instantly.
>>>```
>>> turtle.speed()
3
>>> turtle.speed('normal')
>>> turtle.speed()
6
>>> turtle.speed(9)
>>> turtle.speed()
9