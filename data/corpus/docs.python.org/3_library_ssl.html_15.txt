Title: Getting Peer Certificate in SSL
URL: https://docs.python.org/3/library/ssl.html
Summary: This section describes the `getpeercert()` method in SSL sockets, detailing how it returns a DER-encoded certificate in binary form based on the `binary_form` parameter. It explains the conditions under which a client and server SSL socket provide certificates and how that affects the method's output.
---

```

If the `binary_form` parameter is [`True`](https://docs.python.org/3/library/constants.html#True "True"), and a certificate was provided, this method returns the DER-encoded form of the entire certificate as a sequence of bytes, or [`None`](https://docs.python.org/3/library/constants.html#None "None") if the peer did not provide a certificate. Whether the peer provides a certificate depends on the SSL socket’s role:
  * for a client SSL socket, the server will always provide a certificate, regardless of whether validation was required;
  * for a server SSL socket, the client will only provide a certificate when requested by the server; therefore [`getpeercert()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.getpeercert "ssl.SSLSocket.getpeercert") will return [`None`](https://docs.python.org/3/library/constants.html#None "None") if you used [`CERT_NONE`](https://docs.python.org/3/library/ssl.html#ssl.CERT_NONE "ssl.CERT_NONE") (rather than [`CERT_OPTIONAL`](https://docs.python.org/3/library/ssl.html#ssl.CERT_OPTIONAL "ssl.CERT_OPTIONAL") or [`CERT_REQUIRED`](https://docs.python.org/3/library/ssl.html#ssl.CERT_REQUIRED "ssl.CERT_REQUIRED")).


See also [`SSLContext.check_hostname`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.check_hostname "ssl.SSLContext.check_hostname").
Changed in version 3.2: The returned dictionary includes additional items such as `issuer` and `notBefore`.
Changed in version 3.4: [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised when the handshake isn’t done. The returned dictionary includes additional X509v3 extension items such as `crlDistributionPoints`, `caIssuers` and `OCSP` URIs.
Changed in version 3.9: IPv6 address strings no longer have a trailing new line. 

SSLSocket.get_verified_chain()[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.get_verified_chain "Link to this definition")
    
Returns verified certificate chain provided by the other end of the SSL channel as a list of DER-encoded bytes. If certificate verification was disabled method acts the same as [`get_unverified_chain()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.get_unverified_chain "ssl.SSLSocket.get_unverified_chain").
Added in version 3.13. 

SSLSocket.get_unverified_chain()[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.get_unverified_chain "Link to this definition")
    
Returns raw certificate chain provided by the other end of the SSL channel as a list of DER-encoded bytes.
Added in version 3.13. 

SSLSocket.cipher()[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.cipher "Link to this definition")
    
Returns a three-value tuple containing the name of the cipher being used, the version of the SSL protocol that defines its use, and the number of secret bits being used. If no connection has been established, returns `None`. 

SSLSocket.shared_ciphers()[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.shared_ciphers "Link to this definition")
    
Return the list of ciphers available in both the client and server. Each entry of the returned list is a three-value tuple containing the name of the cipher, the version of the SSL protocol that defines its use, and the number of secret bits the cipher uses. [`shared_ciphers()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.shared_ciphers "ssl.SSLSocket.shared_ciphers") returns `None` if no connection has been established or the socket is a client socket.
Added in version 3.5. 

SSLSocket.compression()[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.compression "Link to this definition")
    
Return the compression algorithm being used as a string, or `None` if the connection isn’t compressed.
If the higher-level protocol supports its own compression mechanism, you can use [`OP_NO_COMPRESSION`](https://docs.python.org/3/library/ssl.html#ssl.OP_NO_COMPRESSION "ssl.OP_NO_COMPRESSION") to disable SSL-level compression.
Added in version 3.3. 

SSLSocket.get_channel_binding(_cb_type ='tls-unique'_)[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.get_channel_binding "Link to this definition")
    
Get channel binding data for current connection, as a bytes object. Returns `None` if not connected or the handshake has not been completed.
The _cb_type_ parameter allow selection of the desired channel binding type. Valid channel binding types are listed in the [`CHANNEL_BINDING_TYPES`](https://docs.python.org/3/library/ssl.html#ssl.CHANNEL_BINDING_TYPES "ssl.CHANNEL_BINDING_TYPES") list. Currently only the ‘tls-unique’ channel binding, defined by [**RFC 5929**](https://datatracker.ietf.org/doc/html/rfc5929.html), is supported. [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") will be raised if an unsupported channel binding type is requested.
Added in version 3.3.