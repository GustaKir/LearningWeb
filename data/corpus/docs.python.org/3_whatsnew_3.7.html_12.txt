Title: New Features in Python 3.7 - asyncio Enhancements
URL: https://docs.python.org/3/whatsnew/3.7.html
Summary: Python 3.7 introduces enhancements to the asyncio library, including the new `asyncio.all_tasks()` function to retrieve all Task instances in a loop and the deprecated `Task.current_task()` and `Task.all_tasks()` methods. Additionally, a _provisional_ `BufferedProtocol` class is added for implementing streaming protocols with manual buffer control, along with the new `asyncio.get_running_loop()` function.
---

rg/3/library/asyncio-task.html#asyncio.Task "asyncio.Task") instance, and the new [`asyncio.all_tasks()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.all_tasks "asyncio.all_tasks") function returns a set of all existing `Task` instances in a given loop. The `Task.current_task()` and `Task.all_tasks()` methods have been deprecated. (Contributed by Andrew Svetlov in [bpo-32250](https://bugs.python.org/issue?@action=redirect&bpo=32250).)
  * The new _provisional_ [`BufferedProtocol`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.BufferedProtocol "asyncio.BufferedProtocol") class allows implementing streaming protocols with manual control over the receive buffer. (Contributed by Yury Selivanov in [bpo-32251](https://bugs.python.org/issue?@action=redirect&bpo=32251).)
  * The new [`asyncio.get_running_loop()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.get_running_loop "asyncio.get_running_loop") function returns the currently running loop, and raises a [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError") if no loop is running. This is in contrast with [`asyncio.get_event_loop()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.get_event_loop "asyncio.get_event_loop"), which will _create_ a new event loop if none is running. (Contributed by Yury Selivanov in [bpo-32269](https://bugs.python.org/issue?@action=redirect&bpo=32269).)
  * The new [`StreamWriter.wait_closed()`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamWriter.wait_closed "asyncio.StreamWriter.wait_closed") coroutine method allows waiting until the stream writer is closed. The new [`StreamWriter.is_closing()`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamWriter.is_closing "asyncio.StreamWriter.is_closing") method can be used to determine if the writer is closing. (Contributed by Andrew Svetlov in [bpo-32391](https://bugs.python.org/issue?@action=redirect&bpo=32391).)
  * The new [`loop.sock_sendfile()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.sock_sendfile "asyncio.loop.sock_sendfile") coroutine method allows sending files using [`os.sendfile`](https://docs.python.org/3/library/os.html#os.sendfile "os.sendfile") when possible. (Contributed by Andrew Svetlov in [bpo-32410](https://bugs.python.org/issue?@action=redirect&bpo=32410).)
  * The new [`Future.get_loop()`](https://docs.python.org/3/library/asyncio-future.html#asyncio.Future.get_loop "asyncio.Future.get_loop") and `Task.get_loop()` methods return the instance of the loop on which a task or a future were created. [`Server.get_loop()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Server.get_loop "asyncio.Server.get_loop") allows doing the same for [`asyncio.Server`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Server "asyncio.Server") objects. (Contributed by Yury Selivanov in [bpo-32415](https://bugs.python.org/issue?@action=redirect&bpo=32415) and Srinivas Reddy Thatiparthy in [bpo-32418](https://bugs.python.org/issue?@action=redirect&bpo=32418).)
  * It is now possible to control how instances of [`asyncio.Server`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Server "asyncio.Server") begin serving. Previously, the server would start serving immediately when created. The new _start_serving_ keyword argument to [`loop.create_server()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_server "asyncio.loop.create_server") and [`loop.create_unix_server()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_unix_server "asyncio.loop.create_unix_server"), as well as [`Server.start_serving()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Server.start_serving "asyncio.Server.start_serving"), and [`Server.serve_forever()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Server.serve_forever "asyncio.Server.serve_forever") can be used to decouple server instantiation and serving. The new [`Server.is_serving()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Server.is_serving "asyncio.Server.is_serving") method returns `True` if the server is serving. [`Server`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Server "asyncio.Server") objects are now asynchronous context managers:
```
srv = await loop.create_server(...)
async with srv:
  # some code
# At this point, srv is closed and no longer accepts new connections.