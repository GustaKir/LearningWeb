Title: Subprocess Module Documentation
URL: https://docs.python.org/3/library/subprocess.html
Summary: The subprocess module in Python allows for spawning new processes, connecting to their input/output/error pipes, and obtaining their return codes. Key updates in version 3.3 include changes to how encoding is handled when universal_newlines is set to True. Additional references to related modules and security considerations are provided.
---

ml#module-fnmatch "fnmatch: Unix shell style filename pattern matching."), [`os.walk()`](https://docs.python.org/3/library/os.html#os.walk "os.walk"), [`os.path.expandvars()`](https://docs.python.org/3/library/os.path.html#os.path.expandvars "os.path.expandvars"), [`os.path.expanduser()`](https://docs.python.org/3/library/os.path.html#os.path.expanduser "os.path.expanduser"), and [`shutil`](https://docs.python.org/3/library/shutil.html#module-shutil "shutil: High-level file operations, including copying.")).
> Changed in version 3.3: When _universal_newlines_ is `True`, the class uses the encoding [`locale.getpreferredencoding(False)`](https://docs.python.org/3/library/locale.html#locale.getpreferredencoding "locale.getpreferredencoding") instead of `locale.getpreferredencoding()`. See the [`io.TextIOWrapper`](https://docs.python.org/3/library/io.html#io.TextIOWrapper "io.TextIOWrapper") class for more information on this change.
> Note
> Read the [Security Considerations](https://docs.python.org/3/library/subprocess.html#security-considerations) section before using `shell=True`.
These options, along with all of the other options, are described in more detail in the [`Popen`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen "subprocess.Popen") constructor documentation.
### Popen Constructor[¶](https://docs.python.org/3/library/subprocess.html#popen-constructor "Link to this heading")
The underlying process creation and management in this module is handled by the [`Popen`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen "subprocess.Popen") class. It offers a lot of flexibility so that developers are able to handle the less common cases not covered by the convenience functions. 

_class_ subprocess.Popen(_args_ , _bufsize =-1_, _executable =None_, _stdin =None_, _stdout =None_, _stderr =None_, _preexec_fn =None_, _close_fds =True_, _shell =False_, _cwd =None_, _env =None_, _universal_newlines =None_, _startupinfo =None_, _creationflags =0_, _restore_signals =True_, _start_new_session =False_, _pass_fds =()_, _*_ , _group =None_, _extra_groups =None_, _user =None_, _umask =-1_, _encoding =None_, _errors =None_, _text =None_, _pipesize =-1_, _process_group =None_)[¶](https://docs.python.org/3/library/subprocess.html#subprocess.Popen "Link to this definition")
    
Execute a child program in a new process. On POSIX, the class uses [`os.execvpe()`](https://docs.python.org/3/library/os.html#os.execvpe "os.execvpe")-like behavior to execute the child program. On Windows, the class uses the Windows `CreateProcess()` function. The arguments to [`Popen`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen "subprocess.Popen") are as follows.
_args_ should be a sequence of program arguments or else a single string or [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). By default, the program to execute is the first item in _args_ if _args_ is a sequence. If _args_ is a string, the interpretation is platform-dependent and described below. See the _shell_ and _executable_ arguments for additional differences from the default behavior. Unless otherwise stated, it is recommended to pass _args_ as a sequence.
Warning
For maximum reliability, use a fully qualified path for the executable. To search for an unqualified name on `PATH`, use [`shutil.which()`](https://docs.python.org/3/library/shutil.html#shutil.which "shutil.which"). On all platforms, passing [`sys.executable`](https://docs.python.org/3/library/sys.html#sys.executable "sys.executable") is the recommended way to launch the current Python interpreter again, and use the `-m` command-line format to launch an installed module.
Resolving the path of _executable_ (or the first item of _args_) is platform dependent. For POSIX, see [`os.execvpe()`](https://docs.python.org/3/library/os.html#os.execvpe "os.execvpe"), and note that when resolving or searching for the executable path, _cwd_ overrides the current working directory and _env_ can override the `PATH` environment variable. For Windows, see the documentation of the `lpApplicationName` and `lpCommandLine` parameters of WinAPI `CreateProcess`, and note that when resolving or searching for the executable path with `shell=False`, _cwd_ does not override the current working directory and _env_ cannot override the `PATH` environment variable. Using a full path avoids all of these variations.
An example of passing some arguments to an external program as a sequence is:
```
Popen(["/usr/bin/git", "commit", "-m", "Fixes a bug."])