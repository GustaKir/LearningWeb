Title: Python 3.2 - Minor Optimizations
URL: https://docs.python.org/3/whatsnew/3.2.html
Summary: Python 3.2 introduces several minor optimizations, including faster set differencing for uneven operand sizes, improved implementation of the `array.repeat()` method, enhanced buffering in `BaseHTTPRequestHandler`, and speed improvements for `operator.attrgetter()`. Additional enhancements are noted for `ConfigParser`.
---

There were several other minor optimizations. Set differencing now runs faster when one operand is much larger than the other (patch by Andress Bennetts in [bpo-8685](https://bugs.python.org/issue?@action=redirect&bpo=8685)). The `array.repeat()` method has a faster implementation ([bpo-1569291](https://bugs.python.org/issue?@action=redirect&bpo=1569291) by Alexander Belopolsky). The [`BaseHTTPRequestHandler`](https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler "http.server.BaseHTTPRequestHandler") has more efficient buffering ([bpo-3709](https://bugs.python.org/issue?@action=redirect&bpo=3709) by Andrew Schaaf). The [`operator.attrgetter()`](https://docs.python.org/3/library/operator.html#operator.attrgetter "operator.attrgetter") function has been sped-up ([bpo-10160](https://bugs.python.org/issue?@action=redirect&bpo=10160) by Christos Georgiou). And [`ConfigParser`](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser "configparser.ConfigParser") loads multi-line arguments a bit faster ([bpo-7113](https://bugs.python.org/issue?@action=redirect&bpo=7113) by Łukasz Langa).
## Unicode[¶](https://docs.python.org/3/whatsnew/3.2.html#unicode "Link to this heading")
Python has been updated to [Unicode 6.0.0](https://unicode.org/versions/Unicode6.0.0/). The update to the standard adds over 2,000 new characters including [emoji](https://en.wikipedia.org/wiki/Emoji) symbols which are important for mobile phones.
In addition, the updated standard has altered the character properties for two Kannada characters (U+0CF1, U+0CF2) and one New Tai Lue numeric character (U+19DA), making the former eligible for use in identifiers while disqualifying the latter. For more information, see [Unicode Character Database Changes](https://www.unicode.org/versions/Unicode6.0.0/#Database_Changes).
## Codecs[¶](https://docs.python.org/3/whatsnew/3.2.html#codecs "Link to this heading")
Support was added for _cp720_ Arabic DOS encoding ([bpo-1616979](https://bugs.python.org/issue?@action=redirect&bpo=1616979)).
MBCS encoding no longer ignores the error handler argument. In the default strict mode, it raises an [`UnicodeDecodeError`](https://docs.python.org/3/library/exceptions.html#UnicodeDecodeError "UnicodeDecodeError") when it encounters an undecodable byte sequence and an [`UnicodeEncodeError`](https://docs.python.org/3/library/exceptions.html#UnicodeEncodeError "UnicodeEncodeError") for an unencodable character.
The MBCS codec supports `'strict'` and `'ignore'` error handlers for decoding, and `'strict'` and `'replace'` for encoding.
To emulate Python3.1 MBCS encoding, select the `'ignore'` handler for decoding and the `'replace'` handler for encoding.
On Mac OS X, Python decodes command line arguments with `'utf-8'` rather than the locale encoding.
By default, [`tarfile`](https://docs.python.org/3/library/tarfile.html#module-tarfile "tarfile: Read and write tar-format archive files.") uses `'utf-8'` encoding on Windows (instead of `'mbcs'`) and the `'surrogateescape'` error handler on all operating systems.
## Documentation[¶](https://docs.python.org/3/whatsnew/3.2.html#documentation "Link to this heading")
The documentation continues to be improved.
  * A table of quick links has been added to the top of lengthy sections such as [Built-in Functions](https://docs.python.org/3/library/functions.html#built-in-funcs). In the case of [`itertools`](https://docs.python.org/3/library/itertools.html#module-itertools "itertools: Functions creating iterators for efficient looping."), the links are accompanied by tables of cheatsheet-style summaries to provide an overview and memory jog without having to read all of the docs.
  * In some cases, the pure Python source code can be a helpful adjunct to the documentation, so now many modules now feature quick links to the latest version of the source code. For example, the [`functools`](https://docs.python.org/3/library/functools.html#module-functools "functools: Higher-order functions and operations on callable objects.") module documentation has a quick link at the top labeled:
> **Source code** [Lib/functools.py](https://github.com/python/cpython/tree/3.13/Lib/functools.py).
(Contributed by Raymond Hettinger; see [rationale](https://rhettinger.wordpress.com/2011/01/28/open-your-source-more/).)
  * The docs now contain more examples and recipes. In particular, [`re`](https://docs.python.org/3/library/re.html#module-re "re: Regular expression operations.") module has an extensive section, [Regular Expression Examples](https://docs.python.org/3/library/re.html#re-examples). Likewise, the [`itertools`](https://docs.python.org/3/library/itertools.html#module-itertools "itertools: Functions creating iterators for efficient looping.") module continues to be updated with new [Itertools Recipes](https://docs.python.org/3/library/itertools.html#itertools-recipes).
  * The [`datetime`](https://docs.python.org/3/library/datetime.html#module-d