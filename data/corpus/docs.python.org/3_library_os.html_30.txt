Title: os.makedirs Function
URL: https://docs.python.org/3/library/os.html
Summary: The os.makedirs function facilitates recursive directory creation, creating all necessary intermediate directories for a specified leaf directory. It accepts parameters for mode and existence handling. The mode sets permissions for the leaf directory, while existing parent directories remain unchanged unless the umask is adjusted prior to calling the function. If exist_ok is False (default), a FileExistsError is raised if the target directory already exists.
---

os.makedirs(_name_ , _mode =0o777_, _exist_ok =False_)[¶](https://docs.python.org/3/library/os.html#os.makedirs "Link to this definition")
    
Recursive directory creation function. Like [`mkdir()`](https://docs.python.org/3/library/os.html#os.mkdir "os.mkdir"), but makes all intermediate-level directories needed to contain the leaf directory.
The _mode_ parameter is passed to [`mkdir()`](https://docs.python.org/3/library/os.html#os.mkdir "os.mkdir") for creating the leaf directory; see [the mkdir() description](https://docs.python.org/3/library/os.html#mkdir-modebits) for how it is interpreted. To set the file permission bits of any newly created parent directories you can set the umask before invoking [`makedirs()`](https://docs.python.org/3/library/os.html#os.makedirs "os.makedirs"). The file permission bits of existing parent directories are not changed.
If _exist_ok_ is `False` (the default), a [`FileExistsError`](https://docs.python.org/3/library/exceptions.html#FileExistsError "FileExistsError") is raised if the target directory already exists.
Note
[`makedirs()`](https://docs.python.org/3/library/os.html#os.makedirs "os.makedirs") will become confused if the path elements to create include [`pardir`](https://docs.python.org/3/library/os.html#os.pardir "os.pardir") (eg. “..” on UNIX systems).
This function handles UNC paths correctly.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.mkdir` with arguments `path`, `mode`, `dir_fd`.
Changed in version 3.2: Added the _exist_ok_ parameter.
Changed in version 3.4.1: Before Python 3.4.1, if _exist_ok_ was `True` and the directory existed, [`makedirs()`](https://docs.python.org/3/library/os.html#os.makedirs "os.makedirs") would still raise an error if _mode_ did not match the mode of the existing directory. Since this behavior was impossible to implement safely, it was removed in Python 3.4.1. See [bpo-21082](https://bugs.python.org/issue?@action=redirect&bpo=21082).
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object).
Changed in version 3.7: The _mode_ argument no longer affects the file permission bits of newly created intermediate-level directories. 

os.mkfifo(_path_ , _mode =0o666_, _*_ , _dir_fd =None_)[¶](https://docs.python.org/3/library/os.html#os.mkfifo "Link to this definition")
    
Create a FIFO (a named pipe) named _path_ with numeric mode _mode_. The current umask value is first masked out from the mode.
This function can also support [paths relative to directory descriptors](https://docs.python.org/3/library/os.html#dir-fd).
FIFOs are pipes that can be accessed like regular files. FIFOs exist until they are deleted (for example with [`os.unlink()`](https://docs.python.org/3/library/os.html#os.unlink "os.unlink")). Generally, FIFOs are used as rendezvous between “client” and “server” type processes: the server opens the FIFO for reading, and the client opens it for writing. Note that [`mkfifo()`](https://docs.python.org/3/library/os.html#os.mkfifo "os.mkfifo") doesn’t open the FIFO — it just creates the rendezvous point.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI.
Changed in version 3.3: Added the _dir_fd_ parameter.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). 

os.mknod(_path_ , _mode =0o600_, _device =0_, _*_ , _dir_fd =None_)[¶](https://docs.python.org/3/library/os.html#os.mknod "Link to this definition")
    
Create a filesystem node (file, device special file or named pipe) named _path_. _mode_ specifies both the permissions to use and the type of node to be created, being combined (bitwise OR) with one of `stat.S_IFREG`, `stat.S_IFCHR`, `stat.S_IFBLK`, and `stat.S_IFIFO` (those constants are available in [`stat`](https://docs.python.org/3/library/stat.html#module-stat "stat: Utilities for interpreting the results of os.stat\(\), os.lstat\(\) and os.fstat\(\).")). For `stat.S_IFCHR` and `stat.S_IFBLK`, _device_ defines the newly created device special file (probably using [`os.makedev()`](https://docs.python.org/3/library/os.html#os.makedev "os.makedev")), otherwise it is ignored.
This function can also support [paths relative to directory descriptors](https://docs.python.org/3/library/os.html#dir-fd).
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI.
Changed in version 3.3: Added the _dir_fd_ parameter.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). 

os.major(_device_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.major "Link to this definition")
    
Extract the device major number from a raw device number (usually the `st_dev` or `st_rdev` field from `stat`).