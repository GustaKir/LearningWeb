Title: Memory Allocation in Python C API
URL: https://docs.python.org/3/c-api/typeobj.html
Summary: This section discusses the `allocfunc` typedef in the Python C API, which allows separation of memory allocation from initialization. It returns a pointer to memory suitable for a Python object instance and was added in version 3.10. It also references `PyIter_Send()` for further details.
---

```

See [`PyIter_Send()`](https://docs.python.org/3/c-api/iter.html#c.PyIter_Send "PyIter_Send") for details. This slot may be set to `NULL`.
Added in version 3.10.
## Slot Type typedefs[¶](https://docs.python.org/3/c-api/typeobj.html#slot-type-typedefs "Link to this heading") 

typedef[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*(*allocfunc)([PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject")*cls,[Py_ssize_t](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")nitems)[¶](https://docs.python.org/3/c-api/typeobj.html#c.allocfunc "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
The purpose of this function is to separate memory allocation from memory initialization. It should return a pointer to a block of memory of adequate length for the instance, suitably aligned, and initialized to zeros, but with [`ob_refcnt`](https://docs.python.org/3/c-api/typeobj.html#c.PyObject.ob_refcnt "PyObject.ob_refcnt") set to `1` and [`ob_type`](https://docs.python.org/3/c-api/typeobj.html#c.PyObject.ob_type "PyObject.ob_type") set to the type argument. If the type’s [`tp_itemsize`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_itemsize "PyTypeObject.tp_itemsize") is non-zero, the object’s [`ob_size`](https://docs.python.org/3/c-api/typeobj.html#c.PyVarObject.ob_size "PyVarObject.ob_size") field should be initialized to _nitems_ and the length of the allocated memory block should be `tp_basicsize + nitems*tp_itemsize`, rounded up to a multiple of `sizeof(void*)`; otherwise, _nitems_ is not used and the length of the block should be [`tp_basicsize`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_basicsize "PyTypeObject.tp_basicsize").
This function should not do any other instance initialization, not even to allocate additional memory; that should be done by [`tp_new`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_new "PyTypeObject.tp_new"). 

typedefvoid(*destructor)([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*)[¶](https://docs.python.org/3/c-api/typeobj.html#c.destructor "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._ 

typedefvoid(*freefunc)(void*)[¶](https://docs.python.org/3/c-api/typeobj.html#c.freefunc "Link to this definition")
    
See [`tp_free`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_free "PyTypeObject.tp_free"). 

typedef[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*(*newfunc)([PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject")*,[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*,[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*)[¶](https://docs.python.org/3/c-api/typeobj.html#c.newfunc "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
See [`tp_new`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_new "PyTypeObject.tp_new"). 

typedefint(*initproc)([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*,[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*,[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*)[¶](https://docs.python.org/3/c-api/typeobj.html#c.initproc "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
See [`tp_init`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_init "PyTypeObject.tp_init"). 

typedef[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*(*reprfunc)([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*)[¶](https://docs.python.org/3/c-api/typeobj.html#c.reprfunc "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
See [`tp_repr`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_repr "PyTypeObject.tp_repr"). 

typedef[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*(*getattrfunc)([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*self,char*attr)[¶](https://docs.python.org/3/c-api/typeobj.html#c.getattrfunc "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return the value of the named attribute for the object.