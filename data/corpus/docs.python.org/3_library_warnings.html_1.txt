Title: Warning Control in Python
URL: https://docs.python.org/3/library/warnings.html
Summary: The `warnings` module in Python provides a way to alert users about conditions in a program that do not require raising an exception. Warnings can be issued using the `warn()` function, allowing programmers to indicate issues like the use of obsolete modules without stopping program execution.
---

# `warnings` — Warning control[¶](https://docs.python.org/3/library/warnings.html#module-warnings "Link to this heading")
**Source code:** [Lib/warnings.py](https://github.com/python/cpython/tree/3.13/Lib/warnings.py)
Warning messages are typically issued in situations where it is useful to alert the user of some condition in a program, where that condition (normally) doesn’t warrant raising an exception and terminating the program. For example, one might want to issue a warning when a program uses an obsolete module.
Python programmers issue warnings by calling the [`warn()`](https://docs.python.org/3/library/warnings.html#warnings.warn "warnings.warn") function defined in this module. (C programmers use [`PyErr_WarnEx()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_WarnEx "PyErr_WarnEx"); see [Exception Handling](https://docs.python.org/3/c-api/exceptions.html#exceptionhandling) for details).
Warning messages are normally written to [`sys.stderr`](https://docs.python.org/3/library/sys.html#sys.stderr "sys.stderr"), but their disposition can be changed flexibly, from ignoring all warnings to turning them into exceptions. The disposition of warnings can vary based on the [warning category](https://docs.python.org/3/library/warnings.html#warning-categories), the text of the warning message, and the source location where it is issued. Repetitions of a particular warning for the same source location are typically suppressed.
There are two stages in warning control: first, each time a warning is issued, a determination is made whether a message should be issued or not; next, if a message is to be issued, it is formatted and printed using a user-settable hook.
The determination whether to issue a warning message is controlled by the [warning filter](https://docs.python.org/3/library/warnings.html#warning-filter), which is a sequence of matching rules and actions. Rules can be added to the filter by calling [`filterwarnings()`](https://docs.python.org/3/library/warnings.html#warnings.filterwarnings "warnings.filterwarnings") and reset to its default state by calling [`resetwarnings()`](https://docs.python.org/3/library/warnings.html#warnings.resetwarnings "warnings.resetwarnings").
The printing of warning messages is done by calling [`showwarning()`](https://docs.python.org/3/library/warnings.html#warnings.showwarning "warnings.showwarning"), which may be overridden; the default implementation of this function formats the message by calling [`formatwarning()`](https://docs.python.org/3/library/warnings.html#warnings.formatwarning "warnings.formatwarning"), which is also available for use by custom implementations.
See also
[`logging.captureWarnings()`](https://docs.python.org/3/library/logging.html#logging.captureWarnings "logging.captureWarnings") allows you to handle all warnings with the standard logging infrastructure.
## Warning Categories[¶](https://docs.python.org/3/library/warnings.html#warning-categories "Link to this heading")
There are a number of built-in exceptions that represent warning categories. This categorization is useful to be able to filter out groups of warnings.
While these are technically [built-in exceptions](https://docs.python.org/3/library/exceptions.html#warning-categories-as-exceptions), they are documented here, because conceptually they belong to the warnings mechanism.
User code can define additional warning categories by subclassing one of the standard warning categories. A warning category must always be a subclass of the [`Warning`](https://docs.python.org/3/library/exceptions.html#Warning "Warning") class.
The following warnings category classes are currently defined:
Class | Description  
---|---  
[`Warning`](https://docs.python.org/3/library/exceptions.html#Warning "Warning") | This is the base class of all warning category classes. It is a subclass of [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception "Exception").  
[`UserWarning`](https://docs.python.org/3/library/exceptions.html#UserWarning "UserWarning") | The default category for [`warn()`](https://docs.python.org/3/library/warnings.html#warnings.warn "warnings.warn").  
[`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning") | Base category for warnings about deprecated features when those warnings are intended for other Python developers (ignored by default, unless triggered by code in `__main__`).  
[`SyntaxWarning`](https://docs.python.org/3/library/exceptions.html#SyntaxWarning "SyntaxWarning") | Base category for warnings about dubious syntactic features.  
[`RuntimeWarning`](https://docs.python.org/3/library/exceptions.html#RuntimeWarning "RuntimeWarning") | Base category for warnings about dubious runtime features.  
[`FutureWarning`](https://docs.python.org/3/library/exceptions.html#FutureWarning "FutureWarning") | Base category for warnings about deprecated features when those warnings are intended for end users o