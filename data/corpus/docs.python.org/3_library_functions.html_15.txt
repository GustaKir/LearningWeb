Title: Built-in Functions: Globals, Hasattr, and Hash
URL: https://docs.python.org/3/library/functions.html
Summary: This section covers three built-in functions in Python: 'globals()', which returns the current module's namespace dictionary; 'hasattr(object, name)', which checks if an object has a specified attribute; and 'hash(object)', which returns the hash value of an object, useful for comparing dictionary keys.
---

globals()[¶](https://docs.python.org/3/library/functions.html#globals "Link to this definition")
    
Return the dictionary implementing the current module namespace. For code within functions, this is set when the function is defined and remains the same regardless of where the function is called. 

hasattr(_object_ , _name_)[¶](https://docs.python.org/3/library/functions.html#hasattr "Link to this definition")
    
The arguments are an object and a string. The result is `True` if the string is the name of one of the object’s attributes, `False` if not. (This is implemented by calling `getattr(object, name)` and seeing whether it raises an [`AttributeError`](https://docs.python.org/3/library/exceptions.html#AttributeError "AttributeError") or not.) 

hash(_object_)[¶](https://docs.python.org/3/library/functions.html#hash "Link to this definition")
    
Return the hash value of the object (if it has one). Hash values are integers. They are used to quickly compare dictionary keys during a dictionary lookup. Numeric values that compare equal have the same hash value (even if they are of different types, as is the case for 1 and 1.0).
Note
For objects with custom [`__hash__()`](https://docs.python.org/3/reference/datamodel.html#object.__hash__ "object.__hash__") methods, note that [`hash()`](https://docs.python.org/3/library/functions.html#hash "hash") truncates the return value based on the bit width of the host machine. 

help()[¶](https://docs.python.org/3/library/functions.html#help "Link to this definition")


help(_request_)
    
Invoke the built-in help system. (This function is intended for interactive use.) If no argument is given, the interactive help system starts on the interpreter console. If the argument is a string, then the string is looked up as the name of a module, function, class, method, keyword, or documentation topic, and a help page is printed on the console. If the argument is any other kind of object, a help page on the object is generated.
Note that if a slash(/) appears in the parameter list of a function when invoking [`help()`](https://docs.python.org/3/library/functions.html#help "help"), it means that the parameters prior to the slash are positional-only. For more info, see [the FAQ entry on positional-only parameters](https://docs.python.org/3/faq/programming.html#faq-positional-only-arguments).
This function is added to the built-in namespace by the [`site`](https://docs.python.org/3/library/site.html#module-site "site: Module responsible for site-specific configuration.") module.
Changed in version 3.4: Changes to [`pydoc`](https://docs.python.org/3/library/pydoc.html#module-pydoc "pydoc: Documentation generator and online help system.") and [`inspect`](https://docs.python.org/3/library/inspect.html#module-inspect "inspect: Extract information and source code from live objects.") mean that the reported signatures for callables are now more comprehensive and consistent. 

hex(_x_)[¶](https://docs.python.org/3/library/functions.html#hex "Link to this definition")
    
Convert an integer number to a lowercase hexadecimal string prefixed with “0x”. If _x_ is not a Python [`int`](https://docs.python.org/3/library/functions.html#int "int") object, it has to define an [`__index__()`](https://docs.python.org/3/reference/datamodel.html#object.__index__ "object.__index__") method that returns an integer. Some examples:
>>>```
>>> hex(255)
'0xff'
>>> hex(-42)
'-0x2a'

```

If you want to convert an integer number to an uppercase or lower hexadecimal string with prefix or not, you can use either of the following ways:
>>>```
>>> '%#x' % 255, '%x' % 255, '%X' % 255
('0xff', 'ff', 'FF')
>>> format(255, '#x'), format(255, 'x'), format(255, 'X')
('0xff', 'ff', 'FF')
>>> f'{255:#x}', f'{255:x}', f'{255:X}'
('0xff', 'ff', 'FF')