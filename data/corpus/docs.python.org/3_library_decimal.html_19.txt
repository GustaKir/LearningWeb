Title: Decimal Module Constants
URL: https://docs.python.org/3/library/decimal.html
Summary: This documentation chunk outlines key constants in the decimal module, including MAX_EMAX, MIN_EMIN, and MIN_ETINY, which define limits for exponent values. It also mentions threading support and the HAVE_CONTEXTVAR setting, indicating that threading is always available in Python as of version 3.9.
---

decimal.MAX_EMAX[¶](https://docs.python.org/3/library/decimal.html#decimal.MAX_EMAX "Link to this definition")
| `425000000` | `999999999999999999` 

decimal.MIN_EMIN[¶](https://docs.python.org/3/library/decimal.html#decimal.MIN_EMIN "Link to this definition")
| `-425000000` | `-999999999999999999` 

decimal.MIN_ETINY[¶](https://docs.python.org/3/library/decimal.html#decimal.MIN_ETINY "Link to this definition")
| `-849999999` | `-1999999999999999997` 

decimal.HAVE_THREADS[¶](https://docs.python.org/3/library/decimal.html#decimal.HAVE_THREADS "Link to this definition")
      
The value is `True`. Deprecated, because Python now always has threads.
Deprecated since version 3.9. 

decimal.HAVE_CONTEXTVAR[¶](https://docs.python.org/3/library/decimal.html#decimal.HAVE_CONTEXTVAR "Link to this definition")
    
The default value is `True`. If Python is [`configured using the --without-decimal-contextvar option`](https://docs.python.org/3/using/configure.html#cmdoption-without-decimal-contextvar), the C version uses a thread-local rather than a coroutine-local context and the value is `False`. This is slightly faster in some nested context scenarios.
Added in version 3.8.3.
## Rounding modes[¶](https://docs.python.org/3/library/decimal.html#rounding-modes "Link to this heading") 

decimal.ROUND_CEILING[¶](https://docs.python.org/3/library/decimal.html#decimal.ROUND_CEILING "Link to this definition")
    
Round towards `Infinity`. 

decimal.ROUND_DOWN[¶](https://docs.python.org/3/library/decimal.html#decimal.ROUND_DOWN "Link to this definition")
    
Round towards zero. 

decimal.ROUND_FLOOR[¶](https://docs.python.org/3/library/decimal.html#decimal.ROUND_FLOOR "Link to this definition")
    
Round towards `-Infinity`. 

decimal.ROUND_HALF_DOWN[¶](https://docs.python.org/3/library/decimal.html#decimal.ROUND_HALF_DOWN "Link to this definition")
    
Round to nearest with ties going towards zero. 

decimal.ROUND_HALF_EVEN[¶](https://docs.python.org/3/library/decimal.html#decimal.ROUND_HALF_EVEN "Link to this definition")
    
Round to nearest with ties going to nearest even integer. 

decimal.ROUND_HALF_UP[¶](https://docs.python.org/3/library/decimal.html#decimal.ROUND_HALF_UP "Link to this definition")
    
Round to nearest with ties going away from zero. 

decimal.ROUND_UP[¶](https://docs.python.org/3/library/decimal.html#decimal.ROUND_UP "Link to this definition")
    
Round away from zero. 

decimal.ROUND_05UP[¶](https://docs.python.org/3/library/decimal.html#decimal.ROUND_05UP "Link to this definition")
    
Round away from zero if last digit after rounding towards zero would have been 0 or 5; otherwise round towards zero.
## Signals[¶](https://docs.python.org/3/library/decimal.html#signals "Link to this heading")
Signals represent conditions that arise during computation. Each corresponds to one context flag and one context trap enabler.
The context flag is set whenever the condition is encountered. After the computation, flags may be checked for informational purposes (for instance, to determine whether a computation was exact). After checking the flags, be sure to clear all flags before starting the next computation.
If the context’s trap enabler is set for the signal, then the condition causes a Python exception to be raised. For example, if the [`DivisionByZero`](https://docs.python.org/3/library/decimal.html#decimal.DivisionByZero "decimal.DivisionByZero") trap is set, then a [`DivisionByZero`](https://docs.python.org/3/library/decimal.html#decimal.DivisionByZero "decimal.DivisionByZero") exception is raised upon encountering the condition. 

_class_ decimal.Clamped[¶](https://docs.python.org/3/library/decimal.html#decimal.Clamped "Link to this definition")
    
Altered an exponent to fit representation constraints.
Typically, clamping occurs when an exponent falls outside the context’s `Emin` and `Emax` limits. If possible, the exponent is reduced to fit by adding zeros to the coefficient. 

_class_ decimal.DecimalException[¶](https://docs.python.org/3/library/decimal.html#decimal.DecimalException "Link to this definition")
    
Base class for other signals and a subclass of [`ArithmeticError`](https://docs.python.org/3/library/exceptions.html#ArithmeticError "ArithmeticError"). 

_class_ decimal.DivisionByZero[¶](https://docs.python.org/3/library/decimal.html#decimal.DivisionByZero "Link to this definition")
    
Signals the division of a non-infinite number by zero.
Can occur with division, modulo division, or when raising a number to a negative power. If this signal is not trapped, returns `Infinity` or `-Infinity` with the sign determined by the inputs to the calculation.