Title: Using localcontext in Decimal Module
URL: https://docs.python.org/3/library/decimal.html
Summary: This section explains how to use the `localcontext` function from the Decimal module to set a specific precision for calculations. It includes examples of using context with and without keyword arguments, and describes exceptions that may arise, such as `TypeError` and `ValueError`, if unsupported or invalid attributes are provided. Additionally, it notes a change in functionality introduced in version 3.11.
---

```
fromdecimalimport localcontext
with localcontext() as ctx:
  ctx.prec = 42  # Perform a high precision calculation
  s = calculate_something()
s = +s # Round the final result back to the default precision

```

Using keyword arguments, the code would be the following:
```
fromdecimalimport localcontext
with localcontext(prec=42) as ctx:
  s = calculate_something()
s = +s

```

Raises [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") if _kwargs_ supplies an attribute that [`Context`](https://docs.python.org/3/library/decimal.html#decimal.Context "decimal.Context") doesn’t support. Raises either [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") or [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if _kwargs_ supplies an invalid value for an attribute.
Changed in version 3.11: [`localcontext()`](https://docs.python.org/3/library/decimal.html#decimal.localcontext "decimal.localcontext") now supports setting context attributes through the use of keyword arguments.
New contexts can also be created using the [`Context`](https://docs.python.org/3/library/decimal.html#decimal.Context "decimal.Context") constructor described below. In addition, the module provides three pre-made contexts: 

decimal.BasicContext[¶](https://docs.python.org/3/library/decimal.html#decimal.BasicContext "Link to this definition")
    
This is a standard context defined by the General Decimal Arithmetic Specification. Precision is set to nine. Rounding is set to [`ROUND_HALF_UP`](https://docs.python.org/3/library/decimal.html#decimal.ROUND_HALF_UP "decimal.ROUND_HALF_UP"). All flags are cleared. All traps are enabled (treated as exceptions) except [`Inexact`](https://docs.python.org/3/library/decimal.html#decimal.Inexact "decimal.Inexact"), [`Rounded`](https://docs.python.org/3/library/decimal.html#decimal.Rounded "decimal.Rounded"), and [`Subnormal`](https://docs.python.org/3/library/decimal.html#decimal.Subnormal "decimal.Subnormal").
Because many of the traps are enabled, this context is useful for debugging. 

decimal.ExtendedContext[¶](https://docs.python.org/3/library/decimal.html#decimal.ExtendedContext "Link to this definition")
    
This is a standard context defined by the General Decimal Arithmetic Specification. Precision is set to nine. Rounding is set to [`ROUND_HALF_EVEN`](https://docs.python.org/3/library/decimal.html#decimal.ROUND_HALF_EVEN "decimal.ROUND_HALF_EVEN"). All flags are cleared. No traps are enabled (so that exceptions are not raised during computations).
Because the traps are disabled, this context is useful for applications that prefer to have result value of `NaN` or `Infinity` instead of raising exceptions. This allows an application to complete a run in the presence of conditions that would otherwise halt the program. 

decimal.DefaultContext[¶](https://docs.python.org/3/library/decimal.html#decimal.DefaultContext "Link to this definition")
    
This context is used by the [`Context`](https://docs.python.org/3/library/decimal.html#decimal.Context "decimal.Context") constructor as a prototype for new contexts. Changing a field (such a precision) has the effect of changing the default for new contexts created by the [`Context`](https://docs.python.org/3/library/decimal.html#decimal.Context "decimal.Context") constructor.
This context is most useful in multi-threaded environments. Changing one of the fields before threads are started has the effect of setting system-wide defaults. Changing the fields after threads have started is not recommended as it would require thread synchronization to prevent race conditions.
In single threaded environments, it is preferable to not use this context at all. Instead, simply create contexts explicitly as described below.
The default values are `Context.prec`=`28`, `Context.rounding`=[`ROUND_HALF_EVEN`](https://docs.python.org/3/library/decimal.html#decimal.ROUND_HALF_EVEN "decimal.ROUND_HALF_EVEN"), and enabled traps for [`Overflow`](https://docs.python.org/3/library/decimal.html#decimal.Overflow "decimal.Overflow"), [`InvalidOperation`](https://docs.python.org/3/library/decimal.html#decimal.InvalidOperation "decimal.InvalidOperation"), and [`DivisionByZero`](https://docs.python.org/3/library/decimal.html#decimal.DivisionByZero "decimal.DivisionByZero").
In addition to the three supplied contexts, new contexts can be created with the [`Context`](https://docs.python.org/3/library/decimal.html#decimal.Context "decimal.Context") constructor.