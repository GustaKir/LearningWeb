Title: List and Set Displays in Python
URL: https://docs.python.org/3/reference/expressions.html
Summary: A list display in Python creates a new list object from either a list of expressions or a comprehension. Elements are evaluated and added to the list in order. A set display, represented with curly braces, differs from dictionary displays by not using colons, only containing a list of expressions.
---

```
**list_display** ::= "[" [[flexible_expression_list](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-flexible_expression_list) | [comprehension](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-comprehension)] "]"

```

A list display yields a new list object, the contents being specified by either a list of expressions or a comprehension. When a comma-separated list of expressions is supplied, its elements are evaluated from left to right and placed into the list object in that order. When a comprehension is supplied, the list is constructed from the elements resulting from the comprehension.
### 6.2.6. Set displays[¶](https://docs.python.org/3/reference/expressions.html#set-displays "Link to this heading")
A set display is denoted by curly braces and distinguishable from dictionary displays by the lack of colons separating keys and values:
```
**set_display** ::= "{" ([flexible_expression_list](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-flexible_expression_list) | [comprehension](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-comprehension)) "}"

```

A set display yields a new mutable set object, the contents being specified by either a sequence of expressions or a comprehension. When a comma-separated list of expressions is supplied, its elements are evaluated from left to right and added to the set object. When a comprehension is supplied, the set is constructed from the elements resulting from the comprehension.
An empty set cannot be constructed with `{}`; this literal constructs an empty dictionary.
### 6.2.7. Dictionary displays[¶](https://docs.python.org/3/reference/expressions.html#dictionary-displays "Link to this heading")
A dictionary display is a possibly empty series of dict items (key/value pairs) enclosed in curly braces:
```
**dict_display**    ::= "{" [[dict_item_list](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-dict_item_list) | [dict_comprehension](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-dict_comprehension)] "}"
**dict_item_list**   ::= [dict_item](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-dict_item) ("," [dict_item](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-dict_item))* [","]
**dict_item**     ::= [expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-expression) ":" [expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-expression) | "**" [or_expr](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-or_expr)
**dict_comprehension** ::= [expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-expression) ":" [expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-expression) [comp_for](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-comp_for)