Title: Overview of multiprocessing with concurrent.futures
URL: https://docs.python.org/3/library/multiprocessing.html
Summary: The `concurrent.futures.ProcessPoolExecutor` provides a higher-level interface for managing background tasks without blocking the calling process, compared to the direct use of the `Pool` interface. It allows task submission to be decoupled from result retrieval.
---

```

See also
[`concurrent.futures.ProcessPoolExecutor`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor "concurrent.futures.ProcessPoolExecutor") offers a higher level interface to push tasks to a background process without blocking execution of the calling process. Compared to using the [`Pool`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool "multiprocessing.pool.Pool") interface directly, the [`concurrent.futures`](https://docs.python.org/3/library/concurrent.futures.html#module-concurrent.futures "concurrent.futures: Execute computations concurrently using threads or processes.") API more readily allows the submission of work to the underlying process pool to be separated from waiting for the results.
### The [`Process`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process "multiprocessing.Process") class[Â¶](https://docs.python.org/3/library/multiprocessing.html#the-process-class "Link to this heading")
In [`multiprocessing`](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing "multiprocessing: Process-based parallelism."), processes are spawned by creating a [`Process`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process "multiprocessing.Process") object and then calling its [`start()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.start "multiprocessing.Process.start") method. [`Process`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process "multiprocessing.Process") follows the API of [`threading.Thread`](https://docs.python.org/3/library/threading.html#threading.Thread "threading.Thread"). A trivial example of a multiprocess program is
```
frommultiprocessingimport Process
deff(name):
  print('hello', name)
if __name__ == '__main__':
  p = Process(target=f, args=('bob',))
  p.start()
  p.join()

```

To show the individual process IDs involved, here is an expanded example:
```
frommultiprocessingimport Process
importos
definfo(title):
  print(title)
  print('module name:', __name__)
  print('parent process:', os.getppid())
  print('process id:', os.getpid())
deff(name):
  info('function f')
  print('hello', name)
if __name__ == '__main__':
  info('main line')
  p = Process(target=f, args=('bob',))
  p.start()
  p.join()