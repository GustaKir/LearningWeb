Title: Datetime Module in Python
URL: https://docs.python.org/3/library/datetime.html
Summary: This chunk provides a code snippet for calculating a timestamp from a datetime object. It also explains the `weekday()` method, which returns the day of the week as an integer (Monday=0 to Sunday=6), and the `isoweekday()` method, which provides a similar functionality with a different range (Monday=1 to Sunday=7).
---

```
timestamp = (dt - datetime(1970, 1, 1)) / timedelta(seconds=1)

```


datetime.weekday()[¶](https://docs.python.org/3/library/datetime.html#datetime.datetime.weekday "Link to this definition")
    
Return the day of the week as an integer, where Monday is 0 and Sunday is 6. The same as `self.date().weekday()`. See also [`isoweekday()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.isoweekday "datetime.datetime.isoweekday"). 

datetime.isoweekday()[¶](https://docs.python.org/3/library/datetime.html#datetime.datetime.isoweekday "Link to this definition")
    
Return the day of the week as an integer, where Monday is 1 and Sunday is 7. The same as `self.date().isoweekday()`. See also [`weekday()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.weekday "datetime.datetime.weekday"), [`isocalendar()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.isocalendar "datetime.datetime.isocalendar"). 

datetime.isocalendar()[¶](https://docs.python.org/3/library/datetime.html#datetime.datetime.isocalendar "Link to this definition")
    
Return a [named tuple](https://docs.python.org/3/glossary.html#term-named-tuple) with three components: `year`, `week` and `weekday`. The same as `self.date().isocalendar()`. 

datetime.isoformat(_sep ='T'_, _timespec ='auto'_)[¶](https://docs.python.org/3/library/datetime.html#datetime.datetime.isoformat "Link to this definition")
    
Return a string representing the date and time in ISO 8601 format:
  * `YYYY-MM-DDTHH:MM:SS.ffffff`, if [`microsecond`](https://docs.python.org/3/library/datetime.html#datetime.datetime.microsecond "datetime.datetime.microsecond") is not 0
  * `YYYY-MM-DDTHH:MM:SS`, if [`microsecond`](https://docs.python.org/3/library/datetime.html#datetime.datetime.microsecond "datetime.datetime.microsecond") is 0


If [`utcoffset()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.utcoffset "datetime.datetime.utcoffset") does not return `None`, a string is appended, giving the UTC offset:
  * `YYYY-MM-DDTHH:MM:SS.ffffff+HH:MM[:SS[.ffffff]]`, if [`microsecond`](https://docs.python.org/3/library/datetime.html#datetime.datetime.microsecond "datetime.datetime.microsecond") is not 0
  * `YYYY-MM-DDTHH:MM:SS+HH:MM[:SS[.ffffff]]`, if [`microsecond`](https://docs.python.org/3/library/datetime.html#datetime.datetime.microsecond "datetime.datetime.microsecond") is 0


Examples:
>>>```
>>> fromdatetimeimport datetime, timezone
>>> datetime(2019, 5, 18, 15, 17, 8, 132263).isoformat()
'2019-05-18T15:17:08.132263'
>>> datetime(2019, 5, 18, 15, 17, tzinfo=timezone.utc).isoformat()
'2019-05-18T15:17:00+00:00'

```

The optional argument _sep_ (default `'T'`) is a one-character separator, placed between the date and time portions of the result. For example:
>>>```
>>> fromdatetimeimport tzinfo, timedelta, datetime
>>> classTZ(tzinfo):
... """A time zone with an arbitrary, constant -06:39 offset."""
...   defutcoffset(self, dt):
...     return timedelta(hours=-6, minutes=-39)
...
>>> datetime(2002, 12, 25, tzinfo=TZ()).isoformat(' ')
'2002-12-25 00:00:00-06:39'
>>> datetime(2009, 11, 27, microsecond=100, tzinfo=TZ()).isoformat()
'2009-11-27T00:00:00.000100-06:39'

```

The optional argument _timespec_ specifies the number of additional components of the time to include (the default is `'auto'`). It can be one of the following:
  * `'auto'`: Same as `'seconds'` if [`microsecond`](https://docs.python.org/3/library/datetime.html#datetime.datetime.microsecond "datetime.datetime.microsecond") is 0, same as `'microseconds'` otherwise.
  * `'hours'`: Include the [`hour`](https://docs.python.org/3/library/datetime.html#datetime.datetime.hour "datetime.datetime.hour") in the two-digit `HH` format.
  * `'minutes'`: Include [`hour`](https://docs.python.org/3/library/datetime.html#datetime.datetime.hour "datetime.datetime.hour") and [`minute`](https://docs.python.org/3/library/datetime.html#datetime.datetime.minute "datetime.datetime.minute") in `HH:MM` format.
  * `'seconds'`: Include [`hour`](https://docs.python.org/3/library/datetime.html#datetime.datetime.hour "datetime.datetime.hour"), [`minute`](https://docs.python.org/3/library/datetime.html#datetime.datetime.minute "datetime.datetime.minute"), and [`second`](https://docs.python.org/3/library/datetime.html#datetime.datetime.second "datetime.datetime.second") in `HH:MM:SS` format.
  * `'milliseconds'`: Include full time, but truncate fractional second part to milliseconds. `HH:MM:SS.sss` format.
  * `'microseconds'`: Include full time in `HH:MM:SS.ffffff` format.


Note
Excluded time components are truncated, not rounded.
[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") will be raised on an invalid _timespec_ argument:
>>>