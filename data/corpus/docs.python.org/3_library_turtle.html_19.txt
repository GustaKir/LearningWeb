Title: Turtle Graphics: Vec2D Class and Explanation
URL: https://docs.python.org/3/library/turtle.html
Summary: The turtle.Vec2D class represents two-dimensional vectors, supporting operations like addition, subtraction, and scalar multiplication, which are useful in turtle graphics. Additionally, this section introduces the turtle object-oriented interface and its key classes for creating and managing turtle graphics.
---

```

See [Compound shapes](https://docs.python.org/3/library/turtle.html#compoundshapes). 

_class_ turtle.Vec2D(_x_ , _y_)[¶](https://docs.python.org/3/library/turtle.html#turtle.Vec2D "Link to this definition")
    
A two-dimensional vector class, used as a helper class for implementing turtle graphics. May be useful for turtle graphics programs too. Derived from tuple, so a vector is a tuple!
Provides (for _a_ , _b_ vectors, _k_ number):
  * `a + b` vector addition
  * `a - b` vector subtraction
  * `a * b` inner product
  * `k * a` and `a * k` multiplication with scalar
  * `abs(a)` absolute value of a
  * `a.rotate(angle)` rotation


## Explanation[¶](https://docs.python.org/3/library/turtle.html#explanation "Link to this heading")
A turtle object draws on a screen object, and there a number of key classes in the turtle object-oriented interface that can be used to create them and relate them to each other.
A [`Turtle`](https://docs.python.org/3/library/turtle.html#turtle.Turtle "turtle.Turtle") instance will automatically create a [`Screen`](https://docs.python.org/3/library/turtle.html#turtle.Screen "turtle.Screen") instance if one is not already present.
`Turtle` is a subclass of [`RawTurtle`](https://docs.python.org/3/library/turtle.html#turtle.RawTurtle "turtle.RawTurtle"), which _doesn’t_ automatically create a drawing surface - a _canvas_ will need to be provided or created for it. The _canvas_ can be a `tkinter.Canvas`, [`ScrolledCanvas`](https://docs.python.org/3/library/turtle.html#turtle.ScrolledCanvas "turtle.ScrolledCanvas") or [`TurtleScreen`](https://docs.python.org/3/library/turtle.html#turtle.TurtleScreen "turtle.TurtleScreen").
[`TurtleScreen`](https://docs.python.org/3/library/turtle.html#turtle.TurtleScreen "turtle.TurtleScreen") is the basic drawing surface for a turtle. [`Screen`](https://docs.python.org/3/library/turtle.html#turtle.Screen "turtle.Screen") is a subclass of `TurtleScreen`, and includes [some additional methods](https://docs.python.org/3/library/turtle.html#screenspecific) for managing its appearance (including size and title) and behaviour. `TurtleScreen`’s constructor needs a `tkinter.Canvas` or a [`ScrolledCanvas`](https://docs.python.org/3/library/turtle.html#turtle.ScrolledCanvas "turtle.ScrolledCanvas") as an argument.
The functional interface for turtle graphics uses the various methods of `Turtle` and `TurtleScreen`/`Screen`. Behind the scenes, a screen object is automatically created whenever a function derived from a `Screen` method is called. Similarly, a turtle object is automatically created whenever any of the functions derived from a Turtle method is called.
To use multiple turtles on a screen, the object-oriented interface must be used.
## Help and configuration[¶](https://docs.python.org/3/library/turtle.html#help-and-configuration "Link to this heading")
### How to use help[¶](https://docs.python.org/3/library/turtle.html#how-to-use-help "Link to this heading")
The public methods of the Screen and Turtle classes are documented extensively via docstrings. So these can be used as online-help via the Python help facilities:
  * When using IDLE, tooltips show the signatures and first lines of the docstrings of typed in function-/method calls.
  * Calling [`help()`](https://docs.python.org/3/library/functions.html#help "help") on methods or functions displays the docstrings:
>>>```
>>> help(Screen.bgcolor)
Help on method bgcolor in module turtle:
bgcolor(self, *args) unbound turtle.Screen method
  Set or return backgroundcolor of the TurtleScreen.
  Arguments (if given): a color string or three numbers
  in the range 0..colormode or a 3-tuple of such numbers.

  >>> screen.bgcolor("orange")
  >>> screen.bgcolor()
  "orange"
  >>> screen.bgcolor(0.5,0,0.5)
  >>> screen.bgcolor()
  "#800080"
>>> help(Turtle.penup)
Help on method penup in module turtle:
penup(self) unbound turtle.Turtle method
  Pull the pen up -- no drawing when moving.
  Aliases: penup | pu | up
  No argument
  >>> turtle.penup()

```

  * The docstrings of the functions which are derived from methods have a modified form:
>>>```
>>> help(bgcolor)
Help on function bgcolor in module turtle:
bgcolor(*args)
  Set or return backgroundcolor of the TurtleScreen.
  Arguments (if given): a color string or three numbers
  in the range 0..colormode or a 3-tuple of such numbers.
  Example::
   >>> bgcolor("orange")
   >>> bgcolor()
   "orange"
   >>> bgcolor(0.5,0,0.5)
   >>> bgcolor()
   "#800080"
>>> help(penup)
Help on function penup in module turtle:
penup()
  Pull the pen up -- no drawing when moving.
  Aliases: penup | pu | up
  No argument
  Example:
  >>> penup()