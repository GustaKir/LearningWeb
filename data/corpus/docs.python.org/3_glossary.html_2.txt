Title: Glossary of Python Terms
URL: https://docs.python.org/3/glossary.html
Summary: This section defines key Python terminology related to arguments and asynchronous context managers. It explains how arguments are assigned to local variables in a function and provides links to further resources, including the difference between arguments and parameters and relevant PEP documentation.
---

```



Arguments are assigned to the named local variables in a function body. See the [Calls](https://docs.python.org/3/reference/expressions.html#calls) section for the rules governing this assignment. Syntactically, any expression can be used to represent an argument; the evaluated value is assigned to the local variable.
See also the [parameter](https://docs.python.org/3/glossary.html#term-parameter) glossary entry, the FAQ question on [the difference between arguments and parameters](https://docs.python.org/3/faq/programming.html#faq-argument-vs-parameter), and [**PEP 362**](https://peps.python.org/pep-0362/). 

asynchronous context manager[¶](https://docs.python.org/3/glossary.html#term-asynchronous-context-manager "Link to this term")
    
An object which controls the environment seen in an [`async with`](https://docs.python.org/3/reference/compound_stmts.html#async-with) statement by defining [`__aenter__()`](https://docs.python.org/3/reference/datamodel.html#object.__aenter__ "object.__aenter__") and [`__aexit__()`](https://docs.python.org/3/reference/datamodel.html#object.__aexit__ "object.__aexit__") methods. Introduced by [**PEP 492**](https://peps.python.org/pep-0492/). 

asynchronous generator[¶](https://docs.python.org/3/glossary.html#term-asynchronous-generator "Link to this term")
    
A function which returns an [asynchronous generator iterator](https://docs.python.org/3/glossary.html#term-asynchronous-generator-iterator). It looks like a coroutine function defined with [`async def`](https://docs.python.org/3/reference/compound_stmts.html#async-def) except that it contains [`yield`](https://docs.python.org/3/reference/simple_stmts.html#yield) expressions for producing a series of values usable in an [`async for`](https://docs.python.org/3/reference/compound_stmts.html#async-for) loop.
Usually refers to an asynchronous generator function, but may refer to an _asynchronous generator iterator_ in some contexts. In cases where the intended meaning isn’t clear, using the full terms avoids ambiguity.
An asynchronous generator function may contain [`await`](https://docs.python.org/3/reference/expressions.html#await) expressions as well as [`async for`](https://docs.python.org/3/reference/compound_stmts.html#async-for), and [`async with`](https://docs.python.org/3/reference/compound_stmts.html#async-with) statements. 

asynchronous generator iterator[¶](https://docs.python.org/3/glossary.html#term-asynchronous-generator-iterator "Link to this term")
    
An object created by a [asynchronous generator](https://docs.python.org/3/glossary.html#term-asynchronous-generator) function.
This is an [asynchronous iterator](https://docs.python.org/3/glossary.html#term-asynchronous-iterator) which when called using the [`__anext__()`](https://docs.python.org/3/reference/datamodel.html#object.__anext__ "object.__anext__") method returns an awaitable object which will execute the body of the asynchronous generator function until the next [`yield`](https://docs.python.org/3/reference/simple_stmts.html#yield) expression.
Each [`yield`](https://docs.python.org/3/reference/simple_stmts.html#yield) temporarily suspends processing, remembering the execution state (including local variables and pending try-statements). When the _asynchronous generator iterator_ effectively resumes with another awaitable returned by [`__anext__()`](https://docs.python.org/3/reference/datamodel.html#object.__anext__ "object.__anext__"), it picks up where it left off. See [**PEP 492**](https://peps.python.org/pep-0492/) and [**PEP 525**](https://peps.python.org/pep-0525/). 

asynchronous iterable[¶](https://docs.python.org/3/glossary.html#term-asynchronous-iterable "Link to this term")
    
An object, that can be used in an [`async for`](https://docs.python.org/3/reference/compound_stmts.html#async-for) statement. Must return an [asynchronous iterator](https://docs.python.org/3/glossary.html#term-asynchronous-iterator) from its [`__aiter__()`](https://docs.python.org/3/reference/datamodel.html#object.__aiter__ "object.__aiter__") method. Introduced by [**PEP 492**](https://peps.python.org/pep-0492/).