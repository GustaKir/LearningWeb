Title: ResourceDenied Exception in Python's Test Support
URL: https://docs.python.org/3/library/test.html
Summary: The `ResourceDenied` exception is a subclass of `unittest.SkipTest`, raised when a required resource like a network connection is unavailable. It is triggered by the `requires()` function. Additionally, the `test.support` module provides a `verbose` constant that indicates whether verbose output is enabled for more detailed test information.
---

_exception_ test.support.ResourceDenied[¶](https://docs.python.org/3/library/test.html#test.support.ResourceDenied "Link to this definition")
    
Subclass of [`unittest.SkipTest`](https://docs.python.org/3/library/unittest.html#unittest.SkipTest "unittest.SkipTest"). Raised when a resource (such as a network connection) is not available. Raised by the [`requires()`](https://docs.python.org/3/library/test.html#test.support.requires "test.support.requires") function.
The [`test.support`](https://docs.python.org/3/library/test.html#module-test.support "test.support: Support for Python's regression test suite.") module defines the following constants: 

test.support.verbose[¶](https://docs.python.org/3/library/test.html#test.support.verbose "Link to this definition")
    
`True` when verbose output is enabled. Should be checked when more detailed information is desired about a running test. _verbose_ is set by [`test.regrtest`](https://docs.python.org/3/library/test.html#module-test.regrtest "test.regrtest: Drives the regression test suite."). 

test.support.is_jython[¶](https://docs.python.org/3/library/test.html#test.support.is_jython "Link to this definition")
    
`True` if the running interpreter is Jython. 

test.support.is_android[¶](https://docs.python.org/3/library/test.html#test.support.is_android "Link to this definition")
    
`True` if the system is Android. 

test.support.unix_shell[¶](https://docs.python.org/3/library/test.html#test.support.unix_shell "Link to this definition")
    
Path for shell if not on Windows; otherwise `None`. 

test.support.LOOPBACK_TIMEOUT[¶](https://docs.python.org/3/library/test.html#test.support.LOOPBACK_TIMEOUT "Link to this definition")
    
Timeout in seconds for tests using a network server listening on the network local loopback interface like `127.0.0.1`.
The timeout is long enough to prevent test failure: it takes into account that the client and the server can run in different threads or even different processes.
The timeout should be long enough for [`connect()`](https://docs.python.org/3/library/socket.html#socket.socket.connect "socket.socket.connect"), [`recv()`](https://docs.python.org/3/library/socket.html#socket.socket.recv "socket.socket.recv") and [`send()`](https://docs.python.org/3/library/socket.html#socket.socket.send "socket.socket.send") methods of [`socket.socket`](https://docs.python.org/3/library/socket.html#socket.socket "socket.socket").
Its default value is 5 seconds.
See also [`INTERNET_TIMEOUT`](https://docs.python.org/3/library/test.html#test.support.INTERNET_TIMEOUT "test.support.INTERNET_TIMEOUT"). 

test.support.INTERNET_TIMEOUT[¶](https://docs.python.org/3/library/test.html#test.support.INTERNET_TIMEOUT "Link to this definition")
    
Timeout in seconds for network requests going to the internet.
The timeout is short enough to prevent a test to wait for too long if the internet request is blocked for whatever reason.
Usually, a timeout using [`INTERNET_TIMEOUT`](https://docs.python.org/3/library/test.html#test.support.INTERNET_TIMEOUT "test.support.INTERNET_TIMEOUT") should not mark a test as failed, but skip the test instead: see [`transient_internet()`](https://docs.python.org/3/library/test.html#test.support.socket_helper.transient_internet "test.support.socket_helper.transient_internet").
Its default value is 1 minute.
See also [`LOOPBACK_TIMEOUT`](https://docs.python.org/3/library/test.html#test.support.LOOPBACK_TIMEOUT "test.support.LOOPBACK_TIMEOUT"). 

test.support.SHORT_TIMEOUT[¶](https://docs.python.org/3/library/test.html#test.support.SHORT_TIMEOUT "Link to this definition")
    
Timeout in seconds to mark a test as failed if the test takes “too long”.
The timeout value depends on the regrtest `--timeout` command line option.
If a test using [`SHORT_TIMEOUT`](https://docs.python.org/3/library/test.html#test.support.SHORT_TIMEOUT "test.support.SHORT_TIMEOUT") starts to fail randomly on slow buildbots, use [`LONG_TIMEOUT`](https://docs.python.org/3/library/test.html#test.support.LONG_TIMEOUT "test.support.LONG_TIMEOUT") instead.
Its default value is 30 seconds. 

test.support.LONG_TIMEOUT[¶](https://docs.python.org/3/library/test.html#test.support.LONG_TIMEOUT "Link to this definition")
    
Timeout in seconds to detect when a test hangs.
It is long enough to reduce the risk of test failure on the slowest Python buildbots. It should not be used to mark a test as failed if the test takes “too long”. The timeout value depends on the regrtest `--timeout` command line option.
Its default value is 5 minutes.
See also [`LOOPBACK_TIMEOUT`](https://docs.python.org/3/library/test.html#test.support.LOOPBACK_TIMEOUT "test.support.LOOPBACK_TIMEOUT"), [`INTERNET_TIMEOUT`](https://docs.python.org/3/library/test.html#test.support.INTERNET_TIMEOUT "test.support.INTERNET_TIMEOUT") and [`SHORT_TIMEOUT`](https://docs.python.org/3/library/test.html#test.support.SHORT_TIMEOUT "test.support.SHORT_TIMEOUT").