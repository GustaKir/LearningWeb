Title: Integrating Python Logging with Qt
URL: https://docs.python.org/3/howto/logging-cookbook.html
Summary: This segment discusses integrating Python's logging module with various Qt packages, handling different imports based on available libraries such as PySide and PyQt. It introduces a Signaller class that utilizes signals to send log messages within the constraints of Qt's main thread.
---

```
importdatetime
importlogging
importrandom
importsys
importtime
# Deal with minor differences between different Qt packages
try:
  fromPySide6import QtCore, QtGui, QtWidgets
  Signal = QtCore.Signal
  Slot = QtCore.Slot
except ImportError:
  try:
    fromPyQt6import QtCore, QtGui, QtWidgets
    Signal = QtCore.pyqtSignal
    Slot = QtCore.pyqtSlot
  except ImportError:
    try:
      fromPySide2import QtCore, QtGui, QtWidgets
      Signal = QtCore.Signal
      Slot = QtCore.Slot
    except ImportError:
      fromPyQt5import QtCore, QtGui, QtWidgets
      Signal = QtCore.pyqtSignal
      Slot = QtCore.pyqtSlot
logger = logging.getLogger(__name__)

#
# Signals need to be contained in a QObject or subclass in order to be correctly
# initialized.
#
classSignaller(QtCore.QObject):
  signal = Signal(str, logging.LogRecord)
#
# Output to a Qt GUI is only supposed to happen on the main thread. So, this
# handler is designed to take a slot function which is set up to run in the main
# thread. In this example, the function takes a string argument which is a
# formatted log message, and the log record which generated it. The formatted
# string is just a convenience - you could format a string for output any way
# you like in the slot function itself.
#
# You specify the slot function to do whatever GUI updates you want. The handler
# doesn't know or care about specific UI elements.
#
classQtHandler(logging.Handler):
  def__init__(self, slotfunc, *args, **kwargs):
    super().__init__(*args, **kwargs)
    self.signaller = Signaller()
    self.signaller.signal.connect(slotfunc)
  defemit(self, record):
    s = self.format(record)
    self.signaller.signal.emit(s, record)
#
# This example uses QThreads, which means that the threads at the Python level
# are named something like "Dummy-1". The function below gets the Qt name of the
# current thread.
#
defctname():
  return QtCore.QThread.currentThread().objectName()