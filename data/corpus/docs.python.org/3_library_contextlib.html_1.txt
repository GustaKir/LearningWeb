Title: AbstractContextManager Class in contextlib
URL: https://docs.python.org/3/library/contextlib.html
Summary: The contextlib.AbstractContextManager is an abstract base class for creating context managers in Python. It provides a default implementation of the __enter__() method, returning self, while the __exit__() method is abstract and defaults to returning None. This class was introduced in Python version 3.6.
---

_class_ contextlib.AbstractContextManager[¶](https://docs.python.org/3/library/contextlib.html#contextlib.AbstractContextManager "Link to this definition")
    
An [abstract base class](https://docs.python.org/3/glossary.html#term-abstract-base-class) for classes that implement [`object.__enter__()`](https://docs.python.org/3/reference/datamodel.html#object.__enter__ "object.__enter__") and [`object.__exit__()`](https://docs.python.org/3/reference/datamodel.html#object.__exit__ "object.__exit__"). A default implementation for [`object.__enter__()`](https://docs.python.org/3/reference/datamodel.html#object.__enter__ "object.__enter__") is provided which returns `self` while [`object.__exit__()`](https://docs.python.org/3/reference/datamodel.html#object.__exit__ "object.__exit__") is an abstract method which by default returns `None`. See also the definition of [Context Manager Types](https://docs.python.org/3/library/stdtypes.html#typecontextmanager).
Added in version 3.6. 

_class_ contextlib.AbstractAsyncContextManager[¶](https://docs.python.org/3/library/contextlib.html#contextlib.AbstractAsyncContextManager "Link to this definition")
    
An [abstract base class](https://docs.python.org/3/glossary.html#term-abstract-base-class) for classes that implement [`object.__aenter__()`](https://docs.python.org/3/reference/datamodel.html#object.__aenter__ "object.__aenter__") and [`object.__aexit__()`](https://docs.python.org/3/reference/datamodel.html#object.__aexit__ "object.__aexit__"). A default implementation for [`object.__aenter__()`](https://docs.python.org/3/reference/datamodel.html#object.__aenter__ "object.__aenter__") is provided which returns `self` while [`object.__aexit__()`](https://docs.python.org/3/reference/datamodel.html#object.__aexit__ "object.__aexit__") is an abstract method which by default returns `None`. See also the definition of [Asynchronous Context Managers](https://docs.python.org/3/reference/datamodel.html#async-context-managers).
Added in version 3.7. 

@contextlib.contextmanager[¶](https://docs.python.org/3/library/contextlib.html#contextlib.contextmanager "Link to this definition")
    
This function is a [decorator](https://docs.python.org/3/glossary.html#term-decorator) that can be used to define a factory function for [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement context managers, without needing to create a class or separate [`__enter__()`](https://docs.python.org/3/reference/datamodel.html#object.__enter__ "object.__enter__") and [`__exit__()`](https://docs.python.org/3/reference/datamodel.html#object.__exit__ "object.__exit__") methods.
While many objects natively support use in with statements, sometimes a resource needs to be managed that isn’t a context manager in its own right, and doesn’t implement a `close()` method for use with `contextlib.closing`.
An abstract example would be the following to ensure correct resource management:
```
fromcontextlibimport contextmanager
@contextmanager
defmanaged_resource(*args, **kwds):
  # Code to acquire resource, e.g.:
  resource = acquire_resource(*args, **kwds)
  try:
    yield resource
  finally:
    # Code to release resource, e.g.:
    release_resource(resource)

```

The function can then be used like this:
>>>```
>>> with managed_resource(timeout=3600) as resource:
...   # Resource is released at the end of this block,
...   # even if code in the block raises an exception