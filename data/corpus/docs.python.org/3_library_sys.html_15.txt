Title: Understanding sys.hexversion and sys.implementation
URL: https://docs.python.org/3/library/sys.html
Summary: This section explains `sys.hexversion`, which provides a hexadecimal version number for the Python interpreter, and indicates that `sys.version_info` offers a more human-readable version. It also introduces `sys.implementation`, an object that contains details about the current Python interpreter's implementation, including its identifier.
---

```

This is called `hexversion` since it only really looks meaningful when viewed as the result of passing it to the built-in [`hex()`](https://docs.python.org/3/library/functions.html#hex "hex") function. The [named tuple](https://docs.python.org/3/glossary.html#term-named-tuple) [`sys.version_info`](https://docs.python.org/3/library/sys.html#sys.version_info "sys.version_info") may be used for a more human-friendly encoding of the same information.
More details of `hexversion` can be found at [API and ABI Versioning](https://docs.python.org/3/c-api/apiabiversion.html#apiabiversion). 

sys.implementation[¶](https://docs.python.org/3/library/sys.html#sys.implementation "Link to this definition")
    
An object containing information about the implementation of the currently running Python interpreter. The following attributes are required to exist in all Python implementations.
_name_ is the implementation’s identifier, e.g. `'cpython'`. The actual string is defined by the Python implementation, but it is guaranteed to be lower case.
_version_ is a named tuple, in the same format as [`sys.version_info`](https://docs.python.org/3/library/sys.html#sys.version_info "sys.version_info"). It represents the version of the Python _implementation_. This has a distinct meaning from the specific version of the Python _language_ to which the currently running interpreter conforms, which `sys.version_info` represents. For example, for PyPy 1.8 `sys.implementation.version` might be `sys.version_info(1, 8, 0, 'final', 0)`, whereas `sys.version_info` would be `sys.version_info(2, 7, 2, 'final', 0)`. For CPython they are the same value, since it is the reference implementation.
_hexversion_ is the implementation version in hexadecimal format, like [`sys.hexversion`](https://docs.python.org/3/library/sys.html#sys.hexversion "sys.hexversion").
_cache_tag_ is the tag used by the import machinery in the filenames of cached modules. By convention, it would be a composite of the implementation’s name and version, like `'cpython-33'`. However, a Python implementation may use some other value if appropriate. If `cache_tag` is set to `None`, it indicates that module caching should be disabled.
[`sys.implementation`](https://docs.python.org/3/library/sys.html#sys.implementation "sys.implementation") may contain additional attributes specific to the Python implementation. These non-standard attributes must start with an underscore, and are not described here. Regardless of its contents, [`sys.implementation`](https://docs.python.org/3/library/sys.html#sys.implementation "sys.implementation") will not change during a run of the interpreter, nor between implementation versions. (It may change between Python language versions, however.) See [**PEP 421**](https://peps.python.org/pep-0421/) for more information.
Added in version 3.3.
Note
The addition of new required attributes must go through the normal PEP process. See [**PEP 421**](https://peps.python.org/pep-0421/) for more information. 

sys.int_info[¶](https://docs.python.org/3/library/sys.html#sys.int_info "Link to this definition")
    
A [named tuple](https://docs.python.org/3/glossary.html#term-named-tuple) that holds information about Python’s internal representation of integers. The attributes are read only. 

int_info.bits_per_digit[¶](https://docs.python.org/3/library/sys.html#sys.int_info.bits_per_digit "Link to this definition")
    
The number of bits held in each digit. Python integers are stored internally in base `2**int_info.bits_per_digit`. 

int_info.sizeof_digit[¶](https://docs.python.org/3/library/sys.html#sys.int_info.sizeof_digit "Link to this definition")
    
The size in bytes of the C type used to represent a digit. 

int_info.default_max_str_digits[¶](https://docs.python.org/3/library/sys.html#sys.int_info.default_max_str_digits "Link to this definition")
    
The default value for [`sys.get_int_max_str_digits()`](https://docs.python.org/3/library/sys.html#sys.get_int_max_str_digits "sys.get_int_max_str_digits") when it is not otherwise explicitly configured. 

int_info.str_digits_check_threshold[¶](https://docs.python.org/3/library/sys.html#sys.int_info.str_digits_check_threshold "Link to this definition")
    
The minimum non-zero value for [`sys.set_int_max_str_digits()`](https://docs.python.org/3/library/sys.html#sys.set_int_max_str_digits "sys.set_int_max_str_digits"), [`PYTHONINTMAXSTRDIGITS`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONINTMAXSTRDIGITS), or [`-X int_max_str_digits`](https://docs.python.org/3/using/cmdline.html#cmdoption-X).
Added in version 3.1.
Changed in version 3.11: Added [`default_max_str_digits`](https://docs.python.org/3/library/sys.html#sys.int_info.default_max_str_digits "sys.int_info.default_max_str_digits") and [`str_digits_check_threshold`](https://docs.python.org/3/library/sys.html#sys.int_info.str_digits_check_threshold "sys.int_info.str_digits_check_threshold").