Title: BOLT Post-Link Binary Optimizer Configuration
URL: https://docs.python.org/3/using/configure.html
Summary: The '--enable-bolt' option enables the usage of the BOLT optimizer, which is disabled by default. It requires 'llvm-bolt' and 'merge-fdata' and is currently experimental. Compatibility and success are influenced by the build environment, optimization arguments, and CPU architecture. It is recommended to use LLVM 16 or newer due to known issues with earlier versions.
---

--enable-bolt[¶](https://docs.python.org/3/using/configure.html#cmdoption-enable-bolt "Link to this definition")
    
Enable usage of the [BOLT post-link binary optimizer](https://github.com/llvm/llvm-project/tree/main/bolt) (disabled by default).
BOLT is part of the LLVM project but is not always included in their binary distributions. This flag requires that `llvm-bolt` and `merge-fdata` are available.
BOLT is still a fairly new project so this flag should be considered experimental for now. Because this tool operates on machine code its success is dependent on a combination of the build environment + the other optimization configure args + the CPU architecture, and not all combinations are supported. BOLT versions before LLVM 16 are known to crash BOLT under some scenarios. Use of LLVM 16 or newer for BOLT optimization is strongly encouraged.
The `BOLT_INSTRUMENT_FLAGS` and `BOLT_APPLY_FLAGS` **configure** variables can be defined to override the default set of arguments for **llvm-bolt** to instrument and apply BOLT data to binaries, respectively.
Added in version 3.12. 

BOLT_APPLY_FLAGS[¶](https://docs.python.org/3/using/configure.html#cmdoption-arg-BOLT_APPLY_FLAGS "Link to this definition")
    
Arguments to `llvm-bolt` when creating a [BOLT optimized binary](https://github.com/facebookarchive/BOLT).
Added in version 3.12. 

BOLT_INSTRUMENT_FLAGS[¶](https://docs.python.org/3/using/configure.html#cmdoption-arg-BOLT_INSTRUMENT_FLAGS "Link to this definition")
    
Arguments to `llvm-bolt` when instrumenting binaries.
Added in version 3.12. 

--with-computed-gotos[¶](https://docs.python.org/3/using/configure.html#cmdoption-with-computed-gotos "Link to this definition")
    
Enable computed gotos in evaluation loop (enabled by default on supported compilers). 

--without-mimalloc[¶](https://docs.python.org/3/using/configure.html#cmdoption-without-mimalloc "Link to this definition")
    
Disable the fast [mimalloc](https://docs.python.org/3/c-api/memory.html#mimalloc) allocator (enabled by default).
See also [`PYTHONMALLOC`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONMALLOC) environment variable. 

--without-pymalloc[¶](https://docs.python.org/3/using/configure.html#cmdoption-without-pymalloc "Link to this definition")
    
Disable the specialized Python memory allocator [pymalloc](https://docs.python.org/3/c-api/memory.html#pymalloc) (enabled by default).
See also [`PYTHONMALLOC`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONMALLOC) environment variable. 

--without-doc-strings[¶](https://docs.python.org/3/using/configure.html#cmdoption-without-doc-strings "Link to this definition")
    
Disable static documentation strings to reduce the memory footprint (enabled by default). Documentation strings defined in Python are not affected.
Don’t define the `WITH_DOC_STRINGS` macro.
See the `PyDoc_STRVAR()` macro. 

--enable-profiling[¶](https://docs.python.org/3/using/configure.html#cmdoption-enable-profiling "Link to this definition")
    
Enable C-level code profiling with `gprof` (disabled by default).