Title: Core and Builtins Updates
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section outlines several important updates to Python's core and built-in functions, including fixes for `PyEval_EvalCodeEx()` arguments and a reference leak, improvements to GILState API compatibility with subinterpreters, corrections to exception message line numbers for `continue` and `break`, and other related enhancements.
---

### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id171 "Link to this heading")
  * [gh-92173](https://github.com/python/cpython/issues/92173): Fix the `defs` and `kwdefs` arguments to [`PyEval_EvalCodeEx()`](https://docs.python.org/3/c-api/veryhigh.html#c.PyEval_EvalCodeEx "PyEval_EvalCodeEx") and a reference leak in that function.
  * [gh-59956](https://github.com/python/cpython/issues/59956): The GILState API is now partially compatible with subinterpreters. Previously, `PyThreadState_GET()` and `PyGILState_GetThisThreadState()` would get out of sync, causing inconsistent behavior and crashes.
  * [gh-101400](https://github.com/python/cpython/issues/101400): Fix wrong lineno in exception message on [`continue`](https://docs.python.org/3/reference/simple_stmts.html#continue) or [`break`](https://docs.python.org/3/reference/simple_stmts.html#break) which are not in a loop. Patch by Donghee Na.
  * [gh-101372](https://github.com/python/cpython/issues/101372): Fix [`is_normalized()`](https://docs.python.org/3/library/unicodedata.html#unicodedata.is_normalized "unicodedata.is_normalized") to properly handle the UCD 3.2.0 cases. Patch by Donghee Na.
  * [gh-101266](https://github.com/python/cpython/issues/101266): Fix [`sys.getsizeof()`](https://docs.python.org/3/library/sys.html#sys.getsizeof "sys.getsizeof") reporting for [`int`](https://docs.python.org/3/library/functions.html#int "int") subclasses.
  * [gh-101291](https://github.com/python/cpython/issues/101291): Refactor the `PyLongObject` struct into a normal Python object header and a `PyLongValue` struct.
  * [gh-101046](https://github.com/python/cpython/issues/101046): Fix a possible memory leak in the parser when raising [`MemoryError`](https://docs.python.org/3/library/exceptions.html#MemoryError "MemoryError"). Patch by Pablo Galindo
  * [gh-101037](https://github.com/python/cpython/issues/101037): Fix potential memory underallocation issue for instances of [`int`](https://docs.python.org/3/library/functions.html#int "int") subclasses with value zero.
  * [gh-100762](https://github.com/python/cpython/issues/100762): Record the (virtual) exception block depth in the oparg of [`YIELD_VALUE`](https://docs.python.org/3/library/dis.html#opcode-YIELD_VALUE). Use this to avoid the expensive `throw()` when closing generators (and coroutines) that can be closed trivially.
  * [gh-100982](https://github.com/python/cpython/issues/100982): Adds a new `COMPARE_AND_BRANCH` instruction. This is a bit more efficient when performing a comparison immediately followed by a branch, and restores the design intent of PEP 659 that specializations are local to a single instruction.
  * [gh-100942](https://github.com/python/cpython/issues/100942): Fixed segfault in property.getter/setter/deleter that occurred when a property subclass overrode the `__new__` method to return a non-property instance.
  * [gh-100923](https://github.com/python/cpython/issues/100923): Remove the `mask` cache entry for the [`COMPARE_OP`](https://docs.python.org/3/library/dis.html#opcode-COMPARE_OP) instruction and embed the mask into the oparg.
  * [gh-100892](https://github.com/python/cpython/issues/100892): Fix race while iterating over thread states in clearing [`threading.local`](https://docs.python.org/3/library/threading.html#threading.local "threading.local"). Patch by Kumar Aditya.
  * [gh-91351](https://github.com/python/cpython/issues/91351): Fix a case where re-entrant imports could corrupt the import deadlock detection code and cause a [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError") to be raised out of `importlib/_bootstrap`. In addition to the straightforward cases, this could also happen when garbage collection leads to a warning being emitted – as happens when it collects an open socket or file)
  * [gh-100726](https://github.com/python/cpython/issues/100726): Optimize construction of `range` object for medium size integers.
  * [gh-100712](https://github.com/python/cpython/issues/100712): Added option to build cpython with specialization disabled, by setting `ENABLE_SPECIALIZATION=False` in `opcode`, followed by `make regen-all`.
  * [bpo-32780](https://bugs.python.org/issue?@action=redirect&bpo=32780): Inter-field padding is now inserted into the PEP3118 format strings obtained from [`ctypes.Structure`](https://docs.python.org/3/library/ctypes.html#ctypes.Structure "ctypes.Structure") objects, reflecting their true representation in memory.