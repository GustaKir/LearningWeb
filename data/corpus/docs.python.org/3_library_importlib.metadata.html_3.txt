Title: Entry Points in importlib.metadata
URL: https://docs.python.org/3/library/importlib.metadata.html
Summary: This section discusses the `group` and `name` values defined by package authors for resolving entry points. It highlights changes in version 3.12 with the introduction of selectable entry points and the transition to an `EntryPoints` object in Python 3.12. It also notes changes in version 3.13 regarding the interface of `EntryPoint` objects.
---

```

The `group` and `name` are arbitrary values defined by the package author and usually a client will wish to resolve all entry points for a particular group. Read [the setuptools docs](https://setuptools.pypa.io/en/latest/userguide/entry_point.html) for more information on entry points, their definition, and usage.
Changed in version 3.12: The “selectable” entry points were introduced in `importlib_metadata` 3.6 and Python 3.10. Prior to those changes, `entry_points` accepted no parameters and always returned a dictionary of entry points, keyed by group. With `importlib_metadata` 5.0 and Python 3.12, `entry_points` always returns an `EntryPoints` object. See [backports.entry_points_selectable](https://pypi.org/project/backports.entry_points_selectable/) for compatibility options.
Changed in version 3.13: `EntryPoint` objects no longer present a tuple-like interface ([`__getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__getitem__ "object.__getitem__")).
### Distribution metadata[¶](https://docs.python.org/3/library/importlib.metadata.html#distribution-metadata "Link to this heading") 

importlib.metadata.metadata(_distribution_name_)[¶](https://docs.python.org/3/library/importlib.metadata.html#importlib.metadata.metadata "Link to this definition")
    
Return the distribution metadata corresponding to the named distribution package as a [`PackageMetadata`](https://docs.python.org/3/library/importlib.metadata.html#importlib.metadata.PackageMetadata "importlib.metadata.PackageMetadata") instance.
Raises [`PackageNotFoundError`](https://docs.python.org/3/library/importlib.metadata.html#importlib.metadata.PackageNotFoundError "importlib.metadata.PackageNotFoundError") if the named distribution package is not installed in the current Python environment. 

_class_ importlib.metadata.PackageMetadata[¶](https://docs.python.org/3/library/importlib.metadata.html#importlib.metadata.PackageMetadata "Link to this definition")
    
A concrete implementation of the [PackageMetadata protocol](https://importlib-metadata.readthedocs.io/en/latest/api.html#importlib_metadata.PackageMetadata).
In addition to providing the defined protocol methods and attributes, subscripting the instance is equivalent to calling the `get()` method.
Every [Distribution Package](https://packaging.python.org/en/latest/glossary/#term-Distribution-Package) includes some metadata, which you can extract using the `metadata()` function:
>>>```
>>> wheel_metadata = metadata('wheel')

```

The keys of the returned data structure name the metadata keywords, and the values are returned unparsed from the distribution metadata:
>>>```
>>> wheel_metadata['Requires-Python']
'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'

```

[`PackageMetadata`](https://docs.python.org/3/library/importlib.metadata.html#importlib.metadata.PackageMetadata "importlib.metadata.PackageMetadata") also presents a `json` attribute that returns all the metadata in a JSON-compatible form per [**PEP 566**](https://peps.python.org/pep-0566/):
>>>```
>>> wheel_metadata.json['requires_python']
'>=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*'

```

The full set of available metadata is not described here. See the PyPA [Core metadata specification](https://packaging.python.org/en/latest/specifications/core-metadata/#core-metadata) for additional details.
Changed in version 3.10: The `Description` is now included in the metadata when presented through the payload. Line continuation characters have been removed.
The `json` attribute was added.
### Distribution versions[¶](https://docs.python.org/3/library/importlib.metadata.html#distribution-versions "Link to this heading") 

importlib.metadata.version(_distribution_name_)[¶](https://docs.python.org/3/library/importlib.metadata.html#importlib.metadata.version "Link to this definition")
    
Return the installed distribution package [version](https://packaging.python.org/en/latest/specifications/core-metadata/#version) for the named distribution package.
Raises [`PackageNotFoundError`](https://docs.python.org/3/library/importlib.metadata.html#importlib.metadata.PackageNotFoundError "importlib.metadata.PackageNotFoundError") if the named distribution package is not installed in the current Python environment.
The `version()` function is the quickest way to get a [Distribution Package](https://packaging.python.org/en/latest/glossary/#term-Distribution-Package)’s version number, as a string:
>>>```
>>> version('wheel')
'0.32.3'