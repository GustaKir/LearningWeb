Title: Turtle Shape Registration
URL: https://docs.python.org/3/library/turtle.html
Summary: The 'turtle.register_shape' function allows for the registration of new shapes in the turtle graphics library. It can register image shapes from gif files, polygon shapes defined by coordinate tuples, or compound shapes through Shape objects. Note that image shapes do not rotate with the turtle's heading.
---

```


turtle.register_shape(_name_ , _shape =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.register_shape "Link to this definition")


turtle.addshape(_name_ , _shape =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.addshape "Link to this definition")
    
There are three different ways to call this function:
  1. _name_ is the name of a gif-file and _shape_ is `None`: Install the corresponding image shape.
>>>```
>>> screen.register_shape("turtle.gif")

```

Note
Image shapes _do not_ rotate when turning the turtle, so they do not display the heading of the turtle!
  2. _name_ is an arbitrary string and _shape_ is a tuple of pairs of coordinates: Install the corresponding polygon shape.
>>>```
>>> screen.register_shape("triangle", ((5,-3), (0,5), (-5,-3)))

```

  3. _name_ is an arbitrary string and _shape_ is a (compound) [`Shape`](https://docs.python.org/3/library/turtle.html#turtle.Shape "turtle.Shape") object: Install the corresponding compound shape.


Add a turtle shape to TurtleScreen’s shapelist. Only thusly registered shapes can be used by issuing the command `shape(shapename)`. 

turtle.turtles()[¶](https://docs.python.org/3/library/turtle.html#turtle.turtles "Link to this definition")
    
Return the list of turtles on the screen.
>>>```
>>> for turtle in screen.turtles():
...   turtle.color("red")

```


turtle.window_height()[¶](https://docs.python.org/3/library/turtle.html#turtle.window_height "Link to this definition")
    
Return the height of the turtle window.
>>>```
>>> screen.window_height()
480

```


turtle.window_width()[¶](https://docs.python.org/3/library/turtle.html#turtle.window_width "Link to this definition")
    
Return the width of the turtle window.
>>>```
>>> screen.window_width()
640

```

### Methods specific to Screen, not inherited from TurtleScreen[¶](https://docs.python.org/3/library/turtle.html#methods-specific-to-screen-not-inherited-from-turtlescreen "Link to this heading") 

turtle.bye()[¶](https://docs.python.org/3/library/turtle.html#turtle.bye "Link to this definition")
    
Shut the turtlegraphics window. 

turtle.exitonclick()[¶](https://docs.python.org/3/library/turtle.html#turtle.exitonclick "Link to this definition")
    
Bind `bye()` method to mouse clicks on the Screen.
If the value “using_IDLE” in the configuration dictionary is `False` (default value), also enter mainloop. Remark: If IDLE with the `-n` switch (no subprocess) is used, this value should be set to `True` in `turtle.cfg`. In this case IDLE’s own mainloop is active also for the client script. 

turtle.setup(_width =_CFG['width']_, _height =_CFG['height']_, _startx =_CFG['leftright']_, _starty =_CFG['topbottom']_)[¶](https://docs.python.org/3/library/turtle.html#turtle.setup "Link to this definition")
    
Set the size and position of the main window. Default values of arguments are stored in the configuration dictionary and can be changed via a `turtle.cfg` file. 

Parameters:
    
  * **width** – if an integer, a size in pixels, if a float, a fraction of the screen; default is 50% of screen
  * **height** – if an integer, the height in pixels, if a float, a fraction of the screen; default is 75% of screen
  * **startx** – if positive, starting position in pixels from the left edge of the screen, if negative from the right edge, if `None`, center window horizontally
  * **starty** – if positive, starting position in pixels from the top edge of the screen, if negative from the bottom edge, if `None`, center window vertically


>>>```
>>> screen.setup (width=200, height=200, startx=0, starty=0)
>>>        # sets window to 200x200 pixels, in upper left of screen
>>> screen.setup(width=.75, height=0.5, startx=None, starty=None)
>>>        # sets window to 75% of screen by 50% of screen and centers

```


turtle.title(_titlestring_)[¶](https://docs.python.org/3/library/turtle.html#turtle.title "Link to this definition")
     

Parameters:
    
**titlestring** – a string that is shown in the titlebar of the turtle graphics window
Set title of turtle window to _titlestring_.
>>>```
>>> screen.title("Welcome to the turtle zoo!")