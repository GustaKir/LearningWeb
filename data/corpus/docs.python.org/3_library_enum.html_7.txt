Title: Using Enum and Flag with Verification
URL: https://docs.python.org/3/library/enum.html
Summary: This section demonstrates the use of the `Enum` and `Flag` classes with the `verify` decorator for enforcing value constraints. It includes examples showing how to correctly define `Enum` and `Flag` classes, as well as the resulting ValueErrors when constraints are violated, such as missing values in `Enum` and alias conflicts in `Flag`.
---

```
>>> fromenumimport Enum, verify, CONTINUOUS
>>> @verify(CONTINUOUS)
... classColor(Enum):
...   RED = 1
...   GREEN = 2
...   BLUE = 5
Traceback (most recent call last):
...
ValueError: invalid enum 'Color': missing values 3, 4

```


NAMED_FLAGS[¶](https://docs.python.org/3/library/enum.html#enum.EnumCheck.NAMED_FLAGS "Link to this definition")
    
Ensure that any flag groups/masks contain only named flags – useful when values are specified instead of being generated by [`auto()`](https://docs.python.org/3/library/enum.html#enum.auto "enum.auto"):
>>>```
>>> fromenumimport Flag, verify, NAMED_FLAGS
>>> @verify(NAMED_FLAGS)
... classColor(Flag):
...   RED = 1
...   GREEN = 2
...   BLUE = 4
...   WHITE = 15
...   NEON = 31
Traceback (most recent call last):
...
ValueError: invalid Flag 'Color': aliases WHITE and NEON are missing combined values of 0x18 [use enum.show_flag_values(value) for details]

```

Note
CONTINUOUS and NAMED_FLAGS are designed to work with integer-valued members.
Added in version 3.11. 

_class_ enum.FlagBoundary[¶](https://docs.python.org/3/library/enum.html#enum.FlagBoundary "Link to this definition")
    
`FlagBoundary` controls how out-of-range values are handled in [`Flag`](https://docs.python.org/3/library/enum.html#enum.Flag "enum.Flag") and its subclasses. 

STRICT[¶](https://docs.python.org/3/library/enum.html#enum.FlagBoundary.STRICT "Link to this definition")
    
Out-of-range values cause a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") to be raised. This is the default for [`Flag`](https://docs.python.org/3/library/enum.html#enum.Flag "enum.Flag"):
>>>```
>>> fromenumimport Flag, STRICT, auto
>>> classStrictFlag(Flag, boundary=STRICT):
...   RED = auto()
...   GREEN = auto()
...   BLUE = auto()
...
>>> StrictFlag(2**2 + 2**4)
Traceback (most recent call last):
...
ValueError: <flag 'StrictFlag'> invalid value 20
  given 0b0 10100
 allowed 0b0 00111

```


CONFORM[¶](https://docs.python.org/3/library/enum.html#enum.FlagBoundary.CONFORM "Link to this definition")
    
Out-of-range values have invalid values removed, leaving a valid [`Flag`](https://docs.python.org/3/library/enum.html#enum.Flag "enum.Flag") value:
>>>```
>>> fromenumimport Flag, CONFORM, auto
>>> classConformFlag(Flag, boundary=CONFORM):
...   RED = auto()
...   GREEN = auto()
...   BLUE = auto()
...
>>> ConformFlag(2**2 + 2**4)
<ConformFlag.BLUE: 4>

```


EJECT[¶](https://docs.python.org/3/library/enum.html#enum.FlagBoundary.EJECT "Link to this definition")
    
Out-of-range values lose their [`Flag`](https://docs.python.org/3/library/enum.html#enum.Flag "enum.Flag") membership and revert to [`int`](https://docs.python.org/3/library/functions.html#int "int").
>>>```
>>> fromenumimport Flag, EJECT, auto
>>> classEjectFlag(Flag, boundary=EJECT):
...   RED = auto()
...   GREEN = auto()
...   BLUE = auto()
...
>>> EjectFlag(2**2 + 2**4)
20

```


KEEP[¶](https://docs.python.org/3/library/enum.html#enum.FlagBoundary.KEEP "Link to this definition")
    
Out-of-range values are kept, and the [`Flag`](https://docs.python.org/3/library/enum.html#enum.Flag "enum.Flag") membership is kept. This is the default for [`IntFlag`](https://docs.python.org/3/library/enum.html#enum.IntFlag "enum.IntFlag"):
>>>```
>>> fromenumimport Flag, KEEP, auto
>>> classKeepFlag(Flag, boundary=KEEP):
...   RED = auto()
...   GREEN = auto()
...   BLUE = auto()
...
>>> KeepFlag(2**2 + 2**4)
<KeepFlag.BLUE|16: 20>