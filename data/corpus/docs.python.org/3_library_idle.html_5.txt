Title: IDLE Features: Keybindings, Indentation, and Search Functionality
URL: https://docs.python.org/3/library/idle.html
Summary: This section covers the standard keybindings in IDLE, automatic indentation rules including handling of blocks and leading spaces, as well as the search and replace functionality, noting limitations on selections.
---

Standard keybindings (like `C`-`c` to copy and `C`-`v` to paste) may work. Keybindings are selected in the Configure IDLE dialog.
### Automatic indentation[¶](https://docs.python.org/3/library/idle.html#automatic-indentation "Link to this heading")
After a block-opening statement, the next line is indented by 4 spaces (in the Python Shell window by one tab). After certain keywords (break, return etc.) the next line is dedented. In leading indentation, `Backspace` deletes up to 4 spaces if they are there. `Tab` inserts spaces (in the Python Shell window one tab), number depends on Indent width. Currently, tabs are restricted to four spaces due to Tcl/Tk limitations.
See also the indent/dedent region commands on the [Format menu](https://docs.python.org/3/library/idle.html#format-menu).
### Search and Replace[¶](https://docs.python.org/3/library/idle.html#search-and-replace "Link to this heading")
Any selection becomes a search target. However, only selections within a line work because searches are only performed within lines with the terminal newline removed. If `[x] Regular expression` is checked, the target is interpreted according to the Python re module.
### Completions[¶](https://docs.python.org/3/library/idle.html#completions "Link to this heading")
Completions are supplied, when requested and available, for module names, attributes of classes or functions, or filenames. Each request method displays a completion box with existing names. (See tab completions below for an exception.) For any box, change the name being completed and the item highlighted in the box by typing and deleting characters; by hitting `Up`, `Down`, `PageUp`, `PageDown`, `Home`, and `End` keys; and by a single click within the box. Close the box with `Escape`, `Enter`, and double `Tab` keys or clicks outside the box. A double click within the box selects and closes.
One way to open a box is to type a key character and wait for a predefined interval. This defaults to 2 seconds; customize it in the settings dialog. (To prevent auto popups, set the delay to a large number of milliseconds, such as 100000000.) For imported module names or class or function attributes, type ‘.’. For filenames in the root directory, type [`os.sep`](https://docs.python.org/3/library/os.html#os.sep "os.sep") or [`os.altsep`](https://docs.python.org/3/library/os.html#os.altsep "os.altsep") immediately after an opening quote. (On Windows, one can specify a drive first.) Move into subdirectories by typing a directory name and a separator.
Instead of waiting, or after a box is closed, open a completion box immediately with Show Completions on the Edit menu. The default hot key is `C`-`space`. If one types a prefix for the desired name before opening the box, the first match or near miss is made visible. The result is the same as if one enters a prefix after the box is displayed. Show Completions after a quote completes filenames in the current directory instead of a root directory.
Hitting `Tab` after a prefix usually has the same effect as Show Completions. (With no prefix, it indents.) However, if there is only one match to the prefix, that match is immediately added to the editor text without opening a box.
Invoking ‘Show Completions’, or hitting `Tab` after a prefix, outside of a string and without a preceding ‘.’ opens a box with keywords, builtin names, and available module-level names.
When editing code in an editor (as oppose to Shell), increase the available module-level names by running your code and not restarting the Shell thereafter. This is especially useful after adding imports at the top of a file. This also increases possible attribute completions.
Completion boxes initially exclude names beginning with ‘_’ or, for modules, not included in ‘__all__’. The hidden names can be accessed by typing ‘_’ after ‘.’, either before or after the box is opened.
### Calltips[¶](https://docs.python.org/3/library/idle.html#calltips "Link to this heading")
A calltip is shown automatically when one types `(` after the name of an _accessible_ function. A function name expression may include dots and subscripts. A calltip remains until it is clicked, the cursor is moved out of the argument area, or `)` is typed. Whenever the cursor is in the argument part of a definition, select Edit and “Show Call Tip” on the menu or enter its shortcut to display a calltip.
The calltip consists of the function’s signature and docstring up to the latter’s first blank line or the fifth non-blank line. (Some builtin functions lack an accessible signature.) A ‘/’ or ‘*’ in the signature indicates that the preceding or following arguments are passed by position or name (keyword) only. Details are subject to change.
In Shell, the accessible functions depends on what modules have been imported into the user process, including those imported by Idle itself, and which definitions have been run, all since the last restart.
For example, restart the Shell and enter `itertools.count(`. A c