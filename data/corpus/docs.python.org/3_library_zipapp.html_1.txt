Title: Creating and Configuring Zip Archives with zipapp
URL: https://docs.python.org/3/library/zipapp.html
Summary: This section explains how to create a zip archive from a directory or file using the 'zipapp' module. It details the options available, including specifying an output file name with '-o' and setting the interpreter with '-p'. If no output is specified, the output file name defaults to the input source name with a '.pyz' extension.
---

```

If _source_ is a directory, this will create an archive from the contents of _source_. If _source_ is a file, it should be an archive, and it will be copied to the target archive (or the contents of its shebang line will be displayed if the –info option is specified).
The following options are understood: 

-o <output>, --output=<output>[¶](https://docs.python.org/3/library/zipapp.html#cmdoption-zipapp-o "Link to this definition")
    
Write the output to a file named _output_. If this option is not specified, the output filename will be the same as the input _source_ , with the extension `.pyz` added. If an explicit filename is given, it is used as is (so a `.pyz` extension should be included if required).
An output filename must be specified if the _source_ is an archive (and in that case, _output_ must not be the same as _source_). 

-p <interpreter>, --python=<interpreter>[¶](https://docs.python.org/3/library/zipapp.html#cmdoption-zipapp-p "Link to this definition")
    
Add a `#!` line to the archive specifying _interpreter_ as the command to run. Also, on POSIX, make the archive executable. The default is to write no `#!` line, and not make the file executable. 

-m <mainfn>, --main=<mainfn>[¶](https://docs.python.org/3/library/zipapp.html#cmdoption-zipapp-m "Link to this definition")
    
Write a `__main__.py` file to the archive that executes _mainfn_. The _mainfn_ argument should have the form “pkg.mod:fn”, where “pkg.mod” is a package/module in the archive, and “fn” is a callable in the given module. The `__main__.py` file will execute that callable.
[`--main`](https://docs.python.org/3/library/zipapp.html#cmdoption-zipapp-m) cannot be specified when copying an archive. 

-c, --compress[¶](https://docs.python.org/3/library/zipapp.html#cmdoption-zipapp-c "Link to this definition")
    
Compress files with the deflate method, reducing the size of the output file. By default, files are stored uncompressed in the archive.
[`--compress`](https://docs.python.org/3/library/zipapp.html#cmdoption-zipapp-c) has no effect when copying an archive.
Added in version 3.7. 

--info[¶](https://docs.python.org/3/library/zipapp.html#cmdoption-zipapp-info "Link to this definition")
    
Display the interpreter embedded in the archive, for diagnostic purposes. In this case, any other options are ignored and SOURCE must be an archive, not a directory. 

-h, --help[¶](https://docs.python.org/3/library/zipapp.html#cmdoption-zipapp-h "Link to this definition")
    
Print a short usage message and exit.
## Python API[¶](https://docs.python.org/3/library/zipapp.html#python-api "Link to this heading")
The module defines two convenience functions: 

zipapp.create_archive(_source_ , _target =None_, _interpreter =None_, _main =None_, _filter =None_, _compressed =False_)[¶](https://docs.python.org/3/library/zipapp.html#zipapp.create_archive "Link to this definition")
    
Create an application archive from _source_. The source can be any of the following:
  * The name of a directory, or a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object) referring to a directory, in which case a new application archive will be created from the content of that directory.
  * The name of an existing application archive file, or a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object) referring to such a file, in which case the file is copied to the target (modifying it to reflect the value given for the _interpreter_ argument). The file name should include the `.pyz` extension, if required.
  * A file object open for reading in bytes mode. The content of the file should be an application archive, and the file object is assumed to be positioned at the start of the archive.


The _target_ argument determines where the resulting archive will be written:
  * If it is the name of a file, or a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object), the archive will be written to that file.
  * If it is an open file object, the archive will be written to that file object, which must be open for writing in bytes mode.
  * If the target is omitted (or `None`), the source must be a directory and the target will be a file with the same name as the source, with a `.pyz` extension added.