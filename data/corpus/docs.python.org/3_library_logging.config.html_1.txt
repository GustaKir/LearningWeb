Title: Configuring the Logging Module
URL: https://docs.python.org/3/library/logging.config.html
Summary: This section outlines the API for configuring the Python logging module, detailing optional configuration functions found in the `logging.config` module. It explains that logging can be configured either through these functions or by using the main API directly.
---

This section describes the API for configuring the logging module.
## Configuration functions[¶](https://docs.python.org/3/library/logging.config.html#configuration-functions "Link to this heading")
The following functions configure the logging module. They are located in the [`logging.config`](https://docs.python.org/3/library/logging.config.html#module-logging.config "logging.config: Configuration of the logging module.") module. Their use is optional — you can configure the logging module using these functions or by making calls to the main API (defined in [`logging`](https://docs.python.org/3/library/logging.html#module-logging "logging: Flexible event logging system for applications.") itself) and defining handlers which are declared either in [`logging`](https://docs.python.org/3/library/logging.html#module-logging "logging: Flexible event logging system for applications.") or [`logging.handlers`](https://docs.python.org/3/library/logging.handlers.html#module-logging.handlers "logging.handlers: Handlers for the logging module."). 

logging.config.dictConfig(_config_)[¶](https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig "Link to this definition")
    
Takes the logging configuration from a dictionary. The contents of this dictionary are described in [Configuration dictionary schema](https://docs.python.org/3/library/logging.config.html#logging-config-dictschema) below.
If an error is encountered during configuration, this function will raise a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError"), [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError"), [`AttributeError`](https://docs.python.org/3/library/exceptions.html#AttributeError "AttributeError") or [`ImportError`](https://docs.python.org/3/library/exceptions.html#ImportError "ImportError") with a suitably descriptive message. The following is a (possibly incomplete) list of conditions which will raise an error:
  * A `level` which is not a string or which is a string not corresponding to an actual logging level.
  * A `propagate` value which is not a boolean.
  * An id which does not have a corresponding destination.
  * A non-existent handler id found during an incremental call.
  * An invalid logger name.
  * Inability to resolve to an internal or external object.


Parsing is performed by the `DictConfigurator` class, whose constructor is passed the dictionary used for configuration, and has a `configure()` method. The [`logging.config`](https://docs.python.org/3/library/logging.config.html#module-logging.config "logging.config: Configuration of the logging module.") module has a callable attribute `dictConfigClass` which is initially set to `DictConfigurator`. You can replace the value of `dictConfigClass` with a suitable implementation of your own.
[`dictConfig()`](https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig "logging.config.dictConfig") calls `dictConfigClass` passing the specified dictionary, and then calls the `configure()` method on the returned object to put the configuration into effect:
```
defdictConfig(config):
  dictConfigClass(config).configure()