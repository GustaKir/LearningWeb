Title: time.mktime() Function
URL: https://docs.python.org/3/library/time.html
Summary: The `time.mktime()` function converts a `struct_time` or full 9-tuple in local time to a floating-point number representing the time. It is the inverse of `localtime()`. If the input cannot be represented as a valid time, it raises either `OverflowError` or `ValueError`.
---

time.mktime(_t_)[¶](https://docs.python.org/3/library/time.html#time.mktime "Link to this definition")
    
This is the inverse function of [`localtime()`](https://docs.python.org/3/library/time.html#time.localtime "time.localtime"). Its argument is the [`struct_time`](https://docs.python.org/3/library/time.html#time.struct_time "time.struct_time") or full 9-tuple (since the dst flag is needed; use `-1` as the dst flag if it is unknown) which expresses the time in _local_ time, not UTC. It returns a floating-point number, for compatibility with [`time()`](https://docs.python.org/3/library/time.html#time.time "time.time"). If the input value cannot be represented as a valid time, either [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError") or [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") will be raised (which depends on whether the invalid value is caught by Python or the underlying C libraries). The earliest date for which it can generate a time is platform-dependent. 

time.monotonic() → [float](https://docs.python.org/3/library/functions.html#float "float")[¶](https://docs.python.org/3/library/time.html#time.monotonic "Link to this definition")
    
Return the value (in fractional seconds) of a monotonic clock, i.e. a clock that cannot go backwards. The clock is not affected by system clock updates. The reference point of the returned value is undefined, so that only the difference between the results of two calls is valid.
Clock:
  * On Windows, call `QueryPerformanceCounter()` and `QueryPerformanceFrequency()`.
  * On macOS, call `mach_absolute_time()` and `mach_timebase_info()`.
  * On HP-UX, call `gethrtime()`.
  * Call `clock_gettime(CLOCK_HIGHRES)` if available.
  * Otherwise, call `clock_gettime(CLOCK_MONOTONIC)`.


Use [`monotonic_ns()`](https://docs.python.org/3/library/time.html#time.monotonic_ns "time.monotonic_ns") to avoid the precision loss caused by the [`float`](https://docs.python.org/3/library/functions.html#float "float") type.
Added in version 3.3.
Changed in version 3.5: The function is now always available and always system-wide.
Changed in version 3.10: On macOS, the function is now system-wide. 

time.monotonic_ns() → [int](https://docs.python.org/3/library/functions.html#int "int")[¶](https://docs.python.org/3/library/time.html#time.monotonic_ns "Link to this definition")
    
Similar to [`monotonic()`](https://docs.python.org/3/library/time.html#time.monotonic "time.monotonic"), but return time as nanoseconds.
Added in version 3.7. 

time.perf_counter() → [float](https://docs.python.org/3/library/functions.html#float "float")[¶](https://docs.python.org/3/library/time.html#time.perf_counter "Link to this definition")
    
Return the value (in fractional seconds) of a performance counter, i.e. a clock with the highest available resolution to measure a short duration. It does include time elapsed during sleep and is system-wide. The reference point of the returned value is undefined, so that only the difference between the results of two calls is valid.
**CPython implementation detail:** On CPython, use the same clock as [`time.monotonic()`](https://docs.python.org/3/library/time.html#time.monotonic "time.monotonic") and is a monotonic clock, i.e. a clock that cannot go backwards.
Use [`perf_counter_ns()`](https://docs.python.org/3/library/time.html#time.perf_counter_ns "time.perf_counter_ns") to avoid the precision loss caused by the [`float`](https://docs.python.org/3/library/functions.html#float "float") type.
Added in version 3.3.
Changed in version 3.10: On Windows, the function is now system-wide.
Changed in version 3.13: Use the same clock as [`time.monotonic()`](https://docs.python.org/3/library/time.html#time.monotonic "time.monotonic"). 

time.perf_counter_ns() → [int](https://docs.python.org/3/library/functions.html#int "int")[¶](https://docs.python.org/3/library/time.html#time.perf_counter_ns "Link to this definition")
    
Similar to [`perf_counter()`](https://docs.python.org/3/library/time.html#time.perf_counter "time.perf_counter"), but return time as nanoseconds.
Added in version 3.7. 

time.process_time() → [float](https://docs.python.org/3/library/functions.html#float "float")[¶](https://docs.python.org/3/library/time.html#time.process_time "Link to this definition")
    
Return the value (in fractional seconds) of the sum of the system and user CPU time of the current process. It does not include time elapsed during sleep. It is process-wide by definition. The reference point of the returned value is undefined, so that only the difference between the results of two calls is valid.
Use [`process_time_ns()`](https://docs.python.org/3/library/time.html#time.process_time_ns "time.process_time_ns") to avoid the precision loss caused by the [`float`](https://docs.python.org/3/library/functions.html#float "float") type.
Added in version 3.3.