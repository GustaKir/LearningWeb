Title: CPython Implementation and Standard Library Improvements in Python 3.5
URL: https://docs.python.org/3/whatsnew/3.5.html
Summary: Python 3.5 introduces improvements in the CPython implementation, including the use of the `surrogateescape` error handler for `sys.stdin` and `sys.stdout` in the POSIX locale, the replacement of `.pyo` files with a new `.pyc` naming scheme, and a multi-phase initialization for builtin and extension modules. It also features significant updates in the standard library.
---

CPython implementation improvements:
  * When the `LC_TYPE` locale is the POSIX locale (`C` locale), [`sys.stdin`](https://docs.python.org/3/library/sys.html#sys.stdin "sys.stdin") and [`sys.stdout`](https://docs.python.org/3/library/sys.html#sys.stdout "sys.stdout") now use the `surrogateescape` error handler, instead of the `strict` error handler. (Contributed by Victor Stinner in [bpo-19977](https://bugs.python.org/issue?@action=redirect&bpo=19977).)
  * `.pyo` files are no longer used and have been replaced by a more flexible scheme that includes the optimization level explicitly in `.pyc` name. (See [PEP 488 overview](https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-488).)
  * Builtin and extension modules are now initialized in a multi-phase process, which is similar to how Python modules are loaded. (See [PEP 489 overview](https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-489).)


Significant improvements in the standard library:
  * [`collections.OrderedDict`](https://docs.python.org/3/library/collections.html#collections.OrderedDict "collections.OrderedDict") is now [implemented in C](https://docs.python.org/3/whatsnew/3.5.html#whatsnew-ordereddict), which makes it 4 to 100 times faster.
  * The [`ssl`](https://docs.python.org/3/library/ssl.html#module-ssl "ssl: TLS/SSL wrapper for socket objects") module gained [support for Memory BIO](https://docs.python.org/3/whatsnew/3.5.html#whatsnew-sslmemorybio), which decouples SSL protocol handling from network IO.
  * The new [`os.scandir()`](https://docs.python.org/3/library/os.html#os.scandir "os.scandir") function provides a [better and significantly faster way](https://docs.python.org/3/whatsnew/3.5.html#whatsnew-pep-471) of directory traversal.
  * [`functools.lru_cache()`](https://docs.python.org/3/library/functools.html#functools.lru_cache "functools.lru_cache") has been mostly [reimplemented in C](https://docs.python.org/3/whatsnew/3.5.html#whatsnew-lrucache), yielding much better performance.
  * The new [`subprocess.run()`](https://docs.python.org/3/library/subprocess.html#subprocess.run "subprocess.run") function provides a [streamlined way to run subprocesses](https://docs.python.org/3/whatsnew/3.5.html#whatsnew-subprocess).
  * The [`traceback`](https://docs.python.org/3/library/traceback.html#module-traceback "traceback: Print or retrieve a stack traceback.") module has been significantly [enhanced](https://docs.python.org/3/whatsnew/3.5.html#whatsnew-traceback) for improved performance and developer convenience.


Security improvements:
  * SSLv3 is now disabled throughout the standard library. It can still be enabled by instantiating a [`ssl.SSLContext`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext "ssl.SSLContext") manually. (See [bpo-22638](https://bugs.python.org/issue?@action=redirect&bpo=22638) for more details; this change was backported to CPython 3.4 and 2.7.)
  * HTTP cookie parsing is now stricter, in order to protect against potential injection attacks. (Contributed by Antoine Pitrou in [bpo-22796](https://bugs.python.org/issue?@action=redirect&bpo=22796).)


Windows improvements:
  * A new installer for Windows has replaced the old MSI. See [Using Python on Windows](https://docs.python.org/3/using/windows.html#using-on-windows) for more information.
  * Windows builds now use Microsoft Visual C++ 14.0, and extension modules should use the same.


Please read on for a comprehensive list of user-facing changes, including many other smaller improvements, CPython optimizations, deprecations, and potential porting issues.
## New Features[¶](https://docs.python.org/3/whatsnew/3.5.html#new-features "Link to this heading")
### PEP 492 - Coroutines with async and await syntax[¶](https://docs.python.org/3/whatsnew/3.5.html#pep-492-coroutines-with-async-and-await-syntax "Link to this heading")
[**PEP 492**](https://peps.python.org/pep-0492/) greatly improves support for asynchronous programming in Python by adding [awaitable objects](https://docs.python.org/3/glossary.html#term-awaitable), [coroutine functions](https://docs.python.org/3/glossary.html#term-coroutine-function), [asynchronous iteration](https://docs.python.org/3/glossary.html#term-asynchronous-iterable), and [asynchronous context managers](https://docs.python.org/3/glossary.html#term-asynchronous-context-manager).
Coroutine functions are declared using the new [`async def`](https://docs.python.org/3/reference/compound_stmts.html#async-def) syntax:
>>>```
>>> async defcoro():
...   return 'spam'