Title: os.removexattr Function
URL: https://docs.python.org/3/library/os.html
Summary: The os.removexattr function removes the extended filesystem attribute specified by _attribute_ from the file or directory at _path_. The _attribute_ can be provided as bytes or a string, which will be encoded using the filesystem encoding. The function supports specifying a file descriptor and choosing whether or not to follow symlinks. It raises an auditing event upon execution and has been updated since version 3.6 to accept path-like objects.
---

os.removexattr(_path_ , _attribute_ , _*_ , _follow_symlinks =True_)[¶](https://docs.python.org/3/library/os.html#os.removexattr "Link to this definition")
    
Removes the extended filesystem attribute _attribute_ from _path_. _attribute_ should be bytes or str (directly or indirectly through the [`PathLike`](https://docs.python.org/3/library/os.html#os.PathLike "os.PathLike") interface). If it is a string, it is encoded with the [filesystem encoding and error handler](https://docs.python.org/3/glossary.html#term-filesystem-encoding-and-error-handler).
This function can support [specifying a file descriptor](https://docs.python.org/3/library/os.html#path-fd) and [not following symlinks](https://docs.python.org/3/library/os.html#follow-symlinks).
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.removexattr` with arguments `path`, `attribute`.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object) for _path_ and _attribute_. 

os.setxattr(_path_ , _attribute_ , _value_ , _flags =0_, _*_ , _follow_symlinks =True_)[¶](https://docs.python.org/3/library/os.html#os.setxattr "Link to this definition")
    
Set the extended filesystem attribute _attribute_ on _path_ to _value_. _attribute_ must be a bytes or str with no embedded NULs (directly or indirectly through the [`PathLike`](https://docs.python.org/3/library/os.html#os.PathLike "os.PathLike") interface). If it is a str, it is encoded with the [filesystem encoding and error handler](https://docs.python.org/3/glossary.html#term-filesystem-encoding-and-error-handler). _flags_ may be [`XATTR_REPLACE`](https://docs.python.org/3/library/os.html#os.XATTR_REPLACE "os.XATTR_REPLACE") or [`XATTR_CREATE`](https://docs.python.org/3/library/os.html#os.XATTR_CREATE "os.XATTR_CREATE"). If [`XATTR_REPLACE`](https://docs.python.org/3/library/os.html#os.XATTR_REPLACE "os.XATTR_REPLACE") is given and the attribute does not exist, `ENODATA` will be raised. If [`XATTR_CREATE`](https://docs.python.org/3/library/os.html#os.XATTR_CREATE "os.XATTR_CREATE") is given and the attribute already exists, the attribute will not be created and `EEXISTS` will be raised.
This function can support [specifying a file descriptor](https://docs.python.org/3/library/os.html#path-fd) and [not following symlinks](https://docs.python.org/3/library/os.html#follow-symlinks).
Note
A bug in Linux kernel versions less than 2.6.39 caused the flags argument to be ignored on some filesystems.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.setxattr` with arguments `path`, `attribute`, `value`, `flags`.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object) for _path_ and _attribute_. 

os.XATTR_SIZE_MAX[¶](https://docs.python.org/3/library/os.html#os.XATTR_SIZE_MAX "Link to this definition")
    
The maximum size the value of an extended attribute can be. Currently, this is 64 KiB on Linux. 

os.XATTR_CREATE[¶](https://docs.python.org/3/library/os.html#os.XATTR_CREATE "Link to this definition")
    
This is a possible value for the flags argument in [`setxattr()`](https://docs.python.org/3/library/os.html#os.setxattr "os.setxattr"). It indicates the operation must create an attribute. 

os.XATTR_REPLACE[¶](https://docs.python.org/3/library/os.html#os.XATTR_REPLACE "Link to this definition")
    
This is a possible value for the flags argument in [`setxattr()`](https://docs.python.org/3/library/os.html#os.setxattr "os.setxattr"). It indicates the operation must replace an existing attribute.
## Process Management[¶](https://docs.python.org/3/library/os.html#process-management "Link to this heading")
These functions may be used to create and manage processes.
The various [`exec*`](https://docs.python.org/3/library/os.html#os.execl "os.execl") functions take a list of arguments for the new program loaded into the process. In each case, the first of these arguments is passed to the new program as its own name rather than as an argument a user may have typed on a command line. For the C programmer, this is the `argv[0]` passed to a program’s `main()`. For example, `os.execv('/bin/echo', ['foo', 'bar'])` will only print `bar` on standard output; `foo` will seem to be ignored. 

os.abort()[¶](https://docs.python.org/3/library/os.html#os.abort "Link to this definition")
    
Generate a `SIGABRT` signal to the current process. On Unix, the default behavior is to produce a core dump; on Windows, the process immediately returns an exit code of `3`. Be aware that calling this function will not call the Python signal handler registered for `SIGABRT` with [`signal.signal()`](https://docs.python.org/3/library/signal.html#signal.signal "signal.signal").