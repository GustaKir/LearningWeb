Title: Using the optparse Library for Command-Line Option Parsing
URL: https://docs.python.org/3/library/optparse.html
Summary: This chunk discusses the use of the `optparse` library in Python for parsing command-line options. It illustrates how to add an option with `add_option`, the handling of short and long option strings, and the default behaviors such as the default action of 'store'. The example demonstrates parsing an option with an argument directly attached and explains default assumptions regarding types and destinations.
---

```
parser.add_option("-n", type="int", dest="num")

```

Note that this option has no long option string, which is perfectly acceptable. Also, there’s no explicit action, since the default is `store`.
Let’s parse another fake command-line. This time, we’ll jam the option argument right up against the option: since `-n42` (one argument) is equivalent to `-n 42` (two arguments), the code
```
(options, args) = parser.parse_args(["-n42"])
print(options.num)

```

will print `42`.
If you don’t specify a type, [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") assumes `string`. Combined with the fact that the default action is `store`, that means our first example can be a lot shorter:
```
parser.add_option("-f", "--file", dest="filename")

```

If you don’t supply a destination, [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") figures out a sensible default from the option strings: if the first long option string is `--foo-bar`, then the default destination is `foo_bar`. If there are no long option strings, [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") looks at the first short option string: the default destination for `-f` is `f`.
[`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") also includes the built-in `complex` type. Adding types is covered in section [Extending optparse](https://docs.python.org/3/library/optparse.html#optparse-extending-optparse).
### Handling boolean (flag) options[¶](https://docs.python.org/3/library/optparse.html#handling-boolean-flag-options "Link to this heading")
Flag options—set a variable to true or false when a particular option is seen—are quite common. [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") supports them with two separate actions, `store_true` and `store_false`. For example, you might have a `verbose` flag that is turned on with `-v` and off with `-q`:
```
parser.add_option("-v", action="store_true", dest="verbose")
parser.add_option("-q", action="store_false", dest="verbose")

```

Here we have two different options with the same destination, which is perfectly OK. (It just means you have to be a bit careful when setting default values—see below.)
When [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") encounters `-v` on the command line, it sets `options.verbose` to `True`; when it encounters `-q`, `options.verbose` is set to `False`.
### Other actions[¶](https://docs.python.org/3/library/optparse.html#other-actions "Link to this heading")
Some other actions supported by [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") are: 

`"store_const"`
    
store a constant value, pre-set via [`Option.const`](https://docs.python.org/3/library/optparse.html#optparse.Option.const "optparse.Option.const") 

`"append"`
    
append this option’s argument to a list 

`"count"`
    
increment a counter by one 

`"callback"`
    
call a specified function
These are covered in section [Reference Guide](https://docs.python.org/3/library/optparse.html#optparse-reference-guide), and section [Option Callbacks](https://docs.python.org/3/library/optparse.html#optparse-option-callbacks).
### Default values[¶](https://docs.python.org/3/library/optparse.html#default-values "Link to this heading")
All of the above examples involve setting some variable (the “destination”) when certain command-line options are seen. What happens if those options are never seen? Since we didn’t supply any defaults, they are all set to `None`. This is usually fine, but sometimes you want more control. [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") lets you supply a default value for each destination, which is assigned before the command line is parsed.
First, consider the verbose/quiet example. If we want [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") to set `verbose` to `True` unless `-q` is seen, then we can do this:
```
parser.add_option("-v", action="store_true", dest="verbose", default=True)
parser.add_option("-q", action="store_false", dest="verbose")

```

Since default values apply to the _destination_ rather than to any particular option, and these two options happen to have the same destination, this is exactly equivalent:
```
parser.add_option("-v", action="store_true", dest="verbose")
parser.add_option("-q", action="store_false", dest="verbose", default=True)

```

Consider this: