Title: Range Objects in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: Range objects support common sequence operations, excluding concatenation and repetition due to their strict pattern representation. The `start`, `stop`, and `step` parameters define the range, with defaults of `0` for start and `1` for step if not provided.
---

```

Ranges implement all of the [common](https://docs.python.org/3/library/stdtypes.html#typesseq-common) sequence operations except concatenation and repetition (due to the fact that range objects can only represent sequences that follow a strict pattern and repetition and concatenation will usually violate that pattern). 

start[¶](https://docs.python.org/3/library/stdtypes.html#range.start "Link to this definition")
    
The value of the _start_ parameter (or `0` if the parameter was not supplied) 

stop[¶](https://docs.python.org/3/library/stdtypes.html#range.stop "Link to this definition")
    
The value of the _stop_ parameter 

step[¶](https://docs.python.org/3/library/stdtypes.html#range.step "Link to this definition")
    
The value of the _step_ parameter (or `1` if the parameter was not supplied)
The advantage of the [`range`](https://docs.python.org/3/library/stdtypes.html#range "range") type over a regular [`list`](https://docs.python.org/3/library/stdtypes.html#list "list") or [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple") is that a [`range`](https://docs.python.org/3/library/stdtypes.html#range "range") object will always take the same (small) amount of memory, no matter the size of the range it represents (as it only stores the `start`, `stop` and `step` values, calculating individual items and subranges as needed).
Range objects implement the [`collections.abc.Sequence`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence "collections.abc.Sequence") ABC, and provide features such as containment tests, element index lookup, slicing and support for negative indices (see [Sequence Types — list, tuple, range](https://docs.python.org/3/library/stdtypes.html#typesseq)):
>>>```
>>> r = range(0, 20, 2)
>>> r
range(0, 20, 2)
>>> 11 in r
False
>>> 10 in r
True
>>> r.index(10)
5
>>> r[5]
10
>>> r[:5]
range(0, 10, 2)
>>> r[-1]
18