Title: Enhancements to UserString Class in Python 3.5
URL: https://docs.python.org/3/whatsnew/3.5.html
Summary: The UserString class in Python 3.5 gains new method implementations to align with the str class, including __getnewargs__(), __rmod__(), casefold(), format_map(), isprintable(), and maketrans(), enhancing its functionality and compatibility.
---

```

(Contributed by Berker Peksag in [bpo-24064](https://bugs.python.org/issue?@action=redirect&bpo=24064).)
The [`UserString`](https://docs.python.org/3/library/collections.html#collections.UserString "collections.UserString") class now implements the `__getnewargs__()`, `__rmod__()`, [`casefold()`](https://docs.python.org/3/library/stdtypes.html#str.casefold "str.casefold"), [`format_map()`](https://docs.python.org/3/library/stdtypes.html#str.format_map "str.format_map"), [`isprintable()`](https://docs.python.org/3/library/stdtypes.html#str.isprintable "str.isprintable"), and [`maketrans()`](https://docs.python.org/3/library/stdtypes.html#str.maketrans "str.maketrans") methods to match the corresponding methods of [`str`](https://docs.python.org/3/library/stdtypes.html#str "str"). (Contributed by Joe Jevnik in [bpo-22189](https://bugs.python.org/issue?@action=redirect&bpo=22189).)
### collections.abc[¶](https://docs.python.org/3/whatsnew/3.5.html#collections-abc "Link to this heading")
The `Sequence.index()` method now accepts _start_ and _stop_ arguments to match the corresponding methods of [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple"), [`list`](https://docs.python.org/3/library/stdtypes.html#list "list"), etc. (Contributed by Devin Jeanpierre in [bpo-23086](https://bugs.python.org/issue?@action=redirect&bpo=23086).)
A new [`Generator`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Generator "collections.abc.Generator") abstract base class. (Contributed by Stefan Behnel in [bpo-24018](https://bugs.python.org/issue?@action=redirect&bpo=24018).)
New [`Awaitable`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Awaitable "collections.abc.Awaitable"), [`Coroutine`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Coroutine "collections.abc.Coroutine"), [`AsyncIterator`](https://docs.python.org/3/library/collections.abc.html#collections.abc.AsyncIterator "collections.abc.AsyncIterator"), and [`AsyncIterable`](https://docs.python.org/3/library/collections.abc.html#collections.abc.AsyncIterable "collections.abc.AsyncIterable") abstract base classes. (Contributed by Yury Selivanov in [bpo-24184](https://bugs.python.org/issue?@action=redirect&bpo=24184).)
For earlier Python versions, a backport of the new ABCs is available in an external [PyPI package](https://pypi.org/project/backports_abc/).
### compileall[¶](https://docs.python.org/3/whatsnew/3.5.html#compileall "Link to this heading")
A new [`compileall`](https://docs.python.org/3/library/compileall.html#module-compileall "compileall: Tools for byte-compiling all Python source files in a directory tree.") option, `-j _N_`, allows running _N_ workers simultaneously to perform parallel bytecode compilation. The [`compile_dir()`](https://docs.python.org/3/library/compileall.html#compileall.compile_dir "compileall.compile_dir") function has a corresponding `workers` parameter. (Contributed by Claudiu Popa in [bpo-16104](https://bugs.python.org/issue?@action=redirect&bpo=16104).)
Another new option, `-r`, allows controlling the maximum recursion level for subdirectories. (Contributed by Claudiu Popa in [bpo-19628](https://bugs.python.org/issue?@action=redirect&bpo=19628).)
The `-q` command line option can now be specified more than once, in which case all output, including errors, will be suppressed. The corresponding `quiet` parameter in [`compile_dir()`](https://docs.python.org/3/library/compileall.html#compileall.compile_dir "compileall.compile_dir"), [`compile_file()`](https://docs.python.org/3/library/compileall.html#compileall.compile_file "compileall.compile_file"), and [`compile_path()`](https://docs.python.org/3/library/compileall.html#compileall.compile_path "compileall.compile_path") can now accept an integer value indicating the level of output suppression. (Contributed by Thomas Kluyver in [bpo-21338](https://bugs.python.org/issue?@action=redirect&bpo=21338).)
### concurrent.futures[¶](https://docs.python.org/3/whatsnew/3.5.html#concurrent-futures "Link to this heading")
The [`Executor.map()`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor.map "concurrent.futures.Executor.map") method now accepts a _chunksize_ argument to allow batching of tasks to improve performance when [`ProcessPoolExecutor()`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor "concurrent.futures.ProcessPoolExecutor") is used. (Contributed by Dan O’Reilly in [bpo-11271](https://bugs.python.org/issue?@action=redirect&bpo=11271).)
The number of workers in the [`ThreadPoolExecutor`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor "concurrent.futures.ThreadPoolExecutor") constructor is optional now. The default value is 5 times the number of CPUs. (Contributed by Claudiu Popa in [bpo-21527](https://bugs.python.org/issue?@action=redirect&bpo=21527).)
### co