Title: Tuples and Sequences in Python
URL: https://docs.python.org/3/tutorial/datastructures.html
Summary: This section introduces tuples as a sequence data type in Python, highlighting their similarity to lists and strings. It explains the structure of tuples, showing how they can contain multiple values and be nested. Examples demonstrate tuple creation and indexing.
---

```

Referencing the name `a` hereafter is an error (at least until another value is assigned to it). We’ll find other uses for [`del`](https://docs.python.org/3/reference/simple_stmts.html#del) later.
## 5.3. Tuples and Sequences[¶](https://docs.python.org/3/tutorial/datastructures.html#tuples-and-sequences "Link to this heading")
We saw that lists and strings have many common properties, such as indexing and slicing operations. They are two examples of _sequence_ data types (see [Sequence Types — list, tuple, range](https://docs.python.org/3/library/stdtypes.html#typesseq)). Since Python is an evolving language, other sequence data types may be added. There is also another standard sequence data type: the _tuple_.
A tuple consists of a number of values separated by commas, for instance:
>>>```
>>> t = 12345, 54321, 'hello!'
>>> t[0]
12345
>>> t
(12345, 54321, 'hello!')
>>> # Tuples may be nested:
>>> u = t, (1, 2, 3, 4, 5)
>>> u
((12345, 54321, 'hello!'), (1, 2, 3, 4, 5))
>>> # Tuples are immutable:
>>> t[0] = 88888
Traceback (most recent call last):
 File "<stdin>", line 1, in <module>
TypeError: 'tuple' object does not support item assignment
>>> # but they can contain mutable objects:
>>> v = ([1, 2, 3], [3, 2, 1])
>>> v
([1, 2, 3], [3, 2, 1])

```

As you see, on output tuples are always enclosed in parentheses, so that nested tuples are interpreted correctly; they may be input with or without surrounding parentheses, although often parentheses are necessary anyway (if the tuple is part of a larger expression). It is not possible to assign to the individual items of a tuple, however it is possible to create tuples which contain mutable objects, such as lists.
Though tuples may seem similar to lists, they are often used in different situations and for different purposes. Tuples are [immutable](https://docs.python.org/3/glossary.html#term-immutable), and usually contain a heterogeneous sequence of elements that are accessed via unpacking (see later in this section) or indexing (or even by attribute in the case of [`namedtuples`](https://docs.python.org/3/library/collections.html#collections.namedtuple "collections.namedtuple")). Lists are [mutable](https://docs.python.org/3/glossary.html#term-mutable), and their elements are usually homogeneous and are accessed by iterating over the list.
A special problem is the construction of tuples containing 0 or 1 items: the syntax has some extra quirks to accommodate these. Empty tuples are constructed by an empty pair of parentheses; a tuple with one item is constructed by following a value with a comma (it is not sufficient to enclose a single value in parentheses). Ugly, but effective. For example:
>>>```
>>> empty = ()
>>> singleton = 'hello',  # <-- note trailing comma
>>> len(empty)
0
>>> len(singleton)
1
>>> singleton
('hello',)

```

The statement `t = 12345, 54321, 'hello!'` is an example of _tuple packing_ : the values `12345`, `54321` and `'hello!'` are packed together in a tuple. The reverse operation is also possible:
>>>```
>>> x, y, z = t

```

This is called, appropriately enough, _sequence unpacking_ and works for any sequence on the right-hand side. Sequence unpacking requires that there are as many variables on the left side of the equals sign as there are elements in the sequence. Note that multiple assignment is really just a combination of tuple packing and sequence unpacking.
## 5.4. Sets[¶](https://docs.python.org/3/tutorial/datastructures.html#sets "Link to this heading")
Python also includes a data type for _sets_. A set is an unordered collection with no duplicate elements. Basic uses include membership testing and eliminating duplicate entries. Set objects also support mathematical operations like union, intersection, difference, and symmetric difference.
Curly braces or the [`set()`](https://docs.python.org/3/library/stdtypes.html#set "set") function can be used to create sets. Note: to create an empty set you have to use `set()`, not `{}`; the latter creates an empty dictionary, a data structure that we discuss in the next section.
Here is a brief demonstration:
>>>```
>>> basket = {'apple', 'orange', 'apple', 'pear', 'orange', 'banana'}
>>> print(basket)           # show that duplicates have been removed
{'orange', 'banana', 'pear', 'apple'}
>>> 'orange' in basket         # fast membership testing
True
>>> 'crabgrass' in basket
False
>>> # Demonstrate set operations on unique letters from two words
>>>
>>> a = set('abracadabra')
>>> b = set('alacazam')
>>> a                 # unique letters in a
{'a', 'r', 'b', 'c', 'd'}
>>> a - b               # letters in a but not in b
{'r', 'd', 'b'}
>>> a | b               # letters in a or b or both
{'a', 'c', 'r', 'd', 'b', 'm', 'z', 'l'}
>>> a & b               # letters in both a and b
{'a', 'c'}
>>> a ^ b               # letters in a or b but not both
{'r', 'd', 'b', 'm', 'z', 'l'}