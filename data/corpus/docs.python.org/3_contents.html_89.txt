Title: Python 3 Library Documentation Overview
URL: https://docs.python.org/3/contents.html
Summary: This section includes references to the `venv` module for creating and managing virtual environments, detailing how they function, the API, and examples, as well as the `zipapp` module which focuses on managing executable Python zip archives with examples, command-line interfaces, and guidelines for creating standalone applications.
---

3/library/venv.html#creating-virtual-environments)
        * [How venvs work](https://docs.python.org/3/library/venv.html#how-venvs-work)
        * [API](https://docs.python.org/3/library/venv.html#api)
        * [An example of extending `EnvBuilder`](https://docs.python.org/3/library/venv.html#an-example-of-extending-envbuilder)
      * [`zipapp` — Manage executable Python zip archives](https://docs.python.org/3/library/zipapp.html)
        * [Basic Example](https://docs.python.org/3/library/zipapp.html#basic-example)
        * [Command-Line Interface](https://docs.python.org/3/library/zipapp.html#command-line-interface)
        * [Python API](https://docs.python.org/3/library/zipapp.html#python-api)
        * [Examples](https://docs.python.org/3/library/zipapp.html#examples)
        * [Specifying the Interpreter](https://docs.python.org/3/library/zipapp.html#specifying-the-interpreter)
        * [Creating Standalone Applications with zipapp](https://docs.python.org/3/library/zipapp.html#creating-standalone-applications-with-zipapp)
          * [Caveats](https://docs.python.org/3/library/zipapp.html#caveats)
        * [The Python Zip Application Archive Format](https://docs.python.org/3/library/zipapp.html#the-python-zip-application-archive-format)
    * [Python Runtime Services](https://docs.python.org/3/library/python.html)
      * [`sys` — System-specific parameters and functions](https://docs.python.org/3/library/sys.html)
      * [`sys.monitoring` — Execution event monitoring](https://docs.python.org/3/library/sys.monitoring.html)
        * [Tool identifiers](https://docs.python.org/3/library/sys.monitoring.html#tool-identifiers)
          * [Registering and using tools](https://docs.python.org/3/library/sys.monitoring.html#registering-and-using-tools)
        * [Events](https://docs.python.org/3/library/sys.monitoring.html#events)
          * [Local events](https://docs.python.org/3/library/sys.monitoring.html#local-events)
          * [Ancillary events](https://docs.python.org/3/library/sys.monitoring.html#ancillary-events)
          * [Other events](https://docs.python.org/3/library/sys.monitoring.html#other-events)
          * [The STOP_ITERATION event](https://docs.python.org/3/library/sys.monitoring.html#the-stop-iteration-event)
        * [Turning events on and off](https://docs.python.org/3/library/sys.monitoring.html#turning-events-on-and-off)
          * [Setting events globally](https://docs.python.org/3/library/sys.monitoring.html#setting-events-globally)
          * [Per code object events](https://docs.python.org/3/library/sys.monitoring.html#per-code-object-events)
          * [Disabling events](https://docs.python.org/3/library/sys.monitoring.html#disabling-events)
        * [Registering callback functions](https://docs.python.org/3/library/sys.monitoring.html#registering-callback-functions)
          * [Callback function arguments](https://docs.python.org/3/library/sys.monitoring.html#callback-function-arguments)
      * [`sysconfig` — Provide access to Python’s configuration information](https://docs.python.org/3/library/sysconfig.html)
        * [Configuration variables](https://docs.python.org/3/library/sysconfig.html#configuration-variables)
        * [Installation paths](https://docs.python.org/3/library/sysconfig.html#installation-paths)
        * [User scheme](https://docs.python.org/3/library/sysconfig.html#user-scheme)
          * [`posix_user`](https://docs.python.org/3/library/sysconfig.html#posix-user)
          * [`nt_user`](https://docs.python.org/3/library/sysconfig.html#nt-user)
          * [`osx_framework_user`](https://docs.python.org/3/library/sysconfig.html#osx-framework-user)
        * [Home scheme](https://docs.python.org/3/library/sysconfig.html#home-scheme)
          * [`posix_home`](https://docs.python.org/3/library/sysconfig.html#posix-home)
        * [Prefix scheme](https://docs.python.org/3/library/sysconfig.html#prefix-scheme)
          * [`posix_prefix`](https://docs.python.org/3/library/sysconfig.html#posix-prefix)
          * [`nt`](https://docs.python.org/3/library/sysconfig.html#nt)
        * [Installation path functions](https://docs.python.org/3/library/sysconfig.html#installation-path-functions)
        * [Other functions](https://docs.python.org/3/library/sysconfig.html#other-functions)
        * [Using `sysconfig` as a script](https://docs.python.org/3/library/sysconfig.html#using-sysconfig-as-a-script)
      * [`builtins` — Built-in objects](https://docs.python.org/3/library/builtins.html)
      * [`__main__` — Top-level code environment](https://docs.python.org/3/library/__main__.html)
        * [`__name__ == '__main__'`](https://docs.python.org/3/library/__main__.html#name-main)
          * [What is the “top-level code environment”?](https://docs.python.org/3/library/__main__.html#what-is-the-top-level-code-environment)
          * [Idiomatic Usage](https://docs.python.org/3/library/__main__.html#idiomatic-usage)
          * [Packaging Conside