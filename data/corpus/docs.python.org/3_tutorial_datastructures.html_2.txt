Title: List Comprehensions in Python
URL: https://docs.python.org/3/tutorial/datastructures.html
Summary: This section describes list comprehensions in Python, which allow for creating new lists by combining elements from existing lists based on specified conditions. It provides an example of a list comprehension that generates pairs of elements from two lists if they are not equal, demonstrating its concise syntax compared to the equivalent nested loop approach.
---

```

which is more concise and readable.
A list comprehension consists of brackets containing an expression followed by a `for` clause, then zero or more `for` or `if` clauses. The result will be a new list resulting from evaluating the expression in the context of the `for` and `if` clauses which follow it. For example, this listcomp combines the elements of two lists if they are not equal:
>>>```
>>> [(x, y) for x in [1,2,3] for y in [3,1,4] if x != y]
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]

```

and it’s equivalent to:
>>>```
>>> combs = []
>>> for x in [1,2,3]:
...   for y in [3,1,4]:
...     if x != y:
...       combs.append((x, y))
...
>>> combs
[(1, 3), (1, 4), (2, 3), (2, 1), (2, 4), (3, 1), (3, 4)]

```

Note how the order of the [`for`](https://docs.python.org/3/reference/compound_stmts.html#for) and [`if`](https://docs.python.org/3/reference/compound_stmts.html#if) statements is the same in both these snippets.
If the expression is a tuple (e.g. the `(x, y)` in the previous example), it must be parenthesized.
>>>```
>>> vec = [-4, -2, 0, 2, 4]
>>> # create a new list with the values doubled
>>> [x*2 for x in vec]
[-8, -4, 0, 4, 8]
>>> # filter the list to exclude negative numbers
>>> [x for x in vec if x >= 0]
[0, 2, 4]
>>> # apply a function to all the elements
>>> [abs(x) for x in vec]
[4, 2, 0, 2, 4]
>>> # call a method on each element
>>> freshfruit = [' banana', ' loganberry ', 'passion fruit ']
>>> [weapon.strip() for weapon in freshfruit]
['banana', 'loganberry', 'passion fruit']
>>> # create a list of 2-tuples like (number, square)
>>> [(x, x**2) for x in range(6)]
[(0, 0), (1, 1), (2, 4), (3, 9), (4, 16), (5, 25)]
>>> # the tuple must be parenthesized, otherwise an error is raised
>>> [x, x**2 for x in range(6)]
 File "<stdin>", line 1
[x, x**2 for x in range(6)]
^^^^^^^
SyntaxError: did you forget parentheses around the comprehension target?
>>> # flatten a list using a listcomp with two 'for'
>>> vec = [[1,2,3], [4,5,6], [7,8,9]]
>>> [num for elem in vec for num in elem]
[1, 2, 3, 4, 5, 6, 7, 8, 9]

```

List comprehensions can contain complex expressions and nested functions:
>>>```
>>> frommathimport pi
>>> [str(round(pi, i)) for i in range(1, 6)]
['3.1', '3.14', '3.142', '3.1416', '3.14159']

```

### 5.1.4. Nested List Comprehensions[¶](https://docs.python.org/3/tutorial/datastructures.html#nested-list-comprehensions "Link to this heading")
The initial expression in a list comprehension can be any arbitrary expression, including another list comprehension.
Consider the following example of a 3x4 matrix implemented as a list of 3 lists of length 4:
>>>```
>>> matrix = [
...   [1, 2, 3, 4],
...   [5, 6, 7, 8],
...   [9, 10, 11, 12],
... ]

```

The following list comprehension will transpose rows and columns:
>>>```
>>> [[row[i] for row in matrix] for i in range(4)]
[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]

```

As we saw in the previous section, the inner list comprehension is evaluated in the context of the [`for`](https://docs.python.org/3/reference/compound_stmts.html#for) that follows it, so this example is equivalent to:
>>>```
>>> transposed = []
>>> for i in range(4):
...   transposed.append([row[i] for row in matrix])
...
>>> transposed
[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]

```

which, in turn, is the same as:
>>>```
>>> transposed = []
>>> for i in range(4):
...   # the following 3 lines implement the nested listcomp
...   transposed_row = []
...   for row in matrix:
...     transposed_row.append(row[i])
...   transposed.append(transposed_row)
...
>>> transposed
[[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]

```

In the real world, you should prefer built-in functions to complex flow statements. The [`zip()`](https://docs.python.org/3/library/functions.html#zip "zip") function would do a great job for this use case:
>>>```
>>> list(zip(*matrix))
[(1, 5, 9), (2, 6, 10), (3, 7, 11), (4, 8, 12)]

```

See [Unpacking Argument Lists](https://docs.python.org/3/tutorial/controlflow.html#tut-unpacking-arguments) for details on the asterisk in this line.
## 5.2. The `del` statement[¶](https://docs.python.org/3/tutorial/datastructures.html#the-del-statement "Link to this heading")
There is a way to remove an item from a list given its index instead of its value: the [`del`](https://docs.python.org/3/reference/simple_stmts.html#del) statement. This differs from the `pop()` method which returns a value. The `del` statement can also be used to remove slices from a list or clear the entire list (which we did earlier by assignment of an empty list to the slice). For example:
>>>```
>>> a = [-1, 1, 66.25, 333, 333, 1234.5]
>>> del a[0]
>>> a
[1, 66.25, 333, 333, 1234.5]
>>> del a[2:4]
>>> a
[1, 66.25, 1234.5]
>>> del a[:]
>>> a
[]

```

[`del`](https://docs.python.org/3/reference/simple_stmts.html#del) can also be used to delete entire variables:
>>>```
>>> del a