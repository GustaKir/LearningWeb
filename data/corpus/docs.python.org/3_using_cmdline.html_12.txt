Title: Environment Variables for Python Command Line
URL: https://docs.python.org/3/using/cmdline.html
Summary: This section discusses the environment variable PYTHONFAULTHANDLER, explaining that setting it to a non-empty string enables automatic fault handler installations for various signals at startup, enhancing the debugging process during Python execution.
---

```

See [The Warnings Filter](https://docs.python.org/3/library/warnings.html#warning-filter) and [Describing Warning Filters](https://docs.python.org/3/library/warnings.html#describing-warning-filters) for more details. 

PYTHONFAULTHANDLER[¶](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONFAULTHANDLER "Link to this definition")
    
If this environment variable is set to a non-empty string, [`faulthandler.enable()`](https://docs.python.org/3/library/faulthandler.html#faulthandler.enable "faulthandler.enable") is called at startup: install a handler for [`SIGSEGV`](https://docs.python.org/3/library/signal.html#signal.SIGSEGV "signal.SIGSEGV"), [`SIGFPE`](https://docs.python.org/3/library/signal.html#signal.SIGFPE "signal.SIGFPE"), [`SIGABRT`](https://docs.python.org/3/library/signal.html#signal.SIGABRT "signal.SIGABRT"), [`SIGBUS`](https://docs.python.org/3/library/signal.html#signal.SIGBUS "signal.SIGBUS") and [`SIGILL`](https://docs.python.org/3/library/signal.html#signal.SIGILL "signal.SIGILL") signals to dump the Python traceback. This is equivalent to [`-X`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) `faulthandler` option.
Added in version 3.3. 

PYTHONTRACEMALLOC[¶](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONTRACEMALLOC "Link to this definition")
    
If this environment variable is set to a non-empty string, start tracing Python memory allocations using the [`tracemalloc`](https://docs.python.org/3/library/tracemalloc.html#module-tracemalloc "tracemalloc: Trace memory allocations.") module. The value of the variable is the maximum number of frames stored in a traceback of a trace. For example, `PYTHONTRACEMALLOC=1` stores only the most recent frame. See the [`tracemalloc.start()`](https://docs.python.org/3/library/tracemalloc.html#tracemalloc.start "tracemalloc.start") function for more information. This is equivalent to setting the [`-X`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) `tracemalloc` option.
Added in version 3.4. 

PYTHONPROFILEIMPORTTIME[¶](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPROFILEIMPORTTIME "Link to this definition")
    
If this environment variable is set to a non-empty string, Python will show how long each import takes. This is equivalent to setting the [`-X`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) `importtime` option.
Added in version 3.7. 

PYTHONASYNCIODEBUG[¶](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONASYNCIODEBUG "Link to this definition")
    
If this environment variable is set to a non-empty string, enable the [debug mode](https://docs.python.org/3/library/asyncio-dev.html#asyncio-debug-mode) of the [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O.") module.
Added in version 3.4. 

PYTHONMALLOC[¶](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONMALLOC "Link to this definition")
    
Set the Python memory allocators and/or install debug hooks.
Set the family of memory allocators used by Python:
  * `default`: use the [default memory allocators](https://docs.python.org/3/c-api/memory.html#default-memory-allocators).
  * `malloc`: use the `malloc()` function of the C library for all domains ([`PYMEM_DOMAIN_RAW`](https://docs.python.org/3/c-api/memory.html#c.PYMEM_DOMAIN_RAW "PYMEM_DOMAIN_RAW"), [`PYMEM_DOMAIN_MEM`](https://docs.python.org/3/c-api/memory.html#c.PYMEM_DOMAIN_MEM "PYMEM_DOMAIN_MEM"), [`PYMEM_DOMAIN_OBJ`](https://docs.python.org/3/c-api/memory.html#c.PYMEM_DOMAIN_OBJ "PYMEM_DOMAIN_OBJ")).
  * `pymalloc`: use the [pymalloc allocator](https://docs.python.org/3/c-api/memory.html#pymalloc) for [`PYMEM_DOMAIN_MEM`](https://docs.python.org/3/c-api/memory.html#c.PYMEM_DOMAIN_MEM "PYMEM_DOMAIN_MEM") and [`PYMEM_DOMAIN_OBJ`](https://docs.python.org/3/c-api/memory.html#c.PYMEM_DOMAIN_OBJ "PYMEM_DOMAIN_OBJ") domains and use the `malloc()` function for the [`PYMEM_DOMAIN_RAW`](https://docs.python.org/3/c-api/memory.html#c.PYMEM_DOMAIN_RAW "PYMEM_DOMAIN_RAW") domain.
  * `mimalloc`: use the [mimalloc allocator](https://docs.python.org/3/c-api/memory.html#mimalloc) for [`PYMEM_DOMAIN_MEM`](https://docs.python.org/3/c-api/memory.html#c.PYMEM_DOMAIN_MEM "PYMEM_DOMAIN_MEM") and [`PYMEM_DOMAIN_OBJ`](https://docs.python.org/3/c-api/memory.html#c.PYMEM_DOMAIN_OBJ "PYMEM_DOMAIN_OBJ") domains and use the `malloc()` function for the [`PYMEM_DOMAIN_RAW`](https://docs.python.org/3/c-api/memory.html#c.PYMEM_DOMAIN_RAW "PYMEM_DOMAIN_RAW") domain.


Install [debug hooks](https://docs.python.org/3/c-api/memory.html#pymem-debug-hooks):
  * `debug`: install debug hooks on top of the [default memory allocators](https://docs.python.org/3/c-api/memory.html#default-memory-allocators).
  * `malloc_debug`: same as `malloc` but also install debug hooks.
  * `pymalloc_debug`: same as `pymalloc` but also install debug hooks.
  * `mimalloc_debug`: same as `mimalloc` but also install debug hooks.