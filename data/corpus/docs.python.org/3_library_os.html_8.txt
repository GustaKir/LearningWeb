Title: os.putenv - Set Environment Variables
URL: https://docs.python.org/3/library/os.html
Summary: The os.putenv function sets the environment variable specified by _key_ to the _value_ string. Changes made affect subprocesses initiated with methods like os.system and os.popen. While assignments to os.environ translate into putenv calls, direct calls to putenv do not update os.environ.
---

os.putenv(_key_ , _value_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.putenv "Link to this definition")
    
Set the environment variable named _key_ to the string _value_. Such changes to the environment affect subprocesses started with [`os.system()`](https://docs.python.org/3/library/os.html#os.system "os.system"), [`popen()`](https://docs.python.org/3/library/os.html#os.popen "os.popen") or [`fork()`](https://docs.python.org/3/library/os.html#os.fork "os.fork") and [`execv()`](https://docs.python.org/3/library/os.html#os.execv "os.execv").
Assignments to items in [`os.environ`](https://docs.python.org/3/library/os.html#os.environ "os.environ") are automatically translated into corresponding calls to [`putenv()`](https://docs.python.org/3/library/os.html#os.putenv "os.putenv"); however, calls to [`putenv()`](https://docs.python.org/3/library/os.html#os.putenv "os.putenv") don’t update [`os.environ`](https://docs.python.org/3/library/os.html#os.environ "os.environ"), so it is actually preferable to assign to items of [`os.environ`](https://docs.python.org/3/library/os.html#os.environ "os.environ"). This also applies to [`getenv()`](https://docs.python.org/3/library/os.html#os.getenv "os.getenv") and [`getenvb()`](https://docs.python.org/3/library/os.html#os.getenvb "os.getenvb"), which respectively use [`os.environ`](https://docs.python.org/3/library/os.html#os.environ "os.environ") and [`os.environb`](https://docs.python.org/3/library/os.html#os.environb "os.environb") in their implementations.
Note
On some platforms, including FreeBSD and macOS, setting `environ` may cause memory leaks. Refer to the system documentation for `putenv()`.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.putenv` with arguments `key`, `value`.
Changed in version 3.9: The function is now always available. 

os.setegid(_egid_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.setegid "Link to this definition")
    
Set the current process’s effective group id.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI, not Android. 

os.seteuid(_euid_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.seteuid "Link to this definition")
    
Set the current process’s effective user id.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI, not Android. 

os.setgid(_gid_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.setgid "Link to this definition")
    
Set the current process’ group id.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI, not Android. 

os.setgroups(_groups_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.setgroups "Link to this definition")
    
Set the list of supplemental group ids associated with the current process to _groups_. _groups_ must be a sequence, and each element must be an integer identifying a group. This operation is typically available only to the superuser.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI.
Note
On macOS, the length of _groups_ may not exceed the system-defined maximum number of effective group ids, typically 16. See the documentation for [`getgroups()`](https://docs.python.org/3/library/os.html#os.getgroups "os.getgroups") for cases where it may not return the same group list set by calling setgroups(). 

os.setns(_fd_ , _nstype =0_)[¶](https://docs.python.org/3/library/os.html#os.setns "Link to this definition")
    
Reassociate the current thread with a Linux namespace. See the _[setns(2)](https://manpages.debian.org/setns\(2\))_ and _[namespaces(7)](https://manpages.debian.org/namespaces\(7\))_ man pages for more details.
If _fd_ refers to a `/proc/_pid_/ns/`link,`setns()` reassociates the calling thread with the namespace associated with that link, and _nstype_ may be set to one of the [CLONE_NEW* constants](https://docs.python.org/3/library/os.html#os-unshare-clone-flags) to impose constraints on the operation (`0` means no constraints).
Since Linux 5.8, _fd_ may refer to a PID file descriptor obtained from [`pidfd_open()`](https://docs.python.org/3/library/os.html#os.pidfd_open "os.pidfd_open"). In this case, `setns()` reassociates the calling thread into one or more of the same namespaces as the thread referred to by _fd_. This is subject to any constraints imposed by _nstype_ , which is a bit mask combining one or more of the [CLONE_NEW* constants](https://docs.python.org/3/library/os.html#os-unshare-clone-flags), e.g. `setns(fd, os.CLONE_NEWUTS | os.CLONE_NEWPID)`. The caller’s memberships in unspecified namespaces are left unchanged.
_fd_ can be any object with a [`fileno()`](https://docs.python.org/3/library/io.html#io.IOBase.fileno "io.IOBase.fileno") method, or a raw file descriptor.
This example reassociates the thread with the `init` process’s network namespace: