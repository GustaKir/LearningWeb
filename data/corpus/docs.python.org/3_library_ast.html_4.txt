Title: AST Field Defaults and Changes in Python
URL: https://docs.python.org/3/library/ast.html
Summary: This section explains the default values for optional fields in the AST constructor, including defaults for list fields and specific types like `ast.expr_context`. It notes changes in Python 3.8 regarding the use of `ast.Constant` for constants and modifications in Python 3.9 for representing simple indices and slices. Additionally, it mentions the deprecation of several old AST classes starting from Python 3.8.
---

```

If a field that is optional in the grammar is omitted from the constructor, it defaults to `None`. If a list field is omitted, it defaults to the empty list. If a field of type `ast.expr_context` is omitted, it defaults to [`Load()`](https://docs.python.org/3/library/ast.html#ast.Load "ast.Load"). If any other field is omitted, a [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning") is raised and the AST node will not have this field. In Python 3.15, this condition will raise an error.
Changed in version 3.8: Class [`ast.Constant`](https://docs.python.org/3/library/ast.html#ast.Constant "ast.Constant") is now used for all constants.
Changed in version 3.9: Simple indices are represented by their value, extended slices are represented as tuples.
Deprecated since version 3.8: Old classes `ast.Num`, `ast.Str`, `ast.Bytes`, `ast.NameConstant` and `ast.Ellipsis` are still available, but they will be removed in future Python releases. In the meantime, instantiating them will return an instance of a different class.
Deprecated since version 3.9: Old classes `ast.Index` and `ast.ExtSlice` are still available, but they will be removed in future Python releases. In the meantime, instantiating them will return an instance of a different class.
Deprecated since version 3.13, will be removed in version 3.15: Previous versions of Python allowed the creation of AST nodes that were missing required fields. Similarly, AST node constructors allowed arbitrary keyword arguments that were set as attributes of the AST node, even if they did not match any of the fields of the AST node. This behavior is deprecated and will be removed in Python 3.15.
Note
The descriptions of the specific node classes displayed here were initially adapted from the fantastic [Green Tree Snakes](https://greentreesnakes.readthedocs.io/en/latest/) project and all its contributors.
### Root nodes[¶](https://docs.python.org/3/library/ast.html#root-nodes "Link to this heading") 

_class_ ast.Module(_body_ , _type_ignores_)[¶](https://docs.python.org/3/library/ast.html#ast.Module "Link to this definition")
    
A Python module, as with [file input](https://docs.python.org/3/reference/toplevel_components.html#file-input). Node type generated by [`ast.parse()`](https://docs.python.org/3/library/ast.html#ast.parse "ast.parse") in the default `"exec"` _mode_.
`body` is a [`list`](https://docs.python.org/3/library/stdtypes.html#list "list") of the module’s [Statements](https://docs.python.org/3/library/ast.html#ast-statements).
`type_ignores` is a [`list`](https://docs.python.org/3/library/stdtypes.html#list "list") of the module’s type ignore comments; see [`ast.parse()`](https://docs.python.org/3/library/ast.html#ast.parse "ast.parse") for more details.
>>>```
>>> print(ast.dump(ast.parse('x = 1'), indent=4))
Module(
  body=[
    Assign(
      targets=[
        Name(id='x', ctx=Store())],
      value=Constant(value=1))])

```


_class_ ast.Expression(_body_)[¶](https://docs.python.org/3/library/ast.html#ast.Expression "Link to this definition")
    
A single Python [expression input](https://docs.python.org/3/reference/toplevel_components.html#expression-input). Node type generated by [`ast.parse()`](https://docs.python.org/3/library/ast.html#ast.parse "ast.parse") when _mode_ is `"eval"`.
`body` is a single node, one of the [expression types](https://docs.python.org/3/library/ast.html#ast-expressions).
>>>```
>>> print(ast.dump(ast.parse('123', mode='eval'), indent=4))
Expression(
  body=Constant(value=123))

```


_class_ ast.Interactive(_body_)[¶](https://docs.python.org/3/library/ast.html#ast.Interactive "Link to this definition")
    
A single [interactive input](https://docs.python.org/3/reference/toplevel_components.html#interactive), like in [Interactive Mode](https://docs.python.org/3/tutorial/appendix.html#tut-interac). Node type generated by [`ast.parse()`](https://docs.python.org/3/library/ast.html#ast.parse "ast.parse") when _mode_ is `"single"`.
`body` is a [`list`](https://docs.python.org/3/library/stdtypes.html#list "list") of [statement nodes](https://docs.python.org/3/library/ast.html#ast-statements).
>>>```
>>> print(ast.dump(ast.parse('x = 1; y = 2', mode='single'), indent=4))
Interactive(
  body=[
    Assign(
      targets=[
        Name(id='x', ctx=Store())],
      value=Constant(value=1)),
    Assign(
      targets=[
        Name(id='y', ctx=Store())],
      value=Constant(value=2))])