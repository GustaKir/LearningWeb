Title: SSL Sockets
URL: https://docs.python.org/3/library/ssl.html
Summary: The `ssl.SSLSocket` class extends socket functionality by providing methods for handling secure connections, including `accept()`, `bind()`, `close()`, `connect()`, `detach()`, `fileno()`, and `getpeername()`.
---

_class_ ssl.SSLSocket(_socket.socket_)[Â¶](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket "Link to this definition")
    
SSL sockets provide the following methods of [Socket Objects](https://docs.python.org/3/library/socket.html#socket-objects):
  * [`accept()`](https://docs.python.org/3/library/socket.html#socket.socket.accept "socket.socket.accept")
  * [`bind()`](https://docs.python.org/3/library/socket.html#socket.socket.bind "socket.socket.bind")
  * [`close()`](https://docs.python.org/3/library/socket.html#socket.socket.close "socket.socket.close")
  * [`connect()`](https://docs.python.org/3/library/socket.html#socket.socket.connect "socket.socket.connect")
  * [`detach()`](https://docs.python.org/3/library/socket.html#socket.socket.detach "socket.socket.detach")
  * [`fileno()`](https://docs.python.org/3/library/socket.html#socket.socket.fileno "socket.socket.fileno")
  * [`getpeername()`](https://docs.python.org/3/library/socket.html#socket.socket.getpeername "socket.socket.getpeername"), [`getsockname()`](https://docs.python.org/3/library/socket.html#socket.socket.getsockname "socket.socket.getsockname")
  * [`getsockopt()`](https://docs.python.org/3/library/socket.html#socket.socket.getsockopt "socket.socket.getsockopt"), [`setsockopt()`](https://docs.python.org/3/library/socket.html#socket.socket.setsockopt "socket.socket.setsockopt")
  * [`gettimeout()`](https://docs.python.org/3/library/socket.html#socket.socket.gettimeout "socket.socket.gettimeout"), [`settimeout()`](https://docs.python.org/3/library/socket.html#socket.socket.settimeout "socket.socket.settimeout"), [`setblocking()`](https://docs.python.org/3/library/socket.html#socket.socket.setblocking "socket.socket.setblocking")
  * [`listen()`](https://docs.python.org/3/library/socket.html#socket.socket.listen "socket.socket.listen")
  * [`makefile()`](https://docs.python.org/3/library/socket.html#socket.socket.makefile "socket.socket.makefile")
  * [`recv()`](https://docs.python.org/3/library/socket.html#socket.socket.recv "socket.socket.recv"), [`recv_into()`](https://docs.python.org/3/library/socket.html#socket.socket.recv_into "socket.socket.recv_into") (but passing a non-zero `flags` argument is not allowed)
  * [`send()`](https://docs.python.org/3/library/socket.html#socket.socket.send "socket.socket.send"), [`sendall()`](https://docs.python.org/3/library/socket.html#socket.socket.sendall "socket.socket.sendall") (with the same limitation)
  * [`sendfile()`](https://docs.python.org/3/library/socket.html#socket.socket.sendfile "socket.socket.sendfile") (but [`os.sendfile`](https://docs.python.org/3/library/os.html#os.sendfile "os.sendfile") will be used for plain-text sockets only, else [`send()`](https://docs.python.org/3/library/socket.html#socket.socket.send "socket.socket.send") will be used)
  * [`shutdown()`](https://docs.python.org/3/library/socket.html#socket.socket.shutdown "socket.socket.shutdown")


However, since the SSL (and TLS) protocol has its own framing atop of TCP, the SSL sockets abstraction can, in certain respects, diverge from the specification of normal, OS-level sockets. See especially the [notes on non-blocking sockets](https://docs.python.org/3/library/ssl.html#ssl-nonblocking).
Instances of [`SSLSocket`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket "ssl.SSLSocket") must be created using the [`SSLContext.wrap_socket()`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_socket "ssl.SSLContext.wrap_socket") method.
Changed in version 3.5: The `sendfile()` method was added.
Changed in version 3.5: The `shutdown()` does not reset the socket timeout each time bytes are received or sent. The socket timeout is now the maximum total duration of the shutdown.
Deprecated since version 3.6: It is deprecated to create a [`SSLSocket`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket "ssl.SSLSocket") instance directly, use [`SSLContext.wrap_socket()`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_socket "ssl.SSLContext.wrap_socket") to wrap a socket.
Changed in version 3.7: [`SSLSocket`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket "ssl.SSLSocket") instances must to created with [`wrap_socket()`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_socket "ssl.SSLContext.wrap_socket"). In earlier versions, it was possible to create instances directly. This was never documented or officially supported.
Changed in version 3.10: Python now uses `SSL_read_ex` and `SSL_write_ex` internally. The functions support reading and writing of data larger than 2 GB. Writing zero-length data no longer fails with a protocol violation error.
SSL sockets also have the following additional methods and attributes: