Title: Changes in the C API for Python 3.7
URL: https://docs.python.org/3/whatsnew/3.7.html
Summary: The `PySlice_GetIndicesEx()` function is now deemed unsafe for resizable sequences, as it can return invalid indices when object indices implement `__index__()` and the sequence is resized. To mitigate this issue, developers are advised to use `PySlice_Unpack()` and `PySlice_AdjustIndices()`. This change was contributed by Serhiy Storchaka.
---

### Changes in the C API[¶](https://docs.python.org/3/whatsnew/3.7.html#changes-in-the-c-api "Link to this heading")
The function [`PySlice_GetIndicesEx()`](https://docs.python.org/3/c-api/slice.html#c.PySlice_GetIndicesEx "PySlice_GetIndicesEx") is considered unsafe for resizable sequences. If the slice indices are not instances of [`int`](https://docs.python.org/3/library/functions.html#int "int"), but objects that implement the `__index__()` method, the sequence can be resized after passing its length to `PySlice_GetIndicesEx()`. This can lead to returning indices out of the length of the sequence. For avoiding possible problems use new functions [`PySlice_Unpack()`](https://docs.python.org/3/c-api/slice.html#c.PySlice_Unpack "PySlice_Unpack") and [`PySlice_AdjustIndices()`](https://docs.python.org/3/c-api/slice.html#c.PySlice_AdjustIndices "PySlice_AdjustIndices"). (Contributed by Serhiy Storchaka in [bpo-27867](https://bugs.python.org/issue?@action=redirect&bpo=27867).)
### CPython bytecode changes[¶](https://docs.python.org/3/whatsnew/3.7.html#cpython-bytecode-changes "Link to this heading")
There are two new opcodes: [`LOAD_METHOD`](https://docs.python.org/3/library/dis.html#opcode-LOAD_METHOD) and `CALL_METHOD`. (Contributed by Yury Selivanov and INADA Naoki in [bpo-26110](https://bugs.python.org/issue?@action=redirect&bpo=26110).)
The `STORE_ANNOTATION` opcode has been removed. (Contributed by Mark Shannon in [bpo-32550](https://bugs.python.org/issue?@action=redirect&bpo=32550).)
### Windows-only Changes[¶](https://docs.python.org/3/whatsnew/3.7.html#id12 "Link to this heading")
The file used to override [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path") is now called `<python-executable>._pth` instead of `'sys.path'`. See [Finding modules](https://docs.python.org/3/using/windows.html#windows-finding-modules) for more information. (Contributed by Steve Dower in [bpo-28137](https://bugs.python.org/issue?@action=redirect&bpo=28137).)
### Other CPython implementation changes[¶](https://docs.python.org/3/whatsnew/3.7.html#id13 "Link to this heading")
In preparation for potential future changes to the public CPython runtime initialization API (see [**PEP 432**](https://peps.python.org/pep-0432/) for an initial, but somewhat outdated, draft), CPython’s internal startup and configuration management logic has been significantly refactored. While these updates are intended to be entirely transparent to both embedding applications and users of the regular CPython CLI, they’re being mentioned here as the refactoring changes the internal order of various operations during interpreter startup, and hence may uncover previously latent defects, either in embedding applications, or in CPython itself. (Initially contributed by Nick Coghlan and Eric Snow as part of [bpo-22257](https://bugs.python.org/issue?@action=redirect&bpo=22257), and further updated by Nick, Eric, and Victor Stinner in a number of other issues). Some known details affected:
  * `PySys_AddWarnOptionUnicode()` is not currently usable by embedding applications due to the requirement to create a Unicode object prior to calling `Py_Initialize`. Use `PySys_AddWarnOption()` instead.
  * warnings filters added by an embedding application with `PySys_AddWarnOption()` should now more consistently take precedence over the default filters set by the interpreter