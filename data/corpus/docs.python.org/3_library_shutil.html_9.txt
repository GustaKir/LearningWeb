Title: Archiving Operations in shutil
URL: https://docs.python.org/3/library/shutil.html
Summary: This section provides high-level utilities for creating and reading compressed and archived files through the shutil module, which relies on zipfile and tarfile modules. It describes the 'shutil.make_archive' function, which creates an archive file (like zip or tar) and returns its name, detailing parameters such as base name and format.
---

```

## Archiving operations[¶](https://docs.python.org/3/library/shutil.html#archiving-operations "Link to this heading")
Added in version 3.2.
Changed in version 3.5: Added support for the _xztar_ format.
High-level utilities to create and read compressed and archived files are also provided. They rely on the [`zipfile`](https://docs.python.org/3/library/zipfile.html#module-zipfile "zipfile: Read and write ZIP-format archive files.") and [`tarfile`](https://docs.python.org/3/library/tarfile.html#module-tarfile "tarfile: Read and write tar-format archive files.") modules. 

shutil.make_archive(_base_name_ , _format_[, _root_dir_[, _base_dir_[, _verbose_[, _dry_run_[, _owner_[, _group_[, _logger_]]]]]]])[¶](https://docs.python.org/3/library/shutil.html#shutil.make_archive "Link to this definition")
    
Create an archive file (such as zip or tar) and return its name.
_base_name_ is the name of the file to create, including the path, minus any format-specific extension.
_format_ is the archive format: one of “zip” (if the [`zlib`](https://docs.python.org/3/library/zlib.html#module-zlib "zlib: Low-level interface to compression and decompression routines compatible with gzip.") module is available), “tar”, “gztar” (if the [`zlib`](https://docs.python.org/3/library/zlib.html#module-zlib "zlib: Low-level interface to compression and decompression routines compatible with gzip.") module is available), “bztar” (if the [`bz2`](https://docs.python.org/3/library/bz2.html#module-bz2 "bz2: Interfaces for bzip2 compression and decompression.") module is available), or “xztar” (if the [`lzma`](https://docs.python.org/3/library/lzma.html#module-lzma "lzma: A Python wrapper for the liblzma compression library.") module is available).
_root_dir_ is a directory that will be the root directory of the archive, all paths in the archive will be relative to it; for example, we typically chdir into _root_dir_ before creating the archive.
_base_dir_ is the directory where we start archiving from; i.e. _base_dir_ will be the common prefix of all files and directories in the archive. _base_dir_ must be given relative to _root_dir_. See [Archiving example with base_dir](https://docs.python.org/3/library/shutil.html#shutil-archiving-example-with-basedir) for how to use _base_dir_ and _root_dir_ together.
_root_dir_ and _base_dir_ both default to the current directory.
If _dry_run_ is true, no archive is created, but the operations that would be executed are logged to _logger_.
_owner_ and _group_ are used when creating a tar archive. By default, uses the current owner and group.
_logger_ must be an object compatible with [**PEP 282**](https://peps.python.org/pep-0282/), usually an instance of [`logging.Logger`](https://docs.python.org/3/library/logging.html#logging.Logger "logging.Logger").
The _verbose_ argument is unused and deprecated.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `shutil.make_archive` with arguments `base_name`, `format`, `root_dir`, `base_dir`.
Note
This function is not thread-safe when custom archivers registered with [`register_archive_format()`](https://docs.python.org/3/library/shutil.html#shutil.register_archive_format "shutil.register_archive_format") do not support the _root_dir_ argument. In this case it temporarily changes the current working directory of the process to _root_dir_ to perform archiving.
Changed in version 3.8: The modern pax (POSIX.1-2001) format is now used instead of the legacy GNU format for archives created with `format="tar"`.
Changed in version 3.10.6: This function is now made thread-safe during creation of standard `.zip` and tar archives. 

shutil.get_archive_formats()[¶](https://docs.python.org/3/library/shutil.html#shutil.get_archive_formats "Link to this definition")
    
Return a list of supported formats for archiving. Each element of the returned sequence is a tuple `(name, description)`.
By default [`shutil`](https://docs.python.org/3/library/shutil.html#module-shutil "shutil: High-level file operations, including copying.") provides these formats:
  * _zip_ : ZIP file (if the [`zlib`](https://docs.python.org/3/library/zlib.html#module-zlib "zlib: Low-level interface to compression and decompression routines compatible with gzip.") module is available).
  * _tar_ : Uncompressed tar file. Uses POSIX.1-2001 pax format for new archives.
  * _gztar_ : gzip’ed tar-file (if the [`zlib`](https://docs.python.org/3/library/zlib.html#module-zlib "zlib: Low-level interface to compression and decompression routines compatible with gzip.") module is available).
  * _bztar_ : bzip2’ed tar-file (if the [`bz2`](https://docs.python.org/3/library/bz2.html#module-bz2 "bz2: Interfaces for bzip2 compression and decompression.") module is available).
  * _xztar_ : xz’ed tar-file (if the [`lzma`](https://docs.python.org/3/library/lzma.html#module-lzma "lzma: A Python wrapper for the liblzma compression library.") module is available).