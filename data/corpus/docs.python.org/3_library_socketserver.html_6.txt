Title: SocketServer Module - Error Handling and Timeout Methods
URL: https://docs.python.org/3/library/socketserver.html
Summary: The `handle_error` method in the SocketServer module is invoked when an exception is raised during the handling of a request, with the default behavior being to print the traceback. This method was updated in version 3.6 to only handle exceptions derived from the Exception class. The `handle_timeout` method is also defined, though further details are not provided in this chunk.
---

handle_error(_request_ , _client_address_)[¶](https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.handle_error "Link to this definition")
    
This function is called if the [`handle()`](https://docs.python.org/3/library/socketserver.html#socketserver.BaseRequestHandler.handle "socketserver.BaseRequestHandler.handle") method of a [`RequestHandlerClass`](https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.RequestHandlerClass "socketserver.BaseServer.RequestHandlerClass") instance raises an exception. The default action is to print the traceback to standard error and continue handling further requests.
Changed in version 3.6: Now only called for exceptions derived from the [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception "Exception") class. 

handle_timeout()[¶](https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.handle_timeout "Link to this definition")
    
This function is called when the [`timeout`](https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.timeout "socketserver.BaseServer.timeout") attribute has been set to a value other than [`None`](https://docs.python.org/3/library/constants.html#None "None") and the timeout period has passed with no requests being received. The default action for forking servers is to collect the status of any child processes that have exited, while in threading servers this method does nothing. 

process_request(_request_ , _client_address_)[¶](https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.process_request "Link to this definition")
    
Calls [`finish_request()`](https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.finish_request "socketserver.BaseServer.finish_request") to create an instance of the [`RequestHandlerClass`](https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.RequestHandlerClass "socketserver.BaseServer.RequestHandlerClass"). If desired, this function can create a new process or thread to handle the request; the [`ForkingMixIn`](https://docs.python.org/3/library/socketserver.html#socketserver.ForkingMixIn "socketserver.ForkingMixIn") and [`ThreadingMixIn`](https://docs.python.org/3/library/socketserver.html#socketserver.ThreadingMixIn "socketserver.ThreadingMixIn") classes do this. 

server_activate()[¶](https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.server_activate "Link to this definition")
    
Called by the server’s constructor to activate the server. The default behavior for a TCP server just invokes [`listen()`](https://docs.python.org/3/library/socket.html#socket.socket.listen "socket.socket.listen") on the server’s socket. May be overridden. 

server_bind()[¶](https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.server_bind "Link to this definition")
    
Called by the server’s constructor to bind the socket to the desired address. May be overridden. 

verify_request(_request_ , _client_address_)[¶](https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.verify_request "Link to this definition")
    
Must return a Boolean value; if the value is [`True`](https://docs.python.org/3/library/constants.html#True "True"), the request will be processed, and if it’s [`False`](https://docs.python.org/3/library/constants.html#False "False"), the request will be denied. This function can be overridden to implement access controls for a server. The default implementation always returns [`True`](https://docs.python.org/3/library/constants.html#True "True").
Changed in version 3.6: Support for the [context manager](https://docs.python.org/3/glossary.html#term-context-manager) protocol was added. Exiting the context manager is equivalent to calling [`server_close()`](https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.server_close "socketserver.BaseServer.server_close").
## Request Handler Objects[¶](https://docs.python.org/3/library/socketserver.html#request-handler-objects "Link to this heading") 

_class_ socketserver.BaseRequestHandler[¶](https://docs.python.org/3/library/socketserver.html#socketserver.BaseRequestHandler "Link to this definition")
    
This is the superclass of all request handler objects. It defines the interface, given below. A concrete request handler subclass must define a new [`handle()`](https://docs.python.org/3/library/socketserver.html#socketserver.BaseRequestHandler.handle "socketserver.BaseRequestHandler.handle") method, and can override any of the other methods. A new instance of the subclass is created for each request.