Title: UTF-8 Encoding in Python OS Module
URL: https://docs.python.org/3/library/os.html
Summary: This section discusses how UTF-8 mode affects standard stream settings and the behavior of various APIs in Python's OS module. It explains that command line arguments, environment variables, and filenames are decoded using UTF-8, and that functions like `os.fsdecode()`, `os.fsencode()`, `open()`, and related methods also default to UTF-8 encoding.
---

Note that the standard stream settings in UTF-8 mode can be overridden by [`PYTHONIOENCODING`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONIOENCODING) (just as they can be in the default locale-aware mode).
As a consequence of the changes in those lower level APIs, other higher level APIs also exhibit different default behaviours:
  * Command line arguments, environment variables and filenames are decoded to text using the UTF-8 encoding.
  * [`os.fsdecode()`](https://docs.python.org/3/library/os.html#os.fsdecode "os.fsdecode") and [`os.fsencode()`](https://docs.python.org/3/library/os.html#os.fsencode "os.fsencode") use the UTF-8 encoding.
  * [`open()`](https://docs.python.org/3/library/functions.html#open "open"), [`io.open()`](https://docs.python.org/3/library/io.html#io.open "io.open"), and [`codecs.open()`](https://docs.python.org/3/library/codecs.html#codecs.open "codecs.open") use the UTF-8 encoding by default. However, they still use the strict error handler by default so that attempting to open a binary file in text mode is likely to raise an exception rather than producing nonsense data.


The [Python UTF-8 Mode](https://docs.python.org/3/library/os.html#utf8-mode) is enabled if the LC_CTYPE locale is `C` or `POSIX` at Python startup (see the [`PyConfig_Read()`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig_Read "PyConfig_Read") function).
It can be enabled or disabled using the [`-X utf8`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) command line option and the [`PYTHONUTF8`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONUTF8) environment variable.
If the [`PYTHONUTF8`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONUTF8) environment variable is not set at all, then the interpreter defaults to using the current locale settings, _unless_ the current locale is identified as a legacy ASCII-based locale (as described for [`PYTHONCOERCECLOCALE`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONCOERCECLOCALE)), and locale coercion is either disabled or fails. In such legacy locales, the interpreter will default to enabling UTF-8 mode unless explicitly instructed not to do so.
The Python UTF-8 Mode can only be enabled at the Python startup. Its value can be read from [`sys.flags.utf8_mode`](https://docs.python.org/3/library/sys.html#sys.flags "sys.flags").
See also the [UTF-8 mode on Windows](https://docs.python.org/3/using/windows.html#win-utf8-mode) and the [filesystem encoding and error handler](https://docs.python.org/3/glossary.html#term-filesystem-encoding-and-error-handler).
See also 

[**PEP 686**](https://peps.python.org/pep-0686/)
    
Python 3.15 will make [Python UTF-8 Mode](https://docs.python.org/3/library/os.html#utf8-mode) default.
## Process Parameters[¶](https://docs.python.org/3/library/os.html#process-parameters "Link to this heading")
These functions and data items provide information and operate on the current process and user. 

os.ctermid()[¶](https://docs.python.org/3/library/os.html#os.ctermid "Link to this definition")
    
Return the filename corresponding to the controlling terminal of the process.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI.