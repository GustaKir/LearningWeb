Title: Python Profile Stats Methods
URL: https://docs.python.org/3/library/profile.html
Summary: This section describes methods of the Stats class in Python's profiling library, including 'reverse_order()', which reverses the basic list's ordering, and 'print_stats()', which prints a report based on the last sorting operation.
---

reverse_order()[¶](https://docs.python.org/3/library/profile.html#pstats.Stats.reverse_order "Link to this definition")
    
This method for the [`Stats`](https://docs.python.org/3/library/profile.html#pstats.Stats "pstats.Stats") class reverses the ordering of the basic list within the object. Note that by default ascending vs descending order is properly selected based on the sort key of choice. 

print_stats(_* restrictions_)[¶](https://docs.python.org/3/library/profile.html#pstats.Stats.print_stats "Link to this definition")
    
This method for the [`Stats`](https://docs.python.org/3/library/profile.html#pstats.Stats "pstats.Stats") class prints out a report as described in the [`profile.run()`](https://docs.python.org/3/library/profile.html#profile.run "profile.run") definition.
The order of the printing is based on the last [`sort_stats()`](https://docs.python.org/3/library/profile.html#pstats.Stats.sort_stats "pstats.Stats.sort_stats") operation done on the object (subject to caveats in [`add()`](https://docs.python.org/3/library/profile.html#pstats.Stats.add "pstats.Stats.add") and [`strip_dirs()`](https://docs.python.org/3/library/profile.html#pstats.Stats.strip_dirs "pstats.Stats.strip_dirs")).
The arguments provided (if any) can be used to limit the list down to the significant entries. Initially, the list is taken to be the complete set of profiled functions. Each restriction is either an integer (to select a count of lines), or a decimal fraction between 0.0 and 1.0 inclusive (to select a percentage of lines), or a string that will interpreted as a regular expression (to pattern match the standard name that is printed). If several restrictions are provided, then they are applied sequentially. For example:
```
print_stats(.1, 'foo:')

```

would first limit the printing to first 10% of list, and then only print functions that were part of filename `.*foo:`. In contrast, the command:
```
print_stats('foo:', .1)