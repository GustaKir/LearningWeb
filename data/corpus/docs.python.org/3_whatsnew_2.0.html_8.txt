Title: New Exceptions and Built-in Function Changes in Python 2.0
URL: https://docs.python.org/3/whatsnew/2.0.html
Summary: Python 2.0 introduces two new exceptions, TabError and IndentationError, both of which are subclasses of SyntaxError for handling improper indentation in code. Additionally, a new built-in function, zip(), is added, returning a list of tuples from the corresponding elements of input sequences.
---

```

Two new exceptions, [`TabError`](https://docs.python.org/3/library/exceptions.html#TabError "TabError") and [`IndentationError`](https://docs.python.org/3/library/exceptions.html#IndentationError "IndentationError"), have been introduced. They’re both subclasses of [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError"), and are raised when Python code is found to be improperly indented.
### Changes to Built-in Functions[¶](https://docs.python.org/3/whatsnew/2.0.html#changes-to-built-in-functions "Link to this heading")
A new built-in, `zip(seq1, seq2, ...)`, has been added. [`zip()`](https://docs.python.org/3/library/functions.html#zip "zip") returns a list of tuples where each tuple contains the i-th element from each of the argument sequences. The difference between [`zip()`](https://docs.python.org/3/library/functions.html#zip "zip") and `map(None, seq1, seq2)` is that [`map()`](https://docs.python.org/3/library/functions.html#map "map") pads the sequences with `None` if the sequences aren’t all of the same length, while [`zip()`](https://docs.python.org/3/library/functions.html#zip "zip") truncates the returned list to the length of the shortest argument sequence.
The [`int()`](https://docs.python.org/3/library/functions.html#int "int") and `long()` functions now accept an optional “base” parameter when the first argument is a string. `int('123', 10)` returns 123, while `int('123', 16)` returns 291. `int(123, 16)` raises a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") exception with the message “can’t convert non-string with explicit base”.
A new variable holding more detailed version information has been added to the [`sys`](https://docs.python.org/3/library/sys.html#module-sys "sys: Access system-specific parameters and functions.") module. `sys.version_info` is a tuple `(major, minor, micro, level, serial)` For example, in a hypothetical 2.0.1beta1, `sys.version_info` would be `(2, 0, 1, 'beta', 1)`. _level_ is a string such as `"alpha"`, `"beta"`, or `"final"` for a final release.
Dictionaries have an odd new method, `setdefault(key, default)`, which behaves similarly to the existing `get()` method. However, if the key is missing, `setdefault()` both returns the value of _default_ as `get()` would do, and also inserts it into the dictionary as the value for _key_. Thus, the following lines of code:
```
if dict.has_key( key ): return dict[key]
else:
  dict[key] = []
  return dict[key]