Title: os.startfile Function Documentation
URL: https://docs.python.org/3/library/os.html
Summary: The os.startfile function starts a file with its associated application, mimicking a double-click action in Windows. It can take an optional operation parameter to specify actions like 'open' or 'edit', and it allows passing arguments to the application. The function also supports overriding the default working directory.
---

os.startfile(_path_[, _operation_][, _arguments_][, _cwd_][, _show_cmd_])[¶](https://docs.python.org/3/library/os.html#os.startfile "Link to this definition")
    
Start a file with its associated application.
When _operation_ is not specified, this acts like double-clicking the file in Windows Explorer, or giving the file name as an argument to the **start** command from the interactive command shell: the file is opened with whatever application (if any) its extension is associated.
When another _operation_ is given, it must be a “command verb” that specifies what should be done with the file. Common verbs documented by Microsoft are `'open'`, `'print'` and `'edit'` (to be used on files) as well as `'explore'` and `'find'` (to be used on directories).
When launching an application, specify _arguments_ to be passed as a single string. This argument may have no effect when using this function to launch a document.
The default working directory is inherited, but may be overridden by the _cwd_ argument. This should be an absolute path. A relative _path_ will be resolved against this argument.
Use _show_cmd_ to override the default window style. Whether this has any effect will depend on the application being launched. Values are integers as supported by the Win32 `ShellExecute()` function.
[`startfile()`](https://docs.python.org/3/library/os.html#os.startfile "os.startfile") returns as soon as the associated application is launched. There is no option to wait for the application to close, and no way to retrieve the application’s exit status. The _path_ parameter is relative to the current directory or _cwd_. If you want to use an absolute path, make sure the first character is not a slash (`'/'`) Use [`pathlib`](https://docs.python.org/3/library/pathlib.html#module-pathlib "pathlib: Object-oriented filesystem paths") or the [`os.path.normpath()`](https://docs.python.org/3/library/os.path.html#os.path.normpath "os.path.normpath") function to ensure that paths are properly encoded for Win32.
To reduce interpreter startup overhead, the Win32 `ShellExecute()` function is not resolved until this function is first called. If the function cannot be resolved, [`NotImplementedError`](https://docs.python.org/3/library/exceptions.html#NotImplementedError "NotImplementedError") will be raised.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.startfile` with arguments `path`, `operation`.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.startfile/2` with arguments `path`, `operation`, `arguments`, `cwd`, `show_cmd`.
[Availability](https://docs.python.org/3/library/intro.html#availability): Windows.
Changed in version 3.10: Added the _arguments_ , _cwd_ and _show_cmd_ arguments, and the `os.startfile/2` audit event.