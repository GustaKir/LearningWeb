Title: TestCase.run Method in unittest
URL: https://docs.python.org/3/library/unittest.html
Summary: The run method executes a test and collects results into a TestResult object, which can be provided as an argument or created temporarily if omitted. For more details, refer to Class and Module Fixtures.
---

```

See [Class and Module Fixtures](https://docs.python.org/3/library/unittest.html#class-and-module-fixtures) for more details.
Added in version 3.2. 

run(_result =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.run "Link to this definition")
    
Run the test, collecting the result into the [`TestResult`](https://docs.python.org/3/library/unittest.html#unittest.TestResult "unittest.TestResult") object passed as _result_. If _result_ is omitted or `None`, a temporary result object is created (by calling the [`defaultTestResult()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.defaultTestResult "unittest.TestCase.defaultTestResult") method) and used. The result object is returned to [`run()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.run "unittest.TestCase.run")’s caller.
The same effect may be had by simply calling the [`TestCase`](https://docs.python.org/3/library/unittest.html#unittest.TestCase "unittest.TestCase") instance.
Changed in version 3.3: Previous versions of `run` did not return the result. Neither did calling an instance. 

skipTest(_reason_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.skipTest "Link to this definition")
    
Calling this during a test method or [`setUp()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.setUp "unittest.TestCase.setUp") skips the current test. See [Skipping tests and expected failures](https://docs.python.org/3/library/unittest.html#unittest-skipping) for more information.
Added in version 3.1. 

subTest(_msg =None_, _** params_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.subTest "Link to this definition")
    
Return a context manager which executes the enclosed code block as a subtest. _msg_ and _params_ are optional, arbitrary values which are displayed whenever a subtest fails, allowing you to identify them clearly.
A test case can contain any number of subtest declarations, and they can be arbitrarily nested.
See [Distinguishing test iterations using subtests](https://docs.python.org/3/library/unittest.html#subtests) for more information.
Added in version 3.4.