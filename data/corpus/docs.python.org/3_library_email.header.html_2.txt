Title: Using the Header Class for Non-ASCII Email Subjects
URL: https://docs.python.org/3/library/email.header.html
Summary: This section explains how to create a Subject field with non-ASCII characters using the Header class in Python's email library. It describes the process of encoding the character set and ensures proper RFC 2047 encoding for MIME-compliant mail readers.
---

```

Notice here how we wanted the _Subject_ field to contain a non-ASCII character? We did this by creating a [`Header`](https://docs.python.org/3/library/email.header.html#email.header.Header "email.header.Header") instance and passing in the character set that the byte string was encoded in. When the subsequent [`Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "email.message.Message") instance was flattened, the _Subject_ field was properly [**RFC 2047**](https://datatracker.ietf.org/doc/html/rfc2047.html) encoded. MIME-aware mail readers would show this header using the embedded ISO-8859-1 character.
Here is the [`Header`](https://docs.python.org/3/library/email.header.html#email.header.Header "email.header.Header") class description: 

_class_ email.header.Header(_s =None_, _charset =None_, _maxlinelen =None_, _header_name =None_, _continuation_ws =' '_, _errors ='strict'_)[¶](https://docs.python.org/3/library/email.header.html#email.header.Header "Link to this definition")
    
Create a MIME-compliant header that can contain strings in different character sets.
Optional _s_ is the initial header value. If `None` (the default), the initial header value is not set. You can later append to the header with [`append()`](https://docs.python.org/3/library/email.header.html#email.header.Header.append "email.header.Header.append") method calls. _s_ may be an instance of [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") or [`str`](https://docs.python.org/3/library/stdtypes.html#str "str"), but see the [`append()`](https://docs.python.org/3/library/email.header.html#email.header.Header.append "email.header.Header.append") documentation for semantics.
Optional _charset_ serves two purposes: it has the same meaning as the _charset_ argument to the [`append()`](https://docs.python.org/3/library/email.header.html#email.header.Header.append "email.header.Header.append") method. It also sets the default character set for all subsequent [`append()`](https://docs.python.org/3/library/email.header.html#email.header.Header.append "email.header.Header.append") calls that omit the _charset_ argument. If _charset_ is not provided in the constructor (the default), the `us-ascii` character set is used both as _s_ ’s initial charset and as the default for subsequent [`append()`](https://docs.python.org/3/library/email.header.html#email.header.Header.append "email.header.Header.append") calls.
The maximum line length can be specified explicitly via _maxlinelen_. For splitting the first line to a shorter value (to account for the field header which isn’t included in _s_ , e.g. _Subject_) pass in the name of the field in _header_name_. The default _maxlinelen_ is 78, and the default value for _header_name_ is `None`, meaning it is not taken into account for the first line of a long, split header.
Optional _continuation_ws_ must be [**RFC 2822**](https://datatracker.ietf.org/doc/html/rfc2822.html)-compliant folding whitespace, and is usually either a space or a hard tab character. This character will be prepended to continuation lines. _continuation_ws_ defaults to a single space character.
Optional _errors_ is passed straight through to the [`append()`](https://docs.python.org/3/library/email.header.html#email.header.Header.append "email.header.Header.append") method.