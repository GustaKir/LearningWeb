Title: Py_MOD_GIL_NOT_USED in Python C API
URL: https://docs.python.org/3/c-api/module.html
Summary: The Py_MOD_GIL_NOT_USED slot indicates that a module can execute without an active GIL. This is relevant only for builds configured with --disable-gil. If unspecified, modules default to Py_MOD_GIL_USED. Multiple Py_mod_gil slots are not allowed in one module definition. Introduced in version 3.13, further details can be found in PEP 489.
---

Py_MOD_GIL_NOT_USED[¶](https://docs.python.org/3/c-api/module.html#c.Py_MOD_GIL_NOT_USED "Link to this definition")
    
The module is safe to run without an active GIL.
This slot is ignored by Python builds not configured with [`--disable-gil`](https://docs.python.org/3/using/configure.html#cmdoption-disable-gil). Otherwise, it determines whether or not importing this module will cause the GIL to be automatically enabled. See [Free-threaded CPython](https://docs.python.org/3/whatsnew/3.13.html#whatsnew313-free-threaded-cpython) for more detail.
Multiple `Py_mod_gil` slots may not be specified in one module definition.
If `Py_mod_gil` is not specified, the import machinery defaults to `Py_MOD_GIL_USED`.
Added in version 3.13.
See [**PEP 489**](https://peps.python.org/pep-0489/) for more details on multi-phase initialization.
### Low-level module creation functions[¶](https://docs.python.org/3/c-api/module.html#low-level-module-creation-functions "Link to this heading")
The following functions are called under the hood when using multi-phase initialization. They can be used directly, for example when creating module objects dynamically. Note that both `PyModule_FromDefAndSpec` and `PyModule_ExecDef` must be called to fully initialize a module. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyModule_FromDefAndSpec([PyModuleDef](https://docs.python.org/3/c-api/module.html#c.PyModuleDef "PyModuleDef")*def, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*spec)[¶](https://docs.python.org/3/c-api/module.html#c.PyModule_FromDefAndSpec "Link to this definition")
    _Return value: New reference._
Create a new module object, given the definition in _def_ and the ModuleSpec _spec_. This behaves like [`PyModule_FromDefAndSpec2()`](https://docs.python.org/3/c-api/module.html#c.PyModule_FromDefAndSpec2 "PyModule_FromDefAndSpec2") with _module_api_version_ set to `PYTHON_API_VERSION`.
Added in version 3.5. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyModule_FromDefAndSpec2([PyModuleDef](https://docs.python.org/3/c-api/module.html#c.PyModuleDef "PyModuleDef")*def, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*spec, intmodule_api_version)[¶](https://docs.python.org/3/c-api/module.html#c.PyModule_FromDefAndSpec2 "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.7._
Create a new module object, given the definition in _def_ and the ModuleSpec _spec_ , assuming the API version _module_api_version_. If that version does not match the version of the running interpreter, a [`RuntimeWarning`](https://docs.python.org/3/library/exceptions.html#RuntimeWarning "RuntimeWarning") is emitted.
Return `NULL` with an exception set on error.
Note
Most uses of this function should be using [`PyModule_FromDefAndSpec()`](https://docs.python.org/3/c-api/module.html#c.PyModule_FromDefAndSpec "PyModule_FromDefAndSpec") instead; only use this if you are sure you need it.
Added in version 3.5. 

intPyModule_ExecDef([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*module, [PyModuleDef](https://docs.python.org/3/c-api/module.html#c.PyModuleDef "PyModuleDef")*def)[¶](https://docs.python.org/3/c-api/module.html#c.PyModule_ExecDef "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.7._
Process any execution slots ([`Py_mod_exec`](https://docs.python.org/3/c-api/module.html#c.Py_mod_exec "Py_mod_exec")) given in _def_.
Added in version 3.5. 

intPyModule_SetDocString([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*module, constchar*docstring)[¶](https://docs.python.org/3/c-api/module.html#c.PyModule_SetDocString "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.7._
Set the docstring for _module_ to _docstring_. This function is called automatically when creating a module from `PyModuleDef`, using either `PyModule_Create` or `PyModule_FromDefAndSpec`.
Added in version 3.5.