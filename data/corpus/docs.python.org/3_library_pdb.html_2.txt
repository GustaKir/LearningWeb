Title: Python Debugger (pdb) Functionality in Version 3.13
URL: https://docs.python.org/3/library/pdb.html
Summary: In version 3.13, the pdb module's implementation includes PEP 667, allowing immediate effect of name assignments on the active scope within optimized scopes. The module provides functions like pdb.run, enabling execution of statements under debugger control with options to set breakpoints and step through code.
---

```

Changed in version 3.13: The implementation of [**PEP 667**](https://peps.python.org/pep-0667/) means that name assignments made via `pdb` will immediately affect the active scope, even when running inside an [optimized scope](https://docs.python.org/3/glossary.html#term-optimized-scope).
The module defines the following functions; each enters the debugger in a slightly different way: 

pdb.run(_statement_ , _globals =None_, _locals =None_)[¶](https://docs.python.org/3/library/pdb.html#pdb.run "Link to this definition")
    
Execute the _statement_ (given as a string or a code object) under debugger control. The debugger prompt appears before any code is executed; you can set breakpoints and type [`continue`](https://docs.python.org/3/library/pdb.html#pdbcommand-continue), or you can step through the statement using [`step`](https://docs.python.org/3/library/pdb.html#pdbcommand-step) or [`next`](https://docs.python.org/3/library/pdb.html#pdbcommand-next) (all these commands are explained below). The optional _globals_ and _locals_ arguments specify the environment in which the code is executed; by default the dictionary of the module [`__main__`](https://docs.python.org/3/library/__main__.html#module-__main__ "__main__: The environment where top-level code is run. Covers command-line interfaces, import-time behavior, and ``__name__ == '__main__'``.") is used. (See the explanation of the built-in [`exec()`](https://docs.python.org/3/library/functions.html#exec "exec") or [`eval()`](https://docs.python.org/3/library/functions.html#eval "eval") functions.) 

pdb.runeval(_expression_ , _globals =None_, _locals =None_)[¶](https://docs.python.org/3/library/pdb.html#pdb.runeval "Link to this definition")
    
Evaluate the _expression_ (given as a string or a code object) under debugger control. When [`runeval()`](https://docs.python.org/3/library/pdb.html#pdb.runeval "pdb.runeval") returns, it returns the value of the _expression_. Otherwise this function is similar to [`run()`](https://docs.python.org/3/library/pdb.html#pdb.run "pdb.run"). 

pdb.runcall(_function_ , _* args_, _** kwds_)[¶](https://docs.python.org/3/library/pdb.html#pdb.runcall "Link to this definition")
    
Call the _function_ (a function or method object, not a string) with the given arguments. When [`runcall()`](https://docs.python.org/3/library/pdb.html#pdb.runcall "pdb.runcall") returns, it returns whatever the function call returned. The debugger prompt appears as soon as the function is entered. 

pdb.set_trace(_*_ , _header =None_)[¶](https://docs.python.org/3/library/pdb.html#pdb.set_trace "Link to this definition")
    
Enter the debugger at the calling stack frame. This is useful to hard-code a breakpoint at a given point in a program, even if the code is not otherwise being debugged (e.g. when an assertion fails). If given, _header_ is printed to the console just before debugging begins.
Changed in version 3.7: The keyword-only argument _header_.
Changed in version 3.13: [`set_trace()`](https://docs.python.org/3/library/pdb.html#pdb.set_trace "pdb.set_trace") will enter the debugger immediately, rather than on the next line of code to be executed. 

pdb.post_mortem(_t =None_)[¶](https://docs.python.org/3/library/pdb.html#pdb.post_mortem "Link to this definition")
    
Enter post-mortem debugging of the given exception or [traceback object](https://docs.python.org/3/reference/datamodel.html#traceback-objects). If no value is given, it uses the exception that is currently being handled, or raises `ValueError` if there isn’t one.
Changed in version 3.13: Support for exception objects was added. 

pdb.pm()[¶](https://docs.python.org/3/library/pdb.html#pdb.pm "Link to this definition")
    
Enter post-mortem debugging of the exception found in [`sys.last_exc`](https://docs.python.org/3/library/sys.html#sys.last_exc "sys.last_exc").
The `run*` functions and [`set_trace()`](https://docs.python.org/3/library/pdb.html#pdb.set_trace "pdb.set_trace") are aliases for instantiating the [`Pdb`](https://docs.python.org/3/library/pdb.html#pdb.Pdb "pdb.Pdb") class and calling the method of the same name. If you want to access further features, you have to do this yourself: