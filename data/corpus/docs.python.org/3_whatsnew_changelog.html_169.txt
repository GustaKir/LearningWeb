Title: Python 3.12.0 beta 1 Release Notes
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This document outlines the release notes for Python 3.12.0 beta 1, dated May 22, 2023, highlighting various security enhancements, including fixes for directory traversal vulnerabilities and an upgrade to the SHA3 implementation in hashlib.
---

## Python 3.12.0 beta 1[¶](https://docs.python.org/3/whatsnew/changelog.html#python-3-12-0-beta-1 "Link to this heading")
_Release date: 2023-05-22_
### Security[¶](https://docs.python.org/3/whatsnew/changelog.html#id141 "Link to this heading")
  * [gh-99889](https://github.com/python/cpython/issues/99889): Fixed a security in flaw in `uu.decode()` that could allow for directory traversal based on the input if no `out_file` was specified.
  * [gh-104049](https://github.com/python/cpython/issues/104049): Do not expose the local on-disk location in directory indexes produced by `http.client.SimpleHTTPRequestHandler`.
  * [gh-99108](https://github.com/python/cpython/issues/99108): Upgrade built-in [`hashlib`](https://docs.python.org/3/library/hashlib.html#module-hashlib "hashlib: Secure hash and message digest algorithms.") SHA3 implementation to a verified implementation from the `HACL*` project. Used when OpenSSL is not present or lacks SHA3.
  * [gh-102153](https://github.com/python/cpython/issues/102153): [`urllib.parse.urlsplit()`](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlsplit "urllib.parse.urlsplit") now strips leading C0 control and space characters following the specification for URLs defined by WHATWG in response to [**CVE 2023-24329**](https://www.cve.org/CVERecord?id=CVE-2023-24329). Patch by Illia Volochii.


### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id142 "Link to this heading")
  * [gh-102856](https://github.com/python/cpython/issues/102856): Implement PEP 701 changes in the [`tokenize`](https://docs.python.org/3/library/tokenize.html#module-tokenize "tokenize: Lexical scanner for Python source code.") module. Patch by Marta Gómez Macías and Pablo Galindo Salgado
  * [gh-104615](https://github.com/python/cpython/issues/104615): Fix wrong ordering of assignments in code like `a, a = x, y`. Contributed by Carl Meyer.
  * [gh-104572](https://github.com/python/cpython/issues/104572): Improve syntax error message for invalid constructs in [**PEP 695**](https://peps.python.org/pep-0695/) contexts and in annotations when `from __future__ import annotations` is active.
  * [gh-104482](https://github.com/python/cpython/issues/104482): Fix three error handling bugs in ast.c’s validation of pattern matching statements.
  * [gh-102818](https://github.com/python/cpython/issues/102818): Do not add a frame to the traceback in the `sys.setprofile` and `sys.settrace` trampoline functions. This ensures that frames are not duplicated if an exception is raised in the callback function, and ensures that frames are not omitted if a C callback is used and that does not add the frame.
  * [gh-104405](https://github.com/python/cpython/issues/104405): Fix an issue where some [bytecode](https://docs.python.org/3/glossary.html#term-bytecode) instructions could ignore [**PEP 523**](https://peps.python.org/pep-0523/) when “inlining” calls.
  * [gh-103082](https://github.com/python/cpython/issues/103082): Change behavior of `sys.monitoring.events.LINE` events in `sys.monitoring`: Line events now occur when a new line is reached dynamically, instead of using a static approximation, as before. This makes the behavior very similar to that of “line” events in `sys.settrace`. This should ease porting of tools from 3.11 to 3.12.
  * [gh-104263](https://github.com/python/cpython/issues/104263): Fix `float("nan")` to produce a quiet NaN on platforms (like MIPS) where the meaning of the signalling / quiet bit is inverted from its usual meaning. Also introduce a new macro `Py_INFINITY` matching C99’s `INFINITY`, and refactor internals to rely on C99’s `NAN` and `INFINITY` macros instead of hard-coding bit patterns for infinities and NaNs. Thanks Sebastian Berg.
  * [gh-99113](https://github.com/python/cpython/issues/99113): Multi-phase init extension modules may now indicate that they support running in subinterpreters that have their own GIL. This is done by using `Py_MOD_PER_INTERPRETER_GIL_SUPPORTED` as the value for the `Py_mod_multiple_interpreters` module def slot. Otherwise the module, by default, cannot be imported in such subinterpreters. (This does not affect the main interpreter or subinterpreters that do not have their own GIL.) In addition to the isolation that multi-phase init already normally requires, support for per-interpreter GIL involves one additional constraint: thread-safety. If the module has external (linked) dependencies and those libraries have any state that isn’t thread-safe then the module must do the additional work to add thread-safety. This should be an uncommon case.
  * [gh-99113](https://github.com/python/cpython/issues/99113): The GIL is now (optionally) per-interpreter. This is the fundamental change for PEP 684. This is all made possible by virtue of the isolated state of each interpreter in the process. The behavior of the main interpreter remains unchanged. Likewise, interpreters created using `Py_NewInterpreter()` are not affected. T