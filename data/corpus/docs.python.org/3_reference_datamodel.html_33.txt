Title: __slots__ in Python
URL: https://docs.python.org/3/reference/datamodel.html
Summary: __slots__ is a class variable that can be defined as a string or iterable of variable names to reserve space and prevent the creation of __dict__ and __weakref__ for instances. It restricts attribute assignment only to the declared variables, and inheritance from classes without __slots__ still allows access to __dict__.
---

object.__slots__[¶](https://docs.python.org/3/reference/datamodel.html#object.__slots__ "Link to this definition")
    
This class variable can be assigned a string, iterable, or sequence of strings with variable names used by instances. ___slots___ reserves space for the declared variables and prevents the automatic creation of [`__dict__`](https://docs.python.org/3/reference/datamodel.html#object.__dict__ "object.__dict__") and ___weakref___ for each instance.
Notes on using ___slots___ :
  * When inheriting from a class without ___slots___ , the [`__dict__`](https://docs.python.org/3/reference/datamodel.html#object.__dict__ "object.__dict__") and ___weakref___ attribute of the instances will always be accessible.
  * Without a [`__dict__`](https://docs.python.org/3/reference/datamodel.html#object.__dict__ "object.__dict__") variable, instances cannot be assigned new variables not listed in the ___slots___ definition. Attempts to assign to an unlisted variable name raises [`AttributeError`](https://docs.python.org/3/library/exceptions.html#AttributeError "AttributeError"). If dynamic assignment of new variables is desired, then add `'__dict__'` to the sequence of strings in the ___slots___ declaration.
  * Without a ___weakref___ variable for each instance, classes defining ___slots___ do not support [`weak references`](https://docs.python.org/3/library/weakref.html#module-weakref "weakref: Support for weak references and weak dictionaries.") to its instances. If weak reference support is needed, then add `'__weakref__'` to the sequence of strings in the ___slots___ declaration.
  * ___slots___ are implemented at the class level by creating [descriptors](https://docs.python.org/3/reference/datamodel.html#descriptors) for each variable name. As a result, class attributes cannot be used to set default values for instance variables defined by ___slots___ ; otherwise, the class attribute would overwrite the descriptor assignment.
  * The action of a ___slots___ declaration is not limited to the class where it is defined. ___slots___ declared in parents are available in child classes. However, instances of a child subclass will get a [`__dict__`](https://docs.python.org/3/reference/datamodel.html#object.__dict__ "object.__dict__") and ___weakref___ unless the subclass also defines ___slots___ (which should only contain names of any _additional_ slots).
  * If a class defines a slot also defined in a base class, the instance variable defined by the base class slot is inaccessible (except by retrieving its descriptor directly from the base class). This renders the meaning of the program undefined. In the future, a check may be added to prevent this.
  * [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") will be raised if nonempty ___slots___ are defined for a class derived from a [`"variable-length" built-in type`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_itemsize "PyTypeObject.tp_itemsize") such as [`int`](https://docs.python.org/3/library/functions.html#int "int"), [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes"), and [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple").
  * Any non-string [iterable](https://docs.python.org/3/glossary.html#term-iterable) may be assigned to ___slots___.
  * If a [`dictionary`](https://docs.python.org/3/library/stdtypes.html#dict "dict") is used to assign ___slots___ , the dictionary keys will be used as the slot names. The values of the dictionary can be used to provide per-attribute docstrings that will be recognised by [`inspect.getdoc()`](https://docs.python.org/3/library/inspect.html#inspect.getdoc "inspect.getdoc") and displayed in the output of [`help()`](https://docs.python.org/3/library/functions.html#help "help").
  * [`__class__`](https://docs.python.org/3/reference/datamodel.html#object.__class__ "object.__class__") assignment works only if both classes have the same ___slots___.
  * [Multiple inheritance](https://docs.python.org/3/tutorial/classes.html#tut-multiple) with multiple slotted parent classes can be used, but only one parent is allowed to have attributes created by slots (the other bases must have empty slot layouts) - violations raise [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError").
  * If an [iterator](https://docs.python.org/3/glossary.html#term-iterator) is used for ___slots___ then a [descriptor](https://docs.python.org/3/glossary.html#term-descriptor) is created for each of the iterator’s values. However, the ___slots___ attribute will be an empty iterator.