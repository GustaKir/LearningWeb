Title: Local Timezone Class in Python's datetime Module
URL: https://docs.python.org/3/library/datetime.html
Summary: This chunk of code defines a class, LocalTimezone, which manages local time settings in Python. It captures the platform's local time, accounting for daylight saving time (DST) changes. The class includes methods to convert UTC time to local time and to determine the offset based on whether the date falls under DST or standard time.
---

```
fromdatetimeimport tzinfo, timedelta, datetime
ZERO = timedelta(0)
HOUR = timedelta(hours=1)
SECOND = timedelta(seconds=1)
# A class capturing the platform's idea of local time.
# (May result in wrong values on historical times in
# timezones where UTC offset and/or the DST rules had
# changed in the past.)
importtimeas_time
STDOFFSET = timedelta(seconds = -_time.timezone)
if _time.daylight:
  DSTOFFSET = timedelta(seconds = -_time.altzone)
else:
  DSTOFFSET = STDOFFSET
DSTDIFF = DSTOFFSET - STDOFFSET
classLocalTimezone(tzinfo):
  deffromutc(self, dt):
    assert dt.tzinfo is self
    stamp = (dt - datetime(1970, 1, 1, tzinfo=self)) // SECOND
    args = _time.localtime(stamp)[:6]
    dst_diff = DSTDIFF // SECOND
    # Detect fold
    fold = (args == _time.localtime(stamp - dst_diff))
    return datetime(*args, microsecond=dt.microsecond,
            tzinfo=self, fold=fold)
  defutcoffset(self, dt):
    if self._isdst(dt):
      return DSTOFFSET
    else:
      return STDOFFSET
  defdst(self, dt):
    if self._isdst(dt):
      return DSTDIFF
    else:
      return ZERO
  deftzname(self, dt):
    return _time.tzname[self._isdst(dt)]
  def_isdst(self, dt):
    tt = (dt.year, dt.month, dt.day,
       dt.hour, dt.minute, dt.second,
       dt.weekday(), 0, 0)
    stamp = _time.mktime(tt)
    tt = _time.localtime(stamp)
    return tt.tm_isdst > 0
Local = LocalTimezone()

# A complete implementation of current DST rules for major US time zones.
deffirst_sunday_on_or_after(dt):
  days_to_go = 6 - dt.weekday()
  if days_to_go:
    dt += timedelta(days_to_go)
  return dt

# US DST Rules
#
# This is a simplified (i.e., wrong for a few cases) set of rules for US
# DST start and end times. For a complete and up-to-date set of DST rules
# and timezone definitions, visit the Olson Database (or try pytz):
# http://www.twinsun.com/tz/tz-link.htm
# https://sourceforge.net/projects/pytz/ (might not be up-to-date)
#
# In the US, since 2007, DST starts at 2am (standard time) on the second
# Sunday in March, which is the first Sunday on or after Mar 8.
DSTSTART_2007 = datetime(1, 3, 8, 2)
# and ends at 2am (DST time) on the first Sunday of Nov.
DSTEND_2007 = datetime(1, 11, 1, 2)
# From 1987 to 2006, DST used to start at 2am (standard time) on the first
# Sunday in April and to end at 2am (DST time) on the last
# Sunday of October, which is the first Sunday on or after Oct 25.
DSTSTART_1987_2006 = datetime(1, 4, 1, 2)
DSTEND_1987_2006 = datetime(1, 10, 25, 2)
# From 1967 to 1986, DST used to start at 2am (standard time) on the last
# Sunday in April (the one on or after April 24) and to end at 2am (DST time)
# on the last Sunday of October, which is the first Sunday
# on or after Oct 25.
DSTSTART_1967_1986 = datetime(1, 4, 24, 2)
DSTEND_1967_1986 = DSTEND_1987_2006
defus_dst_range(year):
  # Find start and end times for US DST. For years before 1967, return
  # start = end for no DST.
  if 2006 < year:
    dststart, dstend = DSTSTART_2007, DSTEND_2007
  elif 1986 < year < 2007:
    dststart, dstend = DSTSTART_1987_2006, DSTEND_1987_2006
  elif 1966 < year < 1987:
    dststart, dstend = DSTSTART_1967_1986, DSTEND_1967_1986
  else:
    return (datetime(year, 1, 1), ) * 2
  start = first_sunday_on_or_after(dststart.replace(year=year))
  end = first_sunday_on_or_after(dstend.replace(year=year))
  return start, end