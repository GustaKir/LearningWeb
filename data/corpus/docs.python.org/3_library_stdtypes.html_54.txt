Title: Type Annotations and Subscripted Types in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This section discusses the use of type annotations in Python, particularly with collections like sets, where annotations such as 'set[bytes]' indicate that all elements are of type 'bytes'. It also explains the role of '__class_getitem__()' for classes that are not containers, highlighting how subscription arguments can indicate return types for methods, exemplified by the use of regular expressions with 'str' and 'bytes' data types.
---

ssions.html#subscriptions) of the class may indicate the type(s) of the elements an object contains. For example, `set[bytes]` can be used in type annotations to signify a [`set`](https://docs.python.org/3/library/stdtypes.html#set "set") in which all the elements are of type [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes").
For a class which defines [`__class_getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__class_getitem__ "object.__class_getitem__") but is not a container, the argument(s) supplied to a subscription of the class will often indicate the return type(s) of one or more methods defined on an object. For example, [`regular expressions`](https://docs.python.org/3/library/re.html#module-re "re: Regular expression operations.") can be used on both the [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") data type and the [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") data type:
  * If `x = re.search('foo', 'foo')`, `x` will be a [re.Match](https://docs.python.org/3/library/re.html#match-objects) object where the return values of `x.group(0)` and `x[0]` will both be of type [`str`](https://docs.python.org/3/library/stdtypes.html#str "str"). We can represent this kind of object in type annotations with the `GenericAlias` `re.Match[str]`.
  * If `y = re.search(b'bar', b'bar')`, (note the `b` for [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes")), `y` will also be an instance of `re.Match`, but the return values of `y.group(0)` and `y[0]` will both be of type [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes"). In type annotations, we would represent this variety of [re.Match](https://docs.python.org/3/library/re.html#match-objects) objects with `re.Match[bytes]`.


`GenericAlias` objects are instances of the class [`types.GenericAlias`](https://docs.python.org/3/library/types.html#types.GenericAlias "types.GenericAlias"), which can also be used to create `GenericAlias` objects directly. 

T[X, Y, ...]
    
Creates a `GenericAlias` representing a type `T` parameterized by types _X_ , _Y_ , and more depending on the `T` used. For example, a function expecting a [`list`](https://docs.python.org/3/library/stdtypes.html#list "list") containing [`float`](https://docs.python.org/3/library/functions.html#float "float") elements:
```
defaverage(values: list[float]) -> float:
  return sum(values) / len(values)

```

Another example for [mapping](https://docs.python.org/3/glossary.html#term-mapping) objects, using a [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict"), which is a generic type expecting two type parameters representing the key type and the value type. In this example, the function expects a `dict` with keys of type [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") and values of type [`int`](https://docs.python.org/3/library/functions.html#int "int"):
```
defsend_post_request(url: str, body: dict[str, int]) -> None:
  ...

```

The builtin functions [`isinstance()`](https://docs.python.org/3/library/functions.html#isinstance "isinstance") and [`issubclass()`](https://docs.python.org/3/library/functions.html#issubclass "issubclass") do not accept `GenericAlias` types for their second argument:
>>>```
>>> isinstance([1, 2], list[str])
Traceback (most recent call last):
 File "<stdin>", line 1, in <module>
TypeError: isinstance() argument 2 cannot be a parameterized generic

```

The Python runtime does not enforce [type annotations](https://docs.python.org/3/glossary.html#term-annotation). This extends to generic types and their type parameters. When creating a container object from a `GenericAlias`, the elements in the container are not checked against their type. For example, the following code is discouraged, but will run without errors:
>>>```
>>> t = list[str]
>>> t([1, 2, 3])
[1, 2, 3]

```

Furthermore, parameterized generics erase type parameters during object creation:
>>>```
>>> t = list[str]
>>> type(t)
<class 'types.GenericAlias'>
>>> l = t()
>>> type(l)
<class 'list'>

```

Calling [`repr()`](https://docs.python.org/3/library/functions.html#repr "repr") or [`str()`](https://docs.python.org/3/library/stdtypes.html#str "str") on a generic shows the parameterized type:
>>>```
>>> repr(list[int])
'list[int]'
>>> str(list[int])
'list[int]'

```

The [`__getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__getitem__ "object.__getitem__") method of generic containers will raise an exception to disallow mistakes like `dict[str][str]`:
>>>```
>>> dict[str][str]
Traceback (most recent call last):
...
TypeError: dict[str] is not a generic class