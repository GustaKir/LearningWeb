Title: Bytes and Mutable Sequences in Python
URL: https://docs.python.org/3/reference/datamodel.html
Summary: This section defines bytes objects as immutable arrays of 8-bit bytes, created using bytes literals or the bytes() constructor, and emphasizes their ability to be decoded to strings. It also introduces mutable sequences, which allow modification after creation through subscription and slicing notations.
---

Bytes
    
A bytes object is an immutable array. The items are 8-bit bytes, represented by integers in the range 0 <= x < 256. Bytes literals (like `b'abc'`) and the built-in [`bytes()`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") constructor can be used to create bytes objects. Also, bytes objects can be decoded to strings via the [`decode()`](https://docs.python.org/3/library/stdtypes.html#bytes.decode "bytes.decode") method.
#### 3.2.5.2. Mutable sequences[¶](https://docs.python.org/3/reference/datamodel.html#mutable-sequences "Link to this heading")
Mutable sequences can be changed after they are created. The subscription and slicing notations can be used as the target of assignment and [`del`](https://docs.python.org/3/reference/simple_stmts.html#del) (delete) statements.
Note
The [`collections`](https://docs.python.org/3/library/collections.html#module-collections "collections: Container datatypes") and [`array`](https://docs.python.org/3/library/array.html#module-array "array: Space efficient arrays of uniformly typed numeric values.") module provide additional examples of mutable sequence types.
There are currently two intrinsic mutable sequence types: 

Lists
    
The items of a list are arbitrary Python objects. Lists are formed by placing a comma-separated list of expressions in square brackets. (Note that there are no special cases needed to form lists of length 0 or 1.) 

Byte Arrays
    
A bytearray object is a mutable array. They are created by the built-in [`bytearray()`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") constructor. Aside from being mutable (and hence unhashable), byte arrays otherwise provide the same interface and functionality as immutable [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") objects.
### 3.2.6. Set types[¶](https://docs.python.org/3/reference/datamodel.html#set-types "Link to this heading")
These represent unordered, finite sets of unique, immutable objects. As such, they cannot be indexed by any subscript. However, they can be iterated over, and the built-in function [`len()`](https://docs.python.org/3/library/functions.html#len "len") returns the number of items in a set. Common uses for sets are fast membership testing, removing duplicates from a sequence, and computing mathematical operations such as intersection, union, difference, and symmetric difference.
For set elements, the same immutability rules apply as for dictionary keys. Note that numeric types obey the normal rules for numeric comparison: if two numbers compare equal (e.g., `1` and `1.0`), only one of them can be contained in a set.
There are currently two intrinsic set types: 

Sets
    
These represent a mutable set. They are created by the built-in [`set()`](https://docs.python.org/3/library/stdtypes.html#set "set") constructor and can be modified afterwards by several methods, such as `add()`.