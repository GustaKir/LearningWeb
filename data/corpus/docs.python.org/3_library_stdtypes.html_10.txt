Title: Iterator Behavior and Containment Testing in Sequences
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This section discusses how iterators work with indices, highlighting that they persist through mutations of the underlying sequence and terminate on encountering an IndexError or StopIteration. It also notes that the `in` and `not in` operations are primarily for containment testing, but some sequences like strings and byte sequences also use them for subsequence testing. Additionally, values of _n_ less than 0 are treated as 0, resulting in an empty sequence of the same type as _s_. 
---

ng an index. That index will continue to march forward (or backward) even if the underlying sequence is mutated. The iterator terminates only when an [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError "IndexError") or a [`StopIteration`](https://docs.python.org/3/library/exceptions.html#StopIteration "StopIteration") is encountered (or when the index drops below zero).
Notes:
  1. While the `in` and `not in` operations are used only for simple containment testing in the general case, some specialised sequences (such as [`str`](https://docs.python.org/3/library/stdtypes.html#str "str"), [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") and [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray")) also use them for subsequence testing:
>>>```
>>> "gg" in "eggs"
True

```

  2. Values of _n_ less than `0` are treated as `0` (which yields an empty sequence of the same type as _s_). Note that items in the sequence _s_ are not copied; they are referenced multiple times. This often haunts new Python programmers; consider:
>>>```
>>> lists = [[]] * 3
>>> lists
[[], [], []]
>>> lists[0].append(3)
>>> lists
[[3], [3], [3]]

```

What has happened is that `[[]]` is a one-element list containing an empty list, so all three elements of `[[]] * 3` are references to this single empty list. Modifying any of the elements of `lists` modifies this single list. You can create a list of different lists this way:
>>>```
>>> lists = [[] for i in range(3)]
>>> lists[0].append(3)
>>> lists[1].append(5)
>>> lists[2].append(7)
>>> lists
[[3], [5], [7]]