Title: python3 reprlib Documentation
URL: https://docs.python.org/3/library/reprlib.html
Summary: The reprlib module provides tools for customizing the output of the repr() function. The aRepr instance allows manipulation of size limits for repr() and debugging. In version 3.12, keyword arguments can be used to set attributes.
---

```

See section [Repr Objects](https://docs.python.org/3/library/reprlib.html#id1) for more information about [`Repr`](https://docs.python.org/3/library/reprlib.html#reprlib.Repr "reprlib.Repr") attributes.
Changed in version 3.12: Allow attributes to be set via keyword arguments. 

reprlib.aRepr[¶](https://docs.python.org/3/library/reprlib.html#reprlib.aRepr "Link to this definition")
    
This is an instance of [`Repr`](https://docs.python.org/3/library/reprlib.html#reprlib.Repr "reprlib.Repr") which is used to provide the [`repr()`](https://docs.python.org/3/library/reprlib.html#reprlib.repr "reprlib.repr") function described below. Changing the attributes of this object will affect the size limits used by [`repr()`](https://docs.python.org/3/library/reprlib.html#reprlib.repr "reprlib.repr") and the Python debugger. 

reprlib.repr(_obj_)[¶](https://docs.python.org/3/library/reprlib.html#reprlib.repr "Link to this definition")
    
This is the [`repr()`](https://docs.python.org/3/library/reprlib.html#reprlib.Repr.repr "reprlib.Repr.repr") method of `aRepr`. It returns a string similar to that returned by the built-in function of the same name, but with limits on most sizes.
In addition to size-limiting tools, the module also provides a decorator for detecting recursive calls to [`__repr__()`](https://docs.python.org/3/reference/datamodel.html#object.__repr__ "object.__repr__") and substituting a placeholder string instead. 

@reprlib.recursive_repr(_fillvalue ='...'_)[¶](https://docs.python.org/3/library/reprlib.html#reprlib.recursive_repr "Link to this definition")
    
Decorator for [`__repr__()`](https://docs.python.org/3/reference/datamodel.html#object.__repr__ "object.__repr__") methods to detect recursive calls within the same thread. If a recursive call is made, the _fillvalue_ is returned, otherwise, the usual `__repr__()` call is made. For example:
>>>```
>>> fromreprlibimport recursive_repr
>>> classMyList(list):
...   @recursive_repr()
...   def__repr__(self):
...     return '<' + '|'.join(map(repr, self)) + '>'
...
>>> m = MyList('abc')
>>> m.append(m)
>>> m.append('x')
>>> print(m)
<'a'|'b'|'c'|...|'x'>