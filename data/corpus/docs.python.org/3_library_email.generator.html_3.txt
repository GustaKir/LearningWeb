Title: BytesGenerator.flatten Method
URL: https://docs.python.org/3/library/email.generator.html
Summary: The flatten method prints the textual representation of a message object to the specified output file, preserving headers and non-ASCII content when certain policy options are set. It ensures that original formatting, including high-bit bytes, is maintained in the output.
---

flatten(_msg_ , _unixfrom =False_, _linesep =None_)[¶](https://docs.python.org/3/library/email.generator.html#email.generator.BytesGenerator.flatten "Link to this definition")
    
Print the textual representation of the message object structure rooted at _msg_ to the output file specified when the [`BytesGenerator`](https://docs.python.org/3/library/email.generator.html#email.generator.BytesGenerator "email.generator.BytesGenerator") instance was created.
If the [`policy`](https://docs.python.org/3/library/email.policy.html#module-email.policy "email.policy: Controlling the parsing and generating of messages") option [`cte_type`](https://docs.python.org/3/library/email.policy.html#email.policy.Policy.cte_type "email.policy.Policy.cte_type") is `8bit` (the default), copy any headers in the original parsed message that have not been modified to the output with any bytes with the high bit set reproduced as in the original, and preserve the non-ASCII _Content-Transfer-Encoding_ of any body parts that have them. If `cte_type` is `7bit`, convert the bytes with the high bit set as needed using an ASCII-compatible _Content-Transfer-Encoding_. That is, transform parts with non-ASCII _Content-Transfer-Encoding_ (_Content-Transfer-Encoding: 8bit_) to an ASCII compatible _Content-Transfer-Encoding_ , and encode RFC-invalid non-ASCII bytes in headers using the MIME `unknown-8bit` character set, thus rendering them RFC-compliant.
If _unixfrom_ is `True`, print the envelope header delimiter used by the Unix mailbox format (see [`mailbox`](https://docs.python.org/3/library/mailbox.html#module-mailbox "mailbox: Manipulate mailboxes in various formats")) before the first of the [**RFC 5322**](https://datatracker.ietf.org/doc/html/rfc5322.html) headers of the root message object. If the root object has no envelope header, craft a standard one. The default is `False`. Note that for subparts, no envelope header is ever printed.
If _linesep_ is not `None`, use it as the separator character between all the lines of the flattened message. If _linesep_ is `None` (the default), use the value specified in the _policy_. 

clone(_fp_)[¶](https://docs.python.org/3/library/email.generator.html#email.generator.BytesGenerator.clone "Link to this definition")
    
Return an independent clone of this [`BytesGenerator`](https://docs.python.org/3/library/email.generator.html#email.generator.BytesGenerator "email.generator.BytesGenerator") instance with the exact same option settings, and _fp_ as the new _outfp_. 

write(_s_)[¶](https://docs.python.org/3/library/email.generator.html#email.generator.BytesGenerator.write "Link to this definition")
    
Encode _s_ using the `ASCII` codec and the `surrogateescape` error handler, and pass it to the _write_ method of the _outfp_ passed to the [`BytesGenerator`](https://docs.python.org/3/library/email.generator.html#email.generator.BytesGenerator "email.generator.BytesGenerator")’s constructor.
As a convenience, [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") provides the methods [`as_bytes()`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.as_bytes "email.message.EmailMessage.as_bytes") and `bytes(aMessage)` (a.k.a. [`__bytes__()`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.__bytes__ "email.message.EmailMessage.__bytes__")), which simplify the generation of a serialized binary representation of a message object. For more detail, see [`email.message`](https://docs.python.org/3/library/email.message.html#module-email.message "email.message: The base class representing email messages.").
Because strings cannot represent binary data, the [`Generator`](https://docs.python.org/3/library/email.generator.html#email.generator.Generator "email.generator.Generator") class must convert any binary data in any message it flattens to an ASCII compatible format, by converting them to an ASCII compatible _Content-Transfer_Encoding_. Using the terminology of the email RFCs, you can think of this as [`Generator`](https://docs.python.org/3/library/email.generator.html#email.generator.Generator "email.generator.Generator") serializing to an I/O stream that is not “8 bit clean”. In other words, most applications will want to be using [`BytesGenerator`](https://docs.python.org/3/library/email.generator.html#email.generator.BytesGenerator "email.generator.BytesGenerator"), and not [`Generator`](https://docs.python.org/3/library/email.generator.html#email.generator.Generator "email.generator.Generator").