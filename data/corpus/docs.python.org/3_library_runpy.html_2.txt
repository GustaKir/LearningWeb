Title: runpy.run_path Function
URL: https://docs.python.org/3/library/runpy.html
Summary: The runpy.run_path function executes code from a specified filesystem location, returning the globals dictionary of the resulting module. It can handle Python source files, compiled bytecode files, or valid sys.path entries with a main module. This function creates a fresh module namespace for the execution.
---

runpy.run_path(_path_name_ , _init_globals =None_, _run_name =None_)[¶](https://docs.python.org/3/library/runpy.html#runpy.run_path "Link to this definition")
    
Execute the code at the named filesystem location and return the resulting module’s globals dictionary. As with a script name supplied to the CPython command line, _file_path_ may refer to a Python source file, a compiled bytecode file or a valid [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path") entry containing a [`__main__`](https://docs.python.org/3/library/__main__.html#module-__main__ "__main__: The environment where top-level code is run. Covers command-line interfaces, import-time behavior, and ``__name__ == '__main__'``.") module (e.g. a zipfile containing a top-level `__main__.py` file).
For a simple script, the specified code is simply executed in a fresh module namespace. For a valid [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path") entry (typically a zipfile or directory), the entry is first added to the beginning of `sys.path`. The function then looks for and executes a [`__main__`](https://docs.python.org/3/library/__main__.html#module-__main__ "__main__: The environment where top-level code is run. Covers command-line interfaces, import-time behavior, and ``__name__ == '__main__'``.") module using the updated path. Note that there is no special protection against invoking an existing `__main__` entry located elsewhere on `sys.path` if there is no such module at the specified location.
The optional dictionary argument _init_globals_ may be used to pre-populate the module’s globals dictionary before the code is executed. _init_globals_ will not be modified. If any of the special global variables below are defined in _init_globals_ , those definitions are overridden by [`run_path()`](https://docs.python.org/3/library/runpy.html#runpy.run_path "runpy.run_path").
The special global variables `__name__`, `__spec__`, `__file__`, `__cached__`, `__loader__` and `__package__` are set in the globals dictionary before the module code is executed. (Note that this is a minimal set of variables - other variables may be set implicitly as an interpreter implementation detail.)
`__name__` is set to _run_name_ if this optional argument is not [`None`](https://docs.python.org/3/library/constants.html#None "None") and to `'<run_path>'` otherwise.
If _file_path_ directly references a script file (whether as source or as precompiled byte code), then `__file__` will be set to _file_path_ , and `__spec__`, `__cached__`, `__loader__` and `__package__` will all be set to [`None`](https://docs.python.org/3/library/constants.html#None "None").
If _file_path_ is a reference to a valid [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path") entry, then `__spec__` will be set appropriately for the imported [`__main__`](https://docs.python.org/3/library/__main__.html#module-__main__ "__main__: The environment where top-level code is run. Covers command-line interfaces, import-time behavior, and ``__name__ == '__main__'``.") module (that is, `__spec__.name` will always be `__main__`). `__file__`, `__cached__`, `__loader__` and `__package__` will be [set as normal](https://docs.python.org/3/reference/datamodel.html#import-mod-attrs) based on the module spec.
A number of alterations are also made to the [`sys`](https://docs.python.org/3/library/sys.html#module-sys "sys: Access system-specific parameters and functions.") module. Firstly, [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path") may be altered as described above. `sys.argv[0]` is updated with the value of _file_path_ and `sys.modules[__name__]` is updated with a temporary module object for the module being executed. All modifications to items in [`sys`](https://docs.python.org/3/library/sys.html#module-sys "sys: Access system-specific parameters and functions.") are reverted before the function returns.
Note that, unlike [`run_module()`](https://docs.python.org/3/library/runpy.html#runpy.run_module "runpy.run_module"), the alterations made to [`sys`](https://docs.python.org/3/library/sys.html#module-sys "sys: Access system-specific parameters and functions.") are not optional in this function as these adjustments are essential to allowing the execution of [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path") entries. As the thread-safety limitations still apply, use of this function in threaded code should be either serialised with the import lock or delegated to a separate process.
See also
[Interface options](https://docs.python.org/3/using/cmdline.html#using-on-interface-options) for equivalent functionality on the command line (`python path/to/script`).
Added in version 3.2.
Changed in version 3.4: Updated to take advantage of the module spec feature added by [**PEP 451**](https://peps.python.org/pep-0451/). This allows `__cached__` to be set correctly in the case where `__main__`