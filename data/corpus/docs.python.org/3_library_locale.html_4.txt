Title: Locale Module Functions in Python
URL: https://docs.python.org/3/library/locale.html
Summary: The `locale.getlocale()` function retrieves the current locale setting for a specified category, returning a language code and encoding. Category options include various `LC_*` values but exclude `LC_ALL`. The code 'C' is a special case, and language code and encoding may return `None` when undetermined. The `locale.getpreferredencoding()` function returns the locale encoding used for text data, which is influenced by user preferences.
---

locale.getlocale(_category =LC_CTYPE_)[¶](https://docs.python.org/3/library/locale.html#locale.getlocale "Link to this definition")
    
Returns the current setting for the given locale category as sequence containing _language code_ , _encoding_. _category_ may be one of the `LC_*` values except [`LC_ALL`](https://docs.python.org/3/library/locale.html#locale.LC_ALL "locale.LC_ALL"). It defaults to [`LC_CTYPE`](https://docs.python.org/3/library/locale.html#locale.LC_CTYPE "locale.LC_CTYPE").
Except for the code `'C'`, the language code corresponds to [**RFC 1766**](https://datatracker.ietf.org/doc/html/rfc1766.html). _language code_ and _encoding_ may be `None` if their values cannot be determined. 

locale.getpreferredencoding(_do_setlocale =True_)[¶](https://docs.python.org/3/library/locale.html#locale.getpreferredencoding "Link to this definition")
    
Return the [locale encoding](https://docs.python.org/3/glossary.html#term-locale-encoding) used for text data, according to user preferences. User preferences are expressed differently on different systems, and might not be available programmatically on some systems, so this function only returns a guess.
On some systems, it is necessary to invoke [`setlocale()`](https://docs.python.org/3/library/locale.html#locale.setlocale "locale.setlocale") to obtain the user preferences, so this function is not thread-safe. If invoking setlocale is not necessary or desired, _do_setlocale_ should be set to `False`.
On Android or if the [Python UTF-8 Mode](https://docs.python.org/3/library/os.html#utf8-mode) is enabled, always return `'utf-8'`, the [locale encoding](https://docs.python.org/3/glossary.html#term-locale-encoding) and the _do_setlocale_ argument are ignored.
The [Python preinitialization](https://docs.python.org/3/c-api/init_config.html#c-preinit) configures the LC_CTYPE locale. See also the [filesystem encoding and error handler](https://docs.python.org/3/glossary.html#term-filesystem-encoding-and-error-handler).
Changed in version 3.7: The function now always returns `"utf-8"` on Android or if the [Python UTF-8 Mode](https://docs.python.org/3/library/os.html#utf8-mode) is enabled. 

locale.getencoding()[¶](https://docs.python.org/3/library/locale.html#locale.getencoding "Link to this definition")
    
Get the current [locale encoding](https://docs.python.org/3/glossary.html#term-locale-encoding):
  * On Android and VxWorks, return `"utf-8"`.
  * On Unix, return the encoding of the current [`LC_CTYPE`](https://docs.python.org/3/library/locale.html#locale.LC_CTYPE "locale.LC_CTYPE") locale. Return `"utf-8"` if `nl_langinfo(CODESET)` returns an empty string: for example, if the current LC_CTYPE locale is not supported.
  * On Windows, return the ANSI code page.


The [Python preinitialization](https://docs.python.org/3/c-api/init_config.html#c-preinit) configures the LC_CTYPE locale. See also the [filesystem encoding and error handler](https://docs.python.org/3/glossary.html#term-filesystem-encoding-and-error-handler).
This function is similar to [`getpreferredencoding(False)`](https://docs.python.org/3/library/locale.html#locale.getpreferredencoding "locale.getpreferredencoding") except this function ignores the [Python UTF-8 Mode](https://docs.python.org/3/library/os.html#utf8-mode).
Added in version 3.11. 

locale.normalize(_localename_)[¶](https://docs.python.org/3/library/locale.html#locale.normalize "Link to this definition")
    
Returns a normalized locale code for the given locale name. The returned locale code is formatted for use with [`setlocale()`](https://docs.python.org/3/library/locale.html#locale.setlocale "locale.setlocale"). If normalization fails, the original name is returned unchanged.
If the given encoding is not known, the function defaults to the default encoding for the locale code just like [`setlocale()`](https://docs.python.org/3/library/locale.html#locale.setlocale "locale.setlocale"). 

locale.strcoll(_string1_ , _string2_)[¶](https://docs.python.org/3/library/locale.html#locale.strcoll "Link to this definition")
    
Compares two strings according to the current [`LC_COLLATE`](https://docs.python.org/3/library/locale.html#locale.LC_COLLATE "locale.LC_COLLATE") setting. As any other compare function, returns a negative, or a positive value, or `0`, depending on whether _string1_ collates before or after _string2_ or is equal to it. 

locale.strxfrm(_string_)[¶](https://docs.python.org/3/library/locale.html#locale.strxfrm "Link to this definition")
    
Transforms a string to one that can be used in locale-aware comparisons. For example, `strxfrm(s1) < strxfrm(s2)` is equivalent to `strcoll(s1, s2) < 0`. This function can be used when the same string is compared repeatedly, e.g. when collating a sequence of strings.