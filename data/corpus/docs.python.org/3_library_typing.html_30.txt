Title: Typing Module Enhancements and Decorators
URL: https://docs.python.org/3/library/typing.html
Summary: This documentation discusses recent changes in the typing module, particularly focusing on the 'no_type_check' decorator introduced in version 3.8. The decorator indicates that annotations are not type hints and applies recursively in classes. Notably, enhancements in version 3.11 allow setting a '__final__' attribute, enabling runtime checks to determine if an object is marked as final.
---

```

There is no runtime checking of these properties. See [**PEP 591**](https://peps.python.org/pep-0591/) for more details.
Added in version 3.8.
Changed in version 3.11: The decorator will now attempt to set a `__final__` attribute to `True` on the decorated object. Thus, a check like `if getattr(obj, "__final__", False)` can be used at runtime to determine whether an object `obj` has been marked as final. If the decorated object does not support setting attributes, the decorator returns the object unchanged without raising an exception. 

@typing.no_type_check[¶](https://docs.python.org/3/library/typing.html#typing.no_type_check "Link to this definition")
    
Decorator to indicate that annotations are not type hints.
This works as a class or function [decorator](https://docs.python.org/3/glossary.html#term-decorator). With a class, it applies recursively to all methods and classes defined in that class (but not to methods defined in its superclasses or subclasses). Type checkers will ignore all annotations in a function or class with this decorator.
`@no_type_check` mutates the decorated object in place. 

@typing.no_type_check_decorator[¶](https://docs.python.org/3/library/typing.html#typing.no_type_check_decorator "Link to this definition")
    
Decorator to give another decorator the [`no_type_check()`](https://docs.python.org/3/library/typing.html#typing.no_type_check "typing.no_type_check") effect.
This wraps the decorator with something that wraps the decorated function in [`no_type_check()`](https://docs.python.org/3/library/typing.html#typing.no_type_check "typing.no_type_check").
Deprecated since version 3.13, will be removed in version 3.15: No type checker ever added support for `@no_type_check_decorator`. It is therefore deprecated, and will be removed in Python 3.15. 

@typing.override[¶](https://docs.python.org/3/library/typing.html#typing.override "Link to this definition")
    
Decorator to indicate that a method in a subclass is intended to override a method or attribute in a superclass.
Type checkers should emit an error if a method decorated with `@override` does not, in fact, override anything. This helps prevent bugs that may occur when a base class is changed without an equivalent change to a child class.
For example:
```
classBase:
  deflog_status(self) -> None:
    ...
classSub(Base):
  @override
  deflog_status(self) -> None: # Okay: overrides Base.log_status
    ...
  @override
  defdone(self) -> None: # Error reported by type checker
    ...

```

There is no runtime checking of this property.
The decorator will attempt to set an `__override__` attribute to `True` on the decorated object. Thus, a check like `if getattr(obj, "__override__", False)` can be used at runtime to determine whether an object `obj` has been marked as an override. If the decorated object does not support setting attributes, the decorator returns the object unchanged without raising an exception.
See [**PEP 698**](https://peps.python.org/pep-0698/) for more details.
Added in version 3.12. 

@typing.type_check_only[¶](https://docs.python.org/3/library/typing.html#typing.type_check_only "Link to this definition")
    
Decorator to mark a class or function as unavailable at runtime.
This decorator is itself not available at runtime. It is mainly intended to mark classes that are defined in type stub files if an implementation returns an instance of a private class:
```
@type_check_only
classResponse: # private or not available at runtime
  code: int
  defget_header(self, name: str) -> str: ...
deffetch_response() -> Response: ...