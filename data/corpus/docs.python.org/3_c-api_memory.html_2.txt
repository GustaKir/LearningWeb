Title: Python Memory Management and Custom Allocations in C Extensions
URL: https://docs.python.org/3/c-api/memory.html
Summary: This section discusses memory allocation in Python extensions written in C, emphasizing the importance of using the Python heap over the C library allocator. It highlights the benefits of informing the Python memory manager about memory needs, which helps in managing overall memory footprint and can influence garbage collection and memory compaction.
---

```

In this example, the memory request for the I/O buffer is handled by the C library allocator. The Python memory manager is involved only in the allocation of the bytes object returned as a result.
In most situations, however, it is recommended to allocate memory from the Python heap specifically because the latter is under control of the Python memory manager. For example, this is required when the interpreter is extended with new object types written in C. Another reason for using the Python heap is the desire to _inform_ the Python memory manager about the memory needs of the extension module. Even when the requested memory is used exclusively for internal, highly specific purposes, delegating all memory requests to the Python memory manager causes the interpreter to have a more accurate image of its memory footprint as a whole. Consequently, under certain circumstances, the Python memory manager may or may not trigger appropriate actions, like garbage collection, memory compaction or other preventive procedures. Note that by using the C library allocator as shown in the previous example, the allocated memory for the I/O buffer escapes completely the Python memory manager.
See also
The [`PYTHONMALLOC`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONMALLOC) environment variable can be used to configure the memory allocators used by Python.
The [`PYTHONMALLOCSTATS`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONMALLOCSTATS) environment variable can be used to print statistics of the [pymalloc memory allocator](https://docs.python.org/3/c-api/memory.html#pymalloc) every time a new pymalloc object arena is created, and on shutdown.
## Allocator Domains[¶](https://docs.python.org/3/c-api/memory.html#allocator-domains "Link to this heading")
All allocating functions belong to one of three different “domains” (see also [`PyMemAllocatorDomain`](https://docs.python.org/3/c-api/memory.html#c.PyMemAllocatorDomain "PyMemAllocatorDomain")). These domains represent different allocation strategies and are optimized for different purposes. The specific details on how every domain allocates memory or what internal functions each domain calls is considered an implementation detail, but for debugging purposes a simplified table can be found at [here](https://docs.python.org/3/c-api/memory.html#default-memory-allocators). The APIs used to allocate and free a block of memory must be from the same domain. For example, [`PyMem_Free()`](https://docs.python.org/3/c-api/memory.html#c.PyMem_Free "PyMem_Free") must be used to free memory allocated using [`PyMem_Malloc()`](https://docs.python.org/3/c-api/memory.html#c.PyMem_Malloc "PyMem_Malloc").
The three allocation domains are:
  * Raw domain: intended for allocating memory for general-purpose memory buffers where the allocation _must_ go to the system allocator or where the allocator can operate without the [GIL](https://docs.python.org/3/glossary.html#term-GIL). The memory is requested directly from the system. See [Raw Memory Interface](https://docs.python.org/3/c-api/memory.html#raw-memoryinterface).
  * “Mem” domain: intended for allocating memory for Python buffers and general-purpose memory buffers where the allocation must be performed with the [GIL](https://docs.python.org/3/glossary.html#term-GIL) held. The memory is taken from the Python private heap. See [Memory Interface](https://docs.python.org/3/c-api/memory.html#memoryinterface).
  * Object domain: intended for allocating memory for Python objects. The memory is taken from the Python private heap. See [Object allocators](https://docs.python.org/3/c-api/memory.html#objectinterface).