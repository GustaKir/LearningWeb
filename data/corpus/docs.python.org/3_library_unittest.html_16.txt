Title: Unit Test Assertions in Python
URL: https://docs.python.org/3/library/unittest.html
Summary: The section details the usage of assertion methods in Python's unittest framework, specifically assertLessEqual, assertRegex, and assertNotRegex. It explains how these methods test relationships between values and text based on regular expression matching, providing examples of potential assertion failures.
---

assertLessEqual(_first_ , _second_ , _msg =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertLessEqual "Link to this definition")
    
Test that _first_ is respectively >, >=, < or <= than _second_ depending on the method name. If not, the test will fail:
>>>```
>>> self.assertGreaterEqual(3, 4)
AssertionError: "3" unexpectedly not greater than or equal to "4"

```

Added in version 3.1. 

assertRegex(_text_ , _regex_ , _msg =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRegex "Link to this definition")


assertNotRegex(_text_ , _regex_ , _msg =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotRegex "Link to this definition")
    
Test that a _regex_ search matches (or does not match) _text_. In case of failure, the error message will include the pattern and the _text_ (or the pattern and the part of _text_ that unexpectedly matched). _regex_ may be a regular expression object or a string containing a regular expression suitable for use by [`re.search()`](https://docs.python.org/3/library/re.html#re.search "re.search").
Added in version 3.1: Added under the name `assertRegexpMatches`.
Changed in version 3.2: The method `assertRegexpMatches()` has been renamed to [`assertRegex()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRegex "unittest.TestCase.assertRegex").
Added in version 3.2: [`assertNotRegex()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotRegex "unittest.TestCase.assertNotRegex"). 

assertCountEqual(_first_ , _second_ , _msg =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertCountEqual "Link to this definition")
    
Test that sequence _first_ contains the same elements as _second_ , regardless of their order. When they don’t, an error message listing the differences between the sequences will be generated.
Duplicate elements are _not_ ignored when comparing _first_ and _second_. It verifies whether each element has the same count in both sequences. Equivalent to: `assertEqual(Counter(list(first)), Counter(list(second)))` but works with sequences of unhashable objects as well.
Added in version 3.2.
The [`assertEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertEqual "unittest.TestCase.assertEqual") method dispatches the equality check for objects of the same type to different type-specific methods. These methods are already implemented for most of the built-in types, but it’s also possible to register new methods using [`addTypeEqualityFunc()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.addTypeEqualityFunc "unittest.TestCase.addTypeEqualityFunc"):