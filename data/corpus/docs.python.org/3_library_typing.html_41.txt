Title: AsyncContextManager Class in Typing Module
URL: https://docs.python.org/3/library/typing.html
Summary: The `typing.AsyncContextManager` is a deprecated alias for `contextlib.AbstractAsyncContextManager`, introduced in Python 3.6.2 and marked as deprecated since Python 3.9. It takes two type parameters: `T_co` for the return type of the `__aenter__()` method, and an optional `AExitT_co`, defaulting to `bool | None`, for the return type of the `__aexit__()` method.
---

_class_ typing.AsyncContextManager(_Generic[T_co, AExitT_co]_)[¶](https://docs.python.org/3/library/typing.html#typing.AsyncContextManager "Link to this definition")
    
Deprecated alias to [`contextlib.AbstractAsyncContextManager`](https://docs.python.org/3/library/contextlib.html#contextlib.AbstractAsyncContextManager "contextlib.AbstractAsyncContextManager").
The first type parameter, `T_co`, represents the type returned by the [`__aenter__()`](https://docs.python.org/3/reference/datamodel.html#object.__aenter__ "object.__aenter__") method. The optional second type parameter, `AExitT_co`, which defaults to `bool | None`, represents the type returned by the [`__aexit__()`](https://docs.python.org/3/reference/datamodel.html#object.__aexit__ "object.__aexit__") method.
Added in version 3.6.2.
Deprecated since version 3.9: [`contextlib.AbstractAsyncContextManager`](https://docs.python.org/3/library/contextlib.html#contextlib.AbstractAsyncContextManager "contextlib.AbstractAsyncContextManager") now supports subscripting (`[]`). See [**PEP 585**](https://peps.python.org/pep-0585/) and [Generic Alias Type](https://docs.python.org/3/library/stdtypes.html#types-genericalias).
Changed in version 3.13: Added the optional second type parameter, `AExitT_co`.
## Deprecation Timeline of Major Features[¶](https://docs.python.org/3/library/typing.html#deprecation-timeline-of-major-features "Link to this heading")
Certain features in `typing` are deprecated and may be removed in a future version of Python. The following table summarizes major deprecations for your convenience. This is subject to change, and not all deprecations are listed.
Feature | Deprecated in | Projected removal | PEP/issue  
---|---|---|---  
`typing` versions of standard collections | 3.9 | Undecided (see [Deprecated aliases](https://docs.python.org/3/library/typing.html#deprecated-aliases) for more information) | [**PEP 585**](https://peps.python.org/pep-0585/)  
[`typing.ByteString`](https://docs.python.org/3/library/typing.html#typing.ByteString "typing.ByteString") | 3.9 | 3.14 | [gh-91896](https://github.com/python/cpython/issues/91896)  
[`typing.Text`](https://docs.python.org/3/library/typing.html#typing.Text "typing.Text") | 3.11 | Undecided | [gh-92332](https://github.com/python/cpython/issues/92332)  
[`typing.Hashable`](https://docs.python.org/3/library/typing.html#typing.Hashable "typing.Hashable") and [`typing.Sized`](https://docs.python.org/3/library/typing.html#typing.Sized "typing.Sized") | 3.12 | Undecided | [gh-94309](https://github.com/python/cpython/issues/94309)  
[`typing.TypeAlias`](https://docs.python.org/3/library/typing.html#typing.TypeAlias "typing.TypeAlias") | 3.12 | Undecided | [**PEP 695**](https://peps.python.org/pep-0695/)  
[`@typing.no_type_check_decorator`](https://docs.python.org/3/library/typing.html#typing.no_type_check_decorator "typing.no_type_check_decorator") | 3.13 | 3.15 | [gh-106309](https://github.com/python/cpython/issues/106309)  
[`typing.AnyStr`](https://docs.python.org/3/library/typing.html#typing.AnyStr "typing.AnyStr") | 3.13 | 3.18 | [gh-105578](https://github.com/python/cpython/issues/105578)  
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [`typing` — Support for type hints](https://docs.python.org/3/library/typing.html)
    * [Specification for the Python Type System](https://docs.python.org/3/library/typing.html#specification-for-the-python-type-system)
    * [Type aliases](https://docs.python.org/3/library/typing.html#type-aliases)
    * [NewType](https://docs.python.org/3/library/typing.html#newtype)
    * [Annotating callable objects](https://docs.python.org/3/library/typing.html#annotating-callable-objects)
    * [Generics](https://docs.python.org/3/library/typing.html#generics)
    * [Annotating tuples](https://docs.python.org/3/library/typing.html#annotating-tuples)
    * [The type of class objects](https://docs.python.org/3/library/typing.html#the-type-of-class-objects)
    * [Annotating generators and coroutines](https://docs.python.org/3/library/typing.html#annotating-generators-and-coroutines)
    * [User-defined generic types](https://docs.python.org/3/library/typing.html#user-defined-generic-types)
    * [The `Any` type](https://docs.python.org/3/library/typing.html#the-any-type)
    * [Nominal vs structural subtyping](https://docs.python.org/3/library/typing.html#nominal-vs-structural-subtyping)
    * [Module contents](https://docs.python.org/3/library/typing.html#module-contents)
      * [Special typing primitives](https://docs.python.org/3/library/typing.html#special-typing-primitives)
        * [Special types](https://docs.python.org/3/library/typing.html#special-types)
        * [Special forms](https://docs.python.org/3/library/typing.html#special-forms)
        * [Building generic types and type aliases](https://docs.python.org/3/library/typing.html#building-generic-types-and-type-aliases)
        * [Other special directives](https://docs.python.org