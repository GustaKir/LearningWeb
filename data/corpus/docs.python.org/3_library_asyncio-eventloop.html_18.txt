Title: Exception Handling in Asyncio Event Loop
URL: https://docs.python.org/3/library/asyncio-eventloop.html
Summary: This section describes the methods for handling exceptions in the asyncio event loop, including retrieving the current exception handler, the default exception handler for uncaught exceptions, and how to call a custom exception handler with a given context.
---

loop.get_exception_handler()[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.get_exception_handler "Link to this definition")
    
Return the current exception handler, or `None` if no custom exception handler was set.
Added in version 3.5.2. 

loop.default_exception_handler(_context_)[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.default_exception_handler "Link to this definition")
    
Default exception handler.
This is called when an exception occurs and no exception handler is set. This can be called by a custom exception handler that wants to defer to the default handler behavior.
_context_ parameter has the same meaning as in [`call_exception_handler()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.call_exception_handler "asyncio.loop.call_exception_handler"). 

loop.call_exception_handler(_context_)[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.call_exception_handler "Link to this definition")
    
Call the current event loop exception handler.
_context_ is a `dict` object containing the following keys (new keys may be introduced in future Python versions):
  * ‘message’: Error message;
  * ‘exception’ (optional): Exception object;
  * ‘future’ (optional): [`asyncio.Future`](https://docs.python.org/3/library/asyncio-future.html#asyncio.Future "asyncio.Future") instance;
  * ‘task’ (optional): [`asyncio.Task`](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task "asyncio.Task") instance;
  * ‘handle’ (optional): [`asyncio.Handle`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Handle "asyncio.Handle") instance;
  * ‘protocol’ (optional): [Protocol](https://docs.python.org/3/library/asyncio-protocol.html#asyncio-protocol) instance;
  * ‘transport’ (optional): [Transport](https://docs.python.org/3/library/asyncio-protocol.html#asyncio-transport) instance;
  * ‘socket’ (optional): [`socket.socket`](https://docs.python.org/3/library/socket.html#socket.socket "socket.socket") instance;
  * ‘source_traceback’ (optional): Traceback of the source;
  * ‘handle_traceback’ (optional): Traceback of the handle;
  * 

‘asyncgen’ (optional): Asynchronous generator that caused
    
the exception.


Note
This method should not be overloaded in subclassed event loops. For custom exception handling, use the [`set_exception_handler()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.set_exception_handler "asyncio.loop.set_exception_handler") method.
### [Enabling debug mode](https://docs.python.org/3/library/asyncio-eventloop.html#id16)[¶](https://docs.python.org/3/library/asyncio-eventloop.html#enabling-debug-mode "Link to this heading") 

loop.get_debug()[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.get_debug "Link to this definition")
    
Get the debug mode ([`bool`](https://docs.python.org/3/library/functions.html#bool "bool")) of the event loop.
The default value is `True` if the environment variable [`PYTHONASYNCIODEBUG`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONASYNCIODEBUG) is set to a non-empty string, `False` otherwise. 

loop.set_debug(_enabled :[bool](https://docs.python.org/3/library/functions.html#bool "bool")_)[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.set_debug "Link to this definition")
    
Set the debug mode of the event loop.
Changed in version 3.7: The new [Python Development Mode](https://docs.python.org/3/library/devmode.html#devmode) can now also be used to enable the debug mode.