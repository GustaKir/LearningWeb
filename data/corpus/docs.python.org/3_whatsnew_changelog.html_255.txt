Title: Changes to C API in Python
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: Recent updates to the C API include the restriction of the `PyUnicode_FSDecoder()` function to accept only the `bytes` type, a new `PyType_Watch()` function for callbacks, and additional enhancements allowing better management of type modifications.
---

### C API[¶](https://docs.python.org/3/whatsnew/changelog.html#id216 "Link to this heading")
  * [gh-98393](https://github.com/python/cpython/issues/98393): The [`PyUnicode_FSDecoder()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FSDecoder "PyUnicode_FSDecoder") function no longer accepts bytes-like paths, like [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") and [`memoryview`](https://docs.python.org/3/library/stdtypes.html#memoryview "memoryview") types: only the exact [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") type is accepted for bytes strings. Patch by Victor Stinner.
  * [gh-91051](https://github.com/python/cpython/issues/91051): Add [`PyType_Watch()`](https://docs.python.org/3/c-api/type.html#c.PyType_Watch "PyType_Watch") and related APIs to allow callbacks on [`PyType_Modified()`](https://docs.python.org/3/c-api/type.html#c.PyType_Modified "PyType_Modified").
  * [gh-95756](https://github.com/python/cpython/issues/95756): Lazily create and cache `co_` attributes for better performance for code getters.
  * [gh-96512](https://github.com/python/cpython/issues/96512): Configuration for the [integer string conversion length limitation](https://docs.python.org/3/library/stdtypes.html#int-max-str-digits) now lives in the PyConfig C API struct.
  * [gh-95589](https://github.com/python/cpython/issues/95589): Extensions classes that set `tp_dictoffset` and `tp_weaklistoffset` lose the support for multiple inheritance, but are now safe. Extension classes should use [`Py_TPFLAGS_MANAGED_DICT`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_MANAGED_DICT "Py_TPFLAGS_MANAGED_DICT") and [`Py_TPFLAGS_MANAGED_WEAKREF`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_MANAGED_WEAKREF "Py_TPFLAGS_MANAGED_WEAKREF") instead.
  * [gh-95781](https://github.com/python/cpython/issues/95781): An unrecognized format character in [`PyUnicode_FromFormat()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FromFormat "PyUnicode_FromFormat") and [`PyUnicode_FromFormatV()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FromFormatV "PyUnicode_FromFormatV") now sets a [`SystemError`](https://docs.python.org/3/library/exceptions.html#SystemError "SystemError"). In previous versions it caused all the rest of the format string to be copied as-is to the result string, and any extra arguments discarded.
  * [gh-92678](https://github.com/python/cpython/issues/92678): Restore the 3.10 behavior for multiple inheritance of C extension classes that store their dictionary at the end of the struct.
  * [gh-92678](https://github.com/python/cpython/issues/92678): Support C extensions using managed dictionaries by setting the `Py_TPFLAGS_MANAGED_DICT` flag.
  * [gh-93274](https://github.com/python/cpython/issues/93274): API for implementing vectorcall ([`Py_TPFLAGS_HAVE_VECTORCALL`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_HAVE_VECTORCALL "Py_TPFLAGS_HAVE_VECTORCALL"), [`PyVectorcall_NARGS()`](https://docs.python.org/3/c-api/call.html#c.PyVectorcall_NARGS "PyVectorcall_NARGS") and [`PyVectorcall_Call()`](https://docs.python.org/3/c-api/call.html#c.PyVectorcall_Call "PyVectorcall_Call")) was added to the limited API and stable ABI.
  * [gh-95504](https://github.com/python/cpython/issues/95504): Fix sign placement when specifying width or precision in [`PyUnicode_FromFormat()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FromFormat "PyUnicode_FromFormat") and [`PyUnicode_FromFormatV()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FromFormatV "PyUnicode_FromFormatV"). Patch by Philip Georgi.
  * [gh-93012](https://github.com/python/cpython/issues/93012): The [`Py_TPFLAGS_HAVE_VECTORCALL`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_HAVE_VECTORCALL "Py_TPFLAGS_HAVE_VECTORCALL") flag is now removed from a class when the class’s [`__call__()`](https://docs.python.org/3/reference/datamodel.html#object.__call__ "object.__call__") method is reassigned. This makes vectorcall safe to use with mutable types (i.e. heap types without the `immutable` flag). Mutable types that do not override [`tp_call`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_call "PyTypeObject.tp_call") now inherit the [`Py_TPFLAGS_HAVE_VECTORCALL`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_HAVE_VECTORCALL "Py_TPFLAGS_HAVE_VECTORCALL") flag.
  * [gh-95388](https://github.com/python/cpython/issues/95388): Creating [`immutable types`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_IMMUTABLETYPE "Py_TPFLAGS_IMMUTABLETYPE") with mutable bases is deprecated and is planned to be disabled in Python 3.14.
  * [gh-92678](https://github.com/python/cpython/issues/92678): Adds unstable C-API functions `_PyObject_VisitManagedDict` and `_PyObject_ClearManagedDict` to allow C extensions to allow the VM to manage their object’s dictionaries.
  * [gh-94936](https://github.com/python/cpy