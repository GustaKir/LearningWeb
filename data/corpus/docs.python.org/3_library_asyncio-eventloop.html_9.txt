Title: UDP Socket Parameters in asyncio
URL: https://docs.python.org/3/library/asyncio-eventloop.html
Summary: This document discusses UDP echo client and server protocols, changes in socket parameters across different Python versions, including the addition of support for Windows in version 3.8, and the deprecation of the _reuse_address_ parameter due to security concerns in version 3.8.1. It also notes issues with `SO_REUSEADDR` on systems with multiple processes and introduces _reuse_port_ as a safer alternative.
---

See [UDP echo client protocol](https://docs.python.org/3/library/asyncio-protocol.html#asyncio-udp-echo-client-protocol) and [UDP echo server protocol](https://docs.python.org/3/library/asyncio-protocol.html#asyncio-udp-echo-server-protocol) examples.
Changed in version 3.4.4: The _family_ , _proto_ , _flags_ , _reuse_address_ , _reuse_port_ , _allow_broadcast_ , and _sock_ parameters were added.
Changed in version 3.8: Added support for Windows.
Changed in version 3.8.1: The _reuse_address_ parameter is no longer supported, as using [socket.SO_REUSEADDR](https://docs.python.org/3/library/socket.html#socket-unix-constants) poses a significant security concern for UDP. Explicitly passing `reuse_address=True` will raise an exception.
When multiple processes with differing UIDs assign sockets to an identical UDP socket address with `SO_REUSEADDR`, incoming packets can become randomly distributed among the sockets.
For supported platforms, _reuse_port_ can be used as a replacement for similar functionality. With _reuse_port_ , [socket.SO_REUSEPORT](https://docs.python.org/3/library/socket.html#socket-unix-constants) is used instead, which specifically prevents processes with differing UIDs from assigning sockets to the same socket address.
Changed in version 3.11: The _reuse_address_ parameter, disabled since Python 3.8.1, 3.7.6 and 3.6.10, has been entirely removed. 

_async_ loop.create_unix_connection(_protocol_factory_ , _path =None_, _*_ , _ssl =None_, _sock =None_, _server_hostname =None_, _ssl_handshake_timeout =None_, _ssl_shutdown_timeout =None_)[¶](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_unix_connection "Link to this definition")
    
Create a Unix connection.
The socket family will be [`AF_UNIX`](https://docs.python.org/3/library/socket.html#socket.AF_UNIX "socket.AF_UNIX"); socket type will be [`SOCK_STREAM`](https://docs.python.org/3/library/socket.html#socket.SOCK_STREAM "socket.SOCK_STREAM").
A tuple of `(transport, protocol)` is returned on success.
_path_ is the name of a Unix domain socket and is required, unless a _sock_ parameter is specified. Abstract Unix sockets, [`str`](https://docs.python.org/3/library/stdtypes.html#str "str"), [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes"), and [`Path`](https://docs.python.org/3/library/pathlib.html#pathlib.Path "pathlib.Path") paths are supported.
See the documentation of the [`loop.create_connection()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_connection "asyncio.loop.create_connection") method for information about arguments to this method.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix.
Changed in version 3.7: Added the _ssl_handshake_timeout_ parameter. The _path_ parameter can now be a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object).
Changed in version 3.11: Added the _ssl_shutdown_timeout_ parameter.
### [Creating network servers](https://docs.python.org/3/library/asyncio-eventloop.html#id6)[¶](https://docs.python.org/3/library/asyncio-eventloop.html#creating-network-servers "Link to this heading")