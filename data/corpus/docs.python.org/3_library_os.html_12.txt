Title: os.copy_file_range
URL: https://docs.python.org/3/library/os.html
Summary: The os.copy_file_range function copies a specified number of bytes from one file descriptor to another, allowing for optional offset parameters. It requires both source and destination to be on the same filesystem in certain Linux kernel versions, or an OSError will be raised. This operation is efficient as it avoids unnecessary data transfers between kernel and user space.
---

```


os.copy_file_range(_src_ , _dst_ , _count_ , _offset_src =None_, _offset_dst =None_)[¶](https://docs.python.org/3/library/os.html#os.copy_file_range "Link to this definition")
    
Copy _count_ bytes from file descriptor _src_ , starting from offset _offset_src_ , to file descriptor _dst_ , starting from offset _offset_dst_. If _offset_src_ is `None`, then _src_ is read from the current position; respectively for _offset_dst_.
In Linux kernel older than 5.3, the files pointed to by _src_ and _dst_ must reside in the same filesystem, otherwise an [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") is raised with [`errno`](https://docs.python.org/3/library/exceptions.html#OSError.errno "OSError.errno") set to [`errno.EXDEV`](https://docs.python.org/3/library/errno.html#errno.EXDEV "errno.EXDEV").
This copy is done without the additional cost of transferring data from the kernel to user space and then back into the kernel. Additionally, some filesystems could implement extra optimizations, such as the use of reflinks (i.e., two or more inodes that share pointers to the same copy-on-write disk blocks; supported file systems include btrfs and XFS) and server-side copy (in the case of NFS).
The function copies bytes between two file descriptors. Text options, like the encoding and the line ending, are ignored.
The return value is the amount of bytes copied. This could be less than the amount requested.
Note
On Linux, [`os.copy_file_range()`](https://docs.python.org/3/library/os.html#os.copy_file_range "os.copy_file_range") should not be used for copying a range of a pseudo file from a special filesystem like procfs and sysfs. It will always copy no bytes and return 0 as if the file was empty because of a known Linux kernel issue.
[Availability](https://docs.python.org/3/library/intro.html#availability): Linux >= 4.5 with glibc >= 2.27.
Added in version 3.8. 

os.device_encoding(_fd_)[¶](https://docs.python.org/3/library/os.html#os.device_encoding "Link to this definition")
    
Return a string describing the encoding of the device associated with _fd_ if it is connected to a terminal; else return [`None`](https://docs.python.org/3/library/constants.html#None "None").
On Unix, if the [Python UTF-8 Mode](https://docs.python.org/3/library/os.html#utf8-mode) is enabled, return `'UTF-8'` rather than the device encoding.
Changed in version 3.10: On Unix, the function now implements the Python UTF-8 Mode. 

os.dup(_fd_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.dup "Link to this definition")
    
Return a duplicate of file descriptor _fd_. The new file descriptor is [non-inheritable](https://docs.python.org/3/library/os.html#fd-inheritance).
On Windows, when duplicating a standard stream (0: stdin, 1: stdout, 2: stderr), the new file descriptor is [inheritable](https://docs.python.org/3/library/os.html#fd-inheritance).
[Availability](https://docs.python.org/3/library/intro.html#availability): not WASI.
Changed in version 3.4: The new file descriptor is now non-inheritable. 

os.dup2(_fd_ , _fd2_ , _inheritable =True_)[¶](https://docs.python.org/3/library/os.html#os.dup2 "Link to this definition")
    
Duplicate file descriptor _fd_ to _fd2_ , closing the latter first if necessary. Return _fd2_. The new file descriptor is [inheritable](https://docs.python.org/3/library/os.html#fd-inheritance) by default or non-inheritable if _inheritable_ is `False`.
[Availability](https://docs.python.org/3/library/intro.html#availability): not WASI.
Changed in version 3.4: Add the optional _inheritable_ parameter.
Changed in version 3.7: Return _fd2_ on success. Previously, `None` was always returned. 

os.fchmod(_fd_ , _mode_)[¶](https://docs.python.org/3/library/os.html#os.fchmod "Link to this definition")
    
Change the mode of the file given by _fd_ to the numeric _mode_. See the docs for [`chmod()`](https://docs.python.org/3/library/os.html#os.chmod "os.chmod") for possible values of _mode_. As of Python 3.3, this is equivalent to `os.chmod(fd, mode)`.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.chmod` with arguments `path`, `mode`, `dir_fd`.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, Windows.
The function is limited on WASI, see [WebAssembly platforms](https://docs.python.org/3/library/intro.html#wasm-availability) for more information.
Changed in version 3.13: Added support on Windows.