Title: Generator State Inspection in Python
URL: https://docs.python.org/3/library/inspect.html
Summary: This section discusses the current state of generators in Python, highlighting the utility of the `getgeneratorstate()` function. This function allows users to determine whether a generator is waiting to start, currently executing, or has terminated, with possible states including GEN_CREATED, GEN_RUNNING, and GEN_SUSPENDED.
---

```

## Current State of Generators, Coroutines, and Asynchronous Generators[¶](https://docs.python.org/3/library/inspect.html#current-state-of-generators-coroutines-and-asynchronous-generators "Link to this heading")
When implementing coroutine schedulers and for other advanced uses of generators, it is useful to determine whether a generator is currently executing, is waiting to start or resume or execution, or has already terminated. [`getgeneratorstate()`](https://docs.python.org/3/library/inspect.html#inspect.getgeneratorstate "inspect.getgeneratorstate") allows the current state of a generator to be determined easily. 

inspect.getgeneratorstate(_generator_)[¶](https://docs.python.org/3/library/inspect.html#inspect.getgeneratorstate "Link to this definition")
    
Get current state of a generator-iterator.
Possible states are:
  * GEN_CREATED: Waiting to start execution.
  * GEN_RUNNING: Currently being executed by the interpreter.
  * GEN_SUSPENDED: Currently suspended at a yield expression.
  * GEN_CLOSED: Execution has completed.


Added in version 3.2. 

inspect.getcoroutinestate(_coroutine_)[¶](https://docs.python.org/3/library/inspect.html#inspect.getcoroutinestate "Link to this definition")
    
Get current state of a coroutine object. The function is intended to be used with coroutine objects created by [`async def`](https://docs.python.org/3/reference/compound_stmts.html#async-def) functions, but will accept any coroutine-like object that has `cr_running` and `cr_frame` attributes.
Possible states are:
  * CORO_CREATED: Waiting to start execution.
  * CORO_RUNNING: Currently being executed by the interpreter.
  * CORO_SUSPENDED: Currently suspended at an await expression.
  * CORO_CLOSED: Execution has completed.


Added in version 3.5. 

inspect.getasyncgenstate(_agen_)[¶](https://docs.python.org/3/library/inspect.html#inspect.getasyncgenstate "Link to this definition")
    
Get current state of an asynchronous generator object. The function is intended to be used with asynchronous iterator objects created by [`async def`](https://docs.python.org/3/reference/compound_stmts.html#async-def) functions which use the [`yield`](https://docs.python.org/3/reference/simple_stmts.html#yield) statement, but will accept any asynchronous generator-like object that has `ag_running` and `ag_frame` attributes.
Possible states are:
  * AGEN_CREATED: Waiting to start execution.
  * AGEN_RUNNING: Currently being executed by the interpreter.
  * AGEN_SUSPENDED: Currently suspended at a yield expression.
  * AGEN_CLOSED: Execution has completed.


Added in version 3.12.
The current internal state of the generator can also be queried. This is mostly useful for testing purposes, to ensure that internal state is being updated as expected: 

inspect.getgeneratorlocals(_generator_)[¶](https://docs.python.org/3/library/inspect.html#inspect.getgeneratorlocals "Link to this definition")
    
Get the mapping of live local variables in _generator_ to their current values. A dictionary is returned that maps from variable names to values. This is the equivalent of calling [`locals()`](https://docs.python.org/3/library/functions.html#locals "locals") in the body of the generator, and all the same caveats apply.
If _generator_ is a [generator](https://docs.python.org/3/glossary.html#term-generator) with no currently associated frame, then an empty dictionary is returned. [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") is raised if _generator_ is not a Python generator object.
**CPython implementation detail:** This function relies on the generator exposing a Python stack frame for introspection, which isn’t guaranteed to be the case in all implementations of Python. In such cases, this function will always return an empty dictionary.
Added in version 3.3. 

inspect.getcoroutinelocals(_coroutine_)[¶](https://docs.python.org/3/library/inspect.html#inspect.getcoroutinelocals "Link to this definition")
    
This function is analogous to [`getgeneratorlocals()`](https://docs.python.org/3/library/inspect.html#inspect.getgeneratorlocals "inspect.getgeneratorlocals"), but works for coroutine objects created by [`async def`](https://docs.python.org/3/reference/compound_stmts.html#async-def) functions.
Added in version 3.5.