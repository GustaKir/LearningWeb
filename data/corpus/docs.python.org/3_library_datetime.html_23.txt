Title: Working with datetime in Python
URL: https://docs.python.org/3/library/datetime.html
Summary: This section provides examples of using the `datetime` module in Python, demonstrating methods such as `now().isoformat()` and `ctime()` to retrieve formatted date and time strings. Notably, it mentions the addition of the `timespec` parameter in version 3.6 and clarifies that `d.ctime()` does not include time zone information.
---

```
>>> fromdatetimeimport datetime
>>> datetime.now().isoformat(timespec='minutes')
'2002-12-25T00:00'
>>> dt = datetime(2015, 1, 1, 12, 30, 59, 0)
>>> dt.isoformat(timespec='microseconds')
'2015-01-01T12:30:59.000000'

```

Changed in version 3.6: Added the _timespec_ parameter. 

datetime.__str__()[¶](https://docs.python.org/3/library/datetime.html#datetime.datetime.__str__ "Link to this definition")
    
For a [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") instance `d`, `str(d)` is equivalent to `d.isoformat(' ')`. 

datetime.ctime()[¶](https://docs.python.org/3/library/datetime.html#datetime.datetime.ctime "Link to this definition")
    
Return a string representing the date and time:
>>>```
>>> fromdatetimeimport datetime
>>> datetime(2002, 12, 4, 20, 30, 40).ctime()
'Wed Dec 4 20:30:40 2002'

```

The output string will _not_ include time zone information, regardless of whether the input is aware or naive.
`d.ctime()` is equivalent to:
```
time.ctime(time.mktime(d.timetuple()))

```

on platforms where the native C `ctime()` function (which [`time.ctime()`](https://docs.python.org/3/library/time.html#time.ctime "time.ctime") invokes, but which [`datetime.ctime()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.ctime "datetime.datetime.ctime") does not invoke) conforms to the C standard. 

datetime.strftime(_format_)[¶](https://docs.python.org/3/library/datetime.html#datetime.datetime.strftime "Link to this definition")
    
Return a string representing the date and time, controlled by an explicit format string. See also [strftime() and strptime() Behavior](https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior) and [`datetime.isoformat()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.isoformat "datetime.datetime.isoformat"). 

datetime.__format__(_format_)[¶](https://docs.python.org/3/library/datetime.html#datetime.datetime.__format__ "Link to this definition")
    
Same as [`datetime.strftime()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.strftime "datetime.datetime.strftime"). This makes it possible to specify a format string for a [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") object in [formatted string literals](https://docs.python.org/3/reference/lexical_analysis.html#f-strings) and when using [`str.format()`](https://docs.python.org/3/library/stdtypes.html#str.format "str.format"). See also [strftime() and strptime() Behavior](https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior) and [`datetime.isoformat()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.isoformat "datetime.datetime.isoformat").
### Examples of Usage: [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime")[¶](https://docs.python.org/3/library/datetime.html#examples-of-usage-datetime "Link to this heading")
Examples of working with [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") objects:
>>>```
>>> fromdatetimeimport datetime, date, time, timezone
>>> # Using datetime.combine()
>>> d = date(2005, 7, 14)
>>> t = time(12, 30)
>>> datetime.combine(d, t)
datetime.datetime(2005, 7, 14, 12, 30)
>>> # Using datetime.now()
>>> datetime.now()
datetime.datetime(2007, 12, 6, 16, 29, 43, 79043)  # GMT +1
>>> datetime.now(timezone.utc)
datetime.datetime(2007, 12, 6, 15, 29, 43, 79060, tzinfo=datetime.timezone.utc)
>>> # Using datetime.strptime()
>>> dt = datetime.strptime("21/11/06 16:30", "%d/%m/%y %H:%M")
>>> dt
datetime.datetime(2006, 11, 21, 16, 30)
>>> # Using datetime.timetuple() to get tuple of all attributes
>>> tt = dt.timetuple()
>>> for it in tt:
...   print(it)
...
2006  # year
11   # month
21   # day
16   # hour
30   # minute
0    # second
1    # weekday (0 = Monday)
325   # number of days since 1st January
-1   # dst - method tzinfo.dst() returned None
>>> # Date in ISO format
>>> ic = dt.isocalendar()
>>> for it in ic:
...   print(it)
...
2006  # ISO year
47   # ISO week
2    # ISO weekday
>>> # Formatting a datetime
>>> dt.strftime("%A, %d. %B %Y %I:%M%p")
'Tuesday, 21. November 2006 04:30PM'
>>> 'The {1} is {0:%d}, the {2} is {0:%B}, the {3} is {0:%I:%M%p}.'.format(dt, "day", "month", "time")
'The day is 21, the month is November, the time is 04:30PM.'

```

The example below defines a [`tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo "datetime.tzinfo") subclass capturing time zone information for Kabul, Afghanistan, which used +4 UTC until 1945 and then +4:30 UTC thereafter: