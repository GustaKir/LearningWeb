Title: Enumeration Decorators in Python Enum Module
URL: https://docs.python.org/3/library/enum.html
Summary: This section introduces decorators specifically designed for enums in Python, including `@enum.verify`, `@enum.member`, `@enum.nonmember`, and `@enum.global_enum`. Each decorator serves a unique purpose, such as enforcing constraints for enumerations or defining members, and they were all added in version 3.11.
---

```


@enum.verify[¶](https://docs.python.org/3/library/enum.html#enum.verify "Link to this definition")
    
A [`class`](https://docs.python.org/3/reference/compound_stmts.html#class) decorator specifically for enumerations. Members from [`EnumCheck`](https://docs.python.org/3/library/enum.html#enum.EnumCheck "enum.EnumCheck") are used to specify which constraints should be checked on the decorated enumeration.
Added in version 3.11. 

@enum.member[¶](https://docs.python.org/3/library/enum.html#enum.member "Link to this definition")
    
A decorator for use in enums: its target will become a member.
Added in version 3.11. 

@enum.nonmember[¶](https://docs.python.org/3/library/enum.html#enum.nonmember "Link to this definition")
    
A decorator for use in enums: its target will not become a member.
Added in version 3.11. 

@enum.global_enum[¶](https://docs.python.org/3/library/enum.html#enum.global_enum "Link to this definition")
    
A decorator to change the [`str()`](https://docs.python.org/3/library/stdtypes.html#str "str") and [`repr()`](https://docs.python.org/3/library/functions.html#repr "repr") of an enum to show its members as belonging to the module instead of its class. Should only be used when the enum members are exported to the module global namespace (see [`re.RegexFlag`](https://docs.python.org/3/library/re.html#re.RegexFlag "re.RegexFlag") for an example).
Added in version 3.11. 

enum.show_flag_values(_value_)[¶](https://docs.python.org/3/library/enum.html#enum.show_flag_values "Link to this definition")
    
Return a list of all power-of-two integers contained in a flag _value_.
Added in version 3.11.
## Notes[¶](https://docs.python.org/3/library/enum.html#notes "Link to this heading")
[`IntEnum`](https://docs.python.org/3/library/enum.html#enum.IntEnum "enum.IntEnum"), [`StrEnum`](https://docs.python.org/3/library/enum.html#enum.StrEnum "enum.StrEnum"), and [`IntFlag`](https://docs.python.org/3/library/enum.html#enum.IntFlag "enum.IntFlag")
> These three enum types are designed to be drop-in replacements for existing integer- and string-based values; as such, they have extra limitations:
>   * `__str__` uses the value and not the name of the enum member
>   * `__format__`, because it uses `__str__`, will also use the value of the enum member instead of its name
> 

> If you do not need/want those limitations, you can either create your own base class by mixing in the `int` or `str` type yourself:
> >>>```
>>> fromenumimport Enum
>>> classMyIntEnum(int, Enum):
...   pass

```

> or you can reassign the appropriate [`str()`](https://docs.python.org/3/library/stdtypes.html#str "str"), etc., in your enum:
> >>>```
>>> fromenumimport Enum, IntEnum
>>> classMyIntEnum(IntEnum):
...   __str__ = Enum.__str__