Title: Long Integer Objects in Python C API
URL: https://docs.python.org/3/c-api/long.html
Summary: This documentation section introduces the C API for Python's long integer objects, outlining their representation and manipulation within the Python environment.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
#### Previous topic
[The `None` Object](https://docs.python.org/3/c-api/none.html "previous chapter")
#### Next topic
[Boolean Objects](https://docs.python.org/3/c-api/bool.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/c-api/long.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/c-api/bool.html "Boolean Objects") |
  * [previous](https://docs.python.org/3/c-api/none.html "The None Object") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [Python/C API Reference Manual](https://docs.python.org/3/c-api/index.html) »
  * [Concrete Objects Layer](https://docs.python.org/3/c-api/concrete.html) »
  * [Integer Objects](https://docs.python.org/3/c-api/long.html)
  * | 
  * Theme  Auto Light Dark |


# Integer Objects[¶](https://docs.python.org/3/c-api/long.html#integer-objects "Link to this heading")
All integers are implemented as “long” integer objects of arbitrary size.
On error, most `PyLong_As*` APIs return `(return type)-1` which cannot be distinguished from a number. Use [`PyErr_Occurred()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_Occurred "PyErr_Occurred") to disambiguate. 

typePyLongObject[¶](https://docs.python.org/3/c-api/long.html#c.PyLongObject "Link to this definition")
    _Part of the[ Limited API](https://docs.python.org/3/c-api/stable.html#stable) (as an opaque struct)._
This subtype of [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject") represents a Python integer object. 

[PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject")PyLong_Type[¶](https://docs.python.org/3/c-api/long.html#c.PyLong_Type "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
This instance of [`PyTypeObject`](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject") represents the Python integer type. This is the same object as [`int`](https://docs.python.org/3/library/functions.html#int "int") in the Python layer. 

intPyLong_Check([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*p)[¶](https://docs.python.org/3/c-api/long.html#c.PyLong_Check "Link to this definition")
    
Return true if its argument is a [`PyLongObject`](https://docs.python.org/3/c-api/long.html#c.PyLongObject "PyLongObject") or a subtype of [`PyLongObject`](https://docs.python.org/3/c-api/long.html#c.PyLongObject "PyLongObject"). This function always succeeds. 

intPyLong_CheckExact([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*p)[¶](https://docs.python.org/3/c-api/long.html#c.PyLong_CheckExact "Link to this definition")
    
Return true if its argument is a [`PyLongObject`](https://docs.python.org/3/c-api/long.html#c.PyLongObject "PyLongObject"), but not a subtype of [`PyLongObject`](https://docs.python.org/3/c-api/long.html#c.PyLongObject "PyLongObject"). This function always succeeds. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyLong_FromLong(longv)[¶](https://docs.python.org/3/c-api/long.html#c.PyLong_FromLong "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return a new [`PyLongObject`](https://docs.python.org/3/c-api/long.html#c.PyLongObject "PyLongObject") object from _v_ , or `NULL` on failure.
The current implementation keeps an array of integer objects for all integers between `-5` and `256`. When you create an int in that range you actually just get back a reference to the existing object.