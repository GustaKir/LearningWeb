Title: traceback.format_exception_only Function
URL: https://docs.python.org/3/library/traceback.html
Summary: The `traceback.format_exception_only` function formats the exception part of a traceback using a given exception value. It returns a list of strings, typically containing the exception's message, with additional details for `SyntaxError` exceptions. Starting from Python 3.10, it can accept an exception object instead of a value.
---

traceback.format_exception_only(_exc_ , _/_ , [_value_ , ]_*_ , _show_group=False_)[¶](https://docs.python.org/3/library/traceback.html#traceback.format_exception_only "Link to this definition")
    
Format the exception part of a traceback using an exception value such as given by [`sys.last_value`](https://docs.python.org/3/library/sys.html#sys.last_value "sys.last_value"). The return value is a list of strings, each ending in a newline. The list contains the exception’s message, which is normally a single string; however, for [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") exceptions, it contains several lines that (when printed) display detailed information about where the syntax error occurred. Following the message, the list contains the exception’s [`notes`](https://docs.python.org/3/library/exceptions.html#BaseException.__notes__ "BaseException.__notes__").
Since Python 3.10, instead of passing _value_ , an exception object can be passed as the first argument. If _value_ is provided, the first argument is ignored in order to provide backwards compatibility.
When _show_group_ is `True`, and the exception is an instance of [`BaseExceptionGroup`](https://docs.python.org/3/library/exceptions.html#BaseExceptionGroup "BaseExceptionGroup"), the nested exceptions are included as well, recursively, with indentation relative to their nesting depth.
Changed in version 3.10: The _etype_ parameter has been renamed to _exc_ and is now positional-only.
Changed in version 3.11: The returned list now includes any [`notes`](https://docs.python.org/3/library/exceptions.html#BaseException.__notes__ "BaseException.__notes__") attached to the exception.
Changed in version 3.13: _show_group_ parameter was added. 

traceback.format_exception(_exc_ , _/_ , [_value_ , _tb_ , ]_limit=None_ , _chain=True_)[¶](https://docs.python.org/3/library/traceback.html#traceback.format_exception "Link to this definition")
    
Format a stack trace and the exception information. The arguments have the same meaning as the corresponding arguments to [`print_exception()`](https://docs.python.org/3/library/traceback.html#traceback.print_exception "traceback.print_exception"). The return value is a list of strings, each ending in a newline and some containing internal newlines. When these lines are concatenated and printed, exactly the same text is printed as does [`print_exception()`](https://docs.python.org/3/library/traceback.html#traceback.print_exception "traceback.print_exception").
Changed in version 3.5: The _etype_ argument is ignored and inferred from the type of _value_.
Changed in version 3.10: This function’s behavior and signature were modified to match [`print_exception()`](https://docs.python.org/3/library/traceback.html#traceback.print_exception "traceback.print_exception"). 

traceback.format_exc(_limit =None_, _chain =True_)[¶](https://docs.python.org/3/library/traceback.html#traceback.format_exc "Link to this definition")
    
This is like `print_exc(limit)` but returns a string instead of printing to a file. 

traceback.format_tb(_tb_ , _limit =None_)[¶](https://docs.python.org/3/library/traceback.html#traceback.format_tb "Link to this definition")
    
A shorthand for `format_list(extract_tb(tb, limit))`. 

traceback.format_stack(_f =None_, _limit =None_)[¶](https://docs.python.org/3/library/traceback.html#traceback.format_stack "Link to this definition")
    
A shorthand for `format_list(extract_stack(f, limit))`. 

traceback.clear_frames(_tb_)[¶](https://docs.python.org/3/library/traceback.html#traceback.clear_frames "Link to this definition")
    
Clears the local variables of all the stack frames in a [traceback](https://docs.python.org/3/reference/datamodel.html#traceback-objects) _tb_ by calling the [`clear()`](https://docs.python.org/3/reference/datamodel.html#frame.clear "frame.clear") method of each [frame object](https://docs.python.org/3/reference/datamodel.html#frame-objects).
Added in version 3.4. 

traceback.walk_stack(_f_)[¶](https://docs.python.org/3/library/traceback.html#traceback.walk_stack "Link to this definition")
    
Walk a stack following [`f.f_back`](https://docs.python.org/3/reference/datamodel.html#frame.f_back "frame.f_back") from the given frame, yielding the frame and line number for each frame. If _f_ is `None`, the current stack is used. This helper is used with [`StackSummary.extract()`](https://docs.python.org/3/library/traceback.html#traceback.StackSummary.extract "traceback.StackSummary.extract").
Added in version 3.5.