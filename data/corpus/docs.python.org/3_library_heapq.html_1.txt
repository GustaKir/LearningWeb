Title: Heap Queue (Priority Queue) Operations
URL: https://docs.python.org/3/library/heapq.html
Summary: This section details functions for heap queue operations in Python's heapq module, including 'heappushpop', which efficiently pushes and pops the smallest item, 'heapify' for transforming a list into a heap in-place, and 'heapreplace', which pops the smallest item and pushes a new item without changing the heap size.
---

heapq.heappushpop(_heap_ , _item_)[¶](https://docs.python.org/3/library/heapq.html#heapq.heappushpop "Link to this definition")
    
Push _item_ on the heap, then pop and return the smallest item from the _heap_. The combined action runs more efficiently than [`heappush()`](https://docs.python.org/3/library/heapq.html#heapq.heappush "heapq.heappush") followed by a separate call to [`heappop()`](https://docs.python.org/3/library/heapq.html#heapq.heappop "heapq.heappop"). 

heapq.heapify(_x_)[¶](https://docs.python.org/3/library/heapq.html#heapq.heapify "Link to this definition")
    
Transform list _x_ into a heap, in-place, in linear time. 

heapq.heapreplace(_heap_ , _item_)[¶](https://docs.python.org/3/library/heapq.html#heapq.heapreplace "Link to this definition")
    
Pop and return the smallest item from the _heap_ , and also push the new _item_. The heap size doesn’t change. If the heap is empty, [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError "IndexError") is raised.
This one step operation is more efficient than a [`heappop()`](https://docs.python.org/3/library/heapq.html#heapq.heappop "heapq.heappop") followed by [`heappush()`](https://docs.python.org/3/library/heapq.html#heapq.heappush "heapq.heappush") and can be more appropriate when using a fixed-size heap. The pop/push combination always returns an element from the heap and replaces it with _item_.
The value returned may be larger than the _item_ added. If that isn’t desired, consider using [`heappushpop()`](https://docs.python.org/3/library/heapq.html#heapq.heappushpop "heapq.heappushpop") instead. Its push/pop combination returns the smaller of the two values, leaving the larger value on the heap.
The module also offers three general purpose functions based on heaps. 

heapq.merge(_* iterables_, _key =None_, _reverse =False_)[¶](https://docs.python.org/3/library/heapq.html#heapq.merge "Link to this definition")
    
Merge multiple sorted inputs into a single sorted output (for example, merge timestamped entries from multiple log files). Returns an [iterator](https://docs.python.org/3/glossary.html#term-iterator) over the sorted values.
Similar to `sorted(itertools.chain(*iterables))` but returns an iterable, does not pull the data into memory all at once, and assumes that each of the input streams is already sorted (smallest to largest).
Has two optional arguments which must be specified as keyword arguments.
_key_ specifies a [key function](https://docs.python.org/3/glossary.html#term-key-function) of one argument that is used to extract a comparison key from each input element. The default value is `None` (compare the elements directly).
_reverse_ is a boolean value. If set to `True`, then the input elements are merged as if each comparison were reversed. To achieve behavior similar to `sorted(itertools.chain(*iterables), reverse=True)`, all iterables must be sorted from largest to smallest.
Changed in version 3.5: Added the optional _key_ and _reverse_ parameters. 

heapq.nlargest(_n_ , _iterable_ , _key =None_)[¶](https://docs.python.org/3/library/heapq.html#heapq.nlargest "Link to this definition")
    
Return a list with the _n_ largest elements from the dataset defined by _iterable_. _key_ , if provided, specifies a function of one argument that is used to extract a comparison key from each element in _iterable_ (for example, `key=str.lower`). Equivalent to: `sorted(iterable, key=key, reverse=True)[:n]`. 

heapq.nsmallest(_n_ , _iterable_ , _key =None_)[¶](https://docs.python.org/3/library/heapq.html#heapq.nsmallest "Link to this definition")
    
Return a list with the _n_ smallest elements from the dataset defined by _iterable_. _key_ , if provided, specifies a function of one argument that is used to extract a comparison key from each element in _iterable_ (for example, `key=str.lower`). Equivalent to: `sorted(iterable, key=key)[:n]`.
The latter two functions perform best for smaller values of _n_. For larger values, it is more efficient to use the [`sorted()`](https://docs.python.org/3/library/functions.html#sorted "sorted") function. Also, when `n==1`, it is more efficient to use the built-in [`min()`](https://docs.python.org/3/library/functions.html#min "min") and [`max()`](https://docs.python.org/3/library/functions.html#max "max") functions. If repeated usage of these functions is required, consider turning the iterable into an actual heap.
## Basic Examples[¶](https://docs.python.org/3/library/heapq.html#basic-examples "Link to this heading")
A [heapsort](https://en.wikipedia.org/wiki/Heapsort) can be implemented by pushing all values onto a heap and then popping off the smallest values one at a time:
>>>```
>>> defheapsort(iterable):
...   h = []
...   for value in iterable:
...     heappush(h, value)
...   return [heappop(h) for i in range(len(h))]
...
>>> heapsort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]