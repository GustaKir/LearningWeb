Title: unittest Command-line Options
URL: https://docs.python.org/3/library/unittest.html
Summary: This section details the command-line options available in the unittest module, including the buffer option that discards output during passing tests and the catch option that allows for a controlled interruption of test execution.
---

```

Changed in version 3.2: In earlier versions it was only possible to run individual test methods and not modules or classes.
### Command-line options[¶](https://docs.python.org/3/library/unittest.html#command-line-options "Link to this heading")
**unittest** supports these command-line options: 

-b, --buffer[¶](https://docs.python.org/3/library/unittest.html#cmdoption-unittest-b "Link to this definition")
    
The standard output and standard error streams are buffered during the test run. Output during a passing test is discarded. Output is echoed normally on test fail or error and is added to the failure messages. 

-c, --catch[¶](https://docs.python.org/3/library/unittest.html#cmdoption-unittest-c "Link to this definition")
    
`Control`-`C` during the test run waits for the current test to end and then reports all the results so far. A second `Control`-`C` raises the normal [`KeyboardInterrupt`](https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt "KeyboardInterrupt") exception.
See [Signal Handling](https://docs.python.org/3/library/unittest.html#signal-handling) for the functions that provide this functionality. 

-f, --failfast[¶](https://docs.python.org/3/library/unittest.html#cmdoption-unittest-f "Link to this definition")
    
Stop the test run on the first error or failure. 

-k[¶](https://docs.python.org/3/library/unittest.html#cmdoption-unittest-k "Link to this definition")
    
Only run test methods and classes that match the pattern or substring. This option may be used multiple times, in which case all test cases that match any of the given patterns are included.
Patterns that contain a wildcard character (`*`) are matched against the test name using [`fnmatch.fnmatchcase()`](https://docs.python.org/3/library/fnmatch.html#fnmatch.fnmatchcase "fnmatch.fnmatchcase"); otherwise simple case-sensitive substring matching is used.
Patterns are matched against the fully qualified test method name as imported by the test loader.
For example, `-k foo` matches `foo_tests.SomeTest.test_something`, `bar_tests.SomeTest.test_foo`, but not `bar_tests.FooTest.test_something`. 

--locals[¶](https://docs.python.org/3/library/unittest.html#cmdoption-unittest-locals "Link to this definition")
    
Show local variables in tracebacks. 

--durations N[¶](https://docs.python.org/3/library/unittest.html#cmdoption-unittest-durations "Link to this definition")
    
Show the N slowest test cases (N=0 for all).
Added in version 3.2: The command-line options `-b`, `-c` and `-f` were added.
Added in version 3.5: The command-line option `--locals`.
Added in version 3.7: The command-line option `-k`.
Added in version 3.12: The command-line option `--durations`.
The command line can also be used for test discovery, for running all of the tests in a project or just a subset.
## Test Discovery[¶](https://docs.python.org/3/library/unittest.html#test-discovery "Link to this heading")
Added in version 3.2.
Unittest supports simple test discovery. In order to be compatible with test discovery, all of the test files must be [modules](https://docs.python.org/3/tutorial/modules.html#tut-modules) or [packages](https://docs.python.org/3/tutorial/modules.html#tut-packages) importable from the top-level directory of the project (this means that their filenames must be valid [identifiers](https://docs.python.org/3/reference/lexical_analysis.html#identifiers)).
Test discovery is implemented in [`TestLoader.discover()`](https://docs.python.org/3/library/unittest.html#unittest.TestLoader.discover "unittest.TestLoader.discover"), but can also be used from the command line. The basic command-line usage is:
```
cd project_directory
python -m unittest discover