Title: Test Case Identification and Description in unittest
URL: https://docs.python.org/3/library/unittest.html
Summary: This section discusses methods in the unittest framework for Python, specifically 'id()', which returns the full name of a test case, and 'shortDescription()', which provides a brief description based on the test method’s docstring. It also notes changes made to 'shortDescription()' in version 3.1 and subsequent adjustments in version 3.2.
---

id()[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.id "Link to this definition")
    
Return a string identifying the specific test case. This is usually the full name of the test method, including the module and class name. 

shortDescription()[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.shortDescription "Link to this definition")
    
Returns a description of the test, or `None` if no description has been provided. The default implementation of this method returns the first line of the test method’s docstring, if available, or `None`.
Changed in version 3.1: In 3.1 this was changed to add the test name to the short description even in the presence of a docstring. This caused compatibility issues with unittest extensions and adding the test name was moved to the [`TextTestResult`](https://docs.python.org/3/library/unittest.html#unittest.TextTestResult "unittest.TextTestResult") in Python 3.2. 

addCleanup(_function_ , _/_ , _* args_, _** kwargs_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.addCleanup "Link to this definition")
    
Add a function to be called after [`tearDown()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.tearDown "unittest.TestCase.tearDown") to cleanup resources used during the test. Functions will be called in reverse order to the order they are added (LIFO). They are called with any arguments and keyword arguments passed into [`addCleanup()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.addCleanup "unittest.TestCase.addCleanup") when they are added.
If [`setUp()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.setUp "unittest.TestCase.setUp") fails, meaning that [`tearDown()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.tearDown "unittest.TestCase.tearDown") is not called, then any cleanup functions added will still be called.
Added in version 3.1. 

enterContext(_cm_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.enterContext "Link to this definition")
    
Enter the supplied [context manager](https://docs.python.org/3/glossary.html#term-context-manager). If successful, also add its [`__exit__()`](https://docs.python.org/3/reference/datamodel.html#object.__exit__ "object.__exit__") method as a cleanup function by [`addCleanup()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.addCleanup "unittest.TestCase.addCleanup") and return the result of the [`__enter__()`](https://docs.python.org/3/reference/datamodel.html#object.__enter__ "object.__enter__") method.
Added in version 3.11. 

doCleanups()[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.doCleanups "Link to this definition")
    
This method is called unconditionally after [`tearDown()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.tearDown "unittest.TestCase.tearDown"), or after [`setUp()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.setUp "unittest.TestCase.setUp") if [`setUp()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.setUp "unittest.TestCase.setUp") raises an exception.
It is responsible for calling all the cleanup functions added by [`addCleanup()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.addCleanup "unittest.TestCase.addCleanup"). If you need cleanup functions to be called _prior_ to [`tearDown()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.tearDown "unittest.TestCase.tearDown") then you can call [`doCleanups()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.doCleanups "unittest.TestCase.doCleanups") yourself.
[`doCleanups()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.doCleanups "unittest.TestCase.doCleanups") pops methods off the stack of cleanup functions one at a time, so it can be called at any time.
Added in version 3.1.