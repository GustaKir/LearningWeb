Title: multiprocessing.Array
URL: https://docs.python.org/3/library/multiprocessing.html
Summary: The `multiprocessing.Array` function creates a ctypes array allocated from shared memory. It accepts a type code or ctypes type for its elements and either an integer for its size or an initializer sequence. By default, it returns a synchronized wrapper for the array, and it includes a keyword-only argument `_lock` which, when set to `True`, creates a lock for the array.
---

```

Note that _lock_ is a keyword-only argument. 

multiprocessing.Array(_typecode_or_type_ , _size_or_initializer_ , _*_ , _lock =True_)[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Array "Link to this definition")
    
Return a ctypes array allocated from shared memory. By default the return value is actually a synchronized wrapper for the array.
_typecode_or_type_ determines the type of the elements of the returned array: it is either a ctypes type or a one character typecode of the kind used by the [`array`](https://docs.python.org/3/library/array.html#module-array "array: Space efficient arrays of uniformly typed numeric values.") module. If _size_or_initializer_ is an integer, then it determines the length of the array, and the array will be initially zeroed. Otherwise, _size_or_initializer_ is a sequence which is used to initialize the array and whose length determines the length of the array.
If _lock_ is `True` (the default) then a new lock object is created to synchronize access to the value. If _lock_ is a [`Lock`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Lock "multiprocessing.Lock") or [`RLock`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.RLock "multiprocessing.RLock") object then that will be used to synchronize access to the value. If _lock_ is `False` then access to the returned object will not be automatically protected by a lock, so it will not necessarily be “process-safe”.
Note that _lock_ is a keyword only argument.
Note that an array of [`ctypes.c_char`](https://docs.python.org/3/library/ctypes.html#ctypes.c_char "ctypes.c_char") has _value_ and _raw_ attributes which allow one to use it to store and retrieve strings.
#### The [`multiprocessing.sharedctypes`](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.sharedctypes "multiprocessing.sharedctypes: Allocate ctypes objects from shared memory.") module[¶](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.sharedctypes "Link to this heading")
The [`multiprocessing.sharedctypes`](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing.sharedctypes "multiprocessing.sharedctypes: Allocate ctypes objects from shared memory.") module provides functions for allocating [`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "ctypes: A foreign function library for Python.") objects from shared memory which can be inherited by child processes.
Note
Although it is possible to store a pointer in shared memory remember that this will refer to a location in the address space of a specific process. However, the pointer is quite likely to be invalid in the context of a second process and trying to dereference the pointer from the second process may cause a crash. 

multiprocessing.sharedctypes.RawArray(_typecode_or_type_ , _size_or_initializer_)[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.sharedctypes.RawArray "Link to this definition")
    
Return a ctypes array allocated from shared memory.
_typecode_or_type_ determines the type of the elements of the returned array: it is either a ctypes type or a one character typecode of the kind used by the [`array`](https://docs.python.org/3/library/array.html#module-array "array: Space efficient arrays of uniformly typed numeric values.") module. If _size_or_initializer_ is an integer then it determines the length of the array, and the array will be initially zeroed. Otherwise _size_or_initializer_ is a sequence which is used to initialize the array and whose length determines the length of the array.
Note that setting and getting an element is potentially non-atomic – use [`Array()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.sharedctypes.Array "multiprocessing.sharedctypes.Array") instead to make sure that access is automatically synchronized using a lock.