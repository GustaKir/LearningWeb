Title: Python C API: Thread State Management
URL: https://docs.python.org/3/c-api/init.html
Summary: This section discusses functions for managing thread state in Python's C API. The `PyThreadState_Clear` function resets all information in a thread state object and requires that the global interpreter lock be held. Notably, changes in versions 3.9 and 3.13 regarding the `on_delete` callback are highlighted. Additionally, the `PyThreadState_Delete` function is introduced, although details are incomplete.
---

voidPyThreadState_Clear([PyThreadState](https://docs.python.org/3/c-api/init.html#c.PyThreadState "PyThreadState")*tstate)[¶](https://docs.python.org/3/c-api/init.html#c.PyThreadState_Clear "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Reset all information in a thread state object. The global interpreter lock must be held.
Changed in version 3.9: This function now calls the `PyThreadState.on_delete` callback. Previously, that happened in [`PyThreadState_Delete()`](https://docs.python.org/3/c-api/init.html#c.PyThreadState_Delete "PyThreadState_Delete").
Changed in version 3.13: The `PyThreadState.on_delete` callback was removed. 

voidPyThreadState_Delete([PyThreadState](https://docs.python.org/3/c-api/init.html#c.PyThreadState "PyThreadState")*tstate)[¶](https://docs.python.org/3/c-api/init.html#c.PyThreadState_Delete "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Destroy a thread state object. The global interpreter lock need not be held. The thread state must have been reset with a previous call to [`PyThreadState_Clear()`](https://docs.python.org/3/c-api/init.html#c.PyThreadState_Clear "PyThreadState_Clear"). 

voidPyThreadState_DeleteCurrent(void)[¶](https://docs.python.org/3/c-api/init.html#c.PyThreadState_DeleteCurrent "Link to this definition")
    
Destroy the current thread state and release the global interpreter lock. Like [`PyThreadState_Delete()`](https://docs.python.org/3/c-api/init.html#c.PyThreadState_Delete "PyThreadState_Delete"), the global interpreter lock must be held. The thread state must have been reset with a previous call to [`PyThreadState_Clear()`](https://docs.python.org/3/c-api/init.html#c.PyThreadState_Clear "PyThreadState_Clear"). 

[PyFrameObject](https://docs.python.org/3/c-api/frame.html#c.PyFrameObject "PyFrameObject")*PyThreadState_GetFrame([PyThreadState](https://docs.python.org/3/c-api/init.html#c.PyThreadState "PyThreadState")*tstate)[¶](https://docs.python.org/3/c-api/init.html#c.PyThreadState_GetFrame "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.10._
Get the current frame of the Python thread state _tstate_.
Return a [strong reference](https://docs.python.org/3/glossary.html#term-strong-reference). Return `NULL` if no frame is currently executing.
See also [`PyEval_GetFrame()`](https://docs.python.org/3/c-api/reflection.html#c.PyEval_GetFrame "PyEval_GetFrame").
_tstate_ must not be `NULL`.
Added in version 3.9. 

uint64_tPyThreadState_GetID([PyThreadState](https://docs.python.org/3/c-api/init.html#c.PyThreadState "PyThreadState")*tstate)[¶](https://docs.python.org/3/c-api/init.html#c.PyThreadState_GetID "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.10._
Get the unique thread state identifier of the Python thread state _tstate_.
_tstate_ must not be `NULL`.
Added in version 3.9. 

[PyInterpreterState](https://docs.python.org/3/c-api/init.html#c.PyInterpreterState "PyInterpreterState")*PyThreadState_GetInterpreter([PyThreadState](https://docs.python.org/3/c-api/init.html#c.PyThreadState "PyThreadState")*tstate)[¶](https://docs.python.org/3/c-api/init.html#c.PyThreadState_GetInterpreter "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.10._
Get the interpreter of the Python thread state _tstate_.
_tstate_ must not be `NULL`.
Added in version 3.9. 

voidPyThreadState_EnterTracing([PyThreadState](https://docs.python.org/3/c-api/init.html#c.PyThreadState "PyThreadState")*tstate)[¶](https://docs.python.org/3/c-api/init.html#c.PyThreadState_EnterTracing "Link to this definition")
    
Suspend tracing and profiling in the Python thread state _tstate_.
Resume them using the [`PyThreadState_LeaveTracing()`](https://docs.python.org/3/c-api/init.html#c.PyThreadState_LeaveTracing "PyThreadState_LeaveTracing") function.
Added in version 3.11. 

voidPyThreadState_LeaveTracing([PyThreadState](https://docs.python.org/3/c-api/init.html#c.PyThreadState "PyThreadState")*tstate)[¶](https://docs.python.org/3/c-api/init.html#c.PyThreadState_LeaveTracing "Link to this definition")
    
Resume tracing and profiling in the Python thread state _tstate_ suspended by the [`PyThreadState_EnterTracing()`](https://docs.python.org/3/c-api/init.html#c.PyThreadState_EnterTracing "PyThreadState_EnterTracing") function.
See also [`PyEval_SetTrace()`](https://docs.python.org/3/c-api/init.html#c.PyEval_SetTrace "PyEval_SetTrace") and [`PyEval_SetProfile()`](https://docs.python.org/3/c-api/init.html#c.PyEval_SetProfile "PyEval_SetProfile") functions.
Added in version 3.11.