Title: Interpreter Changes and Fixes in Python 2.2
URL: https://docs.python.org/3/whatsnew/2.2.html
Summary: This section outlines changes to the Python interpreter that primarily affect developers working at the C level, such as those creating extension modules or embedding the interpreter. Key updates include the ability to implement profiling and tracing functions in C for enhanced performance, which benefits development environment authors.
---

## Interpreter Changes and Fixes[¶](https://docs.python.org/3/whatsnew/2.2.html#interpreter-changes-and-fixes "Link to this heading")
Some of the changes only affect people who deal with the Python interpreter at the C level because they’re writing Python extension modules, embedding the interpreter, or just hacking on the interpreter itself. If you only write Python code, none of the changes described here will affect you very much.
  * Profiling and tracing functions can now be implemented in C, which can operate at much higher speeds than Python-based functions and should reduce the overhead of profiling and tracing. This will be of interest to authors of development environments for Python. Two new C functions were added to Python’s API, [`PyEval_SetProfile()`](https://docs.python.org/3/c-api/init.html#c.PyEval_SetProfile "PyEval_SetProfile") and [`PyEval_SetTrace()`](https://docs.python.org/3/c-api/init.html#c.PyEval_SetTrace "PyEval_SetTrace"). The existing [`sys.setprofile()`](https://docs.python.org/3/library/sys.html#sys.setprofile "sys.setprofile") and [`sys.settrace()`](https://docs.python.org/3/library/sys.html#sys.settrace "sys.settrace") functions still exist, and have simply been changed to use the new C-level interface. (Contributed by Fred L. Drake, Jr.)
  * Another low-level API, primarily of interest to implementers of Python debuggers and development tools, was added. [`PyInterpreterState_Head()`](https://docs.python.org/3/c-api/init.html#c.PyInterpreterState_Head "PyInterpreterState_Head") and [`PyInterpreterState_Next()`](https://docs.python.org/3/c-api/init.html#c.PyInterpreterState_Next "PyInterpreterState_Next") let a caller walk through all the existing interpreter objects; [`PyInterpreterState_ThreadHead()`](https://docs.python.org/3/c-api/init.html#c.PyInterpreterState_ThreadHead "PyInterpreterState_ThreadHead") and [`PyThreadState_Next()`](https://docs.python.org/3/c-api/init.html#c.PyThreadState_Next "PyThreadState_Next") allow looping over all the thread states for a given interpreter. (Contributed by David Beazley.)
  * The C-level interface to the garbage collector has been changed to make it easier to write extension types that support garbage collection and to debug misuses of the functions. Various functions have slightly different semantics, so a bunch of functions had to be renamed. Extensions that use the old API will still compile but will _not_ participate in garbage collection, so updating them for 2.2 should be considered fairly high priority.
To upgrade an extension module to the new API, perform the following steps:
  * Rename `Py_TPFLAGS_GC` to [`Py_TPFLAGS_HAVE_GC`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_HAVE_GC "Py_TPFLAGS_HAVE_GC").
  *