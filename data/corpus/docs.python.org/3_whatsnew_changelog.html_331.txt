Title: Python 3 Change Log Updates
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: Recent patches introduced improvements like enhancing the @functools.total_ordering() decorator compatibility with metaclasses, fixing issues with __name__ and __qualname__ attributes in special forms, and refining error handling in sqlite3 for MemoryError and OverflowError.
---

Patch by Victor Stinner.
  * [bpo-44605](https://bugs.python.org/issue?@action=redirect&bpo=44605): The @functools.total_ordering() decorator now works with metaclasses.
  * [bpo-44524](https://bugs.python.org/issue?@action=redirect&bpo=44524): Fixed an issue wherein the `__name__` and `__qualname__` attributes of subscribed specialforms could be `None`.
  * [bpo-44839](https://bugs.python.org/issue?@action=redirect&bpo=44839): [`MemoryError`](https://docs.python.org/3/library/exceptions.html#MemoryError "MemoryError") raised in user-defined functions will now produce a `MemoryError` in [`sqlite3`](https://docs.python.org/3/library/sqlite3.html#module-sqlite3 "sqlite3: A DB-API 2.0 implementation using SQLite 3.x."). [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError") will now be converted to [`DataError`](https://docs.python.org/3/library/sqlite3.html#sqlite3.DataError "sqlite3.DataError"). Previously [`OperationalError`](https://docs.python.org/3/library/sqlite3.html#sqlite3.OperationalError "sqlite3.OperationalError") was produced in these cases.
  * [bpo-44822](https://bugs.python.org/issue?@action=redirect&bpo=44822): [`sqlite3`](https://docs.python.org/3/library/sqlite3.html#module-sqlite3 "sqlite3: A DB-API 2.0 implementation using SQLite 3.x.") user-defined functions and aggregators returning [`strings`](https://docs.python.org/3/library/stdtypes.html#str "str") with embedded NUL characters are no longer truncated. Patch by Erlend E. Aasland.
  * [bpo-44801](https://bugs.python.org/issue?@action=redirect&bpo=44801): Ensure that the [`ParamSpec`](https://docs.python.org/3/library/typing.html#typing.ParamSpec "typing.ParamSpec") variable in Callable can only be substituted with a parameters expression (a list of types, an ellipsis, ParamSpec or Concatenate).
  * [bpo-44806](https://bugs.python.org/issue?@action=redirect&bpo=44806): Non-protocol subclasses of [`typing.Protocol`](https://docs.python.org/3/library/typing.html#typing.Protocol "typing.Protocol") ignore now the `__init__` method inherited from protocol base classes.
  * [bpo-27275](https://bugs.python.org/issue?@action=redirect&bpo=27275): [`collections.OrderedDict.popitem()`](https://docs.python.org/3/library/collections.html#collections.OrderedDict.popitem "collections.OrderedDict.popitem") and `collections.OrderedDict.pop()` no longer call `__getitem__` and `__delitem__` methods of the OrderedDict subclasses.
  * [bpo-44793](https://bugs.python.org/issue?@action=redirect&bpo=44793): Fix checking the number of arguments when subscribe a generic type with `ParamSpec` parameter.
  * [bpo-44784](https://bugs.python.org/issue?@action=redirect&bpo=44784): In importlib.metadata tests, override warnings behavior under expected DeprecationWarnings (importlib_metadata 4.6.3).
  * [bpo-44667](https://bugs.python.org/issue?@action=redirect&bpo=44667): The [`tokenize.tokenize()`](https://docs.python.org/3/library/tokenize.html#tokenize.tokenize "tokenize.tokenize") doesn’t incorrectly generate a `NEWLINE` token if the source doesn’t end with a new line character but the last line is a comment, as the function is already generating a `NL` token. Patch by Pablo Galindo
  * [bpo-44771](https://bugs.python.org/issue?@action=redirect&bpo=44771): Added `importlib.simple` module implementing adapters from a low-level resources reader interface to a `TraversableResources` interface. Legacy API (`path`, `contents`, …) is now supported entirely by the `.files()` API with a compatibility shim supplied for resource loaders without that functionality. Feature parity with `importlib_resources` 5.2.
  * [bpo-44752](https://bugs.python.org/issue?@action=redirect&bpo=44752): `rcompleter` does not call [`getattr()`](https://docs.python.org/3/library/functions.html#getattr "getattr") on [`property`](https://docs.python.org/3/library/functions.html#property "property") objects to avoid the side-effect of evaluating the corresponding method.
  * [bpo-44747](https://bugs.python.org/issue?@action=redirect&bpo=44747): Refactor usage of `sys._getframe` in `typing` module. Patch provided by Yurii Karabas.
  * [bpo-42378](https://bugs.python.org/issue?@action=redirect&bpo=42378): Fixes the issue with log file being overwritten when [`logging.FileHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.FileHandler "logging.FileHandler") is used in [`atexit`](https://docs.python.org/3/library/atexit.html#module-atexit "atexit: Register and execute cleanup functions.") with _filemode_ set to `'w'`.