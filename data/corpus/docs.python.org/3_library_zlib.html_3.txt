Title: Zlib Compression and Decompression Methods
URL: https://docs.python.org/3/library/zlib.html
Summary: This documentation chunk provides details on methods associated with the zlib compression and decompression objects. It explains the 'copy()' method for creating a copy of a compression object, allowing efficient data compression with a shared prefix. Additionally, it covers attributes like 'unused_data', which holds bytes beyond the compressed data, and 'unconsumed_tail' for unprocessed data.
---

Compress.copy()[¶](https://docs.python.org/3/library/zlib.html#zlib.Compress.copy "Link to this definition")
    
Returns a copy of the compression object. This can be used to efficiently compress a set of data that share a common initial prefix.
Changed in version 3.8: Added [`copy.copy()`](https://docs.python.org/3/library/copy.html#copy.copy "copy.copy") and [`copy.deepcopy()`](https://docs.python.org/3/library/copy.html#copy.deepcopy "copy.deepcopy") support to compression objects.
Decompression objects support the following methods and attributes: 

Decompress.unused_data[¶](https://docs.python.org/3/library/zlib.html#zlib.Decompress.unused_data "Link to this definition")
    
A bytes object which contains any bytes past the end of the compressed data. That is, this remains `b""` until the last byte that contains compression data is available. If the whole bytestring turned out to contain compressed data, this is `b""`, an empty bytes object. 

Decompress.unconsumed_tail[¶](https://docs.python.org/3/library/zlib.html#zlib.Decompress.unconsumed_tail "Link to this definition")
    
A bytes object that contains any data that was not consumed by the last [`decompress()`](https://docs.python.org/3/library/zlib.html#zlib.decompress "zlib.decompress") call because it exceeded the limit for the uncompressed data buffer. This data has not yet been seen by the zlib machinery, so you must feed it (possibly with further data concatenated to it) back to a subsequent [`decompress()`](https://docs.python.org/3/library/zlib.html#zlib.decompress "zlib.decompress") method call in order to get correct output. 

Decompress.eof[¶](https://docs.python.org/3/library/zlib.html#zlib.Decompress.eof "Link to this definition")
    
A boolean indicating whether the end of the compressed data stream has been reached.
This makes it possible to distinguish between a properly formed compressed stream, and an incomplete or truncated one.
Added in version 3.3. 

Decompress.decompress(_data_ , _max_length =0_)[¶](https://docs.python.org/3/library/zlib.html#zlib.Decompress.decompress "Link to this definition")
    
Decompress _data_ , returning a bytes object containing the uncompressed data corresponding to at least part of the data in _string_. This data should be concatenated to the output produced by any preceding calls to the [`decompress()`](https://docs.python.org/3/library/zlib.html#zlib.decompress "zlib.decompress") method. Some of the input data may be preserved in internal buffers for later processing.
If the optional parameter _max_length_ is non-zero then the return value will be no longer than _max_length_. This may mean that not all of the compressed input can be processed; and unconsumed data will be stored in the attribute [`unconsumed_tail`](https://docs.python.org/3/library/zlib.html#zlib.Decompress.unconsumed_tail "zlib.Decompress.unconsumed_tail"). This bytestring must be passed to a subsequent call to [`decompress()`](https://docs.python.org/3/library/zlib.html#zlib.decompress "zlib.decompress") if decompression is to continue. If _max_length_ is zero then the whole input is decompressed, and [`unconsumed_tail`](https://docs.python.org/3/library/zlib.html#zlib.Decompress.unconsumed_tail "zlib.Decompress.unconsumed_tail") is empty.
Changed in version 3.6: _max_length_ can be used as a keyword argument. 

Decompress.flush([_length_])[¶](https://docs.python.org/3/library/zlib.html#zlib.Decompress.flush "Link to this definition")
    
All pending input is processed, and a bytes object containing the remaining uncompressed output is returned. After calling [`flush()`](https://docs.python.org/3/library/zlib.html#zlib.Decompress.flush "zlib.Decompress.flush"), the [`decompress()`](https://docs.python.org/3/library/zlib.html#zlib.decompress "zlib.decompress") method cannot be called again; the only realistic action is to delete the object.
The optional parameter _length_ sets the initial size of the output buffer. 

Decompress.copy()[¶](https://docs.python.org/3/library/zlib.html#zlib.Decompress.copy "Link to this definition")
    
Returns a copy of the decompression object. This can be used to save the state of the decompressor midway through the data stream in order to speed up random seeks into the stream at a future point.
Changed in version 3.8: Added [`copy.copy()`](https://docs.python.org/3/library/copy.html#copy.copy "copy.copy") and [`copy.deepcopy()`](https://docs.python.org/3/library/copy.html#copy.deepcopy "copy.deepcopy") support to decompression objects.
Information about the version of the zlib library in use is available through the following constants: