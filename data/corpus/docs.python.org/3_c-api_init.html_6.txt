Title: Py_Initialize Function
URL: https://docs.python.org/3/c-api/init.html
Summary: The `Py_Initialize` function initializes the Python interpreter in applications embedding Python. It must be called before using any other Python/C API functions, except for a few exceptions. This function sets up the module table (`sys.modules`) and creates essential modules including `builtins`, `__main__`, and `sys`.
---

voidPy_Initialize()[¶](https://docs.python.org/3/c-api/init.html#c.Py_Initialize "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Initialize the Python interpreter. In an application embedding Python, this should be called before using any other Python/C API functions; see [Before Python Initialization](https://docs.python.org/3/c-api/init.html#pre-init-safe) for the few exceptions.
This initializes the table of loaded modules (`sys.modules`), and creates the fundamental modules [`builtins`](https://docs.python.org/3/library/builtins.html#module-builtins "builtins: The module that provides the built-in namespace."), [`__main__`](https://docs.python.org/3/library/__main__.html#module-__main__ "__main__: The environment where top-level code is run. Covers command-line interfaces, import-time behavior, and ``__name__ == '__main__'``.") and [`sys`](https://docs.python.org/3/library/sys.html#module-sys "sys: Access system-specific parameters and functions."). It also initializes the module search path (`sys.path`). It does not set `sys.argv`; use the [Python Initialization Configuration](https://docs.python.org/3/c-api/init_config.html#init-config) API for that. This is a no-op when called for a second time (without calling [`Py_FinalizeEx()`](https://docs.python.org/3/c-api/init.html#c.Py_FinalizeEx "Py_FinalizeEx") first). There is no return value; it is a fatal error if the initialization fails.
Use [`Py_InitializeFromConfig()`](https://docs.python.org/3/c-api/init.html#c.Py_InitializeFromConfig "Py_InitializeFromConfig") to customize the [Python Initialization Configuration](https://docs.python.org/3/c-api/init_config.html#init-config).
Note
On Windows, changes the console mode from `O_TEXT` to `O_BINARY`, which will also affect non-Python uses of the console using the C Runtime. 

voidPy_InitializeEx(intinitsigs)[¶](https://docs.python.org/3/c-api/init.html#c.Py_InitializeEx "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
This function works like [`Py_Initialize()`](https://docs.python.org/3/c-api/init.html#c.Py_Initialize "Py_Initialize") if _initsigs_ is `1`. If _initsigs_ is `0`, it skips initialization registration of signal handlers, which may be useful when CPython is embedded as part of a larger application.
Use [`Py_InitializeFromConfig()`](https://docs.python.org/3/c-api/init.html#c.Py_InitializeFromConfig "Py_InitializeFromConfig") to customize the [Python Initialization Configuration](https://docs.python.org/3/c-api/init_config.html#init-config). 

[PyStatus](https://docs.python.org/3/c-api/init_config.html#c.PyStatus "PyStatus")Py_InitializeFromConfig(const[PyConfig](https://docs.python.org/3/c-api/init_config.html#c.PyConfig "PyConfig")*config)[¶](https://docs.python.org/3/c-api/init.html#c.Py_InitializeFromConfig "Link to this definition")
    
Initialize Python from _config_ configuration, as described in [Initialization with PyConfig](https://docs.python.org/3/c-api/init_config.html#init-from-config).
See the [Python Initialization Configuration](https://docs.python.org/3/c-api/init_config.html#init-config) section for details on pre-initializing the interpreter, populating the runtime configuration structure, and querying the returned status structure. 

intPy_IsInitialized()[¶](https://docs.python.org/3/c-api/init.html#c.Py_IsInitialized "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return true (nonzero) when the Python interpreter has been initialized, false (zero) if not. After [`Py_FinalizeEx()`](https://docs.python.org/3/c-api/init.html#c.Py_FinalizeEx "Py_FinalizeEx") is called, this returns false until [`Py_Initialize()`](https://docs.python.org/3/c-api/init.html#c.Py_Initialize "Py_Initialize") is called again. 

intPy_IsFinalizing()[¶](https://docs.python.org/3/c-api/init.html#c.Py_IsFinalizing "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.13._
Return true (non-zero) if the main Python interpreter is [shutting down](https://docs.python.org/3/glossary.html#term-interpreter-shutdown). Return false (zero) otherwise.
Added in version 3.13.