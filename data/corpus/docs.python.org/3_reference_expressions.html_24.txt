Title: Boolean Operations in Python
URL: https://docs.python.org/3/reference/expressions.html
Summary: This section details how Boolean operations evaluate truth values in Python. It specifies that values such as `False`, `None`, numeric zero, and empty containers are interpreted as false, while all other values are true. User-defined objects can customize their truth values using the `__bool__()` method. It also explains the functionality of the `not`, `and`, and `or` operators, including the evaluation process for each.
---

```

In the context of Boolean operations, and also when expressions are used by control flow statements, the following values are interpreted as false: `False`, `None`, numeric zero of all types, and empty strings and containers (including strings, tuples, lists, dictionaries, sets and frozensets). All other values are interpreted as true. User-defined objects can customize their truth value by providing a [`__bool__()`](https://docs.python.org/3/reference/datamodel.html#object.__bool__ "object.__bool__") method.
The operator [`not`](https://docs.python.org/3/reference/expressions.html#not) yields `True` if its argument is false, `False` otherwise.
The expression `x and y` first evaluates _x_ ; if _x_ is false, its value is returned; otherwise, _y_ is evaluated and the resulting value is returned.
The expression `x or y` first evaluates _x_ ; if _x_ is true, its value is returned; otherwise, _y_ is evaluated and the resulting value is returned.
Note that neither [`and`](https://docs.python.org/3/reference/expressions.html#and) nor [`or`](https://docs.python.org/3/reference/expressions.html#or) restrict the value and type they return to `False` and `True`, but rather return the last evaluated argument. This is sometimes useful, e.g., if `s` is a string that should be replaced by a default value if it is empty, the expression `s or 'foo'` yields the desired value. Because [`not`](https://docs.python.org/3/reference/expressions.html#not) has to create a new value, it returns a boolean value regardless of the type of its argument (for example, `not 'foo'` produces `False` rather than `''`.)
## 6.12. Assignment expressions[¶](https://docs.python.org/3/reference/expressions.html#assignment-expressions "Link to this heading")
```
**assignment_expression** ::= [[identifier](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-identifier) ":="] [expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-expression)

```

An assignment expression (sometimes also called a “named expression” or “walrus”) assigns an [`expression`](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-expression) to an [`identifier`](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-identifier), while also returning the value of the [`expression`](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-expression).
One common use case is when handling matched regular expressions:
```
if matching := pattern.search(data):
  do_something(matching)

```

Or, when processing a file stream in chunks:
```
while chunk := file.read(9000):
  process(chunk)

```

Assignment expressions must be surrounded by parentheses when used as expression statements and when used as sub-expressions in slicing, conditional, lambda, keyword-argument, and comprehension-if expressions and in `assert`, `with`, and `assignment` statements. In all other places where they can be used, parentheses are not required, including in `if` and `while` statements.
Added in version 3.8: See [**PEP 572**](https://peps.python.org/pep-0572/) for more details about assignment expressions.
## 6.13. Conditional expressions[¶](https://docs.python.org/3/reference/expressions.html#conditional-expressions "Link to this heading")
```
**conditional_expression** ::= [or_test](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-or_test) ["if" [or_test](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-or_test) "else" [expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-expression)]
**expression**       ::= [conditional_expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-conditional_expression) | [lambda_expr](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-lambda_expr)

```

Conditional expressions (sometimes called a “ternary operator”) have the lowest priority of all Python operations.
The expression `x if C else y` first evaluates the condition, _C_ rather than _x_. If _C_ is true, _x_ is evaluated and its value is returned; otherwise, _y_ is evaluated and its value is returned.
See [**PEP 308**](https://peps.python.org/pep-0308/) for more details about conditional expressions.
## 6.14. Lambdas[¶](https://docs.python.org/3/reference/expressions.html#lambda "Link to this heading")
```
**lambda_expr** ::= "lambda" [[parameter_list](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-parameter_list)] ":" [expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-expression)