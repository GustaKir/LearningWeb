Title: Extracting Translatable Strings in Python
URL: https://docs.python.org/3/library/gettext.html
Summary: This section discusses marking strings for translation in Python, highlighting tools like GNU gettext, xgettext, Babel, and François Pinard’s xpot for extracting translatable strings. It also mentions Python's pure-Python versions, pygettext.py and msgfmt.py, which are designed specifically for Python source code.
---

```

In this example, the string `'writing a log message'` is marked as a candidate for translation, while the strings `'mylog.txt'` and `'w'` are not.
There are a few tools to extract the strings meant for translation. The original GNU **gettext** only supported C or C++ source code but its extended version **xgettext** scans code written in a number of languages, including Python, to find strings marked as translatable. [Babel](https://babel.pocoo.org/) is a Python internationalization library that includes a `pybabel` script to extract and compile message catalogs. François Pinard’s program called **xpot** does a similar job and is available as part of his [po-utils package](https://github.com/pinard/po-utils).
(Python also includes pure-Python versions of these programs, called **pygettext.py** and **msgfmt.py** ; some Python distributions will install them for you. **pygettext.py** is similar to **xgettext** , but only understands Python source code and cannot handle other programming languages such as C or C++. **pygettext.py** supports a command-line interface similar to **xgettext** ; for details on its use, run `pygettext.py --help`. **msgfmt.py** is binary compatible with GNU **msgfmt**. With these two programs, you may not need the GNU **gettext** package to internationalize your Python applications.)
**xgettext** , **pygettext** , and similar tools generate `.po` files that are message catalogs. They are structured human-readable files that contain every marked string in the source code, along with a placeholder for the translated versions of these strings.
Copies of these `.po` files are then handed over to the individual human translators who write translations for every supported natural language. They send back the completed language-specific versions as a `<language-name>.po` file that’s compiled into a machine-readable `.mo` binary catalog file using the **msgfmt** program. The `.mo` files are used by the [`gettext`](https://docs.python.org/3/library/gettext.html#module-gettext "gettext: Multilingual internationalization services.") module for the actual translation processing at run-time.
How you use the [`gettext`](https://docs.python.org/3/library/gettext.html#module-gettext "gettext: Multilingual internationalization services.") module in your code depends on whether you are internationalizing a single module or your entire application. The next two sections will discuss each case.
### Localizing your module[¶](https://docs.python.org/3/library/gettext.html#localizing-your-module "Link to this heading")
If you are localizing your module, you must take care not to make global changes, e.g. to the built-in namespace. You should not use the GNU **gettext** API but instead the class-based API.
Let’s say your module is called “spam” and the module’s various natural language translation `.mo` files reside in `/usr/share/locale` in GNU **gettext** format. Here’s what you would put at the top of your module:
```
importgettext
t = gettext.translation('spam', '/usr/share/locale')
_ = t.gettext

```

### Localizing your application[¶](https://docs.python.org/3/library/gettext.html#localizing-your-application "Link to this heading")
If you are localizing your application, you can install the `_()` function globally into the built-in namespace, usually in the main driver file of your application. This will let all your application-specific files just use `_('...')` without having to explicitly install it in each file.
In the simple case then, you need only add the following bit of code to the main driver file of your application:
```
importgettext
gettext.install('myapplication')

```

If you need to set the locale directory, you can pass it into the [`install()`](https://docs.python.org/3/library/gettext.html#gettext.install "gettext.install") function:
```
importgettext
gettext.install('myapplication', '/usr/share/locale')

```

### Changing languages on the fly[¶](https://docs.python.org/3/library/gettext.html#changing-languages-on-the-fly "Link to this heading")
If your program needs to support many languages at the same time, you may want to create multiple translation instances and then switch between them explicitly, like so:
```
importgettext
lang1 = gettext.translation('myapplication', languages=['en'])
lang2 = gettext.translation('myapplication', languages=['fr'])
lang3 = gettext.translation('myapplication', languages=['de'])
# start by using language1
lang1.install()
# ... time goes by, user selects language 2
lang2.install()
# ... more time goes by, user selects language 3
lang3.install()

```

### Deferred translations[¶](https://docs.python.org/3/library/gettext.html#deferred-translations "Link to this heading")
In most coding situations, strings are translated where they are coded. Occasionally however, you need to mark strings for translation, but defer actual translation until later. A classic example is: