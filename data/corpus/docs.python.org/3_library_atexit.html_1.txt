Title: Registering Exit Handlers in Python
URL: https://docs.python.org/3/library/atexit.html
Summary: The `atexit.register()` function allows you to register a function to be executed upon program termination, with optional arguments. Functions are called in reverse order of registration during normal termination. If an exception occurs during execution of exit handlers, a traceback is displayed unless it's a SystemExit exception.
---

atexit.register(_func_ , _* args_, _** kwargs_)[¶](https://docs.python.org/3/library/atexit.html#atexit.register "Link to this definition")
    
Register _func_ as a function to be executed at termination. Any optional arguments that are to be passed to _func_ must be passed as arguments to [`register()`](https://docs.python.org/3/library/atexit.html#atexit.register "atexit.register"). It is possible to register the same function and arguments more than once.
At normal program termination (for instance, if [`sys.exit()`](https://docs.python.org/3/library/sys.html#sys.exit "sys.exit") is called or the main module’s execution completes), all functions registered are called in last in, first out order. The assumption is that lower level modules will normally be imported before higher level modules and thus must be cleaned up later.
If an exception is raised during execution of the exit handlers, a traceback is printed (unless [`SystemExit`](https://docs.python.org/3/library/exceptions.html#SystemExit "SystemExit") is raised) and the exception information is saved. After all exit handlers have had a chance to run, the last exception to be raised is re-raised.
This function returns _func_ , which makes it possible to use it as a decorator.
Warning
Starting new threads or calling [`os.fork()`](https://docs.python.org/3/library/os.html#os.fork "os.fork") from a registered function can lead to race condition between the main Python runtime thread freeing thread states while internal [`threading`](https://docs.python.org/3/library/threading.html#module-threading "threading: Thread-based parallelism.") routines or the new process try to use that state. This can lead to crashes rather than clean shutdown.
Changed in version 3.12: Attempts to start a new thread or [`os.fork()`](https://docs.python.org/3/library/os.html#os.fork "os.fork") a new process in a registered function now leads to [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError"). 

atexit.unregister(_func_)[¶](https://docs.python.org/3/library/atexit.html#atexit.unregister "Link to this definition")
    
Remove _func_ from the list of functions to be run at interpreter shutdown. [`unregister()`](https://docs.python.org/3/library/atexit.html#atexit.unregister "atexit.unregister") silently does nothing if _func_ was not previously registered. If _func_ has been registered more than once, every occurrence of that function in the [`atexit`](https://docs.python.org/3/library/atexit.html#module-atexit "atexit: Register and execute cleanup functions.") call stack will be removed. Equality comparisons (`==`) are used internally during unregistration, so function references do not need to have matching identities.
See also 

Module [`readline`](https://docs.python.org/3/library/readline.html#module-readline "readline: GNU readline support for Python. \(Unix\)")
    
Useful example of [`atexit`](https://docs.python.org/3/library/atexit.html#module-atexit "atexit: Register and execute cleanup functions.") to read and write [`readline`](https://docs.python.org/3/library/readline.html#module-readline "readline: GNU readline support for Python. \(Unix\)") history files.
## [`atexit`](https://docs.python.org/3/library/atexit.html#module-atexit "atexit: Register and execute cleanup functions.") Example[¶](https://docs.python.org/3/library/atexit.html#atexit-example "Link to this heading")
The following simple example demonstrates how a module can initialize a counter from a file when it is imported and save the counter’s updated value automatically when the program terminates without relying on the application making an explicit call into this module at termination.
```
try:
  with open('counterfile') as infile:
    _count = int(infile.read())
except FileNotFoundError:
  _count = 0
defincrcounter(n):
  global _count
  _count = _count + n
defsavecounter():
  with open('counterfile', 'w') as outfile:
    outfile.write('%d' % _count)
importatexit
atexit.register(savecounter)

```

Positional and keyword arguments may also be passed to [`register()`](https://docs.python.org/3/library/atexit.html#atexit.register "atexit.register") to be passed along to the registered function when it is called:
```
defgoodbye(name, adjective):
  print('Goodbye %s, it was %s to meet you.' % (name, adjective))
importatexit
atexit.register(goodbye, 'Donny', 'nice')
# or:
atexit.register(goodbye, adjective='nice', name='Donny')

```

Usage as a [decorator](https://docs.python.org/3/glossary.html#term-decorator):
```
importatexit
@atexit.register
defgoodbye():
  print('You are now leaving the Python sector.')