Title: Textwrap Module - Shorten Function
URL: https://docs.python.org/3/library/textwrap.html
Summary: The `shorten()` function from the `textwrap` module collapses and truncates text to fit a specified width. It replaces multiple whitespace with single spaces and, if the text exceeds the width, drops words from the end to fit, optionally adding a placeholder.
---

```

In particular, [`fill()`](https://docs.python.org/3/library/textwrap.html#textwrap.fill "textwrap.fill") accepts exactly the same keyword arguments as [`wrap()`](https://docs.python.org/3/library/textwrap.html#textwrap.wrap "textwrap.wrap"). 

textwrap.shorten(_text_ , _width_ , _*_ , _fix_sentence_endings =False_, _break_long_words =True_, _break_on_hyphens =True_, _placeholder =' [...]'_)[¶](https://docs.python.org/3/library/textwrap.html#textwrap.shorten "Link to this definition")
    
Collapse and truncate the given _text_ to fit in the given _width_.
First the whitespace in _text_ is collapsed (all whitespace is replaced by single spaces). If the result fits in the _width_ , it is returned. Otherwise, enough words are dropped from the end so that the remaining words plus the _placeholder_ fit within _width_ :
>>>```
>>> textwrap.shorten("Hello world!", width=12)
'Hello world!'
>>> textwrap.shorten("Hello world!", width=11)
'Hello [...]'
>>> textwrap.shorten("Hello world", width=10, placeholder="...")
'Hello...'

```

Optional keyword arguments correspond to the instance attributes of [`TextWrapper`](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper "textwrap.TextWrapper"), documented below. Note that the whitespace is collapsed before the text is passed to the [`TextWrapper`](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper "textwrap.TextWrapper") [`fill()`](https://docs.python.org/3/library/textwrap.html#textwrap.fill "textwrap.fill") function, so changing the value of [`tabsize`](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper.tabsize "textwrap.TextWrapper.tabsize"), [`expand_tabs`](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper.expand_tabs "textwrap.TextWrapper.expand_tabs"), [`drop_whitespace`](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper.drop_whitespace "textwrap.TextWrapper.drop_whitespace"), and [`replace_whitespace`](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper.replace_whitespace "textwrap.TextWrapper.replace_whitespace") will have no effect.
Added in version 3.4. 

textwrap.dedent(_text_)[¶](https://docs.python.org/3/library/textwrap.html#textwrap.dedent "Link to this definition")
    
Remove any common leading whitespace from every line in _text_.
This can be used to make triple-quoted strings line up with the left edge of the display, while still presenting them in the source code in indented form.
Note that tabs and spaces are both treated as whitespace, but they are not equal: the lines `"  hello"` and `"\thello"` are considered to have no common leading whitespace.
Lines containing only whitespace are ignored in the input and normalized to a single newline character in the output.
For example:
```
deftest():
  # end first line with \ to avoid the empty line!
  s = '''\
  hello
   world
  '''
  print(repr(s))     # prints '  hello\n   world\n  '
  print(repr(dedent(s))) # prints 'hello\n world\n'

```


textwrap.indent(_text_ , _prefix_ , _predicate =None_)[¶](https://docs.python.org/3/library/textwrap.html#textwrap.indent "Link to this definition")
    
Add _prefix_ to the beginning of selected lines in _text_.
Lines are separated by calling `text.splitlines(True)`.
By default, _prefix_ is added to all lines that do not consist solely of whitespace (including any line endings).
For example:
>>>```
>>> s = 'hello\n\n\nworld'
>>> indent(s, ' ')
' hello\n\n \n world'

```

The optional _predicate_ argument can be used to control which lines are indented. For example, it is easy to add _prefix_ to even empty and whitespace-only lines:
>>>```
>>> print(indent(s, '+ ', lambda line: True))
+ hello
+
+
+ world