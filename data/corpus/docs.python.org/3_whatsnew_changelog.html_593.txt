Title: Python 3.7.0 Alpha 2 Release Notes
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This document outlines the notable changes and updates in Python 3.7.0 Alpha 2, including the introduction of the `gc.freeze()` API for garbage collection, restoration of blocking imports from packages, and support for asynchronous generator expressions in synchronous functions.
---

## Python 3.7.0 alpha 2[¶](https://docs.python.org/3/whatsnew/changelog.html#python-3-7-0-alpha-2 "Link to this heading")
_Release date: 2017-10-16_
### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id554 "Link to this heading")
  * [bpo-31558](https://bugs.python.org/issue?@action=redirect&bpo=31558): `gc.freeze()` is a new API that allows for moving all objects currently tracked by the garbage collector to a permanent generation, effectively removing them from future collection events. This can be used to protect those objects from having their PyGC_Head mutated. In effect, this enables great copy-on-write stability at fork().
  * [bpo-31642](https://bugs.python.org/issue?@action=redirect&bpo=31642): Restored blocking “from package import module” by setting sys.modules[“package.module”] to None.
  * [bpo-31708](https://bugs.python.org/issue?@action=redirect&bpo=31708): Allow use of asynchronous generator expressions in synchronous functions.
  * [bpo-31709](https://bugs.python.org/issue?@action=redirect&bpo=31709): Drop support of asynchronous __aiter__.
  * [bpo-30404](https://bugs.python.org/issue?@action=redirect&bpo=30404): The -u option now makes the stdout and stderr streams unbuffered rather than line-buffered.
  * [bpo-31619](https://bugs.python.org/issue?@action=redirect&bpo=31619): Fixed a ValueError when convert a string with large number of underscores to integer with binary base.
  * [bpo-31602](https://bugs.python.org/issue?@action=redirect&bpo=31602): Fix an assertion failure in `zipimporter.get_source()` in case of a bad `zlib.decompress()`. Patch by Oren Milman.
  * [bpo-31592](https://bugs.python.org/issue?@action=redirect&bpo=31592): Fixed an assertion failure in Python parser in case of a bad `unicodedata.normalize()`. Patch by Oren Milman.
  * [bpo-31588](https://bugs.python.org/issue?@action=redirect&bpo=31588): Raise a `TypeError` with a helpful error message when class creation fails due to a metaclass with a bad `__prepare__()` method. Patch by Oren Milman.
  * [bpo-31574](https://bugs.python.org/issue?@action=redirect&bpo=31574): Importlib was instrumented with two dtrace probes to profile import timing.
  * [bpo-31566](https://bugs.python.org/issue?@action=redirect&bpo=31566): Fix an assertion failure in `_warnings.warn()` in case of a bad `__name__` global. Patch by Oren Milman.
  * [bpo-31506](https://bugs.python.org/issue?@action=redirect&bpo=31506): Improved the error message logic for `object.__new__` and `object.__init__`.
  * [bpo-31505](https://bugs.python.org/issue?@action=redirect&bpo=31505): Fix an assertion failure in `json`, in case `_json.make_encoder()` received a bad `encoder()` argument. Patch by Oren Milman.
  * [bpo-31492](https://bugs.python.org/issue?@action=redirect&bpo=31492): Fix assertion failures in case of failing to import from a module with a bad `__name__` attribute, and in case of failing to access an attribute of such a module. Patch by Oren Milman.
  * [bpo-31478](https://bugs.python.org/issue?@action=redirect&bpo=31478): Fix an assertion failure in `_random.Random.seed()` in case the argument has a bad `__abs__()` method. Patch by Oren Milman.
  * [bpo-31336](https://bugs.python.org/issue?@action=redirect&bpo=31336): Speed up class creation by 10-20% by reducing the overhead in the necessary special method lookups. Patch by Stefan Behnel.
  * [bpo-31415](https://bugs.python.org/issue?@action=redirect&bpo=31415): Add `-X importtime` option to show how long each import takes. It can be used to optimize application’s startup time. Support the [`PYTHONPROFILEIMPORTTIME`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPROFILEIMPORTTIME) as an equivalent way to enable this.
  * [bpo-31410](https://bugs.python.org/issue?@action=redirect&bpo=31410): Optimized calling wrapper and classmethod descriptors.
  * [bpo-31353](https://bugs.python.org/issue?@action=redirect&bpo=31353): [**PEP 553**](https://peps.python.org/pep-0553/) - Add a new built-in called `breakpoint()` which calls `sys.breakpointhook()`. By default this imports `pdb` and calls `pdb.set_trace()`, but users may override `sys.breakpointhook()` to call whatever debugger they want. The original value of the hook is saved in `sys.__breakpointhook__`.
  * [bpo-17852](https://bugs.python.org/issue?@action=redirect&bpo=17852): Maintain a list of open buffered files, flush them before exiting the interpreter. Based on a patch from Armin Rigo.
  * [bpo-31315](https://bugs.python.org/issue?@action=redirect&bpo=31315): Fix an assertion failure in imp.create_dynamic(), when spec.name is not a string. Patch by Oren Milman.
  * [bpo-31311](https://bugs.python.org/issue?@action=redirect&bpo=31311): Fix a crash in the `__setstate__()` method of `ctypes._CData`, in case of a bad `__dict__`. Patch by Oren Milman.
  * [bpo-31293](https://bugs.python.org/issue?@action=redirect&bpo=31293): Fix crashes in true division and multiplication of a timedelta object by a float with