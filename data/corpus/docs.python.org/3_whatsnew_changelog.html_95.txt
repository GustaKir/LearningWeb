Title: Core and Builtins Changes in Python
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section outlines updates to core features and builtins in Python, including the reduction of empty reverse iterators to `reversed()`, the introduction of the `PythonFinalizationError` exception to handle issues during Python finalization, and the addition of a method to clear internal caches.
---

### Core and Builtins[Â¶](https://docs.python.org/3/whatsnew/changelog.html#id101 "Link to this heading")
  * [gh-112087](https://github.com/python/cpython/issues/112087): For an empty reverse iterator for list will be reduced to [`reversed()`](https://docs.python.org/3/library/functions.html#reversed "reversed"). Patch by Donghee Na
  * [gh-114570](https://github.com/python/cpython/issues/114570): Add [`PythonFinalizationError`](https://docs.python.org/3/library/exceptions.html#PythonFinalizationError "PythonFinalizationError") exception. This exception derived from [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError") is raised when an operation is blocked during the [Python finalization](https://docs.python.org/3/glossary.html#term-interpreter-shutdown). Patch by Victor Stinner.
  * [gh-114695](https://github.com/python/cpython/issues/114695): Add [`sys._clear_internal_caches()`](https://docs.python.org/3/library/sys.html#sys._clear_internal_caches "sys._clear_internal_caches"), which clears all internal performance-related caches (and deprecate the less-general [`sys._clear_type_cache()`](https://docs.python.org/3/library/sys.html#sys._clear_type_cache "sys._clear_type_cache") function).
  * [gh-114828](https://github.com/python/cpython/issues/114828): Fix compilation crashes in uncommon code examples using [`super()`](https://docs.python.org/3/library/functions.html#super "super") inside a comprehension in a class body.
  * [gh-112069](https://github.com/python/cpython/issues/112069): Adapt [`set`](https://docs.python.org/3/library/stdtypes.html#set "set") and [`frozenset`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset") methods to Argument Clinic.
  * [gh-115011](https://github.com/python/cpython/issues/115011): Setters for members with an unsigned integer type now support the same range of valid values for objects that has a [`__index__()`](https://docs.python.org/3/reference/datamodel.html#object.__index__ "object.__index__") method as for [`int`](https://docs.python.org/3/library/functions.html#int "int").
  * [gh-114887](https://github.com/python/cpython/issues/114887): Changed socket type validation in [`create_datagram_endpoint()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_datagram_endpoint "asyncio.loop.create_datagram_endpoint") to accept all non-stream sockets. This fixes a regression in compatibility with raw sockets.
  * [gh-114944](https://github.com/python/cpython/issues/114944): Fixes a race between `PyParkingLot_Park` and `_PyParkingLot_UnparkAll`.
  * [gh-113462](https://github.com/python/cpython/issues/113462): Limit the number of versions that a single class can use. Prevents a few wayward classes using up all the version numbers.
  * [gh-76763](https://github.com/python/cpython/issues/76763): The [`chr()`](https://docs.python.org/3/library/functions.html#chr "chr") builtin function now always raises [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") for values outside the valid range. Previously it raised [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError") for very large or small values.
  * [gh-114806](https://github.com/python/cpython/issues/114806): No longer specialize calls to classes, if those classes have metaclasses. Fixes bug where the `__call__` method of the metaclass was not being called.
  * [gh-107944](https://github.com/python/cpython/issues/107944): Improve error message for function calls with bad keyword arguments via getargs
  * [gh-112529](https://github.com/python/cpython/issues/112529): The free-threaded build no longer allocates space for the `PyGC_Head` structure in objects that support cyclic garbage collection. A number of other fields and data structures are used as replacements, including `ob_gc_bits`, `ob_tid`, and mimalloc internal data structures.
  * [gh-114456](https://github.com/python/cpython/issues/114456): Lower the recursion limit under a debug build of WASI.
  * [gh-114083](https://github.com/python/cpython/issues/114083): Compiler applies folding of LOAD_CONST with following instruction in a separate pass before other optimisations. This enables jump threading in certain circumstances.
  * [gh-114388](https://github.com/python/cpython/issues/114388): Fix a [`RuntimeWarning`](https://docs.python.org/3/library/exceptions.html#RuntimeWarning "RuntimeWarning") emitted when assign an integer-like value that is not an instance of [`int`](https://docs.python.org/3/library/functions.html#int "int") to an attribute that corresponds to a C struct member of [type](https://docs.python.org/3/c-api/structures.html#pymemberdef-types) T_UINT and T_ULONG. Fix a double [`RuntimeWarning`](https://docs.python.org/3/library/exceptions.html#RuntimeWarning "RuntimeWarning") emitted when assign a negative integer value to an attribute that corresponds to a C struct member of type T_U