Title: Email Header Registry: BaseHeader Attributes and Methods
URL: https://docs.python.org/3/library/email.headerregistry.html
Summary: This section details the `max_count` attribute of the `BaseHeader`, indicating the limit on the number of headers of the same name, with `None` allowing unlimited. It also describes the `fold` method, which formats headers according to policy and should generally not be used by application programs.
---

max_count[¶](https://docs.python.org/3/library/email.headerregistry.html#email.headerregistry.BaseHeader.max_count "Link to this definition")
    
The maximum number of headers of this type that can have the same `name`. A value of `None` means unlimited. The `BaseHeader` value for this attribute is `None`; it is expected that specialized header classes will override this value as needed.
`BaseHeader` also provides the following method, which is called by the email library code and should not in general be called by application programs: 

fold(_*_ , _policy_)[¶](https://docs.python.org/3/library/email.headerregistry.html#email.headerregistry.BaseHeader.fold "Link to this definition")
    
Return a string containing [`linesep`](https://docs.python.org/3/library/email.policy.html#email.policy.Policy.linesep "email.policy.Policy.linesep") characters as required to correctly fold the header according to _policy_. A [`cte_type`](https://docs.python.org/3/library/email.policy.html#email.policy.Policy.cte_type "email.policy.Policy.cte_type") of `8bit` will be treated as if it were `7bit`, since headers may not contain arbitrary binary data. If [`utf8`](https://docs.python.org/3/library/email.policy.html#email.policy.EmailPolicy.utf8 "email.policy.EmailPolicy.utf8") is `False`, non-ASCII data will be [**RFC 2047**](https://datatracker.ietf.org/doc/html/rfc2047.html) encoded.
`BaseHeader` by itself cannot be used to create a header object. It defines a protocol that each specialized header cooperates with in order to produce the header object. Specifically, `BaseHeader` requires that the specialized class provide a [`classmethod()`](https://docs.python.org/3/library/functions.html#classmethod "classmethod") named `parse`. This method is called as follows:
```
parse(string, kwds)

```

`kwds` is a dictionary containing one pre-initialized key, `defects`. `defects` is an empty list. The parse method should append any detected defects to this list. On return, the `kwds` dictionary _must_ contain values for at least the keys `decoded` and `defects`. `decoded` should be the string value for the header (that is, the header value fully decoded to unicode). The parse method should assume that _string_ may contain content-transfer-encoded parts, but should correctly handle all valid unicode characters as well so that it can parse un-encoded header values.
`BaseHeader`’s `__new__` then creates the header instance, and calls its `init` method. The specialized class only needs to provide an `init` method if it wishes to set additional attributes beyond those provided by `BaseHeader` itself. Such an `init` method should look like this:
```
definit(self, /, *args, **kw):
  self._myattr = kw.pop('myattr')
  super().init(*args, **kw)