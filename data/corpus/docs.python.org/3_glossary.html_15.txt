Title: Glossary Terms: Loader and Locale Encoding
URL: https://docs.python.org/3/glossary.html
Summary: This section defines 'loader' as an object that loads a module and must implement the `exec_module()` and `create_module()` methods. It also describes 'locale encoding' as the encoding of the LC_CTYPE locale on Unix, which can be set using `locale.setlocale()`. Relevant links to finders, loaders, and PEP 302 are provided.
---

loader[¶](https://docs.python.org/3/glossary.html#term-loader "Link to this term")
    
An object that loads a module. It must define the `exec_module()` and `create_module()` methods to implement the [`Loader`](https://docs.python.org/3/library/importlib.html#importlib.abc.Loader "importlib.abc.Loader") interface. A loader is typically returned by a [finder](https://docs.python.org/3/glossary.html#term-finder). See also:
  * [Finders and loaders](https://docs.python.org/3/reference/import.html#finders-and-loaders)
  * [`importlib.abc.Loader`](https://docs.python.org/3/library/importlib.html#importlib.abc.Loader "importlib.abc.Loader")
  * [**PEP 302**](https://peps.python.org/pep-0302/)



locale encoding[¶](https://docs.python.org/3/glossary.html#term-locale-encoding "Link to this term")
    
On Unix, it is the encoding of the LC_CTYPE locale. It can be set with [`locale.setlocale(locale.LC_CTYPE, new_locale)`](https://docs.python.org/3/library/locale.html#locale.setlocale "locale.setlocale").
On Windows, it is the ANSI code page (ex: `"cp1252"`).
On Android and VxWorks, Python uses `"utf-8"` as the locale encoding.
[`locale.getencoding()`](https://docs.python.org/3/library/locale.html#locale.getencoding "locale.getencoding") can be used to get the locale encoding.
See also the [filesystem encoding and error handler](https://docs.python.org/3/glossary.html#term-filesystem-encoding-and-error-handler). 

magic method[¶](https://docs.python.org/3/glossary.html#term-magic-method "Link to this term")
    
An informal synonym for [special method](https://docs.python.org/3/glossary.html#term-special-method). 

mapping[¶](https://docs.python.org/3/glossary.html#term-mapping "Link to this term")
    
A container object that supports arbitrary key lookups and implements the methods specified in the [`collections.abc.Mapping`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping "collections.abc.Mapping") or [`collections.abc.MutableMapping`](https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableMapping "collections.abc.MutableMapping") [abstract base classes](https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes). Examples include [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict"), [`collections.defaultdict`](https://docs.python.org/3/library/collections.html#collections.defaultdict "collections.defaultdict"), [`collections.OrderedDict`](https://docs.python.org/3/library/collections.html#collections.OrderedDict "collections.OrderedDict") and [`collections.Counter`](https://docs.python.org/3/library/collections.html#collections.Counter "collections.Counter"). 

meta path finder[¶](https://docs.python.org/3/glossary.html#term-meta-path-finder "Link to this term")
    
A [finder](https://docs.python.org/3/glossary.html#term-finder) returned by a search of [`sys.meta_path`](https://docs.python.org/3/library/sys.html#sys.meta_path "sys.meta_path"). Meta path finders are related to, but different from [path entry finders](https://docs.python.org/3/glossary.html#term-path-entry-finder).
See [`importlib.abc.MetaPathFinder`](https://docs.python.org/3/library/importlib.html#importlib.abc.MetaPathFinder "importlib.abc.MetaPathFinder") for the methods that meta path finders implement. 

metaclass[¶](https://docs.python.org/3/glossary.html#term-metaclass "Link to this term")
    
The class of a class. Class definitions create a class name, a class dictionary, and a list of base classes. The metaclass is responsible for taking those three arguments and creating the class. Most object oriented programming languages provide a default implementation. What makes Python special is that it is possible to create custom metaclasses. Most users never need this tool, but when the need arises, metaclasses can provide powerful, elegant solutions. They have been used for logging attribute access, adding thread-safety, tracking object creation, implementing singletons, and many other tasks.
More information can be found in [Metaclasses](https://docs.python.org/3/reference/datamodel.html#metaclasses). 

method[¶](https://docs.python.org/3/glossary.html#term-method "Link to this term")
    
A function which is defined inside a class body. If called as an attribute of an instance of that class, the method will get the instance object as its first [argument](https://docs.python.org/3/glossary.html#term-argument) (which is usually called `self`). See [function](https://docs.python.org/3/glossary.html#term-function) and [nested scope](https://docs.python.org/3/glossary.html#term-nested-scope).