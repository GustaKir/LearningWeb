Title: Date Objects in Python
URL: https://docs.python.org/3/library/datetime.html
Summary: The `date` object in Python represents a date in the Gregorian calendar, defined by year, month, and day. It requires integer inputs for year, month, and day, which must fall within specified ranges, or a `ValueError` will be raised.
---

```

## [`date`](https://docs.python.org/3/library/datetime.html#datetime.date "datetime.date") Objects[¶](https://docs.python.org/3/library/datetime.html#date-objects "Link to this heading")
A [`date`](https://docs.python.org/3/library/datetime.html#datetime.date "datetime.date") object represents a date (year, month and day) in an idealized calendar, the current Gregorian calendar indefinitely extended in both directions.
January 1 of year 1 is called day number 1, January 2 of year 1 is called day number 2, and so on. [[2]](https://docs.python.org/3/library/datetime.html#id6) 

_class_ datetime.date(_year_ , _month_ , _day_)[¶](https://docs.python.org/3/library/datetime.html#datetime.date "Link to this definition")
    
All arguments are required. Arguments must be integers, in the following ranges:
  * `MINYEAR <= year <= MAXYEAR`
  * `1 <= month <= 12`
  * `1 <= day <= number of days in the given month and year`


If an argument outside those ranges is given, [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised.
Other constructors, all class methods: 

_classmethod_ date.today()[¶](https://docs.python.org/3/library/datetime.html#datetime.date.today "Link to this definition")
    
Return the current local date.
This is equivalent to `date.fromtimestamp(time.time())`. 

_classmethod_ date.fromtimestamp(_timestamp_)[¶](https://docs.python.org/3/library/datetime.html#datetime.date.fromtimestamp "Link to this definition")
    
Return the local date corresponding to the POSIX timestamp, such as is returned by [`time.time()`](https://docs.python.org/3/library/time.html#time.time "time.time").
This may raise [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError"), if the timestamp is out of the range of values supported by the platform C `localtime()` function, and [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") on `localtime()` failure. It’s common for this to be restricted to years from 1970 through 2038. Note that on non-POSIX systems that include leap seconds in their notion of a timestamp, leap seconds are ignored by [`fromtimestamp()`](https://docs.python.org/3/library/datetime.html#datetime.date.fromtimestamp "datetime.date.fromtimestamp").
Changed in version 3.3: Raise [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError") instead of [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if the timestamp is out of the range of values supported by the platform C `localtime()` function. Raise [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") instead of [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") on `localtime()` failure. 

_classmethod_ date.fromordinal(_ordinal_)[¶](https://docs.python.org/3/library/datetime.html#datetime.date.fromordinal "Link to this definition")
    
Return the date corresponding to the proleptic Gregorian ordinal, where January 1 of year 1 has ordinal 1.
[`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised unless `1 <= ordinal <= date.max.toordinal()`. For any date `d`, `date.fromordinal(d.toordinal()) == d`. 

_classmethod_ date.fromisoformat(_date_string_)[¶](https://docs.python.org/3/library/datetime.html#datetime.date.fromisoformat "Link to this definition")
    
Return a [`date`](https://docs.python.org/3/library/datetime.html#datetime.date "datetime.date") corresponding to a _date_string_ given in any valid ISO 8601 format, with the following exceptions:
  1. Reduced precision dates are not currently supported (`YYYY-MM`, `YYYY`).
  2. Extended date representations are not currently supported (`±YYYYYY-MM-DD`).
  3. Ordinal dates are not currently supported (`YYYY-OOO`).


Examples:
>>>```
>>> fromdatetimeimport date
>>> date.fromisoformat('2019-12-04')
datetime.date(2019, 12, 4)
>>> date.fromisoformat('20191204')
datetime.date(2019, 12, 4)
>>> date.fromisoformat('2021-W01-1')
datetime.date(2021, 1, 4)