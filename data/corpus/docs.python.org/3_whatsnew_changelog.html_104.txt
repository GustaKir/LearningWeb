Title: Python 3.13.0 Alpha 3 Release Notes
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This document outlines the features and changes in Python 3.13.0 alpha 3, released on January 17, 2024. It includes security improvements such as skipping hidden `.pth` files and creating a Software Bill-of-Materials for dependency tracking. Additionally, core and builtin changes are noted, including compiler optimizations and error handling updates.
---

## Python 3.13.0 alpha 3[¶](https://docs.python.org/3/whatsnew/changelog.html#python-3-13-0-alpha-3 "Link to this heading")
_Release date: 2024-01-17_
### Security[¶](https://docs.python.org/3/whatsnew/changelog.html#id111 "Link to this heading")
  * [gh-113659](https://github.com/python/cpython/issues/113659): Skip `.pth` files with names starting with a dot or hidden file attribute.
  * [gh-112302](https://github.com/python/cpython/issues/112302): Created a Software Bill-of-Materials document and tooling for tracking dependencies.


### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id112 "Link to this heading")
  * [gh-107901](https://github.com/python/cpython/issues/107901): Compiler duplicates basic blocks that have an eval breaker check, no line number, and multiple predecessors.
  * [gh-107901](https://github.com/python/cpython/issues/107901): A jump leaving an exception handler back to normal code no longer checks the eval breaker.
  * [gh-113655](https://github.com/python/cpython/issues/113655): Set the C recursion limit to 4000 on Windows, and 10000 on Linux/OSX. This seems to be near the sweet spot to maintain safety, but not compromise backwards compatibility.
  * [gh-113710](https://github.com/python/cpython/issues/113710): Add typed stack effects to the interpreter DSL, along with various instruction annotations.
  * [gh-77046](https://github.com/python/cpython/issues/77046): On Windows, file descriptors wrapping Windows handles are now created non inheritable by default ([**PEP 446**](https://peps.python.org/pep-0446/)). Patch by Zackery Spytz and Victor Stinner.
  * [gh-113853](https://github.com/python/cpython/issues/113853): Guarantee that all executors make progress. This then guarantees that tier 2 execution always makes progress.
  * [gh-113753](https://github.com/python/cpython/issues/113753): Fix an issue where the finalizer of `PyAsyncGenASend` objects might not be called if they were allocated from a free list.
  * [gh-107901](https://github.com/python/cpython/issues/107901): Compiler changed so that synthetic jumps which are not at loop end no longer check the eval breaker.
  * [gh-113703](https://github.com/python/cpython/issues/113703): Fix a regression in the [`codeop`](https://docs.python.org/3/library/codeop.html#module-codeop "codeop: Compile \(possibly incomplete\) Python code.") module that was causing it to incorrectly identify incomplete f-strings. Patch by Pablo Galindo
  * [gh-89811](https://github.com/python/cpython/issues/89811): Check for a valid `tp_version_tag` before performing bytecode specializations that rely on this value being usable.
  * [gh-111488](https://github.com/python/cpython/issues/111488): Changed error message in case of no ‘in’ keyword after ‘for’ in list comprehensions
  * [gh-113657](https://github.com/python/cpython/issues/113657): Fix an issue that caused important instruction pointer updates to be optimized out of tier two traces.
  * [gh-113603](https://github.com/python/cpython/issues/113603): Fixed bug where a redundant NOP is not removed, causing an assertion to fail in the compiler in debug mode.
  * [gh-113602](https://github.com/python/cpython/issues/113602): Fix an error that was causing the parser to try to overwrite existing errors and crashing in the process. Patch by Pablo Galindo
  * [gh-113486](https://github.com/python/cpython/issues/113486): No longer issue spurious `PY_UNWIND` events for optimized calls to classes.
  * [gh-113297](https://github.com/python/cpython/issues/113297): Fix segfault in the compiler on with statement with 19 context managers.
  * [gh-113212](https://github.com/python/cpython/issues/113212): Improve [`super`](https://docs.python.org/3/library/functions.html#super "super") error messages.
  * [gh-111375](https://github.com/python/cpython/issues/111375): Only use `NULL` in the exception stack to indicate an exception was handled. Patch by Carey Metcalfe.
  * [gh-112215](https://github.com/python/cpython/issues/112215): Increase the C recursion limit by a factor of 3 for non-debug builds, except for webassembly and s390 platforms which are unchanged. This mitigates some regressions in 3.12 with deep recursion mixing builtin (C) and Python code.
  * [gh-113054](https://github.com/python/cpython/issues/113054): Fixed bug where a redundant NOP is not removed, causing an assertion to fail in the compiler in debug mode.
  * [gh-106905](https://github.com/python/cpython/issues/106905): Use per AST-parser state rather than global state to track recursion depth within the AST parser to prevent potential race condition due to simultaneous parsing.
The issue primarily showed up in 3.11 by multithreaded users of [`ast.parse()`](https://docs.python.org/3/library/ast.html#ast.parse "ast.parse"). In 3.12 a change to when garbage collection can be triggered prevented the race condition from occurring.
  * [gh-108866](https://github.com/python/cpython/issues/108866): Change the API and contract