Title: functools — Higher-order functions and operations on callable objects
URL: https://docs.python.org/3/library/functools.html
Summary: The page provides an overview of the `functools` module in Python, which includes higher-order functions and operations for callable objects. It serves as a reference point for developers looking to utilize functionality that manipulates or enhances callable constructs.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [`functools` — Higher-order functions and operations on callable objects](https://docs.python.org/3/library/functools.html)
    * [`partial` Objects](https://docs.python.org/3/library/functools.html#partial-objects)


#### Previous topic
[`itertools` — Functions creating iterators for efficient looping](https://docs.python.org/3/library/itertools.html "previous chapter")
#### Next topic
[`operator` — Standard operators as functions](https://docs.python.org/3/library/operator.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/functools.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/operator.html "operator — Standard operators as functions") |
  * [previous](https://docs.python.org/3/library/itertools.html "itertools — Functions creating iterators for efficient looping") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Functional Programming Modules](https://docs.python.org/3/library/functional.html) »
  * [`functools` — Higher-order functions and operations on callable objects](https://docs.python.org/3/library/functools.html)
  * | 
  * Theme  Auto Light Dark |


# `functools` — Higher-order functions and operations on callable objects[¶](https://docs.python.org/3/library/functools.html#module-functools "Link to this heading")
**Source code:** [Lib/functools.py](https://github.com/python/cpython/tree/3.13/Lib/functools.py)
The [`functools`](https://docs.python.org/3/library/functools.html#module-functools "functools: Higher-order functions and operations on callable objects.") module is for higher-order functions: functions that act on or return other functions. In general, any callable object can be treated as a function for the purposes of this module.
The [`functools`](https://docs.python.org/3/library/functools.html#module-functools "functools: Higher-order functions and operations on callable objects.") module defines the following functions: 

@functools.cache(_user_function_)[¶](https://docs.python.org/3/library/functools.html#functools.cache "Link to this definition")
    
Simple lightweight unbounded function cache. Sometimes called [“memoize”](https://en.wikipedia.org/wiki/Memoization).
Returns the same as `lru_cache(maxsize=None)`, creating a thin wrapper around a dictionary lookup for the function arguments. Because it never needs to evict old values, this is smaller and faster than [`lru_cache()`](https://docs.python.org/3/library/functools.html#functools.lru_cache "functools.lru_cache") with a size limit.
For example:
```
@cache
deffactorial(n):
  return n * factorial(n-1) if n else 1
>>> factorial(10)   # no previously cached result, makes 11 recursive calls
3628800
>>> factorial(5)    # just looks up cached value result
120
>>> factorial(12)   # makes two new recursive calls, the other 10 are cached
479001600

```

The cache is threadsafe so that the wrapped function can be used in multiple threads. This means that the underlying data structure will remain coherent during concurrent updates.
It is possible for the wrapped function to be called more than once if another thread makes an additional call before the initial call has been completed and cached.
Added in version 3.9. 

@functools.cached_property(_func_)[¶](https://docs.python.org/3/library/functools.html#functools.cached_property "Link to this definition")
    
Transform a method of a class into a property whose value is computed once and then cached as a normal attribute for the life of the instance. Similar to [`property()`](https://docs.python.org/3/library/functions.html#property "property"), with the addition of caching. Useful for expensive computed properties of instances that are otherwise effectively immutable.
Example: