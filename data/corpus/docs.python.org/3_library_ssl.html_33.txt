Title: Asyncio Module and Non-Blocking SSL Sockets
URL: https://docs.python.org/3/library/ssl.html
Summary: The asyncio module provides support for non-blocking SSL sockets and includes a Streams API for higher-level abstractions. It utilizes the selectors module for event polling and manages specific SSL-related exceptions, enabling asynchronous SSL handshake operations.
---

```



See also
The [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O.") module supports [non-blocking SSL sockets](https://docs.python.org/3/library/ssl.html#ssl-nonblocking) and provides a higher level [Streams API](https://docs.python.org/3/library/asyncio-stream.html#asyncio-streams). It polls for events using the [`selectors`](https://docs.python.org/3/library/selectors.html#module-selectors "selectors: High-level I/O multiplexing.") module and handles [`SSLWantWriteError`](https://docs.python.org/3/library/ssl.html#ssl.SSLWantWriteError "ssl.SSLWantWriteError"), [`SSLWantReadError`](https://docs.python.org/3/library/ssl.html#ssl.SSLWantReadError "ssl.SSLWantReadError") and [`BlockingIOError`](https://docs.python.org/3/library/exceptions.html#BlockingIOError "BlockingIOError") exceptions. It runs the SSL handshake asynchronously as well.
## Memory BIO Support[¶](https://docs.python.org/3/library/ssl.html#memory-bio-support "Link to this heading")
Added in version 3.5.
Ever since the SSL module was introduced in Python 2.6, the [`SSLSocket`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket "ssl.SSLSocket") class has provided two related but distinct areas of functionality:
  * SSL protocol handling
  * Network IO


The network IO API is identical to that provided by [`socket.socket`](https://docs.python.org/3/library/socket.html#socket.socket "socket.socket"), from which [`SSLSocket`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket "ssl.SSLSocket") also inherits. This allows an SSL socket to be used as a drop-in replacement for a regular socket, making it very easy to add SSL support to an existing application.
Combining SSL protocol handling and network IO usually works well, but there are some cases where it doesn’t. An example is async IO frameworks that want to use a different IO multiplexing model than the “select/poll on a file descriptor” (readiness based) model that is assumed by [`socket.socket`](https://docs.python.org/3/library/socket.html#socket.socket "socket.socket") and by the internal OpenSSL socket IO routines. This is mostly relevant for platforms like Windows where this model is not efficient. For this purpose, a reduced scope variant of [`SSLSocket`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket "ssl.SSLSocket") called [`SSLObject`](https://docs.python.org/3/library/ssl.html#ssl.SSLObject "ssl.SSLObject") is provided.