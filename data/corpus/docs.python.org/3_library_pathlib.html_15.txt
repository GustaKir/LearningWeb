Title: Path.hardlink_to Method in Pathlib
URL: https://docs.python.org/3/library/pathlib.html
Summary: The `Path.hardlink_to(_target_)` method creates a hard link to the file specified by _target_. The argument order (link, target) differs from `os.link()`. Since version 3.13, it raises `UnsupportedOperation` if `os.link()` is not available; previously, it raised `NotImplementedError`. This method was added in version 3.10.
---

```

Note
The order of arguments (link, target) is the reverse of [`os.symlink()`](https://docs.python.org/3/library/os.html#os.symlink "os.symlink")’s.
Changed in version 3.13: Raises [`UnsupportedOperation`](https://docs.python.org/3/library/pathlib.html#pathlib.UnsupportedOperation "pathlib.UnsupportedOperation") if [`os.symlink()`](https://docs.python.org/3/library/os.html#os.symlink "os.symlink") is not available. In previous versions, [`NotImplementedError`](https://docs.python.org/3/library/exceptions.html#NotImplementedError "NotImplementedError") was raised. 

Path.hardlink_to(_target_)[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.hardlink_to "Link to this definition")
    
Make this path a hard link to the same file as _target_.
Note
The order of arguments (link, target) is the reverse of [`os.link()`](https://docs.python.org/3/library/os.html#os.link "os.link")’s.
Added in version 3.10.
Changed in version 3.13: Raises [`UnsupportedOperation`](https://docs.python.org/3/library/pathlib.html#pathlib.UnsupportedOperation "pathlib.UnsupportedOperation") if [`os.link()`](https://docs.python.org/3/library/os.html#os.link "os.link") is not available. In previous versions, [`NotImplementedError`](https://docs.python.org/3/library/exceptions.html#NotImplementedError "NotImplementedError") was raised.
### Renaming and deleting[¶](https://docs.python.org/3/library/pathlib.html#renaming-and-deleting "Link to this heading") 

Path.rename(_target_)[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.rename "Link to this definition")
    
Rename this file or directory to the given _target_ , and return a new `Path` instance pointing to _target_. On Unix, if _target_ exists and is a file, it will be replaced silently if the user has permission. On Windows, if _target_ exists, [`FileExistsError`](https://docs.python.org/3/library/exceptions.html#FileExistsError "FileExistsError") will be raised. _target_ can be either a string or another path object:
>>>```
>>> p = Path('foo')
>>> p.open('w').write('some text')
9
>>> target = Path('bar')
>>> p.rename(target)
PosixPath('bar')
>>> target.open().read()
'some text'