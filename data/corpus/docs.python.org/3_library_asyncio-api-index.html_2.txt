Title: Asyncio Subprocesses and Streams
URL: https://docs.python.org/3/library/asyncio-api-index.html
Summary: This section describes utilities for spawning subprocesses and running shell commands using asyncio. It includes functions like `create_subprocess_exec()` for creating a subprocess and `create_subprocess_shell()` for executing shell commands. Additionally, it introduces high-level APIs for working with network I/O through the `open_connection()` function.
---

## Subprocesses[¶](https://docs.python.org/3/library/asyncio-api-index.html#subprocesses "Link to this heading")
Utilities to spawn subprocesses and run shell commands.
`await` [`create_subprocess_exec()`](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec "asyncio.create_subprocess_exec") | Create a subprocess.  
---|---  
`await` [`create_subprocess_shell()`](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_shell "asyncio.create_subprocess_shell") | Run a shell command.  
Examples
  * [Executing a shell command](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio-example-subprocess-shell).
  * See also the [subprocess APIs](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio-subprocess) documentation.


## Streams[¶](https://docs.python.org/3/library/asyncio-api-index.html#streams "Link to this heading")
High-level APIs to work with network IO.
`await` [`open_connection()`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.open_connection "asyncio.open_connection") | Establish a TCP connection.  
---|---  
`await` [`open_unix_connection()`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.open_unix_connection "asyncio.open_unix_connection") | Establish a Unix socket connection.  
`await` [`start_server()`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.start_server "asyncio.start_server") | Start a TCP server.  
`await` [`start_unix_server()`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.start_unix_server "asyncio.start_unix_server") | Start a Unix socket server.  
[`StreamReader`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamReader "asyncio.StreamReader") | High-level async/await object to receive network data.  
[`StreamWriter`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamWriter "asyncio.StreamWriter") | High-level async/await object to send network data.  
Examples
  * [Example TCP client](https://docs.python.org/3/library/asyncio-stream.html#asyncio-example-stream).
  * See also the [streams APIs](https://docs.python.org/3/library/asyncio-stream.html#asyncio-streams) documentation.


## Synchronization[¶](https://docs.python.org/3/library/asyncio-api-index.html#synchronization "Link to this heading")
Threading-like synchronization primitives that can be used in Tasks.
[`Lock`](https://docs.python.org/3/library/asyncio-sync.html#asyncio.Lock "asyncio.Lock") | A mutex lock.  
---|---  
[`Event`](https://docs.python.org/3/library/asyncio-sync.html#asyncio.Event "asyncio.Event") | An event object.  
[`Condition`](https://docs.python.org/3/library/asyncio-sync.html#asyncio.Condition "asyncio.Condition") | A condition object.  
[`Semaphore`](https://docs.python.org/3/library/asyncio-sync.html#asyncio.Semaphore "asyncio.Semaphore") | A semaphore.  
[`BoundedSemaphore`](https://docs.python.org/3/library/asyncio-sync.html#asyncio.BoundedSemaphore "asyncio.BoundedSemaphore") | A bounded semaphore.  
[`Barrier`](https://docs.python.org/3/library/asyncio-sync.html#asyncio.Barrier "asyncio.Barrier") | A barrier object.  
Examples
  * [Using asyncio.Event](https://docs.python.org/3/library/asyncio-sync.html#asyncio-example-sync-event).
  * [Using asyncio.Barrier](https://docs.python.org/3/library/asyncio-sync.html#asyncio-example-barrier).
  * See also the documentation of asyncio [synchronization primitives](https://docs.python.org/3/library/asyncio-sync.html#asyncio-sync).


## Exceptions[¶](https://docs.python.org/3/library/asyncio-api-index.html#exceptions "Link to this heading")
[`asyncio.CancelledError`](https://docs.python.org/3/library/asyncio-exceptions.html#asyncio.CancelledError "asyncio.CancelledError") | Raised when a Task is cancelled. See also [`Task.cancel()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.cancel "asyncio.Task.cancel").  
---|---  
[`asyncio.BrokenBarrierError`](https://docs.python.org/3/library/asyncio-sync.html#asyncio.BrokenBarrierError "asyncio.BrokenBarrierError") | Raised when a Barrier is broken. See also [`Barrier.wait()`](https://docs.python.org/3/library/asyncio-sync.html#asyncio.Barrier.wait "asyncio.Barrier.wait").  
Examples
  * [Handling CancelledError to run code on cancellation request](https://docs.python.org/3/library/asyncio-task.html#asyncio-example-task-cancel).
  * See also the full list of [asyncio-specific exceptions](https://docs.python.org/3/library/asyncio-exceptions.html#asyncio-exceptions).