Title: Fraction Methods: Ceil and Round
URL: https://docs.python.org/3/library/fractions.html
Summary: This section covers the `__ceil__()` method, which returns the least integer greater than or equal to the fraction, and the `__round__()` method, which rounds the fraction to the nearest integer or specified decimal places, both of which can be accessed through corresponding functions in Python.
---

```


__ceil__()[¶](https://docs.python.org/3/library/fractions.html#fractions.Fraction.__ceil__ "Link to this definition")
    
Returns the least [`int`](https://docs.python.org/3/library/functions.html#int "int") `>= self`. This method can also be accessed through the [`math.ceil()`](https://docs.python.org/3/library/math.html#math.ceil "math.ceil") function. 

__round__()[¶](https://docs.python.org/3/library/fractions.html#fractions.Fraction.__round__ "Link to this definition")


__round__(_ndigits_)
    
The first version returns the nearest [`int`](https://docs.python.org/3/library/functions.html#int "int") to `self`, rounding half to even. The second version rounds `self` to the nearest multiple of `Fraction(1, 10**ndigits)` (logically, if `ndigits` is negative), again rounding half toward even. This method can also be accessed through the [`round()`](https://docs.python.org/3/library/functions.html#round "round") function. 

__format__(_format_spec_ , _/_)[¶](https://docs.python.org/3/library/fractions.html#fractions.Fraction.__format__ "Link to this definition")
    
Provides support for formatting of [`Fraction`](https://docs.python.org/3/library/fractions.html#fractions.Fraction "fractions.Fraction") instances via the [`str.format()`](https://docs.python.org/3/library/stdtypes.html#str.format "str.format") method, the [`format()`](https://docs.python.org/3/library/functions.html#format "format") built-in function, or [Formatted string literals](https://docs.python.org/3/reference/lexical_analysis.html#f-strings).
If the `format_spec` format specification string does not end with one of the presentation types `'e'`, `'E'`, `'f'`, `'F'`, `'g'`, `'G'` or `'%'` then formatting follows the general rules for fill, alignment, sign handling, minimum width, and grouping as described in the [format specification mini-language](https://docs.python.org/3/library/string.html#formatspec). The “alternate form” flag `'#'` is supported: if present, it forces the output string to always include an explicit denominator, even when the value being formatted is an exact integer. The zero-fill flag `'0'` is not supported.
If the `format_spec` format specification string ends with one of the presentation types `'e'`, `'E'`, `'f'`, `'F'`, `'g'`, `'G'` or `'%'` then formatting follows the rules outlined for the [`float`](https://docs.python.org/3/library/functions.html#float "float") type in the [Format Specification Mini-Language](https://docs.python.org/3/library/string.html#formatspec) section.
Here are some examples:
>>>```
>>> fromfractionsimport Fraction
>>> format(Fraction(103993, 33102), '_')
'103_993/33_102'
>>> format(Fraction(1, 7), '.^+10')
'...+1/7...'
>>> format(Fraction(3, 1), '')
'3'
>>> format(Fraction(3, 1), '#')
'3/1'
>>> format(Fraction(1, 7), '.40g')
'0.1428571428571428571428571428571428571429'
>>> format(Fraction('1234567.855'), '_.2f')
'1_234_567.86'
>>> f"{Fraction(355,113):*>20.6e}"
'********3.141593e+00'
>>> old_price, new_price = 499, 672
>>> "{:.2%} price increase".format(Fraction(new_price, old_price) - 1)
'34.67% price increase'