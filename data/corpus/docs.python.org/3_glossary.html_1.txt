Title: Annotation in Python
URL: https://docs.python.org/3/glossary.html
Summary: An annotation is a label linked to a variable, class attribute, or function parameter/return value, serving as a type hint. While local variable annotations are not accessible at runtime, global variable, class attribute, and function annotations are stored in the `__annotations__` attribute. The document references various PEPs and best practices related to annotations.
---

annotation[¶](https://docs.python.org/3/glossary.html#term-annotation "Link to this term")
    
A label associated with a variable, a class attribute or a function parameter or return value, used by convention as a [type hint](https://docs.python.org/3/glossary.html#term-type-hint).
Annotations of local variables cannot be accessed at runtime, but annotations of global variables, class attributes, and functions are stored in the `__annotations__` special attribute of modules, classes, and functions, respectively.
See [variable annotation](https://docs.python.org/3/glossary.html#term-variable-annotation), [function annotation](https://docs.python.org/3/glossary.html#term-function-annotation), [**PEP 484**](https://peps.python.org/pep-0484/) and [**PEP 526**](https://peps.python.org/pep-0526/), which describe this functionality. Also see [Annotations Best Practices](https://docs.python.org/3/howto/annotations.html#annotations-howto) for best practices on working with annotations. 

argument[¶](https://docs.python.org/3/glossary.html#term-argument "Link to this term")
    
A value passed to a [function](https://docs.python.org/3/glossary.html#term-function) (or [method](https://docs.python.org/3/glossary.html#term-method)) when calling the function. There are two kinds of argument:
  * _keyword argument_ : an argument preceded by an identifier (e.g. `name=`) in a function call or passed as a value in a dictionary preceded by `**`. For example, `3` and `5` are both keyword arguments in the following calls to [`complex()`](https://docs.python.org/3/library/functions.html#complex "complex"):
```
complex(real=3, imag=5)
complex(**{'real': 3, 'imag': 5})

```

  * _positional argument_ : an argument that is not a keyword argument. Positional arguments can appear at the beginning of an argument list and/or be passed as elements of an [iterable](https://docs.python.org/3/glossary.html#term-iterable) preceded by `*`. For example, `3` and `5` are both positional arguments in the following calls:
```
complex(3, 5)
complex(*(3, 5))