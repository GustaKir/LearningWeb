Title: Dictionary Containment Functions in Python C API
URL: https://docs.python.org/3/c-api/dict.html
Summary: The document describes two functions, `PyDict_Contains` and `PyDict_ContainsString`, which are used to determine if a dictionary contains a given key. `PyDict_Contains` checks if an object `p` contains the specified `key`, returning 1 for a match, 0 for no match, and -1 on error. `PyDict_ContainsString` performs the same function but accepts the key as a UTF-8 encoded string.
---

intPyDict_Contains([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*p, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*key)[¶](https://docs.python.org/3/c-api/dict.html#c.PyDict_Contains "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Determine if dictionary _p_ contains _key_. If an item in _p_ is matches _key_ , return `1`, otherwise return `0`. On error, return `-1`. This is equivalent to the Python expression `key in p`. 

intPyDict_ContainsString([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*p, constchar*key)[¶](https://docs.python.org/3/c-api/dict.html#c.PyDict_ContainsString "Link to this definition")
    
This is the same as [`PyDict_Contains()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_Contains "PyDict_Contains"), but _key_ is specified as a constchar* UTF-8 encoded bytes string, rather than a [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*.
Added in version 3.13. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyDict_Copy([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*p)[¶](https://docs.python.org/3/c-api/dict.html#c.PyDict_Copy "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return a new dictionary that contains the same key-value pairs as _p_. 

intPyDict_SetItem([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*p, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*key, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*val)[¶](https://docs.python.org/3/c-api/dict.html#c.PyDict_SetItem "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Insert _val_ into the dictionary _p_ with a key of _key_. _key_ must be [hashable](https://docs.python.org/3/glossary.html#term-hashable); if it isn’t, [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") will be raised. Return `0` on success or `-1` on failure. This function _does not_ steal a reference to _val_. 

intPyDict_SetItemString([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*p, constchar*key, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*val)[¶](https://docs.python.org/3/c-api/dict.html#c.PyDict_SetItemString "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
This is the same as [`PyDict_SetItem()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_SetItem "PyDict_SetItem"), but _key_ is specified as a constchar* UTF-8 encoded bytes string, rather than a [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*. 

intPyDict_DelItem([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*p, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*key)[¶](https://docs.python.org/3/c-api/dict.html#c.PyDict_DelItem "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Remove the entry in dictionary _p_ with key _key_. _key_ must be [hashable](https://docs.python.org/3/glossary.html#term-hashable); if it isn’t, [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") is raised. If _key_ is not in the dictionary, [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError") is raised. Return `0` on success or `-1` on failure. 

intPyDict_DelItemString([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*p, constchar*key)[¶](https://docs.python.org/3/c-api/dict.html#c.PyDict_DelItemString "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
This is the same as [`PyDict_DelItem()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_DelItem "PyDict_DelItem"), but _key_ is specified as a constchar* UTF-8 encoded bytes string, rather than a [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*.