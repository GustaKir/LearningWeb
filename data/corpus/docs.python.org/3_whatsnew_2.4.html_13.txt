Title: Python 2.4 Release Notes: Performance Improvements and Enhancements
URL: https://docs.python.org/3/whatsnew/2.4.html
Summary: Python 2.4 introduced performance improvements in several modules including `Queue` and `threading` which now utilize `collections.deque`. Additionally, `ConfigParser` classes received enhancements with the `read()` method returning a list of successfully parsed files and the `set()` method raising a `TypeError` for incorrect inputs.
---

```

Several modules, such as the `Queue` and [`threading`](https://docs.python.org/3/library/threading.html#module-threading "threading: Thread-based parallelism.") modules, now take advantage of [`collections.deque`](https://docs.python.org/3/library/collections.html#collections.deque "collections.deque") for improved performance. (Contributed by Raymond Hettinger.)
  * The [`ConfigParser`](https://docs.python.org/3/library/configparser.html#module-configparser "configparser: Configuration file parser.") classes have been enhanced slightly. The [`read()`](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.read "configparser.ConfigParser.read") method now returns a list of the files that were successfully parsed, and the [`set()`](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.set "configparser.ConfigParser.set") method raises [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") if passed a _value_ argument that isn’t a string. (Contributed by John Belmonte and David Goodger.)
  * The [`curses`](https://docs.python.org/3/library/curses.html#module-curses "curses: An interface to the curses library, providing portable terminal handling. \(Unix\)") module now supports the ncurses extension `use_default_colors()`. On platforms where the terminal supports transparency, this makes it possible to use a transparent background. (Contributed by Jörg Lehmann.)
  * The [`difflib`](https://docs.python.org/3/library/difflib.html#module-difflib "difflib: Helpers for computing differences between objects.") module now includes an `HtmlDiff` class that creates an HTML table showing a side by side comparison of two versions of a text. (Contributed by Dan Gass.)
  * The [`email`](https://docs.python.org/3/library/email.html#module-email "email: Package supporting the parsing, manipulating, and generating email messages.") package was updated to version 3.0, which dropped various deprecated APIs and removes support for Python versions earlier than 2.3. The 3.0 version of the package uses a new incremental parser for MIME messages, available in the `email.FeedParser` module. The new parser doesn’t require reading the entire message into memory, and doesn’t raise exceptions if a message is malformed; instead it records any problems in the `defect` attribute of the message. (Developed by Anthony Baxter, Barry Warsaw, Thomas Wouters, and others.)
  * The [`heapq`](https://docs.python.org/3/library/heapq.html#module-heapq "heapq: Heap queue algorithm \(a.k.a. priority queue\).") module has been converted to C. The resulting tenfold improvement in speed makes the module suitable for handling high volumes of data. In addition, the module has two new functions `nlargest()` and `nsmallest()` that use heaps to find the N largest or smallest values in a dataset without the expense of a full sort. (Contributed by Raymond Hettinger.)
  * The [`httplib`](https://docs.python.org/3/library/http.html#module-http "http: HTTP status codes and messages") module now contains constants for HTTP status codes defined in various HTTP-related RFC documents. Constants have names such as `OK`, `CREATED`, `CONTINUE`, and `MOVED_PERMANENTLY`; use pydoc to get a full list. (Contributed by Andrew Eland.)
  * The [`imaplib`](https://docs.python.org/3/library/imaplib.html#module-imaplib "imaplib: IMAP4 protocol client \(requires sockets\).") module now supports IMAP’s THREAD command (contributed by Yves Dionne) and new `deleteacl()` and `myrights()` methods (contributed by Arnaud Mazin).
  * The [`itertools`](https://docs.python.org/3/library/itertools.html#module-itertools "itertools: Functions creating iterators for efficient looping.") module gained a `groupby(iterable[, *func*])` function. _iterable_ is something that can be iterated over to return a stream of elements, and the optional _func_ parameter is a function that takes an element and returns a key value; if omitted, the key is simply the element itself. `groupby()` then groups the elements into subsequences which have matching values of the key, and returns a series of 2-tuples containing the key value and an iterator over the subsequence.
Here’s an example to make this clearer. The _key_ function simply returns whether a number is even or odd, so the result of `groupby()` is to return consecutive runs of odd or even numbers.
>>>```
>>> importitertools
>>> L = [2, 4, 6, 7, 8, 9, 11, 12, 14]
>>> for key_val, it in itertools.groupby(L, lambda x: x % 2):
...   print key_val, list(it)
...
0 [2, 4, 6]
1 [7]
0 [8]
1 [9, 11]
0 [12, 14]
>>>

```

`groupby()` is typically used with sorted input. The logic for `groupby()` is similar to the Unix `uniq` filter which makes it handy for eliminating, counting, or identifying duplicate elements:
>>>