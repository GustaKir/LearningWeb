Title: Formatting Flags and Conversion Types in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This section details the formatting flags used in Python string conversions, including characters like '#', '0', '-', ' ', and '+', which affect how values are formatted. It also notes the presence of length modifiers, which are ignored in Python, and lists various conversion types such as 'd' for signed decimal integers and 'o' for signed octal values.
---

```

In this case no `*` specifiers may occur in a format (since they require a sequential parameter list).
The conversion flag characters are:
Flag | Meaning  
---|---  
`'#'` | The value conversion will use the “alternate form” (where defined below).  
`'0'` | The conversion will be zero padded for numeric values.  
`'-'` | The converted value is left adjusted (overrides the `'0'` conversion if both are given).  
`' '` | (a space) A blank should be left before a positive number (or empty string) produced by a signed conversion.  
`'+'` | A sign character (`'+'` or `'-'`) will precede the conversion (overrides a “space” flag).  
A length modifier (`h`, `l`, or `L`) may be present, but is ignored as it is not necessary for Python – so e.g. `%ld` is identical to `%d`.
The conversion types are:
Conversion | Meaning | Notes  
---|---|---  
`'d'` | Signed integer decimal. |   
`'i'` | Signed integer decimal. |   
`'o'` | Signed octal value. | (1)  
`'u'` | Obsolete type – it is identical to `'d'`. | (6)  
`'x'` | Signed hexadecimal (lowercase). | (2)  
`'X'` | Signed hexadecimal (uppercase). | (2)  
`'e'` | Floating-point exponential format (lowercase). | (3)  
`'E'` | Floating-point exponential format (uppercase). | (3)  
`'f'` | Floating-point decimal format. | (3)  
`'F'` | Floating-point decimal format. | (3)  
`'g'` | Floating-point format. Uses lowercase exponential format if exponent is less than -4 or not less than precision, decimal format otherwise. | (4)  
`'G'` | Floating-point format. Uses uppercase exponential format if exponent is less than -4 or not less than precision, decimal format otherwise. | (4)  
`'c'` | Single character (accepts integer or single character string). |   
`'r'` | String (converts any Python object using [`repr()`](https://docs.python.org/3/library/functions.html#repr "repr")). | (5)  
`'s'` | String (converts any Python object using [`str()`](https://docs.python.org/3/library/stdtypes.html#str "str")). | (5)  
`'a'` | String (converts any Python object using [`ascii()`](https://docs.python.org/3/library/functions.html#ascii "ascii")). | (5)  
`'%'` | No argument is converted, results in a `'%'` character in the result. |   
Notes:
  1. The alternate form causes a leading octal specifier (`'0o'`) to be inserted before the first digit.
  2. The alternate form causes a leading `'0x'` or `'0X'` (depending on whether the `'x'` or `'X'` format was used) to be inserted before the first digit.
  3. The alternate form causes the result to always contain a decimal point, even if no digits follow it.
The precision determines the number of digits after the decimal point and defaults to 6.
  4. The alternate form causes the result to always contain a decimal point, and trailing zeroes are not removed as they would otherwise be.
The precision determines the number of significant digits before and after the decimal point and defaults to 6.
  5. If precision is `N`, the output is truncated to `N` characters.
  6. See [**PEP 237**](https://peps.python.org/pep-0237/).


Since Python strings have an explicit length, `%s` conversions do not assume that `'\0'` is the end of the string.
Changed in version 3.1: `%f` conversions for numbers whose absolute value is over 1e50 are no longer replaced by `%g` conversions.
## Binary Sequence Types — [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes"), [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray"), [`memoryview`](https://docs.python.org/3/library/stdtypes.html#memoryview "memoryview")[¶](https://docs.python.org/3/library/stdtypes.html#binary-sequence-types-bytes-bytearray-memoryview "Link to this heading")
The core built-in types for manipulating binary data are [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") and [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray"). They are supported by [`memoryview`](https://docs.python.org/3/library/stdtypes.html#memoryview "memoryview") which uses the [buffer protocol](https://docs.python.org/3/c-api/buffer.html#bufferobjects) to access the memory of other binary objects without needing to make a copy.
The [`array`](https://docs.python.org/3/library/array.html#module-array "array: Space efficient arrays of uniformly typed numeric values.") module supports efficient storage of basic data types like 32-bit integers and IEEE754 double-precision floating values.
### Bytes Objects[¶](https://docs.python.org/3/library/stdtypes.html#bytes-objects "Link to this heading")
Bytes objects are immutable sequences of single bytes. Since many major binary protocols are based on the ASCII text encoding, bytes objects offer several methods that are only valid when working with ASCII compatible data and are closely related to string objects in a variety of other ways.