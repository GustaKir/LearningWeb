Title: String and Bytes Literals in Python
URL: https://docs.python.org/3/reference/lexical_analysis.html
Summary: This section outlines the syntactic restrictions on string and bytes literals in Python, emphasizing that no whitespace is allowed between the prefix and the literal. It also explains the allowed quote styles and the use of backslashes for escaping characters. The source character set defaults to UTF-8 unless specified otherwise.
---

```

One syntactic restriction not indicated by these productions is that whitespace is not allowed between the [`stringprefix`](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-stringprefix) or [`bytesprefix`](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-bytesprefix) and the rest of the literal. The source character set is defined by the encoding declaration; it is UTF-8 if no encoding declaration is given in the source file; see section [Encoding declarations](https://docs.python.org/3/reference/lexical_analysis.html#encodings).
In plain English: Both types of literals can be enclosed in matching single quotes (`'`) or double quotes (`"`). They can also be enclosed in matching groups of three single or double quotes (these are generally referred to as _triple-quoted strings_). The backslash (`\`) character is used to give special meaning to otherwise ordinary characters like `n`, which means ‘newline’ when escaped (`\n`). It can also be used to escape characters that otherwise have a special meaning, such as newline, backslash itself, or the quote character. See [escape sequences](https://docs.python.org/3/reference/lexical_analysis.html#escape-sequences) below for examples.
Bytes literals are always prefixed with `'b'` or `'B'`; they produce an instance of the [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") type instead of the [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") type. They may only contain ASCII characters; bytes with a numeric value of 128 or greater must be expressed with escapes.
Both string and bytes literals may optionally be prefixed with a letter `'r'` or `'R'`; such constructs are called _raw string literals_ and _raw bytes literals_ respectively and treat backslashes as literal characters. As a result, in raw string literals, `'\U'` and `'\u'` escapes are not treated specially.
Added in version 3.3: The `'rb'` prefix of raw bytes literals has been added as a synonym of `'br'`.
Support for the unicode legacy literal (`u'value'`) was reintroduced to simplify the maintenance of dual Python 2.x and 3.x codebases. See [**PEP 414**](https://peps.python.org/pep-0414/) for more information.
A string literal with `'f'` or `'F'` in its prefix is a _formatted string literal_ ; see [f-strings](https://docs.python.org/3/reference/lexical_analysis.html#f-strings). The `'f'` may be combined with `'r'`, but not with `'b'` or `'u'`, therefore raw formatted strings are possible, but formatted bytes literals are not.
In triple-quoted literals, unescaped newlines and quotes are allowed (and are retained), except that three unescaped quotes in a row terminate the literal. (A “quote” is the character used to open the literal, i.e. either `'` or `"`.)
#### 2.4.1.1. Escape sequences[¶](https://docs.python.org/3/reference/lexical_analysis.html#escape-sequences "Link to this heading")
Unless an `'r'` or `'R'` prefix is present, escape sequences in string and bytes literals are interpreted according to rules similar to those used by Standard C. The recognized escape sequences are:
Escape Sequence | Meaning | Notes  
---|---|---  
`\`<newline> | Backslash and newline ignored | (1)  
`\\` | Backslash (`\`) |   
`\'` | Single quote (`'`) |   
`\"` | Double quote (`"`) |   
`\a` | ASCII Bell (BEL) |   
`\b` | ASCII Backspace (BS) |   
`\f` | ASCII Formfeed (FF) |   
`\n` | ASCII Linefeed (LF) |   
`\r` | ASCII Carriage Return (CR) |   
`\t` | ASCII Horizontal Tab (TAB) |   
`\v` | ASCII Vertical Tab (VT) |   
`\_ooo_`|  Character with octal value _ooo_ | (2,4)  
`\x_hh_`|  Character with hex value _hh_ | (3,4)  
Escape sequences only recognized in string literals are:
Escape Sequence | Meaning | Notes  
---|---|---  
`\N{_name_}`|  Character named _name_ in the Unicode database | (5)  
`\u_xxxx_`|  Character with 16-bit hex value _xxxx_ | (6)  
`\U_xxxxxxxx_`|  Character with 32-bit hex value _xxxxxxxx_ | (7)  
Notes:
  1. A backslash can be added at the end of a line to ignore the newline:
>>>```
>>> 'This string will not include \
... backslashes or newline characters.'
'This string will not include backslashes or newline characters.'