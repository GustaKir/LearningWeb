Title: Python 3.8: New Features and Changes
URL: https://docs.python.org/3/whatsnew/3.8.html
Summary: This documentation extract discusses changes in Python 3.8, including the corrected output for the `isqrt` function in comparison to `sqrt`, the updated restriction on `math.factorial()` to accept only int-like arguments, and the addition of the `madvise()` method in the `mmap.mmap` class for accessing the `madvise()` system call.
---

```
>>> r = 650320427
>>> s = r ** 2
>>> isqrt(s - 1)     # correct
650320426
>>> floor(sqrt(s - 1))  # incorrect
650320427

```

(Contributed by Mark Dickinson in [bpo-36887](https://bugs.python.org/issue?@action=redirect&bpo=36887).)
The function [`math.factorial()`](https://docs.python.org/3/library/math.html#math.factorial "math.factorial") no longer accepts arguments that are not int-like. (Contributed by Pablo Galindo in [bpo-33083](https://bugs.python.org/issue?@action=redirect&bpo=33083).)
### mmap[¶](https://docs.python.org/3/whatsnew/3.8.html#mmap "Link to this heading")
The [`mmap.mmap`](https://docs.python.org/3/library/mmap.html#mmap.mmap "mmap.mmap") class now has an [`madvise()`](https://docs.python.org/3/library/mmap.html#mmap.mmap.madvise "mmap.mmap.madvise") method to access the `madvise()` system call. (Contributed by Zackery Spytz in [bpo-32941](https://bugs.python.org/issue?@action=redirect&bpo=32941).)
### multiprocessing[¶](https://docs.python.org/3/whatsnew/3.8.html#multiprocessing "Link to this heading")
Added new [`multiprocessing.shared_memory`](https://docs.python.org/3/library/multiprocessing.shared_memory.html#module-multiprocessing.shared_memory "multiprocessing.shared_memory: Provides shared memory for direct access across processes.") module. (Contributed by Davin Potts in [bpo-35813](https://bugs.python.org/issue?@action=redirect&bpo=35813).)
On macOS, the _spawn_ start method is now used by default. (Contributed by Victor Stinner in [bpo-33725](https://bugs.python.org/issue?@action=redirect&bpo=33725).)
### os[¶](https://docs.python.org/3/whatsnew/3.8.html#os "Link to this heading")
Added new function [`add_dll_directory()`](https://docs.python.org/3/library/os.html#os.add_dll_directory "os.add_dll_directory") on Windows for providing additional search paths for native dependencies when importing extension modules or loading DLLs using [`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "ctypes: A foreign function library for Python."). (Contributed by Steve Dower in [bpo-36085](https://bugs.python.org/issue?@action=redirect&bpo=36085).)
A new [`os.memfd_create()`](https://docs.python.org/3/library/os.html#os.memfd_create "os.memfd_create") function was added to wrap the `memfd_create()` syscall. (Contributed by Zackery Spytz and Christian Heimes in [bpo-26836](https://bugs.python.org/issue?@action=redirect&bpo=26836).)
On Windows, much of the manual logic for handling reparse points (including symlinks and directory junctions) has been delegated to the operating system. Specifically, [`os.stat()`](https://docs.python.org/3/library/os.html#os.stat "os.stat") will now traverse anything supported by the operating system, while [`os.lstat()`](https://docs.python.org/3/library/os.html#os.lstat "os.lstat") will only open reparse points that identify as “name surrogates” while others are opened as for [`os.stat()`](https://docs.python.org/3/library/os.html#os.stat "os.stat"). In all cases, `stat_result.st_mode` will only have `S_IFLNK` set for symbolic links and not other kinds of reparse points. To identify other kinds of reparse point, check the new `stat_result.st_reparse_tag` attribute.
On Windows, [`os.readlink()`](https://docs.python.org/3/library/os.html#os.readlink "os.readlink") is now able to read directory junctions. Note that [`islink()`](https://docs.python.org/3/library/os.path.html#os.path.islink "os.path.islink") will return `False` for directory junctions, and so code that checks `islink` first will continue to treat junctions as directories, while code that handles errors from [`os.readlink()`](https://docs.python.org/3/library/os.html#os.readlink "os.readlink") may now treat junctions as links.
(Contributed by Steve Dower in [bpo-37834](https://bugs.python.org/issue?@action=redirect&bpo=37834).)
### os.path[¶](https://docs.python.org/3/whatsnew/3.8.html#os-path "Link to this heading")
[`os.path`](https://docs.python.org/3/library/os.path.html#module-os.path "os.path: Operations on pathnames.") functions that return a boolean result like [`exists()`](https://docs.python.org/3/library/os.path.html#os.path.exists "os.path.exists"), [`lexists()`](https://docs.python.org/3/library/os.path.html#os.path.lexists "os.path.lexists"), [`isdir()`](https://docs.python.org/3/library/os.path.html#os.path.isdir "os.path.isdir"), [`isfile()`](https://docs.python.org/3/library/os.path.html#os.path.isfile "os.path.isfile"), [`islink()`](https://docs.python.org/3/library/os.path.html#os.path.islink "os.path.islink"), and [`ismount()`](https://docs.python.org/3/library/os.path.html#os.path.ismount "os.path.ismount") now return `False` instead of raising [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") or its subclasses [`UnicodeEncodeError`](https://docs.python.org/3/library/exceptions.html#UnicodeEncodeError "UnicodeEncodeError") and [`UnicodeDecodeError`](https://docs.python.org/3/library/exceptions.html#UnicodeDecodeEr