Title: Pathlib: Path Methods Overview
URL: https://docs.python.org/3/library/pathlib.html
Summary: The 'is_file()' and 'is_dir()' methods in the pathlib module return True if the path points to a regular file or directory respectively. Both methods do not follow symlinks by default and return False if the path does not exist, is a broken symlink, or encounters other errors. The '_follow_symlinks_' parameter was added in version 3.12 for controlling symlink behavior.
---

```

Changed in version 3.12: The _follow_symlinks_ parameter was added. 

Path.is_file(_*_ , _follow_symlinks =True_)[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.is_file "Link to this definition")
    
Return `True` if the path points to a regular file, `False` if it points to another kind of file.
`False` is also returned if the path doesn’t exist or is a broken symlink; other errors (such as permission errors) are propagated.
This method normally follows symlinks; to exclude symlinks, add the argument `follow_symlinks=False`.
Changed in version 3.13: The _follow_symlinks_ parameter was added. 

Path.is_dir(_*_ , _follow_symlinks =True_)[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.is_dir "Link to this definition")
    
Return `True` if the path points to a directory, `False` if it points to another kind of file.
`False` is also returned if the path doesn’t exist or is a broken symlink; other errors (such as permission errors) are propagated.
This method normally follows symlinks; to exclude symlinks to directories, add the argument `follow_symlinks=False`.
Changed in version 3.13: The _follow_symlinks_ parameter was added. 

Path.is_symlink()[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.is_symlink "Link to this definition")
    
Return `True` if the path points to a symbolic link, `False` otherwise.
`False` is also returned if the path doesn’t exist; other errors (such as permission errors) are propagated. 

Path.is_junction()[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.is_junction "Link to this definition")
    
Return `True` if the path points to a junction, and `False` for any other type of file. Currently only Windows supports junctions.
Added in version 3.12. 

Path.is_mount()[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.is_mount "Link to this definition")
    
Return `True` if the path is a _mount point_ : a point in a file system where a different file system has been mounted. On POSIX, the function checks whether _path_ ’s parent, `path/..`, is on a different device than _path_ , or whether `path/..` and _path_ point to the same i-node on the same device — this should detect mount points for all Unix and POSIX variants. On Windows, a mount point is considered to be a drive letter root (e.g. `c:\`), a UNC share (e.g. `\\server\share`), or a mounted filesystem directory.
Added in version 3.7.
Changed in version 3.12: Windows support was added. 

Path.is_socket()[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.is_socket "Link to this definition")
    
Return `True` if the path points to a Unix socket (or a symbolic link pointing to a Unix socket), `False` if it points to another kind of file.
`False` is also returned if the path doesn’t exist or is a broken symlink; other errors (such as permission errors) are propagated. 

Path.is_fifo()[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.is_fifo "Link to this definition")
    
Return `True` if the path points to a FIFO (or a symbolic link pointing to a FIFO), `False` if it points to another kind of file.
`False` is also returned if the path doesn’t exist or is a broken symlink; other errors (such as permission errors) are propagated. 

Path.is_block_device()[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.is_block_device "Link to this definition")
    
Return `True` if the path points to a block device (or a symbolic link pointing to a block device), `False` if it points to another kind of file.
`False` is also returned if the path doesn’t exist or is a broken symlink; other errors (such as permission errors) are propagated. 

Path.is_char_device()[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.is_char_device "Link to this definition")
    
Return `True` if the path points to a character device (or a symbolic link pointing to a character device), `False` if it points to another kind of file.
`False` is also returned if the path doesn’t exist or is a broken symlink; other errors (such as permission errors) are propagated. 

Path.samefile(_other_path_)[¶](https://docs.python.org/3/library/pathlib.html#pathlib.Path.samefile "Link to this definition")
    
Return whether this path points to the same file as _other_path_ , which can be either a Path object, or a string. The semantics are similar to [`os.path.samefile()`](https://docs.python.org/3/library/os.path.html#os.path.samefile "os.path.samefile") and [`os.path.samestat()`](https://docs.python.org/3/library/os.path.html#os.path.samestat "os.path.samestat").
An [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") can be raised if either file cannot be accessed for some reason.
>>>```
>>> p = Path('spam')
>>> q = Path('eggs')
>>> p.samefile(q)
False
>>> p.samefile('spam')
True