Title: Bdb Debugger Methods
URL: https://docs.python.org/3/library/bdb.html
Summary: The Bdb module provides several methods for debugging in Python. `set_trace([_frame_])` starts debugging from the specified frame or from the caller's frame if none is provided. In version 3.13, it enters the debugger immediately. `set_continue()` allows execution to continue, stopping only at breakpoints. `set_quit()` sets the quitting attribute to True, which raises `BdbQuit` in subsequent calls to dispatch methods.
---

set_trace([_frame_])[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.set_trace "Link to this definition")
    
Start debugging from _frame_. If _frame_ is not specified, debugging starts from caller’s frame.
Changed in version 3.13: [`set_trace()`](https://docs.python.org/3/library/bdb.html#bdb.set_trace "bdb.set_trace") will enter the debugger immediately, rather than on the next line of code to be executed. 

set_continue()[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.set_continue "Link to this definition")
    
Stop only at breakpoints or when finished. If there are no breakpoints, set the system trace function to `None`. 

set_quit()[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.set_quit "Link to this definition")
    
Set the `quitting` attribute to `True`. This raises [`BdbQuit`](https://docs.python.org/3/library/bdb.html#bdb.BdbQuit "bdb.BdbQuit") in the next call to one of the `dispatch_*()` methods.
Derived classes and clients can call the following methods to manipulate breakpoints. These methods return a string containing an error message if something went wrong, or `None` if all is well. 

set_break(_filename_ , _lineno_ , _temporary =False_, _cond =None_, _funcname =None_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.set_break "Link to this definition")
    
Set a new breakpoint. If the _lineno_ line doesn’t exist for the _filename_ passed as argument, return an error message. The _filename_ should be in canonical form, as described in the [`canonic()`](https://docs.python.org/3/library/bdb.html#bdb.Bdb.canonic "bdb.Bdb.canonic") method. 

clear_break(_filename_ , _lineno_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.clear_break "Link to this definition")
    
Delete the breakpoints in _filename_ and _lineno_. If none were set, return an error message. 

clear_bpbynumber(_arg_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.clear_bpbynumber "Link to this definition")
    
Delete the breakpoint which has the index _arg_ in the [`Breakpoint.bpbynumber`](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint.bpbynumber "bdb.Breakpoint.bpbynumber"). If _arg_ is not numeric or out of range, return an error message. 

clear_all_file_breaks(_filename_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.clear_all_file_breaks "Link to this definition")
    
Delete all breakpoints in _filename_. If none were set, return an error message. 

clear_all_breaks()[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.clear_all_breaks "Link to this definition")
    
Delete all existing breakpoints. If none were set, return an error message. 

get_bpbynumber(_arg_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.get_bpbynumber "Link to this definition")
    
Return a breakpoint specified by the given number. If _arg_ is a string, it will be converted to a number. If _arg_ is a non-numeric string, if the given breakpoint never existed or has been deleted, a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised.
Added in version 3.2. 

get_break(_filename_ , _lineno_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.get_break "Link to this definition")
    
Return `True` if there is a breakpoint for _lineno_ in _filename_. 

get_breaks(_filename_ , _lineno_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.get_breaks "Link to this definition")
    
Return all breakpoints for _lineno_ in _filename_ , or an empty list if none are set. 

get_file_breaks(_filename_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.get_file_breaks "Link to this definition")
    
Return all breakpoints in _filename_ , or an empty list if none are set. 

get_all_breaks()[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.get_all_breaks "Link to this definition")
    
Return all breakpoints that are set.
Derived classes and clients can call the following methods to get a data structure representing a stack trace. 

get_stack(_f_ , _t_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.get_stack "Link to this definition")
    
Return a list of (frame, lineno) tuples in a stack trace, and a size.
The most recently called frame is last in the list. The size is the number of frames below the frame where the debugger was invoked. 

format_stack_entry(_frame_lineno_ , _lprefix =': '_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.format_stack_entry "Link to this definition")
    
Return a string with information about a stack entry, which is a `(frame, lineno)` tuple. The return string contains:
  * The canonical filename which contains the frame.
  * The function name or `"<lambda>"`.
  * The input arguments.
  * The return value.
  * The line of code (if it exists).


The following two methods can be called by clients to use a debugger to debug a [statement](https://docs.python.org/3/glossary.html#term-statement), given as a string.