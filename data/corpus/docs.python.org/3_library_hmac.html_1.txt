Title: HMAC Digest and Hexdigest Methods
URL: https://docs.python.org/3/library/hmac.html
Summary: The `HMAC.digest()` method returns the digest of bytes passed to the `update()` method, matching the digest size specified during construction. A warning is provided to use `compare_digest()` for verifying outputs to prevent timing attacks. The `HMAC.hexdigest()` method offers a hexadecimal representation of the digest.
---

HMAC.digest()[¶](https://docs.python.org/3/library/hmac.html#hmac.HMAC.digest "Link to this definition")
    
Return the digest of the bytes passed to the [`update()`](https://docs.python.org/3/library/hmac.html#hmac.HMAC.update "hmac.HMAC.update") method so far. This bytes object will be the same length as the _digest_size_ of the digest given to the constructor. It may contain non-ASCII bytes, including NUL bytes.
Warning
When comparing the output of [`digest()`](https://docs.python.org/3/library/hmac.html#hmac.digest "hmac.digest") to an externally supplied digest during a verification routine, it is recommended to use the [`compare_digest()`](https://docs.python.org/3/library/hmac.html#hmac.compare_digest "hmac.compare_digest") function instead of the `==` operator to reduce the vulnerability to timing attacks. 

HMAC.hexdigest()[¶](https://docs.python.org/3/library/hmac.html#hmac.HMAC.hexdigest "Link to this definition")
    
Like [`digest()`](https://docs.python.org/3/library/hmac.html#hmac.digest "hmac.digest") except the digest is returned as a string twice the length containing only hexadecimal digits. This may be used to exchange the value safely in email or other non-binary environments.
Warning
When comparing the output of [`hexdigest()`](https://docs.python.org/3/library/hmac.html#hmac.HMAC.hexdigest "hmac.HMAC.hexdigest") to an externally supplied digest during a verification routine, it is recommended to use the [`compare_digest()`](https://docs.python.org/3/library/hmac.html#hmac.compare_digest "hmac.compare_digest") function instead of the `==` operator to reduce the vulnerability to timing attacks. 

HMAC.copy()[¶](https://docs.python.org/3/library/hmac.html#hmac.HMAC.copy "Link to this definition")
    
Return a copy (“clone”) of the hmac object. This can be used to efficiently compute the digests of strings that share a common initial substring.
A hash object has the following attributes: 

HMAC.digest_size[¶](https://docs.python.org/3/library/hmac.html#hmac.HMAC.digest_size "Link to this definition")
    
The size of the resulting HMAC digest in bytes. 

HMAC.block_size[¶](https://docs.python.org/3/library/hmac.html#hmac.HMAC.block_size "Link to this definition")
    
The internal block size of the hash algorithm in bytes.
Added in version 3.4. 

HMAC.name[¶](https://docs.python.org/3/library/hmac.html#hmac.HMAC.name "Link to this definition")
    
The canonical name of this HMAC, always lowercase, e.g. `hmac-md5`.
Added in version 3.4.
Changed in version 3.10: Removed the undocumented attributes `HMAC.digest_cons`, `HMAC.inner`, and `HMAC.outer`.
This module also provides the following helper function: 

hmac.compare_digest(_a_ , _b_)[¶](https://docs.python.org/3/library/hmac.html#hmac.compare_digest "Link to this definition")
    
Return `a == b`. This function uses an approach designed to prevent timing analysis by avoiding content-based short circuiting behaviour, making it appropriate for cryptography. _a_ and _b_ must both be of the same type: either [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") (ASCII only, as e.g. returned by [`HMAC.hexdigest()`](https://docs.python.org/3/library/hmac.html#hmac.HMAC.hexdigest "hmac.HMAC.hexdigest")), or a [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object).
Note
If _a_ and _b_ are of different lengths, or if an error occurs, a timing attack could theoretically reveal information about the types and lengths of _a_ and _b_ —but not their values.
Added in version 3.3.
Changed in version 3.10: The function uses OpenSSL’s `CRYPTO_memcmp()` internally when available.
See also 

Module [`hashlib`](https://docs.python.org/3/library/hashlib.html#module-hashlib "hashlib: Secure hash and message digest algorithms.")
    
The Python module providing secure hash functions.
#### Previous topic
[`hashlib` — Secure hashes and message digests](https://docs.python.org/3/library/hashlib.html "previous chapter")
#### Next topic
[`secrets` — Generate secure random numbers for managing secrets](https://docs.python.org/3/library/secrets.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/hmac.rst)