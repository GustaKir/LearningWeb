Title: Array Bisection Algorithm - `bisect` Module
URL: https://docs.python.org/3/library/bisect.html
Summary: The `bisect` module in Python provides functions for maintaining a list in sorted order without having to sort the list after each insertion. It includes methods for searching sorted lists and performance notes.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [`bisect` — Array bisection algorithm](https://docs.python.org/3/library/bisect.html)
    * [Performance Notes](https://docs.python.org/3/library/bisect.html#performance-notes)
    * [Searching Sorted Lists](https://docs.python.org/3/library/bisect.html#searching-sorted-lists)
    * [Examples](https://docs.python.org/3/library/bisect.html#examples)


#### Previous topic
[`heapq` — Heap queue algorithm](https://docs.python.org/3/library/heapq.html "previous chapter")
#### Next topic
[`array` — Efficient arrays of numeric values](https://docs.python.org/3/library/array.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/bisect.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/array.html "array — Efficient arrays of numeric values") |
  * [previous](https://docs.python.org/3/library/heapq.html "heapq — Heap queue algorithm") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Data Types](https://docs.python.org/3/library/datatypes.html) »
  * [`bisect` — Array bisection algorithm](https://docs.python.org/3/library/bisect.html)
  * | 
  * Theme  Auto Light Dark |


# `bisect` — Array bisection algorithm[¶](https://docs.python.org/3/library/bisect.html#module-bisect "Link to this heading")
**Source code:** [Lib/bisect.py](https://github.com/python/cpython/tree/3.13/Lib/bisect.py)
This module provides support for maintaining a list in sorted order without having to sort the list after each insertion. For long lists of items with expensive comparison operations, this can be an improvement over linear searches or frequent resorting.
The module is called [`bisect`](https://docs.python.org/3/library/bisect.html#module-bisect "bisect: Array bisection algorithms for binary searching.") because it uses a basic bisection algorithm to do its work. Unlike other bisection tools that search for a specific value, the functions in this module are designed to locate an insertion point. Accordingly, the functions never call an [`__eq__()`](https://docs.python.org/3/reference/datamodel.html#object.__eq__ "object.__eq__") method to determine whether a value has been found. Instead, the functions only call the [`__lt__()`](https://docs.python.org/3/reference/datamodel.html#object.__lt__ "object.__lt__") method and will return an insertion point between values in an array.
The following functions are provided: 

bisect.bisect_left(_a_ , _x_ , _lo =0_, _hi =len(a)_, _*_ , _key =None_)[¶](https://docs.python.org/3/library/bisect.html#bisect.bisect_left "Link to this definition")
    
Locate the insertion point for _x_ in _a_ to maintain sorted order. The parameters _lo_ and _hi_ may be used to specify a subset of the list which should be considered; by default the entire list is used. If _x_ is already present in _a_ , the insertion point will be before (to the left of) any existing entries. The return value is suitable for use as the first parameter to `list.insert()` assuming that _a_ is already sorted.
The returned insertion point _ip_ partitions the array _a_ into two slices such that `all(elem < x for elem in a[lo : ip])` is true for the left slice and `all(elem >= x for elem in a[ip : hi])` is true for the right slice.
_key_ specifies a [key function](https://docs.python.org/3/glossary.html#term-key-function) of one argument that is used to extract a comparison key from each element in the array. To support searching complex records, the key function is not applied to the _x_ value.
If _key_ is `None`, the elements are compared directly and no key function is called.
Changed in version 3.10: Added the _key_ parameter. 

bisect.bisect_right(_a_ , _x_ , _lo =0_, _hi =len(a)_, _*_ , _key =None_)[¶](https://docs.python.org/3/library/bisect.html#bisect.bisect_right "Link to this definition")