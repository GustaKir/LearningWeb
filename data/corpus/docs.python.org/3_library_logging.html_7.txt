Title: Logging Levels and Handler Objects
URL: https://docs.python.org/3/library/logging.html
Summary: This section covers the logging levels, specifically ERROR and CRITICAL, which indicate the severity of problems that prevent software from functioning. It also introduces Handler objects in the logging module, noting that Handler is a base class for subclasses and must call its __init__() method in those subclasses.
---

logging.ERROR[¶](https://docs.python.org/3/library/logging.html#logging.ERROR "Link to this definition")
| 40 | Due to a more serious problem, the software has not been able to perform some function. 

logging.CRITICAL[¶](https://docs.python.org/3/library/logging.html#logging.CRITICAL "Link to this definition")
| 50 | A serious error, indicating that the program itself may be unable to continue running.  
## Handler Objects[¶](https://docs.python.org/3/library/logging.html#handler-objects "Link to this heading")
Handlers have the following attributes and methods. Note that [`Handler`](https://docs.python.org/3/library/logging.html#logging.Handler "logging.Handler") is never instantiated directly; this class acts as a base for more useful subclasses. However, the `__init__()` method in subclasses needs to call [`Handler.__init__()`](https://docs.python.org/3/library/logging.html#logging.Handler.__init__ "logging.Handler.__init__"). 

_class_ logging.Handler[¶](https://docs.python.org/3/library/logging.html#logging.Handler "Link to this definition")
     

__init__(_level =NOTSET_)[¶](https://docs.python.org/3/library/logging.html#logging.Handler.__init__ "Link to this definition")
    
Initializes the [`Handler`](https://docs.python.org/3/library/logging.html#logging.Handler "logging.Handler") instance by setting its level, setting the list of filters to the empty list and creating a lock (using [`createLock()`](https://docs.python.org/3/library/logging.html#logging.Handler.createLock "logging.Handler.createLock")) for serializing access to an I/O mechanism. 

createLock()[¶](https://docs.python.org/3/library/logging.html#logging.Handler.createLock "Link to this definition")
    
Initializes a thread lock which can be used to serialize access to underlying I/O functionality which may not be threadsafe. 

acquire()[¶](https://docs.python.org/3/library/logging.html#logging.Handler.acquire "Link to this definition")
    
Acquires the thread lock created with [`createLock()`](https://docs.python.org/3/library/logging.html#logging.Handler.createLock "logging.Handler.createLock"). 

release()[¶](https://docs.python.org/3/library/logging.html#logging.Handler.release "Link to this definition")
    
Releases the thread lock acquired with [`acquire()`](https://docs.python.org/3/library/logging.html#logging.Handler.acquire "logging.Handler.acquire"). 

setLevel(_level_)[¶](https://docs.python.org/3/library/logging.html#logging.Handler.setLevel "Link to this definition")
    
Sets the threshold for this handler to _level_. Logging messages which are less severe than _level_ will be ignored. When a handler is created, the level is set to [`NOTSET`](https://docs.python.org/3/library/logging.html#logging.NOTSET "logging.NOTSET") (which causes all messages to be processed).
See [Logging Levels](https://docs.python.org/3/library/logging.html#levels) for a list of levels.
Changed in version 3.2: The _level_ parameter now accepts a string representation of the level such as ‘INFO’ as an alternative to the integer constants such as [`INFO`](https://docs.python.org/3/library/logging.html#logging.INFO "logging.INFO"). 

setFormatter(_fmt_)[¶](https://docs.python.org/3/library/logging.html#logging.Handler.setFormatter "Link to this definition")
    
Sets the formatter for this handler to _fmt_. The _fmt_ argument must be a [`Formatter`](https://docs.python.org/3/library/logging.html#logging.Formatter "logging.Formatter") instance or `None`. 

addFilter(_filter_)[¶](https://docs.python.org/3/library/logging.html#logging.Handler.addFilter "Link to this definition")
    
Adds the specified filter _filter_ to this handler. 

removeFilter(_filter_)[¶](https://docs.python.org/3/library/logging.html#logging.Handler.removeFilter "Link to this definition")
    
Removes the specified filter _filter_ from this handler. 

filter(_record_)[¶](https://docs.python.org/3/library/logging.html#logging.Handler.filter "Link to this definition")
    
Apply this handler’s filters to the record and return `True` if the record is to be processed. The filters are consulted in turn, until one of them returns a false value. If none of them return a false value, the record will be emitted. If one returns a false value, the handler will not emit the record. 

flush()[¶](https://docs.python.org/3/library/logging.html#logging.Handler.flush "Link to this definition")
    
Ensure all logging output has been flushed. This version does nothing and is intended to be implemented by subclasses. 

close()[¶](https://docs.python.org/3/library/logging.html#logging.Handler.close "Link to this definition")
    
Tidy up any resources used by the handler. This version does no output but removes the handler from an internal map of handlers, which is used for handler lookup by name.
Subclasses should ensure that this gets called from overridden [`close()`](https://docs.python.org/3/library/logging.html#logging.Handler.close "logging.Handler.close") methods.