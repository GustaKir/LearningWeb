Title: Python 3 Changelog - Recent Patches and Improvements
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This document lists recent patches and improvements in Python 3, including fixes to the `tokenize` module, enhancements to f-string performance by modifying opcodes, removal of inefficient superinstructions, and prevention of memory access issues during `mmap.find()` calls.
---

Patch by Donghee Na and Carl Meyer.
  * [gh-105324](https://github.com/python/cpython/issues/105324): Fix the main function of the [`tokenize`](https://docs.python.org/3/library/tokenize.html#module-tokenize "tokenize: Lexical scanner for Python source code.") module when reading from `sys.stdin`. Patch by Pablo Galindo
  * [gh-33092](https://github.com/python/cpython/issues/33092): Simplify and speed up interpreter for f-strings. Removes `FORMAT_VALUE` opcode. Add `CONVERT_VALUE`, `FORMAT_SIMPLE` and `FORMAT_WITH_SPEC` opcode. Compiler emits more efficient sequence for each format expression.
  * [gh-105229](https://github.com/python/cpython/issues/105229): Remove remaining two-codeunit superinstructions. All remaining superinstructions only take a single codeunit, simplifying instrumentation and quickening.
  * [gh-105235](https://github.com/python/cpython/issues/105235): Prevent out-of-bounds memory access during `mmap.find()` calls.
  * [gh-98963](https://github.com/python/cpython/issues/98963): Restore the ability for a subclass of [`property`](https://docs.python.org/3/library/functions.html#property "property") to define `__slots__` or otherwise be dict-less by ignoring failures to set a docstring on such a class. This behavior had regressed in 3.12beta1. An [`AttributeError`](https://docs.python.org/3/library/exceptions.html#AttributeError "AttributeError") where there had not previously been one was disruptive to existing code.
  * [gh-104812](https://github.com/python/cpython/issues/104812): The “pending call” machinery now works for all interpreters, not just the main interpreter, and runs in all threads, not just the main thread. Some calls are still only done in the main thread, ergo in the main interpreter. This change does not affect signal handling nor the existing public C-API (`Py_AddPendingCall()`), which both still only target the main thread. The new functionality is meant strictly for internal use for now, since consequences of its use are not well understood yet outside some very restricted cases. This change brings the capability in line with the intention when the state was made per-interpreter several years ago.
  * [gh-105194](https://github.com/python/cpython/issues/105194): Do not escape with backslashes f-string format specifiers. Patch by Pablo Galindo
  * [gh-105229](https://github.com/python/cpython/issues/105229): Replace some dynamic superinstructions with single instruction equivalents.
  * [gh-105162](https://github.com/python/cpython/issues/105162): Fixed bug in generator.close()/throw() where an inner iterator would be ignored when the outer iterator was instrumented.
  * [gh-105164](https://github.com/python/cpython/issues/105164): Ensure annotations are set up correctly if the only annotation in a block is within a [`match`](https://docs.python.org/3/reference/compound_stmts.html#match) block. Patch by Jelle Zijlstra.
  * [gh-105148](https://github.com/python/cpython/issues/105148): Make `_PyASTOptimizeState` internal to ast_opt.c. Make `_PyAST_Optimize` take two integers instead of a pointer to this struct. This avoids the need to include pycore_compile.h in ast_opt.c.
  * [gh-104799](https://github.com/python/cpython/issues/104799): Attributes of [`ast`](https://docs.python.org/3/library/ast.html#module-ast "ast: Abstract Syntax Tree classes and manipulation.") nodes that are lists now default to the empty list if omitted. This means that some code that previously raised [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") when the AST node was used will now proceed with the empty list instead. Patch by Jelle Zijlstra.
  * [gh-105111](https://github.com/python/cpython/issues/105111): Remove the old trashcan macros `Py_TRASHCAN_SAFE_BEGIN` and `Py_TRASHCAN_SAFE_END`. They should be replaced by the new macros `Py_TRASHCAN_BEGIN` and `Py_TRASHCAN_END`.
  * [gh-105035](https://github.com/python/cpython/issues/105035): Fix [`super()`](https://docs.python.org/3/library/functions.html#super "super") calls on types with custom [`tp_getattro`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_getattro "PyTypeObject.tp_getattro") implementation (e.g. meta-types.)
  * [gh-105017](https://github.com/python/cpython/issues/105017): Show CRLF lines in the tokenize string attribute in both NL and NEWLINE tokens. Patch by Marta Gómez.
  * [gh-105013](https://github.com/python/cpython/issues/105013): Fix handling of multiline parenthesized lambdas in [`inspect.getsource()`](https://docs.python.org/3/library/inspect.html#inspect.getsource "inspect.getsource"). Patch by Pablo Galindo
  * [gh-105017](https://github.com/python/cpython/issues/105017): Do not include an additional final `NL` token when parsing files having CRLF lines.