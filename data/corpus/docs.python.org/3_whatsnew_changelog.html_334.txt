Title: Python 3 Change Log Updates
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: The document lists updates and bug fixes related to Python 3, including enhancements to type flags for mapping and sequence subclasses, a fix for a resource leak in the glob module, and other changes tracked by specific bug reports.
---

Aasland.
  * [bpo-43977](https://bugs.python.org/issue?@action=redirect&bpo=43977): Set the proper [`Py_TPFLAGS_MAPPING`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_MAPPING "Py_TPFLAGS_MAPPING") and [`Py_TPFLAGS_SEQUENCE`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_SEQUENCE "Py_TPFLAGS_SEQUENCE") flags for subclasses created before a parent has been registered as a [`collections.abc.Mapping`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Mapping "collections.abc.Mapping") or [`collections.abc.Sequence`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence "collections.abc.Sequence").
  * [bpo-44482](https://bugs.python.org/issue?@action=redirect&bpo=44482): Fix very unlikely resource leak in [`glob`](https://docs.python.org/3/library/glob.html#module-glob "glob: Unix shell style pathname pattern expansion.") in alternate Python implementations.
  * [bpo-44466](https://bugs.python.org/issue?@action=redirect&bpo=44466): The [`faulthandler`](https://docs.python.org/3/library/faulthandler.html#module-faulthandler "faulthandler: Dump the Python traceback.") module now detects if a fatal error occurs during a garbage collector collection. Patch by Victor Stinner.
  * [bpo-44471](https://bugs.python.org/issue?@action=redirect&bpo=44471): A [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") is now raised instead of an [`AttributeError`](https://docs.python.org/3/library/exceptions.html#AttributeError "AttributeError") in [`contextlib.ExitStack.enter_context()`](https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack.enter_context "contextlib.ExitStack.enter_context") and [`contextlib.AsyncExitStack.enter_async_context()`](https://docs.python.org/3/library/contextlib.html#contextlib.AsyncExitStack.enter_async_context "contextlib.AsyncExitStack.enter_async_context") for objects which do not support the [context manager](https://docs.python.org/3/glossary.html#term-context-manager) or [asynchronous context manager](https://docs.python.org/3/glossary.html#term-asynchronous-context-manager) protocols correspondingly.
  * [bpo-44404](https://bugs.python.org/issue?@action=redirect&bpo=44404): [`tkinter`](https://docs.python.org/3/library/tkinter.html#module-tkinter "tkinter: Interface to Tcl/Tk for graphical user interfaces")â€™s `after()` method now supports callables without the `__name__` attribute.
  * [bpo-41546](https://bugs.python.org/issue?@action=redirect&bpo=41546): Make [`pprint`](https://docs.python.org/3/library/pprint.html#module-pprint "pprint: Data pretty printer.") (like the builtin `print`) not attempt to write to `stdout` when it is `None`.
  * [bpo-44458](https://bugs.python.org/issue?@action=redirect&bpo=44458): `BUFFER_BLOCK_SIZE` is now declared static, to avoid linking collisions when bz2, lmza or zlib are statically linked.
  * [bpo-44464](https://bugs.python.org/issue?@action=redirect&bpo=44464): Remove exception for flake8 in deprecated importlib.metadata interfaces. Sync with importlib_metadata 4.6.
  * [bpo-44446](https://bugs.python.org/issue?@action=redirect&bpo=44446): Take into account that `lineno` might be `None` in [`traceback.FrameSummary`](https://docs.python.org/3/library/traceback.html#traceback.FrameSummary "traceback.FrameSummary").
  * [bpo-44439](https://bugs.python.org/issue?@action=redirect&bpo=44439): Fix in `bz2.BZ2File.write()` / `lzma.LZMAFile.write()` methods, when the input data is an object that supports the buffer protocol, the file length may be wrong.
  * [bpo-44434](https://bugs.python.org/issue?@action=redirect&bpo=44434): _thread.start_new_thread() no longer calls PyThread_exit_thread() explicitly at the thread exit, the call was redundant. On Linux with the glibc, pthread_exit() aborts the whole process if dlopen() fails to open libgcc_s.so file (ex: EMFILE error). Patch by Victor Stinner.
  * [bpo-42972](https://bugs.python.org/issue?@action=redirect&bpo=42972): The _thread.RLock type now fully implement the GC protocol: add a traverse function and the [`Py_TPFLAGS_HAVE_GC`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_HAVE_GC "Py_TPFLAGS_HAVE_GC") flag. Patch by Victor Stinner.
  * [bpo-44422](https://bugs.python.org/issue?@action=redirect&bpo=44422): The [`threading.enumerate()`](https://docs.python.org/3/library/threading.html#threading.enumerate "threading.enumerate") function now uses a reentrant lock to prevent a hang on reentrant call. Patch by Victor Stinner.
  * [bpo-38291](https://bugs.python.org/issue?@action=redirect&bpo=38291): Importing typing.io or typing.re now prints a `DeprecationWarning`.
  * [bpo-37880](https://bugs.python.org/issue?@action=redirect&bpo=37880): argparse actions store_const and append_const each receive a default value of `None` when the `const` kwarg is not provided.