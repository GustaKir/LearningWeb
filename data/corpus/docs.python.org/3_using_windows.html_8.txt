Title: Modifying Environment Variables on Windows for Python
URL: https://docs.python.org/3/using/windows.html
Summary: This section explains how to modify environment variables in Windows to include the Python executable. It discusses temporary command-line changes and the process to permanently update User and System variables through System properties. It notes that User variables are added after System variables, which can impact the `PATH` configuration.
---

```

These changes will apply to any further commands executed in that console, and will be inherited by any applications started from the console.
Including the variable name within percent signs will expand to the existing value, allowing you to add your new value at either the start or the end. Modifying `PATH` by adding the directory containing **python.exe** to the start is a common way to ensure the correct version of Python is launched.
To permanently modify the default environment variables, click Start and search for ‘edit environment variables’, or open System properties, Advanced system settings and click the Environment Variables button. In this dialog, you can add or modify User and System variables. To change System variables, you need non-restricted access to your machine (i.e. Administrator rights).
Note
Windows will concatenate User variables _after_ System variables, which may cause unexpected results when modifying `PATH`.
The [`PYTHONPATH`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH) variable is used by all versions of Python, so you should not permanently configure it unless the listed paths only include code that is compatible with all of your installed Python versions.
See also 

<https://learn.microsoft.com/windows/win32/procthread/environment-variables>
    
Overview of environment variables on Windows 

<https://learn.microsoft.com/windows-server/administration/windows-commands/set_1>
    
The `set` command, for temporarily modifying environment variables 

<https://learn.microsoft.com/windows-server/administration/windows-commands/setx>
    
The `setx` command, for permanently modifying environment variables
### 4.6.2. Finding the Python executable[¶](https://docs.python.org/3/using/windows.html#finding-the-python-executable "Link to this heading")
Changed in version 3.5.
Besides using the automatically created start menu entry for the Python interpreter, you might want to start Python in the command prompt. The installer has an option to set that up for you.
On the first page of the installer, an option labelled “Add Python to PATH” may be selected to have the installer add the install location into the `PATH`. The location of the `Scripts\` folder is also added. This allows you to type **python** to run the interpreter, and **pip** for the package installer. Thus, you can also execute your scripts with command line options, see [Command line](https://docs.python.org/3/using/cmdline.html#using-on-cmdline) documentation.
If you don’t enable this option at install time, you can always re-run the installer, select Modify, and enable it. Alternatively, you can manually modify the `PATH` using the directions in [Excursus: Setting environment variables](https://docs.python.org/3/using/windows.html#setting-envvars). You need to set your `PATH` environment variable to include the directory of your Python installation, delimited by a semicolon from other entries. An example variable could look like this (assuming the first two entries already existed):
```
C:\WINDOWS\system32;C:\WINDOWS;C:\Program Files\Python 3.9