Title: os.path Module Changes and Functions
URL: https://docs.python.org/3/library/os.path.html
Summary: Version 3.8 of the os.path module introduced changes to the functions exists(), lexists(), isdir(), isfile(), islink(), and ismount(), which now return False instead of raising exceptions for unrepresentable paths. The abspath() function returns a normalized absolute version of the given pathname.
---

Changed in version 3.8: [`exists()`](https://docs.python.org/3/library/os.path.html#os.path.exists "os.path.exists"), [`lexists()`](https://docs.python.org/3/library/os.path.html#os.path.lexists "os.path.lexists"), [`isdir()`](https://docs.python.org/3/library/os.path.html#os.path.isdir "os.path.isdir"), [`isfile()`](https://docs.python.org/3/library/os.path.html#os.path.isfile "os.path.isfile"), [`islink()`](https://docs.python.org/3/library/os.path.html#os.path.islink "os.path.islink"), and [`ismount()`](https://docs.python.org/3/library/os.path.html#os.path.ismount "os.path.ismount") now return `False` instead of raising an exception for paths that contain characters or bytes unrepresentable at the OS level. 

os.path.abspath(_path_)[¶](https://docs.python.org/3/library/os.path.html#os.path.abspath "Link to this definition")
    
Return a normalized absolutized version of the pathname _path_. On most platforms, this is equivalent to calling the function [`normpath()`](https://docs.python.org/3/library/os.path.html#os.path.normpath "os.path.normpath") as follows: `normpath(join(os.getcwd(), path))`.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). 

os.path.basename(_path_)[¶](https://docs.python.org/3/library/os.path.html#os.path.basename "Link to this definition")
    
Return the base name of pathname _path_. This is the second element of the pair returned by passing _path_ to the function [`split()`](https://docs.python.org/3/library/os.path.html#os.path.split "os.path.split"). Note that the result of this function is different from the Unix **basename** program; where **basename** for `'/foo/bar/'` returns `'bar'`, the [`basename()`](https://docs.python.org/3/library/os.path.html#os.path.basename "os.path.basename") function returns an empty string (`''`).
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). 

os.path.commonpath(_paths_)[¶](https://docs.python.org/3/library/os.path.html#os.path.commonpath "Link to this definition")
    
Return the longest common sub-path of each pathname in the iterable _paths_. Raise [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if _paths_ contain both absolute and relative pathnames, if _paths_ are on different drives, or if _paths_ is empty. Unlike [`commonprefix()`](https://docs.python.org/3/library/os.path.html#os.path.commonprefix "os.path.commonprefix"), this returns a valid path.
Added in version 3.5.
Changed in version 3.6: Accepts a sequence of [path-like objects](https://docs.python.org/3/glossary.html#term-path-like-object).
Changed in version 3.13: Any iterable can now be passed, rather than just sequences. 

os.path.commonprefix(_list_)[¶](https://docs.python.org/3/library/os.path.html#os.path.commonprefix "Link to this definition")
    
Return the longest path prefix (taken character-by-character) that is a prefix of all paths in _list_. If _list_ is empty, return the empty string (`''`).
Note
This function may return invalid paths because it works a character at a time. To obtain a valid path, see [`commonpath()`](https://docs.python.org/3/library/os.path.html#os.path.commonpath "os.path.commonpath").
>>>```
>>> os.path.commonprefix(['/usr/lib', '/usr/local/lib'])
'/usr/l'
>>> os.path.commonpath(['/usr/lib', '/usr/local/lib'])
'/usr'