Title: Creating Temporary Files with mkstemp
URL: https://docs.python.org/3/library/tempfile.html
Summary: The tempfile.mkstemp() function in Python creates a secure temporary file without race conditions. It ensures the file is only accessible to the creating user and is not executable by anyone. Unlike TemporaryFile(), users must manage the deletion of the file.
---

tempfile.mkstemp(_suffix =None_, _prefix =None_, _dir =None_, _text =False_)[¶](https://docs.python.org/3/library/tempfile.html#tempfile.mkstemp "Link to this definition")
    
Creates a temporary file in the most secure manner possible. There are no race conditions in the file’s creation, assuming that the platform properly implements the [`os.O_EXCL`](https://docs.python.org/3/library/os.html#os.O_EXCL "os.O_EXCL") flag for [`os.open()`](https://docs.python.org/3/library/os.html#os.open "os.open"). The file is readable and writable only by the creating user ID. If the platform uses permission bits to indicate whether a file is executable, the file is executable by no one. The file descriptor is not inherited by child processes.
Unlike [`TemporaryFile()`](https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile "tempfile.TemporaryFile"), the user of [`mkstemp()`](https://docs.python.org/3/library/tempfile.html#tempfile.mkstemp "tempfile.mkstemp") is responsible for deleting the temporary file when done with it.
If _suffix_ is not `None`, the file name will end with that suffix, otherwise there will be no suffix. [`mkstemp()`](https://docs.python.org/3/library/tempfile.html#tempfile.mkstemp "tempfile.mkstemp") does not put a dot between the file name and the suffix; if you need one, put it at the beginning of _suffix_.
If _prefix_ is not `None`, the file name will begin with that prefix; otherwise, a default prefix is used. The default is the return value of [`gettempprefix()`](https://docs.python.org/3/library/tempfile.html#tempfile.gettempprefix "tempfile.gettempprefix") or [`gettempprefixb()`](https://docs.python.org/3/library/tempfile.html#tempfile.gettempprefixb "tempfile.gettempprefixb"), as appropriate.
If _dir_ is not `None`, the file will be created in that directory; otherwise, a default directory is used. The default directory is chosen from a platform-dependent list, but the user of the application can control the directory location by setting the _TMPDIR_ , _TEMP_ or _TMP_ environment variables. There is thus no guarantee that the generated filename will have any nice properties, such as not requiring quoting when passed to external commands via `os.popen()`.
If any of _suffix_ , _prefix_ , and _dir_ are not `None`, they must be the same type. If they are bytes, the returned name will be bytes instead of str. If you want to force a bytes return value with otherwise default behavior, pass `suffix=b''`.
If _text_ is specified and true, the file is opened in text mode. Otherwise, (the default) the file is opened in binary mode.
[`mkstemp()`](https://docs.python.org/3/library/tempfile.html#tempfile.mkstemp "tempfile.mkstemp") returns a tuple containing an OS-level handle to an open file (as would be returned by [`os.open()`](https://docs.python.org/3/library/os.html#os.open "os.open")) and the absolute pathname of that file, in that order.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `tempfile.mkstemp` with argument `fullpath`.
Changed in version 3.5: _suffix_ , _prefix_ , and _dir_ may now be supplied in bytes in order to obtain a bytes return value. Prior to this, only str was allowed. _suffix_ and _prefix_ now accept and default to `None` to cause an appropriate default value to be used.
Changed in version 3.6: The _dir_ parameter now accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object).