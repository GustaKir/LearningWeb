Title: Pending Removals in Future Python Versions
URL: https://docs.python.org/3/whatsnew/3.12.html
Summary: This section outlines APIs slated for removal in future Python versions without a specific timeline. It highlights deprecations in `argparse`, the `'u'` format code in `array`, and certain features in `builtins`, including modifications to generator signatures.
---

### Pending Removal in Future Versions[¶](https://docs.python.org/3/whatsnew/3.12.html#pending-removal-in-future-versions "Link to this heading")
The following APIs will be removed in the future, although there is currently no date scheduled for their removal.
  * [`argparse`](https://docs.python.org/3/library/argparse.html#module-argparse "argparse: Command-line option and argument parsing library."): Nesting argument groups and nesting mutually exclusive groups are deprecated.
  * [`array`](https://docs.python.org/3/library/array.html#module-array "array: Space efficient arrays of uniformly typed numeric values.")’s `'u'` format code ([gh-57281](https://github.com/python/cpython/issues/57281))
  * [`builtins`](https://docs.python.org/3/library/builtins.html#module-builtins "builtins: The module that provides the built-in namespace."):
    * `bool(NotImplemented)`.
    * Generators: `throw(type, exc, tb)` and `athrow(type, exc, tb)` signature is deprecated: use `throw(exc)` and `athrow(exc)` instead, the single argument signature.
    * Currently Python accepts numeric literals immediately followed by keywords, for example `0in x`, `1or x`, `0if 1else 2`. It allows confusing and ambiguous expressions like `[0x1for x in y]` (which can be interpreted as `[0x1 for x in y]` or `[0x1f or x in y]`). A syntax warning is raised if the numeric literal is immediately followed by one of keywords [`and`](https://docs.python.org/3/reference/expressions.html#and), [`else`](https://docs.python.org/3/reference/compound_stmts.html#else), [`for`](https://docs.python.org/3/reference/compound_stmts.html#for), [`if`](https://docs.python.org/3/reference/compound_stmts.html#if), [`in`](https://docs.python.org/3/reference/expressions.html#in), [`is`](https://docs.python.org/3/reference/expressions.html#is) and [`or`](https://docs.python.org/3/reference/expressions.html#or). In a future release it will be changed to a syntax error. ([gh-87999](https://github.com/python/cpython/issues/87999))
    * Support for `__index__()` and `__int__()` method returning non-int type: these methods will be required to return an instance of a strict subclass of [`int`](https://docs.python.org/3/library/functions.html#int "int").
    * Support for `__float__()` method returning a strict subclass of [`float`](https://docs.python.org/3/library/functions.html#float "float"): these methods will be required to return an instance of [`float`](https://docs.python.org/3/library/functions.html#float "float").
    * Support for `__complex__()` method returning a strict subclass of [`complex`](https://docs.python.org/3/library/functions.html#complex "complex"): these methods will be required to return an instance of [`complex`](https://docs.python.org/3/library/functions.html#complex "complex").
    * Delegation of `int()` to `__trunc__()` method.
    * Passing a complex number as the _real_ or _imag_ argument in the [`complex()`](https://docs.python.org/3/library/functions.html#complex "complex") constructor is now deprecated; it should only be passed as a single positional argument. (Contributed by Serhiy Storchaka in [gh-109218](https://github.com/python/cpython/issues/109218).)
  * [`calendar`](https://docs.python.org/3/library/calendar.html#module-calendar "calendar: Functions for working with calendars, including some emulation of the Unix cal program."): `calendar.January` and `calendar.February` constants are deprecated and replaced by [`calendar.JANUARY`](https://docs.python.org/3/library/calendar.html#calendar.JANUARY "calendar.JANUARY") and [`calendar.FEBRUARY`](https://docs.python.org/3/library/calendar.html#calendar.FEBRUARY "calendar.FEBRUARY"). (Contributed by Prince Roshan in [gh-103636](https://github.com/python/cpython/issues/103636).)
  * [`codeobject.co_lnotab`](https://docs.python.org/3/reference/datamodel.html#codeobject.co_lnotab "codeobject.co_lnotab"): use the [`codeobject.co_lines()`](https://docs.python.org/3/reference/datamodel.html#codeobject.co_lines "codeobject.co_lines") method instead.
  * [`datetime`](https://docs.python.org/3/library/datetime.html#module-datetime "datetime: Basic date and time types."):
    * [`utcnow()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.utcnow "datetime.datetime.utcnow"): use `datetime.datetime.now(tz=datetime.UTC)`.
    * [`utcfromtimestamp()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.utcfromtimestamp "datetime.datetime.utcfromtimestamp"): use `datetime.datetime.fromtimestamp(timestamp, tz=datetime.UTC)`.
  * [`gettext`](https://docs.python.org/3/library/gettext.html#module-gettext "gettext: Multilingual internationalization services."): Plural value must be an integer.
  * [`importlib`](https://docs.python.org/3/library/importlib.html#module-importlib "importlib: The implementation of the import machinery."):
    * [`cache_from_source()`](https://docs.python.org/3/library/importlib.html#importlib.util.cache_from_source "importlib.util.cache_from_