Title: WatchedFileHandler Class in Python Logging
URL: https://docs.python.org/3/library/logging.handlers.html
Summary: The `WatchedFileHandler` class in Python's logging module allows logging to a specified file, opened in append mode by default. It supports custom encoding, delayed file opening until the first `emit()` call, and error handling for encoding issues. The functionality has been updated in version 3.6.
---

_class_ logging.handlers.WatchedFileHandler(_filename_ , _mode ='a'_, _encoding =None_, _delay =False_, _errors =None_)[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.WatchedFileHandler "Link to this definition")
    
Returns a new instance of the [`WatchedFileHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.WatchedFileHandler "logging.handlers.WatchedFileHandler") class. The specified file is opened and used as the stream for logging. If _mode_ is not specified, `'a'` is used. If _encoding_ is not `None`, it is used to open the file with that encoding. If _delay_ is true, then file opening is deferred until the first call to [`emit()`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.WatchedFileHandler.emit "logging.handlers.WatchedFileHandler.emit"). By default, the file grows indefinitely. If _errors_ is provided, it determines how encoding errors are handled.
Changed in version 3.6: As well as string values, [`Path`](https://docs.python.org/3/library/pathlib.html#pathlib.Path "pathlib.Path") objects are also accepted for the _filename_ argument.
Changed in version 3.9: The _errors_ parameter was added. 

reopenIfNeeded()[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.WatchedFileHandler.reopenIfNeeded "Link to this definition")
    
Checks to see if the file has changed. If it has, the existing stream is flushed and closed and the file opened again, typically as a precursor to outputting the record to the file.
Added in version 3.6. 

emit(_record_)[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.WatchedFileHandler.emit "Link to this definition")
    
Outputs the record to the file, but first calls [`reopenIfNeeded()`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.WatchedFileHandler.reopenIfNeeded "logging.handlers.WatchedFileHandler.reopenIfNeeded") to reopen the file if it has changed.
## BaseRotatingHandler[¶](https://docs.python.org/3/library/logging.handlers.html#baserotatinghandler "Link to this heading")
The [`BaseRotatingHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.BaseRotatingHandler "logging.handlers.BaseRotatingHandler") class, located in the [`logging.handlers`](https://docs.python.org/3/library/logging.handlers.html#module-logging.handlers "logging.handlers: Handlers for the logging module.") module, is the base class for the rotating file handlers, [`RotatingFileHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.RotatingFileHandler "logging.handlers.RotatingFileHandler") and [`TimedRotatingFileHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.TimedRotatingFileHandler "logging.handlers.TimedRotatingFileHandler"). You should not need to instantiate this class, but it has attributes and methods you may need to override. 

_class_ logging.handlers.BaseRotatingHandler(_filename_ , _mode_ , _encoding =None_, _delay =False_, _errors =None_)[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.BaseRotatingHandler "Link to this definition")
    
The parameters are as for `FileHandler`. The attributes are: