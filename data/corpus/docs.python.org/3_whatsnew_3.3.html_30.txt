Title: Enhancements in socketserver and sqlite3 in Python 3.3
URL: https://docs.python.org/3/whatsnew/3.3.html
Summary: The `BaseServer` class in the `socketserver` module introduces an overridable `service_actions()` method for the service loop, allowing the `ForkingMixIn` to clean up zombie processes. Additionally, the `sqlite3` module has been updated with new features.
---

### socketserver[¶](https://docs.python.org/3/whatsnew/3.3.html#socketserver "Link to this heading")
[`BaseServer`](https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer "socketserver.BaseServer") now has an overridable method [`service_actions()`](https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.service_actions "socketserver.BaseServer.service_actions") that is called by the [`serve_forever()`](https://docs.python.org/3/library/socketserver.html#socketserver.BaseServer.serve_forever "socketserver.BaseServer.serve_forever") method in the service loop. [`ForkingMixIn`](https://docs.python.org/3/library/socketserver.html#socketserver.ForkingMixIn "socketserver.ForkingMixIn") now uses this to clean up zombie child processes. (Contributed by Justin Warkentin in [bpo-11109](https://bugs.python.org/issue?@action=redirect&bpo=11109).)
### sqlite3[¶](https://docs.python.org/3/whatsnew/3.3.html#sqlite3 "Link to this heading")
New [`sqlite3.Connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection "sqlite3.Connection") method [`set_trace_callback()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.set_trace_callback "sqlite3.Connection.set_trace_callback") can be used to capture a trace of all sql commands processed by sqlite. (Contributed by Torsten Landschoff in [bpo-11688](https://bugs.python.org/issue?@action=redirect&bpo=11688).)
### ssl[¶](https://docs.python.org/3/whatsnew/3.3.html#ssl "Link to this heading")
  * The [`ssl`](https://docs.python.org/3/library/ssl.html#module-ssl "ssl: TLS/SSL wrapper for socket objects") module has two new random generation functions:
    * [`RAND_bytes()`](https://docs.python.org/3/library/ssl.html#ssl.RAND_bytes "ssl.RAND_bytes"): generate cryptographically strong pseudo-random bytes.
    * `RAND_pseudo_bytes()`: generate pseudo-random bytes.
(Contributed by Victor Stinner in [bpo-12049](https://bugs.python.org/issue?@action=redirect&bpo=12049).)
  * The [`ssl`](https://docs.python.org/3/library/ssl.html#module-ssl "ssl: TLS/SSL wrapper for socket objects") module now exposes a finer-grained exception hierarchy in order to make it easier to inspect the various kinds of errors. (Contributed by Antoine Pitrou in [bpo-11183](https://bugs.python.org/issue?@action=redirect&bpo=11183).)
  * [`load_cert_chain()`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.load_cert_chain "ssl.SSLContext.load_cert_chain") now accepts a _password_ argument to be used if the private key is encrypted. (Contributed by Adam Simpkins in [bpo-12803](https://bugs.python.org/issue?@action=redirect&bpo=12803).)
  * Diffie-Hellman key exchange, both regular and Elliptic Curve-based, is now supported through the [`load_dh_params()`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.load_dh_params "ssl.SSLContext.load_dh_params") and [`set_ecdh_curve()`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_ecdh_curve "ssl.SSLContext.set_ecdh_curve") methods. (Contributed by Antoine Pitrou in [bpo-13626](https://bugs.python.org/issue?@action=redirect&bpo=13626) and [bpo-13627](https://bugs.python.org/issue?@action=redirect&bpo=13627).)
  * SSL sockets have a new [`get_channel_binding()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.get_channel_binding "ssl.SSLSocket.get_channel_binding") method allowing the implementation of certain authentication mechanisms such as SCRAM-SHA-1-PLUS. (Contributed by Jacek Konieczny in [bpo-12551](https://bugs.python.org/issue?@action=redirect&bpo=12551).)
  * You can query the SSL compression algorithm used by an SSL socket, thanks to its new [`compression()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.compression "ssl.SSLSocket.compression") method. The new attribute [`OP_NO_COMPRESSION`](https://docs.python.org/3/library/ssl.html#ssl.OP_NO_COMPRESSION "ssl.OP_NO_COMPRESSION") can be used to disable compression. (Contributed by Antoine Pitrou in [bpo-13634](https://bugs.python.org/issue?@action=redirect&bpo=13634).)
  * Support has been added for the Next Protocol Negotiation extension using the [`ssl.SSLContext.set_npn_protocols()`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_npn_protocols "ssl.SSLContext.set_npn_protocols") method. (Contributed by Colin Marc in [bpo-14204](https://bugs.python.org/issue?@action=redirect&bpo=14204).)
  * SSL errors can now be introspected more easily thanks to [`library`](https://docs.python.org/3/library/ssl.html#ssl.SSLError.library "ssl.SSLError.library") and [`reason`](https://docs.python.org/3/library/ssl.html#ssl.SSLError.reason "ssl.SSLError.reason") attributes. (Contributed by Antoine Pitrou in [bpo-14837](https://bugs.python.org/issue?@action=redirect&bpo=14837).)
  * The [`get_server_certificate()`](https://docs.python.org/3/library/ssl.html#ssl.get_server_certificate "ssl.get_server_certificate") function now supports IPv6. (Contributed by Charles-François Natali in [bpo-1