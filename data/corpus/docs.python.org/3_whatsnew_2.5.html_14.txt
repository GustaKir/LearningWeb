Title: Python 2.5 Release Notes
URL: https://docs.python.org/3/whatsnew/2.5.html
Summary: Python 2.5 introduces callable `quit` and `exit` objects, allowing users to exit the interpreter as expected. It also enhances the Python executable to accept standard long options like `--help` and `--version`, and adds a Windows help option. Additionally, several optimizations were implemented, particularly focused on speed enhancements developed during the NeedForSpeed sprint in Reykjavik.
---

```

In Python 2.5, `quit` and `exit` are now objects that still produce string representations of themselves, but are also callable. Newbies who try `quit()` or `exit()` will now exit the interpreter as they expect. (Implemented by Georg Brandl.)
The Python executable now accepts the standard long options [`--help`](https://docs.python.org/3/using/cmdline.html#cmdoption-help) and [`--version`](https://docs.python.org/3/using/cmdline.html#cmdoption-version); on Windows, it also accepts the [`/?`](https://docs.python.org/3/using/cmdline.html#cmdoption-0) option for displaying a help message. (Implemented by Georg Brandl.)
### Optimizations[¶](https://docs.python.org/3/whatsnew/2.5.html#optimizations "Link to this heading")
Several of the optimizations were developed at the NeedForSpeed sprint, an event held in Reykjavik, Iceland, from May 21–28 2006. The sprint focused on speed enhancements to the CPython implementation and was funded by EWT LLC with local support from CCP Games. Those optimizations added at this sprint are specially marked in the following list.
  * When they were introduced in Python 2.4, the built-in [`set`](https://docs.python.org/3/library/stdtypes.html#set "set") and [`frozenset`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset") types were built on top of Python’s dictionary type. In 2.5 the internal data structure has been customized for implementing sets, and as a result sets will use a third less memory and are somewhat faster. (Implemented by Raymond Hettinger.)
  * The speed of some Unicode operations, such as finding substrings, string splitting, and character map encoding and decoding, has been improved. (Substring search and splitting improvements were added by Fredrik Lundh and Andrew Dalke at the NeedForSpeed sprint. Character maps were improved by Walter Dörwald and Martin von Löwis.)
  * The `long(str, base)` function is now faster on long digit strings because fewer intermediate results are calculated. The peak is for strings of around 800–1000 digits where the function is 6 times faster. (Contributed by Alan McIntyre and committed at the NeedForSpeed sprint.)
  * It’s now illegal to mix iterating over a file with `for line in file` and calling the file object’s `read()`/[`readline()`](https://docs.python.org/3/library/readline.html#module-readline "readline: GNU readline support for Python. \(Unix\)")/`readlines()` methods. Iteration uses an internal buffer and the `read*()` methods don’t use that buffer. Instead they would return the data following the buffer, causing the data to appear out of order. Mixing iteration and these methods will now trigger a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") from the `read*()` method. (Implemented by Thomas Wouters.)
  * The [`struct`](https://docs.python.org/3/library/struct.html#module-struct "struct: Interpret bytes as packed binary data.") module now compiles structure format strings into an internal representation and caches this representation, yielding a 20% speedup. (Contributed by Bob Ippolito at the NeedForSpeed sprint.)
  * The [`re`](https://docs.python.org/3/library/re.html#module-re "re: Regular expression operations.") module got a 1 or 2% speedup by switching to Python’s allocator functions instead of the system’s `malloc()` and `free()`. (Contributed by Jack Diederich at the NeedForSpeed sprint.)
  * The code generator’s peephole optimizer now performs simple constant folding in expressions. If you write something like `a = 2+3`, the code generator will do the arithmetic and produce code corresponding to `a = 5`. (Proposed and implemented by Raymond Hettinger.)
  * Function calls are now faster because code objects now keep the most recently finished frame (a “zombie frame”) in an internal field of the code object, reusing it the next time the code object is invoked. (Original patch by Michael Hudson, modified by Armin Rigo and Richard Jones; committed at the NeedForSpeed sprint.) Frame objects are also slightly smaller, which may improve cache locality and reduce memory usage a bit. (Contributed by Neal Norwitz.)
  * Python’s built-in exceptions are now new-style classes, a change that speeds up instantiation considerably. Exception handling in Python 2.5 is therefore about 30% faster than in 2.4. (Contributed by Richard Jones, Georg Brandl and Sean Reifschneider at the NeedForSpeed sprint.)
  * Importing now caches the paths tried, recording whether they exist or not so that the interpreter makes fewer `open()` and `stat()` calls on startup. (Contributed by Martin von Löwis and Georg Brandl.)