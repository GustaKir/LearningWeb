Title: ctypes.WinError Function
URL: https://docs.python.org/3/library/ctypes.html
Summary: The `ctypes.WinError` function creates an instance of `OSError`, optionally using `GetLastError` for the error code and `FormatError()` for a descriptive text if not provided. It is only available on Windows and was changed in version 3.3 to return an `OSError` instead of the previously used `WindowsError`.
---

ctypes.WinError(_code =None_, _descr =None_)[¶](https://docs.python.org/3/library/ctypes.html#ctypes.WinError "Link to this definition")
    
This function is probably the worst-named thing in ctypes. It creates an instance of [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError"). If _code_ is not specified, `GetLastError` is called to determine the error code. If _descr_ is not specified, [`FormatError()`](https://docs.python.org/3/library/ctypes.html#ctypes.FormatError "ctypes.FormatError") is called to get a textual description of the error.
[Availability](https://docs.python.org/3/library/intro.html#availability): Windows
Changed in version 3.3: An instance of [`WindowsError`](https://docs.python.org/3/library/exceptions.html#WindowsError "WindowsError") used to be created, which is now an alias of [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError"). 

ctypes.wstring_at(_ptr_ , _size =-1_)[¶](https://docs.python.org/3/library/ctypes.html#ctypes.wstring_at "Link to this definition")
    
Return the wide-character string at _void *ptr_. If _size_ is specified, it is used as the number of characters of the string, otherwise the string is assumed to be zero-terminated.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `ctypes.wstring_at` with arguments `ptr`, `size`.
### Data types[¶](https://docs.python.org/3/library/ctypes.html#data-types "Link to this heading") 

_class_ ctypes._CData[¶](https://docs.python.org/3/library/ctypes.html#ctypes._CData "Link to this definition")
    
This non-public class is the common base class of all ctypes data types. Among other things, all ctypes type instances contain a memory block that hold C compatible data; the address of the memory block is returned by the [`addressof()`](https://docs.python.org/3/library/ctypes.html#ctypes.addressof "ctypes.addressof") helper function. Another instance variable is exposed as [`_objects`](https://docs.python.org/3/library/ctypes.html#ctypes._CData._objects "ctypes._CData._objects"); this contains other Python objects that need to be kept alive in case the memory block contains pointers.
Common methods of ctypes data types, these are all class methods (to be exact, they are methods of the [metaclass](https://docs.python.org/3/glossary.html#term-metaclass)): 

from_buffer(_source_[, _offset_])[¶](https://docs.python.org/3/library/ctypes.html#ctypes._CData.from_buffer "Link to this definition")
    
This method returns a ctypes instance that shares the buffer of the _source_ object. The _source_ object must support the writeable buffer interface. The optional _offset_ parameter specifies an offset into the source buffer in bytes; the default is zero. If the source buffer is not large enough a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `ctypes.cdata/buffer` with arguments `pointer`, `size`, `offset`. 

from_buffer_copy(_source_[, _offset_])[¶](https://docs.python.org/3/library/ctypes.html#ctypes._CData.from_buffer_copy "Link to this definition")
    
This method creates a ctypes instance, copying the buffer from the _source_ object buffer which must be readable. The optional _offset_ parameter specifies an offset into the source buffer in bytes; the default is zero. If the source buffer is not large enough a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `ctypes.cdata/buffer` with arguments `pointer`, `size`, `offset`. 

from_address(_address_)[¶](https://docs.python.org/3/library/ctypes.html#ctypes._CData.from_address "Link to this definition")
    
This method returns a ctypes type instance using the memory specified by _address_ which must be an integer.
This method, and others that indirectly call this method, raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `ctypes.cdata` with argument `address`. 

from_param(_obj_)[¶](https://docs.python.org/3/library/ctypes.html#ctypes._CData.from_param "Link to this definition")
    
This method adapts _obj_ to a ctypes type. It is called with the actual object used in a foreign function call when the type is present in the foreign function’s [`argtypes`](https://docs.python.org/3/library/ctypes.html#ctypes._CFuncPtr.argtypes "ctypes._CFuncPtr.argtypes") tuple; it must return an object that can be used as a function call parameter.
All ctypes data types have a default implementation of this classmethod that normally returns _obj_ if that is an instance of the type. Some types accept other objects as well.