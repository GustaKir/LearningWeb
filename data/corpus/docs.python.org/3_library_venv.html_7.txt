Title: Creating Virtual Python Environments
URL: https://docs.python.org/3/library/venv.html
Summary: This section details a Python script using argparse to create virtual environments in specified directories. It describes options such as skipping the installation of setuptools and pip, and allowing access to system site packages.
---

defmain(args=None):
  importargparse
  parser = argparse.ArgumentParser(prog=__name__,
                   description='Creates virtual Python '
                         'environments in one or '
                         'more target '
                         'directories.')
  parser.add_argument('dirs', metavar='ENV_DIR', nargs='+',
            help='A directory in which to create the '
               'virtual environment.')
  parser.add_argument('--no-setuptools', default=False,
            action='store_true', dest='nodist',
            help="Don't install setuptools or pip in the "
               "virtual environment.")
  parser.add_argument('--no-pip', default=False,
            action='store_true', dest='nopip',
            help="Don't install pip in the virtual "
               "environment.")
  parser.add_argument('--system-site-packages', default=False,
            action='store_true', dest='system_site',
            help='Give the virtual environment access to the '
               'system site-packages dir.')
  if os.name == 'nt':
    use_symlinks = False
  else:
    use_symlinks = True
  parser.add_argument('--symlinks', default=use_symlinks,
            action='store_true', dest='symlinks',
            help='Try to use symlinks rather than copies, '
               'when symlinks are not the default for '
               'the platform.')
  parser.add_argument('--clear', default=False, action='store_true',
            dest='clear', help='Delete the contents of the '
                      'virtual environment '
                      'directory if it already '
                      'exists, before virtual '
                      'environment creation.')
  parser.add_argument('--upgrade', default=False, action='store_true',
            dest='upgrade', help='Upgrade the virtual '
                       'environment directory to '
                       'use this version of '
                       'Python, assuming Python '
                       'has been upgraded '
                       'in-place.')
  parser.add_argument('--verbose', default=False, action='store_true',
            dest='verbose', help='Display the output '
                       'from the scripts which '
                       'install setuptools and pip.')
  options = parser.parse_args(args)
  if options.upgrade and options.clear:
    raise ValueError('you cannot supply --upgrade and --clear together.')
  builder = ExtendedEnvBuilder(system_site_packages=options.system_site,
                  clear=options.clear,
                  symlinks=options.symlinks,
                  upgrade=options.upgrade,
                  nodist=options.nodist,
                  nopip=options.nopip,
                  verbose=options.verbose)
  for d in options.dirs:
    builder.create(d)
if __name__ == '__main__':
  rc = 1
  try:
    main()
    rc = 0
  except Exception as e:
    print('Error: %s' % e, file=sys.stderr)
  sys.exit(rc)