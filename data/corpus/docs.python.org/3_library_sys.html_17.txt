Title: System Parameters in Python: maxsize, maxunicode, and meta_path
URL: https://docs.python.org/3/library/sys.html
Summary: This section describes important system parameters in Python, including `sys.maxsize`, which denotes the maximum value for `Py_ssize_t`, `sys.maxunicode`, representing the largest Unicode code point, and `sys.meta_path`, a list of meta path finders used for module loading.
---

sys.maxsize[¶](https://docs.python.org/3/library/sys.html#sys.maxsize "Link to this definition")
    
An integer giving the maximum value a variable of type [`Py_ssize_t`](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t") can take. It’s usually `2**31 - 1` on a 32-bit platform and `2**63 - 1` on a 64-bit platform. 

sys.maxunicode[¶](https://docs.python.org/3/library/sys.html#sys.maxunicode "Link to this definition")
    
An integer giving the value of the largest Unicode code point, i.e. `1114111` (`0x10FFFF` in hexadecimal).
Changed in version 3.3: Before [**PEP 393**](https://peps.python.org/pep-0393/), `sys.maxunicode` used to be either `0xFFFF` or `0x10FFFF`, depending on the configuration option that specified whether Unicode characters were stored as UCS-2 or UCS-4. 

sys.meta_path[¶](https://docs.python.org/3/library/sys.html#sys.meta_path "Link to this definition")
    
A list of [meta path finder](https://docs.python.org/3/glossary.html#term-meta-path-finder) objects that have their [`find_spec()`](https://docs.python.org/3/library/importlib.html#importlib.abc.MetaPathFinder.find_spec "importlib.abc.MetaPathFinder.find_spec") methods called to see if one of the objects can find the module to be imported. By default, it holds entries that implement Python’s default import semantics. The [`find_spec()`](https://docs.python.org/3/library/importlib.html#importlib.abc.MetaPathFinder.find_spec "importlib.abc.MetaPathFinder.find_spec") method is called with at least the absolute name of the module being imported. If the module to be imported is contained in a package, then the parent package’s [`__path__`](https://docs.python.org/3/reference/datamodel.html#module.__path__ "module.__path__") attribute is passed in as a second argument. The method returns a [module spec](https://docs.python.org/3/glossary.html#term-module-spec), or `None` if the module cannot be found.
See also 

[`importlib.abc.MetaPathFinder`](https://docs.python.org/3/library/importlib.html#importlib.abc.MetaPathFinder "importlib.abc.MetaPathFinder")
    
The abstract base class defining the interface of finder objects on [`meta_path`](https://docs.python.org/3/library/sys.html#sys.meta_path "sys.meta_path"). 

[`importlib.machinery.ModuleSpec`](https://docs.python.org/3/library/importlib.html#importlib.machinery.ModuleSpec "importlib.machinery.ModuleSpec")
    
The concrete class which [`find_spec()`](https://docs.python.org/3/library/importlib.html#importlib.abc.MetaPathFinder.find_spec "importlib.abc.MetaPathFinder.find_spec") should return instances of.
Changed in version 3.4: [Module specs](https://docs.python.org/3/glossary.html#term-module-spec) were introduced in Python 3.4, by [**PEP 451**](https://peps.python.org/pep-0451/).
Changed in version 3.12: Removed the fallback that looked for a `find_module()` method if a [`meta_path`](https://docs.python.org/3/library/sys.html#sys.meta_path "sys.meta_path") entry didn’t have a [`find_spec()`](https://docs.python.org/3/library/importlib.html#importlib.abc.MetaPathFinder.find_spec "importlib.abc.MetaPathFinder.find_spec") method. 

sys.modules[¶](https://docs.python.org/3/library/sys.html#sys.modules "Link to this definition")
    
This is a dictionary that maps module names to modules which have already been loaded. This can be manipulated to force reloading of modules and other tricks. However, replacing the dictionary will not necessarily work as expected and deleting essential items from the dictionary may cause Python to fail. If you want to iterate over this global dictionary always use `sys.modules.copy()` or `tuple(sys.modules)` to avoid exceptions as its size may change during iteration as a side effect of code or activity in other threads. 

sys.orig_argv[¶](https://docs.python.org/3/library/sys.html#sys.orig_argv "Link to this definition")
    
The list of the original command line arguments passed to the Python executable.
The elements of [`sys.orig_argv`](https://docs.python.org/3/library/sys.html#sys.orig_argv "sys.orig_argv") are the arguments to the Python interpreter, while the elements of [`sys.argv`](https://docs.python.org/3/library/sys.html#sys.argv "sys.argv") are the arguments to the user’s program. Arguments consumed by the interpreter itself will be present in [`sys.orig_argv`](https://docs.python.org/3/library/sys.html#sys.orig_argv "sys.orig_argv") and missing from [`sys.argv`](https://docs.python.org/3/library/sys.html#sys.argv "sys.argv").
Added in version 3.10.