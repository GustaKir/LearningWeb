Title: Complex Number Constructor in Python
URL: https://docs.python.org/3/library/functions.html
Summary: The `complex()` constructor converts numeric types to complex numbers by delegating to methods like `__complex__()`, `__float__()`, and `__index__()` depending on the object's definitions. It can accept one or two arguments, allowing for the creation of complex numbers from real components.
---

```

If the argument is a number, the constructor serves as a numeric conversion like [`int`](https://docs.python.org/3/library/functions.html#int "int") and [`float`](https://docs.python.org/3/library/functions.html#float "float"). For a general Python object `x`, `complex(x)` delegates to `x.__complex__()`. If [`__complex__()`](https://docs.python.org/3/reference/datamodel.html#object.__complex__ "object.__complex__") is not defined then it falls back to [`__float__()`](https://docs.python.org/3/reference/datamodel.html#object.__float__ "object.__float__"). If `__float__()` is not defined then it falls back to [`__index__()`](https://docs.python.org/3/reference/datamodel.html#object.__index__ "object.__index__").
If two arguments are provided or keyword arguments are used, each argument may be any numeric type (including complex). If both arguments are real numbers, return a complex number with the real component _real_ and the imaginary component _imag_. If both arguments are complex numbers, return a complex number with the real component `real.real-imag.imag` and the imaginary component `real.imag+imag.real`. If one of arguments is a real number, only its real component is used in the above expressions.
If all arguments are omitted, returns `0j`.
The complex type is described in [Numeric Types — int, float, complex](https://docs.python.org/3/library/stdtypes.html#typesnumeric).
Changed in version 3.6: Grouping digits with underscores as in code literals is allowed.
Changed in version 3.8: Falls back to [`__index__()`](https://docs.python.org/3/reference/datamodel.html#object.__index__ "object.__index__") if [`__complex__()`](https://docs.python.org/3/reference/datamodel.html#object.__complex__ "object.__complex__") and [`__float__()`](https://docs.python.org/3/reference/datamodel.html#object.__float__ "object.__float__") are not defined. 

delattr(_object_ , _name_)[¶](https://docs.python.org/3/library/functions.html#delattr "Link to this definition")
    
This is a relative of [`setattr()`](https://docs.python.org/3/library/functions.html#setattr "setattr"). The arguments are an object and a string. The string must be the name of one of the object’s attributes. The function deletes the named attribute, provided the object allows it. For example, `delattr(x, 'foobar')` is equivalent to `del x.foobar`. _name_ need not be a Python identifier (see [`setattr()`](https://docs.python.org/3/library/functions.html#setattr "setattr")). 

_class_ dict(_** kwarg_)


_class_ dict(_mapping_ , _** kwarg_)


_class_ dict(_iterable_ , _** kwarg_)
    
Create a new dictionary. The [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") object is the dictionary class. See [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") and [Mapping Types — dict](https://docs.python.org/3/library/stdtypes.html#typesmapping) for documentation about this class.
For other containers see the built-in [`list`](https://docs.python.org/3/library/stdtypes.html#list "list"), [`set`](https://docs.python.org/3/library/stdtypes.html#set "set"), and [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple") classes, as well as the [`collections`](https://docs.python.org/3/library/collections.html#module-collections "collections: Container datatypes") module. 

dir()[¶](https://docs.python.org/3/library/functions.html#dir "Link to this definition")