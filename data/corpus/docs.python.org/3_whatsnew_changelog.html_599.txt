Title: Python 3 Changelog - Key Updates
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: Recent updates include changes to the object.__reduce__() method, fixes for memory usage in set and frozenset objects, improved error messages in tuple, list, and deque index() methods, and modifications to shift operations to handle OverflowError and ValueError more effectively. Additionally, a unique ID has been added to PyInterpreterState to enhance subinterpreter identification.
---

object.__reduce__() no longer takes arguments, object.__reduce_ex__() now requires one argument.
  * [bpo-29949](https://bugs.python.org/issue?@action=redirect&bpo=29949): Fix memory usage regression of set and frozenset object.
  * [bpo-29935](https://bugs.python.org/issue?@action=redirect&bpo=29935): Fixed error messages in the index() method of tuple, list and deque when pass indices of wrong type.
  * [bpo-29816](https://bugs.python.org/issue?@action=redirect&bpo=29816): Shift operation now has less opportunity to raise OverflowError. ValueError always is raised rather than OverflowError for negative counts. Shifting zero with non-negative count always returns zero.
  * [bpo-24821](https://bugs.python.org/issue?@action=redirect&bpo=24821): Fixed the slowing down to 25 times in the searching of some unlucky Unicode characters.
  * [bpo-29102](https://bugs.python.org/issue?@action=redirect&bpo=29102): Add a unique ID to PyInterpreterState. This makes it easier to identify each subinterpreter.
  * [bpo-29894](https://bugs.python.org/issue?@action=redirect&bpo=29894): The deprecation warning is emitted if __complex__ returns an instance of a strict subclass of complex. In a future versions of Python this can be an error.
  * [bpo-29859](https://bugs.python.org/issue?@action=redirect&bpo=29859): Show correct error messages when any of the pthread_* calls in thread_pthread.h fails.
  * [bpo-29849](https://bugs.python.org/issue?@action=redirect&bpo=29849): Fix a memory leak when an ImportError is raised during from import.
  * [bpo-28856](https://bugs.python.org/issue?@action=redirect&bpo=28856): Fix an oversight that %b format for bytes should support objects follow the buffer protocol.
  * [bpo-29723](https://bugs.python.org/issue?@action=redirect&bpo=29723): The `sys.path[0]` initialization change for [bpo-29139](https://bugs.python.org/issue?@action=redirect&bpo=29139) caused a regression by revealing an inconsistency in how sys.path is initialized when executing `__main__` from a zipfile, directory, or other import location. The interpreter now consistently avoids ever adding the import location’s parent directory to `sys.path`, and ensures no other `sys.path` entries are inadvertently modified when inserting the import location named on the command line.
  * [bpo-29568](https://bugs.python.org/issue?@action=redirect&bpo=29568): Escaped percent “%%” in the format string for classic string formatting no longer allows any characters between two percents.
  * [bpo-29714](https://bugs.python.org/issue?@action=redirect&bpo=29714): Fix a regression that bytes format may fail when containing zero bytes inside.
  * [bpo-29695](https://bugs.python.org/issue?@action=redirect&bpo=29695): bool(), float(), list() and tuple() no longer take keyword arguments. The first argument of int() can now be passes only as positional argument.
  * [bpo-28893](https://bugs.python.org/issue?@action=redirect&bpo=28893): Set correct __cause__ for errors about invalid awaitables returned from __aiter__ and __anext__.
  * [bpo-28876](https://bugs.python.org/issue?@action=redirect&bpo=28876): `bool(range)` works even if `len(range)` raises [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError").
  * [bpo-29683](https://bugs.python.org/issue?@action=redirect&bpo=29683): Fixes to memory allocation in _PyCode_SetExtra. Patch by Brian Coleman.
  * [bpo-29684](https://bugs.python.org/issue?@action=redirect&bpo=29684): Fix minor regression of PyEval_CallObjectWithKeywords. It should raise TypeError when kwargs is not a dict. But it might cause segv when args=NULL and kwargs is not a dict.
  * [bpo-28598](https://bugs.python.org/issue?@action=redirect&bpo=28598): Support __rmod__ for subclasses of str being called before str.__mod__. Patch by Martijn Pieters.
  * [bpo-29607](https://bugs.python.org/issue?@action=redirect&bpo=29607): Fix stack_effect computation for CALL_FUNCTION_EX. Patch by Matthieu Dartiailh.
  * [bpo-29602](https://bugs.python.org/issue?@action=redirect&bpo=29602): Fix incorrect handling of signed zeros in complex constructor for complex subclasses and for inputs having a __complex__ method. Patch by Serhiy Storchaka.
  * [bpo-29347](https://bugs.python.org/issue?@action=redirect&bpo=29347): Fixed possibly dereferencing undefined pointers when creating weakref objects.
  * [bpo-29463](https://bugs.python.org/issue?@action=redirect&bpo=29463): Add `docstring` field to Module, ClassDef, FunctionDef, and AsyncFunctionDef ast nodes. docstring is not first stmt in their body anymore. It affects `co_firstlineno` and `co_lnotab` of code object for module and class.