Title: SQLite3 Documentation Navigation
URL: https://docs.python.org/3/library/sqlite3.html
Summary: This section provides navigation links for the SQLite3 documentation, including links to the general index, modules, and other related documentation topics.
---

### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/archiving.html "Data Compression and Archiving") |
  * [previous](https://docs.python.org/3/library/dbm.html "dbm — Interfaces to Unix “databases”") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Data Persistence](https://docs.python.org/3/library/persistence.html) »
  * [`sqlite3` — DB-API 2.0 interface for SQLite databases](https://docs.python.org/3/library/sqlite3.html)
  * | 
  * Theme  Auto Light Dark |


# `sqlite3` — DB-API 2.0 interface for SQLite databases[¶](https://docs.python.org/3/library/sqlite3.html#module-sqlite3 "Link to this heading")
**Source code:** [Lib/sqlite3/](https://github.com/python/cpython/tree/3.13/Lib/sqlite3/)
SQLite is a C library that provides a lightweight disk-based database that doesn’t require a separate server process and allows accessing the database using a nonstandard variant of the SQL query language. Some applications can use SQLite for internal data storage. It’s also possible to prototype an application using SQLite and then port the code to a larger database such as PostgreSQL or Oracle.
The `sqlite3` module was written by Gerhard Häring. It provides an SQL interface compliant with the DB-API 2.0 specification described by [**PEP 249**](https://peps.python.org/pep-0249/), and requires SQLite 3.15.2 or newer.
This document includes four main sections:
  * [Tutorial](https://docs.python.org/3/library/sqlite3.html#sqlite3-tutorial) teaches how to use the `sqlite3` module.
  * [Reference](https://docs.python.org/3/library/sqlite3.html#sqlite3-reference) describes the classes and functions this module defines.
  * [How-to guides](https://docs.python.org/3/library/sqlite3.html#sqlite3-howtos) details how to handle specific tasks.
  * [Explanation](https://docs.python.org/3/library/sqlite3.html#sqlite3-explanation) provides in-depth background on transaction control.


See also 

<https://www.sqlite.org>
    
The SQLite web page; the documentation describes the syntax and the available data types for the supported SQL dialect. 

<https://www.w3schools.com/sql/>
    
Tutorial, reference and examples for learning SQL syntax. 

[**PEP 249**](https://peps.python.org/pep-0249/) - Database API Specification 2.0
    
PEP written by Marc-André Lemburg.
## Tutorial[¶](https://docs.python.org/3/library/sqlite3.html#tutorial "Link to this heading")
In this tutorial, you will create a database of Monty Python movies using basic `sqlite3` functionality. It assumes a fundamental understanding of database concepts, including [cursors](https://en.wikipedia.org/wiki/Cursor_\(databases\)) and [transactions](https://en.wikipedia.org/wiki/Database_transaction).
First, we need to create a new database and open a database connection to allow `sqlite3` to work with it. Call [`sqlite3.connect()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.connect "sqlite3.connect") to create a connection to the database `tutorial.db` in the current working directory, implicitly creating it if it does not exist:
```
importsqlite3
con = sqlite3.connect("tutorial.db")

```

The returned [`Connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection "sqlite3.Connection") object `con` represents the connection to the on-disk database.
In order to execute SQL statements and fetch results from SQL queries, we will need to use a database cursor. Call [`con.cursor()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.cursor "sqlite3.Connection.cursor") to create the [`Cursor`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor "sqlite3.Cursor"):
```
cur = con.cursor()

```

Now that we’ve got a database connection and a cursor, we can create a database table `movie` with columns for title, release year, and review score. For simplicity, we can just use column names in the table declaration – thanks to the [flexible typing](https://www.sqlite.org/flextypegood.html) feature of SQLite, specifying the data types is optional. Execute the `CREATE TABLE` statement by calling [`cur.execute(...)`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute "sqlite3.Cursor.execute"):
```
cur.execute("CREATE TABLE movie(title, year, score)")