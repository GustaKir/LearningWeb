Title: Operations on timedelta Microseconds
URL: https://docs.python.org/3/library/datetime.html
Summary: This section discusses the valid range for timedelta.microseconds (0 to 999,999) and describes various operations that can be performed with timedelta objects, including addition, subtraction, multiplication by integers and floats, and division.
---

```


timedelta.microseconds[¶](https://docs.python.org/3/library/datetime.html#datetime.timedelta.microseconds "Link to this definition")
    
Between 0 and 999,999 inclusive.
Supported operations:
Operation | Result  
---|---  
`t1 = t2 + t3` | Sum of `t2` and `t3`. Afterwards `t1 - t2 == t3` and `t1 - t3 == t2` are true. (1)  
`t1 = t2 - t3` | Difference of `t2` and `t3`. Afterwards `t1 == t2 - t3` and `t2 == t1 + t3` are true. (1)(6)  
`t1 = t2 * i or t1 = i * t2` | Delta multiplied by an integer. Afterwards `t1 // i == t2` is true, provided `i != 0`.  
| In general, `t1  * i == t1 * (i-1) + t1` is true. (1)  
`t1 = t2 * f or t1 = f * t2` | Delta multiplied by a float. The result is rounded to the nearest multiple of timedelta.resolution using round-half-to-even.  
`f = t2 / t3` | Division (3) of overall duration `t2` by interval unit `t3`. Returns a [`float`](https://docs.python.org/3/library/functions.html#float "float") object.  
`t1 = t2 / f or t1 = t2 / i` | Delta divided by a float or an int. The result is rounded to the nearest multiple of timedelta.resolution using round-half-to-even.  
`t1 = t2 // i` or `t1 = t2 // t3` | The floor is computed and the remainder (if any) is thrown away. In the second case, an integer is returned. (3)  
`t1 = t2 % t3` | The remainder is computed as a [`timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta "datetime.timedelta") object. (3)  
`q, r = divmod(t1, t2)` | Computes the quotient and the remainder: `q = t1 // t2` (3) and `r = t1 % t2`. `q` is an integer and `r` is a [`timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta "datetime.timedelta") object.  
`+t1` | Returns a [`timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta "datetime.timedelta") object with the same value. (2)  
`-t1` | Equivalent to `timedelta(-t1.days, -t1.seconds, -t1.microseconds)`, and to `t1 * -1`. (1)(4)  
`abs(t)` | Equivalent to `+t` when `t.days >= 0`, and to `-t` when `t.days < 0`. (2)  
`str(t)` | Returns a string in the form `[D day[s], ][H]H:MM:SS[.UUUUUU]`, where D is negative for negative `t`. (5)  
`repr(t)` | Returns a string representation of the [`timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta "datetime.timedelta") object as a constructor call with canonical attribute values.  
Notes:
  1. This is exact but may overflow.
  2. This is exact and cannot overflow.
  3. Division by zero raises [`ZeroDivisionError`](https://docs.python.org/3/library/exceptions.html#ZeroDivisionError "ZeroDivisionError").
  4. `-timedelta.max` is not representable as a [`timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta "datetime.timedelta") object.
  5. String representations of [`timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta "datetime.timedelta") objects are normalized similarly to their internal representation. This leads to somewhat unusual results for negative timedeltas. For example:
>>>```
>>> timedelta(hours=-5)
datetime.timedelta(days=-1, seconds=68400)
>>> print(_)
-1 day, 19:00:00