Title: Python 3.13 New Features
URL: https://docs.python.org/3/whatsnew/3.13.html
Summary: Python 3.13 introduces new functions `z85encode()` and `z85decode()` in the base64 module for Z85 data encoding and decoding. The compileall module now determines the default number of worker threads and processes using `os.process_cpu_count()`.
---

### base64[¶](https://docs.python.org/3/whatsnew/3.13.html#base64 "Link to this heading")
  * Add [`z85encode()`](https://docs.python.org/3/library/base64.html#base64.z85encode "base64.z85encode") and [`z85decode()`](https://docs.python.org/3/library/base64.html#base64.z85decode "base64.z85decode") functions for encoding [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") as [Z85 data](https://rfc.zeromq.org/spec/32/) and decoding Z85-encoded data to `bytes`. (Contributed by Matan Perelman in [gh-75299](https://github.com/python/cpython/issues/75299).)


### compileall[¶](https://docs.python.org/3/whatsnew/3.13.html#compileall "Link to this heading")
  * The default number of worker threads and processes is now selected using [`os.process_cpu_count()`](https://docs.python.org/3/library/os.html#os.process_cpu_count "os.process_cpu_count") instead of [`os.cpu_count()`](https://docs.python.org/3/library/os.html#os.cpu_count "os.cpu_count"). (Contributed by Victor Stinner in [gh-109649](https://github.com/python/cpython/issues/109649).)


### concurrent.futures[¶](https://docs.python.org/3/whatsnew/3.13.html#concurrent-futures "Link to this heading")
  * The default number of worker threads and processes is now selected using [`os.process_cpu_count()`](https://docs.python.org/3/library/os.html#os.process_cpu_count "os.process_cpu_count") instead of [`os.cpu_count()`](https://docs.python.org/3/library/os.html#os.cpu_count "os.cpu_count"). (Contributed by Victor Stinner in [gh-109649](https://github.com/python/cpython/issues/109649).)


### configparser[¶](https://docs.python.org/3/whatsnew/3.13.html#configparser "Link to this heading")
  * [`ConfigParser`](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser "configparser.ConfigParser") now has support for unnamed sections, which allows for top-level key-value pairs. This can be enabled with the new _allow_unnamed_section_ parameter. (Contributed by Pedro Sousa Lacerda in [gh-66449](https://github.com/python/cpython/issues/66449).)


### copy[¶](https://docs.python.org/3/whatsnew/3.13.html#copy "Link to this heading")
  * The new [`replace()`](https://docs.python.org/3/library/copy.html#copy.replace "copy.replace") function and the [`replace protocol`](https://docs.python.org/3/library/copy.html#object.__replace__ "object.__replace__") make creating modified copies of objects much simpler. This is especially useful when working with immutable objects. The following types support the [`replace()`](https://docs.python.org/3/library/copy.html#copy.replace "copy.replace") function and implement the replace protocol:
    * [`collections.namedtuple()`](https://docs.python.org/3/library/collections.html#collections.namedtuple "collections.namedtuple")
    * [`dataclasses.dataclass`](https://docs.python.org/3/library/dataclasses.html#dataclasses.dataclass "dataclasses.dataclass")
    * [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime"), [`datetime.date`](https://docs.python.org/3/library/datetime.html#datetime.date "datetime.date"), [`datetime.time`](https://docs.python.org/3/library/datetime.html#datetime.time "datetime.time")
    * [`inspect.Signature`](https://docs.python.org/3/library/inspect.html#inspect.Signature "inspect.Signature"), [`inspect.Parameter`](https://docs.python.org/3/library/inspect.html#inspect.Parameter "inspect.Parameter")
    * [`types.SimpleNamespace`](https://docs.python.org/3/library/types.html#types.SimpleNamespace "types.SimpleNamespace")
    * [code objects](https://docs.python.org/3/reference/datamodel.html#code-objects)
Any user-defined class can also support [`copy.replace()`](https://docs.python.org/3/library/copy.html#copy.replace "copy.replace") by defining the [`__replace__()`](https://docs.python.org/3/library/copy.html#object.__replace__ "object.__replace__") method. (Contributed by Serhiy Storchaka in [gh-108751](https://github.com/python/cpython/issues/108751).)