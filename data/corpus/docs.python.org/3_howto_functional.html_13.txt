Title: Refactoring Lambda Functions in Python
URL: https://docs.python.org/3/howto/functional.html
Summary: This section discusses the use of the `sum()` built-in function with generator expressions and suggests that many uses of `functools.reduce()` can be more clearly expressed as `for` loops. It outlines a set of steps proposed by Fredrik Lundh for refactoring lambda functions into named functions, emphasizing clarity and maintainability.
---

```

Or the [`sum()`](https://docs.python.org/3/library/functions.html#sum "sum") built-in and a generator expression:
```
total = sum(b for a, b in items)

```

Many uses of [`functools.reduce()`](https://docs.python.org/3/library/functools.html#functools.reduce "functools.reduce") are clearer when written as `for` loops.
Fredrik Lundh once suggested the following set of rules for refactoring uses of `lambda`:
  1. Write a lambda function.
  2. Write a comment explaining what the heck that lambda does.
  3. Study the comment for a while, and think of a name that captures the essence of the comment.
  4. Convert the lambda to a def statement, using that name.
  5. Remove the comment.


I really like these rules, but you’re free to disagree about whether this lambda-free style is better.
## Revision History and Acknowledgements[¶](https://docs.python.org/3/howto/functional.html#revision-history-and-acknowledgements "Link to this heading")
The author would like to thank the following people for offering suggestions, corrections and assistance with various drafts of this article: Ian Bicking, Nick Coghlan, Nick Efford, Raymond Hettinger, Jim Jewett, Mike Krell, Leandro Lameiro, Jussi Salmela, Collin Winter, Blake Winton.
Version 0.1: posted June 30 2006.
Version 0.11: posted July 1 2006. Typo fixes.
Version 0.2: posted July 10 2006. Merged genexp and listcomp sections into one. Typo fixes.
Version 0.21: Added more references suggested on the tutor mailing list.
Version 0.30: Adds a section on the `functional` module written by Collin Winter; adds short section on the operator module; a few other edits.
## References[¶](https://docs.python.org/3/howto/functional.html#references "Link to this heading")
### General[¶](https://docs.python.org/3/howto/functional.html#general "Link to this heading")
**Structure and Interpretation of Computer Programs** , by Harold Abelson and Gerald Jay Sussman with Julie Sussman. The book can be found at <https://mitpress.mit.edu/sicp>. In this classic textbook of computer science, chapters 2 and 3 discuss the use of sequences and streams to organize the data flow inside a program. The book uses Scheme for its examples, but many of the design approaches described in these chapters are applicable to functional-style Python code.
<https://www.defmacro.org/ramblings/fp.html>: A general introduction to functional programming that uses Java examples and has a lengthy historical introduction.
<https://en.wikipedia.org/wiki/Functional_programming>: General Wikipedia entry describing functional programming.
<https://en.wikipedia.org/wiki/Coroutine>: Entry for coroutines.
<https://en.wikipedia.org/wiki/Partial_application>: Entry for the concept of partial function application.
<https://en.wikipedia.org/wiki/Currying>: Entry for the concept of currying.
### Python-specific[¶](https://docs.python.org/3/howto/functional.html#python-specific "Link to this heading")
<https://gnosis.cx/TPiP/>: The first chapter of David Mertz’s book Text Processing in Python discusses functional programming for text processing, in the section titled “Utilizing Higher-Order Functions in Text Processing”.
Mertz also wrote a 3-part series of articles on functional programming for IBM’s DeveloperWorks site; see [part 1](https://developer.ibm.com/articles/l-prog/), [part 2](https://developer.ibm.com/tutorials/l-prog2/), and [part 3](https://developer.ibm.com/tutorials/l-prog3/),
### Python documentation[¶](https://docs.python.org/3/howto/functional.html#python-documentation "Link to this heading")
Documentation for the [`itertools`](https://docs.python.org/3/library/itertools.html#module-itertools "itertools: Functions creating iterators for efficient looping.") module.
Documentation for the [`functools`](https://docs.python.org/3/library/functools.html#module-functools "functools: Higher-order functions and operations on callable objects.") module.
Documentation for the [`operator`](https://docs.python.org/3/library/operator.html#module-operator "operator: Functions corresponding to the standard operators.") module.
[**PEP 289**](https://peps.python.org/pep-0289/): “Generator Expressions”
[**PEP 342**](https://peps.python.org/pep-0342/): “Coroutines via Enhanced Generators” describes the new generator features in Python 2.5.
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [Functional Programming HOWTO](https://docs.python.org/3/howto/functional.html)
    * [Introduction](https://docs.python.org/3/howto/functional.html#introduction)
      * [Formal provability](https://docs.python.org/3/howto/functional.html#formal-provability)
      * [Modularity](https://docs.python.org/3/howto/functional.html#modularity)
      * [Ease of debugging and testing](https://docs.python.org/3/howto/functional.html#ease-of-debugging-and-testing)
      * [Composability](https://docs.python.org/3/howto/functional.html#composability)
    * [Iterators](https://docs.python.org/3/howto/functional.html#iterators)
      * [Da