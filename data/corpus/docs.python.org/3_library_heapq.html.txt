Title: Heap Queue Algorithm in Python
URL: https://docs.python.org/3/library/heapq.html
Summary: This section introduces the `heapq` module in Python, which implements the heap queue algorithm. It provides a structured overview, including links to basic examples, implementation notes for priority queues, and the underlying theory.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [`heapq` — Heap queue algorithm](https://docs.python.org/3/library/heapq.html)
    * [Basic Examples](https://docs.python.org/3/library/heapq.html#basic-examples)
    * [Priority Queue Implementation Notes](https://docs.python.org/3/library/heapq.html#priority-queue-implementation-notes)
    * [Theory](https://docs.python.org/3/library/heapq.html#theory)


#### Previous topic
[`collections.abc` — Abstract Base Classes for Containers](https://docs.python.org/3/library/collections.abc.html "previous chapter")
#### Next topic
[`bisect` — Array bisection algorithm](https://docs.python.org/3/library/bisect.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/heapq.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/bisect.html "bisect — Array bisection algorithm") |
  * [previous](https://docs.python.org/3/library/collections.abc.html "collections.abc — Abstract Base Classes for Containers") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Data Types](https://docs.python.org/3/library/datatypes.html) »
  * [`heapq` — Heap queue algorithm](https://docs.python.org/3/library/heapq.html)
  * | 
  * Theme  Auto Light Dark |


# `heapq` — Heap queue algorithm[¶](https://docs.python.org/3/library/heapq.html#module-heapq "Link to this heading")
**Source code:** [Lib/heapq.py](https://github.com/python/cpython/tree/3.13/Lib/heapq.py)
This module provides an implementation of the heap queue algorithm, also known as the priority queue algorithm.
Heaps are binary trees for which every parent node has a value less than or equal to any of its children. We refer to this condition as the heap invariant.
This implementation uses arrays for which `heap[k] <= heap[2*k+1]` and `heap[k] <= heap[2*k+2]` for all _k_ , counting elements from zero. For the sake of comparison, non-existing elements are considered to be infinite. The interesting property of a heap is that its smallest element is always the root, `heap[0]`.
The API below differs from textbook heap algorithms in two aspects: (a) We use zero-based indexing. This makes the relationship between the index for a node and the indexes for its children slightly less obvious, but is more suitable since Python uses zero-based indexing. (b) Our pop method returns the smallest item, not the largest (called a “min heap” in textbooks; a “max heap” is more common in texts because of its suitability for in-place sorting).
These two make it possible to view the heap as a regular Python list without surprises: `heap[0]` is the smallest item, and `heap.sort()` maintains the heap invariant!
To create a heap, use a list initialized to `[]`, or you can transform a populated list into a heap via function [`heapify()`](https://docs.python.org/3/library/heapq.html#heapq.heapify "heapq.heapify").
The following functions are provided: 

heapq.heappush(_heap_ , _item_)[¶](https://docs.python.org/3/library/heapq.html#heapq.heappush "Link to this definition")
    
Push the value _item_ onto the _heap_ , maintaining the heap invariant. 

heapq.heappop(_heap_)[¶](https://docs.python.org/3/library/heapq.html#heapq.heappop "Link to this definition")
    
Pop and return the smallest item from the _heap_ , maintaining the heap invariant. If the heap is empty, [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError "IndexError") is raised. To access the smallest item without popping it, use `heap[0]`.