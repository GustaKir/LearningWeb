Title: Python 3 Change Log Highlights
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section details several optimizations and bug fixes in Python 3, including changes to the `_PyExecutorObject`, enhancements to `min()` and `max()`, improvements in the `tokenize` module for handling multiline tokens, a fix for `None.__ne__(None)`, and changes to the `input()` function's error handling.
---

of `_PyExecutorObject` to return the next_instr pointer, instead of the frame, and to always execute at least one instruction.
  * [gh-90350](https://github.com/python/cpython/issues/90350): Optimize builtin functions [`min()`](https://docs.python.org/3/library/functions.html#min "min") and [`max()`](https://docs.python.org/3/library/functions.html#max "max").
  * [gh-112943](https://github.com/python/cpython/issues/112943): Correctly compute end column offsets for multiline tokens in the [`tokenize`](https://docs.python.org/3/library/tokenize.html#module-tokenize "tokenize: Lexical scanner for Python source code.") module. Patch by Pablo Galindo
  * [gh-112125](https://github.com/python/cpython/issues/112125): Fix `None.__ne__(None)` returning `NotImplemented` instead of `False`.
  * [gh-74616](https://github.com/python/cpython/issues/74616): [`input()`](https://docs.python.org/3/library/functions.html#input "input") now raises a ValueError when output on the terminal if the prompt contains embedded null characters instead of silently truncating it.
  * [gh-112716](https://github.com/python/cpython/issues/112716): Fix SystemError in the `import` statement and in `__reduce__()` methods of builtin types when `__builtins__` is not a dict.
  * [gh-112730](https://github.com/python/cpython/issues/112730): Use color to highlight error locations in tracebacks. Patch by Pablo Galindo
  * [gh-112625](https://github.com/python/cpython/issues/112625): Fixes a bug where a bytearray object could be cleared while iterating over an argument in the `bytearray.join()` method that could result in reading memory after it was freed.
  * [gh-112660](https://github.com/python/cpython/issues/112660): Do not clear unexpected errors during formatting error messages for ImportError and AttributeError for modules.
  * [gh-105967](https://github.com/python/cpython/issues/105967): Workaround a bug in Apple’s macOS platform zlib library where [`zlib.crc32()`](https://docs.python.org/3/library/zlib.html#zlib.crc32 "zlib.crc32") and [`binascii.crc32()`](https://docs.python.org/3/library/binascii.html#binascii.crc32 "binascii.crc32") could produce incorrect results on multi-gigabyte inputs. Including when using [`zipfile`](https://docs.python.org/3/library/zipfile.html#module-zipfile "zipfile: Read and write ZIP-format archive files.") on zips containing large data.
  * [gh-95754](https://github.com/python/cpython/issues/95754): Provide a better error message when accessing invalid attributes on partially initialized modules. The origin of the module being accessed is now included in the message to help with the common issue of shadowing other modules.
  * [gh-112217](https://github.com/python/cpython/issues/112217): Add check for the type of `__cause__` returned from calling the type `T` in `raise from T`.
  * [gh-111058](https://github.com/python/cpython/issues/111058): Change coro.cr_frame/gen.gi_frame to return `None` after the coroutine/generator has been closed. This fixes a bug where [`getcoroutinestate()`](https://docs.python.org/3/library/inspect.html#inspect.getcoroutinestate "inspect.getcoroutinestate") and [`getgeneratorstate()`](https://docs.python.org/3/library/inspect.html#inspect.getgeneratorstate "inspect.getgeneratorstate") return the wrong state for a closed coroutine/generator.
  * [gh-112388](https://github.com/python/cpython/issues/112388): Fix an error that was causing the parser to try to overwrite tokenizer errors. Patch by pablo Galindo
  * [gh-112387](https://github.com/python/cpython/issues/112387): Fix error positions for decoded strings with backwards tokenize errors. Patch by Pablo Galindo
  * [gh-99606](https://github.com/python/cpython/issues/99606): Make code generated for an empty f-string identical to the code of an empty normal string.
  * [gh-112367](https://github.com/python/cpython/issues/112367): Avoid undefined behaviour when using the perf trampolines by not freeing the code arenas until shutdown. Patch by Pablo Galindo
  * [gh-112320](https://github.com/python/cpython/issues/112320): The Tier 2 translator now tracks the confidence level for staying “on trace” (i.e. not exiting back to the Tier 1 interpreter) for branch instructions based on the number of bits set in the branch “counter”. Trace translation ends when the confidence drops below 1/3rd.
  * [gh-109598](https://github.com/python/cpython/issues/109598): [`PyComplex_RealAsDouble()`](https://docs.python.org/3/c-api/complex.html#c.PyComplex_RealAsDouble "PyComplex_RealAsDouble")/[`PyComplex_ImagAsDouble()`](https://docs.python.org/3/c-api/complex.html#c.PyComplex_ImagAsDouble "PyComplex_ImagAsDouble") now tries to convert an object to a [`complex`](https://docs.python.org/3/library/functions.html#complex "complex") instance using its `__complex__()` method before falling back to the `__float__()` method.