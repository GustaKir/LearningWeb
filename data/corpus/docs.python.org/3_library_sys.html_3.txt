Title: Python sys Module - Function Definitions
URL: https://docs.python.org/3/library/sys.html
Summary: This section provides information on several functions within the Python 'sys' module. It details 'sys.call_tracing', which executes a function with tracing enabled, while mentioning the handling of tracing states. It also notes the 'sys.copyright' attribute, which contains copyright information for the Python interpreter, and introduces 'sys._clear_type_cache' without detailed explanation.
---

sys.call_tracing(_func_ , _args_)[¶](https://docs.python.org/3/library/sys.html#sys.call_tracing "Link to this definition")
    
Call `func(*args)`, while tracing is enabled. The tracing state is saved, and restored afterwards. This is intended to be called from a debugger from a checkpoint, to recursively debug or profile some other code.
Tracing is suspended while calling a tracing function set by [`settrace()`](https://docs.python.org/3/library/sys.html#sys.settrace "sys.settrace") or [`setprofile()`](https://docs.python.org/3/library/sys.html#sys.setprofile "sys.setprofile") to avoid infinite recursion. `call_tracing()` enables explicit recursion of the tracing function. 

sys.copyright[¶](https://docs.python.org/3/library/sys.html#sys.copyright "Link to this definition")
    
A string containing the copyright pertaining to the Python interpreter. 

sys._clear_type_cache()[¶](https://docs.python.org/3/library/sys.html#sys._clear_type_cache "Link to this definition")
    
Clear the internal type cache. The type cache is used to speed up attribute and method lookups. Use the function _only_ to drop unnecessary references during reference leak debugging.
This function should be used for internal and specialized purposes only.
Deprecated since version 3.13: Use the more general [`_clear_internal_caches()`](https://docs.python.org/3/library/sys.html#sys._clear_internal_caches "sys._clear_internal_caches") function instead. 

sys._clear_internal_caches()[¶](https://docs.python.org/3/library/sys.html#sys._clear_internal_caches "Link to this definition")
    
Clear all internal performance-related caches. Use this function _only_ to release unnecessary references and memory blocks when hunting for leaks.
Added in version 3.13. 

sys._current_frames()[¶](https://docs.python.org/3/library/sys.html#sys._current_frames "Link to this definition")
    
Return a dictionary mapping each thread’s identifier to the topmost stack frame currently active in that thread at the time the function is called. Note that functions in the [`traceback`](https://docs.python.org/3/library/traceback.html#module-traceback "traceback: Print or retrieve a stack traceback.") module can build the call stack given such a frame.
This is most useful for debugging deadlock: this function does not require the deadlocked threads’ cooperation, and such threads’ call stacks are frozen for as long as they remain deadlocked. The frame returned for a non-deadlocked thread may bear no relationship to that thread’s current activity by the time calling code examines the frame.
This function should be used for internal and specialized purposes only.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `sys._current_frames` with no arguments. 

sys._current_exceptions()[¶](https://docs.python.org/3/library/sys.html#sys._current_exceptions "Link to this definition")
    
Return a dictionary mapping each thread’s identifier to the topmost exception currently active in that thread at the time the function is called. If a thread is not currently handling an exception, it is not included in the result dictionary.
This is most useful for statistical profiling.
This function should be used for internal and specialized purposes only.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `sys._current_exceptions` with no arguments.
Changed in version 3.12: Each value in the dictionary is now a single exception instance, rather than a 3-tuple as returned from `sys.exc_info()`.