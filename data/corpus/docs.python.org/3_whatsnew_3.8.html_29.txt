Title: Python 3.8 Features and Updates
URL: https://docs.python.org/3/whatsnew/3.8.html
Summary: Python 3.8 introduces a RuntimeError for missing `__classcell__` in custom metaclasses, a DeprecationWarning in previous versions was noted. The `cProfile.Profile` class now supports context manager usage, enhancing performance profiling. Additionally, enhancements to the `shutil` module methods `copyfile()`, `copy()`, and `copy2()` were made.
---

bugs.python.org/issue?@action=redirect&bpo=29209).)
  * A [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError") is now raised when the custom metaclass doesn’t provide the `__classcell__` entry in the namespace passed to `type.__new__`. A [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning") was emitted in Python 3.6–3.7. (Contributed by Serhiy Storchaka in [bpo-23722](https://bugs.python.org/issue?@action=redirect&bpo=23722).)
  * The `cProfile.Profile` class can now be used as a context manager. (Contributed by Scott Sanderson in [bpo-29235](https://bugs.python.org/issue?@action=redirect&bpo=29235).)
  * [`shutil.copyfile()`](https://docs.python.org/3/library/shutil.html#shutil.copyfile "shutil.copyfile"), [`shutil.copy()`](https://docs.python.org/3/library/shutil.html#shutil.copy "shutil.copy"), [`shutil.copy2()`](https://docs.python.org/3/library/shutil.html#shutil.copy2 "shutil.copy2"), [`shutil.copytree()`](https://docs.python.org/3/library/shutil.html#shutil.copytree "shutil.copytree") and [`shutil.move()`](https://docs.python.org/3/library/shutil.html#shutil.move "shutil.move") use platform-specific “fast-copy” syscalls (see [Platform-dependent efficient copy operations](https://docs.python.org/3/library/shutil.html#shutil-platform-dependent-efficient-copy-operations) section).
  * [`shutil.copyfile()`](https://docs.python.org/3/library/shutil.html#shutil.copyfile "shutil.copyfile") default buffer size on Windows was changed from 16 KiB to 1 MiB.
  * The `PyGC_Head` struct has changed completely. All code that touched the struct member should be rewritten. (See [bpo-33597](https://bugs.python.org/issue?@action=redirect&bpo=33597).)
  * The [`PyInterpreterState`](https://docs.python.org/3/c-api/init.html#c.PyInterpreterState "PyInterpreterState") struct has been moved into the “internal” header files (specifically Include/internal/pycore_pystate.h). An opaque `PyInterpreterState` is still available as part of the public API (and stable ABI). The docs indicate that none of the struct’s fields are public, so we hope no one has been using them. However, if you do rely on one or more of those private fields and have no alternative then please open a BPO issue. We’ll work on helping you adjust (possibly including adding accessor functions to the public API). (See [bpo-35886](https://bugs.python.org/issue?@action=redirect&bpo=35886).)
  * The [`mmap.flush()`](https://docs.python.org/3/library/mmap.html#mmap.mmap.flush "mmap.mmap.flush") method now returns `None` on success and raises an exception on error under all platforms. Previously, its behavior was platform-dependent: a nonzero value was returned on success; zero was returned on error under Windows. A zero value was returned on success; an exception was raised on error under Unix. (Contributed by Berker Peksag in [bpo-2122](https://bugs.python.org/issue?@action=redirect&bpo=2122).)
  * [`xml.dom.minidom`](https://docs.python.org/3/library/xml.dom.minidom.html#module-xml.dom.minidom "xml.dom.minidom: Minimal Document Object Model \(DOM\) implementation.") and [`xml.sax`](https://docs.python.org/3/library/xml.sax.html#module-xml.sax "xml.sax: Package containing SAX2 base classes and convenience functions.") modules no longer process external entities by default. (Contributed by Christian Heimes in [bpo-17239](https://bugs.python.org/issue?@action=redirect&bpo=17239).)
  * Deleting a key from a read-only [`dbm`](https://docs.python.org/3/library/dbm.html#module-dbm "dbm: Interfaces to various Unix "database" formats.") database ([`dbm.dumb`](https://docs.python.org/3/library/dbm.html#module-dbm.dumb "dbm.dumb: Portable implementation of the simple DBM interface."), [`dbm.gnu`](https://docs.python.org/3/library/dbm.html#module-dbm.gnu "dbm.gnu: GNU database manager \(Unix\)") or [`dbm.ndbm`](https://docs.python.org/3/library/dbm.html#module-dbm.ndbm "dbm.ndbm: The New Database Manager \(Unix\)")) raises `error` ([`dbm.dumb.error`](https://docs.python.org/3/library/dbm.html#dbm.dumb.error "dbm.dumb.error"), [`dbm.gnu.error`](https://docs.python.org/3/library/dbm.html#dbm.gnu.error "dbm.gnu.error") or [`dbm.ndbm.error`](https://docs.python.org/3/library/dbm.html#dbm.ndbm.error "dbm.ndbm.error")) instead of [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError"). (Contributed by Xiang Zhang in [bpo-33106](https://bugs.python.org/issue?@action=redirect&bpo=33106).)
  * Simplified AST for literals. All constants will be represented as [`ast.Constant`](https://docs.python.org/3/library/ast.html#ast.Constant "ast.Constant") instances. Instantiating old classes `Num`, `Str`, `Bytes`, `NameConstant` and `Ellipsis` will return an instance of `Constant`.