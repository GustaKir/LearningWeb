Title: SourceLoader Methods in importlib
URL: https://docs.python.org/3/library/importlib.html
Summary: This section details the concrete implementations of the methods in the SourceLoader class within the importlib module. It covers 'exec_module()', which was introduced in version 3.4, and 'load_module()', which is deprecated since version 3.4 and will be removed in version 3.15, recommending to use 'exec_module()' instead.
---

exec_module(_module_)[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.SourceLoader.exec_module "Link to this definition")
    
Concrete implementation of [`Loader.exec_module()`](https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.exec_module "importlib.abc.Loader.exec_module").
Added in version 3.4. 

load_module(_fullname_)[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.SourceLoader.load_module "Link to this definition")
    
Concrete implementation of [`Loader.load_module()`](https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.load_module "importlib.abc.Loader.load_module").
Deprecated since version 3.4, will be removed in version 3.15: Use [`exec_module()`](https://docs.python.org/3/library/importlib.html#importlib.abc.SourceLoader.exec_module "importlib.abc.SourceLoader.exec_module") instead. 

get_source(_fullname_)[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.SourceLoader.get_source "Link to this definition")
    
Concrete implementation of [`InspectLoader.get_source()`](https://docs.python.org/3/library/importlib.html#importlib.abc.InspectLoader.get_source "importlib.abc.InspectLoader.get_source"). 

is_package(_fullname_)[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.SourceLoader.is_package "Link to this definition")
    
Concrete implementation of [`InspectLoader.is_package()`](https://docs.python.org/3/library/importlib.html#importlib.abc.InspectLoader.is_package "importlib.abc.InspectLoader.is_package"). A module is determined to be a package if its file path (as provided by [`ExecutionLoader.get_filename()`](https://docs.python.org/3/library/importlib.html#importlib.abc.ExecutionLoader.get_filename "importlib.abc.ExecutionLoader.get_filename")) is a file named `__init__` when the file extension is removed **and** the module name itself does not end in `__init__`. 

_class_ importlib.abc.ResourceReader[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.ResourceReader "Link to this definition")
    
_Superseded by TraversableResources_
An [abstract base class](https://docs.python.org/3/glossary.html#term-abstract-base-class) to provide the ability to read _resources_.
From the perspective of this ABC, a _resource_ is a binary artifact that is shipped within a package. Typically this is something like a data file that lives next to the `__init__.py` file of the package. The purpose of this class is to help abstract out the accessing of such data files so that it does not matter if the package and its data file(s) are stored e.g. in a zip file versus on the file system.
For any of methods of this class, a _resource_ argument is expected to be a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object) which represents conceptually just a file name. This means that no subdirectory paths should be included in the _resource_ argument. This is because the location of the package the reader is for, acts as the “directory”. Hence the metaphor for directories and file names is packages and resources, respectively. This is also why instances of this class are expected to directly correlate to a specific package (instead of potentially representing multiple packages or a module).
Loaders that wish to support resource reading are expected to provide a method called `get_resource_reader(fullname)` which returns an object implementing this ABC’s interface. If the module specified by fullname is not a package, this method should return [`None`](https://docs.python.org/3/library/constants.html#None "None"). An object compatible with this ABC should only be returned when the specified module is a package.
Added in version 3.7.
Deprecated since version 3.12, will be removed in version 3.14: Use [`importlib.resources.abc.TraversableResources`](https://docs.python.org/3/library/importlib.resources.abc.html#importlib.resources.abc.TraversableResources "importlib.resources.abc.TraversableResources") instead. 

_abstractmethod_ open_resource(_resource_)[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.ResourceReader.open_resource "Link to this definition")
    
> Returns an opened, [file-like object](https://docs.python.org/3/glossary.html#term-file-like-object) for binary reading of the _resource_.
> If the resource cannot be found, [`FileNotFoundError`](https://docs.python.org/3/library/exceptions.html#FileNotFoundError "FileNotFoundError") is raised. 

_abstractmethod_ resource_path(_resource_)[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.ResourceReader.resource_path "Link to this definition")
    
> Returns the file system path to the _resource_.
> If the resource does not concretely exist on the file system, raise [`FileNotFoundError`](https://docs.python.org/3/library/exceptions.html#FileNotFoundError "FileNotFoundError").