Title: Python Changelog Updates
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: Recent updates to Python include the introduction of a `SyntaxWarning` for invalid escape sequences in regular expressions, which will evolve into a `SyntaxError` in future versions. Additionally, improvements in handling `StopIteration` and `StopAsyncIteration` in generators and enhanced error messages for incorrect import statements have been implemented.
---

e, `re.compile("\d+\.\d+")` now emits a [`SyntaxWarning`](https://docs.python.org/3/library/exceptions.html#SyntaxWarning "SyntaxWarning") (`"\d"` is an invalid escape sequence), use raw strings for regular expression: `re.compile(r"\d+\.\d+")`. In a future Python version, [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") will eventually be raised, instead of [`SyntaxWarning`](https://docs.python.org/3/library/exceptions.html#SyntaxWarning "SyntaxWarning"). Patch by Victor Stinner.
  * [gh-96793](https://github.com/python/cpython/issues/96793): Handle StopIteration and StopAsyncIteration raised in generator or coroutines in the bytecode, rather than in wrapping C code.
  * [gh-98931](https://github.com/python/cpython/issues/98931): Improve the [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") error message when the user types `import x from y` instead of `from y import x`. Patch by Pablo Galindo
  * [gh-98852](https://github.com/python/cpython/issues/98852): Fix subscription of type aliases containing bare generic types or types like [`TypeVar`](https://docs.python.org/3/library/typing.html#typing.TypeVar "typing.TypeVar"): for example `tuple[A, T][int]` and `tuple[TypeVar, T][int]`, where `A` is a generic type, and `T` is a type variable.
  * [gh-98925](https://github.com/python/cpython/issues/98925): Lower the recursion depth for marshal on WASI to support (in-development) wasmtime 2.0.
  * [gh-98783](https://github.com/python/cpython/issues/98783): Fix multiple crashes in debug mode when `str` subclasses are used instead of `str` itself.
  * [gh-98811](https://github.com/python/cpython/issues/98811): Use complete source locations to simplify detection of `__future__` imports which are not at the beginning of the file. Also corrects the offset in the exception raised in one case, which was off by one and impeded highlighting.
  * [gh-96793](https://github.com/python/cpython/issues/96793): Add specialization of [`FOR_ITER`](https://docs.python.org/3/library/dis.html#opcode-FOR_ITER) for generators. Saves multiple layers of dispatch and checking to get from the [`FOR_ITER`](https://docs.python.org/3/library/dis.html#opcode-FOR_ITER) instruction in the caller to the [`RESUME`](https://docs.python.org/3/library/dis.html#opcode-RESUME) in the generator.
  * [gh-98762](https://github.com/python/cpython/issues/98762): Fix source locations of [`match`](https://docs.python.org/3/reference/compound_stmts.html#match) sub-patterns.
  * [gh-98586](https://github.com/python/cpython/issues/98586): Added the methods [`PyObject_Vectorcall()`](https://docs.python.org/3/c-api/call.html#c.PyObject_Vectorcall "PyObject_Vectorcall") and [`PyObject_VectorcallMethod()`](https://docs.python.org/3/c-api/call.html#c.PyObject_VectorcallMethod "PyObject_VectorcallMethod") to the [Limited API](https://docs.python.org/3/c-api/stable.html#stable) along with the auxiliary macro constant [`PY_VECTORCALL_ARGUMENTS_OFFSET`](https://docs.python.org/3/c-api/call.html#c.PY_VECTORCALL_ARGUMENTS_OFFSET "PY_VECTORCALL_ARGUMENTS_OFFSET").
The availability of these functions enables more efficient [**PEP 590**](https://peps.python.org/pep-0590/) vector calls from binary extension modules that avoid argument boxing/unboxing overheads.
  * [gh-99257](https://github.com/python/cpython/issues/99257): Fix an issue where member descriptors (such as those for [`__slots__`](https://docs.python.org/3/reference/datamodel.html#object.__slots__ "object.__slots__")) could behave incorrectly or crash instead of raising a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") when accessed via an instance of an invalid type.
  * [gh-93143](https://github.com/python/cpython/issues/93143): Rather than changing `co_code`, the interpreter will now display a [`RuntimeWarning`](https://docs.python.org/3/library/exceptions.html#RuntimeWarning "RuntimeWarning") and assign [`None`](https://docs.python.org/3/library/constants.html#None "None") to any fast locals that are left unbound after jumps or [`del`](https://docs.python.org/3/reference/simple_stmts.html#del) statements executed while tracing.
  * [gh-96421](https://github.com/python/cpython/issues/96421): When calling into Python code from C code, through [`PyEval_EvalFrameEx()`](https://docs.python.org/3/c-api/veryhigh.html#c.PyEval_EvalFrameEx "PyEval_EvalFrameEx") or a related C-API function, a shim frame in inserted into the call stack. This occurs in the `_PyEval_EvalFrameDefault()` function. The extra frame should be invisible to all Python and most C extensions, but out-of-process profilers and debuggers need to be aware of it.