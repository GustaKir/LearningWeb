Title: Updates on C API Macros and Type Handling
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This document chunk details the conversion of `Py_TYPE()` and `Py_SIZE()` macros to static inline functions. It introduces the necessity of using `Py_SET_TYPE()` and `Py_SET_SIZE()` for setting object type and size. Additionally, it notes that `PyType_Ready()` will raise errors for types with the `Py_TPFLAGS_HAVE_GC` flag if no traverse function is defined.
---

/bugs.python.org/issue?@action=redirect&bpo=39573): Convert the [`Py_TYPE()`](https://docs.python.org/3/c-api/structures.html#c.Py_TYPE "Py_TYPE") and [`Py_SIZE()`](https://docs.python.org/3/c-api/structures.html#c.Py_SIZE "Py_SIZE") macros to static inline functions. The [`Py_SET_TYPE()`](https://docs.python.org/3/c-api/structures.html#c.Py_SET_TYPE "Py_SET_TYPE") and [`Py_SET_SIZE()`](https://docs.python.org/3/c-api/structures.html#c.Py_SET_SIZE "Py_SET_SIZE") functions must now be used to set an object type and size. Patch by Victor Stinner.
  * [bpo-44263](https://bugs.python.org/issue?@action=redirect&bpo=44263): The [`PyType_Ready()`](https://docs.python.org/3/c-api/type.html#c.PyType_Ready "PyType_Ready") function now raises an error if a type is defined with the [`Py_TPFLAGS_HAVE_GC`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_HAVE_GC "Py_TPFLAGS_HAVE_GC") flag set but has no traverse function ([`PyTypeObject.tp_traverse`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_traverse "PyTypeObject.tp_traverse")). Patch by Victor Stinner.
  * [bpo-43795](https://bugs.python.org/issue?@action=redirect&bpo=43795): The undocumented function `Py_FrozenMain()` is removed from the Limited API.
  * [bpo-44113](https://bugs.python.org/issue?@action=redirect&bpo=44113): Deprecate the following functions to configure the Python initialization:
    * `PySys_AddWarnOptionUnicode()`
    * `PySys_AddWarnOption()`
    * `PySys_AddXOption()`
    * `PySys_HasWarnOptions()`
    * `Py_SetPath()`
    * `Py_SetProgramName()`
    * `Py_SetPythonHome()`
    * `Py_SetStandardStreamEncoding()`
    * `_Py_SetProgramFullPath()`
Use the new [`PyConfig`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig "PyConfig") API of the [Python Initialization Configuration](https://docs.python.org/3/c-api/init_config.html#init-config) instead ([**PEP 587**](https://peps.python.org/pep-0587/)).
  * [bpo-44094](https://bugs.python.org/issue?@action=redirect&bpo=44094): Remove `PyErr_SetFromErrnoWithUnicodeFilename()`, `PyErr_SetFromWindowsErrWithUnicodeFilename()`, and `PyErr_SetExcFromWindowsErrWithUnicodeFilename()`. They are not documented and have been deprecated since Python 3.3.
  * [bpo-43795](https://bugs.python.org/issue?@action=redirect&bpo=43795): [`PyCodec_Unregister()`](https://docs.python.org/3/c-api/codec.html#c.PyCodec_Unregister "PyCodec_Unregister") is now properly exported as a function in the Windows Stable ABI DLL.
  * [bpo-44029](https://bugs.python.org/issue?@action=redirect&bpo=44029): Remove deprecated `Py_UNICODE` APIs: `PyUnicode_Encode`, `PyUnicode_EncodeUTF7`, `PyUnicode_EncodeUTF8`, `PyUnicode_EncodeUTF16`, `PyUnicode_EncodeUTF32`, `PyUnicode_EncodeLatin1`, `PyUnicode_EncodeMBCS`, `PyUnicode_EncodeDecimal`, `PyUnicode_EncodeRawUnicodeEscape`, `PyUnicode_EncodeCharmap`, `PyUnicode_EncodeUnicodeEscape`, `PyUnicode_TransformDecimalToASCII`, `PyUnicode_TranslateCharmap`, `PyUnicodeEncodeError_Create`, `PyUnicodeTranslateError_Create`. See [**PEP 393**](https://peps.python.org/pep-0393/) and [**PEP 624**](https://peps.python.org/pep-0624/) for reference.
  * [bpo-42035](https://bugs.python.org/issue?@action=redirect&bpo=42035): Add a new [`PyType_GetName()`](https://docs.python.org/3/c-api/type.html#c.PyType_GetName "PyType_GetName") function to get typeâ€™s short name.