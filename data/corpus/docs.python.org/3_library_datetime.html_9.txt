Title: Using `date` Objects and the `timetuple` Method in Python
URL: https://docs.python.org/3/library/datetime.html
Summary: This section demonstrates how to create and modify `date` objects in Python using the `replace()` method. It also explains the `timetuple()` method, which returns a `time.struct_time` representing the date, with specific characteristics such as zeroed hours, minutes, and seconds.
---

```
>>> fromdatetimeimport date
>>> d = date(2002, 12, 31)
>>> d.replace(day=26)
datetime.date(2002, 12, 26)

```

The generic function [`copy.replace()`](https://docs.python.org/3/library/copy.html#copy.replace "copy.replace") also supports [`date`](https://docs.python.org/3/library/datetime.html#datetime.date "datetime.date") objects. 

date.timetuple()[¶](https://docs.python.org/3/library/datetime.html#datetime.date.timetuple "Link to this definition")
    
Return a [`time.struct_time`](https://docs.python.org/3/library/time.html#time.struct_time "time.struct_time") such as returned by [`time.localtime()`](https://docs.python.org/3/library/time.html#time.localtime "time.localtime").
The hours, minutes and seconds are 0, and the DST flag is -1.
`d.timetuple()` is equivalent to:
```
time.struct_time((d.year, d.month, d.day, 0, 0, 0, d.weekday(), yday, -1))

```

where `yday = d.toordinal() - date(d.year, 1, 1).toordinal() + 1` is the day number within the current year starting with 1 for January 1st. 

date.toordinal()[¶](https://docs.python.org/3/library/datetime.html#datetime.date.toordinal "Link to this definition")
    
Return the proleptic Gregorian ordinal of the date, where January 1 of year 1 has ordinal 1. For any [`date`](https://docs.python.org/3/library/datetime.html#datetime.date "datetime.date") object `d`, `date.fromordinal(d.toordinal()) == d`. 

date.weekday()[¶](https://docs.python.org/3/library/datetime.html#datetime.date.weekday "Link to this definition")
    
Return the day of the week as an integer, where Monday is 0 and Sunday is 6. For example, `date(2002, 12, 4).weekday() == 2`, a Wednesday. See also [`isoweekday()`](https://docs.python.org/3/library/datetime.html#datetime.date.isoweekday "datetime.date.isoweekday"). 

date.isoweekday()[¶](https://docs.python.org/3/library/datetime.html#datetime.date.isoweekday "Link to this definition")
    
Return the day of the week as an integer, where Monday is 1 and Sunday is 7. For example, `date(2002, 12, 4).isoweekday() == 3`, a Wednesday. See also [`weekday()`](https://docs.python.org/3/library/datetime.html#datetime.date.weekday "datetime.date.weekday"), [`isocalendar()`](https://docs.python.org/3/library/datetime.html#datetime.date.isocalendar "datetime.date.isocalendar"). 

date.isocalendar()[¶](https://docs.python.org/3/library/datetime.html#datetime.date.isocalendar "Link to this definition")
    
Return a [named tuple](https://docs.python.org/3/glossary.html#term-named-tuple) object with three components: `year`, `week` and `weekday`.
The ISO calendar is a widely used variant of the Gregorian calendar. [[3]](https://docs.python.org/3/library/datetime.html#id7)
The ISO year consists of 52 or 53 full weeks, and where a week starts on a Monday and ends on a Sunday. The first week of an ISO year is the first (Gregorian) calendar week of a year containing a Thursday. This is called week number 1, and the ISO year of that Thursday is the same as its Gregorian year.
For example, 2004 begins on a Thursday, so the first week of ISO year 2004 begins on Monday, 29 Dec 2003 and ends on Sunday, 4 Jan 2004:
>>>```
>>> fromdatetimeimport date
>>> date(2003, 12, 29).isocalendar()
datetime.IsoCalendarDate(year=2004, week=1, weekday=1)
>>> date(2004, 1, 4).isocalendar()
datetime.IsoCalendarDate(year=2004, week=1, weekday=7)

```

Changed in version 3.9: Result changed from a tuple to a [named tuple](https://docs.python.org/3/glossary.html#term-named-tuple). 

date.isoformat()[¶](https://docs.python.org/3/library/datetime.html#datetime.date.isoformat "Link to this definition")
    
Return a string representing the date in ISO 8601 format, `YYYY-MM-DD`:
>>>```
>>> fromdatetimeimport date
>>> date(2002, 12, 4).isoformat()
'2002-12-04'

```


date.__str__()[¶](https://docs.python.org/3/library/datetime.html#datetime.date.__str__ "Link to this definition")
    
For a date `d`, `str(d)` is equivalent to `d.isoformat()`. 

date.ctime()[¶](https://docs.python.org/3/library/datetime.html#datetime.date.ctime "Link to this definition")
    
Return a string representing the date:
>>>```
>>> fromdatetimeimport date
>>> date(2002, 12, 4).ctime()
'Wed Dec 4 00:00:00 2002'

```

`d.ctime()` is equivalent to:
```
time.ctime(time.mktime(d.timetuple()))