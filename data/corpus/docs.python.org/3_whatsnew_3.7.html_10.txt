Title: New contextvars Module in Python 3.7
URL: https://docs.python.org/3/whatsnew/3.7.html
Summary: Python 3.7 introduces the `contextvars` module, which adds support for context variables that work effectively with asynchronous code, unlike thread-local storage. The asyncio and decimal modules have been updated to utilize context variables seamlessly.
---

## New Modules[¶](https://docs.python.org/3/whatsnew/3.7.html#new-modules "Link to this heading")
### contextvars[¶](https://docs.python.org/3/whatsnew/3.7.html#contextvars "Link to this heading")
The new [`contextvars`](https://docs.python.org/3/library/contextvars.html#module-contextvars "contextvars: Context Variables") module and a set of [new C APIs](https://docs.python.org/3/c-api/contextvars.html#contextvarsobjects) introduce support for _context variables_. Context variables are conceptually similar to thread-local variables. Unlike TLS, context variables support asynchronous code correctly.
The [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O.") and [`decimal`](https://docs.python.org/3/library/decimal.html#module-decimal "decimal: Implementation of the General Decimal Arithmetic Specification.") modules have been updated to use and support context variables out of the box. Particularly the active decimal context is now stored in a context variable, which allows decimal operations to work with the correct context in asynchronous code.
See also 

[**PEP 567**](https://peps.python.org/pep-0567/) – Context Variables
    
PEP written and implemented by Yury Selivanov
### dataclasses[¶](https://docs.python.org/3/whatsnew/3.7.html#dataclasses "Link to this heading")
The new [`dataclass()`](https://docs.python.org/3/library/dataclasses.html#dataclasses.dataclass "dataclasses.dataclass") decorator provides a way to declare _data classes_. A data class describes its attributes using class variable annotations. Its constructor and other magic methods, such as [`__repr__()`](https://docs.python.org/3/reference/datamodel.html#object.__repr__ "object.__repr__"), [`__eq__()`](https://docs.python.org/3/reference/datamodel.html#object.__eq__ "object.__eq__"), and [`__hash__()`](https://docs.python.org/3/reference/datamodel.html#object.__hash__ "object.__hash__") are generated automatically.
Example:
```
@dataclass
classPoint:
  x: float
  y: float
  z: float = 0.0
p = Point(1.5, 2.5)
print(p)  # produces "Point(x=1.5, y=2.5, z=0.0)"