Title: Python Modules Documentation
URL: https://docs.python.org/3/tutorial/modules.html
Summary: This document provides an overview of modules in Python, including details on executing modules as scripts, the module search path, and compiled Python files.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [6. Modules](https://docs.python.org/3/tutorial/modules.html)
    * [6.1. More on Modules](https://docs.python.org/3/tutorial/modules.html#more-on-modules)
      * [6.1.1. Executing modules as scripts](https://docs.python.org/3/tutorial/modules.html#executing-modules-as-scripts)
      * [6.1.2. The Module Search Path](https://docs.python.org/3/tutorial/modules.html#the-module-search-path)
      * [6.1.3. “Compiled” Python files](https://docs.python.org/3/tutorial/modules.html#compiled-python-files)
    * [6.2. Standard Modules](https://docs.python.org/3/tutorial/modules.html#standard-modules)
    * [6.3. The `dir()` Function](https://docs.python.org/3/tutorial/modules.html#the-dir-function)
    * [6.4. Packages](https://docs.python.org/3/tutorial/modules.html#packages)
      * [6.4.1. Importing * From a Package](https://docs.python.org/3/tutorial/modules.html#importing-from-a-package)
      * [6.4.2. Intra-package References](https://docs.python.org/3/tutorial/modules.html#intra-package-references)
      * [6.4.3. Packages in Multiple Directories](https://docs.python.org/3/tutorial/modules.html#packages-in-multiple-directories)


#### Previous topic
[5. Data Structures](https://docs.python.org/3/tutorial/datastructures.html "previous chapter")
#### Next topic
[7. Input and Output](https://docs.python.org/3/tutorial/inputoutput.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/tutorial/modules.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/tutorial/inputoutput.html "7. Input and Output") |
  * [previous](https://docs.python.org/3/tutorial/datastructures.html "5. Data Structures") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Tutorial](https://docs.python.org/3/tutorial/index.html) »
  * [6. Modules](https://docs.python.org/3/tutorial/modules.html)
  * | 
  * Theme  Auto Light Dark |


# 6. Modules[¶](https://docs.python.org/3/tutorial/modules.html#modules "Link to this heading")
If you quit from the Python interpreter and enter it again, the definitions you have made (functions and variables) are lost. Therefore, if you want to write a somewhat longer program, you are better off using a text editor to prepare the input for the interpreter and running it with that file as input instead. This is known as creating a _script_. As your program gets longer, you may want to split it into several files for easier maintenance. You may also want to use a handy function that you’ve written in several programs without copying its definition into each program.
To support this, Python has a way to put definitions in a file and use them in a script or in an interactive instance of the interpreter. Such a file is called a _module_ ; definitions from a module can be _imported_ into other modules or into the _main_ module (the collection of variables that you have access to in a script executed at the top level and in calculator mode).
A module is a file containing Python definitions and statements. The file name is the module name with the suffix `.py` appended. Within a module, the module’s name (as a string) is available as the value of the global variable `__name__`. For instance, use your favorite text editor to create a file called `fibo.py` in the current directory with the following contents:
```
# Fibonacci numbers module
deffib(n):  # write Fibonacci series up to n
  a, b = 0, 1
  while a < n:
    print(a, end=' ')
    a, b = b, a+b
  print()
deffib2(n):  # return Fibonacci series up to n
  result = []
  a, b = 0, 1
  while a < n:
    result.append(a)
    a, b = b, a+b
  return result

```

Now enter the Python interpreter and import this module with the following command:
>>>```
>>> importfibo