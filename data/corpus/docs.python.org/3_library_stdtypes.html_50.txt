Title: Dictionary Methods in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: The `popitem()` method removes and returns a key-value pair from a dictionary in LIFO order, raising a `KeyError` if the dictionary is empty. This method's behavior was changed in version 3.7 to guarantee LIFO order. Additionally, the `reversed(d)` function returns a reverse iterator over the keys of the dictionary, introduced in version 3.8.
---

popitem()[¶](https://docs.python.org/3/library/stdtypes.html#dict.popitem "Link to this definition")
    
Remove and return a `(key, value)` pair from the dictionary. Pairs are returned in LIFO order.
[`popitem()`](https://docs.python.org/3/library/stdtypes.html#dict.popitem "dict.popitem") is useful to destructively iterate over a dictionary, as often used in set algorithms. If the dictionary is empty, calling [`popitem()`](https://docs.python.org/3/library/stdtypes.html#dict.popitem "dict.popitem") raises a [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError").
Changed in version 3.7: LIFO order is now guaranteed. In prior versions, [`popitem()`](https://docs.python.org/3/library/stdtypes.html#dict.popitem "dict.popitem") would return an arbitrary key/value pair. 

reversed(d)
    
Return a reverse iterator over the keys of the dictionary. This is a shortcut for `reversed(d.keys())`.
Added in version 3.8. 

setdefault(_key_ , _default =None_, _/_)[¶](https://docs.python.org/3/library/stdtypes.html#dict.setdefault "Link to this definition")
    
If _key_ is in the dictionary, return its value. If not, insert _key_ with a value of _default_ and return _default_. _default_ defaults to `None`. 

update([_other_])[¶](https://docs.python.org/3/library/stdtypes.html#dict.update "Link to this definition")
    
Update the dictionary with the key/value pairs from _other_ , overwriting existing keys. Return `None`.
[`update()`](https://docs.python.org/3/library/stdtypes.html#dict.update "dict.update") accepts either another object with a `keys()` method (in which case [`__getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__getitem__ "object.__getitem__") is called with every key returned from the method) or an iterable of key/value pairs (as tuples or other iterables of length two). If keyword arguments are specified, the dictionary is then updated with those key/value pairs: `d.update(red=1, blue=2)`. 

values()[¶](https://docs.python.org/3/library/stdtypes.html#dict.values "Link to this definition")
    
Return a new view of the dictionary’s values. See the [documentation of view objects](https://docs.python.org/3/library/stdtypes.html#dict-views).
An equality comparison between one `dict.values()` view and another will always return `False`. This also applies when comparing `dict.values()` to itself:
>>>```
>>> d = {'a': 1}
>>> d.values() == d.values()
False

```


d | other
    
Create a new dictionary with the merged keys and values of _d_ and _other_ , which must both be dictionaries. The values of _other_ take priority when _d_ and _other_ share keys.
Added in version 3.9. 

d |= other
    
Update the dictionary _d_ with keys and values from _other_ , which may be either a [mapping](https://docs.python.org/3/glossary.html#term-mapping) or an [iterable](https://docs.python.org/3/glossary.html#term-iterable) of key/value pairs. The values of _other_ take priority when _d_ and _other_ share keys.
Added in version 3.9.
Dictionaries compare equal if and only if they have the same `(key, value)` pairs (regardless of ordering). Order comparisons (‘<’, ‘<=’, ‘>=’, ‘>’) raise [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError").
Dictionaries preserve insertion order. Note that updating a key does not affect the order. Keys added after deletion are inserted at the end.
>>>```
>>> d = {"one": 1, "two": 2, "three": 3, "four": 4}
>>> d
{'one': 1, 'two': 2, 'three': 3, 'four': 4}
>>> list(d)
['one', 'two', 'three', 'four']
>>> list(d.values())
[1, 2, 3, 4]
>>> d["one"] = 42
>>> d
{'one': 42, 'two': 2, 'three': 3, 'four': 4}
>>> del d["two"]
>>> d["two"] = None
>>> d
{'one': 42, 'three': 3, 'four': 4, 'two': None}

```

Changed in version 3.7: Dictionary order is guaranteed to be insertion order. This behavior was an implementation detail of CPython from 3.6.
Dictionaries and dictionary views are reversible.
>>>```
>>> d = {"one": 1, "two": 2, "three": 3, "four": 4}
>>> d
{'one': 1, 'two': 2, 'three': 3, 'four': 4}
>>> list(reversed(d))
['four', 'three', 'two', 'one']
>>> list(reversed(d.values()))
[4, 3, 2, 1]
>>> list(reversed(d.items()))
[('four', 4), ('three', 3), ('two', 2), ('one', 1)]