Title: Python 3.13.0 Beta 3 Release Notes
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: The release notes for Python 3.13.0 beta 3, dated June 27, 2024, highlight updates in Core and Builtins, including enhancements to `Py_Finalize()` and `Py_FinalizeEx()` to always run with the main interpreter, automatic cleanup of subinterpreters during runtime finalization, and maintenance of type versioning invariants.
---

## Python 3.13.0 beta 3[¶](https://docs.python.org/3/whatsnew/changelog.html#python-3-13-0-beta-3 "Link to this heading")
_Release date: 2024-06-27_
### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id62 "Link to this heading")
  * [gh-120838](https://github.com/python/cpython/issues/120838): [`Py_Finalize()`](https://docs.python.org/3/c-api/init.html#c.Py_Finalize "Py_Finalize") and [`Py_FinalizeEx()`](https://docs.python.org/3/c-api/init.html#c.Py_FinalizeEx "Py_FinalizeEx") now always run with the main interpreter active.
  * [gh-113433](https://github.com/python/cpython/issues/113433): Subinterpreters now get cleaned up automatically during runtime finalization.
  * [gh-119462](https://github.com/python/cpython/issues/119462): Make sure that invariants of type versioning are maintained: * Superclasses always have their version number assigned before subclasses * The version tag is always zero if the tag is not valid. * The version tag is always non-zero if the tag is valid.
  * [gh-120437](https://github.com/python/cpython/issues/120437): Fix `_CHECK_STACK_SPACE` optimization problems introduced in [gh-118322](https://github.com/python/cpython/issues/118322).
  * [gh-120722](https://github.com/python/cpython/issues/120722): Correctly set the bytecode position on return instructions within lambdas. Patch by Jelle Zijlstra.
  * [gh-120367](https://github.com/python/cpython/issues/120367): Fix bug where compiler creates a redundant jump during pseudo-op replacement. Can only happen with a synthetic AST that has a try on the same line as the instruction following the exception handler.
  * [gh-113993](https://github.com/python/cpython/issues/113993): Strings interned with [`sys.intern()`](https://docs.python.org/3/library/sys.html#sys.intern "sys.intern") are again garbage-collected when no longer used, as per the documentation. Strings interned with the C function [`PyUnicode_InternInPlace()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_InternInPlace "PyUnicode_InternInPlace") are still immortal. Internals of the string interning mechanism have been changed. This may affect performance and identities of [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") objects.
  * [gh-120384](https://github.com/python/cpython/issues/120384): Fix an array out of bounds crash in `list_ass_subscript`, which could be invoked via some specificly tailored input: including concurrent modification of a list object, where one thread assigns a slice and another clears it.
  * [gh-120367](https://github.com/python/cpython/issues/120367): Fix crash in compiler on code with redundant NOPs and JUMPs which show up after exception handlers are moved to the end of the code.
  * [gh-120380](https://github.com/python/cpython/issues/120380): Fix Python implementation of [`pickle.Pickler`](https://docs.python.org/3/library/pickle.html#pickle.Pickler "pickle.Pickler") for [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") and [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") objects when using protocol version 5. Patch by Bénédikt Tran.
  * [gh-120400](https://github.com/python/cpython/issues/120400): Support Linux perf profiler to see Python calls on RISC-V architecture.
  * [gh-120221](https://github.com/python/cpython/issues/120221): Deliver real signals on Ctrl-C and Ctrl-Z in the new REPL. Patch by Pablo Galindo
  * [gh-120346](https://github.com/python/cpython/issues/120346): Respect [`PYTHON_BASIC_REPL`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHON_BASIC_REPL) when running in interative inspect mode (`python -i`). Patch by Pablo Galindo
  * [gh-93691](https://github.com/python/cpython/issues/93691): Fix source locations of instructions generated for the iterator of a for statement.
  * [gh-120198](https://github.com/python/cpython/issues/120198): Fix a crash when multiple threads read and write to the same `__class__` of an object concurrently.
  * [gh-120298](https://github.com/python/cpython/issues/120298): Fix use-after free in `list_richcompare_impl` which can be invoked via some specificly tailored evil input.
  * [gh-119666](https://github.com/python/cpython/issues/119666): Fix a compiler crash in the case where two comprehensions in class scope both reference `__class__`.
  * [gh-120225](https://github.com/python/cpython/issues/120225): Fix crash in compiler on empty block at end of exception handler.
  * [gh-119933](https://github.com/python/cpython/issues/119933): Improve [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") messages for invalid expressions in a type parameters bound, a type parameter constraint tuple or a default type parameter. Patch by Bénédikt Tran.
  * [bpo-24766](https://bugs.python.org/issue?@action=redirect&bpo=24766): Fix handling of `doc` argument to subclasses of `property`.