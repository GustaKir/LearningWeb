Title: Library Improvements and Fixes
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This document chunk outlines recent changes to Python's libraries, including the escaping of characters in `http.server.BaseHTTPRequestHandler.log_message`, the addition of a `frozen_default` parameter to `typing.dataclass_transform()`, and a fix to `asyncio.Server.wait_closed()` to ensure it behaves as documented.
---

### Library[¶](https://docs.python.org/3/whatsnew/changelog.html#id188 "Link to this heading")
  * [gh-100001](https://github.com/python/cpython/issues/100001): Also escape s in the http.server BaseHTTPRequestHandler.log_message so that it is technically possible to parse the line and reconstruct what the original data was. Without this a xHH is ambiguous as to if it is a hex replacement we put in or the characters r”x” came through in the original request line.
  * [gh-99957](https://github.com/python/cpython/issues/99957): Add `frozen_default` parameter to [`typing.dataclass_transform()`](https://docs.python.org/3/library/typing.html#typing.dataclass_transform "typing.dataclass_transform").
  * [gh-79033](https://github.com/python/cpython/issues/79033): Fix [`asyncio.Server.wait_closed()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Server.wait_closed "asyncio.Server.wait_closed") to actually do what the docs promise – wait for all existing connections to complete, after closing the server.
  * [gh-51524](https://github.com/python/cpython/issues/51524): Fix bug when calling trace.CoverageResults with valid infile.
  * [gh-99645](https://github.com/python/cpython/issues/99645): Fix a bug in handling class cleanups in [`unittest.TestCase`](https://docs.python.org/3/library/unittest.html#unittest.TestCase "unittest.TestCase"). Now `addClassCleanup()` uses separate lists for different `TestCase` subclasses, and `doClassCleanups()` only cleans up the particular class.
  * [gh-99508](https://github.com/python/cpython/issues/99508): Fix `TypeError` in `Lib/importlib/_bootstrap_external.py` while calling `_imp.source_hash()`.
  * [gh-66285](https://github.com/python/cpython/issues/66285): Fix [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O.") to not share event loop and signal wakeupfd in forked processes. Patch by Kumar Aditya.
  * [gh-97001](https://github.com/python/cpython/issues/97001): Release the GIL when calling termios APIs to avoid blocking threads.
  * [gh-92647](https://github.com/python/cpython/issues/92647): Use final status of an enum to determine lookup or creation branch of functional API.
  * [gh-99388](https://github.com/python/cpython/issues/99388): Add _loop_factory_ parameter to [`asyncio.run()`](https://docs.python.org/3/library/asyncio-runner.html#asyncio.run "asyncio.run") to allow specifying a custom event loop factory. Patch by Kumar Aditya.
  * [gh-99341](https://github.com/python/cpython/issues/99341): Fix [`ast.increment_lineno()`](https://docs.python.org/3/library/ast.html#ast.increment_lineno "ast.increment_lineno") to also cover `ast.TypeIgnore` when changing line numbers.
  * [gh-99382](https://github.com/python/cpython/issues/99382): Check the number of arguments in substitution in user generics containing a [`TypeVarTuple`](https://docs.python.org/3/library/typing.html#typing.TypeVarTuple "typing.TypeVarTuple") and one or more [`TypeVar`](https://docs.python.org/3/library/typing.html#typing.TypeVar "typing.TypeVar").
  * [gh-99379](https://github.com/python/cpython/issues/99379): Fix substitution of [`ParamSpec`](https://docs.python.org/3/library/typing.html#typing.ParamSpec "typing.ParamSpec") followed by [`TypeVarTuple`](https://docs.python.org/3/library/typing.html#typing.TypeVarTuple "typing.TypeVarTuple") in generic aliases.
  * [gh-99344](https://github.com/python/cpython/issues/99344): Fix substitution of [`TypeVarTuple`](https://docs.python.org/3/library/typing.html#typing.TypeVarTuple "typing.TypeVarTuple") and [`ParamSpec`](https://docs.python.org/3/library/typing.html#typing.ParamSpec "typing.ParamSpec") together in user generics.
  * [gh-99284](https://github.com/python/cpython/issues/99284): Remove `_use_broken_old_ctypes_structure_semantics_` old untested and undocumented hack from [`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "ctypes: A foreign function library for Python.").
  * [gh-99201](https://github.com/python/cpython/issues/99201): Fix [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError "IndexError") when initializing the config variables on Windows if `HAVE_DYNAMIC_LOADING` is not set.
  * [gh-99240](https://github.com/python/cpython/issues/99240): Fix double-free bug in Argument Clinic `str_converter` by extracting memory clean up to a new `post_parsing` section.
  * [gh-64490](https://github.com/python/cpython/issues/64490): Fix refcount error when arguments are packed to tuple in Argument Clinic.
  * [gh-99029](https://github.com/python/cpython/issues/99029): [`pathlib.PurePath.relative_to()`](https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.relative_to "pathlib.PurePath.relative_to") now treats naked Windows drive paths as relative. This brings its behaviour in line with other parts of pathlib.
  * [gh-98253](https://github.com/python/cpython/issues/98253): The implementation of the typing module is now more resil