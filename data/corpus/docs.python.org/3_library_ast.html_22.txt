Title: NodeTransformer Class in Python's AST Module
URL: https://docs.python.org/3/library/ast.html
Summary: The `NodeTransformer` class is a subclass of `NodeVisitor` that traverses the abstract syntax tree (AST) and modifies nodes based on the return values of visitor methods. It can replace or remove nodes, with the possibility of returning the original node to indicate no change. An example transformer is provided to demonstrate rewriting name lookups.
---

_class_ ast.NodeTransformer[¶](https://docs.python.org/3/library/ast.html#ast.NodeTransformer "Link to this definition")
    
A [`NodeVisitor`](https://docs.python.org/3/library/ast.html#ast.NodeVisitor "ast.NodeVisitor") subclass that walks the abstract syntax tree and allows modification of nodes.
The [`NodeTransformer`](https://docs.python.org/3/library/ast.html#ast.NodeTransformer "ast.NodeTransformer") will walk the AST and use the return value of the visitor methods to replace or remove the old node. If the return value of the visitor method is `None`, the node will be removed from its location, otherwise it is replaced with the return value. The return value may be the original node in which case no replacement takes place.
Here is an example transformer that rewrites all occurrences of name lookups (`foo`) to `data['foo']`:
```
classRewriteName(NodeTransformer):
  defvisit_Name(self, node):
    return Subscript(
      value=Name(id='data', ctx=Load()),
      slice=Constant(value=node.id),
      ctx=node.ctx
    )

```

Keep in mind that if the node you’re operating on has child nodes you must either transform the child nodes yourself or call the [`generic_visit()`](https://docs.python.org/3/library/ast.html#ast.NodeVisitor.generic_visit "ast.NodeVisitor.generic_visit") method for the node first.
For nodes that were part of a collection of statements (that applies to all statement nodes), the visitor may also return a list of nodes rather than just a single node.
If [`NodeTransformer`](https://docs.python.org/3/library/ast.html#ast.NodeTransformer "ast.NodeTransformer") introduces new nodes (that weren’t part of original tree) without giving them location information (such as [`lineno`](https://docs.python.org/3/library/ast.html#ast.AST.lineno "ast.AST.lineno")), [`fix_missing_locations()`](https://docs.python.org/3/library/ast.html#ast.fix_missing_locations "ast.fix_missing_locations") should be called with the new sub-tree to recalculate the location information:
```
tree = ast.parse('foo', mode='eval')
new_tree = fix_missing_locations(RewriteName().visit(tree))

```

Usually you use the transformer like this:
```
node = YourTransformer().visit(node)

```


ast.dump(_node_ , _annotate_fields =True_, _include_attributes =False_, _*_ , _indent =None_, _show_empty =False_)[¶](https://docs.python.org/3/library/ast.html#ast.dump "Link to this definition")
    
Return a formatted dump of the tree in _node_. This is mainly useful for debugging purposes. If _annotate_fields_ is true (by default), the returned string will show the names and the values for fields. If _annotate_fields_ is false, the result string will be more compact by omitting unambiguous field names. Attributes such as line numbers and column offsets are not dumped by default. If this is wanted, _include_attributes_ can be set to true.
If _indent_ is a non-negative integer or string, then the tree will be pretty-printed with that indent level. An indent level of 0, negative, or `""` will only insert newlines. `None` (the default) selects the single line representation. Using a positive integer indent indents that many spaces per level. If _indent_ is a string (such as `"\t"`), that string is used to indent each level.
If _show_empty_ is `False` (the default), empty lists and fields that are `None` will be omitted from the output.
Changed in version 3.9: Added the _indent_ option.
Changed in version 3.13: Added the _show_empty_ option.
>>>```
>>> print(ast.dump(ast.parse("""\
... async def f():
...   await other_func()
... """), indent=4, show_empty=True))
Module(
  body=[
    AsyncFunctionDef(
      name='f',
      args=arguments(
        posonlyargs=[],
        args=[],
        kwonlyargs=[],
        kw_defaults=[],
        defaults=[]),
      body=[
        Expr(
          value=Await(
            value=Call(
              func=Name(id='other_func', ctx=Load()),
              args=[],
              keywords=[])))],
      decorator_list=[],
      type_params=[])],
  type_ignores=[])