Title: Class Instances in Python
URL: https://docs.python.org/3/reference/datamodel.html
Summary: This section discusses the creation of class instances in Python and the attribute resolution process, detailing how instance attributes are searched in the instance's namespace and subsequently in class attributes. It also notes the transformation of function objects into instance method objects and mentions static and class methods.
---

```

### 3.2.11. Class instances[¶](https://docs.python.org/3/reference/datamodel.html#id4 "Link to this heading")
A class instance is created by calling a class object (see above). A class instance has a namespace implemented as a dictionary which is the first place in which attribute references are searched. When an attribute is not found there, and the instance’s class has an attribute by that name, the search continues with the class attributes. If a class attribute is found that is a user-defined function object, it is transformed into an instance method object whose [`__self__`](https://docs.python.org/3/reference/datamodel.html#method.__self__ "method.__self__") attribute is the instance. Static method and class method objects are also transformed; see above under “Classes”. See section [Implementing Descriptors](https://docs.python.org/3/reference/datamodel.html#descriptors) for another way in which attributes of a class retrieved via its instances may differ from the objects actually stored in the class’s [`__dict__`](https://docs.python.org/3/reference/datamodel.html#object.__dict__ "object.__dict__"). If no class attribute is found, and the object’s class has a [`__getattr__()`](https://docs.python.org/3/reference/datamodel.html#object.__getattr__ "object.__getattr__") method, that is called to satisfy the lookup.
Attribute assignments and deletions update the instance’s dictionary, never a class’s dictionary. If the class has a [`__setattr__()`](https://docs.python.org/3/reference/datamodel.html#object.__setattr__ "object.__setattr__") or [`__delattr__()`](https://docs.python.org/3/reference/datamodel.html#object.__delattr__ "object.__delattr__") method, this is called instead of updating the instance dictionary directly.
Class instances can pretend to be numbers, sequences, or mappings if they have methods with certain special names. See section [Special method names](https://docs.python.org/3/reference/datamodel.html#specialnames).
#### 3.2.11.1. Special attributes[¶](https://docs.python.org/3/reference/datamodel.html#id5 "Link to this heading") 

object.__class__[¶](https://docs.python.org/3/reference/datamodel.html#object.__class__ "Link to this definition")
    
The class to which a class instance belongs. 

object.__dict__[¶](https://docs.python.org/3/reference/datamodel.html#object.__dict__ "Link to this definition")
    
A dictionary or other mapping object used to store an object’s (writable) attributes. Not all instances have a `__dict__` attribute; see the section on [__slots__](https://docs.python.org/3/reference/datamodel.html#slots) for more details.
### 3.2.12. I/O objects (also known as file objects)[¶](https://docs.python.org/3/reference/datamodel.html#i-o-objects-also-known-as-file-objects "Link to this heading")
A [file object](https://docs.python.org/3/glossary.html#term-file-object) represents an open file. Various shortcuts are available to create file objects: the [`open()`](https://docs.python.org/3/library/functions.html#open "open") built-in function, and also [`os.popen()`](https://docs.python.org/3/library/os.html#os.popen "os.popen"), [`os.fdopen()`](https://docs.python.org/3/library/os.html#os.fdopen "os.fdopen"), and the [`makefile()`](https://docs.python.org/3/library/socket.html#socket.socket.makefile "socket.socket.makefile") method of socket objects (and perhaps by other functions or methods provided by extension modules).
The objects `sys.stdin`, `sys.stdout` and `sys.stderr` are initialized to file objects corresponding to the interpreter’s standard input, output and error streams; they are all open in text mode and therefore follow the interface defined by the [`io.TextIOBase`](https://docs.python.org/3/library/io.html#io.TextIOBase "io.TextIOBase") abstract class.
### 3.2.13. Internal types[¶](https://docs.python.org/3/reference/datamodel.html#internal-types "Link to this heading")
A few types used internally by the interpreter are exposed to the user. Their definitions may change with future versions of the interpreter, but they are mentioned here for completeness.
#### 3.2.13.1. Code objects[¶](https://docs.python.org/3/reference/datamodel.html#code-objects "Link to this heading")
Code objects represent _byte-compiled_ executable Python code, or [bytecode](https://docs.python.org/3/glossary.html#term-bytecode). The difference between a code object and a function object is that the function object contains an explicit reference to the function’s globals (the module in which it was defined), while a code object contains no context; also the default argument values are stored in the function object, not in the code object (because they represent values calculated at run-time). Unlike function objects, code objects are immutable and contain no references (directly or indirectly) to mutable objects.
##### 3.2.13.1.1. Special read-only attributes[¶](https://docs.python.org/3/reference/datamodel.html#index-60 "Link to this heading")