Title: os.lstat() Function
URL: https://docs.python.org/3/library/os.html
Summary: The os.lstat() function performs an lstat() system call on a specified path, returning a stat_result object without following symbolic links. It serves as an alias for stat() on platforms that do not support symbolic links. Introduced enhancements in versions 3.2 and 3.3 include improved compatibility with Windows and support for directory descriptors.
---

os.lstat(_path_ , _*_ , _dir_fd =None_)[¶](https://docs.python.org/3/library/os.html#os.lstat "Link to this definition")
    
Perform the equivalent of an `lstat()` system call on the given path. Similar to [`stat()`](https://docs.python.org/3/library/os.html#os.stat "os.stat"), but does not follow symbolic links. Return a [`stat_result`](https://docs.python.org/3/library/os.html#os.stat_result "os.stat_result") object.
On platforms that do not support symbolic links, this is an alias for [`stat()`](https://docs.python.org/3/library/os.html#os.stat "os.stat").
As of Python 3.3, this is equivalent to `os.stat(path, dir_fd=dir_fd, follow_symlinks=False)`.
This function can also support [paths relative to directory descriptors](https://docs.python.org/3/library/os.html#dir-fd).
See also
The [`stat()`](https://docs.python.org/3/library/os.html#os.stat "os.stat") function.
Changed in version 3.2: Added support for Windows 6.0 (Vista) symbolic links.
Changed in version 3.3: Added the _dir_fd_ parameter.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object).
Changed in version 3.8: On Windows, now opens reparse points that represent another path (name surrogates), including symbolic links and directory junctions. Other kinds of reparse points are resolved by the operating system as for [`stat()`](https://docs.python.org/3/library/os.html#os.stat "os.stat"). 

os.mkdir(_path_ , _mode =0o777_, _*_ , _dir_fd =None_)[¶](https://docs.python.org/3/library/os.html#os.mkdir "Link to this definition")
    
Create a directory named _path_ with numeric mode _mode_.
If the directory already exists, [`FileExistsError`](https://docs.python.org/3/library/exceptions.html#FileExistsError "FileExistsError") is raised. If a parent directory in the path does not exist, [`FileNotFoundError`](https://docs.python.org/3/library/exceptions.html#FileNotFoundError "FileNotFoundError") is raised.
On some systems, _mode_ is ignored. Where it is used, the current umask value is first masked out. If bits other than the last 9 (i.e. the last 3 digits of the octal representation of the _mode_) are set, their meaning is platform-dependent. On some platforms, they are ignored and you should call [`chmod()`](https://docs.python.org/3/library/os.html#os.chmod "os.chmod") explicitly to set them.
On Windows, a _mode_ of `0o700` is specifically handled to apply access control to the new directory such that only the current user and administrators have access. Other values of _mode_ are ignored.
This function can also support [paths relative to directory descriptors](https://docs.python.org/3/library/os.html#dir-fd).
It is also possible to create temporary directories; see the [`tempfile`](https://docs.python.org/3/library/tempfile.html#module-tempfile "tempfile: Generate temporary files and directories.") module’s [`tempfile.mkdtemp()`](https://docs.python.org/3/library/tempfile.html#tempfile.mkdtemp "tempfile.mkdtemp") function.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.mkdir` with arguments `path`, `mode`, `dir_fd`.
Changed in version 3.3: Added the _dir_fd_ parameter.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object).
Changed in version 3.13: Windows now handles a _mode_ of `0o700`.