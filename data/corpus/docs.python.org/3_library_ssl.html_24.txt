Title: SSLContext.wrap_socket Method
URL: https://docs.python.org/3/library/ssl.html
Summary: The `wrap_socket` method of `SSLContext` is used to wrap an existing Python socket, returning an instance of `sslsocket_class` (default is `SSLSocket`). It associates the socket with the SSL context and its certificates. The method requires the input socket to be of type `SOCK_STREAM` and has a parameter `server_side` to specify if the socket operates as a server or client.
---

SSLContext.wrap_socket(_sock_ , _server_side =False_, _do_handshake_on_connect =True_, _suppress_ragged_eofs =True_, _server_hostname =None_, _session =None_)[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_socket "Link to this definition")
    
Wrap an existing Python socket _sock_ and return an instance of [`SSLContext.sslsocket_class`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.sslsocket_class "ssl.SSLContext.sslsocket_class") (default [`SSLSocket`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket "ssl.SSLSocket")). The returned SSL socket is tied to the context, its settings and certificates. _sock_ must be a [`SOCK_STREAM`](https://docs.python.org/3/library/socket.html#socket.SOCK_STREAM "socket.SOCK_STREAM") socket; other socket types are unsupported.
The parameter `server_side` is a boolean which identifies whether server-side or client-side behavior is desired from this socket.
For client-side sockets, the context construction is lazy; if the underlying socket isn’t connected yet, the context construction will be performed after `connect()` is called on the socket. For server-side sockets, if the socket has no remote peer, it is assumed to be a listening socket, and the server-side SSL wrapping is automatically performed on client connections accepted via the `accept()` method. The method may raise [`SSLError`](https://docs.python.org/3/library/ssl.html#ssl.SSLError "ssl.SSLError").
On client connections, the optional parameter _server_hostname_ specifies the hostname of the service which we are connecting to. This allows a single server to host multiple SSL-based services with distinct certificates, quite similarly to HTTP virtual hosts. Specifying _server_hostname_ will raise a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if _server_side_ is true.
The parameter `do_handshake_on_connect` specifies whether to do the SSL handshake automatically after doing a `socket.connect()`, or whether the application program will call it explicitly, by invoking the [`SSLSocket.do_handshake()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.do_handshake "ssl.SSLSocket.do_handshake") method. Calling [`SSLSocket.do_handshake()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.do_handshake "ssl.SSLSocket.do_handshake") explicitly gives the program control over the blocking behavior of the socket I/O involved in the handshake.
The parameter `suppress_ragged_eofs` specifies how the `SSLSocket.recv()` method should signal unexpected EOF from the other end of the connection. If specified as [`True`](https://docs.python.org/3/library/constants.html#True "True") (the default), it returns a normal EOF (an empty bytes object) in response to unexpected EOF errors raised from the underlying socket; if [`False`](https://docs.python.org/3/library/constants.html#False "False"), it will raise the exceptions back to the caller.
_session_ , see [`session`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.session "ssl.SSLSocket.session").
To wrap an [`SSLSocket`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket "ssl.SSLSocket") in another [`SSLSocket`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket "ssl.SSLSocket"), use [`SSLContext.wrap_bio()`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_bio "ssl.SSLContext.wrap_bio").
Changed in version 3.5: Always allow a server_hostname to be passed, even if OpenSSL does not have SNI.
Changed in version 3.6: _session_ argument was added.
Changed in version 3.7: The method returns an instance of [`SSLContext.sslsocket_class`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.sslsocket_class "ssl.SSLContext.sslsocket_class") instead of hard-coded [`SSLSocket`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket "ssl.SSLSocket"). 

SSLContext.sslsocket_class[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.sslsocket_class "Link to this definition")
    
The return type of [`SSLContext.wrap_socket()`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_socket "ssl.SSLContext.wrap_socket"), defaults to [`SSLSocket`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket "ssl.SSLSocket"). The attribute can be overridden on instance of class in order to return a custom subclass of [`SSLSocket`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket "ssl.SSLSocket").
Added in version 3.7.