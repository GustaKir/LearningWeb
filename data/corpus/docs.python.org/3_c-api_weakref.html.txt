Title: Weak Reference Objects
URL: https://docs.python.org/3/c-api/weakref.html
Summary: This section introduces the concept of weak references in Python, which allow the creation of references to objects without preventing them from being garbage collected. It outlines the use cases, benefits, and the interaction of weak references with Python's memory management.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
#### Previous topic
[MemoryView objects](https://docs.python.org/3/c-api/memoryview.html "previous chapter")
#### Next topic
[Capsules](https://docs.python.org/3/c-api/capsule.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/c-api/weakref.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/c-api/capsule.html "Capsules") |
  * [previous](https://docs.python.org/3/c-api/memoryview.html "MemoryView objects") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [Python/C API Reference Manual](https://docs.python.org/3/c-api/index.html) »
  * [Concrete Objects Layer](https://docs.python.org/3/c-api/concrete.html) »
  * [Weak Reference Objects](https://docs.python.org/3/c-api/weakref.html)
  * | 
  * Theme  Auto Light Dark |


# Weak Reference Objects[¶](https://docs.python.org/3/c-api/weakref.html#weak-reference-objects "Link to this heading")
Python supports _weak references_ as first-class objects. There are two specific object types which directly implement weak references. The first is a simple reference object, and the second acts as a proxy for the original object as much as it can. 

intPyWeakref_Check([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*ob)[¶](https://docs.python.org/3/c-api/weakref.html#c.PyWeakref_Check "Link to this definition")
    
Return non-zero if _ob_ is either a reference or proxy object. This function always succeeds. 

intPyWeakref_CheckRef([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*ob)[¶](https://docs.python.org/3/c-api/weakref.html#c.PyWeakref_CheckRef "Link to this definition")
    
Return non-zero if _ob_ is a reference object. This function always succeeds. 

intPyWeakref_CheckProxy([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*ob)[¶](https://docs.python.org/3/c-api/weakref.html#c.PyWeakref_CheckProxy "Link to this definition")
    
Return non-zero if _ob_ is a proxy object. This function always succeeds. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyWeakref_NewRef([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*ob, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*callback)[¶](https://docs.python.org/3/c-api/weakref.html#c.PyWeakref_NewRef "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return a weak reference object for the object _ob_. This will always return a new reference, but is not guaranteed to create a new object; an existing reference object may be returned. The second parameter, _callback_ , can be a callable object that receives notification when _ob_ is garbage collected; it should accept a single parameter, which will be the weak reference object itself. _callback_ may also be `None` or `NULL`. If _ob_ is not a weakly referenceable object, or if _callback_ is not callable, `None`, or `NULL`, this will return `NULL` and raise [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError").