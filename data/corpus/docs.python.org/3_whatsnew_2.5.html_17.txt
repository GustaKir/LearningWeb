Title: Python 2.5 Release Notes
URL: https://docs.python.org/3/whatsnew/2.5.html
Summary: Highlights of Python 2.5 include improved `SequenceMatcher.get_matching_blocks()` method for minimal matching block returns and the new `SKIP` option in the `doctest` module to prevent execution of specific examples. Additionally, an encoding parameter was added to the `testfile()` function and `DocFileSuite` class for better handling of non-ASCII characters in tests.
---

```

  * The `SequenceMatcher.get_matching_blocks()` method in the [`difflib`](https://docs.python.org/3/library/difflib.html#module-difflib "difflib: Helpers for computing differences between objects.") module now guarantees to return a minimal list of blocks describing matching subsequences. Previously, the algorithm would occasionally break a block of matching elements into two list entries. (Enhancement by Tim Peters.)
  * The [`doctest`](https://docs.python.org/3/library/doctest.html#module-doctest "doctest: Test pieces of code within docstrings.") module gained a `SKIP` option that keeps an example from being executed at all. This is intended for code snippets that are usage examples intended for the reader and aren’t actually test cases.
An _encoding_ parameter was added to the `testfile()` function and the `DocFileSuite` class to specify the file’s encoding. This makes it easier to use non-ASCII characters in tests contained within a docstring. (Contributed by Bjorn Tillenius.)
  * The [`email`](https://docs.python.org/3/library/email.html#module-email "email: Package supporting the parsing, manipulating, and generating email messages.") package has been updated to version 4.0. (Contributed by Barry Warsaw.)
  * The [`fileinput`](https://docs.python.org/3/library/fileinput.html#module-fileinput "fileinput: Loop over standard input or a list of files.") module was made more flexible. Unicode filenames are now supported, and a _mode_ parameter that defaults to `"r"` was added to the [`input()`](https://docs.python.org/3/library/functions.html#input "input") function to allow opening files in binary or [universal newlines](https://docs.python.org/3/glossary.html#term-universal-newlines) mode. Another new parameter, _openhook_ , lets you use a function other than [`open()`](https://docs.python.org/3/library/functions.html#open "open") to open the input files. Once you’re iterating over the set of files, the `FileInput` object’s new [`fileno()`](https://docs.python.org/3/library/fileinput.html#fileinput.fileno "fileinput.fileno") returns the file descriptor for the currently opened file. (Contributed by Georg Brandl.)
  * In the [`gc`](https://docs.python.org/3/library/gc.html#module-gc "gc: Interface to the cycle-detecting garbage collector.") module, the new `get_count()` function returns a 3-tuple containing the current collection counts for the three GC generations. This is accounting information for the garbage collector; when these counts reach a specified threshold, a garbage collection sweep will be made. The existing [`gc.collect()`](https://docs.python.org/3/library/gc.html#gc.collect "gc.collect") function now takes an optional _generation_ argument of 0, 1, or 2 to specify which generation to collect. (Contributed by Barry Warsaw.)
  * The `nsmallest()` and `nlargest()` functions in the [`heapq`](https://docs.python.org/3/library/heapq.html#module-heapq "heapq: Heap queue algorithm \(a.k.a. priority queue\).") module now support a `key` keyword parameter similar to the one provided by the [`min()`](https://docs.python.org/3/library/functions.html#min "min")/[`max()`](https://docs.python.org/3/library/functions.html#max "max") functions and the `sort()` methods. For example:
>>>```
>>> importheapq
>>> L = ["short", 'medium', 'longest', 'longer still']
>>> heapq.nsmallest(2, L) # Return two lowest elements, lexicographically
['longer still', 'longest']
>>> heapq.nsmallest(2, L, key=len)  # Return two shortest elements
['short', 'medium']

```

(Contributed by Raymond Hettinger.)
  * The [`itertools.islice()`](https://docs.python.org/3/library/itertools.html#itertools.islice "itertools.islice") function now accepts `None` for the start and step arguments. This makes it more compatible with the attributes of slice objects, so that you can now write the following:
```
s = slice(5)   # Create slice object
itertools.islice(iterable, s.start, s.stop, s.step)