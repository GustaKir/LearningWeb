Title: TarFile Objects in Python
URL: https://docs.python.org/3/library/tarfile.html
Summary: This section provides documentation about the `TarFile` class in Python's `tarfile` module, which is used for reading and writing tar archive files. It also includes links to related modules like `zipfile` and `shutil`, and references the GNU tar manual for basic tar format.
---

Module [`zipfile`](https://docs.python.org/3/library/zipfile.html#module-zipfile "zipfile: Read and write ZIP-format archive files.")
    
Documentation of the [`zipfile`](https://docs.python.org/3/library/zipfile.html#module-zipfile "zipfile: Read and write ZIP-format archive files.") standard module. 

[Archiving operations](https://docs.python.org/3/library/shutil.html#archiving-operations)
    
Documentation of the higher-level archiving facilities provided by the standard [`shutil`](https://docs.python.org/3/library/shutil.html#module-shutil "shutil: High-level file operations, including copying.") module. 

[GNU tar manual, Basic Tar Format](https://www.gnu.org/software/tar/manual/html_node/Standard.html)
    
Documentation for tar archive files, including GNU tar extensions.
## TarFile Objects[Â¶](https://docs.python.org/3/library/tarfile.html#tarfile-objects "Link to this heading")
The [`TarFile`](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile "tarfile.TarFile") object provides an interface to a tar archive. A tar archive is a sequence of blocks. An archive member (a stored file) is made up of a header block followed by data blocks. It is possible to store a file in a tar archive several times. Each archive member is represented by a [`TarInfo`](https://docs.python.org/3/library/tarfile.html#tarfile.TarInfo "tarfile.TarInfo") object, see [TarInfo Objects](https://docs.python.org/3/library/tarfile.html#tarinfo-objects) for details.
A [`TarFile`](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile "tarfile.TarFile") object can be used as a context manager in a [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement. It will automatically be closed when the block is completed. Please note that in the event of an exception an archive opened for writing will not be finalized; only the internally used file object will be closed. See the [Examples](https://docs.python.org/3/library/tarfile.html#tar-examples) section for a use case.
Added in version 3.2: Added support for the context management protocol.