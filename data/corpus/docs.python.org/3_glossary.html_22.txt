Title: Glossary of Python Terms
URL: https://docs.python.org/3/glossary.html
Summary: This section defines key terms related to Python, including 'slice', which refers to an object representing a portion of a sequence, and 'soft deprecated', indicating an API that is safe for existing code but discouraged for new use without the risk of removal.
---

slice[¶](https://docs.python.org/3/glossary.html#term-slice "Link to this term")
    
An object usually containing a portion of a [sequence](https://docs.python.org/3/glossary.html#term-sequence). A slice is created using the subscript notation, `[]` with colons between numbers when several are given, such as in `variable_name[1:3:5]`. The bracket (subscript) notation uses [`slice`](https://docs.python.org/3/library/functions.html#slice "slice") objects internally. 

soft deprecated[¶](https://docs.python.org/3/glossary.html#term-soft-deprecated "Link to this term")
    
A soft deprecated API should not be used in new code, but it is safe for already existing code to use it. The API remains documented and tested, but will not be enhanced further.
Soft deprecation, unlike normal deprecation, does not plan on removing the API and will not emit warnings.
See [PEP 387: Soft Deprecation](https://peps.python.org/pep-0387/#soft-deprecation). 

special method[¶](https://docs.python.org/3/glossary.html#term-special-method "Link to this term")
    
A method that is called implicitly by Python to execute a certain operation on a type, such as addition. Such methods have names starting and ending with double underscores. Special methods are documented in [Special method names](https://docs.python.org/3/reference/datamodel.html#specialnames). 

statement[¶](https://docs.python.org/3/glossary.html#term-statement "Link to this term")
    
A statement is part of a suite (a “block” of code). A statement is either an [expression](https://docs.python.org/3/glossary.html#term-expression) or one of several constructs with a keyword, such as [`if`](https://docs.python.org/3/reference/compound_stmts.html#if), [`while`](https://docs.python.org/3/reference/compound_stmts.html#while) or [`for`](https://docs.python.org/3/reference/compound_stmts.html#for). 

static type checker[¶](https://docs.python.org/3/glossary.html#term-static-type-checker "Link to this term")
    
An external tool that reads Python code and analyzes it, looking for issues such as incorrect types. See also [type hints](https://docs.python.org/3/glossary.html#term-type-hint) and the [`typing`](https://docs.python.org/3/library/typing.html#module-typing "typing: Support for type hints \(see :pep:`484`\).") module. 

strong reference[¶](https://docs.python.org/3/glossary.html#term-strong-reference "Link to this term")
    
In Python’s C API, a strong reference is a reference to an object which is owned by the code holding the reference. The strong reference is taken by calling [`Py_INCREF()`](https://docs.python.org/3/c-api/refcounting.html#c.Py_INCREF "Py_INCREF") when the reference is created and released with [`Py_DECREF()`](https://docs.python.org/3/c-api/refcounting.html#c.Py_DECREF "Py_DECREF") when the reference is deleted.
The [`Py_NewRef()`](https://docs.python.org/3/c-api/refcounting.html#c.Py_NewRef "Py_NewRef") function can be used to create a strong reference to an object. Usually, the [`Py_DECREF()`](https://docs.python.org/3/c-api/refcounting.html#c.Py_DECREF "Py_DECREF") function must be called on the strong reference before exiting the scope of the strong reference, to avoid leaking one reference.
See also [borrowed reference](https://docs.python.org/3/glossary.html#term-borrowed-reference). 

text encoding[¶](https://docs.python.org/3/glossary.html#term-text-encoding "Link to this term")
    
A string in Python is a sequence of Unicode code points (in range `U+0000`–`U+10FFFF`). To store or transfer a string, it needs to be serialized as a sequence of bytes.
Serializing a string into a sequence of bytes is known as “encoding”, and recreating the string from the sequence of bytes is known as “decoding”.
There are a variety of different text serialization [codecs](https://docs.python.org/3/library/codecs.html#standard-encodings), which are collectively referred to as “text encodings”. 

text file[¶](https://docs.python.org/3/glossary.html#term-text-file "Link to this term")
    
A [file object](https://docs.python.org/3/glossary.html#term-file-object) able to read and write [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") objects. Often, a text file actually accesses a byte-oriented datastream and handles the [text encoding](https://docs.python.org/3/glossary.html#term-text-encoding) automatically. Examples of text files are files opened in text mode (`'r'` or `'w'`), [`sys.stdin`](https://docs.python.org/3/library/sys.html#sys.stdin "sys.stdin"), [`sys.stdout`](https://docs.python.org/3/library/sys.html#sys.stdout "sys.stdout"), and instances of [`io.StringIO`](https://docs.python.org/3/library/io.html#io.StringIO "io.StringIO").
See also [binary file](https://docs.python.org/3/glossary.html#term-binary-file) for a file object able to read and write [bytes-like objects](https://docs.python.org/3/glossary.html#term-bytes-like-object).