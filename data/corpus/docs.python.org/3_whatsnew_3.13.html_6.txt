Title: Introduction of Free-threaded CPython in 3.13
URL: https://docs.python.org/3/whatsnew/3.13.html
Summary: CPython 3.13 introduces experimental support for a free-threaded mode that operates without the global interpreter lock (GIL). This mode is not enabled by default and requires a special executable. Users can install pre-built binaries or build CPython from source with the `--disable-gil` option.
---

```

(Contributed by Pablo Galindo Salgado and Shantanu Jain in [gh-107944](https://github.com/python/cpython/issues/107944).)


### Free-threaded CPython[¶](https://docs.python.org/3/whatsnew/3.13.html#free-threaded-cpython "Link to this heading")
CPython now has experimental support for running in a free-threaded mode, with the [global interpreter lock](https://docs.python.org/3/glossary.html#term-global-interpreter-lock) (GIL) disabled. This is an experimental feature and therefore is not enabled by default. The free-threaded mode requires a different executable, usually called `python3.13t` or `python3.13t.exe`. Pre-built binaries marked as _free-threaded_ can be installed as part of the official [Windows](https://docs.python.org/3/using/windows.html#install-freethreaded-windows) and [macOS](https://docs.python.org/3/using/mac.html#install-freethreaded-macos) installers, or CPython can be built from source with the [`--disable-gil`](https://docs.python.org/3/using/configure.html#cmdoption-disable-gil) option.
Free-threaded execution allows for full utilization of the available processing power by running threads in parallel on available CPU cores. While not all software will benefit from this automatically, programs designed with threading in mind will run faster on multi-core hardware. **The free-threaded mode is experimental** and work is ongoing to improve it: expect some bugs and a substantial single-threaded performance hit. Free-threaded builds of CPython support optionally running with the GIL enabled at runtime using the environment variable [`PYTHON_GIL`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHON_GIL) or the command-line option [`-X gil=1`](https://docs.python.org/3/using/cmdline.html#cmdoption-X).
To check if the current interpreter supports free-threading, [`python -VV`](https://docs.python.org/3/using/cmdline.html#cmdoption-V) and [`sys.version`](https://docs.python.org/3/library/sys.html#sys.version "sys.version") contain “experimental free-threading build”. The new `sys._is_gil_enabled()` function can be used to check whether the GIL is actually disabled in the running process.
C-API extension modules need to be built specifically for the free-threaded build. Extensions that support running with the [GIL](https://docs.python.org/3/glossary.html#term-GIL) disabled should use the [`Py_mod_gil`](https://docs.python.org/3/c-api/module.html#c.Py_mod_gil "Py_mod_gil") slot. Extensions using single-phase init should use [`PyUnstable_Module_SetGIL()`](https://docs.python.org/3/c-api/module.html#c.PyUnstable_Module_SetGIL "PyUnstable_Module_SetGIL") to indicate whether they support running with the GIL disabled. Importing C extensions that don’t use these mechanisms will cause the GIL to be enabled, unless the GIL was explicitly disabled with the [`PYTHON_GIL`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHON_GIL) environment variable or the [`-X gil=0`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) option. pip 24.1 or newer is required to install packages with C extensions in the free-threaded build.
This work was made possible thanks to many individuals and organizations, including the large community of contributors to Python and third-party projects to test and enable free-threading support. Notable contributors include: Sam Gross, Ken Jin, Donghee Na, Itamar Oren, Matt Page, Brett Simmers, Dino Viehland, Carl Meyer, Nathan Goldbaum, Ralf Gommers, Lysandros Nikolaou, and many others. Many of these contributors are employed by Meta, which has provided significant engineering resources to support this project.
See also
[**PEP 703**](https://peps.python.org/pep-0703/) “Making the Global Interpreter Lock Optional in CPython” contains rationale and information surrounding this work.
[Porting Extension Modules to Support Free-Threading](https://py-free-threading.github.io/porting/): A community-maintained porting guide for extension authors.
### An experimental just-in-time (JIT) compiler[¶](https://docs.python.org/3/whatsnew/3.13.html#an-experimental-just-in-time-jit-compiler "Link to this heading")
When CPython is configured and built using the `--enable-experimental-jit` option, a just-in-time (JIT) compiler is added which may speed up some Python programs. On Windows, use `PCbuild/build.bat --experimental-jit` to enable the JIT or `--experimental-jit-interpreter` to enable the Tier 2 interpreter. Build requirements and further supporting information [are contained at](https://github.com/python/cpython/blob/main/Tools/jit/README.md) `Tools/jit/README.md`.
The `--enable-experimental-jit` option takes these (optional) values, defaulting to `yes` if `--enable-experimental-jit` is present without the optional value.
  * `no`: Disable the entire Tier 2 and JIT pipeline.
  * `yes`: Enable the JIT. To disable the JIT at runtime, pass the environment variable `PYTHON_JIT=0`.
  * `yes-off`: Build the JIT but disable it by default. To enable the JIT at runtime, pass th