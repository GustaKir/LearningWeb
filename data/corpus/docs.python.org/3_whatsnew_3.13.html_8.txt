Title: New Platform Support in Python 3.13
URL: https://docs.python.org/3/whatsnew/3.13.html
Summary: Python 3.13 introduces support for iOS and Android as per PEP 730 and PEP 738, respectively. iOS now supports `arm64` targets for devices released after 2013 and the Apple silicon simulator, while Android supports both `aarch64` and `x86_64` targets. Older platforms receive best-effort support.
---

latforms "Link to this heading")
[**PEP 730**](https://peps.python.org/pep-0730/): iOS is now a [**PEP 11**](https://peps.python.org/pep-0011/) supported platform, with the `arm64-apple-ios` and `arm64-apple-ios-simulator` targets at tier 3 (iPhone and iPad devices released after 2013 and the Xcode iOS simulator running on Apple silicon hardware, respectively). `x86_64-apple-ios-simulator` (the Xcode iOS simulator running on older `x86_64` hardware) is not a tier 3 supported platform, but will have best-effort support. (PEP written and implementation contributed by Russell Keith-Magee in [gh-114099](https://github.com/python/cpython/issues/114099).)
[**PEP 738**](https://peps.python.org/pep-0738/): Android is now a [**PEP 11**](https://peps.python.org/pep-0011/) supported platform, with the `aarch64-linux-android` and `x86_64-linux-android` targets at tier 3. The 32-bit targets `arm-linux-androideabi` and `i686-linux-android` are not tier 3 supported platforms, but will have best-effort support. (PEP written and implementation contributed by Malcolm Smith in [gh-116622](https://github.com/python/cpython/issues/116622).)
See also
[**PEP 730**](https://peps.python.org/pep-0730/), [**PEP 738**](https://peps.python.org/pep-0738/)
## Other Language Changes[Â¶](https://docs.python.org/3/whatsnew/3.13.html#other-language-changes "Link to this heading")
  * The compiler now strips common leading whitespace from every line in a docstring. This reduces the size of the [bytecode cache](https://docs.python.org/3/glossary.html#term-bytecode) (such as `.pyc` files), with reductions in file size of around 5%, for example in `sqlalchemy.orm.session` from SQLAlchemy 2.0. This change affects tools that use docstrings, such as [`doctest`](https://docs.python.org/3/library/doctest.html#module-doctest "doctest: Test pieces of code within docstrings.").
>>>```
>>> defspam():
... """
...     This is a docstring with
...      leading whitespace.
...
...     It even has multiple paragraphs!
...   """
...
>>> spam.__doc__
'\nThis is a docstring with\n leading whitespace.\n\nIt even has multiple paragraphs!\n'

```

(Contributed by Inada Naoki in [gh-81283](https://github.com/python/cpython/issues/81283).)
  * [Annotation scopes](https://docs.python.org/3/reference/executionmodel.html#annotation-scopes) within class scopes can now contain lambdas and comprehensions. Comprehensions that are located within class scopes are not inlined into their parent scope.
```
classC[T]:
  type Alias = lambda: T