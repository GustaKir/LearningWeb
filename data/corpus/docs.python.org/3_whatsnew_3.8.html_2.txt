Title: Python 3.8 Release Overview
URL: https://docs.python.org/3/whatsnew/3.8.html
Summary: This document outlines the new features introduced in Python 3.8, released on October 14, 2019, highlighting key changes such as the introduction of assignment expressions, colloquially known as the 'walrus operator'.
---

Editor:
    
Raymond Hettinger
This article explains the new features in Python 3.8, compared to 3.7. Python 3.8 was released on October 14, 2019. For full details, see the [changelog](https://docs.python.org/3/whatsnew/changelog.html#changelog).
## Summary – Release highlights[¶](https://docs.python.org/3/whatsnew/3.8.html#summary-release-highlights "Link to this heading")
## New Features[¶](https://docs.python.org/3/whatsnew/3.8.html#new-features "Link to this heading")
### Assignment expressions[¶](https://docs.python.org/3/whatsnew/3.8.html#assignment-expressions "Link to this heading")
There is new syntax `:=` that assigns values to variables as part of a larger expression. It is affectionately known as “the walrus operator” due to its resemblance to [the eyes and tusks of a walrus](https://en.wikipedia.org/wiki/Walrus#/media/File:Pacific_Walrus_-_Bull_\(8247646168\).jpg).
In this example, the assignment expression helps avoid calling [`len()`](https://docs.python.org/3/library/functions.html#len "len") twice:
```
if (n := len(a)) > 10:
  print(f"List is too long ({n} elements, expected <= 10)")

```

A similar benefit arises during regular expression matching where match objects are needed twice, once to test whether a match occurred and another to extract a subgroup:
```
discount = 0.0
if (mo := re.search(r'(\d+)% discount', advertisement)):
  discount = float(mo.group(1)) / 100.0

```

The operator is also useful with while-loops that compute a value to test loop termination and then need that same value again in the body of the loop:
```
# Loop over fixed length blocks
while (block := f.read(256)) != '':
  process(block)

```

Another motivating use case arises in list comprehensions where a value computed in a filtering condition is also needed in the expression body:
```
[clean_name.title() for name in names
 if (clean_name := normalize('NFC', name)) in allowed_names]

```

Try to limit use of the walrus operator to clean cases that reduce complexity and improve readability.
See [**PEP 572**](https://peps.python.org/pep-0572/) for a full description.
(Contributed by Emily Morehouse in [bpo-35224](https://bugs.python.org/issue?@action=redirect&bpo=35224).)
### Positional-only parameters[¶](https://docs.python.org/3/whatsnew/3.8.html#positional-only-parameters "Link to this heading")
There is a new function parameter syntax `/` to indicate that some function parameters must be specified positionally and cannot be used as keyword arguments. This is the same notation shown by `help()` for C functions annotated with Larry Hastings’ [Argument Clinic](https://devguide.python.org/development-tools/clinic/) tool.
In the following example, parameters _a_ and _b_ are positional-only, while _c_ or _d_ can be positional or keyword, and _e_ or _f_ are required to be keywords:
```
deff(a, b, /, c, d, *, e, f):
  print(a, b, c, d, e, f)

```

The following is a valid call:
```
f(10, 20, 30, d=40, e=50, f=60)

```

However, these are invalid calls:
```
f(10, b=20, c=30, d=40, e=50, f=60)  # b cannot be a keyword argument
f(10, 20, 30, 40, 50, f=60)      # e must be a keyword argument

```

One use case for this notation is that it allows pure Python functions to fully emulate behaviors of existing C coded functions. For example, the built-in [`divmod()`](https://docs.python.org/3/library/functions.html#divmod "divmod") function does not accept keyword arguments:
```
defdivmod(a, b, /):
  "Emulate the built in divmod() function"
  return (a // b, a % b)

```

Another use case is to preclude keyword arguments when the parameter name is not helpful. For example, the builtin [`len()`](https://docs.python.org/3/library/functions.html#len "len") function has the signature `len(obj, /)`. This precludes awkward calls such as:
```
len(obj='hello') # The "obj" keyword argument impairs readability

```

A further benefit of marking a parameter as positional-only is that it allows the parameter name to be changed in the future without risk of breaking client code. For example, in the [`statistics`](https://docs.python.org/3/library/statistics.html#module-statistics "statistics: Mathematical statistics functions") module, the parameter name _dist_ may be changed in the future. This was made possible with the following function specification:
```
defquantiles(dist, /, *, n=4, method='exclusive')
  ...

```

Since the parameters to the left of `/` are not exposed as possible keywords, the parameters names remain available for use in `**kwargs`:
>>>```
>>> deff(a, b, /, **kwargs):
...   print(a, b, kwargs)
...
>>> f(10, 20, a=1, b=2, c=3)     # a and b are used in two ways
10 20 {'a': 1, 'b': 2, 'c': 3}

```

This greatly simplifies the implementation of functions and methods that need to accept arbitrary keyword arguments. For example, here is an excerpt from code in the [`collections`](https://docs.python.org/3/library/collections.html#module-collections "collections: Container datatypes") module: