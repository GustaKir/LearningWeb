Title: difflib.HtmlDiff.make_file Method
URL: https://docs.python.org/3/library/difflib.html
Summary: The make_file method compares two lists of strings (_fromlines_ and _tolines_) and generates an HTML file displaying the line-by-line differences. It includes optional parameters for custom column headers, context display, and control of surrounding lines in the output.
---

make_file(_fromlines_ , _tolines_ , _fromdesc =''_, _todesc =''_, _context =False_, _numlines =5_, _*_ , _charset ='utf-8'_)[¶](https://docs.python.org/3/library/difflib.html#difflib.HtmlDiff.make_file "Link to this definition")
    
Compares _fromlines_ and _tolines_ (lists of strings) and returns a string which is a complete HTML file containing a table showing line by line differences with inter-line and intra-line changes highlighted.
_fromdesc_ and _todesc_ are optional keyword arguments to specify from/to file column header strings (both default to an empty string).
_context_ and _numlines_ are both optional keyword arguments. Set _context_ to `True` when contextual differences are to be shown, else the default is `False` to show the full files. _numlines_ defaults to `5`. When _context_ is `True` _numlines_ controls the number of context lines which surround the difference highlights. When _context_ is `False` _numlines_ controls the number of lines which are shown before a difference highlight when using the “next” hyperlinks (setting to zero would cause the “next” hyperlinks to place the next difference highlight at the top of the browser without any leading context).
Note
_fromdesc_ and _todesc_ are interpreted as unescaped HTML and should be properly escaped while receiving input from untrusted sources.
Changed in version 3.5: _charset_ keyword-only argument was added. The default charset of HTML document changed from `'ISO-8859-1'` to `'utf-8'`. 

make_table(_fromlines_ , _tolines_ , _fromdesc =''_, _todesc =''_, _context =False_, _numlines =5_)[¶](https://docs.python.org/3/library/difflib.html#difflib.HtmlDiff.make_table "Link to this definition")
    
Compares _fromlines_ and _tolines_ (lists of strings) and returns a string which is a complete HTML table showing line by line differences with inter-line and intra-line changes highlighted.
The arguments for this method are the same as those for the [`make_file()`](https://docs.python.org/3/library/difflib.html#difflib.HtmlDiff.make_file "difflib.HtmlDiff.make_file") method. 

difflib.context_diff(_a_ , _b_ , _fromfile =''_, _tofile =''_, _fromfiledate =''_, _tofiledate =''_, _n =3_, _lineterm ='\n'_)[¶](https://docs.python.org/3/library/difflib.html#difflib.context_diff "Link to this definition")
    
Compare _a_ and _b_ (lists of strings); return a delta (a [generator](https://docs.python.org/3/glossary.html#term-generator) generating the delta lines) in context diff format.
Context diffs are a compact way of showing just the lines that have changed plus a few lines of context. The changes are shown in a before/after style. The number of context lines is set by _n_ which defaults to three.
By default, the diff control lines (those with `***` or `---`) are created with a trailing newline. This is helpful so that inputs created from [`io.IOBase.readlines()`](https://docs.python.org/3/library/io.html#io.IOBase.readlines "io.IOBase.readlines") result in diffs that are suitable for use with [`io.IOBase.writelines()`](https://docs.python.org/3/library/io.html#io.IOBase.writelines "io.IOBase.writelines") since both the inputs and outputs have trailing newlines.
For inputs that do not have trailing newlines, set the _lineterm_ argument to `""` so that the output will be uniformly newline free.
The context diff format normally has a header for filenames and modification times. Any or all of these may be specified using strings for _fromfile_ , _tofile_ , _fromfiledate_ , and _tofiledate_. The modification times are normally expressed in the ISO 8601 format. If not specified, the strings default to blanks.
>>>```
>>> importsys
>>> fromdifflibimport *
>>> s1 = ['bacon\n', 'eggs\n', 'ham\n', 'guido\n']
>>> s2 = ['python\n', 'eggy\n', 'hamster\n', 'guido\n']
>>> sys.stdout.writelines(context_diff(s1, s2, fromfile='before.py',
...             tofile='after.py'))
*** before.py
--- after.py
***************
*** 1,4 ****
! bacon
! eggs
! ham
 guido
--- 1,4 ----
! python
! eggy
! hamster
 guido

```

See [A command-line interface to difflib](https://docs.python.org/3/library/difflib.html#difflib-interface) for a more detailed example. 

difflib.get_close_matches(_word_ , _possibilities_ , _n =3_, _cutoff =0.6_)[¶](https://docs.python.org/3/library/difflib.html#difflib.get_close_matches "Link to this definition")
    
Return a list of the best “good enough” matches. _word_ is a sequence for which close matches are desired (typically a string), and _possibilities_ is a list of sequences against which to match _word_ (typically a list of strings).
Optional argument _n_ (default `3`) is the maximum number of close matches to return; _n_ must be greater than `0`.
Optional argument _cutoff_ (default `0.6`) is a float in the range [0, 1]. Possibilities that don’t score at least that similar to _word_ are ignored.
The best (no more than _n_) matches among the possibilities are returned in a list, sorted by similarity score, most similar first.
>>>