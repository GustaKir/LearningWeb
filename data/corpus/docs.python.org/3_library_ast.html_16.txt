Title: MatchOr Class in Python's AST Module
URL: https://docs.python.org/3/library/ast.html
Summary: The ast.MatchOr class represents an or-pattern in the Abstract Syntax Tree (AST) module introduced in Python 3.10. It evaluates its subpatterns sequentially against the subject until one succeeds, with the patterns attribute containing the list of match pattern nodes.
---

```

Added in version 3.10. 

_class_ ast.MatchOr(_patterns_)[¶](https://docs.python.org/3/library/ast.html#ast.MatchOr "Link to this definition")
    
A match “or-pattern”. An or-pattern matches each of its subpatterns in turn to the subject, until one succeeds. The or-pattern is then deemed to succeed. If none of the subpatterns succeed the or-pattern fails. The `patterns` attribute contains a list of match pattern nodes that will be matched against the subject.
>>>```
>>> print(ast.dump(ast.parse("""
... match x:
...   case [x] | (y):
...     ...
... """), indent=4))
Module(
  body=[
    Match(
      subject=Name(id='x', ctx=Load()),
      cases=[
        match_case(
          pattern=MatchOr(
            patterns=[
              MatchSequence(
                patterns=[
                  MatchAs(name='x')]),
              MatchAs(name='y')]),
          body=[
            Expr(
              value=Constant(value=Ellipsis))])])])

```

Added in version 3.10.
### Type parameters[¶](https://docs.python.org/3/library/ast.html#type-parameters "Link to this heading")
[Type parameters](https://docs.python.org/3/reference/compound_stmts.html#type-params) can exist on classes, functions, and type aliases. 

_class_ ast.TypeVar(_name_ , _bound_ , _default_value_)[¶](https://docs.python.org/3/library/ast.html#ast.TypeVar "Link to this definition")
    
A [`typing.TypeVar`](https://docs.python.org/3/library/typing.html#typing.TypeVar "typing.TypeVar"). `name` is the name of the type variable. `bound` is the bound or constraints, if any. If `bound` is a [`Tuple`](https://docs.python.org/3/library/ast.html#ast.Tuple "ast.Tuple"), it represents constraints; otherwise it represents the bound. `default_value` is the default value; if the `TypeVar` has no default, this attribute will be set to `None`.
>>>```
>>> print(ast.dump(ast.parse("type Alias[T: int = bool] = list[T]"), indent=4))
Module(
  body=[
    TypeAlias(
      name=Name(id='Alias', ctx=Store()),
      type_params=[
        TypeVar(
          name='T',
          bound=Name(id='int', ctx=Load()),
          default_value=Name(id='bool', ctx=Load()))],
      value=Subscript(
        value=Name(id='list', ctx=Load()),
        slice=Name(id='T', ctx=Load()),
        ctx=Load()))])

```

Added in version 3.12.
Changed in version 3.13: Added the _default_value_ parameter. 

_class_ ast.ParamSpec(_name_ , _default_value_)[¶](https://docs.python.org/3/library/ast.html#ast.ParamSpec "Link to this definition")
    
A [`typing.ParamSpec`](https://docs.python.org/3/library/typing.html#typing.ParamSpec "typing.ParamSpec"). `name` is the name of the parameter specification. `default_value` is the default value; if the `ParamSpec` has no default, this attribute will be set to `None`.
>>>```
>>> print(ast.dump(ast.parse("type Alias[**P = [int, str]] = Callable[P, int]"), indent=4))
Module(
  body=[
    TypeAlias(
      name=Name(id='Alias', ctx=Store()),
      type_params=[
        ParamSpec(
          name='P',
          default_value=List(
            elts=[
              Name(id='int', ctx=Load()),
              Name(id='str', ctx=Load())],
            ctx=Load()))],
      value=Subscript(
        value=Name(id='Callable', ctx=Load()),
        slice=Tuple(
          elts=[
            Name(id='P', ctx=Load()),
            Name(id='int', ctx=Load())],
          ctx=Load()),
        ctx=Load()))])

```

Added in version 3.12.
Changed in version 3.13: Added the _default_value_ parameter. 

_class_ ast.TypeVarTuple(_name_ , _default_value_)[¶](https://docs.python.org/3/library/ast.html#ast.TypeVarTuple "Link to this definition")
    
A [`typing.TypeVarTuple`](https://docs.python.org/3/library/typing.html#typing.TypeVarTuple "typing.TypeVarTuple"). `name` is the name of the type variable tuple. `default_value` is the default value; if the `TypeVarTuple` has no default, this attribute will be set to `None`.
>>>```
>>> print(ast.dump(ast.parse("type Alias[*Ts = ()] = tuple[*Ts]"), indent=4))
Module(
  body=[
    TypeAlias(
      name=Name(id='Alias', ctx=Store()),
      type_params=[
        TypeVarTuple(
          name='Ts',
          default_value=Tuple(ctx=Load()))],
      value=Subscript(
        value=Name(id='tuple', ctx=Load()),
        slice=Tuple(
          elts=[
            Starred(
              value=Name(id='Ts', ctx=Load()),
              ctx=Load())],
          ctx=Load()),
        ctx=Load()))])