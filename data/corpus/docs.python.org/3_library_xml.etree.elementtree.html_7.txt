Title: ElementTree Module: Element Validation and Incremental Parsing
URL: https://docs.python.org/3/library/xml.etree.elementtree.html
Summary: This section covers two functions from the xml.etree.ElementTree module: `iselement`, which checks if an object is a valid element instance, and `iterparse`, which allows for incremental parsing of XML data, reporting events such as start and end of elements.
---

xml.etree.ElementTree.iselement(_element_)[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.iselement "Link to this definition")
    
Check if an object appears to be a valid element object. _element_ is an element instance. Return `True` if this is an element object. 

xml.etree.ElementTree.iterparse(_source_ , _events =None_, _parser =None_)[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.iterparse "Link to this definition")
    
Parses an XML section into an element tree incrementally, and reports what’s going on to the user. _source_ is a filename or [file object](https://docs.python.org/3/glossary.html#term-file-object) containing XML data. _events_ is a sequence of events to report back. The supported events are the strings `"start"`, `"end"`, `"comment"`, `"pi"`, `"start-ns"` and `"end-ns"` (the “ns” events are used to get detailed namespace information). If _events_ is omitted, only `"end"` events are reported. _parser_ is an optional parser instance. If not given, the standard [`XMLParser`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLParser "xml.etree.ElementTree.XMLParser") parser is used. _parser_ must be a subclass of [`XMLParser`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLParser "xml.etree.ElementTree.XMLParser") and can only use the default [`TreeBuilder`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.TreeBuilder "xml.etree.ElementTree.TreeBuilder") as a target. Returns an [iterator](https://docs.python.org/3/glossary.html#term-iterator) providing `(event, elem)` pairs; it has a `root` attribute that references the root element of the resulting XML tree once _source_ is fully read. The iterator has the `close()` method that closes the internal file object if _source_ is a filename.
Note that while [`iterparse()`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.iterparse "xml.etree.ElementTree.iterparse") builds the tree incrementally, it issues blocking reads on _source_ (or the file it names). As such, it’s unsuitable for applications where blocking reads can’t be made. For fully non-blocking parsing, see [`XMLPullParser`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLPullParser "xml.etree.ElementTree.XMLPullParser").
Note
[`iterparse()`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.iterparse "xml.etree.ElementTree.iterparse") only guarantees that it has seen the “>” character of a starting tag when it emits a “start” event, so the attributes are defined, but the contents of the text and tail attributes are undefined at that point. The same applies to the element children; they may or may not be present.
If you need a fully populated element, look for “end” events instead.
Deprecated since version 3.4: The _parser_ argument.
Changed in version 3.8: The `comment` and `pi` events were added.
Changed in version 3.13: Added the `close()` method. 

xml.etree.ElementTree.parse(_source_ , _parser =None_)[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.parse "Link to this definition")
    
Parses an XML section into an element tree. _source_ is a filename or file object containing XML data. _parser_ is an optional parser instance. If not given, the standard [`XMLParser`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLParser "xml.etree.ElementTree.XMLParser") parser is used. Returns an [`ElementTree`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree "xml.etree.ElementTree.ElementTree") instance. 

xml.etree.ElementTree.ProcessingInstruction(_target_ , _text =None_)[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ProcessingInstruction "Link to this definition")
    
PI element factory. This factory function creates a special element that will be serialized as an XML processing instruction. _target_ is a string containing the PI target. _text_ is a string containing the PI contents, if given. Returns an element instance, representing a processing instruction.
Note that [`XMLParser`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLParser "xml.etree.ElementTree.XMLParser") skips over processing instructions in the input instead of creating PI objects for them. An [`ElementTree`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree "xml.etree.ElementTree.ElementTree") will only contain processing instruction nodes if they have been inserted into to the tree using one of the [`Element`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element "xml.etree.ElementTree.Element") methods.