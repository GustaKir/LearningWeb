Title: Inspect Module - Signature Parameters and Annotations
URL: https://docs.python.org/3/library/inspect.html
Summary: This section describes the 'parameters' mapping in the 'Signature' class, which holds parameters' names to their corresponding 'Parameter' objects, maintaining strict definition order. It notes that Python 3.7 guarantees this order specifically for keyword-only parameters. Additionally, it covers the 'return_annotation' attribute of a callable, indicating the callable's return type, or set to 'Signature.empty' if no annotation exists.
---

parameters[¶](https://docs.python.org/3/library/inspect.html#inspect.Signature.parameters "Link to this definition")
    
An ordered mapping of parameters’ names to the corresponding [`Parameter`](https://docs.python.org/3/library/inspect.html#inspect.Parameter "inspect.Parameter") objects. Parameters appear in strict definition order, including keyword-only parameters.
Changed in version 3.7: Python only explicitly guaranteed that it preserved the declaration order of keyword-only parameters as of version 3.7, although in practice this order had always been preserved in Python 3. 

return_annotation[¶](https://docs.python.org/3/library/inspect.html#inspect.Signature.return_annotation "Link to this definition")
    
The “return” annotation for the callable. If the callable has no “return” annotation, this attribute is set to [`Signature.empty`](https://docs.python.org/3/library/inspect.html#inspect.Signature.empty "inspect.Signature.empty"). 

bind(_* args_, _** kwargs_)[¶](https://docs.python.org/3/library/inspect.html#inspect.Signature.bind "Link to this definition")
    
Create a mapping from positional and keyword arguments to parameters. Returns [`BoundArguments`](https://docs.python.org/3/library/inspect.html#inspect.BoundArguments "inspect.BoundArguments") if `*args` and `**kwargs` match the signature, or raises a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError"). 

bind_partial(_* args_, _** kwargs_)[¶](https://docs.python.org/3/library/inspect.html#inspect.Signature.bind_partial "Link to this definition")
    
Works the same way as [`Signature.bind()`](https://docs.python.org/3/library/inspect.html#inspect.Signature.bind "inspect.Signature.bind"), but allows the omission of some required arguments (mimics [`functools.partial()`](https://docs.python.org/3/library/functools.html#functools.partial "functools.partial") behavior.) Returns [`BoundArguments`](https://docs.python.org/3/library/inspect.html#inspect.BoundArguments "inspect.BoundArguments"), or raises a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") if the passed arguments do not match the signature. 

replace(_*[, parameters][, return_annotation]_)[¶](https://docs.python.org/3/library/inspect.html#inspect.Signature.replace "Link to this definition")
    
Create a new [`Signature`](https://docs.python.org/3/library/inspect.html#inspect.Signature "inspect.Signature") instance based on the instance [`replace()`](https://docs.python.org/3/library/inspect.html#inspect.Signature.replace "inspect.Signature.replace") was invoked on. It is possible to pass different _parameters_ and/or _return_annotation_ to override the corresponding properties of the base signature. To remove `return_annotation` from the copied `Signature`, pass in [`Signature.empty`](https://docs.python.org/3/library/inspect.html#inspect.Signature.empty "inspect.Signature.empty").
>>>```
>>> deftest(a, b):
...   pass
...
>>> sig = signature(test)
>>> new_sig = sig.replace(return_annotation="new return anno")
>>> str(new_sig)
"(a, b) -> 'new return anno'"

```

[`Signature`](https://docs.python.org/3/library/inspect.html#inspect.Signature "inspect.Signature") objects are also supported by the generic function [`copy.replace()`](https://docs.python.org/3/library/copy.html#copy.replace "copy.replace"). 

format(_*_ , _max_width =None_)[¶](https://docs.python.org/3/library/inspect.html#inspect.Signature.format "Link to this definition")
    
Create a string representation of the [`Signature`](https://docs.python.org/3/library/inspect.html#inspect.Signature "inspect.Signature") object.
If _max_width_ is passed, the method will attempt to fit the signature into lines of at most _max_width_ characters. If the signature is longer than _max_width_ , all parameters will be on separate lines.
Added in version 3.13. 

_classmethod_ from_callable(_obj_ , _*_ , _follow_wrapped =True_, _globals =None_, _locals =None_, _eval_str =False_)[¶](https://docs.python.org/3/library/inspect.html#inspect.Signature.from_callable "Link to this definition")
    
Return a [`Signature`](https://docs.python.org/3/library/inspect.html#inspect.Signature "inspect.Signature") (or its subclass) object for a given callable _obj_.
This method simplifies subclassing of [`Signature`](https://docs.python.org/3/library/inspect.html#inspect.Signature "inspect.Signature"):
```
classMySignature(Signature):
  pass
sig = MySignature.from_callable(sum)
assert isinstance(sig, MySignature)