Title: Python sysconfig Module: Configuration Variable Retrieval
URL: https://docs.python.org/3/library/sysconfig.html
Summary: The sysconfig module provides functions to retrieve configuration variables for the current platform. The `get_config_vars()` function returns a dictionary of all variables if called without arguments, or values for specified arguments if called with them. The `get_config_var(name)` function retrieves the value of a specific variable, returning None if not found.
---

sysconfig.get_config_vars(_* args_)[¶](https://docs.python.org/3/library/sysconfig.html#sysconfig.get_config_vars "Link to this definition")
    
With no arguments, return a dictionary of all configuration variables relevant for the current platform.
With arguments, return a list of values that result from looking up each argument in the configuration variable dictionary.
For each argument, if the value is not found, return `None`. 

sysconfig.get_config_var(_name_)[¶](https://docs.python.org/3/library/sysconfig.html#sysconfig.get_config_var "Link to this definition")
    
Return the value of a single variable _name_. Equivalent to `get_config_vars().get(name)`.
If _name_ is not found, return `None`.
Example of usage:
>>>```
>>> importsysconfig
>>> sysconfig.get_config_var('Py_ENABLE_SHARED')
0
>>> sysconfig.get_config_var('LIBDIR')
'/usr/local/lib'
>>> sysconfig.get_config_vars('AR', 'CXX')
['ar', 'g++']

```

## Installation paths[¶](https://docs.python.org/3/library/sysconfig.html#installation-paths "Link to this heading")
Python uses an installation scheme that differs depending on the platform and on the installation options. These schemes are stored in [`sysconfig`](https://docs.python.org/3/library/sysconfig.html#module-sysconfig "sysconfig: Python's configuration information") under unique identifiers based on the value returned by [`os.name`](https://docs.python.org/3/library/os.html#os.name "os.name"). The schemes are used by package installers to determine where to copy files to.
Python currently supports nine schemes:
  * _posix_prefix_ : scheme for POSIX platforms like Linux or macOS. This is the default scheme used when Python or a component is installed.
  * _posix_home_ : scheme for POSIX platforms, when the _home_ option is used. This scheme defines paths located under a specific home prefix.
  * _posix_user_ : scheme for POSIX platforms, when the _user_ option is used. This scheme defines paths located under the user’s home directory ([`site.USER_BASE`](https://docs.python.org/3/library/site.html#site.USER_BASE "site.USER_BASE")).
  * _posix_venv_ : scheme for [`Python virtual environments`](https://docs.python.org/3/library/venv.html#module-venv "venv: Creation of virtual environments.") on POSIX platforms; by default it is the same as _posix_prefix_.
  * _nt_ : scheme for Windows. This is the default scheme used when Python or a component is installed.
  * _nt_user_ : scheme for Windows, when the _user_ option is used.
  * _nt_venv_ : scheme for [`Python virtual environments`](https://docs.python.org/3/library/venv.html#module-venv "venv: Creation of virtual environments.") on Windows; by default it is the same as _nt_.
  * _venv_ : a scheme with values from either _posix_venv_ or _nt_venv_ depending on the platform Python runs on.
  * _osx_framework_user_ : scheme for macOS, when the _user_ option is used.


Each scheme is itself composed of a series of paths and each path has a unique identifier. Python currently uses eight paths:
  * _stdlib_ : directory containing the standard Python library files that are not platform-specific.
  * _platstdlib_ : directory containing the standard Python library files that are platform-specific.
  * _platlib_ : directory for site-specific, platform-specific files.
  * _purelib_ : directory for site-specific, non-platform-specific files (‘pure’ Python).
  * _include_ : directory for non-platform-specific header files for the Python C-API.
  * _platinclude_ : directory for platform-specific header files for the Python C-API.
  * _scripts_ : directory for script files.
  * _data_ : directory for data files.