Title: Logging in Python: Formatting Messages
URL: https://docs.python.org/3/howto/logging.html
Summary: The logging package in Python uses %-style string formatting for merging variable data into event messages to maintain backwards compatibility. Although newer formatting methods like str.format() and string.Template are supported, they are not covered in this tutorial. Users can customize the format of displayed messages by specifying their desired format in the logging configuration.
---

```

As you can see, merging of variable data into the event description message uses the old, %-style of string formatting. This is for backwards compatibility: the logging package pre-dates newer formatting options such as [`str.format()`](https://docs.python.org/3/library/stdtypes.html#str.format "str.format") and [`string.Template`](https://docs.python.org/3/library/string.html#string.Template "string.Template"). These newer formatting options _are_ supported, but exploring them is outside the scope of this tutorial: see [Using particular formatting styles throughout your application](https://docs.python.org/3/howto/logging-cookbook.html#formatting-styles) for more information.
### Changing the format of displayed messages[¶](https://docs.python.org/3/howto/logging.html#changing-the-format-of-displayed-messages "Link to this heading")
To change the format which is used to display messages, you need to specify the format you want to use:
```
importlogging
logging.basicConfig(format='%(levelname)s:%(message)s', level=logging.DEBUG)
logging.debug('This message should appear on the console')
logging.info('So should this')
logging.warning('And this, too')

```

which would print:
```
DEBUG:This message should appear on the console
INFO:So should this
WARNING:And this, too

```

Notice that the ‘root’ which appeared in earlier examples has disappeared. For a full set of things that can appear in format strings, you can refer to the documentation for [LogRecord attributes](https://docs.python.org/3/library/logging.html#logrecord-attributes), but for simple usage, you just need the _levelname_ (severity), _message_ (event description, including variable data) and perhaps to display when the event occurred. This is described in the next section.
### Displaying the date/time in messages[¶](https://docs.python.org/3/howto/logging.html#displaying-the-date-time-in-messages "Link to this heading")
To display the date and time of an event, you would place ‘%(asctime)s’ in your format string:
```
importlogging
logging.basicConfig(format='%(asctime)s%(message)s')
logging.warning('is when this event was logged.')

```

which should print something like this:
```
2010-12-12 11:41:42,612 is when this event was logged.

```

The default format for date/time display (shown above) is like ISO8601 or [**RFC 3339**](https://datatracker.ietf.org/doc/html/rfc3339.html). If you need more control over the formatting of the date/time, provide a _datefmt_ argument to `basicConfig`, as in this example:
```
importlogging
logging.basicConfig(format='%(asctime)s%(message)s', datefmt='%m/%d/%Y %I:%M:%S %p')
logging.warning('is when this event was logged.')

```

which would display something like this:
```
12/12/2010 11:46:36 AM is when this event was logged.