Title: Python Build Updates
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section details recent updates to the Python build process, including avoiding automatic builds with Windows 11 SDK previews, freezing standard library modules during startup for performance improvements, and changes to how frozen modules are regenerated in Windows builds.
---

### Build[¶](https://docs.python.org/3/whatsnew/changelog.html#id283 "Link to this heading")
  * [bpo-45220](https://bugs.python.org/issue?@action=redirect&bpo=45220): Avoid building with the Windows 11 SDK previews automatically. This may be overridden by setting the `DefaultWindowsSDKVersion` environment variable before building.
  * [bpo-45020](https://bugs.python.org/issue?@action=redirect&bpo=45020): Freeze stdlib modules that are imported during startup. This provides significant performance improvements to startup. If necessary, use the previously added “-X frozen_modules=off” commandline option to force importing the source modules.
  * [bpo-45188](https://bugs.python.org/issue?@action=redirect&bpo=45188): Windows builds now regenerate frozen modules as the first part of the build. Previously the regeneration was later in the build, which would require it to be restarted if any modules had changed.
  * [bpo-45163](https://bugs.python.org/issue?@action=redirect&bpo=45163): Fixes Haiku platform build.
  * [bpo-45067](https://bugs.python.org/issue?@action=redirect&bpo=45067): The ncurses function extended_color_content was introduced in 2017
(<https://invisible-island.net/ncurses/NEWS.html#index-t20170401>). The
ncurses-devel package in CentOS 7 had a older version ncurses resulted in compilation error. For compiling ncurses with extended color support, we verify the version of the ncurses library >= 20170401.
  * [bpo-45019](https://bugs.python.org/issue?@action=redirect&bpo=45019): Generate lines in relevant files for frozen modules. Up until now each of the files had to be edited manually. This change makes it easier to add to and modify the frozen modules.
  * [bpo-44340](https://bugs.python.org/issue?@action=redirect&bpo=44340): Add support for building with clang thin lto via –with-lto=thin/full. Patch by Donghee Na and Brett Holman.
  * [bpo-44535](https://bugs.python.org/issue?@action=redirect&bpo=44535): Enable building using a Visual Studio 2022 install on Windows.
  * [bpo-43298](https://bugs.python.org/issue?@action=redirect&bpo=43298): Improved error message when building without a Windows SDK installed.
  * [bpo-44381](https://bugs.python.org/issue?@action=redirect&bpo=44381): The Windows build now accepts `EnableControlFlowGuard` set to `guard` to enable CFG.
  * [bpo-41282](https://bugs.python.org/issue?@action=redirect&bpo=41282): Fix broken `make install` that caused standard library extension modules to be unnecessarily and incorrectly rebuilt during the install phase of cpython.


### Windows[¶](https://docs.python.org/3/whatsnew/changelog.html#id284 "Link to this heading")
  * [bpo-45375](https://bugs.python.org/issue?@action=redirect&bpo=45375): Fixes an assertion failure due to searching for the standard library in unnormalised paths.
  * [bpo-45022](https://bugs.python.org/issue?@action=redirect&bpo=45022): Update Windows release to include libffi 3.4.2
  * [bpo-45007](https://bugs.python.org/issue?@action=redirect&bpo=45007): Update to OpenSSL 1.1.1l in Windows build
  * [bpo-44848](https://bugs.python.org/issue?@action=redirect&bpo=44848): Upgrade Windows installer to use SQLite 3.36.0.
  * [bpo-44572](https://bugs.python.org/issue?@action=redirect&bpo=44572): Avoid consuming standard input in the [`platform`](https://docs.python.org/3/library/platform.html#module-platform "platform: Retrieves as much platform identifying data as possible.") module
  * [bpo-44582](https://bugs.python.org/issue?@action=redirect&bpo=44582): Accelerate speed of [`mimetypes`](https://docs.python.org/3/library/mimetypes.html#module-mimetypes "mimetypes: Mapping of filename extensions to MIME types.") initialization using a native implementation of the registry scan.
  * [bpo-41299](https://bugs.python.org/issue?@action=redirect&bpo=41299): Fix 16 milliseconds jitter when using timeouts in [`threading`](https://docs.python.org/3/library/threading.html#module-threading "threading: Thread-based parallelism."), such as with [`threading.Lock.acquire()`](https://docs.python.org/3/library/threading.html#threading.Lock.acquire "threading.Lock.acquire") or [`threading.Condition.wait()`](https://docs.python.org/3/library/threading.html#threading.Condition.wait "threading.Condition.wait").
  * [bpo-42686](https://bugs.python.org/issue?@action=redirect&bpo=42686): Build [`sqlite3`](https://docs.python.org/3/library/sqlite3.html#module-sqlite3 "sqlite3: A DB-API 2.0 implementation using SQLite 3.x.") with math functions enabled. Patch by Erlend E. Aasland.
  * [bpo-40263](https://bugs.python.org/issue?@action=redirect&bpo=40263): This is a follow-on bug from <https://bugs.python.org/issue26903>. Once that is applied we run into an off-by-one assertion problem. The assert was not correct.