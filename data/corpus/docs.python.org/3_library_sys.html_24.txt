Title: Character Encoding and Error Handling in Python Streams
URL: https://docs.python.org/3/library/sys.html
Summary: This section explains how Python streams are treated as text files with encoding and error handling configurations initialized from `PyConfig`. On Windows, console devices use UTF-8 encoding, while non-character devices use the system's locale encoding. The encoding for non-console character devices is determined at startup based on the console input and output codepages.
---

These streams are regular [text files](https://docs.python.org/3/glossary.html#term-text-file) like those returned by the [`open()`](https://docs.python.org/3/library/functions.html#open "open") function. Their parameters are chosen as follows:
  * The encoding and error handling are is initialized from [`PyConfig.stdio_encoding`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.stdio_encoding "PyConfig.stdio_encoding") and [`PyConfig.stdio_errors`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.stdio_errors "PyConfig.stdio_errors").
On Windows, UTF-8 is used for the console device. Non-character devices such as disk files and pipes use the system locale encoding (i.e. the ANSI codepage). Non-console character devices such as NUL (i.e. where `isatty()` returns `True`) use the value of the console input and output codepages at startup, respectively for stdin and stdout/stderr. This defaults to the system [locale encoding](https://docs.python.org/3/glossary.html#term-locale-encoding) if the process is not initially attached to a console.
The special behaviour of the console can be overridden by setting the environment variable PYTHONLEGACYWINDOWSSTDIO before starting Python. In that case, the console codepages are used as for any other character device.
Under all platforms, you can override the character encoding by setting the [`PYTHONIOENCODING`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONIOENCODING) environment variable before starting Python or by using the new [`-X`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) `utf8` command line option and [`PYTHONUTF8`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONUTF8) environment variable. However, for the Windows console, this only applies when [`PYTHONLEGACYWINDOWSSTDIO`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONLEGACYWINDOWSSTDIO) is also set.
  * When interactive, the `stdout` stream is line-buffered. Otherwise, it is block-buffered like regular text files. The `stderr` stream is line-buffered in both cases. You can make both streams unbuffered by passing the [`-u`](https://docs.python.org/3/using/cmdline.html#cmdoption-u) command-line option or setting the [`PYTHONUNBUFFERED`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONUNBUFFERED) environment variable.


Changed in version 3.9: Non-interactive `stderr` is now line-buffered instead of fully buffered.
Note
To write or read binary data from/to the standard streams, use the underlying binary [`buffer`](https://docs.python.org/3/library/io.html#io.TextIOBase.buffer "io.TextIOBase.buffer") object. For example, to write bytes to [`stdout`](https://docs.python.org/3/library/sys.html#sys.stdout "sys.stdout"), use `sys.stdout.buffer.write(b'abc')`.
However, if you are writing a library (and do not control in which context its code will be executed), be aware that the standard streams may be replaced with file-like objects like [`io.StringIO`](https://docs.python.org/3/library/io.html#io.StringIO "io.StringIO") which do not support the `buffer` attribute. 

sys.__stdin__[¶](https://docs.python.org/3/library/sys.html#sys.__stdin__ "Link to this definition")


sys.__stdout__[¶](https://docs.python.org/3/library/sys.html#sys.__stdout__ "Link to this definition")


sys.__stderr__[¶](https://docs.python.org/3/library/sys.html#sys.__stderr__ "Link to this definition")
    
These objects contain the original values of `stdin`, `stderr` and `stdout` at the start of the program. They are used during finalization, and could be useful to print to the actual standard stream no matter if the `sys.std*` object has been redirected.
It can also be used to restore the actual files to known working file objects in case they have been overwritten with a broken object. However, the preferred way to do this is to explicitly save the previous stream before replacing it, and restore the saved object.
Note
Under some conditions `stdin`, `stdout` and `stderr` as well as the original values `__stdin__`, `__stdout__` and `__stderr__` can be `None`. It is usually the case for Windows GUI apps that aren’t connected to a console and Python apps started with **pythonw**.