Title: curses.window.insnstr and curses.window.insstr Methods
URL: https://docs.python.org/3/library/curses.html
Summary: The `window.insnstr` method inserts a character string before the current cursor position in a window, shifting right existing characters as necessary, with the option to limit the number of inserted characters. The `window.insstr` method operates similarly but without the character count constraint.
---

window.insnstr(_str_ , _n_[, _attr_])[¶](https://docs.python.org/3/library/curses.html#curses.window.insnstr "Link to this definition")


window.insnstr(_y_ , _x_ , _str_ , _n_[, _attr_])
    
Insert a character string (as many characters as will fit on the line) before the character under the cursor, up to _n_ characters. If _n_ is zero or negative, the entire string is inserted. All characters to the right of the cursor are shifted right, with the rightmost characters on the line being lost. The cursor position does not change (after moving to _y_ , _x_ , if specified). 

window.insstr(_str_[, _attr_])[¶](https://docs.python.org/3/library/curses.html#curses.window.insstr "Link to this definition")


window.insstr(_y_ , _x_ , _str_[, _attr_])
    
Insert a character string (as many characters as will fit on the line) before the character under the cursor. All characters to the right of the cursor are shifted right, with the rightmost characters on the line being lost. The cursor position does not change (after moving to _y_ , _x_ , if specified). 

window.instr([_n_])[¶](https://docs.python.org/3/library/curses.html#curses.window.instr "Link to this definition")


window.instr(_y_ , _x_[, _n_])
    
Return a bytes object of characters, extracted from the window starting at the current cursor position, or at _y_ , _x_ if specified. Attributes are stripped from the characters. If _n_ is specified, [`instr()`](https://docs.python.org/3/library/curses.html#curses.window.instr "curses.window.instr") returns a string at most _n_ characters long (exclusive of the trailing NUL). 

window.is_linetouched(_line_)[¶](https://docs.python.org/3/library/curses.html#curses.window.is_linetouched "Link to this definition")
    
Return `True` if the specified line was modified since the last call to [`refresh()`](https://docs.python.org/3/library/curses.html#curses.window.refresh "curses.window.refresh"); otherwise return `False`. Raise a [`curses.error`](https://docs.python.org/3/library/curses.html#curses.error "curses.error") exception if _line_ is not valid for the given window. 

window.is_wintouched()[¶](https://docs.python.org/3/library/curses.html#curses.window.is_wintouched "Link to this definition")
    
Return `True` if the specified window was modified since the last call to [`refresh()`](https://docs.python.org/3/library/curses.html#curses.window.refresh "curses.window.refresh"); otherwise return `False`. 

window.keypad(_flag_)[¶](https://docs.python.org/3/library/curses.html#curses.window.keypad "Link to this definition")
    
If _flag_ is `True`, escape sequences generated by some keys (keypad, function keys) will be interpreted by [`curses`](https://docs.python.org/3/library/curses.html#module-curses "curses: An interface to the curses library, providing portable terminal handling. \(Unix\)"). If _flag_ is `False`, escape sequences will be left as is in the input stream. 

window.leaveok(_flag_)[¶](https://docs.python.org/3/library/curses.html#curses.window.leaveok "Link to this definition")
    
If _flag_ is `True`, cursor is left where it is on update, instead of being at “cursor position.” This reduces cursor movement where possible. If possible the cursor will be made invisible.
If _flag_ is `False`, cursor will always be at “cursor position” after an update. 

window.move(_new_y_ , _new_x_)[¶](https://docs.python.org/3/library/curses.html#curses.window.move "Link to this definition")
    
Move cursor to `(new_y, new_x)`. 

window.mvderwin(_y_ , _x_)[¶](https://docs.python.org/3/library/curses.html#curses.window.mvderwin "Link to this definition")
    
Move the window inside its parent window. The screen-relative parameters of the window are not changed. This routine is used to display different parts of the parent window at the same physical position on the screen. 

window.mvwin(_new_y_ , _new_x_)[¶](https://docs.python.org/3/library/curses.html#curses.window.mvwin "Link to this definition")
    
Move the window so its upper-left corner is at `(new_y, new_x)`. 

window.nodelay(_flag_)[¶](https://docs.python.org/3/library/curses.html#curses.window.nodelay "Link to this definition")
    
If _flag_ is `True`, [`getch()`](https://docs.python.org/3/library/curses.html#curses.window.getch "curses.window.getch") will be non-blocking. 

window.notimeout(_flag_)[¶](https://docs.python.org/3/library/curses.html#curses.window.notimeout "Link to this definition")
    
If _flag_ is `True`, escape sequences will not be timed out.
If _flag_ is `False`, after a few milliseconds, an escape sequence will not be interpreted, and will be left in the input stream as is.