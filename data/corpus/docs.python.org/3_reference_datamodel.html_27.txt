Title: object.__hash__() Method
URL: https://docs.python.org/3/reference/datamodel.html
Summary: The `__hash__()` method is used to return an integer hash value for an object, which is essential for operations in hashed collections like sets and dictionaries. It must ensure that equal objects yield the same hash value, and it is recommended to combine the hash values of the object's attributes when defining this method.
---

object.__hash__(_self_)[¶](https://docs.python.org/3/reference/datamodel.html#object.__hash__ "Link to this definition")
    
Called by built-in function [`hash()`](https://docs.python.org/3/library/functions.html#hash "hash") and for operations on members of hashed collections including [`set`](https://docs.python.org/3/library/stdtypes.html#set "set"), [`frozenset`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset"), and [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict"). The `__hash__()` method should return an integer. The only required property is that objects which compare equal have the same hash value; it is advised to mix together the hash values of the components of the object that also play a part in comparison of objects by packing them into a tuple and hashing the tuple. Example:
```
def__hash__(self):
  return hash((self.name, self.nick, self.color))

```

Note
[`hash()`](https://docs.python.org/3/library/functions.html#hash "hash") truncates the value returned from an object’s custom [`__hash__()`](https://docs.python.org/3/reference/datamodel.html#object.__hash__ "object.__hash__") method to the size of a [`Py_ssize_t`](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t"). This is typically 8 bytes on 64-bit builds and 4 bytes on 32-bit builds. If an object’s [`__hash__()`](https://docs.python.org/3/reference/datamodel.html#object.__hash__ "object.__hash__") must interoperate on builds of different bit sizes, be sure to check the width on all supported builds. An easy way to do this is with `python -c "import sys; print(sys.hash_info.width)"`.
If a class does not define an [`__eq__()`](https://docs.python.org/3/reference/datamodel.html#object.__eq__ "object.__eq__") method it should not define a [`__hash__()`](https://docs.python.org/3/reference/datamodel.html#object.__hash__ "object.__hash__") operation either; if it defines [`__eq__()`](https://docs.python.org/3/reference/datamodel.html#object.__eq__ "object.__eq__") but not [`__hash__()`](https://docs.python.org/3/reference/datamodel.html#object.__hash__ "object.__hash__"), its instances will not be usable as items in hashable collections. If a class defines mutable objects and implements an [`__eq__()`](https://docs.python.org/3/reference/datamodel.html#object.__eq__ "object.__eq__") method, it should not implement [`__hash__()`](https://docs.python.org/3/reference/datamodel.html#object.__hash__ "object.__hash__"), since the implementation of [hashable](https://docs.python.org/3/glossary.html#term-hashable) collections requires that a key’s hash value is immutable (if the object’s hash value changes, it will be in the wrong hash bucket).
User-defined classes have [`__eq__()`](https://docs.python.org/3/reference/datamodel.html#object.__eq__ "object.__eq__") and [`__hash__()`](https://docs.python.org/3/reference/datamodel.html#object.__hash__ "object.__hash__") methods by default (inherited from the [`object`](https://docs.python.org/3/library/functions.html#object "object") class); with them, all objects compare unequal (except with themselves) and `x.__hash__()` returns an appropriate value such that `x == y` implies both that `x is y` and `hash(x) == hash(y)`.
A class that overrides [`__eq__()`](https://docs.python.org/3/reference/datamodel.html#object.__eq__ "object.__eq__") and does not define [`__hash__()`](https://docs.python.org/3/reference/datamodel.html#object.__hash__ "object.__hash__") will have its [`__hash__()`](https://docs.python.org/3/reference/datamodel.html#object.__hash__ "object.__hash__") implicitly set to `None`. When the [`__hash__()`](https://docs.python.org/3/reference/datamodel.html#object.__hash__ "object.__hash__") method of a class is `None`, instances of the class will raise an appropriate [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") when a program attempts to retrieve their hash value, and will also be correctly identified as unhashable when checking `isinstance(obj, collections.abc.Hashable)`.
If a class that overrides [`__eq__()`](https://docs.python.org/3/reference/datamodel.html#object.__eq__ "object.__eq__") needs to retain the implementation of [`__hash__()`](https://docs.python.org/3/reference/datamodel.html#object.__hash__ "object.__hash__") from a parent class, the interpreter must be told this explicitly by setting `__hash__ = <ParentClass>.__hash__`.
If a class that does not override [`__eq__()`](https://docs.python.org/3/reference/datamodel.html#object.__eq__ "object.__eq__") wishes to suppress hash support, it should include `__hash__ = None` in the class definition. A class which defines its own [`__hash__()`](https://docs.python.org/3/reference/datamodel.html#object.__hash__ "object.__hash__") that explicitly raises a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") would be incorrectly identified as hashable by an `isinstance(obj, collections.abc.Hashable)`