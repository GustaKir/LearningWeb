Title: New Features in Python 3.3 - Threading and Time Modules
URL: https://docs.python.org/3/whatsnew/3.3.html
Summary: Python 3.3 introduces a new public interface for thread identification, eliminating direct access to the `_thread` module for better compatibility. Additionally, PEP 418 adds functions to the `time` module, including `get_clock_info()`, `monotonic()`, and `perf_counter()`, enhancing time-related functionality.
---

get_ident()`](https://docs.python.org/3/library/threading.html#threading.get_ident "threading.get_ident"). This eliminates several cases of direct access to the `_thread` module in the stdlib. Third party code that used `_thread.get_ident` should likewise be changed to use the new public interface.
### time[¶](https://docs.python.org/3/whatsnew/3.3.html#time "Link to this heading")
The [**PEP 418**](https://peps.python.org/pep-0418/) added new functions to the [`time`](https://docs.python.org/3/library/time.html#module-time "time: Time access and conversions.") module:
  * [`get_clock_info()`](https://docs.python.org/3/library/time.html#time.get_clock_info "time.get_clock_info"): Get information on a clock.
  * [`monotonic()`](https://docs.python.org/3/library/time.html#time.monotonic "time.monotonic"): Monotonic clock (cannot go backward), not affected by system clock updates.
  * [`perf_counter()`](https://docs.python.org/3/library/time.html#time.perf_counter "time.perf_counter"): Performance counter with the highest available resolution to measure a short duration.
  * [`process_time()`](https://docs.python.org/3/library/time.html#time.process_time "time.process_time"): Sum of the system and user CPU time of the current process.


Other new functions:
  * [`clock_getres()`](https://docs.python.org/3/library/time.html#time.clock_getres "time.clock_getres"), [`clock_gettime()`](https://docs.python.org/3/library/time.html#time.clock_gettime "time.clock_gettime") and [`clock_settime()`](https://docs.python.org/3/library/time.html#time.clock_settime "time.clock_settime") functions with `CLOCK__xxx_`constants. (Contributed by Victor Stinner in[bpo-10278](https://bugs.python.org/issue?@action=redirect&bpo=10278).)


To improve cross platform consistency, [`sleep()`](https://docs.python.org/3/library/time.html#time.sleep "time.sleep") now raises a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") when passed a negative sleep value. Previously this was an error on posix, but produced an infinite sleep on Windows.
### types[¶](https://docs.python.org/3/whatsnew/3.3.html#types "Link to this heading")
Add a new [`types.MappingProxyType`](https://docs.python.org/3/library/types.html#types.MappingProxyType "types.MappingProxyType") class: Read-only proxy of a mapping. ([bpo-14386](https://bugs.python.org/issue?@action=redirect&bpo=14386))
The new functions [`types.new_class()`](https://docs.python.org/3/library/types.html#types.new_class "types.new_class") and [`types.prepare_class()`](https://docs.python.org/3/library/types.html#types.prepare_class "types.prepare_class") provide support for [**PEP 3115**](https://peps.python.org/pep-3115/) compliant dynamic type creation. ([bpo-14588](https://bugs.python.org/issue?@action=redirect&bpo=14588))
### unittest[¶](https://docs.python.org/3/whatsnew/3.3.html#unittest "Link to this heading")
[`assertRaises()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises "unittest.TestCase.assertRaises"), [`assertRaisesRegex()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaisesRegex "unittest.TestCase.assertRaisesRegex"), [`assertWarns()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertWarns "unittest.TestCase.assertWarns"), and [`assertWarnsRegex()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertWarnsRegex "unittest.TestCase.assertWarnsRegex") now accept a keyword argument _msg_ when used as context managers. (Contributed by Ezio Melotti and Winston Ewert in [bpo-10775](https://bugs.python.org/issue?@action=redirect&bpo=10775).)
[`unittest.TestCase.run()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.run "unittest.TestCase.run") now returns the [`TestResult`](https://docs.python.org/3/library/unittest.html#unittest.TestResult "unittest.TestResult") object.
### urllib[¶](https://docs.python.org/3/whatsnew/3.3.html#urllib "Link to this heading")
The [`Request`](https://docs.python.org/3/library/urllib.request.html#urllib.request.Request "urllib.request.Request") class, now accepts a _method_ argument used by [`get_method()`](https://docs.python.org/3/library/urllib.request.html#urllib.request.Request.get_method "urllib.request.Request.get_method") to determine what HTTP method should be used. For example, this will send a `'HEAD'` request:
>>>```
>>> urlopen(Request('https://www.python.org', method='HEAD'))