Title: Methods of SimpleHTTPRequestHandler: do_HEAD and do_GET
URL: https://docs.python.org/3/library/http.server.html
Summary: This section describes the `do_HEAD()` method, which handles 'HEAD' requests by sending headers similar to those of a 'GET' request. It also explains the `do_GET()` method, which maps requests to local files, prioritizing `index.html` or `index.htm` in directories and generating directory listings when no such files exist.
---

do_HEAD()[¶](https://docs.python.org/3/library/http.server.html#http.server.SimpleHTTPRequestHandler.do_HEAD "Link to this definition")
    
This method serves the `'HEAD'` request type: it sends the headers it would send for the equivalent `GET` request. See the [`do_GET()`](https://docs.python.org/3/library/http.server.html#http.server.SimpleHTTPRequestHandler.do_GET "http.server.SimpleHTTPRequestHandler.do_GET") method for a more complete explanation of the possible headers. 

do_GET()[¶](https://docs.python.org/3/library/http.server.html#http.server.SimpleHTTPRequestHandler.do_GET "Link to this definition")
    
The request is mapped to a local file by interpreting the request as a path relative to the current working directory.
If the request was mapped to a directory, the directory is checked for a file named `index.html` or `index.htm` (in that order). If found, the file’s contents are returned; otherwise a directory listing is generated by calling the `list_directory()` method. This method uses [`os.listdir()`](https://docs.python.org/3/library/os.html#os.listdir "os.listdir") to scan the directory, and returns a `404` error response if the [`listdir()`](https://docs.python.org/3/library/os.html#os.listdir "os.listdir") fails.
If the request was mapped to a file, it is opened. Any [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") exception in opening the requested file is mapped to a `404`, `'File not found'` error. If there was an `'If-Modified-Since'` header in the request, and the file was not modified after this time, a `304`, `'Not Modified'` response is sent. Otherwise, the content type is guessed by calling the `guess_type()` method, which in turn uses the _extensions_map_ variable, and the file contents are returned.
A `'Content-type:'` header with the guessed content type is output, followed by a `'Content-Length:'` header with the file’s size and a `'Last-Modified:'` header with the file’s modification time.
Then follows a blank line signifying the end of the headers, and then the contents of the file are output. If the file’s MIME type starts with `text/` the file is opened in text mode; otherwise binary mode is used.
For example usage, see the implementation of the `test` function in [Lib/http/server.py](https://github.com/python/cpython/tree/3.13/Lib/http/server.py).
Changed in version 3.7: Support of the `'If-Modified-Since'` header.
The [`SimpleHTTPRequestHandler`](https://docs.python.org/3/library/http.server.html#http.server.SimpleHTTPRequestHandler "http.server.SimpleHTTPRequestHandler") class can be used in the following manner in order to create a very basic webserver serving files relative to the current directory:
```
importhttp.server
importsocketserver
PORT = 8000
Handler = http.server.SimpleHTTPRequestHandler
with socketserver.TCPServer(("", PORT), Handler) as httpd:
  print("serving at port", PORT)
  httpd.serve_forever()