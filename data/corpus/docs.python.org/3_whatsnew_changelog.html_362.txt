Title: Changes in Core and Builtins
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section details various updates and fixes in the Python core and built-ins, including an update to the CPython bytecode magic number, enhancements in error handling with ImportWarning, optimizations to the bytecode interpreter's instruction handling, and resolutions of reference leaks in the _hashopenssl extension.
---

### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id300 "Link to this heading")
  * [bpo-27129](https://bugs.python.org/issue?@action=redirect&bpo=27129): Update CPython bytecode magic number.
  * [bpo-43672](https://bugs.python.org/issue?@action=redirect&bpo=43672): Raise ImportWarning when calling find_loader().
  * [bpo-43660](https://bugs.python.org/issue?@action=redirect&bpo=43660): Fix crash that happens when replacing `sys.stderr` with a callable that can remove the object while an exception is being printed. Patch by Pablo Galindo.
  * [bpo-27129](https://bugs.python.org/issue?@action=redirect&bpo=27129): The bytecode interpreter uses instruction, rather byte, offsets internally. This reduces the number of EXTENDED_ARG instructions needed and streamlines instruction dispatch a bit.
  * [bpo-40645](https://bugs.python.org/issue?@action=redirect&bpo=40645): Fix reference leak in the `_hashopenssl` extension. Patch by Pablo Galindo.
  * [bpo-42134](https://bugs.python.org/issue?@action=redirect&bpo=42134): Calls to find_module() by the import system now raise ImportWarning.
  * [bpo-41064](https://bugs.python.org/issue?@action=redirect&bpo=41064): Improve the syntax error for invalid usage of double starred elements (‘**’) in f-strings. Patch by Pablo Galindo.
  * [bpo-43575](https://bugs.python.org/issue?@action=redirect&bpo=43575): Speed up calls to `map()` by using the [**PEP 590**](https://peps.python.org/pep-0590/) `vectorcall` calling convention. Patch by Donghee Na.
  * [bpo-42137](https://bugs.python.org/issue?@action=redirect&bpo=42137): The import system now prefers using `__spec__` for `ModuleType.__repr__` over `module_repr()`.
  * [bpo-43452](https://bugs.python.org/issue?@action=redirect&bpo=43452): Added micro-optimizations to `_PyType_Lookup()` to improve cache lookup performance in the common case of cache hits.
  * [bpo-43555](https://bugs.python.org/issue?@action=redirect&bpo=43555): Report the column offset for [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") for invalid line continuation characters. Patch by Pablo Galindo.
  * [bpo-43517](https://bugs.python.org/issue?@action=redirect&bpo=43517): Fix misdetection of circular imports when using `from pkg.mod import attr`, which caused false positives in non-trivial multi-threaded code.
  * [bpo-43497](https://bugs.python.org/issue?@action=redirect&bpo=43497): Emit SyntaxWarnings for assertions with tuple constants, this is a regression introduced in python3.7
  * [bpo-39316](https://bugs.python.org/issue?@action=redirect&bpo=39316): Tracing now has correct line numbers for attribute accesses when the attribute is on a different line from the object. Improves debugging and profiling for multi-line method chains.
  * [bpo-35883](https://bugs.python.org/issue?@action=redirect&bpo=35883): Python no longer fails at startup with a fatal error if a command line argument contains an invalid Unicode character. The [`Py_DecodeLocale()`](https://docs.python.org/3/c-api/sys.html#c.Py_DecodeLocale "Py_DecodeLocale") function now escapes byte sequences which would be decoded as Unicode characters outside the [U+0000; U+10ffff] range.
  * [bpo-43410](https://bugs.python.org/issue?@action=redirect&bpo=43410): Fix a bug that was causing the parser to crash when emitting syntax errors when reading input from stdin. Patch by Pablo Galindo
  * [bpo-43406](https://bugs.python.org/issue?@action=redirect&bpo=43406): Fix a possible race condition where `PyErr_CheckSignals` tries to execute a non-Python signal handler.
  * [bpo-42128](https://bugs.python.org/issue?@action=redirect&bpo=42128): Add `__match_args__` to [struct sequence objects](https://docs.python.org/3/c-api/tuple.html#struct-sequence-objects). Patch by Pablo Galindo.
  * [bpo-43390](https://bugs.python.org/issue?@action=redirect&bpo=43390): CPython now sets the `SA_ONSTACK` flag in `PyOS_setsig` for the VM’s default signal handlers. This is friendlier to other in-process code that an extension module or embedding use could pull in (such as Golang’s cgo) where tiny thread stacks are the norm and `sigaltstack()` has been used to provide for signal handlers. This is a no-op change for the vast majority of processes that don’t use sigaltstack.
  * [bpo-43287](https://bugs.python.org/issue?@action=redirect&bpo=43287): Speed up calls to `filter()` by using the [**PEP 590**](https://peps.python.org/pep-0590/) `vectorcall` calling convention. Patch by Donghee Na.
  * [bpo-37448](https://bugs.python.org/issue?@action=redirect&bpo=37448): Add a radix tree based memory map to track in-use obmalloc arenas. Use to replace the old implementation of address_in_range(). The radix tree approach makes it easy to increase pool sizes beyond the OS page size. Boosting the pool and arena size allows obmalloc to handle a significantly higher percentage of requests from its ultra-fast paths.
It also has the advantage of eliminating the memory un