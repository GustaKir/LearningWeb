Title: Introduction to the Curses Module
URL: https://docs.python.org/3/howto/curses.html
Summary: This document outlines the usage of the curses extension module for controlling text-mode displays. It explains how the curses library provides a terminal-independent interface for screen painting and keyboard handling in various text-based terminals, despite the decline of character-cell displays.
---

Release:
    
2.04
Abstract
This document describes how to use the [`curses`](https://docs.python.org/3/library/curses.html#module-curses "curses: An interface to the curses library, providing portable terminal handling. \(Unix\)") extension module to control text-mode displays.
## What is curses?[¶](https://docs.python.org/3/howto/curses.html#what-is-curses "Link to this heading")
The curses library supplies a terminal-independent screen-painting and keyboard-handling facility for text-based terminals; such terminals include VT100s, the Linux console, and the simulated terminal provided by various programs. Display terminals support various control codes to perform common operations such as moving the cursor, scrolling the screen, and erasing areas. Different terminals use widely differing codes, and often have their own minor quirks.
In a world of graphical displays, one might ask “why bother”? It’s true that character-cell display terminals are an obsolete technology, but there are niches in which being able to do fancy things with them are still valuable. One niche is on small-footprint or embedded Unixes that don’t run an X server. Another is tools such as OS installers and kernel configurators that may have to run before any graphical support is available.
The curses library provides fairly basic functionality, providing the programmer with an abstraction of a display containing multiple non-overlapping windows of text. The contents of a window can be changed in various ways—adding text, erasing it, changing its appearance—and the curses library will figure out what control codes need to be sent to the terminal to produce the right output. curses doesn’t provide many user-interface concepts such as buttons, checkboxes, or dialogs; if you need such features, consider a user interface library such as [Urwid](https://pypi.org/project/Urwid/).
The curses library was originally written for BSD Unix; the later System V versions of Unix from AT&T added many enhancements and new functions. BSD curses is no longer maintained, having been replaced by ncurses, which is an open-source implementation of the AT&T interface. If you’re using an open-source Unix such as Linux or FreeBSD, your system almost certainly uses ncurses. Since most current commercial Unix versions are based on System V code, all the functions described here will probably be available. The older versions of curses carried by some proprietary Unixes may not support everything, though.
The Windows version of Python doesn’t include the [`curses`](https://docs.python.org/3/library/curses.html#module-curses "curses: An interface to the curses library, providing portable terminal handling. \(Unix\)") module. A ported version called [UniCurses](https://pypi.org/project/UniCurses/) is available.
### The Python curses module[¶](https://docs.python.org/3/howto/curses.html#the-python-curses-module "Link to this heading")
The Python module is a fairly simple wrapper over the C functions provided by curses; if you’re already familiar with curses programming in C, it’s really easy to transfer that knowledge to Python. The biggest difference is that the Python interface makes things simpler by merging different C functions such as `addstr()`, `mvaddstr()`, and `mvwaddstr()` into a single [`addstr()`](https://docs.python.org/3/library/curses.html#curses.window.addstr "curses.window.addstr") method. You’ll see this covered in more detail later.
This HOWTO is an introduction to writing text-mode programs with curses and Python. It doesn’t attempt to be a complete guide to the curses API; for that, see the Python library guide’s section on ncurses, and the C manual pages for ncurses. It will, however, give you the basic ideas.
## Starting and ending a curses application[¶](https://docs.python.org/3/howto/curses.html#starting-and-ending-a-curses-application "Link to this heading")
Before doing anything, curses must be initialized. This is done by calling the [`initscr()`](https://docs.python.org/3/library/curses.html#curses.initscr "curses.initscr") function, which will determine the terminal type, send any required setup codes to the terminal, and create various internal data structures. If successful, `initscr()` returns a window object representing the entire screen; this is usually called `stdscr` after the name of the corresponding C variable.
```
importcurses
stdscr = curses.initscr()

```

Usually curses applications turn off automatic echoing of keys to the screen, in order to be able to read keys and only display them under certain circumstances. This requires calling the [`noecho()`](https://docs.python.org/3/library/curses.html#curses.noecho "curses.noecho") function.
```
curses.noecho()

```

Applications will also commonly need to react to keys instantly, without requiring the Enter key to be pressed; this is called cbreak mode, as opposed to the usual buffered input mode.
```
curses.cbreak()