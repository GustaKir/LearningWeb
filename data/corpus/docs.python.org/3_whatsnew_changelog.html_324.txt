Title: Python 3 Change Log – Recent Enhancements
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: Recent changes include improved performance for exact integer exponentiation, optimizations in import statements by using regular attribute access methods, and adaptive specialization for LOAD_GLOBAL with new specialized forms. Additionally, there are enhancements in error messaging for invalid 'as' targets.
---

Patch by Pablo Galindo.
  * [bpo-44376](https://bugs.python.org/issue?@action=redirect&bpo=44376): Exact integer exponentiation (like `i**2` or `pow(i, 2)`) with a small exponent is much faster, due to reducing overhead in such cases.
  * [bpo-44313](https://bugs.python.org/issue?@action=redirect&bpo=44313): Directly imported objects and modules (through import and from import statements) don’t generate `LOAD_METHOD`/`CALL_METHOD` for directly accessed objects on their namespace. They now use the regular `LOAD_ATTR`/`CALL_FUNCTION`.
  * [bpo-44338](https://bugs.python.org/issue?@action=redirect&bpo=44338): Implement adaptive specialization for LOAD_GLOBAL
Two specialized forms of LOAD_GLOBAL are added:
    * LOAD_GLOBAL_MODULE
    * LOAD_GLOBAL_BUILTIN
  * [bpo-44368](https://bugs.python.org/issue?@action=redirect&bpo=44368): Improve syntax errors for invalid “as” targets. Patch by Pablo Galindo
  * [bpo-44349](https://bugs.python.org/issue?@action=redirect&bpo=44349): Fix an edge case when displaying text from files with encoding in syntax errors. Patch by Pablo Galindo.
  * [bpo-44337](https://bugs.python.org/issue?@action=redirect&bpo=44337): Initial implementation of adaptive specialization of LOAD_ATTR
Four specialized forms of LOAD_ATTR are added:
    * LOAD_ATTR_SLOT
    * LOAD_ATTR_SPLIT_KEYS
    * LOAD_ATTR_WITH_HINT
    * LOAD_ATTR_MODULE
  * [bpo-44335](https://bugs.python.org/issue?@action=redirect&bpo=44335): Fix a regression when identifying incorrect characters in syntax errors. Patch by Pablo Galindo
  * [bpo-43693](https://bugs.python.org/issue?@action=redirect&bpo=43693): Computation of the offsets of cell variables is done in the compiler instead of at runtime. This reduces the overhead of handling cell and free variables, especially in the case where a variable is both an argument and cell variable.
  * [bpo-44317](https://bugs.python.org/issue?@action=redirect&bpo=44317): Improve tokenizer error with improved locations. Patch by Pablo Galindo.
  * [bpo-44304](https://bugs.python.org/issue?@action=redirect&bpo=44304): Fix a crash in the [`sqlite3`](https://docs.python.org/3/library/sqlite3.html#module-sqlite3 "sqlite3: A DB-API 2.0 implementation using SQLite 3.x.") module that happened when the garbage collector clears `sqlite.Statement` objects. Patch by Pablo Galindo
  * [bpo-44305](https://bugs.python.org/issue?@action=redirect&bpo=44305): Improve error message for `try` blocks without `except` or `finally` blocks. Patch by Pablo Galindo.
  * [bpo-43413](https://bugs.python.org/issue?@action=redirect&bpo=43413): Constructors of subclasses of some builtin classes (e.g. [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple"), [`list`](https://docs.python.org/3/library/stdtypes.html#list "list"), [`frozenset`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset")) no longer accept arbitrary keyword arguments. [reverted in 3.11a4] Subclass of [`set`](https://docs.python.org/3/library/stdtypes.html#set "set") can now define a `__new__()` method with additional keyword parameters without overriding also `__init__()`.
  * [bpo-43667](https://bugs.python.org/issue?@action=redirect&bpo=43667): Improve Unicode support in non-UTF locales on Oracle Solaris. This issue does not affect other Solaris systems.
  * [bpo-43693](https://bugs.python.org/issue?@action=redirect&bpo=43693): A new opcode MAKE_CELL has been added that effectively moves some of the work done on function entry into the compiler and into the eval loop. In addition to creating the required cell objects, the new opcode converts relevant arguments (and other locals) to cell variables on function entry.
  * [bpo-44232](https://bugs.python.org/issue?@action=redirect&bpo=44232): Fix a regression in [`type()`](https://docs.python.org/3/library/functions.html#type "type") when a metaclass raises an exception. The C function `type_new()` must properly report the exception when a metaclass constructor raises an exception and the winner class is not the metaclass. Patch by Victor Stinner.
  * [bpo-44201](https://bugs.python.org/issue?@action=redirect&bpo=44201): Avoid side effects of checking for specialized syntax errors in the REPL that was causing it to ask for extra tokens after a syntax error had been detected. Patch by Pablo Galindo
  * [bpo-43693](https://bugs.python.org/issue?@action=redirect&bpo=43693): `PyCodeObject` gained `co_fastlocalnames` and `co_fastlocalkinds` as the authoritative source of fast locals info. Marshaled code objects have changed accordingly.
  * [bpo-44184](https://bugs.python.org/issue?@action=redirect&bpo=44184): Fix a crash at Python exit when a deallocator function removes the last strong reference to a heap type. Patch by Victor Stinner.
  * [bpo-44187](https://bugs.python.org/issue?@action=redirect&bpo=44187): Implement quickening in the interpreter. This offers no advantages as yet, but is an enabler of future optimizations.