Title: Enhancements to the os Module in Python 3.13
URL: https://docs.python.org/3/whatsnew/3.13.html
Summary: Python 3.13 introduces the `process_cpu_count()` function to retrieve the number of logical CPU cores for the current process. Additionally, both `cpu_count()` and `process_cpu_count()` can be overridden using the new `PYTHON_CPU_COUNT` environment variable or the `-X cpu_count` command-line option, facilitating resource management in container systems.
---

### os[¶](https://docs.python.org/3/whatsnew/3.13.html#os "Link to this heading")
  * Add [`process_cpu_count()`](https://docs.python.org/3/library/os.html#os.process_cpu_count "os.process_cpu_count") function to get the number of logical CPU cores usable by the calling thread of the current process. (Contributed by Victor Stinner in [gh-109649](https://github.com/python/cpython/issues/109649).)
  * [`cpu_count()`](https://docs.python.org/3/library/os.html#os.cpu_count "os.cpu_count") and [`process_cpu_count()`](https://docs.python.org/3/library/os.html#os.process_cpu_count "os.process_cpu_count") can be overridden through the new environment variable [`PYTHON_CPU_COUNT`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHON_CPU_COUNT) or the new command-line option [`-X cpu_count`](https://docs.python.org/3/using/cmdline.html#cmdoption-X). This option is useful for users who need to limit CPU resources of a container system without having to modify application code or the container itself. (Contributed by Donghee Na in [gh-109595](https://github.com/python/cpython/issues/109595).)
  * Add a [low level interface](https://docs.python.org/3/library/os.html#os-timerfd) to Linux’s _[timer file descriptors](https://manpages.debian.org/timerfd_create\(2\))_ via [`timerfd_create()`](https://docs.python.org/3/library/os.html#os.timerfd_create "os.timerfd_create"), [`timerfd_settime()`](https://docs.python.org/3/library/os.html#os.timerfd_settime "os.timerfd_settime"), [`timerfd_settime_ns()`](https://docs.python.org/3/library/os.html#os.timerfd_settime_ns "os.timerfd_settime_ns"), [`timerfd_gettime()`](https://docs.python.org/3/library/os.html#os.timerfd_gettime "os.timerfd_gettime"), [`timerfd_gettime_ns()`](https://docs.python.org/3/library/os.html#os.timerfd_gettime_ns "os.timerfd_gettime_ns"), [`TFD_NONBLOCK`](https://docs.python.org/3/library/os.html#os.TFD_NONBLOCK "os.TFD_NONBLOCK"), [`TFD_CLOEXEC`](https://docs.python.org/3/library/os.html#os.TFD_CLOEXEC "os.TFD_CLOEXEC"), [`TFD_TIMER_ABSTIME`](https://docs.python.org/3/library/os.html#os.TFD_TIMER_ABSTIME "os.TFD_TIMER_ABSTIME"), and [`TFD_TIMER_CANCEL_ON_SET`](https://docs.python.org/3/library/os.html#os.TFD_TIMER_CANCEL_ON_SET "os.TFD_TIMER_CANCEL_ON_SET") (Contributed by Masaru Tsuchiyama in [gh-108277](https://github.com/python/cpython/issues/108277).)
  * [`lchmod()`](https://docs.python.org/3/library/os.html#os.lchmod "os.lchmod") and the _follow_symlinks_ argument of [`chmod()`](https://docs.python.org/3/library/os.html#os.chmod "os.chmod") are both now available on Windows. Note that the default value of _follow_symlinks_ in `lchmod()` is `False` on Windows. (Contributed by Serhiy Storchaka in [gh-59616](https://github.com/python/cpython/issues/59616).)
  * [`fchmod()`](https://docs.python.org/3/library/os.html#os.fchmod "os.fchmod") and support for file descriptors in [`chmod()`](https://docs.python.org/3/library/os.html#os.chmod "os.chmod") are both now available on Windows. (Contributed by Serhiy Storchaka in [gh-113191](https://github.com/python/cpython/issues/113191).)
  * On Windows, [`mkdir()`](https://docs.python.org/3/library/os.html#os.mkdir "os.mkdir") and [`makedirs()`](https://docs.python.org/3/library/os.html#os.makedirs "os.makedirs") now support passing a _mode_ value of `0o700` to apply access control to the new directory. This implicitly affects [`tempfile.mkdtemp()`](https://docs.python.org/3/library/tempfile.html#tempfile.mkdtemp "tempfile.mkdtemp") and is a mitigation for [**CVE 2024-4030**](https://www.cve.org/CVERecord?id=CVE-2024-4030). Other values for _mode_ continue to be ignored. (Contributed by Steve Dower in [gh-118486](https://github.com/python/cpython/issues/118486).)
  * [`posix_spawn()`](https://docs.python.org/3/library/os.html#os.posix_spawn "os.posix_spawn") now accepts `None` for the _env_ argument, which makes the newly spawned process use the current process environment. (Contributed by Jakub Kulik in [gh-113119](https://github.com/python/cpython/issues/113119).)
  * [`posix_spawn()`](https://docs.python.org/3/library/os.html#os.posix_spawn "os.posix_spawn") can now use the [`POSIX_SPAWN_CLOSEFROM`](https://docs.python.org/3/library/os.html#os.POSIX_SPAWN_CLOSEFROM "os.POSIX_SPAWN_CLOSEFROM") attribute in the _file_actions_ parameter on platforms that support `posix_spawn_file_actions_addclosefrom_np()`. (Contributed by Jakub Kulik in [gh-113117](https://github.com/python/cpython/issues/113117).)