Title: Python Core and Builtins Updates
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section details various updates and optimizations in Python's core and built-in functions, including reductions in instruction dispatch for performance, the addition of a deallocator for boolean types to catch refcount bugs, optimizations to the sum() function for single-digit integers, and updates to Unicode databases to version 14.0.0.
---

### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id279 "Link to this heading")
  * [bpo-43760](https://bugs.python.org/issue?@action=redirect&bpo=43760): The number of hardware branches per instruction dispatch is reduced from two to one by adding a special instruction for tracing. Patch by Mark Shannon.
  * [bpo-45061](https://bugs.python.org/issue?@action=redirect&bpo=45061): Add a deallocator to the bool type to detect refcount bugs in C extensions which call Py_DECREF(Py_True) or Py_DECREF(Py_False) by mistake. Detect also refcount bugs when the empty tuple singleton or the Unicode empty string singleton is destroyed by mistake. Patch by Victor Stinner.
  * [bpo-24076](https://bugs.python.org/issue?@action=redirect&bpo=24076): sum() was further optimised for summing up single digit integers.
  * [bpo-45190](https://bugs.python.org/issue?@action=redirect&bpo=45190): Update Unicode databases to Unicode 14.0.0.
  * [bpo-45167](https://bugs.python.org/issue?@action=redirect&bpo=45167): Fix deepcopying of [`types.GenericAlias`](https://docs.python.org/3/library/types.html#types.GenericAlias "types.GenericAlias") objects.
  * [bpo-45155](https://bugs.python.org/issue?@action=redirect&bpo=45155): [`int.to_bytes()`](https://docs.python.org/3/library/stdtypes.html#int.to_bytes "int.to_bytes") and [`int.from_bytes()`](https://docs.python.org/3/library/stdtypes.html#int.from_bytes "int.from_bytes") now take a default value of `"big"` for the `byteorder` argument. [`int.to_bytes()`](https://docs.python.org/3/library/stdtypes.html#int.to_bytes "int.to_bytes") also takes a default value of `1` for the `length` argument.
  * [bpo-44219](https://bugs.python.org/issue?@action=redirect&bpo=44219): Release the GIL while performing `isatty` system calls on arbitrary file descriptors. In particular, this affects [`os.isatty()`](https://docs.python.org/3/library/os.html#os.isatty "os.isatty"), [`os.device_encoding()`](https://docs.python.org/3/library/os.html#os.device_encoding "os.device_encoding") and [`io.TextIOWrapper`](https://docs.python.org/3/library/io.html#io.TextIOWrapper "io.TextIOWrapper"). By extension, [`io.open()`](https://docs.python.org/3/library/io.html#io.open "io.open") in text mode is also affected. This change solves a deadlock in [`os.isatty()`](https://docs.python.org/3/library/os.html#os.isatty "os.isatty"). Patch by Vincent Michel in [bpo-44219](https://bugs.python.org/issue?@action=redirect&bpo=44219).
  * [bpo-44959](https://bugs.python.org/issue?@action=redirect&bpo=44959): Added fallback to extension modules with ‘.sl’ suffix on HP-UX
  * [bpo-45121](https://bugs.python.org/issue?@action=redirect&bpo=45121): Fix issue where `Protocol.__init__` raises `RecursionError` when it’s called directly or via `super()`. Patch provided by Yurii Karabas.
  * [bpo-44348](https://bugs.python.org/issue?@action=redirect&bpo=44348): The deallocator function of the [`BaseException`](https://docs.python.org/3/library/exceptions.html#BaseException "BaseException") type now uses the trashcan mechanism to prevent stack overflow. For example, when a [`RecursionError`](https://docs.python.org/3/library/exceptions.html#RecursionError "RecursionError") instance is raised, it can be linked to another RecursionError through the `__context__` attribute or the `__traceback__` attribute, and then a chain of exceptions is created. When the chain is destroyed, nested deallocator function calls can crash with a stack overflow if the chain is too long compared to the available stack memory. Patch by Victor Stinner.
  * [bpo-45123](https://bugs.python.org/issue?@action=redirect&bpo=45123): Fix PyAiter_Check to only check for the __anext__ presence (not for __aiter__). Rename PyAiter_Check to PyAIter_Check, PyObject_GetAiter -> PyObject_GetAIter.
  * [bpo-1514420](https://bugs.python.org/issue?@action=redirect&bpo=1514420): Interpreter no longer attempts to open files with names in angle brackets (like “<string>” or “<stdin>”) when formatting an exception.
  * [bpo-41031](https://bugs.python.org/issue?@action=redirect&bpo=41031): Match C and Python code formatting of unprintable exceptions and exceptions in the [`__main__`](https://docs.python.org/3/library/__main__.html#module-__main__ "__main__: The environment where top-level code is run. Covers command-line interfaces, import-time behavior, and ``__name__ == '__main__'``.") module.
  * [bpo-37330](https://bugs.python.org/issue?@action=redirect&bpo=37330): [`open()`](https://docs.python.org/3/library/functions.html#open "open"), [`io.open()`](https://docs.python.org/3/library/io.html#io.open "io.open"), [`codecs.open()`](https://docs.python.org/3/library/codecs.html#codecs.open "codecs.open") and [`fileinput.FileInput`](https://docs.python.org/3/library/fileinput.html#fileinput.FileInput "fileinput.FileInput") no longer accept `'U'` (“universal newline”) in the file mode. This flag was deprecated since Python 3.3. Patch by Victor Stinner.
  * [bpo-450