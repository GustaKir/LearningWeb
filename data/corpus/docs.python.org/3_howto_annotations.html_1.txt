Title: Best Practices for Working with Annotations in Python
URL: https://docs.python.org/3/howto/annotations.html
Summary: This document outlines best practices for accessing and using the `__annotations__` dictionary in Python. It includes guidelines for Python 3.10 and newer, as well as older versions, and highlights various considerations and quirks related to `__annotations__` usage. The focus is on `__annotations__` management rather than type hints, which are covered in the `typing` module.
---

author:
    
Larry Hastings
Abstract
This document is designed to encapsulate the best practices for working with annotations dicts. If you write Python code that examines `__annotations__` on Python objects, we encourage you to follow the guidelines described below.
The document is organized into four sections: best practices for accessing the annotations of an object in Python versions 3.10 and newer, best practices for accessing the annotations of an object in Python versions 3.9 and older, other best practices for `__annotations__` that apply to any Python version, and quirks of `__annotations__`.
Note that this document is specifically about working with `__annotations__`, not uses _for_ annotations. If you’re looking for information on how to use “type hints” in your code, please see the [`typing`](https://docs.python.org/3/library/typing.html#module-typing "typing: Support for type hints \(see :pep:`484`\).") module.
## Accessing The Annotations Dict Of An Object In Python 3.10 And Newer[¶](https://docs.python.org/3/howto/annotations.html#accessing-the-annotations-dict-of-an-object-in-python-3-10-and-newer "Link to this heading")
Python 3.10 adds a new function to the standard library: [`inspect.get_annotations()`](https://docs.python.org/3/library/inspect.html#inspect.get_annotations "inspect.get_annotations"). In Python versions 3.10 and newer, calling this function is the best practice for accessing the annotations dict of any object that supports annotations. This function can also “un-stringize” stringized annotations for you.
If for some reason [`inspect.get_annotations()`](https://docs.python.org/3/library/inspect.html#inspect.get_annotations "inspect.get_annotations") isn’t viable for your use case, you may access the `__annotations__` data member manually. Best practice for this changed in Python 3.10 as well: as of Python 3.10, `o.__annotations__` is guaranteed to _always_ work on Python functions, classes, and modules. If you’re certain the object you’re examining is one of these three _specific_ objects, you may simply use `o.__annotations__` to get at the object’s annotations dict.
However, other types of callables–for example, callables created by [`functools.partial()`](https://docs.python.org/3/library/functools.html#functools.partial "functools.partial")–may not have an `__annotations__` attribute defined. When accessing the `__annotations__` of a possibly unknown object, best practice in Python versions 3.10 and newer is to call [`getattr()`](https://docs.python.org/3/library/functions.html#getattr "getattr") with three arguments, for example `getattr(o, '__annotations__', None)`.
Before Python 3.10, accessing `__annotations__` on a class that defines no annotations but that has a parent class with annotations would return the parent’s `__annotations__`. In Python 3.10 and newer, the child class’s annotations will be an empty dict instead.
## Accessing The Annotations Dict Of An Object In Python 3.9 And Older[¶](https://docs.python.org/3/howto/annotations.html#accessing-the-annotations-dict-of-an-object-in-python-3-9-and-older "Link to this heading")
In Python 3.9 and older, accessing the annotations dict of an object is much more complicated than in newer versions. The problem is a design flaw in these older versions of Python, specifically to do with class annotations.
Best practice for accessing the annotations dict of other objects–functions, other callables, and modules–is the same as best practice for 3.10, assuming you aren’t calling [`inspect.get_annotations()`](https://docs.python.org/3/library/inspect.html#inspect.get_annotations "inspect.get_annotations"): you should use three-argument [`getattr()`](https://docs.python.org/3/library/functions.html#getattr "getattr") to access the object’s `__annotations__` attribute.
Unfortunately, this isn’t best practice for classes. The problem is that, since `__annotations__` is optional on classes, and because classes can inherit attributes from their base classes, accessing the `__annotations__` attribute of a class may inadvertently return the annotations dict of a _base class._ As an example:
```
classBase:
  a: int = 3
  b: str = 'abc'
classDerived(Base):
  pass
print(Derived.__annotations__)