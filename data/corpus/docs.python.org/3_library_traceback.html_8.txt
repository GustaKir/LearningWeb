Title: Using the traceback Module in Python
URL: https://docs.python.org/3/library/traceback.html
Summary: This document provides examples of using the traceback module to handle exceptions in Python code. It includes a function to run user code within a specific environment and demonstrates various methods to print and format exception tracebacks, such as print_tb, print_exception, and print_exc, showcasing how to limit the output to specific lines.
---

```
importsys,traceback
defrun_user_code(envdir):
  source = input(">>> ")
  try:
    exec(source, envdir)
  except Exception:
    print("Exception in user code:")
    print("-"*60)
    traceback.print_exc(file=sys.stdout)
    print("-"*60)
envdir = {}
while True:
  run_user_code(envdir)

```

The following example demonstrates the different ways to print and format the exception and traceback:
```
importsys,traceback
deflumberjack():
  bright_side_of_life()
defbright_side_of_life():
  return tuple()[0]
try:
  lumberjack()
except IndexError as exc:
  print("*** print_tb:")
  traceback.print_tb(exc.__traceback__, limit=1, file=sys.stdout)
  print("*** print_exception:")
  traceback.print_exception(exc, limit=2, file=sys.stdout)
  print("*** print_exc:")
  traceback.print_exc(limit=2, file=sys.stdout)
  print("*** format_exc, first and last line:")
  formatted_lines = traceback.format_exc().splitlines()
  print(formatted_lines[0])
  print(formatted_lines[-1])
  print("*** format_exception:")
  print(repr(traceback.format_exception(exc)))
  print("*** extract_tb:")
  print(repr(traceback.extract_tb(exc.__traceback__)))
  print("*** format_tb:")
  print(repr(traceback.format_tb(exc.__traceback__)))
  print("*** tb_lineno:", exc.__traceback__.tb_lineno)

```

The output for the example would look similar to this:
```
*** print_tb:
 File "<doctest...>", line 10, in <module>
  lumberjack()
  ~~~~~~~~~~^^
*** print_exception:
Traceback (most recent call last):
 File "<doctest...>", line 10, in <module>
  lumberjack()
  ~~~~~~~~~~^^
 File "<doctest...>", line 4, in lumberjack
  bright_side_of_life()
  ~~~~~~~~~~~~~~~~~~~^^
IndexError: tuple index out of range
*** print_exc:
Traceback (most recent call last):
 File "<doctest...>", line 10, in <module>
  lumberjack()
  ~~~~~~~~~~^^
 File "<doctest...>", line 4, in lumberjack
  bright_side_of_life()
  ~~~~~~~~~~~~~~~~~~~^^
IndexError: tuple index out of range
*** format_exc, first and last line:
Traceback (most recent call last):
IndexError: tuple index out of range
*** format_exception:
['Traceback (most recent call last):\n',
 ' File "<doctest default[0]>", line 10, in <module>\n  lumberjack()\n  ~~~~~~~~~~^^\n',
 ' File "<doctest default[0]>", line 4, in lumberjack\n  bright_side_of_life()\n  ~~~~~~~~~~~~~~~~~~~^^\n',
 ' File "<doctest default[0]>", line 7, in bright_side_of_life\n  return tuple()[0]\n      ~~~~~~~^^^\n',
 'IndexError: tuple index out of range\n']
*** extract_tb:
[<FrameSummary file <doctest...>, line 10 in <module>>,
 <FrameSummary file <doctest...>, line 4 in lumberjack>,
 <FrameSummary file <doctest...>, line 7 in bright_side_of_life>]
*** format_tb:
[' File "<doctest default[0]>", line 10, in <module>\n  lumberjack()\n  ~~~~~~~~~~^^\n',
 ' File "<doctest default[0]>", line 4, in lumberjack\n  bright_side_of_life()\n  ~~~~~~~~~~~~~~~~~~~^^\n',
 ' File "<doctest default[0]>", line 7, in bright_side_of_life\n  return tuple()[0]\n      ~~~~~~~^^^\n']
*** tb_lineno: 10

```

The following example shows the different ways to print and format the stack:
>>>```
>>> importtraceback
>>> defanother_function():
...   lumberstack()
...
>>> deflumberstack():
...   traceback.print_stack()
...   print(repr(traceback.extract_stack()))
...   print(repr(traceback.format_stack()))
...
>>> another_function()
 File "<doctest>", line 10, in <module>
another_function()
 File "<doctest>", line 3, in another_function
lumberstack()
 File "<doctest>", line 6, in lumberstack
traceback.print_stack()
[('<doctest>', 10, '<module>', 'another_function()'),
 ('<doctest>', 3, 'another_function', 'lumberstack()'),
 ('<doctest>', 7, 'lumberstack', 'print(repr(traceback.extract_stack()))')]
[' File "<doctest>", line 10, in <module>\n  another_function()\n',
 ' File "<doctest>", line 3, in another_function\n  lumberstack()\n',
 ' File "<doctest>", line 8, in lumberstack\n  print(repr(traceback.format_stack()))\n']

```

This last example demonstrates the final few formatting functions:
>>>```
>>> importtraceback
>>> traceback.format_list([('spam.py', 3, '<module>', 'spam.eggs()'),
...             ('eggs.py', 42, 'eggs', 'return "bacon"')])
[' File "spam.py", line 3, in <module>\n  spam.eggs()\n',
 ' File "eggs.py", line 42, in eggs\n  return "bacon"\n']
>>> an_error = IndexError('tuple index out of range')
>>> traceback.format_exception_only(an_error)
['IndexError: tuple index out of range\n']

```

## Examples of Using [`TracebackException`](https://docs.python.org/3/library/traceback.html#traceback.TracebackException "traceback.TracebackException")[Â¶](https://docs.python.org/3/library/traceback.html#examples-of-using-tracebackexception "Link to this heading")
With the helper class, we have more options:
>>>