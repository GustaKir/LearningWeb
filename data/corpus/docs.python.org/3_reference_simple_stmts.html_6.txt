Title: Deletion in Python
URL: https://docs.python.org/3/reference/simple_stmts.html
Summary: This section covers the concept of deletion in Python, explaining that it recursively deletes targets from left to right. It clarifies that deleting a name removes its binding from the local or global namespace, and that attempting to delete an unbound name raises a NameError. It also discusses the deletion of attributes, subscriptions, and slices, noting that deleting a slice equates to assigning an empty slice of the correct type. Additionally, it mentions changes in version 3.2 regarding local namespace deletions.
---

```

Deletion is recursively defined very similar to the way assignment is defined. Rather than spelling it out in full details, here are some hints.
Deletion of a target list recursively deletes each target, from left to right.
Deletion of a name removes the binding of that name from the local or global namespace, depending on whether the name occurs in a [`global`](https://docs.python.org/3/reference/simple_stmts.html#global) statement in the same code block. If the name is unbound, a [`NameError`](https://docs.python.org/3/library/exceptions.html#NameError "NameError") exception will be raised.
Deletion of attribute references, subscriptions and slicings is passed to the primary object involved; deletion of a slicing is in general equivalent to assignment of an empty slice of the right type (but even this is determined by the sliced object).
Changed in version 3.2: Previously it was illegal to delete a name from the local namespace if it occurs as a free variable in a nested block.
## 7.6. The `return` statement[¶](https://docs.python.org/3/reference/simple_stmts.html#the-return-statement "Link to this heading")
```
**return_stmt** ::= "return" [[expression_list](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-expression_list)]

```

[`return`](https://docs.python.org/3/reference/simple_stmts.html#return) may only occur syntactically nested in a function definition, not within a nested class definition.
If an expression list is present, it is evaluated, else `None` is substituted.
[`return`](https://docs.python.org/3/reference/simple_stmts.html#return) leaves the current function call with the expression list (or `None`) as return value.
When [`return`](https://docs.python.org/3/reference/simple_stmts.html#return) passes control out of a [`try`](https://docs.python.org/3/reference/compound_stmts.html#try) statement with a [`finally`](https://docs.python.org/3/reference/compound_stmts.html#finally) clause, that `finally` clause is executed before really leaving the function.
In a generator function, the [`return`](https://docs.python.org/3/reference/simple_stmts.html#return) statement indicates that the generator is done and will cause [`StopIteration`](https://docs.python.org/3/library/exceptions.html#StopIteration "StopIteration") to be raised. The returned value (if any) is used as an argument to construct [`StopIteration`](https://docs.python.org/3/library/exceptions.html#StopIteration "StopIteration") and becomes the [`StopIteration.value`](https://docs.python.org/3/library/exceptions.html#StopIteration.value "StopIteration.value") attribute.
In an asynchronous generator function, an empty [`return`](https://docs.python.org/3/reference/simple_stmts.html#return) statement indicates that the asynchronous generator is done and will cause [`StopAsyncIteration`](https://docs.python.org/3/library/exceptions.html#StopAsyncIteration "StopAsyncIteration") to be raised. A non-empty `return` statement is a syntax error in an asynchronous generator function.
## 7.7. The `yield` statement[¶](https://docs.python.org/3/reference/simple_stmts.html#the-yield-statement "Link to this heading")
```
**yield_stmt** ::= [yield_expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-yield_expression)

```

A [`yield`](https://docs.python.org/3/reference/simple_stmts.html#yield) statement is semantically equivalent to a [yield expression](https://docs.python.org/3/reference/expressions.html#yieldexpr). The `yield` statement can be used to omit the parentheses that would otherwise be required in the equivalent yield expression statement. For example, the yield statements
```
yield <expr>
yield from <expr>

```

are equivalent to the yield expression statements
```
(yield <expr>)
(yield from <expr>)

```

Yield expressions and statements are only used when defining a [generator](https://docs.python.org/3/glossary.html#term-generator) function, and are only used in the body of the generator function. Using [`yield`](https://docs.python.org/3/reference/simple_stmts.html#yield) in a function definition is sufficient to cause that definition to create a generator function instead of a normal function.
For full details of [`yield`](https://docs.python.org/3/reference/simple_stmts.html#yield) semantics, refer to the [Yield expressions](https://docs.python.org/3/reference/expressions.html#yieldexpr) section.
## 7.8. The `raise` statement[¶](https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement "Link to this heading")
```
**raise_stmt** ::= "raise" [[expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-expression) ["from" [expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-expression)]]