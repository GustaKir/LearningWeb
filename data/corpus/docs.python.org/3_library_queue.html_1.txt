Title: queue.PriorityQueue Class
URL: https://docs.python.org/3/library/queue.html
Summary: The `queue.PriorityQueue` class implements a priority queue where items are retrieved in order of their priority. It accepts an optional `_maxsize` to limit the queue capacity; if set to zero or less, the queue is infinite. Items are typically tuples of `(priority_number, data)`, and if data is non-comparable, it can be wrapped in a class that prioritizes the comparison by the priority number.
---

_class_ queue.PriorityQueue(_maxsize =0_)[¶](https://docs.python.org/3/library/queue.html#queue.PriorityQueue "Link to this definition")
    
Constructor for a priority queue. _maxsize_ is an integer that sets the upperbound limit on the number of items that can be placed in the queue. Insertion will block once this size has been reached, until queue items are consumed. If _maxsize_ is less than or equal to zero, the queue size is infinite.
The lowest valued entries are retrieved first (the lowest valued entry is the one that would be returned by `min(entries)`). A typical pattern for entries is a tuple in the form: `(priority_number, data)`.
If the _data_ elements are not comparable, the data can be wrapped in a class that ignores the data item and only compares the priority number:
```
fromdataclassesimport dataclass, field
fromtypingimport Any
@dataclass(order=True)
classPrioritizedItem:
  priority: int
  item: Any=field(compare=False)

```


_class_ queue.SimpleQueue[¶](https://docs.python.org/3/library/queue.html#queue.SimpleQueue "Link to this definition")
    
Constructor for an unbounded FIFO queue. Simple queues lack advanced functionality such as task tracking.
Added in version 3.7. 

_exception_ queue.Empty[¶](https://docs.python.org/3/library/queue.html#queue.Empty "Link to this definition")
    
Exception raised when non-blocking [`get()`](https://docs.python.org/3/library/queue.html#queue.Queue.get "queue.Queue.get") (or [`get_nowait()`](https://docs.python.org/3/library/queue.html#queue.Queue.get_nowait "queue.Queue.get_nowait")) is called on a [`Queue`](https://docs.python.org/3/library/queue.html#queue.Queue "queue.Queue") object which is empty. 

_exception_ queue.Full[¶](https://docs.python.org/3/library/queue.html#queue.Full "Link to this definition")
    
Exception raised when non-blocking [`put()`](https://docs.python.org/3/library/queue.html#queue.Queue.put "queue.Queue.put") (or [`put_nowait()`](https://docs.python.org/3/library/queue.html#queue.Queue.put_nowait "queue.Queue.put_nowait")) is called on a [`Queue`](https://docs.python.org/3/library/queue.html#queue.Queue "queue.Queue") object which is full. 

_exception_ queue.ShutDown[¶](https://docs.python.org/3/library/queue.html#queue.ShutDown "Link to this definition")
    
Exception raised when [`put()`](https://docs.python.org/3/library/queue.html#queue.Queue.put "queue.Queue.put") or [`get()`](https://docs.python.org/3/library/queue.html#queue.Queue.get "queue.Queue.get") is called on a [`Queue`](https://docs.python.org/3/library/queue.html#queue.Queue "queue.Queue") object which has been shut down.
Added in version 3.13.
## Queue Objects[¶](https://docs.python.org/3/library/queue.html#queue-objects "Link to this heading")
Queue objects ([`Queue`](https://docs.python.org/3/library/queue.html#queue.Queue "queue.Queue"), [`LifoQueue`](https://docs.python.org/3/library/queue.html#queue.LifoQueue "queue.LifoQueue"), or [`PriorityQueue`](https://docs.python.org/3/library/queue.html#queue.PriorityQueue "queue.PriorityQueue")) provide the public methods described below. 

Queue.qsize()[¶](https://docs.python.org/3/library/queue.html#queue.Queue.qsize "Link to this definition")
    
Return the approximate size of the queue. Note, qsize() > 0 doesn’t guarantee that a subsequent get() will not block, nor will qsize() < maxsize guarantee that put() will not block. 

Queue.empty()[¶](https://docs.python.org/3/library/queue.html#queue.Queue.empty "Link to this definition")
    
Return `True` if the queue is empty, `False` otherwise. If empty() returns `True` it doesn’t guarantee that a subsequent call to put() will not block. Similarly, if empty() returns `False` it doesn’t guarantee that a subsequent call to get() will not block. 

Queue.full()[¶](https://docs.python.org/3/library/queue.html#queue.Queue.full "Link to this definition")
    
Return `True` if the queue is full, `False` otherwise. If full() returns `True` it doesn’t guarantee that a subsequent call to get() will not block. Similarly, if full() returns `False` it doesn’t guarantee that a subsequent call to put() will not block.