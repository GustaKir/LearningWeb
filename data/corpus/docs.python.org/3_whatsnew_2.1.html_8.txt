Title: PEP 208: New Coercion Model
URL: https://docs.python.org/3/whatsnew/2.1.html
Summary: This section details significant modifications to the numeric coercion model at the C level in Python, impacting C extension authors. Extension types can now indicate support for this new coercion model, allowing them to handle differing argument types in numeric operations and perform internal coercion.
---

```

See also 

[**PEP 217**](https://peps.python.org/pep-0217/) - Display Hook for Interactive Use
    
Written and implemented by Moshe Zadka.
## PEP 208: New Coercion Model[¶](https://docs.python.org/3/whatsnew/2.1.html#pep-208-new-coercion-model "Link to this heading")
How numeric coercion is done at the C level was significantly modified. This will only affect the authors of C extensions to Python, allowing them more flexibility in writing extension types that support numeric operations.
Extension types can now set the type flag `Py_TPFLAGS_CHECKTYPES` in their `PyTypeObject` structure to indicate that they support the new coercion model. In such extension types, the numeric slot functions can no longer assume that they’ll be passed two arguments of the same type; instead they may be passed two arguments of differing types, and can then perform their own internal coercion. If the slot function is passed a type it can’t handle, it can indicate the failure by returning a reference to the `Py_NotImplemented` singleton value. The numeric functions of the other type will then be tried, and perhaps they can handle the operation; if the other type also returns `Py_NotImplemented`, then a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") will be raised. Numeric methods written in Python can also return `Py_NotImplemented`, causing the interpreter to act as if the method did not exist (perhaps raising a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError"), perhaps trying another object’s numeric methods).
See also 

[**PEP 208**](https://peps.python.org/pep-0208/) - Reworking the Coercion Model
    
Written and implemented by Neil Schemenauer, heavily based upon earlier work by Marc-André Lemburg. Read this to understand the fine points of how numeric operations will now be processed at the C level.
## PEP 241: Metadata in Python Packages[¶](https://docs.python.org/3/whatsnew/2.1.html#pep-241-metadata-in-python-packages "Link to this heading")
A common complaint from Python users is that there’s no single catalog of all the Python modules in existence. T. Middleton’s Vaults of Parnassus at `www.vex.net/parnassus/` (retired in February 2009, [available in the Internet Archive Wayback Machine](https://web.archive.org/web/20090130140102/http://www.vex.net/parnassus/)) was the largest catalog of Python modules, but registering software at the Vaults is optional, and many people did not bother.
As a first small step toward fixing the problem, Python software packaged using the Distutils **sdist** command will include a file named `PKG-INFO` containing information about the package such as its name, version, and author (metadata, in cataloguing terminology). [**PEP 241**](https://peps.python.org/pep-0241/) contains the full list of fields that can be present in the `PKG-INFO` file. As people began to package their software using Python 2.1, more and more packages will include metadata, making it possible to build automated cataloguing systems and experiment with them. With the result experience, perhaps it’ll be possible to design a really good catalog and then build support for it into Python 2.2. For example, the Distutils **sdist** and **bdist_*** commands could support an `upload` option that would automatically upload your package to a catalog server.
You can start creating packages containing `PKG-INFO` even if you’re not using Python 2.1, since a new release of the Distutils will be made for users of earlier Python versions. Version 1.0.2 of the Distutils includes the changes described in [**PEP 241**](https://peps.python.org/pep-0241/), as well as various bugfixes and enhancements. It will be available from the Distutils SIG at <https://www.python.org/community/sigs/current/distutils-sig/>.
See also 

[**PEP 241**](https://peps.python.org/pep-0241/) - Metadata for Python Software Packages
    
Written and implemented by A.M. Kuchling. 

[**PEP 243**](https://peps.python.org/pep-0243/) - Module Repository Upload Mechanism
    
Written by Sean Reifschneider, this draft PEP describes a proposed mechanism for uploading Python packages to a central server.
## New and Improved Modules[¶](https://docs.python.org/3/whatsnew/2.1.html#new-and-improved-modules "Link to this heading")
  * Ka-Ping Yee contributed two new modules: `inspect.py`, a module for getting information about live Python code, and `pydoc.py`, a module for interactively converting docstrings to HTML or text. As a bonus, `Tools/scripts/pydoc`, which is now automatically installed, uses `pydoc.py` to display documentation given a Python module, package, or class name. For example, `pydoc xml.dom` displays the following: