Title: PEP 486: Awareness of Virtual Environments in Python Launcher
URL: https://docs.python.org/3/whatsnew/3.5.html
Summary: PEP 486 updates the Windows Python launcher to recognize and utilize the interpreter from an active virtual environment when the 'VIRTUAL_ENV' environment variable is set, enhancing virtual environment support.
---

```

See also 

[**PEP 485**](https://peps.python.org/pep-0485/) – A function for testing approximate equality
    
PEP written by Christopher Barker; implemented by Chris Barker and Tal Einat.
### PEP 486: Make the Python Launcher aware of virtual environments[¶](https://docs.python.org/3/whatsnew/3.5.html#pep-486-make-the-python-launcher-aware-of-virtual-environments "Link to this heading")
[**PEP 486**](https://peps.python.org/pep-0486/) makes the Windows launcher (see [**PEP 397**](https://peps.python.org/pep-0397/)) aware of an active virtual environment. When the default interpreter would be used and the `VIRTUAL_ENV` environment variable is set, the interpreter in the virtual environment will be used.
See also 

[**PEP 486**](https://peps.python.org/pep-0486/) – Make the Python Launcher aware of virtual environments
    
PEP written and implemented by Paul Moore.
### PEP 488: Elimination of PYO files[¶](https://docs.python.org/3/whatsnew/3.5.html#pep-488-elimination-of-pyo-files "Link to this heading")
[**PEP 488**](https://peps.python.org/pep-0488/) does away with the concept of `.pyo` files. This means that `.pyc` files represent both unoptimized and optimized bytecode. To prevent the need to constantly regenerate bytecode files, `.pyc` files now have an optional `opt-` tag in their name when the bytecode is optimized. This has the side-effect of no more bytecode file name clashes when running under either [`-O`](https://docs.python.org/3/using/cmdline.html#cmdoption-O) or [`-OO`](https://docs.python.org/3/using/cmdline.html#cmdoption-OO). Consequently, bytecode files generated from [`-O`](https://docs.python.org/3/using/cmdline.html#cmdoption-O), and [`-OO`](https://docs.python.org/3/using/cmdline.html#cmdoption-OO) may now exist simultaneously. [`importlib.util.cache_from_source()`](https://docs.python.org/3/library/importlib.html#importlib.util.cache_from_source "importlib.util.cache_from_source") has an updated API to help with this change.
See also 

[**PEP 488**](https://peps.python.org/pep-0488/) – Elimination of PYO files
    
PEP written and implemented by Brett Cannon.
### PEP 489: Multi-phase extension module initialization[¶](https://docs.python.org/3/whatsnew/3.5.html#pep-489-multi-phase-extension-module-initialization "Link to this heading")
[**PEP 489**](https://peps.python.org/pep-0489/) updates extension module initialization to take advantage of the two step module loading mechanism introduced by [**PEP 451**](https://peps.python.org/pep-0451/) in Python 3.4.
This change brings the import semantics of extension modules that opt-in to using the new mechanism much closer to those of Python source and bytecode modules, including the ability to use any valid identifier as a module name, rather than being restricted to ASCII.
See also 

[**PEP 489**](https://peps.python.org/pep-0489/) – Multi-phase extension module initialization
    
PEP written by Petr Viktorin, Stefan Behnel, and Nick Coghlan; implemented by Petr Viktorin.
## Other Language Changes[¶](https://docs.python.org/3/whatsnew/3.5.html#other-language-changes "Link to this heading")
Some smaller changes made to the core Python language are:
  * Added the `"namereplace"` error handlers. The `"backslashreplace"` error handlers now work with decoding and translating. (Contributed by Serhiy Storchaka in [bpo-19676](https://bugs.python.org/issue?@action=redirect&bpo=19676) and [bpo-22286](https://bugs.python.org/issue?@action=redirect&bpo=22286).)
  * The [`-b`](https://docs.python.org/3/using/cmdline.html#cmdoption-b) option now affects comparisons of [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") with [`int`](https://docs.python.org/3/library/functions.html#int "int"). (Contributed by Serhiy Storchaka in [bpo-23681](https://bugs.python.org/issue?@action=redirect&bpo=23681).)
  * New Kazakh `kz1048` and Tajik `koi8_t` [codecs](https://docs.python.org/3/library/codecs.html#standard-encodings). (Contributed by Serhiy Storchaka in [bpo-22682](https://bugs.python.org/issue?@action=redirect&bpo=22682) and [bpo-22681](https://bugs.python.org/issue?@action=redirect&bpo=22681).)
  * Property docstrings are now writable. This is especially useful for [`collections.namedtuple()`](https://docs.python.org/3/library/collections.html#collections.namedtuple "collections.namedtuple") docstrings. (Contributed by Berker Peksag in [bpo-24064](https://bugs.python.org/issue?@action=redirect&bpo=24064).)
  * Circular imports involving relative imports are now supported. (Contributed by Brett Cannon and Antoine Pitrou in [bpo-17636](https://bugs.python.org/issue?@action=redirect&bpo=17636).)