Title: Python Change Log Updates
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section discusses improvements in Python's handling of reference leaks in binary extension modules, particularly with typed C API-based extensions. It emphasizes the reduction of harm through better isolation, as well as fixes for issues such as an infinite loop in unittest caused by self-referencing chained exceptions, and updates to various asyncio functions.
---

ient to reference leaks in binary extension modules.
Previously, a reference leak in a typed C API-based extension module could leak internals of the typing module, which could in turn introduce leaks in essentially any other package with typed function signatures. Although the typing package is not the original source of the problem, such non-local dependences exacerbate debugging of large-scale projects, and the implementation was therefore changed to reduce harm by providing better isolation.
  * [gh-98458](https://github.com/python/cpython/issues/98458): Fix infinite loop in unittest when a self-referencing chained exception is raised
  * [gh-93453](https://github.com/python/cpython/issues/93453): [`asyncio.get_event_loop()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.get_event_loop "asyncio.get_event_loop") and many other [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O.") functions like [`asyncio.ensure_future()`](https://docs.python.org/3/library/asyncio-future.html#asyncio.ensure_future "asyncio.ensure_future"), [`asyncio.shield()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.shield "asyncio.shield") or [`asyncio.gather()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.gather "asyncio.gather"), and also the `get_event_loop()` method of `asyncio.BaseDefaultEventLoopPolicy` now raise a [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError") if called when there is no running event loop and the current event loop was not set. Previously they implicitly created and set a new current event loop. [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning") is no longer emitted if there is no running event loop but the current event loop was set.
  * [gh-97966](https://github.com/python/cpython/issues/97966): On `uname_result`, restored expectation that `_fields` and `_asdict` would include all six properties including `processor`.
  * [gh-98248](https://github.com/python/cpython/issues/98248): Provide informative error messages in [`struct.pack()`](https://docs.python.org/3/library/struct.html#struct.pack "struct.pack") when its integral arguments are not in range.
  * [gh-98108](https://github.com/python/cpython/issues/98108): `zipfile.Path` is now pickleable if its initialization parameters were pickleable (e.g. for file system paths).
  * [gh-98098](https://github.com/python/cpython/issues/98098): Created packages from zipfile and test_zipfile modules, separating `zipfile.Path` functionality.
  * [gh-82836](https://github.com/python/cpython/issues/82836): Fix [`is_private`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address.is_private "ipaddress.IPv4Address.is_private") properties in the [`ipaddress`](https://docs.python.org/3/library/ipaddress.html#module-ipaddress "ipaddress: IPv4/IPv6 manipulation library.") module. Previously non-private networks (0.0.0.0/0) would return `True` from this method; now they correctly return `False`.
  * [gh-96828](https://github.com/python/cpython/issues/96828): Add an [`OP_ENABLE_KTLS`](https://docs.python.org/3/library/ssl.html#ssl.OP_ENABLE_KTLS "ssl.OP_ENABLE_KTLS") option for enabling the use of the kernel TLS (kTLS). Patch by Illia Volochii.
  * [gh-88863](https://github.com/python/cpython/issues/88863): To avoid apparent memory leaks when [`asyncio.open_connection()`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.open_connection "asyncio.open_connection") raises, break reference cycles generated by local exception and future instances (which has exception instance as its member var). Patch by Dong Uk, Kang.
  * [gh-91078](https://github.com/python/cpython/issues/91078): `TarFile.next()` now returns `None` when called on an empty tarfile.
  * [bpo-47220](https://bugs.python.org/issue?@action=redirect&bpo=47220): Document the optional _callback_ parameter of `WeakMethod`. Patch by GÃ©ry Ogam.
  * [bpo-44817](https://bugs.python.org/issue?@action=redirect&bpo=44817): Ignore WinError 53 (ERROR_BAD_NETPATH), 65 (ERROR_NETWORK_ACCESS_DENIED) and 161 (ERROR_BAD_PATHNAME) when using ntpath.realpath().
  * [bpo-41260](https://bugs.python.org/issue?@action=redirect&bpo=41260): Rename the _fmt_ parameter of the pure Python implementation of [`datetime.date.strftime()`](https://docs.python.org/3/library/datetime.html#datetime.date.strftime "datetime.date.strftime") to _format_.
  * [bpo-15999](https://bugs.python.org/issue?@action=redirect&bpo=15999): All built-in functions now accept arguments of any type instead of just `bool` and `int` for boolean parameters.