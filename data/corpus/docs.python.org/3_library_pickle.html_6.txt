Title: pickle.Pickler Class
URL: https://docs.python.org/3/library/pickle.html
Summary: The pickle.Pickler class is used for writing a pickle data stream to a binary file. It accepts a required 'file' argument and an optional 'protocol' argument to specify the pickle protocol version. If 'protocol' is not specified, the default is used; negative values select the highest protocol version. The 'file' must support a write() method that takes a single bytes argument.
---

_class_ pickle.Pickler(_file_ , _protocol =None_, _*_ , _fix_imports =True_, _buffer_callback =None_)[¶](https://docs.python.org/3/library/pickle.html#pickle.Pickler "Link to this definition")
    
This takes a binary file for writing a pickle data stream.
The optional _protocol_ argument, an integer, tells the pickler to use the given protocol; supported protocols are 0 to [`HIGHEST_PROTOCOL`](https://docs.python.org/3/library/pickle.html#pickle.HIGHEST_PROTOCOL "pickle.HIGHEST_PROTOCOL"). If not specified, the default is [`DEFAULT_PROTOCOL`](https://docs.python.org/3/library/pickle.html#pickle.DEFAULT_PROTOCOL "pickle.DEFAULT_PROTOCOL"). If a negative number is specified, [`HIGHEST_PROTOCOL`](https://docs.python.org/3/library/pickle.html#pickle.HIGHEST_PROTOCOL "pickle.HIGHEST_PROTOCOL") is selected.
The _file_ argument must have a write() method that accepts a single bytes argument. It can thus be an on-disk file opened for binary writing, an [`io.BytesIO`](https://docs.python.org/3/library/io.html#io.BytesIO "io.BytesIO") instance, or any other custom object that meets this interface.
If _fix_imports_ is true and _protocol_ is less than 3, pickle will try to map the new Python 3 names to the old module names used in Python 2, so that the pickle data stream is readable with Python 2.
If _buffer_callback_ is `None` (the default), buffer views are serialized into _file_ as part of the pickle stream.
If _buffer_callback_ is not `None`, then it can be called any number of times with a buffer view. If the callback returns a false value (such as `None`), the given buffer is [out-of-band](https://docs.python.org/3/library/pickle.html#pickle-oob); otherwise the buffer is serialized in-band, i.e. inside the pickle stream.
It is an error if _buffer_callback_ is not `None` and _protocol_ is `None` or smaller than 5.
Changed in version 3.8: The _buffer_callback_ argument was added. 

dump(_obj_)[¶](https://docs.python.org/3/library/pickle.html#pickle.Pickler.dump "Link to this definition")
    
Write the pickled representation of _obj_ to the open file object given in the constructor. 

persistent_id(_obj_)[¶](https://docs.python.org/3/library/pickle.html#pickle.Pickler.persistent_id "Link to this definition")
    
Do nothing by default. This exists so a subclass can override it.
If [`persistent_id()`](https://docs.python.org/3/library/pickle.html#pickle.Pickler.persistent_id "pickle.Pickler.persistent_id") returns `None`, _obj_ is pickled as usual. Any other value causes [`Pickler`](https://docs.python.org/3/library/pickle.html#pickle.Pickler "pickle.Pickler") to emit the returned value as a persistent ID for _obj_. The meaning of this persistent ID should be defined by [`Unpickler.persistent_load()`](https://docs.python.org/3/library/pickle.html#pickle.Unpickler.persistent_load "pickle.Unpickler.persistent_load"). Note that the value returned by [`persistent_id()`](https://docs.python.org/3/library/pickle.html#pickle.Pickler.persistent_id "pickle.Pickler.persistent_id") cannot itself have a persistent ID.
See [Persistence of External Objects](https://docs.python.org/3/library/pickle.html#pickle-persistent) for details and examples of uses.
Changed in version 3.13: Add the default implementation of this method in the C implementation of `Pickler`.