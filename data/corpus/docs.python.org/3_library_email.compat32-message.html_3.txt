Title: Email Compatibility: Message Class Methods
URL: https://docs.python.org/3/library/email.compat32-message.html
Summary: This documentation discusses the methods added in Python version 3.4 for the email.message.Message class, specifically `__bytes__()` and `is_multipart()`. The `__bytes__()` method allows conversion of a message to a bytes object, while `is_multipart()` checks if the message's payload consists of sub-message objects.
---

```

Added in version 3.4. 

__bytes__()[¶](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.__bytes__ "Link to this definition")
    
Equivalent to [`as_bytes()`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.as_bytes "email.message.Message.as_bytes"). Allows `bytes(msg)` to produce a bytes object containing the formatted message.
Added in version 3.4. 

is_multipart()[¶](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.is_multipart "Link to this definition")
    
Return `True` if the message’s payload is a list of sub-[`Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "email.message.Message") objects, otherwise return `False`. When [`is_multipart()`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.is_multipart "email.message.Message.is_multipart") returns `False`, the payload should be a string object (which might be a CTE encoded binary payload). (Note that [`is_multipart()`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.is_multipart "email.message.Message.is_multipart") returning `True` does not necessarily mean that “msg.get_content_maintype() == ‘multipart’” will return the `True`. For example, `is_multipart` will return `True` when the [`Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "email.message.Message") is of type `message/rfc822`.) 

set_unixfrom(_unixfrom_)[¶](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.set_unixfrom "Link to this definition")
    
Set the message’s envelope header to _unixfrom_ , which should be a string. 

get_unixfrom()[¶](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.get_unixfrom "Link to this definition")
    
Return the message’s envelope header. Defaults to `None` if the envelope header was never set. 

attach(_payload_)[¶](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.attach "Link to this definition")
    
Add the given _payload_ to the current payload, which must be `None` or a list of [`Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "email.message.Message") objects before the call. After the call, the payload will always be a list of [`Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "email.message.Message") objects. If you want to set the payload to a scalar object (e.g. a string), use [`set_payload()`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.set_payload "email.message.Message.set_payload") instead.
This is a legacy method. On the `EmailMessage` class its functionality is replaced by [`set_content()`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.set_content "email.message.EmailMessage.set_content") and the related `make` and `add` methods.