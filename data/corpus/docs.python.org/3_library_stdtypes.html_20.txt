Title: Format String Syntax in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This section discusses the formatting options available in Python's format strings, particularly focusing on the 'n' type for numbers. It explains how the 'n' type temporarily alters the LC_CTYPE locale to accommodate specific locale settings, detailing implications for threading and changes introduced in version 3.7.
---

```

See [Format String Syntax](https://docs.python.org/3/library/string.html#formatstrings) for a description of the various formatting options that can be specified in format strings.
Note
When formatting a number ([`int`](https://docs.python.org/3/library/functions.html#int "int"), [`float`](https://docs.python.org/3/library/functions.html#float "float"), [`complex`](https://docs.python.org/3/library/functions.html#complex "complex"), [`decimal.Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal") and subclasses) with the `n` type (ex: `'{:n}'.format(1234)`), the function temporarily sets the `LC_CTYPE` locale to the `LC_NUMERIC` locale to decode `decimal_point` and `thousands_sep` fields of `localeconv()` if they are non-ASCII or longer than 1 byte, and the `LC_NUMERIC` locale is different than the `LC_CTYPE` locale. This temporary change affects other threads.
Changed in version 3.7: When formatting a number with the `n` type, the function sets temporarily the `LC_CTYPE` locale to the `LC_NUMERIC` locale in some cases. 

str.format_map(_mapping_ , _/_)[¶](https://docs.python.org/3/library/stdtypes.html#str.format_map "Link to this definition")
    
Similar to `str.format(**mapping)`, except that `mapping` is used directly and not copied to a [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict"). This is useful if for example `mapping` is a dict subclass:
>>>```
>>> classDefault(dict):
...   def__missing__(self, key):
...     return key
...
>>> '{name} was born in {country}'.format_map(Default(name='Guido'))
'Guido was born in country'

```

Added in version 3.2. 

str.index(_sub_[, _start_[, _end_]])[¶](https://docs.python.org/3/library/stdtypes.html#str.index "Link to this definition")
    
Like [`find()`](https://docs.python.org/3/library/stdtypes.html#str.find "str.find"), but raise [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") when the substring is not found. 

str.isalnum()[¶](https://docs.python.org/3/library/stdtypes.html#str.isalnum "Link to this definition")
    
Return `True` if all characters in the string are alphanumeric and there is at least one character, `False` otherwise. A character `c` is alphanumeric if one of the following returns `True`: `c.isalpha()`, `c.isdecimal()`, `c.isdigit()`, or `c.isnumeric()`. 

str.isalpha()[¶](https://docs.python.org/3/library/stdtypes.html#str.isalpha "Link to this definition")
    
Return `True` if all characters in the string are alphabetic and there is at least one character, `False` otherwise. Alphabetic characters are those characters defined in the Unicode character database as “Letter”, i.e., those with general category property being one of “Lm”, “Lt”, “Lu”, “Ll”, or “Lo”. Note that this is different from the [Alphabetic property defined in the section 4.10 ‘Letters, Alphabetic, and Ideographic’ of the Unicode Standard](https://www.unicode.org/versions/Unicode15.1.0/ch04.pdf). 

str.isascii()[¶](https://docs.python.org/3/library/stdtypes.html#str.isascii "Link to this definition")
    
Return `True` if the string is empty or all characters in the string are ASCII, `False` otherwise. ASCII characters have code points in the range U+0000-U+007F.
Added in version 3.7. 

str.isdecimal()[¶](https://docs.python.org/3/library/stdtypes.html#str.isdecimal "Link to this definition")
    
Return `True` if all characters in the string are decimal characters and there is at least one character, `False` otherwise. Decimal characters are those that can be used to form numbers in base 10, e.g. U+0660, ARABIC-INDIC DIGIT ZERO. Formally a decimal character is a character in the Unicode General Category “Nd”. 

str.isdigit()[¶](https://docs.python.org/3/library/stdtypes.html#str.isdigit "Link to this definition")
    
Return `True` if all characters in the string are digits and there is at least one character, `False` otherwise. Digits include decimal characters and digits that need special handling, such as the compatibility superscript digits. This covers digits which cannot be used to form numbers in base 10, like the Kharosthi numbers. Formally, a digit is a character that has the property value Numeric_Type=Digit or Numeric_Type=Decimal. 

str.isidentifier()[¶](https://docs.python.org/3/library/stdtypes.html#str.isidentifier "Link to this definition")
    
Return `True` if the string is a valid identifier according to the language definition, section [Identifiers and keywords](https://docs.python.org/3/reference/lexical_analysis.html#identifiers).
[`keyword.iskeyword()`](https://docs.python.org/3/library/keyword.html#keyword.iskeyword "keyword.iskeyword") can be used to test whether string `s` is a reserved identifier, such as [`def`](https://docs.python.org/3/reference/compound_stmts.html#def) and [`class`](https://docs.python.org/3/reference/compound_stmts.html#class).
Example:
>>>