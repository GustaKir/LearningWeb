Title: Abstract Base Classes for Containers in Python
URL: https://docs.python.org/3/library/collections.abc.html
Summary: This document provides an overview of the `collections.abc` module in Python, which includes Abstract Base Classes for various container types. It covers the structure of these classes, detailed descriptions, and includes examples and recipes for implementation.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [`collections.abc` — Abstract Base Classes for Containers](https://docs.python.org/3/library/collections.abc.html)
    * [Collections Abstract Base Classes](https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes)
    * [Collections Abstract Base Classes – Detailed Descriptions](https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes-detailed-descriptions)
    * [Examples and Recipes](https://docs.python.org/3/library/collections.abc.html#examples-and-recipes)


#### Previous topic
[`collections` — Container datatypes](https://docs.python.org/3/library/collections.html "previous chapter")
#### Next topic
[`heapq` — Heap queue algorithm](https://docs.python.org/3/library/heapq.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/collections.abc.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/heapq.html "heapq — Heap queue algorithm") |
  * [previous](https://docs.python.org/3/library/collections.html "collections — Container datatypes") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Data Types](https://docs.python.org/3/library/datatypes.html) »
  * [`collections.abc` — Abstract Base Classes for Containers](https://docs.python.org/3/library/collections.abc.html)
  * | 
  * Theme  Auto Light Dark |


# `collections.abc` — Abstract Base Classes for Containers[¶](https://docs.python.org/3/library/collections.abc.html#module-collections.abc "Link to this heading")
Added in version 3.3: Formerly, this module was part of the [`collections`](https://docs.python.org/3/library/collections.html#module-collections "collections: Container datatypes") module.
**Source code:** [Lib/_collections_abc.py](https://github.com/python/cpython/tree/3.13/Lib/_collections_abc.py)
This module provides [abstract base classes](https://docs.python.org/3/glossary.html#term-abstract-base-class) that can be used to test whether a class provides a particular interface; for example, whether it is [hashable](https://docs.python.org/3/glossary.html#term-hashable) or whether it is a [mapping](https://docs.python.org/3/glossary.html#term-mapping).
An [`issubclass()`](https://docs.python.org/3/library/functions.html#issubclass "issubclass") or [`isinstance()`](https://docs.python.org/3/library/functions.html#isinstance "isinstance") test for an interface works in one of three ways.
  1. A newly written class can inherit directly from one of the abstract base classes. The class must supply the required abstract methods. The remaining mixin methods come from inheritance and can be overridden if desired. Other methods may be added as needed:
```
classC(Sequence):           # Direct inheritance
  def__init__(self): ...       # Extra method not required by the ABC
  def__getitem__(self, index): ... # Required abstract method
  def__len__(self): ...       # Required abstract method
  defcount(self, value): ...     # Optionally override a mixin method

```

>>>```
>>> issubclass(C, Sequence)
True
>>> isinstance(C(), Sequence)
True

```

  2. Existing classes and built-in classes can be registered as “virtual subclasses” of the ABCs. Those classes should define the full API including all of the abstract methods and all of the mixin methods. This lets users rely on [`issubclass()`](https://docs.python.org/3/library/functions.html#issubclass "issubclass") or [`isinstance()`](https://docs.python.org/3/library/functions.html#isinstance "isinstance") tests to determine whether the full interface is supported. The exception to this rule is for methods that are automatically inferred from the rest of the API: