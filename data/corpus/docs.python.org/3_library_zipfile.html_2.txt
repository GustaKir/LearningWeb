Title: zipfile.ZipFile Class
URL: https://docs.python.org/3/library/zipfile.html
Summary: The zipfile.ZipFile class provides a way to open ZIP files for reading, writing, appending, or exclusive creation. The class accepts a file path or file-like object and supports various modes such as 'r', 'w', 'a', and 'x'. The behavior varies based on the mode selected, particularly with regards to existing files.
---

_class_ zipfile.ZipFile(_file_ , _mode ='r'_, _compression =ZIP_STORED_, _allowZip64 =True_, _compresslevel =None_, _*_ , _strict_timestamps =True_, _metadata_encoding =None_)[Â¶](https://docs.python.org/3/library/zipfile.html#zipfile.ZipFile "Link to this definition")
    
Open a ZIP file, where _file_ can be a path to a file (a string), a file-like object or a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object).
The _mode_ parameter should be `'r'` to read an existing file, `'w'` to truncate and write a new file, `'a'` to append to an existing file, or `'x'` to exclusively create and write a new file. If _mode_ is `'x'` and _file_ refers to an existing file, a [`FileExistsError`](https://docs.python.org/3/library/exceptions.html#FileExistsError "FileExistsError") will be raised. If _mode_ is `'a'` and _file_ refers to an existing ZIP file, then additional files are added to it. If _file_ does not refer to a ZIP file, then a new ZIP archive is appended to the file. This is meant for adding a ZIP archive to another file (such as `python.exe`). If _mode_ is `'a'` and the file does not exist at all, it is created. If _mode_ is `'r'` or `'a'`, the file should be seekable.
_compression_ is the ZIP compression method to use when writing the archive, and should be [`ZIP_STORED`](https://docs.python.org/3/library/zipfile.html#zipfile.ZIP_STORED "zipfile.ZIP_STORED"), [`ZIP_DEFLATED`](https://docs.python.org/3/library/zipfile.html#zipfile.ZIP_DEFLATED "zipfile.ZIP_DEFLATED"), [`ZIP_BZIP2`](https://docs.python.org/3/library/zipfile.html#zipfile.ZIP_BZIP2 "zipfile.ZIP_BZIP2") or [`ZIP_LZMA`](https://docs.python.org/3/library/zipfile.html#zipfile.ZIP_LZMA "zipfile.ZIP_LZMA"); unrecognized values will cause [`NotImplementedError`](https://docs.python.org/3/library/exceptions.html#NotImplementedError "NotImplementedError") to be raised. If [`ZIP_DEFLATED`](https://docs.python.org/3/library/zipfile.html#zipfile.ZIP_DEFLATED "zipfile.ZIP_DEFLATED"), [`ZIP_BZIP2`](https://docs.python.org/3/library/zipfile.html#zipfile.ZIP_BZIP2 "zipfile.ZIP_BZIP2") or [`ZIP_LZMA`](https://docs.python.org/3/library/zipfile.html#zipfile.ZIP_LZMA "zipfile.ZIP_LZMA") is specified but the corresponding module ([`zlib`](https://docs.python.org/3/library/zlib.html#module-zlib "zlib: Low-level interface to compression and decompression routines compatible with gzip."), [`bz2`](https://docs.python.org/3/library/bz2.html#module-bz2 "bz2: Interfaces for bzip2 compression and decompression.") or [`lzma`](https://docs.python.org/3/library/lzma.html#module-lzma "lzma: A Python wrapper for the liblzma compression library.")) is not available, [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError") is raised. The default is [`ZIP_STORED`](https://docs.python.org/3/library/zipfile.html#zipfile.ZIP_STORED "zipfile.ZIP_STORED").
If _allowZip64_ is `True` (the default) zipfile will create ZIP files that use the ZIP64 extensions when the zipfile is larger than 4 GiB. If it is `false` [`zipfile`](https://docs.python.org/3/library/zipfile.html#module-zipfile "zipfile: Read and write ZIP-format archive files.") will raise an exception when the ZIP file would require ZIP64 extensions.
The _compresslevel_ parameter controls the compression level to use when writing files to the archive. When using [`ZIP_STORED`](https://docs.python.org/3/library/zipfile.html#zipfile.ZIP_STORED "zipfile.ZIP_STORED") or [`ZIP_LZMA`](https://docs.python.org/3/library/zipfile.html#zipfile.ZIP_LZMA "zipfile.ZIP_LZMA") it has no effect. When using [`ZIP_DEFLATED`](https://docs.python.org/3/library/zipfile.html#zipfile.ZIP_DEFLATED "zipfile.ZIP_DEFLATED") integers `0` through `9` are accepted (see [`zlib`](https://docs.python.org/3/library/zlib.html#zlib.compressobj "zlib.compressobj") for more information). When using [`ZIP_BZIP2`](https://docs.python.org/3/library/zipfile.html#zipfile.ZIP_BZIP2 "zipfile.ZIP_BZIP2") integers `1` through `9` are accepted (see [`bz2`](https://docs.python.org/3/library/bz2.html#bz2.BZ2File "bz2.BZ2File") for more information).
The _strict_timestamps_ argument, when set to `False`, allows to zip files older than 1980-01-01 at the cost of setting the timestamp to 1980-01-01. Similar behavior occurs with files newer than 2107-12-31, the timestamp is also set to the limit.
When mode is `'r'`, _metadata_encoding_ may be set to the name of a codec, which will be used to decode metadata such as the names of members and ZIP comments.
If the file is created with mode `'w'`, `'x'` or `'a'` and then [`closed`](https://docs.python.org/3/library/zipfile.html#zipfile.ZipFile.close "zipfile.ZipFile.close") without adding any files to the archive, the appropriate ZIP structures for an empty archive will be written to the file.
ZipFile is also a context manager and therefore supports the [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement. In the example, _myzip_ is closed af