Title: Python 3.3 - Enhancements in multiprocessing module
URL: https://docs.python.org/3/whatsnew/3.3.html
Summary: In Python 3.3, `multiprocessing.Connection` objects can now be transferred over multiprocessing connections. Additionally, `multiprocessing.Process` introduces a `daemon` keyword argument to modify the default daemon behavior from its parent process. A new attribute, `multiprocessing.Process.sentinel`, has also been added to facilitate waiting on multiple Process objects simultaneously.
---

(Contributed by Richard Oudkerk in [bpo-12328](https://bugs.python.org/issue?@action=redirect&bpo=12328).)
`multiprocessing.Connection` objects can now be transferred over multiprocessing connections. (Contributed by Richard Oudkerk in [bpo-4892](https://bugs.python.org/issue?@action=redirect&bpo=4892).)
[`multiprocessing.Process`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process "multiprocessing.Process") now accepts a `daemon` keyword argument to override the default behavior of inheriting the `daemon` flag from the parent process ([bpo-6064](https://bugs.python.org/issue?@action=redirect&bpo=6064)).
New attribute [`multiprocessing.Process.sentinel`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.sentinel "multiprocessing.Process.sentinel") allows a program to wait on multiple [`Process`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process "multiprocessing.Process") objects at one time using the appropriate OS primitives (for example, [`select`](https://docs.python.org/3/library/select.html#module-select "select: Wait for I/O completion on multiple streams.") on posix systems).
New methods [`multiprocessing.pool.Pool.starmap()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.starmap "multiprocessing.pool.Pool.starmap") and [`starmap_async()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.starmap_async "multiprocessing.pool.Pool.starmap_async") provide [`itertools.starmap()`](https://docs.python.org/3/library/itertools.html#itertools.starmap "itertools.starmap") equivalents to the existing [`multiprocessing.pool.Pool.map()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.map "multiprocessing.pool.Pool.map") and [`map_async()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.pool.Pool.map_async "multiprocessing.pool.Pool.map_async") functions. (Contributed by Hynek Schlawack in [bpo-12708](https://bugs.python.org/issue?@action=redirect&bpo=12708).)
### nntplib[¶](https://docs.python.org/3/whatsnew/3.3.html#nntplib "Link to this heading")
The `nntplib.NNTP` class now supports the context management protocol to unconditionally consume [`socket.error`](https://docs.python.org/3/library/socket.html#socket.error "socket.error") exceptions and to close the NNTP connection when done:
>>>```
>>> fromnntplibimport NNTP
>>> with NNTP('news.gmane.org') as n:
...   n.group('gmane.comp.python.committers')
...
('211 1755 1 1755 gmane.comp.python.committers', 1755, 1, 1755, 'gmane.comp.python.committers')
>>>