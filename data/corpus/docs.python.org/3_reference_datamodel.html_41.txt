Title: Implementation of __getitem__ for Sequence and Mapping Types
URL: https://docs.python.org/3/reference/datamodel.html
Summary: The __getitem__ method is used to implement the evaluation of self[key] for sequence types, where accepted keys are typically integers and may include slice objects. It raises TypeError for inappropriate key types and IndexError for keys outside the valid range, including conditions for negative indexing.
---

```

and so forth. Missing slice items are always filled in with `None`. 

object.__getitem__(_self_ , _key_)[¶](https://docs.python.org/3/reference/datamodel.html#object.__getitem__ "Link to this definition")
    
Called to implement evaluation of `self[key]`. For [sequence](https://docs.python.org/3/glossary.html#term-sequence) types, the accepted keys should be integers. Optionally, they may support [`slice`](https://docs.python.org/3/library/functions.html#slice "slice") objects as well. Negative index support is also optional. If _key_ is of an inappropriate type, [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") may be raised; if _key_ is a value outside the set of indexes for the sequence (after any special interpretation of negative values), [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError "IndexError") should be raised. For [mapping](https://docs.python.org/3/glossary.html#term-mapping) types, if _key_ is missing (not in the container), [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError") should be raised.
Note
[`for`](https://docs.python.org/3/reference/compound_stmts.html#for) loops expect that an [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError "IndexError") will be raised for illegal indexes to allow proper detection of the end of the sequence.
Note
When [subscripting](https://docs.python.org/3/reference/expressions.html#subscriptions) a _class_ , the special class method [`__class_getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__class_getitem__ "object.__class_getitem__") may be called instead of `__getitem__()`. See [__class_getitem__ versus __getitem__](https://docs.python.org/3/reference/datamodel.html#classgetitem-versus-getitem) for more details. 

object.__setitem__(_self_ , _key_ , _value_)[¶](https://docs.python.org/3/reference/datamodel.html#object.__setitem__ "Link to this definition")
    
Called to implement assignment to `self[key]`. Same note as for [`__getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__getitem__ "object.__getitem__"). This should only be implemented for mappings if the objects support changes to the values for keys, or if new keys can be added, or for sequences if elements can be replaced. The same exceptions should be raised for improper _key_ values as for the [`__getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__getitem__ "object.__getitem__") method. 

object.__delitem__(_self_ , _key_)[¶](https://docs.python.org/3/reference/datamodel.html#object.__delitem__ "Link to this definition")
    
Called to implement deletion of `self[key]`. Same note as for [`__getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__getitem__ "object.__getitem__"). This should only be implemented for mappings if the objects support removal of keys, or for sequences if elements can be removed from the sequence. The same exceptions should be raised for improper _key_ values as for the [`__getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__getitem__ "object.__getitem__") method. 

object.__missing__(_self_ , _key_)[¶](https://docs.python.org/3/reference/datamodel.html#object.__missing__ "Link to this definition")
    
Called by [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict").[`__getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__getitem__ "object.__getitem__") to implement `self[key]` for dict subclasses when key is not in the dictionary. 

object.__iter__(_self_)[¶](https://docs.python.org/3/reference/datamodel.html#object.__iter__ "Link to this definition")
    
This method is called when an [iterator](https://docs.python.org/3/glossary.html#term-iterator) is required for a container. This method should return a new iterator object that can iterate over all the objects in the container. For mappings, it should iterate over the keys of the container.