Title: Decimal Arithmetic Operations
URL: https://docs.python.org/3/library/decimal.html
Summary: This section explains the behavior of the `%` and `//` operators for `remainder` and `divide-integer` operations in Decimal objects. It notes that Decimal objects cannot be combined with floats or fractions for arithmetic operations, raising a `TypeError` if attempted. However, comparison between Decimal and other numeric types is allowed using Python’s comparison operators.
---

```

The `%` and `//` operators implement the `remainder` and `divide-integer` operations (respectively) as described in the specification.
Decimal objects cannot generally be combined with floats or instances of [`fractions.Fraction`](https://docs.python.org/3/library/fractions.html#fractions.Fraction "fractions.Fraction") in arithmetic operations: an attempt to add a [`Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal") to a [`float`](https://docs.python.org/3/library/functions.html#float "float"), for example, will raise a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError"). However, it is possible to use Python’s comparison operators to compare a [`Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal") instance `x` with another number `y`. This avoids confusing results when doing equality comparisons between numbers of different types.
Changed in version 3.2: Mixed-type comparisons between [`Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal") instances and other numeric types are now fully supported.
In addition to the standard numeric properties, decimal floating-point objects also have a number of specialized methods: 

adjusted()[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.adjusted "Link to this definition")
    
Return the adjusted exponent after shifting out the coefficient’s rightmost digits until only the lead digit remains: `Decimal('321e+5').adjusted()` returns seven. Used for determining the position of the most significant digit with respect to the decimal point. 

as_integer_ratio()[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.as_integer_ratio "Link to this definition")
    
Return a pair `(n, d)` of integers that represent the given [`Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal") instance as a fraction, in lowest terms and with a positive denominator:
>>>```
>>> Decimal('-3.14').as_integer_ratio()
(-157, 50)

```

The conversion is exact. Raise OverflowError on infinities and ValueError on NaNs.
Added in version 3.6. 

as_tuple()[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.as_tuple "Link to this definition")
    
Return a [named tuple](https://docs.python.org/3/glossary.html#term-named-tuple) representation of the number: `DecimalTuple(sign, digits, exponent)`. 

canonical()[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.canonical "Link to this definition")
    
Return the canonical encoding of the argument. Currently, the encoding of a [`Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal") instance is always canonical, so this operation returns its argument unchanged. 

compare(_other_ , _context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.compare "Link to this definition")
    
Compare the values of two Decimal instances. [`compare()`](https://docs.python.org/3/library/decimal.html#decimal.Decimal.compare "decimal.Decimal.compare") returns a Decimal instance, and if either operand is a NaN then the result is a NaN:
```
a or b is a NaN ==> Decimal('NaN')
a < b      ==> Decimal('-1')
a == b      ==> Decimal('0')
a > b      ==> Decimal('1')

```


compare_signal(_other_ , _context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.compare_signal "Link to this definition")
    
This operation is identical to the [`compare()`](https://docs.python.org/3/library/decimal.html#decimal.Decimal.compare "decimal.Decimal.compare") method, except that all NaNs signal. That is, if neither operand is a signaling NaN then any quiet NaN operand is treated as though it were a signaling NaN. 

compare_total(_other_ , _context =None_)[¶](https://docs.python.org/3/library/decimal.html#decimal.Decimal.compare_total "Link to this definition")
    
Compare two operands using their abstract representation rather than their numerical value. Similar to the [`compare()`](https://docs.python.org/3/library/decimal.html#decimal.Decimal.compare "decimal.Decimal.compare") method, but the result gives a total ordering on [`Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal") instances. Two [`Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal") instances with the same numeric value but different representations compare unequal in this ordering:
>>>```
>>> Decimal('12.0').compare_total(Decimal('12'))
Decimal('-1')