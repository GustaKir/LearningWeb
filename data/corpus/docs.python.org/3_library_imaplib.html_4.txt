Title: IMAP4 Methods Overview
URL: https://docs.python.org/3/library/imaplib.html
Summary: This section describes key IMAP4 methods: `logout()` for shutting down the connection and receiving the server's `BYE` response; `lsub()` for listing subscribed mailboxes matching a specified pattern; `myrights()` for displaying user's access control lists for a mailbox; and `namespace()` for returning defined IMAP namespaces.
---

IMAP4.logout()[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.logout "Link to this definition")
    
Shutdown connection to server. Returns server `BYE` response.
Changed in version 3.8: The method no longer ignores silently arbitrary exceptions. 

IMAP4.lsub(_directory ='""'_, _pattern ='*'_)[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.lsub "Link to this definition")
    
List subscribed mailbox names in directory matching pattern. _directory_ defaults to the top level directory and _pattern_ defaults to match any mailbox. Returned data are tuples of message part envelope and data. 

IMAP4.myrights(_mailbox_)[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.myrights "Link to this definition")
    
Show my ACLs for a mailbox (i.e. the rights that I have on mailbox). 

IMAP4.namespace()[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.namespace "Link to this definition")
    
Returns IMAP namespaces as defined in [**RFC 2342**](https://datatracker.ietf.org/doc/html/rfc2342.html). 

IMAP4.noop()[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.noop "Link to this definition")
    
Send `NOOP` to server. 

IMAP4.open(_host_ , _port_ , _timeout =None_)[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.open "Link to this definition")
    
Opens socket to _port_ at _host_. The optional _timeout_ parameter specifies a timeout in seconds for the connection attempt. If timeout is not given or is `None`, the global default socket timeout is used. Also note that if the _timeout_ parameter is set to be zero, it will raise a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") to reject creating a non-blocking socket. This method is implicitly called by the [`IMAP4`](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4 "imaplib.IMAP4") constructor. The connection objects established by this method will be used in the [`IMAP4.read()`](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.read "imaplib.IMAP4.read"), [`IMAP4.readline()`](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.readline "imaplib.IMAP4.readline"), [`IMAP4.send()`](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.send "imaplib.IMAP4.send"), and [`IMAP4.shutdown()`](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.shutdown "imaplib.IMAP4.shutdown") methods. You may override this method.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `imaplib.open` with arguments `self`, `host`, `port`.
Changed in version 3.9: The _timeout_ parameter was added. 

IMAP4.partial(_message_num_ , _message_part_ , _start_ , _length_)[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.partial "Link to this definition")
    
Fetch truncated part of a message. Returned data is a tuple of message part envelope and data. 

IMAP4.proxyauth(_user_)[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.proxyauth "Link to this definition")
    
Assume authentication as _user_. Allows an authorised administrator to proxy into any user’s mailbox. 

IMAP4.read(_size_)[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.read "Link to this definition")
    
Reads _size_ bytes from the remote server. You may override this method. 

IMAP4.readline()[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.readline "Link to this definition")
    
Reads one line from the remote server. You may override this method. 

IMAP4.recent()[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.recent "Link to this definition")
    
Prompt server for an update. Returned data is `None` if no new messages, else value of `RECENT` response. 

IMAP4.rename(_oldmailbox_ , _newmailbox_)[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.rename "Link to this definition")
    
Rename mailbox named _oldmailbox_ to _newmailbox_. 

IMAP4.response(_code_)[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.response "Link to this definition")
    
Return data for response _code_ if received, or `None`. Returns the given code, instead of the usual type. 

IMAP4.search(_charset_ , _criterion_[, _..._])[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.search "Link to this definition")
    
Search mailbox for matching messages. _charset_ may be `None`, in which case no `CHARSET` will be specified in the request to the server. The IMAP protocol requires that at least one criterion be specified; an exception will be raised when the server returns an error. _charset_ must be `None` if the `UTF8=ACCEPT` capability was enabled using the [`enable()`](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.enable "imaplib.IMAP4.enable") command.
Example:
```
# M is a connected IMAP4 instance...
typ, msgnums = M.search(None, 'FROM', '"LDJ"')
# or:
typ, msgnums = M.search(None, '(FROM "LDJ")')