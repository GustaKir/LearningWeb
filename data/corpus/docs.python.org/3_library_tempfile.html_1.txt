Title: tempfile.TemporaryFile - Temporary File Creation in Python
URL: https://docs.python.org/3/library/tempfile.html
Summary: The `tempfile.TemporaryFile` function creates a secure, temporary file-like object for storage that is automatically destroyed when closed, with certain platform-specific behaviors regarding its visibility in the file system.
---

tempfile.TemporaryFile(_mode ='w+b'_, _buffering =-1_, _encoding =None_, _newline =None_, _suffix =None_, _prefix =None_, _dir =None_, _*_ , _errors =None_)[¶](https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile "Link to this definition")
    
Return a [file-like object](https://docs.python.org/3/glossary.html#term-file-like-object) that can be used as a temporary storage area. The file is created securely, using the same rules as [`mkstemp()`](https://docs.python.org/3/library/tempfile.html#tempfile.mkstemp "tempfile.mkstemp"). It will be destroyed as soon as it is closed (including an implicit close when the object is garbage collected). Under Unix, the directory entry for the file is either not created at all or is removed immediately after the file is created. Other platforms do not support this; your code should not rely on a temporary file created using this function having or not having a visible name in the file system.
The resulting object can be used as a [context manager](https://docs.python.org/3/glossary.html#term-context-manager) (see [Examples](https://docs.python.org/3/library/tempfile.html#tempfile-examples)). On completion of the context or destruction of the file object the temporary file will be removed from the filesystem.
The _mode_ parameter defaults to `'w+b'` so that the file created can be read and written without being closed. Binary mode is used so that it behaves consistently on all platforms without regard for the data that is stored. _buffering_ , _encoding_ , _errors_ and _newline_ are interpreted as for [`open()`](https://docs.python.org/3/library/functions.html#open "open").
The _dir_ , _prefix_ and _suffix_ parameters have the same meaning and defaults as with [`mkstemp()`](https://docs.python.org/3/library/tempfile.html#tempfile.mkstemp "tempfile.mkstemp").
The returned object is a true file object on POSIX platforms. On other platforms, it is a file-like object whose `file` attribute is the underlying true file object.
The [`os.O_TMPFILE`](https://docs.python.org/3/library/os.html#os.O_TMPFILE "os.O_TMPFILE") flag is used if it is available and works (Linux-specific, requires Linux kernel 3.11 or later).
On platforms that are neither Posix nor Cygwin, TemporaryFile is an alias for NamedTemporaryFile.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `tempfile.mkstemp` with argument `fullpath`.
Changed in version 3.5: The [`os.O_TMPFILE`](https://docs.python.org/3/library/os.html#os.O_TMPFILE "os.O_TMPFILE") flag is now used if available.
Changed in version 3.8: Added _errors_ parameter. 

tempfile.NamedTemporaryFile(_mode ='w+b'_, _buffering =-1_, _encoding =None_, _newline =None_, _suffix =None_, _prefix =None_, _dir =None_, _delete =True_, _*_ , _errors =None_, _delete_on_close =True_)[¶](https://docs.python.org/3/library/tempfile.html#tempfile.NamedTemporaryFile "Link to this definition")
    
This function operates exactly as [`TemporaryFile()`](https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile "tempfile.TemporaryFile") does, except the following differences:
  * This function returns a file that is guaranteed to have a visible name in the file system.
  * To manage the named file, it extends the parameters of [`TemporaryFile()`](https://docs.python.org/3/library/tempfile.html#tempfile.TemporaryFile "tempfile.TemporaryFile") with _delete_ and _delete_on_close_ parameters that determine whether and how the named file should be automatically deleted.