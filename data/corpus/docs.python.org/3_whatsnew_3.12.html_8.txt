Title: Python 3.12 Language Changes
URL: https://docs.python.org/3/whatsnew/3.12.html
Summary: The Python 3.12 update introduces new language changes, including a SyntaxError for parsing source code with null bytes and a SyntaxWarning for invalid backslash escape sequences. These modifications enhance error detection and improve code reliability.
---

```

See [**PEP 698**](https://peps.python.org/pep-0698/) for more details.
(Contributed by Steven Troxler in [gh-101561](https://github.com/python/cpython/issues/101561).)
## Other Language Changes[¶](https://docs.python.org/3/whatsnew/3.12.html#other-language-changes "Link to this heading")
  * The parser now raises [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") when parsing source code containing null bytes. (Contributed by Pablo Galindo in [gh-96670](https://github.com/python/cpython/issues/96670).)
  * A backslash-character pair that is not a valid escape sequence now generates a [`SyntaxWarning`](https://docs.python.org/3/library/exceptions.html#SyntaxWarning "SyntaxWarning"), instead of [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning"). For example, `re.compile("\d+\.\d+")` now emits a [`SyntaxWarning`](https://docs.python.org/3/library/exceptions.html#SyntaxWarning "SyntaxWarning") (`"\d"` is an invalid escape sequence, use raw strings for regular expression: `re.compile(r"\d+\.\d+")`). In a future Python version, [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") will eventually be raised, instead of [`SyntaxWarning`](https://docs.python.org/3/library/exceptions.html#SyntaxWarning "SyntaxWarning"). (Contributed by Victor Stinner in [gh-98401](https://github.com/python/cpython/issues/98401).)
  * Octal escapes with value larger than `0o377` (ex: `"\477"`), deprecated in Python 3.11, now produce a [`SyntaxWarning`](https://docs.python.org/3/library/exceptions.html#SyntaxWarning "SyntaxWarning"), instead of [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning"). In a future Python version they will be eventually a [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError"). (Contributed by Victor Stinner in [gh-98401](https://github.com/python/cpython/issues/98401).)
  * Variables used in the target part of comprehensions that are not stored to can now be used in assignment expressions (`:=`). For example, in `[(b := 1) for a, b.prop in some_iter]`, the assignment to `b` is now allowed. Note that assigning to variables stored to in the target part of comprehensions (like `a`) is still disallowed, as per [**PEP 572**](https://peps.python.org/pep-0572/). (Contributed by Nikita Sobolev in [gh-100581](https://github.com/python/cpython/issues/100581).)
  * Exceptions raised in a class or type’s `__set_name__` method are no longer wrapped by a [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError"). Context information is added to the exception as a [**PEP 678**](https://peps.python.org/pep-0678/) note. (Contributed by Irit Katriel in [gh-77757](https://github.com/python/cpython/issues/77757).)
  * When a `try-except*` construct handles the entire [`ExceptionGroup`](https://docs.python.org/3/library/exceptions.html#ExceptionGroup "ExceptionGroup") and raises one other exception, that exception is no longer wrapped in an [`ExceptionGroup`](https://docs.python.org/3/library/exceptions.html#ExceptionGroup "ExceptionGroup"). Also changed in version 3.11.4. (Contributed by Irit Katriel in [gh-103590](https://github.com/python/cpython/issues/103590).)
  * The Garbage Collector now runs only on the eval breaker mechanism of the Python bytecode evaluation loop instead of object allocations. The GC can also run when [`PyErr_CheckSignals()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_CheckSignals "PyErr_CheckSignals") is called so C extensions that need to run for a long time without executing any Python code also have a chance to execute the GC periodically. (Contributed by Pablo Galindo in [gh-97922](https://github.com/python/cpython/issues/97922).)
  * All builtin and extension callables expecting boolean parameters now accept arguments of any type instead of just [`bool`](https://docs.python.org/3/library/functions.html#bool "bool") and [`int`](https://docs.python.org/3/library/functions.html#int "int"). (Contributed by Serhiy Storchaka in [gh-60203](https://github.com/python/cpython/issues/60203).)
  * [`memoryview`](https://docs.python.org/3/library/stdtypes.html#memoryview "memoryview") now supports the half-float type (the “e” format code). (Contributed by Donghee Na and Antoine Pitrou in [gh-90751](https://github.com/python/cpython/issues/90751).)
  * [`slice`](https://docs.python.org/3/library/functions.html#slice "slice") objects are now hashable, allowing them to be used as dict keys and set items. (Contributed by Will Bradshaw, Furkan Onder, and Raymond Hettinger in [gh-101264](https://github.com/python/cpython/issues/101264).)
  * [`sum()`](https://docs.python.org/3/library/functions.html#sum "sum") now uses Neumaier summation to improve accuracy and commutativity when summing floats or mixed ints and floats. (C