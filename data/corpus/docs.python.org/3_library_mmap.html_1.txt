Title: Memory-Mapped File Support in Python
URL: https://docs.python.org/3/library/mmap.html
Summary: The `mmap` module provides memory-mapped file objects that function like both `bytearray` and file objects. It is not available on WebAssembly. The module allows for operations such as byte modification and can be used with regular expressions for searching within memory-mapped files.
---

# `mmap` — Memory-mapped file support[¶](https://docs.python.org/3/library/mmap.html#module-mmap "Link to this heading")
[Availability](https://docs.python.org/3/library/intro.html#availability): not WASI.
This module does not work or is not available on WebAssembly. See [WebAssembly platforms](https://docs.python.org/3/library/intro.html#wasm-availability) for more information.
Memory-mapped file objects behave like both [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") and like [file objects](https://docs.python.org/3/glossary.html#term-file-object). You can use mmap objects in most places where [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") are expected; for example, you can use the [`re`](https://docs.python.org/3/library/re.html#module-re "re: Regular expression operations.") module to search through a memory-mapped file. You can also change a single byte by doing `obj[index] = 97`, or change a subsequence by assigning to a slice: `obj[i1:i2] = b'...'`. You can also read and write data starting at the current file position, and `seek()` through the file to different positions.
A memory-mapped file is created by the [`mmap`](https://docs.python.org/3/library/mmap.html#mmap.mmap "mmap.mmap") constructor, which is different on Unix and on Windows. In either case you must provide a file descriptor for a file opened for update. If you wish to map an existing Python file object, use its [`fileno()`](https://docs.python.org/3/library/io.html#io.IOBase.fileno "io.IOBase.fileno") method to obtain the correct value for the _fileno_ parameter. Otherwise, you can open the file using the [`os.open()`](https://docs.python.org/3/library/os.html#os.open "os.open") function, which returns a file descriptor directly (the file still needs to be closed when done).
Note
If you want to create a memory-mapping for a writable, buffered file, you should [`flush()`](https://docs.python.org/3/library/io.html#io.IOBase.flush "io.IOBase.flush") the file first. This is necessary to ensure that local modifications to the buffers are actually available to the mapping.
For both the Unix and Windows versions of the constructor, _access_ may be specified as an optional keyword parameter. _access_ accepts one of four values: `ACCESS_READ`, `ACCESS_WRITE`, or `ACCESS_COPY` to specify read-only, write-through or copy-on-write memory respectively, or `ACCESS_DEFAULT` to defer to _prot_. _access_ can be used on both Unix and Windows. If _access_ is not specified, Windows mmap returns a write-through mapping. The initial memory values for all three access types are taken from the specified file. Assignment to an `ACCESS_READ` memory map raises a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") exception. Assignment to an `ACCESS_WRITE` memory map affects both memory and the underlying file. Assignment to an `ACCESS_COPY` memory map affects memory but does not update the underlying file.
Changed in version 3.7: Added `ACCESS_DEFAULT` constant.
To map anonymous memory, -1 should be passed as the fileno along with the length. 

_class_ mmap.mmap(_fileno_ , _length_ , _tagname =None_, _access =ACCESS_DEFAULT_, _offset =0_)[¶](https://docs.python.org/3/library/mmap.html#mmap.mmap "Link to this definition")
    
**(Windows version)** Maps _length_ bytes from the file specified by the file handle _fileno_ , and creates a mmap object. If _length_ is larger than the current size of the file, the file is extended to contain _length_ bytes. If _length_ is `0`, the maximum length of the map is the current size of the file, except that if the file is empty Windows raises an exception (you cannot create an empty mapping on Windows).
_tagname_ , if specified and not `None`, is a string giving a tag name for the mapping. Windows allows you to have many different mappings against the same file. If you specify the name of an existing tag, that tag is opened, otherwise a new tag of this name is created. If this parameter is omitted or `None`, the mapping is created without a name. Avoiding the use of the _tagname_ parameter will assist in keeping your code portable between Unix and Windows.
_offset_ may be specified as a non-negative integer offset. mmap references will be relative to the offset from the beginning of the file. _offset_ defaults to 0. _offset_ must be a multiple of the `ALLOCATIONGRANULARITY`.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `mmap.__new__` with arguments `fileno`, `length`, `access`, `offset`.