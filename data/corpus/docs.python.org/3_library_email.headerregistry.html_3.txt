Title: Unstructured Headers in Email
URL: https://docs.python.org/3/library/email.headerregistry.html
Summary: This section discusses the handling of keyword arguments in the `UnstructuredHeader` class of the `email.headerregistry` module. It explains that unstructured headers, defined in RFC 5322, consist of arbitrary ASCII text and exemplifies this with the 'Subject' header.
---

```

That is, anything extra that the specialized class puts in to the `kwds` dictionary should be removed and handled, and the remaining contents of `kw` (and `args`) passed to the `BaseHeader` `init` method. 

_class_ email.headerregistry.UnstructuredHeader[¶](https://docs.python.org/3/library/email.headerregistry.html#email.headerregistry.UnstructuredHeader "Link to this definition")
    
An “unstructured” header is the default type of header in [**RFC 5322**](https://datatracker.ietf.org/doc/html/rfc5322.html). Any header that does not have a specified syntax is treated as unstructured. The classic example of an unstructured header is the _Subject_ header.
In [**RFC 5322**](https://datatracker.ietf.org/doc/html/rfc5322.html), an unstructured header is a run of arbitrary text in the ASCII character set. [**RFC 2047**](https://datatracker.ietf.org/doc/html/rfc2047.html), however, has an [**RFC 5322**](https://datatracker.ietf.org/doc/html/rfc5322.html) compatible mechanism for encoding non-ASCII text as ASCII characters within a header value. When a _value_ containing encoded words is passed to the constructor, the `UnstructuredHeader` parser converts such encoded words into unicode, following the [**RFC 2047**](https://datatracker.ietf.org/doc/html/rfc2047.html) rules for unstructured text. The parser uses heuristics to attempt to decode certain non-compliant encoded words. Defects are registered in such cases, as well as defects for issues such as invalid characters within the encoded words or the non-encoded text.
This header type provides no additional attributes. 

_class_ email.headerregistry.DateHeader[¶](https://docs.python.org/3/library/email.headerregistry.html#email.headerregistry.DateHeader "Link to this definition")
    
[**RFC 5322**](https://datatracker.ietf.org/doc/html/rfc5322.html) specifies a very specific format for dates within email headers. The `DateHeader` parser recognizes that date format, as well as recognizing a number of variant forms that are sometimes found “in the wild”.
This header type provides the following additional attributes: 

datetime[¶](https://docs.python.org/3/library/email.headerregistry.html#email.headerregistry.DateHeader.datetime "Link to this definition")
    
If the header value can be recognized as a valid date of one form or another, this attribute will contain a [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") instance representing that date. If the timezone of the input date is specified as `-0000` (indicating it is in UTC but contains no information about the source timezone), then [`datetime`](https://docs.python.org/3/library/email.headerregistry.html#email.headerregistry.DateHeader.datetime "email.headerregistry.DateHeader.datetime") will be a naive [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime"). If a specific timezone offset is found (including `+0000`), then [`datetime`](https://docs.python.org/3/library/email.headerregistry.html#email.headerregistry.DateHeader.datetime "email.headerregistry.DateHeader.datetime") will contain an aware `datetime` that uses [`datetime.timezone`](https://docs.python.org/3/library/datetime.html#datetime.timezone "datetime.timezone") to record the timezone offset.
The `decoded` value of the header is determined by formatting the `datetime` according to the [**RFC 5322**](https://datatracker.ietf.org/doc/html/rfc5322.html) rules; that is, it is set to:
```
email.utils.format_datetime(self.datetime)

```

When creating a `DateHeader`, _value_ may be [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") instance. This means, for example, that the following code is valid and does what one would expect:
```
msg['Date'] = datetime(2011, 7, 15, 21)

```

Because this is a naive `datetime` it will be interpreted as a UTC timestamp, and the resulting value will have a timezone of `-0000`. Much more useful is to use the [`localtime()`](https://docs.python.org/3/library/email.utils.html#email.utils.localtime "email.utils.localtime") function from the [`utils`](https://docs.python.org/3/library/email.utils.html#module-email.utils "email.utils: Miscellaneous email package utilities.") module:
```
msg['Date'] = utils.localtime()