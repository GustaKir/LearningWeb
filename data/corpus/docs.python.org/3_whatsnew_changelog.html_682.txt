Title: Python 3.5.1 Release Notes
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: The release notes for Python 3.5.1 detail various updates, including the hiding of atomic C types, new ImportWarning conditions, the disallowance of null characters in type names, fixes for segfaults related to nonlocal statements, and changes to the behavior of extension type instances.
---

The variable is no more exposed since Python 3.5.1 to hide the exact implementation of atomic C types, to avoid compiler issues.
  * [bpo-25791](https://bugs.python.org/issue?@action=redirect&bpo=25791): If __package__ != __spec__.parent or if neither __package__ or __spec__ are defined then ImportWarning is raised.
  * [bpo-22995](https://bugs.python.org/issue?@action=redirect&bpo=22995): [UPDATE] Comment out the one of the pickleability tests in _PyObject_GetState() due to regressions observed in Cython-based projects.
  * [bpo-25961](https://bugs.python.org/issue?@action=redirect&bpo=25961): Disallowed null characters in the type name.
  * [bpo-25973](https://bugs.python.org/issue?@action=redirect&bpo=25973): Fix segfault when an invalid nonlocal statement binds a name starting with two underscores.
  * [bpo-22995](https://bugs.python.org/issue?@action=redirect&bpo=22995): Instances of extension types with a state that aren’t subclasses of list or dict and haven’t implemented any pickle-related methods (__reduce__, __reduce_ex__, __getnewargs__, __getnewargs_ex__, or __getstate__), can no longer be pickled. Including memoryview.
  * [bpo-20440](https://bugs.python.org/issue?@action=redirect&bpo=20440): Massive replacing unsafe attribute setting code with special macro Py_SETREF.
  * [bpo-25766](https://bugs.python.org/issue?@action=redirect&bpo=25766): Special method __bytes__() now works in str subclasses.
  * [bpo-25421](https://bugs.python.org/issue?@action=redirect&bpo=25421): __sizeof__ methods of builtin types now use dynamic basic size. This allows sys.getsize() to work correctly with their subclasses with __slots__ defined.
  * [bpo-25709](https://bugs.python.org/issue?@action=redirect&bpo=25709): Fixed problem with in-place string concatenation and utf-8 cache.
  * [bpo-5319](https://bugs.python.org/issue?@action=redirect&bpo=5319): New Py_FinalizeEx() API allowing Python to set an exit status of 120 on failure to flush buffered streams.
  * [bpo-25485](https://bugs.python.org/issue?@action=redirect&bpo=25485): telnetlib.Telnet is now a context manager.
  * [bpo-24097](https://bugs.python.org/issue?@action=redirect&bpo=24097): Fixed crash in object.__reduce__() if slot name is freed inside __getattr__.
  * [bpo-24731](https://bugs.python.org/issue?@action=redirect&bpo=24731): Fixed crash on converting objects with special methods __bytes__, __trunc__, and __float__ returning instances of subclasses of bytes, int, and float to subclasses of bytes, int, and float correspondingly.
  * [bpo-25630](https://bugs.python.org/issue?@action=redirect&bpo=25630): Fix a possible segfault during argument parsing in functions that accept filesystem paths.
  * [bpo-23564](https://bugs.python.org/issue?@action=redirect&bpo=23564): Fixed a partially broken sanity check in the _posixsubprocess internals regarding how fds_to_pass were passed to the child. The bug had no actual impact as subprocess.py already avoided it.
  * [bpo-25388](https://bugs.python.org/issue?@action=redirect&bpo=25388): Fixed tokenizer crash when processing undecodable source code with a null byte.
  * [bpo-25462](https://bugs.python.org/issue?@action=redirect&bpo=25462): The hash of the key now is calculated only once in most operations in C implementation of OrderedDict.
  * [bpo-22995](https://bugs.python.org/issue?@action=redirect&bpo=22995): Default implementation of __reduce__ and __reduce_ex__ now rejects builtin types with not defined __new__.
  * [bpo-24802](https://bugs.python.org/issue?@action=redirect&bpo=24802): Avoid buffer overreads when int(), float(), compile(), exec() and eval() are passed bytes-like objects. These objects are not necessarily terminated by a null byte, but the functions assumed they were.
  * [bpo-25555](https://bugs.python.org/issue?@action=redirect&bpo=25555): Fix parser and AST: fill lineno and col_offset of “arg” node when compiling AST from Python objects.
  * [bpo-24726](https://bugs.python.org/issue?@action=redirect&bpo=24726): Fixed a crash and leaking NULL in repr() of OrderedDict that was mutated by direct calls of dict methods.
  * [bpo-25449](https://bugs.python.org/issue?@action=redirect&bpo=25449): Iterating OrderedDict with keys with unstable hash now raises KeyError in C implementations as well as in Python implementation.
  * [bpo-25395](https://bugs.python.org/issue?@action=redirect&bpo=25395): Fixed crash when highly nested OrderedDict structures were garbage collected.
  * [bpo-25401](https://bugs.python.org/issue?@action=redirect&bpo=25401): Optimize bytes.fromhex() and bytearray.fromhex(): they are now between 2x and 3.5x faster.
  * [bpo-25399](https://bugs.python.org/issue?@action=redirect&bpo=25399): Optimize bytearray % args using the new private _PyBytesWriter API.