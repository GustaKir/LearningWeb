Title: Turtle Shell Command Overview
URL: https://docs.python.org/3/library/cmd.html
Summary: This document describes the TurtleShell class implementation using the cmd module. It includes basic turtle commands such as moving forward, turning, and drawing circles, along with usage instructions for each command.
---

```
importcmd,sys
fromturtleimport *
classTurtleShell(cmd.Cmd):
  intro = 'Welcome to the turtle shell.  Type help or ? to list commands.\n'
  prompt = '(turtle) '
  file = None
  # ----- basic turtle commands -----
  defdo_forward(self, arg):
    'Move the turtle forward by the specified distance: FORWARD 10'
    forward(*parse(arg))
  defdo_right(self, arg):
    'Turn turtle right by given number of degrees: RIGHT 20'
    right(*parse(arg))
  defdo_left(self, arg):
    'Turn turtle left by given number of degrees: LEFT 90'
    left(*parse(arg))
  defdo_goto(self, arg):
    'Move turtle to an absolute position with changing orientation. GOTO 100 200'
    goto(*parse(arg))
  defdo_home(self, arg):
    'Return turtle to the home position: HOME'
    home()
  defdo_circle(self, arg):
    'Draw circle with given radius an options extent and steps: CIRCLE 50'
    circle(*parse(arg))
  defdo_position(self, arg):
    'Print the current turtle position: POSITION'
    print('Current position is %d%d\n' % position())
  defdo_heading(self, arg):
    'Print the current turtle heading in degrees: HEADING'
    print('Current heading is %d\n' % (heading(),))
  defdo_color(self, arg):
    'Set the color: COLOR BLUE'
    color(arg.lower())
  defdo_undo(self, arg):
    'Undo (repeatedly) the last turtle action(s): UNDO'
  defdo_reset(self, arg):
    'Clear the screen and return turtle to center: RESET'
    reset()
  defdo_bye(self, arg):
    'Stop recording, close the turtle window, and exit: BYE'
    print('Thank you for using Turtle')
    self.close()
    bye()
    return True
  # ----- record and playback -----
  defdo_record(self, arg):
    'Save future commands to filename: RECORD rose.cmd'
    self.file = open(arg, 'w')
  defdo_playback(self, arg):
    'Playback commands from a file: PLAYBACK rose.cmd'
    self.close()
    with open(arg) as f:
      self.cmdqueue.extend(f.read().splitlines())
  defprecmd(self, line):
    line = line.lower()
    if self.file and 'playback' not in line:
      print(line, file=self.file)
    return line
  defclose(self):
    if self.file:
      self.file.close()
      self.file = None
defparse(arg):
  'Convert a series of zero or more numbers to an argument tuple'
  return tuple(map(int, arg.split()))
if __name__ == '__main__':
  TurtleShell().cmdloop()

```

Here is a sample session with the turtle shell showing the help functions, using blank lines to repeat commands, and the simple record and playback facility:
```
Welcome to the turtle shell.  Type help or ? to list commands.
(turtle) ?
Documented commands (type help <topic>):
========================================
bye   color  goto   home playback record right
circle forward heading left position reset  undo
(turtle) help forward
Move the turtle forward by the specified distance: FORWARD 10
(turtle) record spiral.cmd
(turtle) position
Current position is 0 0
(turtle) heading
Current heading is 0
(turtle) reset
(turtle) circle 20
(turtle) right 30
(turtle) circle 40
(turtle) right 30
(turtle) circle 60
(turtle) right 30
(turtle) circle 80
(turtle) right 30
(turtle) circle 100
(turtle) right 30
(turtle) circle 120
(turtle) right 30
(turtle) circle 120
(turtle) heading
Current heading is 180
(turtle) forward 100
(turtle)
(turtle) right 90
(turtle) forward 100
(turtle)
(turtle) right 90
(turtle) forward 400
(turtle) right 90
(turtle) forward 500
(turtle) right 90
(turtle) forward 400
(turtle) right 90
(turtle) forward 300
(turtle) playback spiral.cmd
Current position is 0 0
Current heading is 0
Current heading is 180
(turtle) bye
Thank you for using Turtle