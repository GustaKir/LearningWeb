Title: frozenset: Creating Immutable Sets in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: The `frozenset` class returns a new frozenset object from the specified iterable, with all elements required to be hashable. If no iterable is provided, an empty frozenset is returned. Sets can be created using various methods including explicit lists, set comprehensions, and type constructors. Operations available for `set` and `frozenset` instances include length checking with `len(s)`.
---

_class_ frozenset([_iterable_])[¶](https://docs.python.org/3/library/stdtypes.html#frozenset "Link to this definition")
    
Return a new set or frozenset object whose elements are taken from _iterable_. The elements of a set must be [hashable](https://docs.python.org/3/glossary.html#term-hashable). To represent sets of sets, the inner sets must be [`frozenset`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset") objects. If _iterable_ is not specified, a new empty set is returned.
Sets can be created by several means:
  * Use a comma-separated list of elements within braces: `{'jack', 'sjoerd'}`
  * Use a set comprehension: `{c for c in 'abracadabra' if c not in 'abc'}`
  * Use the type constructor: `set()`, `set('foobar')`, `set(['a', 'b', 'foo'])`


Instances of [`set`](https://docs.python.org/3/library/stdtypes.html#set "set") and [`frozenset`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset") provide the following operations: 

len(s)
    
Return the number of elements in set _s_ (cardinality of _s_). 

x in s
    
Test _x_ for membership in _s_. 

x not in s
    
Test _x_ for non-membership in _s_. 

isdisjoint(_other_)[¶](https://docs.python.org/3/library/stdtypes.html#frozenset.isdisjoint "Link to this definition")
    
Return `True` if the set has no elements in common with _other_. Sets are disjoint if and only if their intersection is the empty set. 

issubset(_other_)[¶](https://docs.python.org/3/library/stdtypes.html#frozenset.issubset "Link to this definition")


set <= other
    
Test whether every element in the set is in _other_. 

set < other
    
Test whether the set is a proper subset of _other_ , that is, `set <= other and set != other`. 

issuperset(_other_)[¶](https://docs.python.org/3/library/stdtypes.html#frozenset.issuperset "Link to this definition")


set >= other
    
Test whether every element in _other_ is in the set. 

set > other
    
Test whether the set is a proper superset of _other_ , that is, `set >= other and set != other`. 

union(_* others_)[¶](https://docs.python.org/3/library/stdtypes.html#frozenset.union "Link to this definition")


set | other | ...
    
Return a new set with elements from the set and all others. 

intersection(_* others_)[¶](https://docs.python.org/3/library/stdtypes.html#frozenset.intersection "Link to this definition")


set & other & ...
    
Return a new set with elements common to the set and all others. 

difference(_* others_)[¶](https://docs.python.org/3/library/stdtypes.html#frozenset.difference "Link to this definition")


set - other - ...
    
Return a new set with elements in the set that are not in the others. 

symmetric_difference(_other_)[¶](https://docs.python.org/3/library/stdtypes.html#frozenset.symmetric_difference "Link to this definition")


set ^ other
    
Return a new set with elements in either the set or _other_ but not both.