Title: Overview of Python 3.0 Features
URL: https://docs.python.org/3/whatsnew/3.0.html
Summary: This article highlights the new features and changes in Python 3.0, the first intentionally backwards incompatible release, launched on December 3, 2008. It provides an overview of significant modifications from version 2.6, aiming to address known issues while streamlining the language. For in-depth information, it suggests referencing Python 3.0 documentation and accompanying PEPs.
---

Author:
    
Guido van Rossum
This article explains the new features in Python 3.0, compared to 2.6. Python 3.0, also known as “Python 3000” or “Py3K”, is the first ever _intentionally backwards incompatible_ Python release. Python 3.0 was released on December 3, 2008. There are more changes than in a typical release, and more that are important for all Python users. Nevertheless, after digesting the changes, you’ll find that Python really hasn’t changed all that much – by and large, we’re mostly fixing well-known annoyances and warts, and removing a lot of old cruft.
This article doesn’t attempt to provide a complete specification of all new features, but instead tries to give a convenient overview. For full details, you should refer to the documentation for Python 3.0, and/or the many PEPs referenced in the text. If you want to understand the complete implementation and design rationale for a particular feature, PEPs usually have more details than the regular documentation; but note that PEPs usually are not kept up-to-date once a feature has been fully implemented.
Due to time constraints this document is not as complete as it should have been. As always for a new release, the `Misc/NEWS` file in the source distribution contains a wealth of detailed information about every small thing that was changed.
## Common Stumbling Blocks[¶](https://docs.python.org/3/whatsnew/3.0.html#common-stumbling-blocks "Link to this heading")
This section lists those few changes that are most likely to trip you up if you’re used to Python 2.5.
### Print Is A Function[¶](https://docs.python.org/3/whatsnew/3.0.html#print-is-a-function "Link to this heading")
The `print` statement has been replaced with a [`print()`](https://docs.python.org/3/library/functions.html#print "print") function, with keyword arguments to replace most of the special syntax of the old `print` statement ([**PEP 3105**](https://peps.python.org/pep-3105/)). Examples:
```
Old: print "The answer is", 2*2
New: print("The answer is", 2*2)
Old: print x,      # Trailing comma suppresses newline
New: print(x, end=" ") # Appends a space instead of a newline
Old: print       # Prints a newline
New: print()      # You must call the function!
Old: print >>sys.stderr, "fatal error"
New: print("fatal error", file=sys.stderr)
Old: print (x, y)    # prints repr((x, y))
New: print((x, y))   # Not the same as print(x, y)!

```

You can also customize the separator between items, e.g.:
```
print("There are <", 2**32, "> possibilities!", sep="")

```

which produces:
```
There are <4294967296> possibilities!