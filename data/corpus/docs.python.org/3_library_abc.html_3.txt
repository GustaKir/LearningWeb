Title: Overview of Abstract Methods in Python's abc Module
URL: https://docs.python.org/3/library/abc.html
Summary: This section notes that unlike Java, Python's abstract methods in the abc module can have implementations, which can be accessed using the super() function in subclasses. It also mentions the deprecated @abc.abstractclassmethod decorator and its redundancy with the current usage of classmethod and abstractmethod.
---

```

Note
Unlike Java abstract methods, these abstract methods may have an implementation. This implementation can be called via the [`super()`](https://docs.python.org/3/library/functions.html#super "super") mechanism from the class that overrides it. This could be useful as an end-point for a super-call in a framework that uses cooperative multiple-inheritance.
The `abc` module also supports the following legacy decorators: 

@abc.abstractclassmethod[¶](https://docs.python.org/3/library/abc.html#abc.abstractclassmethod "Link to this definition")
    
Added in version 3.2.
Deprecated since version 3.3: It is now possible to use [`classmethod`](https://docs.python.org/3/library/functions.html#classmethod "classmethod") with [`abstractmethod()`](https://docs.python.org/3/library/abc.html#abc.abstractmethod "abc.abstractmethod"), making this decorator redundant.
A subclass of the built-in [`classmethod()`](https://docs.python.org/3/library/functions.html#classmethod "classmethod"), indicating an abstract classmethod. Otherwise it is similar to [`abstractmethod()`](https://docs.python.org/3/library/abc.html#abc.abstractmethod "abc.abstractmethod").
This special case is deprecated, as the [`classmethod()`](https://docs.python.org/3/library/functions.html#classmethod "classmethod") decorator is now correctly identified as abstract when applied to an abstract method:
```
classC(ABC):
  @classmethod
  @abstractmethod
  defmy_abstract_classmethod(cls, arg):
    ...

```


@abc.abstractstaticmethod[¶](https://docs.python.org/3/library/abc.html#abc.abstractstaticmethod "Link to this definition")
    
Added in version 3.2.
Deprecated since version 3.3: It is now possible to use [`staticmethod`](https://docs.python.org/3/library/functions.html#staticmethod "staticmethod") with [`abstractmethod()`](https://docs.python.org/3/library/abc.html#abc.abstractmethod "abc.abstractmethod"), making this decorator redundant.
A subclass of the built-in [`staticmethod()`](https://docs.python.org/3/library/functions.html#staticmethod "staticmethod"), indicating an abstract staticmethod. Otherwise it is similar to [`abstractmethod()`](https://docs.python.org/3/library/abc.html#abc.abstractmethod "abc.abstractmethod").
This special case is deprecated, as the [`staticmethod()`](https://docs.python.org/3/library/functions.html#staticmethod "staticmethod") decorator is now correctly identified as abstract when applied to an abstract method:
```
classC(ABC):
  @staticmethod
  @abstractmethod
  defmy_abstract_staticmethod(arg):
    ...

```


@abc.abstractproperty[¶](https://docs.python.org/3/library/abc.html#abc.abstractproperty "Link to this definition")
    
Deprecated since version 3.3: It is now possible to use [`property`](https://docs.python.org/3/library/functions.html#property "property"), [`property.getter()`](https://docs.python.org/3/library/functions.html#property.getter "property.getter"), [`property.setter()`](https://docs.python.org/3/library/functions.html#property.setter "property.setter") and [`property.deleter()`](https://docs.python.org/3/library/functions.html#property.deleter "property.deleter") with [`abstractmethod()`](https://docs.python.org/3/library/abc.html#abc.abstractmethod "abc.abstractmethod"), making this decorator redundant.
A subclass of the built-in [`property()`](https://docs.python.org/3/library/functions.html#property "property"), indicating an abstract property.
This special case is deprecated, as the [`property()`](https://docs.python.org/3/library/functions.html#property "property") decorator is now correctly identified as abstract when applied to an abstract method:
```
classC(ABC):
  @property
  @abstractmethod
  defmy_abstract_property(self):
    ...

```

The above example defines a read-only property; you can also define a read-write abstract property by appropriately marking one or more of the underlying methods as abstract:
```
classC(ABC):
  @property
  defx(self):
    ...
  @x.setter
  @abstractmethod
  defx(self, val):
    ...

```

If only some components are abstract, only those components need to be updated to create a concrete property in a subclass:
```
classD(C):
  @C.x.setter
  defx(self, val):
    ...