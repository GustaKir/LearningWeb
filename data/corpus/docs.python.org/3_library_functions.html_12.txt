Title: exec Function in Python
URL: https://docs.python.org/3/library/functions.html
Summary: The exec function allows for the dynamic execution of Python code, which can be a string or a code object. Care must be taken when using this function as it can introduce security vulnerabilities if user-supplied input is processed. The executed code needs to be valid as file input.
---

exec(_source_ , _/_ , _globals =None_, _locals =None_, _*_ , _closure =None_)[¶](https://docs.python.org/3/library/functions.html#exec "Link to this definition")
    
Warning
This function executes arbitrary code. Calling it with user-supplied input may lead to security vulnerabilities.
This function supports dynamic execution of Python code. _source_ must be either a string or a code object. If it is a string, the string is parsed as a suite of Python statements which is then executed (unless a syntax error occurs). [[1]](https://docs.python.org/3/library/functions.html#id2) If it is a code object, it is simply executed. In all cases, the code that’s executed is expected to be valid as file input (see the section [File input](https://docs.python.org/3/reference/toplevel_components.html#file-input) in the Reference Manual). Be aware that the [`nonlocal`](https://docs.python.org/3/reference/simple_stmts.html#nonlocal), [`yield`](https://docs.python.org/3/reference/simple_stmts.html#yield), and [`return`](https://docs.python.org/3/reference/simple_stmts.html#return) statements may not be used outside of function definitions even within the context of code passed to the [`exec()`](https://docs.python.org/3/library/functions.html#exec "exec") function. The return value is `None`.
In all cases, if the optional parts are omitted, the code is executed in the current scope. If only _globals_ is provided, it must be a dictionary (and not a subclass of dictionary), which will be used for both the global and the local variables. If _globals_ and _locals_ are given, they are used for the global and local variables, respectively. If provided, _locals_ can be any mapping object. Remember that at the module level, globals and locals are the same dictionary.
Note
When `exec` gets two separate objects as _globals_ and _locals_ , the code will be executed as if it were embedded in a class definition. This means functions and classes defined in the executed code will not be able to access variables assigned at the top level (as the “top level” variables are treated as class variables in a class definition).
If the _globals_ dictionary does not contain a value for the key `__builtins__`, a reference to the dictionary of the built-in module [`builtins`](https://docs.python.org/3/library/builtins.html#module-builtins "builtins: The module that provides the built-in namespace.") is inserted under that key. That way you can control what builtins are available to the executed code by inserting your own `__builtins__` dictionary into _globals_ before passing it to [`exec()`](https://docs.python.org/3/library/functions.html#exec "exec").
The _closure_ argument specifies a closure–a tuple of cellvars. It’s only valid when the _object_ is a code object containing [free (closure) variables](https://docs.python.org/3/glossary.html#term-closure-variable). The length of the tuple must exactly match the length of the code object’s [`co_freevars`](https://docs.python.org/3/reference/datamodel.html#codeobject.co_freevars "codeobject.co_freevars") attribute.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `exec` with the code object as the argument. Code compilation events may also be raised.
Note
The built-in functions [`globals()`](https://docs.python.org/3/library/functions.html#globals "globals") and [`locals()`](https://docs.python.org/3/library/functions.html#locals "locals") return the current global and local namespace, respectively, which may be useful to pass around for use as the second and third argument to [`exec()`](https://docs.python.org/3/library/functions.html#exec "exec").
Note
The default _locals_ act as described for function [`locals()`](https://docs.python.org/3/library/functions.html#locals "locals") below. Pass an explicit _locals_ dictionary if you need to see effects of the code on _locals_ after function [`exec()`](https://docs.python.org/3/library/functions.html#exec "exec") returns.
Changed in version 3.11: Added the _closure_ parameter.
Changed in version 3.13: The _globals_ and _locals_ arguments can now be passed as keywords.
Changed in version 3.13: The semantics of the default _locals_ namespace have been adjusted as described for the [`locals()`](https://docs.python.org/3/library/functions.html#locals "locals") builtin.