Title: Python Pickle Module Overview
URL: https://docs.python.org/3/library/pickle.html
Summary: The `pickle` module serializes Python objects into byte streams and back, with no guarantee of cross-version portability. Its format is mainly designed for supporting `.pyc` files and can change in non-backwards compatible ways. However, it ensures backwards compatibility across Python releases if a compatible protocol is used. Care must be taken with type differences when transitioning data between Python 2 and 3.
---

n objects to streams of bytes and back \(with different constraints\).") serialization format is not guaranteed to be portable across Python versions. Because its primary job in life is to support `.pyc` files, the Python implementers reserve the right to change the serialization format in non-backwards compatible ways should the need arise. The [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "pickle: Convert Python objects to streams of bytes and back.") serialization format is guaranteed to be backwards compatible across Python releases provided a compatible pickle protocol is chosen and pickling and unpickling code deals with Python 2 to Python 3 type differences if your data is crossing that unique breaking change language boundary.


### Comparison with `json`[¶](https://docs.python.org/3/library/pickle.html#comparison-with-json "Link to this heading")
There are fundamental differences between the pickle protocols and [JSON (JavaScript Object Notation)](https://json.org):
  * JSON is a text serialization format (it outputs unicode text, although most of the time it is then encoded to `utf-8`), while pickle is a binary serialization format;
  * JSON is human-readable, while pickle is not;
  * JSON is interoperable and widely used outside of the Python ecosystem, while pickle is Python-specific;
  * JSON, by default, can only represent a subset of the Python built-in types, and no custom classes; pickle can represent an extremely large number of Python types (many of them automatically, by clever usage of Python’s introspection facilities; complex cases can be tackled by implementing [specific object APIs](https://docs.python.org/3/library/pickle.html#pickle-inst));
  * Unlike pickle, deserializing untrusted JSON does not in itself create an arbitrary code execution vulnerability.