Title: Platform Module Functions Overview
URL: https://docs.python.org/3/library/platform.html
Summary: This section describes functions from the platform module in Python. It includes 'platform.machine()', which returns the machine type (e.g., 'AMD64'), 'platform.node()', which returns the computer's network name, and 'platform.platform()', which returns a human-readable string identifying the underlying platform.
---

```


platform.machine()[¶](https://docs.python.org/3/library/platform.html#platform.machine "Link to this definition")
    
Returns the machine type, e.g. `'AMD64'`. An empty string is returned if the value cannot be determined. 

platform.node()[¶](https://docs.python.org/3/library/platform.html#platform.node "Link to this definition")
    
Returns the computer’s network name (may not be fully qualified!). An empty string is returned if the value cannot be determined. 

platform.platform(_aliased =False_, _terse =False_)[¶](https://docs.python.org/3/library/platform.html#platform.platform "Link to this definition")
    
Returns a single string identifying the underlying platform with as much useful information as possible.
The output is intended to be _human readable_ rather than machine parseable. It may look different on different platforms and this is intended.
If _aliased_ is true, the function will use aliases for various platforms that report system names which differ from their common names, for example SunOS will be reported as Solaris. The [`system_alias()`](https://docs.python.org/3/library/platform.html#platform.system_alias "platform.system_alias") function is used to implement this.
Setting _terse_ to true causes the function to return only the absolute minimum information needed to identify the platform.
Changed in version 3.8: On macOS, the function now uses [`mac_ver()`](https://docs.python.org/3/library/platform.html#platform.mac_ver "platform.mac_ver"), if it returns a non-empty release string, to get the macOS version rather than the darwin version. 

platform.processor()[¶](https://docs.python.org/3/library/platform.html#platform.processor "Link to this definition")
    
Returns the (real) processor name, e.g. `'amdk6'`.
An empty string is returned if the value cannot be determined. Note that many platforms do not provide this information or simply return the same value as for [`machine()`](https://docs.python.org/3/library/platform.html#platform.machine "platform.machine"). NetBSD does this. 

platform.python_build()[¶](https://docs.python.org/3/library/platform.html#platform.python_build "Link to this definition")
    
Returns a tuple `(buildno, builddate)` stating the Python build number and date as strings. 

platform.python_compiler()[¶](https://docs.python.org/3/library/platform.html#platform.python_compiler "Link to this definition")
    
Returns a string identifying the compiler used for compiling Python. 

platform.python_branch()[¶](https://docs.python.org/3/library/platform.html#platform.python_branch "Link to this definition")
    
Returns a string identifying the Python implementation SCM branch. 

platform.python_implementation()[¶](https://docs.python.org/3/library/platform.html#platform.python_implementation "Link to this definition")
    
Returns a string identifying the Python implementation. Possible return values are: ‘CPython’, ‘IronPython’, ‘Jython’, ‘PyPy’. 

platform.python_revision()[¶](https://docs.python.org/3/library/platform.html#platform.python_revision "Link to this definition")
    
Returns a string identifying the Python implementation SCM revision. 

platform.python_version()[¶](https://docs.python.org/3/library/platform.html#platform.python_version "Link to this definition")
    
Returns the Python version as string `'major.minor.patchlevel'`.
Note that unlike the Python `sys.version`, the returned value will always include the patchlevel (it defaults to 0). 

platform.python_version_tuple()[¶](https://docs.python.org/3/library/platform.html#platform.python_version_tuple "Link to this definition")
    
Returns the Python version as tuple `(major, minor, patchlevel)` of strings.
Note that unlike the Python `sys.version`, the returned value will always include the patchlevel (it defaults to `'0'`). 

platform.release()[¶](https://docs.python.org/3/library/platform.html#platform.release "Link to this definition")
    
Returns the system’s release, e.g. `'2.2.0'` or `'NT'`. An empty string is returned if the value cannot be determined. 

platform.system()[¶](https://docs.python.org/3/library/platform.html#platform.system "Link to this definition")
    
Returns the system/OS name, such as `'Linux'`, `'Darwin'`, `'Java'`, `'Windows'`. An empty string is returned if the value cannot be determined.
On iOS and Android, this returns the user-facing OS name (i.e, `'iOS`, `'iPadOS'` or `'Android'`). To obtain the kernel name (`'Darwin'` or `'Linux'`), use [`os.uname()`](https://docs.python.org/3/library/os.html#os.uname "os.uname"). 

platform.system_alias(_system_ , _release_ , _version_)[¶](https://docs.python.org/3/library/platform.html#platform.system_alias "Link to this definition")
    
Returns `(system, release, version)` aliased to common marketing names used for some systems. It also does some reordering of the information in some cases where it would otherwise cause confusion.