Title: Mailbox Methods: pop and popitem
URL: https://docs.python.org/3/library/mailbox.html
Summary: The `pop` method retrieves and deletes a message associated with a specified key from the mailbox, returning a default value if the key does not exist. The `popitem` method returns and deletes an arbitrary key-message pair from the mailbox, raising a `KeyError` if the mailbox is empty.
---

pop(_key_ , _default =None_)[¶](https://docs.python.org/3/library/mailbox.html#mailbox.Mailbox.pop "Link to this definition")
    
Return a representation of the message corresponding to _key_ and delete the message. If no such message exists, return _default_. The message is represented as an instance of the appropriate format-specific [`Message`](https://docs.python.org/3/library/mailbox.html#mailbox.Message "mailbox.Message") subclass unless a custom message factory was specified when the `Mailbox` instance was initialized. 

popitem()[¶](https://docs.python.org/3/library/mailbox.html#mailbox.Mailbox.popitem "Link to this definition")
    
Return an arbitrary (_key_ , _message_) pair, where _key_ is a key and _message_ is a message representation, and delete the corresponding message. If the mailbox is empty, raise a [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError") exception. The message is represented as an instance of the appropriate format-specific [`Message`](https://docs.python.org/3/library/mailbox.html#mailbox.Message "mailbox.Message") subclass unless a custom message factory was specified when the `Mailbox` instance was initialized. 

update(_arg_)[¶](https://docs.python.org/3/library/mailbox.html#mailbox.Mailbox.update "Link to this definition")
    
Parameter _arg_ should be a _key_ -to-_message_ mapping or an iterable of (_key_ , _message_) pairs. Updates the mailbox so that, for each given _key_ and _message_ , the message corresponding to _key_ is set to _message_ as if by using [`__setitem__()`](https://docs.python.org/3/library/mailbox.html#mailbox.Mailbox.__setitem__ "mailbox.Mailbox.__setitem__"). As with [`__setitem__()`](https://docs.python.org/3/library/mailbox.html#mailbox.Mailbox.__setitem__ "mailbox.Mailbox.__setitem__"), each _key_ must already correspond to a message in the mailbox or else a [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError") exception will be raised, so in general it is incorrect for _arg_ to be a `Mailbox` instance.
Note
Unlike with dictionaries, keyword arguments are not supported. 

flush()[¶](https://docs.python.org/3/library/mailbox.html#mailbox.Mailbox.flush "Link to this definition")
    
Write any pending changes to the filesystem. For some [`Mailbox`](https://docs.python.org/3/library/mailbox.html#mailbox.Mailbox "mailbox.Mailbox") subclasses, changes are always written immediately and `flush()` does nothing, but you should still make a habit of calling this method. 

lock()[¶](https://docs.python.org/3/library/mailbox.html#mailbox.Mailbox.lock "Link to this definition")
    
Acquire an exclusive advisory lock on the mailbox so that other processes know not to modify it. An [`ExternalClashError`](https://docs.python.org/3/library/mailbox.html#mailbox.ExternalClashError "mailbox.ExternalClashError") is raised if the lock is not available. The particular locking mechanisms used depend upon the mailbox format. You should _always_ lock the mailbox before making any modifications to its contents. 

unlock()[¶](https://docs.python.org/3/library/mailbox.html#mailbox.Mailbox.unlock "Link to this definition")
    
Release the lock on the mailbox, if any. 

close()[¶](https://docs.python.org/3/library/mailbox.html#mailbox.Mailbox.close "Link to this definition")
    
Flush the mailbox, unlock it if necessary, and close any open files. For some `Mailbox` subclasses, this method does nothing.
### `Maildir` objects[¶](https://docs.python.org/3/library/mailbox.html#maildir-objects "Link to this heading")