Title: NTEventLogHandler Class
URL: https://docs.python.org/3/library/logging.handlers.html
Summary: The `NTEventLogHandler` class in the logging.handlers module returns an instance configured for logging events to the Windows NT event log. It requires an application name for registry entry creation and optionally a DLL for message definitions. If no DLL is specified, a default is used, but this can result in larger log sizes.
---

_class_ logging.handlers.NTEventLogHandler(_appname_ , _dllname =None_, _logtype ='Application'_)[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.NTEventLogHandler "Link to this definition")
    
Returns a new instance of the [`NTEventLogHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.NTEventLogHandler "logging.handlers.NTEventLogHandler") class. The _appname_ is used to define the application name as it appears in the event log. An appropriate registry entry is created using this name. The _dllname_ should give the fully qualified pathname of a .dll or .exe which contains message definitions to hold in the log (if not specified, `'win32service.pyd'` is used - this is installed with the Win32 extensions and contains some basic placeholder message definitions. Note that use of these placeholders will make your event logs big, as the entire message source is held in the log. If you want slimmer logs, you have to pass in the name of your own .dll or .exe which contains the message definitions you want to use in the event log). The _logtype_ is one of `'Application'`, `'System'` or `'Security'`, and defaults to `'Application'`. 

close()[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.NTEventLogHandler.close "Link to this definition")
    
At this point, you can remove the application name from the registry as a source of event log entries. However, if you do this, you will not be able to see the events as you intended in the Event Log Viewer - it needs to be able to access the registry to get the .dll name. The current version does not do this. 

emit(_record_)[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.NTEventLogHandler.emit "Link to this definition")
    
Determines the message ID, event category and event type, and then logs the message in the NT event log. 

getEventCategory(_record_)[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.NTEventLogHandler.getEventCategory "Link to this definition")
    
Returns the event category for the record. Override this if you want to specify your own categories. This version returns 0. 

getEventType(_record_)[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.NTEventLogHandler.getEventType "Link to this definition")
    
Returns the event type for the record. Override this if you want to specify your own types. This version does a mapping using the handler’s typemap attribute, which is set up in `__init__()` to a dictionary which contains mappings for `DEBUG`, `INFO`, `WARNING`, `ERROR` and `CRITICAL`. If you are using your own levels, you will either need to override this method or place a suitable dictionary in the handler’s _typemap_ attribute. 

getMessageID(_record_)[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.NTEventLogHandler.getMessageID "Link to this definition")
    
Returns the message ID for the record. If you are using your own messages, you could do this by having the _msg_ passed to the logger being an ID rather than a format string. Then, in here, you could use a dictionary lookup to get the message ID. This version returns 1, which is the base message ID in `win32service.pyd`.
## SMTPHandler[¶](https://docs.python.org/3/library/logging.handlers.html#smtphandler "Link to this heading")
The [`SMTPHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.SMTPHandler "logging.handlers.SMTPHandler") class, located in the [`logging.handlers`](https://docs.python.org/3/library/logging.handlers.html#module-logging.handlers "logging.handlers: Handlers for the logging module.") module, supports sending logging messages to an email address via SMTP.