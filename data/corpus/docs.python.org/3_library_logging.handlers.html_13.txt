Title: MemoryHandler Class in Logging Module
URL: https://docs.python.org/3/library/logging.handlers.html
Summary: The MemoryHandler class manages a buffer of log records with a defined capacity. It flushes records based on a specified flush level (defaulting to ERROR) and requires a target to be set for effective logging. The option to prevent flushing on handler closure is also available.
---

_class_ logging.handlers.MemoryHandler(_capacity_ , _flushLevel =ERROR_, _target =None_, _flushOnClose =True_)[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.MemoryHandler "Link to this definition")
    
Returns a new instance of the [`MemoryHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.MemoryHandler "logging.handlers.MemoryHandler") class. The instance is initialized with a buffer size of _capacity_ (number of records buffered). If _flushLevel_ is not specified, `ERROR` is used. If no _target_ is specified, the target will need to be set using [`setTarget()`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.MemoryHandler.setTarget "logging.handlers.MemoryHandler.setTarget") before this handler does anything useful. If _flushOnClose_ is specified as `False`, then the buffer is _not_ flushed when the handler is closed. If not specified or specified as `True`, the previous behaviour of flushing the buffer will occur when the handler is closed.
Changed in version 3.6: The _flushOnClose_ parameter was added. 

close()[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.MemoryHandler.close "Link to this definition")
    
Calls [`flush()`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.MemoryHandler.flush "logging.handlers.MemoryHandler.flush"), sets the target to `None` and clears the buffer. 

flush()[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.MemoryHandler.flush "Link to this definition")
    
For a [`MemoryHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.MemoryHandler "logging.handlers.MemoryHandler") instance, flushing means just sending the buffered records to the target, if there is one. The buffer is also cleared when buffered records are sent to the target. Override if you want different behavior. 

setTarget(_target_)[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.MemoryHandler.setTarget "Link to this definition")
    
Sets the target handler for this handler. 

shouldFlush(_record_)[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.MemoryHandler.shouldFlush "Link to this definition")
    
Checks for buffer full or a record at the _flushLevel_ or higher.
## HTTPHandler[¶](https://docs.python.org/3/library/logging.handlers.html#httphandler "Link to this heading")
The [`HTTPHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.HTTPHandler "logging.handlers.HTTPHandler") class, located in the [`logging.handlers`](https://docs.python.org/3/library/logging.handlers.html#module-logging.handlers "logging.handlers: Handlers for the logging module.") module, supports sending logging messages to a web server, using either `GET` or `POST` semantics. 

_class_ logging.handlers.HTTPHandler(_host_ , _url_ , _method ='GET'_, _secure =False_, _credentials =None_, _context =None_)[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.HTTPHandler "Link to this definition")
    
Returns a new instance of the [`HTTPHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.HTTPHandler "logging.handlers.HTTPHandler") class. The _host_ can be of the form `host:port`, should you need to use a specific port number. If no _method_ is specified, `GET` is used. If _secure_ is true, a HTTPS connection will be used. The _context_ parameter may be set to a [`ssl.SSLContext`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext "ssl.SSLContext") instance to configure the SSL settings used for the HTTPS connection. If _credentials_ is specified, it should be a 2-tuple consisting of userid and password, which will be placed in a HTTP ‘Authorization’ header using Basic authentication. If you specify credentials, you should also specify secure=True so that your userid and password are not passed in cleartext across the wire.
Changed in version 3.5: The _context_ parameter was added. 

mapLogRecord(_record_)[¶](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.HTTPHandler.mapLogRecord "Link to this definition")
    
Provides a dictionary, based on `record`, which is to be URL-encoded and sent to the web server. The default implementation just returns `record.__dict__`. This method can be overridden if e.g. only a subset of [`LogRecord`](https://docs.python.org/3/library/logging.html#logging.LogRecord "logging.LogRecord") is to be sent to the web server, or if more specific customization of what’s sent to the server is required.