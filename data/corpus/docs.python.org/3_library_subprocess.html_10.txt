Title: Subprocess Environment Variables and I/O Modes
URL: https://docs.python.org/3/library/subprocess.html
Summary: This section discusses the requirements for the _env_ parameter in subprocess, highlighting the need for a valid `SystemRoot` on Windows for side-by-side assemblies. It also explains how specifying _encoding_, _errors_, or setting _text_ to true opens standard streams in text mode, with the default being binary mode.
---

This mapping can be str to str on any platform or bytes to bytes on POSIX platforms much like [`os.environ`](https://docs.python.org/3/library/os.html#os.environ "os.environ") or [`os.environb`](https://docs.python.org/3/library/os.html#os.environb "os.environb").
Note
If specified, _env_ must provide any variables required for the program to execute. On Windows, in order to run a [side-by-side assembly](https://en.wikipedia.org/wiki/Side-by-Side_Assembly) the specified _env_ **must** include a valid `SystemRoot`.
If _encoding_ or _errors_ are specified, or _text_ is true, the file objects _stdin_ , _stdout_ and _stderr_ are opened in text mode with the specified _encoding_ and _errors_ , as described above in [Frequently Used Arguments](https://docs.python.org/3/library/subprocess.html#frequently-used-arguments). The _universal_newlines_ argument is equivalent to _text_ and is provided for backwards compatibility. By default, file objects are opened in binary mode.
Added in version 3.6: _encoding_ and _errors_ were added.
Added in version 3.7: _text_ was added as a more readable alias for _universal_newlines_.
If given, _startupinfo_ will be a [`STARTUPINFO`](https://docs.python.org/3/library/subprocess.html#subprocess.STARTUPINFO "subprocess.STARTUPINFO") object, which is passed to the underlying `CreateProcess` function.
If given, _creationflags_ , can be one or more of the following flags:
  * [`CREATE_NEW_CONSOLE`](https://docs.python.org/3/library/subprocess.html#subprocess.CREATE_NEW_CONSOLE "subprocess.CREATE_NEW_CONSOLE")
  * [`CREATE_NEW_PROCESS_GROUP`](https://docs.python.org/3/library/subprocess.html#subprocess.CREATE_NEW_PROCESS_GROUP "subprocess.CREATE_NEW_PROCESS_GROUP")
  * [`ABOVE_NORMAL_PRIORITY_CLASS`](https://docs.python.org/3/library/subprocess.html#subprocess.ABOVE_NORMAL_PRIORITY_CLASS "subprocess.ABOVE_NORMAL_PRIORITY_CLASS")
  * [`BELOW_NORMAL_PRIORITY_CLASS`](https://docs.python.org/3/library/subprocess.html#subprocess.BELOW_NORMAL_PRIORITY_CLASS "subprocess.BELOW_NORMAL_PRIORITY_CLASS")
  * [`HIGH_PRIORITY_CLASS`](https://docs.python.org/3/library/subprocess.html#subprocess.HIGH_PRIORITY_CLASS "subprocess.HIGH_PRIORITY_CLASS")
  * [`IDLE_PRIORITY_CLASS`](https://docs.python.org/3/library/subprocess.html#subprocess.IDLE_PRIORITY_CLASS "subprocess.IDLE_PRIORITY_CLASS")
  * [`NORMAL_PRIORITY_CLASS`](https://docs.python.org/3/library/subprocess.html#subprocess.NORMAL_PRIORITY_CLASS "subprocess.NORMAL_PRIORITY_CLASS")
  * [`REALTIME_PRIORITY_CLASS`](https://docs.python.org/3/library/subprocess.html#subprocess.REALTIME_PRIORITY_CLASS "subprocess.REALTIME_PRIORITY_CLASS")
  * [`CREATE_NO_WINDOW`](https://docs.python.org/3/library/subprocess.html#subprocess.CREATE_NO_WINDOW "subprocess.CREATE_NO_WINDOW")
  * [`DETACHED_PROCESS`](https://docs.python.org/3/library/subprocess.html#subprocess.DETACHED_PROCESS "subprocess.DETACHED_PROCESS")
  * [`CREATE_DEFAULT_ERROR_MODE`](https://docs.python.org/3/library/subprocess.html#subprocess.CREATE_DEFAULT_ERROR_MODE "subprocess.CREATE_DEFAULT_ERROR_MODE")
  * [`CREATE_BREAKAWAY_FROM_JOB`](https://docs.python.org/3/library/subprocess.html#subprocess.CREATE_BREAKAWAY_FROM_JOB "subprocess.CREATE_BREAKAWAY_FROM_JOB")


_pipesize_ can be used to change the size of the pipe when [`PIPE`](https://docs.python.org/3/library/subprocess.html#subprocess.PIPE "subprocess.PIPE") is used for _stdin_ , _stdout_ or _stderr_. The size of the pipe is only changed on platforms that support this (only Linux at this time of writing). Other platforms will ignore this parameter.
Changed in version 3.10: Added the _pipesize_ parameter.
Popen objects are supported as context managers via the [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement: on exit, standard file descriptors are closed, and the process is waited for.
```
with Popen(["ifconfig"], stdout=PIPE) as proc:
  log.write(proc.stdout.read())