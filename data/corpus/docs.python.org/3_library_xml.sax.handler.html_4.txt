Title: ContentHandler.startElementNS Method
URL: https://docs.python.org/3/library/xml.sax.handler.html
Summary: The startElementNS method signals the beginning of an XML element in namespace mode, providing the element's name as a (uri, localname) tuple, the raw XML name, and an instance of AttributesNS for its attributes. If the element has no associated namespace, the uri will be None. Note that the attrs parameter can be reused by the parser; to keep a copy of the attributes, use the copy method.
---

ContentHandler.startElementNS(_name_ , _qname_ , _attrs_)[¶](https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.ContentHandler.startElementNS "Link to this definition")
    
Signals the start of an element in namespace mode.
The _name_ parameter contains the name of the element type as a `(uri, localname)` tuple, the _qname_ parameter contains the raw XML 1.0 name used in the source document, and the _attrs_ parameter holds an instance of the `AttributesNS` interface (see [The AttributesNS Interface](https://docs.python.org/3/library/xml.sax.reader.html#attributes-ns-objects)) containing the attributes of the element. If no namespace is associated with the element, the _uri_ component of _name_ will be `None`. The object passed as _attrs_ may be re-used by the parser; holding on to a reference to it is not a reliable way to keep a copy of the attributes. To keep a copy of the attributes, use the [`copy()`](https://docs.python.org/3/library/copy.html#module-copy "copy: Shallow and deep copy operations.") method of the _attrs_ object.
Parsers may set the _qname_ parameter to `None`, unless the `feature_namespace_prefixes` feature is activated. 

ContentHandler.endElementNS(_name_ , _qname_)[¶](https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.ContentHandler.endElementNS "Link to this definition")
    
Signals the end of an element in namespace mode.
The _name_ parameter contains the name of the element type, just as with the [`startElementNS()`](https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.ContentHandler.startElementNS "xml.sax.handler.ContentHandler.startElementNS") method, likewise the _qname_ parameter. 

ContentHandler.characters(_content_)[¶](https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.ContentHandler.characters "Link to this definition")
    
Receive notification of character data.
The Parser will call this method to report each chunk of character data. SAX parsers may return all contiguous character data in a single chunk, or they may split it into several chunks; however, all of the characters in any single event must come from the same external entity so that the Locator provides useful information.
_content_ may be a string or bytes instance; the `expat` reader module always produces strings.
Note
The earlier SAX 1 interface provided by the Python XML Special Interest Group used a more Java-like interface for this method. Since most parsers used from Python did not take advantage of the older interface, the simpler signature was chosen to replace it. To convert old code to the new interface, use _content_ instead of slicing content with the old _offset_ and _length_ parameters. 

ContentHandler.ignorableWhitespace(_whitespace_)[¶](https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.ContentHandler.ignorableWhitespace "Link to this definition")
    
Receive notification of ignorable whitespace in element content.
Validating Parsers must use this method to report each chunk of ignorable whitespace (see the W3C XML 1.0 recommendation, section 2.10): non-validating parsers may also use this method if they are capable of parsing and using content models.
SAX parsers may return all contiguous whitespace in a single chunk, or they may split it into several chunks; however, all of the characters in any single event must come from the same external entity, so that the Locator provides useful information. 

ContentHandler.processingInstruction(_target_ , _data_)[¶](https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.ContentHandler.processingInstruction "Link to this definition")
    
Receive notification of a processing instruction.
The Parser will invoke this method once for each processing instruction found: note that processing instructions may occur before or after the main document element.
A SAX parser should never report an XML declaration (XML 1.0, section 2.8) or a text declaration (XML 1.0, section 4.3.1) using this method. 

ContentHandler.skippedEntity(_name_)[¶](https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.ContentHandler.skippedEntity "Link to this definition")
    
Receive notification of a skipped entity.
The Parser will invoke this method once for each entity skipped. Non-validating processors may skip entities if they have not seen the declarations (because, for example, the entity was declared in an external DTD subset). All processors may skip external entities, depending on the values of the `feature_external_ges` and the `feature_external_pes` properties.
## DTDHandler Objects[¶](https://docs.python.org/3/library/xml.sax.handler.html#dtdhandler-objects "Link to this heading")
[`DTDHandler`](https://docs.python.org/3/library/xml.sax.handler.html#xml.sax.handler.DTDHandler "xml.sax.handler.DTDHandler") instances provide the following methods: