Title: Uses and Customization of Metaclasses in Python
URL: https://docs.python.org/3/reference/datamodel.html
Summary: This section discusses the diverse applications of metaclasses, including their potential for enum creation, logging, interface checking, and more. It also covers how to customize instance and subclass checks using methods to override the default behavior of 'isinstance()' and 'issubclass()' built-in functions.
---

[**PEP 3135**](https://peps.python.org/pep-3135/) - New super
    
Describes the implicit `__class__` closure reference
#### 3.3.3.7. Uses for metaclasses[¶](https://docs.python.org/3/reference/datamodel.html#uses-for-metaclasses "Link to this heading")
The potential uses for metaclasses are boundless. Some ideas that have been explored include enum, logging, interface checking, automatic delegation, automatic property creation, proxies, frameworks, and automatic resource locking/synchronization.
### 3.3.4. Customizing instance and subclass checks[¶](https://docs.python.org/3/reference/datamodel.html#customizing-instance-and-subclass-checks "Link to this heading")
The following methods are used to override the default behavior of the [`isinstance()`](https://docs.python.org/3/library/functions.html#isinstance "isinstance") and [`issubclass()`](https://docs.python.org/3/library/functions.html#issubclass "issubclass") built-in functions.
In particular, the metaclass [`abc.ABCMeta`](https://docs.python.org/3/library/abc.html#abc.ABCMeta "abc.ABCMeta") implements these methods in order to allow the addition of Abstract Base Classes (ABCs) as “virtual base classes” to any class or type (including built-in types), including other ABCs. 

type.__instancecheck__(_self_ , _instance_)[¶](https://docs.python.org/3/reference/datamodel.html#type.__instancecheck__ "Link to this definition")
    
Return true if _instance_ should be considered a (direct or indirect) instance of _class_. If defined, called to implement `isinstance(instance, class)`. 

type.__subclasscheck__(_self_ , _subclass_)[¶](https://docs.python.org/3/reference/datamodel.html#type.__subclasscheck__ "Link to this definition")
    
Return true if _subclass_ should be considered a (direct or indirect) subclass of _class_. If defined, called to implement `issubclass(subclass, class)`.
Note that these methods are looked up on the type (metaclass) of a class. They cannot be defined as class methods in the actual class. This is consistent with the lookup of special methods that are called on instances, only in this case the instance is itself a class.
See also 

[**PEP 3119**](https://peps.python.org/pep-3119/) - Introducing Abstract Base Classes
    
Includes the specification for customizing [`isinstance()`](https://docs.python.org/3/library/functions.html#isinstance "isinstance") and [`issubclass()`](https://docs.python.org/3/library/functions.html#issubclass "issubclass") behavior through [`__instancecheck__()`](https://docs.python.org/3/reference/datamodel.html#type.__instancecheck__ "type.__instancecheck__") and [`__subclasscheck__()`](https://docs.python.org/3/reference/datamodel.html#type.__subclasscheck__ "type.__subclasscheck__"), with motivation for this functionality in the context of adding Abstract Base Classes (see the [`abc`](https://docs.python.org/3/library/abc.html#module-abc "abc: Abstract base classes according to :pep:`3119`.") module) to the language.
### 3.3.5. Emulating generic types[¶](https://docs.python.org/3/reference/datamodel.html#emulating-generic-types "Link to this heading")
When using [type annotations](https://docs.python.org/3/glossary.html#term-annotation), it is often useful to _parameterize_ a [generic type](https://docs.python.org/3/glossary.html#term-generic-type) using Python’s square-brackets notation. For example, the annotation `list[int]` might be used to signify a [`list`](https://docs.python.org/3/library/stdtypes.html#list "list") in which all the elements are of type [`int`](https://docs.python.org/3/library/functions.html#int "int").
See also 

[**PEP 484**](https://peps.python.org/pep-0484/) - Type Hints
    
Introducing Python’s framework for type annotations 

[Generic Alias Types](https://docs.python.org/3/library/stdtypes.html#types-genericalias)
    
Documentation for objects representing parameterized generic classes 

[Generics](https://docs.python.org/3/library/typing.html#generics), [user-defined generics](https://docs.python.org/3/library/typing.html#user-defined-generics) and [`typing.Generic`](https://docs.python.org/3/library/typing.html#typing.Generic "typing.Generic")
    
Documentation on how to implement generic classes that can be parameterized at runtime and understood by static type-checkers.
A class can _generally_ only be parameterized if it defines the special class method `__class_getitem__()`.