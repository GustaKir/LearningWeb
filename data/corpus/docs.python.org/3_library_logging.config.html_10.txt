Title: Logging Configuration: QueueHandler Options
URL: https://docs.python.org/3/library/logging.config.html
Summary: This section describes the optional `queue` and `listener` keys for the `QueueHandler` in Python's logging configuration. It specifies that the `queue` value can be an object that implements the `Queue.put_nowait` and `Queue.get` methods, such as an instance of `queue.Queue` or a proxy from `multiprocessing.managers.SyncManager.Queue`.
---

```
handlers:
qhand:
class:logging.handlers.QueueHandler
queue:my.module.queue_factory
listener:my.package.CustomListener
handlers:
-hand_name_1
-hand_name_2
...

```

The `queue` and `listener` keys are optional.
If the `queue` key is present, the corresponding value can be one of the following:
  * An object implementing the [`Queue.put_nowait`](https://docs.python.org/3/library/queue.html#queue.Queue.put_nowait "queue.Queue.put_nowait") and [`Queue.get`](https://docs.python.org/3/library/queue.html#queue.Queue.get "queue.Queue.get") public API. For instance, this may be an actual instance of [`queue.Queue`](https://docs.python.org/3/library/queue.html#queue.Queue "queue.Queue") or a subclass thereof, or a proxy obtained by [`multiprocessing.managers.SyncManager.Queue()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.SyncManager.Queue "multiprocessing.managers.SyncManager.Queue").
This is of course only possible if you are constructing or modifying the configuration dictionary in code.
  * A string that resolves to a callable which, when called with no arguments, returns the queue instance to use. That callable could be a [`queue.Queue`](https://docs.python.org/3/library/queue.html#queue.Queue "queue.Queue") subclass or a function which returns a suitable queue instance, such as `my.module.queue_factory()`.
  * A dict with a `'()'` key which is constructed in the usual way as discussed in [User-defined objects](https://docs.python.org/3/library/logging.config.html#logging-config-dict-userdef). The result of this construction should be a [`queue.Queue`](https://docs.python.org/3/library/queue.html#queue.Queue "queue.Queue") instance.


If the `queue` key is absent, a standard unbounded [`queue.Queue`](https://docs.python.org/3/library/queue.html#queue.Queue "queue.Queue") instance is created and used.
If the `listener` key is present, the corresponding value can be one of the following:
  * A subclass of [`logging.handlers.QueueListener`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.QueueListener "logging.handlers.QueueListener"). This is of course only possible if you are constructing or modifying the configuration dictionary in code.
  * A string which resolves to a class which is a subclass of `QueueListener`, such as `'my.package.CustomListener'`.
  * A dict with a `'()'` key which is constructed in the usual way as discussed in [User-defined objects](https://docs.python.org/3/library/logging.config.html#logging-config-dict-userdef). The result of this construction should be a callable with the same signature as the `QueueListener` initializer.