Title: Python XML Document Object Model (DOM) Implementation
URL: https://docs.python.org/3/whatsnew/2.1.html
Summary: The xml.dom package in Python provides a W3C Document Object Model implementation. It includes a comprehensive mapping of the DOM, documented in the Python Library Reference. The documentation also highlights the inclusion of interactive help through `pydoc` and introduces two new unit testing modules, `doctest` and `PyUnit`, enhancing testing capabilities in the standard library.
---

```
Python Library Documentation: package xml.dom in xml
NAME
  xml.dom - W3C Document Object Model implementation for Python.
FILE
  /usr/local/lib/python2.1/xml/dom/__init__.pyc
DESCRIPTION
  The Python mapping of the Document Object Model is documented in the
  Python Library Reference in the section on the xml.dom package.
  This package contains the following modules:
   ...

```

`pydoc` also includes a Tk-based interactive help browser. `pydoc` quickly becomes addictive; try it out!
  * Two different modules for unit testing were added to the standard library. The [`doctest`](https://docs.python.org/3/library/doctest.html#module-doctest "doctest: Test pieces of code within docstrings.") module, contributed by Tim Peters, provides a testing framework based on running embedded examples in docstrings and comparing the results against the expected output. PyUnit, contributed by Steve Purcell, is a unit testing framework inspired by JUnit, which was in turn an adaptation of Kent Beck’s Smalltalk testing framework. See <https://pyunit.sourceforge.net/> for more information about PyUnit.
  * The [`difflib`](https://docs.python.org/3/library/difflib.html#module-difflib "difflib: Helpers for computing differences between objects.") module contains a class, [`SequenceMatcher`](https://docs.python.org/3/library/difflib.html#difflib.SequenceMatcher "difflib.SequenceMatcher"), which compares two sequences and computes the changes required to transform one sequence into the other. For example, this module can be used to write a tool similar to the Unix **diff** program, and in fact the sample program `Tools/scripts/ndiff.py` demonstrates how to write such a script.
  * [`curses.panel`](https://docs.python.org/3/library/curses.panel.html#module-curses.panel "curses.panel: A panel stack extension that adds depth to curses windows."), a wrapper for the panel library, part of ncurses and of SYSV curses, was contributed by Thomas Gellekum. The panel library provides windows with the additional feature of depth. Windows can be moved higher or lower in the depth ordering, and the panel library figures out where panels overlap and which sections are visible.
  * The PyXML package has gone through a few releases since Python 2.0, and Python 2.1 includes an updated version of the [`xml`](https://docs.python.org/3/library/xml.html#module-xml "xml: Package containing XML processing modules") package. Some of the noteworthy changes include support for Expat 1.2 and later versions, the ability for Expat parsers to handle files in any encoding supported by Python, and various bugfixes for SAX, DOM, and the `minidom` module.
  * Ping also contributed another hook for handling uncaught exceptions. [`sys.excepthook()`](https://docs.python.org/3/library/sys.html#sys.excepthook "sys.excepthook") can be set to a callable object. When an exception isn’t caught by any [`try`](https://docs.python.org/3/reference/compound_stmts.html#try)…[`except`](https://docs.python.org/3/reference/compound_stmts.html#except) blocks, the exception will be passed to [`sys.excepthook()`](https://docs.python.org/3/library/sys.html#sys.excepthook "sys.excepthook"), which can then do whatever it likes. At the Ninth Python Conference, Ping demonstrated an application for this hook: printing an extended traceback that not only lists the stack frames, but also lists the function arguments and the local variables for each frame.
  * Various functions in the [`time`](https://docs.python.org/3/library/time.html#module-time "time: Time access and conversions.") module, such as [`asctime()`](https://docs.python.org/3/library/time.html#time.asctime "time.asctime") and [`localtime()`](https://docs.python.org/3/library/time.html#time.localtime "time.localtime"), require a floating-point argument containing the time in seconds since the epoch. The most common use of these functions is to work with the current time, so the floating-point argument has been made optional; when a value isn’t provided, the current time will be used. For example, log file entries usually need a string containing the current time; in Python 2.1, `time.asctime()` can be used, instead of the lengthier `time.asctime(time.localtime(time.time()))` that was previously required.
This change was proposed and implemented by Thomas Wouters.
  * The [`ftplib`](https://docs.python.org/3/library/ftplib.html#module-ftplib "ftplib: FTP protocol client \(requires sockets\).") module now defaults to retrieving files in passive mode, because passive mode is more likely to work from behind a firewall. This request came from the Debian bug tracking system, since other Debian packages use [`ftplib`](https://docs.python.org/3/library/ftplib.html#module-ftplib "ftplib: FTP protocol client \(requires sockets\).") to retrieve files and then don’t work from behind a firewall. It’s deemed unlikely that this will cause problems for anyone, because Netscape defaults to passive mode and few people complain, but if passive