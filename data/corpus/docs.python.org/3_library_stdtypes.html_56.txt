Title: Standard Types in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This document features links to various standard type classes and functions in Python, including views for collections and context managers from the 'collections.abc' and 'contextlib' modules, as well as utilities from 'dataclasses' and 'functools'.
---

tions.abc.KeysView "collections.abc.KeysView")
  * [`collections.abc.ItemsView`](https://docs.python.org/3/library/collections.abc.html#collections.abc.ItemsView "collections.abc.ItemsView")
  * [`collections.abc.ValuesView`](https://docs.python.org/3/library/collections.abc.html#collections.abc.ValuesView "collections.abc.ValuesView")
  * [`contextlib.AbstractContextManager`](https://docs.python.org/3/library/contextlib.html#contextlib.AbstractContextManager "contextlib.AbstractContextManager")
  * [`contextlib.AbstractAsyncContextManager`](https://docs.python.org/3/library/contextlib.html#contextlib.AbstractAsyncContextManager "contextlib.AbstractAsyncContextManager")
  * [`dataclasses.Field`](https://docs.python.org/3/library/dataclasses.html#dataclasses.Field "dataclasses.Field")
  * [`functools.cached_property`](https://docs.python.org/3/library/functools.html#functools.cached_property "functools.cached_property")
  * [`functools.partialmethod`](https://docs.python.org/3/library/functools.html#functools.partialmethod "functools.partialmethod")
  * [`os.PathLike`](https://docs.python.org/3/library/os.html#os.PathLike "os.PathLike")
  * [`queue.LifoQueue`](https://docs.python.org/3/library/queue.html#queue.LifoQueue "queue.LifoQueue")
  * [`queue.Queue`](https://docs.python.org/3/library/queue.html#queue.Queue "queue.Queue")
  * [`queue.PriorityQueue`](https://docs.python.org/3/library/queue.html#queue.PriorityQueue "queue.PriorityQueue")
  * [`queue.SimpleQueue`](https://docs.python.org/3/library/queue.html#queue.SimpleQueue "queue.SimpleQueue")
  * [re.Pattern](https://docs.python.org/3/library/re.html#re-objects)
  * [re.Match](https://docs.python.org/3/library/re.html#match-objects)
  * [`shelve.BsdDbShelf`](https://docs.python.org/3/library/shelve.html#shelve.BsdDbShelf "shelve.BsdDbShelf")
  * [`shelve.DbfilenameShelf`](https://docs.python.org/3/library/shelve.html#shelve.DbfilenameShelf "shelve.DbfilenameShelf")
  * [`shelve.Shelf`](https://docs.python.org/3/library/shelve.html#shelve.Shelf "shelve.Shelf")
  * [`types.MappingProxyType`](https://docs.python.org/3/library/types.html#types.MappingProxyType "types.MappingProxyType")
  * [`weakref.WeakKeyDictionary`](https://docs.python.org/3/library/weakref.html#weakref.WeakKeyDictionary "weakref.WeakKeyDictionary")
  * [`weakref.WeakMethod`](https://docs.python.org/3/library/weakref.html#weakref.WeakMethod "weakref.WeakMethod")
  * [`weakref.WeakSet`](https://docs.python.org/3/library/weakref.html#weakref.WeakSet "weakref.WeakSet")
  * [`weakref.WeakValueDictionary`](https://docs.python.org/3/library/weakref.html#weakref.WeakValueDictionary "weakref.WeakValueDictionary")


#### Special Attributes of `GenericAlias` objects[¶](https://docs.python.org/3/library/stdtypes.html#special-attributes-of-genericalias-objects "Link to this heading")
All parameterized generics implement special read-only attributes. 

genericalias.__origin__[¶](https://docs.python.org/3/library/stdtypes.html#genericalias.__origin__ "Link to this definition")
    
This attribute points at the non-parameterized generic class:
>>>```
>>> list[int].__origin__
<class 'list'>

```


genericalias.__args__[¶](https://docs.python.org/3/library/stdtypes.html#genericalias.__args__ "Link to this definition")
    
This attribute is a [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple") (possibly of length 1) of generic types passed to the original [`__class_getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__class_getitem__ "object.__class_getitem__") of the generic class:
>>>```
>>> dict[str, list[int]].__args__
(<class 'str'>, list[int])

```


genericalias.__parameters__[¶](https://docs.python.org/3/library/stdtypes.html#genericalias.__parameters__ "Link to this definition")
    
This attribute is a lazily computed tuple (possibly empty) of unique type variables found in `__args__`:
>>>```
>>> fromtypingimport TypeVar
>>> T = TypeVar('T')
>>> list[T].__parameters__
(~T,)