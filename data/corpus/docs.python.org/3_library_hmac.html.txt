Title: HMAC Module Documentation
URL: https://docs.python.org/3/library/hmac.html
Summary: This section introduces the HMAC (Hash-based Message Authentication Code) module in Python, detailing its functionality and usage within the context of secure hashing and message integrity.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
#### Previous topic
[`hashlib` — Secure hashes and message digests](https://docs.python.org/3/library/hashlib.html "previous chapter")
#### Next topic
[`secrets` — Generate secure random numbers for managing secrets](https://docs.python.org/3/library/secrets.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/hmac.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/secrets.html "secrets — Generate secure random numbers for managing secrets") |
  * [previous](https://docs.python.org/3/library/hashlib.html "hashlib — Secure hashes and message digests") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Cryptographic Services](https://docs.python.org/3/library/crypto.html) »
  * [`hmac` — Keyed-Hashing for Message Authentication](https://docs.python.org/3/library/hmac.html)
  * | 
  * Theme  Auto Light Dark |


# `hmac` — Keyed-Hashing for Message Authentication[¶](https://docs.python.org/3/library/hmac.html#module-hmac "Link to this heading")
**Source code:** [Lib/hmac.py](https://github.com/python/cpython/tree/3.13/Lib/hmac.py)
This module implements the HMAC algorithm as described by [**RFC 2104**](https://datatracker.ietf.org/doc/html/rfc2104.html). 

hmac.new(_key_ , _msg=None_ , _digestmod_)[¶](https://docs.python.org/3/library/hmac.html#hmac.new "Link to this definition")
    
Return a new hmac object. _key_ is a bytes or bytearray object giving the secret key. If _msg_ is present, the method call `update(msg)` is made. _digestmod_ is the digest name, digest constructor or module for the HMAC object to use. It may be any name suitable to [`hashlib.new()`](https://docs.python.org/3/library/hashlib.html#hashlib.new "hashlib.new"). Despite its argument position, it is required.
Changed in version 3.4: Parameter _key_ can be a bytes or bytearray object. Parameter _msg_ can be of any type supported by [`hashlib`](https://docs.python.org/3/library/hashlib.html#module-hashlib "hashlib: Secure hash and message digest algorithms."). Parameter _digestmod_ can be the name of a hash algorithm.
Changed in version 3.8: The _digestmod_ argument is now required. Pass it as a keyword argument to avoid awkwardness when you do not have an initial _msg_. 

hmac.digest(_key_ , _msg_ , _digest_)[¶](https://docs.python.org/3/library/hmac.html#hmac.digest "Link to this definition")
    
Return digest of _msg_ for given secret _key_ and _digest_. The function is equivalent to `HMAC(key, msg, digest).digest()`, but uses an optimized C or inline implementation, which is faster for messages that fit into memory. The parameters _key_ , _msg_ , and _digest_ have the same meaning as in [`new()`](https://docs.python.org/3/library/hmac.html#hmac.new "hmac.new").
CPython implementation detail, the optimized C implementation is only used when _digest_ is a string and name of a digest algorithm, which is supported by OpenSSL.
Added in version 3.7.
An HMAC object has the following methods: 

HMAC.update(_msg_)[¶](https://docs.python.org/3/library/hmac.html#hmac.HMAC.update "Link to this definition")
    
Update the hmac object with _msg_. Repeated calls are equivalent to a single call with the concatenation of all the arguments: `m.update(a); m.update(b)` is equivalent to `m.update(a + b)`.
Changed in version 3.4: Parameter _msg_ can be of any type supported by [`hashlib`](https://docs.python.org/3/library/hashlib.html#module-hashlib "hashlib: Secure hash and message digest algorithms.").