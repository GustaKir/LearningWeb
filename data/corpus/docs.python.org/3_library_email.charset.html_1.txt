Title: Email Charset Attributes
URL: https://docs.python.org/3/library/email.charset.html
Summary: This section details attributes of the email charset, including the initial character set 'input_charset' (defaulting to 'us-ascii' and converting common aliases), 'header_encoding' for encoding used in email headers (options include QP, BASE64, or None), and 'body_encoding' for encoding the mail message's body, which may differ from header encoding.
---

input_charset[¶](https://docs.python.org/3/library/email.charset.html#email.charset.Charset.input_charset "Link to this definition")
    
The initial character set specified. Common aliases are converted to their _official_ email names (e.g. `latin_1` is converted to `iso-8859-1`). Defaults to 7-bit `us-ascii`. 

header_encoding[¶](https://docs.python.org/3/library/email.charset.html#email.charset.Charset.header_encoding "Link to this definition")
    
If the character set must be encoded before it can be used in an email header, this attribute will be set to `charset.QP` (for quoted-printable), `charset.BASE64` (for base64 encoding), or `charset.SHORTEST` for the shortest of QP or BASE64 encoding. Otherwise, it will be `None`. 

body_encoding[¶](https://docs.python.org/3/library/email.charset.html#email.charset.Charset.body_encoding "Link to this definition")
    
Same as _header_encoding_ , but describes the encoding for the mail message’s body, which indeed may be different than the header encoding. `charset.SHORTEST` is not allowed for _body_encoding_. 

output_charset[¶](https://docs.python.org/3/library/email.charset.html#email.charset.Charset.output_charset "Link to this definition")
    
Some character sets must be converted before they can be used in email headers or bodies. If the _input_charset_ is one of them, this attribute will contain the name of the character set output will be converted to. Otherwise, it will be `None`. 

input_codec[¶](https://docs.python.org/3/library/email.charset.html#email.charset.Charset.input_codec "Link to this definition")
    
The name of the Python codec used to convert the _input_charset_ to Unicode. If no conversion codec is necessary, this attribute will be `None`. 

output_codec[¶](https://docs.python.org/3/library/email.charset.html#email.charset.Charset.output_codec "Link to this definition")
    
The name of the Python codec used to convert Unicode to the _output_charset_. If no conversion codec is necessary, this attribute will have the same value as the _input_codec_.
[`Charset`](https://docs.python.org/3/library/email.charset.html#email.charset.Charset "email.charset.Charset") instances also have the following methods: 

get_body_encoding()[¶](https://docs.python.org/3/library/email.charset.html#email.charset.Charset.get_body_encoding "Link to this definition")
    
Return the content transfer encoding used for body encoding.
This is either the string `quoted-printable` or `base64` depending on the encoding used, or it is a function, in which case you should call the function with a single argument, the Message object being encoded. The function should then set the _Content-Transfer-Encoding_ header itself to whatever is appropriate.
Returns the string `quoted-printable` if _body_encoding_ is `QP`, returns the string `base64` if _body_encoding_ is `BASE64`, and returns the string `7bit` otherwise. 

get_output_charset()[¶](https://docs.python.org/3/library/email.charset.html#email.charset.Charset.get_output_charset "Link to this definition")
    
Return the output character set.
This is the _output_charset_ attribute if that is not `None`, otherwise it is _input_charset_. 

header_encode(_string_)[¶](https://docs.python.org/3/library/email.charset.html#email.charset.Charset.header_encode "Link to this definition")
    
Header-encode the string _string_.
The type of encoding (base64 or quoted-printable) will be based on the _header_encoding_ attribute. 

header_encode_lines(_string_ , _maxlengths_)[¶](https://docs.python.org/3/library/email.charset.html#email.charset.Charset.header_encode_lines "Link to this definition")
    
Header-encode a _string_ by converting it first to bytes.
This is similar to [`header_encode()`](https://docs.python.org/3/library/email.charset.html#email.charset.Charset.header_encode "email.charset.Charset.header_encode") except that the string is fit into maximum line lengths as given by the argument _maxlengths_ , which must be an iterator: each element returned from this iterator will provide the next maximum line length. 

body_encode(_string_)[¶](https://docs.python.org/3/library/email.charset.html#email.charset.Charset.body_encode "Link to this definition")
    
Body-encode the string _string_.
The type of encoding (base64 or quoted-printable) will be based on the _body_encoding_ attribute.
The [`Charset`](https://docs.python.org/3/library/email.charset.html#email.charset.Charset "email.charset.Charset") class also provides a number of methods to support standard operations and built-in functions. 

__str__()[¶](https://docs.python.org/3/library/email.charset.html#email.charset.Charset.__str__ "Link to this definition")
    
Returns _input_charset_ as a string coerced to lower case. `__repr__()` is an alias for `__str__()`.