Title: shelve.Shelf Class Overview
URL: https://docs.python.org/3/library/shelve.html
Summary: The `shelve.Shelf` class is a subclass of `collections.abc.MutableMapping` designed to store pickled values within a dictionary object. It uses the default pickle protocol for serialization, which can be customized via the `_protocol` parameter. If `_writeback` is set to `True`, it caches accessed entries to write them back later.
---

_class_ shelve.Shelf(_dict_ , _protocol =None_, _writeback =False_, _keyencoding ='utf-8'_)[¶](https://docs.python.org/3/library/shelve.html#shelve.Shelf "Link to this definition")
    
A subclass of [`collections.abc.MutableMapping`](https://docs.python.org/3/library/collections.abc.html#collections.abc.MutableMapping "collections.abc.MutableMapping") which stores pickled values in the _dict_ object.
By default, pickles created with [`pickle.DEFAULT_PROTOCOL`](https://docs.python.org/3/library/pickle.html#pickle.DEFAULT_PROTOCOL "pickle.DEFAULT_PROTOCOL") are used to serialize values. The version of the pickle protocol can be specified with the _protocol_ parameter. See the [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "pickle: Convert Python objects to streams of bytes and back.") documentation for a discussion of the pickle protocols.
If the _writeback_ parameter is `True`, the object will hold a cache of all entries accessed and write them back to the _dict_ at sync and close times. This allows natural operations on mutable entries, but can consume much more memory and make sync and close take a long time.
The _keyencoding_ parameter is the encoding used to encode keys before they are used with the underlying dict.
A [`Shelf`](https://docs.python.org/3/library/shelve.html#shelve.Shelf "shelve.Shelf") object can also be used as a context manager, in which case it will be automatically closed when the [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) block ends.
Changed in version 3.2: Added the _keyencoding_ parameter; previously, keys were always encoded in UTF-8.
Changed in version 3.4: Added context manager support.
Changed in version 3.10: [`pickle.DEFAULT_PROTOCOL`](https://docs.python.org/3/library/pickle.html#pickle.DEFAULT_PROTOCOL "pickle.DEFAULT_PROTOCOL") is now used as the default pickle protocol. 

_class_ shelve.BsdDbShelf(_dict_ , _protocol =None_, _writeback =False_, _keyencoding ='utf-8'_)[¶](https://docs.python.org/3/library/shelve.html#shelve.BsdDbShelf "Link to this definition")
    
A subclass of [`Shelf`](https://docs.python.org/3/library/shelve.html#shelve.Shelf "shelve.Shelf") which exposes `first()`, `next()`, `previous()`, `last()` and `set_location()` methods. These are available in the third-party `bsddb` module from [pybsddb](https://www.jcea.es/programacion/pybsddb.htm) but not in other database modules. The _dict_ object passed to the constructor must support those methods. This is generally accomplished by calling one of `bsddb.hashopen()`, `bsddb.btopen()` or `bsddb.rnopen()`. The optional _protocol_ , _writeback_ , and _keyencoding_ parameters have the same interpretation as for the [`Shelf`](https://docs.python.org/3/library/shelve.html#shelve.Shelf "shelve.Shelf") class. 

_class_ shelve.DbfilenameShelf(_filename_ , _flag ='c'_, _protocol =None_, _writeback =False_)[¶](https://docs.python.org/3/library/shelve.html#shelve.DbfilenameShelf "Link to this definition")
    
A subclass of [`Shelf`](https://docs.python.org/3/library/shelve.html#shelve.Shelf "shelve.Shelf") which accepts a _filename_ instead of a dict-like object. The underlying file will be opened using [`dbm.open()`](https://docs.python.org/3/library/dbm.html#dbm.open "dbm.open"). By default, the file will be created and opened for both read and write. The optional _flag_ parameter has the same interpretation as for the [`open()`](https://docs.python.org/3/library/shelve.html#shelve.open "shelve.open") function. The optional _protocol_ and _writeback_ parameters have the same interpretation as for the [`Shelf`](https://docs.python.org/3/library/shelve.html#shelve.Shelf "shelve.Shelf") class.
## Example[¶](https://docs.python.org/3/library/shelve.html#example "Link to this heading")
To summarize the interface (`key` is a string, `data` is an arbitrary object):