Title: Specifying the Interpreter in Zipapp
URL: https://docs.python.org/3/library/zipapp.html
Summary: When specifying an interpreter for a Python application archive, ensure it is portable for users. Consider potential issues with different Python versions, particularly with using 'python' commands that may default to either Python 2 or 3. Avoid binding to an exact version to maintain compatibility.
---

```

## Specifying the Interpreter[¶](https://docs.python.org/3/library/zipapp.html#specifying-the-interpreter "Link to this heading")
Note that if you specify an interpreter and then distribute your application archive, you need to ensure that the interpreter used is portable. The Python launcher for Windows supports most common forms of POSIX `#!` line, but there are other issues to consider:
  * If you use “/usr/bin/env python” (or other forms of the “python” command, such as “/usr/bin/python”), you need to consider that your users may have either Python 2 or Python 3 as their default, and write your code to work under both versions.
  * If you use an explicit version, for example “/usr/bin/env python3” your application will not work for users who do not have that version. (This may be what you want if you have not made your code Python 2 compatible).
  * There is no way to say “python X.Y or later”, so be careful of using an exact version like “/usr/bin/env python3.4” as you will need to change your shebang line for users of Python 3.5, for example.


Typically, you should use an “/usr/bin/env python2” or “/usr/bin/env python3”, depending on whether your code is written for Python 2 or 3.
## Creating Standalone Applications with zipapp[¶](https://docs.python.org/3/library/zipapp.html#creating-standalone-applications-with-zipapp "Link to this heading")
Using the [`zipapp`](https://docs.python.org/3/library/zipapp.html#module-zipapp "zipapp: Manage executable Python zip archives") module, it is possible to create self-contained Python programs, which can be distributed to end users who only need to have a suitable version of Python installed on their system. The key to doing this is to bundle all of the application’s dependencies into the archive, along with the application code.
The steps to create a standalone archive are as follows:
  1. Create your application in a directory as normal, so you have a `myapp` directory containing a `__main__.py` file, and any supporting application code.
  2. Install all of your application’s dependencies into the `myapp` directory, using pip:
```
$ python-mpipinstall-rrequirements.txt--targetmyapp

```

(this assumes you have your project requirements in a `requirements.txt` file - if not, you can just list the dependencies manually on the pip command line).
  3. Package the application using:
```
$ python-mzipapp-p"interpreter"myapp