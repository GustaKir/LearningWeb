Title: Calculating the Mean with Python's Statistics Module
URL: https://docs.python.org/3/library/statistics.html
Summary: This section demonstrates how to calculate the mean using Python's statistics module with various data types, including lists of integers, floats, fractions, and decimals. It highlights that the mean can be influenced by outliers and compares it to the median as a more robust measure of central tendency. Additionally, it notes the unbiased nature of the sample mean in estimating the population mean.
---

```
>>> mean([1, 2, 3, 4, 4])
2.8
>>> mean([-1.0, 2.5, 3.25, 5.75])
2.625
>>> fromfractionsimport Fraction as F
>>> mean([F(3, 7), F(1, 21), F(5, 3), F(1, 3)])
Fraction(13, 21)
>>> fromdecimalimport Decimal as D
>>> mean([D("0.5"), D("0.75"), D("0.625"), D("0.375")])
Decimal('0.5625')

```

Note
The mean is strongly affected by [outliers](https://en.wikipedia.org/wiki/Outlier) and is not necessarily a typical example of the data points. For a more robust, although less efficient, measure of [central tendency](https://en.wikipedia.org/wiki/Central_tendency), see [`median()`](https://docs.python.org/3/library/statistics.html#statistics.median "statistics.median").
The sample mean gives an unbiased estimate of the true population mean, so that when taken on average over all the possible samples, `mean(sample)` converges on the true mean of the entire population. If _data_ represents the entire population rather than a sample, then `mean(data)` is equivalent to calculating the true population mean μ. 

statistics.fmean(_data_ , _weights =None_)[¶](https://docs.python.org/3/library/statistics.html#statistics.fmean "Link to this definition")
    
Convert _data_ to floats and compute the arithmetic mean.
This runs faster than the [`mean()`](https://docs.python.org/3/library/statistics.html#statistics.mean "statistics.mean") function and it always returns a [`float`](https://docs.python.org/3/library/functions.html#float "float"). The _data_ may be a sequence or iterable. If the input dataset is empty, raises a [`StatisticsError`](https://docs.python.org/3/library/statistics.html#statistics.StatisticsError "statistics.StatisticsError").
>>>```
>>> fmean([3.5, 4.0, 5.25])
4.25

```

Optional weighting is supported. For example, a professor assigns a grade for a course by weighting quizzes at 20%, homework at 20%, a midterm exam at 30%, and a final exam at 30%:
>>>```
>>> grades = [85, 92, 83, 91]
>>> weights = [0.20, 0.20, 0.30, 0.30]
>>> fmean(grades, weights)
87.6

```

If _weights_ is supplied, it must be the same length as the _data_ or a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") will be raised.
Added in version 3.8.
Changed in version 3.11: Added support for _weights_. 

statistics.geometric_mean(_data_)[¶](https://docs.python.org/3/library/statistics.html#statistics.geometric_mean "Link to this definition")
    
Convert _data_ to floats and compute the geometric mean.
The geometric mean indicates the central tendency or typical value of the _data_ using the product of the values (as opposed to the arithmetic mean which uses their sum).
Raises a [`StatisticsError`](https://docs.python.org/3/library/statistics.html#statistics.StatisticsError "statistics.StatisticsError") if the input dataset is empty, if it contains a zero, or if it contains a negative value. The _data_ may be a sequence or iterable.
No special efforts are made to achieve exact results. (However, this may change in the future.)
>>>```
>>> round(geometric_mean([54, 24, 36]), 1)
36.0

```

Added in version 3.8. 

statistics.harmonic_mean(_data_ , _weights =None_)[¶](https://docs.python.org/3/library/statistics.html#statistics.harmonic_mean "Link to this definition")
    
Return the harmonic mean of _data_ , a sequence or iterable of real-valued numbers. If _weights_ is omitted or `None`, then equal weighting is assumed.
The harmonic mean is the reciprocal of the arithmetic [`mean()`](https://docs.python.org/3/library/statistics.html#statistics.mean "statistics.mean") of the reciprocals of the data. For example, the harmonic mean of three values _a_ , _b_ and _c_ will be equivalent to `3/(1/a + 1/b + 1/c)`. If one of the values is zero, the result will be zero.
The harmonic mean is a type of average, a measure of the central location of the data. It is often appropriate when averaging ratios or rates, for example speeds.
Suppose a car travels 10 km at 40 km/hr, then another 10 km at 60 km/hr. What is the average speed?
>>>```
>>> harmonic_mean([40, 60])
48.0

```

Suppose a car travels 40 km/hr for 5 km, and when traffic clears, speeds-up to 60 km/hr for the remaining 30 km of the journey. What is the average speed?
>>>```
>>> harmonic_mean([40, 60], weights=[5, 30])
56.0