Title: What's New in Python 3.11
URL: https://docs.python.org/3/whatsnew/3.11.html
Summary: Python 3.11 introduces new modules such as `tomllib` for parsing TOML files and `wsgiref.types` for WSGI type checking. The default limit for integer string conversion is set at 4300 digits.
---

ions.") APIs. See the [integer string conversion length limitation](https://docs.python.org/3/library/stdtypes.html#int-max-str-digits) documentation. The default limit is 4300 digits in string form.


## New Modules[¶](https://docs.python.org/3/whatsnew/3.11.html#new-modules "Link to this heading")
  * [`tomllib`](https://docs.python.org/3/library/tomllib.html#module-tomllib "tomllib: Parse TOML files."): For parsing [TOML](https://toml.io/). See [**PEP 680**](https://peps.python.org/pep-0680/) for more details. (Contributed by Taneli Hukkinen in [bpo-40059](https://bugs.python.org/issue?@action=redirect&bpo=40059).)
  * [`wsgiref.types`](https://docs.python.org/3/library/wsgiref.html#module-wsgiref.types "wsgiref.types: WSGI types for static type checking"): [**WSGI**](https://peps.python.org/pep-3333/)-specific types for static type checking. (Contributed by Sebastian Rittau in [bpo-42012](https://bugs.python.org/issue?@action=redirect&bpo=42012).)


## Improved Modules[¶](https://docs.python.org/3/whatsnew/3.11.html#improved-modules "Link to this heading")
### asyncio[¶](https://docs.python.org/3/whatsnew/3.11.html#asyncio "Link to this heading")
  * Added the [`TaskGroup`](https://docs.python.org/3/library/asyncio-task.html#asyncio.TaskGroup "asyncio.TaskGroup") class, an [asynchronous context manager](https://docs.python.org/3/reference/datamodel.html#async-context-managers) holding a group of tasks that will wait for all of them upon exit. For new code this is recommended over using [`create_task()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.create_task "asyncio.create_task") and [`gather()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.gather "asyncio.gather") directly. (Contributed by Yury Selivanov and others in [gh-90908](https://github.com/python/cpython/issues/90908).)
  * Added [`timeout()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.timeout "asyncio.timeout"), an asynchronous context manager for setting a timeout on asynchronous operations. For new code this is recommended over using [`wait_for()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.wait_for "asyncio.wait_for") directly. (Contributed by Andrew Svetlov in [gh-90927](https://github.com/python/cpython/issues/90927).)
  * Added the [`Runner`](https://docs.python.org/3/library/asyncio-runner.html#asyncio.Runner "asyncio.Runner") class, which exposes the machinery used by [`run()`](https://docs.python.org/3/library/asyncio-runner.html#asyncio.run "asyncio.run"). (Contributed by Andrew Svetlov in [gh-91218](https://github.com/python/cpython/issues/91218).)
  * Added the [`Barrier`](https://docs.python.org/3/library/asyncio-sync.html#asyncio.Barrier "asyncio.Barrier") class to the synchronization primitives in the asyncio library, and the related [`BrokenBarrierError`](https://docs.python.org/3/library/asyncio-sync.html#asyncio.BrokenBarrierError "asyncio.BrokenBarrierError") exception. (Contributed by Yves Duprat and Andrew Svetlov in [gh-87518](https://github.com/python/cpython/issues/87518).)
  * Added keyword argument _all_errors_ to [`asyncio.loop.create_connection()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_connection "asyncio.loop.create_connection") so that multiple connection errors can be raised as an [`ExceptionGroup`](https://docs.python.org/3/library/exceptions.html#ExceptionGroup "ExceptionGroup").
  * Added the [`asyncio.StreamWriter.start_tls()`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamWriter.start_tls "asyncio.StreamWriter.start_tls") method for upgrading existing stream-based connections to TLS. (Contributed by Ian Good in [bpo-34975](https://bugs.python.org/issue?@action=redirect&bpo=34975).)
  * Added raw datagram socket functions to the event loop: [`sock_sendto()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.sock_sendto "asyncio.loop.sock_sendto"), [`sock_recvfrom()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.sock_recvfrom "asyncio.loop.sock_recvfrom") and [`sock_recvfrom_into()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.sock_recvfrom_into "asyncio.loop.sock_recvfrom_into"). These have implementations in [`SelectorEventLoop`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.SelectorEventLoop "asyncio.SelectorEventLoop") and [`ProactorEventLoop`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.ProactorEventLoop "asyncio.ProactorEventLoop"). (Contributed by Alex Grönholm in [bpo-46805](https://bugs.python.org/issue?@action=redirect&bpo=46805).)
  * Added [`cancelling()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.cancelling "asyncio.Task.cancelling") and [`uncancel()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.uncancel "asyncio.Task.uncancel") methods to [`Task`](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task "asyncio