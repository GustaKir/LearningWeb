Title: asyncio.open_unix_connection Documentation
URL: https://docs.python.org/3/library/asyncio-stream.html
Summary: The `asyncio.open_unix_connection()` function establishes a Unix socket connection and returns a pair of `(reader, writer)`. It operates similarly to `open_connection()` but is specific to Unix sockets. It also allows for ownership transfer of the socket to the `StreamWriter` created from it.
---

_async_ asyncio.open_unix_connection(_path =None_, _*_ , _limit =None_, _ssl =None_, _sock =None_, _server_hostname =None_, _ssl_handshake_timeout =None_, _ssl_shutdown_timeout =None_)[¶](https://docs.python.org/3/library/asyncio-stream.html#asyncio.open_unix_connection "Link to this definition")
    
Establish a Unix socket connection and return a pair of `(reader, writer)`.
Similar to [`open_connection()`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.open_connection "asyncio.open_connection") but operates on Unix sockets.
See also the documentation of [`loop.create_unix_connection()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_unix_connection "asyncio.loop.create_unix_connection").
Note
The _sock_ argument transfers ownership of the socket to the [`StreamWriter`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamWriter "asyncio.StreamWriter") created. To close the socket, call its [`close()`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamWriter.close "asyncio.StreamWriter.close") method.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix.
Changed in version 3.7: Added the _ssl_handshake_timeout_ parameter. The _path_ parameter can now be a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object)
Changed in version 3.10: Removed the _loop_ parameter.
Changed in version 3.11: Added the _ssl_shutdown_timeout_ parameter. 

_async_ asyncio.start_unix_server(_client_connected_cb_ , _path =None_, _*_ , _limit =None_, _sock =None_, _backlog =100_, _ssl =None_, _ssl_handshake_timeout =None_, _ssl_shutdown_timeout =None_, _start_serving =True_)[¶](https://docs.python.org/3/library/asyncio-stream.html#asyncio.start_unix_server "Link to this definition")
    
Start a Unix socket server.
Similar to [`start_server()`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.start_server "asyncio.start_server") but works with Unix sockets.
See also the documentation of [`loop.create_unix_server()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_unix_server "asyncio.loop.create_unix_server").
Note
The _sock_ argument transfers ownership of the socket to the server created. To close the socket, call the server’s [`close()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.Server.close "asyncio.Server.close") method.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix.
Changed in version 3.7: Added the _ssl_handshake_timeout_ and _start_serving_ parameters. The _path_ parameter can now be a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object).
Changed in version 3.10: Removed the _loop_ parameter.
Changed in version 3.11: Added the _ssl_shutdown_timeout_ parameter.
## StreamReader[¶](https://docs.python.org/3/library/asyncio-stream.html#streamreader "Link to this heading") 

_class_ asyncio.StreamReader[¶](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamReader "Link to this definition")
    
Represents a reader object that provides APIs to read data from the IO stream. As an [asynchronous iterable](https://docs.python.org/3/glossary.html#term-asynchronous-iterable), the object supports the [`async for`](https://docs.python.org/3/reference/compound_stmts.html#async-for) statement.
It is not recommended to instantiate _StreamReader_ objects directly; use [`open_connection()`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.open_connection "asyncio.open_connection") and [`start_server()`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.start_server "asyncio.start_server") instead. 

feed_eof()[¶](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamReader.feed_eof "Link to this definition")
    
Acknowledge the EOF. 

_async_ read(_n =-1_)[¶](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamReader.read "Link to this definition")
    
Read up to _n_ bytes from the stream.
If _n_ is not provided or set to `-1`, read until EOF, then return all read [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes"). If EOF was received and the internal buffer is empty, return an empty `bytes` object.
If _n_ is `0`, return an empty `bytes` object immediately.
If _n_ is positive, return at most _n_ available `bytes` as soon as at least 1 byte is available in the internal buffer. If EOF is received before any byte is read, return an empty `bytes` object. 

_async_ readline()[¶](https://docs.python.org/3/library/asyncio-stream.html#asyncio.StreamReader.readline "Link to this definition")
    
Read one line, where “line” is a sequence of bytes ending with `\n`.
If EOF is received and `\n` was not found, the method returns partially read data.
If EOF is received and the internal buffer is empty, return an empty `bytes` object.