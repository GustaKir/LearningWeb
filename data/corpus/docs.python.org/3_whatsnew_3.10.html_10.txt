Title: Python 3.10 Features: Class and Method Enhancements
URL: https://docs.python.org/3/whatsnew/3.10.html
Summary: In Python 3.10, `classmethod` now inherits method attributes and has a new `__wrapped__` attribute, while static methods can be called as regular functions. Annotations for complex targets, as defined by PEP 526, will not have runtime effects when using `from __future__ import annotations`. Additionally, class and module objects will now lazily create empty annotations dictionaries to improve best practices.
---

/library/functions.html#classmethod "classmethod")) now inherit the method attributes (`__module__`, `__name__`, `__qualname__`, `__doc__`, `__annotations__`) and have a new `__wrapped__` attribute. Moreover, static methods are now callable as regular functions. (Contributed by Victor Stinner in [bpo-43682](https://bugs.python.org/issue?@action=redirect&bpo=43682).)
  * Annotations for complex targets (everything beside `simple name` targets defined by [**PEP 526**](https://peps.python.org/pep-0526/)) no longer cause any runtime effects with `from __future__ import annotations`. (Contributed by Batuhan Taskaya in [bpo-42737](https://bugs.python.org/issue?@action=redirect&bpo=42737).)
  * Class and module objects now lazy-create empty annotations dicts on demand. The annotations dicts are stored in the object’s `__dict__` for backwards compatibility. This improves the best practices for working with `__annotations__`; for more information, please see [Annotations Best Practices](https://docs.python.org/3/howto/annotations.html#annotations-howto). (Contributed by Larry Hastings in [bpo-43901](https://bugs.python.org/issue?@action=redirect&bpo=43901).)
  * Annotations consist of `yield`, `yield from`, `await` or named expressions are now forbidden under `from __future__ import annotations` due to their side effects. (Contributed by Batuhan Taskaya in [bpo-42725](https://bugs.python.org/issue?@action=redirect&bpo=42725).)
  * Usage of unbound variables, `super()` and other expressions that might alter the processing of symbol table as annotations are now rendered effectless under `from __future__ import annotations`. (Contributed by Batuhan Taskaya in [bpo-42725](https://bugs.python.org/issue?@action=redirect&bpo=42725).)
  * Hashes of NaN values of both [`float`](https://docs.python.org/3/library/functions.html#float "float") type and [`decimal.Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal") type now depend on object identity. Formerly, they always hashed to `0` even though NaN values are not equal to one another. This caused potentially quadratic runtime behavior due to excessive hash collisions when creating dictionaries and sets containing multiple NaNs. (Contributed by Raymond Hettinger in [bpo-43475](https://bugs.python.org/issue?@action=redirect&bpo=43475).)
  * A [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") (instead of a [`NameError`](https://docs.python.org/3/library/exceptions.html#NameError "NameError")) will be raised when deleting the [`__debug__`](https://docs.python.org/3/library/constants.html#debug__ "__debug__") constant. (Contributed by Donghee Na in [bpo-45000](https://bugs.python.org/issue?@action=redirect&bpo=45000).)
  * [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") exceptions now have `end_lineno` and `end_offset` attributes. They will be `None` if not determined. (Contributed by Pablo Galindo in [bpo-43914](https://bugs.python.org/issue?@action=redirect&bpo=43914).)


## New Modules[¶](https://docs.python.org/3/whatsnew/3.10.html#new-modules "Link to this heading")
  * None.