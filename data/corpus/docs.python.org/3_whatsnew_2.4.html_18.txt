Title: Build and C API Changes in Python 2.4
URL: https://docs.python.org/3/whatsnew/2.4.html
Summary: This section describes significant modifications to Python's build process and C API, including the introduction of new macros for common return values from extension functions, a macro to clear object references, and a function to construct tuples from variable length argument lists.
---

```

## Build and C API Changes[¶](https://docs.python.org/3/whatsnew/2.4.html#build-and-c-api-changes "Link to this heading")
Some of the changes to Python’s build process and to the C API are:
  * Three new convenience macros were added for common return values from extension functions: [`Py_RETURN_NONE`](https://docs.python.org/3/c-api/none.html#c.Py_RETURN_NONE "Py_RETURN_NONE"), [`Py_RETURN_TRUE`](https://docs.python.org/3/c-api/bool.html#c.Py_RETURN_TRUE "Py_RETURN_TRUE"), and [`Py_RETURN_FALSE`](https://docs.python.org/3/c-api/bool.html#c.Py_RETURN_FALSE "Py_RETURN_FALSE"). (Contributed by Brett Cannon.)
  * Another new macro, [`Py_CLEAR`](https://docs.python.org/3/c-api/refcounting.html#c.Py_CLEAR "Py_CLEAR"), decreases the reference count of _obj_ and sets _obj_ to the null pointer. (Contributed by Jim Fulton.)
  * A new function, `PyTuple_Pack(N, obj1, obj2, ..., objN)`, constructs tuples from a variable length argument list of Python objects. (Contributed by Raymond Hettinger.)
  * A new function, `PyDict_Contains(d, k)`, implements fast dictionary lookups without masking exceptions raised during the look-up process. (Contributed by Raymond Hettinger.)
  * The Py_IS_NAN(X) macro returns 1 if its float or double argument _X_ is a NaN. (Contributed by Tim Peters.)
  * C code can avoid unnecessary locking by using the new `PyEval_ThreadsInitialized()` function to tell if any thread operations have been performed. If this function returns false, no lock operations are needed. (Contributed by Nick Coghlan.)
  * A new function, [`PyArg_VaParseTupleAndKeywords()`](https://docs.python.org/3/c-api/arg.html#c.PyArg_VaParseTupleAndKeywords "PyArg_VaParseTupleAndKeywords"), is the same as [`PyArg_ParseTupleAndKeywords()`](https://docs.python.org/3/c-api/arg.html#c.PyArg_ParseTupleAndKeywords "PyArg_ParseTupleAndKeywords") but takes a `va_list` instead of a number of arguments. (Contributed by Greg Chapman.)
  * A new method flag, [`METH_COEXIST`](https://docs.python.org/3/c-api/structures.html#c.METH_COEXIST "METH_COEXIST"), allows a function defined in slots to co-exist with a [`PyCFunction`](https://docs.python.org/3/c-api/structures.html#c.PyCFunction "PyCFunction") having the same name. This can halve the access time for a method such as `set.__contains__()`. (Contributed by Raymond Hettinger.)
  * Python can now be built with additional profiling for the interpreter itself, intended as an aid to people developing the Python core. Providing `--enable-profiling` to the **configure** script will let you profile the interpreter with **gprof** , and providing the `--with-tsc` switch enables profiling using the Pentium’s Time-Stamp-Counter register. Note that the `--with-tsc` switch is slightly misnamed, because the profiling feature also works on the PowerPC platform, though that processor architecture doesn’t call that register “the TSC register”. (Contributed by Jeremy Hylton.)
  * The `tracebackobject` type has been renamed to `PyTracebackObject`.


### Port-Specific Changes[¶](https://docs.python.org/3/whatsnew/2.4.html#port-specific-changes "Link to this heading")
  * The Windows port now builds under MSVC++ 7.1 as well as version 6. (Contributed by Martin von Löwis.)