Title: Python Standard Library Overview
URL: https://docs.python.org/3/contents.html
Summary: This document provides an overview of various modules in the Python Standard Library, including 'enum' for enumerations, 'graphlib' for graph-like structures, and numeric and mathematical modules like 'numbers' for numeric abstract base classes. It outlines module contents, data types, utilities, and notes relevant to each module.
---

/docs.python.org/3/library/enum.html)
        * [Module Contents](https://docs.python.org/3/library/enum.html#module-contents)
        * [Data Types](https://docs.python.org/3/library/enum.html#data-types)
          * [Supported `__dunder__` names](https://docs.python.org/3/library/enum.html#supported-dunder-names)
          * [Supported `_sunder_` names](https://docs.python.org/3/library/enum.html#supported-sunder-names)
        * [Utilities and Decorators](https://docs.python.org/3/library/enum.html#utilities-and-decorators)
        * [Notes](https://docs.python.org/3/library/enum.html#notes)
      * [`graphlib` — Functionality to operate with graph-like structures](https://docs.python.org/3/library/graphlib.html)
        * [Exceptions](https://docs.python.org/3/library/graphlib.html#exceptions)
    * [Numeric and Mathematical Modules](https://docs.python.org/3/library/numeric.html)
      * [`numbers` — Numeric abstract base classes](https://docs.python.org/3/library/numbers.html)
        * [The numeric tower](https://docs.python.org/3/library/numbers.html#the-numeric-tower)
        * [Notes for type implementers](https://docs.python.org/3/library/numbers.html#notes-for-type-implementers)
          * [Adding More Numeric ABCs](https://docs.python.org/3/library/numbers.html#adding-more-numeric-abcs)
          * [Implementing the arithmetic operations](https://docs.python.org/3/library/numbers.html#implementing-the-arithmetic-operations)
      * [`math` — Mathematical functions](https://docs.python.org/3/library/math.html)
        * [Number-theoretic functions](https://docs.python.org/3/library/math.html#number-theoretic-functions)
        * [Floating point arithmetic](https://docs.python.org/3/library/math.html#floating-point-arithmetic)
        * [Floating point manipulation functions](https://docs.python.org/3/library/math.html#floating-point-manipulation-functions)
        * [Power, exponential and logarithmic functions](https://docs.python.org/3/library/math.html#power-exponential-and-logarithmic-functions)
        * [Summation and product functions](https://docs.python.org/3/library/math.html#summation-and-product-functions)
        * [Angular conversion](https://docs.python.org/3/library/math.html#angular-conversion)
        * [Trigonometric functions](https://docs.python.org/3/library/math.html#trigonometric-functions)
        * [Hyperbolic functions](https://docs.python.org/3/library/math.html#hyperbolic-functions)
        * [Special functions](https://docs.python.org/3/library/math.html#special-functions)
        * [Constants](https://docs.python.org/3/library/math.html#constants)
      * [`cmath` — Mathematical functions for complex numbers](https://docs.python.org/3/library/cmath.html)
        * [Conversions to and from polar coordinates](https://docs.python.org/3/library/cmath.html#conversions-to-and-from-polar-coordinates)
        * [Power and logarithmic functions](https://docs.python.org/3/library/cmath.html#power-and-logarithmic-functions)
        * [Trigonometric functions](https://docs.python.org/3/library/cmath.html#trigonometric-functions)
        * [Hyperbolic functions](https://docs.python.org/3/library/cmath.html#hyperbolic-functions)
        * [Classification functions](https://docs.python.org/3/library/cmath.html#classification-functions)
        * [Constants](https://docs.python.org/3/library/cmath.html#constants)
      * [`decimal` — Decimal fixed-point and floating-point arithmetic](https://docs.python.org/3/library/decimal.html)
        * [Quick-start Tutorial](https://docs.python.org/3/library/decimal.html#quick-start-tutorial)
        * [Decimal objects](https://docs.python.org/3/library/decimal.html#decimal-objects)
          * [Logical operands](https://docs.python.org/3/library/decimal.html#logical-operands)
        * [Context objects](https://docs.python.org/3/library/decimal.html#context-objects)
        * [Constants](https://docs.python.org/3/library/decimal.html#constants)
        * [Rounding modes](https://docs.python.org/3/library/decimal.html#rounding-modes)
        * [Signals](https://docs.python.org/3/library/decimal.html#signals)
        * [Floating-Point Notes](https://docs.python.org/3/library/decimal.html#floating-point-notes)
          * [Mitigating round-off error with increased precision](https://docs.python.org/3/library/decimal.html#mitigating-round-off-error-with-increased-precision)
          * [Special values](https://docs.python.org/3/library/decimal.html#special-values)
        * [Working with threads](https://docs.python.org/3/library/decimal.html#working-with-threads)
        * [Recipes](https://docs.python.org/3/library/decimal.html#recipes)
        * [Decimal FAQ](https://docs.python.org/3/library/decimal.html#decimal-faq)
      * [`fractions` — Rational numbers](https://docs.python.org/3/library/fractions.html)
      * [`random` — Generate pseudo-random numbers](https://docs.python.org/3/library/random.html)
        * [Bookkeeping functions](htt