Title: Python Build System Overview
URL: https://docs.python.org/3/using/configure.html
Summary: This section outlines the Python build system, detailing key files involved, such as `configure.ac`, `Makefile.pre.in`, and `pyconfig.h`. It also describes the main steps in the build process, including the compilation of C files into object files, creation of a static `libpython` library, and linking of these components to form the `python` executable. Additionally, it mentions how C extensions are built using the Makefile.
---

```

## 3.4. Python Build System[¶](https://docs.python.org/3/using/configure.html#python-build-system "Link to this heading")
### 3.4.1. Main files of the build system[¶](https://docs.python.org/3/using/configure.html#main-files-of-the-build-system "Link to this heading")
  * `configure.ac` => `configure`;
  * `Makefile.pre.in` => `Makefile` (created by `configure`);
  * `pyconfig.h` (created by `configure`);
  * `Modules/Setup`: C extensions built by the Makefile using `Module/makesetup` shell script;


### 3.4.2. Main build steps[¶](https://docs.python.org/3/using/configure.html#main-build-steps "Link to this heading")
  * C files (`.c`) are built as object files (`.o`).
  * A static `libpython` library (`.a`) is created from objects files.
  * `python.o` and the static `libpython` library are linked into the final `python` program.
  * C extensions are built by the Makefile (see `Modules/Setup`).


### 3.4.3. Main Makefile targets[¶](https://docs.python.org/3/using/configure.html#main-makefile-targets "Link to this heading")
#### 3.4.3.1. make[¶](https://docs.python.org/3/using/configure.html#make "Link to this heading")
For the most part, when rebuilding after editing some code or refreshing your checkout from upstream, all you need to do is execute `make`, which (per Make’s semantics) builds the default target, the first one defined in the Makefile. By tradition (including in the CPython project) this is usually the `all` target. The `configure` script expands an `autoconf` variable, `@DEF_MAKE_ALL_RULE@` to describe precisely which targets `make all` will build. The three choices are:
  * `profile-opt` (configured with `--enable-optimizations`)
  * `build_wasm` (configured with `--with-emscripten-target`)
  * `build_all` (configured without explicitly using either of the others)


Depending on the most recent source file changes, Make will rebuild any targets (object files and executables) deemed out-of-date, including running `configure` again if necessary. Source/target dependencies are many and maintained manually however, so Make sometimes doesn’t have all the information necessary to correctly detect all targets which need to be rebuilt. Depending on which targets aren’t rebuilt, you might experience a number of problems. If you have build or test problems which you can’t otherwise explain, `make clean && make` should work around most dependency problems, at the expense of longer build times.
#### 3.4.3.2. make platform[¶](https://docs.python.org/3/using/configure.html#make-platform "Link to this heading")
Build the `python` program, but don’t build the standard library extension modules. This generates a file named `platform` which contains a single line describing the details of the build platform, e.g., `macosx-14.3-arm64-3.12` or `linux-x86_64-3.13`.
#### 3.4.3.3. make profile-opt[¶](https://docs.python.org/3/using/configure.html#make-profile-opt "Link to this heading")
Build Python using profile-guided optimization (PGO). You can use the configure [`--enable-optimizations`](https://docs.python.org/3/using/configure.html#cmdoption-enable-optimizations) option to make this the default target of the `make` command (`make all` or just `make`).
#### 3.4.3.4. make clean[¶](https://docs.python.org/3/using/configure.html#make-clean "Link to this heading")
Remove built files.
#### 3.4.3.5. make distclean[¶](https://docs.python.org/3/using/configure.html#make-distclean "Link to this heading")
In addition to the work done by `make clean`, remove files created by the configure script. `configure` will have to be run before building again. [[1]](https://docs.python.org/3/using/configure.html#id5)
#### 3.4.3.6. make install[¶](https://docs.python.org/3/using/configure.html#make-install "Link to this heading")
Build the `all` target and install Python.
#### 3.4.3.7. make test[¶](https://docs.python.org/3/using/configure.html#make-test "Link to this heading")
Build the `all` target and run the Python test suite with the `--fast-ci` option. Variables:
  * `TESTOPTS`: additional regrtest command-line options.
  * `TESTPYTHONOPTS`: additional Python command-line options.
  * `TESTTIMEOUT`: timeout in seconds (default: 10 minutes).