Title: Enhancements to SSL Support in Python 3.5
URL: https://docs.python.org/3/whatsnew/3.5.html
Summary: Python 3.5 introduces the `MemoryBIO` class for data transfer between Python and SSL instances, aimed at improving asynchronous I/O frameworks. A new `SSLContext.wrap_bio()` method allows the creation of `SSLObject` instances. Additionally, support for Application-Layer Protocol Negotiation is introduced where OpenSSL support is available.
---

The new [`MemoryBIO`](https://docs.python.org/3/library/ssl.html#ssl.MemoryBIO "ssl.MemoryBIO") class can be used to pass data between Python and an SSL protocol instance.
The memory BIO SSL support is primarily intended to be used in frameworks implementing asynchronous I/O for which [`SSLSocket`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket "ssl.SSLSocket")’s readiness model (“select/poll”) is inefficient.
A new [`SSLContext.wrap_bio()`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_bio "ssl.SSLContext.wrap_bio") method can be used to create a new `SSLObject` instance.
#### Application-Layer Protocol Negotiation Support[¶](https://docs.python.org/3/whatsnew/3.5.html#application-layer-protocol-negotiation-support "Link to this heading")
(Contributed by Benjamin Peterson in [bpo-20188](https://bugs.python.org/issue?@action=redirect&bpo=20188).)
Where OpenSSL support is present, the [`ssl`](https://docs.python.org/3/library/ssl.html#module-ssl "ssl: TLS/SSL wrapper for socket objects") module now implements the _Application-Layer Protocol Negotiation_ TLS extension as described in [**RFC 7301**](https://datatracker.ietf.org/doc/html/rfc7301.html).
The new [`SSLContext.set_alpn_protocols()`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_alpn_protocols "ssl.SSLContext.set_alpn_protocols") can be used to specify which protocols a socket should advertise during the TLS handshake.
The new [`SSLSocket.selected_alpn_protocol()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.selected_alpn_protocol "ssl.SSLSocket.selected_alpn_protocol") returns the protocol that was selected during the TLS handshake. The [`HAS_ALPN`](https://docs.python.org/3/library/ssl.html#ssl.HAS_ALPN "ssl.HAS_ALPN") flag indicates whether ALPN support is present.
#### Other Changes[¶](https://docs.python.org/3/whatsnew/3.5.html#other-changes "Link to this heading")
There is a new [`SSLSocket.version()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.version "ssl.SSLSocket.version") method to query the actual protocol version in use. (Contributed by Antoine Pitrou in [bpo-20421](https://bugs.python.org/issue?@action=redirect&bpo=20421).)
The [`SSLSocket`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket "ssl.SSLSocket") class now implements a `SSLSocket.sendfile()` method. (Contributed by Giampaolo Rodola’ in [bpo-17552](https://bugs.python.org/issue?@action=redirect&bpo=17552).)
The `SSLSocket.send()` method now raises either the [`ssl.SSLWantReadError`](https://docs.python.org/3/library/ssl.html#ssl.SSLWantReadError "ssl.SSLWantReadError") or [`ssl.SSLWantWriteError`](https://docs.python.org/3/library/ssl.html#ssl.SSLWantWriteError "ssl.SSLWantWriteError") exception on a non-blocking socket if the operation would block. Previously, it would return `0`. (Contributed by Nikolaus Rath in [bpo-20951](https://bugs.python.org/issue?@action=redirect&bpo=20951).)
The [`cert_time_to_seconds()`](https://docs.python.org/3/library/ssl.html#ssl.cert_time_to_seconds "ssl.cert_time_to_seconds") function now interprets the input time as UTC and not as local time, per [**RFC 5280**](https://datatracker.ietf.org/doc/html/rfc5280.html). Additionally, the return value is always an [`int`](https://docs.python.org/3/library/functions.html#int "int"). (Contributed by Akira Li in [bpo-19940](https://bugs.python.org/issue?@action=redirect&bpo=19940).)
New `SSLObject.shared_ciphers()` and [`SSLSocket.shared_ciphers()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.shared_ciphers "ssl.SSLSocket.shared_ciphers") methods return the list of ciphers sent by the client during the handshake. (Contributed by Benjamin Peterson in [bpo-23186](https://bugs.python.org/issue?@action=redirect&bpo=23186).)
The [`SSLSocket.do_handshake()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.do_handshake "ssl.SSLSocket.do_handshake"), [`SSLSocket.read()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.read "ssl.SSLSocket.read"), `SSLSocket.shutdown()`, and [`SSLSocket.write()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.write "ssl.SSLSocket.write") methods of the [`SSLSocket`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket "ssl.SSLSocket") class no longer reset the socket timeout every time bytes are received or sent. The socket timeout is now the maximum total duration of the method. (Contributed by Victor Stinner in [bpo-23853](https://bugs.python.org/issue?@action=redirect&bpo=23853).)
The `match_hostname()` function now supports matching of IP addresses.