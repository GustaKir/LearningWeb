Title: C API Changes in Python
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section details updates to the C API in Python, including the addition of the `Py_TPFLAGS_DISALLOW_INSTANTIATION` type flag to prevent instance creation, the removal of the `PYMALLOC_DEBUG` macro to enhance memory allocation debugging, and an update to `_PyInterpreterState_IDIncref()` to improve its functionality.
---

### C API[Â¶](https://docs.python.org/3/whatsnew/changelog.html#id298 "Link to this heading")
  * [bpo-43916](https://bugs.python.org/issue?@action=redirect&bpo=43916): Add a new [`Py_TPFLAGS_DISALLOW_INSTANTIATION`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_DISALLOW_INSTANTIATION "Py_TPFLAGS_DISALLOW_INSTANTIATION") type flag to disallow creating type instances. Patch by Victor Stinner.
  * [bpo-43774](https://bugs.python.org/issue?@action=redirect&bpo=43774): Remove the now unused `PYMALLOC_DEBUG` macro. Debug hooks on memory allocators are now installed by default if Python is built in debug mode (if `Py_DEBUG` macro is defined). Moreover, they can now be used on Python build in release mode (ex: using `PYTHONMALLOC=debug` environment variable).
  * [bpo-43962](https://bugs.python.org/issue?@action=redirect&bpo=43962): _PyInterpreterState_IDIncref() now calls _PyInterpreterState_IDInitref() and always increments id_refcount. Previously, calling _xxsubinterpreters.get_current() could create an id_refcount inconsistency when a _xxsubinterpreters.InterpreterID object was deallocated. Patch by Victor Stinner.
  * [bpo-28254](https://bugs.python.org/issue?@action=redirect&bpo=28254): Add new C-API functions to control the state of the garbage collector: [`PyGC_Enable()`](https://docs.python.org/3/c-api/gcsupport.html#c.PyGC_Enable "PyGC_Enable"), [`PyGC_Disable()`](https://docs.python.org/3/c-api/gcsupport.html#c.PyGC_Disable "PyGC_Disable"), [`PyGC_IsEnabled()`](https://docs.python.org/3/c-api/gcsupport.html#c.PyGC_IsEnabled "PyGC_IsEnabled"), corresponding to the functions in the [`gc`](https://docs.python.org/3/library/gc.html#module-gc "gc: Interface to the cycle-detecting garbage collector.") module.
  * [bpo-43908](https://bugs.python.org/issue?@action=redirect&bpo=43908): Introduce [`Py_TPFLAGS_IMMUTABLETYPE`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_IMMUTABLETYPE "Py_TPFLAGS_IMMUTABLETYPE") flag for immutable type objects, and modify [`PyType_Ready()`](https://docs.python.org/3/c-api/type.html#c.PyType_Ready "PyType_Ready") to set it for static types. Patch by Erlend E. Aasland.
  * [bpo-43795](https://bugs.python.org/issue?@action=redirect&bpo=43795): [`PyMem_Calloc()`](https://docs.python.org/3/c-api/memory.html#c.PyMem_Calloc "PyMem_Calloc") is now available in the limited C API (`Py_LIMITED_API`).
  * [bpo-43868](https://bugs.python.org/issue?@action=redirect&bpo=43868): [`PyOS_ReadlineFunctionPointer()`](https://docs.python.org/3/c-api/veryhigh.html#c.PyOS_ReadlineFunctionPointer "PyOS_ReadlineFunctionPointer") is no longer exported by limited C API headers and by `python3.dll` on Windows. Like any function that takes `FILE*`, it is not part of the stable ABI.
  * [bpo-43795](https://bugs.python.org/issue?@action=redirect&bpo=43795): Stable ABI and limited API definitions are generated from a central manifest ([**PEP 652**](https://peps.python.org/pep-0652/)).
  * [bpo-43753](https://bugs.python.org/issue?@action=redirect&bpo=43753): Add the [`Py_Is(x, y)`](https://docs.python.org/3/c-api/structures.html#c.Py_Is "Py_Is") function to test if the _x_ object is the _y_ object, the same as `x is y` in Python. Add also the [`Py_IsNone()`](https://docs.python.org/3/c-api/structures.html#c.Py_IsNone "Py_IsNone"), [`Py_IsTrue()`](https://docs.python.org/3/c-api/structures.html#c.Py_IsTrue "Py_IsTrue"), [`Py_IsFalse()`](https://docs.python.org/3/c-api/structures.html#c.Py_IsFalse "Py_IsFalse") functions to test if an object is, respectively, the `None` singleton, the `True` singleton or the `False` singleton. Patch by Victor Stinner.