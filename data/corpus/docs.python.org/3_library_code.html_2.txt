Title: InteractiveInterpreter.runsource Method
URL: https://docs.python.org/3/library/code.html
Summary: The `runsource` method of the `InteractiveInterpreter` class compiles and executes a given source code in the interpreter, with default parameters for filename and symbol. It can raise exceptions such as `SyntaxError` or `OverflowError` for incorrect input, which are handled by printing a syntax traceback.
---

InteractiveInterpreter.runsource(_source_ , _filename ='<input>'_, _symbol ='single'_)[¶](https://docs.python.org/3/library/code.html#code.InteractiveInterpreter.runsource "Link to this definition")
    
Compile and run some source in the interpreter. Arguments are the same as for [`compile_command()`](https://docs.python.org/3/library/code.html#code.compile_command "code.compile_command"); the default for _filename_ is `'<input>'`, and for _symbol_ is `'single'`. One of several things can happen:
  * The input is incorrect; [`compile_command()`](https://docs.python.org/3/library/code.html#code.compile_command "code.compile_command") raised an exception ([`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") or [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError")). A syntax traceback will be printed by calling the [`showsyntaxerror()`](https://docs.python.org/3/library/code.html#code.InteractiveInterpreter.showsyntaxerror "code.InteractiveInterpreter.showsyntaxerror") method. [`runsource()`](https://docs.python.org/3/library/code.html#code.InteractiveInterpreter.runsource "code.InteractiveInterpreter.runsource") returns `False`.
  * The input is incomplete, and more input is required; [`compile_command()`](https://docs.python.org/3/library/code.html#code.compile_command "code.compile_command") returned `None`. [`runsource()`](https://docs.python.org/3/library/code.html#code.InteractiveInterpreter.runsource "code.InteractiveInterpreter.runsource") returns `True`.
  * The input is complete; [`compile_command()`](https://docs.python.org/3/library/code.html#code.compile_command "code.compile_command") returned a code object. The code is executed by calling the [`runcode()`](https://docs.python.org/3/library/code.html#code.InteractiveInterpreter.runcode "code.InteractiveInterpreter.runcode") (which also handles run-time exceptions, except for [`SystemExit`](https://docs.python.org/3/library/exceptions.html#SystemExit "SystemExit")). [`runsource()`](https://docs.python.org/3/library/code.html#code.InteractiveInterpreter.runsource "code.InteractiveInterpreter.runsource") returns `False`.


The return value can be used to decide whether to use `sys.ps1` or `sys.ps2` to prompt the next line. 

InteractiveInterpreter.runcode(_code_)[¶](https://docs.python.org/3/library/code.html#code.InteractiveInterpreter.runcode "Link to this definition")
    
Execute a code object. When an exception occurs, [`showtraceback()`](https://docs.python.org/3/library/code.html#code.InteractiveInterpreter.showtraceback "code.InteractiveInterpreter.showtraceback") is called to display a traceback. All exceptions are caught except [`SystemExit`](https://docs.python.org/3/library/exceptions.html#SystemExit "SystemExit"), which is allowed to propagate.
A note about [`KeyboardInterrupt`](https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt "KeyboardInterrupt"): this exception may occur elsewhere in this code, and may not always be caught. The caller should be prepared to deal with it. 

InteractiveInterpreter.showsyntaxerror(_filename =None_)[¶](https://docs.python.org/3/library/code.html#code.InteractiveInterpreter.showsyntaxerror "Link to this definition")
    
Display the syntax error that just occurred. This does not display a stack trace because there isn’t one for syntax errors. If _filename_ is given, it is stuffed into the exception instead of the default filename provided by Python’s parser, because it always uses `'<string>'` when reading from a string. The output is written by the [`write()`](https://docs.python.org/3/library/code.html#code.InteractiveInterpreter.write "code.InteractiveInterpreter.write") method. 

InteractiveInterpreter.showtraceback()[¶](https://docs.python.org/3/library/code.html#code.InteractiveInterpreter.showtraceback "Link to this definition")
    
Display the exception that just occurred. We remove the first stack item because it is within the interpreter object implementation. The output is written by the [`write()`](https://docs.python.org/3/library/code.html#code.InteractiveInterpreter.write "code.InteractiveInterpreter.write") method.
Changed in version 3.5: The full chained traceback is displayed instead of just the primary traceback.