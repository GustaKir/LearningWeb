Title: Python 3 Library Updates
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: The document outlines recent changes to the Python 3 library, including the addition of `math.perm()`, enhancements to SSLContext with `num_tickets`, improvements in error handling within msilib, new file sealing constants in the fcntl module, and the introduction of `get_origin()` and `get_args()` in the typing module.
---

### Library[¶](https://docs.python.org/3/whatsnew/changelog.html#id437 "Link to this heading")
  * [bpo-37128](https://bugs.python.org/issue?@action=redirect&bpo=37128): Added [`math.perm()`](https://docs.python.org/3/library/math.html#math.perm "math.perm").
  * [bpo-37120](https://bugs.python.org/issue?@action=redirect&bpo=37120): Add SSLContext.num_tickets to control the number of TLSv1.3 session tickets.
  * [bpo-12202](https://bugs.python.org/issue?@action=redirect&bpo=12202): Fix the error handling in `msilib.SummaryInformation.GetProperty()`. Patch by Zackery Spytz.
  * [bpo-26835](https://bugs.python.org/issue?@action=redirect&bpo=26835): The fcntl module now contains file sealing constants for sealing of memfds.
  * [bpo-29262](https://bugs.python.org/issue?@action=redirect&bpo=29262): Add `get_origin()` and `get_args()` introspection helpers to `typing` module.
  * [bpo-12639](https://bugs.python.org/issue?@action=redirect&bpo=12639): `msilib.Directory.start_component()` no longer fails if _keyfile_ is not `None`.
  * [bpo-36999](https://bugs.python.org/issue?@action=redirect&bpo=36999): Add the `asyncio.Task.get_coro()` method to publicly expose the tasks’s coroutine object.
  * [bpo-35246](https://bugs.python.org/issue?@action=redirect&bpo=35246): Make [`asyncio.create_subprocess_exec()`](https://docs.python.org/3/library/asyncio-subprocess.html#asyncio.create_subprocess_exec "asyncio.create_subprocess_exec") accept path-like arguments.
  * [bpo-35279](https://bugs.python.org/issue?@action=redirect&bpo=35279): Change default _max_workers_ of `ThreadPoolExecutor` from `cpu_count() * 5` to `min(32, cpu_count() + 4)`. Previous value was unreasonably large on many cores machines.
  * [bpo-37076](https://bugs.python.org/issue?@action=redirect&bpo=37076): [`_thread.start_new_thread()`](https://docs.python.org/3/library/_thread.html#thread.start_new_thread "_thread.start_new_thread") now logs uncaught exception raised by the function using [`sys.unraisablehook()`](https://docs.python.org/3/library/sys.html#sys.unraisablehook "sys.unraisablehook"), rather than [`sys.excepthook()`](https://docs.python.org/3/library/sys.html#sys.excepthook "sys.excepthook"), so the hook gets access to the function which raised the exception.
  * [bpo-33725](https://bugs.python.org/issue?@action=redirect&bpo=33725): On macOS, the [`multiprocessing`](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing "multiprocessing: Process-based parallelism.") module now uses _spawn_ start method by default.
  * [bpo-37054](https://bugs.python.org/issue?@action=redirect&bpo=37054): Fix destructor `_pyio.BytesIO` and `_pyio.TextIOWrapper`: initialize their `_buffer` attribute as soon as possible (in the class body), because it’s used by `__del__()` which calls `close()`.
  * [bpo-37058](https://bugs.python.org/issue?@action=redirect&bpo=37058): PEP 544: Add `Protocol` and `@runtime_checkable` to the `typing` module.
  * [bpo-36933](https://bugs.python.org/issue?@action=redirect&bpo=36933): The functions `sys.set_coroutine_wrapper` and `sys.get_coroutine_wrapper` that were deprecated and marked for removal in 3.8 have been removed.
  * [bpo-37047](https://bugs.python.org/issue?@action=redirect&bpo=37047): Handle late binding and attribute access in [`unittest.mock.AsyncMock`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.AsyncMock "unittest.mock.AsyncMock") setup for autospeccing. Document newly implemented async methods in [`unittest.mock.MagicMock`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.MagicMock "unittest.mock.MagicMock").
  * [bpo-37049](https://bugs.python.org/issue?@action=redirect&bpo=37049): PEP 589: Add `TypedDict` to the `typing` module.
  * [bpo-37046](https://bugs.python.org/issue?@action=redirect&bpo=37046): PEP 586: Add `Literal` to the `typing` module.
  * [bpo-37045](https://bugs.python.org/issue?@action=redirect&bpo=37045): PEP 591: Add `Final` qualifier and `@final` decorator to the `typing` module.
  * [bpo-37035](https://bugs.python.org/issue?@action=redirect&bpo=37035): Don’t log OSError based exceptions if a fatal error has occurred in asyncio transport. Peer can generate almost any OSError, user cannot avoid these exceptions by fixing own code. Errors are still propagated to user code, it’s just logging them is pointless and pollute asyncio logs.
  * [bpo-37001](https://bugs.python.org/issue?@action=redirect&bpo=37001): [`symtable.symtable()`](https://docs.python.org/3/library/symtable.html#symtable.symtable "symtable.symtable") now accepts the same input types for source code as the built-in [`compile()`](https://docs.python.org/3/library/functions.html#compile "compile") function. Patch by Dino Viehland.
  * [bpo-37028](https://bugs.python.org/issue?@action=redirect&bpo=37028): Implement asyncio REPL
  * [bpo-37027](https://bugs.python.org/issue?@action=redirect&bpo=37027): Return safe to use proxy socket object from transport.get_extra_