Title: SQLite3 Enhancements in Python 3.11
URL: https://docs.python.org/3/whatsnew/3.11.html
Summary: Python 3.11 introduces key updates to the sqlite3 module, allowing the authorizer to be disabled by passing None to set_authorizer(), and enabling collation names in create_collation() to include any Unicode character. Invalid collation names now raise UnicodeEncodeError instead of ProgrammingError.
---

### sqlite3[Â¶](https://docs.python.org/3/whatsnew/3.11.html#sqlite3 "Link to this heading")
  * You can now disable the authorizer by passing [`None`](https://docs.python.org/3/library/constants.html#None "None") to [`set_authorizer()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.set_authorizer "sqlite3.Connection.set_authorizer"). (Contributed by Erlend E. Aasland in [bpo-44491](https://bugs.python.org/issue?@action=redirect&bpo=44491).)
  * Collation name [`create_collation()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.create_collation "sqlite3.Connection.create_collation") can now contain any Unicode character. Collation names with invalid characters now raise [`UnicodeEncodeError`](https://docs.python.org/3/library/exceptions.html#UnicodeEncodeError "UnicodeEncodeError") instead of [`sqlite3.ProgrammingError`](https://docs.python.org/3/library/sqlite3.html#sqlite3.ProgrammingError "sqlite3.ProgrammingError"). (Contributed by Erlend E. Aasland in [bpo-44688](https://bugs.python.org/issue?@action=redirect&bpo=44688).)
  * [`sqlite3`](https://docs.python.org/3/library/sqlite3.html#module-sqlite3 "sqlite3: A DB-API 2.0 implementation using SQLite 3.x.") exceptions now include the SQLite extended error code as [`sqlite_errorcode`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Error.sqlite_errorcode "sqlite3.Error.sqlite_errorcode") and the SQLite error name as [`sqlite_errorname`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Error.sqlite_errorname "sqlite3.Error.sqlite_errorname"). (Contributed by Aviv Palivoda, Daniel Shahaf, and Erlend E. Aasland in [bpo-16379](https://bugs.python.org/issue?@action=redirect&bpo=16379) and [bpo-24139](https://bugs.python.org/issue?@action=redirect&bpo=24139).)
  * Add [`setlimit()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.setlimit "sqlite3.Connection.setlimit") and [`getlimit()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.getlimit "sqlite3.Connection.getlimit") to [`sqlite3.Connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection "sqlite3.Connection") for setting and getting SQLite limits by connection basis. (Contributed by Erlend E. Aasland in [bpo-45243](https://bugs.python.org/issue?@action=redirect&bpo=45243).)
  * [`sqlite3`](https://docs.python.org/3/library/sqlite3.html#module-sqlite3 "sqlite3: A DB-API 2.0 implementation using SQLite 3.x.") now sets [`sqlite3.threadsafety`](https://docs.python.org/3/library/sqlite3.html#sqlite3.threadsafety "sqlite3.threadsafety") based on the default threading mode the underlying SQLite library has been compiled with. (Contributed by Erlend E. Aasland in [bpo-45613](https://bugs.python.org/issue?@action=redirect&bpo=45613).)
  * [`sqlite3`](https://docs.python.org/3/library/sqlite3.html#module-sqlite3 "sqlite3: A DB-API 2.0 implementation using SQLite 3.x.") C callbacks now use unraisable exceptions if callback tracebacks are enabled. Users can now register an [`unraisable hook handler`](https://docs.python.org/3/library/sys.html#sys.unraisablehook "sys.unraisablehook") to improve their debug experience. (Contributed by Erlend E. Aasland in [bpo-45828](https://bugs.python.org/issue?@action=redirect&bpo=45828).)
  * Fetch across rollback no longer raises [`InterfaceError`](https://docs.python.org/3/library/sqlite3.html#sqlite3.InterfaceError "sqlite3.InterfaceError"). Instead we leave it to the SQLite library to handle these cases. (Contributed by Erlend E. Aasland in [bpo-44092](https://bugs.python.org/issue?@action=redirect&bpo=44092).)
  * Add [`serialize()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.serialize "sqlite3.Connection.serialize") and [`deserialize()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.deserialize "sqlite3.Connection.deserialize") to [`sqlite3.Connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection "sqlite3.Connection") for serializing and deserializing databases. (Contributed by Erlend E. Aasland in [bpo-41930](https://bugs.python.org/issue?@action=redirect&bpo=41930).)
  * Add [`create_window_function()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.create_window_function "sqlite3.Connection.create_window_function") to [`sqlite3.Connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection "sqlite3.Connection") for creating aggregate window functions. (Contributed by Erlend E. Aasland in [bpo-34916](https://bugs.python.org/issue?@action=redirect&bpo=34916).)
  * Add [`blobopen()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.blobopen "sqlite3.Connection.blobopen") to [`sqlite3.Connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection "sqlite3.Connection"). [`sqlite3.Blob`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Blob "sqlite3.Blob") allows incremental I/O operations on blobs. (Contributed by Aviv Palivoda and