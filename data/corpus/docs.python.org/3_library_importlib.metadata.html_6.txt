Title: Importlib Metadata Overview
URL: https://docs.python.org/3/library/importlib.metadata.html
Summary: This section notes that the full metadata set is not detailed, directing users to the PyPA Core metadata specification for further information. It mentions the addition of the `.origin` property in version 3.13 and describes the default behavior of the metadata discovery in `importlib.metadata`, which supports discovering metadata for distribution packages on the filesystem and in zip files, with specific handling of `sys.path` values.
---

```

The full set of available metadata is not described here. See the PyPA [Core metadata specification](https://packaging.python.org/en/latest/specifications/core-metadata/#core-metadata) for additional details.
Added in version 3.13: The `.origin` property was added.
## Distribution Discovery[¶](https://docs.python.org/3/library/importlib.metadata.html#distribution-discovery "Link to this heading")
By default, this package provides built-in support for discovery of metadata for file system and zip file [Distribution Package](https://packaging.python.org/en/latest/glossary/#term-Distribution-Package)s. This metadata finder search defaults to `sys.path`, but varies slightly in how it interprets those values from how other import machinery does. In particular:
  * `importlib.metadata` does not honor [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") objects on `sys.path`.
  * `importlib.metadata` will incidentally honor [`pathlib.Path`](https://docs.python.org/3/library/pathlib.html#pathlib.Path "pathlib.Path") objects on `sys.path` even though such values will be ignored for imports.


## Extending the search algorithm[¶](https://docs.python.org/3/library/importlib.metadata.html#extending-the-search-algorithm "Link to this heading")
Because [Distribution Package](https://packaging.python.org/en/latest/glossary/#term-Distribution-Package) metadata is not available through [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path") searches, or package loaders directly, the metadata for a distribution is found through import system [finders](https://docs.python.org/3/reference/import.html#finders-and-loaders). To find a distribution package’s metadata, `importlib.metadata` queries the list of [meta path finders](https://docs.python.org/3/glossary.html#term-meta-path-finder) on [`sys.meta_path`](https://docs.python.org/3/library/sys.html#sys.meta_path "sys.meta_path").
By default `importlib.metadata` installs a finder for distribution packages found on the file system. This finder doesn’t actually find any _distributions_ , but it can find their metadata.
The abstract class [`importlib.abc.MetaPathFinder`](https://docs.python.org/3/library/importlib.html#importlib.abc.MetaPathFinder "importlib.abc.MetaPathFinder") defines the interface expected of finders by Python’s import system. `importlib.metadata` extends this protocol by looking for an optional `find_distributions` callable on the finders from [`sys.meta_path`](https://docs.python.org/3/library/sys.html#sys.meta_path "sys.meta_path") and presents this extended interface as the `DistributionFinder` abstract base class, which defines this abstract method:
```
@abc.abstractmethod
deffind_distributions(context=DistributionFinder.Context()):
"""Return an iterable of all Distribution instances capable of
  loading the metadata for packages for the indicated ``context``.
  """

```

The `DistributionFinder.Context` object provides `.path` and `.name` properties indicating the path to search and name to match and may supply other relevant context.
What this means in practice is that to support finding distribution package metadata in locations other than the file system, subclass `Distribution` and implement the abstract methods. Then from a custom finder, return instances of this derived `Distribution` in the `find_distributions()` method.
### Example[¶](https://docs.python.org/3/library/importlib.metadata.html#example "Link to this heading")
Consider for example a custom finder that loads Python modules from a database:
```
classDatabaseImporter(importlib.abc.MetaPathFinder):
  def__init__(self, db):
    self.db = db
  deffind_spec(self, fullname, target=None) -> ModuleSpec:
    return self.db.spec_from_name(fullname)
sys.meta_path.append(DatabaseImporter(connect_db(...)))

```

That importer now presumably provides importable modules from a database, but it provides no metadata or entry points. For this custom importer to provide metadata, it would also need to implement `DistributionFinder`:
```
fromimportlib.metadataimport DistributionFinder
classDatabaseImporter(DistributionFinder):
  ...
  deffind_distributions(self, context=DistributionFinder.Context()):
    query = dict(name=context.name) if context.name else {}
    for dist_record in self.db.query_distributions(query):
      yield DatabaseDistribution(dist_record)