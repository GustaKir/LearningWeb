Title: hashlib Module Functions
URL: https://docs.python.org/3/library/hashlib.html
Summary: This section outlines the various functions available in the hashlib module for creating secure hash algorithms, including md5, sha1, sha224, sha256, sha384, sha512, and sha3_224, along with their parameters.
---

```


hashlib.md5([_data_ , ]_*_ , _usedforsecurity=True_)[¶](https://docs.python.org/3/library/hashlib.html#hashlib.md5 "Link to this definition")


hashlib.sha1([_data_ , ]_*_ , _usedforsecurity=True_)[¶](https://docs.python.org/3/library/hashlib.html#hashlib.sha1 "Link to this definition")


hashlib.sha224([_data_ , ]_*_ , _usedforsecurity=True_)[¶](https://docs.python.org/3/library/hashlib.html#hashlib.sha224 "Link to this definition")


hashlib.sha256([_data_ , ]_*_ , _usedforsecurity=True_)[¶](https://docs.python.org/3/library/hashlib.html#hashlib.sha256 "Link to this definition")


hashlib.sha384([_data_ , ]_*_ , _usedforsecurity=True_)[¶](https://docs.python.org/3/library/hashlib.html#hashlib.sha384 "Link to this definition")


hashlib.sha512([_data_ , ]_*_ , _usedforsecurity=True_)[¶](https://docs.python.org/3/library/hashlib.html#hashlib.sha512 "Link to this definition")


hashlib.sha3_224([_data_ , ]_*_ , _usedforsecurity=True_)[¶](https://docs.python.org/3/library/hashlib.html#hashlib.sha3_224 "Link to this definition")


hashlib.sha3_256([_data_ , ]_*_ , _usedforsecurity=True_)[¶](https://docs.python.org/3/library/hashlib.html#hashlib.sha3_256 "Link to this definition")


hashlib.sha3_384([_data_ , ]_*_ , _usedforsecurity=True_)[¶](https://docs.python.org/3/library/hashlib.html#hashlib.sha3_384 "Link to this definition")


hashlib.sha3_512([_data_ , ]_*_ , _usedforsecurity=True_)[¶](https://docs.python.org/3/library/hashlib.html#hashlib.sha3_512 "Link to this definition")

Named constructors such as these are faster than passing an algorithm name to [`new()`](https://docs.python.org/3/library/hashlib.html#hashlib.new "hashlib.new").
## Attributes[¶](https://docs.python.org/3/library/hashlib.html#attributes "Link to this heading")
Hashlib provides the following constant module attributes: 

hashlib.algorithms_guaranteed[¶](https://docs.python.org/3/library/hashlib.html#hashlib.algorithms_guaranteed "Link to this definition")
    
A set containing the names of the hash algorithms guaranteed to be supported by this module on all platforms. Note that ‘md5’ is in this list despite some upstream vendors offering an odd “FIPS compliant” Python build that excludes it.
Added in version 3.2. 

hashlib.algorithms_available[¶](https://docs.python.org/3/library/hashlib.html#hashlib.algorithms_available "Link to this definition")
    
A set containing the names of the hash algorithms that are available in the running Python interpreter. These names will be recognized when passed to [`new()`](https://docs.python.org/3/library/hashlib.html#hashlib.new "hashlib.new"). [`algorithms_guaranteed`](https://docs.python.org/3/library/hashlib.html#hashlib.algorithms_guaranteed "hashlib.algorithms_guaranteed") will always be a subset. The same algorithm may appear multiple times in this set under different names (thanks to OpenSSL).
Added in version 3.2.
## Hash Objects[¶](https://docs.python.org/3/library/hashlib.html#hash-objects "Link to this heading")
The following values are provided as constant attributes of the hash objects returned by the constructors: 

hash.digest_size[¶](https://docs.python.org/3/library/hashlib.html#hashlib.hash.digest_size "Link to this definition")
    
The size of the resulting hash in bytes. 

hash.block_size[¶](https://docs.python.org/3/library/hashlib.html#hashlib.hash.block_size "Link to this definition")
    
The internal block size of the hash algorithm in bytes.
A hash object has the following attributes: 

hash.name[¶](https://docs.python.org/3/library/hashlib.html#hashlib.hash.name "Link to this definition")
    
The canonical name of this hash, always lowercase and always suitable as a parameter to [`new()`](https://docs.python.org/3/library/hashlib.html#hashlib.new "hashlib.new") to create another hash of this type.
Changed in version 3.4: The name attribute has been present in CPython since its inception, but until Python 3.4 was not formally specified, so may not exist on some platforms.
A hash object has the following methods: 

hash.update(_data_)[¶](https://docs.python.org/3/library/hashlib.html#hashlib.hash.update "Link to this definition")
    
Update the hash object with the [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object). Repeated calls are equivalent to a single call with the concatenation of all the arguments: `m.update(a); m.update(b)` is equivalent to `m.update(a+b)`. 

hash.digest()[¶](https://docs.python.org/3/library/hashlib.html#hashlib.hash.digest "Link to this definition")
    
Return the digest of the data passed to the [`update()`](https://docs.python.org/3/library/hashlib.html#hashlib.hash.update "hashlib.hash.update") method so far. This is a bytes object of size [`digest_size`](https://docs.python.org/3/library/hashlib.html#hashlib.hash.digest_size "hashlib.hash.digest_size") which may contain bytes in the whole range from 0 to 255.