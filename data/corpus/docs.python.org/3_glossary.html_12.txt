Title: Glossary of Python Terms
URL: https://docs.python.org/3/glossary.html
Summary: This document provides definitions for key Python terms including IDLE, which is the integrated development and learning environment for Python, and immortal objects which are a CPython implementation detail that cannot be deallocated during interpreter execution.
---

IDLE[¶](https://docs.python.org/3/glossary.html#term-IDLE "Link to this term")
    
An Integrated Development and Learning Environment for Python. [IDLE — Python editor and shell](https://docs.python.org/3/library/idle.html#idle) is a basic editor and interpreter environment which ships with the standard distribution of Python. 

immortal[¶](https://docs.python.org/3/glossary.html#term-immortal "Link to this term")
    
 _Immortal objects_ are a CPython implementation detail introduced in [**PEP 683**](https://peps.python.org/pep-0683/).
If an object is immortal, its [reference count](https://docs.python.org/3/glossary.html#term-reference-count) is never modified, and therefore it is never deallocated while the interpreter is running. For example, [`True`](https://docs.python.org/3/library/constants.html#True "True") and [`None`](https://docs.python.org/3/library/constants.html#None "None") are immortal in CPython. 

immutable[¶](https://docs.python.org/3/glossary.html#term-immutable "Link to this term")
    
An object with a fixed value. Immutable objects include numbers, strings and tuples. Such an object cannot be altered. A new object has to be created if a different value has to be stored. They play an important role in places where a constant hash value is needed, for example as a key in a dictionary. 

import path[¶](https://docs.python.org/3/glossary.html#term-import-path "Link to this term")
    
A list of locations (or [path entries](https://docs.python.org/3/glossary.html#term-path-entry)) that are searched by the [path based finder](https://docs.python.org/3/glossary.html#term-path-based-finder) for modules to import. During import, this list of locations usually comes from [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path"), but for subpackages it may also come from the parent package’s `__path__` attribute. 

importing[¶](https://docs.python.org/3/glossary.html#term-importing "Link to this term")
    
The process by which Python code in one module is made available to Python code in another module. 

importer[¶](https://docs.python.org/3/glossary.html#term-importer "Link to this term")
    
An object that both finds and loads a module; both a [finder](https://docs.python.org/3/glossary.html#term-finder) and [loader](https://docs.python.org/3/glossary.html#term-loader) object. 

interactive[¶](https://docs.python.org/3/glossary.html#term-interactive "Link to this term")
    
Python has an interactive interpreter which means you can enter statements and expressions at the interpreter prompt, immediately execute them and see their results. Just launch `python` with no arguments (possibly by selecting it from your computer’s main menu). It is a very powerful way to test out new ideas or inspect modules and packages (remember `help(x)`). For more on interactive mode, see [Interactive Mode](https://docs.python.org/3/tutorial/appendix.html#tut-interac). 

interpreted[¶](https://docs.python.org/3/glossary.html#term-interpreted "Link to this term")
    
Python is an interpreted language, as opposed to a compiled one, though the distinction can be blurry because of the presence of the bytecode compiler. This means that source files can be run directly without explicitly creating an executable which is then run. Interpreted languages typically have a shorter development/debug cycle than compiled ones, though their programs generally also run more slowly. See also [interactive](https://docs.python.org/3/glossary.html#term-interactive). 

interpreter shutdown[¶](https://docs.python.org/3/glossary.html#term-interpreter-shutdown "Link to this term")
    
When asked to shut down, the Python interpreter enters a special phase where it gradually releases all allocated resources, such as modules and various critical internal structures. It also makes several calls to the [garbage collector](https://docs.python.org/3/glossary.html#term-garbage-collection). This can trigger the execution of code in user-defined destructors or weakref callbacks. Code executed during the shutdown phase can encounter various exceptions as the resources it relies on may not function anymore (common examples are library modules or the warnings machinery).
The main reason for interpreter shutdown is that the `__main__` module or the script being run has finished executing.