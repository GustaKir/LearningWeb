Title: Process-Safe Wrapper for ctypes in multiprocessing
URL: https://docs.python.org/3/library/multiprocessing.html
Summary: The `multiprocessing.sharedctypes.synchronized` function returns a process-safe wrapper for a ctypes object, which uses a provided or default `multiprocessing.RLock` for synchronization. This wrapper includes methods to access the wrapped object and the synchronization lock. Note that accessing the object through the wrapper may be slower than direct access to the ctypes object, and support for context manager protocol was added in version 3.5.
---

multiprocessing.sharedctypes.synchronized(_obj_[, _lock_])[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.sharedctypes.synchronized "Link to this definition")
    
Return a process-safe wrapper object for a ctypes object which uses _lock_ to synchronize access. If _lock_ is `None` (the default) then a [`multiprocessing.RLock`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.RLock "multiprocessing.RLock") object is created automatically.
A synchronized wrapper will have two methods in addition to those of the object it wraps: `get_obj()` returns the wrapped object and `get_lock()` returns the lock object used for synchronization.
Note that accessing the ctypes object through the wrapper can be a lot slower than accessing the raw ctypes object.
Changed in version 3.5: Synchronized objects support the [context manager](https://docs.python.org/3/glossary.html#term-context-manager) protocol.
The table below compares the syntax for creating shared ctypes objects from shared memory with the normal ctypes syntax. (In the table `MyStruct` is some subclass of [`ctypes.Structure`](https://docs.python.org/3/library/ctypes.html#ctypes.Structure "ctypes.Structure").)
ctypes | sharedctypes using type | sharedctypes using typecode  
---|---|---  
c_double(2.4) | RawValue(c_double, 2.4) | RawValue(‘d’, 2.4)  
MyStruct(4, 6) | RawValue(MyStruct, 4, 6) |   
(c_short * 7)() | RawArray(c_short, 7) | RawArray(‘h’, 7)  
(c_int * 3)(9, 2, 8) | RawArray(c_int, (9, 2, 8)) | RawArray(‘i’, (9, 2, 8))  
Below is an example where a number of ctypes objects are modified by a child process:
```
frommultiprocessingimport Process, Lock
frommultiprocessing.sharedctypesimport Value, Array
fromctypesimport Structure, c_double
classPoint(Structure):
  _fields_ = [('x', c_double), ('y', c_double)]
defmodify(n, x, s, A):
  n.value **= 2
  x.value **= 2
  s.value = s.value.upper()
  for a in A:
    a.x **= 2
    a.y **= 2
if __name__ == '__main__':
  lock = Lock()
  n = Value('i', 7)
  x = Value(c_double, 1.0/3.0, lock=False)
  s = Array('c', b'hello world', lock=lock)
  A = Array(Point, [(1.875,-6.25), (-5.75,2.0), (2.375,9.5)], lock=lock)
  p = Process(target=modify, args=(n, x, s, A))
  p.start()
  p.join()
  print(n.value)
  print(x.value)
  print(s.value)
  print([(a.x, a.y) for a in A])

```

The results printed are
```
49
0.1111111111111111
HELLO WORLD
[(3.515625, 39.0625), (33.0625, 4.0), (5.640625, 90.25)]