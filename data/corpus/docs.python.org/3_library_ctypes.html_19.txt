Title: Using ctypes to Wrap Windows API Functions
URL: https://docs.python.org/3/library/ctypes.html
Summary: This section illustrates how to use the ctypes library in Python to wrap Windows API functions, specifically demonstrating the creation of a function prototype for `GetWindowRect`. It explains that functions with output parameters return their values automatically, and it introduces the `errcheck` protocol for processing output and error checking.
---

```

Here is the wrapping with [`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "ctypes: A foreign function library for Python."):
>>>```
>>> fromctypesimport POINTER, WINFUNCTYPE, windll, WinError
>>> fromctypes.wintypesimport BOOL, HWND, RECT
>>> prototype = WINFUNCTYPE(BOOL, HWND, POINTER(RECT))
>>> paramflags = (1, "hwnd"), (2, "lprect")
>>> GetWindowRect = prototype(("GetWindowRect", windll.user32), paramflags)
>>>

```

Functions with output parameters will automatically return the output parameter value if there is a single one, or a tuple containing the output parameter values when there are more than one, so the GetWindowRect function now returns a RECT instance, when called.
Output parameters can be combined with the [`errcheck`](https://docs.python.org/3/library/ctypes.html#ctypes._CFuncPtr.errcheck "ctypes._CFuncPtr.errcheck") protocol to do further output processing and error checking. The win32 `GetWindowRect` api function returns a `BOOL` to signal success or failure, so this function could do the error checking, and raises an exception when the api call failed:
>>>```
>>> deferrcheck(result, func, args):
...   if not result:
...     raise WinError()
...   return args
...
>>> GetWindowRect.errcheck = errcheck
>>>

```

If the [`errcheck`](https://docs.python.org/3/library/ctypes.html#ctypes._CFuncPtr.errcheck "ctypes._CFuncPtr.errcheck") function returns the argument tuple it receives unchanged, [`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "ctypes: A foreign function library for Python.") continues the normal processing it does on the output parameters. If you want to return a tuple of window coordinates instead of a `RECT` instance, you can retrieve the fields in the function and return them instead, the normal processing will no longer take place:
>>>```
>>> deferrcheck(result, func, args):
...   if not result:
...     raise WinError()
...   rc = args[1]
...   return rc.left, rc.top, rc.bottom, rc.right
...
>>> GetWindowRect.errcheck = errcheck
>>>

```

### Utility functions[¶](https://docs.python.org/3/library/ctypes.html#utility-functions "Link to this heading") 

ctypes.addressof(_obj_)[¶](https://docs.python.org/3/library/ctypes.html#ctypes.addressof "Link to this definition")
    
Returns the address of the memory buffer as integer. _obj_ must be an instance of a ctypes type.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `ctypes.addressof` with argument `obj`. 

ctypes.alignment(_obj_or_type_)[¶](https://docs.python.org/3/library/ctypes.html#ctypes.alignment "Link to this definition")
    
Returns the alignment requirements of a ctypes type. _obj_or_type_ must be a ctypes type or instance. 

ctypes.byref(_obj_[, _offset_])[¶](https://docs.python.org/3/library/ctypes.html#ctypes.byref "Link to this definition")
    
Returns a light-weight pointer to _obj_ , which must be an instance of a ctypes type. _offset_ defaults to zero, and must be an integer that will be added to the internal pointer value.
`byref(obj, offset)` corresponds to this C code:
```
(((char *)&obj) + offset)