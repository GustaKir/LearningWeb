Title: Python 3 Update: Performance Improvements and New Extraction Filters
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: The document discusses recent updates including improved performance for `dataclasses.astuple()` and `dataclasses.asdict()` regarding common Python types. Additionally, it introduces a new _filter_ argument in the `tarfile` extraction methods and `shutil.unpack_archive()` to limit potentially dangerous tar features.
---

Aasland.
  * [gh-103000](https://github.com/python/cpython/issues/103000): Improve performance of [`dataclasses.astuple()`](https://docs.python.org/3/library/dataclasses.html#dataclasses.astuple "dataclasses.astuple") and [`dataclasses.asdict()`](https://docs.python.org/3/library/dataclasses.html#dataclasses.asdict "dataclasses.asdict") in cases where the contents are common Python types.
  * [gh-102953](https://github.com/python/cpython/issues/102953): The extraction methods in [`tarfile`](https://docs.python.org/3/library/tarfile.html#module-tarfile "tarfile: Read and write tar-format archive files."), and [`shutil.unpack_archive()`](https://docs.python.org/3/library/shutil.html#shutil.unpack_archive "shutil.unpack_archive"), have a new a _filter_ argument that allows limiting tar features than may be surprising or dangerous, such as creating files outside the destination directory. See [Extraction filters](https://docs.python.org/3/library/tarfile.html#tarfile-extraction-filter) for details.
  * [gh-97696](https://github.com/python/cpython/issues/97696): Implemented an eager task factory in asyncio. When used as a task factory on an event loop, it performs eager execution of coroutines. Coroutines that are able to complete synchronously (e.g. return or raise without blocking) are returned immediately as a finished task, and the task is never scheduled to the event loop. If the coroutine blocks, the (pending) task is scheduled and returned.
  * [gh-81079](https://github.com/python/cpython/issues/81079): Add _case_sensitive_ keyword-only argument to [`pathlib.Path.glob()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.glob "pathlib.Path.glob") and [`rglob()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.rglob "pathlib.Path.rglob").
  * [gh-101819](https://github.com/python/cpython/issues/101819): Isolate the [`io`](https://docs.python.org/3/library/io.html#module-io "io: Core tools for working with streams.") extension module by applying [**PEP 687**](https://peps.python.org/pep-0687/). Patch by Kumar Aditya, Victor Stinner, and Erlend E. Aasland.
  * [gh-91896](https://github.com/python/cpython/issues/91896): Deprecate [`collections.abc.ByteString`](https://docs.python.org/3/library/collections.abc.html#collections.abc.ByteString "collections.abc.ByteString")
  * [gh-101362](https://github.com/python/cpython/issues/101362): Speed up [`pathlib.Path`](https://docs.python.org/3/library/pathlib.html#pathlib.Path "pathlib.Path") construction by omitting the path anchor from the internal list of path parts.
  * [gh-102114](https://github.com/python/cpython/issues/102114): Functions in the [`dis`](https://docs.python.org/3/library/dis.html#module-dis "dis: Disassembler for Python bytecode.") module that accept a source code string as argument now print a more concise traceback when the string contains a syntax or indentation error.
  * [gh-62432](https://github.com/python/cpython/issues/62432): The [`unittest`](https://docs.python.org/3/library/unittest.html#module-unittest "unittest: Unit testing framework for Python.") runner will now exit with status code 5 if no tests were run. It is common for test runner misconfiguration to fail to find any tests, this should be an error.
  * [gh-78079](https://github.com/python/cpython/issues/78079): Fix incorrect normalization of UNC device path roots, and partial UNC share path roots, in [`pathlib.PurePath`](https://docs.python.org/3/library/pathlib.html#pathlib.PurePath "pathlib.PurePath"). Pathlib no longer appends a trailing slash to such paths.
  * [gh-85984](https://github.com/python/cpython/issues/85984): Add [`tty.cfmakeraw()`](https://docs.python.org/3/library/tty.html#tty.cfmakeraw "tty.cfmakeraw") and [`tty.cfmakecbreak()`](https://docs.python.org/3/library/tty.html#tty.cfmakecbreak "tty.cfmakecbreak") to [`tty`](https://docs.python.org/3/library/tty.html#module-tty "tty: Utility functions that perform common terminal control operations. \(Unix\)") and modernize, the behavior of [`tty.setraw()`](https://docs.python.org/3/library/tty.html#tty.setraw "tty.setraw") and [`tty.setcbreak()`](https://docs.python.org/3/library/tty.html#tty.setcbreak "tty.setcbreak") to use POSIX.1-2017 Chapter 11 “General Terminal Interface” flag masks by default.
  * [gh-101688](https://github.com/python/cpython/issues/101688): Implement [`types.get_original_bases()`](https://docs.python.org/3/library/types.html#types.get_original_bases "types.get_original_bases") to provide further introspection for types.
  * [gh-101640](https://github.com/python/cpython/issues/101640): [`argparse.ArgumentParser`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser "argparse.ArgumentParser") now catches errors when writing messages, such as when [`sys.stderr`](https://docs.python.org/3/library/sys.html#sys.stderr "sys.stderr") is `None`.