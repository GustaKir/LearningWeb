Title: Python 3 Changelog Highlights
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section details bug fixes and enhancements, including the addition of `TimeoutError` during `asyncio.timeout()`, handling of unraisable `AttributeError` during Python finalization, the inclusion of `Anchor` in `importlib.resources`, and changes to `asyncio.Condition.wait()` to re-raise the original `CancelledError` instance.
---

at all. If we skipped tests, it was correctly discovered.
  * [gh-96037](https://github.com/python/cpython/issues/96037): Insert [`TimeoutError`](https://docs.python.org/3/library/exceptions.html#TimeoutError "TimeoutError") in the context of the exception that was raised during exiting an expired [`asyncio.timeout()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.timeout "asyncio.timeout") block.
  * [gh-113781](https://github.com/python/cpython/issues/113781): Silence unraisable AttributeError when warnings are emitted during Python finalization.
  * [gh-113238](https://github.com/python/cpython/issues/113238): Add `Anchor` to `importlib.resources` (in order for the code to comply with the documentation)
  * [gh-111693](https://github.com/python/cpython/issues/111693): [`asyncio.Condition.wait()`](https://docs.python.org/3/library/asyncio-sync.html#asyncio.Condition.wait "asyncio.Condition.wait") now re-raises the same `CancelledError` instance that may have caused it to be interrupted. Fixed race condition in [`asyncio.Semaphore.acquire()`](https://docs.python.org/3/library/asyncio-sync.html#asyncio.Semaphore.acquire "asyncio.Semaphore.acquire") when interrupted with a `CancelledError`.
  * [gh-113791](https://github.com/python/cpython/issues/113791): Add `CLOCK_MONOTONIC_RAW_APPROX` and `CLOCK_UPTIME_RAW_APPROX` to [`time`](https://docs.python.org/3/library/time.html#module-time "time: Time access and conversions.") on macOS. These are clocks available on macOS 10.12 or later.
  * [gh-112932](https://github.com/python/cpython/issues/112932): Restore the ability for [`zipfile`](https://docs.python.org/3/library/zipfile.html#module-zipfile "zipfile: Read and write ZIP-format archive files.") to `extractall` from zip files with a “/” directory entry in them as is commonly added to zips by some wiki or bug tracker data exporters.
  * [gh-113568](https://github.com/python/cpython/issues/113568): Raise deprecation warnings from [`pathlib.PurePath`](https://docs.python.org/3/library/pathlib.html#pathlib.PurePath "pathlib.PurePath") and not its private base class `PurePathBase`.
  * [gh-113594](https://github.com/python/cpython/issues/113594): Fix [`UnicodeEncodeError`](https://docs.python.org/3/library/exceptions.html#UnicodeEncodeError "UnicodeEncodeError") in [`email`](https://docs.python.org/3/library/email.html#module-email "email: Package supporting the parsing, manipulating, and generating email messages.") when re-fold lines that contain unknown-8bit encoded part followed by non-unknown-8bit encoded part.
  * [gh-113538](https://github.com/python/cpython/issues/113538): In `asyncio.StreamReaderProtocol.connection_made()`, there is callback that logs an error if the task wrapping the “connected callback” fails. This callback would itself fail if the task was cancelled. Prevent this by checking whether the task was cancelled first. If so, close the transport but don’t log an error.
  * [gh-113626](https://github.com/python/cpython/issues/113626): Add support for the _allow_code_ argument in the [`marshal`](https://docs.python.org/3/library/marshal.html#module-marshal "marshal: Convert Python objects to streams of bytes and back \(with different constraints\).") module. Passing `allow_code=False` prevents serialization and de-serialization of code objects which is incompatible between Python versions.
  * [gh-85567](https://github.com/python/cpython/issues/85567): Fix resource warnings for unclosed files in [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "pickle: Convert Python objects to streams of bytes and back.") and [`pickletools`](https://docs.python.org/3/library/pickletools.html#module-pickletools "pickletools: Contains extensive comments about the pickle protocols and pickle-machine opcodes, as well as some useful functions.") command line interfaces.
  * [gh-113537](https://github.com/python/cpython/issues/113537): Support loads `str` in [`plistlib.loads()`](https://docs.python.org/3/library/plistlib.html#plistlib.loads "plistlib.loads").
  * [gh-89850](https://github.com/python/cpython/issues/89850): Add default implementations of [`pickle.Pickler.persistent_id()`](https://docs.python.org/3/library/pickle.html#pickle.Pickler.persistent_id "pickle.Pickler.persistent_id") and [`pickle.Unpickler.persistent_load()`](https://docs.python.org/3/library/pickle.html#pickle.Unpickler.persistent_load "pickle.Unpickler.persistent_load") methods in the C implementation.