Title: Python 3.8 Updates: sys and tarfile Modules
URL: https://docs.python.org/3/whatsnew/3.8.html
Summary: Python 3.8 introduces the `sys.unraisablehook()` function to control handling of unraisable exceptions that occur when Python cannot manage an error, such as during destructors or garbage collection. Additionally, the `tarfile` module now defaults to the modern pax format for new archives, improving compatibility.
---

```

### sys[¶](https://docs.python.org/3/whatsnew/3.8.html#sys "Link to this heading")
Add new [`sys.unraisablehook()`](https://docs.python.org/3/library/sys.html#sys.unraisablehook "sys.unraisablehook") function which can be overridden to control how “unraisable exceptions” are handled. It is called when an exception has occurred but there is no way for Python to handle it. For example, when a destructor raises an exception or during garbage collection ([`gc.collect()`](https://docs.python.org/3/library/gc.html#gc.collect "gc.collect")). (Contributed by Victor Stinner in [bpo-36829](https://bugs.python.org/issue?@action=redirect&bpo=36829).)
### tarfile[¶](https://docs.python.org/3/whatsnew/3.8.html#tarfile "Link to this heading")
The [`tarfile`](https://docs.python.org/3/library/tarfile.html#module-tarfile "tarfile: Read and write tar-format archive files.") module now defaults to the modern pax (POSIX.1-2001) format for new archives, instead of the previous GNU-specific one. This improves cross-platform portability with a consistent encoding (UTF-8) in a standardized and extensible format, and offers several other benefits. (Contributed by C.A.M. Gerlach in [bpo-36268](https://bugs.python.org/issue?@action=redirect&bpo=36268).)
### threading[¶](https://docs.python.org/3/whatsnew/3.8.html#threading "Link to this heading")
Add a new [`threading.excepthook()`](https://docs.python.org/3/library/threading.html#threading.excepthook "threading.excepthook") function which handles uncaught [`threading.Thread.run()`](https://docs.python.org/3/library/threading.html#threading.Thread.run "threading.Thread.run") exception. It can be overridden to control how uncaught [`threading.Thread.run()`](https://docs.python.org/3/library/threading.html#threading.Thread.run "threading.Thread.run") exceptions are handled. (Contributed by Victor Stinner in [bpo-1230540](https://bugs.python.org/issue?@action=redirect&bpo=1230540).)
Add a new [`threading.get_native_id()`](https://docs.python.org/3/library/threading.html#threading.get_native_id "threading.get_native_id") function and a [`native_id`](https://docs.python.org/3/library/threading.html#threading.Thread.native_id "threading.Thread.native_id") attribute to the [`threading.Thread`](https://docs.python.org/3/library/threading.html#threading.Thread "threading.Thread") class. These return the native integral Thread ID of the current thread assigned by the kernel. This feature is only available on certain platforms, see [`get_native_id`](https://docs.python.org/3/library/threading.html#threading.get_native_id "threading.get_native_id") for more information. (Contributed by Jake Tesler in [bpo-36084](https://bugs.python.org/issue?@action=redirect&bpo=36084).)
### tokenize[¶](https://docs.python.org/3/whatsnew/3.8.html#tokenize "Link to this heading")
The [`tokenize`](https://docs.python.org/3/library/tokenize.html#module-tokenize "tokenize: Lexical scanner for Python source code.") module now implicitly emits a `NEWLINE` token when provided with input that does not have a trailing new line. This behavior now matches what the C tokenizer does internally. (Contributed by Ammar Askar in [bpo-33899](https://bugs.python.org/issue?@action=redirect&bpo=33899).)
### tkinter[¶](https://docs.python.org/3/whatsnew/3.8.html#tkinter "Link to this heading")
Added methods `selection_from()`, `selection_present()`, `selection_range()` and `selection_to()` in the `tkinter.Spinbox` class. (Contributed by Juliette Monsel in [bpo-34829](https://bugs.python.org/issue?@action=redirect&bpo=34829).)
Added method `moveto()` in the `tkinter.Canvas` class. (Contributed by Juliette Monsel in [bpo-23831](https://bugs.python.org/issue?@action=redirect&bpo=23831).)
The `tkinter.PhotoImage` class now has `transparency_get()` and `transparency_set()` methods. (Contributed by Zackery Spytz in [bpo-25451](https://bugs.python.org/issue?@action=redirect&bpo=25451).)
### time[¶](https://docs.python.org/3/whatsnew/3.8.html#time "Link to this heading")
Added new clock [`CLOCK_UPTIME_RAW`](https://docs.python.org/3/library/time.html#time.CLOCK_UPTIME_RAW "time.CLOCK_UPTIME_RAW") for macOS 10.12. (Contributed by Joannah Nanjekye in [bpo-35702](https://bugs.python.org/issue?@action=redirect&bpo=35702).)
### typing[¶](https://docs.python.org/3/whatsnew/3.8.html#typing "Link to this heading")
The [`typing`](https://docs.python.org/3/library/typing.html#module-typing "typing: Support for type hints \(see :pep:`484`\).") module incorporates several new features:
  * A dictionary type with per-key types. See [**PEP 589**](https://peps.python.org/pep-0589/) and [`typing.TypedDict`](https://docs.python.org/3/library/typing.html#typing.TypedDict "typing.TypedDict"). TypedDict uses only string keys. By default, every key is required to be present. Specify “total=False” to allow keys to be optional:
```
classLocation(TypedDict, total=False):
  lat_long: tuple
  grid_square: str
  xy_coordinate: tuple