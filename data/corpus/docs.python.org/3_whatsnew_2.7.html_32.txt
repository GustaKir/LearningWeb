Title: Unit Testing Enhancements in Python 2.7
URL: https://docs.python.org/3/whatsnew/2.7.html
Summary: Python 2.7 introduces several enhancements to the unittest framework, including methods like assertRaisesRegex for checking exceptions and their message patterns, as well as assertIn, assertNotIn, assertItemsEqual, and assertSetEqual for various assertion checks related to membership and equality of sequences and sets.
---

s://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaisesRegex "unittest.TestCase.assertRaisesRegex") checks whether a particular exception is raised, and then also checks that the string representation of the exception matches the provided regular expression.
  * [`assertIn()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIn "unittest.TestCase.assertIn") and [`assertNotIn()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotIn "unittest.TestCase.assertNotIn") tests whether _first_ is or is not in _second_.
  * [`assertItemsEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertCountEqual "unittest.TestCase.assertCountEqual") tests whether two provided sequences contain the same elements.
  * [`assertSetEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertSetEqual "unittest.TestCase.assertSetEqual") compares whether two sets are equal, and only reports the differences between the sets in case of error.
  * Similarly, [`assertListEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertListEqual "unittest.TestCase.assertListEqual") and [`assertTupleEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertTupleEqual "unittest.TestCase.assertTupleEqual") compare the specified types and explain any differences without necessarily printing their full values; these methods are now used by default when comparing lists and tuples using [`assertEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertEqual "unittest.TestCase.assertEqual"). More generally, [`assertSequenceEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertSequenceEqual "unittest.TestCase.assertSequenceEqual") compares two sequences and can optionally check whether both sequences are of a particular type.
  * [`assertDictEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertDictEqual "unittest.TestCase.assertDictEqual") compares two dictionaries and reports the differences; it’s now used by default when you compare two dictionaries using [`assertEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertEqual "unittest.TestCase.assertEqual"). `assertDictContainsSubset()` checks whether all of the key/value pairs in _first_ are found in _second_.
  * [`assertAlmostEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertAlmostEqual "unittest.TestCase.assertAlmostEqual") and [`assertNotAlmostEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotAlmostEqual "unittest.TestCase.assertNotAlmostEqual") test whether _first_ and _second_ are approximately equal. This method can either round their difference to an optionally specified number of _places_ (the default is 7) and compare it to zero, or require the difference to be smaller than a supplied _delta_ value.
  * [`loadTestsFromName()`](https://docs.python.org/3/library/unittest.html#unittest.TestLoader.loadTestsFromName "unittest.TestLoader.loadTestsFromName") properly honors the [`suiteClass`](https://docs.python.org/3/library/unittest.html#unittest.TestLoader.suiteClass "unittest.TestLoader.suiteClass") attribute of the [`TestLoader`](https://docs.python.org/3/library/unittest.html#unittest.TestLoader "unittest.TestLoader"). (Fixed by Mark Roddy; [bpo-6866](https://bugs.python.org/issue?@action=redirect&bpo=6866).)
  * A new hook lets you extend the [`assertEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertEqual "unittest.TestCase.assertEqual") method to handle new data types. The [`addTypeEqualityFunc()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.addTypeEqualityFunc "unittest.TestCase.addTypeEqualityFunc") method takes a type object and a function. The function will be used when both of the objects being compared are of the specified type. This function should compare the two objects and raise an exception if they don’t match; it’s a good idea for the function to provide additional information about why the two objects aren’t matching, much as the new sequence comparison methods do.