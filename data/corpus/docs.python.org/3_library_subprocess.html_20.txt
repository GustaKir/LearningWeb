Title: Subprocess Module Notes and Example
URL: https://docs.python.org/3/library/subprocess.html
Summary: This section highlights important notes when using the subprocess module, including the differences in return values between `call()` and `os.system()`, and explains how `os.system()` handles signals. It also provides an example demonstrating how to execute a command using `call()` and handle potential errors.
---

```

Notes:
  * Calling the program through the shell is usually not required.
  * The [`call()`](https://docs.python.org/3/library/subprocess.html#subprocess.call "subprocess.call") return value is encoded differently to that of [`os.system()`](https://docs.python.org/3/library/os.html#os.system "os.system").
  * The [`os.system()`](https://docs.python.org/3/library/os.html#os.system "os.system") function ignores SIGINT and SIGQUIT signals while the command is running, but the caller must do this separately when using the [`subprocess`](https://docs.python.org/3/library/subprocess.html#module-subprocess "subprocess: Subprocess management.") module.


A more realistic example would look like this:
```
try:
  retcode = call("mycmd" + " myarg", shell=True)
  if retcode < 0:
    print("Child was terminated by signal", -retcode, file=sys.stderr)
  else:
    print("Child returned", retcode, file=sys.stderr)
except OSError as e:
  print("Execution failed:", e, file=sys.stderr)

```

### Replacing the [`os.spawn`](https://docs.python.org/3/library/os.html#os.spawnl "os.spawnl") family[¶](https://docs.python.org/3/library/subprocess.html#replacing-the-os-spawn-family "Link to this heading")
P_NOWAIT example:
```
pid = os.spawnlp(os.P_NOWAIT, "/bin/mycmd", "mycmd", "myarg")
==>
pid = Popen(["/bin/mycmd", "myarg"]).pid

```

P_WAIT example:
```
retcode = os.spawnlp(os.P_WAIT, "/bin/mycmd", "mycmd", "myarg")
==>
retcode = call(["/bin/mycmd", "myarg"])

```

Vector example:
```
os.spawnvp(os.P_NOWAIT, path, args)
==>
Popen([path] + args[1:])

```

Environment example:
```
os.spawnlpe(os.P_NOWAIT, "/bin/mycmd", "mycmd", "myarg", env)
==>
Popen(["/bin/mycmd", "myarg"], env={"PATH": "/usr/bin"})

```

### Replacing [`os.popen()`](https://docs.python.org/3/library/os.html#os.popen "os.popen"), `os.popen2()`, `os.popen3()`[¶](https://docs.python.org/3/library/subprocess.html#replacing-os-popen-os-popen2-os-popen3 "Link to this heading")
```
(child_stdin, child_stdout) = os.popen2(cmd, mode, bufsize)
==>
p = Popen(cmd, shell=True, bufsize=bufsize,
     stdin=PIPE, stdout=PIPE, close_fds=True)
(child_stdin, child_stdout) = (p.stdin, p.stdout)

```

```
(child_stdin,
 child_stdout,
 child_stderr) = os.popen3(cmd, mode, bufsize)
==>
p = Popen(cmd, shell=True, bufsize=bufsize,
     stdin=PIPE, stdout=PIPE, stderr=PIPE, close_fds=True)
(child_stdin,
 child_stdout,
 child_stderr) = (p.stdin, p.stdout, p.stderr)

```

```
(child_stdin, child_stdout_and_stderr) = os.popen4(cmd, mode, bufsize)
==>
p = Popen(cmd, shell=True, bufsize=bufsize,
     stdin=PIPE, stdout=PIPE, stderr=STDOUT, close_fds=True)
(child_stdin, child_stdout_and_stderr) = (p.stdin, p.stdout)

```

Return code handling translates as follows:
```
pipe = os.popen(cmd, 'w')
...
rc = pipe.close()
if rc is not None and rc >> 8:
  print("There were some errors")
==>
process = Popen(cmd, stdin=PIPE)
...
process.stdin.close()
if process.wait() != 0:
  print("There were some errors")

```

### Replacing functions from the `popen2` module[¶](https://docs.python.org/3/library/subprocess.html#replacing-functions-from-the-popen2-module "Link to this heading")
Note
If the cmd argument to popen2 functions is a string, the command is executed through /bin/sh. If it is a list, the command is directly executed.
```
(child_stdout, child_stdin) = popen2.popen2("somestring", bufsize, mode)
==>
p = Popen("somestring", shell=True, bufsize=bufsize,
     stdin=PIPE, stdout=PIPE, close_fds=True)
(child_stdout, child_stdin) = (p.stdout, p.stdin)

```

```
(child_stdout, child_stdin) = popen2.popen2(["mycmd", "myarg"], bufsize, mode)
==>
p = Popen(["mycmd", "myarg"], bufsize=bufsize,
     stdin=PIPE, stdout=PIPE, close_fds=True)
(child_stdout, child_stdin) = (p.stdout, p.stdin)