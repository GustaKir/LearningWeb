Title: File Operations and Wildcards in Python
URL: https://docs.python.org/3/tutorial/stdlib.html
Summary: This section demonstrates file operations using the `shutil` module, showcasing functions like `copyfile` and `move`. It also introduces the `glob` module for file listing based on wildcard patterns, providing an example of retrieving Python files in a directory. Additionally, it touches on handling command line arguments through the `sys` module's `argv` attribute for utility scripts.
---

```
>>> importshutil
>>> shutil.copyfile('data.db', 'archive.db')
'archive.db'
>>> shutil.move('/build/executables', 'installdir')
'installdir'

```

## 10.2. File Wildcards[¶](https://docs.python.org/3/tutorial/stdlib.html#file-wildcards "Link to this heading")
The [`glob`](https://docs.python.org/3/library/glob.html#module-glob "glob: Unix shell style pathname pattern expansion.") module provides a function for making file lists from directory wildcard searches:
>>>```
>>> importglob
>>> glob.glob('*.py')
['primes.py', 'random.py', 'quote.py']

```

## 10.3. Command Line Arguments[¶](https://docs.python.org/3/tutorial/stdlib.html#command-line-arguments "Link to this heading")
Common utility scripts often need to process command line arguments. These arguments are stored in the [`sys`](https://docs.python.org/3/library/sys.html#module-sys "sys: Access system-specific parameters and functions.") module’s _argv_ attribute as a list. For instance, let’s take the following `demo.py` file:
```
# File demo.py
importsys
print(sys.argv)

```

Here is the output from running `python demo.py one two three` at the command line:
```
['demo.py', 'one', 'two', 'three']

```

The [`argparse`](https://docs.python.org/3/library/argparse.html#module-argparse "argparse: Command-line option and argument parsing library.") module provides a more sophisticated mechanism to process command line arguments. The following script extracts one or more filenames and an optional number of lines to be displayed:
```
importargparse
parser = argparse.ArgumentParser(
  prog='top',
  description='Show top lines from each file')
parser.add_argument('filenames', nargs='+')
parser.add_argument('-l', '--lines', type=int, default=10)
args = parser.parse_args()
print(args)

```

When run at the command line with `python top.py --lines=5 alpha.txt beta.txt`, the script sets `args.lines` to `5` and `args.filenames` to `['alpha.txt', 'beta.txt']`.
## 10.4. Error Output Redirection and Program Termination[¶](https://docs.python.org/3/tutorial/stdlib.html#error-output-redirection-and-program-termination "Link to this heading")
The [`sys`](https://docs.python.org/3/library/sys.html#module-sys "sys: Access system-specific parameters and functions.") module also has attributes for _stdin_ , _stdout_ , and _stderr_. The latter is useful for emitting warnings and error messages to make them visible even when _stdout_ has been redirected:
>>>```
>>> sys.stderr.write('Warning, log file not found starting a new one\n')
Warning, log file not found starting a new one

```

The most direct way to terminate a script is to use `sys.exit()`.
## 10.5. String Pattern Matching[¶](https://docs.python.org/3/tutorial/stdlib.html#string-pattern-matching "Link to this heading")
The [`re`](https://docs.python.org/3/library/re.html#module-re "re: Regular expression operations.") module provides regular expression tools for advanced string processing. For complex matching and manipulation, regular expressions offer succinct, optimized solutions:
>>>```
>>> importre
>>> re.findall(r'\bf[a-z]*', 'which foot or hand fell fastest')
['foot', 'fell', 'fastest']
>>> re.sub(r'(\b[a-z]+) \1', r'\1', 'cat in the the hat')
'cat in the hat'

```

When only simple capabilities are needed, string methods are preferred because they are easier to read and debug:
>>>```
>>> 'tea for too'.replace('too', 'two')
'tea for two'

```

## 10.6. Mathematics[¶](https://docs.python.org/3/tutorial/stdlib.html#mathematics "Link to this heading")
The [`math`](https://docs.python.org/3/library/math.html#module-math "math: Mathematical functions \(sin\(\) etc.\).") module gives access to the underlying C library functions for floating-point math:
>>>```
>>> importmath
>>> math.cos(math.pi / 4)
0.70710678118654757
>>> math.log(1024, 2)
10.0

```

The [`random`](https://docs.python.org/3/library/random.html#module-random "random: Generate pseudo-random numbers with various common distributions.") module provides tools for making random selections:
>>>```
>>> importrandom
>>> random.choice(['apple', 'pear', 'banana'])
'apple'
>>> random.sample(range(100), 10)  # sampling without replacement
[30, 83, 16, 4, 8, 81, 41, 50, 18, 33]
>>> random.random()  # random float from the interval [0.0, 1.0)
0.17970987693706186
>>> random.randrange(6)  # random integer chosen from range(6)
4

```

The [`statistics`](https://docs.python.org/3/library/statistics.html#module-statistics "statistics: Mathematical statistics functions") module calculates basic statistical properties (the mean, median, variance, etc.) of numeric data:
>>>```
>>> importstatistics
>>> data = [2.75, 1.75, 1.25, 0.25, 0.5, 1.25, 3.5]
>>> statistics.mean(data)
1.6071428571428572
>>> statistics.median(data)
1.25
>>> statistics.variance(data)
1.3720238095238095