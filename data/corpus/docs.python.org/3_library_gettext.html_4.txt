Title: Installing gettext in Python
URL: https://docs.python.org/3/library/gettext.html
Summary: The `install(_names=None)` method sets up the `gettext()` function as the `_` function in the built-in namespace, with optional additional functions. However, it is advised against using this method in localized modules to avoid global changes, instead recommending the use of `gettext.translation` for localized module implementations.
---

install(_names =None_)[¶](https://docs.python.org/3/library/gettext.html#gettext.NullTranslations.install "Link to this definition")
    
This method installs [`gettext()`](https://docs.python.org/3/library/gettext.html#gettext.NullTranslations.gettext "gettext.NullTranslations.gettext") into the built-in namespace, binding it to `_`.
If the _names_ parameter is given, it must be a sequence containing the names of functions you want to install in the builtins namespace in addition to `_()`. Supported names are `'gettext'`, `'ngettext'`, `'pgettext'`, and `'npgettext'`.
Note that this is only one way, albeit the most convenient way, to make the `_()` function available to your application. Because it affects the entire application globally, and specifically the built-in namespace, localized modules should never install `_()`. Instead, they should use this code to make `_()` available to their module:
```
importgettext
t = gettext.translation('mymodule', ...)
_ = t.gettext

```

This puts `_()` only in the module’s global namespace and so only affects calls within this module.
Changed in version 3.8: Added `'pgettext'` and `'npgettext'`.
### The [`GNUTranslations`](https://docs.python.org/3/library/gettext.html#gettext.GNUTranslations "gettext.GNUTranslations") class[¶](https://docs.python.org/3/library/gettext.html#the-gnutranslations-class "Link to this heading")
The `gettext` module provides one additional class derived from [`NullTranslations`](https://docs.python.org/3/library/gettext.html#gettext.NullTranslations "gettext.NullTranslations"): [`GNUTranslations`](https://docs.python.org/3/library/gettext.html#gettext.GNUTranslations "gettext.GNUTranslations"). This class overrides `_parse()` to enable reading GNU **gettext** format `.mo` files in both big-endian and little-endian format.
[`GNUTranslations`](https://docs.python.org/3/library/gettext.html#gettext.GNUTranslations "gettext.GNUTranslations") parses optional metadata out of the translation catalog. It is convention with GNU **gettext** to include metadata as the translation for the empty string. This metadata is in [**RFC 822**](https://datatracker.ietf.org/doc/html/rfc822.html)-style `key: value` pairs, and should contain the `Project-Id-Version` key. If the key `Content-Type` is found, then the `charset` property is used to initialize the “protected” `_charset` instance variable, defaulting to `None` if not found. If the charset encoding is specified, then all message ids and message strings read from the catalog are converted to Unicode using this encoding, else ASCII is assumed.
Since message ids are read as Unicode strings too, all `*gettext()` methods will assume message ids as Unicode strings, not byte strings.
The entire set of key/value pairs are placed into a dictionary and set as the “protected” `_info` instance variable.
If the `.mo` file’s magic number is invalid, the major version number is unexpected, or if other problems occur while reading the file, instantiating a [`GNUTranslations`](https://docs.python.org/3/library/gettext.html#gettext.GNUTranslations "gettext.GNUTranslations") class can raise [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError"). 

_class_ gettext.GNUTranslations[¶](https://docs.python.org/3/library/gettext.html#gettext.GNUTranslations "Link to this definition")
    
The following methods are overridden from the base class implementation: 

gettext(_message_)[¶](https://docs.python.org/3/library/gettext.html#gettext.GNUTranslations.gettext "Link to this definition")
    
Look up the _message_ id in the catalog and return the corresponding message string, as a Unicode string. If there is no entry in the catalog for the _message_ id, and a fallback has been set, the look up is forwarded to the fallback’s [`gettext()`](https://docs.python.org/3/library/gettext.html#gettext.NullTranslations.gettext "gettext.NullTranslations.gettext") method. Otherwise, the _message_ id is returned. 

ngettext(_singular_ , _plural_ , _n_)[¶](https://docs.python.org/3/library/gettext.html#gettext.GNUTranslations.ngettext "Link to this definition")
    
Do a plural-forms lookup of a message id. _singular_ is used as the message id for purposes of lookup in the catalog, while _n_ is used to determine which plural form to use. The returned message string is a Unicode string.
If the message id is not found in the catalog, and a fallback is specified, the request is forwarded to the fallback’s [`ngettext()`](https://docs.python.org/3/library/gettext.html#gettext.NullTranslations.ngettext "gettext.NullTranslations.ngettext") method. Otherwise, when _n_ is 1 _singular_ is returned, and _plural_ is returned in all other cases.
Here is an example:
```
n = len(os.listdir('.'))
cat = GNUTranslations(somefile)
message = cat.ngettext(
  'There is %(num)d file in this directory',
  'There are %(num)d files in this directory',
  n) % {'num': n}