Title: Python 3.0 Changes: Metaclasses and Syntax Updates
URL: https://docs.python.org/3/whatsnew/3.0.html
Summary: The document outlines key changes in Python 3.0, including the removal of the module-global `__metaclass__` variable, updated list comprehension syntax that now requires a different format, and the expanded use of the ellipsis (`...`) as an atomic expression. The transition towards new-style classes and improvements in scoping for loop control variables in list comprehensions are also highlighted.
---

```

The module-global `__metaclass__` variable is no longer supported. (It was a crutch to make it easier to default to new-style classes without deriving every class from [`object`](https://docs.python.org/3/library/functions.html#object "object").)
  * List comprehensions no longer support the syntactic form `[... for _var_ in _item1_, _item2_, ...]`. Use`[... for  _var_ in (_item1_, _item2_, ...)]`instead. Also note that list comprehensions have different semantics: they are closer to syntactic sugar for a generator expression inside a[`list()`](https://docs.python.org/3/library/stdtypes.html#list "list") constructor, and in particular the loop control variables are no longer leaked into the surrounding scope.
  * The _ellipsis_ (`...`) can be used as an atomic expression anywhere. (Previously it was only allowed in slices.) Also, it _must_ now be spelled as `...`. (Previously it could also be spelled as `. . .`, by a mere accident of the grammar.)


### Removed Syntax[Â¶](https://docs.python.org/3/whatsnew/3.0.html#removed-syntax "Link to this heading")
  * [**PEP 3113**](https://peps.python.org/pep-3113/): Tuple parameter unpacking removed. You can no longer write `def foo(a, (b, c)): ...`. Use `def foo(a, b_c): b, c = b_c` instead.
  * Removed backticks (use [`repr()`](https://docs.python.org/3/library/functions.html#repr "repr") instead).
  * Removed `<>` (use `!=` instead).
  * Removed keyword: [`exec()`](https://docs.python.org/3/library/functions.html#exec "exec") is no longer a keyword; it remains as a function. (Fortunately the function syntax was also accepted in 2.x.) Also note that [`exec()`](https://docs.python.org/3/library/functions.html#exec "exec") no longer takes a stream argument; instead of `exec(f)` you can use `exec(f.read())`.
  * Integer literals no longer support a trailing `l` or `L`.
  * String literals no longer support a leading `u` or `U`.
  * The [`from`](https://docs.python.org/3/reference/simple_stmts.html#from) _module_ [`import`](https://docs.python.org/3/reference/simple_stmts.html#import) `*` syntax is only allowed at the module level, no longer inside functions.
  * The only acceptable syntax for relative imports is `from .[_module_] import _name_`. All[`import`](https://docs.python.org/3/reference/simple_stmts.html#import) forms not starting with `.` are interpreted as absolute imports. ([**PEP 328**](https://peps.python.org/pep-0328/))
  * Classic classes are gone.