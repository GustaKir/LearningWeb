Title: Email Parser: BytesFeedParser Overview
URL: https://docs.python.org/3/library/email.parser.html
Summary: The BytesFeedParser in Python's email module allows creation of a parser instance to sequentially feed bytes for processing. It accurately parses standards-compliant emails and offers detailed feedback on non-compliant messages, including a defects list to identify any issues encountered during parsing.
---

uch use cases. The semantics and results of the two parser APIs are identical.
The [`BytesFeedParser`](https://docs.python.org/3/library/email.parser.html#email.parser.BytesFeedParser "email.parser.BytesFeedParser")’s API is simple; you create an instance, feed it a bunch of bytes until there’s no more to feed it, then close the parser to retrieve the root message object. The [`BytesFeedParser`](https://docs.python.org/3/library/email.parser.html#email.parser.BytesFeedParser "email.parser.BytesFeedParser") is extremely accurate when parsing standards-compliant messages, and it does a very good job of parsing non-compliant messages, providing information about how a message was deemed broken. It will populate a message object’s [`defects`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage.defects "email.message.EmailMessage.defects") attribute with a list of any problems it found in a message. See the [`email.errors`](https://docs.python.org/3/library/email.errors.html#module-email.errors "email.errors: The exception classes used by the email package.") module for the list of defects that it can find.
Here is the API for the [`BytesFeedParser`](https://docs.python.org/3/library/email.parser.html#email.parser.BytesFeedParser "email.parser.BytesFeedParser"): 

_class_ email.parser.BytesFeedParser(__factory =None_, _*_ , _policy =policy.compat32_)[¶](https://docs.python.org/3/library/email.parser.html#email.parser.BytesFeedParser "Link to this definition")
    
Create a [`BytesFeedParser`](https://docs.python.org/3/library/email.parser.html#email.parser.BytesFeedParser "email.parser.BytesFeedParser") instance. Optional __factory_ is a no-argument callable; if not specified use the [`message_factory`](https://docs.python.org/3/library/email.policy.html#email.policy.Policy.message_factory "email.policy.Policy.message_factory") from the _policy_. Call __factory_ whenever a new message object is needed.
If _policy_ is specified use the rules it specifies to update the representation of the message. If _policy_ is not set, use the [`compat32`](https://docs.python.org/3/library/email.policy.html#email.policy.Compat32 "email.policy.Compat32") policy, which maintains backward compatibility with the Python 3.2 version of the email package and provides [`Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "email.message.Message") as the default factory. All other policies provide [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") as the default __factory_. For more information on what else _policy_ controls, see the [`policy`](https://docs.python.org/3/library/email.policy.html#module-email.policy "email.policy: Controlling the parsing and generating of messages") documentation.
Note: **The policy keyword should always be specified** ; The default will change to [`email.policy.default`](https://docs.python.org/3/library/email.policy.html#email.policy.default "email.policy.default") in a future version of Python.
Added in version 3.2.
Changed in version 3.3: Added the _policy_ keyword.
Changed in version 3.6: __factory_ defaults to the policy `message_factory`. 

feed(_data_)[¶](https://docs.python.org/3/library/email.parser.html#email.parser.BytesFeedParser.feed "Link to this definition")
    
Feed the parser some more data. _data_ should be a [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object) containing one or more lines. The lines can be partial and the parser will stitch such partial lines together properly. The lines can have any of the three common line endings: carriage return, newline, or carriage return and newline (they can even be mixed). 

close()[¶](https://docs.python.org/3/library/email.parser.html#email.parser.BytesFeedParser.close "Link to this definition")
    
Complete the parsing of all previously fed data and return the root message object. It is undefined what happens if [`feed()`](https://docs.python.org/3/library/email.parser.html#email.parser.BytesFeedParser.feed "email.parser.BytesFeedParser.feed") is called after this method has been called.