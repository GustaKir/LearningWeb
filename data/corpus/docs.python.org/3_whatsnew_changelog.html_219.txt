Title: C API Changes in Python
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section lists important updates to the C API, including the optimization of reference management macros to prevent side effects from repeated evaluations, fixes for use-after-free errors in certain function calls, and the addition of new procedures to the stable API.
---

### C API[¶](https://docs.python.org/3/whatsnew/changelog.html#id204 "Link to this heading")
  * [gh-98724](https://github.com/python/cpython/issues/98724): The [`Py_CLEAR`](https://docs.python.org/3/c-api/refcounting.html#c.Py_CLEAR "Py_CLEAR"), [`Py_SETREF`](https://docs.python.org/3/c-api/refcounting.html#c.Py_SETREF "Py_SETREF") and [`Py_XSETREF`](https://docs.python.org/3/c-api/refcounting.html#c.Py_XSETREF "Py_XSETREF") macros now only evaluate their argument once. If the argument has side effects, these side effects are no longer duplicated. Patch by Victor Stinner.
  * [gh-98978](https://github.com/python/cpython/issues/98978): Fix use-after-free in `Py_SetPythonHome(NULL)`, `Py_SetProgramName(NULL)` and `_Py_SetProgramFullPath(NULL)` function calls. Issue reported by Benedikt Reinartz. Patch by Victor Stinner.
  * [gh-98410](https://github.com/python/cpython/issues/98410): Add `getbufferproc` and `releasebufferproc` to the stable API.
  * [gh-98610](https://github.com/python/cpython/issues/98610): Some configurable capabilities of sub-interpreters have changed. They always allow subprocesses ([`subprocess`](https://docs.python.org/3/library/subprocess.html#module-subprocess "subprocess: Subprocess management.")) now, whereas before subprocesses could be optionally disallowed for a sub-interpreter. Instead `os.exec()` can now be disallowed. Disallowing daemon threads is now supported. Disallowing all threads is still allowed, but is never done by default. Note that the optional restrictions are only available through `_Py_NewInterpreterFromConfig()`, which isn’t a public API. They do not affect the main interpreter, nor [`Py_NewInterpreter()`](https://docs.python.org/3/c-api/init.html#c.Py_NewInterpreter "Py_NewInterpreter").
  * [gh-98608](https://github.com/python/cpython/issues/98608): A `_PyInterpreterConfig` has been added and `_Py_NewInterpreter()` has been renamed to `_Py_NewInterpreterFromConfig()`. The “isolated_subinterpreters” argument is now a granular config that captures the previous behavior. Note that this is all “private” API.
  * [gh-96853](https://github.com/python/cpython/issues/96853): `Py_InitializeEx` now correctly calls `PyConfig_Clear` after initializing the interpreter (the omission didn’t cause a memory leak only because none of the dynamically allocated config fields are populated by the wrapper function)
  * [gh-91248](https://github.com/python/cpython/issues/91248): Add [`PyFrame_GetVar()`](https://docs.python.org/3/c-api/frame.html#c.PyFrame_GetVar "PyFrame_GetVar") and [`PyFrame_GetVarString()`](https://docs.python.org/3/c-api/frame.html#c.PyFrame_GetVarString "PyFrame_GetVarString") functions to get a frame variable by its name. Patch by Victor Stinner.