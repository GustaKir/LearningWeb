Title: Cleaning Up DOM Trees in xml.dom.minidom
URL: https://docs.python.org/3/library/xml.dom.minidom.html
Summary: The `unlink()` method in `xml.dom.minidom` allows for early cleanup of a DOM tree by rendering the node and its descendants useless. This method is a specific extension to the DOM API, facilitating management of resources, while Python's garbage collector will handle the cleanup eventually.
---

```

When you are finished with a DOM tree, you may optionally call the `unlink()` method to encourage early cleanup of the now-unneeded objects. `unlink()` is an [`xml.dom.minidom`](https://docs.python.org/3/library/xml.dom.minidom.html#module-xml.dom.minidom "xml.dom.minidom: Minimal Document Object Model \(DOM\) implementation.")-specific extension to the DOM API that renders the node and its descendants essentially useless. Otherwise, Python’s garbage collector will eventually take care of the objects in the tree.
See also 

[Document Object Model (DOM) Level 1 Specification](https://www.w3.org/TR/REC-DOM-Level-1/)
    
The W3C recommendation for the DOM supported by [`xml.dom.minidom`](https://docs.python.org/3/library/xml.dom.minidom.html#module-xml.dom.minidom "xml.dom.minidom: Minimal Document Object Model \(DOM\) implementation.").
## DOM Objects[¶](https://docs.python.org/3/library/xml.dom.minidom.html#dom-objects "Link to this heading")
The definition of the DOM API for Python is given as part of the [`xml.dom`](https://docs.python.org/3/library/xml.dom.html#module-xml.dom "xml.dom: Document Object Model API for Python.") module documentation. This section lists the differences between the API and [`xml.dom.minidom`](https://docs.python.org/3/library/xml.dom.minidom.html#module-xml.dom.minidom "xml.dom.minidom: Minimal Document Object Model \(DOM\) implementation."). 

Node.unlink()[¶](https://docs.python.org/3/library/xml.dom.minidom.html#xml.dom.minidom.Node.unlink "Link to this definition")
    
Break internal references within the DOM so that it will be garbage collected on versions of Python without cyclic GC. Even when cyclic GC is available, using this can make large amounts of memory available sooner, so calling this on DOM objects as soon as they are no longer needed is good practice. This only needs to be called on the `Document` object, but may be called on child nodes to discard children of that node.
You can avoid calling this method explicitly by using the [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement. The following code will automatically unlink _dom_ when the `with` block is exited:
```
with xml.dom.minidom.parse(datasource) as dom:
  ... # Work with dom.