Title: Python 3 Changelog Updates
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This document section highlights recent changes in Python 3, including the addition of `PyImport_AddModuleRef()` for strong references, and the introduction of `PyType_GetDict()` which provides access to the dictionary for type objects, enhancing type manipulation capabilities.
---

Patch by Victor Stinner.
  * [gh-105922](https://github.com/python/cpython/issues/105922): Add [`PyImport_AddModuleRef()`](https://docs.python.org/3/c-api/import.html#c.PyImport_AddModuleRef "PyImport_AddModuleRef"): similar to [`PyImport_AddModule()`](https://docs.python.org/3/c-api/import.html#c.PyImport_AddModule "PyImport_AddModule"), but return a [strong reference](https://docs.python.org/3/glossary.html#term-strong-reference) instead of a [borrowed reference](https://docs.python.org/3/glossary.html#term-borrowed-reference). Patch by Victor Stinner.
  * [gh-105227](https://github.com/python/cpython/issues/105227): The new [`PyType_GetDict()`](https://docs.python.org/3/c-api/type.html#c.PyType_GetDict "PyType_GetDict") provides the dictionary for the given type object that is normally exposed by `cls.__dict__`. Normally it’s sufficient to use [`tp_dict`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_dict "PyTypeObject.tp_dict"), but for the static builtin types `tp_dict` is now always `NULL`. `PyType_GetDict()` provides the correct dict object instead.
  * [gh-105375](https://github.com/python/cpython/issues/105375): Fix a bug in [`PyErr_WarnExplicit()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_WarnExplicit "PyErr_WarnExplicit") where an exception could end up being overwritten if the API failed internally.
  * [gh-105603](https://github.com/python/cpython/issues/105603): We’ve renamed the new (in 3.12) `PyInterpreterConfig.own_gil` to `PyInterpreterConfig.gil` and changed the meaning of the value from “bool” to an integer with supported values of `PyInterpreterConfig_DEFAULT_GIL`, `PyInterpreterConfig_SHARED_GIL`, and `PyInterpreterConfig_OWN_GIL`. The default is “shared”.
  * [gh-105387](https://github.com/python/cpython/issues/105387): In the limited C API version 3.12, [`Py_INCREF()`](https://docs.python.org/3/c-api/refcounting.html#c.Py_INCREF "Py_INCREF") and [`Py_DECREF()`](https://docs.python.org/3/c-api/refcounting.html#c.Py_DECREF "Py_DECREF") functions are now implemented as opaque function calls to hide implementation details. Patch by Victor Stinner.
  * [gh-105396](https://github.com/python/cpython/issues/105396): Deprecate the [`PyImport_ImportModuleNoBlock()`](https://docs.python.org/3/c-api/import.html#c.PyImport_ImportModuleNoBlock "PyImport_ImportModuleNoBlock") function which is just an alias to [`PyImport_ImportModule()`](https://docs.python.org/3/c-api/import.html#c.PyImport_ImportModule "PyImport_ImportModule") since Python 3.3. Patch by Victor Stinner.
  * [gh-103968](https://github.com/python/cpython/issues/103968): [`PyType_FromMetaclass()`](https://docs.python.org/3/c-api/type.html#c.PyType_FromMetaclass "PyType_FromMetaclass") now allows metaclasses with `tp_new` set to `NULL`.
  * [gh-105268](https://github.com/python/cpython/issues/105268): Remove the old private, undocumented and untested `_PyGC_FINALIZED()` macro which was kept for backward compatibility with Python 3.8 and older. Patch by Victor Stinner.
  * [gh-105182](https://github.com/python/cpython/issues/105182): Remove `PyEval_AcquireLock()` and `PyEval_ReleaseLock()` functions, deprecated in Python 3.2. Patch by Victor Stinner.
  * [gh-105182](https://github.com/python/cpython/issues/105182): Remove `PyEval_InitThreads()` and `PyEval_ThreadsInitialized()` functions, deprecated in Python 3.9. Patch by Victor Stinner.
  * [gh-105145](https://github.com/python/cpython/issues/105145): Deprecate old Python initialization functions:
    * [`PySys_ResetWarnOptions()`](https://docs.python.org/3/c-api/sys.html#c.PySys_ResetWarnOptions "PySys_ResetWarnOptions")
    * [`Py_GetExecPrefix()`](https://docs.python.org/3/c-api/init.html#c.Py_GetExecPrefix "Py_GetExecPrefix")
    * [`Py_GetPath()`](https://docs.python.org/3/c-api/init.html#c.Py_GetPath "Py_GetPath")
    * [`Py_GetPrefix()`](https://docs.python.org/3/c-api/init.html#c.Py_GetPrefix "Py_GetPrefix")
    * [`Py_GetProgramFullPath()`](https://docs.python.org/3/c-api/init.html#c.Py_GetProgramFullPath "Py_GetProgramFullPath")
    * [`Py_GetProgramName()`](https://docs.python.org/3/c-api/init.html#c.Py_GetProgramName "Py_GetProgramName")
    * [`Py_GetPythonHome()`](https://docs.python.org/3/c-api/init.html#c.Py_GetPythonHome "Py_GetPythonHome")
Patch by Victor Stinner.
  * [gh-85275](https://github.com/python/cpython/issues/85275): `PyObject_AsCharBuffer()`, `PyObject_AsReadBuffer()`, `PyObject_CheckReadBuffer()`, and `PyObject_AsWriteBuffer()` are removed. Please migrate to new buffer protocol; [`PyObject_GetBuffer()`](https://docs.python.org/3/c-api/buffer.html#c.PyObject_GetBuffer "PyObject_GetBuffer") and [`PyBuffer_Release()`](https://docs.python.org/3/c-api/buffer.html#c.PyBuffer_Release "PyBuffer_Release").
  * [gh-105156](https://github.com/python/cpython/issues/105156): Deprecate the old `Py_UNICODE` and `PY_UNICODE_TYPE` types: use directly the `wchar_t` type instead.