Title: Time String Parsing with strptime
URL: https://docs.python.org/3/library/time.html
Summary: The 'time.strptime' function parses a string representation of time according to a specified format, returning a struct_time object. While additional directives may be available on certain platforms, only those standardized by ANSI C are guaranteed to work. Optional field width and precision specifications can be included but may not be portable.
---

```

Additional directives may be supported on certain platforms, but only the ones listed here have a meaning standardized by ANSI C. To see the full set of format codes supported on your platform, consult the _[strftime(3)](https://manpages.debian.org/strftime\(3\))_ documentation.
On some platforms, an optional field width and precision specification can immediately follow the initial `'%'` of a directive in the following order; this is also not portable. The field width is normally 2 except for `%j` where it is 3. 

time.strptime(_string_[, _format_])[Â¶](https://docs.python.org/3/library/time.html#time.strptime "Link to this definition")
    
Parse a string representing a time according to a format. The return value is a [`struct_time`](https://docs.python.org/3/library/time.html#time.struct_time "time.struct_time") as returned by [`gmtime()`](https://docs.python.org/3/library/time.html#time.gmtime "time.gmtime") or [`localtime()`](https://docs.python.org/3/library/time.html#time.localtime "time.localtime").
The _format_ parameter uses the same directives as those used by [`strftime()`](https://docs.python.org/3/library/time.html#time.strftime "time.strftime"); it defaults to `"%a %b %d %H:%M:%S %Y"` which matches the formatting returned by [`ctime()`](https://docs.python.org/3/library/time.html#time.ctime "time.ctime"). If _string_ cannot be parsed according to _format_ , or if it has excess data after parsing, [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised. The default values used to fill in any missing data when more accurate values cannot be inferred are `(1900, 1, 1, 0, 0, 0, 0, 1, -1)`. Both _string_ and _format_ must be strings.
For example:
>>>```
>>> importtime
>>> time.strptime("30 Nov 00", "%d %b %y")
time.struct_time(tm_year=2000, tm_mon=11, tm_mday=30, tm_hour=0, tm_min=0,
         tm_sec=0, tm_wday=3, tm_yday=335, tm_isdst=-1)