Title: MIMEImage Class in email.mime.image Module
URL: https://docs.python.org/3/library/email.mime.html
Summary: The `MIMEImage` class, part of the `email.mime.image` module, is designed to create MIME message objects for images. It accepts raw image data and automatically includes the appropriate subtype in the Content-Type header if the image format is recognized.
---

_class_ email.mime.image.MIMEImage(__imagedata_ , __subtype =None_, __encoder =email.encoders.encode_base64_, _*_ , _policy =compat32_, _** _params_)[¶](https://docs.python.org/3/library/email.mime.html#email.mime.image.MIMEImage "Link to this definition")
    
Module: [`email.mime.image`](https://docs.python.org/3/library/email.mime.html#module-email.mime.image "email.mime.image")
A subclass of [`MIMENonMultipart`](https://docs.python.org/3/library/email.mime.html#email.mime.nonmultipart.MIMENonMultipart "email.mime.nonmultipart.MIMENonMultipart"), the [`MIMEImage`](https://docs.python.org/3/library/email.mime.html#email.mime.image.MIMEImage "email.mime.image.MIMEImage") class is used to create MIME message objects of major type _image_. __imagedata_ contains the bytes for the raw image data. If this data type can be detected (jpeg, png, gif, tiff, rgb, pbm, pgm, ppm, rast, xbm, bmp, webp, and exr attempted), then the subtype will be automatically included in the _Content-Type_ header. Otherwise you can explicitly specify the image subtype via the __subtype_ argument. If the minor type could not be guessed and __subtype_ was not given, then [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") is raised.
Optional __encoder_ is a callable (i.e. function) which will perform the actual encoding of the image data for transport. This callable takes one argument, which is the [`MIMEImage`](https://docs.python.org/3/library/email.mime.html#email.mime.image.MIMEImage "email.mime.image.MIMEImage") instance. It should use [`get_payload()`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.get_payload "email.message.Message.get_payload") and [`set_payload()`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.set_payload "email.message.Message.set_payload") to change the payload to encoded form. It should also add any _Content-Transfer-Encoding_ or other headers to the message object as necessary. The default encoding is base64. See the [`email.encoders`](https://docs.python.org/3/library/email.encoders.html#module-email.encoders "email.encoders: Encoders for email message payloads.") module for a list of the built-in encoders.
Optional _policy_ argument defaults to [`compat32`](https://docs.python.org/3/library/email.policy.html#email.policy.Compat32 "email.policy.Compat32").
__params_ are passed straight through to the [`MIMEBase`](https://docs.python.org/3/library/email.mime.html#email.mime.base.MIMEBase "email.mime.base.MIMEBase") constructor.
Changed in version 3.6: Added _policy_ keyword-only parameter. 

_class_ email.mime.message.MIMEMessage(__msg_ , __subtype ='rfc822'_, _*_ , _policy =compat32_)[¶](https://docs.python.org/3/library/email.mime.html#email.mime.message.MIMEMessage "Link to this definition")
    
Module: [`email.mime.message`](https://docs.python.org/3/library/email.mime.html#module-email.mime.message "email.mime.message")
A subclass of [`MIMENonMultipart`](https://docs.python.org/3/library/email.mime.html#email.mime.nonmultipart.MIMENonMultipart "email.mime.nonmultipart.MIMENonMultipart"), the [`MIMEMessage`](https://docs.python.org/3/library/email.mime.html#email.mime.message.MIMEMessage "email.mime.message.MIMEMessage") class is used to create MIME objects of main type _message_. __msg_ is used as the payload, and must be an instance of class [`Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "email.message.Message") (or a subclass thereof), otherwise a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") is raised.
Optional __subtype_ sets the subtype of the message; it defaults to _rfc822_.
Optional _policy_ argument defaults to [`compat32`](https://docs.python.org/3/library/email.policy.html#email.policy.Compat32 "email.policy.Compat32").
Changed in version 3.6: Added _policy_ keyword-only parameter.