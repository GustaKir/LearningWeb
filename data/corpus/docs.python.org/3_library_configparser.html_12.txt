Title: ConfigParser Module Updates and 'read_file' Method
URL: https://docs.python.org/3/library/configparser.html
Summary: This document segment outlines updates to the ConfigParser module in Python, detailing changes across multiple versions. Key updates include the addition of the _encoding_ parameter in version 3.2, support for path-like objects in _filenames_ from 3.6.1, and acceptance of bytes objects in version 3.7. It also describes the 'read_file()' method, which reads and parses configuration data from an iterable yielding Unicode strings.
---

```

Changed in version 3.2: Added the _encoding_ parameter. Previously, all files were read using the default encoding for [`open()`](https://docs.python.org/3/library/functions.html#open "open").
Changed in version 3.6.1: The _filenames_ parameter accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object).
Changed in version 3.7: The _filenames_ parameter accepts a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") object. 

read_file(_f_ , _source =None_)[¶](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.read_file "Link to this definition")
    
Read and parse configuration data from _f_ which must be an iterable yielding Unicode strings (for example files opened in text mode).
Optional argument _source_ specifies the name of the file being read. If not given and _f_ has a `name` attribute, that is used for _source_ ; the default is `'<???>'`.
Added in version 3.2: Replaces `readfp()`. 

read_string(_string_ , _source ='<string>'_)[¶](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.read_string "Link to this definition")
    
Parse configuration data from a string.
Optional argument _source_ specifies a context-specific name of the string passed. If not given, `'<string>'` is used. This should commonly be a filesystem path or a URL.
Added in version 3.2. 

read_dict(_dictionary_ , _source ='<dict>'_)[¶](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.read_dict "Link to this definition")
    
Load configuration from any object that provides a dict-like `items()` method. Keys are section names, values are dictionaries with keys and values that should be present in the section. If the used dictionary type preserves order, sections and their keys will be added in order. Values are automatically converted to strings.
Optional argument _source_ specifies a context-specific name of the dictionary passed. If not given, `<dict>` is used.
This method can be used to copy state between parsers.
Added in version 3.2. 

get(_section_ , _option_ , _*_ , _raw=False_ , _vars=None_[, _fallback_])[¶](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.get "Link to this definition")
    
Get an _option_ value for the named _section_. If _vars_ is provided, it must be a dictionary. The _option_ is looked up in _vars_ (if provided), _section_ , and in _DEFAULTSECT_ in that order. If the key is not found and _fallback_ is provided, it is used as a fallback value. `None` can be provided as a _fallback_ value.
All the `'%'` interpolations are expanded in the return values, unless the _raw_ argument is true. Values for interpolation keys are looked up in the same manner as the option.
Changed in version 3.2: Arguments _raw_ , _vars_ and _fallback_ are keyword only to protect users from trying to use the third argument as the _fallback_ fallback (especially when using the mapping protocol). 

getint(_section_ , _option_ , _*_ , _raw=False_ , _vars=None_[, _fallback_])[¶](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.getint "Link to this definition")
    
A convenience method which coerces the _option_ in the specified _section_ to an integer. See [`get()`](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.get "configparser.ConfigParser.get") for explanation of _raw_ , _vars_ and _fallback_. 

getfloat(_section_ , _option_ , _*_ , _raw=False_ , _vars=None_[, _fallback_])[¶](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.getfloat "Link to this definition")
    
A convenience method which coerces the _option_ in the specified _section_ to a floating-point number. See [`get()`](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.get "configparser.ConfigParser.get") for explanation of _raw_ , _vars_ and _fallback_. 

getboolean(_section_ , _option_ , _*_ , _raw=False_ , _vars=None_[, _fallback_])[¶](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.getboolean "Link to this definition")
    
A convenience method which coerces the _option_ in the specified _section_ to a Boolean value. Note that the accepted values for the option are `'1'`, `'yes'`, `'true'`, and `'on'`, which cause this method to return `True`, and `'0'`, `'no'`, `'false'`, and `'off'`, which cause it to return `False`. These string values are checked in a case-insensitive manner. Any other value will cause it to raise [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError"). See [`get()`](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.get "configparser.ConfigParser.get") for explanation of _raw_ , _vars_ and _fallback_. 

items(_raw =False_, _vars =None_)[¶](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.items "Link to this definition")