Title: Setting Parameters in the Content-Type Header
URL: https://docs.python.org/3/library/email.compat32-message.html
Summary: The `set_param` method allows you to set a parameter in the 'Content-Type' header of an email message, replacing existing values if necessary. It defaults to 'text/plain' if the 'Content-Type' hasn't been defined. This method is considered legacy, with functionality now handled by the _params_ property of the EmailMessage class.
---

```

In any case, the parameter value (either the returned string, or the `VALUE` item in the 3-tuple) is always unquoted, unless _unquote_ is set to `False`.
This is a legacy method. On the `EmailMessage` class its functionality is replaced by the _params_ property of the individual header objects returned by the header access methods. 

set_param(_param_ , _value_ , _header ='Content-Type'_, _requote =True_, _charset =None_, _language =''_, _replace =False_)[¶](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.set_param "Link to this definition")
    
Set a parameter in the _Content-Type_ header. If the parameter already exists in the header, its value will be replaced with _value_. If the _Content-Type_ header as not yet been defined for this message, it will be set to _text/plain_ and the new parameter value will be appended as per [**RFC 2045**](https://datatracker.ietf.org/doc/html/rfc2045.html).
Optional _header_ specifies an alternative header to _Content-Type_ , and all parameters will be quoted as necessary unless optional _requote_ is `False` (the default is `True`).
If optional _charset_ is specified, the parameter will be encoded according to [**RFC 2231**](https://datatracker.ietf.org/doc/html/rfc2231.html). Optional _language_ specifies the RFC 2231 language, defaulting to the empty string. Both _charset_ and _language_ should be strings.
If _replace_ is `False` (the default) the header is moved to the end of the list of headers. If _replace_ is `True`, the header will be updated in place.
Changed in version 3.4: `replace` keyword was added. 

del_param(_param_ , _header ='content-type'_, _requote =True_)[¶](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.del_param "Link to this definition")
    
Remove the given parameter completely from the _Content-Type_ header. The header will be re-written in place without the parameter or its value. All values will be quoted as necessary unless _requote_ is `False` (the default is `True`). Optional _header_ specifies an alternative to _Content-Type_. 

set_type(_type_ , _header ='Content-Type'_, _requote =True_)[¶](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.set_type "Link to this definition")
    
Set the main type and subtype for the _Content-Type_ header. _type_ must be a string in the form _maintype/subtype_ , otherwise a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised.
This method replaces the _Content-Type_ header, keeping all the parameters in place. If _requote_ is `False`, this leaves the existing header’s quoting as is, otherwise the parameters will be quoted (the default).
An alternative header can be specified in the _header_ argument. When the _Content-Type_ header is set a _MIME-Version_ header is also added.
This is a legacy method. On the `EmailMessage` class its functionality is replaced by the `make_` and `add_` methods. 

get_filename(_failobj =None_)[¶](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.get_filename "Link to this definition")
    
Return the value of the `filename` parameter of the _Content-Disposition_ header of the message. If the header does not have a `filename` parameter, this method falls back to looking for the `name` parameter on the _Content-Type_ header. If neither is found, or the header is missing, then _failobj_ is returned. The returned string will always be unquoted as per [`email.utils.unquote()`](https://docs.python.org/3/library/email.utils.html#email.utils.unquote "email.utils.unquote"). 

get_boundary(_failobj =None_)[¶](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.get_boundary "Link to this definition")
    
Return the value of the `boundary` parameter of the _Content-Type_ header of the message, or _failobj_ if either the header is missing, or has no `boundary` parameter. The returned string will always be unquoted as per [`email.utils.unquote()`](https://docs.python.org/3/library/email.utils.html#email.utils.unquote "email.utils.unquote").