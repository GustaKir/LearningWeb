Title: Glossary Terms: Free Variables and Complex Numbers
URL: https://docs.python.org/3/glossary.html
Summary: This section clarifies the term 'free variable' as often used interchangeably with 'closure variables' due to specific attributes in Python. It also introduces complex numbers, defined as sums of real and imaginary parts, and notes Python's built-in support for this numeric type.
---

```

Due to the [`codeobject.co_freevars`](https://docs.python.org/3/reference/datamodel.html#codeobject.co_freevars "codeobject.co_freevars") attribute (which, despite its name, only includes the names of closure variables rather than listing all referenced free variables), the more general [free variable](https://docs.python.org/3/glossary.html#term-free-variable) term is sometimes used even when the intended meaning is to refer specifically to closure variables. 

complex number[¶](https://docs.python.org/3/glossary.html#term-complex-number "Link to this term")
    
An extension of the familiar real number system in which all numbers are expressed as a sum of a real part and an imaginary part. Imaginary numbers are real multiples of the imaginary unit (the square root of `-1`), often written `i` in mathematics or `j` in engineering. Python has built-in support for complex numbers, which are written with this latter notation; the imaginary part is written with a `j` suffix, e.g., `3+1j`. To get access to complex equivalents of the [`math`](https://docs.python.org/3/library/math.html#module-math "math: Mathematical functions \(sin\(\) etc.\).") module, use [`cmath`](https://docs.python.org/3/library/cmath.html#module-cmath "cmath: Mathematical functions for complex numbers."). Use of complex numbers is a fairly advanced mathematical feature. If you’re not aware of a need for them, it’s almost certain you can safely ignore them. 

context[¶](https://docs.python.org/3/glossary.html#term-context "Link to this term")
    
This term has different meanings depending on where and how it is used. Some common meanings:
  * The temporary state or environment established by a [context manager](https://docs.python.org/3/glossary.html#term-context-manager) via a [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement.
  * The collection of key­value bindings associated with a particular [`contextvars.Context`](https://docs.python.org/3/library/contextvars.html#contextvars.Context "contextvars.Context") object and accessed via [`ContextVar`](https://docs.python.org/3/library/contextvars.html#contextvars.ContextVar "contextvars.ContextVar") objects. Also see [context variable](https://docs.python.org/3/glossary.html#term-context-variable).
  * A [`contextvars.Context`](https://docs.python.org/3/library/contextvars.html#contextvars.Context "contextvars.Context") object. Also see [current context](https://docs.python.org/3/glossary.html#term-current-context).



context management protocol[¶](https://docs.python.org/3/glossary.html#term-context-management-protocol "Link to this term")
    
The [`__enter__()`](https://docs.python.org/3/reference/datamodel.html#object.__enter__ "object.__enter__") and [`__exit__()`](https://docs.python.org/3/reference/datamodel.html#object.__exit__ "object.__exit__") methods called by the [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement. See [**PEP 343**](https://peps.python.org/pep-0343/). 

context manager[¶](https://docs.python.org/3/glossary.html#term-context-manager "Link to this term")
    
An object which implements the [context management protocol](https://docs.python.org/3/glossary.html#term-context-management-protocol) and controls the environment seen in a [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement. See [**PEP 343**](https://peps.python.org/pep-0343/). 

context variable[¶](https://docs.python.org/3/glossary.html#term-context-variable "Link to this term")
    
A variable whose value depends on which context is the [current context](https://docs.python.org/3/glossary.html#term-current-context). Values are accessed via [`contextvars.ContextVar`](https://docs.python.org/3/library/contextvars.html#contextvars.ContextVar "contextvars.ContextVar") objects. Context variables are primarily used to isolate state between concurrent asynchronous tasks. 

contiguous[¶](https://docs.python.org/3/glossary.html#term-contiguous "Link to this term")
    
A buffer is considered contiguous exactly if it is either _C-contiguous_ or _Fortran contiguous_. Zero-dimensional buffers are C and Fortran contiguous. In one-dimensional arrays, the items must be laid out in memory next to each other, in order of increasing indexes starting from zero. In multidimensional C-contiguous arrays, the last index varies the fastest when visiting items in order of memory address. However, in Fortran contiguous arrays, the first index varies the fastest. 

coroutine[¶](https://docs.python.org/3/glossary.html#term-coroutine "Link to this term")
    
Coroutines are a more generalized form of subroutines. Subroutines are entered at one point and exited at another point. Coroutines can be entered, exited, and resumed at many different points. They can be implemented with the [`async def`](https://docs.python.org/3/reference/compound_stmts.html#async-def) statement. See also [**PEP 492**](https://peps.python.org/pep-0492/).