Title: Keyword Arguments in Python
URL: https://docs.python.org/3/glossary.html
Summary: This section explains the use of the _var-keyword_ for defining functions that accept arbitrary keyword arguments, marked with '**'. It also covers the possibility of specifying both optional and required arguments, along with default values. Further references include related glossary entries, FAQs on arguments vs parameters, and relevant Python PEP.
---

```

  * _var-keyword_ : specifies that arbitrarily many keyword arguments can be provided (in addition to any keyword arguments already accepted by other parameters). Such a parameter can be defined by prepending the parameter name with `**`, for example _kwargs_ in the example above.


Parameters can specify both optional and required arguments, as well as default values for some optional arguments.
See also the [argument](https://docs.python.org/3/glossary.html#term-argument) glossary entry, the FAQ question on [the difference between arguments and parameters](https://docs.python.org/3/faq/programming.html#faq-argument-vs-parameter), the [`inspect.Parameter`](https://docs.python.org/3/library/inspect.html#inspect.Parameter "inspect.Parameter") class, the [Function definitions](https://docs.python.org/3/reference/compound_stmts.html#function) section, and [**PEP 362**](https://peps.python.org/pep-0362/). 

path entry[¶](https://docs.python.org/3/glossary.html#term-path-entry "Link to this term")
    
A single location on the [import path](https://docs.python.org/3/glossary.html#term-import-path) which the [path based finder](https://docs.python.org/3/glossary.html#term-path-based-finder) consults to find modules for importing. 

path entry finder[¶](https://docs.python.org/3/glossary.html#term-path-entry-finder "Link to this term")
    
A [finder](https://docs.python.org/3/glossary.html#term-finder) returned by a callable on [`sys.path_hooks`](https://docs.python.org/3/library/sys.html#sys.path_hooks "sys.path_hooks") (i.e. a [path entry hook](https://docs.python.org/3/glossary.html#term-path-entry-hook)) which knows how to locate modules given a [path entry](https://docs.python.org/3/glossary.html#term-path-entry).
See [`importlib.abc.PathEntryFinder`](https://docs.python.org/3/library/importlib.html#importlib.abc.PathEntryFinder "importlib.abc.PathEntryFinder") for the methods that path entry finders implement. 

path entry hook[¶](https://docs.python.org/3/glossary.html#term-path-entry-hook "Link to this term")
    
A callable on the [`sys.path_hooks`](https://docs.python.org/3/library/sys.html#sys.path_hooks "sys.path_hooks") list which returns a [path entry finder](https://docs.python.org/3/glossary.html#term-path-entry-finder) if it knows how to find modules on a specific [path entry](https://docs.python.org/3/glossary.html#term-path-entry). 

path based finder[¶](https://docs.python.org/3/glossary.html#term-path-based-finder "Link to this term")
    
One of the default [meta path finders](https://docs.python.org/3/glossary.html#term-meta-path-finder) which searches an [import path](https://docs.python.org/3/glossary.html#term-import-path) for modules. 

path-like object[¶](https://docs.python.org/3/glossary.html#term-path-like-object "Link to this term")
    
An object representing a file system path. A path-like object is either a [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") or [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") object representing a path, or an object implementing the [`os.PathLike`](https://docs.python.org/3/library/os.html#os.PathLike "os.PathLike") protocol. An object that supports the [`os.PathLike`](https://docs.python.org/3/library/os.html#os.PathLike "os.PathLike") protocol can be converted to a [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") or [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") file system path by calling the [`os.fspath()`](https://docs.python.org/3/library/os.html#os.fspath "os.fspath") function; [`os.fsdecode()`](https://docs.python.org/3/library/os.html#os.fsdecode "os.fsdecode") and [`os.fsencode()`](https://docs.python.org/3/library/os.html#os.fsencode "os.fsencode") can be used to guarantee a [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") or [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") result instead, respectively. Introduced by [**PEP 519**](https://peps.python.org/pep-0519/). 

PEP[¶](https://docs.python.org/3/glossary.html#term-PEP "Link to this term")
    
Python Enhancement Proposal. A PEP is a design document providing information to the Python community, or describing a new feature for Python or its processes or environment. PEPs should provide a concise technical specification and a rationale for proposed features.
PEPs are intended to be the primary mechanisms for proposing major new features, for collecting community input on an issue, and for documenting the design decisions that have gone into Python. The PEP author is responsible for building consensus within the community and documenting dissenting opinions.
See [**PEP 1**](https://peps.python.org/pep-0001/).