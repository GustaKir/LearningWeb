Title: urllib.parse.quote function
URL: https://docs.python.org/3/library/urllib.parse.html
Summary: The `urllib.parse.quote` function replaces special characters in a given string using the `%_xx_` escape, primarily for quoting the path section of a URL. It accepts an optional `_safe` parameter to specify additional ASCII characters that should remain unquoted, defaulting to `'/'`. The function supports both string and byte objects and was updated in version 3.7 to align with RFC 3986, allowing the inclusion of `~` as an unreserved character.
---

urllib.parse.quote(_string_ , _safe ='/'_, _encoding =None_, _errors =None_)[¶](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote "Link to this definition")
    
Replace special characters in _string_ using the `%_xx_`escape. Letters, digits, and the characters`'_.-~'` are never quoted. By default, this function is intended for quoting the path section of a URL. The optional _safe_ parameter specifies additional ASCII characters that should not be quoted — its default value is `'/'`.
_string_ may be either a [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") or a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") object.
Changed in version 3.7: Moved from [**RFC 2396**](https://datatracker.ietf.org/doc/html/rfc2396.html) to [**RFC 3986**](https://datatracker.ietf.org/doc/html/rfc3986.html) for quoting URL strings. “~” is now included in the set of unreserved characters.
The optional _encoding_ and _errors_ parameters specify how to deal with non-ASCII characters, as accepted by the [`str.encode()`](https://docs.python.org/3/library/stdtypes.html#str.encode "str.encode") method. _encoding_ defaults to `'utf-8'`. _errors_ defaults to `'strict'`, meaning unsupported characters raise a [`UnicodeEncodeError`](https://docs.python.org/3/library/exceptions.html#UnicodeEncodeError "UnicodeEncodeError"). _encoding_ and _errors_ must not be supplied if _string_ is a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes"), or a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") is raised.
Note that `quote(string, safe, encoding, errors)` is equivalent to `quote_from_bytes(string.encode(encoding, errors), safe)`.
Example: `quote('/El Niño/')` yields `'/El%20Ni%C3%B1o/'`. 

urllib.parse.quote_plus(_string_ , _safe =''_, _encoding =None_, _errors =None_)[¶](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote_plus "Link to this definition")
    
Like [`quote()`](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote "urllib.parse.quote"), but also replace spaces with plus signs, as required for quoting HTML form values when building up a query string to go into a URL. Plus signs in the original string are escaped unless they are included in _safe_. It also does not have _safe_ default to `'/'`.
Example: `quote_plus('/El Niño/')` yields `'%2FEl+Ni%C3%B1o%2F'`. 

urllib.parse.quote_from_bytes(_bytes_ , _safe ='/'_)[¶](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote_from_bytes "Link to this definition")
    
Like [`quote()`](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote "urllib.parse.quote"), but accepts a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") object rather than a [`str`](https://docs.python.org/3/library/stdtypes.html#str "str"), and does not perform string-to-bytes encoding.
Example: `quote_from_bytes(b'a&\xef')` yields `'a%26%EF'`. 

urllib.parse.unquote(_string_ , _encoding ='utf-8'_, _errors ='replace'_)[¶](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.unquote "Link to this definition")
    
Replace `%_xx_`escapes with their single-character equivalent. The optional _encoding_ and _errors_ parameters specify how to decode percent-encoded sequences into Unicode characters, as accepted by the [`bytes.decode()`](https://docs.python.org/3/library/stdtypes.html#bytes.decode "bytes.decode") method.
_string_ may be either a [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") or a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") object.
_encoding_ defaults to `'utf-8'`. _errors_ defaults to `'replace'`, meaning invalid sequences are replaced by a placeholder character.
Example: `unquote('/El%20Ni%C3%B1o/')` yields `'/El Niño/'`.
Changed in version 3.9: _string_ parameter supports bytes and str objects (previously only str). 

urllib.parse.unquote_plus(_string_ , _encoding ='utf-8'_, _errors ='replace'_)[¶](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.unquote_plus "Link to this definition")
    
Like [`unquote()`](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.unquote "urllib.parse.unquote"), but also replace plus signs with spaces, as required for unquoting HTML form values.
_string_ must be a [`str`](https://docs.python.org/3/library/stdtypes.html#str "str").
Example: `unquote_plus('/El+Ni%C3%B1o/')` yields `'/El Niño/'`.