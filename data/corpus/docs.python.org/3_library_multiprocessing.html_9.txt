Title: Process Authentication Key in Multiprocessing
URL: https://docs.python.org/3/library/multiprocessing.html
Summary: The authentication key is a byte string assigned to the main process upon initialization of the multiprocessing module. Each Process object inherits this key from its parent but can have it changed by setting the authkey attribute.
---

authkey[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.authkey "Link to this definition")
    
The process’s authentication key (a byte string).
When [`multiprocessing`](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing "multiprocessing: Process-based parallelism.") is initialized the main process is assigned a random string using [`os.urandom()`](https://docs.python.org/3/library/os.html#os.urandom "os.urandom").
When a [`Process`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process "multiprocessing.Process") object is created, it will inherit the authentication key of its parent process, although this may be changed by setting [`authkey`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.authkey "multiprocessing.Process.authkey") to another byte string.
See [Authentication keys](https://docs.python.org/3/library/multiprocessing.html#multiprocessing-auth-keys). 

sentinel[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.sentinel "Link to this definition")
    
A numeric handle of a system object which will become “ready” when the process ends.
You can use this value if you want to wait on several events at once using [`multiprocessing.connection.wait()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.connection.wait "multiprocessing.connection.wait"). Otherwise calling [`join()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.join "multiprocessing.Process.join") is simpler.
On Windows, this is an OS handle usable with the `WaitForSingleObject` and `WaitForMultipleObjects` family of API calls. On POSIX, this is a file descriptor usable with primitives from the [`select`](https://docs.python.org/3/library/select.html#module-select "select: Wait for I/O completion on multiple streams.") module.
Added in version 3.3. 

terminate()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.terminate "Link to this definition")
    
Terminate the process. On POSIX this is done using the [`SIGTERM`](https://docs.python.org/3/library/signal.html#signal.SIGTERM "signal.SIGTERM") signal; on Windows `TerminateProcess()` is used. Note that exit handlers and finally clauses, etc., will not be executed.
Note that descendant processes of the process will _not_ be terminated – they will simply become orphaned.
Warning
If this method is used when the associated process is using a pipe or queue then the pipe or queue is liable to become corrupted and may become unusable by other process. Similarly, if the process has acquired a lock or semaphore etc. then terminating it is liable to cause other processes to deadlock. 

kill()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.kill "Link to this definition")
    
Same as [`terminate()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.terminate "multiprocessing.Process.terminate") but using the `SIGKILL` signal on POSIX.
Added in version 3.7. 

close()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.close "Link to this definition")
    
Close the [`Process`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process "multiprocessing.Process") object, releasing all resources associated with it. [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised if the underlying process is still running. Once [`close()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.close "multiprocessing.Process.close") returns successfully, most other methods and attributes of the [`Process`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process "multiprocessing.Process") object will raise [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError").
Added in version 3.7.
Note that the [`start()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.start "multiprocessing.Process.start"), [`join()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.join "multiprocessing.Process.join"), [`is_alive()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.is_alive "multiprocessing.Process.is_alive"), [`terminate()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.terminate "multiprocessing.Process.terminate") and [`exitcode`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process.exitcode "multiprocessing.Process.exitcode") methods should only be called by the process that created the process object.
Example usage of some of the methods of [`Process`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Process "multiprocessing.Process"):
>>>