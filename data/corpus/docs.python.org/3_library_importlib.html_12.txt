Title: importlib.machinery.BuiltinImporter Class
URL: https://docs.python.org/3/library/importlib.html
Summary: The BuiltinImporter class is an importer for built-in modules in Python, listed in sys.builtin_module_names. It implements the MetaPathFinder and InspectLoader ABCs, providing only class methods to avoid the need for instantiation. Notably, it was updated in version 3.5 to implement Loader.create_module() and Loader.exec_module() as part of PEP 489.
---

_class_ importlib.machinery.BuiltinImporter[¶](https://docs.python.org/3/library/importlib.html#importlib.machinery.BuiltinImporter "Link to this definition")
    
An [importer](https://docs.python.org/3/glossary.html#term-importer) for built-in modules. All known built-in modules are listed in [`sys.builtin_module_names`](https://docs.python.org/3/library/sys.html#sys.builtin_module_names "sys.builtin_module_names"). This class implements the [`importlib.abc.MetaPathFinder`](https://docs.python.org/3/library/importlib.html#importlib.abc.MetaPathFinder "importlib.abc.MetaPathFinder") and [`importlib.abc.InspectLoader`](https://docs.python.org/3/library/importlib.html#importlib.abc.InspectLoader "importlib.abc.InspectLoader") ABCs.
Only class methods are defined by this class to alleviate the need for instantiation.
Changed in version 3.5: As part of [**PEP 489**](https://peps.python.org/pep-0489/), the builtin importer now implements `Loader.create_module()` and `Loader.exec_module()` 

_class_ importlib.machinery.FrozenImporter[¶](https://docs.python.org/3/library/importlib.html#importlib.machinery.FrozenImporter "Link to this definition")
    
An [importer](https://docs.python.org/3/glossary.html#term-importer) for frozen modules. This class implements the [`importlib.abc.MetaPathFinder`](https://docs.python.org/3/library/importlib.html#importlib.abc.MetaPathFinder "importlib.abc.MetaPathFinder") and [`importlib.abc.InspectLoader`](https://docs.python.org/3/library/importlib.html#importlib.abc.InspectLoader "importlib.abc.InspectLoader") ABCs.
Only class methods are defined by this class to alleviate the need for instantiation.
Changed in version 3.4: Gained `create_module()` and `exec_module()` methods. 

_class_ importlib.machinery.WindowsRegistryFinder[¶](https://docs.python.org/3/library/importlib.html#importlib.machinery.WindowsRegistryFinder "Link to this definition")
    
[Finder](https://docs.python.org/3/glossary.html#term-finder) for modules declared in the Windows registry. This class implements the [`importlib.abc.MetaPathFinder`](https://docs.python.org/3/library/importlib.html#importlib.abc.MetaPathFinder "importlib.abc.MetaPathFinder") ABC.
Only class methods are defined by this class to alleviate the need for instantiation.
Added in version 3.3.
Deprecated since version 3.6: Use [`site`](https://docs.python.org/3/library/site.html#module-site "site: Module responsible for site-specific configuration.") configuration instead. Future versions of Python may not enable this finder by default. 

_class_ importlib.machinery.PathFinder[¶](https://docs.python.org/3/library/importlib.html#importlib.machinery.PathFinder "Link to this definition")
    
A [Finder](https://docs.python.org/3/glossary.html#term-finder) for [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path") and package `__path__` attributes. This class implements the [`importlib.abc.MetaPathFinder`](https://docs.python.org/3/library/importlib.html#importlib.abc.MetaPathFinder "importlib.abc.MetaPathFinder") ABC.
Only class methods are defined by this class to alleviate the need for instantiation. 

_classmethod_ find_spec(_fullname_ , _path =None_, _target =None_)[¶](https://docs.python.org/3/library/importlib.html#importlib.machinery.PathFinder.find_spec "Link to this definition")
    
Class method that attempts to find a [spec](https://docs.python.org/3/glossary.html#term-module-spec) for the module specified by _fullname_ on [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path") or, if defined, on _path_. For each path entry that is searched, [`sys.path_importer_cache`](https://docs.python.org/3/library/sys.html#sys.path_importer_cache "sys.path_importer_cache") is checked. If a non-false object is found then it is used as the [path entry finder](https://docs.python.org/3/glossary.html#term-path-entry-finder) to look for the module being searched for. If no entry is found in [`sys.path_importer_cache`](https://docs.python.org/3/library/sys.html#sys.path_importer_cache "sys.path_importer_cache"), then [`sys.path_hooks`](https://docs.python.org/3/library/sys.html#sys.path_hooks "sys.path_hooks") is searched for a finder for the path entry and, if found, is stored in [`sys.path_importer_cache`](https://docs.python.org/3/library/sys.html#sys.path_importer_cache "sys.path_importer_cache") along with being queried about the module. If no finder is ever found then `None` is both stored in the cache and returned.
Added in version 3.4.
Changed in version 3.5: If the current working directory – represented by an empty string – is no longer valid then `None` is returned but no value is cached in [`sys.path_importer_cache`](https://docs.python.org/3/library/sys.html#sys.path_importer_cache "sys.path_importer_cache").