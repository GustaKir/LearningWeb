Title: Defining Derived Enumerations in Python
URL: https://docs.python.org/3/howto/enum.html
Summary: This section explains how to create derived enumerations, like `FloatEnum`, by mixing in types such as `float`. It outlines essential rules for subclassing `Enum`, including the order of mix-in types and the necessity for mix-in types to be subclassable, citing examples like `bool` and `range` that cannot be used.
---

```

This demonstrates how similar derived enumerations can be defined; for example a `FloatEnum` that mixes in [`float`](https://docs.python.org/3/library/functions.html#float "float") instead of [`int`](https://docs.python.org/3/library/functions.html#int "int").
Some rules:
  1. When subclassing [`Enum`](https://docs.python.org/3/library/enum.html#enum.Enum "enum.Enum"), mix-in types must appear before the [`Enum`](https://docs.python.org/3/library/enum.html#enum.Enum "enum.Enum") class itself in the sequence of bases, as in the [`IntEnum`](https://docs.python.org/3/library/enum.html#enum.IntEnum "enum.IntEnum") example above.
  2. Mix-in types must be subclassable. For example, [`bool`](https://docs.python.org/3/library/functions.html#bool "bool") and [`range`](https://docs.python.org/3/library/stdtypes.html#range "range") are not subclassable and will throw an error during Enum creation if used as the mix-in type.
  3. While [`Enum`](https://docs.python.org/3/library/enum.html#enum.Enum "enum.Enum") can have members of any type, once you mix in an additional type, all the members must have values of that type, e.g. [`int`](https://docs.python.org/3/library/functions.html#int "int") above. This restriction does not apply to mix-ins which only add methods and don’t specify another type.
  4. When another data type is mixed in, the [`value`](https://docs.python.org/3/library/enum.html#enum.Enum.value "enum.Enum.value") attribute is _not the same_ as the enum member itself, although it is equivalent and will compare equal.
  5. A `data type` is a mixin that defines [`__new__()`](https://docs.python.org/3/reference/datamodel.html#object.__new__ "object.__new__"), or a [`dataclass`](https://docs.python.org/3/library/dataclasses.html#dataclasses.dataclass "dataclasses.dataclass")
  6. %-style formatting: `%s` and `%r` call the [`Enum`](https://docs.python.org/3/library/enum.html#enum.Enum "enum.Enum") class’s [`__str__()`](https://docs.python.org/3/reference/datamodel.html#object.__str__ "object.__str__") and [`__repr__()`](https://docs.python.org/3/reference/datamodel.html#object.__repr__ "object.__repr__") respectively; other codes (such as `%i` or `%h` for IntEnum) treat the enum member as its mixed-in type.
  7. [Formatted string literals](https://docs.python.org/3/reference/lexical_analysis.html#f-strings), [`str.format()`](https://docs.python.org/3/library/stdtypes.html#str.format "str.format"), and [`format()`](https://docs.python.org/3/library/functions.html#format "format") will use the enum’s [`__str__()`](https://docs.python.org/3/reference/datamodel.html#object.__str__ "object.__str__") method.


Note
Because [`IntEnum`](https://docs.python.org/3/library/enum.html#enum.IntEnum "enum.IntEnum"), [`IntFlag`](https://docs.python.org/3/library/enum.html#enum.IntFlag "enum.IntFlag"), and [`StrEnum`](https://docs.python.org/3/library/enum.html#enum.StrEnum "enum.StrEnum") are designed to be drop-in replacements for existing constants, their [`__str__()`](https://docs.python.org/3/reference/datamodel.html#object.__str__ "object.__str__") method has been reset to their data types’ [`__str__()`](https://docs.python.org/3/reference/datamodel.html#object.__str__ "object.__str__") method.
## When to use [`__new__()`](https://docs.python.org/3/reference/datamodel.html#object.__new__ "object.__new__") vs. [`__init__()`](https://docs.python.org/3/reference/datamodel.html#object.__init__ "object.__init__")[¶](https://docs.python.org/3/howto/enum.html#when-to-use-new-vs-init "Link to this heading")
[`__new__()`](https://docs.python.org/3/reference/datamodel.html#object.__new__ "object.__new__") must be used whenever you want to customize the actual value of the [`Enum`](https://docs.python.org/3/library/enum.html#enum.Enum "enum.Enum") member. Any other modifications may go in either [`__new__()`](https://docs.python.org/3/reference/datamodel.html#object.__new__ "object.__new__") or [`__init__()`](https://docs.python.org/3/reference/datamodel.html#object.__init__ "object.__init__"), with [`__init__()`](https://docs.python.org/3/reference/datamodel.html#object.__init__ "object.__init__") being preferred.
For example, if you want to pass several items to the constructor, but only want one of them to be the value:
>>>```
>>> classCoordinate(bytes, Enum):
... """
...   Coordinate with binary codes that can be indexed by the int code.
...   """
...   def__new__(cls, value, label, unit):
...     obj = bytes.__new__(cls, [value])
...     obj._value_ = value
...     obj.label = label
...     obj.unit = unit
...     return obj
...   PX = (0, 'P.X', 'km')
...   PY = (1, 'P.Y', 'km')
...   VX = (2, 'V.X', 'km/s')
...   VY = (3, 'V.Y', 'km/s')
...
>>> print(Coordinate['PY'])
Coordinate.PY
>>> print(Coordinate(3))
Coordinate.VY