Title: shutil.copytree: Recursively Copy Directory Trees
URL: https://docs.python.org/3/library/shutil.html
Summary: The `shutil.copytree` function recursively copies an entire directory tree from the source (_src_) to the destination (_dst_) and returns the destination directory. It creates all necessary intermediate directories and can copy permissions and timestamps. Options include handling of symbolic links, file copy method, and ignoring certain files.
---

shutil.copytree(_src_ , _dst_ , _symlinks =False_, _ignore =None_, _copy_function =copy2_, _ignore_dangling_symlinks =False_, _dirs_exist_ok =False_)[¶](https://docs.python.org/3/library/shutil.html#shutil.copytree "Link to this definition")
    
Recursively copy an entire directory tree rooted at _src_ to a directory named _dst_ and return the destination directory. All intermediate directories needed to contain _dst_ will also be created by default.
Permissions and times of directories are copied with [`copystat()`](https://docs.python.org/3/library/shutil.html#shutil.copystat "shutil.copystat"), individual files are copied using [`copy2()`](https://docs.python.org/3/library/shutil.html#shutil.copy2 "shutil.copy2").
If _symlinks_ is true, symbolic links in the source tree are represented as symbolic links in the new tree and the metadata of the original links will be copied as far as the platform allows; if false or omitted, the contents and metadata of the linked files are copied to the new tree.
When _symlinks_ is false, if the file pointed to by the symlink doesn’t exist, an exception will be added in the list of errors raised in an [`Error`](https://docs.python.org/3/library/shutil.html#shutil.Error "shutil.Error") exception at the end of the copy process. You can set the optional _ignore_dangling_symlinks_ flag to true if you want to silence this exception. Notice that this option has no effect on platforms that don’t support [`os.symlink()`](https://docs.python.org/3/library/os.html#os.symlink "os.symlink").
If _ignore_ is given, it must be a callable that will receive as its arguments the directory being visited by [`copytree()`](https://docs.python.org/3/library/shutil.html#shutil.copytree "shutil.copytree"), and a list of its contents, as returned by [`os.listdir()`](https://docs.python.org/3/library/os.html#os.listdir "os.listdir"). Since [`copytree()`](https://docs.python.org/3/library/shutil.html#shutil.copytree "shutil.copytree") is called recursively, the _ignore_ callable will be called once for each directory that is copied. The callable must return a sequence of directory and file names relative to the current directory (i.e. a subset of the items in its second argument); these names will then be ignored in the copy process. [`ignore_patterns()`](https://docs.python.org/3/library/shutil.html#shutil.ignore_patterns "shutil.ignore_patterns") can be used to create such a callable that ignores names based on glob-style patterns.
If exception(s) occur, an [`Error`](https://docs.python.org/3/library/shutil.html#shutil.Error "shutil.Error") is raised with a list of reasons.
If _copy_function_ is given, it must be a callable that will be used to copy each file. It will be called with the source path and the destination path as arguments. By default, [`copy2()`](https://docs.python.org/3/library/shutil.html#shutil.copy2 "shutil.copy2") is used, but any function that supports the same signature (like [`copy()`](https://docs.python.org/3/library/shutil.html#shutil.copy "shutil.copy")) can be used.
If _dirs_exist_ok_ is false (the default) and _dst_ already exists, a [`FileExistsError`](https://docs.python.org/3/library/exceptions.html#FileExistsError "FileExistsError") is raised. If _dirs_exist_ok_ is true, the copying operation will continue if it encounters existing directories, and files within the _dst_ tree will be overwritten by corresponding files from the _src_ tree.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `shutil.copytree` with arguments `src`, `dst`.
Changed in version 3.2: Added the _copy_function_ argument to be able to provide a custom copy function. Added the _ignore_dangling_symlinks_ argument to silence dangling symlinks errors when _symlinks_ is false.
Changed in version 3.3: Copy metadata when _symlinks_ is false. Now returns _dst_.
Changed in version 3.8: Platform-specific fast-copy syscalls may be used internally in order to copy the file more efficiently. See [Platform-dependent efficient copy operations](https://docs.python.org/3/library/shutil.html#shutil-platform-dependent-efficient-copy-operations) section.
Changed in version 3.8: Added the _dirs_exist_ok_ parameter.