Title: Queue.put Method in Multiprocessing
URL: https://docs.python.org/3/library/multiprocessing.html
Summary: The put() method allows adding an object to a queue. By default, it blocks until space is available unless configured with a timeout or blocking set to False. Since version 3.8, attempting to put an item into a closed queue raises a ValueError instead of AssertionError.
---

put(_obj_[, _block_[, _timeout_]])[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue.put "Link to this definition")
    
Put obj into the queue. If the optional argument _block_ is `True` (the default) and _timeout_ is `None` (the default), block if necessary until a free slot is available. If _timeout_ is a positive number, it blocks at most _timeout_ seconds and raises the [`queue.Full`](https://docs.python.org/3/library/queue.html#queue.Full "queue.Full") exception if no free slot was available within that time. Otherwise (_block_ is `False`), put an item on the queue if a free slot is immediately available, else raise the [`queue.Full`](https://docs.python.org/3/library/queue.html#queue.Full "queue.Full") exception (_timeout_ is ignored in that case).
Changed in version 3.8: If the queue is closed, [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised instead of [`AssertionError`](https://docs.python.org/3/library/exceptions.html#AssertionError "AssertionError"). 

put_nowait(_obj_)[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue.put_nowait "Link to this definition")
    
Equivalent to `put(obj, False)`. 

get([_block_[, _timeout_]])[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue.get "Link to this definition")
    
Remove and return an item from the queue. If optional args _block_ is `True` (the default) and _timeout_ is `None` (the default), block if necessary until an item is available. If _timeout_ is a positive number, it blocks at most _timeout_ seconds and raises the [`queue.Empty`](https://docs.python.org/3/library/queue.html#queue.Empty "queue.Empty") exception if no item was available within that time. Otherwise (block is `False`), return an item if one is immediately available, else raise the [`queue.Empty`](https://docs.python.org/3/library/queue.html#queue.Empty "queue.Empty") exception (_timeout_ is ignored in that case).
Changed in version 3.8: If the queue is closed, [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised instead of [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError"). 

get_nowait()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue.get_nowait "Link to this definition")
    
Equivalent to `get(False)`.
[`multiprocessing.Queue`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue "multiprocessing.Queue") has a few additional methods not found in [`queue.Queue`](https://docs.python.org/3/library/queue.html#queue.Queue "queue.Queue"). These methods are usually unnecessary for most code: 

close()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue.close "Link to this definition")
    
Indicate that no more data will be put on this queue by the current process. The background thread will quit once it has flushed all buffered data to the pipe. This is called automatically when the queue is garbage collected. 

join_thread()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue.join_thread "Link to this definition")
    
Join the background thread. This can only be used after [`close()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue.close "multiprocessing.Queue.close") has been called. It blocks until the background thread exits, ensuring that all data in the buffer has been flushed to the pipe.
By default if a process is not the creator of the queue then on exit it will attempt to join the queue’s background thread. The process can call [`cancel_join_thread()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue.cancel_join_thread "multiprocessing.Queue.cancel_join_thread") to make [`join_thread()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Queue.join_thread "multiprocessing.Queue.join_thread") do nothing.