Title: Context Manager Types in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This section discusses Python's `with` statement and the concept of a runtime context managed by context managers, highlighting the `__enter__` method that initializes the context and returns a value for use in the associated block.
---

```

## Context Manager Types[¶](https://docs.python.org/3/library/stdtypes.html#context-manager-types "Link to this heading")
Python’s [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement supports the concept of a runtime context defined by a context manager. This is implemented using a pair of methods that allow user-defined classes to define a runtime context that is entered before the statement body is executed and exited when the statement ends: 

contextmanager.__enter__()[¶](https://docs.python.org/3/library/stdtypes.html#contextmanager.__enter__ "Link to this definition")
    
Enter the runtime context and return either this object or another object related to the runtime context. The value returned by this method is bound to the identifier in the `as` clause of [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statements using this context manager.
An example of a context manager that returns itself is a [file object](https://docs.python.org/3/glossary.html#term-file-object). File objects return themselves from __enter__() to allow [`open()`](https://docs.python.org/3/library/functions.html#open "open") to be used as the context expression in a [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement.
An example of a context manager that returns a related object is the one returned by [`decimal.localcontext()`](https://docs.python.org/3/library/decimal.html#decimal.localcontext "decimal.localcontext"). These managers set the active decimal context to a copy of the original decimal context and then return the copy. This allows changes to be made to the current decimal context in the body of the [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement without affecting code outside the `with` statement.