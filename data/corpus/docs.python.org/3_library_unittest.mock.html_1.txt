Title: unittest.mock Library Documentation
URL: https://docs.python.org/3/library/unittest.mock.html
Summary: This chunk provides navigation links to various sections of the Python documentation, including module indexes, language options, and versions. It references the unittest.mock library, which is part of the Python standard library for unit testing.
---

### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/unittest.mock-examples.html "unittest.mock — getting started") |
  * [previous](https://docs.python.org/3/library/unittest.html "unittest — Unit testing framework") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Development Tools](https://docs.python.org/3/library/development.html) »
  * [`unittest.mock` — mock object library](https://docs.python.org/3/library/unittest.mock.html)
  * | 
  * Theme  Auto Light Dark |


# `unittest.mock` — mock object library[¶](https://docs.python.org/3/library/unittest.mock.html#module-unittest.mock "Link to this heading")
Added in version 3.3.
**Source code:** [Lib/unittest/mock.py](https://github.com/python/cpython/tree/3.13/Lib/unittest/mock.py)
[`unittest.mock`](https://docs.python.org/3/library/unittest.mock.html#module-unittest.mock "unittest.mock: Mock object library.") is a library for testing in Python. It allows you to replace parts of your system under test with mock objects and make assertions about how they have been used.
[`unittest.mock`](https://docs.python.org/3/library/unittest.mock.html#module-unittest.mock "unittest.mock: Mock object library.") provides a core [`Mock`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock "unittest.mock.Mock") class removing the need to create a host of stubs throughout your test suite. After performing an action, you can make assertions about which methods / attributes were used and arguments they were called with. You can also specify return values and set needed attributes in the normal way.
Additionally, mock provides a [`patch()`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch "unittest.mock.patch") decorator that handles patching module and class level attributes within the scope of a test, along with [`sentinel`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.sentinel "unittest.mock.sentinel") for creating unique objects. See the [quick guide](https://docs.python.org/3/library/unittest.mock.html#quick-guide) for some examples of how to use [`Mock`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock "unittest.mock.Mock"), [`MagicMock`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.MagicMock "unittest.mock.MagicMock") and [`patch()`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.patch "unittest.mock.patch").
Mock is designed for use with [`unittest`](https://docs.python.org/3/library/unittest.html#module-unittest "unittest: Unit testing framework for Python.") and is based on the ‘action -> assertion’ pattern instead of ‘record -> replay’ used by many mocking frameworks.
There is a backport of [`unittest.mock`](https://docs.python.org/3/library/unittest.mock.html#module-unittest.mock "unittest.mock: Mock object library.") for earlier versions of Python, available as [mock](https://pypi.org/project/mock/) on PyPI.
## Quick Guide[¶](https://docs.python.org/3/library/unittest.mock.html#quick-guide "Link to this heading")
[`Mock`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock "unittest.mock.Mock") and [`MagicMock`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.MagicMock "unittest.mock.MagicMock") objects create all attributes and methods as you access them and store details of how they have been used. You can configure them, to specify return values or limit what attributes are available, and then make assertions about how they have been used:
>>>```
>>> fromunittest.mockimport MagicMock
>>> thing = ProductionClass()
>>> thing.method = MagicMock(return_value=3)
>>> thing.method(3, 4, 5, key='value')
3
>>> thing.method.assert_called_with(3, 4, 5, key='value')

```

[`side_effect`](https://docs.python.org/3/library/unittest.mock.html#unittest.mock.Mock.side_effect "unittest.mock.Mock.side_effect") allows you to perform side effects, including raising an exception when a mock is called:
>>>```
>>> fromunittest.mockimport Mock
>>> mock = Mock(side_effect=KeyError('foo'))
>>> mock()
Traceback (most recent call last):
...
KeyError: 'foo'

```

>>>