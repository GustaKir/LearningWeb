Title: Customizing Help Messages with argparse
URL: https://docs.python.org/3/library/argparse.html
Summary: This section explains how to customize help messages in the argparse library for Python. It demonstrates using the program name in help texts with the `%(prog)s` format specifier and shows how to modify the default usage message with the `usage=` keyword argument.
---

```

Note that the program name, whether determined from `sys.argv[0]` or from the `prog=` argument, is available to help messages using the `%(prog)s` format specifier.
>>>```
>>> parser = argparse.ArgumentParser(prog='myprogram')
>>> parser.add_argument('--foo', help='foo of the %(prog)s program')
>>> parser.print_help()
usage: myprogram [-h] [--foo FOO]
options:
 -h, --help show this help message and exit
 --foo FOO  foo of the myprogram program

```

### usage[¶](https://docs.python.org/3/library/argparse.html#usage "Link to this heading")
By default, [`ArgumentParser`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser "argparse.ArgumentParser") calculates the usage message from the arguments it contains. The default message can be overridden with the `usage=` keyword argument:
>>>```
>>> parser = argparse.ArgumentParser(prog='PROG', usage='%(prog)s [options]')
>>> parser.add_argument('--foo', nargs='?', help='foo help')
>>> parser.add_argument('bar', nargs='+', help='bar help')
>>> parser.print_help()
usage: PROG [options]
positional arguments:
 bar     bar help
options:
 -h, --help  show this help message and exit
 --foo [FOO] foo help

```

The `%(prog)s` format specifier is available to fill in the program name in your usage messages.
### description[¶](https://docs.python.org/3/library/argparse.html#description "Link to this heading")
Most calls to the [`ArgumentParser`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser "argparse.ArgumentParser") constructor will use the `description=` keyword argument. This argument gives a brief description of what the program does and how it works. In help messages, the description is displayed between the command-line usage string and the help messages for the various arguments.
By default, the description will be line-wrapped so that it fits within the given space. To change this behavior, see the [formatter_class](https://docs.python.org/3/library/argparse.html#formatter-class) argument.
### epilog[¶](https://docs.python.org/3/library/argparse.html#epilog "Link to this heading")
Some programs like to display additional description of the program after the description of the arguments. Such text can be specified using the `epilog=` argument to [`ArgumentParser`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser "argparse.ArgumentParser"):
>>>```
>>> parser = argparse.ArgumentParser(
...   description='A foo that bars',
...   epilog="And that's how you'd foo a bar")
>>> parser.print_help()
usage: argparse.py [-h]
A foo that bars
options:
 -h, --help show this help message and exit
And that's how you'd foo a bar

```

As with the [description](https://docs.python.org/3/library/argparse.html#description) argument, the `epilog=` text is by default line-wrapped, but this behavior can be adjusted with the [formatter_class](https://docs.python.org/3/library/argparse.html#formatter-class) argument to [`ArgumentParser`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser "argparse.ArgumentParser").
### parents[¶](https://docs.python.org/3/library/argparse.html#parents "Link to this heading")
Sometimes, several parsers share a common set of arguments. Rather than repeating the definitions of these arguments, a single parser with all the shared arguments and passed to `parents=` argument to [`ArgumentParser`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser "argparse.ArgumentParser") can be used. The `parents=` argument takes a list of [`ArgumentParser`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser "argparse.ArgumentParser") objects, collects all the positional and optional actions from them, and adds these actions to the [`ArgumentParser`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser "argparse.ArgumentParser") object being constructed:
>>>```
>>> parent_parser = argparse.ArgumentParser(add_help=False)
>>> parent_parser.add_argument('--parent', type=int)
>>> foo_parser = argparse.ArgumentParser(parents=[parent_parser])
>>> foo_parser.add_argument('foo')
>>> foo_parser.parse_args(['--parent', '2', 'XXX'])
Namespace(foo='XXX', parent=2)
>>> bar_parser = argparse.ArgumentParser(parents=[parent_parser])
>>> bar_parser.add_argument('--bar')
>>> bar_parser.parse_args(['--bar', 'YYY'])
Namespace(bar='YYY', parent=None)