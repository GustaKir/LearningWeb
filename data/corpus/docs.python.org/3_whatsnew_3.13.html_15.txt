Title: Email Module Enhancements in Python 3.13
URL: https://docs.python.org/3/whatsnew/3.13.html
Summary: The email module now quotes headers with embedded newlines and prevents improper header serialization by default. Users can disable this safety feature by modifying the `verify_generated_headers` setting. Updates also extend to utility functions like `getaddresses()` and `parseaddr()`.
---

### email[¶](https://docs.python.org/3/whatsnew/3.13.html#email "Link to this heading")
  * Headers with embedded newlines are now quoted on output. The [`generator`](https://docs.python.org/3/library/email.generator.html#module-email.generator "email.generator: Generate flat text email messages from a message structure.") will now refuse to serialize (write) headers that are improperly folded or delimited, such that they would be parsed as multiple headers or joined with adjacent data. If you need to turn this safety feature off, set [`verify_generated_headers`](https://docs.python.org/3/library/email.policy.html#email.policy.Policy.verify_generated_headers "email.policy.Policy.verify_generated_headers"). (Contributed by Bas Bloemsaat and Petr Viktorin in [gh-121650](https://github.com/python/cpython/issues/121650).)
  * [`getaddresses()`](https://docs.python.org/3/library/email.utils.html#email.utils.getaddresses "email.utils.getaddresses") and [`parseaddr()`](https://docs.python.org/3/library/email.utils.html#email.utils.parseaddr "email.utils.parseaddr") now return `('', '')` pairs in more situations where invalid email addresses are encountered instead of potentially inaccurate values. The two functions have a new optional _strict_ parameter (default `True`). To get the old behavior (accepting malformed input), use `strict=False`. `getattr(email.utils, 'supports_strict_parsing', False)` can be used to check if the _strict_ parameter is available. (Contributed by Thomas Dwyer and Victor Stinner for [gh-102988](https://github.com/python/cpython/issues/102988) to improve the [**CVE 2023-27043**](https://www.cve.org/CVERecord?id=CVE-2023-27043) fix.)


### enum[¶](https://docs.python.org/3/whatsnew/3.13.html#enum "Link to this heading")
  * [`EnumDict`](https://docs.python.org/3/library/enum.html#enum.EnumDict "enum.EnumDict") has been made public to better support subclassing [`EnumType`](https://docs.python.org/3/library/enum.html#enum.EnumType "enum.EnumType").


### fractions[¶](https://docs.python.org/3/whatsnew/3.13.html#fractions "Link to this heading")
  * [`Fraction`](https://docs.python.org/3/library/fractions.html#fractions.Fraction "fractions.Fraction") objects now support the standard [format specification mini-language](https://docs.python.org/3/library/string.html#formatspec) rules for fill, alignment, sign handling, minimum width, and grouping. (Contributed by Mark Dickinson in [gh-111320](https://github.com/python/cpython/issues/111320).)


### glob[¶](https://docs.python.org/3/whatsnew/3.13.html#glob "Link to this heading")
  * Add [`translate()`](https://docs.python.org/3/library/glob.html#glob.translate "glob.translate"), a function to convert a path specification with shell-style wildcards to a regular expression. (Contributed by Barney Gale in [gh-72904](https://github.com/python/cpython/issues/72904).)


### importlib[¶](https://docs.python.org/3/whatsnew/3.13.html#importlib "Link to this heading")
  * The following functions in [`importlib.resources`](https://docs.python.org/3/library/importlib.resources.html#module-importlib.resources "importlib.resources: Package resource reading, opening, and access") now allow accessing a directory (or tree) of resources, using multiple positional arguments (the _encoding_ and _errors_ arguments in the text-reading functions are now keyword-only):
    * [`is_resource()`](https://docs.python.org/3/library/importlib.resources.html#importlib.resources.is_resource "importlib.resources.is_resource")
    * [`open_binary()`](https://docs.python.org/3/library/importlib.resources.html#importlib.resources.open_binary "importlib.resources.open_binary")
    * [`open_text()`](https://docs.python.org/3/library/importlib.resources.html#importlib.resources.open_text "importlib.resources.open_text")
    * [`path()`](https://docs.python.org/3/library/importlib.resources.html#importlib.resources.path "importlib.resources.path")
    * [`read_binary()`](https://docs.python.org/3/library/importlib.resources.html#importlib.resources.read_binary "importlib.resources.read_binary")
    * [`read_text()`](https://docs.python.org/3/library/importlib.resources.html#importlib.resources.read_text "importlib.resources.read_text")
These functions are no longer deprecated and are not scheduled for removal. (Contributed by Petr Viktorin in [gh-116608](https://github.com/python/cpython/issues/116608).)
  * [`contents()`](https://docs.python.org/3/library/importlib.resources.html#importlib.resources.contents "importlib.resources.contents") remains deprecated in favor of the fully-featured [`Traversable`](https://docs.python.org/3/library/importlib.resources.abc.html#importlib.resources.abc.Traversable "importlib.resources.abc.Traversable") API. However, there is now no plan to remove it. (Contributed by Petr Viktorin in [gh-116608](https://github.com/python/cpython/issues/116608).)