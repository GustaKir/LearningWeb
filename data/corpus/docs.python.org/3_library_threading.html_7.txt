Title: Thread.join() Method
URL: https://docs.python.org/3/library/threading.html
Summary: The `join()` method blocks the calling thread until the specified thread terminates, handling optional timeouts. If a timeout is provided, it specifies the maximum waiting time in seconds; otherwise, it waits indefinitely. After calling `join()`, use `is_alive()` to check if the thread is still running.
---

```


join(_timeout =None_)[¶](https://docs.python.org/3/library/threading.html#threading.Thread.join "Link to this definition")
    
Wait until the thread terminates. This blocks the calling thread until the thread whose [`join()`](https://docs.python.org/3/library/threading.html#threading.Thread.join "threading.Thread.join") method is called terminates – either normally or through an unhandled exception – or until the optional timeout occurs.
When the _timeout_ argument is present and not `None`, it should be a floating-point number specifying a timeout for the operation in seconds (or fractions thereof). As [`join()`](https://docs.python.org/3/library/threading.html#threading.Thread.join "threading.Thread.join") always returns `None`, you must call [`is_alive()`](https://docs.python.org/3/library/threading.html#threading.Thread.is_alive "threading.Thread.is_alive") after [`join()`](https://docs.python.org/3/library/threading.html#threading.Thread.join "threading.Thread.join") to decide whether a timeout happened – if the thread is still alive, the [`join()`](https://docs.python.org/3/library/threading.html#threading.Thread.join "threading.Thread.join") call timed out.
When the _timeout_ argument is not present or `None`, the operation will block until the thread terminates.
A thread can be joined many times.
[`join()`](https://docs.python.org/3/library/threading.html#threading.Thread.join "threading.Thread.join") raises a [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError") if an attempt is made to join the current thread as that would cause a deadlock. It is also an error to [`join()`](https://docs.python.org/3/library/threading.html#threading.Thread.join "threading.Thread.join") a thread before it has been started and attempts to do so raise the same exception. 

name[¶](https://docs.python.org/3/library/threading.html#threading.Thread.name "Link to this definition")
    
A string used for identification purposes only. It has no semantics. Multiple threads may be given the same name. The initial name is set by the constructor. 

getName()[¶](https://docs.python.org/3/library/threading.html#threading.Thread.getName "Link to this definition")


setName()[¶](https://docs.python.org/3/library/threading.html#threading.Thread.setName "Link to this definition")
    
Deprecated getter/setter API for [`name`](https://docs.python.org/3/library/threading.html#threading.Thread.name "threading.Thread.name"); use it directly as a property instead.
Deprecated since version 3.10. 

ident[¶](https://docs.python.org/3/library/threading.html#threading.Thread.ident "Link to this definition")
    
The ‘thread identifier’ of this thread or `None` if the thread has not been started. This is a nonzero integer. See the [`get_ident()`](https://docs.python.org/3/library/threading.html#threading.get_ident "threading.get_ident") function. Thread identifiers may be recycled when a thread exits and another thread is created. The identifier is available even after the thread has exited. 

native_id[¶](https://docs.python.org/3/library/threading.html#threading.Thread.native_id "Link to this definition")
    
The Thread ID (`TID`) of this thread, as assigned by the OS (kernel). This is a non-negative integer, or `None` if the thread has not been started. See the [`get_native_id()`](https://docs.python.org/3/library/threading.html#threading.get_native_id "threading.get_native_id") function. This value may be used to uniquely identify this particular thread system-wide (until the thread terminates, after which the value may be recycled by the OS).
Note
Similar to Process IDs, Thread IDs are only valid (guaranteed unique system-wide) from the time the thread is created until the thread has been terminated.
[Availability](https://docs.python.org/3/library/intro.html#availability): Windows, FreeBSD, Linux, macOS, OpenBSD, NetBSD, AIX, DragonFlyBSD.
Added in version 3.8. 

is_alive()[¶](https://docs.python.org/3/library/threading.html#threading.Thread.is_alive "Link to this definition")
    
Return whether the thread is alive.
This method returns `True` just before the [`run()`](https://docs.python.org/3/library/threading.html#threading.Thread.run "threading.Thread.run") method starts until just after the [`run()`](https://docs.python.org/3/library/threading.html#threading.Thread.run "threading.Thread.run") method terminates. The module function [`enumerate()`](https://docs.python.org/3/library/threading.html#threading.enumerate "threading.enumerate") returns a list of all alive threads.