Title: Curses Library - Getting Input from the Window
URL: https://docs.python.org/3/library/curses.html
Summary: This section describes functions for obtaining user input from a window in the curses library. It includes 'getch()', which returns an integer for key presses, 'get_wch()', which returns wide characters and may raise exceptions, and 'getkey()', which returns a string representing the pressed key.
---

window.getch([_y_ , _x_])[¶](https://docs.python.org/3/library/curses.html#curses.window.getch "Link to this definition")
    
Get a character. Note that the integer returned does _not_ have to be in ASCII range: function keys, keypad keys and so on are represented by numbers higher than 255. In no-delay mode, return `-1` if there is no input, otherwise wait until a key is pressed. 

window.get_wch([_y_ , _x_])[¶](https://docs.python.org/3/library/curses.html#curses.window.get_wch "Link to this definition")
    
Get a wide character. Return a character for most keys, or an integer for function keys, keypad keys, and other special keys. In no-delay mode, raise an exception if there is no input.
Added in version 3.3. 

window.getkey([_y_ , _x_])[¶](https://docs.python.org/3/library/curses.html#curses.window.getkey "Link to this definition")
    
Get a character, returning a string instead of an integer, as [`getch()`](https://docs.python.org/3/library/curses.html#curses.window.getch "curses.window.getch") does. Function keys, keypad keys and other special keys return a multibyte string containing the key name. In no-delay mode, raise an exception if there is no input. 

window.getmaxyx()[¶](https://docs.python.org/3/library/curses.html#curses.window.getmaxyx "Link to this definition")
    
Return a tuple `(y, x)` of the height and width of the window. 

window.getparyx()[¶](https://docs.python.org/3/library/curses.html#curses.window.getparyx "Link to this definition")
    
Return the beginning coordinates of this window relative to its parent window as a tuple `(y, x)`. Return `(-1, -1)` if this window has no parent. 

window.getstr()[¶](https://docs.python.org/3/library/curses.html#curses.window.getstr "Link to this definition")


window.getstr(_n_)


window.getstr(_y_ , _x_)


window.getstr(_y_ , _x_ , _n_)
    
Read a bytes object from the user, with primitive line editing capacity. 

window.getyx()[¶](https://docs.python.org/3/library/curses.html#curses.window.getyx "Link to this definition")
    
Return a tuple `(y, x)` of current cursor position relative to the window’s upper-left corner. 

window.hline(_ch_ , _n_)[¶](https://docs.python.org/3/library/curses.html#curses.window.hline "Link to this definition")


window.hline(_y_ , _x_ , _ch_ , _n_)
    
Display a horizontal line starting at `(y, x)` with length _n_ consisting of the character _ch_. 

window.idcok(_flag_)[¶](https://docs.python.org/3/library/curses.html#curses.window.idcok "Link to this definition")
    
If _flag_ is `False`, curses no longer considers using the hardware insert/delete character feature of the terminal; if _flag_ is `True`, use of character insertion and deletion is enabled. When curses is first initialized, use of character insert/delete is enabled by default. 

window.idlok(_flag_)[¶](https://docs.python.org/3/library/curses.html#curses.window.idlok "Link to this definition")
    
If _flag_ is `True`, [`curses`](https://docs.python.org/3/library/curses.html#module-curses "curses: An interface to the curses library, providing portable terminal handling. \(Unix\)") will try and use hardware line editing facilities. Otherwise, line insertion/deletion are disabled. 

window.immedok(_flag_)[¶](https://docs.python.org/3/library/curses.html#curses.window.immedok "Link to this definition")
    
If _flag_ is `True`, any change in the window image automatically causes the window to be refreshed; you no longer have to call [`refresh()`](https://docs.python.org/3/library/curses.html#curses.window.refresh "curses.window.refresh") yourself. However, it may degrade performance considerably, due to repeated calls to wrefresh. This option is disabled by default. 

window.inch([_y_ , _x_])[¶](https://docs.python.org/3/library/curses.html#curses.window.inch "Link to this definition")
    
Return the character at the given position in the window. The bottom 8 bits are the character proper, and upper bits are the attributes. 

window.insch(_ch_[, _attr_])[¶](https://docs.python.org/3/library/curses.html#curses.window.insch "Link to this definition")


window.insch(_y_ , _x_ , _ch_[, _attr_])
    
Paint character _ch_ at `(y, x)` with attributes _attr_ , moving the line from position _x_ right by one character. 

window.insdelln(_nlines_)[¶](https://docs.python.org/3/library/curses.html#curses.window.insdelln "Link to this definition")
    
Insert _nlines_ lines into the specified window above the current line. The _nlines_ bottom lines are lost. For negative _nlines_ , delete _nlines_ lines starting with the one under the cursor, and move the remaining lines up. The bottom _nlines_ lines are cleared. The current cursor position remains the same. 

window.insertln()[¶](https://docs.python.org/3/library/curses.html#curses.window.insertln "Link to this definition")
    
Insert a blank line under the cursor. All following lines are moved down by one line.