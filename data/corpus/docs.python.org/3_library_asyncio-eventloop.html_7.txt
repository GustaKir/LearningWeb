Title: Transport Creation in asyncio
URL: https://docs.python.org/3/library/asyncio-eventloop.html
Summary: This section discusses the creation of bidirectional transport streams in asyncio, highlighting the use of SSL/TLS for secure connections. It details the parameters for SSL context and server hostname settings, specifying how to configure secure transports based on provided arguments.
---

The created transport is an implementation-dependent bidirectional stream.
Other arguments:
  * _ssl_ : if given and not false, a SSL/TLS transport is created (by default a plain TCP transport is created). If _ssl_ is a [`ssl.SSLContext`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext "ssl.SSLContext") object, this context is used to create the transport; if _ssl_ is [`True`](https://docs.python.org/3/library/constants.html#True "True"), a default context returned from [`ssl.create_default_context()`](https://docs.python.org/3/library/ssl.html#ssl.create_default_context "ssl.create_default_context") is used.
See also
[SSL/TLS security considerations](https://docs.python.org/3/library/ssl.html#ssl-security)
  * _server_hostname_ sets or overrides the hostname that the target server’s certificate will be matched against. Should only be passed if _ssl_ is not `None`. By default the value of the _host_ argument is used. If _host_ is empty, there is no default and you must pass a value for _server_hostname_. If _server_hostname_ is an empty string, hostname matching is disabled (which is a serious security risk, allowing for potential man-in-the-middle attacks).
  * _family_ , _proto_ , _flags_ are the optional address family, protocol and flags to be passed through to getaddrinfo() for _host_ resolution. If given, these should all be integers from the corresponding [`socket`](https://docs.python.org/3/library/socket.html#module-socket "socket: Low-level networking interface.") module constants.
  * _happy_eyeballs_delay_ , if given, enables Happy Eyeballs for this connection. It should be a floating-point number representing the amount of time in seconds to wait for a connection attempt to complete, before starting the next attempt in parallel. This is the “Connection Attempt Delay” as defined in [**RFC 8305**](https://datatracker.ietf.org/doc/html/rfc8305.html). A sensible default value recommended by the RFC is `0.25` (250 milliseconds).
  * _interleave_ controls address reordering when a host name resolves to multiple IP addresses. If `0` or unspecified, no reordering is done, and addresses are tried in the order returned by [`getaddrinfo()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.getaddrinfo "asyncio.loop.getaddrinfo"). If a positive integer is specified, the addresses are interleaved by address family, and the given integer is interpreted as “First Address Family Count” as defined in [**RFC 8305**](https://datatracker.ietf.org/doc/html/rfc8305.html). The default is `0` if _happy_eyeballs_delay_ is not specified, and `1` if it is.
  * _sock_ , if given, should be an existing, already connected [`socket.socket`](https://docs.python.org/3/library/socket.html#socket.socket "socket.socket") object to be used by the transport. If _sock_ is given, none of _host_ , _port_ , _family_ , _proto_ , _flags_ , _happy_eyeballs_delay_ , _interleave_ and _local_addr_ should be specified.
Note
The _sock_ argument transfers ownership of the socket to the transport created. To close the socket, call the transport’s [`close()`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.BaseTransport.close "asyncio.BaseTransport.close") method.
  * _local_addr_ , if given, is a `(local_host, local_port)` tuple used to bind the socket locally. The _local_host_ and _local_port_ are looked up using `getaddrinfo()`, similarly to _host_ and _port_.
  * _ssl_handshake_timeout_ is (for a TLS connection) the time in seconds to wait for the TLS handshake to complete before aborting the connection. `60.0` seconds if `None` (default).
  * _ssl_shutdown_timeout_ is the time in seconds to wait for the SSL shutdown to complete before aborting the connection. `30.0` seconds if `None` (default).
  * _all_errors_ determines what exceptions are raised when a connection cannot be created. By default, only a single `Exception` is raised: the first exception if there is only one or all errors have same message, or a single `OSError` with the error messages combined. When `all_errors` is `True`, an `ExceptionGroup` will be raised containing all exceptions (even if there is only one).