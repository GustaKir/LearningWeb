Title: Retrieving Mouse Events with curses.getmouse()
URL: https://docs.python.org/3/library/curses.html
Summary: The `curses.getmouse()` method is used after a mouse event is detected via `getch()` with `KEY_MOUSE`. It returns a 5-tuple containing the mouse event's ID, coordinates, and button state. The button state is an integer indicating the status of up to five buttons, with each bit representing a button's pressed or released state.
---

curses.getmouse()[¶](https://docs.python.org/3/library/curses.html#curses.getmouse "Link to this definition")
    
After [`getch()`](https://docs.python.org/3/library/curses.html#curses.window.getch "curses.window.getch") returns [`KEY_MOUSE`](https://docs.python.org/3/library/curses.html#curses.KEY_MOUSE "curses.KEY_MOUSE") to signal a mouse event, this method should be called to retrieve the queued mouse event, represented as a 5-tuple `(id, x, y, z, bstate)`. _id_ is an ID value used to distinguish multiple devices, and _x_ , _y_ , _z_ are the event’s coordinates. (_z_ is currently unused.) _bstate_ is an integer value whose bits will be set to indicate the type of event, and will be the bitwise OR of one or more of the following constants, where _n_ is the button number from 1 to 5: [`BUTTONn_PRESSED`](https://docs.python.org/3/library/curses.html#curses.BUTTONn_PRESSED "curses.BUTTONn_PRESSED"), [`BUTTONn_RELEASED`](https://docs.python.org/3/library/curses.html#curses.BUTTONn_RELEASED "curses.BUTTONn_RELEASED"), [`BUTTONn_CLICKED`](https://docs.python.org/3/library/curses.html#curses.BUTTONn_CLICKED "curses.BUTTONn_CLICKED"), [`BUTTONn_DOUBLE_CLICKED`](https://docs.python.org/3/library/curses.html#curses.BUTTONn_DOUBLE_CLICKED "curses.BUTTONn_DOUBLE_CLICKED"), [`BUTTONn_TRIPLE_CLICKED`](https://docs.python.org/3/library/curses.html#curses.BUTTONn_TRIPLE_CLICKED "curses.BUTTONn_TRIPLE_CLICKED"), [`BUTTON_SHIFT`](https://docs.python.org/3/library/curses.html#curses.BUTTON_SHIFT "curses.BUTTON_SHIFT"), [`BUTTON_CTRL`](https://docs.python.org/3/library/curses.html#curses.BUTTON_CTRL "curses.BUTTON_CTRL"), [`BUTTON_ALT`](https://docs.python.org/3/library/curses.html#curses.BUTTON_ALT "curses.BUTTON_ALT").
Changed in version 3.10: The `BUTTON5_*` constants are now exposed if they are provided by the underlying curses library. 

curses.getsyx()[¶](https://docs.python.org/3/library/curses.html#curses.getsyx "Link to this definition")
    
Return the current coordinates of the virtual screen cursor as a tuple `(y, x)`. If [`leaveok`](https://docs.python.org/3/library/curses.html#curses.window.leaveok "curses.window.leaveok") is currently `True`, then return `(-1, -1)`. 

curses.getwin(_file_)[¶](https://docs.python.org/3/library/curses.html#curses.getwin "Link to this definition")
    
Read window related data stored in the file by an earlier [`window.putwin()`](https://docs.python.org/3/library/curses.html#curses.window.putwin "curses.window.putwin") call. The routine then creates and initializes a new window using that data, returning the new window object. 

curses.has_colors()[¶](https://docs.python.org/3/library/curses.html#curses.has_colors "Link to this definition")
    
Return `True` if the terminal can display colors; otherwise, return `False`. 

curses.has_extended_color_support()[¶](https://docs.python.org/3/library/curses.html#curses.has_extended_color_support "Link to this definition")
    
Return `True` if the module supports extended colors; otherwise, return `False`. Extended color support allows more than 256 color pairs for terminals that support more than 16 colors (e.g. xterm-256color).
Extended color support requires ncurses version 6.1 or later.
Added in version 3.10. 

curses.has_ic()[¶](https://docs.python.org/3/library/curses.html#curses.has_ic "Link to this definition")
    
Return `True` if the terminal has insert- and delete-character capabilities. This function is included for historical reasons only, as all modern software terminal emulators have such capabilities. 

curses.has_il()[¶](https://docs.python.org/3/library/curses.html#curses.has_il "Link to this definition")
    
Return `True` if the terminal has insert- and delete-line capabilities, or can simulate them using scrolling regions. This function is included for historical reasons only, as all modern software terminal emulators have such capabilities. 

curses.has_key(_ch_)[¶](https://docs.python.org/3/library/curses.html#curses.has_key "Link to this definition")
    
Take a key value _ch_ , and return `True` if the current terminal type recognizes a key with that value. 

curses.halfdelay(_tenths_)[¶](https://docs.python.org/3/library/curses.html#curses.halfdelay "Link to this definition")
    
Used for half-delay mode, which is similar to cbreak mode in that characters typed by the user are immediately available to the program. However, after blocking for _tenths_ tenths of seconds, raise an exception if nothing has been typed. The value of _tenths_ must be a number between `1` and `255`. Use [`nocbreak()`](https://docs.python.org/3/library/curses.html#curses.nocbreak "curses.nocbreak") to leave half-delay mode.