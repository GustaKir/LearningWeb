Title: Python 3.2 Updates on Import Mechanism and Standard Library
URL: https://docs.python.org/3/whatsnew/3.2.html
Summary: Python 3.2 introduces improvements to the import mechanism, allowing modules to be loaded from directories with non-ASCII characters in their paths, addressing issues for users with non-ASCII usernames. Additionally, the standard library has seen significant maintenance and quality enhancements, particularly to the email and mailbox packages.
---

```

(See [bpo-10518](https://bugs.python.org/issue?@action=redirect&bpo=10518).)
  * Python’s import mechanism can now load modules installed in directories with non-ASCII characters in the path name. This solved an aggravating problem with home directories for users with non-ASCII characters in their usernames.


> (Required extensive work by Victor Stinner in [bpo-9425](https://bugs.python.org/issue?@action=redirect&bpo=9425).)
## New, Improved, and Deprecated Modules[¶](https://docs.python.org/3/whatsnew/3.2.html#new-improved-and-deprecated-modules "Link to this heading")
Python’s standard library has undergone significant maintenance efforts and quality improvements.
The biggest news for Python 3.2 is that the [`email`](https://docs.python.org/3/library/email.html#module-email "email: Package supporting the parsing, manipulating, and generating email messages.") package, [`mailbox`](https://docs.python.org/3/library/mailbox.html#module-mailbox "mailbox: Manipulate mailboxes in various formats") module, and `nntplib` modules now work correctly with the bytes/text model in Python 3. For the first time, there is correct handling of messages with mixed encodings.
Throughout the standard library, there has been more careful attention to encodings and text versus bytes issues. In particular, interactions with the operating system are now better able to exchange non-ASCII data using the Windows MBCS encoding, locale-aware encodings, or UTF-8.
Another significant win is the addition of substantially better support for _SSL_ connections and security certificates.
In addition, more classes now implement a [context manager](https://docs.python.org/3/glossary.html#term-context-manager) to support convenient and reliable resource clean-up using a [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement.
### email[¶](https://docs.python.org/3/whatsnew/3.2.html#email "Link to this heading")
The usability of the [`email`](https://docs.python.org/3/library/email.html#module-email "email: Package supporting the parsing, manipulating, and generating email messages.") package in Python 3 has been mostly fixed by the extensive efforts of R. David Murray. The problem was that emails are typically read and stored in the form of [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") rather than [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") text, and they may contain multiple encodings within a single email. So, the email package had to be extended to parse and generate email messages in bytes format.
  * New functions [`message_from_bytes()`](https://docs.python.org/3/library/email.parser.html#email.message_from_bytes "email.message_from_bytes") and [`message_from_binary_file()`](https://docs.python.org/3/library/email.parser.html#email.message_from_binary_file "email.message_from_binary_file"), and new classes [`BytesFeedParser`](https://docs.python.org/3/library/email.parser.html#email.parser.BytesFeedParser "email.parser.BytesFeedParser") and [`BytesParser`](https://docs.python.org/3/library/email.parser.html#email.parser.BytesParser "email.parser.BytesParser") allow binary message data to be parsed into model objects.
  * Given bytes input to the model, [`get_payload()`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.get_payload "email.message.Message.get_payload") will by default decode a message body that has a _Content-Transfer-Encoding_ of _8bit_ using the charset specified in the MIME headers and return the resulting string.
  * Given bytes input to the model, [`Generator`](https://docs.python.org/3/library/email.generator.html#email.generator.Generator "email.generator.Generator") will convert message bodies that have a _Content-Transfer-Encoding_ of _8bit_ to instead have a _7bit_ _Content-Transfer-Encoding_.
Headers with unencoded non-ASCII bytes are deemed to be [**RFC 2047**](https://datatracker.ietf.org/doc/html/rfc2047.html)-encoded using the _unknown-8bit_ character set.
  * A new class [`BytesGenerator`](https://docs.python.org/3/library/email.generator.html#email.generator.BytesGenerator "email.generator.BytesGenerator") produces bytes as output, preserving any unchanged non-ASCII data that was present in the input used to build the model, including message bodies with a _Content-Transfer-Encoding_ of _8bit_.
  * The [`smtplib`](https://docs.python.org/3/library/smtplib.html#module-smtplib "smtplib: SMTP protocol client \(requires sockets\).") [`SMTP`](https://docs.python.org/3/library/smtplib.html#smtplib.SMTP "smtplib.SMTP") class now accepts a byte string for the _msg_ argument to the [`sendmail()`](https://docs.python.org/3/library/smtplib.html#smtplib.SMTP.sendmail "smtplib.SMTP.sendmail") method, and a new method, [`send_message()`](https://docs.python.org/3/library/smtplib.html#smtplib.SMTP.send_message "smtplib.SMTP.send_message") accepts a [`Message`](https://docs.python.org/3/library/email.compat32-