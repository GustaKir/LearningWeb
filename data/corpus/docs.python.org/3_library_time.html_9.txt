Title: time.time() Function in Python
URL: https://docs.python.org/3/library/time.html
Summary: The `time.time()` function returns the time in seconds since the epoch as a floating-point number. Its handling of leap seconds is platform dependent. In most systems, leap seconds are not counted, and while the function generally provides non-decreasing values, it may return a lower value if the system clock is adjusted.
---

time.time() → [float](https://docs.python.org/3/library/functions.html#float "float")[¶](https://docs.python.org/3/library/time.html#time.time "Link to this definition")
    
Return the time in seconds since the [epoch](https://docs.python.org/3/library/time.html#epoch) as a floating-point number. The handling of [leap seconds](https://en.wikipedia.org/wiki/Leap_second) is platform dependent. On Windows and most Unix systems, the leap seconds are not counted towards the time in seconds since the [epoch](https://docs.python.org/3/library/time.html#epoch). This is commonly referred to as [Unix time](https://en.wikipedia.org/wiki/Unix_time).
Note that even though the time is always returned as a floating-point number, not all systems provide time with a better precision than 1 second. While this function normally returns non-decreasing values, it can return a lower value than a previous call if the system clock has been set back between the two calls.
The number returned by [`time()`](https://docs.python.org/3/library/time.html#time.time "time.time") may be converted into a more common time format (i.e. year, month, day, hour, etc…) in UTC by passing it to [`gmtime()`](https://docs.python.org/3/library/time.html#time.gmtime "time.gmtime") function or in local time by passing it to the [`localtime()`](https://docs.python.org/3/library/time.html#time.localtime "time.localtime") function. In both cases a [`struct_time`](https://docs.python.org/3/library/time.html#time.struct_time "time.struct_time") object is returned, from which the components of the calendar date may be accessed as attributes.
Clock:
  * On Windows, call `GetSystemTimeAsFileTime()`.
  * Call `clock_gettime(CLOCK_REALTIME)` if available.
  * Otherwise, call `gettimeofday()`.


Use [`time_ns()`](https://docs.python.org/3/library/time.html#time.time_ns "time.time_ns") to avoid the precision loss caused by the [`float`](https://docs.python.org/3/library/functions.html#float "float") type. 

time.time_ns() → [int](https://docs.python.org/3/library/functions.html#int "int")[¶](https://docs.python.org/3/library/time.html#time.time_ns "Link to this definition")
    
Similar to [`time()`](https://docs.python.org/3/library/time.html#time.time "time.time") but returns time as an integer number of nanoseconds since the [epoch](https://docs.python.org/3/library/time.html#epoch).
Added in version 3.7. 

time.thread_time() → [float](https://docs.python.org/3/library/functions.html#float "float")[¶](https://docs.python.org/3/library/time.html#time.thread_time "Link to this definition")
    
Return the value (in fractional seconds) of the sum of the system and user CPU time of the current thread. It does not include time elapsed during sleep. It is thread-specific by definition. The reference point of the returned value is undefined, so that only the difference between the results of two calls in the same thread is valid.
Use [`thread_time_ns()`](https://docs.python.org/3/library/time.html#time.thread_time_ns "time.thread_time_ns") to avoid the precision loss caused by the [`float`](https://docs.python.org/3/library/functions.html#float "float") type.
[Availability](https://docs.python.org/3/library/intro.html#availability): Linux, Unix, Windows.
Unix systems supporting `CLOCK_THREAD_CPUTIME_ID`.
Added in version 3.7. 

time.thread_time_ns() → [int](https://docs.python.org/3/library/functions.html#int "int")[¶](https://docs.python.org/3/library/time.html#time.thread_time_ns "Link to this definition")
    
Similar to [`thread_time()`](https://docs.python.org/3/library/time.html#time.thread_time "time.thread_time") but return time as nanoseconds.
Added in version 3.7. 

time.tzset()[¶](https://docs.python.org/3/library/time.html#time.tzset "Link to this definition")
    
Reset the time conversion rules used by the library routines. The environment variable `TZ` specifies how this is done. It will also set the variables `tzname` (from the `TZ` environment variable), `timezone` (non-DST seconds West of UTC), `altzone` (DST seconds west of UTC) and `daylight` (to 0 if this timezone does not have any daylight saving time rules, or to nonzero if there is a time, past, present or future when daylight saving time applies).
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix.
Note
Although in many cases, changing the `TZ` environment variable may affect the output of functions like [`localtime()`](https://docs.python.org/3/library/time.html#time.localtime "time.localtime") without calling [`tzset()`](https://docs.python.org/3/library/time.html#time.tzset "time.tzset"), this behavior should not be relied on.
The `TZ` environment variable should contain no whitespace.
The standard format of the `TZ` environment variable is (whitespace added for clarity):
```
std offset [dst [offset [,start[/time], end[/time]]]]