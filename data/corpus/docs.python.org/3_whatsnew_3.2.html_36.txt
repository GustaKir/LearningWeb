Title: What's New in Python 3.2
URL: https://docs.python.org/3/whatsnew/3.2.html
Summary: This document outlines several notable updates in Python 3.2, including the introduction of `PyLong_AsLongLongAndOverflow()` for better conversion of Python integers to fixed-width types, enhancements to string comparison functions, and the addition of `PyErr_NewExceptionWithDoc()` for improved exception handling.
---

ion [`PyLong_AsLongLongAndOverflow()`](https://docs.python.org/3/c-api/long.html#c.PyLong_AsLongLongAndOverflow "PyLong_AsLongLongAndOverflow") which is analogous to [`PyLong_AsLongAndOverflow()`](https://docs.python.org/3/c-api/long.html#c.PyLong_AsLongAndOverflow "PyLong_AsLongAndOverflow"). They both serve to convert Python [`int`](https://docs.python.org/3/library/functions.html#int "int") into a native fixed-width type while providing detection of cases where the conversion wonâ€™t fit ([bpo-7767](https://bugs.python.org/issue?@action=redirect&bpo=7767)).
  * The [`PyUnicode_CompareWithASCIIString()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_CompareWithASCIIString "PyUnicode_CompareWithASCIIString") function now returns _not equal_ if the Python string is _NUL_ terminated.
  * There is a new function [`PyErr_NewExceptionWithDoc()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_NewExceptionWithDoc "PyErr_NewExceptionWithDoc") that is like [`PyErr_NewException()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_NewException "PyErr_NewException") but allows a docstring to be specified. This lets C exceptions have the same self-documenting capabilities as their pure Python counterparts ([bpo-7033](https://bugs.python.org/issue?@action=redirect&bpo=7033)).
  * When compiled with the `--with-valgrind` option, the pymalloc allocator will be automatically disabled when running under Valgrind. This gives improved memory leak detection when running under Valgrind, while taking advantage of pymalloc at other times ([bpo-2422](https://bugs.python.org/issue?@action=redirect&bpo=2422)).
  * Removed the `O?` format from the _PyArg_Parse_ functions. The format is no longer used and it had never been documented ([bpo-8837](https://bugs.python.org/issue?@action=redirect&bpo=8837)).