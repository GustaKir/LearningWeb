Title: socket.inet_aton Function
URL: https://docs.python.org/3/library/socket.html
Summary: The `socket.inet_aton` function converts an IPv4 address from dotted-quad string format to a 32-bit packed binary format as a bytes object. It is useful for compatibility with programs using the standard C library. The function raises an `OSError` if the provided IP address string is invalid.
---

socket.inet_aton(_ip_string_)[¶](https://docs.python.org/3/library/socket.html#socket.inet_aton "Link to this definition")
    
Convert an IPv4 address from dotted-quad string format (for example, ‘123.45.67.89’) to 32-bit packed binary format, as a bytes object four characters in length. This is useful when conversing with a program that uses the standard C library and needs objects of type `in_addr`, which is the C type for the 32-bit packed binary this function returns.
[`inet_aton()`](https://docs.python.org/3/library/socket.html#socket.inet_aton "socket.inet_aton") also accepts strings with less than three dots; see the Unix manual page _[inet(3)](https://manpages.debian.org/inet\(3\))_ for details.
If the IPv4 address string passed to this function is invalid, [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") will be raised. Note that exactly what is valid depends on the underlying C implementation of `inet_aton()`.
[`inet_aton()`](https://docs.python.org/3/library/socket.html#socket.inet_aton "socket.inet_aton") does not support IPv6, and [`inet_pton()`](https://docs.python.org/3/library/socket.html#socket.inet_pton "socket.inet_pton") should be used instead for IPv4/v6 dual stack support. 

socket.inet_ntoa(_packed_ip_)[¶](https://docs.python.org/3/library/socket.html#socket.inet_ntoa "Link to this definition")
    
Convert a 32-bit packed IPv4 address (a [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object) four bytes in length) to its standard dotted-quad string representation (for example, ‘123.45.67.89’). This is useful when conversing with a program that uses the standard C library and needs objects of type `in_addr`, which is the C type for the 32-bit packed binary data this function takes as an argument.
If the byte sequence passed to this function is not exactly 4 bytes in length, [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") will be raised. [`inet_ntoa()`](https://docs.python.org/3/library/socket.html#socket.inet_ntoa "socket.inet_ntoa") does not support IPv6, and [`inet_ntop()`](https://docs.python.org/3/library/socket.html#socket.inet_ntop "socket.inet_ntop") should be used instead for IPv4/v6 dual stack support.
Changed in version 3.5: Writable [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object) is now accepted. 

socket.inet_pton(_address_family_ , _ip_string_)[¶](https://docs.python.org/3/library/socket.html#socket.inet_pton "Link to this definition")
    
Convert an IP address from its family-specific string format to a packed, binary format. [`inet_pton()`](https://docs.python.org/3/library/socket.html#socket.inet_pton "socket.inet_pton") is useful when a library or network protocol calls for an object of type `in_addr` (similar to [`inet_aton()`](https://docs.python.org/3/library/socket.html#socket.inet_aton "socket.inet_aton")) or `in6_addr`.
Supported values for _address_family_ are currently [`AF_INET`](https://docs.python.org/3/library/socket.html#socket.AF_INET "socket.AF_INET") and [`AF_INET6`](https://docs.python.org/3/library/socket.html#socket.AF_INET6 "socket.AF_INET6"). If the IP address string _ip_string_ is invalid, [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") will be raised. Note that exactly what is valid depends on both the value of _address_family_ and the underlying implementation of `inet_pton()`.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, Windows.
Changed in version 3.4: Windows support added