Title: ssizeargfunc and PySequenceMethods.sq_item Overview
URL: https://docs.python.org/3/c-api/typeobj.html
Summary: The ssizeargfunc function is integral to the PySequenceMethods structure, specifically for retrieving items via PySequence_GetItem and PyObject_GetItem. It is essential for ensuring that the PySequence_Check function validates a sequence, with behavior for negative indexing described.
---

[ssizeargfunc](https://docs.python.org/3/c-api/typeobj.html#c.ssizeargfunc "ssizeargfunc")[PySequenceMethods](https://docs.python.org/3/c-api/typeobj.html#c.PySequenceMethods "PySequenceMethods").sq_item[¶](https://docs.python.org/3/c-api/typeobj.html#c.PySequenceMethods.sq_item "Link to this definition")
    
This function is used by [`PySequence_GetItem()`](https://docs.python.org/3/c-api/sequence.html#c.PySequence_GetItem "PySequence_GetItem") and has the same signature. It is also used by [`PyObject_GetItem()`](https://docs.python.org/3/c-api/object.html#c.PyObject_GetItem "PyObject_GetItem"), after trying the subscription via the [`mp_subscript`](https://docs.python.org/3/c-api/typeobj.html#c.PyMappingMethods.mp_subscript "PyMappingMethods.mp_subscript") slot. This slot must be filled for the [`PySequence_Check()`](https://docs.python.org/3/c-api/sequence.html#c.PySequence_Check "PySequence_Check") function to return `1`, it can be `NULL` otherwise.
Negative indexes are handled as follows: if the [`sq_length`](https://docs.python.org/3/c-api/typeobj.html#c.PySequenceMethods.sq_length "PySequenceMethods.sq_length") slot is filled, it is called and the sequence length is used to compute a positive index which is passed to [`sq_item`](https://docs.python.org/3/c-api/typeobj.html#c.PySequenceMethods.sq_item "PySequenceMethods.sq_item"). If `sq_length` is `NULL`, the index is passed as is to the function. 

[ssizeobjargproc](https://docs.python.org/3/c-api/typeobj.html#c.ssizeobjargproc "ssizeobjargproc")[PySequenceMethods](https://docs.python.org/3/c-api/typeobj.html#c.PySequenceMethods "PySequenceMethods").sq_ass_item[¶](https://docs.python.org/3/c-api/typeobj.html#c.PySequenceMethods.sq_ass_item "Link to this definition")
    
This function is used by [`PySequence_SetItem()`](https://docs.python.org/3/c-api/sequence.html#c.PySequence_SetItem "PySequence_SetItem") and has the same signature. It is also used by [`PyObject_SetItem()`](https://docs.python.org/3/c-api/object.html#c.PyObject_SetItem "PyObject_SetItem") and [`PyObject_DelItem()`](https://docs.python.org/3/c-api/object.html#c.PyObject_DelItem "PyObject_DelItem"), after trying the item assignment and deletion via the [`mp_ass_subscript`](https://docs.python.org/3/c-api/typeobj.html#c.PyMappingMethods.mp_ass_subscript "PyMappingMethods.mp_ass_subscript") slot. This slot may be left to `NULL` if the object does not support item assignment and deletion. 

[objobjproc](https://docs.python.org/3/c-api/typeobj.html#c.objobjproc "objobjproc")[PySequenceMethods](https://docs.python.org/3/c-api/typeobj.html#c.PySequenceMethods "PySequenceMethods").sq_contains[¶](https://docs.python.org/3/c-api/typeobj.html#c.PySequenceMethods.sq_contains "Link to this definition")
    
This function may be used by [`PySequence_Contains()`](https://docs.python.org/3/c-api/sequence.html#c.PySequence_Contains "PySequence_Contains") and has the same signature. This slot may be left to `NULL`, in this case `PySequence_Contains()` simply traverses the sequence until it finds a match. 

[binaryfunc](https://docs.python.org/3/c-api/typeobj.html#c.binaryfunc "binaryfunc")[PySequenceMethods](https://docs.python.org/3/c-api/typeobj.html#c.PySequenceMethods "PySequenceMethods").sq_inplace_concat[¶](https://docs.python.org/3/c-api/typeobj.html#c.PySequenceMethods.sq_inplace_concat "Link to this definition")
    
This function is used by [`PySequence_InPlaceConcat()`](https://docs.python.org/3/c-api/sequence.html#c.PySequence_InPlaceConcat "PySequence_InPlaceConcat") and has the same signature. It should modify its first operand, and return it. This slot may be left to `NULL`, in this case `PySequence_InPlaceConcat()` will fall back to [`PySequence_Concat()`](https://docs.python.org/3/c-api/sequence.html#c.PySequence_Concat "PySequence_Concat"). It is also used by the augmented assignment `+=`, after trying numeric in-place addition via the [`nb_inplace_add`](https://docs.python.org/3/c-api/typeobj.html#c.PyNumberMethods.nb_inplace_add "PyNumberMethods.nb_inplace_add") slot.