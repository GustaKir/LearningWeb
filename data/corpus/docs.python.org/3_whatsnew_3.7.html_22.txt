Title: Python 3.7: New SSL Context Features and String Template Enhancements
URL: https://docs.python.org/3/whatsnew/3.7.html
Summary: Python 3.7 introduces `ssl.SSLContext.post_handshake_auth` and `ssl.SSLSocket.verify_client_post_handshake()` for TLS 1.3 post-handshake authentication. Additionally, `string.Template` now allows for optional modifications to the regular expression patterns for braced and non-braced placeholders.
---

(Contributed by Christian Heimes in [bpo-32609](https://bugs.python.org/issue?@action=redirect&bpo=32609).)
Added [`ssl.SSLContext.post_handshake_auth`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.post_handshake_auth "ssl.SSLContext.post_handshake_auth") to enable and [`ssl.SSLSocket.verify_client_post_handshake()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.verify_client_post_handshake "ssl.SSLSocket.verify_client_post_handshake") to initiate TLS 1.3 post-handshake authentication. (Contributed by Christian Heimes in [gh-78851](https://github.com/python/cpython/issues/78851).)
### string[¶](https://docs.python.org/3/whatsnew/3.7.html#string "Link to this heading")
[`string.Template`](https://docs.python.org/3/library/string.html#string.Template "string.Template") now lets you to optionally modify the regular expression pattern for braced placeholders and non-braced placeholders separately. (Contributed by Barry Warsaw in [bpo-1198569](https://bugs.python.org/issue?@action=redirect&bpo=1198569).)
### subprocess[¶](https://docs.python.org/3/whatsnew/3.7.html#subprocess "Link to this heading")
The [`subprocess.run()`](https://docs.python.org/3/library/subprocess.html#subprocess.run "subprocess.run") function accepts the new _capture_output_ keyword argument. When true, stdout and stderr will be captured. This is equivalent to passing [`subprocess.PIPE`](https://docs.python.org/3/library/subprocess.html#subprocess.PIPE "subprocess.PIPE") as _stdout_ and _stderr_ arguments. (Contributed by Bo Bayles in [bpo-32102](https://bugs.python.org/issue?@action=redirect&bpo=32102).)
The `subprocess.run` function and the [`subprocess.Popen`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen "subprocess.Popen") constructor now accept the _text_ keyword argument as an alias to _universal_newlines_. (Contributed by Andrew Clegg in [bpo-31756](https://bugs.python.org/issue?@action=redirect&bpo=31756).)
On Windows the default for _close_fds_ was changed from `False` to `True` when redirecting the standard handles. It’s now possible to set _close_fds_ to true when redirecting the standard handles. See [`subprocess.Popen`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen "subprocess.Popen"). This means that _close_fds_ now defaults to `True` on all supported platforms. (Contributed by Segev Finer in [bpo-19764](https://bugs.python.org/issue?@action=redirect&bpo=19764).)
The subprocess module is now more graceful when handling [`KeyboardInterrupt`](https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt "KeyboardInterrupt") during [`subprocess.call()`](https://docs.python.org/3/library/subprocess.html#subprocess.call "subprocess.call"), [`subprocess.run()`](https://docs.python.org/3/library/subprocess.html#subprocess.run "subprocess.run"), or in a [`Popen`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen "subprocess.Popen") context manager. It now waits a short amount of time for the child to exit, before continuing the handling of the `KeyboardInterrupt` exception. (Contributed by Gregory P. Smith in [bpo-25942](https://bugs.python.org/issue?@action=redirect&bpo=25942).)
### sys[¶](https://docs.python.org/3/whatsnew/3.7.html#sys "Link to this heading")
The new [`sys.breakpointhook()`](https://docs.python.org/3/library/sys.html#sys.breakpointhook "sys.breakpointhook") hook function is called by the built-in [`breakpoint()`](https://docs.python.org/3/library/functions.html#breakpoint "breakpoint"). (Contributed by Barry Warsaw in [bpo-31353](https://bugs.python.org/issue?@action=redirect&bpo=31353).)
On Android, the new [`sys.getandroidapilevel()`](https://docs.python.org/3/library/sys.html#sys.getandroidapilevel "sys.getandroidapilevel") returns the build-time Android API version. (Contributed by Victor Stinner in [bpo-28740](https://bugs.python.org/issue?@action=redirect&bpo=28740).)
The new [`sys.get_coroutine_origin_tracking_depth()`](https://docs.python.org/3/library/sys.html#sys.get_coroutine_origin_tracking_depth "sys.get_coroutine_origin_tracking_depth") function returns the current coroutine origin tracking depth, as set by the new [`sys.set_coroutine_origin_tracking_depth()`](https://docs.python.org/3/library/sys.html#sys.set_coroutine_origin_tracking_depth "sys.set_coroutine_origin_tracking_depth"). [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O.") has been converted to use this new API instead of the deprecated `sys.set_coroutine_wrapper()`. (Contributed by Nathaniel J.