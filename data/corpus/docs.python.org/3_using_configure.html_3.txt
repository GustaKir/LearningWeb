Title: Python Configuration Options
URL: https://docs.python.org/3/using/configure.html
Summary: This section details various configuration options for Python, specifically `--with-platlibdir`, which sets the Python library directory name (default is 'lib', or 'lib64' for Fedora and SuSE on 64-bit systems), and `--with-wheel-pkg-dir`, which specifies the directory for wheel packages used by the `ensurepip` module (default is none, with some Linux distributions having specific recommendations).
---

--with-platlibdir=DIRNAME[¶](https://docs.python.org/3/using/configure.html#cmdoption-with-platlibdir "Link to this definition")
    
Python library directory name (default is `lib`).
Fedora and SuSE use `lib64` on 64-bit platforms.
See [`sys.platlibdir`](https://docs.python.org/3/library/sys.html#sys.platlibdir "sys.platlibdir").
Added in version 3.9. 

--with-wheel-pkg-dir=PATH[¶](https://docs.python.org/3/using/configure.html#cmdoption-with-wheel-pkg-dir "Link to this definition")
    
Directory of wheel packages used by the [`ensurepip`](https://docs.python.org/3/library/ensurepip.html#module-ensurepip "ensurepip: Bootstrapping the "pip" installer into an existing Python installation or virtual environment.") module (none by default).
Some Linux distribution packaging policies recommend against bundling dependencies. For example, Fedora installs wheel packages in the `/usr/share/python-wheels/` directory and don’t install the `ensurepip._bundled` package.
Added in version 3.10. 

--with-pkg-config=[check|yes|no][¶](https://docs.python.org/3/using/configure.html#cmdoption-with-pkg-config "Link to this definition")
    
Whether configure should use **pkg-config** to detect build dependencies.
  * `check` (default): **pkg-config** is optional
  * `yes`: **pkg-config** is mandatory
  * `no`: configure does not use **pkg-config** even when present


Added in version 3.11. 

--enable-pystats[¶](https://docs.python.org/3/using/configure.html#cmdoption-enable-pystats "Link to this definition")
    
Turn on internal Python performance statistics gathering.
By default, statistics gathering is off. Use `python3 -X pystats` command or set `PYTHONSTATS=1` environment variable to turn on statistics gathering at Python startup.
At Python exit, dump statistics if statistics gathering was on and not cleared.
Effects:
  * Add [`-X pystats`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) command line option.
  * Add `PYTHONSTATS` environment variable.
  * Define the `Py_STATS` macro.
  * Add functions to the [`sys`](https://docs.python.org/3/library/sys.html#module-sys "sys: Access system-specific parameters and functions.") module:
    * `sys._stats_on()`: Turns on statistics gathering.
    * `sys._stats_off()`: Turns off statistics gathering.
    * `sys._stats_clear()`: Clears the statistics.
    * `sys._stats_dump()`: Dump statistics to file, and clears the statistics.


The statistics will be dumped to a arbitrary (probably unique) file in `/tmp/py_stats/` (Unix) or `C:\temp\py_stats\` (Windows). If that directory does not exist, results will be printed on stderr.
Use `Tools/scripts/summarize_stats.py` to read the stats.
Statistics:
  * Opcode:
    * Specialization: success, failure, hit, deferred, miss, deopt, failures;
    * Execution count;
    * Pair count.
  * Call:
    * Inlined Python calls;
    * PyEval calls;
    * Frames pushed;
    * Frame object created;
    * Eval calls: vector, generator, legacy, function VECTORCALL, build class, slot, function “ex”, API, method.
  * Object:
    * incref and decref;
    * interpreter incref and decref;
    * allocations: all, 512 bytes, 4 kiB, big;
    * free;
    * to/from free lists;
    * dictionary materialized/dematerialized;
    * type cache;
    * optimization attempts;
    * optimization traces created/executed;
    * uops executed.
  * Garbage collector:
    * Garbage collections;
    * Objects visited;
    * Objects collected.


Added in version 3.11. 

--disable-gil[¶](https://docs.python.org/3/using/configure.html#cmdoption-disable-gil "Link to this definition")
    
Enables **experimental** support for running Python without the [global interpreter lock](https://docs.python.org/3/glossary.html#term-global-interpreter-lock) (GIL): free threading build.
Defines the `Py_GIL_DISABLED` macro and adds `"t"` to [`sys.abiflags`](https://docs.python.org/3/library/sys.html#sys.abiflags "sys.abiflags").
See [Free-threaded CPython](https://docs.python.org/3/whatsnew/3.13.html#whatsnew313-free-threaded-cpython) for more detail.
Added in version 3.13. 

--enable-experimental-jit=[no|yes|yes-off|interpreter][¶](https://docs.python.org/3/using/configure.html#cmdoption-enable-experimental-jit "Link to this definition")
    
Indicate how to integrate the [JIT compiler](https://docs.python.org/3/whatsnew/3.13.html#whatsnew313-jit-compiler).
  * `no` - build the interpreter without the JIT.
  * `yes` - build the interpreter with the JIT.
  * `yes-off` - build the interpreter with the JIT but disable it by default.
  * `interpreter` - build the interpreter without the JIT, but with the tier 2 enabled interpreter.


By convention, `--enable-experimental-jit` is a shorthand for `--enable-experimental-jit=yes`.
Note
When building CPython with JIT enabled, ensure that your system has Python 3.11 or later installed.
Added in version 3.13.