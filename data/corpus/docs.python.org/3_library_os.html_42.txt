Title: OS Module: Effective IDs and File Descriptors Support
URL: https://docs.python.org/3/library/os.html
Summary: The `_effective_ids_` feature is exclusive to Unix platforms and not available on Windows, added in version 3.3. The `os.supports_fd` set indicates which `os` module functions allow the use of open file descriptors as path parameters on different platforms, as this functionality varies across them. Users can check if a function accepts file descriptors by using the `in` operator on `supports_fd`.
---

```

Currently _effective_ids_ is only supported on Unix platforms; it does not work on Windows.
Added in version 3.3. 

os.supports_fd[¶](https://docs.python.org/3/library/os.html#os.supports_fd "Link to this definition")
    
A [`set`](https://docs.python.org/3/library/stdtypes.html#set "set") object indicating which functions in the [`os`](https://docs.python.org/3/library/os.html#module-os "os: Miscellaneous operating system interfaces.") module permit specifying their _path_ parameter as an open file descriptor on the local platform. Different platforms provide different features, and the underlying functionality Python uses to accept open file descriptors as _path_ arguments is not available on all platforms Python supports.
To determine whether a particular function permits specifying an open file descriptor for its _path_ parameter, use the `in` operator on `supports_fd`. As an example, this expression evaluates to `True` if [`os.chdir()`](https://docs.python.org/3/library/os.html#os.chdir "os.chdir") accepts open file descriptors for _path_ on your local platform:
```
os.chdir in os.supports_fd

```

Added in version 3.3. 

os.supports_follow_symlinks[¶](https://docs.python.org/3/library/os.html#os.supports_follow_symlinks "Link to this definition")
    
A [`set`](https://docs.python.org/3/library/stdtypes.html#set "set") object indicating which functions in the [`os`](https://docs.python.org/3/library/os.html#module-os "os: Miscellaneous operating system interfaces.") module accept `False` for their _follow_symlinks_ parameter on the local platform. Different platforms provide different features, and the underlying functionality Python uses to implement _follow_symlinks_ is not available on all platforms Python supports. For consistency’s sake, functions that may support _follow_symlinks_ always allow specifying the parameter, but will throw an exception if the functionality is used when it’s not locally available. (Specifying `True` for _follow_symlinks_ is always supported on all platforms.)
To check whether a particular function accepts `False` for its _follow_symlinks_ parameter, use the `in` operator on `supports_follow_symlinks`. As an example, this expression evaluates to `True` if you may specify `follow_symlinks=False` when calling [`os.stat()`](https://docs.python.org/3/library/os.html#os.stat "os.stat") on the local platform:
```
os.stat in os.supports_follow_symlinks