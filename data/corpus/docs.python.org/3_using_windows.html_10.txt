Title: Python Launcher Version Selection and Virtual Environments
URL: https://docs.python.org/3/using/windows.html
Summary: The Python launcher uses a short argument (-3) for selecting core Python releases and a longer argument (-V:3) for any version. The matching rules for version tags allow for specific prefixes and sort numerically. Additionally, if no explicit version is given and a virtual environment is active, the launcher runs the environment's Python version.
---

```

The short form of the argument (`-3`) only ever selects from core Python releases, and not other distributions. However, the longer form (`-V:3`) will select from any.
The Company is matched on the full string, case-insensitive. The Tag is matched on either the full string, or a prefix, provided the next character is a dot or a hyphen. This allows `-V:3.1` to match `3.1-32`, but not `3.10`. Tags are sorted using numerical ordering (`3.10` is newer than `3.1`), but are compared using text (`-V:3.01` does not match `3.1`).
#### 4.8.1.2. Virtual environments[¶](https://docs.python.org/3/using/windows.html#virtual-environments "Link to this heading")
Added in version 3.5.
If the launcher is run with no explicit Python version specification, and a virtual environment (created with the standard library [`venv`](https://docs.python.org/3/library/venv.html#module-venv "venv: Creation of virtual environments.") module or the external `virtualenv` tool) active, the launcher will run the virtual environment’s interpreter rather than the global one. To run the global interpreter, either deactivate the virtual environment, or explicitly specify the global Python version.
#### 4.8.1.3. From a script[¶](https://docs.python.org/3/using/windows.html#from-a-script "Link to this heading")
Let’s create a test Python script - create a file called `hello.py` with the following contents
```
#! python
importsys
sys.stdout.write("hello from Python %s\n" % (sys.version,))

```

From the directory in which hello.py lives, execute the command:
```
py hello.py

```

You should notice the version number of your latest Python 2.x installation is printed. Now try changing the first line to be:
```
#! python3

```

Re-executing the command should now print the latest Python 3.x information. As with the above command-line examples, you can specify a more explicit version qualifier. Assuming you have Python 3.7 installed, try changing the first line to `#! python3.7` and you should find the 3.7 version information printed.
Note that unlike interactive use, a bare “python” will use the latest version of Python 2.x that you have installed. This is for backward compatibility and for compatibility with Unix, where the command `python` typically refers to Python 2.
#### 4.8.1.4. From file associations[¶](https://docs.python.org/3/using/windows.html#from-file-associations "Link to this heading")
The launcher should have been associated with Python files (i.e. `.py`, `.pyw`, `.pyc` files) when it was installed. This means that when you double-click on one of these files from Windows explorer the launcher will be used, and therefore you can use the same facilities described above to have the script specify the version which should be used.
The key benefit of this is that a single launcher can support multiple Python versions at the same time depending on the contents of the first line.
### 4.8.2. Shebang Lines[¶](https://docs.python.org/3/using/windows.html#shebang-lines "Link to this heading")
If the first line of a script file starts with `#!`, it is known as a “shebang” line. Linux and other Unix like operating systems have native support for such lines and they are commonly used on such systems to indicate how a script should be executed. This launcher allows the same facilities to be used with Python scripts on Windows and the examples above demonstrate their use.
To allow shebang lines in Python scripts to be portable between Unix and Windows, this launcher supports a number of ‘virtual’ commands to specify which interpreter to use. The supported virtual commands are:
  * `/usr/bin/env`
  * `/usr/bin/python`
  * `/usr/local/bin/python`
  * `python`


For example, if the first line of your script starts with
```
#! /usr/bin/python