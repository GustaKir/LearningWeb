Title: PyObject_HasAttr Function Overview
URL: https://docs.python.org/3/c-api/object.html
Summary: The `PyObject_HasAttr` function checks if a given PyObject has a specified attribute, returning `1` if it does and `0` otherwise. It does not propagate exceptions from `__getattr__()` or `__getattribute__()`, directing them to `sys.unraisablehook()`. For better error handling, use `PyObject_HasAttrWithError()`.
---

intPyObject_HasAttr([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*attr_name)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_HasAttr "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Returns `1` if _o_ has the attribute _attr_name_ , and `0` otherwise. This function always succeeds.
Note
Exceptions that occur when this calls [`__getattr__()`](https://docs.python.org/3/reference/datamodel.html#object.__getattr__ "object.__getattr__") and [`__getattribute__()`](https://docs.python.org/3/reference/datamodel.html#object.__getattribute__ "object.__getattribute__") methods aren’t propagated, but instead given to [`sys.unraisablehook()`](https://docs.python.org/3/library/sys.html#sys.unraisablehook "sys.unraisablehook"). For proper error handling, use [`PyObject_HasAttrWithError()`](https://docs.python.org/3/c-api/object.html#c.PyObject_HasAttrWithError "PyObject_HasAttrWithError"), [`PyObject_GetOptionalAttr()`](https://docs.python.org/3/c-api/object.html#c.PyObject_GetOptionalAttr "PyObject_GetOptionalAttr") or [`PyObject_GetAttr()`](https://docs.python.org/3/c-api/object.html#c.PyObject_GetAttr "PyObject_GetAttr") instead. 

intPyObject_HasAttrString([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o, constchar*attr_name)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_HasAttrString "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
This is the same as [`PyObject_HasAttr()`](https://docs.python.org/3/c-api/object.html#c.PyObject_HasAttr "PyObject_HasAttr"), but _attr_name_ is specified as a constchar* UTF-8 encoded bytes string, rather than a [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*.
Note
Exceptions that occur when this calls [`__getattr__()`](https://docs.python.org/3/reference/datamodel.html#object.__getattr__ "object.__getattr__") and [`__getattribute__()`](https://docs.python.org/3/reference/datamodel.html#object.__getattribute__ "object.__getattribute__") methods or while creating the temporary [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") object are silently ignored. For proper error handling, use [`PyObject_HasAttrStringWithError()`](https://docs.python.org/3/c-api/object.html#c.PyObject_HasAttrStringWithError "PyObject_HasAttrStringWithError"), [`PyObject_GetOptionalAttrString()`](https://docs.python.org/3/c-api/object.html#c.PyObject_GetOptionalAttrString "PyObject_GetOptionalAttrString") or [`PyObject_GetAttrString()`](https://docs.python.org/3/c-api/object.html#c.PyObject_GetAttrString "PyObject_GetAttrString") instead. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyObject_GetAttr([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*attr_name)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_GetAttr "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Retrieve an attribute named _attr_name_ from object _o_. Returns the attribute value on success, or `NULL` on failure. This is the equivalent of the Python expression `o.attr_name`.
If the missing attribute should not be treated as a failure, you can use [`PyObject_GetOptionalAttr()`](https://docs.python.org/3/c-api/object.html#c.PyObject_GetOptionalAttr "PyObject_GetOptionalAttr") instead. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyObject_GetAttrString([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o, constchar*attr_name)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_GetAttrString "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
This is the same as [`PyObject_GetAttr()`](https://docs.python.org/3/c-api/object.html#c.PyObject_GetAttr "PyObject_GetAttr"), but _attr_name_ is specified as a constchar* UTF-8 encoded bytes string, rather than a [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*.
If the missing attribute should not be treated as a failure, you can use [`PyObject_GetOptionalAttrString()`](https://docs.python.org/3/c-api/object.html#c.PyObject_GetOptionalAttrString "PyObject_GetOptionalAttrString") instead.