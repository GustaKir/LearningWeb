Title: Turtle Graphics: Turning Commands
URL: https://docs.python.org/3/library/turtle.html
Summary: The `turtle.right()` and `turtle.left()` commands allow the turtle to turn by a specified angle. The angle can be set in degrees or radians, and the turtle's heading can be checked using `turtle.heading()`. The orientation of the angle depends on the turtle's mode.
---

```


turtle.right(_angle_)[¶](https://docs.python.org/3/library/turtle.html#turtle.right "Link to this definition")


turtle.rt(_angle_)[¶](https://docs.python.org/3/library/turtle.html#turtle.rt "Link to this definition")
     

Parameters:
    
**angle** – a number (integer or float)
Turn turtle right by _angle_ units. (Units are by default degrees, but can be set via the [`degrees()`](https://docs.python.org/3/library/turtle.html#turtle.degrees "turtle.degrees") and [`radians()`](https://docs.python.org/3/library/turtle.html#turtle.radians "turtle.radians") functions.) Angle orientation depends on the turtle mode, see [`mode()`](https://docs.python.org/3/library/turtle.html#turtle.mode "turtle.mode").
>>>```
>>> turtle.heading()
22.0
>>> turtle.right(45)
>>> turtle.heading()
337.0

```


turtle.left(_angle_)[¶](https://docs.python.org/3/library/turtle.html#turtle.left "Link to this definition")


turtle.lt(_angle_)[¶](https://docs.python.org/3/library/turtle.html#turtle.lt "Link to this definition")
     

Parameters:
    
**angle** – a number (integer or float)
Turn turtle left by _angle_ units. (Units are by default degrees, but can be set via the [`degrees()`](https://docs.python.org/3/library/turtle.html#turtle.degrees "turtle.degrees") and [`radians()`](https://docs.python.org/3/library/turtle.html#turtle.radians "turtle.radians") functions.) Angle orientation depends on the turtle mode, see [`mode()`](https://docs.python.org/3/library/turtle.html#turtle.mode "turtle.mode").
>>>```
>>> turtle.heading()
22.0
>>> turtle.left(45)
>>> turtle.heading()
67.0

```


turtle.goto(_x_ , _y =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.goto "Link to this definition")


turtle.setpos(_x_ , _y =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.setpos "Link to this definition")


turtle.setposition(_x_ , _y =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.setposition "Link to this definition")
     

Parameters:
    
  * **x** – a number or a pair/vector of numbers
  * **y** – a number or `None`


If _y_ is `None`, _x_ must be a pair of coordinates or a [`Vec2D`](https://docs.python.org/3/library/turtle.html#turtle.Vec2D "turtle.Vec2D") (e.g. as returned by [`pos()`](https://docs.python.org/3/library/turtle.html#turtle.pos "turtle.pos")).
Move turtle to an absolute position. If the pen is down, draw line. Do not change the turtle’s orientation.
>>>```
>>> tp = turtle.pos()
>>> tp
(0.00,0.00)
>>> turtle.setpos(60,30)
>>> turtle.pos()
(60.00,30.00)
>>> turtle.setpos((20,80))
>>> turtle.pos()
(20.00,80.00)
>>> turtle.setpos(tp)
>>> turtle.pos()
(0.00,0.00)

```


turtle.teleport(_x_ , _y =None_, _*_ , _fill_gap =False_)[¶](https://docs.python.org/3/library/turtle.html#turtle.teleport "Link to this definition")
     

Parameters:
    
  * **x** – a number or `None`
  * **y** – a number or `None`
  * **fill_gap** – a boolean


Move turtle to an absolute position. Unlike goto(x, y), a line will not be drawn. The turtle’s orientation does not change. If currently filling, the polygon(s) teleported from will be filled after leaving, and filling will begin again after teleporting. This can be disabled with fill_gap=True, which makes the imaginary line traveled during teleporting act as a fill barrier like in goto(x, y).
>>>```
>>> tp = turtle.pos()
>>> tp
(0.00,0.00)
>>> turtle.teleport(60)
>>> turtle.pos()
(60.00,0.00)
>>> turtle.teleport(y=10)
>>> turtle.pos()
(60.00,10.00)
>>> turtle.teleport(20, 30)
>>> turtle.pos()
(20.00,30.00)

```

Added in version 3.12. 

turtle.setx(_x_)[¶](https://docs.python.org/3/library/turtle.html#turtle.setx "Link to this definition")
     

Parameters:
    
**x** – a number (integer or float)
Set the turtle’s first coordinate to _x_ , leave second coordinate unchanged.
>>>```
>>> turtle.position()
(0.00,240.00)
>>> turtle.setx(10)
>>> turtle.position()
(10.00,240.00)

```


turtle.sety(_y_)[¶](https://docs.python.org/3/library/turtle.html#turtle.sety "Link to this definition")
     

Parameters:
    
**y** – a number (integer or float)
Set the turtle’s second coordinate to _y_ , leave first coordinate unchanged.
>>>```
>>> turtle.position()
(0.00,40.00)
>>> turtle.sety(-10)
>>> turtle.position()
(0.00,-10.00)

```


turtle.setheading(_to_angle_)[¶](https://docs.python.org/3/library/turtle.html#turtle.setheading "Link to this definition")


turtle.seth(_to_angle_)[¶](https://docs.python.org/3/library/turtle.html#turtle.seth "Link to this definition")
     

Parameters:
    
**to_angle** – a number (integer or float)
Set the orientation of the turtle to _to_angle_. Here are some common directions in degrees:
standard mode | logo mode  
---|---  
0 - east | 0 - north  
90 - north | 90 - east  
180 - west | 180 - south  
270 - south | 270 - west  
>>>```
>>> turtle.setheading(90)
>>> turtle.heading()
90.0