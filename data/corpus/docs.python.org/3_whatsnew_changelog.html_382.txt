Title: Python 3.10.0 Alpha 3 Release Notes
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This document outlines the release notes for Python 3.10.0 alpha 3, dated December 7, 2020. It includes security enhancements, specifically the addition of `volatile` to `hmac.compare_digest`, and updates in the core and builtins, such as a fix for `types.GenericAlias` that prevents a crash when initialized with a keyword argument.
---

## Python 3.10.0 alpha 3[¶](https://docs.python.org/3/whatsnew/changelog.html#python-3-10-0-alpha-3 "Link to this heading")
_Release date: 2020-12-07_
### Security[¶](https://docs.python.org/3/whatsnew/changelog.html#id336 "Link to this heading")
  * [bpo-40791](https://bugs.python.org/issue?@action=redirect&bpo=40791): Add `volatile` to the accumulator variable in `hmac.compare_digest`, making constant-time-defeating optimizations less likely.


### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id337 "Link to this heading")
  * [bpo-42576](https://bugs.python.org/issue?@action=redirect&bpo=42576): `types.GenericAlias` will now raise a `TypeError` when attempting to initialize with a keyword argument. Previously, this would cause the interpreter to crash if the interpreter was compiled with debug symbols. This does not affect interpreters compiled for release. Patch by Ken Jin.
  * [bpo-42536](https://bugs.python.org/issue?@action=redirect&bpo=42536): Several built-in and standard library types now ensure that their internal result tuples are always tracked by the [garbage collector](https://docs.python.org/3/glossary.html#term-garbage-collection):
    * [`collections.OrderedDict.items()`](https://docs.python.org/3/library/collections.html#collections.OrderedDict "collections.OrderedDict")
    * [`dict.items()`](https://docs.python.org/3/library/stdtypes.html#dict.items "dict.items")
    * [`enumerate()`](https://docs.python.org/3/library/functions.html#enumerate "enumerate")
    * [`functools.reduce()`](https://docs.python.org/3/library/functools.html#functools.reduce "functools.reduce")
    * [`itertools.combinations()`](https://docs.python.org/3/library/itertools.html#itertools.combinations "itertools.combinations")
    * [`itertools.combinations_with_replacement()`](https://docs.python.org/3/library/itertools.html#itertools.combinations_with_replacement "itertools.combinations_with_replacement")
    * [`itertools.permutations()`](https://docs.python.org/3/library/itertools.html#itertools.permutations "itertools.permutations")
    * [`itertools.product()`](https://docs.python.org/3/library/itertools.html#itertools.product "itertools.product")
    * [`itertools.zip_longest()`](https://docs.python.org/3/library/itertools.html#itertools.zip_longest "itertools.zip_longest")
    * [`zip()`](https://docs.python.org/3/library/functions.html#zip "zip")
Previously, they could have become untracked by a prior garbage collection. Patch by Brandt Bucher.
  * [bpo-42500](https://bugs.python.org/issue?@action=redirect&bpo=42500): Improve handling of exceptions near recursion limit. Converts a number of Fatal Errors in RecursionErrors.
  * [bpo-42246](https://bugs.python.org/issue?@action=redirect&bpo=42246): PEP 626: After a return, the f_lineno attribute of a frame is always the last line executed.
  * [bpo-42435](https://bugs.python.org/issue?@action=redirect&bpo=42435): Speed up comparison of bytes objects with non-bytes objects when option [`-b`](https://docs.python.org/3/using/cmdline.html#cmdoption-b) is specified. Speed up comparison of bytarray objects with non-buffer object.
  * [bpo-1635741](https://bugs.python.org/issue?@action=redirect&bpo=1635741): Port the `_warnings` extension module to the multi-phase initialization API ([**PEP 489**](https://peps.python.org/pep-0489/)). Patch by Victor Stinner.
  * [bpo-41686](https://bugs.python.org/issue?@action=redirect&bpo=41686): On Windows, the `SIGINT` event, `_PyOS_SigintEvent()`, is now created even if Python is configured to not install signal handlers (if [`PyConfig.install_signal_handlers`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.install_signal_handlers "PyConfig.install_signal_handlers") equals to 0, or `Py_InitializeEx(0)`).
  * [bpo-42381](https://bugs.python.org/issue?@action=redirect&bpo=42381): Allow assignment expressions in set literals and set comprehensions as per PEP 572. Patch by Pablo Galindo.
  * [bpo-42202](https://bugs.python.org/issue?@action=redirect&bpo=42202): Change function parameters annotations internal representation to tuple of strings. Patch provided by Yurii Karabas.
  * [bpo-42374](https://bugs.python.org/issue?@action=redirect&bpo=42374): Fix a regression introduced by the new parser, where an unparenthesized walrus operator was not allowed within generator expressions.
  * [bpo-42316](https://bugs.python.org/issue?@action=redirect&bpo=42316): Allow an unparenthesized walrus in subscript indexes.
  * [bpo-42349](https://bugs.python.org/issue?@action=redirect&bpo=42349): Make sure that the compiler front-end produces a well-formed control flow graph. Be more aggressive in the compiler back-end, as it is now safe to do so.
  * [bpo-42296](https://bugs.python.org/issue?@action=redirect&bpo=42296): On Windows, fix a regression in signal handling which prevented to interrupt a program using CTRL+C. The signal handler can be run in a thread different than the Python thread, in which cas