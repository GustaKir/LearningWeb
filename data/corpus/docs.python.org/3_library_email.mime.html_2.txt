Title: MIMEApplication Class in email.mime.application Module
URL: https://docs.python.org/3/library/email.mime.html
Summary: The MIMEApplication class, part of the email.mime.application module, extends MIMENonMultipart to handle MIME type application. It requires raw application data as bytes and allows optional specification of MIME subtype and encoder.
---

_class_ email.mime.application.MIMEApplication(__data_ , __subtype ='octet-stream'_, __encoder =email.encoders.encode_base64_, _*_ , _policy =compat32_, _** _params_)[¶](https://docs.python.org/3/library/email.mime.html#email.mime.application.MIMEApplication "Link to this definition")
    
Module: [`email.mime.application`](https://docs.python.org/3/library/email.mime.html#module-email.mime.application "email.mime.application")
A subclass of [`MIMENonMultipart`](https://docs.python.org/3/library/email.mime.html#email.mime.nonmultipart.MIMENonMultipart "email.mime.nonmultipart.MIMENonMultipart"), the [`MIMEApplication`](https://docs.python.org/3/library/email.mime.html#email.mime.application.MIMEApplication "email.mime.application.MIMEApplication") class is used to represent MIME message objects of major type _application_. __data_ contains the bytes for the raw application data. Optional __subtype_ specifies the MIME subtype and defaults to _octet-stream_.
Optional __encoder_ is a callable (i.e. function) which will perform the actual encoding of the data for transport. This callable takes one argument, which is the [`MIMEApplication`](https://docs.python.org/3/library/email.mime.html#email.mime.application.MIMEApplication "email.mime.application.MIMEApplication") instance. It should use [`get_payload()`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.get_payload "email.message.Message.get_payload") and [`set_payload()`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.set_payload "email.message.Message.set_payload") to change the payload to encoded form. It should also add any _Content-Transfer-Encoding_ or other headers to the message object as necessary. The default encoding is base64. See the [`email.encoders`](https://docs.python.org/3/library/email.encoders.html#module-email.encoders "email.encoders: Encoders for email message payloads.") module for a list of the built-in encoders.
Optional _policy_ argument defaults to [`compat32`](https://docs.python.org/3/library/email.policy.html#email.policy.Compat32 "email.policy.Compat32").
__params_ are passed straight through to the base class constructor.
Changed in version 3.6: Added _policy_ keyword-only parameter. 

_class_ email.mime.audio.MIMEAudio(__audiodata_ , __subtype =None_, __encoder =email.encoders.encode_base64_, _*_ , _policy =compat32_, _** _params_)[¶](https://docs.python.org/3/library/email.mime.html#email.mime.audio.MIMEAudio "Link to this definition")
    
Module: [`email.mime.audio`](https://docs.python.org/3/library/email.mime.html#module-email.mime.audio "email.mime.audio")
A subclass of [`MIMENonMultipart`](https://docs.python.org/3/library/email.mime.html#email.mime.nonmultipart.MIMENonMultipart "email.mime.nonmultipart.MIMENonMultipart"), the [`MIMEAudio`](https://docs.python.org/3/library/email.mime.html#email.mime.audio.MIMEAudio "email.mime.audio.MIMEAudio") class is used to create MIME message objects of major type _audio_. __audiodata_ contains the bytes for the raw audio data. If this data can be decoded as au, wav, aiff, or aifc, then the subtype will be automatically included in the _Content-Type_ header. Otherwise you can explicitly specify the audio subtype via the __subtype_ argument. If the minor type could not be guessed and __subtype_ was not given, then [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") is raised.
Optional __encoder_ is a callable (i.e. function) which will perform the actual encoding of the audio data for transport. This callable takes one argument, which is the [`MIMEAudio`](https://docs.python.org/3/library/email.mime.html#email.mime.audio.MIMEAudio "email.mime.audio.MIMEAudio") instance. It should use [`get_payload()`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.get_payload "email.message.Message.get_payload") and [`set_payload()`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.set_payload "email.message.Message.set_payload") to change the payload to encoded form. It should also add any _Content-Transfer-Encoding_ or other headers to the message object as necessary. The default encoding is base64. See the [`email.encoders`](https://docs.python.org/3/library/email.encoders.html#module-email.encoders "email.encoders: Encoders for email message payloads.") module for a list of the built-in encoders.
Optional _policy_ argument defaults to [`compat32`](https://docs.python.org/3/library/email.policy.html#email.policy.Compat32 "email.policy.Compat32").
__params_ are passed straight through to the base class constructor.
Changed in version 3.6: Added _policy_ keyword-only parameter.