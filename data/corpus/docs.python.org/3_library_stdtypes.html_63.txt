Title: Special Methods and Data Types in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This section discusses the customization of Python's built-in data types, including how to disable certain features and the equality of lists and tuples containing different numeric types. Additionally, it highlights the significance of cased characters in Python's categorization.
---

```

If you need to disable it entirely, set it to `0`.
Footnotes
[[1](https://docs.python.org/3/library/stdtypes.html#id1)]
Additional information on these special methods may be found in the Python Reference Manual ([Basic customization](https://docs.python.org/3/reference/datamodel.html#customization)).
[[2](https://docs.python.org/3/library/stdtypes.html#id2)]
As a consequence, the list `[1, 2]` is considered equal to `[1.0, 2.0]`, and similarly for tuples.
[[3](https://docs.python.org/3/library/stdtypes.html#id4)]
They must have since the parser can’t tell the type of the operands.
[4] ([1](https://docs.python.org/3/library/stdtypes.html#id6),[2](https://docs.python.org/3/library/stdtypes.html#id7),[3](https://docs.python.org/3/library/stdtypes.html#id8),[4](https://docs.python.org/3/library/stdtypes.html#id9))
Cased characters are those with general category property being one of “Lu” (Letter, uppercase), “Ll” (Letter, lowercase), or “Lt” (Letter, titlecase).
[5] ([1](https://docs.python.org/3/library/stdtypes.html#id10),[2](https://docs.python.org/3/library/stdtypes.html#id11))
To format only a tuple you should therefore provide a singleton tuple whose only element is the tuple to be formatted.
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [Built-in Types](https://docs.python.org/3/library/stdtypes.html)
    * [Truth Value Testing](https://docs.python.org/3/library/stdtypes.html#truth-value-testing)
    * [Boolean Operations — `and`, `or`, `not`](https://docs.python.org/3/library/stdtypes.html#boolean-operations-and-or-not)
    * [Comparisons](https://docs.python.org/3/library/stdtypes.html#comparisons)
    * [Numeric Types — `int`, `float`, `complex`](https://docs.python.org/3/library/stdtypes.html#numeric-types-int-float-complex)
      * [Bitwise Operations on Integer Types](https://docs.python.org/3/library/stdtypes.html#bitwise-operations-on-integer-types)
      * [Additional Methods on Integer Types](https://docs.python.org/3/library/stdtypes.html#additional-methods-on-integer-types)
      * [Additional Methods on Float](https://docs.python.org/3/library/stdtypes.html#additional-methods-on-float)
      * [Hashing of numeric types](https://docs.python.org/3/library/stdtypes.html#hashing-of-numeric-types)
    * [Boolean Type - `bool`](https://docs.python.org/3/library/stdtypes.html#boolean-type-bool)
    * [Iterator Types](https://docs.python.org/3/library/stdtypes.html#iterator-types)
      * [Generator Types](https://docs.python.org/3/library/stdtypes.html#generator-types)
    * [Sequence Types — `list`, `tuple`, `range`](https://docs.python.org/3/library/stdtypes.html#sequence-types-list-tuple-range)
      * [Common Sequence Operations](https://docs.python.org/3/library/stdtypes.html#common-sequence-operations)
      * [Immutable Sequence Types](https://docs.python.org/3/library/stdtypes.html#immutable-sequence-types)
      * [Mutable Sequence Types](https://docs.python.org/3/library/stdtypes.html#mutable-sequence-types)
      * [Lists](https://docs.python.org/3/library/stdtypes.html#lists)
      * [Tuples](https://docs.python.org/3/library/stdtypes.html#tuples)
      * [Ranges](https://docs.python.org/3/library/stdtypes.html#ranges)
    * [Text Sequence Type — `str`](https://docs.python.org/3/library/stdtypes.html#text-sequence-type-str)
      * [String Methods](https://docs.python.org/3/library/stdtypes.html#string-methods)
      * [Formatted String Literals (f-strings)](https://docs.python.org/3/library/stdtypes.html#formatted-string-literals-f-strings)
      * [`printf`-style String Formatting](https://docs.python.org/3/library/stdtypes.html#printf-style-string-formatting)
    * [Binary Sequence Types — `bytes`, `bytearray`, `memoryview`](https://docs.python.org/3/library/stdtypes.html#binary-sequence-types-bytes-bytearray-memoryview)
      * [Bytes Objects](https://docs.python.org/3/library/stdtypes.html#bytes-objects)
      * [Bytearray Objects](https://docs.python.org/3/library/stdtypes.html#bytearray-objects)
      * [Bytes and Bytearray Operations](https://docs.python.org/3/library/stdtypes.html#bytes-and-bytearray-operations)
      * [`printf`-style Bytes Formatting](https://docs.python.org/3/library/stdtypes.html#printf-style-bytes-formatting)
      * [Memory Views](https://docs.python.org/3/library/stdtypes.html#memory-views)
    * [Set Types — `set`, `frozenset`](https://docs.python.org/3/library/stdtypes.html#set-types-set-frozenset)
    * [Mapping Types — `dict`](https://docs.python.org/3/library/stdtypes.html#mapping-types-dict)
      * [Dictionary view objects](https://docs.python.org/3/library/stdtypes.html#dictionary-view-objects)
    * [Context Manager Types](https://docs.python.org/3/library/stdtypes.html#context-manager-types)
    * [Type Annotation Types — Generic Alias, Union](https://docs.python.org/3/library/stdtypes.html#type-annotation-types-generic-alias-union)
      * [Generic Alias Type](https://docs.python.org/3/library/stdtypes.html#generi