Title: os.DirEntry.stat Method
URL: https://docs.python.org/3/library/os.html
Summary: The `stat()` method of `os.DirEntry` returns a `stat_result` object for the entry, following symbolic links by default unless specified otherwise. On Unix, it always requires a system call, while on Windows, a system call is needed only if `follow_symlinks` is true and the entry is a reparse point. On Windows, certain attributes of `stat_result` are set to zero and may require a call to `os.stat()` for accurate retrieval.
---

stat(_*_ , _follow_symlinks =True_)[¶](https://docs.python.org/3/library/os.html#os.DirEntry.stat "Link to this definition")
    
Return a [`stat_result`](https://docs.python.org/3/library/os.html#os.stat_result "os.stat_result") object for this entry. This method follows symbolic links by default; to stat a symbolic link add the `follow_symlinks=False` argument.
On Unix, this method always requires a system call. On Windows, it only requires a system call if _follow_symlinks_ is `True` and the entry is a reparse point (for example, a symbolic link or directory junction).
On Windows, the `st_ino`, `st_dev` and `st_nlink` attributes of the [`stat_result`](https://docs.python.org/3/library/os.html#os.stat_result "os.stat_result") are always set to zero. Call [`os.stat()`](https://docs.python.org/3/library/os.html#os.stat "os.stat") to get these attributes.
The result is cached on the `os.DirEntry` object, with a separate cache for _follow_symlinks_ `True` and `False`. Call [`os.stat()`](https://docs.python.org/3/library/os.html#os.stat "os.stat") to fetch up-to-date information.
Note that there is a nice correspondence between several attributes and methods of `os.DirEntry` and of [`pathlib.Path`](https://docs.python.org/3/library/pathlib.html#pathlib.Path "pathlib.Path"). In particular, the `name` attribute has the same meaning, as do the `is_dir()`, `is_file()`, `is_symlink()`, `is_junction()`, and `stat()` methods.
Added in version 3.5.
Changed in version 3.6: Added support for the [`PathLike`](https://docs.python.org/3/library/os.html#os.PathLike "os.PathLike") interface. Added support for [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") paths on Windows.
Changed in version 3.12: The `st_ctime` attribute of a stat result is deprecated on Windows. The file creation time is properly available as `st_birthtime`, and in the future `st_ctime` may be changed to return zero or the metadata change time, if available. 

os.stat(_path_ , _*_ , _dir_fd =None_, _follow_symlinks =True_)[¶](https://docs.python.org/3/library/os.html#os.stat "Link to this definition")
    
Get the status of a file or a file descriptor. Perform the equivalent of a `stat()` system call on the given path. _path_ may be specified as either a string or bytes – directly or indirectly through the [`PathLike`](https://docs.python.org/3/library/os.html#os.PathLike "os.PathLike") interface – or as an open file descriptor. Return a [`stat_result`](https://docs.python.org/3/library/os.html#os.stat_result "os.stat_result") object.
This function normally follows symlinks; to stat a symlink add the argument `follow_symlinks=False`, or use [`lstat()`](https://docs.python.org/3/library/os.html#os.lstat "os.lstat").
This function can support [specifying a file descriptor](https://docs.python.org/3/library/os.html#path-fd) and [not following symlinks](https://docs.python.org/3/library/os.html#follow-symlinks).
On Windows, passing `follow_symlinks=False` will disable following all name-surrogate reparse points, which includes symlinks and directory junctions. Other types of reparse points that do not resemble links or that the operating system is unable to follow will be opened directly. When following a chain of multiple links, this may result in the original link being returned instead of the non-link that prevented full traversal. To obtain stat results for the final path in this case, use the [`os.path.realpath()`](https://docs.python.org/3/library/os.path.html#os.path.realpath "os.path.realpath") function to resolve the path name as far as possible and call [`lstat()`](https://docs.python.org/3/library/os.html#os.lstat "os.lstat") on the result. This does not apply to dangling symlinks or junction points, which will raise the usual exceptions.
Example:
>>>```
>>> importos
>>> statinfo = os.stat('somefile.txt')
>>> statinfo
os.stat_result(st_mode=33188, st_ino=7876932, st_dev=234881026,
st_nlink=1, st_uid=501, st_gid=501, st_size=264, st_atime=1297230295,
st_mtime=1297230027, st_ctime=1297230027)
>>> statinfo.st_size
264