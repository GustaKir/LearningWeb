Title: AST Module: Exception Handling with ExceptHandler
URL: https://docs.python.org/3/library/ast.html
Summary: This section demonstrates the use of the AST module in Python to parse and represent a syntax tree for exception handling. It introduces the `ExceptHandler` class, which represents a single `except` clause, detailing its attributes such as exception type, exception name, and body of the clause.
---

```
>>> print(ast.dump(ast.parse("""
... try:
...   ...
... except* Exception:
...   ...
... """), indent=4))
Module(
  body=[
    TryStar(
      body=[
        Expr(
          value=Constant(value=Ellipsis))],
      handlers=[
        ExceptHandler(
          type=Name(id='Exception', ctx=Load()),
          body=[
            Expr(
              value=Constant(value=Ellipsis))])])])

```

Added in version 3.11. 

_class_ ast.ExceptHandler(_type_ , _name_ , _body_)[¶](https://docs.python.org/3/library/ast.html#ast.ExceptHandler "Link to this definition")
    
A single `except` clause. `type` is the exception type it will match, typically a [`Name`](https://docs.python.org/3/library/ast.html#ast.Name "ast.Name") node (or `None` for a catch-all `except:` clause). `name` is a raw string for the name to hold the exception, or `None` if the clause doesn’t have `as foo`. `body` is a list of nodes.
>>>```
>>> print(ast.dump(ast.parse("""\
... try:
...   a + 1
... except TypeError:
...   pass
... """), indent=4))
Module(
  body=[
    Try(
      body=[
        Expr(
          value=BinOp(
            left=Name(id='a', ctx=Load()),
            op=Add(),
            right=Constant(value=1)))],
      handlers=[
        ExceptHandler(
          type=Name(id='TypeError', ctx=Load()),
          body=[
            Pass()])])])

```


_class_ ast.With(_items_ , _body_ , _type_comment_)[¶](https://docs.python.org/3/library/ast.html#ast.With "Link to this definition")
    
A `with` block. `items` is a list of [`withitem`](https://docs.python.org/3/library/ast.html#ast.withitem "ast.withitem") nodes representing the context managers, and `body` is the indented block inside the context. 

type_comment[¶](https://docs.python.org/3/library/ast.html#ast.With.type_comment "Link to this definition")
    
`type_comment` is an optional string with the type annotation as a comment. 

_class_ ast.withitem(_context_expr_ , _optional_vars_)[¶](https://docs.python.org/3/library/ast.html#ast.withitem "Link to this definition")
    
A single context manager in a `with` block. `context_expr` is the context manager, often a [`Call`](https://docs.python.org/3/library/ast.html#ast.Call "ast.Call") node. `optional_vars` is a [`Name`](https://docs.python.org/3/library/ast.html#ast.Name "ast.Name"), [`Tuple`](https://docs.python.org/3/library/ast.html#ast.Tuple "ast.Tuple") or [`List`](https://docs.python.org/3/library/ast.html#ast.List "ast.List") for the `as foo` part, or `None` if that isn’t used.
>>>```
>>> print(ast.dump(ast.parse("""\
... with a as b, c as d:
...   something(b, d)
... """), indent=4))
Module(
  body=[
    With(
      items=[
        withitem(
          context_expr=Name(id='a', ctx=Load()),
          optional_vars=Name(id='b', ctx=Store())),
        withitem(
          context_expr=Name(id='c', ctx=Load()),
          optional_vars=Name(id='d', ctx=Store()))],
      body=[
        Expr(
          value=Call(
            func=Name(id='something', ctx=Load()),
            args=[
              Name(id='b', ctx=Load()),
              Name(id='d', ctx=Load())]))])])

```

### Pattern matching[¶](https://docs.python.org/3/library/ast.html#pattern-matching "Link to this heading") 

_class_ ast.Match(_subject_ , _cases_)[¶](https://docs.python.org/3/library/ast.html#ast.Match "Link to this definition")
    
A `match` statement. `subject` holds the subject of the match (the object that is being matched against the cases) and `cases` contains an iterable of [`match_case`](https://docs.python.org/3/library/ast.html#ast.match_case "ast.match_case") nodes with the different cases.
Added in version 3.10. 

_class_ ast.match_case(_pattern_ , _guard_ , _body_)[¶](https://docs.python.org/3/library/ast.html#ast.match_case "Link to this definition")
    
A single case pattern in a `match` statement. `pattern` contains the match pattern that the subject will be matched against. Note that the [`AST`](https://docs.python.org/3/library/ast.html#ast.AST "ast.AST") nodes produced for patterns differ from those produced for expressions, even when they share the same syntax.
The `guard` attribute contains an expression that will be evaluated if the pattern matches the subject.
`body` contains a list of nodes to execute if the pattern matches and the result of evaluating the guard expression is true.
>>>