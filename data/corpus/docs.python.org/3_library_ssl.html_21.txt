Title: SSLContext Methods in Python SSL Library
URL: https://docs.python.org/3/library/ssl.html
Summary: This section covers two methods of the SSLContext class added in Python 3.6. The set_default_verify_paths() method loads default CA certificates but does not confirm success, while set_ciphers() allows setting available ciphers for socket creation using a specific string format.
---

```

Added in version 3.6. 

SSLContext.set_default_verify_paths()[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_default_verify_paths "Link to this definition")
    
Load a set of default “certification authority” (CA) certificates from a filesystem path defined when building the OpenSSL library. Unfortunately, there’s no easy way to know whether this method succeeds: no error is returned if no certificates are to be found. When the OpenSSL library is provided as part of the operating system, though, it is likely to be configured properly. 

SSLContext.set_ciphers(_ciphers_)[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_ciphers "Link to this definition")
    
Set the available ciphers for sockets created with this context. It should be a string in the [OpenSSL cipher list format](https://docs.openssl.org/master/man1/ciphers/). If no cipher can be selected (because compile-time options or other configuration forbids use of all the specified ciphers), an [`SSLError`](https://docs.python.org/3/library/ssl.html#ssl.SSLError "ssl.SSLError") will be raised.
Note
when connected, the [`SSLSocket.cipher()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.cipher "ssl.SSLSocket.cipher") method of SSL sockets will give the currently selected cipher.
TLS 1.3 cipher suites cannot be disabled with [`set_ciphers()`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_ciphers "ssl.SSLContext.set_ciphers"). 

SSLContext.set_alpn_protocols(_protocols_)[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_alpn_protocols "Link to this definition")
    
Specify which protocols the socket should advertise during the SSL/TLS handshake. It should be a list of ASCII strings, like `['http/1.1', 'spdy/2']`, ordered by preference. The selection of a protocol will happen during the handshake, and will play out according to [**RFC 7301**](https://datatracker.ietf.org/doc/html/rfc7301.html). After a successful handshake, the [`SSLSocket.selected_alpn_protocol()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.selected_alpn_protocol "ssl.SSLSocket.selected_alpn_protocol") method will return the agreed-upon protocol.
This method will raise [`NotImplementedError`](https://docs.python.org/3/library/exceptions.html#NotImplementedError "NotImplementedError") if [`HAS_ALPN`](https://docs.python.org/3/library/ssl.html#ssl.HAS_ALPN "ssl.HAS_ALPN") is `False`.
Added in version 3.5. 

SSLContext.set_npn_protocols(_protocols_)[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_npn_protocols "Link to this definition")
    
Specify which protocols the socket should advertise during the SSL/TLS handshake. It should be a list of strings, like `['http/1.1', 'spdy/2']`, ordered by preference. The selection of a protocol will happen during the handshake, and will play out according to the [Application Layer Protocol Negotiation](https://en.wikipedia.org/wiki/Application-Layer_Protocol_Negotiation). After a successful handshake, the [`SSLSocket.selected_npn_protocol()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.selected_npn_protocol "ssl.SSLSocket.selected_npn_protocol") method will return the agreed-upon protocol.
This method will raise [`NotImplementedError`](https://docs.python.org/3/library/exceptions.html#NotImplementedError "NotImplementedError") if [`HAS_NPN`](https://docs.python.org/3/library/ssl.html#ssl.HAS_NPN "ssl.HAS_NPN") is `False`.
Added in version 3.3.
Deprecated since version 3.10: NPN has been superseded by ALPN