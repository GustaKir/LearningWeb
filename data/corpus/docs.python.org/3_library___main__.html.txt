Title: __main__ — Top-level code environment in Python
URL: https://docs.python.org/3/library/__main__.html
Summary: This document provides an overview of the `__main__` module in Python, explaining its role as the top-level code environment. It covers the use of `__name__ == '__main__'`, ideal usage patterns, and considerations for packaging Python applications.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [`__main__` — Top-level code environment](https://docs.python.org/3/library/__main__.html)
    * [`__name__ == '__main__'`](https://docs.python.org/3/library/__main__.html#name-main)
      * [What is the “top-level code environment”?](https://docs.python.org/3/library/__main__.html#what-is-the-top-level-code-environment)
      * [Idiomatic Usage](https://docs.python.org/3/library/__main__.html#idiomatic-usage)
      * [Packaging Considerations](https://docs.python.org/3/library/__main__.html#packaging-considerations)
    * [`__main__.py` in Python Packages](https://docs.python.org/3/library/__main__.html#main-py-in-python-packages)
      * [Idiomatic Usage](https://docs.python.org/3/library/__main__.html#id1)
    * [`import __main__`](https://docs.python.org/3/library/__main__.html#import-main)


#### Previous topic
[`builtins` — Built-in objects](https://docs.python.org/3/library/builtins.html "previous chapter")
#### Next topic
[`warnings` — Warning control](https://docs.python.org/3/library/warnings.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/__main__.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/warnings.html "warnings — Warning control") |
  * [previous](https://docs.python.org/3/library/builtins.html "builtins — Built-in objects") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Python Runtime Services](https://docs.python.org/3/library/python.html) »
  * [`__main__` — Top-level code environment](https://docs.python.org/3/library/__main__.html)
  * | 
  * Theme  Auto Light Dark |


# `__main__` — Top-level code environment[¶](https://docs.python.org/3/library/__main__.html#module-__main__ "Link to this heading")
In Python, the special name `__main__` is used for two important constructs:
  1. the name of the top-level environment of the program, which can be checked using the `__name__ == '__main__'` expression; and
  2. the `__main__.py` file in Python packages.


Both of these mechanisms are related to Python modules; how users interact with them and how they interact with each other. They are explained in detail below. If you’re new to Python modules, see the tutorial section [Modules](https://docs.python.org/3/tutorial/modules.html#tut-modules) for an introduction.
## `__name__ == '__main__'`[¶](https://docs.python.org/3/library/__main__.html#name-main "Link to this heading")
When a Python module or package is imported, `__name__` is set to the module’s name. Usually, this is the name of the Python file itself without the `.py` extension:
>>>```
>>> importconfigparser
>>> configparser.__name__
'configparser'

```

If the file is part of a package, `__name__` will also include the parent package’s path:
>>>```
>>> fromconcurrent.futuresimport process
>>> process.__name__
'concurrent.futures.process'

```

However, if the module is executed in the top-level code environment, its `__name__` is set to the string `'__main__'`.
### What is the “top-level code environment”?[¶](https://docs.python.org/3/library/__main__.html#what-is-the-top-level-code-environment "Link to this heading")
`__main__` is the name of the environment where top-level code is run. “Top-level code” is the first user-specified Python module that starts running. It’s “top-level” because it imports all other modules that the program needs. Sometimes “top-level code” is called an _entry point_ to the application.
The top-level code environment can be:
  * the scope of an interactive prompt:
>>>```
>>> __name__
'__main__'

```

  * the Python module passed to the Python interpreter as a file argument:
```
$ pythonhelloworld.py
Hello, world!

```

  * the Python module or package passed to the Python interpreter with the [`-m`](https://docs.python.org/3/using/cmdline.html#cmdoption-m) argument: