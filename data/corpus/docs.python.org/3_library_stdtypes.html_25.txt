Title: str.translate() Method in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: The str.translate() method returns a copy of the string with characters mapped through a specified translation table. This table should enable indexing and can return mapped characters, None for deletion, or raise LookupError for self-mapping.
---

```


str.translate(_table_)[¶](https://docs.python.org/3/library/stdtypes.html#str.translate "Link to this definition")
    
Return a copy of the string in which each character has been mapped through the given translation table. The table must be an object that implements indexing via [`__getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__getitem__ "object.__getitem__"), typically a [mapping](https://docs.python.org/3/glossary.html#term-mapping) or [sequence](https://docs.python.org/3/glossary.html#term-sequence). When indexed by a Unicode ordinal (an integer), the table object can do any of the following: return a Unicode ordinal or a string, to map the character to one or more other characters; return `None`, to delete the character from the return string; or raise a [`LookupError`](https://docs.python.org/3/library/exceptions.html#LookupError "LookupError") exception, to map the character to itself.
You can use [`str.maketrans()`](https://docs.python.org/3/library/stdtypes.html#str.maketrans "str.maketrans") to create a translation map from character-to-character mappings in different formats.
See also the [`codecs`](https://docs.python.org/3/library/codecs.html#module-codecs "codecs: Encode and decode data and streams.") module for a more flexible approach to custom character mappings. 

str.upper()[¶](https://docs.python.org/3/library/stdtypes.html#str.upper "Link to this definition")
    
Return a copy of the string with all the cased characters [[4]](https://docs.python.org/3/library/stdtypes.html#id15) converted to uppercase. Note that `s.upper().isupper()` might be `False` if `s` contains uncased characters or if the Unicode category of the resulting character(s) is not “Lu” (Letter, uppercase), but e.g. “Lt” (Letter, titlecase).
The uppercasing algorithm used is [described in section 3.13 ‘Default Case Folding’ of the Unicode Standard](https://www.unicode.org/versions/Unicode15.1.0/ch03.pdf). 

str.zfill(_width_)[¶](https://docs.python.org/3/library/stdtypes.html#str.zfill "Link to this definition")
    
Return a copy of the string left filled with ASCII `'0'` digits to make a string of length _width_. A leading sign prefix (`'+'`/`'-'`) is handled by inserting the padding _after_ the sign character rather than before. The original string is returned if _width_ is less than or equal to `len(s)`.
For example:
>>>```
>>> "42".zfill(5)
'00042'
>>> "-42".zfill(5)
'-0042'

```

### Formatted String Literals (f-strings)[¶](https://docs.python.org/3/library/stdtypes.html#formatted-string-literals-f-strings "Link to this heading")
Added in version 3.6.
Changed in version 3.7: The [`await`](https://docs.python.org/3/reference/expressions.html#await) and [`async for`](https://docs.python.org/3/reference/compound_stmts.html#async-for) can be used in expressions within f-strings.
Changed in version 3.8: Added the debugging operator (`=`)
Changed in version 3.12: Many restrictions on expressions within f-strings have been removed. Notably, nested strings, comments, and backslashes are now permitted.
An _f-string_ (formally a _formatted string literal_) is a string literal that is prefixed with `f` or `F`. This type of string literal allows embedding arbitrary Python expressions within _replacement fields_ , which are delimited by curly brackets (`{}`). These expressions are evaluated at runtime, similarly to [`str.format()`](https://docs.python.org/3/library/stdtypes.html#str.format "str.format"), and are converted into regular [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") objects. For example:
>>>```
>>> who = 'nobody'
>>> nationality = 'Spanish'
>>> f'{who.title()} expects the {nationality} Inquisition!'
'Nobody expects the Spanish Inquisition!'

```

It is also possible to use a multi line f-string:
>>>```
>>> f'''This is a string
... on two lines'''
'This is a string\non two lines'

```

A single opening curly bracket, `'{'`, marks a _replacement field_ that can contain any Python expression:
>>>```
>>> nationality = 'Spanish'
>>> f'The {nationality} Inquisition!'
'The Spanish Inquisition!'

```

To include a literal `{` or `}`, use a double bracket:
>>>```
>>> x = 42
>>> f'{{x}} is {x}'
'{x} is 42'

```

Functions can also be used, and [format specifiers](https://docs.python.org/3/library/string.html#formatstrings):
>>>```
>>> frommathimport sqrt
>>> f'√2 \N{ALMOST EQUAL TO}{sqrt(2):.5f}'
'√2 ≈ 1.41421'

```

Any non-string expression is converted using [`str()`](https://docs.python.org/3/library/stdtypes.html#str "str"), by default:
>>>```
>>> fromfractionsimport Fraction
>>> f'{Fraction(1,3)}'
'1/3'