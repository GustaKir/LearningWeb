Title: SQLite3 Cursor Fetch Methods
URL: https://docs.python.org/3/library/sqlite3.html
Summary: This section describes the `fetchone()` and `fetchmany()` methods of the SQLite3 Cursor. `fetchone()` retrieves the next row from the query result as a tuple or processed by a row factory, returning None if no data is available. `fetchmany(_size)` returns the next set of rows as a list, with the number of rows to fetch determined by the _size parameter, or an empty list if no rows are left.
---

```


fetchone()[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.fetchone "Link to this definition")
    
If [`row_factory`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.row_factory "sqlite3.Cursor.row_factory") is `None`, return the next row query result set as a [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple"). Else, pass it to the row factory and return its result. Return `None` if no more data is available. 

fetchmany(_size =cursor.arraysize_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.fetchmany "Link to this definition")
    
Return the next set of rows of a query result as a [`list`](https://docs.python.org/3/library/stdtypes.html#list "list"). Return an empty list if no more rows are available.
The number of rows to fetch per call is specified by the _size_ parameter. If _size_ is not given, [`arraysize`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.arraysize "sqlite3.Cursor.arraysize") determines the number of rows to be fetched. If fewer than _size_ rows are available, as many rows as are available are returned.
Note there are performance considerations involved with the _size_ parameter. For optimal performance, it is usually best to use the arraysize attribute. If the _size_ parameter is used, then it is best for it to retain the same value from one [`fetchmany()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.fetchmany "sqlite3.Cursor.fetchmany") call to the next. 

fetchall()[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.fetchall "Link to this definition")
    
Return all (remaining) rows of a query result as a [`list`](https://docs.python.org/3/library/stdtypes.html#list "list"). Return an empty list if no rows are available. Note that the [`arraysize`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.arraysize "sqlite3.Cursor.arraysize") attribute can affect the performance of this operation. 

close()[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.close "Link to this definition")
    
Close the cursor now (rather than whenever `__del__` is called).
The cursor will be unusable from this point forward; a [`ProgrammingError`](https://docs.python.org/3/library/sqlite3.html#sqlite3.ProgrammingError "sqlite3.ProgrammingError") exception will be raised if any operation is attempted with the cursor. 

setinputsizes(_sizes_ , _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.setinputsizes "Link to this definition")
    
Required by the DB-API. Does nothing in `sqlite3`. 

setoutputsize(_size_ , _column =None_, _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.setoutputsize "Link to this definition")
    
Required by the DB-API. Does nothing in `sqlite3`. 

arraysize[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.arraysize "Link to this definition")
    
Read/write attribute that controls the number of rows returned by [`fetchmany()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.fetchmany "sqlite3.Cursor.fetchmany"). The default value is 1 which means a single row would be fetched per call. 

connection[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.connection "Link to this definition")
    
Read-only attribute that provides the SQLite database [`Connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection "sqlite3.Connection") belonging to the cursor. A [`Cursor`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor "sqlite3.Cursor") object created by calling [`con.cursor()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.cursor "sqlite3.Connection.cursor") will have a [`connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.connection "sqlite3.Cursor.connection") attribute that refers to _con_ :
>>>```
>>> con = sqlite3.connect(":memory:")
>>> cur = con.cursor()
>>> cur.connection == con
True
>>> con.close()