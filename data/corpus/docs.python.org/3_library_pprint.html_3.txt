Title: PrettyPrinter Methods and Version Changes
URL: https://docs.python.org/3/library/pprint.html
Summary: This section outlines recent changes to the pprint module in Python, including the addition of parameters in versions 3.4, 3.8, 3.10, and 3.11. It describes the methods of the PrettyPrinter class, specifically pformat, which returns a formatted representation of an object, and pprint, which prints the formatted representation to a specified stream.
---

```

Changed in version 3.4: Added the _compact_ parameter.
Changed in version 3.8: Added the _sort_dicts_ parameter.
Changed in version 3.10: Added the _underscore_numbers_ parameter.
Changed in version 3.11: No longer attempts to write to `sys.stdout` if it is `None`.
[`PrettyPrinter`](https://docs.python.org/3/library/pprint.html#pprint.PrettyPrinter "pprint.PrettyPrinter") instances have the following methods: 

PrettyPrinter.pformat(_object_)[¶](https://docs.python.org/3/library/pprint.html#pprint.PrettyPrinter.pformat "Link to this definition")
    
Return the formatted representation of _object_. This takes into account the options passed to the [`PrettyPrinter`](https://docs.python.org/3/library/pprint.html#pprint.PrettyPrinter "pprint.PrettyPrinter") constructor. 

PrettyPrinter.pprint(_object_)[¶](https://docs.python.org/3/library/pprint.html#pprint.PrettyPrinter.pprint "Link to this definition")
    
Print the formatted representation of _object_ on the configured stream, followed by a newline.
The following methods provide the implementations for the corresponding functions of the same names. Using these methods on an instance is slightly more efficient since new [`PrettyPrinter`](https://docs.python.org/3/library/pprint.html#pprint.PrettyPrinter "pprint.PrettyPrinter") objects don’t need to be created. 

PrettyPrinter.isreadable(_object_)[¶](https://docs.python.org/3/library/pprint.html#pprint.PrettyPrinter.isreadable "Link to this definition")
    
Determine if the formatted representation of the object is “readable,” or can be used to reconstruct the value using [`eval()`](https://docs.python.org/3/library/functions.html#eval "eval"). Note that this returns `False` for recursive objects. If the _depth_ parameter of the [`PrettyPrinter`](https://docs.python.org/3/library/pprint.html#pprint.PrettyPrinter "pprint.PrettyPrinter") is set and the object is deeper than allowed, this returns `False`. 

PrettyPrinter.isrecursive(_object_)[¶](https://docs.python.org/3/library/pprint.html#pprint.PrettyPrinter.isrecursive "Link to this definition")
    
Determine if the object requires a recursive representation.
This method is provided as a hook to allow subclasses to modify the way objects are converted to strings. The default implementation uses the internals of the [`saferepr()`](https://docs.python.org/3/library/pprint.html#pprint.saferepr "pprint.saferepr") implementation. 

PrettyPrinter.format(_object_ , _context_ , _maxlevels_ , _level_)[¶](https://docs.python.org/3/library/pprint.html#pprint.PrettyPrinter.format "Link to this definition")
    
Returns three values: the formatted version of _object_ as a string, a flag indicating whether the result is readable, and a flag indicating whether recursion was detected. The first argument is the object to be presented. The second is a dictionary which contains the [`id()`](https://docs.python.org/3/library/functions.html#id "id") of objects that are part of the current presentation context (direct and indirect containers for _object_ that are affecting the presentation) as the keys; if an object needs to be presented which is already represented in _context_ , the third return value should be `True`. Recursive calls to the [`format()`](https://docs.python.org/3/library/pprint.html#pprint.PrettyPrinter.format "pprint.PrettyPrinter.format") method should add additional entries for containers to this dictionary. The third argument, _maxlevels_ , gives the requested limit to recursion; this will be `0` if there is no requested limit. This argument should be passed unmodified to recursive calls. The fourth argument, _level_ , gives the current level; recursive calls should be passed a value less than that of the current call.
## Example[¶](https://docs.python.org/3/library/pprint.html#example "Link to this heading")
To demonstrate several uses of the [`pp()`](https://docs.python.org/3/library/pprint.html#pprint.pp "pprint.pp") function and its parameters, let’s fetch information about a project from [PyPI](https://pypi.org):
>>>```
>>> importjson
>>> importpprint
>>> fromurllib.requestimport urlopen
>>> with urlopen('https://pypi.org/pypi/sampleproject/1.2.0/json') as resp:
...   project_info = json.load(resp)['info']

```

In its basic form, [`pp()`](https://docs.python.org/3/library/pprint.html#pprint.pp "pprint.pp") shows the whole object:
>>>