Title: ast.FunctionType Class Overview
URL: https://docs.python.org/3/library/ast.html
Summary: The `ast.FunctionType` class represents old-style type comments for functions in Python prior to version 3.5, which lacked support for PEP 484 annotations. It is generated by `ast.parse()` when the mode is 'func_type' and is designed to handle arguments and return types as expression nodes.
---

```


_class_ ast.FunctionType(_argtypes_ , _returns_)[¶](https://docs.python.org/3/library/ast.html#ast.FunctionType "Link to this definition")
    
A representation of an old-style type comments for functions, as Python versions prior to 3.5 didn’t support [**PEP 484**](https://peps.python.org/pep-0484/) annotations. Node type generated by [`ast.parse()`](https://docs.python.org/3/library/ast.html#ast.parse "ast.parse") when _mode_ is `"func_type"`.
Such type comments would look like this:
```
defsum_two_number(a, b):
  # type: (int, int) -> int
  return a + b

```

`argtypes` is a [`list`](https://docs.python.org/3/library/stdtypes.html#list "list") of [expression nodes](https://docs.python.org/3/library/ast.html#ast-expressions).
`returns` is a single [expression node](https://docs.python.org/3/library/ast.html#ast-expressions).
>>>```
>>> print(ast.dump(ast.parse('(int, str) -> List[int]', mode='func_type'), indent=4))
FunctionType(
  argtypes=[
    Name(id='int', ctx=Load()),
    Name(id='str', ctx=Load())],
  returns=Subscript(
    value=Name(id='List', ctx=Load()),
    slice=Name(id='int', ctx=Load()),
    ctx=Load()))

```

Added in version 3.8.
### Literals[¶](https://docs.python.org/3/library/ast.html#literals "Link to this heading") 

_class_ ast.Constant(_value_)[¶](https://docs.python.org/3/library/ast.html#ast.Constant "Link to this definition")
    
A constant value. The `value` attribute of the `Constant` literal contains the Python object it represents. The values represented can be simple types such as a number, string or `None`, but also immutable container types (tuples and frozensets) if all of their elements are constant.
>>>```
>>> print(ast.dump(ast.parse('123', mode='eval'), indent=4))
Expression(
  body=Constant(value=123))

```


_class_ ast.FormattedValue(_value_ , _conversion_ , _format_spec_)[¶](https://docs.python.org/3/library/ast.html#ast.FormattedValue "Link to this definition")
    
Node representing a single formatting field in an f-string. If the string contains a single formatting field and nothing else the node can be isolated otherwise it appears in [`JoinedStr`](https://docs.python.org/3/library/ast.html#ast.JoinedStr "ast.JoinedStr").
  * `value` is any expression node (such as a literal, a variable, or a function call).
  * `conversion` is an integer:
    * -1: no formatting
    * 115: `!s` string formatting
    * 114: `!r` repr formatting
    * 97: `!a` ascii formatting
  * `format_spec` is a [`JoinedStr`](https://docs.python.org/3/library/ast.html#ast.JoinedStr "ast.JoinedStr") node representing the formatting of the value, or `None` if no format was specified. Both `conversion` and `format_spec` can be set at the same time.



_class_ ast.JoinedStr(_values_)[¶](https://docs.python.org/3/library/ast.html#ast.JoinedStr "Link to this definition")
    
An f-string, comprising a series of [`FormattedValue`](https://docs.python.org/3/library/ast.html#ast.FormattedValue "ast.FormattedValue") and [`Constant`](https://docs.python.org/3/library/ast.html#ast.Constant "ast.Constant") nodes.
>>>```
>>> print(ast.dump(ast.parse('f"sin({a}) is {sin(a):.3}"', mode='eval'), indent=4))
Expression(
  body=JoinedStr(
    values=[
      Constant(value='sin('),
      FormattedValue(
        value=Name(id='a', ctx=Load()),
        conversion=-1),
      Constant(value=') is '),
      FormattedValue(
        value=Call(
          func=Name(id='sin', ctx=Load()),
          args=[
            Name(id='a', ctx=Load())]),
        conversion=-1,
        format_spec=JoinedStr(
          values=[
            Constant(value='.3')]))]))

```


_class_ ast.List(_elts_ , _ctx_)[¶](https://docs.python.org/3/library/ast.html#ast.List "Link to this definition")


_class_ ast.Tuple(_elts_ , _ctx_)[¶](https://docs.python.org/3/library/ast.html#ast.Tuple "Link to this definition")
    
A list or tuple. `elts` holds a list of nodes representing the elements. `ctx` is [`Store`](https://docs.python.org/3/library/ast.html#ast.Store "ast.Store") if the container is an assignment target (i.e. `(x,y)=something`), and [`Load`](https://docs.python.org/3/library/ast.html#ast.Load "ast.Load") otherwise.
>>>```
>>> print(ast.dump(ast.parse('[1, 2, 3]', mode='eval'), indent=4))
Expression(
  body=List(
    elts=[
      Constant(value=1),
      Constant(value=2),
      Constant(value=3)],
    ctx=Load()))
>>> print(ast.dump(ast.parse('(1, 2, 3)', mode='eval'), indent=4))
Expression(
  body=Tuple(
    elts=[
      Constant(value=1),
      Constant(value=2),
      Constant(value=3)],
    ctx=Load()))

```


_class_ ast.Set(_elts_)[¶](https://docs.python.org/3/library/ast.html#ast.Set "Link to this definition")
    
A set. `elts` holds a list of nodes representing the set’s elements.
>>>```
>>> print(ast.dump(ast.parse('{1, 2, 3}', mode='eval'), indent=4))
Expression(
  body=Set(
    elts=[
      Constant(value=1),
      Constant(value=2),
      Constant(value=3)]))