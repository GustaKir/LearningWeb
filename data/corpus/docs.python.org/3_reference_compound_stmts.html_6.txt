Title: Handling Exceptions with `except*` and `else` Clauses
URL: https://docs.python.org/3/reference/compound_stmts.html
Summary: The `except*` clause requires a matching expression and cannot be left empty. It cannot include exception group types to avoid ambiguity. Mixing `except` and `except*` within the same `try` block is prohibited. Additionally, `break`, `continue`, and `return` statements are not allowed in an `except*` clause. The optional `else` clause executes if the `try` block completes without raising an exception.
---

```

An `except*` clause must have a matching expression; it cannot be `except*:`. Furthermore, this expression cannot contain exception group types, because that would have ambiguous semantics.
It is not possible to mix [`except`](https://docs.python.org/3/reference/compound_stmts.html#except) and `except*` in the same [`try`](https://docs.python.org/3/reference/compound_stmts.html#try). [`break`](https://docs.python.org/3/reference/simple_stmts.html#break), [`continue`](https://docs.python.org/3/reference/simple_stmts.html#continue) and [`return`](https://docs.python.org/3/reference/simple_stmts.html#return) cannot appear in an `except*` clause.
### 8.4.3. `else` clause[¶](https://docs.python.org/3/reference/compound_stmts.html#else-clause "Link to this heading")
The optional `else` clause is executed if the control flow leaves the [`try`](https://docs.python.org/3/reference/compound_stmts.html#try) suite, no exception was raised, and no [`return`](https://docs.python.org/3/reference/simple_stmts.html#return), [`continue`](https://docs.python.org/3/reference/simple_stmts.html#continue), or [`break`](https://docs.python.org/3/reference/simple_stmts.html#break) statement was executed. Exceptions in the `else` clause are not handled by the preceding [`except`](https://docs.python.org/3/reference/compound_stmts.html#except) clauses.
### 8.4.4. `finally` clause[¶](https://docs.python.org/3/reference/compound_stmts.html#finally-clause "Link to this heading")
If `finally` is present, it specifies a ‘cleanup’ handler. The [`try`](https://docs.python.org/3/reference/compound_stmts.html#try) clause is executed, including any [`except`](https://docs.python.org/3/reference/compound_stmts.html#except) and [`else`](https://docs.python.org/3/reference/compound_stmts.html#else) clauses. If an exception occurs in any of the clauses and is not handled, the exception is temporarily saved. The `finally` clause is executed. If there is a saved exception it is re-raised at the end of the `finally` clause. If the `finally` clause raises another exception, the saved exception is set as the context of the new exception. If the `finally` clause executes a [`return`](https://docs.python.org/3/reference/simple_stmts.html#return), [`break`](https://docs.python.org/3/reference/simple_stmts.html#break) or [`continue`](https://docs.python.org/3/reference/simple_stmts.html#continue) statement, the saved exception is discarded:
>>>```
>>> deff():
...   try:
...     1/0
...   finally:
...     return 42
...
>>> f()
42

```

The exception information is not available to the program during execution of the `finally` clause.
When a [`return`](https://docs.python.org/3/reference/simple_stmts.html#return), [`break`](https://docs.python.org/3/reference/simple_stmts.html#break) or [`continue`](https://docs.python.org/3/reference/simple_stmts.html#continue) statement is executed in the [`try`](https://docs.python.org/3/reference/compound_stmts.html#try) suite of a `try`…`finally` statement, the `finally` clause is also executed ‘on the way out.’
The return value of a function is determined by the last [`return`](https://docs.python.org/3/reference/simple_stmts.html#return) statement executed. Since the `finally` clause always executes, a `return` statement executed in the `finally` clause will always be the last one executed:
>>>```
>>> deffoo():
...   try:
...     return 'try'
...   finally:
...     return 'finally'
...
>>> foo()
'finally'

```

Changed in version 3.8: Prior to Python 3.8, a [`continue`](https://docs.python.org/3/reference/simple_stmts.html#continue) statement was illegal in the `finally` clause due to a problem with the implementation.
## 8.5. The `with` statement[¶](https://docs.python.org/3/reference/compound_stmts.html#the-with-statement "Link to this heading")
The [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement is used to wrap the execution of a block with methods defined by a context manager (see section [With Statement Context Managers](https://docs.python.org/3/reference/datamodel.html#context-managers)). This allows common [`try`](https://docs.python.org/3/reference/compound_stmts.html#try)…[`except`](https://docs.python.org/3/reference/compound_stmts.html#except)…[`finally`](https://docs.python.org/3/reference/compound_stmts.html#finally) usage patterns to be encapsulated for convenient reuse.