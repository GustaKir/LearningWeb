Title: Notable Features Back-ported to Python 2.6
URL: https://docs.python.org/3/whatsnew/3.0.html
Summary: This section highlights features that were initially developed for Python 3.0 but were also included in Python 2.6, allowing users transitioning from Python 2.5 to familiarize themselves with these updates. Notable among them is PEP 343, which introduces the 'with' statement as a standard feature.
---

## Changes Already Present In Python 2.6[¶](https://docs.python.org/3/whatsnew/3.0.html#changes-already-present-in-python-2-6 "Link to this heading")
Since many users presumably make the jump straight from Python 2.5 to Python 3.0, this section reminds the reader of new features that were originally designed for Python 3.0 but that were back-ported to Python 2.6. The corresponding sections in [What’s New in Python 2.6](https://docs.python.org/3/whatsnew/2.6.html#whats-new-in-2-6) should be consulted for longer descriptions.
  * [PEP 343: The ‘with’ statement](https://docs.python.org/3/whatsnew/2.6.html#pep-0343). The [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement is now a standard feature and no longer needs to be imported from the [`__future__`](https://docs.python.org/3/library/__future__.html#module-__future__ "__future__: Future statement definitions"). Also check out [Writing Context Managers](https://docs.python.org/3/whatsnew/2.6.html#new-26-context-managers) and [The contextlib module](https://docs.python.org/3/whatsnew/2.6.html#new-module-contextlib).
  * [PEP 366: Explicit Relative Imports From a Main Module](https://docs.python.org/3/whatsnew/2.6.html#pep-0366). This enhances the usefulness of the [`-m`](https://docs.python.org/3/using/cmdline.html#cmdoption-m) option when the referenced module lives in a package.
  * [PEP 370: Per-user site-packages Directory](https://docs.python.org/3/whatsnew/2.6.html#pep-0370).
  * [PEP 371: The multiprocessing Package](https://docs.python.org/3/whatsnew/2.6.html#pep-0371).
  * [PEP 3101: Advanced String Formatting](https://docs.python.org/3/whatsnew/2.6.html#pep-3101). Note: the 2.6 description mentions the [`format()`](https://docs.python.org/3/library/functions.html#format "format") method for both 8-bit and Unicode strings. In 3.0, only the [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") type (text strings with Unicode support) supports this method; the [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") type does not. The plan is to eventually make this the only API for string formatting, and to start deprecating the `%` operator in Python 3.1.
  * [PEP 3105: print As a Function](https://docs.python.org/3/whatsnew/2.6.html#pep-3105). This is now a standard feature and no longer needs to be imported from [`__future__`](https://docs.python.org/3/library/__future__.html#module-__future__ "__future__: Future statement definitions"). More details were given above.
  * [PEP 3110: Exception-Handling Changes](https://docs.python.org/3/whatsnew/2.6.html#pep-3110). The [`except`](https://docs.python.org/3/reference/compound_stmts.html#except) _exc_ `as` _var_ syntax is now standard and `except` _exc_ , _var_ is no longer supported. (Of course, the `as` _var_ part is still optional.)
  * [PEP 3112: Byte Literals](https://docs.python.org/3/whatsnew/2.6.html#pep-3112). The `b"..."` string literal notation (and its variants like `b'...'`, `b"""..."""`, and `br"..."`) now produces a literal of type [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes").
  * [PEP 3116: New I/O Library](https://docs.python.org/3/whatsnew/2.6.html#pep-3116). The [`io`](https://docs.python.org/3/library/io.html#module-io "io: Core tools for working with streams.") module is now the standard way of doing file I/O. The built-in [`open()`](https://docs.python.org/3/library/functions.html#open "open") function is now an alias for [`io.open()`](https://docs.python.org/3/library/io.html#io.open "io.open") and has additional keyword arguments _encoding_ , _errors_ , _newline_ and _closefd_. Also note that an invalid _mode_ argument now raises [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError"), not [`IOError`](https://docs.python.org/3/library/exceptions.html#IOError "IOError"). The binary file object underlying a text file object can be accessed as `f.buffer` (but beware that the text object maintains a buffer of itself in order to speed up the encoding and decoding operations).
  * [PEP 3118: Revised Buffer Protocol](https://docs.python.org/3/whatsnew/2.6.html#pep-3118). The old builtin `buffer()` is now really gone; the new builtin [`memoryview()`](https://docs.python.org/3/library/stdtypes.html#memoryview "memoryview") provides (mostly) similar functionality.
  * [PEP 3119: Abstract Base Classes](https://docs.python.org/3/whatsnew/2.6.html#pep-3119). The [`abc`](https://docs.python.org/3/library/abc.html#module-abc "abc: Abstract base classes according to :pep:`3119`.") module and the ABCs defined in the [`collections`](https://docs.python.org/3/library/collections.html#module-collections "collections: Container datatypes") module plays a somewhat more prominent role in the language now, and built-in collection types like [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") and [`list`](https://docs.python.org/3/library/stdtypes.html#list "list")