Title: Sending Messages to the System Logger in Python
URL: https://docs.python.org/3/library/syslog.html
Summary: The `syslog.syslog()` function sends a message to the system logger with an optional priority, which defaults to `LOG_INFO`. Messages can be tagged with a facility and level. If `openlog()` hasn’t been called before `syslog()`, it will be invoked automatically.
---

syslog.syslog(_priority_ , _message_)
    
Send the string _message_ to the system logger. A trailing newline is added if necessary. Each message is tagged with a priority composed of a _facility_ and a _level_. The optional _priority_ argument, which defaults to [`LOG_INFO`](https://docs.python.org/3/library/syslog.html#syslog.LOG_INFO "syslog.LOG_INFO"), determines the message priority. If the facility is not encoded in _priority_ using logical-or (`LOG_INFO | LOG_USER`), the value given in the [`openlog()`](https://docs.python.org/3/library/syslog.html#syslog.openlog "syslog.openlog") call is used.
If [`openlog()`](https://docs.python.org/3/library/syslog.html#syslog.openlog "syslog.openlog") has not been called prior to the call to [`syslog()`](https://docs.python.org/3/library/syslog.html#module-syslog "syslog: An interface to the Unix syslog library routines. \(Unix\)"), [`openlog()`](https://docs.python.org/3/library/syslog.html#syslog.openlog "syslog.openlog") will be called with no arguments.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `syslog.syslog` with arguments `priority`, `message`.
Changed in version 3.2: In previous versions, [`openlog()`](https://docs.python.org/3/library/syslog.html#syslog.openlog "syslog.openlog") would not be called automatically if it wasn’t called prior to the call to [`syslog()`](https://docs.python.org/3/library/syslog.html#module-syslog "syslog: An interface to the Unix syslog library routines. \(Unix\)"), deferring to the syslog implementation to call `openlog()`.
Changed in version 3.12: This function is restricted in subinterpreters. (Only code that runs in multiple interpreters is affected and the restriction is not relevant for most users.) [`openlog()`](https://docs.python.org/3/library/syslog.html#syslog.openlog "syslog.openlog") must be called in the main interpreter before [`syslog()`](https://docs.python.org/3/library/syslog.html#module-syslog "syslog: An interface to the Unix syslog library routines. \(Unix\)") may be used in a subinterpreter. Otherwise it will raise [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError"). 

syslog.openlog([_ident_[, _logoption_[, _facility_]]])[¶](https://docs.python.org/3/library/syslog.html#syslog.openlog "Link to this definition")
    
Logging options of subsequent [`syslog()`](https://docs.python.org/3/library/syslog.html#module-syslog "syslog: An interface to the Unix syslog library routines. \(Unix\)") calls can be set by calling [`openlog()`](https://docs.python.org/3/library/syslog.html#syslog.openlog "syslog.openlog"). [`syslog()`](https://docs.python.org/3/library/syslog.html#module-syslog "syslog: An interface to the Unix syslog library routines. \(Unix\)") will call [`openlog()`](https://docs.python.org/3/library/syslog.html#syslog.openlog "syslog.openlog") with no arguments if the log is not currently open.
The optional _ident_ keyword argument is a string which is prepended to every message, and defaults to `sys.argv[0]` with leading path components stripped. The optional _logoption_ keyword argument (default is 0) is a bit field – see below for possible values to combine. The optional _facility_ keyword argument (default is [`LOG_USER`](https://docs.python.org/3/library/syslog.html#syslog.LOG_USER "syslog.LOG_USER")) sets the default facility for messages which do not have a facility explicitly encoded.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `syslog.openlog` with arguments `ident`, `logoption`, `facility`.
Changed in version 3.2: In previous versions, keyword arguments were not allowed, and _ident_ was required.
Changed in version 3.12: This function is restricted in subinterpreters. (Only code that runs in multiple interpreters is affected and the restriction is not relevant for most users.) This may only be called in the main interpreter. It will raise [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError") if called in a subinterpreter.