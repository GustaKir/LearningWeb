Title: Other CPython Implementation Changes in Python 3.11
URL: https://docs.python.org/3/whatsnew/3.11.html
Summary: Python 3.11 introduces special methods `__complex__()` and `__bytes__()` for `complex` and `bytes` types to support the `typing.SupportsComplex` and `typing.SupportsBytes` protocols. Additionally, a new internal algorithm `siphash13` has been added.
---

## Other CPython Implementation Changes[¶](https://docs.python.org/3/whatsnew/3.11.html#other-cpython-implementation-changes "Link to this heading")
  * The special methods [`__complex__()`](https://docs.python.org/3/reference/datamodel.html#object.__complex__ "object.__complex__") for [`complex`](https://docs.python.org/3/library/functions.html#complex "complex") and [`__bytes__()`](https://docs.python.org/3/reference/datamodel.html#object.__bytes__ "object.__bytes__") for [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") are implemented to support the [`typing.SupportsComplex`](https://docs.python.org/3/library/typing.html#typing.SupportsComplex "typing.SupportsComplex") and [`typing.SupportsBytes`](https://docs.python.org/3/library/typing.html#typing.SupportsBytes "typing.SupportsBytes") protocols. (Contributed by Mark Dickinson and Donghee Na in [bpo-24234](https://bugs.python.org/issue?@action=redirect&bpo=24234).)
  * `siphash13` is added as a new internal hashing algorithm. It has similar security properties as `siphash24`, but it is slightly faster for long inputs. [`str`](https://docs.python.org/3/library/stdtypes.html#str "str"), [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes"), and some other types now use it as the default algorithm for [`hash()`](https://docs.python.org/3/library/functions.html#hash "hash"). [**PEP 552**](https://peps.python.org/pep-0552/) [hash-based .pyc files](https://docs.python.org/3/reference/import.html#pyc-invalidation) now use `siphash13` too. (Contributed by Inada Naoki in [bpo-29410](https://bugs.python.org/issue?@action=redirect&bpo=29410).)
  * When an active exception is re-raised by a [`raise`](https://docs.python.org/3/reference/simple_stmts.html#raise) statement with no parameters, the traceback attached to this exception is now always `sys.exc_info()[1].__traceback__`. This means that changes made to the traceback in the current [`except`](https://docs.python.org/3/reference/compound_stmts.html#except) clause are reflected in the re-raised exception. (Contributed by Irit Katriel in [bpo-45711](https://bugs.python.org/issue?@action=redirect&bpo=45711).)
  * The interpreter state’s representation of handled exceptions (aka `exc_info` or `_PyErr_StackItem`) now only has the `exc_value` field; `exc_type` and `exc_traceback` have been removed, as they can be derived from `exc_value`. (Contributed by Irit Katriel in [bpo-45711](https://bugs.python.org/issue?@action=redirect&bpo=45711).)
  * A new [command line option](https://docs.python.org/3/using/windows.html#install-quiet-option), `AppendPath`, has been added for the Windows installer. It behaves similarly to `PrependPath`, but appends the install and scripts directories instead of prepending them. (Contributed by Bastian Neuburger in [bpo-44934](https://bugs.python.org/issue?@action=redirect&bpo=44934).)
  * The [`PyConfig.module_search_paths_set`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.module_search_paths_set "PyConfig.module_search_paths_set") field must now be set to `1` for initialization to use [`PyConfig.module_search_paths`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.module_search_paths "PyConfig.module_search_paths") to initialize [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path"). Otherwise, initialization will recalculate the path and replace any values added to `module_search_paths`.
  * The output of the [`--help`](https://docs.python.org/3/using/cmdline.html#cmdoption-help) option now fits in 50 lines/80 columns. Information about [Python environment variables](https://docs.python.org/3/using/cmdline.html#using-on-envvars) and [`-X`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) options is now available using the respective [`--help-env`](https://docs.python.org/3/using/cmdline.html#cmdoption-help-env) and [`--help-xoptions`](https://docs.python.org/3/using/cmdline.html#cmdoption-help-xoptions) flags, and with the new [`--help-all`](https://docs.python.org/3/using/cmdline.html#cmdoption-help-all). (Contributed by Éric Araujo in [bpo-46142](https://bugs.python.org/issue?@action=redirect&bpo=46142).)
  * Converting between [`int`](https://docs.python.org/3/library/functions.html#int "int") and [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") in bases other than 2 (binary), 4, 8 (octal), 16 (hexadecimal), or 32 such as base 10 (decimal) now raises a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if the number of digits in string form is above a limit to avoid potential denial of service attacks due to the algorithmic complexity. This is a mitigation for [**CVE 2020-10735**](https://www.cve.org/CVERecord?id=CVE-2020-10735). This limit can be configured or disabled by environment variable, command line flag, or [`sys`](https://docs.python.org/3/library/sys.html#module-sys "sys: Access system-specific parameters and funct