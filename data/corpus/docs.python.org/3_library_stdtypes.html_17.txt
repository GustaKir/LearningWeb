Title: Understanding the str() Constructor in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: The 'str()' constructor converts an input object to its string representation, returning an empty string if no object is provided. If neither encoding nor errors are specified, it calls the object's __str__ method for the representation; otherwise, it defaults to the repr() function if __str__ is unavailable.
---

_class_ str(_object =b''_, _encoding ='utf-8'_, _errors ='strict'_)
    
Return a [string](https://docs.python.org/3/library/stdtypes.html#textseq) version of _object_. If _object_ is not provided, returns the empty string. Otherwise, the behavior of `str()` depends on whether _encoding_ or _errors_ is given, as follows.
If neither _encoding_ nor _errors_ is given, `str(object)` returns [`type(object).__str__(object)`](https://docs.python.org/3/reference/datamodel.html#object.__str__ "object.__str__"), which is the “informal” or nicely printable string representation of _object_. For string objects, this is the string itself. If _object_ does not have a [`__str__()`](https://docs.python.org/3/reference/datamodel.html#object.__str__ "object.__str__") method, then [`str()`](https://docs.python.org/3/library/stdtypes.html#str "str") falls back to returning [`repr(object)`](https://docs.python.org/3/library/functions.html#repr "repr").
If at least one of _encoding_ or _errors_ is given, _object_ should be a [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object) (e.g. [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") or [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray")). In this case, if _object_ is a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") (or [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray")) object, then `str(bytes, encoding, errors)` is equivalent to [`bytes.decode(encoding, errors)`](https://docs.python.org/3/library/stdtypes.html#bytes.decode "bytes.decode"). Otherwise, the bytes object underlying the buffer object is obtained before calling [`bytes.decode()`](https://docs.python.org/3/library/stdtypes.html#bytes.decode "bytes.decode"). See [Binary Sequence Types — bytes, bytearray, memoryview](https://docs.python.org/3/library/stdtypes.html#binaryseq) and [Buffer Protocol](https://docs.python.org/3/c-api/buffer.html#bufferobjects) for information on buffer objects.
Passing a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") object to [`str()`](https://docs.python.org/3/library/stdtypes.html#str "str") without the _encoding_ or _errors_ arguments falls under the first case of returning the informal string representation (see also the [`-b`](https://docs.python.org/3/using/cmdline.html#cmdoption-b) command-line option to Python). For example:
>>>```
>>> str(b'Zoot!')
"b'Zoot!'"