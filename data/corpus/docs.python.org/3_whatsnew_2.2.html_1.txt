Title: Introduction to Python 2.2.2 Features
URL: https://docs.python.org/3/whatsnew/2.2.html
Summary: This article outlines the new features in Python 2.2.2, a bugfix release of Python 2.2. It highlights significant improvements, especially focusing on cleanup of the language's design and introduces new features like generators and iterators, while suggesting full documentation for comprehensive details.
---

Author:
    
A.M. Kuchling
## Introduction[¶](https://docs.python.org/3/whatsnew/2.2.html#introduction "Link to this heading")
This article explains the new features in Python 2.2.2, released on October 14, 2002. Python 2.2.2 is a bugfix release of Python 2.2, originally released on December 21, 2001.
Python 2.2 can be thought of as the “cleanup release”. There are some features such as generators and iterators that are completely new, but most of the changes, significant and far-reaching though they may be, are aimed at cleaning up irregularities and dark corners of the language design.
This article doesn’t attempt to provide a complete specification of the new features, but instead provides a convenient overview. For full details, you should refer to the documentation for Python 2.2, such as the [Python Library Reference](https://docs.python.org/2.2/lib/lib.html) and the [Python Reference Manual](https://docs.python.org/2.2/ref/ref.html). If you want to understand the complete implementation and design rationale for a change, refer to the PEP for a particular new feature.
## PEPs 252 and 253: Type and Class Changes[¶](https://docs.python.org/3/whatsnew/2.2.html#peps-252-and-253-type-and-class-changes "Link to this heading")
The largest and most far-reaching changes in Python 2.2 are to Python’s model of objects and classes. The changes should be backward compatible, so it’s likely that your code will continue to run unchanged, but the changes provide some amazing new capabilities. Before beginning this, the longest and most complicated section of this article, I’ll provide an overview of the changes and offer some comments.
A long time ago I wrote a web page listing flaws in Python’s design. One of the most significant flaws was that it’s impossible to subclass Python types implemented in C. In particular, it’s not possible to subclass built-in types, so you can’t just subclass, say, lists in order to add a single useful method to them. The `UserList` module provides a class that supports all of the methods of lists and that can be subclassed further, but there’s lots of C code that expects a regular Python list and won’t accept a [`UserList`](https://docs.python.org/3/library/collections.html#collections.UserList "collections.UserList") instance.
Python 2.2 fixes this, and in the process adds some exciting new capabilities. A brief summary:
  * You can subclass built-in types such as lists and even integers, and your subclasses should work in every place that requires the original type.
  * It’s now possible to define static and class methods, in addition to the instance methods available in previous versions of Python.
  * It’s also possible to automatically call methods on accessing or setting an instance attribute by using a new mechanism called _properties_. Many uses of [`__getattr__()`](https://docs.python.org/3/reference/datamodel.html#object.__getattr__ "object.__getattr__") can be rewritten to use properties instead, making the resulting code simpler and faster. As a small side benefit, attributes can now have docstrings, too.
  * The list of legal attributes for an instance can be limited to a particular set using _slots_ , making it possible to safeguard against typos and perhaps make more optimizations possible in future versions of Python.