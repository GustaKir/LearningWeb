Title: String Methods in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This section discusses the `str` class in Python, detailing its methods and string formatting options, including f-strings and format string syntax. It also highlights the common sequence operations supported by strings and directs readers to relevant sections for further information.
---

```

For more information on the `str` class and its methods, see [Text Sequence Type — str](https://docs.python.org/3/library/stdtypes.html#textseq) and the [String Methods](https://docs.python.org/3/library/stdtypes.html#string-methods) section below. To output formatted strings, see the [f-strings](https://docs.python.org/3/reference/lexical_analysis.html#f-strings) and [Format String Syntax](https://docs.python.org/3/library/string.html#formatstrings) sections. In addition, see the [Text Processing Services](https://docs.python.org/3/library/text.html#stringservices) section.
### String Methods[¶](https://docs.python.org/3/library/stdtypes.html#string-methods "Link to this heading")
Strings implement all of the [common](https://docs.python.org/3/library/stdtypes.html#typesseq-common) sequence operations, along with the additional methods described below.
Strings also support two styles of string formatting, one providing a large degree of flexibility and customization (see [`str.format()`](https://docs.python.org/3/library/stdtypes.html#str.format "str.format"), [Format String Syntax](https://docs.python.org/3/library/string.html#formatstrings) and [Custom String Formatting](https://docs.python.org/3/library/string.html#string-formatting)) and the other based on C `printf` style formatting that handles a narrower range of types and is slightly harder to use correctly, but is often faster for the cases it can handle ([printf-style String Formatting](https://docs.python.org/3/library/stdtypes.html#old-string-formatting)).
The [Text Processing Services](https://docs.python.org/3/library/text.html#textservices) section of the standard library covers a number of other modules that provide various text related utilities (including regular expression support in the [`re`](https://docs.python.org/3/library/re.html#module-re "re: Regular expression operations.") module). 

str.capitalize()[¶](https://docs.python.org/3/library/stdtypes.html#str.capitalize "Link to this definition")
    
Return a copy of the string with its first character capitalized and the rest lowercased.
Changed in version 3.8: The first character is now put into titlecase rather than uppercase. This means that characters like digraphs will only have their first letter capitalized, instead of the full character. 

str.casefold()[¶](https://docs.python.org/3/library/stdtypes.html#str.casefold "Link to this definition")
    
Return a casefolded copy of the string. Casefolded strings may be used for caseless matching.
Casefolding is similar to lowercasing but more aggressive because it is intended to remove all case distinctions in a string. For example, the German lowercase letter `'ß'` is equivalent to `"ss"`. Since it is already lowercase, [`lower()`](https://docs.python.org/3/library/stdtypes.html#str.lower "str.lower") would do nothing to `'ß'`; [`casefold()`](https://docs.python.org/3/library/stdtypes.html#str.casefold "str.casefold") converts it to `"ss"`.
The casefolding algorithm is [described in section 3.13 ‘Default Case Folding’ of the Unicode Standard](https://www.unicode.org/versions/Unicode15.1.0/ch03.pdf).
Added in version 3.3. 

str.center(_width_[, _fillchar_])[¶](https://docs.python.org/3/library/stdtypes.html#str.center "Link to this definition")
    
Return centered in a string of length _width_. Padding is done using the specified _fillchar_ (default is an ASCII space). The original string is returned if _width_ is less than or equal to `len(s)`. 

str.count(_sub_[, _start_[, _end_]])[¶](https://docs.python.org/3/library/stdtypes.html#str.count "Link to this definition")
    
Return the number of non-overlapping occurrences of substring _sub_ in the range [_start_ , _end_]. Optional arguments _start_ and _end_ are interpreted as in slice notation.
If _sub_ is empty, returns the number of empty strings between characters which is the length of the string plus one.