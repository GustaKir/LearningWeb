Title: Python C API: Type Object Functions
URL: https://docs.python.org/3/c-api/typeobj.html
Summary: This section outlines various functions associated with Python type objects in the C API, including `tp_alloc`, `tp_new`, `tp_free`, and `tp_is_gc`, along with their respective function pointers and use cases.
---

__ | X | X |  | X  
[`tp_alloc`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_alloc "PyTypeObject.tp_alloc") | [`allocfunc`](https://docs.python.org/3/c-api/typeobj.html#c.allocfunc "allocfunc") |  | X |  | ? | ?  
[`tp_new`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_new "PyTypeObject.tp_new") | [`newfunc`](https://docs.python.org/3/c-api/typeobj.html#c.newfunc "newfunc") | __new__ | X | X | ? | ?  
[`tp_free`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_free "PyTypeObject.tp_free") | [`freefunc`](https://docs.python.org/3/c-api/typeobj.html#c.freefunc "freefunc") |  | X | X | ? | ?  
[`tp_is_gc`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_is_gc "PyTypeObject.tp_is_gc") | [`inquiry`](https://docs.python.org/3/c-api/gcsupport.html#c.inquiry "inquiry") |  |  | X |  | X  
<[`tp_bases`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_bases "PyTypeObject.tp_bases")> | [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject") * | __bases__ |  |  | ~ |   
<[`tp_mro`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_mro "PyTypeObject.tp_mro")> | [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject") * | __mro__ |  |  | ~ |   
[[`tp_cache`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_cache "PyTypeObject.tp_cache")] | [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject") * |  |  |  |   
[[`tp_subclasses`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_subclasses "PyTypeObject.tp_subclasses")] | void * | __subclasses__ |  |  |   
[[`tp_weaklist`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_weaklist "PyTypeObject.tp_weaklist")] | [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject") * |  |  |  |   
([`tp_del`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_del "PyTypeObject.tp_del")) | [`destructor`](https://docs.python.org/3/c-api/typeobj.html#c.destructor "destructor") |  |  |  |  |   
[[`tp_version_tag`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_version_tag "PyTypeObject.tp_version_tag")] | unsigned int |  |  |  |   
[`tp_finalize`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_finalize "PyTypeObject.tp_finalize") | [`destructor`](https://docs.python.org/3/c-api/typeobj.html#c.destructor "destructor") | __del__ |  |  |  | X  
[`tp_vectorcall`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_vectorcall "PyTypeObject.tp_vectorcall") | [`vectorcallfunc`](https://docs.python.org/3/c-api/call.html#c.vectorcallfunc "vectorcallfunc") |  |  |  |  |   
[[`tp_watched`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_watched "PyTypeObject.tp_watched")] | unsigned char |  |  |  |  |   
[[1](https://docs.python.org/3/c-api/typeobj.html#id1)]
**()** : A slot name in parentheses indicates it is (effectively) deprecated.
**< >**: Names in angle brackets should be initially set to `NULL` and treated as read-only.
**[]** : Names in square brackets are for internal use only.
**< R>** (as a prefix) means the field is required (must be non-`NULL`).
[[2](https://docs.python.org/3/c-api/typeobj.html#id2)]
Columns:
**“O”** : set on [`PyBaseObject_Type`](https://docs.python.org/3/c-api/structures.html#c.PyBaseObject_Type "PyBaseObject_Type")
**“T”** : set on [`PyType_Type`](https://docs.python.org/3/c-api/type.html#c.PyType_Type "PyType_Type")
**“D”** : default (if slot is set to `NULL`)
```
X - PyType_Ready sets this value if it is NULL
~ - PyType_Ready always sets this value (it should be NULL)
? - PyType_Ready may set this value depending on other slots
Also see the inheritance column ("I").

```

**“I”** : inheritance
```
X - type slot is inherited via *PyType_Ready* if defined with a *NULL* value
% - the slots of the sub-struct are inherited individually
G - inherited, but only in combination with other slots; see the slot's description
? - it's complicated; see the slot's description