Title: Python 3 Changelog Updates
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: Recent updates include protection for the `re.finditer()` iterator, optimization of `GenericAlias` calls using PEP 590, and the addition of a `_metadata_encoding_` parameter in the `zipfile.ZipFile` constructor for better handling of non-standard filename encodings in zipfiles.
---

issue?@action=redirect&bpo=23691): Protect the [`re.finditer()`](https://docs.python.org/3/library/re.html#re.finditer "re.finditer") iterator from re-entering.
  * [bpo-47067](https://bugs.python.org/issue?@action=redirect&bpo=47067): Optimize calling `GenericAlias` objects by using [**PEP 590**](https://peps.python.org/pep-0590/) `vectorcall` and by replacing `PyObject_SetAttrString` with `PyObject_SetAttr`.
  * [bpo-28080](https://bugs.python.org/issue?@action=redirect&bpo=28080): Add the _metadata_encoding_ parameter in the [`zipfile.ZipFile`](https://docs.python.org/3/library/zipfile.html#zipfile.ZipFile "zipfile.ZipFile") constructor and the `--metadata-encoding` option in the [`zipfile`](https://docs.python.org/3/library/zipfile.html#module-zipfile "zipfile: Read and write ZIP-format archive files.") CLI to allow reading zipfiles using non-standard codecs to encode the filenames within the archive.
  * [bpo-47000](https://bugs.python.org/issue?@action=redirect&bpo=47000): Make [`io.text_encoding()`](https://docs.python.org/3/library/io.html#io.text_encoding "io.text_encoding") returns “utf-8” when UTF-8 mode is enabled.
  * [bpo-42369](https://bugs.python.org/issue?@action=redirect&bpo=42369): Fix thread safety of `zipfile._SharedFile.tell()` to avoid a “zipfile.BadZipFile: Bad CRC-32 for file” exception when reading a `ZipFile` from multiple threads.
  * [bpo-38256](https://bugs.python.org/issue?@action=redirect&bpo=38256): Fix [`binascii.crc32()`](https://docs.python.org/3/library/binascii.html#binascii.crc32 "binascii.crc32") when it is compiled to use zlib’c crc32 to work properly on inputs 4+GiB in length instead of returning the wrong result. The workaround prior to this was to always feed the function data in increments smaller than 4GiB or to just call the zlib module function.
We also have [`binascii.crc32()`](https://docs.python.org/3/library/binascii.html#binascii.crc32 "binascii.crc32") release the GIL when computing on larger inputs as [`zlib.crc32()`](https://docs.python.org/3/library/zlib.html#zlib.crc32 "zlib.crc32") and [`hashlib`](https://docs.python.org/3/library/hashlib.html#module-hashlib "hashlib: Secure hash and message digest algorithms.") do.
This also boosts performance on Windows as it now uses the zlib crc32 implementation for [`binascii.crc32()`](https://docs.python.org/3/library/binascii.html#binascii.crc32 "binascii.crc32") for a 2-3x speedup.
That the stdlib has a crc32 API in two modules is a known historical oddity. This moves us closer to a single implementation behind them.
  * [bpo-47066](https://bugs.python.org/issue?@action=redirect&bpo=47066): Global inline flags (e.g. `(?i)`) can now only be used at the start of the regular expressions. Using them not at the start of expression was deprecated since Python 3.6.
  * [bpo-39394](https://bugs.python.org/issue?@action=redirect&bpo=39394): A warning about inline flags not at the start of the regular expression now contains the position of the flag.
  * [bpo-433030](https://bugs.python.org/issue?@action=redirect&bpo=433030): Add support of atomic grouping (`(?>...)`) and possessive quantifiers (`*+`, `++`, `?+`, `{m,n}+`) in [`regular expressions`](https://docs.python.org/3/library/re.html#module-re "re: Regular expression operations.").
  * [bpo-47062](https://bugs.python.org/issue?@action=redirect&bpo=47062): Implement [`asyncio.Runner`](https://docs.python.org/3/library/asyncio-runner.html#asyncio.Runner "asyncio.Runner") context manager.
  * [bpo-46382](https://bugs.python.org/issue?@action=redirect&bpo=46382): [`dataclass()`](https://docs.python.org/3/library/dataclasses.html#dataclasses.dataclass "dataclasses.dataclass") `slots=True` now correctly omits slots already defined in base classes.