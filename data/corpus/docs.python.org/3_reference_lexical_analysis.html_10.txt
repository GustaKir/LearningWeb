Title: Numeric and Integer Literals in Python
URL: https://docs.python.org/3/reference/lexical_analysis.html
Summary: This section outlines the different types of numeric literals in Python, which include integers, floating-point numbers, and imaginary numbers. It clarifies that numeric literals do not inherently include a sign and explains that an expression like `-1` consists of a unary operator and a literal.
---

```

See also [**PEP 498**](https://peps.python.org/pep-0498/) for the proposal that added formatted string literals, and [`str.format()`](https://docs.python.org/3/library/stdtypes.html#str.format "str.format"), which uses a related format string mechanism.
### 2.4.4. Numeric literals[¶](https://docs.python.org/3/reference/lexical_analysis.html#numeric-literals "Link to this heading")
There are three types of numeric literals: integers, floating-point numbers, and imaginary numbers. There are no complex literals (complex numbers can be formed by adding a real number and an imaginary number).
Note that numeric literals do not include a sign; a phrase like `-1` is actually an expression composed of the unary operator ‘`-`’ and the literal `1`.
### 2.4.5. Integer literals[¶](https://docs.python.org/3/reference/lexical_analysis.html#integer-literals "Link to this heading")
Integer literals are described by the following lexical definitions:
```
**integer**   ::= [decinteger](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-decinteger) | [bininteger](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-bininteger) | [octinteger](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-octinteger) | [hexinteger](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-hexinteger)
**decinteger**  ::= [nonzerodigit](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-nonzerodigit) (["_"] [digit](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-digit))* | "0"+ (["_"] "0")*
**bininteger**  ::= "0" ("b" | "B") (["_"] [bindigit](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-bindigit))+
**octinteger**  ::= "0" ("o" | "O") (["_"] [octdigit](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-octdigit))+
**hexinteger**  ::= "0" ("x" | "X") (["_"] [hexdigit](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-hexdigit))+
**nonzerodigit** ::= "1"..."9"
**digit**    ::= "0"..."9"
**bindigit**   ::= "0" | "1"
**octdigit**   ::= "0"..."7"
**hexdigit**   ::= [digit](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-digit) | "a"..."f" | "A"..."F"

```

There is no limit for the length of integer literals apart from what can be stored in available memory.
Underscores are ignored for determining the numeric value of the literal. They can be used to group digits for enhanced readability. One underscore can occur between digits, and after base specifiers like `0x`.
Note that leading zeros in a non-zero decimal number are not allowed. This is for disambiguation with C-style octal literals, which Python used before version 3.0.
Some examples of integer literals:
```
7   2147483647            0o177  0b100110111
3   79228162514264337593543950336   0o377  0xdeadbeef
   100_000_000_000          0b_1110_0101

```

Changed in version 3.6: Underscores are now allowed for grouping purposes in literals.
### 2.4.6. Floating-point literals[¶](https://docs.python.org/3/reference/lexical_analysis.html#floating-point-literals "Link to this heading")
Floating-point literals are described by the following lexical definitions:
```
**floatnumber**  ::= [pointfloat](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-pointfloat) | [exponentfloat](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-exponentfloat)
**pointfloat**  ::= [[digitpart](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-digitpart)] [fraction](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-fraction) | [digitpart](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-digitpart) "."
**exponentfloat** ::= ([digitpart](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-digitpart) | [pointfloat](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-pointfloat)) [exponent](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-exponent)
**digitpart**   ::= [digit](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-digit) (["_"] [digit](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-digit))*
**fraction**   ::= "." [digitpart](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-digitpart)
**exponent**   ::= ("e" | "E") ["+" | "-"] [digitpart](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-digitpart)