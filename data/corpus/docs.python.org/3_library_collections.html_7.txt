Title: Deque Methods Overview
URL: https://docs.python.org/3/library/collections.html
Summary: This section describes methods for the deque class, including 'reverse()', which inverts elements in place, and 'rotate(n)', which rotates elements by 'n' steps. It also mentions the 'maxlen' attribute for defining the maximum size of a deque.
---

reverse()[¶](https://docs.python.org/3/library/collections.html#collections.deque.reverse "Link to this definition")
    
Reverse the elements of the deque in-place and then return `None`.
Added in version 3.2. 

rotate(_n =1_)[¶](https://docs.python.org/3/library/collections.html#collections.deque.rotate "Link to this definition")
    
Rotate the deque _n_ steps to the right. If _n_ is negative, rotate to the left.
When the deque is not empty, rotating one step to the right is equivalent to `d.appendleft(d.pop())`, and rotating one step to the left is equivalent to `d.append(d.popleft())`.
Deque objects also provide one read-only attribute: 

maxlen[¶](https://docs.python.org/3/library/collections.html#collections.deque.maxlen "Link to this definition")
    
Maximum size of a deque or `None` if unbounded.
Added in version 3.1.
In addition to the above, deques support iteration, pickling, `len(d)`, `reversed(d)`, `copy.copy(d)`, `copy.deepcopy(d)`, membership testing with the [`in`](https://docs.python.org/3/reference/expressions.html#in) operator, and subscript references such as `d[0]` to access the first element. Indexed access is _O_(1) at both ends but slows to _O_(_n_) in the middle. For fast random access, use lists instead.
Starting in version 3.5, deques support `__add__()`, `__mul__()`, and `__imul__()`.
Example:
>>>```
>>> fromcollectionsimport deque
>>> d = deque('ghi')         # make a new deque with three items
>>> for elem in d:          # iterate over the deque's elements
...   print(elem.upper())
G
H
I
>>> d.append('j')          # add a new entry to the right side
>>> d.appendleft('f')        # add a new entry to the left side
>>> d                # show the representation of the deque
deque(['f', 'g', 'h', 'i', 'j'])
>>> d.pop()             # return and remove the rightmost item
'j'
>>> d.popleft()           # return and remove the leftmost item
'f'
>>> list(d)             # list the contents of the deque
['g', 'h', 'i']
>>> d[0]               # peek at leftmost item
'g'
>>> d[-1]              # peek at rightmost item
'i'
>>> list(reversed(d))        # list the contents of a deque in reverse
['i', 'h', 'g']
>>> 'h' in d             # search the deque
True
>>> d.extend('jkl')         # add multiple elements at once
>>> d
deque(['g', 'h', 'i', 'j', 'k', 'l'])
>>> d.rotate(1)           # right rotation
>>> d
deque(['l', 'g', 'h', 'i', 'j', 'k'])
>>> d.rotate(-1)           # left rotation
>>> d
deque(['g', 'h', 'i', 'j', 'k', 'l'])
>>> deque(reversed(d))        # make a new deque in reverse order
deque(['l', 'k', 'j', 'i', 'h', 'g'])
>>> d.clear()            # empty the deque
>>> d.pop()             # cannot pop from an empty deque
Traceback (most recent call last):
File "<pyshell#6>", line 1, in -toplevel-
  d.pop()
IndexError: pop from an empty deque
>>> d.extendleft('abc')       # extendleft() reverses the input order
>>> d
deque(['c', 'b', 'a'])

```

### [`deque`](https://docs.python.org/3/library/collections.html#collections.deque "collections.deque") Recipes[¶](https://docs.python.org/3/library/collections.html#deque-recipes "Link to this heading")
This section shows various approaches to working with deques.
Bounded length deques provide functionality similar to the `tail` filter in Unix:
```
deftail(filename, n=10):
  'Return the last n lines of a file'
  with open(filename) as f:
    return deque(f, n)

```

Another approach to using deques is to maintain a sequence of recently added elements by appending to the right and popping to the left:
```
defmoving_average(iterable, n=3):
  # moving_average([40, 30, 50, 46, 39, 44]) --> 40.0 42.0 45.0 43.0
  # https://en.wikipedia.org/wiki/Moving_average
  it = iter(iterable)
  d = deque(itertools.islice(it, n-1))
  d.appendleft(0)
  s = sum(d)
  for elem in it:
    s += elem - d.popleft()
    d.append(elem)
    yield s / n

```

A [round-robin scheduler](https://en.wikipedia.org/wiki/Round-robin_scheduling) can be implemented with input iterators stored in a [`deque`](https://docs.python.org/3/library/collections.html#collections.deque "collections.deque"). Values are yielded from the active iterator in position zero. If that iterator is exhausted, it can be removed with [`popleft()`](https://docs.python.org/3/library/collections.html#collections.deque.popleft "collections.deque.popleft"); otherwise, it can be cycled back to the end with the [`rotate()`](https://docs.python.org/3/library/collections.html#collections.deque.rotate "collections.deque.rotate") method:
```
defroundrobin(*iterables):
  "roundrobin('ABC', 'D', 'EF') --> A D E B F C"
  iterators = deque(map(iter, iterables))
  while iterators:
    try:
      while True:
        yield next(iterators[0])
        iterators.rotate(-1)
    except StopIteration:
      # Remove an exhausted iterator.
      iterators.popleft()