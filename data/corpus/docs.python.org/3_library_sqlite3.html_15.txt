Title: SQLite3 Connection Configuration Options
URL: https://docs.python.org/3/library/sqlite3.html
Summary: This section discusses two functions added in Python 3.11 and 3.12 for configuring SQLite connection settings: `getconfig` retrieves the status of a boolean configuration option, while `setconfig` allows users to enable or disable a specified configuration option.
---

```

Added in version 3.11. 

getconfig(_op_ , _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.getconfig "Link to this definition")
    
Query a boolean connection configuration option. 

Parameters:
    
**op** ([_int_](https://docs.python.org/3/library/functions.html#int "int")) – A [SQLITE_DBCONFIG code](https://docs.python.org/3/library/sqlite3.html#sqlite3-dbconfig-constants). 

Return type:
    
[bool](https://docs.python.org/3/library/functions.html#bool "bool")
Added in version 3.12. 

setconfig(_op_ , _enable =True_, _/_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.setconfig "Link to this definition")
    
Set a boolean connection configuration option. 

Parameters:
    
  * **op** ([_int_](https://docs.python.org/3/library/functions.html#int "int")) – A [SQLITE_DBCONFIG code](https://docs.python.org/3/library/sqlite3.html#sqlite3-dbconfig-constants).
  * **enable** ([_bool_](https://docs.python.org/3/library/functions.html#bool "bool")) – `True` if the configuration option should be enabled (default); `False` if it should be disabled.


Added in version 3.12. 

serialize(_*_ , _name ='main'_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.serialize "Link to this definition")
    
Serialize a database into a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") object. For an ordinary on-disk database file, the serialization is just a copy of the disk file. For an in-memory database or a “temp” database, the serialization is the same sequence of bytes which would be written to disk if that database were backed up to disk. 

Parameters:
    
**name** ([_str_](https://docs.python.org/3/library/stdtypes.html#str "str")) – The database name to be serialized. Defaults to `"main"`. 

Return type:
    
[bytes](https://docs.python.org/3/library/stdtypes.html#bytes "bytes")
Note
This method is only available if the underlying SQLite library has the serialize API.
Added in version 3.11. 

deserialize(_data_ , _/_ , _*_ , _name ='main'_)[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.deserialize "Link to this definition")
    
Deserialize a [`serialized`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.serialize "sqlite3.Connection.serialize") database into a [`Connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection "sqlite3.Connection"). This method causes the database connection to disconnect from database _name_ , and reopen _name_ as an in-memory database based on the serialization contained in _data_. 

Parameters:
    
  * **data** ([_bytes_](https://docs.python.org/3/library/stdtypes.html#bytes "bytes")) – A serialized database.
  * **name** ([_str_](https://docs.python.org/3/library/stdtypes.html#str "str")) – The database name to deserialize into. Defaults to `"main"`.



Raises:
    
  * [**OperationalError**](https://docs.python.org/3/library/sqlite3.html#sqlite3.OperationalError "sqlite3.OperationalError") – If the database connection is currently involved in a read transaction or a backup operation.
  * [**DatabaseError**](https://docs.python.org/3/library/sqlite3.html#sqlite3.DatabaseError "sqlite3.DatabaseError") – If _data_ does not contain a valid SQLite database.
  * [**OverflowError**](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError") – If [`len(data)`](https://docs.python.org/3/library/functions.html#len "len") is larger than `2**63 - 1`.


Note
This method is only available if the underlying SQLite library has the deserialize API.
Added in version 3.11.