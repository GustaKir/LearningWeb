Title: Byte and Bytearray Indexing and Joining Methods
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This section describes the `index()` method for `bytes` and `bytearray`, which searches for a subsequence and raises a `ValueError` if not found. The subsequence can be a bytes-like object or an integer (0-255), with support for integers added in version 3.3. It also mentions the `join()` method for both types.
---

```

Changed in version 3.3: Also accept an integer in the range 0 to 255 as the subsequence. 

bytes.index(_sub_[, _start_[, _end_]])[¶](https://docs.python.org/3/library/stdtypes.html#bytes.index "Link to this definition")


bytearray.index(_sub_[, _start_[, _end_]])[¶](https://docs.python.org/3/library/stdtypes.html#bytearray.index "Link to this definition")
    
Like [`find()`](https://docs.python.org/3/library/stdtypes.html#bytes.find "bytes.find"), but raise [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") when the subsequence is not found.
The subsequence to search for may be any [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object) or an integer in the range 0 to 255.
Changed in version 3.3: Also accept an integer in the range 0 to 255 as the subsequence. 

bytes.join(_iterable_)[¶](https://docs.python.org/3/library/stdtypes.html#bytes.join "Link to this definition")


bytearray.join(_iterable_)[¶](https://docs.python.org/3/library/stdtypes.html#bytearray.join "Link to this definition")
    
Return a bytes or bytearray object which is the concatenation of the binary data sequences in _iterable_. A [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") will be raised if there are any values in _iterable_ that are not [bytes-like objects](https://docs.python.org/3/glossary.html#term-bytes-like-object), including [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") objects. The separator between elements is the contents of the bytes or bytearray object providing this method. 

_static_ bytes.maketrans(_from_ , _to_)[¶](https://docs.python.org/3/library/stdtypes.html#bytes.maketrans "Link to this definition")


_static_ bytearray.maketrans(_from_ , _to_)[¶](https://docs.python.org/3/library/stdtypes.html#bytearray.maketrans "Link to this definition")
    
This static method returns a translation table usable for [`bytes.translate()`](https://docs.python.org/3/library/stdtypes.html#bytes.translate "bytes.translate") that will map each character in _from_ into the character at the same position in _to_ ; _from_ and _to_ must both be [bytes-like objects](https://docs.python.org/3/glossary.html#term-bytes-like-object) and have the same length.
Added in version 3.1. 

bytes.partition(_sep_)[¶](https://docs.python.org/3/library/stdtypes.html#bytes.partition "Link to this definition")


bytearray.partition(_sep_)[¶](https://docs.python.org/3/library/stdtypes.html#bytearray.partition "Link to this definition")
    
Split the sequence at the first occurrence of _sep_ , and return a 3-tuple containing the part before the separator, the separator itself or its bytearray copy, and the part after the separator. If the separator is not found, return a 3-tuple containing a copy of the original sequence, followed by two empty bytes or bytearray objects.
The separator to search for may be any [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object). 

bytes.replace(_old_ , _new_[, _count_])[¶](https://docs.python.org/3/library/stdtypes.html#bytes.replace "Link to this definition")


bytearray.replace(_old_ , _new_[, _count_])[¶](https://docs.python.org/3/library/stdtypes.html#bytearray.replace "Link to this definition")
    
Return a copy of the sequence with all occurrences of subsequence _old_ replaced by _new_. If the optional argument _count_ is given, only the first _count_ occurrences are replaced.
The subsequence to search for and its replacement may be any [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object).
Note
The bytearray version of this method does _not_ operate in place - it always produces a new object, even if no changes were made. 

bytes.rfind(_sub_[, _start_[, _end_]])[¶](https://docs.python.org/3/library/stdtypes.html#bytes.rfind "Link to this definition")


bytearray.rfind(_sub_[, _start_[, _end_]])[¶](https://docs.python.org/3/library/stdtypes.html#bytearray.rfind "Link to this definition")
    
Return the highest index in the sequence where the subsequence _sub_ is found, such that _sub_ is contained within `s[start:end]`. Optional arguments _start_ and _end_ are interpreted as in slice notation. Return `-1` on failure.
The subsequence to search for may be any [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object) or an integer in the range 0 to 255.
Changed in version 3.3: Also accept an integer in the range 0 to 255 as the subsequence. 

bytes.rindex(_sub_[, _start_[, _end_]])[¶](https://docs.python.org/3/library/stdtypes.html#bytes.rindex "Link to this definition")