Title: Datetime Module - Timezone Methods
URL: https://docs.python.org/3/library/datetime.html
Summary: This section covers methods related to the `timezone` class in Python's datetime module. The `tzname` method returns the timezone name based on the fixed value set during the `timezone` instance's construction, generating 'UTC' for a zero offset. The `dst` method consistently returns `None`, indicating no daylight saving time information. Additionally, the fromutc method is referenced but not detailed.
---

timezone.tzname(_dt_)[¶](https://docs.python.org/3/library/datetime.html#datetime.timezone.tzname "Link to this definition")
    
Return the fixed value specified when the [`timezone`](https://docs.python.org/3/library/datetime.html#datetime.timezone "datetime.timezone") instance is constructed.
If _name_ is not provided in the constructor, the name returned by `tzname(dt)` is generated from the value of the `offset` as follows. If _offset_ is `timedelta(0)`, the name is “UTC”, otherwise it is a string in the format `UTC±HH:MM`, where ± is the sign of `offset`, HH and MM are two digits of `offset.hours` and `offset.minutes` respectively.
Changed in version 3.6: Name generated from `offset=timedelta(0)` is now plain `'UTC'`, not `'UTC+00:00'`. 

timezone.dst(_dt_)[¶](https://docs.python.org/3/library/datetime.html#datetime.timezone.dst "Link to this definition")
    
Always returns `None`. 

timezone.fromutc(_dt_)[¶](https://docs.python.org/3/library/datetime.html#datetime.timezone.fromutc "Link to this definition")
    
Return `dt + offset`. The _dt_ argument must be an aware [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") instance, with `tzinfo` set to `self`.
Class attributes: 

timezone.utc[¶](https://docs.python.org/3/library/datetime.html#datetime.timezone.utc "Link to this definition")
    
The UTC time zone, `timezone(timedelta(0))`.
## [`strftime()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.strftime "datetime.datetime.strftime") and [`strptime()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime "datetime.datetime.strptime") Behavior[¶](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-behavior "Link to this heading")
[`date`](https://docs.python.org/3/library/datetime.html#datetime.date "datetime.date"), [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime"), and [`time`](https://docs.python.org/3/library/datetime.html#datetime.time "datetime.time") objects all support a `strftime(format)` method, to create a string representing the time under the control of an explicit format string.
Conversely, the [`datetime.strptime()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime "datetime.datetime.strptime") class method creates a [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") object from a string representing a date and time and a corresponding format string.
The table below provides a high-level comparison of [`strftime()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.strftime "datetime.datetime.strftime") versus [`strptime()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime "datetime.datetime.strptime"):
| `strftime` | `strptime`  
---|---|---  
Usage | Convert object to a string according to a given format | Parse a string into a [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") object given a corresponding format  
Type of method | Instance method | Class method  
Method of | [`date`](https://docs.python.org/3/library/datetime.html#datetime.date "datetime.date"); [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime"); [`time`](https://docs.python.org/3/library/datetime.html#datetime.time "datetime.time") | [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime")  
Signature | `strftime(format)` | `strptime(date_string, format)`  
### [`strftime()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.strftime "datetime.datetime.strftime") and [`strptime()`](https://docs.python.org/3/library/datetime.html#datetime.datetime.strptime "datetime.datetime.strptime") Format Codes[¶](https://docs.python.org/3/library/datetime.html#strftime-and-strptime-format-codes "Link to this heading")
These methods accept format codes that can be used to parse and format dates:
>>>```
>>> datetime.strptime('31/01/22 23:59:59.999999',
...          '%d/%m/%y %H:%M:%S.%f')
datetime.datetime(2022, 1, 31, 23, 59, 59, 999999)
>>> _.strftime('%a%d %b %Y, %I:%M%p')
'Mon 31 Jan 2022, 11:59PM'