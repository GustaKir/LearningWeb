Title: POP3 Class in Python's poplib Module
URL: https://docs.python.org/3/library/poplib.html
Summary: The `poplib.POP3` class implements the POP3 protocol, establishing a connection upon initialization. It defaults to port 110 if no port is specified, and allows for an optional timeout parameter. Auditing events are raised during connection and command sending. A change in version 3.9 introduces a `ValueError` if the timeout is set to zero.
---

_class_ poplib.POP3(_host_ , _port=POP3_PORT_[, _timeout_])[¶](https://docs.python.org/3/library/poplib.html#poplib.POP3 "Link to this definition")
    
This class implements the actual POP3 protocol. The connection is created when the instance is initialized. If _port_ is omitted, the standard POP3 port (110) is used. The optional _timeout_ parameter specifies a timeout in seconds for the connection attempt (if not specified, the global default timeout setting will be used).
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `poplib.connect` with arguments `self`, `host`, `port`.
All commands will raise an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `poplib.putline` with arguments `self` and `line`, where `line` is the bytes about to be sent to the remote host.
Changed in version 3.9: If the _timeout_ parameter is set to be zero, it will raise a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") to prevent the creation of a non-blocking socket. 

_class_ poplib.POP3_SSL(_host_ , _port =POP3_SSL_PORT_, _*_ , _timeout =None_, _context =None_)[¶](https://docs.python.org/3/library/poplib.html#poplib.POP3_SSL "Link to this definition")
    
This is a subclass of [`POP3`](https://docs.python.org/3/library/poplib.html#poplib.POP3 "poplib.POP3") that connects to the server over an SSL encrypted socket. If _port_ is not specified, 995, the standard POP3-over-SSL port is used. _timeout_ works as in the [`POP3`](https://docs.python.org/3/library/poplib.html#poplib.POP3 "poplib.POP3") constructor. _context_ is an optional [`ssl.SSLContext`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext "ssl.SSLContext") object which allows bundling SSL configuration options, certificates and private keys into a single (potentially long-lived) structure. Please read [Security considerations](https://docs.python.org/3/library/ssl.html#ssl-security) for best practices.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `poplib.connect` with arguments `self`, `host`, `port`.
All commands will raise an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `poplib.putline` with arguments `self` and `line`, where `line` is the bytes about to be sent to the remote host.
Changed in version 3.2: _context_ parameter added.
Changed in version 3.4: The class now supports hostname check with [`ssl.SSLContext.check_hostname`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.check_hostname "ssl.SSLContext.check_hostname") and _Server Name Indication_ (see [`ssl.HAS_SNI`](https://docs.python.org/3/library/ssl.html#ssl.HAS_SNI "ssl.HAS_SNI")).
Changed in version 3.9: If the _timeout_ parameter is set to be zero, it will raise a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") to prevent the creation of a non-blocking socket.
Changed in version 3.12: The deprecated _keyfile_ and _certfile_ parameters have been removed.
One exception is defined as an attribute of the [`poplib`](https://docs.python.org/3/library/poplib.html#module-poplib "poplib: POP3 protocol client \(requires sockets\).") module: 

_exception_ poplib.error_proto[¶](https://docs.python.org/3/library/poplib.html#poplib.error_proto "Link to this definition")
    
Exception raised on any errors from this module (errors from [`socket`](https://docs.python.org/3/library/socket.html#module-socket "socket: Low-level networking interface.") module are not caught). The reason for the exception is passed to the constructor as a string.
See also 

Module [`imaplib`](https://docs.python.org/3/library/imaplib.html#module-imaplib "imaplib: IMAP4 protocol client \(requires sockets\).")
    
The standard Python IMAP module. 

[Frequently Asked Questions About Fetchmail](http://www.catb.org/~esr/fetchmail/fetchmail-FAQ.html)
    
The FAQ for the **fetchmail** POP/IMAP client collects information on POP3 server variations and RFC noncompliance that may be useful if you need to write an application based on the POP protocol.
## POP3 Objects[¶](https://docs.python.org/3/library/poplib.html#pop3-objects "Link to this heading")
All POP3 commands are represented by methods of the same name, in lowercase; most return the response text sent by the server.
A [`POP3`](https://docs.python.org/3/library/poplib.html#poplib.POP3 "poplib.POP3") instance has the following methods: 

POP3.set_debuglevel(_level_)[¶](https://docs.python.org/3/library/poplib.html#poplib.POP3.set_debuglevel "Link to this definition")
    
Set the instance’s debugging level. This controls the amount of debugging output printed. The default, `0`, produces no debugging output. A value of `1` produces a moderate amount of debugging output, generally a single line per request. A value of `2` or higher produces the maximum amount of debugging output, logging each line sent and received on the control connection.