Title: System Module Names and Thread Information
URL: https://docs.python.org/3/library/sys.html
Summary: This section covers the `sys.stdlib_module_names`, a frozenset of standard library module names uniform across platforms, including disabled or unavailable modules, while excluding test modules. It also notes that only main packages are listed, as demonstrated with the `email` package. Additionally, it introduces `sys.thread_info`, a named tuple providing information about the thread implementation. This information was added in Python 3.10.
---

sys.stdlib_module_names[¶](https://docs.python.org/3/library/sys.html#sys.stdlib_module_names "Link to this definition")
    
A frozenset of strings containing the names of standard library modules.
It is the same on all platforms. Modules which are not available on some platforms and modules disabled at Python build are also listed. All module kinds are listed: pure Python, built-in, frozen and extension modules. Test modules are excluded.
For packages, only the main package is listed: sub-packages and sub-modules are not listed. For example, the `email` package is listed, but the `email.mime` sub-package and the `email.message` sub-module are not listed.
See also the [`sys.builtin_module_names`](https://docs.python.org/3/library/sys.html#sys.builtin_module_names "sys.builtin_module_names") list.
Added in version 3.10. 

sys.thread_info[¶](https://docs.python.org/3/library/sys.html#sys.thread_info "Link to this definition")
    
A [named tuple](https://docs.python.org/3/glossary.html#term-named-tuple) holding information about the thread implementation. 

thread_info.name[¶](https://docs.python.org/3/library/sys.html#sys.thread_info.name "Link to this definition")
    
The name of the thread implementation:
  * `"nt"`: Windows threads
  * `"pthread"`: POSIX threads
  * `"pthread-stubs"`: stub POSIX threads (on WebAssembly platforms without threading support)
  * `"solaris"`: Solaris threads



thread_info.lock[¶](https://docs.python.org/3/library/sys.html#sys.thread_info.lock "Link to this definition")
    
The name of the lock implementation:
  * `"semaphore"`: a lock uses a semaphore
  * `"mutex+cond"`: a lock uses a mutex and a condition variable
  * `None` if this information is unknown



thread_info.version[¶](https://docs.python.org/3/library/sys.html#sys.thread_info.version "Link to this definition")
    
The name and version of the thread library. It is a string, or `None` if this information is unknown.
Added in version 3.3. 

sys.tracebacklimit[¶](https://docs.python.org/3/library/sys.html#sys.tracebacklimit "Link to this definition")
    
When this variable is set to an integer value, it determines the maximum number of levels of traceback information printed when an unhandled exception occurs. The default is `1000`. When set to `0` or less, all traceback information is suppressed and only the exception type and value are printed. 

sys.unraisablehook(_unraisable_ , _/_)[¶](https://docs.python.org/3/library/sys.html#sys.unraisablehook "Link to this definition")
    
Handle an unraisable exception.
Called when an exception has occurred but there is no way for Python to handle it. For example, when a destructor raises an exception or during garbage collection ([`gc.collect()`](https://docs.python.org/3/library/gc.html#gc.collect "gc.collect")).
The _unraisable_ argument has the following attributes:
  * `exc_type`: Exception type.
  * `exc_value`: Exception value, can be `None`.
  * `exc_traceback`: Exception traceback, can be `None`.
  * `err_msg`: Error message, can be `None`.
  * `object`: Object causing the exception, can be `None`.


The default hook formats `err_msg` and `object` as: `f'{err_msg}: {object!r}'`; use “Exception ignored in” error message if `err_msg` is `None`.
[`sys.unraisablehook()`](https://docs.python.org/3/library/sys.html#sys.unraisablehook "sys.unraisablehook") can be overridden to control how unraisable exceptions are handled.
See also
[`excepthook()`](https://docs.python.org/3/library/sys.html#sys.excepthook "sys.excepthook") which handles uncaught exceptions.
Warning
Storing `exc_value` using a custom hook can create a reference cycle. It should be cleared explicitly to break the reference cycle when the exception is no longer needed.
Storing `object` using a custom hook can resurrect it if it is set to an object which is being finalized. Avoid storing `object` after the custom hook completes to avoid resurrecting objects.
Raise an auditing event `sys.unraisablehook` with arguments _hook_ , _unraisable_ when an exception that cannot be handled occurs. The _unraisable_ object is the same as what will be passed to the hook. If no hook has been set, _hook_ may be `None`.
Added in version 3.8. 

sys.version[¶](https://docs.python.org/3/library/sys.html#sys.version "Link to this definition")
    
A string containing the version number of the Python interpreter plus additional information on the build number and compiler used. This string is displayed when the interactive interpreter is started. Do not extract version information out of it, rather, use [`version_info`](https://docs.python.org/3/library/sys.html#sys.version_info "sys.version_info") and the functions provided by the [`platform`](https://docs.python.org/3/library/platform.html#module-platform "platform: Retrieves as much platform identifying data as possible.") module.