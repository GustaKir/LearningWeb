Title: Improvements to range Objects in Python 3.2
URL: https://docs.python.org/3/whatsnew/3.2.html
Summary: Python 3.2 introduces enhancements to `range` objects, including the addition of `_index_` and `_count_` methods to align with the `collections.Sequence` abstract base class. Consequently, `range` now supports slicing and negative indices, improving interoperability with lists and providing a more uniform API across Python data types.
---

```

(Added by Antoine Pitrou and Georg Brandl in [bpo-10093](https://bugs.python.org/issue?@action=redirect&bpo=10093) and [bpo-477863](https://bugs.python.org/issue?@action=redirect&bpo=477863).)
  * [`range`](https://docs.python.org/3/library/stdtypes.html#range "range") objects now support _index_ and _count_ methods. This is part of an effort to make more objects fully implement the [`collections.Sequence`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sequence "collections.abc.Sequence") [abstract base class](https://docs.python.org/3/glossary.html#term-abstract-base-class). As a result, the language will have a more uniform API. In addition, [`range`](https://docs.python.org/3/library/stdtypes.html#range "range") objects now support slicing and negative indices, even with values larger than [`sys.maxsize`](https://docs.python.org/3/library/sys.html#sys.maxsize "sys.maxsize"). This makes _range_ more interoperable with lists:
>>>```
>>> range(0, 100, 2).count(10)
1
>>> range(0, 100, 2).index(10)
5
>>> range(0, 100, 2)[5]
10
>>> range(0, 100, 2)[0:5]
range(0, 10, 2)

```

(Contributed by Daniel Stutzbach in [bpo-9213](https://bugs.python.org/issue?@action=redirect&bpo=9213), by Alexander Belopolsky in [bpo-2690](https://bugs.python.org/issue?@action=redirect&bpo=2690), and by Nick Coghlan in [bpo-10889](https://bugs.python.org/issue?@action=redirect&bpo=10889).)
  * The [`callable()`](https://docs.python.org/3/library/functions.html#callable "callable") builtin function from Py2.x was resurrected. It provides a concise, readable alternative to using an [abstract base class](https://docs.python.org/3/glossary.html#term-abstract-base-class) in an expression like `isinstance(x, collections.Callable)`:
>>>```
>>> callable(max)
True
>>> callable(20)
False