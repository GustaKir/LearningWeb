Title: Future.set_exception Method
URL: https://docs.python.org/3/library/concurrent.futures.html
Summary: The `set_exception` method sets the result of a `Future` to an `Exception`. It is intended for use by `Executor` implementations and unit tests, and raises `InvalidStateError` if the `Future` is already completed. This method was changed in version 3.8.
---

set_exception(_exception_)[¶](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future.set_exception "Link to this definition")
    
Sets the result of the work associated with the [`Future`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future "concurrent.futures.Future") to the [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception "Exception") _exception_.
This method should only be used by [`Executor`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor "concurrent.futures.Executor") implementations and unit tests.
Changed in version 3.8: This method raises [`concurrent.futures.InvalidStateError`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.InvalidStateError "concurrent.futures.InvalidStateError") if the [`Future`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future "concurrent.futures.Future") is already done.
## Module Functions[¶](https://docs.python.org/3/library/concurrent.futures.html#module-functions "Link to this heading") 

concurrent.futures.wait(_fs_ , _timeout =None_, _return_when =ALL_COMPLETED_)[¶](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.wait "Link to this definition")
    
Wait for the [`Future`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future "concurrent.futures.Future") instances (possibly created by different [`Executor`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor "concurrent.futures.Executor") instances) given by _fs_ to complete. Duplicate futures given to _fs_ are removed and will be returned only once. Returns a named 2-tuple of sets. The first set, named `done`, contains the futures that completed (finished or cancelled futures) before the wait completed. The second set, named `not_done`, contains the futures that did not complete (pending or running futures).
_timeout_ can be used to control the maximum number of seconds to wait before returning. _timeout_ can be an int or float. If _timeout_ is not specified or `None`, there is no limit to the wait time.
_return_when_ indicates when this function should return. It must be one of the following constants:
Constant | Description  
---|--- 

concurrent.futures.FIRST_COMPLETED[¶](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.FIRST_COMPLETED "Link to this definition")
| The function will return when any future finishes or is cancelled. 

concurrent.futures.FIRST_EXCEPTION[¶](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.FIRST_EXCEPTION "Link to this definition")
| The function will return when any future finishes by raising an exception. If no future raises an exception then it is equivalent to [`ALL_COMPLETED`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ALL_COMPLETED "concurrent.futures.ALL_COMPLETED"). 

concurrent.futures.ALL_COMPLETED[¶](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ALL_COMPLETED "Link to this definition")
| The function will return when all futures finish or are cancelled. 

concurrent.futures.as_completed(_fs_ , _timeout =None_)[¶](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.as_completed "Link to this definition")
      
Returns an iterator over the [`Future`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future "concurrent.futures.Future") instances (possibly created by different [`Executor`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor "concurrent.futures.Executor") instances) given by _fs_ that yields futures as they complete (finished or cancelled futures). Any futures given by _fs_ that are duplicated will be returned once. Any futures that completed before [`as_completed()`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.as_completed "concurrent.futures.as_completed") is called will be yielded first. The returned iterator raises a [`TimeoutError`](https://docs.python.org/3/library/exceptions.html#TimeoutError "TimeoutError") if [`__next__()`](https://docs.python.org/3/library/stdtypes.html#iterator.__next__ "iterator.__next__") is called and the result isn’t available after _timeout_ seconds from the original call to [`as_completed()`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.as_completed "concurrent.futures.as_completed"). _timeout_ can be an int or float. If _timeout_ is not specified or `None`, there is no limit to the wait time.
See also