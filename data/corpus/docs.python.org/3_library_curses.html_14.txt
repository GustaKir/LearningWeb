Title: Curses Window Scrolling Functions
URL: https://docs.python.org/3/library/curses.html
Summary: This section describes functions for controlling scrolling behavior in a curses window. The `scrollok(_flag_)` method determines if the window should scroll when the cursor reaches the bottom line, depending on the value of _flag_. The `setscrreg(_top_, _bottom_)` method sets the scrolling region, restricting actions to between specified lines.
---

window.scrollok(_flag_)[¶](https://docs.python.org/3/library/curses.html#curses.window.scrollok "Link to this definition")
    
Control what happens when the cursor of a window is moved off the edge of the window or scrolling region, either as a result of a newline action on the bottom line, or typing the last character of the last line. If _flag_ is `False`, the cursor is left on the bottom line. If _flag_ is `True`, the window is scrolled up one line. Note that in order to get the physical scrolling effect on the terminal, it is also necessary to call [`idlok()`](https://docs.python.org/3/library/curses.html#curses.window.idlok "curses.window.idlok"). 

window.setscrreg(_top_ , _bottom_)[¶](https://docs.python.org/3/library/curses.html#curses.window.setscrreg "Link to this definition")
    
Set the scrolling region from line _top_ to line _bottom_. All scrolling actions will take place in this region. 

window.standend()[¶](https://docs.python.org/3/library/curses.html#curses.window.standend "Link to this definition")
    
Turn off the standout attribute. On some terminals this has the side effect of turning off all attributes. 

window.standout()[¶](https://docs.python.org/3/library/curses.html#curses.window.standout "Link to this definition")
    
Turn on attribute _A_STANDOUT_. 

window.subpad(_begin_y_ , _begin_x_)[¶](https://docs.python.org/3/library/curses.html#curses.window.subpad "Link to this definition")


window.subpad(_nlines_ , _ncols_ , _begin_y_ , _begin_x_)
    
Return a sub-window, whose upper-left corner is at `(begin_y, begin_x)`, and whose width/height is _ncols_ /_nlines_. 

window.subwin(_begin_y_ , _begin_x_)[¶](https://docs.python.org/3/library/curses.html#curses.window.subwin "Link to this definition")


window.subwin(_nlines_ , _ncols_ , _begin_y_ , _begin_x_)
    
Return a sub-window, whose upper-left corner is at `(begin_y, begin_x)`, and whose width/height is _ncols_ /_nlines_.
By default, the sub-window will extend from the specified position to the lower right corner of the window. 

window.syncdown()[¶](https://docs.python.org/3/library/curses.html#curses.window.syncdown "Link to this definition")
    
Touch each location in the window that has been touched in any of its ancestor windows. This routine is called by [`refresh()`](https://docs.python.org/3/library/curses.html#curses.window.refresh "curses.window.refresh"), so it should almost never be necessary to call it manually. 

window.syncok(_flag_)[¶](https://docs.python.org/3/library/curses.html#curses.window.syncok "Link to this definition")
    
If _flag_ is `True`, then [`syncup()`](https://docs.python.org/3/library/curses.html#curses.window.syncup "curses.window.syncup") is called automatically whenever there is a change in the window. 

window.syncup()[¶](https://docs.python.org/3/library/curses.html#curses.window.syncup "Link to this definition")
    
Touch all locations in ancestors of the window that have been changed in the window. 

window.timeout(_delay_)[¶](https://docs.python.org/3/library/curses.html#curses.window.timeout "Link to this definition")
    
Set blocking or non-blocking read behavior for the window. If _delay_ is negative, blocking read is used (which will wait indefinitely for input). If _delay_ is zero, then non-blocking read is used, and [`getch()`](https://docs.python.org/3/library/curses.html#curses.window.getch "curses.window.getch") will return `-1` if no input is waiting. If _delay_ is positive, then [`getch()`](https://docs.python.org/3/library/curses.html#curses.window.getch "curses.window.getch") will block for _delay_ milliseconds, and return `-1` if there is still no input at the end of that time. 

window.touchline(_start_ , _count_[, _changed_])[¶](https://docs.python.org/3/library/curses.html#curses.window.touchline "Link to this definition")
    
Pretend _count_ lines have been changed, starting with line _start_. If _changed_ is supplied, it specifies whether the affected lines are marked as having been changed (_changed_`=True`) or unchanged (_changed_`=False`). 

window.touchwin()[¶](https://docs.python.org/3/library/curses.html#curses.window.touchwin "Link to this definition")
    
Pretend the whole window has been changed, for purposes of drawing optimizations. 

window.untouchwin()[¶](https://docs.python.org/3/library/curses.html#curses.window.untouchwin "Link to this definition")
    
Mark all lines in the window as unchanged since the last call to [`refresh()`](https://docs.python.org/3/library/curses.html#curses.window.refresh "curses.window.refresh"). 

window.vline(_ch_ , _n_[, _attr_])[¶](https://docs.python.org/3/library/curses.html#curses.window.vline "Link to this definition")