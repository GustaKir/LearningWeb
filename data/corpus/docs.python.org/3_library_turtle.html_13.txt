Title: Turtle Graphics Event Handling
URL: https://docs.python.org/3/library/turtle.html
Summary: This documentation chunk covers how to create a custom turtle class with click events to change the turtle's fill color. It demonstrates the use of the `onclick` and `onrelease` methods to bind functions for handling mouse interactions, as well as introducing the `ondrag` method for mouse-move events, including its parameters and functionality.
---

```
>>> classMyTurtle(Turtle):
...   defglow(self,x,y):
...     self.fillcolor("red")
...   defunglow(self,x,y):
...     self.fillcolor("")
...
>>> turtle = MyTurtle()
>>> turtle.onclick(turtle.glow)   # clicking on turtle turns fillcolor red,
>>> turtle.onrelease(turtle.unglow) # releasing turns it to transparent.

```


turtle.ondrag(_fun_ , _btn =1_, _add =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.ondrag "Link to this definition")
     

Parameters:
    
  * **fun** – a function with two arguments which will be called with the coordinates of the clicked point on the canvas
  * **btn** – number of the mouse-button, defaults to 1 (left mouse button)
  * **add** – `True` or `False` – if `True`, a new binding will be added, otherwise it will replace a former binding


Bind _fun_ to mouse-move events on this turtle. If _fun_ is `None`, existing bindings are removed.
Remark: Every sequence of mouse-move-events on a turtle is preceded by a mouse-click event on that turtle.
>>>```
>>> turtle.ondrag(turtle.goto)

```

Subsequently, clicking and dragging the Turtle will move it across the screen thereby producing handdrawings (if pen is down).
### Special Turtle methods[¶](https://docs.python.org/3/library/turtle.html#special-turtle-methods "Link to this heading") 

turtle.begin_poly()[¶](https://docs.python.org/3/library/turtle.html#turtle.begin_poly "Link to this definition")
    
Start recording the vertices of a polygon. Current turtle position is first vertex of polygon. 

turtle.end_poly()[¶](https://docs.python.org/3/library/turtle.html#turtle.end_poly "Link to this definition")
    
Stop recording the vertices of a polygon. Current turtle position is last vertex of polygon. This will be connected with the first vertex. 

turtle.get_poly()[¶](https://docs.python.org/3/library/turtle.html#turtle.get_poly "Link to this definition")
    
Return the last recorded polygon.
>>>```
>>> turtle.home()
>>> turtle.begin_poly()
>>> turtle.fd(100)
>>> turtle.left(20)
>>> turtle.fd(30)
>>> turtle.left(60)
>>> turtle.fd(50)
>>> turtle.end_poly()
>>> p = turtle.get_poly()
>>> register_shape("myFavouriteShape", p)

```


turtle.clone()[¶](https://docs.python.org/3/library/turtle.html#turtle.clone "Link to this definition")
    
Create and return a clone of the turtle with same position, heading and turtle properties.
>>>```
>>> mick = Turtle()
>>> joe = mick.clone()

```


turtle.getturtle()[¶](https://docs.python.org/3/library/turtle.html#turtle.getturtle "Link to this definition")


turtle.getpen()[¶](https://docs.python.org/3/library/turtle.html#turtle.getpen "Link to this definition")
    
Return the Turtle object itself. Only reasonable use: as a function to return the “anonymous turtle”:
>>>```
>>> pet = getturtle()
>>> pet.fd(50)
>>> pet
<turtle.Turtle object at 0x...>

```


turtle.getscreen()[¶](https://docs.python.org/3/library/turtle.html#turtle.getscreen "Link to this definition")
    
Return the [`TurtleScreen`](https://docs.python.org/3/library/turtle.html#turtle.TurtleScreen "turtle.TurtleScreen") object the turtle is drawing on. TurtleScreen methods can then be called for that object.
>>>```
>>> ts = turtle.getscreen()
>>> ts
<turtle._Screen object at 0x...>
>>> ts.bgcolor("pink")

```


turtle.setundobuffer(_size_)[¶](https://docs.python.org/3/library/turtle.html#turtle.setundobuffer "Link to this definition")
     

Parameters:
    
**size** – an integer or `None`
Set or disable undobuffer. If _size_ is an integer, an empty undobuffer of given size is installed. _size_ gives the maximum number of turtle actions that can be undone by the [`undo()`](https://docs.python.org/3/library/turtle.html#turtle.undo "turtle.undo") method/function. If _size_ is `None`, the undobuffer is disabled.
>>>```
>>> turtle.setundobuffer(42)

```


turtle.undobufferentries()[¶](https://docs.python.org/3/library/turtle.html#turtle.undobufferentries "Link to this definition")
    
Return number of entries in the undobuffer.
>>>```
>>> while undobufferentries():
...   undo()

```

### Compound shapes[¶](https://docs.python.org/3/library/turtle.html#compound-shapes "Link to this heading")
To use compound turtle shapes, which consist of several polygons of different color, you must use the helper class [`Shape`](https://docs.python.org/3/library/turtle.html#turtle.Shape "turtle.Shape") explicitly as described below:
  1. Create an empty Shape object of type “compound”.
  2. Add as many components to this object as desired, using the [`addcomponent()`](https://docs.python.org/3/library/turtle.html#turtle.Shape.addcomponent "turtle.Shape.addcomponent") method.
For example:
>>>```
>>> s = Shape("compound")
>>> poly1 = ((0,0),(10,-5),(0,10),(-10,-5))
>>> s.addcomponent(poly1, "red", "blue")
>>> poly2 = ((0,0),(10,-5),(-10,-5))
>>> s.addcomponent(poly2, "blue", "red")

```

  3. Now add the Shape to the Screen’s shapelist and use it:
>>>```
>>> register_shape("myshape", s)
>>> shape("myshape")