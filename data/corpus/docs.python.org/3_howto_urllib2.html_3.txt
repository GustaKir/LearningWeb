Title: Handling HTTP Errors in urllib
URL: https://docs.python.org/3/howto/urllib2.html
Summary: This section explains how to manage HTTP responses when using the urllib library in Python. It details the numeric status codes returned by the server, such as 404 (page not found), 403 (request forbidden), and 401 (authentication required). It highlights that while some errors are automatically handled by default handlers, others will result in an HTTPError being raised.
---

```
>>> req = urllib.request.Request('http://www.pretend_server.org')
>>> try: urllib.request.urlopen(req)
... except urllib.error.URLError as e:
...   print(e.reason)
...
(4, 'getaddrinfo failed')

```

### HTTPError[¶](https://docs.python.org/3/howto/urllib2.html#httperror "Link to this heading")
Every HTTP response from the server contains a numeric “status code”. Sometimes the status code indicates that the server is unable to fulfil the request. The default handlers will handle some of these responses for you (for example, if the response is a “redirection” that requests the client fetch the document from a different URL, urllib will handle that for you). For those it can’t handle, urlopen will raise an [`HTTPError`](https://docs.python.org/3/library/urllib.error.html#urllib.error.HTTPError "urllib.error.HTTPError"). Typical errors include ‘404’ (page not found), ‘403’ (request forbidden), and ‘401’ (authentication required).
See section 10 of [**RFC 2616**](https://datatracker.ietf.org/doc/html/rfc2616.html) for a reference on all the HTTP error codes.
The [`HTTPError`](https://docs.python.org/3/library/urllib.error.html#urllib.error.HTTPError "urllib.error.HTTPError") instance raised will have an integer ‘code’ attribute, which corresponds to the error sent by the server.
#### Error Codes[¶](https://docs.python.org/3/howto/urllib2.html#error-codes "Link to this heading")
Because the default handlers handle redirects (codes in the 300 range), and codes in the 100–299 range indicate success, you will usually only see error codes in the 400–599 range.
[`http.server.BaseHTTPRequestHandler.responses`](https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.responses "http.server.BaseHTTPRequestHandler.responses") is a useful dictionary of response codes in that shows all the response codes used by [**RFC 2616**](https://datatracker.ietf.org/doc/html/rfc2616.html). The dictionary is reproduced here for convenience
```
# Table mapping response codes to messages; entries have the
# form {code: (shortmessage, longmessage)}.
responses = {
  100: ('Continue', 'Request received, please continue'),
  101: ('Switching Protocols',
     'Switching to new protocol; obey Upgrade header'),
  200: ('OK', 'Request fulfilled, document follows'),
  201: ('Created', 'Document created, URL follows'),
  202: ('Accepted',
     'Request accepted, processing continues off-line'),
  203: ('Non-Authoritative Information', 'Request fulfilled from cache'),
  204: ('No Content', 'Request fulfilled, nothing follows'),
  205: ('Reset Content', 'Clear input form for further input.'),
  206: ('Partial Content', 'Partial content follows.'),
  300: ('Multiple Choices',
     'Object has several resources -- see URI list'),
  301: ('Moved Permanently', 'Object moved permanently -- see URI list'),
  302: ('Found', 'Object moved temporarily -- see URI list'),
  303: ('See Other', 'Object moved -- see Method and URL list'),
  304: ('Not Modified',
     'Document has not changed since given time'),
  305: ('Use Proxy',
     'You must use proxy specified in Location to access this '
     'resource.'),
  307: ('Temporary Redirect',
     'Object moved temporarily -- see URI list'),
  400: ('Bad Request',
     'Bad request syntax or unsupported method'),
  401: ('Unauthorized',
     'No permission -- see authorization schemes'),
  402: ('Payment Required',
     'No payment -- see charging schemes'),
  403: ('Forbidden',
     'Request forbidden -- authorization will not help'),
  404: ('Not Found', 'Nothing matches the given URI'),
  405: ('Method Not Allowed',
     'Specified method is invalid for this server.'),
  406: ('Not Acceptable', 'URI not available in preferred format.'),
  407: ('Proxy Authentication Required', 'You must authenticate with '
     'this proxy before proceeding.'),
  408: ('Request Timeout', 'Request timed out; try again later.'),
  409: ('Conflict', 'Request conflict.'),
  410: ('Gone',
     'URI no longer exists and has been permanently removed.'),
  411: ('Length Required', 'Client must specify Content-Length.'),
  412: ('Precondition Failed', 'Precondition in headers is false.'),
  413: ('Request Entity Too Large', 'Entity is too large.'),
  414: ('Request-URI Too Long', 'URI is too long.'),
  415: ('Unsupported Media Type', 'Entity body in unsupported format.'),
  416: ('Requested Range Not Satisfiable',
     'Cannot satisfy request range.'),
  417: ('Expectation Failed',
     'Expect condition could not be satisfied.'),
  500: ('Internal Server Error', 'Server got itself in trouble'),
  501: ('Not Implemented',
     'Server does not support this operation'),
  502: ('Bad Gateway', 'Invalid responses from another server/proxy.'),
  503: ('Service Unavailable',
     'The server cannot process the request due to a high load'),
  504: ('Gateway Timeout',
     'The gateway server did not receive a timely response'),
  505: ('HTTP Version Not Supported', 'Cannot fulfill request.'),
  }