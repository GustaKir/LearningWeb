Title: ResourceLoader Class in importlib
URL: https://docs.python.org/3/library/importlib.html
Summary: The ResourceLoader class is an abstract base class for loaders that implement the PEP 302 protocol for loading resources from storage. It has been deprecated since version 3.7 in favor of the TraversableResources class. The class includes an abstract method, get_data, which returns bytes for data located at a specified path.
---

_class_ importlib.abc.ResourceLoader[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.ResourceLoader "Link to this definition")
    
_Superseded by TraversableResources_
> An abstract base class for a [loader](https://docs.python.org/3/glossary.html#term-loader) which implements the optional [**PEP 302**](https://peps.python.org/pep-0302/) protocol for loading arbitrary resources from the storage back-end.
> Deprecated since version 3.7: This ABC is deprecated in favour of supporting resource loading through [`importlib.resources.abc.TraversableResources`](https://docs.python.org/3/library/importlib.resources.abc.html#importlib.resources.abc.TraversableResources "importlib.resources.abc.TraversableResources"). 

_abstractmethod_ get_data(_path_)[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.ResourceLoader.get_data "Link to this definition")
    
>> An abstract method to return the bytes for the data located at _path_. Loaders that have a file-like storage back-end that allows storing arbitrary data can implement this abstract method to give direct access to the data stored. [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") is to be raised if the _path_ cannot be found. The _path_ is expected to be constructed using a module’s [`__file__`](https://docs.python.org/3/reference/datamodel.html#module.__file__ "module.__file__") attribute or an item from a package’s [`__path__`](https://docs.python.org/3/reference/datamodel.html#module.__path__ "module.__path__").
>> Changed in version 3.4: Raises [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") instead of [`NotImplementedError`](https://docs.python.org/3/library/exceptions.html#NotImplementedError "NotImplementedError"). 

_class_ importlib.abc.InspectLoader[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.InspectLoader "Link to this definition")
    
An abstract base class for a [loader](https://docs.python.org/3/glossary.html#term-loader) which implements the optional [**PEP 302**](https://peps.python.org/pep-0302/) protocol for loaders that inspect modules. 

get_code(_fullname_)[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.InspectLoader.get_code "Link to this definition")
    
Return the code object for a module, or `None` if the module does not have a code object (as would be the case, for example, for a built-in module). Raise an [`ImportError`](https://docs.python.org/3/library/exceptions.html#ImportError "ImportError") if loader cannot find the requested module.
Note
While the method has a default implementation, it is suggested that it be overridden if possible for performance.
Changed in version 3.4: No longer abstract and a concrete implementation is provided. 

_abstractmethod_ get_source(_fullname_)[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.InspectLoader.get_source "Link to this definition")
    
> An abstract method to return the source of a module. It is returned as a text string using [universal newlines](https://docs.python.org/3/glossary.html#term-universal-newlines), translating all recognized line separators into `'\n'` characters. Returns `None` if no source is available (e.g. a built-in module). Raises [`ImportError`](https://docs.python.org/3/library/exceptions.html#ImportError "ImportError") if the loader cannot find the module specified.
> Changed in version 3.4: Raises [`ImportError`](https://docs.python.org/3/library/exceptions.html#ImportError "ImportError") instead of [`NotImplementedError`](https://docs.python.org/3/library/exceptions.html#NotImplementedError "NotImplementedError"). 

is_package(_fullname_)[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.InspectLoader.is_package "Link to this definition")
    
An optional method to return a true value if the module is a package, a false value otherwise. [`ImportError`](https://docs.python.org/3/library/exceptions.html#ImportError "ImportError") is raised if the [loader](https://docs.python.org/3/glossary.html#term-loader) cannot find the module.
Changed in version 3.4: Raises [`ImportError`](https://docs.python.org/3/library/exceptions.html#ImportError "ImportError") instead of [`NotImplementedError`](https://docs.python.org/3/library/exceptions.html#NotImplementedError "NotImplementedError").