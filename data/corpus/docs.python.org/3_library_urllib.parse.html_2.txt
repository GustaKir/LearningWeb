Title: Using urlparse from urllib.parse
URL: https://docs.python.org/3/library/urllib.parse.html
Summary: This example illustrates how to use the `urlparse` function from the `urllib.parse` module to parse a URL. It shows the creation of a `ParseResult` object and the use of the `_replace` method to modify the scheme. The note warns that `urlparse()` does not validate the URL, and it mentions key changes introduced in versions 3.2, 3.3, and 3.6 regarding IPv6 support and fragment parsing.
---

```
>>> fromurllib.parseimport urlparse
>>> u = urlparse('//www.cwi.nl:80/%7Eguido/Python.html')
>>> u
ParseResult(scheme='', netloc='www.cwi.nl:80', path='/%7Eguido/Python.html',
      params='', query='', fragment='')
>>> u._replace(scheme='http')
ParseResult(scheme='http', netloc='www.cwi.nl:80', path='/%7Eguido/Python.html',
      params='', query='', fragment='')

```

Warning
[`urlparse()`](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlparse "urllib.parse.urlparse") does not perform validation. See [URL parsing security](https://docs.python.org/3/library/urllib.parse.html#url-parsing-security) for details.
Changed in version 3.2: Added IPv6 URL parsing capabilities.
Changed in version 3.3: The fragment is now parsed for all URL schemes (unless _allow_fragments_ is false), in accordance with [**RFC 3986**](https://datatracker.ietf.org/doc/html/rfc3986.html). Previously, an allowlist of schemes that support fragments existed.
Changed in version 3.6: Out-of-range port numbers now raise [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError"), instead of returning [`None`](https://docs.python.org/3/library/constants.html#None "None").
Changed in version 3.8: Characters that affect netloc parsing under NFKC normalization will now raise [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError"). 

urllib.parse.parse_qs(_qs_ , _keep_blank_values =False_, _strict_parsing =False_, _encoding ='utf-8'_, _errors ='replace'_, _max_num_fields =None_, _separator ='&'_)[Â¶](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.parse_qs "Link to this definition")
    
Parse a query string given as a string argument (data of type _application/x-www-form-urlencoded_). Data are returned as a dictionary. The dictionary keys are the unique query variable names and the values are lists of values for each name.
The optional argument _keep_blank_values_ is a flag indicating whether blank values in percent-encoded queries should be treated as blank strings. A true value indicates that blanks should be retained as blank strings. The default false value indicates that blank values are to be ignored and treated as if they were not included.
The optional argument _strict_parsing_ is a flag indicating what to do with parsing errors. If false (the default), errors are silently ignored. If true, errors raise a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") exception.
The optional _encoding_ and _errors_ parameters specify how to decode percent-encoded sequences into Unicode characters, as accepted by the [`bytes.decode()`](https://docs.python.org/3/library/stdtypes.html#bytes.decode "bytes.decode") method.
The optional argument _max_num_fields_ is the maximum number of fields to read. If set, then throws a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if there are more than _max_num_fields_ fields read.
The optional argument _separator_ is the symbol to use for separating the query arguments. It defaults to `&`.
Use the [`urllib.parse.urlencode()`](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode "urllib.parse.urlencode") function (with the `doseq` parameter set to `True`) to convert such dictionaries into query strings.
Changed in version 3.2: Add _encoding_ and _errors_ parameters.
Changed in version 3.8: Added _max_num_fields_ parameter.
Changed in version 3.10: Added _separator_ parameter with the default value of `&`. Python versions earlier than Python 3.10 allowed using both `;` and `&` as query parameter separator. This has been changed to allow only a single separator key, with `&` as the default separator.