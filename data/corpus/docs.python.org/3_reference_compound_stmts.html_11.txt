Title: Value Pattern and Name Resolution in Python
URL: https://docs.python.org/3/reference/compound_stmts.html
Summary: This document section outlines the syntax for value patterns in Python, specifically detailing the structure of attributes and the process of name resolution. It explains that a dotted name succeeds in matching if it compares equal to a subject value, and notes that the interpreter may cache values for efficiency during pattern matching.
---

```
**value_pattern** ::= [attr](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-attr)
**attr**     ::= [name_or_attr](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-name_or_attr) "." NAME
**name_or_attr** ::= [attr](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-attr) | NAME

```

The dotted name in the pattern is looked up using standard Python [name resolution rules](https://docs.python.org/3/reference/executionmodel.html#resolve-names). The pattern succeeds if the value found compares equal to the subject value (using the `==` equality operator).
In simple terms `NAME1.NAME2` will succeed only if `<subject> == NAME1.NAME2`
Note
If the same value occurs multiple times in the same match statement, the interpreter may cache the first value found and reuse it rather than repeat the same lookup. This cache is strictly tied to a given execution of a given match statement.
#### 8.6.4.7. Group Patterns[¶](https://docs.python.org/3/reference/compound_stmts.html#group-patterns "Link to this heading")
A group pattern allows users to add parentheses around patterns to emphasize the intended grouping. Otherwise, it has no additional syntax. Syntax:
```
**group_pattern** ::= "(" [pattern](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-pattern) ")"

```

In simple terms `(P)` has the same effect as `P`.
#### 8.6.4.8. Sequence Patterns[¶](https://docs.python.org/3/reference/compound_stmts.html#sequence-patterns "Link to this heading")
A sequence pattern contains several subpatterns to be matched against sequence elements. The syntax is similar to the unpacking of a list or tuple.
```
**sequence_pattern**    ::= "[" [[maybe_sequence_pattern](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-maybe_sequence_pattern)] "]"
              | "(" [[open_sequence_pattern](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-open_sequence_pattern)] ")"
**open_sequence_pattern** ::= [maybe_star_pattern](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-maybe_star_pattern) "," [[maybe_sequence_pattern](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-maybe_sequence_pattern)]
**maybe_sequence_pattern** ::= ",".[maybe_star_pattern](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-maybe_star_pattern)+ ","?
**maybe_star_pattern**   ::= [star_pattern](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-star_pattern) | [pattern](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-pattern)
**star_pattern**      ::= "*" ([capture_pattern](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-capture_pattern) | [wildcard_pattern](https://docs.python.org/3/reference/compound_stmts.html#grammar-token-python-grammar-wildcard_pattern))