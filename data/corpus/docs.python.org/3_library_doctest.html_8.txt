Title: Doctest Directives
URL: https://docs.python.org/3/library/doctest.html
Summary: Doctest directives are special comments used to modify option flags for individual examples, allowing for customization of doctests through directive options and settings.
---

```

### Directives[¶](https://docs.python.org/3/library/doctest.html#directives "Link to this heading")
Doctest directives may be used to modify the [option flags](https://docs.python.org/3/library/doctest.html#doctest-options) for an individual example. Doctest directives are special Python comments following an example’s source code:
```
**directive**       ::= "#" "doctest:" [directive_options](https://docs.python.org/3/library/doctest.html#grammar-token-doctest-directive_options)
**directive_options**   ::= [directive_option](https://docs.python.org/3/library/doctest.html#grammar-token-doctest-directive_option) ("," [directive_option](https://docs.python.org/3/library/doctest.html#grammar-token-doctest-directive_option))*
**directive_option**   ::= [on_or_off](https://docs.python.org/3/library/doctest.html#grammar-token-doctest-on_or_off) [directive_option_name](https://docs.python.org/3/library/doctest.html#grammar-token-doctest-directive_option_name)
**on_or_off**       ::= "+" | "-"
**directive_option_name** ::= "DONT_ACCEPT_BLANKLINE" | "NORMALIZE_WHITESPACE" | ...

```

Whitespace is not allowed between the `+` or `-` and the directive option name. The directive option name can be any of the option flag names explained above.
An example’s doctest directives modify doctest’s behavior for that single example. Use `+` to enable the named behavior, or `-` to disable it.
For example, this test passes:
>>>```
>>> print(list(range(20))) # doctest: +NORMALIZE_WHITESPACE
[0,  1, 2, 3, 4, 5, 6, 7, 8, 9,
10, 11, 12, 13, 14, 15, 16, 17, 18, 19]

```

Without the directive it would fail, both because the actual output doesn’t have two blanks before the single-digit list elements, and because the actual output is on a single line. This test also passes, and also requires a directive to do so:
>>>```
>>> print(list(range(20))) # doctest: +ELLIPSIS
[0, 1, ..., 18, 19]

```

Multiple directives can be used on a single physical line, separated by commas:
>>>```
>>> print(list(range(20))) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
[0,  1, ...,  18,  19]

```

If multiple directive comments are used for a single example, then they are combined:
>>>```
>>> print(list(range(20))) # doctest: +ELLIPSIS
...             # doctest: +NORMALIZE_WHITESPACE
[0,  1, ...,  18,  19]

```

As the previous example shows, you can add `...` lines to your example containing only directives. This can be useful when an example is too long for a directive to comfortably fit on the same line:
>>>```
>>> print(list(range(5)) + list(range(10, 20)) + list(range(30, 40)))
... # doctest: +ELLIPSIS
[0, ..., 4, 10, ..., 19, 30, ..., 39]

```

Note that since all options are disabled by default, and directives apply only to the example they appear in, enabling options (via `+` in a directive) is usually the only meaningful choice. However, option flags can also be passed to functions that run doctests, establishing different defaults. In such cases, disabling an option via `-` in a directive can be useful.
### Warnings[¶](https://docs.python.org/3/library/doctest.html#warnings "Link to this heading")
[`doctest`](https://docs.python.org/3/library/doctest.html#module-doctest "doctest: Test pieces of code within docstrings.") is serious about requiring exact matches in expected output. If even a single character doesn’t match, the test fails. This will probably surprise you a few times, as you learn exactly what Python does and doesn’t guarantee about output. For example, when printing a set, Python doesn’t guarantee that the element is printed in any particular order, so a test like
>>>```
>>> foo()
{"spam", "eggs"}

```

is vulnerable! One workaround is to do
>>>```
>>> foo() == {"spam", "eggs"}
True

```

instead. Another is to do
>>>```
>>> d = sorted(foo())
>>> d
['eggs', 'spam']

```

There are others, but you get the idea.
Another bad idea is to print things that embed an object address, like
>>>```
>>> id(1.0) # certain to fail some of the time
7948648
>>> classC: pass
>>> C() # the default repr() for instances embeds an address
<C object at 0x00AC18F0>

```

The [`ELLIPSIS`](https://docs.python.org/3/library/doctest.html#doctest.ELLIPSIS "doctest.ELLIPSIS") directive gives a nice approach for the last example:
>>>```
>>> C() # doctest: +ELLIPSIS
<C object at 0x...>

```

Floating-point numbers are also subject to small output variations across platforms, because Python defers to the platform C library for float formatting, and C libraries vary widely in quality here.
>>>```
>>> 1./7 # risky
0.14285714285714285
>>> print(1./7) # safer
0.142857142857
>>> print(round(1./7, 6)) # much safer
0.142857

```

Numbers of the form `I/2.**J` are safe across all platforms, and I often contrive doctest examples to produce numbers of that form:
>>>```
>>> 3./4 # utterly safe
0.75