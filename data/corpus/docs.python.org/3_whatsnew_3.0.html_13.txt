Title: Python 3.0 Builtins Updates
URL: https://docs.python.org/3/whatsnew/3.0.html
Summary: Updates in Python 3.0 include the new `super()` function from PEP 3135, allowing invocation without arguments to automatically select the appropriate class and instance. Additionally, PEP 3111 introduces the renaming of `raw_input()` to `input()`, which now reads a line from `sys.stdin`.
---

### Builtins[¶](https://docs.python.org/3/whatsnew/3.0.html#builtins "Link to this heading")
  * [**PEP 3135**](https://peps.python.org/pep-3135/): New [`super()`](https://docs.python.org/3/library/functions.html#super "super"). You can now invoke [`super()`](https://docs.python.org/3/library/functions.html#super "super") without arguments and (assuming this is in a regular instance method defined inside a [`class`](https://docs.python.org/3/reference/compound_stmts.html#class) statement) the right class and instance will automatically be chosen. With arguments, the behavior of [`super()`](https://docs.python.org/3/library/functions.html#super "super") is unchanged.
  * [**PEP 3111**](https://peps.python.org/pep-3111/): `raw_input()` was renamed to [`input()`](https://docs.python.org/3/library/functions.html#input "input"). That is, the new [`input()`](https://docs.python.org/3/library/functions.html#input "input") function reads a line from [`sys.stdin`](https://docs.python.org/3/library/sys.html#sys.stdin "sys.stdin") and returns it with the trailing newline stripped. It raises [`EOFError`](https://docs.python.org/3/library/exceptions.html#EOFError "EOFError") if the input is terminated prematurely. To get the old behavior of [`input()`](https://docs.python.org/3/library/functions.html#input "input"), use `eval(input())`.
  * A new built-in function [`next()`](https://docs.python.org/3/library/functions.html#next "next") was added to call the [`__next__()`](https://docs.python.org/3/library/stdtypes.html#iterator.__next__ "iterator.__next__") method on an object.
  * The [`round()`](https://docs.python.org/3/library/functions.html#round "round") function rounding strategy and return type have changed. Exact halfway cases are now rounded to the nearest even result instead of away from zero. (For example, `round(2.5)` now returns `2` rather than `3`.) `round(x[, n])` now delegates to `x.__round__([n])` instead of always returning a float. It generally returns an integer when called with a single argument and a value of the same type as `x` when called with two arguments.
  * Moved `intern()` to [`sys.intern()`](https://docs.python.org/3/library/sys.html#sys.intern "sys.intern").
  * Removed: `apply()`. Instead of `apply(f, args)` use `f(*args)`.
  * Removed [`callable()`](https://docs.python.org/3/library/functions.html#callable "callable"). Instead of `callable(f)` you can use `isinstance(f, collections.Callable)`. The `operator.isCallable()` function is also gone.
  * Removed `coerce()`. This function no longer serves a purpose now that classic classes are gone.
  * Removed `execfile()`. Instead of `execfile(fn)` use `exec(open(fn).read())`.
  * Removed the `file` type. Use [`open()`](https://docs.python.org/3/library/functions.html#open "open"). There are now several different kinds of streams that open can return in the [`io`](https://docs.python.org/3/library/io.html#module-io "io: Core tools for working with streams.") module.
  * Removed `reduce()`. Use [`functools.reduce()`](https://docs.python.org/3/library/functools.html#functools.reduce "functools.reduce") if you really need it; however, 99 percent of the time an explicit [`for`](https://docs.python.org/3/reference/compound_stmts.html#for) loop is more readable.
  * Removed `reload()`. Use `imp.reload()`.
  * Removed. `dict.has_key()` – use the [`in`](https://docs.python.org/3/reference/expressions.html#in) operator instead.


## Build and C API Changes[¶](https://docs.python.org/3/whatsnew/3.0.html#build-and-c-api-changes "Link to this heading")
Due to time constraints, here is a _very_ incomplete list of changes to the C API.
  * Support for several platforms was dropped, including but not limited to Mac OS 9, BeOS, RISCOS, Irix, and Tru64.
  * [**PEP 3118**](https://peps.python.org/pep-3118/): New Buffer API.
  * [**PEP 3121**](https://peps.python.org/pep-3121/): Extension Module Initialization & Finalization.
  * [**PEP 3123**](https://peps.python.org/pep-3123/): Making [`PyObject_HEAD`](https://docs.python.org/3/c-api/structures.html#c.PyObject_HEAD "PyObject_HEAD") conform to standard C.
  * No more C API support for restricted execution.
  * `PyNumber_Coerce()`, `PyNumber_CoerceEx()`, `PyMember_Get()`, and `PyMember_Set()` C APIs are removed.
  * New C API [`PyImport_ImportModuleNoBlock()`](https://docs.python.org/3/c-api/import.html#c.PyImport_ImportModuleNoBlock "PyImport_ImportModuleNoBlock"), works like [`PyImport_ImportModule()`](https://docs.python.org/3/c-api/import.html#c.PyImport_ImportModule "PyImport_ImportModule") but won’t block on the import lock (returning an error instead).
  * Renamed the boolean conversion C-level slot and method: `nb_nonzero` is now `nb_bool`.
  * Removed `METH_OLDARGS` and `WITH_CYCLE_GC` from the C API.