Title: Python Types in the Standard Library
URL: https://docs.python.org/3/library/types.html
Summary: This document section outlines various types in Python's standard library, including types for bound methods, NotImplemented, method descriptors, and class method descriptors. Key versions for each type's introduction are also noted.
---

types.MethodWrapperType[¶](https://docs.python.org/3/library/types.html#types.MethodWrapperType "Link to this definition")
    
The type of _bound_ methods of some built-in data types and base classes. For example it is the type of `object().__str__`.
Added in version 3.7. 

types.NotImplementedType[¶](https://docs.python.org/3/library/types.html#types.NotImplementedType "Link to this definition")
    
The type of [`NotImplemented`](https://docs.python.org/3/library/constants.html#NotImplemented "NotImplemented").
Added in version 3.10. 

types.MethodDescriptorType[¶](https://docs.python.org/3/library/types.html#types.MethodDescriptorType "Link to this definition")
    
The type of methods of some built-in data types such as [`str.join()`](https://docs.python.org/3/library/stdtypes.html#str.join "str.join").
Added in version 3.7. 

types.ClassMethodDescriptorType[¶](https://docs.python.org/3/library/types.html#types.ClassMethodDescriptorType "Link to this definition")
    
The type of _unbound_ class methods of some built-in data types such as `dict.__dict__['fromkeys']`.
Added in version 3.7. 

_class_ types.ModuleType(_name_ , _doc =None_)[¶](https://docs.python.org/3/library/types.html#types.ModuleType "Link to this definition")
    
The type of [modules](https://docs.python.org/3/glossary.html#term-module). The constructor takes the name of the module to be created and optionally its [docstring](https://docs.python.org/3/glossary.html#term-docstring).
See also 

[Documentation on module objects](https://docs.python.org/3/reference/datamodel.html#module-objects)
    
Provides details on the special attributes that can be found on instances of `ModuleType`. 

[`importlib.util.module_from_spec()`](https://docs.python.org/3/library/importlib.html#importlib.util.module_from_spec "importlib.util.module_from_spec")
    
Modules created using the `ModuleType` constructor are created with many of their special attributes unset or set to default values. `module_from_spec()` provides a more robust way of creating `ModuleType` instances which ensures the various attributes are set appropriately. 

types.EllipsisType[¶](https://docs.python.org/3/library/types.html#types.EllipsisType "Link to this definition")
    
The type of [`Ellipsis`](https://docs.python.org/3/library/constants.html#Ellipsis "Ellipsis").
Added in version 3.10. 

_class_ types.GenericAlias(_t_origin_ , _t_args_)[¶](https://docs.python.org/3/library/types.html#types.GenericAlias "Link to this definition")
    
The type of [parameterized generics](https://docs.python.org/3/library/stdtypes.html#types-genericalias) such as `list[int]`.
`t_origin` should be a non-parameterized generic class, such as `list`, `tuple` or `dict`. `t_args` should be a [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple") (possibly of length 1) of types which parameterize `t_origin`:
>>>```
>>> fromtypesimport GenericAlias
>>> list[int] == GenericAlias(list, (int,))
True
>>> dict[str, int] == GenericAlias(dict, (str, int))
True