Title: Python 3.3 Updates on AST, Threading Module, and C Code Porting
URL: https://docs.python.org/3/whatsnew/3.3.html
Summary: This section highlights important changes in Python 3.3, including how to handle decisions based on AST version with `sys.version_info`, modifications required for the `threading` module due to public class accessibility, and the removal of undocumented debugging features in threading. It also introduces considerations for porting C code following updates to the buffer API.
---

If you need to make decisions affected by the AST version, use [`sys.version_info`](https://docs.python.org/3/library/sys.html#sys.version_info "sys.version_info") to make the decision.
  * Code that used to work around the fact that the [`threading`](https://docs.python.org/3/library/threading.html#module-threading "threading: Thread-based parallelism.") module used factory functions by subclassing the private classes will need to change to subclass the now-public classes.
  * The undocumented debugging machinery in the threading module has been removed, simplifying the code. This should have no effect on production code, but is mentioned here in case any application debug frameworks were interacting with it ([bpo-13550](https://bugs.python.org/issue?@action=redirect&bpo=13550)).


### Porting C code[¶](https://docs.python.org/3/whatsnew/3.3.html#porting-c-code "Link to this heading")
  * In the course of changes to the buffer API the undocumented `smalltable` member of the [`Py_buffer`](https://docs.python.org/3/c-api/buffer.html#c.Py_buffer "Py_buffer") structure has been removed and the layout of the `PyMemoryViewObject` has changed.
All extensions relying on the relevant parts in `memoryobject.h` or `object.h` must be rebuilt.
  * Due to [PEP 393](https://docs.python.org/3/whatsnew/3.3.html#pep-393), the [`Py_UNICODE`](https://docs.python.org/3/c-api/unicode.html#c.Py_UNICODE "Py_UNICODE") type and all functions using this type are deprecated (but will stay available for at least five years). If you were using low-level Unicode APIs to construct and access unicode objects and you want to benefit of the memory footprint reduction provided by [**PEP 393**](https://peps.python.org/pep-0393/), you have to convert your code to the new [Unicode API](https://docs.python.org/3/c-api/unicode.html).
However, if you only have been using high-level functions such as [`PyUnicode_Concat()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_Concat "PyUnicode_Concat"), [`PyUnicode_Join()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_Join "PyUnicode_Join") or [`PyUnicode_FromFormat()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FromFormat "PyUnicode_FromFormat"), your code will automatically take advantage of the new unicode representations.
  * [`PyImport_GetMagicNumber()`](https://docs.python.org/3/c-api/import.html#c.PyImport_GetMagicNumber "PyImport_GetMagicNumber") now returns `-1` upon failure.
  * As a negative value for the _level_ argument to [`__import__()`](https://docs.python.org/3/library/functions.html#import__ "__import__") is no longer valid, the same now holds for [`PyImport_ImportModuleLevel()`](https://docs.python.org/3/c-api/import.html#c.PyImport_ImportModuleLevel "PyImport_ImportModuleLevel"). This also means that the value of _level_ used by [`PyImport_ImportModuleEx()`](https://docs.python.org/3/c-api/import.html#c.PyImport_ImportModuleEx "PyImport_ImportModuleEx") is now `0` instead of `-1`.


### Building C extensions[¶](https://docs.python.org/3/whatsnew/3.3.html#building-c-extensions "Link to this heading")
  * The range of possible file names for C extensions has been narrowed. Very rarely used spellings have been suppressed: under POSIX, files named `xxxmodule.so`, `xxxmodule.abi3.so` and `xxxmodule.cpython-*.so` are no longer recognized as implementing the `xxx` module. If you had been generating such files, you have to switch to the other spellings (i.e., remove the `module` string from the file names).
(implemented in [bpo-14040](https://bugs.python.org/issue?@action=redirect&bpo=14040).)


### Command Line Switch Changes[¶](https://docs.python.org/3/whatsnew/3.3.html#command-line-switch-changes "Link to this heading")
  * The -Q command-line flag and related artifacts have been removed. Code checking sys.flags.division_warning will need updating.
([bpo-10998](https://bugs.python.org/issue?@action=redirect&bpo=10998), contributed by Éric Araujo.)
  * When **python** is started with [`-S`](https://docs.python.org/3/using/cmdline.html#cmdoption-S), `import site` will no longer add site-specific paths to the module search paths. In previous versions, it did.
([bpo-11591](https://bugs.python.org/issue?@action=redirect&bpo=11591), contributed by Carl Meyer with editions by Éric Araujo.)