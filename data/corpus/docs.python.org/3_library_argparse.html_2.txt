Title: ArgumentParser Objects in argparse
URL: https://docs.python.org/3/library/argparse.html
Summary: This section discusses the `ArgumentParser` class in the `argparse` library, which is used for handling command-line arguments in Python. It outlines the various parameters available when creating an `ArgumentParser` object, such as `prog`, `usage`, and `description`, among others.
---

```

Note
If you’re looking for a guide about how to upgrade [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") code to `argparse`, see [Upgrading Optparse Code](https://docs.python.org/3/howto/argparse-optparse.html#upgrading-optparse-code).
## ArgumentParser objects[¶](https://docs.python.org/3/library/argparse.html#argumentparser-objects "Link to this heading") 

_class_ argparse.ArgumentParser(_prog =None_, _usage =None_, _description =None_, _epilog =None_, _parents =[]_, _formatter_class =argparse.HelpFormatter_, _prefix_chars ='-'_, _fromfile_prefix_chars =None_, _argument_default =None_, _conflict_handler ='error'_, _add_help =True_, _allow_abbrev =True_, _exit_on_error =True_)[¶](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser "Link to this definition")
    
Create a new [`ArgumentParser`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser "argparse.ArgumentParser") object. All parameters should be passed as keyword arguments. Each parameter has its own more detailed description below, but in short they are:
  * [prog](https://docs.python.org/3/library/argparse.html#prog) - The name of the program (default: `os.path.basename(sys.argv[0])`)
  * [usage](https://docs.python.org/3/library/argparse.html#usage) - The string describing the program usage (default: generated from arguments added to parser)
  * [description](https://docs.python.org/3/library/argparse.html#description) - Text to display before the argument help (by default, no text)
  * [epilog](https://docs.python.org/3/library/argparse.html#epilog) - Text to display after the argument help (by default, no text)
  * [parents](https://docs.python.org/3/library/argparse.html#parents) - A list of [`ArgumentParser`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser "argparse.ArgumentParser") objects whose arguments should also be included
  * [formatter_class](https://docs.python.org/3/library/argparse.html#formatter-class) - A class for customizing the help output
  * [prefix_chars](https://docs.python.org/3/library/argparse.html#prefix-chars) - The set of characters that prefix optional arguments (default: ‘-‘)
  * [fromfile_prefix_chars](https://docs.python.org/3/library/argparse.html#fromfile-prefix-chars) - The set of characters that prefix files from which additional arguments should be read (default: `None`)
  * [argument_default](https://docs.python.org/3/library/argparse.html#argument-default) - The global default value for arguments (default: `None`)
  * [conflict_handler](https://docs.python.org/3/library/argparse.html#conflict-handler) - The strategy for resolving conflicting optionals (usually unnecessary)
  * [add_help](https://docs.python.org/3/library/argparse.html#add-help) - Add a `-h/--help` option to the parser (default: `True`)
  * [allow_abbrev](https://docs.python.org/3/library/argparse.html#allow-abbrev) - Allows long options to be abbreviated if the abbreviation is unambiguous. (default: `True`)
  * [exit_on_error](https://docs.python.org/3/library/argparse.html#exit-on-error) - Determines whether or not `ArgumentParser` exits with error info when an error occurs. (default: `True`)


Changed in version 3.5: _allow_abbrev_ parameter was added.
Changed in version 3.8: In previous versions, _allow_abbrev_ also disabled grouping of short flags such as `-vv` to mean `-v -v`.
Changed in version 3.9: _exit_on_error_ parameter was added.
The following sections describe how each of these are used.
### prog[¶](https://docs.python.org/3/library/argparse.html#prog "Link to this heading")
By default, [`ArgumentParser`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser "argparse.ArgumentParser") calculates the name of the program to display in help messages depending on the way the Python interpreter was run:
  * The [`base name`](https://docs.python.org/3/library/os.path.html#os.path.basename "os.path.basename") of `sys.argv[0]` if a file was passed as argument.
  * The Python interpreter name followed by `sys.argv[0]` if a directory or a zipfile was passed as argument.
  * The Python interpreter name followed by `-m` followed by the module or package name if the [`-m`](https://docs.python.org/3/using/cmdline.html#cmdoption-m) option was used.


This default is almost always desirable because it will make the help messages match the string that was used to invoke the program on the command line. However, to change this default behavior, another value can be supplied using the `prog=` argument to [`ArgumentParser`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser "argparse.ArgumentParser"):
>>>```
>>> parser = argparse.ArgumentParser(prog='myprogram')
>>> parser.print_help()
usage: myprogram [-h]
options:
 -h, --help show this help message and exit