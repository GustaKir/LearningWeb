Title: Email Generator Class Overview
URL: https://docs.python.org/3/library/email.generator.html
Summary: The `email.generator.Generator` class creates a generator object that can write email messages to a specified file-like object. It supports methods to flatten the email message or write text directly. An optional parameter can be used to modify lines starting with 'From' to prevent confusion in email bodies.
---

_class_ email.generator.Generator(_outfp_ , _mangle_from_ =None_, _maxheaderlen =None_, _*_ , _policy =None_)[¶](https://docs.python.org/3/library/email.generator.html#email.generator.Generator "Link to this definition")
    
Return a [`Generator`](https://docs.python.org/3/library/email.generator.html#email.generator.Generator "email.generator.Generator") object that will write any message provided to the [`flatten()`](https://docs.python.org/3/library/email.generator.html#email.generator.Generator.flatten "email.generator.Generator.flatten") method, or any text provided to the [`write()`](https://docs.python.org/3/library/email.generator.html#email.generator.Generator.write "email.generator.Generator.write") method, to the [file-like object](https://docs.python.org/3/glossary.html#term-file-like-object) _outfp_. _outfp_ must support a `write` method that accepts string data.
If optional _mangle_from__ is `True`, put a `>` character in front of any line in the body that starts with the exact string `"From "`, that is `From` followed by a space at the beginning of a line. _mangle_from__ defaults to the value of the [`mangle_from_`](https://docs.python.org/3/library/email.policy.html#email.policy.Policy.mangle_from_ "email.policy.Policy.mangle_from_") setting of the _policy_ (which is `True` for the [`compat32`](https://docs.python.org/3/library/email.policy.html#email.policy.compat32 "email.policy.compat32") policy and `False` for all others). _mangle_from__ is intended for use when messages are stored in Unix mbox format (see [`mailbox`](https://docs.python.org/3/library/mailbox.html#module-mailbox "mailbox: Manipulate mailboxes in various formats") and [WHY THE CONTENT-LENGTH FORMAT IS BAD](https://www.jwz.org/doc/content-length.html)).
If _maxheaderlen_ is not `None`, refold any header lines that are longer than _maxheaderlen_ , or if `0`, do not rewrap any headers. If _manheaderlen_ is `None` (the default), wrap headers and other message lines according to the _policy_ settings.
If _policy_ is specified, use that policy to control message generation. If _policy_ is `None` (the default), use the policy associated with the [`Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "email.message.Message") or [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") object passed to `flatten` to control the message generation. See [`email.policy`](https://docs.python.org/3/library/email.policy.html#module-email.policy "email.policy: Controlling the parsing and generating of messages") for details on what _policy_ controls.
Changed in version 3.3: Added the _policy_ keyword.
Changed in version 3.6: The default behavior of the _mangle_from__ and _maxheaderlen_ parameters is to follow the policy. 

flatten(_msg_ , _unixfrom =False_, _linesep =None_)[¶](https://docs.python.org/3/library/email.generator.html#email.generator.Generator.flatten "Link to this definition")
    
Print the textual representation of the message object structure rooted at _msg_ to the output file specified when the [`Generator`](https://docs.python.org/3/library/email.generator.html#email.generator.Generator "email.generator.Generator") instance was created.
If the [`policy`](https://docs.python.org/3/library/email.policy.html#module-email.policy "email.policy: Controlling the parsing and generating of messages") option [`cte_type`](https://docs.python.org/3/library/email.policy.html#email.policy.Policy.cte_type "email.policy.Policy.cte_type") is `8bit`, generate the message as if the option were set to `7bit`. (This is required because strings cannot represent non-ASCII bytes.) Convert any bytes with the high bit set as needed using an ASCII-compatible _Content-Transfer-Encoding_. That is, transform parts with non-ASCII _Content-Transfer-Encoding_ (_Content-Transfer-Encoding: 8bit_) to an ASCII compatible _Content-Transfer-Encoding_ , and encode RFC-invalid non-ASCII bytes in headers using the MIME `unknown-8bit` character set, thus rendering them RFC-compliant.
If _unixfrom_ is `True`, print the envelope header delimiter used by the Unix mailbox format (see [`mailbox`](https://docs.python.org/3/library/mailbox.html#module-mailbox "mailbox: Manipulate mailboxes in various formats")) before the first of the [**RFC 5322**](https://datatracker.ietf.org/doc/html/rfc5322.html) headers of the root message object. If the root object has no envelope header, craft a standard one. The default is `False`. Note that for subparts, no envelope header is ever printed.
If _linesep_ is not `None`, use it as the separator character between all the lines of the flattened message. If _linesep_ is `None` (the default), use the value specified in the _policy_.
Changed in version 3.2: Added support for re-encoding `8bit` message bodies, and the _linesep_ argument.