Title: Changes to str.format() and Complex Numbers in Python 2.7
URL: https://docs.python.org/3/whatsnew/2.7.html
Summary: This section explains the behavior of auto-numbering in `str.format()`, stating that mixing auto-numbering with explicit numbering is not allowed, but can be combined with named fields. Additionally, it notes that complex numbers now support formatting with `format()`, defaulting to right-alignment, and that precision affects both real and imaginary parts.
---

```

The auto-numbering takes the fields from left to right, so the first `{...}` specifier will use the first argument to [`str.format()`](https://docs.python.org/3/library/stdtypes.html#str.format "str.format"), the next specifier will use the next argument, and so on. You can’t mix auto-numbering and explicit numbering – either number all of your specifier fields or none of them – but you can mix auto-numbering and named fields, as in the second example above. (Contributed by Eric Smith; [bpo-5237](https://bugs.python.org/issue?@action=redirect&bpo=5237).)
Complex numbers now correctly support usage with [`format()`](https://docs.python.org/3/library/functions.html#format "format"), and default to being right-aligned. Specifying a precision or comma-separation applies to both the real and imaginary parts of the number, but a specified field width and alignment is applied to the whole of the resulting `1.5+3j` output. (Contributed by Eric Smith; [bpo-1588](https://bugs.python.org/issue?@action=redirect&bpo=1588) and [bpo-7988](https://bugs.python.org/issue?@action=redirect&bpo=7988).)
The ‘F’ format code now always formats its output using uppercase characters, so it will now produce ‘INF’ and ‘NAN’. (Contributed by Eric Smith; [bpo-3382](https://bugs.python.org/issue?@action=redirect&bpo=3382).)
A low-level change: the [`object.__format__()`](https://docs.python.org/3/reference/datamodel.html#object.__format__ "object.__format__") method now triggers a [`PendingDeprecationWarning`](https://docs.python.org/3/library/exceptions.html#PendingDeprecationWarning "PendingDeprecationWarning") if it’s passed a format string, because the `__format__()` method for [`object`](https://docs.python.org/3/library/functions.html#object "object") converts the object to a string representation and formats that. Previously the method silently applied the format string to the string representation, but that could hide mistakes in Python code. If you’re supplying formatting information such as an alignment or precision, presumably you’re expecting the formatting to be applied in some object-specific way. (Fixed by Eric Smith; [bpo-7994](https://bugs.python.org/issue?@action=redirect&bpo=7994).)
  * The [`int()`](https://docs.python.org/3/library/functions.html#int "int") and `long()` types gained a `bit_length` method that returns the number of bits necessary to represent its argument in binary:
>>>```
>>> n = 37
>>> bin(n)
'0b100101'
>>> n.bit_length()
6
>>> n = 2**123-1
>>> n.bit_length()
123
>>> (n+1).bit_length()
124