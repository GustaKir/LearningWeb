Title: Introduction to the `os` Module in Python
URL: https://docs.python.org/3/library/os.html
Summary: The `os` module provides a portable interface for operating system functionalities. It links to other modules for specific tasks: `open()` for file operations, `os.path` for path manipulation, `fileinput` for reading files from command line, and `tempfile` for creating temporary files and directories.
---

# `os` — Miscellaneous operating system interfaces[¶](https://docs.python.org/3/library/os.html#module-os "Link to this heading")
**Source code:** [Lib/os.py](https://github.com/python/cpython/tree/3.13/Lib/os.py)
This module provides a portable way of using operating system dependent functionality. If you just want to read or write a file see [`open()`](https://docs.python.org/3/library/functions.html#open "open"), if you want to manipulate paths, see the [`os.path`](https://docs.python.org/3/library/os.path.html#module-os.path "os.path: Operations on pathnames.") module, and if you want to read all the lines in all the files on the command line see the [`fileinput`](https://docs.python.org/3/library/fileinput.html#module-fileinput "fileinput: Loop over standard input or a list of files.") module. For creating temporary files and directories see the [`tempfile`](https://docs.python.org/3/library/tempfile.html#module-tempfile "tempfile: Generate temporary files and directories.") module, and for high-level file and directory handling see the [`shutil`](https://docs.python.org/3/library/shutil.html#module-shutil "shutil: High-level file operations, including copying.") module.
Notes on the availability of these functions:
  * The design of all built-in operating system dependent modules of Python is such that as long as the same functionality is available, it uses the same interface; for example, the function `os.stat(path)` returns stat information about _path_ in the same format (which happens to have originated with the POSIX interface).
  * Extensions peculiar to a particular operating system are also available through the [`os`](https://docs.python.org/3/library/os.html#module-os "os: Miscellaneous operating system interfaces.") module, but using them is of course a threat to portability.
  * All functions accepting path or file names accept both bytes and string objects, and result in an object of the same type, if a path or file name is returned.
  * On VxWorks, os.popen, os.fork, os.execv and os.spawn*p* are not supported.
  * On WebAssembly platforms, Android and iOS, large parts of the [`os`](https://docs.python.org/3/library/os.html#module-os "os: Miscellaneous operating system interfaces.") module are not available or behave differently. APIs related to processes (e.g. [`fork()`](https://docs.python.org/3/library/os.html#os.fork "os.fork"), [`execve()`](https://docs.python.org/3/library/os.html#os.execve "os.execve")) and resources (e.g. [`nice()`](https://docs.python.org/3/library/os.html#os.nice "os.nice")) are not available. Others like [`getuid()`](https://docs.python.org/3/library/os.html#os.getuid "os.getuid") and [`getpid()`](https://docs.python.org/3/library/os.html#os.getpid "os.getpid") are emulated or stubs. WebAssembly platforms also lack support for signals (e.g. [`kill()`](https://docs.python.org/3/library/os.html#os.kill "os.kill"), [`wait()`](https://docs.python.org/3/library/os.html#os.wait "os.wait")).


Note
All functions in this module raise [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") (or subclasses thereof) in the case of invalid or inaccessible file names and paths, or other arguments that have the correct type, but are not accepted by the operating system. 

_exception_ os.error[¶](https://docs.python.org/3/library/os.html#os.error "Link to this definition")
    
An alias for the built-in [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") exception.