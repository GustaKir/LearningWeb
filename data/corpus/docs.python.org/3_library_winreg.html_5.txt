Title: winreg.SetValue Function
URL: https://docs.python.org/3/library/winreg.html
Summary: The winreg.SetValue function associates a value with a specified registry key and subkey. It requires an open key or predefined HKEY constant, a subkey name, an integer type (currently only REG_SZ for strings), and the new value as a string. If the subkey does not exist, it will be created. Value lengths are limited by available memory.
---

winreg.SetValue(_key_ , _sub_key_ , _type_ , _value_)[¶](https://docs.python.org/3/library/winreg.html#winreg.SetValue "Link to this definition")
    
Associates a value with a specified key.
_key_ is an already open key, or one of the predefined [HKEY_* constants](https://docs.python.org/3/library/winreg.html#hkey-constants).
_sub_key_ is a string that names the subkey with which the value is associated.
_type_ is an integer that specifies the type of the data. Currently this must be [`REG_SZ`](https://docs.python.org/3/library/winreg.html#winreg.REG_SZ "winreg.REG_SZ"), meaning only strings are supported. Use the [`SetValueEx()`](https://docs.python.org/3/library/winreg.html#winreg.SetValueEx "winreg.SetValueEx") function for support for other data types.
_value_ is a string that specifies the new value.
If the key specified by the _sub_key_ parameter does not exist, the SetValue function creates it.
Value lengths are limited by available memory. Long values (more than 2048 bytes) should be stored as files with the filenames stored in the configuration registry. This helps the registry perform efficiently.
The key identified by the _key_ parameter must have been opened with [`KEY_SET_VALUE`](https://docs.python.org/3/library/winreg.html#winreg.KEY_SET_VALUE "winreg.KEY_SET_VALUE") access.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `winreg.SetValue` with arguments `key`, `sub_key`, `type`, `value`. 

winreg.SetValueEx(_key_ , _value_name_ , _reserved_ , _type_ , _value_)[¶](https://docs.python.org/3/library/winreg.html#winreg.SetValueEx "Link to this definition")
    
Stores data in the value field of an open registry key.
_key_ is an already open key, or one of the predefined [HKEY_* constants](https://docs.python.org/3/library/winreg.html#hkey-constants).
_value_name_ is a string that names the subkey with which the value is associated.
_reserved_ can be anything – zero is always passed to the API.
_type_ is an integer that specifies the type of the data. See [Value Types](https://docs.python.org/3/library/winreg.html#value-types) for the available types.
_value_ is a string that specifies the new value.
This method can also set additional value and type information for the specified key. The key identified by the key parameter must have been opened with [`KEY_SET_VALUE`](https://docs.python.org/3/library/winreg.html#winreg.KEY_SET_VALUE "winreg.KEY_SET_VALUE") access.
To open the key, use the [`CreateKey()`](https://docs.python.org/3/library/winreg.html#winreg.CreateKey "winreg.CreateKey") or [`OpenKey()`](https://docs.python.org/3/library/winreg.html#winreg.OpenKey "winreg.OpenKey") methods.
Value lengths are limited by available memory. Long values (more than 2048 bytes) should be stored as files with the filenames stored in the configuration registry. This helps the registry perform efficiently.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `winreg.SetValue` with arguments `key`, `sub_key`, `type`, `value`. 

winreg.DisableReflectionKey(_key_)[¶](https://docs.python.org/3/library/winreg.html#winreg.DisableReflectionKey "Link to this definition")
    
Disables registry reflection for 32-bit processes running on a 64-bit operating system.
_key_ is an already open key, or one of the predefined [HKEY_* constants](https://docs.python.org/3/library/winreg.html#hkey-constants).
Will generally raise [`NotImplementedError`](https://docs.python.org/3/library/exceptions.html#NotImplementedError "NotImplementedError") if executed on a 32-bit operating system.
If the key is not on the reflection list, the function succeeds but has no effect. Disabling reflection for a key does not affect reflection of any subkeys.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `winreg.DisableReflectionKey` with argument `key`. 

winreg.EnableReflectionKey(_key_)[¶](https://docs.python.org/3/library/winreg.html#winreg.EnableReflectionKey "Link to this definition")
    
Restores registry reflection for the specified disabled key.
_key_ is an already open key, or one of the predefined [HKEY_* constants](https://docs.python.org/3/library/winreg.html#hkey-constants).
Will generally raise [`NotImplementedError`](https://docs.python.org/3/library/exceptions.html#NotImplementedError "NotImplementedError") if executed on a 32-bit operating system.
Restoring reflection for a key does not affect reflection of any subkeys.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `winreg.EnableReflectionKey` with argument `key`.