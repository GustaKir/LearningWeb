Title: Glossary Terms: Coroutine Function and CPython
URL: https://docs.python.org/3/glossary.html
Summary: This section defines a 'coroutine function' as a function that returns a coroutine object, typically defined using 'async def' and can include 'await', 'async for', and 'async with' keywords as introduced by PEP 492. It also describes 'CPython' as the standard implementation of the Python programming language found on python.org.
---

coroutine function[¶](https://docs.python.org/3/glossary.html#term-coroutine-function "Link to this term")
    
A function which returns a [coroutine](https://docs.python.org/3/glossary.html#term-coroutine) object. A coroutine function may be defined with the [`async def`](https://docs.python.org/3/reference/compound_stmts.html#async-def) statement, and may contain [`await`](https://docs.python.org/3/reference/expressions.html#await), [`async for`](https://docs.python.org/3/reference/compound_stmts.html#async-for), and [`async with`](https://docs.python.org/3/reference/compound_stmts.html#async-with) keywords. These were introduced by [**PEP 492**](https://peps.python.org/pep-0492/). 

CPython[¶](https://docs.python.org/3/glossary.html#term-CPython "Link to this term")
    
The canonical implementation of the Python programming language, as distributed on [python.org](https://www.python.org). The term “CPython” is used when necessary to distinguish this implementation from others such as Jython or IronPython. 

current context[¶](https://docs.python.org/3/glossary.html#term-current-context "Link to this term")
    
The [context](https://docs.python.org/3/glossary.html#term-context) ([`contextvars.Context`](https://docs.python.org/3/library/contextvars.html#contextvars.Context "contextvars.Context") object) that is currently used by [`ContextVar`](https://docs.python.org/3/library/contextvars.html#contextvars.ContextVar "contextvars.ContextVar") objects to access (get or set) the values of [context variables](https://docs.python.org/3/glossary.html#term-context-variable). Each thread has its own current context. Frameworks for executing asynchronous tasks (see [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O.")) associate each task with a context which becomes the current context whenever the task starts or resumes execution. 

decorator[¶](https://docs.python.org/3/glossary.html#term-decorator "Link to this term")
    
A function returning another function, usually applied as a function transformation using the `@wrapper` syntax. Common examples for decorators are [`classmethod()`](https://docs.python.org/3/library/functions.html#classmethod "classmethod") and [`staticmethod()`](https://docs.python.org/3/library/functions.html#staticmethod "staticmethod").
The decorator syntax is merely syntactic sugar, the following two function definitions are semantically equivalent:
```
deff(arg):
  ...
f = staticmethod(f)
@staticmethod
deff(arg):
  ...