Title: Python 3.7 New Features Overview
URL: https://docs.python.org/3/whatsnew/3.7.html
Summary: This document highlights several Python Enhancement Proposals (PEPs) for Python 3.7, including PEP 539 which introduces a new C-API for thread-local storage, PEP 562 that allows customization of module attribute access using `__getattr__()` and `__dir__()`, and PEP 564 that adds new time functions with nanosecond resolution.
---

[**PEP 539**](https://peps.python.org/pep-0539/) – A New C-API for Thread-Local Storage in CPython
    
PEP written by Erik M. Bray; implementation by Masayuki Yamamoto.
### PEP 562: Customization of Access to Module Attributes[¶](https://docs.python.org/3/whatsnew/3.7.html#pep-562-customization-of-access-to-module-attributes "Link to this heading")
Python 3.7 allows defining `__getattr__()` on modules and will call it whenever a module attribute is otherwise not found. Defining `__dir__()` on modules is now also allowed.
A typical example of where this may be useful is module attribute deprecation and lazy loading.
See also 

[**PEP 562**](https://peps.python.org/pep-0562/) – Module `__getattr__` and `__dir__`
    
PEP written and implemented by Ivan Levkivskyi
### PEP 564: New Time Functions With Nanosecond Resolution[¶](https://docs.python.org/3/whatsnew/3.7.html#pep-564-new-time-functions-with-nanosecond-resolution "Link to this heading")
The resolution of clocks in modern systems can exceed the limited precision of a floating-point number returned by the [`time.time()`](https://docs.python.org/3/library/time.html#time.time "time.time") function and its variants. To avoid loss of precision, [**PEP 564**](https://peps.python.org/pep-0564/) adds six new “nanosecond” variants of the existing timer functions to the [`time`](https://docs.python.org/3/library/time.html#module-time "time: Time access and conversions.") module:
  * [`time.clock_gettime_ns()`](https://docs.python.org/3/library/time.html#time.clock_gettime_ns "time.clock_gettime_ns")
  * [`time.clock_settime_ns()`](https://docs.python.org/3/library/time.html#time.clock_settime_ns "time.clock_settime_ns")
  * [`time.monotonic_ns()`](https://docs.python.org/3/library/time.html#time.monotonic_ns "time.monotonic_ns")
  * [`time.perf_counter_ns()`](https://docs.python.org/3/library/time.html#time.perf_counter_ns "time.perf_counter_ns")
  * [`time.process_time_ns()`](https://docs.python.org/3/library/time.html#time.process_time_ns "time.process_time_ns")
  * [`time.time_ns()`](https://docs.python.org/3/library/time.html#time.time_ns "time.time_ns")


The new functions return the number of nanoseconds as an integer value.
[**Measurements**](https://peps.python.org/pep-0564/#annex-clocks-resolution-in-python) show that on Linux and Windows the resolution of [`time.time_ns()`](https://docs.python.org/3/library/time.html#time.time_ns "time.time_ns") is approximately 3 times better than that of [`time.time()`](https://docs.python.org/3/library/time.html#time.time "time.time").
See also