Title: Py_GetPath Function Overview
URL: https://docs.python.org/3/c-api/init.html
Summary: The `Py_GetPath` function returns the default module search path based on the program name and environment variables. The result is a string of directory names, delimited by `':'` on Unix and macOS, and `';'` on Windows. This value, which should not be modified, initializes `sys.path` at interpreter startup and can be altered afterward. It must be called after `Py_Initialize()`.
---

wchar_t*Py_GetPath()[¶](https://docs.python.org/3/c-api/init.html#c.Py_GetPath "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return the default module search path; this is computed from the program name (set by [`PyConfig.program_name`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.program_name "PyConfig.program_name")) and some environment variables. The returned string consists of a series of directory names separated by a platform dependent delimiter character. The delimiter character is `':'` on Unix and macOS, `';'` on Windows. The returned string points into static storage; the caller should not modify its value. The list [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path") is initialized with this value on interpreter startup; it can be (and usually is) modified later to change the search path for loading modules.
This function should not be called before [`Py_Initialize()`](https://docs.python.org/3/c-api/init.html#c.Py_Initialize "Py_Initialize"), otherwise it returns `NULL`.
Changed in version 3.10: It now returns `NULL` if called before [`Py_Initialize()`](https://docs.python.org/3/c-api/init.html#c.Py_Initialize "Py_Initialize").
Deprecated since version 3.13, will be removed in version 3.15: Get [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path") instead. 

constchar*Py_GetVersion()[¶](https://docs.python.org/3/c-api/init.html#c.Py_GetVersion "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return the version of this Python interpreter. This is a string that looks something like
```
"3.0a5+ (py3k:63103M, May 12 2008, 00:53:55) \n[GCC 4.2.3]"

```

The first word (up to the first space character) is the current Python version; the first characters are the major and minor version separated by a period. The returned string points into static storage; the caller should not modify its value. The value is available to Python code as [`sys.version`](https://docs.python.org/3/library/sys.html#sys.version "sys.version").
See also the [`Py_Version`](https://docs.python.org/3/c-api/apiabiversion.html#c.Py_Version "Py_Version") constant. 

constchar*Py_GetPlatform()[¶](https://docs.python.org/3/c-api/init.html#c.Py_GetPlatform "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return the platform identifier for the current platform. On Unix, this is formed from the “official” name of the operating system, converted to lower case, followed by the major revision number; e.g., for Solaris 2.x, which is also known as SunOS 5.x, the value is `'sunos5'`. On macOS, it is `'darwin'`. On Windows, it is `'win'`. The returned string points into static storage; the caller should not modify its value. The value is available to Python code as `sys.platform`. 

constchar*Py_GetCopyright()[¶](https://docs.python.org/3/c-api/init.html#c.Py_GetCopyright "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return the official copyright string for the current Python version, for example
`'Copyright 1991-1995 Stichting Mathematisch Centrum, Amsterdam'`
The returned string points into static storage; the caller should not modify its value. The value is available to Python code as `sys.copyright`. 

constchar*Py_GetCompiler()[¶](https://docs.python.org/3/c-api/init.html#c.Py_GetCompiler "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return an indication of the compiler used to build the current Python version, in square brackets, for example:
```
"[GCC 2.7.2.2]"

```

The returned string points into static storage; the caller should not modify its value. The value is available to Python code as part of the variable `sys.version`. 

constchar*Py_GetBuildInfo()[¶](https://docs.python.org/3/c-api/init.html#c.Py_GetBuildInfo "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return information about the sequence number and build date and time of the current Python interpreter instance, for example
```
"#67, Aug 1 1997, 22:34:28"