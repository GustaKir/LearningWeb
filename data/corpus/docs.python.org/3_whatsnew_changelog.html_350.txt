Title: Changes in Core and Builtins
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section details specific changes in Python's core and built-in functionalities, including updates to pattern matching behavior: preventing classes from being both sequences and mappings, improved type flag handling in class objects, restoration of complex literal validation in match blocks, and additional bug fixes.
---

### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id290 "Link to this heading")
  * [bpo-43977](https://bugs.python.org/issue?@action=redirect&bpo=43977): Prevent classes being both a sequence and a mapping when pattern matching.
  * [bpo-43977](https://bugs.python.org/issue?@action=redirect&bpo=43977): Use [`tp_flags`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_flags "PyTypeObject.tp_flags") on the class object to determine if the subject is a sequence or mapping when pattern matching. Avoids the need to import [`collections.abc`](https://docs.python.org/3/library/collections.abc.html#module-collections.abc "collections.abc: Abstract base classes for containers") when pattern matching.
  * [bpo-43892](https://bugs.python.org/issue?@action=redirect&bpo=43892): Restore proper validation of complex literal value patterns when parsing `match` blocks.
  * [bpo-43933](https://bugs.python.org/issue?@action=redirect&bpo=43933): Set frame.f_lineno to the line number of the ‘with’ kweyword when executing the call to `__exit__`.
  * [bpo-43933](https://bugs.python.org/issue?@action=redirect&bpo=43933): If the current position in a frame has no line number then set the f_lineno attribute to None, instead of -1, to conform to PEP 626. This should not normally be possible, but might occur in some unusual circumstances.
  * [bpo-43963](https://bugs.python.org/issue?@action=redirect&bpo=43963): Importing the `_signal` module in a subinterpreter has no longer side effects.
  * [bpo-42739](https://bugs.python.org/issue?@action=redirect&bpo=42739): The internal representation of line number tables is changed to not use sentinels, and an explicit length parameter is added to the out of process API function `PyLineTable_InitAddressRange`. This makes the handling of line number tables more robust in some circumstances.
  * [bpo-43908](https://bugs.python.org/issue?@action=redirect&bpo=43908): Make [`re`](https://docs.python.org/3/library/re.html#module-re "re: Regular expression operations.") types immutable. Patch by Erlend E. Aasland.
  * [bpo-43908](https://bugs.python.org/issue?@action=redirect&bpo=43908): Make the [`array.array`](https://docs.python.org/3/library/array.html#array.array "array.array") type immutable. Patch by Erlend E. Aasland.
  * [bpo-43901](https://bugs.python.org/issue?@action=redirect&bpo=43901): Change class and module objects to lazy-create empty annotations dicts on demand. The annotations dicts are stored in the object’s __dict__ for backwards compatibility.
  * [bpo-43892](https://bugs.python.org/issue?@action=redirect&bpo=43892): Match patterns now use new dedicated AST nodes (`MatchValue`, `MatchSingleton`, `MatchSequence`, `MatchStar`, `MatchMapping`, `MatchClass`) rather than reusing expression AST nodes. `MatchAs` and `MatchOr` are now defined as pattern nodes rather than as expression nodes. Patch by Nick Coghlan.
  * [bpo-42725](https://bugs.python.org/issue?@action=redirect&bpo=42725): Usage of `await`/`yield`/`yield from` and named expressions within an annotation is now forbidden when PEP 563 is activated.
  * [bpo-43754](https://bugs.python.org/issue?@action=redirect&bpo=43754): When performing structural pattern matching ([**PEP 634**](https://peps.python.org/pep-0634/)), captured names are now left unbound until the _entire_ pattern has matched successfully.
  * [bpo-42737](https://bugs.python.org/issue?@action=redirect&bpo=42737): Annotations for complex targets (everything beside simple names) no longer cause any runtime effects with `from __future__ import annotations`.
  * [bpo-43914](https://bugs.python.org/issue?@action=redirect&bpo=43914): [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") exceptions raised by the interpreter will highlight the full error range of the expression that constitutes the syntax error itself, instead of just where the problem is detected. Patch by Pablo Galindo.
  * [bpo-38605](https://bugs.python.org/issue?@action=redirect&bpo=38605): Revert making `from __future__ import annotations` the default. This follows the Steering Council decision to postpone PEP 563 changes to at least Python 3.11. See the original email for more information regarding the decision: <https://mail.python.org/archives/list/python-dev@python.org/thread/CLVXXPQ2T2LQ5MP2Y53VVQFCXYWQJHKZ/>. Patch by Pablo Galindo.
  * [bpo-43475](https://bugs.python.org/issue?@action=redirect&bpo=43475): Hashes of NaN values now depend on object identity. Formerly, they always hashed to 0 even though NaN values are not equal to one another. Having the same hash for unequal values caused pile-ups in hash tables.
  * [bpo-43859](https://bugs.python.org/issue?@action=redirect&bpo=43859): Improve the error message for [`IndentationError`](https://docs.python.org/3/library/exceptions.html#IndentationError "IndentationError") exceptions. Patch by Pablo Galindo
  * [bpo-41323](https://bugs.python.org/issue?@action=r