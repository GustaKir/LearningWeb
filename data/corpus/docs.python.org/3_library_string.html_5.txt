Title: Format Specification in Python
URL: https://docs.python.org/3/library/string.html
Summary: The _format_spec_ field specifies how values are presented, covering aspects like width, alignment, and precision. Different value types may utilize their own formatting mini-language. Nested replacement fields are allowed within _format_spec_, enabling dynamic value formatting. Examples can be found in the dedicated section.
---

```

The _format_spec_ field contains a specification of how the value should be presented, including such details as field width, alignment, padding, decimal precision and so on. Each value type can define its own “formatting mini-language” or interpretation of the _format_spec_.
Most built-in types support a common formatting mini-language, which is described in the next section.
A _format_spec_ field can also include nested replacement fields within it. These nested replacement fields may contain a field name, conversion flag and format specification, but deeper nesting is not allowed. The replacement fields within the format_spec are substituted before the _format_spec_ string is interpreted. This allows the formatting of a value to be dynamically specified.
See the [Format examples](https://docs.python.org/3/library/string.html#formatexamples) section for some examples.
### Format Specification Mini-Language[¶](https://docs.python.org/3/library/string.html#format-specification-mini-language "Link to this heading")
“Format specifications” are used within replacement fields contained within a format string to define how individual values are presented (see [Format String Syntax](https://docs.python.org/3/library/string.html#formatstrings) and [f-strings](https://docs.python.org/3/reference/lexical_analysis.html#f-strings)). They can also be passed directly to the built-in [`format()`](https://docs.python.org/3/library/functions.html#format "format") function. Each formattable type may define how the format specification is to be interpreted.
Most built-in types implement the following options for format specifications, although some of the formatting options are only supported by the numeric types.
A general convention is that an empty format specification produces the same result as if you had called [`str()`](https://docs.python.org/3/library/stdtypes.html#str "str") on the value. A non-empty format specification typically modifies the result.
The general form of a _standard format specifier_ is:
```
**format_spec** ::= [[options](https://docs.python.org/3/library/string.html#grammar-token-format-spec-options)][[width](https://docs.python.org/3/library/string.html#grammar-token-format-spec-width)][[grouping](https://docs.python.org/3/library/string.html#grammar-token-format-spec-grouping)]["." [precision](https://docs.python.org/3/library/string.html#grammar-token-format-spec-precision)][[type](https://docs.python.org/3/library/string.html#grammar-token-format-spec-type)]
**options**   ::= [[[fill](https://docs.python.org/3/library/string.html#grammar-token-format-spec-fill)][align](https://docs.python.org/3/library/string.html#grammar-token-format-spec-align)][[sign](https://docs.python.org/3/library/string.html#grammar-token-format-spec-sign)]["z"]["#"]["0"]
**fill**    ::= <any character>
**align**    ::= "<" | ">" | "=" | "^"
**sign**    ::= "+" | "-" | " "
**width**    ::= [digit](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-digit)+
**grouping**  ::= "," | "_"
**precision**  ::= [digit](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-digit)+
**type**    ::= "b" | "c" | "d" | "e" | "E" | "f" | "F" | "g"
        | "G" | "n" | "o" | "s" | "x" | "X" | "%"