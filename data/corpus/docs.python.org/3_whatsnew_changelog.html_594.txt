Title: Python 3 Change Log
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: The document details fixes and improvements in Python 3, including a patch for the as_integer_ratio() method, a correction to an assertion failure in warnings.warn_explicit, and updates to make 'async' and 'await' proper keywords as per PEP 492. It also mentions fixes related to buffer overflow and updates to string.Template's idpattern functionality.
---

a bad as_integer_ratio() method. Patch by Oren Milman.
  * [bpo-31285](https://bugs.python.org/issue?@action=redirect&bpo=31285): Fix an assertion failure in `warnings.warn_explicit`, when the return value of the received loader’s `get_source()` has a bad `splitlines()` method. Patch by Oren Milman.
  * [bpo-30406](https://bugs.python.org/issue?@action=redirect&bpo=30406): Make `async` and `await` proper keywords, as specified in [**PEP 492**](https://peps.python.org/pep-0492/).


### Library[¶](https://docs.python.org/3/whatsnew/changelog.html#id555 "Link to this heading")
  * [bpo-30058](https://bugs.python.org/issue?@action=redirect&bpo=30058): Fixed buffer overflow in select.kqueue.control().
  * [bpo-31672](https://bugs.python.org/issue?@action=redirect&bpo=31672): `idpattern` in `string.Template` matched some non-ASCII characters. Now it uses `-i` regular expression local flag to avoid non-ASCII characters.
  * [bpo-31701](https://bugs.python.org/issue?@action=redirect&bpo=31701): On Windows, faulthandler.enable() now ignores MSC and COM exceptions.
  * [bpo-31728](https://bugs.python.org/issue?@action=redirect&bpo=31728): Prevent crashes in `_elementtree` due to unsafe cleanup of `Element.text` and `Element.tail`. Patch by Oren Milman.
  * [bpo-31671](https://bugs.python.org/issue?@action=redirect&bpo=31671): Now `re.compile()` converts passed RegexFlag to normal int object before compiling. bm_regex_compile benchmark shows 14% performance improvements.
  * [bpo-30397](https://bugs.python.org/issue?@action=redirect&bpo=30397): The types of compiled regular objects and match objects are now exposed as `re.Pattern` and `re.Match`. This adds information in pydoc output for the `re` module.
  * [bpo-31675](https://bugs.python.org/issue?@action=redirect&bpo=31675): Fixed memory leaks in Tkinter’s methods splitlist() and split() when pass a string larger than 2 GiB.
  * [bpo-31673](https://bugs.python.org/issue?@action=redirect&bpo=31673): Fixed typo in the name of Tkinter’s method adderrorinfo().
  * [bpo-31648](https://bugs.python.org/issue?@action=redirect&bpo=31648): Improvements to path predicates in ElementTree: Allow whitespace around predicate parts, i.e. “[a = ‘text’]” instead of requiring the less readable “[a=’text’]”. Add support for text comparison of the current node, like “[.=’text’]”. Patch by Stefan Behnel.
  * [bpo-30806](https://bugs.python.org/issue?@action=redirect&bpo=30806): Fix the string representation of a netrc object.
  * [bpo-31638](https://bugs.python.org/issue?@action=redirect&bpo=31638): Add optional argument `compressed` to `zipapp.create_archive`, and add option `--compress` to the command line interface of `zipapp`.
  * [bpo-25351](https://bugs.python.org/issue?@action=redirect&bpo=25351): Avoid venv activate failures with undefined variables
  * [bpo-20519](https://bugs.python.org/issue?@action=redirect&bpo=20519): Avoid ctypes use (if possible) and improve import time for uuid.
  * [bpo-28293](https://bugs.python.org/issue?@action=redirect&bpo=28293): The regular expression cache is no longer completely dumped when it is full.
  * [bpo-31596](https://bugs.python.org/issue?@action=redirect&bpo=31596): Added pthread_getcpuclockid() to the time module
  * [bpo-27494](https://bugs.python.org/issue?@action=redirect&bpo=27494): Make 2to3 accept a trailing comma in generator expressions. For example, `set(x for x in [],)` is now allowed.
  * [bpo-30347](https://bugs.python.org/issue?@action=redirect&bpo=30347): Stop crashes when concurrently iterate over itertools.groupby() iterators.
  * [bpo-30346](https://bugs.python.org/issue?@action=redirect&bpo=30346): An iterator produced by itertools.groupby() iterator now becomes exhausted after advancing the groupby iterator.
  * [bpo-31556](https://bugs.python.org/issue?@action=redirect&bpo=31556): Cancel asyncio.wait_for future faster if timeout <= 0
  * [bpo-31540](https://bugs.python.org/issue?@action=redirect&bpo=31540): Allow passing a context object in [`concurrent.futures.ProcessPoolExecutor`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor "concurrent.futures.ProcessPoolExecutor") constructor. Also, free job resources in [`concurrent.futures.ProcessPoolExecutor`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor "concurrent.futures.ProcessPoolExecutor") earlier to improve memory usage when a worker waits for new jobs.
  * [bpo-31516](https://bugs.python.org/issue?@action=redirect&bpo=31516): `threading.current_thread()` should not return a dummy thread at shutdown.
  * [bpo-31525](https://bugs.python.org/issue?@action=redirect&bpo=31525): In the sqlite module, require the sqlite3_prepare_v2 API. Thus, the sqlite module now requires sqlite version at least 3.3.9.
  * [bpo-26510](https://bugs.python.org/issue?@action=redirect&bpo=26510): argparse subparsers are now required by default. This matches behaviour in Python 2. For option