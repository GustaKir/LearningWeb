Title: tkinter.Tk Class Overview
URL: https://docs.python.org/3/library/tkinter.html
Summary: The tkinter.Tk class is used to create a main window for a Tkinter application and initializes a Tcl interpreter. It supports keyword arguments for screen name, base name, class name, use of Tk, and synchronization options.
---

```


_class_ tkinter.Tk(_screenName =None_, _baseName =None_, _className ='Tk'_, _useTk =True_, _sync =False_, _use =None_)[¶](https://docs.python.org/3/library/tkinter.html#tkinter.Tk "Link to this definition")
    
Construct a toplevel Tk widget, which is usually the main window of an application, and initialize a Tcl interpreter for this widget. Each instance has its own associated Tcl interpreter.
The [`Tk`](https://docs.python.org/3/library/tkinter.html#tkinter.Tk "tkinter.Tk") class is typically instantiated using all default values. However, the following keyword arguments are currently recognized: 

_screenName_
    
When given (as a string), sets the `DISPLAY` environment variable. (X11 only) 

_baseName_
    
Name of the profile file. By default, _baseName_ is derived from the program name (`sys.argv[0]`). 

_className_
    
Name of the widget class. Used as a profile file and also as the name with which Tcl is invoked (_argv0_ in _interp_). 

_useTk_
    
If `True`, initialize the Tk subsystem. The [`tkinter.Tcl()`](https://docs.python.org/3/library/tkinter.html#tkinter.Tcl "tkinter.Tcl") function sets this to `False`. 

_sync_
    
If `True`, execute all X server commands synchronously, so that errors are reported immediately. Can be used for debugging. (X11 only) 

_use_
    
Specifies the _id_ of the window in which to embed the application, instead of it being created as an independent toplevel window. _id_ must be specified in the same way as the value for the -use option for toplevel widgets (that is, it has a form like that returned by `winfo_id()`).
Note that on some platforms this will only work correctly if _id_ refers to a Tk frame or toplevel that has its -container option enabled.
[`Tk`](https://docs.python.org/3/library/tkinter.html#tkinter.Tk "tkinter.Tk") reads and interprets profile files, named `._className_.tcl`and`. _baseName_.tcl`, into the Tcl interpreter and calls[`exec()`](https://docs.python.org/3/library/functions.html#exec "exec") on the contents of `._className_.py`and`. _baseName_.py`. The path for the profile files is the`HOME` environment variable or, if that isn’t defined, then [`os.curdir`](https://docs.python.org/3/library/os.html#os.curdir "os.curdir"). 

tk[¶](https://docs.python.org/3/library/tkinter.html#tkinter.Tk.tk "Link to this definition")
    
The Tk application object created by instantiating [`Tk`](https://docs.python.org/3/library/tkinter.html#tkinter.Tk "tkinter.Tk"). This provides access to the Tcl interpreter. Each widget that is attached the same instance of [`Tk`](https://docs.python.org/3/library/tkinter.html#tkinter.Tk "tkinter.Tk") has the same value for its [`tk`](https://docs.python.org/3/library/tkinter.html#tkinter.Tk.tk "tkinter.Tk.tk") attribute. 

master[¶](https://docs.python.org/3/library/tkinter.html#tkinter.Tk.master "Link to this definition")
    
The widget object that contains this widget. For [`Tk`](https://docs.python.org/3/library/tkinter.html#tkinter.Tk "tkinter.Tk"), the _master_ is [`None`](https://docs.python.org/3/library/constants.html#None "None") because it is the main window. The terms _master_ and _parent_ are similar and sometimes used interchangeably as argument names; however, calling `winfo_parent()` returns a string of the widget name whereas [`master`](https://docs.python.org/3/library/tkinter.html#tkinter.Tk.master "tkinter.Tk.master") returns the object. _parent_ /_child_ reflects the tree-like relationship while _master_ /_slave_ reflects the container structure. 

children[¶](https://docs.python.org/3/library/tkinter.html#tkinter.Tk.children "Link to this definition")
    
The immediate descendants of this widget as a [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") with the child widget names as the keys and the child instance objects as the values. 

tkinter.Tcl(_screenName =None_, _baseName =None_, _className ='Tk'_, _useTk =False_)[¶](https://docs.python.org/3/library/tkinter.html#tkinter.Tcl "Link to this definition")
    
The [`Tcl()`](https://docs.python.org/3/library/tkinter.html#tkinter.Tcl "tkinter.Tcl") function is a factory function which creates an object much like that created by the [`Tk`](https://docs.python.org/3/library/tkinter.html#tkinter.Tk "tkinter.Tk") class, except that it does not initialize the Tk subsystem. This is most often useful when driving the Tcl interpreter in an environment where one doesn’t want to create extraneous toplevel windows, or where one cannot (such as Unix/Linux systems without an X server). An object created by the [`Tcl()`](https://docs.python.org/3/library/tkinter.html#tkinter.Tcl "tkinter.Tcl") object can have a Toplevel window created (and the Tk subsystem initialized) by calling its `loadtk()` method.
The modules that provide Tk support include: 

[`tkinter`](https://docs.python.org/3/library/tkinter.html#module-tkinter "tkinter: Interface to Tcl/Tk for graphical user interfaces")
    
Main Tkinter module.