Title: Py_GetExecPrefix Function
URL: https://docs.python.org/3/c-api/init.html
Summary: The `Py_GetExecPrefix` function returns the exec-prefix for platform-dependent files, derived from the program name and environment variables. It provides a string pointing to static storage, which should not be modified, and corresponds to the `exec_prefix` variable used during the build process. This value is available in Python as `sys.base_exec_prefix` and is primarily useful on Unix systems.
---

wchar_t*Py_GetExecPrefix()[¶](https://docs.python.org/3/c-api/init.html#c.Py_GetExecPrefix "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return the _exec-prefix_ for installed platform-_dependent_ files. This is derived through a number of complicated rules from the program name set with [`PyConfig.program_name`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.program_name "PyConfig.program_name") and some environment variables; for example, if the program name is `'/usr/local/bin/python'`, the exec-prefix is `'/usr/local'`. The returned string points into static storage; the caller should not modify its value. This corresponds to the **exec_prefix** variable in the top-level `Makefile` and the `--exec-prefix` argument to the **configure** script at build time. The value is available to Python code as `sys.base_exec_prefix`. It is only useful on Unix.
Background: The exec-prefix differs from the prefix when platform dependent files (such as executables and shared libraries) are installed in a different directory tree. In a typical installation, platform dependent files may be installed in the `/usr/local/plat` subtree while platform independent may be installed in `/usr/local`.
Generally speaking, a platform is a combination of hardware and software families, e.g. Sparc machines running the Solaris 2.x operating system are considered the same platform, but Intel machines running Solaris 2.x are another platform, and Intel machines running Linux are yet another platform. Different major revisions of the same operating system generally also form different platforms. Non-Unix operating systems are a different story; the installation strategies on those systems are so different that the prefix and exec-prefix are meaningless, and set to the empty string. Note that compiled Python bytecode files are platform independent (but not independent from the Python version by which they were compiled!).
System administrators will know how to configure the **mount** or **automount** programs to share `/usr/local` between platforms while having `/usr/local/plat` be a different filesystem for each platform.
This function should not be called before [`Py_Initialize()`](https://docs.python.org/3/c-api/init.html#c.Py_Initialize "Py_Initialize"), otherwise it returns `NULL`.
Changed in version 3.10: It now returns `NULL` if called before [`Py_Initialize()`](https://docs.python.org/3/c-api/init.html#c.Py_Initialize "Py_Initialize").
Deprecated since version 3.13, will be removed in version 3.15: Get [`sys.base_exec_prefix`](https://docs.python.org/3/library/sys.html#sys.base_exec_prefix "sys.base_exec_prefix") instead, or [`sys.exec_prefix`](https://docs.python.org/3/library/sys.html#sys.exec_prefix "sys.exec_prefix") if [virtual environments](https://docs.python.org/3/library/venv.html#venv-def) need to be handled. 

wchar_t*Py_GetProgramFullPath()[¶](https://docs.python.org/3/c-api/init.html#c.Py_GetProgramFullPath "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return the full program name of the Python executable; this is computed as a side-effect of deriving the default module search path from the program name (set by [`PyConfig.program_name`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.program_name "PyConfig.program_name")). The returned string points into static storage; the caller should not modify its value. The value is available to Python code as `sys.executable`.
This function should not be called before [`Py_Initialize()`](https://docs.python.org/3/c-api/init.html#c.Py_Initialize "Py_Initialize"), otherwise it returns `NULL`.
Changed in version 3.10: It now returns `NULL` if called before [`Py_Initialize()`](https://docs.python.org/3/c-api/init.html#c.Py_Initialize "Py_Initialize").
Deprecated since version 3.13, will be removed in version 3.15: Get [`sys.executable`](https://docs.python.org/3/library/sys.html#sys.executable "sys.executable") instead.