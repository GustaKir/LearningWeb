Title: SSL Options for Disabling TLS Versions
URL: https://docs.python.org/3/library/ssl.html
Summary: This section describes two SSL options: `ssl.OP_NO_TLSv1_2`, which prevents TLSv1.2 connections and is deprecated since version 3.7, and `ssl.OP_NO_TLSv1_3`, which prevents TLSv1.3 connections and is applicable with `PROTOCOL_TLS`. Both options are tied to specific OpenSSL versions.
---

ssl.OP_NO_TLSv1_2[¶](https://docs.python.org/3/library/ssl.html#ssl.OP_NO_TLSv1_2 "Link to this definition")
    
Prevents a TLSv1.2 connection. This option is only applicable in conjunction with [`PROTOCOL_TLS`](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS "ssl.PROTOCOL_TLS"). It prevents the peers from choosing TLSv1.2 as the protocol version. Available only with openssl version 1.0.1+.
Added in version 3.4.
Deprecated since version 3.7: The option is deprecated since OpenSSL 1.1.0. 

ssl.OP_NO_TLSv1_3[¶](https://docs.python.org/3/library/ssl.html#ssl.OP_NO_TLSv1_3 "Link to this definition")
    
Prevents a TLSv1.3 connection. This option is only applicable in conjunction with [`PROTOCOL_TLS`](https://docs.python.org/3/library/ssl.html#ssl.PROTOCOL_TLS "ssl.PROTOCOL_TLS"). It prevents the peers from choosing TLSv1.3 as the protocol version. TLS 1.3 is available with OpenSSL 1.1.1 or later. When Python has been compiled against an older version of OpenSSL, the flag defaults to _0_.
Added in version 3.6.3.
Deprecated since version 3.7: The option is deprecated since OpenSSL 1.1.0. It was added to 2.7.15 and 3.6.3 for backwards compatibility with OpenSSL 1.0.2. 

ssl.OP_NO_RENEGOTIATION[¶](https://docs.python.org/3/library/ssl.html#ssl.OP_NO_RENEGOTIATION "Link to this definition")
    
Disable all renegotiation in TLSv1.2 and earlier. Do not send HelloRequest messages, and ignore renegotiation requests via ClientHello.
This option is only available with OpenSSL 1.1.0h and later.
Added in version 3.7. 

ssl.OP_CIPHER_SERVER_PREFERENCE[¶](https://docs.python.org/3/library/ssl.html#ssl.OP_CIPHER_SERVER_PREFERENCE "Link to this definition")
    
Use the server’s cipher ordering preference, rather than the client’s. This option has no effect on client sockets and SSLv2 server sockets.
Added in version 3.3. 

ssl.OP_SINGLE_DH_USE[¶](https://docs.python.org/3/library/ssl.html#ssl.OP_SINGLE_DH_USE "Link to this definition")
    
Prevents reuse of the same DH key for distinct SSL sessions. This improves forward secrecy but requires more computational resources. This option only applies to server sockets.
Added in version 3.3. 

ssl.OP_SINGLE_ECDH_USE[¶](https://docs.python.org/3/library/ssl.html#ssl.OP_SINGLE_ECDH_USE "Link to this definition")
    
Prevents reuse of the same ECDH key for distinct SSL sessions. This improves forward secrecy but requires more computational resources. This option only applies to server sockets.
Added in version 3.3. 

ssl.OP_ENABLE_MIDDLEBOX_COMPAT[¶](https://docs.python.org/3/library/ssl.html#ssl.OP_ENABLE_MIDDLEBOX_COMPAT "Link to this definition")
    
Send dummy Change Cipher Spec (CCS) messages in TLS 1.3 handshake to make a TLS 1.3 connection look more like a TLS 1.2 connection.
This option is only available with OpenSSL 1.1.1 and later.
Added in version 3.8. 

ssl.OP_NO_COMPRESSION[¶](https://docs.python.org/3/library/ssl.html#ssl.OP_NO_COMPRESSION "Link to this definition")
    
Disable compression on the SSL channel. This is useful if the application protocol supports its own compression scheme.
Added in version 3.3. 

_class_ ssl.Options[¶](https://docs.python.org/3/library/ssl.html#ssl.Options "Link to this definition")
    
[`enum.IntFlag`](https://docs.python.org/3/library/enum.html#enum.IntFlag "enum.IntFlag") collection of OP_* constants. 

ssl.OP_NO_TICKET[¶](https://docs.python.org/3/library/ssl.html#ssl.OP_NO_TICKET "Link to this definition")
    
Prevent client side from requesting a session ticket.
Added in version 3.6. 

ssl.OP_IGNORE_UNEXPECTED_EOF[¶](https://docs.python.org/3/library/ssl.html#ssl.OP_IGNORE_UNEXPECTED_EOF "Link to this definition")
    
Ignore unexpected shutdown of TLS connections.
This option is only available with OpenSSL 3.0.0 and later.
Added in version 3.10. 

ssl.OP_ENABLE_KTLS[¶](https://docs.python.org/3/library/ssl.html#ssl.OP_ENABLE_KTLS "Link to this definition")
    
Enable the use of the kernel TLS. To benefit from the feature, OpenSSL must have been compiled with support for it, and the negotiated cipher suites and extensions must be supported by it (a list of supported ones may vary by platform and kernel version).
Note that with enabled kernel TLS some cryptographic operations are performed by the kernel directly and not via any available OpenSSL Providers. This might be undesirable if, for example, the application requires all cryptographic operations to be performed by the FIPS provider.
This option is only available with OpenSSL 3.0.0 and later.
Added in version 3.12. 

ssl.OP_LEGACY_SERVER_CONNECT[¶](https://docs.python.org/3/library/ssl.html#ssl.OP_LEGACY_SERVER_CONNECT "Link to this definition")
    
Allow legacy insecure renegotiation between OpenSSL and unpatched servers only.
Added in version 3.12.