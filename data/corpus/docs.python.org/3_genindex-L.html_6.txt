Title: Python Library Index: Load Functions and Testing Methods
URL: https://docs.python.org/3/genindex-L.html
Summary: This section lists various 'load' functions from different Python modules, such as json, marshal, and unittest, detailing how to load data and tests from modules and test cases.
---

3/library/json.html#json.loads)
    * [(in module marshal)](https://docs.python.org/3/library/marshal.html#marshal.loads)
    * [(in module pickle)](https://docs.python.org/3/library/pickle.html#pickle.loads)
    * [(in module plistlib)](https://docs.python.org/3/library/plistlib.html#plistlib.loads)
    * [(in module tomllib)](https://docs.python.org/3/library/tomllib.html#tomllib.loads)
    * [(in module xmlrpc.client)](https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.loads)
  * [loadTestsFromModule() (unittest.TestLoader method)](https://docs.python.org/3/library/unittest.html#unittest.TestLoader.loadTestsFromModule)
  * [loadTestsFromName() (unittest.TestLoader method)](https://docs.python.org/3/library/unittest.html#unittest.TestLoader.loadTestsFromName)
  * [loadTestsFromNames() (unittest.TestLoader method)](https://docs.python.org/3/library/unittest.html#unittest.TestLoader.loadTestsFromNames)
  * [loadTestsFromTestCase() (unittest.TestLoader method)](https://docs.python.org/3/library/unittest.html#unittest.TestLoader.loadTestsFromTestCase)
  * [local (class in threading)](https://docs.python.org/3/library/threading.html#threading.local)
  * [LOCAL_CREDS (in module socket)](https://docs.python.org/3/library/socket.html#socket.LOCAL_CREDS)
  * [LOCAL_CREDS_PERSISTENT (in module socket)](https://docs.python.org/3/library/socket.html#socket.LOCAL_CREDS_PERSISTENT)
  * [localcontext() (in module decimal)](https://docs.python.org/3/library/decimal.html#decimal.localcontext)
  * locale 
    * [module](https://docs.python.org/3/library/locale.html#module-locale)
  * [LOCALE (in module re)](https://docs.python.org/3/library/re.html#re.LOCALE)
  * [**locale encoding**](https://docs.python.org/3/glossary.html#term-locale-encoding)
  * [localeconv() (in module locale)](https://docs.python.org/3/library/locale.html#locale.localeconv)
  * [LocaleHTMLCalendar (class in calendar)](https://docs.python.org/3/library/calendar.html#calendar.LocaleHTMLCalendar)
  * [LocaleTextCalendar (class in calendar)](https://docs.python.org/3/library/calendar.html#calendar.LocaleTextCalendar)
  * [localize() (in module locale)](https://docs.python.org/3/library/locale.html#locale.localize)
  * [localName (xml.dom.Attr attribute)](https://docs.python.org/3/library/xml.dom.html#xml.dom.Attr.localName)
    * [(xml.dom.Node attribute)](https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.localName)
  * locals() 
    * [built-in function](https://docs.python.org/3/library/functions.html#locals)
  * [localtime() (in module email.utils)](https://docs.python.org/3/library/email.utils.html#email.utils.localtime)
    * [(in module time)](https://docs.python.org/3/library/time.html#time.localtime)
  * [Locator (class in xml.sax.xmlreader)](https://docs.python.org/3/library/xml.sax.reader.html#xml.sax.xmlreader.Locator)
  * [Lock (class in asyncio)](https://docs.python.org/3/library/asyncio-sync.html#asyncio.Lock)
    * [(class in multiprocessing)](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Lock)
    * [(class in threading)](https://docs.python.org/3/library/threading.html#threading.Lock)
  * [lock (sys.thread_info attribute)](https://docs.python.org/3/library/sys.html#sys.thread_info.lock)
  * [lock() (mailbox.Babyl method)](https://docs.python.org/3/library/mailbox.html#mailbox.Babyl.lock)
    * [(mailbox.Mailbox method)](https://docs.python.org/3/library/mailbox.html#mailbox.Mailbox.lock)
    * [(mailbox.Maildir method)](https://docs.python.org/3/library/mailbox.html#mailbox.Maildir.lock)
    * [(mailbox.mbox method)](https://docs.python.org/3/library/mailbox.html#mailbox.mbox.lock)
    * [(mailbox.MH method)](https://docs.python.org/3/library/mailbox.html#mailbox.MH.lock)
    * [(mailbox.MMDF method)](https://docs.python.org/3/library/mailbox.html#mailbox.MMDF.lock)
  * [Lock() (multiprocessing.managers.SyncManager method)](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.SyncManager.Lock)
  * [lock, interpreter](https://docs.python.org/3/c-api/init.html#index-29)
  * [LOCK_EX (in module fcntl)](https://docs.python.org/3/library/fcntl.html#fcntl.LOCK_EX)
  * [LOCK_NB (in module fcntl)](https://docs.python.org/3/library/fcntl.html#fcntl.LOCK_NB)
  * [LOCK_SH (in module fcntl)](https://docs.python.org/3/library/fcntl.html#fcntl.LOCK_SH)
  * [LOCK_UN (in module fcntl)](https://docs.python.org/3/library/fcntl.html#fcntl.LOCK_UN)
  * [locked() (_thread.lock method)](https://docs.python.org/3/library/_thread.html#thread.lock.locked)
    * [(asyncio.Condition method)](https://docs.python.org/3/library/asyncio-sync.html#asyncio.Condition.locked)
    * [(asyncio.Lock method)](https://docs.python.org/3/library/asyncio-sync.html#asyncio.Lock.locked)
    * [(asyncio.Semaphore method)](https://docs.python.org/3/library/asyncio-sync.html#asyncio.Semaphore.locked)
    * [(threading.Lock method)](https://docs.python.org/3/library/threading.html#threading.Lock.locked)
  * [