Title: PyType_GetModuleState Function
URL: https://docs.python.org/3/c-api/type.html
Summary: The `PyType_GetModuleState` function retrieves the state of the module associated with a given Python type. It provides a shortcut to `PyModule_GetState()` following a call to `PyType_GetModule()`. If no module is associated, it raises a `TypeError` and returns `NULL`, while returning `NULL` without an exception if the module's state is `NULL`. This function has been part of the Stable ABI since version 3.10 and was added in version 3.9.
---

void*PyType_GetModuleState([PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject")*type)[¶](https://docs.python.org/3/c-api/type.html#c.PyType_GetModuleState "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.10._
Return the state of the module object associated with the given type. This is a shortcut for calling [`PyModule_GetState()`](https://docs.python.org/3/c-api/module.html#c.PyModule_GetState "PyModule_GetState") on the result of [`PyType_GetModule()`](https://docs.python.org/3/c-api/type.html#c.PyType_GetModule "PyType_GetModule").
If no module is associated with the given type, sets [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") and returns `NULL`.
If the _type_ has an associated module but its state is `NULL`, returns `NULL` without setting an exception.
Added in version 3.9. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyType_GetModuleByDef([PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject")*type, struct[PyModuleDef](https://docs.python.org/3/c-api/module.html#c.PyModuleDef "PyModuleDef")*def)[¶](https://docs.python.org/3/c-api/type.html#c.PyType_GetModuleByDef "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.13._
Find the first superclass whose module was created from the given [`PyModuleDef`](https://docs.python.org/3/c-api/module.html#c.PyModuleDef "PyModuleDef") _def_ , and return that module.
If no module is found, raises a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") and returns `NULL`.
This function is intended to be used together with [`PyModule_GetState()`](https://docs.python.org/3/c-api/module.html#c.PyModule_GetState "PyModule_GetState") to get module state from slot methods (such as [`tp_init`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_init "PyTypeObject.tp_init") or [`nb_add`](https://docs.python.org/3/c-api/typeobj.html#c.PyNumberMethods.nb_add "PyNumberMethods.nb_add")) and other places where a method’s defining class cannot be passed using the [`PyCMethod`](https://docs.python.org/3/c-api/structures.html#c.PyCMethod "PyCMethod") calling convention.
Added in version 3.11. 

intPyUnstable_Type_AssignVersionTag([PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject")*type)[¶](https://docs.python.org/3/c-api/type.html#c.PyUnstable_Type_AssignVersionTag "Link to this definition")
    
_This is[ Unstable API](https://docs.python.org/3/c-api/stable.html#unstable-c-api). It may change without warning in minor releases._
Attempt to assign a version tag to the given type.
Returns 1 if the type already had a valid version tag or a new one was assigned, or 0 if a new tag could not be assigned.
Added in version 3.12.
## Creating Heap-Allocated Types[¶](https://docs.python.org/3/c-api/type.html#creating-heap-allocated-types "Link to this heading")
The following functions and structs are used to create [heap types](https://docs.python.org/3/c-api/typeobj.html#heap-types).