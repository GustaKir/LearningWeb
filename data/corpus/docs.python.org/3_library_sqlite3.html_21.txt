Title: SQLite3 Cursor Attributes
URL: https://docs.python.org/3/library/sqlite3.html
Summary: This section details the read-only attributes of the SQLite3 Cursor class, specifically 'description', which provides column names of the last query, and 'lastrowid', which gives the ID of the last inserted row after successful insertion operations.
---

```


description[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.description "Link to this definition")
    
Read-only attribute that provides the column names of the last query. To remain compatible with the Python DB API, it returns a 7-tuple for each column where the last six items of each tuple are `None`.
It is set for `SELECT` statements without any matching rows as well. 

lastrowid[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.lastrowid "Link to this definition")
    
Read-only attribute that provides the row id of the last inserted row. It is only updated after successful `INSERT` or `REPLACE` statements using the [`execute()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute "sqlite3.Cursor.execute") method. For other statements, after [`executemany()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.executemany "sqlite3.Cursor.executemany") or [`executescript()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.executescript "sqlite3.Cursor.executescript"), or if the insertion failed, the value of `lastrowid` is left unchanged. The initial value of `lastrowid` is `None`.
Note
Inserts into `WITHOUT ROWID` tables are not recorded.
Changed in version 3.6: Added support for the `REPLACE` statement. 

rowcount[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.rowcount "Link to this definition")
    
Read-only attribute that provides the number of modified rows for `INSERT`, `UPDATE`, `DELETE`, and `REPLACE` statements; is `-1` for other statements, including CTE queries. It is only updated by the [`execute()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.execute "sqlite3.Cursor.execute") and [`executemany()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.executemany "sqlite3.Cursor.executemany") methods, after the statement has run to completion. This means that any resulting rows must be fetched in order for `rowcount` to be updated. 

row_factory[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.row_factory "Link to this definition")
    
Control how a row fetched from this `Cursor` is represented. If `None`, a row is represented as a [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple"). Can be set to the included [`sqlite3.Row`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Row "sqlite3.Row"); or a [callable](https://docs.python.org/3/glossary.html#term-callable) that accepts two arguments, a [`Cursor`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor "sqlite3.Cursor") object and the `tuple` of row values, and returns a custom object representing an SQLite row.
Defaults to what [`Connection.row_factory`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.row_factory "sqlite3.Connection.row_factory") was set to when the `Cursor` was created. Assigning to this attribute does not affect [`Connection.row_factory`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.row_factory "sqlite3.Connection.row_factory") of the parent connection.
See [How to create and use row factories](https://docs.python.org/3/library/sqlite3.html#sqlite3-howto-row-factory) for more details.
### Row objects[¶](https://docs.python.org/3/library/sqlite3.html#row-objects "Link to this heading") 

_class_ sqlite3.Row[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Row "Link to this definition")
    
A `Row` instance serves as a highly optimized [`row_factory`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.row_factory "sqlite3.Connection.row_factory") for [`Connection`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection "sqlite3.Connection") objects. It supports iteration, equality testing, [`len()`](https://docs.python.org/3/library/functions.html#len "len"), and [mapping](https://docs.python.org/3/glossary.html#term-mapping) access by column name and index.
Two `Row` objects compare equal if they have identical column names and values.
See [How to create and use row factories](https://docs.python.org/3/library/sqlite3.html#sqlite3-howto-row-factory) for more details. 

keys()[¶](https://docs.python.org/3/library/sqlite3.html#sqlite3.Row.keys "Link to this definition")
    
Return a [`list`](https://docs.python.org/3/library/stdtypes.html#list "list") of column names as [`strings`](https://docs.python.org/3/library/stdtypes.html#str "str"). Immediately after a query, it is the first member of each tuple in [`Cursor.description`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Cursor.description "sqlite3.Cursor.description").
Changed in version 3.5: Added support of slicing.
### Blob objects[¶](https://docs.python.org/3/library/sqlite3.html#blob-objects "Link to this heading")