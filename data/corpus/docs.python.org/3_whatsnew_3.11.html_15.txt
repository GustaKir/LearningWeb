Title: Changes in the inspect Module for Python 3.11
URL: https://docs.python.org/3/whatsnew/3.11.html
Summary: Python 3.11 introduces new features in the inspect module, including `getmembers_static()` for member retrieval without dynamic lookup and `ismethodwrapper()` for checking MethodWrapperType. Additionally, frame-related functions have undergone changes.
---

### inspect[¶](https://docs.python.org/3/whatsnew/3.11.html#inspect "Link to this heading")
  * Add [`getmembers_static()`](https://docs.python.org/3/library/inspect.html#inspect.getmembers_static "inspect.getmembers_static") to return all members without triggering dynamic lookup via the descriptor protocol. (Contributed by Weipeng Hong in [bpo-30533](https://bugs.python.org/issue?@action=redirect&bpo=30533).)
  * Add [`ismethodwrapper()`](https://docs.python.org/3/library/inspect.html#inspect.ismethodwrapper "inspect.ismethodwrapper") for checking if the type of an object is a [`MethodWrapperType`](https://docs.python.org/3/library/types.html#types.MethodWrapperType "types.MethodWrapperType"). (Contributed by Hakan Çelik in [bpo-29418](https://bugs.python.org/issue?@action=redirect&bpo=29418).)
  * Change the frame-related functions in the [`inspect`](https://docs.python.org/3/library/inspect.html#module-inspect "inspect: Extract information and source code from live objects.") module to return new [`FrameInfo`](https://docs.python.org/3/library/inspect.html#inspect.FrameInfo "inspect.FrameInfo") and [`Traceback`](https://docs.python.org/3/library/inspect.html#inspect.Traceback "inspect.Traceback") class instances (backwards compatible with the previous [named tuple](https://docs.python.org/3/glossary.html#term-named-tuple)-like interfaces) that includes the extended [**PEP 657**](https://peps.python.org/pep-0657/) position information (end line number, column and end column). The affected functions are:
    * [`inspect.getframeinfo()`](https://docs.python.org/3/library/inspect.html#inspect.getframeinfo "inspect.getframeinfo")
    * [`inspect.getouterframes()`](https://docs.python.org/3/library/inspect.html#inspect.getouterframes "inspect.getouterframes")
    * [`inspect.getinnerframes()`](https://docs.python.org/3/library/inspect.html#inspect.getinnerframes "inspect.getinnerframes"),
    * [`inspect.stack()`](https://docs.python.org/3/library/inspect.html#inspect.stack "inspect.stack")
    * [`inspect.trace()`](https://docs.python.org/3/library/inspect.html#inspect.trace "inspect.trace")
(Contributed by Pablo Galindo in [gh-88116](https://github.com/python/cpython/issues/88116).)


### locale[¶](https://docs.python.org/3/whatsnew/3.11.html#locale "Link to this heading")
  * Add [`locale.getencoding()`](https://docs.python.org/3/library/locale.html#locale.getencoding "locale.getencoding") to get the current locale encoding. It is similar to `locale.getpreferredencoding(False)` but ignores the [Python UTF-8 Mode](https://docs.python.org/3/library/os.html#utf8-mode).


### logging[¶](https://docs.python.org/3/whatsnew/3.11.html#logging "Link to this heading")
  * Added [`getLevelNamesMapping()`](https://docs.python.org/3/library/logging.html#logging.getLevelNamesMapping "logging.getLevelNamesMapping") to return a mapping from logging level names (e.g. `'CRITICAL'`) to the values of their corresponding [Logging Levels](https://docs.python.org/3/library/logging.html#levels) (e.g. `50`, by default). (Contributed by Andrei Kulakovin in [gh-88024](https://github.com/python/cpython/issues/88024).)
  * Added a [`createSocket()`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.SysLogHandler.createSocket "logging.handlers.SysLogHandler.createSocket") method to [`SysLogHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.SysLogHandler "logging.handlers.SysLogHandler"), to match [`SocketHandler.createSocket()`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.SocketHandler.createSocket "logging.handlers.SocketHandler.createSocket"). It is called automatically during handler initialization and when emitting an event, if there is no active socket. (Contributed by Kirill Pinchuk in [gh-88457](https://github.com/python/cpython/issues/88457).)