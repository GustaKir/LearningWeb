Title: Changelog Highlights
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This document outlines recent changes in Python, including the restoration of complex exponentiation behavior with float or complex exponents (bpo-44698), the introduction of a debug variable for reference dumps (bpo-44895), and the addition of five new superinstructions for quickening as per PEP 659.
---

We rely on this for effective specialization of the LOAD_ATTR and other instructions.
  * [bpo-44698](https://bugs.python.org/issue?@action=redirect&bpo=44698): Restore behaviour of complex exponentiation with integer-valued exponent of type [`float`](https://docs.python.org/3/library/functions.html#float "float") or [`complex`](https://docs.python.org/3/library/functions.html#complex "complex").
  * [bpo-44895](https://bugs.python.org/issue?@action=redirect&bpo=44895): A debug variable [`PYTHONDUMPREFSFILE`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONDUMPREFSFILE) is added for creating a dump file which is generated by [`--with-trace-refs`](https://docs.python.org/3/using/configure.html#cmdoption-with-trace-refs). Patch by Donghee Na.
  * [bpo-44900](https://bugs.python.org/issue?@action=redirect&bpo=44900): Add five superinstructions for PEP 659 quickening:
    * LOAD_FAST LOAD_FAST
    * STORE_FAST LOAD_FAST
    * LOAD_FAST LOAD_CONST
    * LOAD_CONST LOAD_FAST
    * STORE_FAST STORE_FAST
  * [bpo-44889](https://bugs.python.org/issue?@action=redirect&bpo=44889): Initial implementation of adaptive specialization of `LOAD_METHOD`. The following specialized forms were added:
    * `LOAD_METHOD_CACHED`
    * `LOAD_METHOD_MODULE`
    * `LOAD_METHOD_CLASS`
  * [bpo-44890](https://bugs.python.org/issue?@action=redirect&bpo=44890): Specialization stats are always collected in debug builds.
  * [bpo-44885](https://bugs.python.org/issue?@action=redirect&bpo=44885): Correct the ast locations of f-strings with format specs and repeated expressions. Patch by Pablo Galindo
  * [bpo-44878](https://bugs.python.org/issue?@action=redirect&bpo=44878): Remove the loop from the bytecode interpreter. All instructions end with a DISPATCH macro, so the loop is now redundant.
  * [bpo-44878](https://bugs.python.org/issue?@action=redirect&bpo=44878): Remove switch statement for interpreter loop when using computed gotos. This makes sure that we only have one dispatch table in the interpreter.
  * [bpo-44874](https://bugs.python.org/issue?@action=redirect&bpo=44874): Deprecate the old trashcan macros (`Py_TRASHCAN_SAFE_BEGIN`/`Py_TRASHCAN_SAFE_END`). They should be replaced by the new macros `Py_TRASHCAN_BEGIN` and `Py_TRASHCAN_END`.
  * [bpo-44872](https://bugs.python.org/issue?@action=redirect&bpo=44872): Use new trashcan macros (Py_TRASHCAN_BEGIN/END) in frameobject.c instead of the old ones (Py_TRASHCAN_SAFE_BEGIN/END).
  * [bpo-33930](https://bugs.python.org/issue?@action=redirect&bpo=33930): Fix segmentation fault with deep recursion when cleaning method objects. Patch by Augusto Goulart and Pablo Galindo.
  * [bpo-25782](https://bugs.python.org/issue?@action=redirect&bpo=25782): Fix bug where `PyErr_SetObject` hangs when the current exception has a cycle in its context chain.
  * [bpo-44856](https://bugs.python.org/issue?@action=redirect&bpo=44856): Fix reference leaks in the error paths of `update_bases()` and `__build_class__`. Patch by Pablo Galindo.
  * [bpo-44826](https://bugs.python.org/issue?@action=redirect&bpo=44826): Initial implementation of adaptive specialization of STORE_ATTR
Three specialized forms of STORE_ATTR are added:
    * STORE_ATTR_SLOT
    * STORE_ATTR_SPLIT_KEYS
    * STORE_ATTR_WITH_HINT
  * [bpo-44838](https://bugs.python.org/issue?@action=redirect&bpo=44838): Fixed a bug that was causing the parser to raise an incorrect custom [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") for invalid ‘if’ expressions. Patch by Pablo Galindo.
  * [bpo-44821](https://bugs.python.org/issue?@action=redirect&bpo=44821): Create instance dictionaries (__dict__) eagerly, to improve regularity of object layout and assist specialization.
  * [bpo-44792](https://bugs.python.org/issue?@action=redirect&bpo=44792): Improve syntax errors for if expressions. Patch by Miguel Brito
  * [bpo-34013](https://bugs.python.org/issue?@action=redirect&bpo=34013): Generalize the invalid legacy statement custom error message (like the one generated when “print” is called without parentheses) to include more generic expressions.