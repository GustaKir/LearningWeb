Title: Common Object Structures in Python C API
URL: https://docs.python.org/3/c-api/structures.html
Summary: This section of the documentation outlines the common object structures used within the Python C API, highlighting various topics such as base object types and macros, implementing functions and methods, and accessing attributes of extension types.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [Common Object Structures](https://docs.python.org/3/c-api/structures.html)
    * [Base object types and macros](https://docs.python.org/3/c-api/structures.html#base-object-types-and-macros)
    * [Implementing functions and methods](https://docs.python.org/3/c-api/structures.html#implementing-functions-and-methods)
    * [Accessing attributes of extension types](https://docs.python.org/3/c-api/structures.html#accessing-attributes-of-extension-types)
      * [Member flags](https://docs.python.org/3/c-api/structures.html#member-flags)
      * [Member types](https://docs.python.org/3/c-api/structures.html#member-types)
      * [Defining Getters and Setters](https://docs.python.org/3/c-api/structures.html#defining-getters-and-setters)


#### Previous topic
[Allocating Objects on the Heap](https://docs.python.org/3/c-api/allocation.html "previous chapter")
#### Next topic
[Type Object Structures](https://docs.python.org/3/c-api/typeobj.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/c-api/structures.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/c-api/typeobj.html "Type Object Structures") |
  * [previous](https://docs.python.org/3/c-api/allocation.html "Allocating Objects on the Heap") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [Python/C API Reference Manual](https://docs.python.org/3/c-api/index.html) »
  * [Object Implementation Support](https://docs.python.org/3/c-api/objimpl.html) »
  * [Common Object Structures](https://docs.python.org/3/c-api/structures.html)
  * | 
  * Theme  Auto Light Dark |


# Common Object Structures[¶](https://docs.python.org/3/c-api/structures.html#common-object-structures "Link to this heading")
There are a large number of structures which are used in the definition of object types for Python. This section describes these structures and how they are used.
## Base object types and macros[¶](https://docs.python.org/3/c-api/structures.html#base-object-types-and-macros "Link to this heading")
All Python objects ultimately share a small number of fields at the beginning of the object’s representation in memory. These are represented by the [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject") and [`PyVarObject`](https://docs.python.org/3/c-api/structures.html#c.PyVarObject "PyVarObject") types, which are defined, in turn, by the expansions of some macros also used, whether directly or indirectly, in the definition of all other Python objects. Additional macros can be found under [reference counting](https://docs.python.org/3/c-api/refcounting.html#countingrefs). 

typePyObject[¶](https://docs.python.org/3/c-api/structures.html#c.PyObject "Link to this definition")
    _Part of the[ Limited API](https://docs.python.org/3/c-api/stable.html#stable). (Only some members are part of the stable ABI.)_
All object types are extensions of this type. This is a type which contains the information Python needs to treat a pointer to an object as an object. In a normal “release” build, it contains only the object’s reference count and a pointer to the corresponding type object. Nothing is actually declared to be a [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject"), but every pointer to a Python object can be cast to a [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*. Access to the members must be done by using the macros [`Py_REFCNT`](https://docs.python.org/3/c-api/refcounting.html#c.Py_REFCNT "Py_REFCNT") and [`Py_TYPE`](https://docs.python.org/3/c-api/structures.html#c.Py_TYPE "Py_TYPE").