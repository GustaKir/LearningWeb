Title: ctypes.Structure Class Overview
URL: https://docs.python.org/3/library/ctypes.html
Summary: The `ctypes.Structure` class is an abstract base class designed for creating structures in the native byte order. To define concrete structures or unions, subclasses must establish a `_fields_` class variable. This allows the `ctypes` library to facilitate attribute access for reading and writing structure fields.
---

_class_ ctypes.Structure(_* args_, _** kw_)[¶](https://docs.python.org/3/library/ctypes.html#ctypes.Structure "Link to this definition")
    
Abstract base class for structures in _native_ byte order.
Concrete structure and union types must be created by subclassing one of these types, and at least define a [`_fields_`](https://docs.python.org/3/library/ctypes.html#ctypes.Structure._fields_ "ctypes.Structure._fields_") class variable. [`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "ctypes: A foreign function library for Python.") will create [descriptor](https://docs.python.org/3/glossary.html#term-descriptor)s which allow reading and writing the fields by direct attribute accesses. These are the 

_fields_[¶](https://docs.python.org/3/library/ctypes.html#ctypes.Structure._fields_ "Link to this definition")
    
A sequence defining the structure fields. The items must be 2-tuples or 3-tuples. The first item is the name of the field, the second item specifies the type of the field; it can be any ctypes data type.
For integer type fields like [`c_int`](https://docs.python.org/3/library/ctypes.html#ctypes.c_int "ctypes.c_int"), a third optional item can be given. It must be a small positive integer defining the bit width of the field.
Field names must be unique within one structure or union. This is not checked, only one field can be accessed when names are repeated.
It is possible to define the [`_fields_`](https://docs.python.org/3/library/ctypes.html#ctypes.Structure._fields_ "ctypes.Structure._fields_") class variable _after_ the class statement that defines the Structure subclass, this allows creating data types that directly or indirectly reference themselves:
```
classList(Structure):
  pass
List._fields_ = [("pnext", POINTER(List)),
         ...
        ]

```

The [`_fields_`](https://docs.python.org/3/library/ctypes.html#ctypes.Structure._fields_ "ctypes.Structure._fields_") class variable must, however, be defined before the type is first used (an instance is created, [`sizeof()`](https://docs.python.org/3/library/ctypes.html#ctypes.sizeof "ctypes.sizeof") is called on it, and so on). Later assignments to the [`_fields_`](https://docs.python.org/3/library/ctypes.html#ctypes.Structure._fields_ "ctypes.Structure._fields_") class variable will raise an AttributeError.
It is possible to define sub-subclasses of structure types, they inherit the fields of the base class plus the [`_fields_`](https://docs.python.org/3/library/ctypes.html#ctypes.Structure._fields_ "ctypes.Structure._fields_") defined in the sub-subclass, if any. 

_pack_[¶](https://docs.python.org/3/library/ctypes.html#ctypes.Structure._pack_ "Link to this definition")
    
An optional small integer that allows overriding the alignment of structure fields in the instance. [`_pack_`](https://docs.python.org/3/library/ctypes.html#ctypes.Structure._pack_ "ctypes.Structure._pack_") must already be defined when [`_fields_`](https://docs.python.org/3/library/ctypes.html#ctypes.Structure._fields_ "ctypes.Structure._fields_") is assigned, otherwise it will have no effect. Setting this attribute to 0 is the same as not setting it at all. 

_align_[¶](https://docs.python.org/3/library/ctypes.html#ctypes.Structure._align_ "Link to this definition")
    
An optional small integer that allows overriding the alignment of the structure when being packed or unpacked to/from memory. Setting this attribute to 0 is the same as not setting it at all.
Added in version 3.13. 

_anonymous_[¶](https://docs.python.org/3/library/ctypes.html#ctypes.Structure._anonymous_ "Link to this definition")
    
An optional sequence that lists the names of unnamed (anonymous) fields. [`_anonymous_`](https://docs.python.org/3/library/ctypes.html#ctypes.Structure._anonymous_ "ctypes.Structure._anonymous_") must be already defined when [`_fields_`](https://docs.python.org/3/library/ctypes.html#ctypes.Structure._fields_ "ctypes.Structure._fields_") is assigned, otherwise it will have no effect.
The fields listed in this variable must be structure or union type fields. [`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "ctypes: A foreign function library for Python.") will create descriptors in the structure type that allows accessing the nested fields directly, without the need to create the structure or union field.
Here is an example type (Windows):
```
class_U(Union):
  _fields_ = [("lptdesc", POINTER(TYPEDESC)),
        ("lpadesc", POINTER(ARRAYDESC)),
        ("hreftype", HREFTYPE)]
classTYPEDESC(Structure):
  _anonymous_ = ("u",)
  _fields_ = [("u", _U),
        ("vt", VARTYPE)]