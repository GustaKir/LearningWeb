Title: LZMAFile Methods: peek() and mode
URL: https://docs.python.org/3/library/lzma.html
Summary: The `peek(_size)` method returns buffered data without advancing the file position, ensuring at least one byte is returned unless EOF is reached. Importantly, this may affect the underlying file object's position. The `mode` attributes indicate file access modes, with 'rb' for reading and 'wb' for writing, introduced in version 3.13.
---

peek(_size =-1_)[¶](https://docs.python.org/3/library/lzma.html#lzma.LZMAFile.peek "Link to this definition")
    
Return buffered data without advancing the file position. At least one byte of data will be returned, unless EOF has been reached. The exact number of bytes returned is unspecified (the _size_ argument is ignored).
Note
While calling [`peek()`](https://docs.python.org/3/library/lzma.html#lzma.LZMAFile.peek "lzma.LZMAFile.peek") does not change the file position of the [`LZMAFile`](https://docs.python.org/3/library/lzma.html#lzma.LZMAFile "lzma.LZMAFile"), it may change the position of the underlying file object (e.g. if the [`LZMAFile`](https://docs.python.org/3/library/lzma.html#lzma.LZMAFile "lzma.LZMAFile") was constructed by passing a file object for _filename_). 

mode[¶](https://docs.python.org/3/library/lzma.html#lzma.LZMAFile.mode "Link to this definition")
    
`'rb'` for reading and `'wb'` for writing.
Added in version 3.13. 

name[¶](https://docs.python.org/3/library/lzma.html#lzma.LZMAFile.name "Link to this definition")
    
The lzma file name. Equivalent to the [`name`](https://docs.python.org/3/library/io.html#io.FileIO.name "io.FileIO.name") attribute of the underlying [file object](https://docs.python.org/3/glossary.html#term-file-object).
Added in version 3.13.
Changed in version 3.4: Added support for the `"x"` and `"xb"` modes.
Changed in version 3.5: The [`read()`](https://docs.python.org/3/library/io.html#io.BufferedIOBase.read "io.BufferedIOBase.read") method now accepts an argument of `None`.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object).
## Compressing and decompressing data in memory[¶](https://docs.python.org/3/library/lzma.html#compressing-and-decompressing-data-in-memory "Link to this heading") 

_class_ lzma.LZMACompressor(_format =FORMAT_XZ_, _check =-1_, _preset =None_, _filters =None_)[¶](https://docs.python.org/3/library/lzma.html#lzma.LZMACompressor "Link to this definition")
    
Create a compressor object, which can be used to compress data incrementally.
For a more convenient way of compressing a single chunk of data, see [`compress()`](https://docs.python.org/3/library/lzma.html#lzma.compress "lzma.compress").
The _format_ argument specifies what container format should be used. Possible values are:
  * 

`FORMAT_XZ`: The `.xz` container format.
    
This is the default format.
  * 

`FORMAT_ALONE`: The legacy `.lzma` container format.
    
This format is more limited than `.xz` – it does not support integrity checks or multiple filters.
  * 

`FORMAT_RAW`: A raw data stream, not using any container format.
    
This format specifier does not support integrity checks, and requires that you always specify a custom filter chain (for both compression and decompression). Additionally, data compressed in this manner cannot be decompressed using `FORMAT_AUTO` (see [`LZMADecompressor`](https://docs.python.org/3/library/lzma.html#lzma.LZMADecompressor "lzma.LZMADecompressor")).


The _check_ argument specifies the type of integrity check to include in the compressed data. This check is used when decompressing, to ensure that the data has not been corrupted. Possible values are:
  * `CHECK_NONE`: No integrity check. This is the default (and the only acceptable value) for `FORMAT_ALONE` and `FORMAT_RAW`.
  * `CHECK_CRC32`: 32-bit Cyclic Redundancy Check.
  * `CHECK_CRC64`: 64-bit Cyclic Redundancy Check. This is the default for `FORMAT_XZ`.
  * `CHECK_SHA256`: 256-bit Secure Hash Algorithm.


If the specified check is not supported, an [`LZMAError`](https://docs.python.org/3/library/lzma.html#lzma.LZMAError "lzma.LZMAError") is raised.
The compression settings can be specified either as a preset compression level (with the _preset_ argument), or in detail as a custom filter chain (with the _filters_ argument).
The _preset_ argument (if provided) should be an integer between `0` and `9` (inclusive), optionally OR-ed with the constant `PRESET_EXTREME`. If neither _preset_ nor _filters_ are given, the default behavior is to use `PRESET_DEFAULT` (preset level `6`). Higher presets produce smaller output, but make the compression process slower.
Note
In addition to being more CPU-intensive, compression with higher presets also requires much more memory (and produces output that needs more memory to decompress). With preset `9` for example, the overhead for an [`LZMACompressor`](https://docs.python.org/3/library/lzma.html#lzma.LZMACompressor "lzma.LZMACompressor") object can be as high as 800 MiB. For this reason, it is generally best to stick with the default preset.
The _filters_ argument (if provided) should be a filter chain specifier. See [Specifying custom filter chains](https://docs.python.org/3/library/lzma.html#filter-chain-specs) for details.