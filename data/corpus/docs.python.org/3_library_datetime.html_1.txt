Title: Understanding Aware and Naive DateTime Objects
URL: https://docs.python.org/3/library/datetime.html
Summary: This section explains the distinction between 'aware' and 'naive' date and time objects in Python. Aware objects contain time zone information, enabling them to accurately represent a specific moment in time that can be universally understood. Naive objects lack this information and are subject to interpretation based on local time conditions. Additionally, it mentions third-party libraries such as dateutil, which provides enhanced support for time zones, and DateType, which introduces static typing for naive and aware datetimes.
---

Package [dateutil](https://dateutil.readthedocs.io/en/stable/)
    
Third-party library with expanded time zone and parsing support. 

Package [DateType](https://pypi.org/project/DateType/)
    
Third-party library that introduces distinct static types to e.g. allow [static type checkers](https://docs.python.org/3/glossary.html#term-static-type-checker) to differentiate between naive and aware datetimes.
## Aware and Naive Objects[¶](https://docs.python.org/3/library/datetime.html#aware-and-naive-objects "Link to this heading")
Date and time objects may be categorized as “aware” or “naive” depending on whether or not they include time zone information.
With sufficient knowledge of applicable algorithmic and political time adjustments, such as time zone and daylight saving time information, an **aware** object can locate itself relative to other aware objects. An aware object represents a specific moment in time that is not open to interpretation. [[1]](https://docs.python.org/3/library/datetime.html#id5)
A **naive** object does not contain enough information to unambiguously locate itself relative to other date/time objects. Whether a naive object represents Coordinated Universal Time (UTC), local time, or time in some other time zone is purely up to the program, just like it is up to the program whether a particular number represents metres, miles, or mass. Naive objects are easy to understand and to work with, at the cost of ignoring some aspects of reality.
For applications requiring aware objects, [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") and [`time`](https://docs.python.org/3/library/datetime.html#datetime.time "datetime.time") objects have an optional time zone information attribute, `tzinfo`, that can be set to an instance of a subclass of the abstract [`tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo "datetime.tzinfo") class. These [`tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo "datetime.tzinfo") objects capture information about the offset from UTC time, the time zone name, and whether daylight saving time is in effect.
Only one concrete [`tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo "datetime.tzinfo") class, the [`timezone`](https://docs.python.org/3/library/datetime.html#datetime.timezone "datetime.timezone") class, is supplied by the `datetime` module. The `timezone` class can represent simple time zones with fixed offsets from UTC, such as UTC itself or North American EST and EDT time zones. Supporting time zones at deeper levels of detail is up to the application. The rules for time adjustment across the world are more political than rational, change frequently, and there is no standard suitable for every application aside from UTC.
## Constants[¶](https://docs.python.org/3/library/datetime.html#constants "Link to this heading")
The `datetime` module exports the following constants: 

datetime.MINYEAR[¶](https://docs.python.org/3/library/datetime.html#datetime.MINYEAR "Link to this definition")
    
The smallest year number allowed in a [`date`](https://docs.python.org/3/library/datetime.html#datetime.date "datetime.date") or [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") object. [`MINYEAR`](https://docs.python.org/3/library/datetime.html#datetime.MINYEAR "datetime.MINYEAR") is 1. 

datetime.MAXYEAR[¶](https://docs.python.org/3/library/datetime.html#datetime.MAXYEAR "Link to this definition")
    
The largest year number allowed in a [`date`](https://docs.python.org/3/library/datetime.html#datetime.date "datetime.date") or [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") object. [`MAXYEAR`](https://docs.python.org/3/library/datetime.html#datetime.MAXYEAR "datetime.MAXYEAR") is 9999. 

datetime.UTC[¶](https://docs.python.org/3/library/datetime.html#datetime.UTC "Link to this definition")
    
Alias for the UTC time zone singleton [`datetime.timezone.utc`](https://docs.python.org/3/library/datetime.html#datetime.timezone.utc "datetime.timezone.utc").
Added in version 3.11.
## Available Types[¶](https://docs.python.org/3/library/datetime.html#available-types "Link to this heading") 

_class_ datetime.date
    
An idealized naive date, assuming the current Gregorian calendar always was, and always will be, in effect. Attributes: [`year`](https://docs.python.org/3/library/datetime.html#datetime.date.year "datetime.date.year"), [`month`](https://docs.python.org/3/library/datetime.html#datetime.date.month "datetime.date.month"), and [`day`](https://docs.python.org/3/library/datetime.html#datetime.date.day "datetime.date.day").