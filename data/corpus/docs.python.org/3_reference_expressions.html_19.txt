Title: Expression Operators in Python
URL: https://docs.python.org/3/reference/expressions.html
Summary: This section explains the `*` (multiplication) operator, which computes the product of two numeric arguments or performs sequence repetition when one argument is a sequence. It also introduces the `@` (at) operator for matrix multiplication, noting that no built-in Python types implement this operator. Customization of both operators can be achieved through special methods: `__mul__()`, `__rmul__()` for multiplication, and `__matmul__()`, `__rmatmul__()` for matrix operations.
---

```

The `*` (multiplication) operator yields the product of its arguments. The arguments must either both be numbers, or one argument must be an integer and the other must be a sequence. In the former case, the numbers are converted to a common type and then multiplied together. In the latter case, sequence repetition is performed; a negative repetition factor yields an empty sequence.
This operation can be customized using the special [`__mul__()`](https://docs.python.org/3/reference/datamodel.html#object.__mul__ "object.__mul__") and [`__rmul__()`](https://docs.python.org/3/reference/datamodel.html#object.__rmul__ "object.__rmul__") methods.
The `@` (at) operator is intended to be used for matrix multiplication. No builtin Python types implement this operator.
This operation can be customized using the special [`__matmul__()`](https://docs.python.org/3/reference/datamodel.html#object.__matmul__ "object.__matmul__") and [`__rmatmul__()`](https://docs.python.org/3/reference/datamodel.html#object.__rmatmul__ "object.__rmatmul__") methods.
Added in version 3.5.
The `/` (division) and `//` (floor division) operators yield the quotient of their arguments. The numeric arguments are first converted to a common type. Division of integers yields a float, while floor division of integers results in an integer; the result is that of mathematical division with the ‘floor’ function applied to the result. Division by zero raises the [`ZeroDivisionError`](https://docs.python.org/3/library/exceptions.html#ZeroDivisionError "ZeroDivisionError") exception.
The division operation can be customized using the special [`__truediv__()`](https://docs.python.org/3/reference/datamodel.html#object.__truediv__ "object.__truediv__") and [`__rtruediv__()`](https://docs.python.org/3/reference/datamodel.html#object.__rtruediv__ "object.__rtruediv__") methods. The floor division operation can be customized using the special [`__floordiv__()`](https://docs.python.org/3/reference/datamodel.html#object.__floordiv__ "object.__floordiv__") and [`__rfloordiv__()`](https://docs.python.org/3/reference/datamodel.html#object.__rfloordiv__ "object.__rfloordiv__") methods.
The `%` (modulo) operator yields the remainder from the division of the first argument by the second. The numeric arguments are first converted to a common type. A zero right argument raises the [`ZeroDivisionError`](https://docs.python.org/3/library/exceptions.html#ZeroDivisionError "ZeroDivisionError") exception. The arguments may be floating-point numbers, e.g., `3.14%0.7` equals `0.34` (since `3.14` equals `4*0.7 + 0.34`.) The modulo operator always yields a result with the same sign as its second operand (or zero); the absolute value of the result is strictly smaller than the absolute value of the second operand [[1]](https://docs.python.org/3/reference/expressions.html#id19).
The floor division and modulo operators are connected by the following identity: `x == (x//y)*y + (x%y)`. Floor division and modulo are also connected with the built-in function [`divmod()`](https://docs.python.org/3/library/functions.html#divmod "divmod"): `divmod(x, y) == (x//y, x%y)`. [[2]](https://docs.python.org/3/reference/expressions.html#id20).
In addition to performing the modulo operation on numbers, the `%` operator is also overloaded by string objects to perform old-style string formatting (also known as interpolation). The syntax for string formatting is described in the Python Library Reference, section [printf-style String Formatting](https://docs.python.org/3/library/stdtypes.html#old-string-formatting).
The _modulo_ operation can be customized using the special [`__mod__()`](https://docs.python.org/3/reference/datamodel.html#object.__mod__ "object.__mod__") and [`__rmod__()`](https://docs.python.org/3/reference/datamodel.html#object.__rmod__ "object.__rmod__") methods.
The floor division operator, the modulo operator, and the [`divmod()`](https://docs.python.org/3/library/functions.html#divmod "divmod") function are not defined for complex numbers. Instead, convert to a floating-point number using the [`abs()`](https://docs.python.org/3/library/functions.html#abs "abs") function if appropriate.
The `+` (addition) operator yields the sum of its arguments. The arguments must either both be numbers or both be sequences of the same type. In the former case, the numbers are converted to a common type and then added together. In the latter case, the sequences are concatenated.
This operation can be customized using the special [`__add__()`](https://docs.python.org/3/reference/datamodel.html#object.__add__ "object.__add__") and [`__radd__()`](https://docs.python.org/3/reference/datamodel.html#object.__radd__ "object.__radd__") methods.
The `-` (subtraction) operator yields the difference of its arguments. The numeric arguments are first converted to a common type.
This operation can be customized using the special [`__sub__()`](https://docs.python.org/3/reference/datamodel.html#object.__sub__