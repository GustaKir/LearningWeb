Title: Inspect Module: Getting Documentation and Comments
URL: https://docs.python.org/3/library/inspect.html
Summary: The `inspect` module provides functions to retrieve documentation strings and comments for Python objects. `inspect.getdoc()` cleans and returns the documentation string for an object, leveraging inheritance for classes and methods, while `inspect.getcomments()` retrieves preceding comments related to the object's source code.
---

inspect.getdoc(_object_)[¶](https://docs.python.org/3/library/inspect.html#inspect.getdoc "Link to this definition")
    
Get the documentation string for an object, cleaned up with [`cleandoc()`](https://docs.python.org/3/library/inspect.html#inspect.cleandoc "inspect.cleandoc"). If the documentation string for an object is not provided and the object is a class, a method, a property or a descriptor, retrieve the documentation string from the inheritance hierarchy. Return `None` if the documentation string is invalid or missing.
Changed in version 3.5: Documentation strings are now inherited if not overridden. 

inspect.getcomments(_object_)[¶](https://docs.python.org/3/library/inspect.html#inspect.getcomments "Link to this definition")
    
Return in a single string any lines of comments immediately preceding the object’s source code (for a class, function, or method), or at the top of the Python source file (if the object is a module). If the object’s source code is unavailable, return `None`. This could happen if the object has been defined in C or the interactive shell. 

inspect.getfile(_object_)[¶](https://docs.python.org/3/library/inspect.html#inspect.getfile "Link to this definition")
    
Return the name of the (text or binary) file in which an object was defined. This will fail with a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") if the object is a built-in module, class, or function. 

inspect.getmodule(_object_)[¶](https://docs.python.org/3/library/inspect.html#inspect.getmodule "Link to this definition")
    
Try to guess which module an object was defined in. Return `None` if the module cannot be determined. 

inspect.getsourcefile(_object_)[¶](https://docs.python.org/3/library/inspect.html#inspect.getsourcefile "Link to this definition")
    
Return the name of the Python source file in which an object was defined or `None` if no way can be identified to get the source. This will fail with a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") if the object is a built-in module, class, or function. 

inspect.getsourcelines(_object_)[¶](https://docs.python.org/3/library/inspect.html#inspect.getsourcelines "Link to this definition")
    
Return a list of source lines and starting line number for an object. The argument may be a module, class, method, function, traceback, frame, or code object. The source code is returned as a list of the lines corresponding to the object and the line number indicates where in the original source file the first line of code was found. An [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") is raised if the source code cannot be retrieved. A [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") is raised if the object is a built-in module, class, or function.
Changed in version 3.3: [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") is raised instead of [`IOError`](https://docs.python.org/3/library/exceptions.html#IOError "IOError"), now an alias of the former. 

inspect.getsource(_object_)[¶](https://docs.python.org/3/library/inspect.html#inspect.getsource "Link to this definition")
    
Return the text of the source code for an object. The argument may be a module, class, method, function, traceback, frame, or code object. The source code is returned as a single string. An [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") is raised if the source code cannot be retrieved. A [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") is raised if the object is a built-in module, class, or function.
Changed in version 3.3: [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") is raised instead of [`IOError`](https://docs.python.org/3/library/exceptions.html#IOError "IOError"), now an alias of the former. 

inspect.cleandoc(_doc_)[¶](https://docs.python.org/3/library/inspect.html#inspect.cleandoc "Link to this definition")
    
Clean up indentation from docstrings that are indented to line up with blocks of code.
All leading whitespace is removed from the first line. Any leading whitespace that can be uniformly removed from the second line onwards is removed. Empty lines at the beginning and end are subsequently removed. Also, all tabs are expanded to spaces.
## Introspecting callables with the Signature object[¶](https://docs.python.org/3/library/inspect.html#introspecting-callables-with-the-signature-object "Link to this heading")
Added in version 3.3.
The [`Signature`](https://docs.python.org/3/library/inspect.html#inspect.Signature "inspect.Signature") object represents the call signature of a callable object and its return annotation. To retrieve a `Signature` object, use the `signature()` function.