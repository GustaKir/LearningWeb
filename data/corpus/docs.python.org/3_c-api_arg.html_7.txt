Title: Python C API - Argument Parsing Functions
URL: https://docs.python.org/3/c-api/arg.html
Summary: This section describes the Python C API functions `PyArg_VaParse` and `PyArg_ParseTupleAndKeywords`. The former is used for parsing arguments from a `va_list`, while the latter is intended for functions that require both positional and keyword arguments.
---

intPyArg_VaParse([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*args, constchar*format, va_listvargs)[¶](https://docs.python.org/3/c-api/arg.html#c.PyArg_VaParse "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Identical to [`PyArg_ParseTuple()`](https://docs.python.org/3/c-api/arg.html#c.PyArg_ParseTuple "PyArg_ParseTuple"), except that it accepts a va_list rather than a variable number of arguments. 

intPyArg_ParseTupleAndKeywords([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*args, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*kw, constchar*format, char*const*keywords, ...)[¶](https://docs.python.org/3/c-api/arg.html#c.PyArg_ParseTupleAndKeywords "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Parse the parameters of a function that takes both positional and keyword parameters into local variables. The _keywords_ argument is a `NULL`-terminated array of keyword parameter names specified as null-terminated ASCII or UTF-8 encoded C strings. Empty names denote [positional-only parameters](https://docs.python.org/3/glossary.html#positional-only-parameter). Returns true on success; on failure, it returns false and raises the appropriate exception.
Note
The _keywords_ parameter declaration is char*const* in C and constchar*const* in C++. This can be overridden with the [`PY_CXX_CONST`](https://docs.python.org/3/c-api/arg.html#c.PY_CXX_CONST "PY_CXX_CONST") macro.
Changed in version 3.6: Added support for [positional-only parameters](https://docs.python.org/3/glossary.html#positional-only-parameter).
Changed in version 3.13: The _keywords_ parameter has now type char*const* in C and constchar*const* in C++, instead of char**. Added support for non-ASCII keyword parameter names. 

intPyArg_VaParseTupleAndKeywords([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*args, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*kw, constchar*format, char*const*keywords, va_listvargs)[¶](https://docs.python.org/3/c-api/arg.html#c.PyArg_VaParseTupleAndKeywords "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Identical to [`PyArg_ParseTupleAndKeywords()`](https://docs.python.org/3/c-api/arg.html#c.PyArg_ParseTupleAndKeywords "PyArg_ParseTupleAndKeywords"), except that it accepts a va_list rather than a variable number of arguments. 

intPyArg_ValidateKeywordArguments([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*)[¶](https://docs.python.org/3/c-api/arg.html#c.PyArg_ValidateKeywordArguments "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Ensure that the keys in the keywords argument dictionary are strings. This is only needed if [`PyArg_ParseTupleAndKeywords()`](https://docs.python.org/3/c-api/arg.html#c.PyArg_ParseTupleAndKeywords "PyArg_ParseTupleAndKeywords") is not used, since the latter already does this check.
Added in version 3.2. 

intPyArg_Parse([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*args, constchar*format, ...)[¶](https://docs.python.org/3/c-api/arg.html#c.PyArg_Parse "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Parse the parameter of a function that takes a single positional parameter into a local variable. Returns true on success; on failure, it returns false and raises the appropriate exception.
Example:
```
// Function using METH_O calling convention
staticPyObject*
my_function(PyObject*module,PyObject*arg)
{
intvalue;
if(!PyArg_Parse(arg,"i:my_function",&value)){
returnNULL;
}
// ... use value ...
}