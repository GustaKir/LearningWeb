Title: Document Methods for Creating Nodes in XML
URL: https://docs.python.org/3/library/xml.dom.html
Summary: This section describes methods for creating various types of nodes in an XML document using the Document interface. It includes how to create elements with namespaces, text nodes, and comment nodes, specifying that none of these nodes are inserted into the document automatically.
---

Document.createElementNS(_namespaceURI_ , _tagName_)[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.Document.createElementNS "Link to this definition")
    
Create and return a new element with a namespace. The _tagName_ may have a prefix. The element is not inserted into the document when it is created. You need to explicitly insert it with one of the other methods such as `insertBefore()` or `appendChild()`. 

Document.createTextNode(_data_)[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.Document.createTextNode "Link to this definition")
    
Create and return a text node containing the data passed as a parameter. As with the other creation methods, this one does not insert the node into the tree. 

Document.createComment(_data_)[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.Document.createComment "Link to this definition")
    
Create and return a comment node containing the data passed as a parameter. As with the other creation methods, this one does not insert the node into the tree. 

Document.createProcessingInstruction(_target_ , _data_)[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.Document.createProcessingInstruction "Link to this definition")
    
Create and return a processing instruction node containing the _target_ and _data_ passed as parameters. As with the other creation methods, this one does not insert the node into the tree. 

Document.createAttribute(_name_)[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.Document.createAttribute "Link to this definition")
    
Create and return an attribute node. This method does not associate the attribute node with any particular element. You must use `setAttributeNode()` on the appropriate `Element` object to use the newly created attribute instance. 

Document.createAttributeNS(_namespaceURI_ , _qualifiedName_)[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.Document.createAttributeNS "Link to this definition")
    
Create and return an attribute node with a namespace. The _tagName_ may have a prefix. This method does not associate the attribute node with any particular element. You must use `setAttributeNode()` on the appropriate `Element` object to use the newly created attribute instance. 

Document.getElementsByTagName(_tagName_)[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.Document.getElementsByTagName "Link to this definition")
    
Search for all descendants (direct children, children’s children, etc.) with a particular element type name. 

Document.getElementsByTagNameNS(_namespaceURI_ , _localName_)[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.Document.getElementsByTagNameNS "Link to this definition")
    
Search for all descendants (direct children, children’s children, etc.) with a particular namespace URI and localname. The localname is the part of the namespace after the prefix.
### Element Objects[¶](https://docs.python.org/3/library/xml.dom.html#element-objects "Link to this heading")
`Element` is a subclass of `Node`, so inherits all the attributes of that class. 

Element.tagName[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.Element.tagName "Link to this definition")
    
The element type name. In a namespace-using document it may have colons in it. The value is a string. 

Element.getElementsByTagName(_tagName_)[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.Element.getElementsByTagName "Link to this definition")
    
Same as equivalent method in the `Document` class. 

Element.getElementsByTagNameNS(_namespaceURI_ , _localName_)[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.Element.getElementsByTagNameNS "Link to this definition")
    
Same as equivalent method in the `Document` class. 

Element.hasAttribute(_name_)[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.Element.hasAttribute "Link to this definition")
    
Return `True` if the element has an attribute named by _name_. 

Element.hasAttributeNS(_namespaceURI_ , _localName_)[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.Element.hasAttributeNS "Link to this definition")
    
Return `True` if the element has an attribute named by _namespaceURI_ and _localName_. 

Element.getAttribute(_name_)[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.Element.getAttribute "Link to this definition")
    
Return the value of the attribute named by _name_ as a string. If no such attribute exists, an empty string is returned, as if the attribute had no value. 

Element.getAttributeNode(_attrname_)[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.Element.getAttributeNode "Link to this definition")
    
Return the `Attr` node for the attribute named by _attrname_.