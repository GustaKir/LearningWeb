Title: Animation Control in Turtle Graphics
URL: https://docs.python.org/3/library/turtle.html
Summary: This section describes the functions for controlling animation in the Turtle graphics library. The `turtle.delay()` function sets the drawing delay in milliseconds, affecting the speed of the animation. The `turtle.tracer()` function enables or disables turtle animation and allows setting a delay for screen updates, optimizing performance for complex drawings.
---

```

### Animation control[¶](https://docs.python.org/3/library/turtle.html#animation-control "Link to this heading") 

turtle.delay(_delay =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.delay "Link to this definition")
     

Parameters:
    
**delay** – positive integer
Set or return the drawing _delay_ in milliseconds. (This is approximately the time interval between two consecutive canvas updates.) The longer the drawing delay, the slower the animation.
Optional argument:
>>>```
>>> screen.delay()
10
>>> screen.delay(5)
>>> screen.delay()
5

```


turtle.tracer(_n =None_, _delay =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.tracer "Link to this definition")
     

Parameters:
    
  * **n** – nonnegative integer
  * **delay** – nonnegative integer


Turn turtle animation on/off and set delay for update drawings. If _n_ is given, only each n-th regular screen update is really performed. (Can be used to accelerate the drawing of complex graphics.) When called without arguments, returns the currently stored value of n. Second argument sets delay value (see [`delay()`](https://docs.python.org/3/library/turtle.html#turtle.delay "turtle.delay")).
>>>```
>>> screen.tracer(8, 25)
>>> dist = 2
>>> for i in range(200):
...   fd(dist)
...   rt(90)
...   dist += 2

```


turtle.update()[¶](https://docs.python.org/3/library/turtle.html#turtle.update "Link to this definition")
    
Perform a TurtleScreen update. To be used when tracer is turned off.
See also the RawTurtle/Turtle method [`speed()`](https://docs.python.org/3/library/turtle.html#turtle.speed "turtle.speed").
### Using screen events[¶](https://docs.python.org/3/library/turtle.html#using-screen-events "Link to this heading") 

turtle.listen(_xdummy =None_, _ydummy =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.listen "Link to this definition")
    
Set focus on TurtleScreen (in order to collect key-events). Dummy arguments are provided in order to be able to pass [`listen()`](https://docs.python.org/3/library/turtle.html#turtle.listen "turtle.listen") to the onclick method. 

turtle.onkey(_fun_ , _key_)[¶](https://docs.python.org/3/library/turtle.html#turtle.onkey "Link to this definition")


turtle.onkeyrelease(_fun_ , _key_)[¶](https://docs.python.org/3/library/turtle.html#turtle.onkeyrelease "Link to this definition")
     

Parameters:
    
  * **fun** – a function with no arguments or `None`
  * **key** – a string: key (e.g. “a”) or key-symbol (e.g. “space”)


Bind _fun_ to key-release event of key. If _fun_ is `None`, event bindings are removed. Remark: in order to be able to register key-events, TurtleScreen must have the focus. (See method [`listen()`](https://docs.python.org/3/library/turtle.html#turtle.listen "turtle.listen").)
>>>```
>>> deff():
...   fd(50)
...   lt(60)
...
>>> screen.onkey(f, "Up")
>>> screen.listen()

```


turtle.onkeypress(_fun_ , _key =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.onkeypress "Link to this definition")
     

Parameters:
    
  * **fun** – a function with no arguments or `None`
  * **key** – a string: key (e.g. “a”) or key-symbol (e.g. “space”)


Bind _fun_ to key-press event of key if key is given, or to any key-press-event if no key is given. Remark: in order to be able to register key-events, TurtleScreen must have focus. (See method [`listen()`](https://docs.python.org/3/library/turtle.html#turtle.listen "turtle.listen").)
>>>```
>>> deff():
...   fd(50)
...
>>> screen.onkey(f, "Up")
>>> screen.listen()

```


turtle.onclick(_fun_ , _btn =1_, _add =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.onclick "Link to this definition")


turtle.onscreenclick(_fun_ , _btn =1_, _add =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.onscreenclick "Link to this definition")
     

Parameters:
    
  * **fun** – a function with two arguments which will be called with the coordinates of the clicked point on the canvas
  * **btn** – number of the mouse-button, defaults to 1 (left mouse button)
  * **add** – `True` or `False` – if `True`, a new binding will be added, otherwise it will replace a former binding


Bind _fun_ to mouse-click events on this screen. If _fun_ is `None`, existing bindings are removed.
Example for a TurtleScreen instance named `screen` and a Turtle instance named `turtle`:
>>>```
>>> screen.onclick(turtle.goto) # Subsequently clicking into the TurtleScreen will
>>>               # make the turtle move to the clicked point.
>>> screen.onclick(None)    # remove event binding again