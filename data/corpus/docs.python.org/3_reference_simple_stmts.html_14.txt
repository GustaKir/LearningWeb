Title: Type Alias Scope in Python
URL: https://docs.python.org/3/reference/simple_stmts.html
Summary: The `annotation-def` establishes an annotation scope similar to a function but with key differences, especially regarding lazy evaluation of type aliases. These can reference undefined names and can also be made generic. The `type` keyword is a soft keyword introduced in Python 3.12.
---

```

`annotation-def` indicates an [annotation scope](https://docs.python.org/3/reference/executionmodel.html#annotation-scopes), which behaves mostly like a function, but with several small differences.
The value of the type alias is evaluated in the annotation scope. It is not evaluated when the type alias is created, but only when the value is accessed through the type alias’s `__value__` attribute (see [Lazy evaluation](https://docs.python.org/3/reference/executionmodel.html#lazy-evaluation)). This allows the type alias to refer to names that are not yet defined.
Type aliases may be made generic by adding a [type parameter list](https://docs.python.org/3/reference/compound_stmts.html#type-params) after the name. See [Generic type aliases](https://docs.python.org/3/reference/compound_stmts.html#generic-type-aliases) for more.
`type` is a [soft keyword](https://docs.python.org/3/reference/lexical_analysis.html#soft-keywords).
Added in version 3.12.
See also 

[**PEP 695**](https://peps.python.org/pep-0695/) - Type Parameter Syntax
    
Introduced the `type` statement and syntax for generic classes and functions.
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [7. Simple statements](https://docs.python.org/3/reference/simple_stmts.html)
    * [7.1. Expression statements](https://docs.python.org/3/reference/simple_stmts.html#expression-statements)
    * [7.2. Assignment statements](https://docs.python.org/3/reference/simple_stmts.html#assignment-statements)
      * [7.2.1. Augmented assignment statements](https://docs.python.org/3/reference/simple_stmts.html#augmented-assignment-statements)
      * [7.2.2. Annotated assignment statements](https://docs.python.org/3/reference/simple_stmts.html#annotated-assignment-statements)
    * [7.3. The `assert` statement](https://docs.python.org/3/reference/simple_stmts.html#the-assert-statement)
    * [7.4. The `pass` statement](https://docs.python.org/3/reference/simple_stmts.html#the-pass-statement)
    * [7.5. The `del` statement](https://docs.python.org/3/reference/simple_stmts.html#the-del-statement)
    * [7.6. The `return` statement](https://docs.python.org/3/reference/simple_stmts.html#the-return-statement)
    * [7.7. The `yield` statement](https://docs.python.org/3/reference/simple_stmts.html#the-yield-statement)
    * [7.8. The `raise` statement](https://docs.python.org/3/reference/simple_stmts.html#the-raise-statement)
    * [7.9. The `break` statement](https://docs.python.org/3/reference/simple_stmts.html#the-break-statement)
    * [7.10. The `continue` statement](https://docs.python.org/3/reference/simple_stmts.html#the-continue-statement)
    * [7.11. The `import` statement](https://docs.python.org/3/reference/simple_stmts.html#the-import-statement)
      * [7.11.1. Future statements](https://docs.python.org/3/reference/simple_stmts.html#future-statements)
    * [7.12. The `global` statement](https://docs.python.org/3/reference/simple_stmts.html#the-global-statement)
    * [7.13. The `nonlocal` statement](https://docs.python.org/3/reference/simple_stmts.html#the-nonlocal-statement)
    * [7.14. The `type` statement](https://docs.python.org/3/reference/simple_stmts.html#the-type-statement)


#### Previous topic
[6. Expressions](https://docs.python.org/3/reference/expressions.html "previous chapter")
#### Next topic
[8. Compound statements](https://docs.python.org/3/reference/compound_stmts.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/reference/simple_stmts.rst)


«
### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/reference/compound_stmts.html "8. Compound statements") |
  * [previous](https://docs.python.org/3/reference/expressions.html "6. Expressions") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Language Reference](https://docs.python.org/3/reference/index.html) »
  * [7. Simple statements](https://docs.python.org/3/reference/simple_stmts.html)
  * | 
  * Theme  Auto Light Dark |