Title: Python 3 Changelog: Latest Updates and Improvements
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: Key updates include changes to error messages for pickling, improved consistency in `issubclass()` error handling, restrictions on `math.factorial` input types, and the addition of a new opcode `END_ASYNC_FOR`, which addresses issues with `async for` loops.
---

It now says “cannot pickle” instead of “can’t pickle” or “cannot serialize”.
  * [bpo-33018](https://bugs.python.org/issue?@action=redirect&bpo=33018): Improve consistency of errors raised by `issubclass()` when called with a non-class and an abstract base class as the first and second arguments, respectively. Patch by Josh Bronson.
  * [bpo-33083](https://bugs.python.org/issue?@action=redirect&bpo=33083): `math.factorial` no longer accepts arguments that are not int-like. Patch by Pablo Galindo.
  * [bpo-33041](https://bugs.python.org/issue?@action=redirect&bpo=33041): Added new opcode [`END_ASYNC_FOR`](https://docs.python.org/3/library/dis.html#opcode-END_ASYNC_FOR) and fixes the following issues:
    * Setting global [`StopAsyncIteration`](https://docs.python.org/3/library/exceptions.html#StopAsyncIteration "StopAsyncIteration") no longer breaks `async for` loops.
    * Jumping into an `async for` loop is now disabled.
    * Jumping out of an `async for` loop no longer corrupts the stack.
  * [bpo-25750](https://bugs.python.org/issue?@action=redirect&bpo=25750): Fix rare Python crash due to bad refcounting in `type_getattro()` if a descriptor deletes itself from the class. Patch by Jeroen Demeyer.
  * [bpo-33041](https://bugs.python.org/issue?@action=redirect&bpo=33041): Fixed bytecode generation for “async for” with a complex target. A StopAsyncIteration raised on assigning or unpacking will be now propagated instead of stopping the iteration.
  * [bpo-33026](https://bugs.python.org/issue?@action=redirect&bpo=33026): Fixed jumping out of “with” block by setting f_lineno.
  * [bpo-33005](https://bugs.python.org/issue?@action=redirect&bpo=33005): Fix a crash on fork when using a custom memory allocator (ex: using PYTHONMALLOC env var). _PyGILState_Reinit() and _PyInterpreterState_Enable() now use the default RAW memory allocator to allocate a new interpreters mutex on fork.
  * [bpo-32911](https://bugs.python.org/issue?@action=redirect&bpo=32911): Due to unexpected compatibility issues discovered during downstream beta testing, reverted [bpo-29463](https://bugs.python.org/issue?@action=redirect&bpo=29463). `docstring` field is removed from Module, ClassDef, FunctionDef, and AsyncFunctionDef ast nodes which was added in 3.7a1. Docstring expression is restored as a first statement in their body. Based on patch by Inada Naoki.
  * [bpo-17288](https://bugs.python.org/issue?@action=redirect&bpo=17288): Prevent jumps from ‘return’ and ‘exception’ trace events.
  * [bpo-32946](https://bugs.python.org/issue?@action=redirect&bpo=32946): Importing names from already imported module with “from … import …” is now 30% faster if the module is not a package.
  * [bpo-32932](https://bugs.python.org/issue?@action=redirect&bpo=32932): Make error message more revealing when there are non-str objects in `__all__`.
  * [bpo-32925](https://bugs.python.org/issue?@action=redirect&bpo=32925): Optimized iterating and containing test for literal lists consisting of non-constants: `x in [a, b]` and `for x in [a, b]`. The case of all constant elements already was optimized.
  * [bpo-32889](https://bugs.python.org/issue?@action=redirect&bpo=32889): Update Valgrind suppression list to account for the rename of `Py_ADDRESS_IN_RANG` to `address_in_range`.
  * [bpo-32836](https://bugs.python.org/issue?@action=redirect&bpo=32836): Don’t use temporary variables in cases of list/dict/set comprehensions
  * [bpo-31356](https://bugs.python.org/issue?@action=redirect&bpo=31356): Remove the new API added in [bpo-31356](https://bugs.python.org/issue?@action=redirect&bpo=31356) (gc.ensure_disabled() context manager).
  * [bpo-32305](https://bugs.python.org/issue?@action=redirect&bpo=32305): For namespace packages, ensure that both `__file__` and `__spec__.origin` are set to None.
  * [bpo-32303](https://bugs.python.org/issue?@action=redirect&bpo=32303): Make sure `__spec__.loader` matches `__loader__` for namespace packages.
  * [bpo-32711](https://bugs.python.org/issue?@action=redirect&bpo=32711): Fix the warning messages for Python/ast_unparse.c. Patch by Stéphane Wirtel
  * [bpo-32583](https://bugs.python.org/issue?@action=redirect&bpo=32583): Fix possible crashing in builtin Unicode decoders caused by write out-of-bound errors when using customized decode error handlers.
  * [bpo-32489](https://bugs.python.org/issue?@action=redirect&bpo=32489): A [`continue`](https://docs.python.org/3/reference/simple_stmts.html#continue) statement is now allowed in the [`finally`](https://docs.python.org/3/reference/compound_stmts.html#finally) clause.
  * [bpo-17611](https://bugs.python.org/issue?@action=redirect&bpo=17611): Simplified the interpreter loop by moving the logic of unrolling the stack of blocks into the compiler.