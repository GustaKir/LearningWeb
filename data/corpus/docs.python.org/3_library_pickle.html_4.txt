Title: Overview of Pickle Module in Python
URL: https://docs.python.org/3/library/pickle.html
Summary: The `pickle` module in Python allows for the serialization and deserialization of complex objects into byte streams. While it enables writing and reading from file objects and can facilitate data transfer over networks or storage in databases, it does not address object naming or concurrent access issues. The module is often used in conjunction with the `shelve` module for a more accessible object persistence solution.
---

Note
Serialization is a more primitive notion than persistence; although [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "pickle: Convert Python objects to streams of bytes and back.") reads and writes file objects, it does not handle the issue of naming persistent objects, nor the (even more complicated) issue of concurrent access to persistent objects. The [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "pickle: Convert Python objects to streams of bytes and back.") module can transform a complex object into a byte stream and it can transform the byte stream into an object with the same internal structure. Perhaps the most obvious thing to do with these byte streams is to write them onto a file, but it is also conceivable to send them across a network or store them in a database. The [`shelve`](https://docs.python.org/3/library/shelve.html#module-shelve "shelve: Python object persistence.") module provides a simple interface to pickle and unpickle objects on DBM-style database files.
## Module Interface[¶](https://docs.python.org/3/library/pickle.html#module-interface "Link to this heading")
To serialize an object hierarchy, you simply call the [`dumps()`](https://docs.python.org/3/library/pickle.html#pickle.dumps "pickle.dumps") function. Similarly, to de-serialize a data stream, you call the [`loads()`](https://docs.python.org/3/library/pickle.html#pickle.loads "pickle.loads") function. However, if you want more control over serialization and de-serialization, you can create a [`Pickler`](https://docs.python.org/3/library/pickle.html#pickle.Pickler "pickle.Pickler") or an [`Unpickler`](https://docs.python.org/3/library/pickle.html#pickle.Unpickler "pickle.Unpickler") object, respectively.
The [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "pickle: Convert Python objects to streams of bytes and back.") module provides the following constants: 

pickle.HIGHEST_PROTOCOL[¶](https://docs.python.org/3/library/pickle.html#pickle.HIGHEST_PROTOCOL "Link to this definition")
    
An integer, the highest [protocol version](https://docs.python.org/3/library/pickle.html#pickle-protocols) available. This value can be passed as a _protocol_ value to functions [`dump()`](https://docs.python.org/3/library/pickle.html#pickle.dump "pickle.dump") and [`dumps()`](https://docs.python.org/3/library/pickle.html#pickle.dumps "pickle.dumps") as well as the [`Pickler`](https://docs.python.org/3/library/pickle.html#pickle.Pickler "pickle.Pickler") constructor. 

pickle.DEFAULT_PROTOCOL[¶](https://docs.python.org/3/library/pickle.html#pickle.DEFAULT_PROTOCOL "Link to this definition")
    
An integer, the default [protocol version](https://docs.python.org/3/library/pickle.html#pickle-protocols) used for pickling. May be less than [`HIGHEST_PROTOCOL`](https://docs.python.org/3/library/pickle.html#pickle.HIGHEST_PROTOCOL "pickle.HIGHEST_PROTOCOL"). Currently the default protocol is 4, first introduced in Python 3.4 and incompatible with previous versions.
Changed in version 3.0: The default protocol is 3.
Changed in version 3.8: The default protocol is 4.
The [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "pickle: Convert Python objects to streams of bytes and back.") module provides the following functions to make the pickling process more convenient: 

pickle.dump(_obj_ , _file_ , _protocol =None_, _*_ , _fix_imports =True_, _buffer_callback =None_)[¶](https://docs.python.org/3/library/pickle.html#pickle.dump "Link to this definition")
    
Write the pickled representation of the object _obj_ to the open [file object](https://docs.python.org/3/glossary.html#term-file-object) _file_. This is equivalent to `Pickler(file, protocol).dump(obj)`.
Arguments _file_ , _protocol_ , _fix_imports_ and _buffer_callback_ have the same meaning as in the [`Pickler`](https://docs.python.org/3/library/pickle.html#pickle.Pickler "pickle.Pickler") constructor.
Changed in version 3.8: The _buffer_callback_ argument was added. 

pickle.dumps(_obj_ , _protocol =None_, _*_ , _fix_imports =True_, _buffer_callback =None_)[¶](https://docs.python.org/3/library/pickle.html#pickle.dumps "Link to this definition")
    
Return the pickled representation of the object _obj_ as a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") object, instead of writing it to a file.
Arguments _protocol_ , _fix_imports_ and _buffer_callback_ have the same meaning as in the [`Pickler`](https://docs.python.org/3/library/pickle.html#pickle.Pickler "pickle.Pickler") constructor.
Changed in version 3.8: The _buffer_callback_ argument was added.