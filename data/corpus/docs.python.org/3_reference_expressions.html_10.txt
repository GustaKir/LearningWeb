Title: Asynchronous Generator Iterator Methods
URL: https://docs.python.org/3/reference/expressions.html
Summary: This section details the methods available for asynchronous generator iterators, specifically focusing on the `__anext__()` method. This method returns an awaitable that initiates or resumes the execution of an asynchronous generator function, allowing it to yield values or continue execution from the last yield expression.
---

cs.python.org/3/reference/expressions.html#asynchronous-generator-iterator-methods "Link to this heading")
This subsection describes the methods of an asynchronous generator iterator, which are used to control the execution of a generator function. 

_async_ agen.__anext__()[¶](https://docs.python.org/3/reference/expressions.html#agen.__anext__ "Link to this definition")
    
Returns an awaitable which when run starts to execute the asynchronous generator or resumes it at the last executed yield expression. When an asynchronous generator function is resumed with an [`__anext__()`](https://docs.python.org/3/reference/expressions.html#agen.__anext__ "agen.__anext__") method, the current yield expression always evaluates to [`None`](https://docs.python.org/3/library/constants.html#None "None") in the returned awaitable, which when run will continue to the next yield expression. The value of the [`yield_list`](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-yield_list) of the yield expression is the value of the [`StopIteration`](https://docs.python.org/3/library/exceptions.html#StopIteration "StopIteration") exception raised by the completing coroutine. If the asynchronous generator exits without yielding another value, the awaitable instead raises a [`StopAsyncIteration`](https://docs.python.org/3/library/exceptions.html#StopAsyncIteration "StopAsyncIteration") exception, signalling that the asynchronous iteration has completed.
This method is normally called implicitly by a [`async for`](https://docs.python.org/3/reference/compound_stmts.html#async-for) loop. 

_async_ agen.asend(_value_)[¶](https://docs.python.org/3/reference/expressions.html#agen.asend "Link to this definition")
    
Returns an awaitable which when run resumes the execution of the asynchronous generator. As with the [`send()`](https://docs.python.org/3/reference/expressions.html#generator.send "generator.send") method for a generator, this “sends” a value into the asynchronous generator function, and the _value_ argument becomes the result of the current yield expression. The awaitable returned by the [`asend()`](https://docs.python.org/3/reference/expressions.html#agen.asend "agen.asend") method will return the next value yielded by the generator as the value of the raised [`StopIteration`](https://docs.python.org/3/library/exceptions.html#StopIteration "StopIteration"), or raises [`StopAsyncIteration`](https://docs.python.org/3/library/exceptions.html#StopAsyncIteration "StopAsyncIteration") if the asynchronous generator exits without yielding another value. When [`asend()`](https://docs.python.org/3/reference/expressions.html#agen.asend "agen.asend") is called to start the asynchronous generator, it must be called with [`None`](https://docs.python.org/3/library/constants.html#None "None") as the argument, because there is no yield expression that could receive the value. 

_async_ agen.athrow(_value_)[¶](https://docs.python.org/3/reference/expressions.html#agen.athrow "Link to this definition")


_async_ agen.athrow(_type_[, _value_[, _traceback_]])
    
Returns an awaitable that raises an exception of type `type` at the point where the asynchronous generator was paused, and returns the next value yielded by the generator function as the value of the raised [`StopIteration`](https://docs.python.org/3/library/exceptions.html#StopIteration "StopIteration") exception. If the asynchronous generator exits without yielding another value, a [`StopAsyncIteration`](https://docs.python.org/3/library/exceptions.html#StopAsyncIteration "StopAsyncIteration") exception is raised by the awaitable. If the generator function does not catch the passed-in exception, or raises a different exception, then when the awaitable is run that exception propagates to the caller of the awaitable.
Changed in version 3.12: The second signature (type[, value[, traceback]]) is deprecated and may be removed in a future version of Python.