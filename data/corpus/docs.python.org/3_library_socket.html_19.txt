Title: socket.connect Method
URL: https://docs.python.org/3/library/socket.html
Summary: The `socket.connect` method is used to connect to a remote socket at a specified address, which varies by address family. If interrupted by a signal, it will either complete the connection or raise a `TimeoutError` on timeout for blocking sockets, or an `InterruptedError` for non-blocking sockets. The method also raises an auditing event `socket.connect` with the relevant arguments.
---

socket.connect(_address_)[¶](https://docs.python.org/3/library/socket.html#socket.socket.connect "Link to this definition")
    
Connect to a remote socket at _address_. (The format of _address_ depends on the address family — see above.)
If the connection is interrupted by a signal, the method waits until the connection completes, or raise a [`TimeoutError`](https://docs.python.org/3/library/exceptions.html#TimeoutError "TimeoutError") on timeout, if the signal handler doesn’t raise an exception and the socket is blocking or has a timeout. For non-blocking sockets, the method raises an [`InterruptedError`](https://docs.python.org/3/library/exceptions.html#InterruptedError "InterruptedError") exception if the connection is interrupted by a signal (or the exception raised by the signal handler).
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `socket.connect` with arguments `self`, `address`.
Changed in version 3.5: The method now waits until the connection completes instead of raising an [`InterruptedError`](https://docs.python.org/3/library/exceptions.html#InterruptedError "InterruptedError") exception if the connection is interrupted by a signal, the signal handler doesn’t raise an exception and the socket is blocking or has a timeout (see the [**PEP 475**](https://peps.python.org/pep-0475/) for the rationale).
[Availability](https://docs.python.org/3/library/intro.html#availability): not WASI. 

socket.connect_ex(_address_)[¶](https://docs.python.org/3/library/socket.html#socket.socket.connect_ex "Link to this definition")
    
Like `connect(address)`, but return an error indicator instead of raising an exception for errors returned by the C-level `connect()` call (other problems, such as “host not found,” can still raise exceptions). The error indicator is `0` if the operation succeeded, otherwise the value of the `errno` variable. This is useful to support, for example, asynchronous connects.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `socket.connect` with arguments `self`, `address`.
[Availability](https://docs.python.org/3/library/intro.html#availability): not WASI. 

socket.detach()[¶](https://docs.python.org/3/library/socket.html#socket.socket.detach "Link to this definition")
    
Put the socket object into closed state without actually closing the underlying file descriptor. The file descriptor is returned, and can be reused for other purposes.
Added in version 3.2. 

socket.dup()[¶](https://docs.python.org/3/library/socket.html#socket.socket.dup "Link to this definition")
    
Duplicate the socket.
The newly created socket is [non-inheritable](https://docs.python.org/3/library/os.html#fd-inheritance).
Changed in version 3.4: The socket is now non-inheritable.
[Availability](https://docs.python.org/3/library/intro.html#availability): not WASI. 

socket.fileno()[¶](https://docs.python.org/3/library/socket.html#socket.socket.fileno "Link to this definition")
    
Return the socket’s file descriptor (a small integer), or -1 on failure. This is useful with [`select.select()`](https://docs.python.org/3/library/select.html#select.select "select.select").
Under Windows the small integer returned by this method cannot be used where a file descriptor can be used (such as [`os.fdopen()`](https://docs.python.org/3/library/os.html#os.fdopen "os.fdopen")). Unix does not have this limitation. 

socket.get_inheritable()[¶](https://docs.python.org/3/library/socket.html#socket.socket.get_inheritable "Link to this definition")
    
Get the [inheritable flag](https://docs.python.org/3/library/os.html#fd-inheritance) of the socket’s file descriptor or socket’s handle: `True` if the socket can be inherited in child processes, `False` if it cannot.
Added in version 3.4. 

socket.getpeername()[¶](https://docs.python.org/3/library/socket.html#socket.socket.getpeername "Link to this definition")
    
Return the remote address to which the socket is connected. This is useful to find out the port number of a remote IPv4/v6 socket, for instance. (The format of the address returned depends on the address family — see above.) On some systems this function is not supported. 

socket.getsockname()[¶](https://docs.python.org/3/library/socket.html#socket.socket.getsockname "Link to this definition")
    
Return the socket’s own address. This is useful to find out the port number of an IPv4/v6 socket, for instance. (The format of the address returned depends on the address family — see above.)