Title: Module Attributes in Python
URL: https://docs.python.org/3/reference/datamodel.html
Summary: This section describes key attributes of Python modules including `__doc__`, which contains the documentation string, and `__annotations__`, a dictionary for variable annotations collected during module execution. It also links to best practices for working with annotations.
---

module.__doc__[¶](https://docs.python.org/3/reference/datamodel.html#module.__doc__ "Link to this definition")
    
The module’s documentation string, or `None` if unavailable. See also: [`__doc__ attributes`](https://docs.python.org/3/library/stdtypes.html#definition.__doc__ "definition.__doc__"). 

module.__annotations__[¶](https://docs.python.org/3/reference/datamodel.html#module.__annotations__ "Link to this definition")
    
A dictionary containing [variable annotations](https://docs.python.org/3/glossary.html#term-variable-annotation) collected during module body execution. For best practices on working with [`__annotations__`](https://docs.python.org/3/reference/datamodel.html#module.__annotations__ "module.__annotations__"), please see [Annotations Best Practices](https://docs.python.org/3/howto/annotations.html#annotations-howto).
#### 3.2.9.3. Module dictionaries[¶](https://docs.python.org/3/reference/datamodel.html#module-dictionaries "Link to this heading")
Module objects also have the following special read-only attribute: 

module.__dict__[¶](https://docs.python.org/3/reference/datamodel.html#module.__dict__ "Link to this definition")
    
The module’s namespace as a dictionary object. Uniquely among the attributes listed here, `__dict__` cannot be accessed as a global variable from within a module; it can only be accessed as an attribute on module objects.
**CPython implementation detail:** Because of the way CPython clears module dictionaries, the module dictionary will be cleared when the module falls out of scope even if the dictionary still has live references. To avoid this, copy the dictionary or keep the module around while using its dictionary directly.
### 3.2.10. Custom classes[¶](https://docs.python.org/3/reference/datamodel.html#custom-classes "Link to this heading")
Custom class types are typically created by class definitions (see section [Class definitions](https://docs.python.org/3/reference/compound_stmts.html#class)). A class has a namespace implemented by a dictionary object. Class attribute references are translated to lookups in this dictionary, e.g., `C.x` is translated to `C.__dict__["x"]` (although there are a number of hooks which allow for other means of locating attributes). When the attribute name is not found there, the attribute search continues in the base classes. This search of the base classes uses the C3 method resolution order which behaves correctly even in the presence of ‘diamond’ inheritance structures where there are multiple inheritance paths leading back to a common ancestor. Additional details on the C3 MRO used by Python can be found at [The Python 2.3 Method Resolution Order](https://docs.python.org/3/howto/mro.html#python-2-3-mro).
When a class attribute reference (for class `C`, say) would yield a class method object, it is transformed into an instance method object whose [`__self__`](https://docs.python.org/3/reference/datamodel.html#method.__self__ "method.__self__") attribute is `C`. When it would yield a [`staticmethod`](https://docs.python.org/3/library/functions.html#staticmethod "staticmethod") object, it is transformed into the object wrapped by the static method object. See section [Implementing Descriptors](https://docs.python.org/3/reference/datamodel.html#descriptors) for another way in which attributes retrieved from a class may differ from those actually contained in its [`__dict__`](https://docs.python.org/3/reference/datamodel.html#object.__dict__ "object.__dict__").
Class attribute assignments update the class’s dictionary, never the dictionary of a base class.
A class object can be called (see above) to yield a class instance (see below).
#### 3.2.10.1. Special attributes[¶](https://docs.python.org/3/reference/datamodel.html#special-attributes "Link to this heading")
Attribute | Meaning  
---|--- 

type.__name__[¶](https://docs.python.org/3/reference/datamodel.html#type.__name__ "Link to this definition")
| The class’s name. See also: [`__name__ attributes`](https://docs.python.org/3/library/stdtypes.html#definition.__name__ "definition.__name__"). 

type.__qualname__[¶](https://docs.python.org/3/reference/datamodel.html#type.__qualname__ "Link to this definition")
| The class’s [qualified name](https://docs.python.org/3/glossary.html#term-qualified-name). See also: [`__qualname__ attributes`](https://docs.python.org/3/library/stdtypes.html#definition.__qualname__ "definition.__qualname__"). 

type.__module__[¶](https://docs.python.org/3/reference/datamodel.html#type.__module__ "Link to this definition")
| The name of the module in which the class was defined.