Title: Glob Module Path Matching Behavior
URL: https://docs.python.org/3/library/glob.html
Summary: This section explains how the glob function interprets path separators and wildcards. By default, wildcards do not match path separators, and the `**` pattern matches multiple segments if _recursive_ is true. The option _include_hidden_ allows patterns to match hidden files. The _seps_ argument can specify custom path separators, defaulting to the operating system's separator.
---

```

Path separators and segments are meaningful to this function, unlike [`fnmatch.translate()`](https://docs.python.org/3/library/fnmatch.html#fnmatch.translate "fnmatch.translate"). By default wildcards do not match path separators, and `*` pattern segments match precisely one path segment.
If _recursive_ is true, the pattern segment “`**`” will match any number of path segments.
If _include_hidden_ is true, wildcards can match path segments that start with a dot (`.`).
A sequence of path separators may be supplied to the _seps_ argument. If not given, [`os.sep`](https://docs.python.org/3/library/os.html#os.sep "os.sep") and [`altsep`](https://docs.python.org/3/library/os.html#os.altsep "os.altsep") (if available) are used.
See also
[`pathlib.PurePath.full_match()`](https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.full_match "pathlib.PurePath.full_match") and [`pathlib.Path.glob()`](https://docs.python.org/3/library/pathlib.html#pathlib.Path.glob "pathlib.Path.glob") methods, which call this function to implement pattern matching and globbing.
Added in version 3.13.
## Examples[¶](https://docs.python.org/3/library/glob.html#examples "Link to this heading")
Consider a directory containing the following files: `1.gif`, `2.txt`, `card.gif` and a subdirectory `sub` which contains only the file `3.txt`. [`glob()`](https://docs.python.org/3/library/glob.html#module-glob "glob: Unix shell style pathname pattern expansion.") will produce the following results. Notice how any leading components of the path are preserved.
>>>```
>>> importglob
>>> glob.glob('./[0-9].*')
['./1.gif', './2.txt']
>>> glob.glob('*.gif')
['1.gif', 'card.gif']
>>> glob.glob('?.gif')
['1.gif']
>>> glob.glob('**/*.txt', recursive=True)
['2.txt', 'sub/3.txt']
>>> glob.glob('./**/', recursive=True)
['./', './sub/']

```

If the directory contains files starting with `.` they won’t be matched by default. For example, consider a directory containing `card.gif` and `.card.gif`:
>>>```
>>> importglob
>>> glob.glob('*.gif')
['card.gif']
>>> glob.glob('.c*')
['.card.gif']

```

See also
The [`fnmatch`](https://docs.python.org/3/library/fnmatch.html#module-fnmatch "fnmatch: Unix shell style filename pattern matching.") module offers shell-style filename (not path) expansion.
See also
The [`pathlib`](https://docs.python.org/3/library/pathlib.html#module-pathlib "pathlib: Object-oriented filesystem paths") module offers high-level path objects.
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [`glob` — Unix style pathname pattern expansion](https://docs.python.org/3/library/glob.html)
    * [Examples](https://docs.python.org/3/library/glob.html#examples)


#### Previous topic
[`tempfile` — Generate temporary files and directories](https://docs.python.org/3/library/tempfile.html "previous chapter")
#### Next topic
[`fnmatch` — Unix filename pattern matching](https://docs.python.org/3/library/fnmatch.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/glob.rst)


«
### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/fnmatch.html "fnmatch — Unix filename pattern matching") |
  * [previous](https://docs.python.org/3/library/tempfile.html "tempfile — Generate temporary files and directories") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [File and Directory Access](https://docs.python.org/3/library/filesys.html) »
  * [`glob` — Unix style pathname pattern expansion](https://docs.python.org/3/library/glob.html)
  * | 
  * Theme  Auto Light Dark |


© [ Copyright ](https://docs.python.org/3/copyright.html) 2001-2025, Python Software Foundation. This page is licensed under the Python Software Foundation License Version 2. Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License. See [History and License](https://docs.python.org/license.html) for more information. The Python Software Foundation is a non-profit corporation. [Please donate.](https://www.python.org/psf/donations/) Last updated on Apr 27, 2025 (05:38 UTC). [Found a bug](https://docs.python.org/bugs.html)? Created using [Sphinx](https://www.sphinx-doc.org/) 8.2.3. 
  *[*]: Keyword-only parameters separator (PEP 3102)