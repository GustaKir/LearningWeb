Title: importlib - Source to Code and Module Execution
URL: https://docs.python.org/3/library/importlib.html
Summary: The content describes the _source_to_code_ method that creates a code object from Python source, detailing its parameters and usage. It highlights the _exec_module_ method as an implementation of Loader.exec_module(), indicating the purpose of executing the generated code in a module's dictionary.
---

_static_ source_to_code(_data_ , _path ='<string>'_)[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.InspectLoader.source_to_code "Link to this definition")
    
Create a code object from Python source.
The _data_ argument can be whatever the [`compile()`](https://docs.python.org/3/library/functions.html#compile "compile") function supports (i.e. string or bytes). The _path_ argument should be the “path” to where the source code originated from, which can be an abstract concept (e.g. location in a zip file).
With the subsequent code object one can execute it in a module by running `exec(code, module.__dict__)`.
Added in version 3.4.
Changed in version 3.5: Made the method static. 

exec_module(_module_)[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.InspectLoader.exec_module "Link to this definition")
    
Implementation of [`Loader.exec_module()`](https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.exec_module "importlib.abc.Loader.exec_module").
Added in version 3.4. 

load_module(_fullname_)[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.InspectLoader.load_module "Link to this definition")
    
Implementation of [`Loader.load_module()`](https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.load_module "importlib.abc.Loader.load_module").
Deprecated since version 3.4, will be removed in version 3.15: use [`exec_module()`](https://docs.python.org/3/library/importlib.html#importlib.abc.InspectLoader.exec_module "importlib.abc.InspectLoader.exec_module") instead. 

_class_ importlib.abc.ExecutionLoader[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.ExecutionLoader "Link to this definition")
    
An abstract base class which inherits from [`InspectLoader`](https://docs.python.org/3/library/importlib.html#importlib.abc.InspectLoader "importlib.abc.InspectLoader") that, when implemented, helps a module to be executed as a script. The ABC represents an optional [**PEP 302**](https://peps.python.org/pep-0302/) protocol. 

_abstractmethod_ get_filename(_fullname_)[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.ExecutionLoader.get_filename "Link to this definition")
    
> An abstract method that is to return the value of [`__file__`](https://docs.python.org/3/reference/datamodel.html#module.__file__ "module.__file__") for the specified module. If no path is available, [`ImportError`](https://docs.python.org/3/library/exceptions.html#ImportError "ImportError") is raised.
> If source code is available, then the method should return the path to the source file, regardless of whether a bytecode was used to load the module.
> Changed in version 3.4: Raises [`ImportError`](https://docs.python.org/3/library/exceptions.html#ImportError "ImportError") instead of [`NotImplementedError`](https://docs.python.org/3/library/exceptions.html#NotImplementedError "NotImplementedError"). 

_class_ importlib.abc.FileLoader(_fullname_ , _path_)[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.FileLoader "Link to this definition")
    
An abstract base class which inherits from [`ResourceLoader`](https://docs.python.org/3/library/importlib.html#importlib.abc.ResourceLoader "importlib.abc.ResourceLoader") and [`ExecutionLoader`](https://docs.python.org/3/library/importlib.html#importlib.abc.ExecutionLoader "importlib.abc.ExecutionLoader"), providing concrete implementations of [`ResourceLoader.get_data()`](https://docs.python.org/3/library/importlib.html#importlib.abc.ResourceLoader.get_data "importlib.abc.ResourceLoader.get_data") and [`ExecutionLoader.get_filename()`](https://docs.python.org/3/library/importlib.html#importlib.abc.ExecutionLoader.get_filename "importlib.abc.ExecutionLoader.get_filename").
The _fullname_ argument is a fully resolved name of the module the loader is to handle. The _path_ argument is the path to the file for the module.
Added in version 3.3. 

name[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.FileLoader.name "Link to this definition")
    
The name of the module the loader can handle. 

path[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.FileLoader.path "Link to this definition")
    
Path to the file of the module. 

load_module(_fullname_)[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.FileLoader.load_module "Link to this definition")
    
Calls super’s `load_module()`.
Deprecated since version 3.4, will be removed in version 3.15: Use [`Loader.exec_module()`](https://docs.python.org/3/library/importlib.html#importlib.abc.Loader.exec_module "importlib.abc.Loader.exec_module") instead. 

_abstractmethod_ get_filename(_fullname_)[¶](https://docs.python.org/3/library/importlib.html#importlib.abc.FileLoader.get_filename "Link to this definition")
    
Returns [`path`](https://docs.python.org/3/library/importlib.html#importlib.abc.FileLoader.path "importlib.abc.FileLoader.path").