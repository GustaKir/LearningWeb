Title: sys.settrace - Setting a Trace Function in Python
URL: https://docs.python.org/3/library/sys.html
Summary: The `sys.settrace()` function sets the system's trace function for debugging in Python. It's thread-specific, requiring registration for each thread. The trace function takes three arguments: `_frame_`, `_event_`, and `_arg_`, and is called on specific events such as 'call', 'line', and 'return'.
---

sys.settrace(_tracefunc_)[¶](https://docs.python.org/3/library/sys.html#sys.settrace "Link to this definition")
    
Set the system’s trace function, which allows you to implement a Python source code debugger in Python. The function is thread-specific; for a debugger to support multiple threads, it must register a trace function using [`settrace()`](https://docs.python.org/3/library/sys.html#sys.settrace "sys.settrace") for each thread being debugged or use [`threading.settrace()`](https://docs.python.org/3/library/threading.html#threading.settrace "threading.settrace").
Trace functions should have three arguments: _frame_ , _event_ , and _arg_. _frame_ is the current stack frame. _event_ is a string: `'call'`, `'line'`, `'return'`, `'exception'` or `'opcode'`. _arg_ depends on the event type.
The trace function is invoked (with _event_ set to `'call'`) whenever a new local scope is entered; it should return a reference to a local trace function to be used for the new scope, or `None` if the scope shouldn’t be traced.
The local trace function should return a reference to itself, or to another function which would then be used as the local trace function for the scope.
If there is any error occurred in the trace function, it will be unset, just like `settrace(None)` is called.
Note
Tracing is disabled while calling the trace function (e.g. a function set by `settrace()`). For recursive tracing see [`call_tracing()`](https://docs.python.org/3/library/sys.html#sys.call_tracing "sys.call_tracing").
The events have the following meaning: 

`'call'`
    
A function is called (or some other code block entered). The global trace function is called; _arg_ is `None`; the return value specifies the local trace function. 

`'line'`
    
The interpreter is about to execute a new line of code or re-execute the condition of a loop. The local trace function is called; _arg_ is `None`; the return value specifies the new local trace function. See `Objects/lnotab_notes.txt` for a detailed explanation of how this works. Per-line events may be disabled for a frame by setting [`f_trace_lines`](https://docs.python.org/3/reference/datamodel.html#frame.f_trace_lines "frame.f_trace_lines") to [`False`](https://docs.python.org/3/library/constants.html#False "False") on that [frame](https://docs.python.org/3/reference/datamodel.html#frame-objects). 

`'return'`
    
A function (or other code block) is about to return. The local trace function is called; _arg_ is the value that will be returned, or `None` if the event is caused by an exception being raised. The trace function’s return value is ignored. 

`'exception'`
    
An exception has occurred. The local trace function is called; _arg_ is a tuple `(exception, value, traceback)`; the return value specifies the new local trace function.