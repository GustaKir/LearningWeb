Title: String Methods in Python: Splitting Strings
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This section demonstrates the usage of the `split()` method on strings, which divides a string into a list at whitespace by default, and allows for a specified maximum number of splits. It introduces the `splitlines()` method, which returns a list of lines by breaking at line boundaries, with an option to include line breaks.
---

```
>>> '1 2 3'.split()
['1', '2', '3']
>>> '1 2 3'.split(maxsplit=1)
['1', '2 3']
>>> '  1  2  3  '.split()
['1', '2', '3']

```


str.splitlines(_keepends =False_)[¶](https://docs.python.org/3/library/stdtypes.html#str.splitlines "Link to this definition")
    
Return a list of the lines in the string, breaking at line boundaries. Line breaks are not included in the resulting list unless _keepends_ is given and true.
This method splits on the following line boundaries. In particular, the boundaries are a superset of [universal newlines](https://docs.python.org/3/glossary.html#term-universal-newlines).
Representation | Description  
---|---  
`\n` | Line Feed  
`\r` | Carriage Return  
`\r\n` | Carriage Return + Line Feed  
`\v` or `\x0b` | Line Tabulation  
`\f` or `\x0c` | Form Feed  
`\x1c` | File Separator  
`\x1d` | Group Separator  
`\x1e` | Record Separator  
`\x85` | Next Line (C1 Control Code)  
`\u2028` | Line Separator  
`\u2029` | Paragraph Separator  
Changed in version 3.2: `\v` and `\f` added to list of line boundaries.
For example:
>>>```
>>> 'ab c\n\nde fg\rkl\r\n'.splitlines()
['ab c', '', 'de fg', 'kl']
>>> 'ab c\n\nde fg\rkl\r\n'.splitlines(keepends=True)
['ab c\n', '\n', 'de fg\r', 'kl\r\n']

```

Unlike [`split()`](https://docs.python.org/3/library/stdtypes.html#str.split "str.split") when a delimiter string _sep_ is given, this method returns an empty list for the empty string, and a terminal line break does not result in an extra line:
>>>```
>>> "".splitlines()
[]
>>> "One line\n".splitlines()
['One line']

```

For comparison, `split('\n')` gives:
>>>```
>>> ''.split('\n')
['']
>>> 'Two lines\n'.split('\n')
['Two lines', '']

```


str.startswith(_prefix_[, _start_[, _end_]])[¶](https://docs.python.org/3/library/stdtypes.html#str.startswith "Link to this definition")
    
Return `True` if string starts with the _prefix_ , otherwise return `False`. _prefix_ can also be a tuple of prefixes to look for. With optional _start_ , test string beginning at that position. With optional _end_ , stop comparing string at that position. 

str.strip([_chars_])[¶](https://docs.python.org/3/library/stdtypes.html#str.strip "Link to this definition")
    
Return a copy of the string with the leading and trailing characters removed. The _chars_ argument is a string specifying the set of characters to be removed. If omitted or `None`, the _chars_ argument defaults to removing whitespace. The _chars_ argument is not a prefix or suffix; rather, all combinations of its values are stripped:
>>>```
>>> '  spacious  '.strip()
'spacious'
>>> 'www.example.com'.strip('cmowz.')
'example'

```

The outermost leading and trailing _chars_ argument values are stripped from the string. Characters are removed from the leading end until reaching a string character that is not contained in the set of characters in _chars_. A similar action takes place on the trailing end. For example:
>>>```
>>> comment_string = '#....... Section 3.2.1 Issue #32 .......'
>>> comment_string.strip('.#! ')
'Section 3.2.1 Issue #32'

```


str.swapcase()[¶](https://docs.python.org/3/library/stdtypes.html#str.swapcase "Link to this definition")
    
Return a copy of the string with uppercase characters converted to lowercase and vice versa. Note that it is not necessarily true that `s.swapcase().swapcase() == s`. 

str.title()[¶](https://docs.python.org/3/library/stdtypes.html#str.title "Link to this definition")
    
Return a titlecased version of the string where words start with an uppercase character and the remaining characters are lowercase.
For example:
>>>```
>>> 'Hello world'.title()
'Hello World'

```

The algorithm uses a simple language-independent definition of a word as groups of consecutive letters. The definition works in many contexts but it means that apostrophes in contractions and possessives form word boundaries, which may not be the desired result:
>>>```
>>> "they're bill's friends from the UK".title()
"They'Re Bill'S Friends From The Uk"

```

The [`string.capwords()`](https://docs.python.org/3/library/string.html#string.capwords "string.capwords") function does not have this problem, as it splits words on spaces only.
Alternatively, a workaround for apostrophes can be constructed using regular expressions:
>>>```
>>> importre
>>> deftitlecase(s):
...   return re.sub(r"[A-Za-z]+('[A-Za-z]+)?",
...          lambda mo: mo.group(0).capitalize(),
...          s)
...
>>> titlecase("they're bill's friends.")
"They're Bill's Friends."