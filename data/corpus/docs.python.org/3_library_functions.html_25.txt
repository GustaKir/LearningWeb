Title: Using the @property Decorator in Python
URL: https://docs.python.org/3/library/functions.html
Summary: The @property decorator allows a method to be accessed as a read-only attribute. It provides a way to define getter, setter, and deleter methods for properties in Python, exemplified through a class definition demonstrating the use of these decorators for attribute management.
---

```

The `@property` decorator turns the `voltage()` method into a “getter” for a read-only attribute with the same name, and it sets the docstring for _voltage_ to “Get the current voltage.” 

@getter[¶](https://docs.python.org/3/library/functions.html#property.getter "Link to this definition")


@setter[¶](https://docs.python.org/3/library/functions.html#property.setter "Link to this definition")


@deleter[¶](https://docs.python.org/3/library/functions.html#property.deleter "Link to this definition")
    
A property object has `getter`, `setter`, and `deleter` methods usable as decorators that create a copy of the property with the corresponding accessor function set to the decorated function. This is best explained with an example:
```
classC:
  def__init__(self):
    self._x = None
  @property
  defx(self):
"""I'm the 'x' property."""
    return self._x
  @x.setter
  defx(self, value):
    self._x = value
  @x.deleter
  defx(self):
    del self._x

```

This code is exactly equivalent to the first example. Be sure to give the additional functions the same name as the original property (`x` in this case.)
The returned property object also has the attributes `fget`, `fset`, and `fdel` corresponding to the constructor arguments.
Changed in version 3.5: The docstrings of property objects are now writeable. 

__name__[¶](https://docs.python.org/3/library/functions.html#property.__name__ "Link to this definition")
    
Attribute holding the name of the property. The name of the property can be changed at runtime.
Added in version 3.13. 

_class_ range(_stop_)


_class_ range(_start_ , _stop_ , _step =1_)
    
Rather than being a function, [`range`](https://docs.python.org/3/library/stdtypes.html#range "range") is actually an immutable sequence type, as documented in [Ranges](https://docs.python.org/3/library/stdtypes.html#typesseq-range) and [Sequence Types — list, tuple, range](https://docs.python.org/3/library/stdtypes.html#typesseq). 

repr(_object_)[¶](https://docs.python.org/3/library/functions.html#repr "Link to this definition")
    
Return a string containing a printable representation of an object. For many types, this function makes an attempt to return a string that would yield an object with the same value when passed to [`eval()`](https://docs.python.org/3/library/functions.html#eval "eval"); otherwise, the representation is a string enclosed in angle brackets that contains the name of the type of the object together with additional information often including the name and address of the object. A class can control what this function returns for its instances by defining a [`__repr__()`](https://docs.python.org/3/reference/datamodel.html#object.__repr__ "object.__repr__") method. If [`sys.displayhook()`](https://docs.python.org/3/library/sys.html#sys.displayhook "sys.displayhook") is not accessible, this function will raise [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError").
This class has a custom representation that can be evaluated:
```
classPerson:
  def__init__(self, name, age):
   self.name = name
   self.age = age
  def__repr__(self):
   return f"Person('{self.name}', {self.age})"