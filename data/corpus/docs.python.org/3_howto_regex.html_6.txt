Title: Using Raw Strings and Regular Expression Methods in Python
URL: https://docs.python.org/3/howto/regex.html
Summary: The `r` prefix indicates a raw string literal, avoiding issues with escape sequences that can trigger warnings. The `findall()` method generates an entire list of matches, while `finditer()` provides an iterator yielding match objects.
---

```

The `r` prefix, making the literal a raw string literal, is needed in this example because escape sequences in a normal “cooked” string literal that are not recognized by Python, as opposed to regular expressions, now result in a [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning") and will eventually become a [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError"). See [The Backslash Plague](https://docs.python.org/3/howto/regex.html#the-backslash-plague).
[`findall()`](https://docs.python.org/3/library/re.html#re.Pattern.findall "re.Pattern.findall") has to create the entire list before it can be returned as the result. The [`finditer()`](https://docs.python.org/3/library/re.html#re.Pattern.finditer "re.Pattern.finditer") method returns a sequence of [match object](https://docs.python.org/3/library/re.html#match-objects) instances as an [iterator](https://docs.python.org/3/glossary.html#term-iterator):
>>>```
>>> iterator = p.finditer('12 drummers drumming, 11 ... 10 ...')
>>> iterator
<callable_iterator object at 0x...>
>>> for match in iterator:
...   print(match.span())
...
(0, 2)
(22, 24)
(29, 31)

```

### Module-Level Functions[¶](https://docs.python.org/3/howto/regex.html#module-level-functions "Link to this heading")
You don’t have to create a pattern object and call its methods; the [`re`](https://docs.python.org/3/library/re.html#module-re "re: Regular expression operations.") module also provides top-level functions called [`match()`](https://docs.python.org/3/library/re.html#re.match "re.match"), [`search()`](https://docs.python.org/3/library/re.html#re.search "re.search"), [`findall()`](https://docs.python.org/3/library/re.html#re.findall "re.findall"), [`sub()`](https://docs.python.org/3/library/re.html#re.sub "re.sub"), and so forth. These functions take the same arguments as the corresponding pattern method with the RE string added as the first argument, and still return either `None` or a [match object](https://docs.python.org/3/library/re.html#match-objects) instance.
>>>```
>>> print(re.match(r'From\s+', 'Fromage amk'))
None
>>> re.match(r'From\s+', 'From amk Thu May 14 19:12:10 1998')
<re.Match object; span=(0, 5), match='From '>