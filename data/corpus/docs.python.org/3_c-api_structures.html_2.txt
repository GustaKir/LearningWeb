Title: Python C API Structures Overview
URL: https://docs.python.org/3/c-api/structures.html
Summary: This section discusses key structures in the Python C API, including `PyTypeObject`, which is the base class for all Python objects, and the function `Py_Is`, which checks object identity. It notes the alignment with the Stable ABI and provides links to relevant documentation.
---

```

See documentation of [`PyVarObject`](https://docs.python.org/3/c-api/structures.html#c.PyVarObject "PyVarObject") above. 

[PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject")PyBaseObject_Type[¶](https://docs.python.org/3/c-api/structures.html#c.PyBaseObject_Type "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
The base class of all other objects, the same as [`object`](https://docs.python.org/3/library/functions.html#object "object") in Python. 

intPy_Is([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*x, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*y)[¶](https://docs.python.org/3/c-api/structures.html#c.Py_Is "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.10._
Test if the _x_ object is the _y_ object, the same as `x is y` in Python.
Added in version 3.10. 

intPy_IsNone([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*x)[¶](https://docs.python.org/3/c-api/structures.html#c.Py_IsNone "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.10._
Test if an object is the `None` singleton, the same as `x is None` in Python.
Added in version 3.10. 

intPy_IsTrue([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*x)[¶](https://docs.python.org/3/c-api/structures.html#c.Py_IsTrue "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.10._
Test if an object is the `True` singleton, the same as `x is True` in Python.
Added in version 3.10. 

intPy_IsFalse([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*x)[¶](https://docs.python.org/3/c-api/structures.html#c.Py_IsFalse "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.10._
Test if an object is the `False` singleton, the same as `x is False` in Python.
Added in version 3.10. 

[PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject")*Py_TYPE([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o)[¶](https://docs.python.org/3/c-api/structures.html#c.Py_TYPE "Link to this definition")
    _Return value: Borrowed reference._
Get the type of the Python object _o_.
Return a [borrowed reference](https://docs.python.org/3/glossary.html#term-borrowed-reference).
Use the [`Py_SET_TYPE()`](https://docs.python.org/3/c-api/structures.html#c.Py_SET_TYPE "Py_SET_TYPE") function to set an object type.
Changed in version 3.11: [`Py_TYPE()`](https://docs.python.org/3/c-api/structures.html#c.Py_TYPE "Py_TYPE") is changed to an inline static function. The parameter type is no longer const[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*. 

intPy_IS_TYPE([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o, [PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject")*type)[¶](https://docs.python.org/3/c-api/structures.html#c.Py_IS_TYPE "Link to this definition")
    
Return non-zero if the object _o_ type is _type_. Return zero otherwise. Equivalent to: `Py_TYPE(o) == type`.
Added in version 3.9. 

voidPy_SET_TYPE([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o, [PyTypeObject](https://docs.python.org/3/c-api/type.html#c.PyTypeObject "PyTypeObject")*type)[¶](https://docs.python.org/3/c-api/structures.html#c.Py_SET_TYPE "Link to this definition")
    
Set the object _o_ type to _type_.
Added in version 3.9. 

[Py_ssize_t](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")Py_SIZE([PyVarObject](https://docs.python.org/3/c-api/structures.html#c.PyVarObject "PyVarObject")*o)[¶](https://docs.python.org/3/c-api/structures.html#c.Py_SIZE "Link to this definition")
    
Get the size of the Python object _o_.
Use the [`Py_SET_SIZE()`](https://docs.python.org/3/c-api/structures.html#c.Py_SET_SIZE "Py_SET_SIZE") function to set an object size.
Changed in version 3.11: [`Py_SIZE()`](https://docs.python.org/3/c-api/structures.html#c.Py_SIZE "Py_SIZE") is changed to an inline static function. The parameter type is no longer const[PyVarObject](https://docs.python.org/3/c-api/structures.html#c.PyVarObject "PyVarObject")*. 

voidPy_SET_SIZE([PyVarObject](https://docs.python.org/3/c-api/structures.html#c.PyVarObject "PyVarObject")*o, [Py_ssize_t](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")size)[¶](https://docs.python.org/3/c-api/structures.html#c.Py_SET_SIZE "Link to this definition")
    
Set the object _o_ size to _size_.
Added in version 3.9.