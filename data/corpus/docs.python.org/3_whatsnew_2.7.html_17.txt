Title: Python 2.7 Release Notes
URL: https://docs.python.org/3/whatsnew/2.7.html
Summary: This document details several deprecations and updates in Python 2.7, including the deprecation of `contextlib.nested()` in favor of native support for multiple context managers in the `with` statement, updates to the `cookielib` module regarding invalid cookie versions, and improvements to the `deepcopy()` function in the `copy` module.
---

```

(Contributed by Mats Kindahl; [bpo-7005](https://bugs.python.org/issue?@action=redirect&bpo=7005).)
  * Deprecated function: `contextlib.nested()`, which allows handling more than one context manager with a single [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement, has been deprecated, because the `with` statement now supports multiple context managers.
  * The [`cookielib`](https://docs.python.org/3/library/http.cookiejar.html#module-http.cookiejar "http.cookiejar: Classes for automatic handling of HTTP cookies.") module now ignores cookies that have an invalid version field, one that doesn’t contain an integer value. (Fixed by John J. Lee; [bpo-3924](https://bugs.python.org/issue?@action=redirect&bpo=3924).)
  * The [`copy`](https://docs.python.org/3/library/copy.html#module-copy "copy: Shallow and deep copy operations.") module’s [`deepcopy()`](https://docs.python.org/3/library/copy.html#copy.deepcopy "copy.deepcopy") function will now correctly copy bound instance methods. (Implemented by Robert Collins; [bpo-1515](https://bugs.python.org/issue?@action=redirect&bpo=1515).)
  * The [`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "ctypes: A foreign function library for Python.") module now always converts `None` to a C `NULL` pointer for arguments declared as pointers. (Changed by Thomas Heller; [bpo-4606](https://bugs.python.org/issue?@action=redirect&bpo=4606).) The underlying [libffi library](https://sourceware.org/libffi/) has been updated to version 3.0.9, containing various fixes for different platforms. (Updated by Matthias Klose; [bpo-8142](https://bugs.python.org/issue?@action=redirect&bpo=8142).)
  * New method: the [`datetime`](https://docs.python.org/3/library/datetime.html#module-datetime "datetime: Basic date and time types.") module’s [`timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta "datetime.timedelta") class gained a [`total_seconds()`](https://docs.python.org/3/library/datetime.html#datetime.timedelta.total_seconds "datetime.timedelta.total_seconds") method that returns the number of seconds in the duration. (Contributed by Brian Quinlan; [bpo-5788](https://bugs.python.org/issue?@action=redirect&bpo=5788).)
  * New method: the [`Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal") class gained a [`from_float()`](https://docs.python.org/3/library/decimal.html#decimal.Decimal.from_float "decimal.Decimal.from_float") class method that performs an exact conversion of a floating-point number to a `Decimal`. This exact conversion strives for the closest decimal approximation to the floating-point representation’s value; the resulting decimal value will therefore still include the inaccuracy, if any. For example, `Decimal.from_float(0.1)` returns `Decimal('0.1000000000000000055511151231257827021181583404541015625')`. (Implemented by Raymond Hettinger; [bpo-4796](https://bugs.python.org/issue?@action=redirect&bpo=4796).)
Comparing instances of [`Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal") with floating-point numbers now produces sensible results based on the numeric values of the operands. Previously such comparisons would fall back to Python’s default rules for comparing objects, which produced arbitrary results based on their type. Note that you still cannot combine `Decimal` and floating point in other operations such as addition, since you should be explicitly choosing how to convert between float and `Decimal`. (Fixed by Mark Dickinson; [bpo-2531](https://bugs.python.org/issue?@action=redirect&bpo=2531).)
The constructor for [`Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal") now accepts floating-point numbers (added by Raymond Hettinger; [bpo-8257](https://bugs.python.org/issue?@action=redirect&bpo=8257)) and non-European Unicode characters such as Arabic-Indic digits (contributed by Mark Dickinson; [bpo-6595](https://bugs.python.org/issue?@action=redirect&bpo=6595)).
Most of the methods of the [`Context`](https://docs.python.org/3/library/decimal.html#decimal.Context "decimal.Context") class now accept integers as well as [`Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal") instances; the only exceptions are the [`canonical()`](https://docs.python.org/3/library/decimal.html#decimal.Context.canonical "decimal.Context.canonical") and [`is_canonical()`](https://docs.python.org/3/library/decimal.html#decimal.Context.is_canonical "decimal.Context.is_canonical") methods. (Patch by Juan José Conti; [bpo-7633](https://bugs.python.org/issue?@action=redirect&bpo=7633).)
When using [`Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal") instances with a string’s [`format()`](https://docs.python.org/3/library/stdtypes.html#str.format "str.format") method, the default alignment was previously left-alignment.