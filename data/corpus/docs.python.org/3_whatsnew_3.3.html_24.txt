Title: Python 3.3 New Features in the os Module
URL: https://docs.python.org/3/whatsnew/3.3.html
Summary: The os module in Python 3.3 introduces enhancements including the `effective_ids` keyword argument for the `access()` function, which allows for effective UID/GID usage in access checks. Platform support is verifiable through the `supports_fd` and `supports_effective_ids` sets.
---

thconf "os.pathconf"), [`exists()`](https://docs.python.org/3/library/os.path.html#os.path.exists "os.path.exists"), [`stat()`](https://docs.python.org/3/library/os.html#os.stat "os.stat"), [`statvfs()`](https://docs.python.org/3/library/os.html#os.statvfs "os.statvfs"), [`utime()`](https://docs.python.org/3/library/os.html#os.utime "os.utime"). Platform support for this can be checked via the [`os.supports_fd`](https://docs.python.org/3/library/os.html#os.supports_fd "os.supports_fd") set.
  * [`access()`](https://docs.python.org/3/library/os.html#os.access "os.access") accepts an `effective_ids` keyword argument to turn on using the effective uid/gid rather than the real uid/gid in the access check. Platform support for this can be checked via the [`supports_effective_ids`](https://docs.python.org/3/library/os.html#os.supports_effective_ids "os.supports_effective_ids") set.
  * The [`os`](https://docs.python.org/3/library/os.html#module-os "os: Miscellaneous operating system interfaces.") module has two new functions: [`getpriority()`](https://docs.python.org/3/library/os.html#os.getpriority "os.getpriority") and [`setpriority()`](https://docs.python.org/3/library/os.html#os.setpriority "os.setpriority"). They can be used to get or set process niceness/priority in a fashion similar to [`os.nice()`](https://docs.python.org/3/library/os.html#os.nice "os.nice") but extended to all processes instead of just the current one.
(Patch submitted by Giampaolo Rodolà in [bpo-10784](https://bugs.python.org/issue?@action=redirect&bpo=10784).)
  * The new [`os.replace()`](https://docs.python.org/3/library/os.html#os.replace "os.replace") function allows cross-platform renaming of a file with overwriting the destination. With [`os.rename()`](https://docs.python.org/3/library/os.html#os.rename "os.rename"), an existing destination file is overwritten under POSIX, but raises an error under Windows. (Contributed by Antoine Pitrou in [bpo-8828](https://bugs.python.org/issue?@action=redirect&bpo=8828).)
  * The stat family of functions ([`stat()`](https://docs.python.org/3/library/os.html#os.stat "os.stat"), [`fstat()`](https://docs.python.org/3/library/os.html#os.fstat "os.fstat"), and [`lstat()`](https://docs.python.org/3/library/os.html#os.lstat "os.lstat")) now support reading a file’s timestamps with nanosecond precision. Symmetrically, [`utime()`](https://docs.python.org/3/library/os.html#os.utime "os.utime") can now write file timestamps with nanosecond precision. (Contributed by Larry Hastings in [bpo-14127](https://bugs.python.org/issue?@action=redirect&bpo=14127).)
  * The new [`os.get_terminal_size()`](https://docs.python.org/3/library/os.html#os.get_terminal_size "os.get_terminal_size") function queries the size of the terminal attached to a file descriptor. See also [`shutil.get_terminal_size()`](https://docs.python.org/3/library/shutil.html#shutil.get_terminal_size "shutil.get_terminal_size"). (Contributed by Zbigniew Jędrzejewski-Szmek in [bpo-13609](https://bugs.python.org/issue?@action=redirect&bpo=13609).)