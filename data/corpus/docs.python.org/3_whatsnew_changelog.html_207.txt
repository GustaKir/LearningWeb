Title: Core and Builtins Updates in Python
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section lists updates related to the core and built-in functionalities of Python, including a fix for an infinite recursion bug in the tokenizer, the addition of APIs for code object notifications, and a fix for an issue that may lead to memory corruption during frame teardown.
---

### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id187 "Link to this heading")
  * [gh-99891](https://github.com/python/cpython/issues/99891): Fix a bug in the tokenizer that could cause infinite recursion when showing syntax warnings that happen in the first line of the source. Patch by Pablo Galindo
  * [gh-91054](https://github.com/python/cpython/issues/91054): Add [`PyCode_AddWatcher()`](https://docs.python.org/3/c-api/code.html#c.PyCode_AddWatcher "PyCode_AddWatcher") and [`PyCode_ClearWatcher()`](https://docs.python.org/3/c-api/code.html#c.PyCode_ClearWatcher "PyCode_ClearWatcher") APIs to register callbacks to receive notification on creation and destruction of code objects.
  * [gh-99729](https://github.com/python/cpython/issues/99729): Fix an issue that could cause frames to be visible to Python code as they are being torn down, possibly leading to memory corruption or hard crashes of the interpreter.
  * [gh-99708](https://github.com/python/cpython/issues/99708): Fix bug where compiler crashes on an if expression with an empty body block.
  * [gh-99578](https://github.com/python/cpython/issues/99578): Fix a reference bug in `_imp.create_builtin()` after the creation of the first sub-interpreter for modules `builtins` and `sys`. Patch by Victor Stinner.
  * [gh-99581](https://github.com/python/cpython/issues/99581): Fixed a bug that was causing a buffer overflow if the tokenizer copies a line missing the newline character from a file that is as long as the available tokenizer buffer. Patch by Pablo galindo
  * [gh-99553](https://github.com/python/cpython/issues/99553): Fix bug where an [`ExceptionGroup`](https://docs.python.org/3/library/exceptions.html#ExceptionGroup "ExceptionGroup") subclass can wrap a [`BaseException`](https://docs.python.org/3/library/exceptions.html#BaseException "BaseException").
  * [gh-99547](https://github.com/python/cpython/issues/99547): Add a function to os.path to check if a path is a junction: isjunction. Add similar functionality to pathlib.Path as is_junction.
  * [gh-99370](https://github.com/python/cpython/issues/99370): Fix zip path for venv created from a non-installed python on POSIX platforms.
  * [gh-99377](https://github.com/python/cpython/issues/99377): Add audit events for thread creation and clear operations.
  * [gh-98686](https://github.com/python/cpython/issues/98686): Remove the `BINARY_OP_GENERIC` and `COMPARE_OP_GENERIC` “specializations”.
  * [gh-99298](https://github.com/python/cpython/issues/99298): Remove the remaining error paths for attribute specializations, and refuse to specialize attribute accesses on types that haven’t had [`PyType_Ready()`](https://docs.python.org/3/c-api/type.html#c.PyType_Ready "PyType_Ready") called on them yet.
  * [gh-99127](https://github.com/python/cpython/issues/99127): Allow some features of [`syslog`](https://docs.python.org/3/library/syslog.html#module-syslog "syslog: An interface to the Unix syslog library routines. \(Unix\)") to the main interpreter only. Patch by Donghee Na.
  * [gh-91053](https://github.com/python/cpython/issues/91053): Optimizing interpreters and JIT compilers may need to invalidate internal metadata when functions are modified. This change adds the ability to provide a callback that will be invoked each time a function is created, modified, or destroyed.
  * [gh-90994](https://github.com/python/cpython/issues/90994): Improve error messages when there’s a syntax error with call arguments. The following three cases are covered: - No value is assigned to a named argument, eg `foo(a=)`. - A value is assigned to a star argument, eg `foo(*args=[0])`. - A value is assigned to a double-star keyword argument, eg `foo(**kwarg={'a': 0})`.
  * [bpo-45026](https://bugs.python.org/issue?@action=redirect&bpo=45026): Optimize the [`range`](https://docs.python.org/3/library/stdtypes.html#range "range") object iterator. It is now smaller, faster iteration of ranges containing large numbers. Smaller pickles, faster unpickling.
  * [bpo-31718](https://bugs.python.org/issue?@action=redirect&bpo=31718): Raise [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") instead of [`SystemError`](https://docs.python.org/3/library/exceptions.html#SystemError "SystemError") when methods of uninitialized [`io.IncrementalNewlineDecoder`](https://docs.python.org/3/library/io.html#io.IncrementalNewlineDecoder "io.IncrementalNewlineDecoder") objects are called. Patch by Oren Milman.
  * [bpo-38031](https://bugs.python.org/issue?@action=redirect&bpo=38031): Fix a possible assertion failure in [`io.FileIO`](https://docs.python.org/3/library/io.html#io.FileIO "io.FileIO") when the opener returns an invalid file descriptor.