Title: urllib.parse Module Functions
URL: https://docs.python.org/3/library/urllib.parse.html
Summary: This document covers functions in the urllib.parse module, specifically 'unquote_to_bytes' which replaces '%_xx_' escapes with their byte equivalents, and 'urlencode' which converts mapping objects or sequences into URL query strings.
---

urllib.parse.unquote_to_bytes(_string_)[¶](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.unquote_to_bytes "Link to this definition")
    
Replace `%_xx_`escapes with their single-octet equivalent, and return a[`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") object.
_string_ may be either a [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") or a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") object.
If it is a [`str`](https://docs.python.org/3/library/stdtypes.html#str "str"), unescaped non-ASCII characters in _string_ are encoded into UTF-8 bytes.
Example: `unquote_to_bytes('a%26%EF')` yields `b'a&\xef'`. 

urllib.parse.urlencode(_query_ , _doseq =False_, _safe =''_, _encoding =None_, _errors =None_, _quote_via =quote_plus_)[¶](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode "Link to this definition")
    
Convert a mapping object or a sequence of two-element tuples, which may contain [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") or [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") objects, to a percent-encoded ASCII text string. If the resultant string is to be used as a _data_ for POST operation with the [`urlopen()`](https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen "urllib.request.urlopen") function, then it should be encoded to bytes, otherwise it would result in a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError").
The resulting string is a series of `key=value` pairs separated by `'&'` characters, where both _key_ and _value_ are quoted using the _quote_via_ function. By default, [`quote_plus()`](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote_plus "urllib.parse.quote_plus") is used to quote the values, which means spaces are quoted as a `'+'` character and ‘/’ characters are encoded as `%2F`, which follows the standard for GET requests (`application/x-www-form-urlencoded`). An alternate function that can be passed as _quote_via_ is [`quote()`](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.quote "urllib.parse.quote"), which will encode spaces as `%20` and not encode ‘/’ characters. For maximum control of what is quoted, use `quote` and specify a value for _safe_.
When a sequence of two-element tuples is used as the _query_ argument, the first element of each tuple is a key and the second is a value. The value element in itself can be a sequence and in that case, if the optional parameter _doseq_ evaluates to `True`, individual `key=value` pairs separated by `'&'` are generated for each element of the value sequence for the key. The order of parameters in the encoded string will match the order of parameter tuples in the sequence.
The _safe_ , _encoding_ , and _errors_ parameters are passed down to _quote_via_ (the _encoding_ and _errors_ parameters are only passed when a query element is a [`str`](https://docs.python.org/3/library/stdtypes.html#str "str")).
To reverse this encoding process, [`parse_qs()`](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.parse_qs "urllib.parse.parse_qs") and [`parse_qsl()`](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.parse_qsl "urllib.parse.parse_qsl") are provided in this module to parse query strings into Python data structures.
Refer to [urllib examples](https://docs.python.org/3/library/urllib.request.html#urllib-examples) to find out how the [`urllib.parse.urlencode()`](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode "urllib.parse.urlencode") method can be used for generating the query string of a URL or data for a POST request.
Changed in version 3.2: _query_ supports bytes and string objects.
Changed in version 3.5: Added the _quote_via_ parameter.
See also 

[WHATWG](https://url.spec.whatwg.org/) - URL Living standard
    
Working Group for the URL Standard that defines URLs, domains, IP addresses, the application/x-www-form-urlencoded format, and their API. 

[**RFC 3986**](https://datatracker.ietf.org/doc/html/rfc3986.html) - Uniform Resource Identifiers
    
This is the current standard (STD66). Any changes to urllib.parse module should conform to this. Certain deviations could be observed, which are mostly for backward compatibility purposes and for certain de-facto parsing requirements as commonly observed in major browsers. 

[**RFC 2732**](https://datatracker.ietf.org/doc/html/rfc2732.html) - Format for Literal IPv6 Addresses in URL’s.
    
This specifies the parsing requirements of IPv6 URLs. 

[**RFC 2396**](https://datatracker.ietf.org/doc/html/rfc2396.html) - Uniform Resource Identifiers (URI): Generic Syntax
    
Document describing the generic syntactic requirements for both Uniform Resource Names (URNs) and Uniform Resource Locators (URLs).