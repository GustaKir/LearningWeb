Title: Managing Warnings in Python
URL: https://docs.python.org/3/library/warnings.html
Summary: This section discusses how to configure Python's warning system, including setting warnings to be treated as exceptions and the behavior of warnings filters. It highlights the importance of restoring the warnings filter after using context managers, ensuring consistent test results, and the limitation of this behavior in multi-threaded applications.
---

```

One can also cause all warnings to be exceptions by using `error` instead of `always`. One thing to be aware of is that if a warning has already been raised because of a `once`/`default` rule, then no matter what filters are set the warning will not be seen again unless the warnings registry related to the warning has been cleared.
Once the context manager exits, the warnings filter is restored to its state when the context was entered. This prevents tests from changing the warnings filter in unexpected ways between tests and leading to indeterminate test results. The [`showwarning()`](https://docs.python.org/3/library/warnings.html#warnings.showwarning "warnings.showwarning") function in the module is also restored to its original value. Note: this can only be guaranteed in a single-threaded application. If two or more threads use the [`catch_warnings`](https://docs.python.org/3/library/warnings.html#warnings.catch_warnings "warnings.catch_warnings") context manager at the same time, the behavior is undefined.
When testing multiple operations that raise the same kind of warning, it is important to test them in a manner that confirms each operation is raising a new warning (e.g. set warnings to be raised as exceptions and check the operations raise exceptions, check that the length of the warning list continues to increase after each operation, or else delete the previous entries from the warnings list before each new operation).
## Updating Code For New Versions of Dependencies[¶](https://docs.python.org/3/library/warnings.html#updating-code-for-new-versions-of-dependencies "Link to this heading")
Warning categories that are primarily of interest to Python developers (rather than end users of applications written in Python) are ignored by default.
Notably, this “ignored by default” list includes [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning") (for every module except `__main__`), which means developers should make sure to test their code with typically ignored warnings made visible in order to receive timely notifications of future breaking API changes (whether in the standard library or third party packages).
In the ideal case, the code will have a suitable test suite, and the test runner will take care of implicitly enabling all warnings when running tests (the test runner provided by the [`unittest`](https://docs.python.org/3/library/unittest.html#module-unittest "unittest: Unit testing framework for Python.") module does this).
In less ideal cases, applications can be checked for use of deprecated interfaces by passing [`-Wd`](https://docs.python.org/3/using/cmdline.html#cmdoption-W) to the Python interpreter (this is shorthand for `-W default`) or setting `PYTHONWARNINGS=default` in the environment. This enables default handling for all warnings, including those that are ignored by default. To change what action is taken for encountered warnings you can change what argument is passed to [`-W`](https://docs.python.org/3/using/cmdline.html#cmdoption-W) (e.g. `-W error`). See the [`-W`](https://docs.python.org/3/using/cmdline.html#cmdoption-W) flag for more details on what is possible.
## Available Functions[¶](https://docs.python.org/3/library/warnings.html#available-functions "Link to this heading") 

warnings.warn(_message_ , _category =None_, _stacklevel =1_, _source =None_, _*_ , _skip_file_prefixes =()_)[¶](https://docs.python.org/3/library/warnings.html#warnings.warn "Link to this definition")
    
Issue a warning, or maybe ignore it or raise an exception. The _category_ argument, if given, must be a [warning category class](https://docs.python.org/3/library/warnings.html#warning-categories); it defaults to [`UserWarning`](https://docs.python.org/3/library/exceptions.html#UserWarning "UserWarning"). Alternatively, _message_ can be a [`Warning`](https://docs.python.org/3/library/exceptions.html#Warning "Warning") instance, in which case _category_ will be ignored and `message.__class__` will be used. In this case, the message text will be `str(message)`. This function raises an exception if the particular warning issued is changed into an error by the [warnings filter](https://docs.python.org/3/library/warnings.html#warning-filter). The _stacklevel_ argument can be used by wrapper functions written in Python, like this:
```
defdeprecated_api(message):
  warnings.warn(message, DeprecationWarning, stacklevel=2)