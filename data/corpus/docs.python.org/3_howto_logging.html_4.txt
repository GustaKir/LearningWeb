Title: Basic Tutorial on Logging in Python
URL: https://docs.python.org/3/howto/logging.html
Summary: This section discusses the format of the _datefmt_ argument in logging, similar to time.strftime(). It concludes the basic logging tutorial, encouraging readers to explore advanced topics in the logging package while offering support options for questions.
---

```

The format of the _datefmt_ argument is the same as supported by [`time.strftime()`](https://docs.python.org/3/library/time.html#time.strftime "time.strftime").
### Next Steps[¶](https://docs.python.org/3/howto/logging.html#next-steps "Link to this heading")
That concludes the basic tutorial. It should be enough to get you up and running with logging. There’s a lot more that the logging package offers, but to get the best out of it, you’ll need to invest a little more of your time in reading the following sections. If you’re ready for that, grab some of your favourite beverage and carry on.
If your logging needs are simple, then use the above examples to incorporate logging into your own scripts, and if you run into problems or don’t understand something, please post a question on the comp.lang.python Usenet group (available at <https://groups.google.com/g/comp.lang.python>) and you should receive help before too long.
Still here? You can carry on reading the next few sections, which provide a slightly more advanced/in-depth tutorial than the basic one above. After that, you can take a look at the [Logging Cookbook](https://docs.python.org/3/howto/logging-cookbook.html#logging-cookbook).
## Advanced Logging Tutorial[¶](https://docs.python.org/3/howto/logging.html#advanced-logging-tutorial "Link to this heading")
The logging library takes a modular approach and offers several categories of components: loggers, handlers, filters, and formatters.
  * Loggers expose the interface that application code directly uses.
  * Handlers send the log records (created by loggers) to the appropriate destination.
  * Filters provide a finer grained facility for determining which log records to output.
  * Formatters specify the layout of log records in the final output.


Log event information is passed between loggers, handlers, filters and formatters in a [`LogRecord`](https://docs.python.org/3/library/logging.html#logging.LogRecord "logging.LogRecord") instance.
Logging is performed by calling methods on instances of the [`Logger`](https://docs.python.org/3/library/logging.html#logging.Logger "logging.Logger") class (hereafter called _loggers_). Each instance has a name, and they are conceptually arranged in a namespace hierarchy using dots (periods) as separators. For example, a logger named ‘scan’ is the parent of loggers ‘scan.text’, ‘scan.html’ and ‘scan.pdf’. Logger names can be anything you want, and indicate the area of an application in which a logged message originates.
A good convention to use when naming loggers is to use a module-level logger, in each module which uses logging, named as follows:
```
logger = logging.getLogger(__name__)