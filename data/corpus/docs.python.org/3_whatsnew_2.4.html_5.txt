Title: Subprocess Module in Python
URL: https://docs.python.org/3/whatsnew/2.4.html
Summary: This section describes the usage of the subprocess module in Python, detailing the _args_, _stdin_, _stdout_, and _stderr_ parameters for executing subprocesses. It explains options like _close_fds_, _cwd_, _env_, and _preexec_fn_ for customizing subprocess behavior.
---

```

_args_ is commonly a sequence of strings that will be the arguments to the program executed as the subprocess. (If the _shell_ argument is true, _args_ can be a string which will then be passed on to the shell for interpretation, just as [`os.system()`](https://docs.python.org/3/library/os.html#os.system "os.system") does.)
_stdin_ , _stdout_ , and _stderr_ specify what the subprocess’s input, output, and error streams will be. You can provide a file object or a file descriptor, or you can use the constant `subprocess.PIPE` to create a pipe between the subprocess and the parent.
The constructor has a number of handy options:
  * _close_fds_ requests that all file descriptors be closed before running the subprocess.
  * _cwd_ specifies the working directory in which the subprocess will be executed (defaulting to whatever the parent’s working directory is).
  * _env_ is a dictionary specifying environment variables.
  * _preexec_fn_ is a function that gets called before the child is started.
  * _universal_newlines_ opens the child’s input and output using Python’s [universal newlines](https://docs.python.org/3/glossary.html#term-universal-newlines) feature.


Once you’ve created the `Popen` instance, you can call its `wait()` method to pause until the subprocess has exited, `poll()` to check if it’s exited without pausing, or `communicate(data)` to send the string _data_ to the subprocess’s standard input. `communicate(data)` then reads any data that the subprocess has sent to its standard output or standard error, returning a tuple `(stdout_data, stderr_data)`.
`call()` is a shortcut that passes its arguments along to the `Popen` constructor, waits for the command to complete, and returns the status code of the subprocess. It can serve as a safer analog to [`os.system()`](https://docs.python.org/3/library/os.html#os.system "os.system"):
```
sts = subprocess.call(['dpkg', '-i', '/tmp/new-package.deb'])
if sts == 0:
  # Success
  ...
else:
  # dpkg returned an error
  ...

```

The command is invoked without use of the shell. If you really do want to use the shell, you can add `shell=True` as a keyword argument and provide a string instead of a sequence:
```
sts = subprocess.call('dpkg -i /tmp/new-package.deb', shell=True)