Title: Subprocess Module - Popen Overview
URL: https://docs.python.org/3/library/subprocess.html
Summary: The Popen function and related methods in the subprocess module raise an auditing event with specified arguments. Notable changes include context manager support added in version 3.2, a ResourceWarning for running child processes from version 3.6, and performance enhancements using os.posix_spawn() starting in version 3.8, particularly improving behavior in certain emulation environments.
---

```

Popen and the other functions in this module that use it raise an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `subprocess.Popen` with arguments `executable`, `args`, `cwd`, and `env`. The value for `args` may be a single string or a list of strings, depending on platform.
Changed in version 3.2: Added context manager support.
Changed in version 3.6: Popen destructor now emits a [`ResourceWarning`](https://docs.python.org/3/library/exceptions.html#ResourceWarning "ResourceWarning") warning if the child process is still running.
Changed in version 3.8: Popen can use [`os.posix_spawn()`](https://docs.python.org/3/library/os.html#os.posix_spawn "os.posix_spawn") in some cases for better performance. On Windows Subsystem for Linux and QEMU User Emulation, Popen constructor using [`os.posix_spawn()`](https://docs.python.org/3/library/os.html#os.posix_spawn "os.posix_spawn") no longer raise an exception on errors like missing program, but the child process fails with a non-zero [`returncode`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen.returncode "subprocess.Popen.returncode").
### Exceptions[¶](https://docs.python.org/3/library/subprocess.html#exceptions "Link to this heading")
Exceptions raised in the child process, before the new program has started to execute, will be re-raised in the parent.
The most common exception raised is [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError"). This occurs, for example, when trying to execute a non-existent file. Applications should prepare for [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") exceptions. Note that, when `shell=True`, [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") will be raised by the child only if the selected shell itself was not found. To determine if the shell failed to find the requested application, it is necessary to check the return code or output from the subprocess.
A [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") will be raised if [`Popen`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen "subprocess.Popen") is called with invalid arguments.
[`check_call()`](https://docs.python.org/3/library/subprocess.html#subprocess.check_call "subprocess.check_call") and [`check_output()`](https://docs.python.org/3/library/subprocess.html#subprocess.check_output "subprocess.check_output") will raise [`CalledProcessError`](https://docs.python.org/3/library/subprocess.html#subprocess.CalledProcessError "subprocess.CalledProcessError") if the called process returns a non-zero return code.
All of the functions and methods that accept a _timeout_ parameter, such as [`run()`](https://docs.python.org/3/library/subprocess.html#subprocess.run "subprocess.run") and [`Popen.communicate()`](https://docs.python.org/3/library/subprocess.html#subprocess.Popen.communicate "subprocess.Popen.communicate") will raise [`TimeoutExpired`](https://docs.python.org/3/library/subprocess.html#subprocess.TimeoutExpired "subprocess.TimeoutExpired") if the timeout expires before the process exits.
Exceptions defined in this module all inherit from [`SubprocessError`](https://docs.python.org/3/library/subprocess.html#subprocess.SubprocessError "subprocess.SubprocessError").
Added in version 3.3: The [`SubprocessError`](https://docs.python.org/3/library/subprocess.html#subprocess.SubprocessError "subprocess.SubprocessError") base class was added.
## Security Considerations[¶](https://docs.python.org/3/library/subprocess.html#security-considerations "Link to this heading")
Unlike some other popen functions, this library will not implicitly choose to call a system shell. This means that all characters, including shell metacharacters, can safely be passed to child processes. If the shell is invoked explicitly, via `shell=True`, it is the application’s responsibility to ensure that all whitespace and metacharacters are quoted appropriately to avoid [shell injection](https://en.wikipedia.org/wiki/Shell_injection#Shell_injection) vulnerabilities. On [some platforms](https://docs.python.org/3/library/shlex.html#shlex-quote-warning), it is possible to use [`shlex.quote()`](https://docs.python.org/3/library/shlex.html#shlex.quote "shlex.quote") for this escaping.
On Windows, batch files (`*.bat` or `*.cmd`) may be launched by the operating system in a system shell regardless of the arguments passed to this library. This could result in arguments being parsed according to shell rules, but without any escaping added by Python. If you are intentionally launching a batch file with arguments from untrusted sources, consider passing `shell=True` to allow Python to escape special characters. See [gh-114539](https://github.com/python/cpython/issues/114539) for additional discussion.
## Popen Objects[¶](https://docs.python.org/3/library/subprocess.html#popen-objects "Link to this heading")
Instances of t