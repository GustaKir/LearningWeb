Title: Understanding Test Components in unittest
URL: https://docs.python.org/3/library/unittest.html
Summary: This section explains key components of the unittest framework: a test fixture for preparation and cleanup, a test case for individual unit testing, a test suite for aggregating tests, and a test runner for executing tests and delivering outcomes.
---

test fixture
    
A _test fixture_ represents the preparation needed to perform one or more tests, and any associated cleanup actions. This may involve, for example, creating temporary or proxy databases, directories, or starting a server process. 

test case
    
A _test case_ is the individual unit of testing. It checks for a specific response to a particular set of inputs. [`unittest`](https://docs.python.org/3/library/unittest.html#module-unittest "unittest: Unit testing framework for Python.") provides a base class, [`TestCase`](https://docs.python.org/3/library/unittest.html#unittest.TestCase "unittest.TestCase"), which may be used to create new test cases. 

test suite
    
A _test suite_ is a collection of test cases, test suites, or both. It is used to aggregate tests that should be executed together. 

test runner
    
A _test runner_ is a component which orchestrates the execution of tests and provides the outcome to the user. The runner may use a graphical interface, a textual interface, or return a special value to indicate the results of executing the tests.
See also 

Module [`doctest`](https://docs.python.org/3/library/doctest.html#module-doctest "doctest: Test pieces of code within docstrings.")
    
Another test-support module with a very different flavor. 

[Simple Smalltalk Testing: With Patterns](https://web.archive.org/web/20150315073817/http://www.xprogramming.com/testfram.htm)
    
Kent Beck’s original paper on testing frameworks using the pattern shared by [`unittest`](https://docs.python.org/3/library/unittest.html#module-unittest "unittest: Unit testing framework for Python."). 

[pytest](https://docs.pytest.org/)
    
Third-party unittest framework with a lighter-weight syntax for writing tests. For example, `assert func(10) == 42`. 

[The Python Testing Tools Taxonomy](https://wiki.python.org/moin/PythonTestingToolsTaxonomy)
    
An extensive list of Python testing tools including functional testing frameworks and mock object libraries. 

[Testing in Python Mailing List](http://lists.idyll.org/listinfo/testing-in-python)
    
A special-interest-group for discussion of testing, and testing tools, in Python.
The script `Tools/unittestgui/unittestgui.py` in the Python source distribution is a GUI tool for test discovery and execution. This is intended largely for ease of use for those new to unit testing. For production environments it is recommended that tests be driven by a continuous integration system such as [Buildbot](https://buildbot.net/), [Jenkins](https://www.jenkins.io/), [GitHub Actions](https://github.com/features/actions), or [AppVeyor](https://www.appveyor.com/).
## Basic example[¶](https://docs.python.org/3/library/unittest.html#basic-example "Link to this heading")
The [`unittest`](https://docs.python.org/3/library/unittest.html#module-unittest "unittest: Unit testing framework for Python.") module provides a rich set of tools for constructing and running tests. This section demonstrates that a small subset of the tools suffice to meet the needs of most users.
Here is a short script to test three string methods:
```
importunittest
classTestStringMethods(unittest.TestCase):
  deftest_upper(self):
    self.assertEqual('foo'.upper(), 'FOO')
  deftest_isupper(self):
    self.assertTrue('FOO'.isupper())
    self.assertFalse('Foo'.isupper())
  deftest_split(self):
    s = 'hello world'
    self.assertEqual(s.split(), ['hello', 'world'])
    # check that s.split fails when the separator is not a string
    with self.assertRaises(TypeError):
      s.split(2)
if __name__ == '__main__':
  unittest.main()