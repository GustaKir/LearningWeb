Title: Using re.compile for Regular Expressions in Python
URL: https://docs.python.org/3/library/re.html
Summary: This section explains how to use the `re.compile()` function in Python to compile regular expressions for reuse, enhancing efficiency in programs that use the same expression multiple times. It also mentions that compiled patterns are cached and notes the purpose of the `re.search()` function for finding the first match of a pattern within a string.
---

```
prog = re.compile(pattern)
result = prog.match(string)

```

is equivalent to
```
result = re.match(pattern, string)

```

but using [`re.compile()`](https://docs.python.org/3/library/re.html#re.compile "re.compile") and saving the resulting regular expression object for reuse is more efficient when the expression will be used several times in a single program.
Note
The compiled versions of the most recent patterns passed to [`re.compile()`](https://docs.python.org/3/library/re.html#re.compile "re.compile") and the module-level matching functions are cached, so programs that use only a few regular expressions at a time needn’t worry about compiling regular expressions. 

re.search(_pattern_ , _string_ , _flags =0_)[¶](https://docs.python.org/3/library/re.html#re.search "Link to this definition")
    
Scan through _string_ looking for the first location where the regular expression _pattern_ produces a match, and return a corresponding [`Match`](https://docs.python.org/3/library/re.html#re.Match "re.Match"). Return `None` if no position in the string matches the pattern; note that this is different from finding a zero-length match at some point in the string.
The expression’s behaviour can be modified by specifying a _flags_ value. Values can be any of the [flags](https://docs.python.org/3/library/re.html#flags) variables, combined using bitwise OR (the `|` operator). 

re.match(_pattern_ , _string_ , _flags =0_)[¶](https://docs.python.org/3/library/re.html#re.match "Link to this definition")
    
If zero or more characters at the beginning of _string_ match the regular expression _pattern_ , return a corresponding [`Match`](https://docs.python.org/3/library/re.html#re.Match "re.Match"). Return `None` if the string does not match the pattern; note that this is different from a zero-length match.
Note that even in [`MULTILINE`](https://docs.python.org/3/library/re.html#re.MULTILINE "re.MULTILINE") mode, [`re.match()`](https://docs.python.org/3/library/re.html#re.match "re.match") will only match at the beginning of the string and not at the beginning of each line.
If you want to locate a match anywhere in _string_ , use [`search()`](https://docs.python.org/3/library/re.html#re.search "re.search") instead (see also [search() vs. match()](https://docs.python.org/3/library/re.html#search-vs-match)).
The expression’s behaviour can be modified by specifying a _flags_ value. Values can be any of the [flags](https://docs.python.org/3/library/re.html#flags) variables, combined using bitwise OR (the `|` operator). 

re.fullmatch(_pattern_ , _string_ , _flags =0_)[¶](https://docs.python.org/3/library/re.html#re.fullmatch "Link to this definition")
    
If the whole _string_ matches the regular expression _pattern_ , return a corresponding [`Match`](https://docs.python.org/3/library/re.html#re.Match "re.Match"). Return `None` if the string does not match the pattern; note that this is different from a zero-length match.
The expression’s behaviour can be modified by specifying a _flags_ value. Values can be any of the [flags](https://docs.python.org/3/library/re.html#flags) variables, combined using bitwise OR (the `|` operator).
Added in version 3.4. 

re.split(_pattern_ , _string_ , _maxsplit =0_, _flags =0_)[¶](https://docs.python.org/3/library/re.html#re.split "Link to this definition")
    
Split _string_ by the occurrences of _pattern_. If capturing parentheses are used in _pattern_ , then the text of all groups in the pattern are also returned as part of the resulting list. If _maxsplit_ is nonzero, at most _maxsplit_ splits occur, and the remainder of the string is returned as the final element of the list.
>>>```
>>> re.split(r'\W+', 'Words, words, words.')
['Words', 'words', 'words', '']
>>> re.split(r'(\W+)', 'Words, words, words.')
['Words', ', ', 'words', ', ', 'words', '.', '']
>>> re.split(r'\W+', 'Words, words, words.', maxsplit=1)
['Words', 'words, words.']
>>> re.split('[a-f]+', '0a3B9', flags=re.IGNORECASE)
['0', '3', '9']

```

If there are capturing groups in the separator and it matches at the start of the string, the result will start with an empty string. The same holds for the end of the string:
>>>```
>>> re.split(r'(\W+)', '...words, words...')
['', '...', 'words', ', ', 'words', '...', '']

```

That way, separator components are always found at the same relative indices within the result list.
Empty matches for the pattern split the string only when not adjacent to a previous empty match.
>>>```
>>> re.split(r'\b', 'Words, words, words.')
['', 'Words', ', ', 'words', ', ', 'words', '.']
>>> re.split(r'\W*', '...words...')
['', '', 'w', 'o', 'r', 'd', 's', '', '']
>>> re.split(r'(\W*)', '...words...')
['', '...', '', '', 'w', '', 'o', '', 'r', '', 'd', '', 's', '...', '', '', '']