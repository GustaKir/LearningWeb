Title: HTTPPasswordMgr.find_user_password Method
URL: https://docs.python.org/3/library/urllib.request.html
Summary: The `find_user_password` method retrieves the user/password for a specified realm and URI, returning `(None, None)` if no match is found. For instances of `HTTPPasswordMgrWithDefaultRealm`, it checks for the realm `None` if no user/password matches the provided realm.
---

HTTPPasswordMgr.find_user_password(_realm_ , _authuri_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPPasswordMgr.find_user_password "Link to this definition")
    
Get user/password for given realm and URI, if any. This method will return `(None, None)` if there is no matching user/password.
For [`HTTPPasswordMgrWithDefaultRealm`](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPPasswordMgrWithDefaultRealm "urllib.request.HTTPPasswordMgrWithDefaultRealm") objects, the realm `None` will be searched if the given _realm_ has no matching user/password.
## HTTPPasswordMgrWithPriorAuth Objects[¶](https://docs.python.org/3/library/urllib.request.html#httppasswordmgrwithpriorauth-objects "Link to this heading")
This password manager extends [`HTTPPasswordMgrWithDefaultRealm`](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPPasswordMgrWithDefaultRealm "urllib.request.HTTPPasswordMgrWithDefaultRealm") to support tracking URIs for which authentication credentials should always be sent. 

HTTPPasswordMgrWithPriorAuth.add_password(_realm_ , _uri_ , _user_ , _passwd_ , _is_authenticated =False_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPPasswordMgrWithPriorAuth.add_password "Link to this definition")
    
_realm_ , _uri_ , _user_ , _passwd_ are as for [`HTTPPasswordMgr.add_password()`](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPPasswordMgr.add_password "urllib.request.HTTPPasswordMgr.add_password"). _is_authenticated_ sets the initial value of the `is_authenticated` flag for the given URI or list of URIs. If _is_authenticated_ is specified as `True`, _realm_ is ignored. 

HTTPPasswordMgrWithPriorAuth.find_user_password(_realm_ , _authuri_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPPasswordMgrWithPriorAuth.find_user_password "Link to this definition")
    
Same as for [`HTTPPasswordMgrWithDefaultRealm`](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPPasswordMgrWithDefaultRealm "urllib.request.HTTPPasswordMgrWithDefaultRealm") objects 

HTTPPasswordMgrWithPriorAuth.update_authenticated(_self_ , _uri_ , _is_authenticated =False_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPPasswordMgrWithPriorAuth.update_authenticated "Link to this definition")
    
Update the `is_authenticated` flag for the given _uri_ or list of URIs. 

HTTPPasswordMgrWithPriorAuth.is_authenticated(_self_ , _authuri_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPPasswordMgrWithPriorAuth.is_authenticated "Link to this definition")
    
Returns the current state of the `is_authenticated` flag for the given URI.
## AbstractBasicAuthHandler Objects[¶](https://docs.python.org/3/library/urllib.request.html#abstractbasicauthhandler-objects "Link to this heading") 

AbstractBasicAuthHandler.http_error_auth_reqed(_authreq_ , _host_ , _req_ , _headers_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.AbstractBasicAuthHandler.http_error_auth_reqed "Link to this definition")
    
Handle an authentication request by getting a user/password pair, and re-trying the request. _authreq_ should be the name of the header where the information about the realm is included in the request, _host_ specifies the URL and path to authenticate for, _req_ should be the (failed) [`Request`](https://docs.python.org/3/library/urllib.request.html#urllib.request.Request "urllib.request.Request") object, and _headers_ should be the error headers.
_host_ is either an authority (e.g. `"python.org"`) or a URL containing an authority component (e.g. `"http://python.org/"`). In either case, the authority must not contain a userinfo component (so, `"python.org"` and `"python.org:80"` are fine, `"joe:password@python.org"` is not).
## HTTPBasicAuthHandler Objects[¶](https://docs.python.org/3/library/urllib.request.html#httpbasicauthhandler-objects "Link to this heading") 

HTTPBasicAuthHandler.http_error_401(_req_ , _fp_ , _code_ , _msg_ , _hdrs_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.HTTPBasicAuthHandler.http_error_401 "Link to this definition")
    
Retry the request with authentication information, if available.
## ProxyBasicAuthHandler Objects[¶](https://docs.python.org/3/library/urllib.request.html#proxybasicauthhandler-objects "Link to this heading") 

ProxyBasicAuthHandler.http_error_407(_req_ , _fp_ , _code_ , _msg_ , _hdrs_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.ProxyBasicAuthHandler.http_error_407 "Link to this definition")
    
Retry the request with authentication information, if available.
## AbstractDigestAuthHandler Objects[¶](https://docs.python.org/3/library/urllib.request.html#abstractdigestauthhandler-objects "Link to this heading")