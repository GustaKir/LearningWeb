Title: C API Enhancements
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section outlines several improvements to the C API, including fixes to redundant declarations, enhancements to format unit support in nested tuples, the addition of the `Py_HashPointer()` function for hashing pointers, and changes to the `_keywords_` parameter in `PyArg_ParseTupleAndKeywords()`.
---

### C API[¶](https://docs.python.org/3/whatsnew/changelog.html#id120 "Link to this heading")
  * [gh-106560](https://github.com/python/cpython/issues/106560): Fix redundant declarations in the public C API. Declare PyBool_Type, PyLong_Type and PySys_Audit() only once. Patch by Victor Stinner.
  * [gh-112438](https://github.com/python/cpython/issues/112438): Fix support of format units “es”, “et”, “es#”, and “et#” in nested tuples in [`PyArg_ParseTuple()`](https://docs.python.org/3/c-api/arg.html#c.PyArg_ParseTuple "PyArg_ParseTuple")-like functions.
  * [gh-111545](https://github.com/python/cpython/issues/111545): Add [`Py_HashPointer()`](https://docs.python.org/3/c-api/hash.html#c.Py_HashPointer "Py_HashPointer") function to hash a pointer. Patch by Victor Stinner.
  * [gh-65210](https://github.com/python/cpython/issues/65210): Change the declaration of the _keywords_ parameter of [`PyArg_ParseTupleAndKeywords()`](https://docs.python.org/3/c-api/arg.html#c.PyArg_ParseTupleAndKeywords "PyArg_ParseTupleAndKeywords") and [`PyArg_VaParseTupleAndKeywords()`](https://docs.python.org/3/c-api/arg.html#c.PyArg_VaParseTupleAndKeywords "PyArg_VaParseTupleAndKeywords") for better compatibility with C++.


## Python 3.13.0 alpha 2[¶](https://docs.python.org/3/whatsnew/changelog.html#python-3-13-0-alpha-2 "Link to this heading")
_Release date: 2023-11-22_
### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id121 "Link to this heading")
  * [gh-112243](https://github.com/python/cpython/issues/112243): Don’t include comments in f-string debug expressions. Patch by Pablo Galindo
  * [gh-112287](https://github.com/python/cpython/issues/112287): Slightly optimize the Tier 2 (uop) interpreter by only loading `oparg` and `operand` when needed. Also double the trace size limit again, to 512 this time.
  * [gh-112266](https://github.com/python/cpython/issues/112266): Change docstrings of [`__dict__`](https://docs.python.org/3/reference/datamodel.html#object.__dict__ "object.__dict__") and `__weakref__`.
  * [gh-111807](https://github.com/python/cpython/issues/111807): Lower the max parser stack depth to 1000 under WASI debug builds.
  * [gh-111798](https://github.com/python/cpython/issues/111798): When Python is built in debug mode, set the C recursion limit to 500 instead of 1500. A debug build is likely built with low optimization level which implies higher stack memory usage than a release build. Patch by Victor Stinner.
  * [gh-106529](https://github.com/python/cpython/issues/106529): Enable translating unspecialized `FOR_ITER` to Tier 2.
  * [gh-111916](https://github.com/python/cpython/issues/111916): Make hashlib related modules thread-safe without the GIL
  * [gh-81137](https://github.com/python/cpython/issues/81137): Deprecate assignment to a function’s `__code__` field when the new code object is of a mismatched type (e.g., from a generator to a plain function).
  * [gh-79932](https://github.com/python/cpython/issues/79932): Raise exception if [`frame.clear()`](https://docs.python.org/3/reference/datamodel.html#frame.clear "frame.clear") is called on a suspended frame.
  * [gh-81925](https://github.com/python/cpython/issues/81925): Implement native thread ids for GNU KFreeBSD.
  * [gh-111843](https://github.com/python/cpython/issues/111843): Use exponential backoff to reduce the number of failed tier 2 optimization attempts by over 99%.
  * [gh-110829](https://github.com/python/cpython/issues/110829): Joining a thread now ensures the underlying OS thread has exited. This is required for safer fork() in multi-threaded processes.
  * [gh-109369](https://github.com/python/cpython/issues/109369): Make sure that tier 2 traces are de-optimized if the code is instrumented
  * [gh-111772](https://github.com/python/cpython/issues/111772): Specialize slot loads and stores for _Py_T_OBJECT as well as Py_T_OBJECT_EX
  * [gh-111666](https://github.com/python/cpython/issues/111666): Speed up [`BaseExceptionGroup.derive()`](https://docs.python.org/3/library/exceptions.html#BaseExceptionGroup.derive "BaseExceptionGroup.derive"), [`BaseExceptionGroup.subgroup()`](https://docs.python.org/3/library/exceptions.html#BaseExceptionGroup.subgroup "BaseExceptionGroup.subgroup"), and [`BaseExceptionGroup.split()`](https://docs.python.org/3/library/exceptions.html#BaseExceptionGroup.split "BaseExceptionGroup.split") by changing how they parse passed arguments.
  * [gh-111654](https://github.com/python/cpython/issues/111654): Fix runtime crash when some error happens in opcode `LOAD_FROM_DICT_OR_DEREF`.
  * [gh-111623](https://github.com/python/cpython/issues/111623): Add support for sharing tuples between interpreters using the cross-interpreter API. Patch by Anthony Shaw.
  * [gh-111354](https://github.com/python/cpython/issues/111354): The oparg of [`YIELD_VALUE`](https://docs.python.org/3/library/dis.html#opcode-YIELD_VALUE) is now `1` if the instruction is part of a yield-from or await, and `0` otherwise.
The SUSPEND