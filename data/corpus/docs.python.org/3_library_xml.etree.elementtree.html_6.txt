Title: Configuration Options for XML Serialization in ElementTree
URL: https://docs.python.org/3/library/xml.etree.elementtree.html
Summary: This section details configuration options for the XML serialization process in ElementTree, including settings for comments, whitespace stripping, namespace prefix rewriting, and exclusive serialization of specific attributes and tags. Introduced in version 3.8.
---

```

The configuration _options_ are as follows:
  * _with_comments_ : set to true to include comments (default: false)
  * 

_strip_text_ : set to true to strip whitespace before and after text content
    
(default: false)
  * 

_rewrite_prefixes_ : set to true to replace namespace prefixes by “n{number}”
    
(default: false)
  * 

_qname_aware_tags_ : a set of qname aware tag names in which prefixes
    
should be replaced in text content (default: empty)
  * 

_qname_aware_attrs_ : a set of qname aware attribute names in which prefixes
    
should be replaced in text content (default: empty)
  * _exclude_attrs_ : a set of attribute names that should not be serialised
  * _exclude_tags_ : a set of tag names that should not be serialised


In the option list above, “a set” refers to any collection or iterable of strings, no ordering is expected.
Added in version 3.8. 

xml.etree.ElementTree.Comment(_text =None_)[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Comment "Link to this definition")
    
Comment element factory. This factory function creates a special element that will be serialized as an XML comment by the standard serializer. The comment string can be either a bytestring or a Unicode string. _text_ is a string containing the comment string. Returns an element instance representing a comment.
Note that [`XMLParser`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLParser "xml.etree.ElementTree.XMLParser") skips over comments in the input instead of creating comment objects for them. An [`ElementTree`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.ElementTree "xml.etree.ElementTree.ElementTree") will only contain comment nodes if they have been inserted into to the tree using one of the [`Element`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element "xml.etree.ElementTree.Element") methods. 

xml.etree.ElementTree.dump(_elem_)[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.dump "Link to this definition")
    
Writes an element tree or element structure to sys.stdout. This function should be used for debugging only.
The exact output format is implementation dependent. In this version, it’s written as an ordinary XML file.
_elem_ is an element tree or an individual element.
Changed in version 3.8: The [`dump()`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.dump "xml.etree.ElementTree.dump") function now preserves the attribute order specified by the user. 

xml.etree.ElementTree.fromstring(_text_ , _parser =None_)[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.fromstring "Link to this definition")
    
Parses an XML section from a string constant. Same as [`XML()`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XML "xml.etree.ElementTree.XML"). _text_ is a string containing XML data. _parser_ is an optional parser instance. If not given, the standard [`XMLParser`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLParser "xml.etree.ElementTree.XMLParser") parser is used. Returns an [`Element`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element "xml.etree.ElementTree.Element") instance. 

xml.etree.ElementTree.fromstringlist(_sequence_ , _parser =None_)[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.fromstringlist "Link to this definition")
    
Parses an XML document from a sequence of string fragments. _sequence_ is a list or other sequence containing XML data fragments. _parser_ is an optional parser instance. If not given, the standard [`XMLParser`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.XMLParser "xml.etree.ElementTree.XMLParser") parser is used. Returns an [`Element`](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.Element "xml.etree.ElementTree.Element") instance.
Added in version 3.2. 

xml.etree.ElementTree.indent(_tree_ , _space =' '_, _level =0_)[¶](https://docs.python.org/3/library/xml.etree.elementtree.html#xml.etree.ElementTree.indent "Link to this definition")
    
Appends whitespace to the subtree to indent the tree visually. This can be used to generate pretty-printed XML output. _tree_ can be an Element or ElementTree. _space_ is the whitespace string that will be inserted for each indentation level, two space characters by default. For indenting partial subtrees inside of an already indented tree, pass the initial indentation level as _level_.
Added in version 3.9.