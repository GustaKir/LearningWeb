Title: Asynchronous Iterator Definition
URL: https://docs.python.org/3/glossary.html
Summary: An asynchronous iterator is an object that implements the `__aiter__()` and `__anext__()` methods, where `__anext__()` must return an awaitable object. The `async for` statement is used to handle the awaitables from the `__anext__()` method until a `StopAsyncIteration` exception is raised. This feature was introduced by PEP 492.
---

asynchronous iterator[¶](https://docs.python.org/3/glossary.html#term-asynchronous-iterator "Link to this term")
    
An object that implements the [`__aiter__()`](https://docs.python.org/3/reference/datamodel.html#object.__aiter__ "object.__aiter__") and [`__anext__()`](https://docs.python.org/3/reference/datamodel.html#object.__anext__ "object.__anext__") methods. [`__anext__()`](https://docs.python.org/3/reference/datamodel.html#object.__anext__ "object.__anext__") must return an [awaitable](https://docs.python.org/3/glossary.html#term-awaitable) object. [`async for`](https://docs.python.org/3/reference/compound_stmts.html#async-for) resolves the awaitables returned by an asynchronous iterator’s [`__anext__()`](https://docs.python.org/3/reference/datamodel.html#object.__anext__ "object.__anext__") method until it raises a [`StopAsyncIteration`](https://docs.python.org/3/library/exceptions.html#StopAsyncIteration "StopAsyncIteration") exception. Introduced by [**PEP 492**](https://peps.python.org/pep-0492/). 

attribute[¶](https://docs.python.org/3/glossary.html#term-attribute "Link to this term")
    
A value associated with an object which is usually referenced by name using dotted expressions. For example, if an object _o_ has an attribute _a_ it would be referenced as _o.a_.
It is possible to give an object an attribute whose name is not an identifier as defined by [Identifiers and keywords](https://docs.python.org/3/reference/lexical_analysis.html#identifiers), for example using [`setattr()`](https://docs.python.org/3/library/functions.html#setattr "setattr"), if the object allows it. Such an attribute will not be accessible using a dotted expression, and would instead need to be retrieved with [`getattr()`](https://docs.python.org/3/library/functions.html#getattr "getattr"). 

awaitable[¶](https://docs.python.org/3/glossary.html#term-awaitable "Link to this term")
    
An object that can be used in an [`await`](https://docs.python.org/3/reference/expressions.html#await) expression. Can be a [coroutine](https://docs.python.org/3/glossary.html#term-coroutine) or an object with an [`__await__()`](https://docs.python.org/3/reference/datamodel.html#object.__await__ "object.__await__") method. See also [**PEP 492**](https://peps.python.org/pep-0492/). 

BDFL[¶](https://docs.python.org/3/glossary.html#term-BDFL "Link to this term")
    
Benevolent Dictator For Life, a.k.a. [Guido van Rossum](https://gvanrossum.github.io/), Python’s creator. 

binary file[¶](https://docs.python.org/3/glossary.html#term-binary-file "Link to this term")
    
A [file object](https://docs.python.org/3/glossary.html#term-file-object) able to read and write [bytes-like objects](https://docs.python.org/3/glossary.html#term-bytes-like-object). Examples of binary files are files opened in binary mode (`'rb'`, `'wb'` or `'rb+'`), [`sys.stdin.buffer`](https://docs.python.org/3/library/sys.html#sys.stdin "sys.stdin"), [`sys.stdout.buffer`](https://docs.python.org/3/library/sys.html#sys.stdout "sys.stdout"), and instances of [`io.BytesIO`](https://docs.python.org/3/library/io.html#io.BytesIO "io.BytesIO") and [`gzip.GzipFile`](https://docs.python.org/3/library/gzip.html#gzip.GzipFile "gzip.GzipFile").
See also [text file](https://docs.python.org/3/glossary.html#term-text-file) for a file object able to read and write [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") objects. 

borrowed reference[¶](https://docs.python.org/3/glossary.html#term-borrowed-reference "Link to this term")
    
In Python’s C API, a borrowed reference is a reference to an object, where the code using the object does not own the reference. It becomes a dangling pointer if the object is destroyed. For example, a garbage collection can remove the last [strong reference](https://docs.python.org/3/glossary.html#term-strong-reference) to the object and so destroy it.
Calling [`Py_INCREF()`](https://docs.python.org/3/c-api/refcounting.html#c.Py_INCREF "Py_INCREF") on the [borrowed reference](https://docs.python.org/3/glossary.html#term-borrowed-reference) is recommended to convert it to a [strong reference](https://docs.python.org/3/glossary.html#term-strong-reference) in-place, except when the object cannot be destroyed before the last usage of the borrowed reference. The [`Py_NewRef()`](https://docs.python.org/3/c-api/refcounting.html#c.Py_NewRef "Py_NewRef") function can be used to create a new [strong reference](https://docs.python.org/3/glossary.html#term-strong-reference).