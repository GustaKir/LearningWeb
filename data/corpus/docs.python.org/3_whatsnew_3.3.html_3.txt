Title: Python 3.3 Release Notes: User-Facing Changes
URL: https://docs.python.org/3/whatsnew/3.3.html
Summary: This document details the user-facing changes in Python 3.3, including the introduction of PEP 405, which outlines the creation of virtual environments. These environments allow for separate Python setups while sharing a common base installation, featuring private site packages and integration with the interpreter. The new `venv` module provides programmatic access and the `pyvenv` script facilitates command-line operations.
---

Please read on for a comprehensive list of user-facing changes.
## PEP 405: Virtual Environments[¶](https://docs.python.org/3/whatsnew/3.3.html#pep-405-virtual-environments "Link to this heading")
Virtual environments help create separate Python setups while sharing a system-wide base install, for ease of maintenance. Virtual environments have their own set of private site packages (i.e. locally installed libraries), and are optionally segregated from the system-wide site packages. Their concept and implementation are inspired by the popular `virtualenv` third-party package, but benefit from tighter integration with the interpreter core.
This PEP adds the [`venv`](https://docs.python.org/3/library/venv.html#module-venv "venv: Creation of virtual environments.") module for programmatic access, and the `pyvenv` script for command-line access and administration. The Python interpreter checks for a `pyvenv.cfg`, file whose existence signals the base of a virtual environment’s directory tree.
See also 

[**PEP 405**](https://peps.python.org/pep-0405/) - Python Virtual Environments
    
PEP written by Carl Meyer; implementation by Carl Meyer and Vinay Sajip
## PEP 420: Implicit Namespace Packages[¶](https://docs.python.org/3/whatsnew/3.3.html#pep-420-implicit-namespace-packages "Link to this heading")
Native support for package directories that don’t require `__init__.py` marker files and can automatically span multiple path segments (inspired by various third party approaches to namespace packages, as described in [**PEP 420**](https://peps.python.org/pep-0420/))
See also 

[**PEP 420**](https://peps.python.org/pep-0420/) - Implicit Namespace Packages
    
PEP written by Eric V. Smith; implementation by Eric V. Smith and Barry Warsaw
## PEP 3118: New memoryview implementation and buffer protocol documentation[¶](https://docs.python.org/3/whatsnew/3.3.html#pep-3118-new-memoryview-implementation-and-buffer-protocol-documentation "Link to this heading")
The implementation of [**PEP 3118**](https://peps.python.org/pep-3118/) has been significantly improved.
The new memoryview implementation comprehensively fixes all ownership and lifetime issues of dynamically allocated fields in the Py_buffer struct that led to multiple crash reports. Additionally, several functions that crashed or returned incorrect results for non-contiguous or multi-dimensional input have been fixed.
The memoryview object now has a PEP-3118 compliant getbufferproc() that checks the consumer’s request type. Many new features have been added, most of them work in full generality for non-contiguous arrays and arrays with suboffsets.
The documentation has been updated, clearly spelling out responsibilities for both exporters and consumers. Buffer request flags are grouped into basic and compound flags. The memory layout of non-contiguous and multi-dimensional NumPy-style arrays is explained.
### Features[¶](https://docs.python.org/3/whatsnew/3.3.html#features "Link to this heading")
  * All native single character format specifiers in struct module syntax (optionally prefixed with ‘@’) are now supported.
  * With some restrictions, the cast() method allows changing of format and shape of C-contiguous arrays.
  * Multi-dimensional list representations are supported for any array type.
  * Multi-dimensional comparisons are supported for any array type.
  * One-dimensional memoryviews of hashable (read-only) types with formats B, b or c are now hashable. (Contributed by Antoine Pitrou in [bpo-13411](https://bugs.python.org/issue?@action=redirect&bpo=13411).)
  * Arbitrary slicing of any 1-D arrays type is supported. For example, it is now possible to reverse a memoryview in _O_(1) by using a negative step.


### API changes[¶](https://docs.python.org/3/whatsnew/3.3.html#api-changes "Link to this heading")
  * The maximum number of dimensions is officially limited to 64.
  * The representation of empty shape, strides and suboffsets is now an empty tuple instead of `None`.
  * Accessing a memoryview element with format ‘B’ (unsigned bytes) now returns an integer (in accordance with the struct module syntax). For returning a bytes object the view must be cast to ‘c’ first.
  * memoryview comparisons now use the logical structure of the operands and compare all array elements by value. All format strings in struct module syntax are supported. Views with unrecognised format strings are still permitted, but will always compare as unequal, regardless of view contents.
  * For further changes see [Build and C API Changes](https://docs.python.org/3/whatsnew/3.3.html#build-and-c-api-changes) and [Porting C code](https://docs.python.org/3/whatsnew/3.3.html#porting-c-code).