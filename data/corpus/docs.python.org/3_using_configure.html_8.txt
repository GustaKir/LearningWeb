Title: Python Build Configuration Options
URL: https://docs.python.org/3/using/configure.html
Summary: This section outlines specific configuration options for building Python, including the `--with-strict-overflow` option which alters compiler flags, and details about creating a debug build with the `--with-pydebug` option that enables additional debugging features.
---

--with-strict-overflow[¶](https://docs.python.org/3/using/configure.html#cmdoption-with-strict-overflow "Link to this definition")
    
Add `-fstrict-overflow` to the C compiler flags (by default we add `-fno-strict-overflow` instead).
### 3.3.8. Python Debug Build[¶](https://docs.python.org/3/using/configure.html#python-debug-build "Link to this heading")
A debug build is Python built with the [`--with-pydebug`](https://docs.python.org/3/using/configure.html#cmdoption-with-pydebug) configure option.
Effects of a debug build:
  * Display all warnings by default: the list of default warning filters is empty in the [`warnings`](https://docs.python.org/3/library/warnings.html#module-warnings "warnings: Issue warning messages and control their disposition.") module.
  * Add `d` to [`sys.abiflags`](https://docs.python.org/3/library/sys.html#sys.abiflags "sys.abiflags").
  * Add `sys.gettotalrefcount()` function.
  * Add [`-X showrefcount`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) command line option.
  * Add [`-d`](https://docs.python.org/3/using/cmdline.html#cmdoption-d) command line option and [`PYTHONDEBUG`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONDEBUG) environment variable to debug the parser.
  * Add support for the `__lltrace__` variable: enable low-level tracing in the bytecode evaluation loop if the variable is defined.
  * Install [debug hooks on memory allocators](https://docs.python.org/3/c-api/memory.html#default-memory-allocators) to detect buffer overflow and other memory errors.
  * Define `Py_DEBUG` and `Py_REF_DEBUG` macros.
  * Add runtime checks: code surrounded by `#ifdef Py_DEBUG` and `#endif`. Enable `assert(...)` and `_PyObject_ASSERT(...)` assertions: don’t set the `NDEBUG` macro (see also the [`--with-assertions`](https://docs.python.org/3/using/configure.html#cmdoption-with-assertions) configure option). Main runtime checks:
    * Add sanity checks on the function arguments.
    * Unicode and int objects are created with their memory filled with a pattern to detect usage of uninitialized objects.
    * Ensure that functions which can clear or replace the current exception are not called with an exception raised.
    * Check that deallocator functions don’t change the current exception.
    * The garbage collector ([`gc.collect()`](https://docs.python.org/3/library/gc.html#gc.collect "gc.collect") function) runs some basic checks on objects consistency.
    * The `Py_SAFE_DOWNCAST()` macro checks for integer underflow and overflow when downcasting from wide types to narrow types.


See also the [Python Development Mode](https://docs.python.org/3/library/devmode.html#devmode) and the [`--with-trace-refs`](https://docs.python.org/3/using/configure.html#cmdoption-with-trace-refs) configure option.
Changed in version 3.8: Release builds and debug builds are now ABI compatible: defining the `Py_DEBUG` macro no longer implies the `Py_TRACE_REFS` macro (see the [`--with-trace-refs`](https://docs.python.org/3/using/configure.html#cmdoption-with-trace-refs) option).
### 3.3.9. Debug options[¶](https://docs.python.org/3/using/configure.html#debug-options "Link to this heading") 

--with-pydebug[¶](https://docs.python.org/3/using/configure.html#cmdoption-with-pydebug "Link to this definition")
    
[Build Python in debug mode](https://docs.python.org/3/using/configure.html#debug-build): define the `Py_DEBUG` macro (disabled by default). 

--with-trace-refs[¶](https://docs.python.org/3/using/configure.html#cmdoption-with-trace-refs "Link to this definition")
    
Enable tracing references for debugging purpose (disabled by default).
Effects:
  * Define the `Py_TRACE_REFS` macro.
  * Add [`sys.getobjects()`](https://docs.python.org/3/library/sys.html#sys.getobjects "sys.getobjects") function.
  * Add [`PYTHONDUMPREFS`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONDUMPREFS) environment variable.


The [`PYTHONDUMPREFS`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONDUMPREFS) environment variable can be used to dump objects and reference counts still alive at Python exit.
[Statically allocated objects](https://docs.python.org/3/c-api/typeobj.html#static-types) are not traced.
Added in version 3.8.
Changed in version 3.13: This build is now ABI compatible with release build and [debug build](https://docs.python.org/3/using/configure.html#debug-build). 

--with-assertions[¶](https://docs.python.org/3/using/configure.html#cmdoption-with-assertions "Link to this definition")
    
Build with C assertions enabled (default is no): `assert(...);` and `_PyObject_ASSERT(...);`.
If set, the `NDEBUG` macro is not defined in the [`OPT`](https://docs.python.org/3/using/configure.html#envvar-OPT) compiler variable.
See also the [`--with-pydebug`](https://docs.python.org/3/using/configure.html#cmdoption-with-pydebug) option ([debug build](https://docs.python.org/3/using/configure.html#debug-build)) which also enables assertions.
Added in version 3.6.