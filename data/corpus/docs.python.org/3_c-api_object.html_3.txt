Title: int PyObject_GetOptionalAttr
URL: https://docs.python.org/3/c-api/object.html
Summary: The `PyObject_GetOptionalAttr` function retrieves an attribute of a Python object without raising an `AttributeError` if the attribute does not exist. It returns `1` and updates the result with a strong reference to the attribute if found, or returns `0` if not found.
---

intPyObject_GetOptionalAttr([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*obj, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*attr_name, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")**result);[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_GetOptionalAttr "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.13._
Variant of [`PyObject_GetAttr()`](https://docs.python.org/3/c-api/object.html#c.PyObject_GetAttr "PyObject_GetAttr") which doesn’t raise [`AttributeError`](https://docs.python.org/3/library/exceptions.html#AttributeError "AttributeError") if the attribute is not found.
If the attribute is found, return `1` and set _*result_ to a new [strong reference](https://docs.python.org/3/glossary.html#term-strong-reference) to the attribute. If the attribute is not found, return `0` and set _*result_ to `NULL`; the [`AttributeError`](https://docs.python.org/3/library/exceptions.html#AttributeError "AttributeError") is silenced. If an error other than [`AttributeError`](https://docs.python.org/3/library/exceptions.html#AttributeError "AttributeError") is raised, return `-1` and set _*result_ to `NULL`.
Added in version 3.13. 

intPyObject_GetOptionalAttrString([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*obj, constchar*attr_name, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")**result);[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_GetOptionalAttrString "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.13._
This is the same as [`PyObject_GetOptionalAttr()`](https://docs.python.org/3/c-api/object.html#c.PyObject_GetOptionalAttr "PyObject_GetOptionalAttr"), but _attr_name_ is specified as a constchar* UTF-8 encoded bytes string, rather than a [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*.
Added in version 3.13. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyObject_GenericGetAttr([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*name)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_GenericGetAttr "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Generic attribute getter function that is meant to be put into a type object’s `tp_getattro` slot. It looks for a descriptor in the dictionary of classes in the object’s MRO as well as an attribute in the object’s [`__dict__`](https://docs.python.org/3/reference/datamodel.html#object.__dict__ "object.__dict__") (if present). As outlined in [Implementing Descriptors](https://docs.python.org/3/reference/datamodel.html#descriptors), data descriptors take preference over instance attributes, while non-data descriptors don’t. Otherwise, an [`AttributeError`](https://docs.python.org/3/library/exceptions.html#AttributeError "AttributeError") is raised. 

intPyObject_SetAttr([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*attr_name, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*v)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_SetAttr "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Set the value of the attribute named _attr_name_ , for object _o_ , to the value _v_. Raise an exception and return `-1` on failure; return `0` on success. This is the equivalent of the Python statement `o.attr_name = v`.
If _v_ is `NULL`, the attribute is deleted. This behaviour is deprecated in favour of using [`PyObject_DelAttr()`](https://docs.python.org/3/c-api/object.html#c.PyObject_DelAttr "PyObject_DelAttr"), but there are currently no plans to remove it.