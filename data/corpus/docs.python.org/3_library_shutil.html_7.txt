Title: shutil.which Function
URL: https://docs.python.org/3/library/shutil.html
Summary: The `shutil.which` function returns the path to an executable file specified by `_cmd_` if it exists and is executable. It accepts a permission mask `_mode_` and an optional `_path_` string to determine where to search for the executable. If no valid executable is found, it returns `None`. Defaults are provided for `_mode_` and `_path_` to ensure proper functionality.
---

shutil.which(_cmd_ , _mode =os.F_OK | os.X_OK_, _path =None_)[¶](https://docs.python.org/3/library/shutil.html#shutil.which "Link to this definition")
    
Return the path to an executable which would be run if the given _cmd_ was called. If no _cmd_ would be called, return `None`.
_mode_ is a permission mask passed to [`os.access()`](https://docs.python.org/3/library/os.html#os.access "os.access"), by default determining if the file exists and is executable.
_path_ is a “`PATH` string” specifying the directories to look in, delimited by [`os.pathsep`](https://docs.python.org/3/library/os.html#os.pathsep "os.pathsep"). When no _path_ is specified, the `PATH` environment variable is read from [`os.environ`](https://docs.python.org/3/library/os.html#os.environ "os.environ"), falling back to [`os.defpath`](https://docs.python.org/3/library/os.html#os.defpath "os.defpath") if it is not set.
On Windows, the current directory is prepended to the _path_ if _mode_ does not include `os.X_OK`. When the _mode_ does include `os.X_OK`, the Windows API `NeedCurrentDirectoryForExePathW` will be consulted to determine if the current directory should be prepended to _path_. To avoid consulting the current working directory for executables: set the environment variable `NoDefaultCurrentDirectoryInExePath`.
Also on Windows, the `PATHEXT` environment variable is used to resolve commands that may not already include an extension. For example, if you call `shutil.which("python")`, [`which()`](https://docs.python.org/3/library/shutil.html#shutil.which "shutil.which") will search `PATHEXT` to know that it should look for `python.exe` within the _path_ directories. For example, on Windows:
>>>```
>>> shutil.which("python")
'C:\\Python33\\python.EXE'

```

This is also applied when _cmd_ is a path that contains a directory component:
>>>```
>>> shutil.which("C:\\Python33\\python")
'C:\\Python33\\python.EXE'