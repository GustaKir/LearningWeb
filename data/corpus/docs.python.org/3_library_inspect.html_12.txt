Title: inspect Module Functions
URL: https://docs.python.org/3/library/inspect.html
Summary: This chunk describes two functions from the inspect module: 'formatargvalues', which formats argument specifications, and 'getmro', which returns a tuple of a class's base classes in method resolution order. It notes that 'formatargvalues' was erroneously marked as deprecated in Python 3.5.
---

inspect.formatargvalues(_args_[, _varargs_ , _varkw_ , _locals_ , _formatarg_ , _formatvarargs_ , _formatvarkw_ , _formatvalue_])[¶](https://docs.python.org/3/library/inspect.html#inspect.formatargvalues "Link to this definition")
    
Format a pretty argument spec from the four values returned by [`getargvalues()`](https://docs.python.org/3/library/inspect.html#inspect.getargvalues "inspect.getargvalues"). The format* arguments are the corresponding optional formatting functions that are called to turn names and values into strings.
Note
This function was inadvertently marked as deprecated in Python 3.5. 

inspect.getmro(_cls_)[¶](https://docs.python.org/3/library/inspect.html#inspect.getmro "Link to this definition")
    
Return a tuple of class cls’s base classes, including cls, in method resolution order. No class appears more than once in this tuple. Note that the method resolution order depends on cls’s type. Unless a very peculiar user-defined metatype is in use, cls will be the first element of the tuple. 

inspect.getcallargs(_func_ , _/_ , _* args_, _** kwds_)[¶](https://docs.python.org/3/library/inspect.html#inspect.getcallargs "Link to this definition")
    
Bind the _args_ and _kwds_ to the argument names of the Python function or method _func_ , as if it was called with them. For bound methods, bind also the first argument (typically named `self`) to the associated instance. A dict is returned, mapping the argument names (including the names of the `*` and `**` arguments, if any) to their values from _args_ and _kwds_. In case of invoking _func_ incorrectly, i.e. whenever `func(*args, **kwds)` would raise an exception because of incompatible signature, an exception of the same type and the same or similar message is raised. For example:
>>>```
>>> frominspectimport getcallargs
>>> deff(a, b=1, *pos, **named):
...   pass
...
>>> getcallargs(f, 1, 2, 3) == {'a': 1, 'named': {}, 'b': 2, 'pos': (3,)}
True
>>> getcallargs(f, a=2, x=4) == {'a': 2, 'named': {'x': 4}, 'b': 1, 'pos': ()}
True
>>> getcallargs(f)
Traceback (most recent call last):
...
TypeError: f() missing 1 required positional argument: 'a'