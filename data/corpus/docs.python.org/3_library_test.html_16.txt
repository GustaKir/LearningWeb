Title: Creating Zip Packages in Python's Test Support
URL: https://docs.python.org/3/library/test.html
Summary: The function `make_zip_pkg` creates a zip package directory containing an `__init__` file and a specified script file from provided source code. If compilation is enabled, it adds compiled versions of the source files. The function returns the full path to the zip and its archive name.
---

test.support.script_helper.make_zip_pkg(_zip_dir_ , _zip_basename_ , _pkg_name_ , _script_basename_ , _source_ , _depth =1_, _compiled =False_)[¶](https://docs.python.org/3/library/test.html#test.support.script_helper.make_zip_pkg "Link to this definition")
    
Create a zip package directory with a path of _zip_dir_ and _zip_basename_ containing an empty `__init__` file and a file _script_basename_ containing the _source_. If _compiled_ is `True`, both source files will be compiled and added to the zip package. Return a tuple of the full zip path and the archive name for the zip file.
# [`test.support.bytecode_helper`](https://docs.python.org/3/library/test.html#module-test.support.bytecode_helper "test.support.bytecode_helper: Support tools for testing correct bytecode generation.") — Support tools for testing correct bytecode generation[¶](https://docs.python.org/3/library/test.html#module-test.support.bytecode_helper "Link to this heading")
The [`test.support.bytecode_helper`](https://docs.python.org/3/library/test.html#module-test.support.bytecode_helper "test.support.bytecode_helper: Support tools for testing correct bytecode generation.") module provides support for testing and inspecting bytecode generation.
Added in version 3.9.
The module defines the following class: 

_class_ test.support.bytecode_helper.BytecodeTestCase(_unittest.TestCase_)[¶](https://docs.python.org/3/library/test.html#test.support.bytecode_helper.BytecodeTestCase "Link to this definition")
    
This class has custom assertion methods for inspecting bytecode. 

BytecodeTestCase.get_disassembly_as_string(_co_)[¶](https://docs.python.org/3/library/test.html#test.support.bytecode_helper.BytecodeTestCase.get_disassembly_as_string "Link to this definition")
    
Return the disassembly of _co_ as string. 

BytecodeTestCase.assertInBytecode(_x_ , _opname_ , _argval =_UNSPECIFIED_)[¶](https://docs.python.org/3/library/test.html#test.support.bytecode_helper.BytecodeTestCase.assertInBytecode "Link to this definition")
    
Return instr if _opname_ is found, otherwise throws [`AssertionError`](https://docs.python.org/3/library/exceptions.html#AssertionError "AssertionError"). 

BytecodeTestCase.assertNotInBytecode(_x_ , _opname_ , _argval =_UNSPECIFIED_)[¶](https://docs.python.org/3/library/test.html#test.support.bytecode_helper.BytecodeTestCase.assertNotInBytecode "Link to this definition")
    
Throws [`AssertionError`](https://docs.python.org/3/library/exceptions.html#AssertionError "AssertionError") if _opname_ is found.
# [`test.support.threading_helper`](https://docs.python.org/3/library/test.html#module-test.support.threading_helper "test.support.threading_helper: Support for threading tests.") — Utilities for threading tests[¶](https://docs.python.org/3/library/test.html#module-test.support.threading_helper "Link to this heading")
The [`test.support.threading_helper`](https://docs.python.org/3/library/test.html#module-test.support.threading_helper "test.support.threading_helper: Support for threading tests.") module provides support for threading tests.
Added in version 3.10. 

test.support.threading_helper.join_thread(_thread_ , _timeout =None_)[¶](https://docs.python.org/3/library/test.html#test.support.threading_helper.join_thread "Link to this definition")
    
Join a _thread_ within _timeout_. Raise an [`AssertionError`](https://docs.python.org/3/library/exceptions.html#AssertionError "AssertionError") if thread is still alive after _timeout_ seconds. 

@test.support.threading_helper.reap_threads[¶](https://docs.python.org/3/library/test.html#test.support.threading_helper.reap_threads "Link to this definition")
    
Decorator to ensure the threads are cleaned up even if the test fails. 

test.support.threading_helper.start_threads(_threads_ , _unlock =None_)[¶](https://docs.python.org/3/library/test.html#test.support.threading_helper.start_threads "Link to this definition")
    
Context manager to start _threads_ , which is a sequence of threads. _unlock_ is a function called after the threads are started, even if an exception was raised; an example would be [`threading.Event.set()`](https://docs.python.org/3/library/threading.html#threading.Event.set "threading.Event.set"). `start_threads` will attempt to join the started threads upon exit. 

test.support.threading_helper.threading_cleanup(_* original_values_)[¶](https://docs.python.org/3/library/test.html#test.support.threading_helper.threading_cleanup "Link to this definition")
    
Cleanup up threads not specified in _original_values_. Designed to emit a warning if a test leaves running threads in the background. 

test.support.threading_helper.threading_setup()[¶](https://docs.python.org/3/library/test.html#test.support.threading_helper.threading_setup "Link to this definition")
    
Return current thread count and copy of dangling threads.