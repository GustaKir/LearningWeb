Title: SSLSocket.read Method
URL: https://docs.python.org/3/library/ssl.html
Summary: The SSLSocket.read method reads up to a specified number of bytes from an SSL socket, returning the data as a bytes instance. It can read into a specified buffer and returns the number of bytes read. If the socket is non-blocking and could block, it raises SSLWantReadError or SSLWantWriteError. As of version 3.5, socket timeouts are no longer reset during reads or writes.
---

SSLSocket.read(_len =1024_, _buffer =None_)[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.read "Link to this definition")
    
Read up to _len_ bytes of data from the SSL socket and return the result as a `bytes` instance. If _buffer_ is specified, then read into the buffer instead, and return the number of bytes read.
Raise [`SSLWantReadError`](https://docs.python.org/3/library/ssl.html#ssl.SSLWantReadError "ssl.SSLWantReadError") or [`SSLWantWriteError`](https://docs.python.org/3/library/ssl.html#ssl.SSLWantWriteError "ssl.SSLWantWriteError") if the socket is [non-blocking](https://docs.python.org/3/library/ssl.html#ssl-nonblocking) and the read would block.
As at any time a re-negotiation is possible, a call to [`read()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.read "ssl.SSLSocket.read") can also cause write operations.
Changed in version 3.5: The socket timeout is no longer reset each time bytes are received or sent. The socket timeout is now the maximum total duration to read up to _len_ bytes.
Deprecated since version 3.6: Use `recv()` instead of [`read()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.read "ssl.SSLSocket.read"). 

SSLSocket.write(_buf_)[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.write "Link to this definition")
    
Write _buf_ to the SSL socket and return the number of bytes written. The _buf_ argument must be an object supporting the buffer interface.
Raise [`SSLWantReadError`](https://docs.python.org/3/library/ssl.html#ssl.SSLWantReadError "ssl.SSLWantReadError") or [`SSLWantWriteError`](https://docs.python.org/3/library/ssl.html#ssl.SSLWantWriteError "ssl.SSLWantWriteError") if the socket is [non-blocking](https://docs.python.org/3/library/ssl.html#ssl-nonblocking) and the write would block.
As at any time a re-negotiation is possible, a call to [`write()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.write "ssl.SSLSocket.write") can also cause read operations.
Changed in version 3.5: The socket timeout is no longer reset each time bytes are received or sent. The socket timeout is now the maximum total duration to write _buf_.
Deprecated since version 3.6: Use `send()` instead of [`write()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.write "ssl.SSLSocket.write").
Note
The [`read()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.read "ssl.SSLSocket.read") and [`write()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.write "ssl.SSLSocket.write") methods are the low-level methods that read and write unencrypted, application-level data and decrypt/encrypt it to encrypted, wire-level data. These methods require an active SSL connection, i.e. the handshake was completed and [`SSLSocket.unwrap()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.unwrap "ssl.SSLSocket.unwrap") was not called.
Normally you should use the socket API methods like [`recv()`](https://docs.python.org/3/library/socket.html#socket.socket.recv "socket.socket.recv") and [`send()`](https://docs.python.org/3/library/socket.html#socket.socket.send "socket.socket.send") instead of these methods. 

SSLSocket.do_handshake()[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.do_handshake "Link to this definition")
    
Perform the SSL setup handshake.
Changed in version 3.4: The handshake method also performs `match_hostname()` when the [`check_hostname`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.check_hostname "ssl.SSLContext.check_hostname") attribute of the socket’s [`context`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.context "ssl.SSLSocket.context") is true.
Changed in version 3.5: The socket timeout is no longer reset each time bytes are received or sent. The socket timeout is now the maximum total duration of the handshake.
Changed in version 3.7: Hostname or IP address is matched by OpenSSL during handshake. The function `match_hostname()` is no longer used. In case OpenSSL refuses a hostname or IP address, the handshake is aborted early and a TLS alert message is sent to the peer.