Title: Embedding Python in Objective C
URL: https://docs.python.org/3/using/ios.html
Summary: To embed a Python interpreter in Objective C, ensure that UTF-8 mode is enabled, buffered stdio is disabled, bytecode writing is disabled, signal handlers are enabled, and configure `PYTHONHOME` to point to the app's 'python' subfolder. Additionally, set `PYTHONPATH` to include necessary paths.
---

```

  10. Add Objective C code to initialize and use a Python interpreter in embedded mode. You should ensure that:


>   * UTF-8 mode ([`PyPreConfig.utf8_mode`](https://docs.python.org/3/c-api/init_config.html#c.PyPreConfig.utf8_mode "PyPreConfig.utf8_mode")) is _enabled_ ;
>   * Buffered stdio ([`PyConfig.buffered_stdio`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.buffered_stdio "PyConfig.buffered_stdio")) is _disabled_ ;
>   * Writing bytecode ([`PyConfig.write_bytecode`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.write_bytecode "PyConfig.write_bytecode")) is _disabled_ ;
>   * Signal handlers ([`PyConfig.install_signal_handlers`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.install_signal_handlers "PyConfig.install_signal_handlers")) are _enabled_ ;
>   * `PYTHONHOME` for the interpreter is configured to point at the `python` subfolder of your app’s bundle; and
>   * The `PYTHONPATH` for the interpreter includes:
>     * the `python/lib/python3.X` subfolder of your app’s bundle,
>     * the `python/lib/python3.X/lib-dynload` subfolder of your app’s bundle, and
>     * the `app` subfolder of your app’s bundle
> 

> Your app’s bundle location can be determined using `[[NSBundle mainBundle] resourcePath]`.
Steps 8, 9 and 10 of these instructions assume that you have a single folder of pure Python application code, named `app`. If you have third-party binary modules in your app, some additional steps will be required:
  * You need to ensure that any folders containing third-party binaries are either associated with the app target, or copied in as part of step 8. Step 8 should also purge any binaries that are not appropriate for the platform a specific build is targeting (i.e., delete any device binaries if you’re building an app targeting the simulator).
  * Any folders that contain third-party binaries must be processed into framework form by step 9. The invocation of `install_dylib` that processes the `lib-dynload` folder can be copied and adapted for this purpose.
  * If you’re using a separate folder for third-party packages, ensure that folder is included as part of the `PYTHONPATH` configuration in step 10.


### 7.2.3. Testing a Python package[¶](https://docs.python.org/3/using/ios.html#testing-a-python-package "Link to this heading")
The CPython source tree contains [a testbed project](https://github.com/python/cpython/tree/3.13/iOS/testbed) that is used to run the CPython test suite on the iOS simulator. This testbed can also be used as a testbed project for running your Python library’s test suite on iOS.
After building or obtaining an iOS XCFramework (See [iOS/README.rst](https://github.com/python/cpython/tree/3.13/iOS/README.rst) for details), create a clone of the Python iOS testbed project by running:
```
$pythoniOS/testbedclone--framework<path/to/Python.xcframework>--app<path/to/module1>--app<path/to/module2>app-testbed

```

You will need to modify the `iOS/testbed` reference to point to that directory in the CPython source tree; any folders specified with the `--app` flag will be copied into the cloned testbed project. The resulting testbed will be created in the `app-testbed` folder. In this example, the `module1` and `module2` would be importable modules at runtime. If your project has additional dependencies, they can be installed into the `app-testbed/iOSTestbed/app_packages` folder (using `pip install --target app-testbed/iOSTestbed/app_packages` or similar).
You can then use the `app-testbed` folder to run the test suite for your app, For example, if `module1.tests` was the entry point to your test suite, you could run:
```
$pythonapp-testbedrun--module1.tests

```

This is the equivalent of running `python -m module1.tests` on a desktop Python build. Any arguments after the `--` will be passed to the testbed as if they were arguments to `python -m` on a desktop machine.
You can also open the testbed project in Xcode by running:
```
$openapp-testbed/iOSTestbed.xcodeproj