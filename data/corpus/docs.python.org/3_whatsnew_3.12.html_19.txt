Title: Deprecations in Python 3.12
URL: https://docs.python.org/3/whatsnew/3.12.html
Summary: This section details the deprecations in Python 3.12, including the removal of parameters from `argparse.BooleanOptionalAction` and runtime warnings for certain `ast` features that have been deprecated since Python 3.8.
---

## Deprecated[Â¶](https://docs.python.org/3/whatsnew/3.12.html#deprecated "Link to this heading")
  * [`argparse`](https://docs.python.org/3/library/argparse.html#module-argparse "argparse: Command-line option and argument parsing library."): The _type_ , _choices_ , and _metavar_ parameters of `argparse.BooleanOptionalAction` are deprecated and will be removed in 3.14. (Contributed by Nikita Sobolev in [gh-92248](https://github.com/python/cpython/issues/92248).)
  * [`ast`](https://docs.python.org/3/library/ast.html#module-ast "ast: Abstract Syntax Tree classes and manipulation."): The following [`ast`](https://docs.python.org/3/library/ast.html#module-ast "ast: Abstract Syntax Tree classes and manipulation.") features have been deprecated in documentation since Python 3.8, now cause a [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning") to be emitted at runtime when they are accessed or used, and will be removed in Python 3.14:
    * `ast.Num`
    * `ast.Str`
    * `ast.Bytes`
    * `ast.NameConstant`
    * `ast.Ellipsis`
Use [`ast.Constant`](https://docs.python.org/3/library/ast.html#ast.Constant "ast.Constant") instead. (Contributed by Serhiy Storchaka in [gh-90953](https://github.com/python/cpython/issues/90953).)
  * [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O."):
    * The child watcher classes [`asyncio.MultiLoopChildWatcher`](https://docs.python.org/3/library/asyncio-policy.html#asyncio.MultiLoopChildWatcher "asyncio.MultiLoopChildWatcher"), [`asyncio.FastChildWatcher`](https://docs.python.org/3/library/asyncio-policy.html#asyncio.FastChildWatcher "asyncio.FastChildWatcher"), [`asyncio.AbstractChildWatcher`](https://docs.python.org/3/library/asyncio-policy.html#asyncio.AbstractChildWatcher "asyncio.AbstractChildWatcher") and [`asyncio.SafeChildWatcher`](https://docs.python.org/3/library/asyncio-policy.html#asyncio.SafeChildWatcher "asyncio.SafeChildWatcher") are deprecated and will be removed in Python 3.14. (Contributed by Kumar Aditya in [gh-94597](https://github.com/python/cpython/issues/94597).)
    * [`asyncio.set_child_watcher()`](https://docs.python.org/3/library/asyncio-policy.html#asyncio.set_child_watcher "asyncio.set_child_watcher"), [`asyncio.get_child_watcher()`](https://docs.python.org/3/library/asyncio-policy.html#asyncio.get_child_watcher "asyncio.get_child_watcher"), [`asyncio.AbstractEventLoopPolicy.set_child_watcher()`](https://docs.python.org/3/library/asyncio-policy.html#asyncio.AbstractEventLoopPolicy.set_child_watcher "asyncio.AbstractEventLoopPolicy.set_child_watcher") and [`asyncio.AbstractEventLoopPolicy.get_child_watcher()`](https://docs.python.org/3/library/asyncio-policy.html#asyncio.AbstractEventLoopPolicy.get_child_watcher "asyncio.AbstractEventLoopPolicy.get_child_watcher") are deprecated and will be removed in Python 3.14. (Contributed by Kumar Aditya in [gh-94597](https://github.com/python/cpython/issues/94597).)
    * The [`get_event_loop()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.get_event_loop "asyncio.get_event_loop") method of the default event loop policy now emits a [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning") if there is no current event loop set and it decides to create one. (Contributed by Serhiy Storchaka and Guido van Rossum in [gh-100160](https://github.com/python/cpython/issues/100160).)
  * [`calendar`](https://docs.python.org/3/library/calendar.html#module-calendar "calendar: Functions for working with calendars, including some emulation of the Unix cal program."): `calendar.January` and `calendar.February` constants are deprecated and replaced by [`calendar.JANUARY`](https://docs.python.org/3/library/calendar.html#calendar.JANUARY "calendar.JANUARY") and [`calendar.FEBRUARY`](https://docs.python.org/3/library/calendar.html#calendar.FEBRUARY "calendar.FEBRUARY"). (Contributed by Prince Roshan in [gh-103636](https://github.com/python/cpython/issues/103636).)
  * [`collections.abc`](https://docs.python.org/3/library/collections.abc.html#module-collections.abc "collections.abc: Abstract base classes for containers"): Deprecated [`collections.abc.ByteString`](https://docs.python.org/3/library/collections.abc.html#collections.abc.ByteString "collections.abc.ByteString"). Prefer `Sequence` or [`collections.abc.Buffer`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Buffer "collections.abc.Buffer"). For use in typing, prefer a union, like `bytes | bytearray`, or [`collections.abc.Buffer`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Buffer "collections.abc.Buffer"). (Contributed by Shantanu Jain in [gh-91896](https://github.com/python/cpython/issues/91896).)
  * [`datetime`](https://docs.python.org/3/library/datetime.html#module-datetime "datetime: Basic date and time types."): [`datetime.datetime