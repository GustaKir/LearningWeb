Title: Python C API: Exception Traceback Functions
URL: https://docs.python.org/3/c-api/exceptions.html
Summary: This documentation section describes two functions related to exception tracebacks in Python's C API: `PyException_GetTraceback`, which retrieves the traceback associated with an exception, and `PyException_SetTraceback`, which sets the traceback for a given exception.
---

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyException_GetTraceback([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*ex)[¶](https://docs.python.org/3/c-api/exceptions.html#c.PyException_GetTraceback "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return the traceback associated with the exception as a new reference, as accessible from Python through the [`__traceback__`](https://docs.python.org/3/library/exceptions.html#BaseException.__traceback__ "BaseException.__traceback__") attribute. If there is no traceback associated, this returns `NULL`. 

intPyException_SetTraceback([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*ex, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*tb)[¶](https://docs.python.org/3/c-api/exceptions.html#c.PyException_SetTraceback "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Set the traceback associated with the exception to _tb_. Use `Py_None` to clear it. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyException_GetContext([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*ex)[¶](https://docs.python.org/3/c-api/exceptions.html#c.PyException_GetContext "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return the context (another exception instance during whose handling _ex_ was raised) associated with the exception as a new reference, as accessible from Python through the [`__context__`](https://docs.python.org/3/library/exceptions.html#BaseException.__context__ "BaseException.__context__") attribute. If there is no context associated, this returns `NULL`. 

voidPyException_SetContext([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*ex, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*ctx)[¶](https://docs.python.org/3/c-api/exceptions.html#c.PyException_SetContext "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Set the context associated with the exception to _ctx_. Use `NULL` to clear it. There is no type check to make sure that _ctx_ is an exception instance. This steals a reference to _ctx_. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyException_GetCause([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*ex)[¶](https://docs.python.org/3/c-api/exceptions.html#c.PyException_GetCause "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return the cause (either an exception instance, or `None`, set by `raise ... from ...`) associated with the exception as a new reference, as accessible from Python through the [`__cause__`](https://docs.python.org/3/library/exceptions.html#BaseException.__cause__ "BaseException.__cause__") attribute. 

voidPyException_SetCause([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*ex, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*cause)[¶](https://docs.python.org/3/c-api/exceptions.html#c.PyException_SetCause "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Set the cause associated with the exception to _cause_. Use `NULL` to clear it. There is no type check to make sure that _cause_ is either an exception instance or `None`. This steals a reference to _cause_.
The [`__suppress_context__`](https://docs.python.org/3/library/exceptions.html#BaseException.__suppress_context__ "BaseException.__suppress_context__") attribute is implicitly set to `True` by this function. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyException_GetArgs([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*ex)[¶](https://docs.python.org/3/c-api/exceptions.html#c.PyException_GetArgs "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.12._
Return [`args`](https://docs.python.org/3/library/exceptions.html#BaseException.args "BaseException.args") of exception _ex_.