Title: Echo Client Protocol in asyncio
URL: https://docs.python.org/3/library/asyncio-protocol.html
Summary: This document describes an EchoClientProtocol class that implements basic functionalities for a UDP echo client using Python's asyncio library. It includes methods for handling connection establishment, receiving data, error handling, and connection closure. The main function demonstrates how to set up the protocol and send a message to a server.
---

```
importasyncio

classEchoClientProtocol:
  def__init__(self, message, on_con_lost):
    self.message = message
    self.on_con_lost = on_con_lost
    self.transport = None
  defconnection_made(self, transport):
    self.transport = transport
    print('Send:', self.message)
    self.transport.sendto(self.message.encode())
  defdatagram_received(self, data, addr):
    print("Received:", data.decode())
    print("Close the socket")
    self.transport.close()
  deferror_received(self, exc):
    print('Error received:', exc)
  defconnection_lost(self, exc):
    print("Connection closed")
    self.on_con_lost.set_result(True)

async defmain():
  # Get a reference to the event loop as we plan to use
  # low-level APIs.
  loop = asyncio.get_running_loop()
  on_con_lost = loop.create_future()
  message = "Hello World!"
  transport, protocol = await loop.create_datagram_endpoint(
    lambda: EchoClientProtocol(message, on_con_lost),
    remote_addr=('127.0.0.1', 9999))
  try:
    await on_con_lost
  finally:
    transport.close()

asyncio.run(main())

```

### Connecting Existing Sockets[¶](https://docs.python.org/3/library/asyncio-protocol.html#connecting-existing-sockets "Link to this heading")
Wait until a socket receives data using the [`loop.create_connection()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_connection "asyncio.loop.create_connection") method with a protocol:
```
importasyncio
importsocket

classMyProtocol(asyncio.Protocol):
  def__init__(self, on_con_lost):
    self.transport = None
    self.on_con_lost = on_con_lost
  defconnection_made(self, transport):
    self.transport = transport
  defdata_received(self, data):
    print("Received:", data.decode())
    # We are done: close the transport;
    # connection_lost() will be called automatically.
    self.transport.close()
  defconnection_lost(self, exc):
    # The socket has been closed
    self.on_con_lost.set_result(True)

async defmain():
  # Get a reference to the event loop as we plan to use
  # low-level APIs.
  loop = asyncio.get_running_loop()
  on_con_lost = loop.create_future()
  # Create a pair of connected sockets
  rsock, wsock = socket.socketpair()
  # Register the socket to wait for data.
  transport, protocol = await loop.create_connection(
    lambda: MyProtocol(on_con_lost), sock=rsock)
  # Simulate the reception of data from the network.
  loop.call_soon(wsock.send, 'abc'.encode())
  try:
    await protocol.on_con_lost
  finally:
    transport.close()
    wsock.close()
asyncio.run(main())

```

See also
The [watch a file descriptor for read events](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio-example-watch-fd) example uses the low-level [`loop.add_reader()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.add_reader "asyncio.loop.add_reader") method to register an FD.
The [register an open socket to wait for data using streams](https://docs.python.org/3/library/asyncio-stream.html#asyncio-example-create-connection-streams) example uses high-level streams created by the [`open_connection()`](https://docs.python.org/3/library/asyncio-stream.html#asyncio.open_connection "asyncio.open_connection") function in a coroutine.
### loop.subprocess_exec() and SubprocessProtocol[¶](https://docs.python.org/3/library/asyncio-protocol.html#loop-subprocess-exec-and-subprocessprotocol "Link to this heading")
An example of a subprocess protocol used to get the output of a subprocess and to wait for the subprocess exit.
The subprocess is created by the [`loop.subprocess_exec()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.subprocess_exec "asyncio.loop.subprocess_exec") method: