Title: Python C API Trace Functions
URL: https://docs.python.org/3/c-api/init.html
Summary: This section defines various constants used as the _what_ parameter for the `Py_tracefunc` functions in the Python C API, indicating specific events such as a function return, a C function call, and a C function exception.
---

intPyTrace_RETURN[¶](https://docs.python.org/3/c-api/init.html#c.PyTrace_RETURN "Link to this definition")
    
The value for the _what_ parameter to [`Py_tracefunc`](https://docs.python.org/3/c-api/init.html#c.Py_tracefunc "Py_tracefunc") functions when a call is about to return. 

intPyTrace_C_CALL[¶](https://docs.python.org/3/c-api/init.html#c.PyTrace_C_CALL "Link to this definition")
    
The value for the _what_ parameter to [`Py_tracefunc`](https://docs.python.org/3/c-api/init.html#c.Py_tracefunc "Py_tracefunc") functions when a C function is about to be called. 

intPyTrace_C_EXCEPTION[¶](https://docs.python.org/3/c-api/init.html#c.PyTrace_C_EXCEPTION "Link to this definition")
    
The value for the _what_ parameter to [`Py_tracefunc`](https://docs.python.org/3/c-api/init.html#c.Py_tracefunc "Py_tracefunc") functions when a C function has raised an exception. 

intPyTrace_C_RETURN[¶](https://docs.python.org/3/c-api/init.html#c.PyTrace_C_RETURN "Link to this definition")
    
The value for the _what_ parameter to [`Py_tracefunc`](https://docs.python.org/3/c-api/init.html#c.Py_tracefunc "Py_tracefunc") functions when a C function has returned. 

intPyTrace_OPCODE[¶](https://docs.python.org/3/c-api/init.html#c.PyTrace_OPCODE "Link to this definition")
    
The value for the _what_ parameter to [`Py_tracefunc`](https://docs.python.org/3/c-api/init.html#c.Py_tracefunc "Py_tracefunc") functions (but not profiling functions) when a new opcode is about to be executed. This event is not emitted by default: it must be explicitly requested by setting [`f_trace_opcodes`](https://docs.python.org/3/reference/datamodel.html#frame.f_trace_opcodes "frame.f_trace_opcodes") to _1_ on the frame. 

voidPyEval_SetProfile([Py_tracefunc](https://docs.python.org/3/c-api/init.html#c.Py_tracefunc "Py_tracefunc")func, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*obj)[¶](https://docs.python.org/3/c-api/init.html#c.PyEval_SetProfile "Link to this definition")
    
Set the profiler function to _func_. The _obj_ parameter is passed to the function as its first parameter, and may be any Python object, or `NULL`. If the profile function needs to maintain state, using a different value for _obj_ for each thread provides a convenient and thread-safe place to store it. The profile function is called for all monitored events except [`PyTrace_LINE`](https://docs.python.org/3/c-api/init.html#c.PyTrace_LINE "PyTrace_LINE") [`PyTrace_OPCODE`](https://docs.python.org/3/c-api/init.html#c.PyTrace_OPCODE "PyTrace_OPCODE") and [`PyTrace_EXCEPTION`](https://docs.python.org/3/c-api/init.html#c.PyTrace_EXCEPTION "PyTrace_EXCEPTION").
See also the [`sys.setprofile()`](https://docs.python.org/3/library/sys.html#sys.setprofile "sys.setprofile") function.
The caller must hold the [GIL](https://docs.python.org/3/glossary.html#term-GIL). 

voidPyEval_SetProfileAllThreads([Py_tracefunc](https://docs.python.org/3/c-api/init.html#c.Py_tracefunc "Py_tracefunc")func, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*obj)[¶](https://docs.python.org/3/c-api/init.html#c.PyEval_SetProfileAllThreads "Link to this definition")
    
Like [`PyEval_SetProfile()`](https://docs.python.org/3/c-api/init.html#c.PyEval_SetProfile "PyEval_SetProfile") but sets the profile function in all running threads belonging to the current interpreter instead of the setting it only on the current thread.
The caller must hold the [GIL](https://docs.python.org/3/glossary.html#term-GIL).
As [`PyEval_SetProfile()`](https://docs.python.org/3/c-api/init.html#c.PyEval_SetProfile "PyEval_SetProfile"), this function ignores any exceptions raised while setting the profile functions in all threads.
Added in version 3.12.