Title: Complex Number Conversion in Python
URL: https://docs.python.org/3/library/functions.html
Summary: The `complex` function in Python is used to create complex numbers from strings or numerical inputs. It can accept a single string representing a complex number, a single number, or separate real and imaginary parts. Various examples illustrate how to use this function, including handling of special cases like whitespace and infinity.
---

_class_ complex(_number =0_, _/_)[Â¶](https://docs.python.org/3/library/functions.html#complex "Link to this definition")


_class_ complex(_string_ , _/_)


_class_ complex(_real =0_, _imag =0_)
    
Convert a single string or number to a complex number, or create a complex number from real and imaginary parts.
Examples:
>>>```
>>> complex('+1.23')
(1.23+0j)
>>> complex('-4.5j')
-4.5j
>>> complex('-1.23+4.5j')
(-1.23+4.5j)
>>> complex('\t( -1.23+4.5J )\n')
(-1.23+4.5j)
>>> complex('-Infinity+NaNj')
(-inf+nanj)
>>> complex(1.23)
(1.23+0j)
>>> complex(imag=-4.5)
-4.5j
>>> complex(-1.23, 4.5)
(-1.23+4.5j)

```

If the argument is a string, it must contain either a real part (in the same format as for [`float()`](https://docs.python.org/3/library/functions.html#float "float")) or an imaginary part (in the same format but with a `'j'` or `'J'` suffix), or both real and imaginary parts (the sign of the imaginary part is mandatory in this case). The string can optionally be surrounded by whitespaces and the round parentheses `'('` and `')'`, which are ignored. The string must not contain whitespace between `'+'`, `'-'`, the `'j'` or `'J'` suffix, and the decimal number. For example, `complex('1+2j')` is fine, but `complex('1 + 2j')` raises [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError"). More precisely, the input must conform to the [`complexvalue`](https://docs.python.org/3/library/functions.html#grammar-token-float-complexvalue) production rule in the following grammar, after parentheses and leading and trailing whitespace characters are removed:
```
**complexvalue** ::= [floatvalue](https://docs.python.org/3/library/functions.html#grammar-token-float-floatvalue) |
         [floatvalue](https://docs.python.org/3/library/functions.html#grammar-token-float-floatvalue) ("j" | "J") |
         [floatvalue](https://docs.python.org/3/library/functions.html#grammar-token-float-floatvalue) [sign](https://docs.python.org/3/library/functions.html#grammar-token-float-sign) [absfloatvalue](https://docs.python.org/3/library/functions.html#grammar-token-float-absfloatvalue) ("j" | "J")