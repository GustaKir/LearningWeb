Title: Migrating from Python 2 to Python 3 and Deprecation Warnings in Python 2.7
URL: https://docs.python.org/3/whatsnew/2.7.html
Summary: This documentation chunk discusses migration tools for transitioning from Python 2 to Python 3. It highlights the 'How to port Python 2 Code to Python 3' guide as a key resource. Additionally, it explains a change in Python 2.7 regarding the handling of deprecation warnings, where such warnings are silenced by default to enhance user experience.
---

For projects wishing to migrate from Python 2 to Python 3, or for library and framework developers wishing to support users on both Python 2 and Python 3, there are a variety of tools and guides available to help decide on a suitable approach and manage some of the technical details involved. The recommended starting point is the [How to port Python 2 Code to Python 3](https://docs.python.org/3/howto/pyporting.html#pyporting-howto) HOWTO guide.
## Changes to the Handling of Deprecation Warnings[¶](https://docs.python.org/3/whatsnew/2.7.html#changes-to-the-handling-of-deprecation-warnings "Link to this heading")
For Python 2.7, a policy decision was made to silence warnings only of interest to developers by default. [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning") and its descendants are now ignored unless otherwise requested, preventing users from seeing warnings triggered by an application. This change was also made in the branch that became Python 3.2. (Discussed on stdlib-sig and carried out in [bpo-7319](https://bugs.python.org/issue?@action=redirect&bpo=7319).)
In previous releases, [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning") messages were enabled by default, providing Python developers with a clear indication of where their code may break in a future major version of Python.
However, there are increasingly many users of Python-based applications who are not directly involved in the development of those applications. [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning") messages are irrelevant to such users, making them worry about an application that’s actually working correctly and burdening application developers with responding to these concerns.
You can re-enable display of [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning") messages by running Python with the [`-Wdefault`](https://docs.python.org/3/using/cmdline.html#cmdoption-W) (short form: [`-Wd`](https://docs.python.org/3/using/cmdline.html#cmdoption-W)) switch, or by setting the [`PYTHONWARNINGS`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONWARNINGS) environment variable to `"default"` (or `"d"`) before running Python. Python code can also re-enable them by calling `warnings.simplefilter('default')`.
The `unittest` module also automatically reenables deprecation warnings when running tests.
## Python 3.1 Features[¶](https://docs.python.org/3/whatsnew/2.7.html#python-3-1-features "Link to this heading")
Much as Python 2.6 incorporated features from Python 3.0, version 2.7 incorporates some of the new features in Python 3.1. The 2.x series continues to provide tools for migrating to the 3.x series.
A partial list of 3.1 features that were backported to 2.7:
  * The syntax for set literals (`{1,2,3}` is a mutable set).
  * Dictionary and set comprehensions (`{i: i*2 for i in range(3)}`).
  * Multiple context managers in a single [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement.
  * A new version of the [`io`](https://docs.python.org/3/library/io.html#module-io "io: Core tools for working with streams.") library, rewritten in C for performance.
  * The ordered-dictionary type described in [PEP 372: Adding an Ordered Dictionary to collections](https://docs.python.org/3/whatsnew/2.7.html#pep-0372).
  * The new `","` format specifier described in [PEP 378: Format Specifier for Thousands Separator](https://docs.python.org/3/whatsnew/2.7.html#pep-0378).
  * The [`memoryview`](https://docs.python.org/3/library/stdtypes.html#memoryview "memoryview") object.
  * A small subset of the [`importlib`](https://docs.python.org/3/library/importlib.html#module-importlib "importlib: The implementation of the import machinery.") module, [described below](https://docs.python.org/3/whatsnew/2.7.html#importlib-section).
  * The [`repr()`](https://docs.python.org/3/library/functions.html#repr "repr") of a float `x` is shorter in many cases: it’s now based on the shortest decimal string that’s guaranteed to round back to `x`. As in previous versions of Python, it’s guaranteed that `float(repr(x))` recovers `x`.
  * Float-to-string and string-to-float conversions are correctly rounded. The [`round()`](https://docs.python.org/3/library/functions.html#round "round") function is also now correctly rounded.
  * The [`PyCapsule`](https://docs.python.org/3/c-api/capsule.html#c.PyCapsule "PyCapsule") type, used to provide a C API for extension modules.
  * The [`PyLong_AsLongAndOverflow()`](https://docs.python.org/3/c-api/long.html#c.PyLong_AsLongAndOverflow "PyLong_AsLongAndOverflow") C API function.