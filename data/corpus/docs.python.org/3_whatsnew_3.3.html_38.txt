Title: Deprecated Features and Porting to Python 3.3
URL: https://docs.python.org/3/whatsnew/3.3.html
Summary: The 'u' format code of the array module is deprecated and will be removed in Python 4, along with the Py_UNICODE API. Additionally, the section discusses changes that may affect code when porting to Python 3.3, including that hash randomization is enabled by default, with instructions on disabling it.
---

### Deprecated features[¶](https://docs.python.org/3/whatsnew/3.3.html#deprecated-features "Link to this heading")
The [`array`](https://docs.python.org/3/library/array.html#module-array "array: Space efficient arrays of uniformly typed numeric values.") module’s `'u'` format code is now deprecated and will be removed in Python 4 together with the rest of the ([`Py_UNICODE`](https://docs.python.org/3/c-api/unicode.html#c.Py_UNICODE "Py_UNICODE")) API.
## Porting to Python 3.3[¶](https://docs.python.org/3/whatsnew/3.3.html#porting-to-python-3-3 "Link to this heading")
This section lists previously described changes and other bugfixes that may require changes to your code.
### Porting Python code[¶](https://docs.python.org/3/whatsnew/3.3.html#porting-python-code "Link to this heading")
  * Hash randomization is enabled by default. Set the [`PYTHONHASHSEED`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONHASHSEED) environment variable to `0` to disable hash randomization. See also the [`object.__hash__()`](https://docs.python.org/3/reference/datamodel.html#object.__hash__ "object.__hash__") method.
  * [bpo-12326](https://bugs.python.org/issue?@action=redirect&bpo=12326): On Linux, sys.platform doesn’t contain the major version anymore. It is now always ‘linux’, instead of ‘linux2’ or ‘linux3’ depending on the Linux version used to build Python. Replace sys.platform == ‘linux2’ with sys.platform.startswith(‘linux’), or directly sys.platform == ‘linux’ if you don’t need to support older Python versions.
  * [bpo-13847](https://bugs.python.org/issue?@action=redirect&bpo=13847), [bpo-14180](https://bugs.python.org/issue?@action=redirect&bpo=14180): [`time`](https://docs.python.org/3/library/time.html#module-time "time: Time access and conversions.") and [`datetime`](https://docs.python.org/3/library/datetime.html#module-datetime "datetime: Basic date and time types."): [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError") is now raised instead of [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if a timestamp is out of range. [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") is now raised if C functions `gmtime()` or `localtime()` failed.
  * The default finders used by import now utilize a cache of what is contained within a specific directory. If you create a Python source file or sourceless bytecode file, make sure to call [`importlib.invalidate_caches()`](https://docs.python.org/3/library/importlib.html#importlib.invalidate_caches "importlib.invalidate_caches") to clear out the cache for the finders to notice the new file.
  * [`ImportError`](https://docs.python.org/3/library/exceptions.html#ImportError "ImportError") now uses the full name of the module that was attempted to be imported. Doctests that check ImportErrors’ message will need to be updated to use the full name of the module instead of just the tail of the name.
  * The _index_ argument to [`__import__()`](https://docs.python.org/3/library/functions.html#import__ "__import__") now defaults to 0 instead of -1 and no longer support negative values. It was an oversight when [**PEP 328**](https://peps.python.org/pep-0328/) was implemented that the default value remained -1. If you need to continue to perform a relative import followed by an absolute import, then perform the relative import using an index of 1, followed by another import using an index of 0. It is preferred, though, that you use [`importlib.import_module()`](https://docs.python.org/3/library/importlib.html#importlib.import_module "importlib.import_module") rather than call [`__import__()`](https://docs.python.org/3/library/functions.html#import__ "__import__") directly.
  * [`__import__()`](https://docs.python.org/3/library/functions.html#import__ "__import__") no longer allows one to use an index value other than 0 for top-level modules. E.g. `__import__('sys', level=1)` is now an error.
  * Because [`sys.meta_path`](https://docs.python.org/3/library/sys.html#sys.meta_path "sys.meta_path") and [`sys.path_hooks`](https://docs.python.org/3/library/sys.html#sys.path_hooks "sys.path_hooks") now have finders on them by default, you will most likely want to use `list.insert()` instead of `list.append()` to add to those lists.
  * Because `None` is now inserted into [`sys.path_importer_cache`](https://docs.python.org/3/library/sys.html#sys.path_importer_cache "sys.path_importer_cache"), if you are clearing out entries in the dictionary of paths that do not have a finder, you will need to remove keys paired with values of `None` **and** `imp.NullImporter` to be backwards-compatible. This will lead to extra overhead on older versions of Python that re-insert `None` into [`sys.path_importer_cache`](https://docs.python.org/3/library/sys.html#sys.path_importer_cache "sys.path_importer_cache") where it represents the use of implicit finders, but semantically it should