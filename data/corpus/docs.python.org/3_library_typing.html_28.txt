Title: Customizing CustomerModel Classes with dataclass_transform
URL: https://docs.python.org/3/library/typing.html
Summary: The `CustomerModel` classes are treated by type checkers like those created with `@dataclasses.dataclass`. Type checkers recognize arguments such as `init`, `eq`, `order`, `unsafe_hash`, `frozen`, `match_args`, `kw_only`, and `slots` which can be used to customize behaviors of decorated classes, metaclasses, or functions.
---

```

The `CustomerModel` classes defined above will be treated by type checkers similarly to classes created with [`@dataclasses.dataclass`](https://docs.python.org/3/library/dataclasses.html#dataclasses.dataclass "dataclasses.dataclass"). For example, type checkers will assume these classes have `__init__` methods that accept `id` and `name`.
The decorated class, metaclass, or function may accept the following bool arguments which type checkers will assume have the same effect as they would have on the [`@dataclasses.dataclass`](https://docs.python.org/3/library/dataclasses.html#dataclasses.dataclass "dataclasses.dataclass") decorator: `init`, `eq`, `order`, `unsafe_hash`, `frozen`, `match_args`, `kw_only`, and `slots`. It must be possible for the value of these arguments (`True` or `False`) to be statically evaluated.
The arguments to the `dataclass_transform` decorator can be used to customize the default behaviors of the decorated class, metaclass, or function: 

Parameters:
    
  * **eq_default** ([_bool_](https://docs.python.org/3/library/functions.html#bool "bool")) – Indicates whether the `eq` parameter is assumed to be `True` or `False` if it is omitted by the caller. Defaults to `True`.
  * **order_default** ([_bool_](https://docs.python.org/3/library/functions.html#bool "bool")) – Indicates whether the `order` parameter is assumed to be `True` or `False` if it is omitted by the caller. Defaults to `False`.
  * **kw_only_default** ([_bool_](https://docs.python.org/3/library/functions.html#bool "bool")) – Indicates whether the `kw_only` parameter is assumed to be `True` or `False` if it is omitted by the caller. Defaults to `False`.
  * **frozen_default** ([_bool_](https://docs.python.org/3/library/functions.html#bool "bool")) – 
Indicates whether the `frozen` parameter is assumed to be `True` or `False` if it is omitted by the caller. Defaults to `False`.
Added in version 3.12.
  * **field_specifiers** ([_tuple_](https://docs.python.org/3/library/stdtypes.html#tuple "tuple") _[_[_Callable_](https://docs.python.org/3/library/collections.abc.html#collections.abc.Callable "collections.abc.Callable") _[__...__,__Any_ _]__,__...__]_) – Specifies a static list of supported classes or functions that describe fields, similar to [`dataclasses.field()`](https://docs.python.org/3/library/dataclasses.html#dataclasses.field "dataclasses.field"). Defaults to `()`.
  * ****kwargs** (_Any_) – Arbitrary other keyword arguments are accepted in order to allow for possible future extensions.


Type checkers recognize the following optional parameters on field specifiers:
**Recognised parameters for field specifiers**[¶](https://docs.python.org/3/library/typing.html#id7 "Link to this table") Parameter name | Description  
---|---  
`init` | Indicates whether the field should be included in the synthesized `__init__` method. If unspecified, `init` defaults to `True`.  
`default` | Provides the default value for the field.  
`default_factory` | Provides a runtime callback that returns the default value for the field. If neither `default` nor `default_factory` are specified, the field is assumed to have no default value and must be provided a value when the class is instantiated.  
`factory` | An alias for the `default_factory` parameter on field specifiers.  
`kw_only` | Indicates whether the field should be marked as keyword-only. If `True`, the field will be keyword-only. If `False`, it will not be keyword-only. If unspecified, the value of the `kw_only` parameter on the object decorated with `dataclass_transform` will be used, or if that is unspecified, the value of `kw_only_default` on `dataclass_transform` will be used.  
`alias` | Provides an alternative name for the field. This alternative name is used in the synthesized `__init__` method.  
At runtime, this decorator records its arguments in the `__dataclass_transform__` attribute on the decorated object. It has no other runtime effect.
See [**PEP 681**](https://peps.python.org/pep-0681/) for more details.
Added in version 3.11.