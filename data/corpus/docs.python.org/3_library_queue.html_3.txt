Title: Using Queue with Worker Threads in Python
URL: https://docs.python.org/3/library/queue.html
Summary: This section demonstrates how to create a worker thread that processes items from a Python queue. It includes code to initialize the queue, define a worker function, start the worker thread, send tasks to the queue, and wait for all tasks to complete.
---

```
importthreading
importqueue
q = queue.Queue()
defworker():
  while True:
    item = q.get()
    print(f'Working on {item}')
    print(f'Finished {item}')
    q.task_done()
# Turn-on the worker thread.
threading.Thread(target=worker, daemon=True).start()
# Send thirty task requests to the worker.
for item in range(30):
  q.put(item)
# Block until all tasks are done.
q.join()
print('All work completed')

```

### Terminating queues[¶](https://docs.python.org/3/library/queue.html#terminating-queues "Link to this heading")
[`Queue`](https://docs.python.org/3/library/queue.html#queue.Queue "queue.Queue") objects can be made to prevent further interaction by shutting them down. 

Queue.shutdown(_immediate =False_)[¶](https://docs.python.org/3/library/queue.html#queue.Queue.shutdown "Link to this definition")
    
Shut down the queue, making [`get()`](https://docs.python.org/3/library/queue.html#queue.Queue.get "queue.Queue.get") and [`put()`](https://docs.python.org/3/library/queue.html#queue.Queue.put "queue.Queue.put") raise [`ShutDown`](https://docs.python.org/3/library/queue.html#queue.ShutDown "queue.ShutDown").
By default, [`get()`](https://docs.python.org/3/library/queue.html#queue.Queue.get "queue.Queue.get") on a shut down queue will only raise once the queue is empty. Set _immediate_ to true to make [`get()`](https://docs.python.org/3/library/queue.html#queue.Queue.get "queue.Queue.get") raise immediately instead.
All blocked callers of [`put()`](https://docs.python.org/3/library/queue.html#queue.Queue.put "queue.Queue.put") and [`get()`](https://docs.python.org/3/library/queue.html#queue.Queue.get "queue.Queue.get") will be unblocked. If _immediate_ is true, a task will be marked as done for each remaining item in the queue, which may unblock callers of [`join()`](https://docs.python.org/3/library/queue.html#queue.Queue.join "queue.Queue.join").
Added in version 3.13.
## SimpleQueue Objects[¶](https://docs.python.org/3/library/queue.html#simplequeue-objects "Link to this heading")
[`SimpleQueue`](https://docs.python.org/3/library/queue.html#queue.SimpleQueue "queue.SimpleQueue") objects provide the public methods described below. 

SimpleQueue.qsize()[¶](https://docs.python.org/3/library/queue.html#queue.SimpleQueue.qsize "Link to this definition")
    
Return the approximate size of the queue. Note, qsize() > 0 doesn’t guarantee that a subsequent get() will not block. 

SimpleQueue.empty()[¶](https://docs.python.org/3/library/queue.html#queue.SimpleQueue.empty "Link to this definition")
    
Return `True` if the queue is empty, `False` otherwise. If empty() returns `False` it doesn’t guarantee that a subsequent call to get() will not block. 

SimpleQueue.put(_item_ , _block =True_, _timeout =None_)[¶](https://docs.python.org/3/library/queue.html#queue.SimpleQueue.put "Link to this definition")
    
Put _item_ into the queue. The method never blocks and always succeeds (except for potential low-level errors such as failure to allocate memory). The optional args _block_ and _timeout_ are ignored and only provided for compatibility with [`Queue.put()`](https://docs.python.org/3/library/queue.html#queue.Queue.put "queue.Queue.put").
**CPython implementation detail:** This method has a C implementation which is reentrant. That is, a `put()` or `get()` call can be interrupted by another `put()` call in the same thread without deadlocking or corrupting internal state inside the queue. This makes it appropriate for use in destructors such as `__del__` methods or [`weakref`](https://docs.python.org/3/library/weakref.html#module-weakref "weakref: Support for weak references and weak dictionaries.") callbacks. 

SimpleQueue.put_nowait(_item_)[¶](https://docs.python.org/3/library/queue.html#queue.SimpleQueue.put_nowait "Link to this definition")
    
Equivalent to `put(item, block=False)`, provided for compatibility with [`Queue.put_nowait()`](https://docs.python.org/3/library/queue.html#queue.Queue.put_nowait "queue.Queue.put_nowait"). 

SimpleQueue.get(_block =True_, _timeout =None_)[¶](https://docs.python.org/3/library/queue.html#queue.SimpleQueue.get "Link to this definition")
    
Remove and return an item from the queue. If optional args _block_ is true and _timeout_ is `None` (the default), block if necessary until an item is available. If _timeout_ is a positive number, it blocks at most _timeout_ seconds and raises the [`Empty`](https://docs.python.org/3/library/queue.html#queue.Empty "queue.Empty") exception if no item was available within that time. Otherwise (_block_ is false), return an item if one is immediately available, else raise the [`Empty`](https://docs.python.org/3/library/queue.html#queue.Empty "queue.Empty") exception (_timeout_ is ignored in that case). 

SimpleQueue.get_nowait()[¶](https://docs.python.org/3/library/queue.html#queue.SimpleQueue.get_nowait "Link to this definition")
    
Equivalent to `get(False)`.
See also