Title: PyImport_ImportModuleLevelObject Function
URL: https://docs.python.org/3/c-api/import.html
Summary: This section describes the `PyImport_ImportModuleLevelObject` function, which imports a module in the Python C API. It includes its parameters, return value, and relates its functionality to the built-in Python function `__import__()`. It has been part of the Stable ABI since version 3.7.
---

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyImport_ImportModuleLevelObject([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*name, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*globals, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*locals, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*fromlist, intlevel)[¶](https://docs.python.org/3/c-api/import.html#c.PyImport_ImportModuleLevelObject "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.7._
Import a module. This is best described by referring to the built-in Python function [`__import__()`](https://docs.python.org/3/library/functions.html#import__ "__import__"), as the standard [`__import__()`](https://docs.python.org/3/library/functions.html#import__ "__import__") function calls this function directly.
The return value is a new reference to the imported module or top-level package, or `NULL` with an exception set on failure. Like for [`__import__()`](https://docs.python.org/3/library/functions.html#import__ "__import__"), the return value when a submodule of a package was requested is normally the top-level package, unless a non-empty _fromlist_ was given.
Added in version 3.3. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyImport_ImportModuleLevel(constchar*name, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*globals, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*locals, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*fromlist, intlevel)[¶](https://docs.python.org/3/c-api/import.html#c.PyImport_ImportModuleLevel "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Similar to [`PyImport_ImportModuleLevelObject()`](https://docs.python.org/3/c-api/import.html#c.PyImport_ImportModuleLevelObject "PyImport_ImportModuleLevelObject"), but the name is a UTF-8 encoded string instead of a Unicode object.
Changed in version 3.3: Negative values for _level_ are no longer accepted. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyImport_Import([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*name)[¶](https://docs.python.org/3/c-api/import.html#c.PyImport_Import "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
This is a higher-level interface that calls the current “import hook function” (with an explicit _level_ of 0, meaning absolute import). It invokes the [`__import__()`](https://docs.python.org/3/library/functions.html#import__ "__import__") function from the `__builtins__` of the current globals. This means that the import is done using whatever import hooks are installed in the current environment.
This function always uses absolute imports. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyImport_ReloadModule([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*m)[¶](https://docs.python.org/3/c-api/import.html#c.PyImport_ReloadModule "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Reload a module. Return a new reference to the reloaded module, or `NULL` with an exception set on failure (the module still exists in this case). 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyImport_AddModuleRef(constchar*name)[¶](https://docs.python.org/3/c-api/import.html#c.PyImport_AddModuleRef "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.13._
Return the module object corresponding to a module name.
The _name_ argument may be of the form `package.module`. First check the modules dictionary if there’s one there, and if not, create a new one and insert it in the modules dictionary.
Return a [strong reference](https://docs.python.org/3/glossary.html#term-strong-reference) to the module on success. Return `NULL` with an exception set on failure.
The module name _name_ is decoded from UTF-8.
This function does not load or import the module; if the module wasn’t already loaded, you will get an empty module object. Use [`PyImport_ImportModule()`](https://docs.python.org/3/c-api/import.html#c.PyImport_ImportModule "PyImport_ImportModule") or one of its variants to import a module. Package structures implied by a dotted name for _name_ are not created if not already present.
Added in version 3.13.