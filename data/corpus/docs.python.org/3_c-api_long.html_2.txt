Title: Python C API: Long Object Conversion Functions
URL: https://docs.python.org/3/c-api/long.html
Summary: This section details two functions from the Python C API for converting data to Python integers: `PyLong_FromUnicodeObject`, which converts a Unicode string of digits to an integer (added in version 3.3), and `PyLong_FromVoidPtr`, which creates an integer from a pointer value, which can later be retrieved using `PyLong_AsVoidPtr`.
---

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyLong_FromUnicodeObject([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*u, intbase)[¶](https://docs.python.org/3/c-api/long.html#c.PyLong_FromUnicodeObject "Link to this definition")
    _Return value: New reference._
Convert a sequence of Unicode digits in the string _u_ to a Python integer value.
Added in version 3.3. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyLong_FromVoidPtr(void*p)[¶](https://docs.python.org/3/c-api/long.html#c.PyLong_FromVoidPtr "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Create a Python integer from the pointer _p_. The pointer value can be retrieved from the resulting value using [`PyLong_AsVoidPtr()`](https://docs.python.org/3/c-api/long.html#c.PyLong_AsVoidPtr "PyLong_AsVoidPtr"). 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyLong_FromNativeBytes(constvoid*buffer, size_tn_bytes, intflags)[¶](https://docs.python.org/3/c-api/long.html#c.PyLong_FromNativeBytes "Link to this definition")
    
Create a Python integer from the value contained in the first _n_bytes_ of _buffer_ , interpreted as a two’s-complement signed number.
_flags_ are as for [`PyLong_AsNativeBytes()`](https://docs.python.org/3/c-api/long.html#c.PyLong_AsNativeBytes "PyLong_AsNativeBytes"). Passing `-1` will select the native endian that CPython was compiled with and assume that the most-significant bit is a sign bit. Passing `Py_ASNATIVEBYTES_UNSIGNED_BUFFER` will produce the same result as calling [`PyLong_FromUnsignedNativeBytes()`](https://docs.python.org/3/c-api/long.html#c.PyLong_FromUnsignedNativeBytes "PyLong_FromUnsignedNativeBytes"). Other flags are ignored.
Added in version 3.13. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyLong_FromUnsignedNativeBytes(constvoid*buffer, size_tn_bytes, intflags)[¶](https://docs.python.org/3/c-api/long.html#c.PyLong_FromUnsignedNativeBytes "Link to this definition")
    
Create a Python integer from the value contained in the first _n_bytes_ of _buffer_ , interpreted as an unsigned number.
_flags_ are as for [`PyLong_AsNativeBytes()`](https://docs.python.org/3/c-api/long.html#c.PyLong_AsNativeBytes "PyLong_AsNativeBytes"). Passing `-1` will select the native endian that CPython was compiled with and assume that the most-significant bit is not a sign bit. Flags other than endian are ignored.
Added in version 3.13. 

longPyLong_AsLong([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*obj)[¶](https://docs.python.org/3/c-api/long.html#c.PyLong_AsLong "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return a C long representation of _obj_. If _obj_ is not an instance of [`PyLongObject`](https://docs.python.org/3/c-api/long.html#c.PyLongObject "PyLongObject"), first call its [`__index__()`](https://docs.python.org/3/reference/datamodel.html#object.__index__ "object.__index__") method (if present) to convert it to a [`PyLongObject`](https://docs.python.org/3/c-api/long.html#c.PyLongObject "PyLongObject").
Raise [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError") if the value of _obj_ is out of range for a long.
Returns `-1` on error. Use [`PyErr_Occurred()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_Occurred "PyErr_Occurred") to disambiguate.
Changed in version 3.8: Use [`__index__()`](https://docs.python.org/3/reference/datamodel.html#object.__index__ "object.__index__") if available.
Changed in version 3.10: This function will no longer use [`__int__()`](https://docs.python.org/3/reference/datamodel.html#object.__int__ "object.__int__"). 

longPyLong_AS_LONG([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*obj)[¶](https://docs.python.org/3/c-api/long.html#c.PyLong_AS_LONG "Link to this definition")
    
A [soft deprecated](https://docs.python.org/3/glossary.html#term-soft-deprecated) alias. Exactly equivalent to the preferred `PyLong_AsLong`. In particular, it can fail with [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError") or another exception.
Deprecated since version 3.14: The function is soft deprecated. 

intPyLong_AsInt([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*obj)[¶](https://docs.python.org/3/c-api/long.html#c.PyLong_AsInt "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.13._
Similar to [`PyLong_AsLong()`](https://docs.python.org/3/c-api/long.html#c.PyLong_AsLong "PyLong_AsLong"), but store the result in a C int instead of a C long.
Added in version 3.13.