Title: PYTHONTZPATH Environment Variable
URL: https://docs.python.org/3/library/zoneinfo.html
Summary: The PYTHONTZPATH variable is an os.pathsep-separated string that specifies the time zone search path, requiring absolute paths only. Relative paths will be ignored or may raise an InvalidTZPathWarning in CPython. To ignore system data and use tzdata, set PYTHONTZPATH to an empty string.
---

PYTHONTZPATH[¶](https://docs.python.org/3/library/zoneinfo.html#envvar-PYTHONTZPATH "Link to this definition")
    
This is an [`os.pathsep`](https://docs.python.org/3/library/os.html#os.pathsep "os.pathsep")-separated string containing the time zone search path to use. It must consist of only absolute rather than relative paths. Relative components specified in `PYTHONTZPATH` will not be used, but otherwise the behavior when a relative path is specified is implementation-defined; CPython will raise [`InvalidTZPathWarning`](https://docs.python.org/3/library/zoneinfo.html#zoneinfo.InvalidTZPathWarning "zoneinfo.InvalidTZPathWarning"), but other implementations are free to silently ignore the erroneous component or raise an exception.
To set the system to ignore the system data and use the tzdata package instead, set `PYTHONTZPATH=""`.
#### Runtime configuration[¶](https://docs.python.org/3/library/zoneinfo.html#runtime-configuration "Link to this heading")
The TZ search path can also be configured at runtime using the [`reset_tzpath()`](https://docs.python.org/3/library/zoneinfo.html#zoneinfo.reset_tzpath "zoneinfo.reset_tzpath") function. This is generally not an advisable operation, though it is reasonable to use it in test functions that require the use of a specific time zone path (or require disabling access to the system time zones).
## The `ZoneInfo` class[¶](https://docs.python.org/3/library/zoneinfo.html#the-zoneinfo-class "Link to this heading") 

_class_ zoneinfo.ZoneInfo(_key_)[¶](https://docs.python.org/3/library/zoneinfo.html#zoneinfo.ZoneInfo "Link to this definition")
    
A concrete [`datetime.tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo "datetime.tzinfo") subclass that represents an IANA time zone specified by the string `key`. Calls to the primary constructor will always return objects that compare identically; put another way, barring cache invalidation via [`ZoneInfo.clear_cache()`](https://docs.python.org/3/library/zoneinfo.html#zoneinfo.ZoneInfo.clear_cache "zoneinfo.ZoneInfo.clear_cache"), for all values of `key`, the following assertion will always be true:
```
a = ZoneInfo(key)
b = ZoneInfo(key)
assert a is b