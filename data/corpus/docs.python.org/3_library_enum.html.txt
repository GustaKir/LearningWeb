Title: Enumeration Support in Python
URL: https://docs.python.org/3/library/enum.html
Summary: This document provides an overview of the `enum` module in Python, which supports enumerations. It includes information on module contents, data types, and supported dunder and sunder names, as well as utilities and decorators related to enumerations.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [`enum` — Support for enumerations](https://docs.python.org/3/library/enum.html)
    * [Module Contents](https://docs.python.org/3/library/enum.html#module-contents)
    * [Data Types](https://docs.python.org/3/library/enum.html#data-types)
      * [Supported `__dunder__` names](https://docs.python.org/3/library/enum.html#supported-dunder-names)
      * [Supported `_sunder_` names](https://docs.python.org/3/library/enum.html#supported-sunder-names)
    * [Utilities and Decorators](https://docs.python.org/3/library/enum.html#utilities-and-decorators)
    * [Notes](https://docs.python.org/3/library/enum.html#notes)


#### Previous topic
[`reprlib` — Alternate `repr()` implementation](https://docs.python.org/3/library/reprlib.html "previous chapter")
#### Next topic
[`graphlib` — Functionality to operate with graph-like structures](https://docs.python.org/3/library/graphlib.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/enum.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/graphlib.html "graphlib — Functionality to operate with graph-like structures") |
  * [previous](https://docs.python.org/3/library/reprlib.html "reprlib — Alternate repr\(\) implementation") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Data Types](https://docs.python.org/3/library/datatypes.html) »
  * [`enum` — Support for enumerations](https://docs.python.org/3/library/enum.html)
  * | 
  * Theme  Auto Light Dark |


# `enum` — Support for enumerations[¶](https://docs.python.org/3/library/enum.html#module-enum "Link to this heading")
Added in version 3.4.
**Source code:** [Lib/enum.py](https://github.com/python/cpython/tree/3.13/Lib/enum.py)
Important
This page contains the API reference information. For tutorial information and discussion of more advanced topics, see
  * [Basic Tutorial](https://docs.python.org/3/howto/enum.html#enum-basic-tutorial)
  * [Advanced Tutorial](https://docs.python.org/3/howto/enum.html#enum-advanced-tutorial)
  * [Enum Cookbook](https://docs.python.org/3/howto/enum.html#enum-cookbook)


An enumeration:
  * is a set of symbolic names (members) bound to unique values
  * can be iterated over to return its canonical (i.e. non-alias) members in definition order
  * uses _call_ syntax to return members by value
  * uses _index_ syntax to return members by name


Enumerations are created either by using [`class`](https://docs.python.org/3/reference/compound_stmts.html#class) syntax, or by using function-call syntax:
>>>```
>>> fromenumimport Enum
>>> # class syntax
>>> classColor(Enum):
...   RED = 1
...   GREEN = 2
...   BLUE = 3
>>> # functional syntax
>>> Color = Enum('Color', [('RED', 1), ('GREEN', 2), ('BLUE', 3)])