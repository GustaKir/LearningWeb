Title: Python 3.0 - Changes in Text Encoding
URL: https://docs.python.org/3/whatsnew/3.0.html
Summary: Python 3.0 introduced UTF-8 as the default system encoding, eliminating the need for encoding-aware streams in the codecs module. Now, sys.stdin, sys.stdout, and sys.stderr are unicode-only text files. Applications should provide a means to override this default encoding when handling non-ASCII text.
---

vironment variables). In many cases, but not all, the system default is UTF-8; you should never count on this default. Any application reading or writing more than pure ASCII text should probably have a way to override the encoding. There is no longer any need for using the encoding-aware streams in the [`codecs`](https://docs.python.org/3/library/codecs.html#module-codecs "codecs: Encode and decode data and streams.") module.
  * The initial values of [`sys.stdin`](https://docs.python.org/3/library/sys.html#sys.stdin "sys.stdin"), [`sys.stdout`](https://docs.python.org/3/library/sys.html#sys.stdout "sys.stdout") and [`sys.stderr`](https://docs.python.org/3/library/sys.html#sys.stderr "sys.stderr") are now unicode-only text files (i.e., they are instances of [`io.TextIOBase`](https://docs.python.org/3/library/io.html#io.TextIOBase "io.TextIOBase")). To read and write bytes data with these streams, you need to use their [`io.TextIOBase.buffer`](https://docs.python.org/3/library/io.html#io.TextIOBase.buffer "io.TextIOBase.buffer") attribute.
  * Filenames are passed to and returned from APIs as (Unicode) strings. This can present platform-specific problems because on some platforms filenames are arbitrary byte strings. (On the other hand, on Windows filenames are natively stored as Unicode.) As a work-around, most APIs (e.g. [`open()`](https://docs.python.org/3/library/functions.html#open "open") and many functions in the [`os`](https://docs.python.org/3/library/os.html#module-os "os: Miscellaneous operating system interfaces.") module) that take filenames accept [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") objects as well as strings, and a few APIs have a way to ask for a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") return value. Thus, [`os.listdir()`](https://docs.python.org/3/library/os.html#os.listdir "os.listdir") returns a list of [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") instances if the argument is a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") instance, and [`os.getcwdb()`](https://docs.python.org/3/library/os.html#os.getcwdb "os.getcwdb") returns the current working directory as a [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") instance. Note that when [`os.listdir()`](https://docs.python.org/3/library/os.html#os.listdir "os.listdir") returns a list of strings, filenames that cannot be decoded properly are omitted rather than raising [`UnicodeError`](https://docs.python.org/3/library/exceptions.html#UnicodeError "UnicodeError").
  * Some system APIs like [`os.environ`](https://docs.python.org/3/library/os.html#os.environ "os.environ") and [`sys.argv`](https://docs.python.org/3/library/sys.html#sys.argv "sys.argv") can also present problems when the bytes made available by the system is not interpretable using the default encoding. Setting the `LANG` variable and rerunning the program is probably the best approach.
  * [**PEP 3138**](https://peps.python.org/pep-3138/): The [`repr()`](https://docs.python.org/3/library/functions.html#repr "repr") of a string no longer escapes non-ASCII characters. It still escapes control characters and code points with non-printable status in the Unicode standard, however.
  * [**PEP 3120**](https://peps.python.org/pep-3120/): The default source encoding is now UTF-8.
  * [**PEP 3131**](https://peps.python.org/pep-3131/): Non-ASCII letters are now allowed in identifiers. (However, the standard library remains ASCII-only with the exception of contributor names in comments.)
  * The `StringIO` and `cStringIO` modules are gone. Instead, import the [`io`](https://docs.python.org/3/library/io.html#module-io "io: Core tools for working with streams.") module and use [`io.StringIO`](https://docs.python.org/3/library/io.html#io.StringIO "io.StringIO") or [`io.BytesIO`](https://docs.python.org/3/library/io.html#io.BytesIO "io.BytesIO") for text and data respectively.
  * See also the [Unicode HOWTO](https://docs.python.org/3/howto/unicode.html#unicode-howto), which was updated for Python 3.0.