Title: Introduction to optparse for Command-Line Options
URL: https://docs.python.org/3/library/optparse.html
Summary: The `optparse` library provides a method for parsing command-line options in Python scripts, offering a simple interface for users to access options like `-h` for help, `-f` for file output, and `-q` for quiet mode. Designed to adhere to conventions similar to C's `getopt()`, it simplifies the creation of straightforward command-line interfaces.
---

```

and [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") will print out a brief summary of your script’s options:
```
Usage: <yourscript> [options]
Options:
 -h, --help      show this help message and exit
 -f FILE, --file=FILE write report to FILE
 -q, --quiet      don't print status messages to stdout

```

where the value of _yourscript_ is determined at runtime (normally from `sys.argv[0]`).
## Background[¶](https://docs.python.org/3/library/optparse.html#background "Link to this heading")
[`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") was explicitly designed to encourage the creation of programs with straightforward command-line interfaces that follow the conventions established by the `getopt()` family of functions available to C developers. To that end, it supports only the most common command-line syntax and semantics conventionally used under Unix. If you are unfamiliar with these conventions, reading this section will allow you to acquaint yourself with them.
### Terminology[¶](https://docs.python.org/3/library/optparse.html#terminology "Link to this heading") 

argument
    
a string entered on the command-line, and passed by the shell to `execl()` or `execv()`. In Python, arguments are elements of `sys.argv[1:]` (`sys.argv[0]` is the name of the program being executed). Unix shells also use the term “word”.
It is occasionally desirable to substitute an argument list other than `sys.argv[1:]`, so you should read “argument” as “an element of `sys.argv[1:]`, or of some other list provided as a substitute for `sys.argv[1:]`”. 

option
    
an argument used to supply extra information to guide or customize the execution of a program. There are many different syntaxes for options; the traditional Unix syntax is a hyphen (“-”) followed by a single letter, e.g. `-x` or `-F`. Also, traditional Unix syntax allows multiple options to be merged into a single argument, e.g. `-x -F` is equivalent to `-xF`. The GNU project introduced `--` followed by a series of hyphen-separated words, e.g. `--file` or `--dry-run`. These are the only two option syntaxes provided by [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.").
Some other option syntaxes that the world has seen include:
  * a hyphen followed by a few letters, e.g. `-pf` (this is _not_ the same as multiple options merged into a single argument)
  * a hyphen followed by a whole word, e.g. `-file` (this is technically equivalent to the previous syntax, but they aren’t usually seen in the same program)
  * a plus sign followed by a single letter, or a few letters, or a word, e.g. `+f`, `+rgb`
  * a slash followed by a letter, or a few letters, or a word, e.g. `/f`, `/file`


These option syntaxes are not supported by [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library."), and they never will be. This is deliberate: the first three are non-standard on any environment, and the last only makes sense if you’re exclusively targeting Windows or certain legacy platforms (e.g. VMS, MS-DOS). 

option argument
    
an argument that follows an option, is closely associated with that option, and is consumed from the argument list when that option is. With [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library."), option arguments may either be in a separate argument from their option:
```
-f foo
--file foo

```

or included in the same argument:
```
-ffoo
--file=foo

```

Typically, a given option either takes an argument or it doesn’t. Lots of people want an “optional option arguments” feature, meaning that some options will take an argument if they see it, and won’t if they don’t. This is somewhat controversial, because it makes parsing ambiguous: if `-a` takes an optional argument and `-b` is another option entirely, how do we interpret `-ab`? Because of this ambiguity, [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") does not support this feature. 

positional argument
    
something leftover in the argument list after options have been parsed, i.e. after options and their arguments have been parsed and removed from the argument list. 

required option
    
an option that must be supplied on the command-line; note that the phrase “required option” is self-contradictory in English. [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") doesn’t prevent you from implementing required options, but doesn’t give you much help at it either.
For example, consider this hypothetical command-line:
```
prog -v --report report.txt foo bar