Title: Using LoggerAdapter.process Method in Python Logging
URL: https://docs.python.org/3/howto/logging-cookbook.html
Summary: The process() method of LoggerAdapter enhances logging output by adding contextual information. It receives the original message and keyword arguments, modifying them as needed before passing them to the underlying logger. The default implementation preserves the message while adding an 'extra' key linked to the adapter's dictionary, but any provided 'extra' keyword argument will take precedence.
---

```

The [`process()`](https://docs.python.org/3/library/logging.html#logging.LoggerAdapter.process "logging.LoggerAdapter.process") method of [`LoggerAdapter`](https://docs.python.org/3/library/logging.html#logging.LoggerAdapter "logging.LoggerAdapter") is where the contextual information is added to the logging output. It’s passed the message and keyword arguments of the logging call, and it passes back (potentially) modified versions of these to use in the call to the underlying logger. The default implementation of this method leaves the message alone, but inserts an ‘extra’ key in the keyword argument whose value is the dict-like object passed to the constructor. Of course, if you had passed an ‘extra’ keyword argument in the call to the adapter, it will be silently overwritten.
The advantage of using ‘extra’ is that the values in the dict-like object are merged into the [`LogRecord`](https://docs.python.org/3/library/logging.html#logging.LogRecord "logging.LogRecord") instance’s __dict__, allowing you to use customized strings with your [`Formatter`](https://docs.python.org/3/library/logging.html#logging.Formatter "logging.Formatter") instances which know about the keys of the dict-like object. If you need a different method, e.g. if you want to prepend or append the contextual information to the message string, you just need to subclass [`LoggerAdapter`](https://docs.python.org/3/library/logging.html#logging.LoggerAdapter "logging.LoggerAdapter") and override [`process()`](https://docs.python.org/3/library/logging.html#logging.LoggerAdapter.process "logging.LoggerAdapter.process") to do what you need. Here is a simple example:
```
classCustomAdapter(logging.LoggerAdapter):
"""
  This example adapter expects the passed in dict-like object to have a
  'connid' key, whose value in brackets is prepended to the log message.
  """
  defprocess(self, msg, kwargs):
    return '[%s] %s' % (self.extra['connid'], msg), kwargs

```

which you can use like this:
```
logger = logging.getLogger(__name__)
adapter = CustomAdapter(logger, {'connid': some_conn_id})

```

Then any events that you log to the adapter will have the value of `some_conn_id` prepended to the log messages.
#### Using objects other than dicts to pass contextual information[¶](https://docs.python.org/3/howto/logging-cookbook.html#using-objects-other-than-dicts-to-pass-contextual-information "Link to this heading")
You don’t need to pass an actual dict to a [`LoggerAdapter`](https://docs.python.org/3/library/logging.html#logging.LoggerAdapter "logging.LoggerAdapter") - you could pass an instance of a class which implements `__getitem__` and `__iter__` so that it looks like a dict to logging. This would be useful if you want to generate values dynamically (whereas the values in a dict would be constant).
### Using Filters to impart contextual information[¶](https://docs.python.org/3/howto/logging-cookbook.html#using-filters-to-impart-contextual-information "Link to this heading")
You can also add contextual information to log output using a user-defined [`Filter`](https://docs.python.org/3/library/logging.html#logging.Filter "logging.Filter"). `Filter` instances are allowed to modify the `LogRecords` passed to them, including adding additional attributes which can then be output using a suitable format string, or if needed a custom [`Formatter`](https://docs.python.org/3/library/logging.html#logging.Formatter "logging.Formatter").
For example in a web application, the request being processed (or at least, the interesting parts of it) can be stored in a threadlocal ([`threading.local`](https://docs.python.org/3/library/threading.html#threading.local "threading.local")) variable, and then accessed from a `Filter` to add, say, information from the request - say, the remote IP address and remote user’s username - to the `LogRecord`, using the attribute names ‘ip’ and ‘user’ as in the `LoggerAdapter` example above. In that case, the same format string can be used to get similar output to that shown above. Here’s an example script: