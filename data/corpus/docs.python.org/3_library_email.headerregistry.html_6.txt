Title: Email Header Registry Methods
URL: https://docs.python.org/3/library/email.headerregistry.html
Summary: This document section describes the `HeaderRegistry` class in Python's email library, highlighting its specific headers like `ContentTransferEncodingHeader` and `MessageIDHeader`. It outlines the methods including `map_to_type`, `__getitem__`, and `__call__`, which handle header mapping and class instantiation for creating header objects.
---

content-transfer-encoding:
    
> ContentTransferEncodingHeader 

message-id:
    
> MessageIDHeader
`HeaderRegistry` has the following methods: 

map_to_type(_self_ , _name_ , _cls_)[¶](https://docs.python.org/3/library/email.headerregistry.html#email.headerregistry.HeaderRegistry.map_to_type "Link to this definition")
    
_name_ is the name of the header to be mapped. It will be converted to lower case in the registry. _cls_ is the specialized class to be used, along with _base_class_ , to create the class used to instantiate headers that match _name_. 

__getitem__(_name_)[¶](https://docs.python.org/3/library/email.headerregistry.html#email.headerregistry.HeaderRegistry.__getitem__ "Link to this definition")
    
Construct and return a class to handle creating a _name_ header. 

__call__(_name_ , _value_)[¶](https://docs.python.org/3/library/email.headerregistry.html#email.headerregistry.HeaderRegistry.__call__ "Link to this definition")
    
Retrieves the specialized header associated with _name_ from the registry (using _default_class_ if _name_ does not appear in the registry) and composes it with _base_class_ to produce a class, calls the constructed class’s constructor, passing it the same argument list, and finally returns the class instance created thereby.
The following classes are the classes used to represent data parsed from structured headers and can, in general, be used by an application program to construct structured values to assign to specific headers. 

_class_ email.headerregistry.Address(_display_name =''_, _username =''_, _domain =''_, _addr_spec =None_)[¶](https://docs.python.org/3/library/email.headerregistry.html#email.headerregistry.Address "Link to this definition")
    
The class used to represent an email address. The general form of an address is:
```
[display_name] <username@domain>

```

or:
```
username@domain

```

where each part must conform to specific syntax rules spelled out in [**RFC 5322**](https://datatracker.ietf.org/doc/html/rfc5322.html).
As a convenience _addr_spec_ can be specified instead of _username_ and _domain_ , in which case _username_ and _domain_ will be parsed from the _addr_spec_. An _addr_spec_ must be a properly RFC quoted string; if it is not `Address` will raise an error. Unicode characters are allowed and will be property encoded when serialized. However, per the RFCs, unicode is _not_ allowed in the username portion of the address. 

display_name[¶](https://docs.python.org/3/library/email.headerregistry.html#email.headerregistry.Address.display_name "Link to this definition")
    
The display name portion of the address, if any, with all quoting removed. If the address does not have a display name, this attribute will be an empty string. 

username[¶](https://docs.python.org/3/library/email.headerregistry.html#email.headerregistry.Address.username "Link to this definition")
    
The `username` portion of the address, with all quoting removed. 

domain[¶](https://docs.python.org/3/library/email.headerregistry.html#email.headerregistry.Address.domain "Link to this definition")
    
The `domain` portion of the address. 

addr_spec[¶](https://docs.python.org/3/library/email.headerregistry.html#email.headerregistry.Address.addr_spec "Link to this definition")
    
The `username@domain` portion of the address, correctly quoted for use as a bare address (the second form shown above). This attribute is not mutable. 

__str__()[¶](https://docs.python.org/3/library/email.headerregistry.html#email.headerregistry.Address.__str__ "Link to this definition")
    
The `str` value of the object is the address quoted according to [**RFC 5322**](https://datatracker.ietf.org/doc/html/rfc5322.html) rules, but with no Content Transfer Encoding of any non-ASCII characters.
To support SMTP ([**RFC 5321**](https://datatracker.ietf.org/doc/html/rfc5321.html)), `Address` handles one special case: if `username` and `domain` are both the empty string (or `None`), then the string value of the `Address` is `<>`. 

_class_ email.headerregistry.Group(_display_name =None_, _addresses =None_)[¶](https://docs.python.org/3/library/email.headerregistry.html#email.headerregistry.Group "Link to this definition")
    
The class used to represent an address group. The general form of an address group is:
```
display_name: [address-list];