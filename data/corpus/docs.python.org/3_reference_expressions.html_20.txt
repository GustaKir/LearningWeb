Title: Shifting Operations in Python
URL: https://docs.python.org/3/reference/expressions.html
Summary: This section discusses the shifting operations in Python, which have lower priority than arithmetic operations. It describes the syntax for shifting expressions, the requirement for integer arguments, and the functionality of left and right shifts, including customization through the `__lshift__()` method.
---

"object.__sub__") and [`__rsub__()`](https://docs.python.org/3/reference/datamodel.html#object.__rsub__ "object.__rsub__") methods.
## 6.8. Shifting operations[¶](https://docs.python.org/3/reference/expressions.html#shifting-operations "Link to this heading")
The shifting operations have lower priority than the arithmetic operations:
```
**shift_expr** ::= [a_expr](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-a_expr) | [shift_expr](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-shift_expr) ("<<" | ">>") [a_expr](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-a_expr)

```

These operators accept integers as arguments. They shift the first argument to the left or right by the number of bits given by the second argument.
The left shift operation can be customized using the special [`__lshift__()`](https://docs.python.org/3/reference/datamodel.html#object.__lshift__ "object.__lshift__") and [`__rlshift__()`](https://docs.python.org/3/reference/datamodel.html#object.__rlshift__ "object.__rlshift__") methods. The right shift operation can be customized using the special [`__rshift__()`](https://docs.python.org/3/reference/datamodel.html#object.__rshift__ "object.__rshift__") and [`__rrshift__()`](https://docs.python.org/3/reference/datamodel.html#object.__rrshift__ "object.__rrshift__") methods.
A right shift by _n_ bits is defined as floor division by `pow(2,n)`. A left shift by _n_ bits is defined as multiplication with `pow(2,n)`.
## 6.9. Binary bitwise operations[¶](https://docs.python.org/3/reference/expressions.html#binary-bitwise-operations "Link to this heading")
Each of the three bitwise operations has a different priority level:
```
**and_expr** ::= [shift_expr](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-shift_expr) | [and_expr](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-and_expr) "&" [shift_expr](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-shift_expr)
**xor_expr** ::= [and_expr](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-and_expr) | [xor_expr](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-xor_expr) "^" [and_expr](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-and_expr)
**or_expr** ::= [xor_expr](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-xor_expr) | [or_expr](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-or_expr) "|" [xor_expr](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-xor_expr)

```

The `&` operator yields the bitwise AND of its arguments, which must be integers or one of them must be a custom object overriding [`__and__()`](https://docs.python.org/3/reference/datamodel.html#object.__and__ "object.__and__") or [`__rand__()`](https://docs.python.org/3/reference/datamodel.html#object.__rand__ "object.__rand__") special methods.
The `^` operator yields the bitwise XOR (exclusive OR) of its arguments, which must be integers or one of them must be a custom object overriding [`__xor__()`](https://docs.python.org/3/reference/datamodel.html#object.__xor__ "object.__xor__") or [`__rxor__()`](https://docs.python.org/3/reference/datamodel.html#object.__rxor__ "object.__rxor__") special methods.
The `|` operator yields the bitwise (inclusive) OR of its arguments, which must be integers or one of them must be a custom object overriding [`__or__()`](https://docs.python.org/3/reference/datamodel.html#object.__or__ "object.__or__") or [`__ror__()`](https://docs.python.org/3/reference/datamodel.html#object.__ror__ "object.__ror__") special methods.
## 6.10. Comparisons[¶](https://docs.python.org/3/reference/expressions.html#comparisons "Link to this heading")
Unlike C, all comparison operations in Python have the same priority, which is lower than that of any arithmetic, shifting or bitwise operation. Also unlike C, expressions like `a < b < c` have the interpretation that is conventional in mathematics:
```
**comparison**  ::= [or_expr](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-or_expr) ([comp_operator](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-comp_operator) [or_expr](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-or_expr))*
**comp_operator** ::= "<" | ">" | "==" | ">=" | "<=" | "!="
         | "is" ["not"] | ["not"] "in"