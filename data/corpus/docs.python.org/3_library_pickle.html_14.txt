Title: Using __reduce_ex__ for Pickling
URL: https://docs.python.org/3/library/pickle.html
Summary: This section describes the use of the __reduce_ex__() method in Python's pickle module, which allows for protocol-specific object serialization. It explains that this method, taking a single integer for the protocol version, is preferred over the __reduce__() method and provides compatibility with older Python versions for object persistence.
---

object.__reduce_ex__(_protocol_)[¶](https://docs.python.org/3/library/pickle.html#object.__reduce_ex__ "Link to this definition")
    
Alternatively, a [`__reduce_ex__()`](https://docs.python.org/3/library/pickle.html#object.__reduce_ex__ "object.__reduce_ex__") method may be defined. The only difference is this method should take a single integer argument, the protocol version. When defined, pickle will prefer it over the [`__reduce__()`](https://docs.python.org/3/library/pickle.html#object.__reduce__ "object.__reduce__") method. In addition, [`__reduce__()`](https://docs.python.org/3/library/pickle.html#object.__reduce__ "object.__reduce__") automatically becomes a synonym for the extended version. The main use for this method is to provide backwards-compatible reduce values for older Python releases.
### Persistence of External Objects[¶](https://docs.python.org/3/library/pickle.html#persistence-of-external-objects "Link to this heading")
For the benefit of object persistence, the [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "pickle: Convert Python objects to streams of bytes and back.") module supports the notion of a reference to an object outside the pickled data stream. Such objects are referenced by a persistent ID, which should be either a string of alphanumeric characters (for protocol 0) [[5]](https://docs.python.org/3/library/pickle.html#id11) or just an arbitrary object (for any newer protocol).
The resolution of such persistent IDs is not defined by the [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "pickle: Convert Python objects to streams of bytes and back.") module; it will delegate this resolution to the user-defined methods on the pickler and unpickler, [`persistent_id()`](https://docs.python.org/3/library/pickle.html#pickle.Pickler.persistent_id "pickle.Pickler.persistent_id") and [`persistent_load()`](https://docs.python.org/3/library/pickle.html#pickle.Unpickler.persistent_load "pickle.Unpickler.persistent_load") respectively.
To pickle objects that have an external persistent ID, the pickler must have a custom [`persistent_id()`](https://docs.python.org/3/library/pickle.html#pickle.Pickler.persistent_id "pickle.Pickler.persistent_id") method that takes an object as an argument and returns either `None` or the persistent ID for that object. When `None` is returned, the pickler simply pickles the object as normal. When a persistent ID string is returned, the pickler will pickle that object, along with a marker so that the unpickler will recognize it as a persistent ID.
To unpickle external objects, the unpickler must have a custom [`persistent_load()`](https://docs.python.org/3/library/pickle.html#pickle.Unpickler.persistent_load "pickle.Unpickler.persistent_load") method that takes a persistent ID object and returns the referenced object.
Here is a comprehensive example presenting how persistent ID can be used to pickle external objects by reference.