Title: wsgiref.util.shift_path_info Function
URL: https://docs.python.org/3/library/wsgiref.html
Summary: The `shift_path_info` function modifies the `_environ_` dictionary by shifting a name from `PATH_INFO` to `SCRIPT_NAME` and returns the shifted name. If no path segments remain, it returns `None`. This function is typically used for processing request URI paths, allowing a WSGI application to operate on a hierarchical URI structure.
---

wsgiref.util.shift_path_info(_environ_)[¶](https://docs.python.org/3/library/wsgiref.html#wsgiref.util.shift_path_info "Link to this definition")
    
Shift a single name from `PATH_INFO` to `SCRIPT_NAME` and return the name. The _environ_ dictionary is _modified_ in-place; use a copy if you need to keep the original `PATH_INFO` or `SCRIPT_NAME` intact.
If there are no remaining path segments in `PATH_INFO`, `None` is returned.
Typically, this routine is used to process each portion of a request URI path, for example to treat the path as a series of dictionary keys. This routine modifies the passed-in environment to make it suitable for invoking another WSGI application that is located at the target URI. For example, if there is a WSGI application at `/foo`, and the request URI path is `/foo/bar/baz`, and the WSGI application at `/foo` calls [`shift_path_info()`](https://docs.python.org/3/library/wsgiref.html#wsgiref.util.shift_path_info "wsgiref.util.shift_path_info"), it will receive the string “bar”, and the environment will be updated to be suitable for passing to a WSGI application at `/foo/bar`. That is, `SCRIPT_NAME` will change from `/foo` to `/foo/bar`, and `PATH_INFO` will change from `/bar/baz` to `/baz`.
When `PATH_INFO` is just a “/”, this routine returns an empty string and appends a trailing slash to `SCRIPT_NAME`, even though empty path segments are normally ignored, and `SCRIPT_NAME` doesn’t normally end in a slash. This is intentional behavior, to ensure that an application can tell the difference between URIs ending in `/x` from ones ending in `/x/` when using this routine to do object traversal. 

wsgiref.util.setup_testing_defaults(_environ_)[¶](https://docs.python.org/3/library/wsgiref.html#wsgiref.util.setup_testing_defaults "Link to this definition")
    
Update _environ_ with trivial defaults for testing purposes.
This routine adds various parameters required for WSGI, including `HTTP_HOST`, `SERVER_NAME`, `SERVER_PORT`, `REQUEST_METHOD`, `SCRIPT_NAME`, `PATH_INFO`, and all of the [**PEP 3333**](https://peps.python.org/pep-3333/)-defined `wsgi.*` variables. It only supplies default values, and does not replace any existing settings for these variables.
This routine is intended to make it easier for unit tests of WSGI servers and applications to set up dummy environments. It should NOT be used by actual WSGI servers or applications, since the data is fake!
Example usage (see also [`demo_app()`](https://docs.python.org/3/library/wsgiref.html#wsgiref.simple_server.demo_app "wsgiref.simple_server.demo_app") for another example):
```
fromwsgiref.utilimport setup_testing_defaults
fromwsgiref.simple_serverimport make_server
# A relatively simple WSGI application. It's going to print out the
# environment dictionary after being updated by setup_testing_defaults
defsimple_app(environ, start_response):
  setup_testing_defaults(environ)
  status = '200 OK'
  headers = [('Content-type', 'text/plain; charset=utf-8')]
  start_response(status, headers)
  ret = [("%s: %s\n" % (key, value)).encode("utf-8")
      for key, value in environ.items()]
  return ret
with make_server('', 8000, simple_app) as httpd:
  print("Serving on port 8000...")
  httpd.serve_forever()

```

In addition to the environment functions above, the [`wsgiref.util`](https://docs.python.org/3/library/wsgiref.html#module-wsgiref.util "wsgiref.util: WSGI environment utilities.") module also provides these miscellaneous utilities: 

wsgiref.util.is_hop_by_hop(_header_name_)[¶](https://docs.python.org/3/library/wsgiref.html#wsgiref.util.is_hop_by_hop "Link to this definition")
    
Return `True` if ‘header_name’ is an HTTP/1.1 “Hop-by-Hop” header, as defined by [**RFC 2616**](https://datatracker.ietf.org/doc/html/rfc2616.html). 

_class_ wsgiref.util.FileWrapper(_filelike_ , _blksize =8192_)[¶](https://docs.python.org/3/library/wsgiref.html#wsgiref.util.FileWrapper "Link to this definition")
    
A concrete implementation of the [`wsgiref.types.FileWrapper`](https://docs.python.org/3/library/wsgiref.html#wsgiref.types.FileWrapper "wsgiref.types.FileWrapper") protocol used to convert a file-like object to an [iterator](https://docs.python.org/3/glossary.html#term-iterator). The resulting objects are [iterable](https://docs.python.org/3/glossary.html#term-iterable)s. As the object is iterated over, the optional _blksize_ parameter will be repeatedly passed to the _filelike_ object’s `read()` method to obtain bytestrings to yield. When `read()` returns an empty bytestring, iteration is ended and is not resumable.
If _filelike_ has a `close()` method, the returned object will also have a `close()` method, and it will invoke the _filelike_ object’s `close()` method when called.
Example usage: