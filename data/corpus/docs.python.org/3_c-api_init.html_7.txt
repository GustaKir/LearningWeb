Title: Py_FinalizeEx Function
URL: https://docs.python.org/3/c-api/init.html
Summary: The `Py_FinalizeEx()` function undoes initializations made by `Py_Initialize()` and destroys any created sub-interpreters. It aims to free all memory allocated by the Python interpreter and is a no-op if called consecutively without re-initialization.
---

intPy_FinalizeEx()[¶](https://docs.python.org/3/c-api/init.html#c.Py_FinalizeEx "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.6._
Undo all initializations made by [`Py_Initialize()`](https://docs.python.org/3/c-api/init.html#c.Py_Initialize "Py_Initialize") and subsequent use of Python/C API functions, and destroy all sub-interpreters (see [`Py_NewInterpreter()`](https://docs.python.org/3/c-api/init.html#c.Py_NewInterpreter "Py_NewInterpreter") below) that were created and not yet destroyed since the last call to [`Py_Initialize()`](https://docs.python.org/3/c-api/init.html#c.Py_Initialize "Py_Initialize"). Ideally, this frees all memory allocated by the Python interpreter. This is a no-op when called for a second time (without calling [`Py_Initialize()`](https://docs.python.org/3/c-api/init.html#c.Py_Initialize "Py_Initialize") again first).
Since this is the reverse of [`Py_Initialize()`](https://docs.python.org/3/c-api/init.html#c.Py_Initialize "Py_Initialize"), it should be called in the same thread with the same interpreter active. That means the main thread and the main interpreter. This should never be called while [`Py_RunMain()`](https://docs.python.org/3/c-api/init.html#c.Py_RunMain "Py_RunMain") is running.
Normally the return value is `0`. If there were errors during finalization (flushing buffered data), `-1` is returned.
This function is provided for a number of reasons. An embedding application might want to restart Python without having to restart the application itself. An application that has loaded the Python interpreter from a dynamically loadable library (or DLL) might want to free all memory allocated by Python before unloading the DLL. During a hunt for memory leaks in an application a developer might want to free all memory allocated by Python before exiting from the application.
**Bugs and caveats:** The destruction of modules and objects in modules is done in random order; this may cause destructors ([`__del__()`](https://docs.python.org/3/reference/datamodel.html#object.__del__ "object.__del__") methods) to fail when they depend on other objects (even functions) or modules. Dynamically loaded extension modules loaded by Python are not unloaded. Small amounts of memory allocated by the Python interpreter may not be freed (if you find a leak, please report it). Memory tied up in circular references between objects is not freed. Some memory allocated by extension modules may not be freed. Some extensions may not work properly if their initialization routine is called more than once; this can happen if an application calls [`Py_Initialize()`](https://docs.python.org/3/c-api/init.html#c.Py_Initialize "Py_Initialize") and [`Py_FinalizeEx()`](https://docs.python.org/3/c-api/init.html#c.Py_FinalizeEx "Py_FinalizeEx") more than once.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `cpython._PySys_ClearAuditHooks` with no arguments.
Added in version 3.6. 

voidPy_Finalize()[¶](https://docs.python.org/3/c-api/init.html#c.Py_Finalize "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
This is a backwards-compatible version of [`Py_FinalizeEx()`](https://docs.python.org/3/c-api/init.html#c.Py_FinalizeEx "Py_FinalizeEx") that disregards the return value. 

intPy_BytesMain(intargc, char**argv)[¶](https://docs.python.org/3/c-api/init.html#c.Py_BytesMain "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.8._
Similar to [`Py_Main()`](https://docs.python.org/3/c-api/init.html#c.Py_Main "Py_Main") but _argv_ is an array of bytes strings, allowing the calling application to delegate the text decoding step to the CPython runtime.
Added in version 3.8.