Title: Argument Group Parameters in argparse
URL: https://docs.python.org/3/library/argparse.html
Summary: This section discusses the optional parameters 'argument_default' and 'conflict_handler' for controlling argument group behavior in Python's argparse library. It notes that these parameters apply specifically to argument groups and addresses the deprecation of the 'add_argument_group()' method in version 3.11.
---

```

The optional, keyword-only parameters [argument_default](https://docs.python.org/3/library/argparse.html#argument-default) and [conflict_handler](https://docs.python.org/3/library/argparse.html#conflict-handler) allow for finer-grained control of the behavior of the argument group. These parameters have the same meaning as in the [`ArgumentParser`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser "argparse.ArgumentParser") constructor, but apply specifically to the argument group rather than the entire parser.
Note that any arguments not in your user-defined groups will end up back in the usual “positional arguments” and “optional arguments” sections.
Changed in version 3.11: Calling [`add_argument_group()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument_group "argparse.ArgumentParser.add_argument_group") on an argument group is deprecated. This feature was never supported and does not always work correctly. The function exists on the API by accident through inheritance and will be removed in the future.
### Mutual exclusion[¶](https://docs.python.org/3/library/argparse.html#mutual-exclusion "Link to this heading") 

ArgumentParser.add_mutually_exclusive_group(_required =False_)[¶](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_mutually_exclusive_group "Link to this definition")
    
Create a mutually exclusive group. `argparse` will make sure that only one of the arguments in the mutually exclusive group was present on the command line:
>>>```
>>> parser = argparse.ArgumentParser(prog='PROG')
>>> group = parser.add_mutually_exclusive_group()
>>> group.add_argument('--foo', action='store_true')
>>> group.add_argument('--bar', action='store_false')
>>> parser.parse_args(['--foo'])
Namespace(bar=True, foo=True)
>>> parser.parse_args(['--bar'])
Namespace(bar=False, foo=False)
>>> parser.parse_args(['--foo', '--bar'])
usage: PROG [-h] [--foo | --bar]
PROG: error: argument --bar: not allowed with argument --foo

```

The [`add_mutually_exclusive_group()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_mutually_exclusive_group "argparse.ArgumentParser.add_mutually_exclusive_group") method also accepts a _required_ argument, to indicate that at least one of the mutually exclusive arguments is required:
>>>```
>>> parser = argparse.ArgumentParser(prog='PROG')
>>> group = parser.add_mutually_exclusive_group(required=True)
>>> group.add_argument('--foo', action='store_true')
>>> group.add_argument('--bar', action='store_false')
>>> parser.parse_args([])
usage: PROG [-h] (--foo | --bar)
PROG: error: one of the arguments --foo --bar is required

```

Note that currently mutually exclusive argument groups do not support the _title_ and _description_ arguments of [`add_argument_group()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument_group "argparse.ArgumentParser.add_argument_group"). However, a mutually exclusive group can be added to an argument group that has a title and description. For example:
>>>```
>>> parser = argparse.ArgumentParser(prog='PROG')
>>> group = parser.add_argument_group('Group title', 'Group description')
>>> exclusive_group = group.add_mutually_exclusive_group(required=True)
>>> exclusive_group.add_argument('--foo', help='foo help')
>>> exclusive_group.add_argument('--bar', help='bar help')
>>> parser.print_help()
usage: PROG [-h] (--foo FOO | --bar BAR)
options:
 -h, --help show this help message and exit
Group title:
 Group description
 --foo FOO  foo help
 --bar BAR  bar help