Title: Updates to Garbage Collection Functions in Python
URL: https://docs.python.org/3/whatsnew/2.2.html
Summary: This document outlines changes related to garbage collection in Python, including the introduction of `PyObject_GC_New()` and `PyObject_GC_NewVar()` for allocation, renaming of functions to `PyObject_GC_Track()` and `PyObject_GC_UnTrack()`, and the removal of `PyGC_HEAD_SIZE` from size calculations. Additionally, a new `et` format sequence was added to `PyArg_ParseTuple()`.
---

Use [`PyObject_GC_New()`](https://docs.python.org/3/c-api/gcsupport.html#c.PyObject_GC_New "PyObject_GC_New") or [`PyObject_GC_NewVar()`](https://docs.python.org/3/c-api/gcsupport.html#c.PyObject_GC_NewVar "PyObject_GC_NewVar") to allocate
    
objects, and [`PyObject_GC_Del()`](https://docs.python.org/3/c-api/gcsupport.html#c.PyObject_GC_Del "PyObject_GC_Del") to deallocate them.
  * Rename `PyObject_GC_Init()` to [`PyObject_GC_Track()`](https://docs.python.org/3/c-api/gcsupport.html#c.PyObject_GC_Track "PyObject_GC_Track") and `PyObject_GC_Fini()` to [`PyObject_GC_UnTrack()`](https://docs.python.org/3/c-api/gcsupport.html#c.PyObject_GC_UnTrack "PyObject_GC_UnTrack").
  * Remove `PyGC_HEAD_SIZE` from object size calculations.
  * Remove calls to `PyObject_AS_GC()` and `PyObject_FROM_GC()`.
  * A new `et` format sequence was added to [`PyArg_ParseTuple()`](https://docs.python.org/3/c-api/arg.html#c.PyArg_ParseTuple "PyArg_ParseTuple"); `et` takes both a parameter and an encoding name, and converts the parameter to the given encoding if the parameter turns out to be a Unicode string, or leaves it alone if it’s an 8-bit string, assuming it to already be in the desired encoding. This differs from the `es` format character, which assumes that 8-bit strings are in Python’s default ASCII encoding and converts them to the specified new encoding. (Contributed by M.-A. Lemburg, and used for the MBCS support on Windows described in the following section.)
  * A different argument parsing function, [`PyArg_UnpackTuple()`](https://docs.python.org/3/c-api/arg.html#c.PyArg_UnpackTuple "PyArg_UnpackTuple"), has been added that’s simpler and presumably faster. Instead of specifying a format string, the caller simply gives the minimum and maximum number of arguments expected, and a set of pointers to [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")* variables that will be filled in with argument values.
  * Two new flags [`METH_NOARGS`](https://docs.python.org/3/c-api/structures.html#c.METH_NOARGS "METH_NOARGS") and [`METH_O`](https://docs.python.org/3/c-api/structures.html#c.METH_O "METH_O") are available in method definition tables to simplify implementation of methods with no arguments or a single untyped argument. Calling such methods is more efficient than calling a corresponding method that uses [`METH_VARARGS`](https://docs.python.org/3/c-api/structures.html#c.METH_VARARGS "METH_VARARGS"). Also, the old `METH_OLDARGS` style of writing C methods is now officially deprecated.
  * Two new wrapper functions, [`PyOS_snprintf()`](https://docs.python.org/3/c-api/conversion.html#c.PyOS_snprintf "PyOS_snprintf") and [`PyOS_vsnprintf()`](https://docs.python.org/3/c-api/conversion.html#c.PyOS_vsnprintf "PyOS_vsnprintf") were added to provide cross-platform implementations for the relatively new `snprintf()` and `vsnprintf()` C lib APIs. In contrast to the standard `sprintf()` and `vsprintf()` functions, the Python versions check the bounds of the buffer used to protect against buffer overruns. (Contributed by M.-A. Lemburg.)
  * The [`_PyTuple_Resize()`](https://docs.python.org/3/c-api/tuple.html#c._PyTuple_Resize "_PyTuple_Resize") function has lost an unused parameter, so now it takes 2 parameters instead of 3. The third argument was never used, and can simply be discarded when porting code from earlier versions to Python 2.2.