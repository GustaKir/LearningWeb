Title: XML DOM Node Methods
URL: https://docs.python.org/3/library/xml.dom.html
Summary: This section describes two methods of the XML DOM Node interface: isSameNode, which checks if another node is the same as the current one, and appendChild, which adds a new child node to the end of the current node's children, removing it from the tree if it was already present.
---

Node.isSameNode(_other_)[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.isSameNode "Link to this definition")
    
Return `True` if _other_ refers to the same node as this node. This is especially useful for DOM implementations which use any sort of proxy architecture (because more than one object can refer to the same node).
Note
This is based on a proposed DOM Level 3 API which is still in the “working draft” stage, but this particular interface appears uncontroversial. Changes from the W3C will not necessarily affect this method in the Python DOM interface (though any new W3C API for this would also be supported). 

Node.appendChild(_newChild_)[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.appendChild "Link to this definition")
    
Add a new child node to this node at the end of the list of children, returning _newChild_. If the node was already in the tree, it is removed first. 

Node.insertBefore(_newChild_ , _refChild_)[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.insertBefore "Link to this definition")
    
Insert a new child node before an existing child. It must be the case that _refChild_ is a child of this node; if not, [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised. _newChild_ is returned. If _refChild_ is `None`, it inserts _newChild_ at the end of the children’s list. 

Node.removeChild(_oldChild_)[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.removeChild "Link to this definition")
    
Remove a child node. _oldChild_ must be a child of this node; if not, [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised. _oldChild_ is returned on success. If _oldChild_ will not be used further, its `unlink()` method should be called. 

Node.replaceChild(_newChild_ , _oldChild_)[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.replaceChild "Link to this definition")
    
Replace an existing node with a new node. It must be the case that _oldChild_ is a child of this node; if not, [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised. 

Node.normalize()[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.normalize "Link to this definition")
    
Join adjacent text nodes so that all stretches of text are stored as single `Text` instances. This simplifies processing text from a DOM tree for many applications. 

Node.cloneNode(_deep_)[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.Node.cloneNode "Link to this definition")
    
Clone this node. Setting _deep_ means to clone all child nodes as well. This returns the clone.
### NodeList Objects[¶](https://docs.python.org/3/library/xml.dom.html#nodelist-objects "Link to this heading")
A `NodeList` represents a sequence of nodes. These objects are used in two ways in the DOM Core recommendation: an `Element` object provides one as its list of child nodes, and the `getElementsByTagName()` and `getElementsByTagNameNS()` methods of `Node` return objects with this interface to represent query results.
The DOM Level 2 recommendation defines one method and one attribute for these objects: 

NodeList.item(_i_)[¶](https://docs.python.org/3/library/xml.dom.html#xml.dom.NodeList.item "Link to this definition")
    
Return the _i_ ’th item from the sequence, if there is one, or `None`. The index _i_ is not allowed to be less than zero or greater than or equal to the length of the sequence.