Title: Monitoring Events in Python
URL: https://docs.python.org/3/library/sys.monitoring.html
Summary: This section outlines the categorization of events in Python's monitoring system, specifically focusing on local events that can occur during program execution at defined locations. Local events such as PY_START, PY_RESUME, PY_RETURN, PY_YIELD, CALL, LINE, and INSTRUCTION can be disabled.
---

```
if get_events(DEBUGGER_ID) == NO_EVENTS:
  ...

```

Events are divided into three groups:
### Local events[¶](https://docs.python.org/3/library/sys.monitoring.html#local-events "Link to this heading")
Local events are associated with normal execution of the program and happen at clearly defined locations. All local events can be disabled. The local events are:
  * [`PY_START`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-PY_START)
  * [`PY_RESUME`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-PY_RESUME)
  * [`PY_RETURN`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-PY_RETURN)
  * [`PY_YIELD`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-PY_YIELD)
  * [`CALL`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-CALL)
  * [`LINE`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-LINE)
  * [`INSTRUCTION`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-INSTRUCTION)
  * [`JUMP`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-JUMP)
  * [`BRANCH`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-BRANCH)
  * [`STOP_ITERATION`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-STOP_ITERATION)


### Ancillary events[¶](https://docs.python.org/3/library/sys.monitoring.html#ancillary-events "Link to this heading")
Ancillary events can be monitored like other events, but are controlled by another event:
  * [`C_RAISE`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-C_RAISE)
  * [`C_RETURN`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-C_RETURN)


The [`C_RETURN`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-C_RETURN) and [`C_RAISE`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-C_RAISE) events are controlled by the [`CALL`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-CALL) event. [`C_RETURN`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-C_RETURN) and [`C_RAISE`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-C_RAISE) events will only be seen if the corresponding [`CALL`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-CALL) event is being monitored.
### Other events[¶](https://docs.python.org/3/library/sys.monitoring.html#other-events "Link to this heading")
Other events are not necessarily tied to a specific location in the program and cannot be individually disabled.
The other events that can be monitored are:
  * [`PY_THROW`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-PY_THROW)
  * [`PY_UNWIND`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-PY_UNWIND)
  * [`RAISE`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-RAISE)
  * [`EXCEPTION_HANDLED`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-EXCEPTION_HANDLED)


### The STOP_ITERATION event[¶](https://docs.python.org/3/library/sys.monitoring.html#the-stop-iteration-event "Link to this heading")
[**PEP 380**](https://peps.python.org/pep-0380/#use-of-stopiteration-to-return-values) specifies that a [`StopIteration`](https://docs.python.org/3/library/exceptions.html#StopIteration "StopIteration") exception is raised when returning a value from a generator or coroutine. However, this is a very inefficient way to return a value, so some Python implementations, notably CPython 3.12+, do not raise an exception unless it would be visible to other code.
To allow tools to monitor for real exceptions without slowing down generators and coroutines, the [`STOP_ITERATION`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-STOP_ITERATION) event is provided. [`STOP_ITERATION`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-STOP_ITERATION) can be locally disabled, unlike [`RAISE`](https://docs.python.org/3/library/sys.monitoring.html#monitoring-event-RAISE).
## Turning events on and off[¶](https://docs.python.org/3/library/sys.monitoring.html#turning-events-on-and-off "Link to this heading")
In order to monitor an event, it must be turned on and a corresponding callback must be registered. Events can be turned on or off by setting the events either globally or for a particular code object.
### Setting events globally[¶](https://docs.python.org/3/library/sys.monitoring.html#setting-events-globally "Link to this heading")
Events can be controlled globally by modifying the set of events being monitored.