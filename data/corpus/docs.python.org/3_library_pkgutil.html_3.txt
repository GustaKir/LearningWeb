Title: pkgutil Module Overview
URL: https://docs.python.org/3/library/pkgutil.html
Summary: The pkgutil module provides utilities for package management in Python. It requires a finder with an 'iter_modules()' method, with implementations available for FileFinder and zipimporter. Updated in version 3.3 to use importlib, it includes functions such as pkgutil.get_data for retrieving resources from packages.
---

```

Note
Only works for a [finder](https://docs.python.org/3/glossary.html#term-finder) which defines an `iter_modules()` method. This interface is non-standard, so the module also provides implementations for [`importlib.machinery.FileFinder`](https://docs.python.org/3/library/importlib.html#importlib.machinery.FileFinder "importlib.machinery.FileFinder") and [`zipimport.zipimporter`](https://docs.python.org/3/library/zipimport.html#zipimport.zipimporter "zipimport.zipimporter").
Changed in version 3.3: Updated to be based directly on [`importlib`](https://docs.python.org/3/library/importlib.html#module-importlib "importlib: The implementation of the import machinery.") rather than relying on the package internal [**PEP 302**](https://peps.python.org/pep-0302/) import emulation. 

pkgutil.get_data(_package_ , _resource_)[Â¶](https://docs.python.org/3/library/pkgutil.html#pkgutil.get_data "Link to this definition")
    
Get a resource from a package.
This is a wrapper for the [loader](https://docs.python.org/3/glossary.html#term-loader) [`get_data`](https://docs.python.org/3/library/importlib.html#importlib.abc.ResourceLoader.get_data "importlib.abc.ResourceLoader.get_data") API. The _package_ argument should be the name of a package, in standard module format (`foo.bar`). The _resource_ argument should be in the form of a relative filename, using `/` as the path separator. The parent directory name `..` is not allowed, and nor is a rooted name (starting with a `/`).
The function returns a binary string that is the contents of the specified resource.
For packages located in the filesystem, which have already been imported, this is the rough equivalent of:
```
d = os.path.dirname(sys.modules[package].__file__)
data = open(os.path.join(d, resource), 'rb').read()