Title: Python Standard Types Documentation
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This document discusses changes and methods related to Python's standard types, specifically focusing on the integer methods `as_integer_ratio()` and `is_integer()`, with version history detailing when these features were added. It also introduces additional methods related to the float type.
---

```

Added in version 3.2.
Changed in version 3.11: Added default argument value for `byteorder`. 

int.as_integer_ratio()[¶](https://docs.python.org/3/library/stdtypes.html#int.as_integer_ratio "Link to this definition")
    
Return a pair of integers whose ratio is equal to the original integer and has a positive denominator. The integer ratio of integers (whole numbers) is always the integer as the numerator and `1` as the denominator.
Added in version 3.8. 

int.is_integer()[¶](https://docs.python.org/3/library/stdtypes.html#int.is_integer "Link to this definition")
    
Returns `True`. Exists for duck type compatibility with [`float.is_integer()`](https://docs.python.org/3/library/stdtypes.html#float.is_integer "float.is_integer").
Added in version 3.12.
### Additional Methods on Float[¶](https://docs.python.org/3/library/stdtypes.html#additional-methods-on-float "Link to this heading")
The float type implements the [`numbers.Real`](https://docs.python.org/3/library/numbers.html#numbers.Real "numbers.Real") [abstract base class](https://docs.python.org/3/glossary.html#term-abstract-base-class). float also has the following additional methods. 

float.as_integer_ratio()[¶](https://docs.python.org/3/library/stdtypes.html#float.as_integer_ratio "Link to this definition")
    
Return a pair of integers whose ratio is exactly equal to the original float. The ratio is in lowest terms and has a positive denominator. Raises [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError") on infinities and a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") on NaNs. 

float.is_integer()[¶](https://docs.python.org/3/library/stdtypes.html#float.is_integer "Link to this definition")
    
Return `True` if the float instance is finite with integral value, and `False` otherwise:
>>>```
>>> (-2.0).is_integer()
True
>>> (3.2).is_integer()
False

```

Two methods support conversion to and from hexadecimal strings. Since Python’s floats are stored internally as binary numbers, converting a float to or from a _decimal_ string usually involves a small rounding error. In contrast, hexadecimal strings allow exact representation and specification of floating-point numbers. This can be useful when debugging, and in numerical work. 

float.hex()[¶](https://docs.python.org/3/library/stdtypes.html#float.hex "Link to this definition")
    
Return a representation of a floating-point number as a hexadecimal string. For finite floating-point numbers, this representation will always include a leading `0x` and a trailing `p` and exponent. 

_classmethod_ float.fromhex(_s_)[¶](https://docs.python.org/3/library/stdtypes.html#float.fromhex "Link to this definition")
    
Class method to return the float represented by a hexadecimal string _s_. The string _s_ may have leading and trailing whitespace.
Note that [`float.hex()`](https://docs.python.org/3/library/stdtypes.html#float.hex "float.hex") is an instance method, while [`float.fromhex()`](https://docs.python.org/3/library/stdtypes.html#float.fromhex "float.fromhex") is a class method.
A hexadecimal string takes the form:
```
[sign] ['0x'] integer ['.' fraction] ['p' exponent]

```

where the optional `sign` may by either `+` or `-`, `integer` and `fraction` are strings of hexadecimal digits, and `exponent` is a decimal integer with an optional leading sign. Case is not significant, and there must be at least one hexadecimal digit in either the integer or the fraction. This syntax is similar to the syntax specified in section 6.4.4.2 of the C99 standard, and also to the syntax used in Java 1.5 onwards. In particular, the output of [`float.hex()`](https://docs.python.org/3/library/stdtypes.html#float.hex "float.hex") is usable as a hexadecimal floating-point literal in C or Java code, and hexadecimal strings produced by C’s `%a` format character or Java’s `Double.toHexString` are accepted by [`float.fromhex()`](https://docs.python.org/3/library/stdtypes.html#float.fromhex "float.fromhex").
Note that the exponent is written in decimal rather than hexadecimal, and that it gives the power of 2 by which to multiply the coefficient. For example, the hexadecimal string `0x3.a7p10` represents the floating-point number `(3 + 10./16 + 7./16**2) * 2.0**10`, or `3740.0`:
>>>```
>>> float.fromhex('0x3.a7p10')
3740.0

```

Applying the reverse conversion to `3740.0` gives a different hexadecimal string representing the same number:
>>>```
>>> float.hex(3740.0)
'0x1.d380000000000p+11'