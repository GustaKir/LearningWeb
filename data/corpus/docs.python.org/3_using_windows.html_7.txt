Title: Embedding Python in Native Applications
URL: https://docs.python.org/3/using/windows.html
Summary: This section discusses the use of the embedded Python distribution in applications written in native code for scripting purposes. It explains that most of the application is in native code, with parts that invoke `python.exe` or use `python3.dll`. It emphasizes the simplicity of including Python by extracting the embedded distribution to a subdirectory and highlights the flexibility in specifying search paths for package installation.
---

ath before launching the application.
### 4.4.2. Embedding Python[¶](https://docs.python.org/3/using/windows.html#embedding-python "Link to this heading")
Applications written in native code often require some form of scripting language, and the embedded Python distribution can be used for this purpose. In general, the majority of the application is in native code, and some part will either invoke `python.exe` or directly use `python3.dll`. For either case, extracting the embedded distribution to a subdirectory of the application installation is sufficient to provide a loadable Python interpreter.
As with the application use, packages can be installed to any location as there is an opportunity to specify search paths before initializing the interpreter. Otherwise, there is no fundamental differences between using the embedded distribution and a regular installation.
## 4.5. Alternative bundles[¶](https://docs.python.org/3/using/windows.html#alternative-bundles "Link to this heading")
Besides the standard CPython distribution, there are modified packages including additional functionality. The following is a list of popular versions and their key features: 

[ActivePython](https://www.activestate.com/products/python/)
    
Installer with multi-platform compatibility, documentation, PyWin32 

[Anaconda](https://www.anaconda.com/download/)
    
Popular scientific modules (such as numpy, scipy and pandas) and the `conda` package manager. 

[Enthought Deployment Manager](https://assets.enthought.com/downloads/edm/)
    
“The Next Generation Python Environment and Package Manager”.
Previously Enthought provided Canopy, but it [reached end of life in 2016](https://support.enthought.com/hc/en-us/articles/360038600051-Canopy-GUI-end-of-life-transition-to-the-Enthought-Deployment-Manager-EDM-and-Visual-Studio-Code). 

[WinPython](https://winpython.github.io/)
    
Windows-specific distribution with prebuilt scientific packages and tools for building packages.
Note that these packages may not include the latest versions of Python or other libraries, and are not maintained or supported by the core Python team.
## 4.6. Configuring Python[¶](https://docs.python.org/3/using/windows.html#configuring-python "Link to this heading")
To run Python conveniently from a command prompt, you might consider changing some default environment variables in Windows. While the installer provides an option to configure the PATH and PATHEXT variables for you, this is only reliable for a single, system-wide installation. If you regularly use multiple versions of Python, consider using the [Python Launcher for Windows](https://docs.python.org/3/using/windows.html#launcher).
### 4.6.1. Excursus: Setting environment variables[¶](https://docs.python.org/3/using/windows.html#excursus-setting-environment-variables "Link to this heading")
Windows allows environment variables to be configured permanently at both the User level and the System level, or temporarily in a command prompt.
To temporarily set environment variables, open Command Prompt and use the **set** command:
```
C:\>set PATH=C:\Program Files\Python 3.9;%PATH%
C:\>set PYTHONPATH=%PYTHONPATH%;C:\My_python_lib
C:\>python