Title: shlex Module Overview
URL: https://docs.python.org/3/library/shlex.html
Summary: The `shlex` module, introduced in Python 3.3, provides a lexical analysis capability for Unix shell-like languages. It includes the `shlex` class, which creates a lexical analyzer object that can read from a file-like object or a string. If no input source is provided, it defaults to `sys.stdin`.
---

```

Added in version 3.3.
The [`shlex`](https://docs.python.org/3/library/shlex.html#module-shlex "shlex: Simple lexical analysis for Unix shell-like languages.") module defines the following class: 

_class_ shlex.shlex(_instream =None_, _infile =None_, _posix =False_, _punctuation_chars =False_)[¶](https://docs.python.org/3/library/shlex.html#shlex.shlex "Link to this definition")
    
A [`shlex`](https://docs.python.org/3/library/shlex.html#shlex.shlex "shlex.shlex") instance or subclass instance is a lexical analyzer object. The initialization argument, if present, specifies where to read characters from. It must be a file-/stream-like object with [`read()`](https://docs.python.org/3/library/io.html#io.TextIOBase.read "io.TextIOBase.read") and [`readline()`](https://docs.python.org/3/library/io.html#io.TextIOBase.readline "io.TextIOBase.readline") methods, or a string. If no argument is given, input will be taken from `sys.stdin`. The second optional argument is a filename string, which sets the initial value of the [`infile`](https://docs.python.org/3/library/shlex.html#shlex.shlex.infile "shlex.shlex.infile") attribute. If the _instream_ argument is omitted or equal to `sys.stdin`, this second argument defaults to “stdin”. The _posix_ argument defines the operational mode: when _posix_ is not true (default), the [`shlex`](https://docs.python.org/3/library/shlex.html#shlex.shlex "shlex.shlex") instance will operate in compatibility mode. When operating in POSIX mode, [`shlex`](https://docs.python.org/3/library/shlex.html#shlex.shlex "shlex.shlex") will try to be as close as possible to the POSIX shell parsing rules. The _punctuation_chars_ argument provides a way to make the behaviour even closer to how real shells parse. This can take a number of values: the default value, `False`, preserves the behaviour seen under Python 3.5 and earlier. If set to `True`, then parsing of the characters `();<>|&` is changed: any run of these characters (considered punctuation characters) is returned as a single token. If set to a non-empty string of characters, those characters will be used as the punctuation characters. Any characters in the [`wordchars`](https://docs.python.org/3/library/shlex.html#shlex.shlex.wordchars "shlex.shlex.wordchars") attribute that appear in _punctuation_chars_ will be removed from [`wordchars`](https://docs.python.org/3/library/shlex.html#shlex.shlex.wordchars "shlex.shlex.wordchars"). See [Improved Compatibility with Shells](https://docs.python.org/3/library/shlex.html#improved-shell-compatibility) for more information. _punctuation_chars_ can be set only upon [`shlex`](https://docs.python.org/3/library/shlex.html#shlex.shlex "shlex.shlex") instance creation and can’t be modified later.
Changed in version 3.6: The _punctuation_chars_ parameter was added.
See also 

Module [`configparser`](https://docs.python.org/3/library/configparser.html#module-configparser "configparser: Configuration file parser.")
    
Parser for configuration files similar to the Windows `.ini` files.
## shlex Objects[¶](https://docs.python.org/3/library/shlex.html#shlex-objects "Link to this heading")
A [`shlex`](https://docs.python.org/3/library/shlex.html#shlex.shlex "shlex.shlex") instance has the following methods: 

shlex.get_token()[¶](https://docs.python.org/3/library/shlex.html#shlex.shlex.get_token "Link to this definition")
    
Return a token. If tokens have been stacked using [`push_token()`](https://docs.python.org/3/library/shlex.html#shlex.shlex.push_token "shlex.shlex.push_token"), pop a token off the stack. Otherwise, read one from the input stream. If reading encounters an immediate end-of-file, [`eof`](https://docs.python.org/3/library/shlex.html#shlex.shlex.eof "shlex.shlex.eof") is returned (the empty string (`''`) in non-POSIX mode, and `None` in POSIX mode). 

shlex.push_token(_str_)[¶](https://docs.python.org/3/library/shlex.html#shlex.shlex.push_token "Link to this definition")
    
Push the argument onto the token stack. 

shlex.read_token()[¶](https://docs.python.org/3/library/shlex.html#shlex.shlex.read_token "Link to this definition")
    
Read a raw token. Ignore the pushback stack, and do not interpret source requests. (This is not ordinarily a useful entry point, and is documented here only for the sake of completeness.)