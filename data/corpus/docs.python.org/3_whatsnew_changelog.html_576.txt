Title: Python 3.7.0 Beta 1 Release Notes
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: The beta release of Python 3.7.0 includes several improvements and fixes, including: a resolution for coroutine's ResourceWarning when finalizing with an active error, better stepping over native coroutines in debuggers, optimized sorting methods, and enhanced suggestions for migrating from Python 2 print statements.
---

## Python 3.7.0 beta 1[¶](https://docs.python.org/3/whatsnew/changelog.html#python-3-7-0-beta-1 "Link to this heading")
_Release date: 2018-01-30_
### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id529 "Link to this heading")
  * [bpo-32703](https://bugs.python.org/issue?@action=redirect&bpo=32703): Fix coroutine’s ResourceWarning when there’s an active error set when it’s being finalized.
  * [bpo-32650](https://bugs.python.org/issue?@action=redirect&bpo=32650): Pdb and other debuggers dependent on bdb.py will correctly step over (next command) native coroutines. Patch by Pablo Galindo.
  * [bpo-28685](https://bugs.python.org/issue?@action=redirect&bpo=28685): Optimize list.sort() and sorted() by using type specialized comparisons when possible.
  * [bpo-32685](https://bugs.python.org/issue?@action=redirect&bpo=32685): Improve suggestion when the Python 2 form of print statement is either present on the same line as the header of a compound statement or else terminated by a semi-colon instead of a newline. Patch by Nitish Chandra.
  * [bpo-32697](https://bugs.python.org/issue?@action=redirect&bpo=32697): Python now explicitly preserves the definition order of keyword-only parameters. It’s always preserved their order, but this behavior was never guaranteed before; this behavior is now guaranteed and tested.
  * [bpo-32690](https://bugs.python.org/issue?@action=redirect&bpo=32690): The locals() dictionary now displays in the lexical order that variables were defined. Previously, the order was reversed.
  * [bpo-32677](https://bugs.python.org/issue?@action=redirect&bpo=32677): Add `.isascii()` method to `str`, `bytes` and `bytearray`. It can be used to test that string contains only ASCII characters.
  * [bpo-32670](https://bugs.python.org/issue?@action=redirect&bpo=32670): Enforce [**PEP 479**](https://peps.python.org/pep-0479/) for all code. This means that manually raising a StopIteration exception from a generator is prohibited for all code, regardless of whether ‘from __future__ import generator_stop’ was used or not.
  * [bpo-32591](https://bugs.python.org/issue?@action=redirect&bpo=32591): Added built-in support for tracking the origin of coroutine objects; see sys.set_coroutine_origin_tracking_depth and CoroutineType.cr_origin. This replaces the asyncio debug mode’s use of coroutine wrapping for native coroutine objects.
  * [bpo-31368](https://bugs.python.org/issue?@action=redirect&bpo=31368): Expose preadv and pwritev system calls in the os module. Patch by Pablo Galindo
  * [bpo-32544](https://bugs.python.org/issue?@action=redirect&bpo=32544): `hasattr(obj, name)` and `getattr(obj, name, default)` are about 4 times faster than before when `name` is not found and `obj` doesn’t override `__getattr__` or `__getattribute__`.
  * [bpo-26163](https://bugs.python.org/issue?@action=redirect&bpo=26163): Improved frozenset() hash to create more distinct hash values when faced with datasets containing many similar values.
  * [bpo-32550](https://bugs.python.org/issue?@action=redirect&bpo=32550): Remove the STORE_ANNOTATION bytecode.
  * [bpo-20104](https://bugs.python.org/issue?@action=redirect&bpo=20104): Expose posix_spawn as a low level API in the os module. (removed before 3.7.0rc1)
  * [bpo-24340](https://bugs.python.org/issue?@action=redirect&bpo=24340): Fixed estimation of the code stack size.
  * [bpo-32436](https://bugs.python.org/issue?@action=redirect&bpo=32436): Implement [**PEP 567**](https://peps.python.org/pep-0567/) Context Variables.
  * [bpo-18533](https://bugs.python.org/issue?@action=redirect&bpo=18533): `repr()` on a dict containing its own `values()` or `items()` no longer raises `RecursionError`; OrderedDict similarly. Instead, use `...`, as for other recursive structures. Patch by Ben North.
  * [bpo-20891](https://bugs.python.org/issue?@action=redirect&bpo=20891): Py_Initialize() now creates the GIL. The GIL is no longer created “on demand” to fix a race condition when PyGILState_Ensure() is called in a non-Python thread.
  * [bpo-32028](https://bugs.python.org/issue?@action=redirect&bpo=32028): Leading whitespace is now correctly ignored when generating suggestions for converting Py2 print statements to Py3 builtin print function calls. Patch by Sanyam Khurana.
  * [bpo-31179](https://bugs.python.org/issue?@action=redirect&bpo=31179): Make dict.copy() up to 5.5 times faster.
  * [bpo-31113](https://bugs.python.org/issue?@action=redirect&bpo=31113): Get rid of recursion in the compiler for normal control flow.