Title: ConfigParser: Values and Formatting
URL: https://docs.python.org/3/library/configparser.html
Summary: This section describes different ways to define values in a configuration file using the ConfigParser module, covering simple key-value pairs, handling strings and number representations, multiline values, empty values, comments usage, and indentation for sections and values.
---

```
[Simple Values]
key=value
spaces in keys=allowed
spaces in values=allowed as well
spaces around the delimiter=obviously
you can also use:to delimit keys from values
[All Values Are Strings]
values like this:1000000
or this:3.14159265359
are they treated as numbers?:no
integers, floats and booleans are held as:strings
can use the API to get converted values directly:true
[Multiline Values]
chorus:I'm a lumberjack, and I'm okay
I sleep all night and I work all day
[No Values]
key_without_value
empty string value here=
[You can use comments]
# like this
; or this
# By default only in an empty line.
# Inline comments can be harmful because they prevent users
# from using the delimiting characters as parts of values.
# That being said, this can be customized.
[Sections Can Be Indented]
can_values_be_as_well=True
does_that_mean_anything_special=False
purpose=formatting for readability
multiline_values=are
handled just fine as
long as they are indented
deeper than the first line
of a value
# Did I mention we can indent comments, too?

```

## Unnamed Sections[¶](https://docs.python.org/3/library/configparser.html#unnamed-sections "Link to this heading")
The name of the first section (or unique) may be omitted and values retrieved by the [`UNNAMED_SECTION`](https://docs.python.org/3/library/configparser.html#configparser.UNNAMED_SECTION "configparser.UNNAMED_SECTION") attribute.
>>>```
>>> config = """
... option = value
...
... [ Section 2 ]
... another = val
... """
>>> unnamed = configparser.ConfigParser(allow_unnamed_section=True)
>>> unnamed.read_string(config)
>>> unnamed.get(configparser.UNNAMED_SECTION, 'option')
'value'

```

## Interpolation of values[¶](https://docs.python.org/3/library/configparser.html#interpolation-of-values "Link to this heading")
On top of the core functionality, [`ConfigParser`](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser "configparser.ConfigParser") supports interpolation. This means values can be preprocessed before returning them from `get()` calls. 

_class_ configparser.BasicInterpolation[¶](https://docs.python.org/3/library/configparser.html#configparser.BasicInterpolation "Link to this definition")
    
The default implementation used by [`ConfigParser`](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser "configparser.ConfigParser"). It enables values to contain format strings which refer to other values in the same section, or values in the special default section [[1]](https://docs.python.org/3/library/configparser.html#id16). Additional default values can be provided on initialization.
For example:
```
[Paths]
home_dir:/Users
my_dir:%(home_dir)s/lumberjack
my_pictures:%(my_dir)s/Pictures
[Escape]
# use a %% to escape the % sign (% is the only character that needs to be escaped):
gain:80%%

```

In the example above, [`ConfigParser`](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser "configparser.ConfigParser") with _interpolation_ set to `BasicInterpolation()` would resolve `%(home_dir)s` to the value of `home_dir` (`/Users` in this case). `%(my_dir)s` in effect would resolve to `/Users/lumberjack`. All interpolations are done on demand so keys used in the chain of references do not have to be specified in any specific order in the configuration file.
With `interpolation` set to `None`, the parser would simply return `%(my_dir)s/Pictures` as the value of `my_pictures` and `%(home_dir)s/lumberjack` as the value of `my_dir`. 

_class_ configparser.ExtendedInterpolation[¶](https://docs.python.org/3/library/configparser.html#configparser.ExtendedInterpolation "Link to this definition")
    
An alternative handler for interpolation which implements a more advanced syntax, used for instance in `zc.buildout`. Extended interpolation is using `${section:option}` to denote a value from a foreign section. Interpolation can span multiple levels. For convenience, if the `section:` part is omitted, interpolation defaults to the current section (and possibly the default values from the special section).
For example, the configuration specified above with basic interpolation, would look like this with extended interpolation:
```
[Paths]
home_dir:/Users
my_dir:${home_dir}/lumberjack
my_pictures:${my_dir}/Pictures
[Escape]
# use a $$ to escape the $ sign ($ is the only character that needs to be escaped):
cost:$$80

```

Values from other sections can be fetched as well:
```
[Common]
home_dir:/Users
library_dir:/Library
system_dir:/System
macports_dir:/opt/local
[Frameworks]
Python:3.2
path:${Common:system_dir}/Library/Frameworks/
[Arthur]
nickname:Two Sheds
last_name:Jackson
my_dir:${Common:home_dir}/twosheds
my_pictures:${my_dir}/Pictures
python_dir:${Frameworks:path}/Python/Versions/${Frameworks:Python}