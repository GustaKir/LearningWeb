Title: Tell Turtle’s State
URL: https://docs.python.org/3/library/turtle.html
Summary: This section describes methods to retrieve the turtle's current state, including its position using `turtle.pos()` which returns the coordinates (x, y) as a Vec2D vector, and `turtle.towards(x, y)` that calculates the angle to a specified position or another turtle based on the current orientation.
---

```

### Tell Turtle’s state[¶](https://docs.python.org/3/library/turtle.html#tell-turtle-s-state "Link to this heading") 

turtle.position()[¶](https://docs.python.org/3/library/turtle.html#turtle.position "Link to this definition")


turtle.pos()[¶](https://docs.python.org/3/library/turtle.html#turtle.pos "Link to this definition")
    
Return the turtle’s current location (x,y) (as a [`Vec2D`](https://docs.python.org/3/library/turtle.html#turtle.Vec2D "turtle.Vec2D") vector).
>>>```
>>> turtle.pos()
(440.00,-0.00)

```


turtle.towards(_x_ , _y =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.towards "Link to this definition")
     

Parameters:
    
  * **x** – a number or a pair/vector of numbers or a turtle instance
  * **y** – a number if _x_ is a number, else `None`


Return the angle between the line from turtle position to position specified by (x,y), the vector or the other turtle. This depends on the turtle’s start orientation which depends on the mode - “standard”/”world” or “logo”.
>>>```
>>> turtle.goto(10, 10)
>>> turtle.towards(0,0)
225.0

```


turtle.xcor()[¶](https://docs.python.org/3/library/turtle.html#turtle.xcor "Link to this definition")
    
Return the turtle’s x coordinate.
>>>```
>>> turtle.home()
>>> turtle.left(50)
>>> turtle.forward(100)
>>> turtle.pos()
(64.28,76.60)
>>> print(round(turtle.xcor(), 5))
64.27876

```


turtle.ycor()[¶](https://docs.python.org/3/library/turtle.html#turtle.ycor "Link to this definition")
    
Return the turtle’s y coordinate.
>>>```
>>> turtle.home()
>>> turtle.left(60)
>>> turtle.forward(100)
>>> print(turtle.pos())
(50.00,86.60)
>>> print(round(turtle.ycor(), 5))
86.60254

```


turtle.heading()[¶](https://docs.python.org/3/library/turtle.html#turtle.heading "Link to this definition")
    
Return the turtle’s current heading (value depends on the turtle mode, see [`mode()`](https://docs.python.org/3/library/turtle.html#turtle.mode "turtle.mode")).
>>>```
>>> turtle.home()
>>> turtle.left(67)
>>> turtle.heading()
67.0

```


turtle.distance(_x_ , _y =None_)[¶](https://docs.python.org/3/library/turtle.html#turtle.distance "Link to this definition")
     

Parameters:
    
  * **x** – a number or a pair/vector of numbers or a turtle instance
  * **y** – a number if _x_ is a number, else `None`


Return the distance from the turtle to (x,y), the given vector, or the given other turtle, in turtle step units.
>>>```
>>> turtle.home()
>>> turtle.distance(30,40)
50.0
>>> turtle.distance((30,40))
50.0
>>> joe = Turtle()
>>> joe.forward(77)
>>> turtle.distance(joe)
77.0

```

### Settings for measurement[¶](https://docs.python.org/3/library/turtle.html#settings-for-measurement "Link to this heading") 

turtle.degrees(_fullcircle =360.0_)[¶](https://docs.python.org/3/library/turtle.html#turtle.degrees "Link to this definition")
     

Parameters:
    
**fullcircle** – a number
Set angle measurement units, i.e. set number of “degrees” for a full circle. Default value is 360 degrees.
>>>```
>>> turtle.home()
>>> turtle.left(90)
>>> turtle.heading()
90.0
>>> # Change angle measurement unit to grad (also known as gon,
>>> # grade, or gradian and equals 1/100-th of the right angle.)
>>> turtle.degrees(400.0)
>>> turtle.heading()
100.0
>>> turtle.degrees(360)
>>> turtle.heading()
90.0

```


turtle.radians()[¶](https://docs.python.org/3/library/turtle.html#turtle.radians "Link to this definition")
    
Set the angle measurement units to radians. Equivalent to `degrees(2*math.pi)`.
>>>```
>>> turtle.home()
>>> turtle.left(90)
>>> turtle.heading()
90.0
>>> turtle.radians()
>>> turtle.heading()
1.5707963267948966