Title: Multiprocessing Manager Synchronization Primitives
URL: https://docs.python.org/3/library/multiprocessing.html
Summary: This section describes the synchronization primitive objects available in Python's multiprocessing library, including Barrier, BoundedSemaphore, and Condition. Each object acts as a proxy for the corresponding threading objects, allowing inter-process synchronization. It also notes that the Barrier was added in version 3.3.
---

Barrier(_parties_[, _action_[, _timeout_]])[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.SyncManager.Barrier "Link to this definition")
    
Create a shared [`threading.Barrier`](https://docs.python.org/3/library/threading.html#threading.Barrier "threading.Barrier") object and return a proxy for it.
Added in version 3.3. 

BoundedSemaphore([_value_])[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.SyncManager.BoundedSemaphore "Link to this definition")
    
Create a shared [`threading.BoundedSemaphore`](https://docs.python.org/3/library/threading.html#threading.BoundedSemaphore "threading.BoundedSemaphore") object and return a proxy for it. 

Condition([_lock_])[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.SyncManager.Condition "Link to this definition")
    
Create a shared [`threading.Condition`](https://docs.python.org/3/library/threading.html#threading.Condition "threading.Condition") object and return a proxy for it.
If _lock_ is supplied then it should be a proxy for a [`threading.Lock`](https://docs.python.org/3/library/threading.html#threading.Lock "threading.Lock") or [`threading.RLock`](https://docs.python.org/3/library/threading.html#threading.RLock "threading.RLock") object.
Changed in version 3.3: The [`wait_for()`](https://docs.python.org/3/library/threading.html#threading.Condition.wait_for "threading.Condition.wait_for") method was added. 

Event()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.SyncManager.Event "Link to this definition")
    
Create a shared [`threading.Event`](https://docs.python.org/3/library/threading.html#threading.Event "threading.Event") object and return a proxy for it. 

Lock()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.SyncManager.Lock "Link to this definition")
    
Create a shared [`threading.Lock`](https://docs.python.org/3/library/threading.html#threading.Lock "threading.Lock") object and return a proxy for it. 

Namespace()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.SyncManager.Namespace "Link to this definition")
    
Create a shared [`Namespace`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.Namespace "multiprocessing.managers.Namespace") object and return a proxy for it. 

Queue([_maxsize_])[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.SyncManager.Queue "Link to this definition")
    
Create a shared [`queue.Queue`](https://docs.python.org/3/library/queue.html#queue.Queue "queue.Queue") object and return a proxy for it. 

RLock()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.SyncManager.RLock "Link to this definition")
    
Create a shared [`threading.RLock`](https://docs.python.org/3/library/threading.html#threading.RLock "threading.RLock") object and return a proxy for it. 

Semaphore([_value_])[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.SyncManager.Semaphore "Link to this definition")
    
Create a shared [`threading.Semaphore`](https://docs.python.org/3/library/threading.html#threading.Semaphore "threading.Semaphore") object and return a proxy for it. 

Array(_typecode_ , _sequence_)[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.SyncManager.Array "Link to this definition")
    
Create an array and return a proxy for it. 

Value(_typecode_ , _value_)[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.SyncManager.Value "Link to this definition")
    
Create an object with a writable `value` attribute and return a proxy for it. 

dict()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.SyncManager.dict "Link to this definition")


dict(_mapping_)


dict(_sequence_)
    
Create a shared [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") object and return a proxy for it. 

list()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.SyncManager.list "Link to this definition")


list(_sequence_)
    
Create a shared [`list`](https://docs.python.org/3/library/stdtypes.html#list "list") object and return a proxy for it.
Changed in version 3.6: Shared objects are capable of being nested. For example, a shared container object such as a shared list can contain other shared objects which will all be managed and synchronized by the [`SyncManager`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.managers.SyncManager "multiprocessing.managers.SyncManager").