Title: Logging in Python: Handlers and Formatters
URL: https://docs.python.org/3/howto/logging.html
Summary: Application code should avoid directly using instances of the Handler class, which serves as a base with defined interfaces and default behavior for all handlers. Formatter objects, instantiable by application code, define the structure and contents of log messages, with optional arguments for message format, date format, and style.
---

Application code should not directly instantiate and use instances of [`Handler`](https://docs.python.org/3/library/logging.html#logging.Handler "logging.Handler"). Instead, the [`Handler`](https://docs.python.org/3/library/logging.html#logging.Handler "logging.Handler") class is a base class that defines the interface that all handlers should have and establishes some default behavior that child classes can use (or override).
### Formatters[¶](https://docs.python.org/3/howto/logging.html#formatters "Link to this heading")
Formatter objects configure the final order, structure, and contents of the log message. Unlike the base [`logging.Handler`](https://docs.python.org/3/library/logging.html#logging.Handler "logging.Handler") class, application code may instantiate formatter classes, although you could likely subclass the formatter if your application needs special behavior. The constructor takes three optional arguments – a message format string, a date format string and a style indicator. 

logging.Formatter.__init__(_fmt =None_, _datefmt =None_, _style ='%'_)[¶](https://docs.python.org/3/howto/logging.html#logging.logging.Formatter.__init__ "Link to this definition")

If there is no message format string, the default is to use the raw message. If there is no date format string, the default date format is:
```
%Y-%m-%d %H:%M:%S

```

with the milliseconds tacked on at the end. The `style` is one of `'%'`, `'{'`, or `'$'`. If one of these is not specified, then `'%'` will be used.
If the `style` is `'%'`, the message format string uses `%(<dictionary key>)s` styled string substitution; the possible keys are documented in [LogRecord attributes](https://docs.python.org/3/library/logging.html#logrecord-attributes). If the style is `'{'`, the message format string is assumed to be compatible with [`str.format()`](https://docs.python.org/3/library/stdtypes.html#str.format "str.format") (using keyword arguments), while if the style is `'$'` then the message format string should conform to what is expected by [`string.Template.substitute()`](https://docs.python.org/3/library/string.html#string.Template.substitute "string.Template.substitute").
Changed in version 3.2: Added the `style` parameter.
The following message format string will log the time in a human-readable format, the severity of the message, and the contents of the message, in that order:
```
'%(asctime)s - %(levelname)s - %(message)s'

```

Formatters use a user-configurable function to convert the creation time of a record to a tuple. By default, [`time.localtime()`](https://docs.python.org/3/library/time.html#time.localtime "time.localtime") is used; to change this for a particular formatter instance, set the `converter` attribute of the instance to a function with the same signature as [`time.localtime()`](https://docs.python.org/3/library/time.html#time.localtime "time.localtime") or [`time.gmtime()`](https://docs.python.org/3/library/time.html#time.gmtime "time.gmtime"). To change it for all formatters, for example if you want all logging times to be shown in GMT, set the `converter` attribute in the Formatter class (to `time.gmtime` for GMT display).
### Configuring Logging[¶](https://docs.python.org/3/howto/logging.html#configuring-logging "Link to this heading")
Programmers can configure logging in three ways:
  1. Creating loggers, handlers, and formatters explicitly using Python code that calls the configuration methods listed above.
  2. Creating a logging config file and reading it using the [`fileConfig()`](https://docs.python.org/3/library/logging.config.html#logging.config.fileConfig "logging.config.fileConfig") function.
  3. Creating a dictionary of configuration information and passing it to the [`dictConfig()`](https://docs.python.org/3/library/logging.config.html#logging.config.dictConfig "logging.config.dictConfig") function.


For the reference documentation on the last two options, see [Configuration functions](https://docs.python.org/3/library/logging.config.html#logging-config-api). The following example configures a very simple logger, a console handler, and a simple formatter using Python code:
```
importlogging
# create logger
logger = logging.getLogger('simple_example')
logger.setLevel(logging.DEBUG)
# create console handler and set level to debug
ch = logging.StreamHandler()
ch.setLevel(logging.DEBUG)
# create formatter
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
# add formatter to ch
ch.setFormatter(formatter)
# add ch to logger
logger.addHandler(ch)
# 'application' code
logger.debug('debug message')
logger.info('info message')
logger.warning('warn message')
logger.error('error message')
logger.critical('critical message')

```

Running this module from the command line produces the following output: