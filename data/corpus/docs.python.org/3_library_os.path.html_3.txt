Title: os.path Module Functions: Getting File Information
URL: https://docs.python.org/3/library/os.path.html
Summary: The os.path module provides functions like getctime and getsize. getctime returns the creation or last metadata change time of a file based on the operating system, while getsize returns the size of the file in bytes. Both functions raise OSError if the file is inaccessible. getctime was updated in version 3.6 to accept path-like objects.
---

os.path.getctime(_path_)[¶](https://docs.python.org/3/library/os.path.html#os.path.getctime "Link to this definition")
    
Return the system’s ctime which, on some systems (like Unix) is the time of the last metadata change, and, on others (like Windows), is the creation time for _path_. The return value is a number giving the number of seconds since the epoch (see the [`time`](https://docs.python.org/3/library/time.html#module-time "time: Time access and conversions.") module). Raise [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") if the file does not exist or is inaccessible.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). 

os.path.getsize(_path_)[¶](https://docs.python.org/3/library/os.path.html#os.path.getsize "Link to this definition")
    
Return the size, in bytes, of _path_. Raise [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") if the file does not exist or is inaccessible.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). 

os.path.isabs(_path_)[¶](https://docs.python.org/3/library/os.path.html#os.path.isabs "Link to this definition")
    
Return `True` if _path_ is an absolute pathname. On Unix, that means it begins with a slash, on Windows that it begins with two (back)slashes, or a drive letter, colon, and (back)slash together.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object).
Changed in version 3.13: On Windows, returns `False` if the given path starts with exactly one (back)slash. 

os.path.isfile(_path_)[¶](https://docs.python.org/3/library/os.path.html#os.path.isfile "Link to this definition")
    
Return `True` if _path_ is an [`existing`](https://docs.python.org/3/library/os.path.html#os.path.exists "os.path.exists") regular file. This follows symbolic links, so both [`islink()`](https://docs.python.org/3/library/os.path.html#os.path.islink "os.path.islink") and [`isfile()`](https://docs.python.org/3/library/os.path.html#os.path.isfile "os.path.isfile") can be true for the same path.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). 

os.path.isdir(_path_)[¶](https://docs.python.org/3/library/os.path.html#os.path.isdir "Link to this definition")
    
Return `True` if _path_ is an [`existing`](https://docs.python.org/3/library/os.path.html#os.path.exists "os.path.exists") directory. This follows symbolic links, so both [`islink()`](https://docs.python.org/3/library/os.path.html#os.path.islink "os.path.islink") and [`isdir()`](https://docs.python.org/3/library/os.path.html#os.path.isdir "os.path.isdir") can be true for the same path.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). 

os.path.isjunction(_path_)[¶](https://docs.python.org/3/library/os.path.html#os.path.isjunction "Link to this definition")
    
Return `True` if _path_ refers to an [`existing`](https://docs.python.org/3/library/os.path.html#os.path.lexists "os.path.lexists") directory entry that is a junction. Always return `False` if junctions are not supported on the current platform.
Added in version 3.12. 

os.path.islink(_path_)[¶](https://docs.python.org/3/library/os.path.html#os.path.islink "Link to this definition")
    
Return `True` if _path_ refers to an [`existing`](https://docs.python.org/3/library/os.path.html#os.path.exists "os.path.exists") directory entry that is a symbolic link. Always `False` if symbolic links are not supported by the Python runtime.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). 

os.path.ismount(_path_)[¶](https://docs.python.org/3/library/os.path.html#os.path.ismount "Link to this definition")
    
Return `True` if pathname _path_ is a _mount point_ : a point in a file system where a different file system has been mounted. On POSIX, the function checks whether _path_ ’s parent, `_path_/..`, is on a different device than _path_ , or whether `_path_/..`and _path_ point to the same i-node on the same device — this should detect mount points for all Unix and POSIX variants. It is not able to reliably detect bind mounts on the same filesystem. On Windows, a drive letter root and a share UNC are always mount points, and for any other path `GetVolumePathName` is called to see if it is different from the input path.
Changed in version 3.4: Added support for detecting non-root mount points on Windows.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object).