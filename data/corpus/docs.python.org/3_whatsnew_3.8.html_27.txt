Title: Porting to Python 3.8
URL: https://docs.python.org/3/whatsnew/3.8.html
Summary: This section outlines changes and bug fixes in Python 3.8 that may affect code compatibility. Key updates include the prohibition of yield expressions in comprehensions and generator expressions, and the introduction of a SyntaxWarning for improper identity checks with certain literal types.
---

## Porting to Python 3.8[¶](https://docs.python.org/3/whatsnew/3.8.html#porting-to-python-3-8 "Link to this heading")
This section lists previously described changes and other bugfixes that may require changes to your code.
### Changes in Python behavior[¶](https://docs.python.org/3/whatsnew/3.8.html#changes-in-python-behavior "Link to this heading")
  * Yield expressions (both `yield` and `yield from` clauses) are now disallowed in comprehensions and generator expressions (aside from the iterable expression in the leftmost `for` clause). (Contributed by Serhiy Storchaka in [bpo-10544](https://bugs.python.org/issue?@action=redirect&bpo=10544).)
  * The compiler now produces a [`SyntaxWarning`](https://docs.python.org/3/library/exceptions.html#SyntaxWarning "SyntaxWarning") when identity checks (`is` and `is not`) are used with certain types of literals (e.g. strings, numbers). These can often work by accident in CPython, but are not guaranteed by the language spec. The warning advises users to use equality tests (`==` and `!=`) instead. (Contributed by Serhiy Storchaka in [bpo-34850](https://bugs.python.org/issue?@action=redirect&bpo=34850).)
  * The CPython interpreter can swallow exceptions in some circumstances. In Python 3.8 this happens in fewer cases. In particular, exceptions raised when getting the attribute from the type dictionary are no longer ignored. (Contributed by Serhiy Storchaka in [bpo-35459](https://bugs.python.org/issue?@action=redirect&bpo=35459).)
  * Removed `__str__` implementations from builtin types [`bool`](https://docs.python.org/3/library/functions.html#bool "bool"), [`int`](https://docs.python.org/3/library/functions.html#int "int"), [`float`](https://docs.python.org/3/library/functions.html#float "float"), [`complex`](https://docs.python.org/3/library/functions.html#complex "complex") and few classes from the standard library. They now inherit `__str__()` from [`object`](https://docs.python.org/3/library/functions.html#object "object"). As result, defining the `__repr__()` method in the subclass of these classes will affect their string representation. (Contributed by Serhiy Storchaka in [bpo-36793](https://bugs.python.org/issue?@action=redirect&bpo=36793).)
  * On AIX, [`sys.platform`](https://docs.python.org/3/library/sys.html#sys.platform "sys.platform") doesn’t contain the major version anymore. It is always `'aix'`, instead of `'aix3'` .. `'aix7'`. Since older Python versions include the version number, so it is recommended to always use `sys.platform.startswith('aix')`. (Contributed by M. Felt in [bpo-36588](https://bugs.python.org/issue?@action=redirect&bpo=36588).)
  * `PyEval_AcquireLock()` and `PyEval_AcquireThread()` now terminate the current thread if called while the interpreter is finalizing, making them consistent with [`PyEval_RestoreThread()`](https://docs.python.org/3/c-api/init.html#c.PyEval_RestoreThread "PyEval_RestoreThread"), [`Py_END_ALLOW_THREADS()`](https://docs.python.org/3/c-api/init.html#c.Py_END_ALLOW_THREADS "Py_END_ALLOW_THREADS"), and [`PyGILState_Ensure()`](https://docs.python.org/3/c-api/init.html#c.PyGILState_Ensure "PyGILState_Ensure"). If this behavior is not desired, guard the call by checking `_Py_IsFinalizing()` or [`sys.is_finalizing()`](https://docs.python.org/3/library/sys.html#sys.is_finalizing "sys.is_finalizing"). (Contributed by Joannah Nanjekye in [bpo-36475](https://bugs.python.org/issue?@action=redirect&bpo=36475).)