Title: Signal Module: Alarm and Signal Handler Functions
URL: https://docs.python.org/3/library/signal.html
Summary: The 'signal.alarm' function schedules a SIGALRM signal after a specified time, canceling any previous alarms. If the time is zero, it cancels any scheduled alarm. The 'signal.getsignal' function retrieves the current signal handler for a specified signal number. This module is available on Unix systems.
---

signal.alarm(_time_)[¶](https://docs.python.org/3/library/signal.html#signal.alarm "Link to this definition")
    
If _time_ is non-zero, this function requests that a [`SIGALRM`](https://docs.python.org/3/library/signal.html#signal.SIGALRM "signal.SIGALRM") signal be sent to the process in _time_ seconds. Any previously scheduled alarm is canceled (only one alarm can be scheduled at any time). The returned value is then the number of seconds before any previously set alarm was to have been delivered. If _time_ is zero, no alarm is scheduled, and any scheduled alarm is canceled. If the return value is zero, no alarm is currently scheduled.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix.
See the man page _[alarm(2)](https://manpages.debian.org/alarm\(2\))_ for further information. 

signal.getsignal(_signalnum_)[¶](https://docs.python.org/3/library/signal.html#signal.getsignal "Link to this definition")
    
Return the current signal handler for the signal _signalnum_. The returned value may be a callable Python object, or one of the special values [`signal.SIG_IGN`](https://docs.python.org/3/library/signal.html#signal.SIG_IGN "signal.SIG_IGN"), [`signal.SIG_DFL`](https://docs.python.org/3/library/signal.html#signal.SIG_DFL "signal.SIG_DFL") or [`None`](https://docs.python.org/3/library/constants.html#None "None"). Here, [`signal.SIG_IGN`](https://docs.python.org/3/library/signal.html#signal.SIG_IGN "signal.SIG_IGN") means that the signal was previously ignored, [`signal.SIG_DFL`](https://docs.python.org/3/library/signal.html#signal.SIG_DFL "signal.SIG_DFL") means that the default way of handling the signal was previously in use, and `None` means that the previous signal handler was not installed from Python. 

signal.strsignal(_signalnum_)[¶](https://docs.python.org/3/library/signal.html#signal.strsignal "Link to this definition")
    
Returns the description of signal _signalnum_ , such as “Interrupt” for [`SIGINT`](https://docs.python.org/3/library/signal.html#signal.SIGINT "signal.SIGINT"). Returns [`None`](https://docs.python.org/3/library/constants.html#None "None") if _signalnum_ has no description. Raises [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if _signalnum_ is invalid.
Added in version 3.8. 

signal.valid_signals()[¶](https://docs.python.org/3/library/signal.html#signal.valid_signals "Link to this definition")
    
Return the set of valid signal numbers on this platform. This can be less than `range(1, NSIG)` if some signals are reserved by the system for internal use.
Added in version 3.8. 

signal.pause()[¶](https://docs.python.org/3/library/signal.html#signal.pause "Link to this definition")
    
Cause the process to sleep until a signal is received; the appropriate handler will then be called. Returns nothing.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix.
See the man page _[signal(2)](https://manpages.debian.org/signal\(2\))_ for further information.
See also [`sigwait()`](https://docs.python.org/3/library/signal.html#signal.sigwait "signal.sigwait"), [`sigwaitinfo()`](https://docs.python.org/3/library/signal.html#signal.sigwaitinfo "signal.sigwaitinfo"), [`sigtimedwait()`](https://docs.python.org/3/library/signal.html#signal.sigtimedwait "signal.sigtimedwait") and [`sigpending()`](https://docs.python.org/3/library/signal.html#signal.sigpending "signal.sigpending"). 

signal.raise_signal(_signum_)[¶](https://docs.python.org/3/library/signal.html#signal.raise_signal "Link to this definition")
    
Sends a signal to the calling process. Returns nothing.
Added in version 3.8. 

signal.pidfd_send_signal(_pidfd_ , _sig_ , _siginfo =None_, _flags =0_)[¶](https://docs.python.org/3/library/signal.html#signal.pidfd_send_signal "Link to this definition")
    
Send signal _sig_ to the process referred to by file descriptor _pidfd_. Python does not currently support the _siginfo_ parameter; it must be `None`. The _flags_ argument is provided for future extensions; no flag values are currently defined.
See the _[pidfd_send_signal(2)](https://manpages.debian.org/pidfd_send_signal\(2\))_ man page for more information.
[Availability](https://docs.python.org/3/library/intro.html#availability): Linux >= 5.1, Android >= [`build-time`](https://docs.python.org/3/library/sys.html#sys.getandroidapilevel "sys.getandroidapilevel") API level 31
Added in version 3.9.