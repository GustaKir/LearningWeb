Title: Socket Library - recvmsg_into Method
URL: https://docs.python.org/3/library/socket.html
Summary: This section describes the `socket.recvmsg_into` method, which receives normal and ancillary data from a socket, distributing non-ancillary data across provided buffers. It notes system compatibility (Unix) and mentions changes made in versions 3.3 and 3.5 regarding system call interruptions.
---

```

[Availability](https://docs.python.org/3/library/intro.html#availability): Unix.
Most Unix platforms.
Added in version 3.3.
Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an exception, the method now retries the system call instead of raising an [`InterruptedError`](https://docs.python.org/3/library/exceptions.html#InterruptedError "InterruptedError") exception (see [**PEP 475**](https://peps.python.org/pep-0475/) for the rationale). 

socket.recvmsg_into(_buffers_[, _ancbufsize_[, _flags_]])[Â¶](https://docs.python.org/3/library/socket.html#socket.socket.recvmsg_into "Link to this definition")
    
Receive normal data and ancillary data from the socket, behaving as [`recvmsg()`](https://docs.python.org/3/library/socket.html#socket.socket.recvmsg "socket.socket.recvmsg") would, but scatter the non-ancillary data into a series of buffers instead of returning a new bytes object. The _buffers_ argument must be an iterable of objects that export writable buffers (e.g. [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") objects); these will be filled with successive chunks of the non-ancillary data until it has all been written or there are no more buffers. The operating system may set a limit ([`sysconf()`](https://docs.python.org/3/library/os.html#os.sysconf "os.sysconf") value `SC_IOV_MAX`) on the number of buffers that can be used. The _ancbufsize_ and _flags_ arguments have the same meaning as for [`recvmsg()`](https://docs.python.org/3/library/socket.html#socket.socket.recvmsg "socket.socket.recvmsg").
The return value is a 4-tuple: `(nbytes, ancdata, msg_flags, address)`, where _nbytes_ is the total number of bytes of non-ancillary data written into the buffers, and _ancdata_ , _msg_flags_ and _address_ are the same as for [`recvmsg()`](https://docs.python.org/3/library/socket.html#socket.socket.recvmsg "socket.socket.recvmsg").
Example:
>>>```
>>> importsocket
>>> s1, s2 = socket.socketpair()
>>> b1 = bytearray(b'----')
>>> b2 = bytearray(b'0123456789')
>>> b3 = bytearray(b'--------------')
>>> s1.send(b'Mary had a little lamb')
22
>>> s2.recvmsg_into([b1, memoryview(b2)[2:9], b3])
(22, [], 0, None)
>>> [b1, b2, b3]
[bytearray(b'Mary'), bytearray(b'01 had a 9'), bytearray(b'little lamb---')]