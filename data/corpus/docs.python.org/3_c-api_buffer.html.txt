Title: Buffer Protocol in Python C API
URL: https://docs.python.org/3/c-api/buffer.html
Summary: This document outlines the Buffer Protocol within the Python C API, detailing the structure of buffers and various buffer request types. It includes information on request-independent fields, as well as specifics regarding buffer properties such as readonly status, format, shape, strides, and suboffsets.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [Buffer Protocol](https://docs.python.org/3/c-api/buffer.html)
    * [Buffer structure](https://docs.python.org/3/c-api/buffer.html#buffer-structure)
    * [Buffer request types](https://docs.python.org/3/c-api/buffer.html#buffer-request-types)
      * [request-independent fields](https://docs.python.org/3/c-api/buffer.html#request-independent-fields)
      * [readonly, format](https://docs.python.org/3/c-api/buffer.html#readonly-format)
      * [shape, strides, suboffsets](https://docs.python.org/3/c-api/buffer.html#shape-strides-suboffsets)
      * [contiguity requests](https://docs.python.org/3/c-api/buffer.html#contiguity-requests)
      * [compound requests](https://docs.python.org/3/c-api/buffer.html#compound-requests)
    * [Complex arrays](https://docs.python.org/3/c-api/buffer.html#complex-arrays)
      * [NumPy-style: shape and strides](https://docs.python.org/3/c-api/buffer.html#numpy-style-shape-and-strides)
      * [PIL-style: shape, strides and suboffsets](https://docs.python.org/3/c-api/buffer.html#pil-style-shape-strides-and-suboffsets)
    * [Buffer-related functions](https://docs.python.org/3/c-api/buffer.html#buffer-related-functions)


#### Previous topic
[Iterator Protocol](https://docs.python.org/3/c-api/iter.html "previous chapter")
#### Next topic
[Concrete Objects Layer](https://docs.python.org/3/c-api/concrete.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/c-api/buffer.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/c-api/concrete.html "Concrete Objects Layer") |
  * [previous](https://docs.python.org/3/c-api/iter.html "Iterator Protocol") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [Python/C API Reference Manual](https://docs.python.org/3/c-api/index.html) »
  * [Abstract Objects Layer](https://docs.python.org/3/c-api/abstract.html) »
  * [Buffer Protocol](https://docs.python.org/3/c-api/buffer.html)
  * | 
  * Theme  Auto Light Dark |


# Buffer Protocol[¶](https://docs.python.org/3/c-api/buffer.html#buffer-protocol "Link to this heading")
Certain objects available in Python wrap access to an underlying memory array or _buffer_. Such objects include the built-in [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") and [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray"), and some extension types like [`array.array`](https://docs.python.org/3/library/array.html#array.array "array.array"). Third-party libraries may define their own types for special purposes, such as image processing or numeric analysis.
While each of these types have their own semantics, they share the common characteristic of being backed by a possibly large memory buffer. It is then desirable, in some situations, to access that buffer directly and without intermediate copying.
Python provides such a facility at the C level in the form of the [buffer protocol](https://docs.python.org/3/c-api/buffer.html#bufferobjects). This protocol has two sides:
  * on the producer side, a type can export a “buffer interface” which allows objects of that type to expose information about their underlying buffer. This interface is described in the section [Buffer Object Structures](https://docs.python.org/3/c-api/typeobj.html#buffer-structs);
  * on the consumer side, several means are available to obtain a pointer to the raw underlying data of an object (for example a method parameter).