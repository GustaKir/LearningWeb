Title: Logging Formatter Parameters
URL: https://docs.python.org/3/library/logging.html
Summary: This section describes the parameters for formatting logged output in Python's logging module. The parameters include 'fmt' to define the overall format, 'datefmt' for the date/time format, and 'style' to specify the formatting style such as '%', '{', or '$'. Default values are provided if parameters are not specified.
---

Parameters:
    
  * **fmt** ([_str_](https://docs.python.org/3/library/stdtypes.html#str "str")) – A format string in the given _style_ for the logged output as a whole. The possible mapping keys are drawn from the [`LogRecord`](https://docs.python.org/3/library/logging.html#logging.LogRecord "logging.LogRecord") object’s [LogRecord attributes](https://docs.python.org/3/library/logging.html#logrecord-attributes). If not specified, `'%(message)s'` is used, which is just the logged message.
  * **datefmt** ([_str_](https://docs.python.org/3/library/stdtypes.html#str "str")) – A format string in the given _style_ for the date/time portion of the logged output. If not specified, the default described in [`formatTime()`](https://docs.python.org/3/library/logging.html#logging.Formatter.formatTime "logging.Formatter.formatTime") is used.
  * **style** ([_str_](https://docs.python.org/3/library/stdtypes.html#str "str")) – Can be one of `'%'`, `'{'` or `'$'` and determines how the format string will be merged with its data: using one of [printf-style String Formatting](https://docs.python.org/3/library/stdtypes.html#old-string-formatting) (`%`), [`str.format()`](https://docs.python.org/3/library/stdtypes.html#str.format "str.format") (`{`) or [`string.Template`](https://docs.python.org/3/library/string.html#string.Template "string.Template") (`$`). This only applies to _fmt_ and _datefmt_ (e.g. `'%(message)s'` versus `'{message}'`), not to the actual log messages passed to the logging methods. However, there are [other ways](https://docs.python.org/3/howto/logging-cookbook.html#formatting-styles) to use `{`- and `$`-formatting for log messages.
  * **validate** ([_bool_](https://docs.python.org/3/library/functions.html#bool "bool")) – If `True` (the default), incorrect or mismatched _fmt_ and _style_ will raise a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError"); for example, `logging.Formatter('%(asctime)s - %(message)s', style='{')`.
  * **defaults** ([_dict_](https://docs.python.org/3/library/stdtypes.html#dict "dict") _[_[_str_](https://docs.python.org/3/library/stdtypes.html#str "str") _,__Any_ _]_) – A dictionary with default values to use in custom fields. For example, `logging.Formatter('%(ip)s %(message)s', defaults={"ip": None})`


Changed in version 3.2: Added the _style_ parameter.
Changed in version 3.8: Added the _validate_ parameter.
Changed in version 3.10: Added the _defaults_ parameter. 

format(_record_)[¶](https://docs.python.org/3/library/logging.html#logging.Formatter.format "Link to this definition")
    
The record’s attribute dictionary is used as the operand to a string formatting operation. Returns the resulting string. Before formatting the dictionary, a couple of preparatory steps are carried out. The _message_ attribute of the record is computed using _msg_ % _args_. If the formatting string contains `'(asctime)'`, [`formatTime()`](https://docs.python.org/3/library/logging.html#logging.Formatter.formatTime "logging.Formatter.formatTime") is called to format the event time. If there is exception information, it is formatted using [`formatException()`](https://docs.python.org/3/library/logging.html#logging.Formatter.formatException "logging.Formatter.formatException") and appended to the message. Note that the formatted exception information is cached in attribute _exc_text_. This is useful because the exception information can be pickled and sent across the wire, but you should be careful if you have more than one [`Formatter`](https://docs.python.org/3/library/logging.html#logging.Formatter "logging.Formatter") subclass which customizes the formatting of exception information. In this case, you will have to clear the cached value (by setting the _exc_text_ attribute to `None`) after a formatter has done its formatting, so that the next formatter to handle the event doesn’t use the cached value, but recalculates it afresh.
If stack information is available, it’s appended after the exception information, using [`formatStack()`](https://docs.python.org/3/library/logging.html#logging.Formatter.formatStack "logging.Formatter.formatStack") to transform it if necessary.