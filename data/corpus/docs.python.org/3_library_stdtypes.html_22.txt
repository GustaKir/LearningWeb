Title: String Methods in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This section discusses various string methods in Python, including 'str.join' which concatenates iterable strings with a specified separator, 'str.ljust' that left-justifies a string in a specified width with optional padding, and 'str.lower' which returns a lowercase version of the string.
---

```


str.join(_iterable_)[¶](https://docs.python.org/3/library/stdtypes.html#str.join "Link to this definition")
    
Return a string which is the concatenation of the strings in _iterable_. A [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") will be raised if there are any non-string values in _iterable_ , including [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") objects. The separator between elements is the string providing this method. 

str.ljust(_width_[, _fillchar_])[¶](https://docs.python.org/3/library/stdtypes.html#str.ljust "Link to this definition")
    
Return the string left justified in a string of length _width_. Padding is done using the specified _fillchar_ (default is an ASCII space). The original string is returned if _width_ is less than or equal to `len(s)`. 

str.lower()[¶](https://docs.python.org/3/library/stdtypes.html#str.lower "Link to this definition")
    
Return a copy of the string with all the cased characters [[4]](https://docs.python.org/3/library/stdtypes.html#id15) converted to lowercase.
The lowercasing algorithm used is [described in section 3.13 ‘Default Case Folding’ of the Unicode Standard](https://www.unicode.org/versions/Unicode15.1.0/ch03.pdf). 

str.lstrip([_chars_])[¶](https://docs.python.org/3/library/stdtypes.html#str.lstrip "Link to this definition")
    
Return a copy of the string with leading characters removed. The _chars_ argument is a string specifying the set of characters to be removed. If omitted or `None`, the _chars_ argument defaults to removing whitespace. The _chars_ argument is not a prefix; rather, all combinations of its values are stripped:
>>>```
>>> '  spacious  '.lstrip()
'spacious  '
>>> 'www.example.com'.lstrip('cmowz.')
'example.com'

```

See [`str.removeprefix()`](https://docs.python.org/3/library/stdtypes.html#str.removeprefix "str.removeprefix") for a method that will remove a single prefix string rather than all of a set of characters. For example:
>>>```
>>> 'Arthur: three!'.lstrip('Arthur: ')
'ee!'
>>> 'Arthur: three!'.removeprefix('Arthur: ')
'three!'

```


_static_ str.maketrans(_x_[, _y_[, _z_]])[¶](https://docs.python.org/3/library/stdtypes.html#str.maketrans "Link to this definition")
    
This static method returns a translation table usable for [`str.translate()`](https://docs.python.org/3/library/stdtypes.html#str.translate "str.translate").
If there is only one argument, it must be a dictionary mapping Unicode ordinals (integers) or characters (strings of length 1) to Unicode ordinals, strings (of arbitrary lengths) or `None`. Character keys will then be converted to ordinals.
If there are two arguments, they must be strings of equal length, and in the resulting dictionary, each character in x will be mapped to the character at the same position in y. If there is a third argument, it must be a string, whose characters will be mapped to `None` in the result. 

str.partition(_sep_)[¶](https://docs.python.org/3/library/stdtypes.html#str.partition "Link to this definition")
    
Split the string at the first occurrence of _sep_ , and return a 3-tuple containing the part before the separator, the separator itself, and the part after the separator. If the separator is not found, return a 3-tuple containing the string itself, followed by two empty strings. 

str.removeprefix(_prefix_ , _/_)[¶](https://docs.python.org/3/library/stdtypes.html#str.removeprefix "Link to this definition")
    
If the string starts with the _prefix_ string, return `string[len(prefix):]`. Otherwise, return a copy of the original string:
>>>```
>>> 'TestHook'.removeprefix('Test')
'Hook'
>>> 'BaseTestCase'.removeprefix('Test')
'BaseTestCase'

```

Added in version 3.9. 

str.removesuffix(_suffix_ , _/_)[¶](https://docs.python.org/3/library/stdtypes.html#str.removesuffix "Link to this definition")
    
If the string ends with the _suffix_ string and that _suffix_ is not empty, return `string[:-len(suffix)]`. Otherwise, return a copy of the original string:
>>>```
>>> 'MiscTests'.removesuffix('Tests')
'Misc'
>>> 'TmpDirMixin'.removesuffix('Tests')
'TmpDirMixin'