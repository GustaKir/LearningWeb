Title: Email Policy Objects
URL: https://docs.python.org/3/library/email.policy.html
Summary: The `email.policy` module, introduced in Python 3.3, provides tools for handling email messages in accordance with various email and MIME RFCs. It also allows for flexibility in email format usage, accommodating instances where strict RFC compliance may not be necessary.
---

# `email.policy`: Policy Objects[¶](https://docs.python.org/3/library/email.policy.html#module-email.policy "Link to this heading")
Added in version 3.3.
**Source code:** [Lib/email/policy.py](https://github.com/python/cpython/tree/3.13/Lib/email/policy.py)
The [`email`](https://docs.python.org/3/library/email.html#module-email "email: Package supporting the parsing, manipulating, and generating email messages.") package’s prime focus is the handling of email messages as described by the various email and MIME RFCs. However, the general format of email messages (a block of header fields each consisting of a name followed by a colon followed by a value, the whole block followed by a blank line and an arbitrary ‘body’), is a format that has found utility outside of the realm of email. Some of these uses conform fairly closely to the main email RFCs, some do not. Even when working with email, there are times when it is desirable to break strict compliance with the RFCs, such as generating emails that interoperate with email servers that do not themselves follow the standards, or that implement extensions you want to use in ways that violate the standards.
Policy objects give the email package the flexibility to handle all these disparate use cases.
A [`Policy`](https://docs.python.org/3/library/email.policy.html#email.policy.Policy "email.policy.Policy") object encapsulates a set of attributes and methods that control the behavior of various components of the email package during use. [`Policy`](https://docs.python.org/3/library/email.policy.html#email.policy.Policy "email.policy.Policy") instances can be passed to various classes and methods in the email package to alter the default behavior. The settable values and their defaults are described below.
There is a default policy used by all classes in the email package. For all of the [`parser`](https://docs.python.org/3/library/email.parser.html#module-email.parser "email.parser: Parse flat text email messages to produce a message object structure.") classes and the related convenience functions, and for the [`Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "email.message.Message") class, this is the [`Compat32`](https://docs.python.org/3/library/email.policy.html#email.policy.Compat32 "email.policy.Compat32") policy, via its corresponding pre-defined instance [`compat32`](https://docs.python.org/3/library/email.policy.html#email.policy.compat32 "email.policy.compat32"). This policy provides for complete backward compatibility (in some cases, including bug compatibility) with the pre-Python3.3 version of the email package.
This default value for the _policy_ keyword to [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") is the [`EmailPolicy`](https://docs.python.org/3/library/email.policy.html#email.policy.EmailPolicy "email.policy.EmailPolicy") policy, via its pre-defined instance [`default`](https://docs.python.org/3/library/email.policy.html#email.policy.default "email.policy.default").
When a [`Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "email.message.Message") or [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") object is created, it acquires a policy. If the message is created by a [`parser`](https://docs.python.org/3/library/email.parser.html#module-email.parser "email.parser: Parse flat text email messages to produce a message object structure."), a policy passed to the parser will be the policy used by the message it creates. If the message is created by the program, then the policy can be specified when it is created. When a message is passed to a [`generator`](https://docs.python.org/3/library/email.generator.html#module-email.generator "email.generator: Generate flat text email messages from a message structure."), the generator uses the policy from the message by default, but you can also pass a specific policy to the generator that will override the one stored on the message object.
The default value for the _policy_ keyword for the [`email.parser`](https://docs.python.org/3/library/email.parser.html#module-email.parser "email.parser: Parse flat text email messages to produce a message object structure.") classes and the parser convenience functions **will be changing** in a future version of Python. Therefore you should **always specify explicitly which policy you want to use** when calling any of the classes and functions described in the [`parser`](https://docs.python.org/3/library/email.parser.html#module-email.parser "email.parser: Parse flat text email messages to produce a message object structure.") module.
The first part of this documentation covers the features of [`Policy`](https://docs.python.org/3/library/email.policy.html#email.policy.Policy "email.policy.Policy"), an [abstract base cla