Title: Logging Exceptions and Integration with Warnings
URL: https://docs.python.org/3/library/logging.html
Summary: The `raiseExceptions` attribute determines if exceptions during logging should be propagated, with the default set to `True`. When set to `False`, exceptions are ignored, which is usually preferred in logging systems. Additionally, the `captureWarnings()` function allows integration between the logging and warnings modules.
---

logging.raiseExceptions[¶](https://docs.python.org/3/library/logging.html#logging.raiseExceptions "Link to this definition")
    
Used to see if exceptions during handling should be propagated.
Default: `True`.
If [`raiseExceptions`](https://docs.python.org/3/library/logging.html#logging.raiseExceptions "logging.raiseExceptions") is `False`, exceptions get silently ignored. This is what is mostly wanted for a logging system - most users will not care about errors in the logging system, they are more interested in application errors.
## Integration with the warnings module[¶](https://docs.python.org/3/library/logging.html#integration-with-the-warnings-module "Link to this heading")
The [`captureWarnings()`](https://docs.python.org/3/library/logging.html#logging.captureWarnings "logging.captureWarnings") function can be used to integrate [`logging`](https://docs.python.org/3/library/logging.html#module-logging "logging: Flexible event logging system for applications.") with the [`warnings`](https://docs.python.org/3/library/warnings.html#module-warnings "warnings: Issue warning messages and control their disposition.") module. 

logging.captureWarnings(_capture_)[¶](https://docs.python.org/3/library/logging.html#logging.captureWarnings "Link to this definition")
    
This function is used to turn the capture of warnings by logging on and off.
If _capture_ is `True`, warnings issued by the [`warnings`](https://docs.python.org/3/library/warnings.html#module-warnings "warnings: Issue warning messages and control their disposition.") module will be redirected to the logging system. Specifically, a warning will be formatted using [`warnings.formatwarning()`](https://docs.python.org/3/library/warnings.html#warnings.formatwarning "warnings.formatwarning") and the resulting string logged to a logger named `'py.warnings'` with a severity of [`WARNING`](https://docs.python.org/3/library/logging.html#logging.WARNING "logging.WARNING").
If _capture_ is `False`, the redirection of warnings to the logging system will stop, and warnings will be redirected to their original destinations (i.e. those in effect before `captureWarnings(True)` was called).
See also 

Module [`logging.config`](https://docs.python.org/3/library/logging.config.html#module-logging.config "logging.config: Configuration of the logging module.")
    
Configuration API for the logging module. 

Module [`logging.handlers`](https://docs.python.org/3/library/logging.handlers.html#module-logging.handlers "logging.handlers: Handlers for the logging module.")
    
Useful handlers included with the logging module. 

[**PEP 282**](https://peps.python.org/pep-0282/) - A Logging System
    
The proposal which described this feature for inclusion in the Python standard library. 

[Original Python logging package](https://old.red-dove.com/python_logging.html)
    
This is the original source for the [`logging`](https://docs.python.org/3/library/logging.html#module-logging "logging: Flexible event logging system for applications.") package. The version of the package available from this site is suitable for use with Python 1.5.2, 2.1.x and 2.2.x, which do not include the [`logging`](https://docs.python.org/3/library/logging.html#module-logging "logging: Flexible event logging system for applications.") package in the standard library.
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [`logging` — Logging facility for Python](https://docs.python.org/3/library/logging.html)
    * [Logger Objects](https://docs.python.org/3/library/logging.html#logger-objects)
    * [Logging Levels](https://docs.python.org/3/library/logging.html#logging-levels)
    * [Handler Objects](https://docs.python.org/3/library/logging.html#handler-objects)
    * [Formatter Objects](https://docs.python.org/3/library/logging.html#formatter-objects)
    * [Filter Objects](https://docs.python.org/3/library/logging.html#filter-objects)
    * [LogRecord Objects](https://docs.python.org/3/library/logging.html#logrecord-objects)
    * [LogRecord attributes](https://docs.python.org/3/library/logging.html#logrecord-attributes)
    * [LoggerAdapter Objects](https://docs.python.org/3/library/logging.html#loggeradapter-objects)
    * [Thread Safety](https://docs.python.org/3/library/logging.html#thread-safety)
    * [Module-Level Functions](https://docs.python.org/3/library/logging.html#module-level-functions)
    * [Module-Level Attributes](https://docs.python.org/3/library/logging.html#module-level-attributes)
    * [Integration with the warnings module](https://docs.python.org/3/library/logging.html#integration-with-the-warnings-module)