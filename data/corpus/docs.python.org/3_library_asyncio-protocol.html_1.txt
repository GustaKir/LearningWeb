Title: Transports and Protocols in Asyncio
URL: https://docs.python.org/3/library/asyncio-protocol.html
Summary: This section introduces the concepts of Transports and Protocols in Python's asyncio library, emphasizing their use in low-level event loop APIs for high-performance network and IPC protocols. It clarifies that these components are intended for library and framework development rather than high-level applications.
---

# Transports and Protocols[¶](https://docs.python.org/3/library/asyncio-protocol.html#transports-and-protocols "Link to this heading")
Preface
Transports and Protocols are used by the **low-level** event loop APIs such as [`loop.create_connection()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_connection "asyncio.loop.create_connection"). They use callback-based programming style and enable high-performance implementations of network or IPC protocols (e.g. HTTP).
Essentially, transports and protocols should only be used in libraries and frameworks and never in high-level asyncio applications.
This documentation page covers both [Transports](https://docs.python.org/3/library/asyncio-protocol.html#transports) and [Protocols](https://docs.python.org/3/library/asyncio-protocol.html#protocols).
Introduction
At the highest level, the transport is concerned with _how_ bytes are transmitted, while the protocol determines _which_ bytes to transmit (and to some extent when).
A different way of saying the same thing: a transport is an abstraction for a socket (or similar I/O endpoint) while a protocol is an abstraction for an application, from the transport’s point of view.
Yet another view is the transport and protocol interfaces together define an abstract interface for using network I/O and interprocess I/O.
There is always a 1:1 relationship between transport and protocol objects: the protocol calls transport methods to send data, while the transport calls protocol methods to pass it data that has been received.
Most of connection oriented event loop methods (such as [`loop.create_connection()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_connection "asyncio.loop.create_connection")) usually accept a _protocol_factory_ argument used to create a _Protocol_ object for an accepted connection, represented by a _Transport_ object. Such methods usually return a tuple of `(transport, protocol)`.
Contents
This documentation page contains the following sections:
  * The [Transports](https://docs.python.org/3/library/asyncio-protocol.html#transports) section documents asyncio [`BaseTransport`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.BaseTransport "asyncio.BaseTransport"), [`ReadTransport`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.ReadTransport "asyncio.ReadTransport"), [`WriteTransport`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.WriteTransport "asyncio.WriteTransport"), [`Transport`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.Transport "asyncio.Transport"), [`DatagramTransport`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.DatagramTransport "asyncio.DatagramTransport"), and [`SubprocessTransport`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.SubprocessTransport "asyncio.SubprocessTransport") classes.
  * The [Protocols](https://docs.python.org/3/library/asyncio-protocol.html#protocols) section documents asyncio [`BaseProtocol`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.BaseProtocol "asyncio.BaseProtocol"), [`Protocol`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.Protocol "asyncio.Protocol"), [`BufferedProtocol`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.BufferedProtocol "asyncio.BufferedProtocol"), [`DatagramProtocol`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.DatagramProtocol "asyncio.DatagramProtocol"), and [`SubprocessProtocol`](https://docs.python.org/3/library/asyncio-protocol.html#asyncio.SubprocessProtocol "asyncio.SubprocessProtocol") classes.
  * The [Examples](https://docs.python.org/3/library/asyncio-protocol.html#examples) section showcases how to work with transports, protocols, and low-level event loop APIs.


## Transports[¶](https://docs.python.org/3/library/asyncio-protocol.html#transports "Link to this heading")
**Source code:** [Lib/asyncio/transports.py](https://github.com/python/cpython/tree/3.13/Lib/asyncio/transports.py)
Transports are classes provided by [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O.") in order to abstract various kinds of communication channels.
Transport objects are always instantiated by an [asyncio event loop](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio-event-loop).
asyncio implements transports for TCP, UDP, SSL, and subprocess pipes. The methods available on a transport depend on the transport’s kind.
The transport classes are [not thread safe](https://docs.python.org/3/library/asyncio-dev.html#asyncio-multithreading).
### Transports Hierarchy[¶](https://docs.python.org/3/library/asyncio-protocol.html#transports-hierarchy "Link to this heading")