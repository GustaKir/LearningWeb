Title: List Methods in Python
URL: https://docs.python.org/3/tutorial/datastructures.html
Summary: This section describes various built-in methods for Python lists, including list.index() for finding the index of an item, list.count() for counting occurrences, list.sort() for sorting elements, list.reverse() for reversing order, and list.copy() for creating a shallow copy of the list.
---

list.index(_x_[, _start_[, _end_]])
    
Return zero-based index in the list of the first item whose value is equal to _x_. Raises a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if there is no such item.
The optional arguments _start_ and _end_ are interpreted as in the slice notation and are used to limit the search to a particular subsequence of the list. The returned index is computed relative to the beginning of the full sequence rather than the _start_ argument. 

list.count(_x_)
    
Return the number of times _x_ appears in the list. 

list.sort(_*_ , _key =None_, _reverse =False_)
    
Sort the items of the list in place (the arguments can be used for sort customization, see [`sorted()`](https://docs.python.org/3/library/functions.html#sorted "sorted") for their explanation). 

list.reverse()
    
Reverse the elements of the list in place. 

list.copy()
    
Return a shallow copy of the list. Similar to `a[:]`.
An example that uses most of the list methods:
>>>```
>>> fruits = ['orange', 'apple', 'pear', 'banana', 'kiwi', 'apple', 'banana']
>>> fruits.count('apple')
2
>>> fruits.count('tangerine')
0
>>> fruits.index('banana')
3
>>> fruits.index('banana', 4) # Find next banana starting at position 4
6
>>> fruits.reverse()
>>> fruits
['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange']
>>> fruits.append('grape')
>>> fruits
['banana', 'apple', 'kiwi', 'banana', 'pear', 'apple', 'orange', 'grape']
>>> fruits.sort()
>>> fruits
['apple', 'apple', 'banana', 'banana', 'grape', 'kiwi', 'orange', 'pear']
>>> fruits.pop()
'pear'

```

You might have noticed that methods like `insert`, `remove` or `sort` that only modify the list have no return value printed – they return the default `None`. [[1]](https://docs.python.org/3/tutorial/datastructures.html#id2) This is a design principle for all mutable data structures in Python.
Another thing you might notice is that not all data can be sorted or compared. For instance, `[None, 'hello', 10]` doesn’t sort because integers can’t be compared to strings and `None` can’t be compared to other types. Also, there are some types that don’t have a defined ordering relation. For example, `3+4j < 5+7j` isn’t a valid comparison.
### 5.1.1. Using Lists as Stacks[¶](https://docs.python.org/3/tutorial/datastructures.html#using-lists-as-stacks "Link to this heading")
The list methods make it very easy to use a list as a stack, where the last element added is the first element retrieved (“last-in, first-out”). To add an item to the top of the stack, use `append()`. To retrieve an item from the top of the stack, use `pop()` without an explicit index. For example:
>>>```
>>> stack = [3, 4, 5]
>>> stack.append(6)
>>> stack.append(7)
>>> stack
[3, 4, 5, 6, 7]
>>> stack.pop()
7
>>> stack
[3, 4, 5, 6]
>>> stack.pop()
6
>>> stack.pop()
5
>>> stack
[3, 4]

```

### 5.1.2. Using Lists as Queues[¶](https://docs.python.org/3/tutorial/datastructures.html#using-lists-as-queues "Link to this heading")
It is also possible to use a list as a queue, where the first element added is the first element retrieved (“first-in, first-out”); however, lists are not efficient for this purpose. While appends and pops from the end of list are fast, doing inserts or pops from the beginning of a list is slow (because all of the other elements have to be shifted by one).
To implement a queue, use [`collections.deque`](https://docs.python.org/3/library/collections.html#collections.deque "collections.deque") which was designed to have fast appends and pops from both ends. For example:
>>>```
>>> fromcollectionsimport deque
>>> queue = deque(["Eric", "John", "Michael"])
>>> queue.append("Terry")      # Terry arrives
>>> queue.append("Graham")     # Graham arrives
>>> queue.popleft()         # The first to arrive now leaves
'Eric'
>>> queue.popleft()         # The second to arrive now leaves
'John'
>>> queue              # Remaining queue in order of arrival
deque(['Michael', 'Terry', 'Graham'])

```

### 5.1.3. List Comprehensions[¶](https://docs.python.org/3/tutorial/datastructures.html#list-comprehensions "Link to this heading")
List comprehensions provide a concise way to create lists. Common applications are to make new lists where each element is the result of some operations applied to each member of another sequence or iterable, or to create a subsequence of those elements that satisfy a certain condition.
For example, assume we want to create a list of squares, like:
>>>```
>>> squares = []
>>> for x in range(10):
...   squares.append(x**2)
...
>>> squares
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]

```

Note that this creates (or overwrites) a variable named `x` that still exists after the loop completes. We can calculate the list of squares without any side effects using:
```
squares = list(map(lambda x: x**2, range(10)))

```

or, equivalently:
```
squares = [x**2 for x in range(10)]