Title: shlex Module: Punctuation Characters and Parsing Rules
URL: https://docs.python.org/3/library/shlex.html
Summary: This document describes the `shlex.punctuation_chars` property, which defines punctuation characters treated as single tokens during parsing. It also outlines parsing rules when `shlex` operates in non-POSIX mode, detailing how quote and escape characters are handled.
---

shlex.punctuation_chars[¶](https://docs.python.org/3/library/shlex.html#shlex.shlex.punctuation_chars "Link to this definition")
    
A read-only property. Characters that will be considered punctuation. Runs of punctuation characters will be returned as a single token. However, note that no semantic validity checking will be performed: for example, ‘>>>’ could be returned as a token, even though it may not be recognised as such by shells.
Added in version 3.6.
## Parsing Rules[¶](https://docs.python.org/3/library/shlex.html#parsing-rules "Link to this heading")
When operating in non-POSIX mode, [`shlex`](https://docs.python.org/3/library/shlex.html#shlex.shlex "shlex.shlex") will try to obey to the following rules.
  * Quote characters are not recognized within words (`Do"Not"Separate` is parsed as the single word `Do"Not"Separate`);
  * Escape characters are not recognized;
  * Enclosing characters in quotes preserve the literal value of all characters within the quotes;
  * Closing quotes separate words (`"Do"Separate` is parsed as `"Do"` and `Separate`);
  * If [`whitespace_split`](https://docs.python.org/3/library/shlex.html#shlex.shlex.whitespace_split "shlex.shlex.whitespace_split") is `False`, any character not declared to be a word character, whitespace, or a quote will be returned as a single-character token. If it is `True`, [`shlex`](https://docs.python.org/3/library/shlex.html#shlex.shlex "shlex.shlex") will only split words in whitespaces;
  * EOF is signaled with an empty string (`''`);
  * It’s not possible to parse empty strings, even if quoted.


When operating in POSIX mode, [`shlex`](https://docs.python.org/3/library/shlex.html#shlex.shlex "shlex.shlex") will try to obey to the following parsing rules.
  * Quotes are stripped out, and do not separate words (`"Do"Not"Separate"` is parsed as the single word `DoNotSeparate`);
  * Non-quoted escape characters (e.g. `'\'`) preserve the literal value of the next character that follows;
  * Enclosing characters in quotes which are not part of [`escapedquotes`](https://docs.python.org/3/library/shlex.html#shlex.shlex.escapedquotes "shlex.shlex.escapedquotes") (e.g. `"'"`) preserve the literal value of all characters within the quotes;
  * Enclosing characters in quotes which are part of [`escapedquotes`](https://docs.python.org/3/library/shlex.html#shlex.shlex.escapedquotes "shlex.shlex.escapedquotes") (e.g. `'"'`) preserves the literal value of all characters within the quotes, with the exception of the characters mentioned in [`escape`](https://docs.python.org/3/library/shlex.html#shlex.shlex.escape "shlex.shlex.escape"). The escape characters retain its special meaning only when followed by the quote in use, or the escape character itself. Otherwise the escape character will be considered a normal character.
  * EOF is signaled with a [`None`](https://docs.python.org/3/library/constants.html#None "None") value;
  * Quoted empty strings (`''`) are allowed.


## Improved Compatibility with Shells[¶](https://docs.python.org/3/library/shlex.html#improved-compatibility-with-shells "Link to this heading")
Added in version 3.6.
The [`shlex`](https://docs.python.org/3/library/shlex.html#module-shlex "shlex: Simple lexical analysis for Unix shell-like languages.") class provides compatibility with the parsing performed by common Unix shells like `bash`, `dash`, and `sh`. To take advantage of this compatibility, specify the `punctuation_chars` argument in the constructor. This defaults to `False`, which preserves pre-3.6 behaviour. However, if it is set to `True`, then parsing of the characters `();<>|&` is changed: any run of these characters is returned as a single token. While this is short of a full parser for shells (which would be out of scope for the standard library, given the multiplicity of shells out there), it does allow you to perform processing of command lines more easily than you could otherwise. To illustrate, you can see the difference in the following snippet:
>>>```
>>> importshlex
>>> text = "a && b; c && d || e; f >'abc'; (def \"ghi\")"
>>> s = shlex.shlex(text, posix=True)
>>> s.whitespace_split = True
>>> list(s)
['a', '&&', 'b;', 'c', '&&', 'd', '||', 'e;', 'f', '>abc;', '(def', 'ghi)']
>>> s = shlex.shlex(text, posix=True, punctuation_chars=True)
>>> s.whitespace_split = True
>>> list(s)
['a', '&&', 'b', ';', 'c', '&&', 'd', '||', 'e', ';', 'f', '>', 'abc', ';',
'(', 'def', 'ghi', ')']

```

Of course, tokens will be returned which are not valid for shells, and you’ll need to implement your own error checks on the returned tokens.
Instead of passing `True` as the value for the punctuation_chars parameter, you can pass a string with specific characters, which will be used to determine which characters constitute punctuation. For example:
>>>```
>>> importshlex
>>> s = shlex.shlex("a && b || c", punctuation_chars="|")
>>> list(s)
['a', '&', '&', 'b', '||', 'c']