Title: tarfile.TarFile Class Constructor
URL: https://docs.python.org/3/library/tarfile.html
Summary: The `tarfile.TarFile` class constructor initializes a TarFile object with various optional parameters including the archive name, mode (read, append, write, or exclusive create), and options for file handling. The constructor supports path-like objects and attributes are accessible as instance properties.
---

_class_ tarfile.TarFile(_name =None_, _mode ='r'_, _fileobj =None_, _format =DEFAULT_FORMAT_, _tarinfo =TarInfo_, _dereference =False_, _ignore_zeros =False_, _encoding =ENCODING_, _errors ='surrogateescape'_, _pax_headers =None_, _debug =0_, _errorlevel =1_, _stream =False_)[¶](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile "Link to this definition")
    
All following arguments are optional and can be accessed as instance attributes as well.
_name_ is the pathname of the archive. _name_ may be a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object). It can be omitted if _fileobj_ is given. In this case, the file object’s `name` attribute is used if it exists.
_mode_ is either `'r'` to read from an existing archive, `'a'` to append data to an existing file, `'w'` to create a new file overwriting an existing one, or `'x'` to create a new file only if it does not already exist.
If _fileobj_ is given, it is used for reading or writing data. If it can be determined, _mode_ is overridden by _fileobj_ ’s mode. _fileobj_ will be used from position 0.
Note
_fileobj_ is not closed, when [`TarFile`](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile "tarfile.TarFile") is closed.
_format_ controls the archive format for writing. It must be one of the constants [`USTAR_FORMAT`](https://docs.python.org/3/library/tarfile.html#tarfile.USTAR_FORMAT "tarfile.USTAR_FORMAT"), [`GNU_FORMAT`](https://docs.python.org/3/library/tarfile.html#tarfile.GNU_FORMAT "tarfile.GNU_FORMAT") or [`PAX_FORMAT`](https://docs.python.org/3/library/tarfile.html#tarfile.PAX_FORMAT "tarfile.PAX_FORMAT") that are defined at module level. When reading, format will be automatically detected, even if different formats are present in a single archive.
The _tarinfo_ argument can be used to replace the default [`TarInfo`](https://docs.python.org/3/library/tarfile.html#tarfile.TarInfo "tarfile.TarInfo") class with a different one.
If _dereference_ is [`False`](https://docs.python.org/3/library/constants.html#False "False"), add symbolic and hard links to the archive. If it is [`True`](https://docs.python.org/3/library/constants.html#True "True"), add the content of the target files to the archive. This has no effect on systems that do not support symbolic links.
If _ignore_zeros_ is [`False`](https://docs.python.org/3/library/constants.html#False "False"), treat an empty block as the end of the archive. If it is [`True`](https://docs.python.org/3/library/constants.html#True "True"), skip empty (and invalid) blocks and try to get as many members as possible. This is only useful for reading concatenated or damaged archives.
_debug_ can be set from `0` (no debug messages) up to `3` (all debug messages). The messages are written to `sys.stderr`.
_errorlevel_ controls how extraction errors are handled, see [`the corresponding attribute`](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile.errorlevel "tarfile.TarFile.errorlevel").
The _encoding_ and _errors_ arguments define the character encoding to be used for reading or writing the archive and how conversion errors are going to be handled. The default settings will work for most users. See section [Unicode issues](https://docs.python.org/3/library/tarfile.html#tar-unicode) for in-depth information.
The _pax_headers_ argument is an optional dictionary of strings which will be added as a pax global header if _format_ is [`PAX_FORMAT`](https://docs.python.org/3/library/tarfile.html#tarfile.PAX_FORMAT "tarfile.PAX_FORMAT").
If _stream_ is set to [`True`](https://docs.python.org/3/library/constants.html#True "True") then while reading the archive info about files in the archive are not cached, saving memory.
Changed in version 3.2: Use `'surrogateescape'` as the default for the _errors_ argument.
Changed in version 3.5: The `'x'` (exclusive creation) mode was added.
Changed in version 3.6: The _name_ parameter accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object).
Changed in version 3.13: Add the _stream_ parameter. 

_classmethod_ TarFile.open(_..._)[¶](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile.open "Link to this definition")
    
Alternative constructor. The [`tarfile.open()`](https://docs.python.org/3/library/tarfile.html#tarfile.open "tarfile.open") function is actually a shortcut to this classmethod. 

TarFile.getmember(_name_)[¶](https://docs.python.org/3/library/tarfile.html#tarfile.TarFile.getmember "Link to this definition")
    
Return a [`TarInfo`](https://docs.python.org/3/library/tarfile.html#tarfile.TarInfo "tarfile.TarInfo") object for member _name_. If _name_ can not be found in the archive, [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError") is raised.
Note
If a member occurs more than once in the archive, its last occurrence is assumed to be the most up-to-date version.