Title: IMAP4 Methods Overview
URL: https://docs.python.org/3/library/imaplib.html
Summary: This section describes IMAP4 methods including server continuation response handling, mailbox checkpointing, closing a selected mailbox, and copying messages to a new mailbox. Notably, usernames and passwords are now encoded in utf-8 since version 3.5.
---

```

It will be called to process server continuation responses; the _response_ argument it is passed will be `bytes`. It should return `bytes` _data_ that will be base64 encoded and sent to the server. It should return `None` if the client abort response `*` should be sent instead.
Changed in version 3.5: string usernames and passwords are now encoded to `utf-8` instead of being limited to ASCII. 

IMAP4.check()[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.check "Link to this definition")
    
Checkpoint mailbox on server. 

IMAP4.close()[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.close "Link to this definition")
    
Close currently selected mailbox. Deleted messages are removed from writable mailbox. This is the recommended command before `LOGOUT`. 

IMAP4.copy(_message_set_ , _new_mailbox_)[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.copy "Link to this definition")
    
Copy _message_set_ messages onto end of _new_mailbox_. 

IMAP4.create(_mailbox_)[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.create "Link to this definition")
    
Create new mailbox named _mailbox_. 

IMAP4.delete(_mailbox_)[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.delete "Link to this definition")
    
Delete old mailbox named _mailbox_. 

IMAP4.deleteacl(_mailbox_ , _who_)[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.deleteacl "Link to this definition")
    
Delete the ACLs (remove any rights) set for who on mailbox. 

IMAP4.enable(_capability_)[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.enable "Link to this definition")
    
Enable _capability_ (see [**RFC 5161**](https://datatracker.ietf.org/doc/html/rfc5161.html)). Most capabilities do not need to be enabled. Currently only the `UTF8=ACCEPT` capability is supported (see [**RFC 6855**](https://datatracker.ietf.org/doc/html/rfc6855.html)).
Added in version 3.5: The [`enable()`](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.enable "imaplib.IMAP4.enable") method itself, and [**RFC 6855**](https://datatracker.ietf.org/doc/html/rfc6855.html) support. 

IMAP4.expunge()[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.expunge "Link to this definition")
    
Permanently remove deleted items from selected mailbox. Generates an `EXPUNGE` response for each deleted message. Returned data contains a list of `EXPUNGE` message numbers in order received. 

IMAP4.fetch(_message_set_ , _message_parts_)[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.fetch "Link to this definition")
    
Fetch (parts of) messages. _message_parts_ should be a string of message part names enclosed within parentheses, eg: `"(UID BODY[TEXT])"`. Returned data are tuples of message part envelope and data. 

IMAP4.getacl(_mailbox_)[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.getacl "Link to this definition")
    
Get the `ACL`s for _mailbox_. The method is non-standard, but is supported by the `Cyrus` server. 

IMAP4.getannotation(_mailbox_ , _entry_ , _attribute_)[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.getannotation "Link to this definition")
    
Retrieve the specified `ANNOTATION`s for _mailbox_. The method is non-standard, but is supported by the `Cyrus` server. 

IMAP4.getquota(_root_)[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.getquota "Link to this definition")
    
Get the `quota` _root_ ’s resource usage and limits. This method is part of the IMAP4 QUOTA extension defined in rfc2087. 

IMAP4.getquotaroot(_mailbox_)[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.getquotaroot "Link to this definition")
    
Get the list of `quota` `roots` for the named _mailbox_. This method is part of the IMAP4 QUOTA extension defined in rfc2087. 

IMAP4.list([_directory_[, _pattern_]])[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.list "Link to this definition")
    
List mailbox names in _directory_ matching _pattern_. _directory_ defaults to the top-level mail folder, and _pattern_ defaults to match anything. Returned data contains a list of `LIST` responses. 

IMAP4.login(_user_ , _password_)[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.login "Link to this definition")
    
Identify the client using a plaintext password. The _password_ will be quoted. 

IMAP4.login_cram_md5(_user_ , _password_)[¶](https://docs.python.org/3/library/imaplib.html#imaplib.IMAP4.login_cram_md5 "Link to this definition")
    
Force use of `CRAM-MD5` authentication when identifying the client to protect the password. Will only work if the server `CAPABILITY` response includes the phrase `AUTH=CRAM-MD5`.