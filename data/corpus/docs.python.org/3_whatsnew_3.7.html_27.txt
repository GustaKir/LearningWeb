Title: Python 3.7 Memory Management Enhancements
URL: https://docs.python.org/3/whatsnew/3.7.html
Summary: Python 3.7 introduces new C API functions `PyTraceMalloc_Track()` and `PyTraceMalloc_Untrack()` for tracing memory allocations with tracemalloc. Additionally, static markers `import__find__load__start()` and `import__find__load__done()` are added to facilitate tracing module imports.
---

racemalloc.html#module-tracemalloc "tracemalloc: Trace memory allocations.") now exposes a C API through the new [`PyTraceMalloc_Track()`](https://docs.python.org/3/c-api/memory.html#c.PyTraceMalloc_Track "PyTraceMalloc_Track") and [`PyTraceMalloc_Untrack()`](https://docs.python.org/3/c-api/memory.html#c.PyTraceMalloc_Untrack "PyTraceMalloc_Untrack") functions. (Contributed by Victor Stinner in [bpo-30054](https://bugs.python.org/issue?@action=redirect&bpo=30054).)
The new `import__find__load__start()` and `import__find__load__done()` static markers can be used to trace module imports. (Contributed by Christian Heimes in [bpo-31574](https://bugs.python.org/issue?@action=redirect&bpo=31574).)
The fields `name` and `doc` of structures [`PyMemberDef`](https://docs.python.org/3/c-api/structures.html#c.PyMemberDef "PyMemberDef"), [`PyGetSetDef`](https://docs.python.org/3/c-api/structures.html#c.PyGetSetDef "PyGetSetDef"), [`PyStructSequence_Field`](https://docs.python.org/3/c-api/tuple.html#c.PyStructSequence_Field "PyStructSequence_Field"), [`PyStructSequence_Desc`](https://docs.python.org/3/c-api/tuple.html#c.PyStructSequence_Desc "PyStructSequence_Desc"), and `wrapperbase` are now of type `const char *` rather of `char *`. (Contributed by Serhiy Storchaka in [bpo-28761](https://bugs.python.org/issue?@action=redirect&bpo=28761).)
The result of [`PyUnicode_AsUTF8AndSize()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_AsUTF8AndSize "PyUnicode_AsUTF8AndSize") and [`PyUnicode_AsUTF8()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_AsUTF8 "PyUnicode_AsUTF8") is now of type `const char *` rather of `char *`. (Contributed by Serhiy Storchaka in [bpo-28769](https://bugs.python.org/issue?@action=redirect&bpo=28769).)
The result of [`PyMapping_Keys()`](https://docs.python.org/3/c-api/mapping.html#c.PyMapping_Keys "PyMapping_Keys"), [`PyMapping_Values()`](https://docs.python.org/3/c-api/mapping.html#c.PyMapping_Values "PyMapping_Values") and [`PyMapping_Items()`](https://docs.python.org/3/c-api/mapping.html#c.PyMapping_Items "PyMapping_Items") is now always a list, rather than a list or a tuple. (Contributed by Oren Milman in [bpo-28280](https://bugs.python.org/issue?@action=redirect&bpo=28280).)
Added functions [`PySlice_Unpack()`](https://docs.python.org/3/c-api/slice.html#c.PySlice_Unpack "PySlice_Unpack") and [`PySlice_AdjustIndices()`](https://docs.python.org/3/c-api/slice.html#c.PySlice_AdjustIndices "PySlice_AdjustIndices"). (Contributed by Serhiy Storchaka in [bpo-27867](https://bugs.python.org/issue?@action=redirect&bpo=27867).)
[`PyOS_AfterFork()`](https://docs.python.org/3/c-api/sys.html#c.PyOS_AfterFork "PyOS_AfterFork") is deprecated in favour of the new functions [`PyOS_BeforeFork()`](https://docs.python.org/3/c-api/sys.html#c.PyOS_BeforeFork "PyOS_BeforeFork"), [`PyOS_AfterFork_Parent()`](https://docs.python.org/3/c-api/sys.html#c.PyOS_AfterFork_Parent "PyOS_AfterFork_Parent") and [`PyOS_AfterFork_Child()`](https://docs.python.org/3/c-api/sys.html#c.PyOS_AfterFork_Child "PyOS_AfterFork_Child"). (Contributed by Antoine Pitrou in [bpo-16500](https://bugs.python.org/issue?@action=redirect&bpo=16500).)
The `PyExc_RecursionErrorInst` singleton that was part of the public API has been removed as its members being never cleared may cause a segfault during finalization of the interpreter. Contributed by Xavier de Gaye in [bpo-22898](https://bugs.python.org/issue?@action=redirect&bpo=22898) and [bpo-30697](https://bugs.python.org/issue?@action=redirect&bpo=30697).
Added C API support for timezones with timezone constructors [`PyTimeZone_FromOffset()`](https://docs.python.org/3/c-api/datetime.html#c.PyTimeZone_FromOffset "PyTimeZone_FromOffset") and [`PyTimeZone_FromOffsetAndName()`](https://docs.python.org/3/c-api/datetime.html#c.PyTimeZone_FromOffsetAndName "PyTimeZone_FromOffsetAndName"), and access to the UTC singleton with [`PyDateTime_TimeZone_UTC`](https://docs.python.org/3/c-api/datetime.html#c.PyDateTime_TimeZone_UTC "PyDateTime_TimeZone_UTC"). Contributed by Paul Ganssle in [bpo-10381](https://bugs.python.org/issue?@action=redirect&bpo=10381).
The type of results of `PyThread_start_new_thread()` and `PyThread_get_thread_ident()`, and the _id_ parameter of [`PyThreadState_SetAsyncExc()`](https://docs.python.org/3/c-api/init.html#c.PyThreadState_SetAsyncExc "PyThreadState_SetAsyncExc") changed from long to unsignedlong. (Contributed by Serhiy Storchaka in [bpo-6532](https://bugs.python.org/issue?@action=redirect&bpo=6532).)
[`PyUnicode_AsWideCharString()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_AsWideCharString "PyUnicode_AsWideCharString") now raises a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if the second argument is `NULL` and the wchar_t* string contains null characters.