Title: Changed C APIs in Python 3.13
URL: https://docs.python.org/3/whatsnew/3.13.html
Summary: In Python 3.13, the _keywords_ parameter for the functions PyArg_ParseTupleAndKeywords and PyArg_VaParseTupleAndKeywords has been changed to type char*const* in C and const char*const* in C++. This update improves compatibility and supports specific argument types without needing an explicit type cast. The change was contributed by Serhiy Storchaka.
---

### Changed C APIs[Â¶](https://docs.python.org/3/whatsnew/3.13.html#changed-c-apis "Link to this heading")
  * The _keywords_ parameter of [`PyArg_ParseTupleAndKeywords()`](https://docs.python.org/3/c-api/arg.html#c.PyArg_ParseTupleAndKeywords "PyArg_ParseTupleAndKeywords") and [`PyArg_VaParseTupleAndKeywords()`](https://docs.python.org/3/c-api/arg.html#c.PyArg_VaParseTupleAndKeywords "PyArg_VaParseTupleAndKeywords") now has type char*const* in C and constchar*const* in C++, instead of char**. In C++, this makes these functions compatible with arguments of type constchar*const*, constchar**, or char*const* without an explicit type cast. In C, the functions only support arguments of type char*const*. This can be overridden with the [`PY_CXX_CONST`](https://docs.python.org/3/c-api/arg.html#c.PY_CXX_CONST "PY_CXX_CONST") macro. (Contributed by Serhiy Storchaka in [gh-65210](https://github.com/python/cpython/issues/65210).)
  * [`PyArg_ParseTupleAndKeywords()`](https://docs.python.org/3/c-api/arg.html#c.PyArg_ParseTupleAndKeywords "PyArg_ParseTupleAndKeywords") now supports non-ASCII keyword parameter names. (Contributed by Serhiy Storchaka in [gh-110815](https://github.com/python/cpython/issues/110815).)
  * The `PyCode_GetFirstFree()` function is now unstable API and is now named [`PyUnstable_Code_GetFirstFree()`](https://docs.python.org/3/c-api/code.html#c.PyUnstable_Code_GetFirstFree "PyUnstable_Code_GetFirstFree"). (Contributed by Bogdan Romanyuk in [gh-115781](https://github.com/python/cpython/issues/115781).)
  * The [`PyDict_GetItem()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_GetItem "PyDict_GetItem"), [`PyDict_GetItemString()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_GetItemString "PyDict_GetItemString"), [`PyMapping_HasKey()`](https://docs.python.org/3/c-api/mapping.html#c.PyMapping_HasKey "PyMapping_HasKey"), [`PyMapping_HasKeyString()`](https://docs.python.org/3/c-api/mapping.html#c.PyMapping_HasKeyString "PyMapping_HasKeyString"), [`PyObject_HasAttr()`](https://docs.python.org/3/c-api/object.html#c.PyObject_HasAttr "PyObject_HasAttr"), [`PyObject_HasAttrString()`](https://docs.python.org/3/c-api/object.html#c.PyObject_HasAttrString "PyObject_HasAttrString"), and [`PySys_GetObject()`](https://docs.python.org/3/c-api/sys.html#c.PySys_GetObject "PySys_GetObject") functions, each of which clears all errors which occurred when calling them now reports these errors using [`sys.unraisablehook()`](https://docs.python.org/3/library/sys.html#sys.unraisablehook "sys.unraisablehook"). You may replace them with other functions as recommended in the documentation. (Contributed by Serhiy Storchaka in [gh-106672](https://github.com/python/cpython/issues/106672).)
  * Add support for the `%T`, `%#T`, `%N` and `%#N` formats to [`PyUnicode_FromFormat()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FromFormat "PyUnicode_FromFormat"):
    * `%T`: Get the fully qualified name of an object type
    * `%#T`: As above, but use a colon as the separator
    * `%N`: Get the fully qualified name of a type
    * `%#N`: As above, but use a colon as the separator
See [**PEP 737**](https://peps.python.org/pep-0737/) for more information. (Contributed by Victor Stinner in [gh-111696](https://github.com/python/cpython/issues/111696).)
  * You no longer have to define the `PY_SSIZE_T_CLEAN` macro before including `Python.h` when using `#` formats in [format codes](https://docs.python.org/3/c-api/arg.html#arg-parsing-string-and-buffers). APIs accepting the format codes always use `Py_ssize_t` for `#` formats. (Contributed by Inada Naoki in [gh-104922](https://github.com/python/cpython/issues/104922).)
  * If Python is built in [debug mode](https://docs.python.org/3/using/configure.html#debug-build) or [`with assertions`](https://docs.python.org/3/using/configure.html#cmdoption-with-assertions), [`PyTuple_SET_ITEM()`](https://docs.python.org/3/c-api/tuple.html#c.PyTuple_SET_ITEM "PyTuple_SET_ITEM") and [`PyList_SET_ITEM()`](https://docs.python.org/3/c-api/list.html#c.PyList_SET_ITEM "PyList_SET_ITEM") now check the index argument with an assertion. (Contributed by Victor Stinner in [gh-106168](https://github.com/python/cpython/issues/106168).)