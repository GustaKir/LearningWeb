Title: Test Decorators in Python
URL: https://docs.python.org/3/library/test.html
Summary: This section describes various decorators used in Python's testing framework to skip tests based on specific system requirements, such as minimum macOS version, GIL status, IEEE 754 compliance, and availability of zlib.
---

@test.support.requires_mac_version(_* min_version_)[¶](https://docs.python.org/3/library/test.html#test.support.requires_mac_version "Link to this definition")
    
Decorator for the minimum version when running test on macOS. If the macOS version is less than the minimum, the test is skipped. 

@test.support.requires_gil_enabled[¶](https://docs.python.org/3/library/test.html#test.support.requires_gil_enabled "Link to this definition")
    
Decorator for skipping tests on the free-threaded build. If the [GIL](https://docs.python.org/3/glossary.html#term-GIL) is disabled, the test is skipped. 

@test.support.requires_IEEE_754[¶](https://docs.python.org/3/library/test.html#test.support.requires_IEEE_754 "Link to this definition")
    
Decorator for skipping tests on non-IEEE 754 platforms. 

@test.support.requires_zlib[¶](https://docs.python.org/3/library/test.html#test.support.requires_zlib "Link to this definition")
    
Decorator for skipping tests if [`zlib`](https://docs.python.org/3/library/zlib.html#module-zlib "zlib: Low-level interface to compression and decompression routines compatible with gzip.") doesn’t exist. 

@test.support.requires_gzip[¶](https://docs.python.org/3/library/test.html#test.support.requires_gzip "Link to this definition")
    
Decorator for skipping tests if [`gzip`](https://docs.python.org/3/library/gzip.html#module-gzip "gzip: Interfaces for gzip compression and decompression using file objects.") doesn’t exist. 

@test.support.requires_bz2[¶](https://docs.python.org/3/library/test.html#test.support.requires_bz2 "Link to this definition")
    
Decorator for skipping tests if [`bz2`](https://docs.python.org/3/library/bz2.html#module-bz2 "bz2: Interfaces for bzip2 compression and decompression.") doesn’t exist. 

@test.support.requires_lzma[¶](https://docs.python.org/3/library/test.html#test.support.requires_lzma "Link to this definition")
    
Decorator for skipping tests if [`lzma`](https://docs.python.org/3/library/lzma.html#module-lzma "lzma: A Python wrapper for the liblzma compression library.") doesn’t exist. 

@test.support.requires_resource(_resource_)[¶](https://docs.python.org/3/library/test.html#test.support.requires_resource "Link to this definition")
    
Decorator for skipping tests if _resource_ is not available. 

@test.support.requires_docstrings[¶](https://docs.python.org/3/library/test.html#test.support.requires_docstrings "Link to this definition")
    
Decorator for only running the test if [`HAVE_DOCSTRINGS`](https://docs.python.org/3/library/test.html#test.support.HAVE_DOCSTRINGS "test.support.HAVE_DOCSTRINGS"). 

@test.support.requires_limited_api[¶](https://docs.python.org/3/library/test.html#test.support.requires_limited_api "Link to this definition")
    
Decorator for only running the test if [Limited C API](https://docs.python.org/3/c-api/stable.html#limited-c-api) is available. 

@test.support.cpython_only[¶](https://docs.python.org/3/library/test.html#test.support.cpython_only "Link to this definition")
    
Decorator for tests only applicable to CPython. 

@test.support.impl_detail(_msg =None_, _** guards_)[¶](https://docs.python.org/3/library/test.html#test.support.impl_detail "Link to this definition")
    
Decorator for invoking [`check_impl_detail()`](https://docs.python.org/3/library/test.html#test.support.check_impl_detail "test.support.check_impl_detail") on _guards_. If that returns `False`, then uses _msg_ as the reason for skipping the test. 

@test.support.no_tracing[¶](https://docs.python.org/3/library/test.html#test.support.no_tracing "Link to this definition")
    
Decorator to temporarily turn off tracing for the duration of the test. 

@test.support.refcount_test[¶](https://docs.python.org/3/library/test.html#test.support.refcount_test "Link to this definition")
    
Decorator for tests which involve reference counting. The decorator does not run the test if it is not run by CPython. Any trace function is unset for the duration of the test to prevent unexpected refcounts caused by the trace function. 

@test.support.bigmemtest(_size_ , _memuse_ , _dry_run =True_)[¶](https://docs.python.org/3/library/test.html#test.support.bigmemtest "Link to this definition")
    
Decorator for bigmem tests.
_size_ is a requested size for the test (in arbitrary, test-interpreted units.) _memuse_ is the number of bytes per unit for the test, or a good estimate of it. For example, a test that needs two byte buffers, of 4 GiB each, could be decorated with `@bigmemtest(size=_4G, memuse=2)`.
The _size_ argument is normally passed to the decorated test method as an extra argument. If _dry_run_ is `True`, the value passed to the test method may be less than the requested value. If _dry_run_ is `False`, it means the test doesn’t support dummy runs when `-M` is not specified.