Title: Python 3 Changelog - Recent Fixes
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section notes several patches and fixes contributed by various developers, addressing issues such as frame object manipulations potentially corrupting inline bytecode caches, metaclass descriptor lookups being ignored, crashes during bytearray item assignment, a reference counting bug in bool.__repr__(), and inaccuracies in column offset information for multi-line method lookups.
---

Patch by Pablo Galindo.
  * [gh-94893](https://github.com/python/cpython/issues/94893): Fix an issue where frame object manipulations could corrupt inline bytecode caches.
  * [gh-94822](https://github.com/python/cpython/issues/94822): Fix an issue where lookups of metaclass descriptors may be ignored when an identically-named attribute also exists on the class itself.
  * [gh-91153](https://github.com/python/cpython/issues/91153): Fix an issue where a [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") item assignment could crash if it’s resized by the new value’s `__index__()` method.
  * [gh-90699](https://github.com/python/cpython/issues/90699): Fix reference counting bug in `bool.__repr__()`. Patch by Kumar Aditya.
  * [gh-94694](https://github.com/python/cpython/issues/94694): Fix an issue that could cause code with multi-line method lookups to have misleading or incorrect column offset information. In some cases (when compiling a hand-built AST) this could have resulted in a hard crash of the interpreter.
  * [gh-93252](https://github.com/python/cpython/issues/93252): Fix an issue that caused internal frames to outlive failed Python function calls, possibly resulting in memory leaks or hard interpreter crashes.
  * [gh-94215](https://github.com/python/cpython/issues/94215): Fix an issue where exceptions raised by line-tracing events would cause frames to be left in an invalid state, possibly resulting in a hard crash of the interpreter.
  * [gh-92228](https://github.com/python/cpython/issues/92228): Disable the compiler’s inline-small-exit-blocks optimization for exit blocks that are associated with source code lines. This fixes a bug where the debugger cannot tell where an exception handler ends and the following code block begins.
  * [gh-94485](https://github.com/python/cpython/issues/94485): Line number of a module’s `RESUME` instruction is set to 0 as specified in [**PEP 626**](https://peps.python.org/pep-0626/).
  * [gh-94438](https://github.com/python/cpython/issues/94438): Account for instructions that can push NULL to the stack when setting line number in a frame. Prevents some (unlikely) crashes.
  * [gh-91719](https://github.com/python/cpython/issues/91719): Reload `opcode` when raising `unknown opcode error` in the interpreter main loop, for C compilers to generate dispatching code independently.
  * [gh-94329](https://github.com/python/cpython/issues/94329): Compile and run code with unpacking of extremely large sequences (1000s of elements). Such code failed to compile. It now compiles and runs correctly.
  * [gh-94360](https://github.com/python/cpython/issues/94360): Fixed a tokenizer crash when reading encoded files with syntax errors from `stdin` with non utf-8 encoded text. Patch by Pablo Galindo
  * [gh-88116](https://github.com/python/cpython/issues/88116): Fix an issue when reading line numbers from code objects if the encoded line numbers are close to `INT_MIN`. Patch by Pablo Galindo
  * [gh-94262](https://github.com/python/cpython/issues/94262): Don’t create frame objects for incomplete frames. Prevents the creation of generators and closures from being observable to Python and C extensions, restoring the behavior of 3.10 and earlier.
  * [gh-94192](https://github.com/python/cpython/issues/94192): Fix error for dictionary literals with invalid expression as value.
  * [gh-87995](https://github.com/python/cpython/issues/87995): [`types.MappingProxyType`](https://docs.python.org/3/library/types.html#types.MappingProxyType "types.MappingProxyType") instances are now hashable if the underlying mapping is hashable.
  * [gh-93883](https://github.com/python/cpython/issues/93883): Revise the display strategy of traceback enhanced error locations. The indicators are only shown when the location doesn’t span the whole line.
  * [gh-94163](https://github.com/python/cpython/issues/94163): Add [`BINARY_SLICE`](https://docs.python.org/3/library/dis.html#opcode-BINARY_SLICE) and [`STORE_SLICE`](https://docs.python.org/3/library/dis.html#opcode-STORE_SLICE) instructions for more efficient handling and better specialization of slicing operations, where the slice is explicit in the source code.
  * [gh-94021](https://github.com/python/cpython/issues/94021): Fix unreachable code warning in `Python/specialize.c`.
  * [gh-93911](https://github.com/python/cpython/issues/93911): Specialize `LOAD_ATTR` for objects with custom `__getattribute__`.
  * [gh-93955](https://github.com/python/cpython/issues/93955): Improve performance of attribute lookups on objects with custom `__getattribute__` and `__getattr__`. Patch by Ken Jin.
  * [gh-93911](https://github.com/python/cpython/issues/93911): Specialize `LOAD_ATTR` for `property()` attributes.
  * [gh-93678](https://github.com/python/cpython/issues/93678): Refactor compiler optimisation code so that it no longer needs the `struct assembler` and `struct compiler` passed around.