Title: I/O Base Classes in Python
URL: https://docs.python.org/3/library/io.html
Summary: This section outlines the key I/O base classes in Python, including `IOBase`, `BufferedIOBase`, and `TextIOBase`. It details methods such as `detach`, `read`, `write`, and others inherited from `IOBase`, along with aspects related to reading and writing data, as well as handling encoding and errors.
---

ods, `read`, and `readall`  
[`BufferedIOBase`](https://docs.python.org/3/library/io.html#io.BufferedIOBase "io.BufferedIOBase") | [`IOBase`](https://docs.python.org/3/library/io.html#io.IOBase "io.IOBase") | `detach`, `read`, `read1`, and `write` | Inherited [`IOBase`](https://docs.python.org/3/library/io.html#io.IOBase "io.IOBase") methods, `readinto`, and `readinto1`  
[`TextIOBase`](https://docs.python.org/3/library/io.html#io.TextIOBase "io.TextIOBase") | [`IOBase`](https://docs.python.org/3/library/io.html#io.IOBase "io.IOBase") | `detach`, `read`, `readline`, and `write` | Inherited [`IOBase`](https://docs.python.org/3/library/io.html#io.IOBase "io.IOBase") methods, `encoding`, `errors`, and `newlines`  
### I/O Base Classes[¶](https://docs.python.org/3/library/io.html#i-o-base-classes "Link to this heading") 

_class_ io.IOBase[¶](https://docs.python.org/3/library/io.html#io.IOBase "Link to this definition")
    
The abstract base class for all I/O classes.
This class provides empty abstract implementations for many methods that derived classes can override selectively; the default implementations represent a file that cannot be read, written or seeked.
Even though [`IOBase`](https://docs.python.org/3/library/io.html#io.IOBase "io.IOBase") does not declare `read()` or `write()` because their signatures will vary, implementations and clients should consider those methods part of the interface. Also, implementations may raise a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") (or [`UnsupportedOperation`](https://docs.python.org/3/library/io.html#io.UnsupportedOperation "io.UnsupportedOperation")) when operations they do not support are called.
The basic type used for binary data read from or written to a file is [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes"). Other [bytes-like objects](https://docs.python.org/3/glossary.html#term-bytes-like-object) are accepted as method arguments too. Text I/O classes work with [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") data.
Note that calling any method (even inquiries) on a closed stream is undefined. Implementations may raise [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") in this case.
[`IOBase`](https://docs.python.org/3/library/io.html#io.IOBase "io.IOBase") (and its subclasses) supports the iterator protocol, meaning that an [`IOBase`](https://docs.python.org/3/library/io.html#io.IOBase "io.IOBase") object can be iterated over yielding the lines in a stream. Lines are defined slightly differently depending on whether the stream is a binary stream (yielding bytes), or a text stream (yielding character strings). See [`readline()`](https://docs.python.org/3/library/io.html#io.IOBase.readline "io.IOBase.readline") below.
[`IOBase`](https://docs.python.org/3/library/io.html#io.IOBase "io.IOBase") is also a context manager and therefore supports the [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement. In this example, _file_ is closed after the `with` statement’s suite is finished—even if an exception occurs:
```
with open('spam.txt', 'w') as file:
  file.write('Spam and eggs!')