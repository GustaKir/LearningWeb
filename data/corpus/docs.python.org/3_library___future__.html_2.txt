Title: Future Feature Release Management in Python
URL: https://docs.python.org/3/library/__future__.html
Summary: The section outlines how the `OptionalRelease` and `MandatoryRelease` attributes of Python's Future Feature management record the acceptance and implementation dates of features. `OptionalRelease` indicates the first release of acceptance, while `MandatoryRelease` either predicts when a feature will be implemented or notes when it has become part of the language. If `MandatoryRelease` is `None`, it signifies a dropped or undecided feature.
---

```


_Feature.getOptionalRelease()[¶](https://docs.python.org/3/library/__future__.html#future__._Feature.getOptionalRelease "Link to this definition")
    
_OptionalRelease_ records the first release in which the feature was accepted. 

_Feature.getMandatoryRelease()[¶](https://docs.python.org/3/library/__future__.html#future__._Feature.getMandatoryRelease "Link to this definition")
    
In the case of a _MandatoryRelease_ that has not yet occurred, _MandatoryRelease_ predicts the release in which the feature will become part of the language.
Else _MandatoryRelease_ records when the feature became part of the language; in releases at or after that, modules no longer need a future statement to use the feature in question, but may continue to use such imports.
_MandatoryRelease_ may also be `None`, meaning that a planned feature got dropped or that it is not yet decided. 

_Feature.compiler_flag[¶](https://docs.python.org/3/library/__future__.html#future__._Feature.compiler_flag "Link to this definition")
    
_CompilerFlag_ is the (bitfield) flag that should be passed in the fourth argument to the built-in function [`compile()`](https://docs.python.org/3/library/functions.html#compile "compile") to enable the feature in dynamically compiled code. This flag is stored in the [`_Feature.compiler_flag`](https://docs.python.org/3/library/__future__.html#future__._Feature.compiler_flag "__future__._Feature.compiler_flag") attribute on [`_Feature`](https://docs.python.org/3/library/__future__.html#future__._Feature "__future__._Feature") instances. [[1](https://docs.python.org/3/library/__future__.html#id1)]
`from __future__ import annotations` was previously scheduled to become mandatory in Python 3.10, but the Python Steering Council twice decided to delay the change ([announcement for Python 3.10](https://mail.python.org/archives/list/python-dev@python.org/message/CLVXXPQ2T2LQ5MP2Y53VVQFCXYWQJHKZ/); [announcement for Python 3.11](https://mail.python.org/archives/list/python-dev@python.org/message/VIZEBX5EYMSYIJNDBF6DMUMZOCWHARSO/)). No final decision has been made yet. See also [**PEP 563**](https://peps.python.org/pep-0563/) and [**PEP 649**](https://peps.python.org/pep-0649/).
See also 

[Future statements](https://docs.python.org/3/reference/simple_stmts.html#future)
    
How the compiler treats future imports. 

[**PEP 236**](https://peps.python.org/pep-0236/) - Back to the __future__
    
The original proposal for the __future__ mechanism.
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [`__future__` — Future statement definitions](https://docs.python.org/3/library/__future__.html)
    * [Module Contents](https://docs.python.org/3/library/__future__.html#module-contents)


#### Previous topic
[`traceback` — Print or retrieve a stack traceback](https://docs.python.org/3/library/traceback.html "previous chapter")
#### Next topic
[`gc` — Garbage Collector interface](https://docs.python.org/3/library/gc.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/__future__.rst)


«
### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/gc.html "gc — Garbage Collector interface") |
  * [previous](https://docs.python.org/3/library/traceback.html "traceback — Print or retrieve a stack traceback") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Python Runtime Services](https://docs.python.org/3/library/python.html) »
  * [`__future__` — Future statement definitions](https://docs.python.org/3/library/__future__.html)
  * | 
  * Theme  Auto Light Dark |


© [ Copyright ](https://docs.python.org/3/copyright.html) 2001-2025, Python Software Foundation. This page is licensed under the Python Software Foundation License Version 2. Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License. See [History and License](https://docs.python.org/license.html) for more information. The Python Software Foundation is a non-profit corporation. [Please donate.](https://www.python.org/psf/donations/) Last updated on Apr 27, 2025 (05:38 UTC). [Found a bug](https://docs.python.org/bugs.html)? Created using [Sphinx](https://www.sphinx-doc.org/) 8.2.3.