Title: Customizing File Parsing in argparse
URL: https://docs.python.org/3/library/argparse.html
Summary: This section discusses the impact of prefix matching rules on the `parse_known_args()` method in the argparse library, indicating that it may consume prefix options rather than leaving them in the remaining arguments. It also introduces the `convert_arg_line_to_args()` method, which is used to process arguments read from a file, where each argument is expected to be on a new line.
---

```

Warning
[Prefix matching](https://docs.python.org/3/library/argparse.html#prefix-matching) rules apply to [`parse_known_args()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.parse_known_args "argparse.ArgumentParser.parse_known_args"). The parser may consume an option even if it’s just a prefix of one of its known options, instead of leaving it in the remaining arguments list.
### Customizing file parsing[¶](https://docs.python.org/3/library/argparse.html#customizing-file-parsing "Link to this heading") 

ArgumentParser.convert_arg_line_to_args(_arg_line_)[¶](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.convert_arg_line_to_args "Link to this definition")
    
Arguments that are read from a file (see the _fromfile_prefix_chars_ keyword argument to the [`ArgumentParser`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser "argparse.ArgumentParser") constructor) are read one argument per line. [`convert_arg_line_to_args()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.convert_arg_line_to_args "argparse.ArgumentParser.convert_arg_line_to_args") can be overridden for fancier reading.
This method takes a single argument _arg_line_ which is a string read from the argument file. It returns a list of arguments parsed from this string. The method is called once per line read from the argument file, in order.
A useful override of this method is one that treats each space-separated word as an argument. The following example demonstrates how to do this:
```
classMyArgumentParser(argparse.ArgumentParser):
  defconvert_arg_line_to_args(self, arg_line):
    return arg_line.split()

```

### Exiting methods[¶](https://docs.python.org/3/library/argparse.html#exiting-methods "Link to this heading") 

ArgumentParser.exit(_status =0_, _message =None_)[¶](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.exit "Link to this definition")
    
This method terminates the program, exiting with the specified _status_ and, if given, it prints a _message_ to [`sys.stderr`](https://docs.python.org/3/library/sys.html#sys.stderr "sys.stderr") before that. The user can override this method to handle these steps differently:
```
classErrorCatchingArgumentParser(argparse.ArgumentParser):
  defexit(self, status=0, message=None):
    if status:
      raise Exception(f'Exiting because of an error: {message}')
    exit(status)

```


ArgumentParser.error(_message_)[¶](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.error "Link to this definition")
    
This method prints a usage message, including the _message_ , to [`sys.stderr`](https://docs.python.org/3/library/sys.html#sys.stderr "sys.stderr") and terminates the program with a status code of 2.
### Intermixed parsing[¶](https://docs.python.org/3/library/argparse.html#intermixed-parsing "Link to this heading") 

ArgumentParser.parse_intermixed_args(_args =None_, _namespace =None_)[¶](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.parse_intermixed_args "Link to this definition")


ArgumentParser.parse_known_intermixed_args(_args =None_, _namespace =None_)[¶](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.parse_known_intermixed_args "Link to this definition")
    
A number of Unix commands allow the user to intermix optional arguments with positional arguments. The [`parse_intermixed_args()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.parse_intermixed_args "argparse.ArgumentParser.parse_intermixed_args") and [`parse_known_intermixed_args()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.parse_known_intermixed_args "argparse.ArgumentParser.parse_known_intermixed_args") methods support this parsing style.
These parsers do not support all the `argparse` features, and will raise exceptions if unsupported features are used. In particular, subparsers, and mutually exclusive groups that include both optionals and positionals are not supported.
The following example shows the difference between [`parse_known_args()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.parse_known_args "argparse.ArgumentParser.parse_known_args") and [`parse_intermixed_args()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.parse_intermixed_args "argparse.ArgumentParser.parse_intermixed_args"): the former returns `['2', '3']` as unparsed arguments, while the latter collects all the positionals into `rest`.
>>>```
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('--foo')
>>> parser.add_argument('cmd')
>>> parser.add_argument('rest', nargs='*', type=int)
>>> parser.parse_known_args('doit 1 --foo bar 2 3'.split())
(Namespace(cmd='doit', foo='bar', rest=[1]), ['2', '3'])
>>> parser.parse_intermixed_args('doit 1 --foo bar 2 3'.split())
Namespace(cmd='doit', foo='bar', rest=[1, 2, 3])