Title: Python 3.11 Enum Enhancements
URL: https://docs.python.org/3/whatsnew/3.11.html
Summary: This section covers updates to the enum module in Python 3.11, including the renaming of `EnumMeta` to `EnumType`, the introduction of `StrEnum` for string-based enum members, and `ReprEnum` which alters the `__repr__()` method while keeping the literal values for `__str__()` and `__format__()`. These changes enhance the functionality and usability of enums in Python.
---

### enum[¶](https://docs.python.org/3/whatsnew/3.11.html#enum "Link to this heading")
  * Renamed `EnumMeta` to [`EnumType`](https://docs.python.org/3/library/enum.html#enum.EnumType "enum.EnumType") (`EnumMeta` kept as an alias).
  * Added [`StrEnum`](https://docs.python.org/3/library/enum.html#enum.StrEnum "enum.StrEnum"), with members that can be used as (and must be) strings.
  * Added [`ReprEnum`](https://docs.python.org/3/library/enum.html#enum.ReprEnum "enum.ReprEnum"), which only modifies the [`__repr__()`](https://docs.python.org/3/reference/datamodel.html#object.__repr__ "object.__repr__") of members while returning their literal values (rather than names) for [`__str__()`](https://docs.python.org/3/reference/datamodel.html#object.__str__ "object.__str__") and [`__format__()`](https://docs.python.org/3/reference/datamodel.html#object.__format__ "object.__format__") (used by [`str()`](https://docs.python.org/3/library/stdtypes.html#str "str"), [`format()`](https://docs.python.org/3/library/functions.html#format "format") and [f-string](https://docs.python.org/3/glossary.html#term-f-string)s).
  * Changed [`Enum.__format__()`](https://docs.python.org/3/library/enum.html#enum.Enum.__format__ "enum.Enum.__format__") (the default for [`format()`](https://docs.python.org/3/library/functions.html#format "format"), [`str.format()`](https://docs.python.org/3/library/stdtypes.html#str.format "str.format") and [f-string](https://docs.python.org/3/glossary.html#term-f-string)s) to always produce the same result as [`Enum.__str__()`](https://docs.python.org/3/library/enum.html#enum.Enum.__str__ "enum.Enum.__str__"): for enums inheriting from [`ReprEnum`](https://docs.python.org/3/library/enum.html#enum.ReprEnum "enum.ReprEnum") it will be the member’s value; for all other enums it will be the enum and member name (e.g. `Color.RED`).
  * Added a new _boundary_ class parameter to [`Flag`](https://docs.python.org/3/library/enum.html#enum.Flag "enum.Flag") enums and the [`FlagBoundary`](https://docs.python.org/3/library/enum.html#enum.FlagBoundary "enum.FlagBoundary") enum with its options, to control how to handle out-of-range flag values.
  * Added the [`verify()`](https://docs.python.org/3/library/enum.html#enum.verify "enum.verify") enum decorator and the [`EnumCheck`](https://docs.python.org/3/library/enum.html#enum.EnumCheck "enum.EnumCheck") enum with its options, to check enum classes against several specific constraints.
  * Added the [`member()`](https://docs.python.org/3/library/enum.html#enum.member "enum.member") and [`nonmember()`](https://docs.python.org/3/library/enum.html#enum.nonmember "enum.nonmember") decorators, to ensure the decorated object is/is not converted to an enum member.
  * Added the [`property()`](https://docs.python.org/3/library/enum.html#enum.property "enum.property") decorator, which works like [`property()`](https://docs.python.org/3/library/functions.html#property "property") except for enums. Use this instead of [`types.DynamicClassAttribute()`](https://docs.python.org/3/library/types.html#types.DynamicClassAttribute "types.DynamicClassAttribute").
  * Added the [`global_enum()`](https://docs.python.org/3/library/enum.html#enum.global_enum "enum.global_enum") enum decorator, which adjusts [`__repr__()`](https://docs.python.org/3/reference/datamodel.html#object.__repr__ "object.__repr__") and [`__str__()`](https://docs.python.org/3/reference/datamodel.html#object.__str__ "object.__str__") to show values as members of their module rather than the enum class. For example, `'re.ASCII'` for the [`ASCII`](https://docs.python.org/3/library/re.html#re.ASCII "re.ASCII") member of [`re.RegexFlag`](https://docs.python.org/3/library/re.html#re.RegexFlag "re.RegexFlag") rather than `'RegexFlag.ASCII'`.
  * Enhanced [`Flag`](https://docs.python.org/3/library/enum.html#enum.Flag "enum.Flag") to support [`len()`](https://docs.python.org/3/library/functions.html#len "len"), iteration and [`in`](https://docs.python.org/3/reference/expressions.html#in)/[`not in`](https://docs.python.org/3/reference/expressions.html#not-in) on its members. For example, the following now works: `len(AFlag(3)) == 2 and list(AFlag(3)) == (AFlag.ONE, AFlag.TWO)`
  * Changed [`Enum`](https://docs.python.org/3/library/enum.html#enum.Enum "enum.Enum") and [`Flag`](https://docs.python.org/3/library/enum.html#enum.Flag "enum.Flag") so that members are now defined before [`__init_subclass__()`](https://docs.python.org/3/reference/datamodel.html#object.__init_subclass__ "object.__init_subclass__") is called; [`dir()`](https://docs.python.org/3/library/functions.html#dir "dir") now includes methods, etc., from mixed-in data types.
  * Changed [`Flag`](https://docs.python.org/3/library/enum.html#enum.Flag "enum.Flag") to only consider primary values (power of two) canonical while composite values (`3`, `6`, `10`, etc.) are considered aliases; inverted flags are coerced to their positive equivalent.