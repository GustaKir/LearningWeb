Title: Python 3.3 New Features Overview
URL: https://docs.python.org/3/whatsnew/3.3.html
Summary: Python 3.3 introduces new functions for Linux extended attributes, including `getxattr()`, `listxattr()`, `removexattr()`, and `setxattr()`. Additionally, it presents a new scheduling interface with functions such as `sched_get_priority_max()`, `sched_get_priority_min()`, `sched_getaffinity()`, and `sched_getparam()`, which help manage process CPU time allocation.
---

* New functions to support Linux extended attributes ([bpo-12720](https://bugs.python.org/issue?@action=redirect&bpo=12720)): [`getxattr()`](https://docs.python.org/3/library/os.html#os.getxattr "os.getxattr"), [`listxattr()`](https://docs.python.org/3/library/os.html#os.listxattr "os.listxattr"), [`removexattr()`](https://docs.python.org/3/library/os.html#os.removexattr "os.removexattr"), [`setxattr()`](https://docs.python.org/3/library/os.html#os.setxattr "os.setxattr").
  * New interface to the scheduler. These functions control how a process is allocated CPU time by the operating system. New functions: [`sched_get_priority_max()`](https://docs.python.org/3/library/os.html#os.sched_get_priority_max "os.sched_get_priority_max"), [`sched_get_priority_min()`](https://docs.python.org/3/library/os.html#os.sched_get_priority_min "os.sched_get_priority_min"), [`sched_getaffinity()`](https://docs.python.org/3/library/os.html#os.sched_getaffinity "os.sched_getaffinity"), [`sched_getparam()`](https://docs.python.org/3/library/os.html#os.sched_getparam "os.sched_getparam"), [`sched_getscheduler()`](https://docs.python.org/3/library/os.html#os.sched_getscheduler "os.sched_getscheduler"), [`sched_rr_get_interval()`](https://docs.python.org/3/library/os.html#os.sched_rr_get_interval "os.sched_rr_get_interval"), [`sched_setaffinity()`](https://docs.python.org/3/library/os.html#os.sched_setaffinity "os.sched_setaffinity"), [`sched_setparam()`](https://docs.python.org/3/library/os.html#os.sched_setparam "os.sched_setparam"), [`sched_setscheduler()`](https://docs.python.org/3/library/os.html#os.sched_setscheduler "os.sched_setscheduler"), [`sched_yield()`](https://docs.python.org/3/library/os.html#os.sched_yield "os.sched_yield"),
  * New functions to control the file system:
    * [`posix_fadvise()`](https://docs.python.org/3/library/os.html#os.posix_fadvise "os.posix_fadvise"): Announces an intention to access data in a specific pattern thus allowing the kernel to make optimizations.
    * [`posix_fallocate()`](https://docs.python.org/3/library/os.html#os.posix_fallocate "os.posix_fallocate"): Ensures that enough disk space is allocated for a file.
    * [`sync()`](https://docs.python.org/3/library/os.html#os.sync "os.sync"): Force write of everything to disk.
  * Additional new posix functions:
    * [`lockf()`](https://docs.python.org/3/library/os.html#os.lockf "os.lockf"): Apply, test or remove a POSIX lock on an open file descriptor.
    * [`pread()`](https://docs.python.org/3/library/os.html#os.pread "os.pread"): Read from a file descriptor at an offset, the file offset remains unchanged.
    * [`pwrite()`](https://docs.python.org/3/library/os.html#os.pwrite "os.pwrite"): Write to a file descriptor from an offset, leaving the file offset unchanged.
    * [`readv()`](https://docs.python.org/3/library/os.html#os.readv "os.readv"): Read from a file descriptor into a number of writable buffers.
    * [`truncate()`](https://docs.python.org/3/library/os.html#os.truncate "os.truncate"): Truncate the file corresponding to _path_ , so that it is at most _length_ bytes in size.
    * [`waitid()`](https://docs.python.org/3/library/os.html#os.waitid "os.waitid"): Wait for the completion of one or more child processes.
    * [`writev()`](https://docs.python.org/3/library/os.html#os.writev "os.writev"): Write the contents of _buffers_ to a file descriptor, where _buffers_ is an arbitrary sequence of buffers.
    * [`getgrouplist()`](https://docs.python.org/3/library/os.html#os.getgrouplist "os.getgrouplist") ([bpo-9344](https://bugs.python.org/issue?@action=redirect&bpo=9344)): Return list of group ids that specified user belongs to.
  * [`times()`](https://docs.python.org/3/library/os.html#os.times "os.times") and [`uname()`](https://docs.python.org/3/library/os.html#os.uname "os.uname"): Return type changed from a tuple to a tuple-like object with named attributes.
  * Some platforms now support additional constants for the [`lseek()`](https://docs.python.org/3/library/os.html#os.lseek "os.lseek") function, such as `os.SEEK_HOLE` and `os.SEEK_DATA`.
  * New constants [`RTLD_LAZY`](https://docs.python.org/3/library/os.html#os.RTLD_LAZY "os.RTLD_LAZY"), [`RTLD_NOW`](https://docs.python.org/3/library/os.html#os.RTLD_NOW "os.RTLD_NOW"), [`RTLD_GLOBAL`](https://docs.python.org/3/library/os.html#os.RTLD_GLOBAL "os.RTLD_GLOBAL"), [`RTLD_LOCAL`](https://docs.python.org/3/library/os.html#os.RTLD_LOCAL "os.RTLD_LOCAL"), [`RTLD_NODELETE`](https://docs.python.org/3/library/os.html#os.RTLD_NODELETE "os.RTLD_NODELETE"), [`RTLD_NOLOAD`](https://docs.python.org/3/library/os.html#os.RTLD_NOLOAD "os.RTLD_NOLOAD"), and [`RTLD_DEEPBIND`](https://docs.python.org/3/library/os.html#os.RTLD_DEEPBIND "os.RTLD_DEEPBIND") are available on platforms that support them. These are for use with the [`sys.setdlopenflags()`](https://docs.python.org/3/library/sys.html#sys.setdlopenflags "sys.setdlopenflags") function, and supersede the similar constants def