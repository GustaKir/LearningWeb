Title: Regular Expression Syntax: Character Classes
URL: https://docs.python.org/3/library/re.html
Summary: This section discusses character classes in regular expressions, specifically `
S`, `
W`, and `
W`. It explains that `
S` matches non-whitespace characters, while `
W` matches word characters including Unicode alphanumeric characters. Additionally, it describes how these patterns behave under different flags, such as `ASCII` and `LOCALE`.
---

`\S`
    
Matches any character which is not a whitespace character. This is the opposite of `\s`.
Matches `[^ \t\n\r\f\v]` if the [`ASCII`](https://docs.python.org/3/library/re.html#re.ASCII "re.ASCII") flag is used. 

`\w`
     

For Unicode (str) patterns:
    
Matches Unicode word characters; this includes all Unicode alphanumeric characters (as defined by [`str.isalnum()`](https://docs.python.org/3/library/stdtypes.html#str.isalnum "str.isalnum")), as well as the underscore (`_`).
Matches `[a-zA-Z0-9_]` if the [`ASCII`](https://docs.python.org/3/library/re.html#re.ASCII "re.ASCII") flag is used. 

For 8-bit (bytes) patterns:
    
Matches characters considered alphanumeric in the ASCII character set; this is equivalent to `[a-zA-Z0-9_]`. If the [`LOCALE`](https://docs.python.org/3/library/re.html#re.LOCALE "re.LOCALE") flag is used, matches characters considered alphanumeric in the current locale and the underscore. 

`\W`
    
Matches any character which is not a word character. This is the opposite of `\w`. By default, matches non-underscore (`_`) characters for which [`str.isalnum()`](https://docs.python.org/3/library/stdtypes.html#str.isalnum "str.isalnum") returns `False`.
Matches `[^a-zA-Z0-9_]` if the [`ASCII`](https://docs.python.org/3/library/re.html#re.ASCII "re.ASCII") flag is used.
If the [`LOCALE`](https://docs.python.org/3/library/re.html#re.LOCALE "re.LOCALE") flag is used, matches characters which are neither alphanumeric in the current locale nor the underscore. 

`\Z`
    
Matches only at the end of the string.
Most of the [escape sequences](https://docs.python.org/3/reference/lexical_analysis.html#escape-sequences) supported by Python string literals are also accepted by the regular expression parser:
```
\a   \b   \f   \n
\N   \r   \t   \u
\U   \v   \x   \\