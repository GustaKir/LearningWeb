Title: Using freeze_support with Multiprocessing
URL: https://docs.python.org/3/library/multiprocessing.html
Summary: The `multiprocessing.freeze_support()` function enables programs using multiprocessing to work when converted to a Windows executable. It must be called immediately after `if __name__ == '__main__'`. Omitting this function results in a `RuntimeError` when running the frozen executable.
---

multiprocessing.freeze_support()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.freeze_support "Link to this definition")
    
Add support for when a program which uses [`multiprocessing`](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing "multiprocessing: Process-based parallelism.") has been frozen to produce a Windows executable. (Has been tested with **py2exe** , **PyInstaller** and **cx_Freeze**.)
One needs to call this function straight after the `if __name__ == '__main__'` line of the main module. For example:
```
frommultiprocessingimport Process, freeze_support
deff():
  print('hello world!')
if __name__ == '__main__':
  freeze_support()
  Process(target=f).start()

```

If the `freeze_support()` line is omitted then trying to run the frozen executable will raise [`RuntimeError`](https://docs.python.org/3/library/exceptions.html#RuntimeError "RuntimeError").
Calling `freeze_support()` has no effect when invoked on any operating system other than Windows. In addition, if the module is being run normally by the Python interpreter on Windows (the program has not been frozen), then `freeze_support()` has no effect. 

multiprocessing.get_all_start_methods()[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.get_all_start_methods "Link to this definition")
    
Returns a list of the supported start methods, the first of which is the default. The possible start methods are `'fork'`, `'spawn'` and `'forkserver'`. Not all platforms support all methods. See [Contexts and start methods](https://docs.python.org/3/library/multiprocessing.html#multiprocessing-start-methods).
Added in version 3.4. 

multiprocessing.get_context(_method =None_)[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.get_context "Link to this definition")
    
Return a context object which has the same attributes as the [`multiprocessing`](https://docs.python.org/3/library/multiprocessing.html#module-multiprocessing "multiprocessing: Process-based parallelism.") module.
If _method_ is `None` then the default context is returned. Otherwise _method_ should be `'fork'`, `'spawn'`, `'forkserver'`. [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised if the specified start method is not available. See [Contexts and start methods](https://docs.python.org/3/library/multiprocessing.html#multiprocessing-start-methods).
Added in version 3.4. 

multiprocessing.get_start_method(_allow_none =False_)[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.get_start_method "Link to this definition")
    
Return the name of start method used for starting processes.
If the start method has not been fixed and _allow_none_ is false, then the start method is fixed to the default and the name is returned. If the start method has not been fixed and _allow_none_ is true then `None` is returned.
The return value can be `'fork'`, `'spawn'`, `'forkserver'` or `None`. See [Contexts and start methods](https://docs.python.org/3/library/multiprocessing.html#multiprocessing-start-methods).
Added in version 3.4.
Changed in version 3.8: On macOS, the _spawn_ start method is now the default. The _fork_ start method should be considered unsafe as it can lead to crashes of the subprocess. See [bpo-33725](https://bugs.python.org/issue?@action=redirect&bpo=33725). 

multiprocessing.set_executable(_executable_)[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.set_executable "Link to this definition")
    
Set the path of the Python interpreter to use when starting a child process. (By default [`sys.executable`](https://docs.python.org/3/library/sys.html#sys.executable "sys.executable") is used). Embedders will probably need to do some thing like
```
set_executable(os.path.join(sys.exec_prefix, 'pythonw.exe'))