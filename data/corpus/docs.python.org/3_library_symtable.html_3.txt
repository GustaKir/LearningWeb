Title: Symbol Class in Python's Symtable Module
URL: https://docs.python.org/3/library/symtable.html
Summary: The `symtable.Symbol` class represents an entry in a `SymbolTable` corresponding to an identifier in the source code. Key methods include `get_name()` to retrieve the symbol's name, `is_referenced()` to check if the symbol is used in its block, and `is_imported()` to determine if the symbol is created through an import.
---

```

Although `A().f()` raises [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") at runtime, `A.f` is still considered as a method-like function. 

_class_ symtable.Symbol[¶](https://docs.python.org/3/library/symtable.html#symtable.Symbol "Link to this definition")
    
An entry in a [`SymbolTable`](https://docs.python.org/3/library/symtable.html#symtable.SymbolTable "symtable.SymbolTable") corresponding to an identifier in the source. The constructor is not public. 

get_name()[¶](https://docs.python.org/3/library/symtable.html#symtable.Symbol.get_name "Link to this definition")
    
Return the symbol’s name. 

is_referenced()[¶](https://docs.python.org/3/library/symtable.html#symtable.Symbol.is_referenced "Link to this definition")
    
Return `True` if the symbol is used in its block. 

is_imported()[¶](https://docs.python.org/3/library/symtable.html#symtable.Symbol.is_imported "Link to this definition")
    
Return `True` if the symbol is created from an import statement. 

is_parameter()[¶](https://docs.python.org/3/library/symtable.html#symtable.Symbol.is_parameter "Link to this definition")
    
Return `True` if the symbol is a parameter. 

is_global()[¶](https://docs.python.org/3/library/symtable.html#symtable.Symbol.is_global "Link to this definition")
    
Return `True` if the symbol is global. 

is_nonlocal()[¶](https://docs.python.org/3/library/symtable.html#symtable.Symbol.is_nonlocal "Link to this definition")
    
Return `True` if the symbol is nonlocal. 

is_declared_global()[¶](https://docs.python.org/3/library/symtable.html#symtable.Symbol.is_declared_global "Link to this definition")
    
Return `True` if the symbol is declared global with a global statement. 

is_local()[¶](https://docs.python.org/3/library/symtable.html#symtable.Symbol.is_local "Link to this definition")
    
Return `True` if the symbol is local to its block. 

is_annotated()[¶](https://docs.python.org/3/library/symtable.html#symtable.Symbol.is_annotated "Link to this definition")
    
Return `True` if the symbol is annotated.
Added in version 3.6. 

is_free()[¶](https://docs.python.org/3/library/symtable.html#symtable.Symbol.is_free "Link to this definition")
    
Return `True` if the symbol is referenced in its block, but not assigned to. 

is_assigned()[¶](https://docs.python.org/3/library/symtable.html#symtable.Symbol.is_assigned "Link to this definition")
    
Return `True` if the symbol is assigned to in its block. 

is_namespace()[¶](https://docs.python.org/3/library/symtable.html#symtable.Symbol.is_namespace "Link to this definition")
    
Return `True` if name binding introduces new namespace.
If the name is used as the target of a function or class statement, this will be true.
For example:
>>>```
>>> table = symtable.symtable("def some_func(): pass", "string", "exec")
>>> table.lookup("some_func").is_namespace()
True

```

Note that a single name can be bound to multiple objects. If the result is `True`, the name may also be bound to other objects, like an int or list, that does not introduce a new namespace. 

get_namespaces()[¶](https://docs.python.org/3/library/symtable.html#symtable.Symbol.get_namespaces "Link to this definition")
    
Return a list of namespaces bound to this name. 

get_namespace()[¶](https://docs.python.org/3/library/symtable.html#symtable.Symbol.get_namespace "Link to this definition")
    
Return the namespace bound to this name. If more than one or no namespace is bound to this name, a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised.
## Command-Line Usage[¶](https://docs.python.org/3/library/symtable.html#command-line-usage "Link to this heading")
Added in version 3.13.
The [`symtable`](https://docs.python.org/3/library/symtable.html#module-symtable "symtable: Interface to the compiler's internal symbol tables.") module can be executed as a script from the command line.
```
python-msymtable[infile...]