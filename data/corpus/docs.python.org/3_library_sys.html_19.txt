Title: Changes to sys.platform in Python Versions
URL: https://docs.python.org/3/library/sys.html
Summary: The `sys.platform` attribute has undergone notable changes in Python versions 3.3, 3.8, and 3.13, with the removal of major versions on Linux and AIX, and an update for Android to reflect its platform correctly. Additionally, related attributes such as `os.name` and `os.uname()` provide more granular system information.
---

```

Changed in version 3.3: On Linux, [`sys.platform`](https://docs.python.org/3/library/sys.html#sys.platform "sys.platform") doesn’t contain the major version anymore. It is always `'linux'`, instead of `'linux2'` or `'linux3'`.
Changed in version 3.8: On AIX, [`sys.platform`](https://docs.python.org/3/library/sys.html#sys.platform "sys.platform") doesn’t contain the major version anymore. It is always `'aix'`, instead of `'aix5'` or `'aix7'`.
Changed in version 3.13: On Android, [`sys.platform`](https://docs.python.org/3/library/sys.html#sys.platform "sys.platform") now returns `'android'` rather than `'linux'`.
See also
[`os.name`](https://docs.python.org/3/library/os.html#os.name "os.name") has a coarser granularity. [`os.uname()`](https://docs.python.org/3/library/os.html#os.uname "os.uname") gives system-dependent version information.
The [`platform`](https://docs.python.org/3/library/platform.html#module-platform "platform: Retrieves as much platform identifying data as possible.") module provides detailed checks for the system’s identity. 

sys.platlibdir[¶](https://docs.python.org/3/library/sys.html#sys.platlibdir "Link to this definition")
    
Name of the platform-specific library directory. It is used to build the path of standard library and the paths of installed extension modules.
It is equal to `"lib"` on most platforms. On Fedora and SuSE, it is equal to `"lib64"` on 64-bit platforms which gives the following `sys.path` paths (where `X.Y` is the Python `major.minor` version):
  * `/usr/lib64/pythonX.Y/`: Standard library (like `os.py` of the [`os`](https://docs.python.org/3/library/os.html#module-os "os: Miscellaneous operating system interfaces.") module)
  * `/usr/lib64/pythonX.Y/lib-dynload/`: C extension modules of the standard library (like the [`errno`](https://docs.python.org/3/library/errno.html#module-errno "errno: Standard errno system symbols.") module, the exact filename is platform specific)
  * `/usr/lib/pythonX.Y/site-packages/` (always use `lib`, not [`sys.platlibdir`](https://docs.python.org/3/library/sys.html#sys.platlibdir "sys.platlibdir")): Third-party modules
  * `/usr/lib64/pythonX.Y/site-packages/`: C extension modules of third-party packages


Added in version 3.9. 

sys.prefix[¶](https://docs.python.org/3/library/sys.html#sys.prefix "Link to this definition")
    
A string giving the site-specific directory prefix where the platform independent Python files are installed; on Unix, the default is `/usr/local`. This can be set at build time with the [`--prefix`](https://docs.python.org/3/using/configure.html#cmdoption-prefix) argument to the **configure** script. See [Installation paths](https://docs.python.org/3/library/sysconfig.html#installation-paths) for derived paths.
Note
If a [virtual environment](https://docs.python.org/3/library/venv.html#venv-def) is in effect, this value will be changed in `site.py` to point to the virtual environment. The value for the Python installation will still be available, via [`base_prefix`](https://docs.python.org/3/library/sys.html#sys.base_prefix "sys.base_prefix"). 

sys.ps1[¶](https://docs.python.org/3/library/sys.html#sys.ps1 "Link to this definition")


sys.ps2[¶](https://docs.python.org/3/library/sys.html#sys.ps2 "Link to this definition")
    
Strings specifying the primary and secondary prompt of the interpreter. These are only defined if the interpreter is in interactive mode. Their initial values in this case are `'>>> '` and `'... '`. If a non-string object is assigned to either variable, its [`str()`](https://docs.python.org/3/library/stdtypes.html#str "str") is re-evaluated each time the interpreter prepares to read a new interactive command; this can be used to implement a dynamic prompt. 

sys.setdlopenflags(_n_)[¶](https://docs.python.org/3/library/sys.html#sys.setdlopenflags "Link to this definition")
    
Set the flags used by the interpreter for `dlopen()` calls, such as when the interpreter loads extension modules. Among other things, this will enable a lazy resolving of symbols when importing a module, if called as `sys.setdlopenflags(0)`. To share symbols across extension modules, call as `sys.setdlopenflags(os.RTLD_GLOBAL)`. Symbolic names for the flag values can be found in the [`os`](https://docs.python.org/3/library/os.html#module-os "os: Miscellaneous operating system interfaces.") module (`RTLD__xxx_`constants, e.g.[`os.RTLD_LAZY`](https://docs.python.org/3/library/os.html#os.RTLD_LAZY "os.RTLD_LAZY")).
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix.