Title: Argparse - Required Options and Help Text
URL: https://docs.python.org/3/library/argparse.html
Summary: This section discusses the use of required options in argparse, highlighting that they can lead to user confusion. It also explains how the 'help' attribute provides descriptions for command line arguments, which are displayed when users request help.
---

```

As the example shows, if an option is marked as `required`, [`parse_args()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.parse_args "argparse.ArgumentParser.parse_args") will report an error if that option is not present at the command line.
Note
Required options are generally considered bad form because users expect _options_ to be _optional_ , and thus they should be avoided when possible.
### help[¶](https://docs.python.org/3/library/argparse.html#help "Link to this heading")
The `help` value is a string containing a brief description of the argument. When a user requests help (usually by using `-h` or `--help` at the command line), these `help` descriptions will be displayed with each argument.
The `help` strings can include various format specifiers to avoid repetition of things like the program name or the argument [default](https://docs.python.org/3/library/argparse.html#default). The available specifiers include the program name, `%(prog)s` and most keyword arguments to [`add_argument()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.add_argument "argparse.ArgumentParser.add_argument"), e.g. `%(default)s`, `%(type)s`, etc.:
>>>```
>>> parser = argparse.ArgumentParser(prog='frobble')
>>> parser.add_argument('bar', nargs='?', type=int, default=42,
...           help='the bar to %(prog)s (default: %(default)s)')
>>> parser.print_help()
usage: frobble [-h] [bar]
positional arguments:
 bar   the bar to frobble (default: 42)
options:
 -h, --help show this help message and exit

```

As the help string supports %-formatting, if you want a literal `%` to appear in the help string, you must escape it as `%%`.
`argparse` supports silencing the help entry for certain options, by setting the `help` value to `argparse.SUPPRESS`:
>>>```
>>> parser = argparse.ArgumentParser(prog='frobble')
>>> parser.add_argument('--foo', help=argparse.SUPPRESS)
>>> parser.print_help()
usage: frobble [-h]
options:
 -h, --help show this help message and exit

```

### metavar[¶](https://docs.python.org/3/library/argparse.html#metavar "Link to this heading")
When [`ArgumentParser`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser "argparse.ArgumentParser") generates help messages, it needs some way to refer to each expected argument. By default, `ArgumentParser` objects use the [dest](https://docs.python.org/3/library/argparse.html#dest) value as the “name” of each object. By default, for positional argument actions, the [dest](https://docs.python.org/3/library/argparse.html#dest) value is used directly, and for optional argument actions, the [dest](https://docs.python.org/3/library/argparse.html#dest) value is uppercased. So, a single positional argument with `dest='bar'` will be referred to as `bar`. A single optional argument `--foo` that should be followed by a single command-line argument will be referred to as `FOO`. An example:
>>>```
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('--foo')
>>> parser.add_argument('bar')
>>> parser.parse_args('X --foo Y'.split())
Namespace(bar='X', foo='Y')
>>> parser.print_help()
usage: [-h] [--foo FOO] bar
positional arguments:
 bar
options:
 -h, --help show this help message and exit
 --foo FOO

```

An alternative name can be specified with `metavar`:
>>>```
>>> parser = argparse.ArgumentParser()
>>> parser.add_argument('--foo', metavar='YYY')
>>> parser.add_argument('bar', metavar='XXX')
>>> parser.parse_args('X --foo Y'.split())
Namespace(bar='X', foo='Y')
>>> parser.print_help()
usage: [-h] [--foo YYY] XXX
positional arguments:
 XXX
options:
 -h, --help show this help message and exit
 --foo YYY

```

Note that `metavar` only changes the _displayed_ name - the name of the attribute on the [`parse_args()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.parse_args "argparse.ArgumentParser.parse_args") object is still determined by the [dest](https://docs.python.org/3/library/argparse.html#dest) value.
Different values of `nargs` may cause the metavar to be used multiple times. Providing a tuple to `metavar` specifies a different display for each of the arguments:
>>>```
>>> parser = argparse.ArgumentParser(prog='PROG')
>>> parser.add_argument('-x', nargs=2)
>>> parser.add_argument('--foo', nargs=2, metavar=('bar', 'baz'))
>>> parser.print_help()
usage: PROG [-h] [-x X X] [--foo bar baz]
options:
 -h, --help   show this help message and exit
 -x X X
 --foo bar baz