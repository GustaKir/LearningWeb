Title: Datetime Module: Time String Representation
URL: https://docs.python.org/3/library/datetime.html
Summary: This section details the string representation methods for the time object in Python's datetime module, including the addition of the _timespec_ parameter in version 3.6. It notes that `str(t)` is equivalent to `t.isoformat()`, describes the `strftime` method for custom string formatting, and confirms that `__format__` behaves like `strftime`, enabling formatted output.
---

```

Changed in version 3.6: Added the _timespec_ parameter. 

time.__str__()[¶](https://docs.python.org/3/library/datetime.html#datetime.time.__str__ "Link to this definition")
    
For a time `t`, `str(t)` is equivalent to `t.isoformat()`. 

time.strftime(_format_)[¶](https://docs.python.org/3/library/datetime.html#datetime.time.strftime "Link to this definition")
    
Return a string representing the time, controlled by an explicit format string. See also [strftime() and strptime() Behavior](https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior) and [`time.isoformat()`](https://docs.python.org/3/library/datetime.html#datetime.time.isoformat "datetime.time.isoformat"). 

time.__format__(_format_)[¶](https://docs.python.org/3/library/datetime.html#datetime.time.__format__ "Link to this definition")
    
Same as [`time.strftime()`](https://docs.python.org/3/library/datetime.html#datetime.time.strftime "datetime.time.strftime"). This makes it possible to specify a format string for a [`time`](https://docs.python.org/3/library/datetime.html#datetime.time "datetime.time") object in [formatted string literals](https://docs.python.org/3/reference/lexical_analysis.html#f-strings) and when using [`str.format()`](https://docs.python.org/3/library/stdtypes.html#str.format "str.format"). See also [strftime() and strptime() Behavior](https://docs.python.org/3/library/datetime.html#strftime-strptime-behavior) and [`time.isoformat()`](https://docs.python.org/3/library/datetime.html#datetime.time.isoformat "datetime.time.isoformat"). 

time.utcoffset()[¶](https://docs.python.org/3/library/datetime.html#datetime.time.utcoffset "Link to this definition")
    
If [`tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.time.tzinfo "datetime.time.tzinfo") is `None`, returns `None`, else returns `self.tzinfo.utcoffset(None)`, and raises an exception if the latter doesn’t return `None` or a [`timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta "datetime.timedelta") object with magnitude less than one day.
Changed in version 3.7: The UTC offset is not restricted to a whole number of minutes. 

time.dst()[¶](https://docs.python.org/3/library/datetime.html#datetime.time.dst "Link to this definition")
    
If [`tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.time.tzinfo "datetime.time.tzinfo") is `None`, returns `None`, else returns `self.tzinfo.dst(None)`, and raises an exception if the latter doesn’t return `None`, or a [`timedelta`](https://docs.python.org/3/library/datetime.html#datetime.timedelta "datetime.timedelta") object with magnitude less than one day.
Changed in version 3.7: The DST offset is not restricted to a whole number of minutes. 

time.tzname()[¶](https://docs.python.org/3/library/datetime.html#datetime.time.tzname "Link to this definition")
    
If [`tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.time.tzinfo "datetime.time.tzinfo") is `None`, returns `None`, else returns `self.tzinfo.tzname(None)`, or raises an exception if the latter doesn’t return `None` or a string object.
### Examples of Usage: [`time`](https://docs.python.org/3/library/datetime.html#datetime.time "datetime.time")[¶](https://docs.python.org/3/library/datetime.html#examples-of-usage-time "Link to this heading")
Examples of working with a [`time`](https://docs.python.org/3/library/datetime.html#datetime.time "datetime.time") object:
>>>```
>>> fromdatetimeimport time, tzinfo, timedelta
>>> classTZ1(tzinfo):
...   defutcoffset(self, dt):
...     return timedelta(hours=1)
...   defdst(self, dt):
...     return timedelta(0)
...   deftzname(self,dt):
...     return "+01:00"
...   def__repr__(self):
...     return f"{self.__class__.__name__}()"
...
>>> t = time(12, 10, 30, tzinfo=TZ1())
>>> t
datetime.time(12, 10, 30, tzinfo=TZ1())
>>> t.isoformat()
'12:10:30+01:00'
>>> t.dst()
datetime.timedelta(0)
>>> t.tzname()
'+01:00'
>>> t.strftime("%H:%M:%S %Z")
'12:10:30 +01:00'
>>> 'The {} is {:%H:%M}.'.format("time", t)
'The time is 12:10.'