Title: filter Function in Python
URL: https://docs.python.org/3/library/functions.html
Summary: The filter function constructs an iterator from elements of the iterable for which the provided function is true. If the function is None, it retains all truthy elements. It is equivalent to a generator expression filtering items based on the function's truthiness. The document also references itertools.filterfalse, which filters elements that are false.
---

filter(_function_ , _iterable_)[¶](https://docs.python.org/3/library/functions.html#filter "Link to this definition")
    
Construct an iterator from those elements of _iterable_ for which _function_ is true. _iterable_ may be either a sequence, a container which supports iteration, or an iterator. If _function_ is `None`, the identity function is assumed, that is, all elements of _iterable_ that are false are removed.
Note that `filter(function, iterable)` is equivalent to the generator expression `(item for item in iterable if function(item))` if function is not `None` and `(item for item in iterable if item)` if function is `None`.
See [`itertools.filterfalse()`](https://docs.python.org/3/library/itertools.html#itertools.filterfalse "itertools.filterfalse") for the complementary function that returns elements of _iterable_ for which _function_ is false. 

_class_ float(_number =0.0_, _/_)[¶](https://docs.python.org/3/library/functions.html#float "Link to this definition")


_class_ float(_string_ , _/_)
    
Return a floating-point number constructed from a number or a string.
Examples:
>>>```
>>> float('+1.23')
1.23
>>> float('  -12345\n')
-12345.0
>>> float('1e-003')
0.001
>>> float('+1E6')
1000000.0
>>> float('-Infinity')
-inf

```

If the argument is a string, it should contain a decimal number, optionally preceded by a sign, and optionally embedded in whitespace. The optional sign may be `'+'` or `'-'`; a `'+'` sign has no effect on the value produced. The argument may also be a string representing a NaN (not-a-number), or positive or negative infinity. More precisely, the input must conform to the [`floatvalue`](https://docs.python.org/3/library/functions.html#grammar-token-float-floatvalue) production rule in the following grammar, after leading and trailing whitespace characters are removed:
```
**sign**     ::= "+" | "-"
**infinity**   ::= "Infinity" | "inf"
**nan**      ::= "nan"
**digit**     ::= <a Unicode decimal digit, i.e. characters in Unicode general category Nd>
**digitpart**   ::= [digit](https://docs.python.org/3/library/functions.html#grammar-token-float-digit) (["_"] [digit](https://docs.python.org/3/library/functions.html#grammar-token-float-digit))*
**number**    ::= [[digitpart](https://docs.python.org/3/library/functions.html#grammar-token-float-digitpart)] "." [digitpart](https://docs.python.org/3/library/functions.html#grammar-token-float-digitpart) | [digitpart](https://docs.python.org/3/library/functions.html#grammar-token-float-digitpart) ["."]
**exponent**   ::= ("e" | "E") [[sign](https://docs.python.org/3/library/functions.html#grammar-token-float-sign)] [digitpart](https://docs.python.org/3/library/functions.html#grammar-token-float-digitpart)
**floatnumber**  ::= [number](https://docs.python.org/3/library/functions.html#grammar-token-float-number) [[exponent](https://docs.python.org/3/library/functions.html#grammar-token-float-exponent)]
**absfloatvalue** ::= [floatnumber](https://docs.python.org/3/library/functions.html#grammar-token-float-floatnumber) | [infinity](https://docs.python.org/3/library/functions.html#grammar-token-float-infinity) | [nan](https://docs.python.org/3/library/functions.html#grammar-token-float-nan)
**floatvalue**  ::= [[sign](https://docs.python.org/3/library/functions.html#grammar-token-float-sign)] [absfloatvalue](https://docs.python.org/3/library/functions.html#grammar-token-float-absfloatvalue)