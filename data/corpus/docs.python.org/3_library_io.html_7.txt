Title: File Stream Methods in Python's IO Library
URL: https://docs.python.org/3/library/io.html
Summary: This chunk discusses the methods 'truncate()', 'writable()', and 'writelines()' in the Python IO library. 'truncate()' resizes the stream to a specified byte size, returning the new file size; it can extend or reduce the current size, with new areas typically zero-filled. 'writable()' checks if the stream supports writing, returning True or False accordingly. The document notes that since version 3.5, Windows files will zero-fill when extended.
---

truncate(_size =None_, _/_)[¶](https://docs.python.org/3/library/io.html#io.IOBase.truncate "Link to this definition")
    
Resize the stream to the given _size_ in bytes (or the current position if _size_ is not specified). The current stream position isn’t changed. This resizing can extend or reduce the current file size. In case of extension, the contents of the new file area depend on the platform (on most systems, additional bytes are zero-filled). The new file size is returned.
Changed in version 3.5: Windows will now zero-fill files when extending. 

writable()[¶](https://docs.python.org/3/library/io.html#io.IOBase.writable "Link to this definition")
    
Return `True` if the stream supports writing. If `False`, `write()` and [`truncate()`](https://docs.python.org/3/library/io.html#io.IOBase.truncate "io.IOBase.truncate") will raise [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError"). 

writelines(_lines_ , _/_)[¶](https://docs.python.org/3/library/io.html#io.IOBase.writelines "Link to this definition")
    
Write a list of lines to the stream. Line separators are not added, so it is usual for each of the lines provided to have a line separator at the end. 

__del__()[¶](https://docs.python.org/3/library/io.html#io.IOBase.__del__ "Link to this definition")
    
Prepare for object destruction. [`IOBase`](https://docs.python.org/3/library/io.html#io.IOBase "io.IOBase") provides a default implementation of this method that calls the instance’s [`close()`](https://docs.python.org/3/library/io.html#io.IOBase.close "io.IOBase.close") method. 

_class_ io.RawIOBase[¶](https://docs.python.org/3/library/io.html#io.RawIOBase "Link to this definition")
    
Base class for raw binary streams. It inherits from [`IOBase`](https://docs.python.org/3/library/io.html#io.IOBase "io.IOBase").
Raw binary streams typically provide low-level access to an underlying OS device or API, and do not try to encapsulate it in high-level primitives (this functionality is done at a higher-level in buffered binary streams and text streams, described later in this page).
[`RawIOBase`](https://docs.python.org/3/library/io.html#io.RawIOBase "io.RawIOBase") provides these methods in addition to those from [`IOBase`](https://docs.python.org/3/library/io.html#io.IOBase "io.IOBase"): 

read(_size =-1_, _/_)[¶](https://docs.python.org/3/library/io.html#io.RawIOBase.read "Link to this definition")
    
Read up to _size_ bytes from the object and return them. As a convenience, if _size_ is unspecified or -1, all bytes until EOF are returned. Otherwise, only one system call is ever made. Fewer than _size_ bytes may be returned if the operating system call returns fewer than _size_ bytes.
If 0 bytes are returned, and _size_ was not 0, this indicates end of file. If the object is in non-blocking mode and no bytes are available, `None` is returned.
The default implementation defers to [`readall()`](https://docs.python.org/3/library/io.html#io.RawIOBase.readall "io.RawIOBase.readall") and [`readinto()`](https://docs.python.org/3/library/io.html#io.RawIOBase.readinto "io.RawIOBase.readinto"). 

readall()[¶](https://docs.python.org/3/library/io.html#io.RawIOBase.readall "Link to this definition")
    
Read and return all the bytes from the stream until EOF, using multiple calls to the stream if necessary. 

readinto(_b_ , _/_)[¶](https://docs.python.org/3/library/io.html#io.RawIOBase.readinto "Link to this definition")
    
Read bytes into a pre-allocated, writable [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object) _b_ , and return the number of bytes read. For example, _b_ might be a [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray"). If the object is in non-blocking mode and no bytes are available, `None` is returned. 

write(_b_ , _/_)[¶](https://docs.python.org/3/library/io.html#io.RawIOBase.write "Link to this definition")
    
Write the given [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object), _b_ , to the underlying raw stream, and return the number of bytes written. This can be less than the length of _b_ in bytes, depending on specifics of the underlying raw stream, and especially if it is in non-blocking mode. `None` is returned if the raw stream is set not to block and no single byte could be readily written to it. The caller may release or mutate _b_ after this method returns, so the implementation should only access _b_ during the method call.