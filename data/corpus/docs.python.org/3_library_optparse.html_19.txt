Title: Using the `optparse` Library in Python
URL: https://docs.python.org/3/library/optparse.html
Summary: The `optparse` library prints a help message and terminates the process using `sys.exit(0)`. It can also print the version number through the `version` option, generally added automatically to `OptionParser`. The library provides standard option types for command-line option parsing.
---

```

After printing the help message, [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") terminates your process with `sys.exit(0)`.
  * `"version"`
Prints the version number supplied to the OptionParser to stdout and exits. The version number is actually formatted and printed by the `print_version()` method of OptionParser. Generally only relevant if the `version` argument is supplied to the OptionParser constructor. As with [`help`](https://docs.python.org/3/library/optparse.html#optparse.Option.help "optparse.Option.help") options, you will rarely create `version` options, since [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") automatically adds them when needed.


### Standard option types[¶](https://docs.python.org/3/library/optparse.html#standard-option-types "Link to this heading")
[`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.") has five built-in option types: `"string"`, `"int"`, `"choice"`, `"float"` and `"complex"`. If you need to add new option types, see section [Extending optparse](https://docs.python.org/3/library/optparse.html#optparse-extending-optparse).
Arguments to string options are not checked or converted in any way: the text on the command line is stored in the destination (or passed to the callback) as-is.
Integer arguments (type `"int"`) are parsed as follows:
  * if the number starts with `0x`, it is parsed as a hexadecimal number
  * if the number starts with `0`, it is parsed as an octal number
  * if the number starts with `0b`, it is parsed as a binary number
  * otherwise, the number is parsed as a decimal number


The conversion is done by calling [`int()`](https://docs.python.org/3/library/functions.html#int "int") with the appropriate base (2, 8, 10, or 16). If this fails, so will [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library."), although with a more useful error message.
`"float"` and `"complex"` option arguments are converted directly with [`float()`](https://docs.python.org/3/library/functions.html#float "float") and [`complex()`](https://docs.python.org/3/library/functions.html#complex "complex"), with similar error-handling.
`"choice"` options are a subtype of `"string"` options. The [`choices`](https://docs.python.org/3/library/optparse.html#optparse.Option.choices "optparse.Option.choices") option attribute (a sequence of strings) defines the set of allowed option arguments. `optparse.check_choice()` compares user-supplied option arguments against this master list and raises [`OptionValueError`](https://docs.python.org/3/library/optparse.html#optparse.OptionValueError "optparse.OptionValueError") if an invalid string is given.
### Parsing arguments[¶](https://docs.python.org/3/library/optparse.html#parsing-arguments "Link to this heading")
The whole point of creating and populating an OptionParser is to call its [`parse_args()`](https://docs.python.org/3/library/optparse.html#optparse.OptionParser.parse_args "optparse.OptionParser.parse_args") method. 

OptionParser.parse_args(_args =None_, _values =None_)[¶](https://docs.python.org/3/library/optparse.html#optparse.OptionParser.parse_args "Link to this definition")
    
Parse the command-line options found in _args_.
The input parameters are 

`args`
    
the list of arguments to process (default: `sys.argv[1:]`) 

`values`
    
a [`Values`](https://docs.python.org/3/library/optparse.html#optparse.Values "optparse.Values") object to store option arguments in (default: a new instance of [`Values`](https://docs.python.org/3/library/optparse.html#optparse.Values "optparse.Values")) – if you give an existing object, the option defaults will not be initialized on it
and the return value is a pair `(options, args)` where 

`options`
    
the same object that was passed in as _values_ , or the `optparse.Values` instance created by [`optparse`](https://docs.python.org/3/library/optparse.html#module-optparse "optparse: Command-line option parsing library.")