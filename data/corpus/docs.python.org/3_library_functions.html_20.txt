Title: max() Function in Python
URL: https://docs.python.org/3/library/functions.html
Summary: The max() function returns the largest item in an iterable or the largest of two or more provided arguments. It accepts optional keyword arguments: 'key' for a custom ordering function and 'default' to return if the iterable is empty. If multiple maximal items exist, it returns the first encountered one.
---

max(_arg1_ , _arg2_ , _* args_, _key =None_)
    
Return the largest item in an iterable or the largest of two or more arguments.
If one positional argument is provided, it should be an [iterable](https://docs.python.org/3/glossary.html#term-iterable). The largest item in the iterable is returned. If two or more positional arguments are provided, the largest of the positional arguments is returned.
There are two optional keyword-only arguments. The _key_ argument specifies a one-argument ordering function like that used for [`list.sort()`](https://docs.python.org/3/library/stdtypes.html#list.sort "list.sort"). The _default_ argument specifies an object to return if the provided iterable is empty. If the iterable is empty and _default_ is not provided, a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised.
If multiple items are maximal, the function returns the first one encountered. This is consistent with other sort-stability preserving tools such as `sorted(iterable, key=keyfunc, reverse=True)[0]` and `heapq.nlargest(1, iterable, key=keyfunc)`.
Changed in version 3.4: Added the _default_ keyword-only parameter.
Changed in version 3.8: The _key_ can be `None`. 

_class_ memoryview(_object_)
    
Return a “memory view” object created from the given argument. See [Memory Views](https://docs.python.org/3/library/stdtypes.html#typememoryview) for more information. 

min(_iterable_ , _*_ , _key =None_)[¶](https://docs.python.org/3/library/functions.html#min "Link to this definition")


min(_iterable_ , _*_ , _default_ , _key =None_)


min(_arg1_ , _arg2_ , _* args_, _key =None_)
    
Return the smallest item in an iterable or the smallest of two or more arguments.
If one positional argument is provided, it should be an [iterable](https://docs.python.org/3/glossary.html#term-iterable). The smallest item in the iterable is returned. If two or more positional arguments are provided, the smallest of the positional arguments is returned.
There are two optional keyword-only arguments. The _key_ argument specifies a one-argument ordering function like that used for [`list.sort()`](https://docs.python.org/3/library/stdtypes.html#list.sort "list.sort"). The _default_ argument specifies an object to return if the provided iterable is empty. If the iterable is empty and _default_ is not provided, a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised.
If multiple items are minimal, the function returns the first one encountered. This is consistent with other sort-stability preserving tools such as `sorted(iterable, key=keyfunc)[0]` and `heapq.nsmallest(1, iterable, key=keyfunc)`.
Changed in version 3.4: Added the _default_ keyword-only parameter.
Changed in version 3.8: The _key_ can be `None`. 

next(_iterator_)[¶](https://docs.python.org/3/library/functions.html#next "Link to this definition")


next(_iterator_ , _default_)
    
Retrieve the next item from the [iterator](https://docs.python.org/3/glossary.html#term-iterator) by calling its [`__next__()`](https://docs.python.org/3/library/stdtypes.html#iterator.__next__ "iterator.__next__") method. If _default_ is given, it is returned if the iterator is exhausted, otherwise [`StopIteration`](https://docs.python.org/3/library/exceptions.html#StopIteration "StopIteration") is raised. 

_class_ object[¶](https://docs.python.org/3/library/functions.html#object "Link to this definition")
    
This is the ultimate base class of all other classes. It has methods that are common to all instances of Python classes. When the constructor is called, it returns a new featureless object. The constructor does not accept any arguments.
Note
[`object`](https://docs.python.org/3/library/functions.html#object "object") instances do _not_ have [`__dict__`](https://docs.python.org/3/reference/datamodel.html#object.__dict__ "object.__dict__") attributes, so you can’t assign arbitrary attributes to an instance of [`object`](https://docs.python.org/3/library/functions.html#object "object"). 

oct(_x_)[¶](https://docs.python.org/3/library/functions.html#oct "Link to this definition")
    
Convert an integer number to an octal string prefixed with “0o”. The result is a valid Python expression. If _x_ is not a Python [`int`](https://docs.python.org/3/library/functions.html#int "int") object, it has to define an [`__index__()`](https://docs.python.org/3/reference/datamodel.html#object.__index__ "object.__index__") method that returns an integer. For example:
>>>```
>>> oct(8)
'0o10'
>>> oct(-56)
'-0o70'

```

If you want to convert an integer number to an octal string either with the prefix “0o” or not, you can use either of the following ways.
>>>```
>>> '%#o' % 10, '%o' % 10
('0o12', '12')
>>> format(10, '#o'), format(10, 'o')
('0o12', '12')
>>> f'{10:#o}', f'{10:o}'
('0o12', '12')