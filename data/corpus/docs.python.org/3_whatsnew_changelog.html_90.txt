Title: Enhancements to inspect.Signature.from_callable()
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This documentation chunk details fixes to the `inspect.Signature.from_callable()` function, improving support for various types of callables, including class methods and static methods. It also mentions isolating `_lsprof` in accordance with PEP 687.
---

Fix [`inspect.Signature.from_callable()`](https://docs.python.org/3/library/inspect.html#inspect.Signature.from_callable "inspect.Signature.from_callable") for builtins [`classmethod()`](https://docs.python.org/3/library/functions.html#classmethod "classmethod") and [`staticmethod()`](https://docs.python.org/3/library/functions.html#staticmethod "staticmethod").
  * [gh-101293](https://github.com/python/cpython/issues/101293): Support callables with the `__call__()` method and types with `__new__()` and `__init__()` methods set to class methods, static methods, bound methods, partial functions, and other types of methods and descriptors in [`inspect.Signature.from_callable()`](https://docs.python.org/3/library/inspect.html#inspect.Signature.from_callable "inspect.Signature.from_callable").
  * [gh-103092](https://github.com/python/cpython/issues/103092): Isolate `_lsprof` (apply [**PEP 687**](https://peps.python.org/pep-0687/)).
  * [gh-113942](https://github.com/python/cpython/issues/113942): [`pydoc`](https://docs.python.org/3/library/pydoc.html#module-pydoc "pydoc: Documentation generator and online help system.") no longer skips global functions implemented as builtin methods, such as `MethodDescriptorType` and `WrapperDescriptorType`.
  * [gh-115256](https://github.com/python/cpython/issues/115256): Added DeprecationWarning when accessing the tarfile attribute of TarInfo objects. The attribute is never used internally and is only attached to TarInfos when the tarfile is opened in write-mode, not read-mode. The attribute creates an unnecessary reference cycle which may cause corruption when not closing the handle after writing a tarfile.
  * [gh-115197](https://github.com/python/cpython/issues/115197): `urllib.request` no longer resolves the hostname before checking it against the systemâ€™s proxy bypass list on macOS and Windows.
  * [gh-113812](https://github.com/python/cpython/issues/113812): `DatagramTransport.sendto()` will now send zero-length datagrams if called with an empty bytes object. The transport flow control also now accounts for the datagram header when calculating the buffer size.
  * [gh-114763](https://github.com/python/cpython/issues/114763): Protect modules loaded with [`importlib.util.LazyLoader`](https://docs.python.org/3/library/importlib.html#importlib.util.LazyLoader "importlib.util.LazyLoader") from race conditions when multiple threads try to access attributes before the loading is complete.
  * [gh-114709](https://github.com/python/cpython/issues/114709): `posixpath.commonpath()` now raises a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") exception when passed an empty iterable. Previously, [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError "IndexError") was raised.
`posixpath.commonpath()` now raises a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") exception when passed `None`. Previously, [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") was raised.
  * [gh-114610](https://github.com/python/cpython/issues/114610): Fix bug where [`pathlib.PurePath.with_stem()`](https://docs.python.org/3/library/pathlib.html#pathlib.PurePath.with_stem "pathlib.PurePath.with_stem") converted a non-empty path suffix to a stem when given an empty _stem_ argument.