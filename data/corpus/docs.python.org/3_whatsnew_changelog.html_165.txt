Title: Python 3 Changelog Summary
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This document highlights two key updates: the introduction of `PyObject_VisitManagedDict()` and `PyObject_ClearManagedDict()` functions for managed dictionaries, and the enhancement of Python's support for the Limited API when built with the `--with-trace-refs` configuration.
---

(https://docs.python.org/3/c-api/mapping.html#c.PyMapping_HasKeyStringWithError "PyMapping_HasKeyStringWithError").
  * [gh-107073](https://github.com/python/cpython/issues/107073): Add [`PyObject_VisitManagedDict()`](https://docs.python.org/3/c-api/object.html#c.PyObject_VisitManagedDict "PyObject_VisitManagedDict") and [`PyObject_ClearManagedDict()`](https://docs.python.org/3/c-api/object.html#c.PyObject_ClearManagedDict "PyObject_ClearManagedDict") functions which must be called by the traverse and clear functions of a type using [`Py_TPFLAGS_MANAGED_DICT`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_MANAGED_DICT "Py_TPFLAGS_MANAGED_DICT") flag. Patch by Victor Stinner.
  * [gh-108634](https://github.com/python/cpython/issues/108634): Python built with `configure` [`--with-trace-refs`](https://docs.python.org/3/using/configure.html#cmdoption-with-trace-refs) (tracing references) now supports the [Limited API](https://docs.python.org/3/c-api/stable.html#limited-c-api). Patch by Victor Stinner.
  * [gh-108014](https://github.com/python/cpython/issues/108014): Add [`PyLong_AsInt()`](https://docs.python.org/3/c-api/long.html#c.PyLong_AsInt "PyLong_AsInt") function: similar to [`PyLong_AsLong()`](https://docs.python.org/3/c-api/long.html#c.PyLong_AsLong "PyLong_AsLong"), but store the result in a C int instead of a C long. Previously, it was known as the private function `_PyLong_AsInt()` (with an underscore prefix). Patch by Victor Stinner.
  * [gh-108314](https://github.com/python/cpython/issues/108314): Add [`PyDict_ContainsString()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_ContainsString "PyDict_ContainsString") function: same as [`PyDict_Contains()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_Contains "PyDict_Contains"), but _key_ is specified as a constchar* UTF-8 encoded bytes string, rather than a [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*. Patch by Victor Stinner.
  * [gh-108337](https://github.com/python/cpython/issues/108337): Add atomic operations on additional data types in pyatomic.h.
  * [gh-108014](https://github.com/python/cpython/issues/108014): Add [`Py_IsFinalizing()`](https://docs.python.org/3/c-api/init.html#c.Py_IsFinalizing "Py_IsFinalizing") function: check if the main Python interpreter is [shutting down](https://docs.python.org/3/glossary.html#term-interpreter-shutdown). Patch by Victor Stinner.
  * [gh-107916](https://github.com/python/cpython/issues/107916): C API functions [`PyErr_SetFromErrnoWithFilename()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_SetFromErrnoWithFilename "PyErr_SetFromErrnoWithFilename"), [`PyErr_SetExcFromWindowsErrWithFilename()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_SetExcFromWindowsErrWithFilename "PyErr_SetExcFromWindowsErrWithFilename") and [`PyErr_SetFromWindowsErrWithFilename()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_SetFromWindowsErrWithFilename "PyErr_SetFromWindowsErrWithFilename") save now the error code before calling [`PyUnicode_DecodeFSDefault()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_DecodeFSDefault "PyUnicode_DecodeFSDefault").
  * [gh-107915](https://github.com/python/cpython/issues/107915): Such C API functions as `PyErr_SetString()`, `PyErr_Format()`, `PyErr_SetFromErrnoWithFilename()` and many others no longer crash or ignore errors if it failed to format the error message or decode the filename. Instead, they keep a corresponding error.
  * [gh-107810](https://github.com/python/cpython/issues/107810): Improve [`DeprecationWarning`](https://docs.python.org/3/library/exceptions.html#DeprecationWarning "DeprecationWarning") for uses of [`PyType_Spec`](https://docs.python.org/3/c-api/type.html#c.PyType_Spec "PyType_Spec") with metaclasses that have custom `tp_new`.
  * [gh-107249](https://github.com/python/cpython/issues/107249): Implement the [`Py_UNUSED`](https://docs.python.org/3/c-api/intro.html#c.Py_UNUSED "Py_UNUSED") macro for Windows MSVC compiler. Patch by Victor Stinner.
  * [gh-107226](https://github.com/python/cpython/issues/107226): [`PyModule_AddObjectRef()`](https://docs.python.org/3/c-api/module.html#c.PyModule_AddObjectRef "PyModule_AddObjectRef") is now only available in the limited API version 3.10 or later.
  * [gh-106320](https://github.com/python/cpython/issues/106320): Remove private `_PyUnicode_AsString()` alias to [`PyUnicode_AsUTF8()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_AsUTF8 "PyUnicode_AsUTF8"). It was kept for backward compatibility with Python 3.0 - 3.2. The [`PyUnicode_AsUTF8()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_AsUTF8 "PyUnicode_AsUTF8") is available since Python 3.3. The [`PyUnicode_AsUTF8String()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_AsUTF8String "PyUnicode_AsUTF8String") function can be used to keep compatibility with Python 3.2 and older.