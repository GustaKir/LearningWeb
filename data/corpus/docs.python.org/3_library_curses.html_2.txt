Title: Curses Library Functions Overview
URL: https://docs.python.org/3/library/curses.html
Summary: This documentation chunk describes several functions in the curses library, including `def_shell_mode()`, which saves the current terminal state for non-curses usage; `delay_output(_ms_)`, which introduces a pause in output for a specified duration; and `doupdate()`, which updates the physical screen to reflect the desired state based on virtual screen data.
---

curses.def_shell_mode()[¶](https://docs.python.org/3/library/curses.html#curses.def_shell_mode "Link to this definition")
    
Save the current terminal mode as the “shell” mode, the mode when the running program is not using curses. (Its counterpart is the “program” mode, when the program is using curses capabilities.) Subsequent calls to [`reset_shell_mode()`](https://docs.python.org/3/library/curses.html#curses.reset_shell_mode "curses.reset_shell_mode") will restore this mode. 

curses.delay_output(_ms_)[¶](https://docs.python.org/3/library/curses.html#curses.delay_output "Link to this definition")
    
Insert an _ms_ millisecond pause in output. 

curses.doupdate()[¶](https://docs.python.org/3/library/curses.html#curses.doupdate "Link to this definition")
    
Update the physical screen. The curses library keeps two data structures, one representing the current physical screen contents and a virtual screen representing the desired next state. The [`doupdate()`](https://docs.python.org/3/library/curses.html#curses.doupdate "curses.doupdate") ground updates the physical screen to match the virtual screen.
The virtual screen may be updated by a [`noutrefresh()`](https://docs.python.org/3/library/curses.html#curses.window.noutrefresh "curses.window.noutrefresh") call after write operations such as [`addstr()`](https://docs.python.org/3/library/curses.html#curses.window.addstr "curses.window.addstr") have been performed on a window. The normal [`refresh()`](https://docs.python.org/3/library/curses.html#curses.window.refresh "curses.window.refresh") call is simply `noutrefresh()` followed by `doupdate()`; if you have to update multiple windows, you can speed performance and perhaps reduce screen flicker by issuing `noutrefresh()` calls on all windows, followed by a single `doupdate()`. 

curses.echo()[¶](https://docs.python.org/3/library/curses.html#curses.echo "Link to this definition")
    
Enter echo mode. In echo mode, each character input is echoed to the screen as it is entered. 

curses.endwin()[¶](https://docs.python.org/3/library/curses.html#curses.endwin "Link to this definition")
    
De-initialize the library, and return terminal to normal status. 

curses.erasechar()[¶](https://docs.python.org/3/library/curses.html#curses.erasechar "Link to this definition")
    
Return the user’s current erase character as a one-byte bytes object. Under Unix operating systems this is a property of the controlling tty of the curses program, and is not set by the curses library itself. 

curses.filter()[¶](https://docs.python.org/3/library/curses.html#curses.filter "Link to this definition")
    
The [`filter()`](https://docs.python.org/3/library/curses.html#curses.filter "curses.filter") routine, if used, must be called before [`initscr()`](https://docs.python.org/3/library/curses.html#curses.initscr "curses.initscr") is called. The effect is that, during those calls, `LINES` is set to `1`; the capabilities `clear`, `cup`, `cud`, `cud1`, `cuu1`, `cuu`, `vpa` are disabled; and the `home` string is set to the value of `cr`. The effect is that the cursor is confined to the current line, and so are screen updates. This may be used for enabling character-at-a-time line editing without touching the rest of the screen. 

curses.flash()[¶](https://docs.python.org/3/library/curses.html#curses.flash "Link to this definition")
    
Flash the screen. That is, change it to reverse-video and then change it back in a short interval. Some people prefer such as ‘visible bell’ to the audible attention signal produced by [`beep()`](https://docs.python.org/3/library/curses.html#curses.beep "curses.beep"). 

curses.flushinp()[¶](https://docs.python.org/3/library/curses.html#curses.flushinp "Link to this definition")
    
Flush all input buffers. This throws away any typeahead that has been typed by the user and has not yet been processed by the program.