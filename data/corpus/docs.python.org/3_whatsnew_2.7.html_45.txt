Title: PEP 493: HTTPS Verification Migration Tools for Python 2.7
URL: https://docs.python.org/3/whatsnew/2.7.html
Summary: PEP 493 introduces migration tools to facilitate an incremental upgrade process for HTTPS connections in Python 2.7. These tools aim to support environments where applications rely on lenient certificate processing, enhancing security without necessitating immediate application modifications.
---

```
importurllib2
importssl
# This disables all verification
context = ssl._create_unverified_context()
# This allows using a specific certificate for the host, which doesn't need
# to be in the trust store
context = ssl.create_default_context(cafile="/path/to/file.crt")
urllib2.urlopen("https://invalid-cert", context=context)

```

### PEP 493: HTTPS verification migration tools for Python 2.7[¶](https://docs.python.org/3/whatsnew/2.7.html#pep-493-https-verification-migration-tools-for-python-2-7 "Link to this heading")
[**PEP 493**](https://peps.python.org/pep-0493/) provides additional migration tools to support a more incremental infrastructure upgrade process for environments containing applications and services relying on the historically permissive processing of server certificates when establishing client HTTPS connections. These additions were made in the Python 2.7.12 release.
These tools are intended for use in cases where affected applications and services can’t be modified to explicitly pass a more permissive SSL context when establishing the connection.
For applications and services which can’t be modified at all, the new `PYTHONHTTPSVERIFY` environment variable may be set to `0` to revert an entire Python process back to the default permissive behaviour of Python 2.7.8 and earlier.
For cases where the connection establishment code can’t be modified, but the overall application can be, the new `ssl._https_verify_certificates()` function can be used to adjust the default behaviour at runtime.
### New `make regen-all` build target[¶](https://docs.python.org/3/whatsnew/2.7.html#new-make-regen-all-build-target "Link to this heading")
To simplify cross-compilation, and to ensure that CPython can reliably be compiled without requiring an existing version of Python to already be available, the autotools-based build system no longer attempts to implicitly recompile generated files based on file modification times.
Instead, a new `make regen-all` command has been added to force regeneration of these files when desired (e.g. after an initial version of Python has already been built based on the pregenerated versions).
More selective regeneration targets are also defined - see [Makefile.pre.in](https://github.com/python/cpython/tree/3.13/Makefile.pre.in) for details.
(Contributed by Victor Stinner in [bpo-23404](https://bugs.python.org/issue?@action=redirect&bpo=23404).)
Added in version 2.7.14.
### Removal of `make touch` build target[¶](https://docs.python.org/3/whatsnew/2.7.html#removal-of-make-touch-build-target "Link to this heading")
The `make touch` build target previously used to request implicit regeneration of generated files by updating their modification times has been removed.
It has been replaced by the new `make regen-all` target.
(Contributed by Victor Stinner in [bpo-23404](https://bugs.python.org/issue?@action=redirect&bpo=23404).)
Changed in version 2.7.14.
## Acknowledgements[¶](https://docs.python.org/3/whatsnew/2.7.html#acknowledgements "Link to this heading")
The author would like to thank the following people for offering suggestions, corrections and assistance with various drafts of this article: Nick Coghlan, Philip Jenvey, Ryan Lovett, R. David Murray, Hugh Secker-Walker.
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [What’s New in Python 2.7](https://docs.python.org/3/whatsnew/2.7.html)
    * [The Future for Python 2.x](https://docs.python.org/3/whatsnew/2.7.html#the-future-for-python-2-x)
    * [Changes to the Handling of Deprecation Warnings](https://docs.python.org/3/whatsnew/2.7.html#changes-to-the-handling-of-deprecation-warnings)
    * [Python 3.1 Features](https://docs.python.org/3/whatsnew/2.7.html#python-3-1-features)
    * [PEP 372: Adding an Ordered Dictionary to collections](https://docs.python.org/3/whatsnew/2.7.html#pep-372-adding-an-ordered-dictionary-to-collections)
    * [PEP 378: Format Specifier for Thousands Separator](https://docs.python.org/3/whatsnew/2.7.html#pep-378-format-specifier-for-thousands-separator)
    * [PEP 389: The argparse Module for Parsing Command Lines](https://docs.python.org/3/whatsnew/2.7.html#pep-389-the-argparse-module-for-parsing-command-lines)
    * [PEP 391: Dictionary-Based Configuration For Logging](https://docs.python.org/3/whatsnew/2.7.html#pep-391-dictionary-based-configuration-for-logging)
    * [PEP 3106: Dictionary Views](https://docs.python.org/3/whatsnew/2.7.html#pep-3106-dictionary-views)
    * [PEP 3137: The memoryview Object](https://docs.python.org/3/whatsnew/2.7.html#pep-3137-the-memoryview-object)
    * [Other Language Changes](https://docs.python.org/3/whatsnew/2.7.html#other-language-changes)
      * [Interpreter Changes](https://docs.python.org/3/whatsnew/2.7.html#interpreter-changes)
      * [Optimizations](https://docs.python.org/3/whatsnew/2.7.html#optimizations)
    * [New and Improved Modules](https://docs.python.org/3/whatsnew/2.7.html#new-and-improved-modules)
      * [New module: