Title: Python Enhancements in PEPs and Modules
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section highlights various Python improvements, including PEP 560 for `__mro_entries__` and `__class_getitem__`, PEP 562 for module `__getattr__` and `__dir__`, and updates to the `atexit` module with interpreter-specific callbacks. Additionally, PEP 552 introduces deterministic bytecode caching based on content hashes, and constant folding is moved from the bytecode layer to the AST layer.
---

python.org/issue?@action=redirect&bpo=32226): [**PEP 560**](https://peps.python.org/pep-0560/): Add support for `__mro_entries__` and `__class_getitem__`. Implemented by Ivan Levkivskyi.
  * [bpo-32225](https://bugs.python.org/issue?@action=redirect&bpo=32225): [**PEP 562**](https://peps.python.org/pep-0562/): Add support for module `__getattr__` and `__dir__`. Implemented by Ivan Levkivskyi.
  * [bpo-31901](https://bugs.python.org/issue?@action=redirect&bpo=31901): The `atexit` module now has its callback stored per interpreter.
  * [bpo-31650](https://bugs.python.org/issue?@action=redirect&bpo=31650): Implement [**PEP 552**](https://peps.python.org/pep-0552/) (Deterministic pycs). Python now supports invalidating bytecode cache files bashed on a source content hash rather than source last-modified time.
  * [bpo-29469](https://bugs.python.org/issue?@action=redirect&bpo=29469): Move constant folding from bytecode layer to AST layer. Original patch by Eugene Toder.


### Library[¶](https://docs.python.org/3/whatsnew/changelog.html#id538 "Link to this heading")
  * [bpo-32506](https://bugs.python.org/issue?@action=redirect&bpo=32506): Now that dict is defined as keeping insertion order, drop OrderedDict and just use plain dict.
  * [bpo-32279](https://bugs.python.org/issue?@action=redirect&bpo=32279): Add params to dataclasses.make_dataclasses(): init, repr, eq, order, hash, and frozen. Pass them through to dataclass().
  * [bpo-32278](https://bugs.python.org/issue?@action=redirect&bpo=32278): Make type information optional on dataclasses.make_dataclass(). If omitted, the string ‘typing.Any’ is used.
  * [bpo-32499](https://bugs.python.org/issue?@action=redirect&bpo=32499): Add dataclasses.is_dataclass(obj), which returns True if obj is a dataclass or an instance of one.
  * [bpo-32468](https://bugs.python.org/issue?@action=redirect&bpo=32468): Improve frame repr() to mention filename, code name and current line number.
  * [bpo-23749](https://bugs.python.org/issue?@action=redirect&bpo=23749): asyncio: Implement loop.start_tls()
  * [bpo-32441](https://bugs.python.org/issue?@action=redirect&bpo=32441): Return the new file descriptor (i.e., the second argument) from `os.dup2`. Previously, `None` was always returned.
  * [bpo-32422](https://bugs.python.org/issue?@action=redirect&bpo=32422): `functools.lru_cache` uses less memory (3 words for each cached key) and takes about 1/3 time for cyclic GC.
  * [bpo-31721](https://bugs.python.org/issue?@action=redirect&bpo=31721): Prevent Python crash from happening when Future._log_traceback is set to True manually. Now it can only be set to False, or a ValueError is raised.
  * [bpo-32415](https://bugs.python.org/issue?@action=redirect&bpo=32415): asyncio: Add Task.get_loop() and Future.get_loop()
  * [bpo-26133](https://bugs.python.org/issue?@action=redirect&bpo=26133): Don’t unsubscribe signals in asyncio UNIX event loop on interpreter shutdown.
  * [bpo-32363](https://bugs.python.org/issue?@action=redirect&bpo=32363): Make asyncio.Task.set_exception() and set_result() raise NotImplementedError. Task._step() and Future.__await__() raise proper exceptions when they are in an invalid state, instead of raising an AssertionError.
  * [bpo-32357](https://bugs.python.org/issue?@action=redirect&bpo=32357): Optimize asyncio.iscoroutine() and loop.create_task() for non-native coroutines (e.g. async/await compiled with Cython). ‘loop.create_task(python_coroutine)’ used to be 20% faster than ‘loop.create_task(cython_coroutine)’. Now, the latter is as fast.
  * [bpo-32356](https://bugs.python.org/issue?@action=redirect&bpo=32356): asyncio.transport.resume_reading() and pause_reading() are now idempotent. New transport.is_reading() method is added.
  * [bpo-32355](https://bugs.python.org/issue?@action=redirect&bpo=32355): Optimize asyncio.gather(); now up to 15% faster.
  * [bpo-32351](https://bugs.python.org/issue?@action=redirect&bpo=32351): Use fastpath in asyncio.sleep if delay<0 (2x boost)
  * [bpo-32348](https://bugs.python.org/issue?@action=redirect&bpo=32348): Optimize asyncio.Future schedule/add/remove callback. The optimization shows 3-6% performance improvements of async/await code.
  * [bpo-32331](https://bugs.python.org/issue?@action=redirect&bpo=32331): Fix socket.settimeout() and socket.setblocking() to keep socket.type as is. Fix socket.socket() constructor to reset any bit flags applied to socket’s type. This change only affects OSes that have SOCK_NONBLOCK and/or SOCK_CLOEXEC.
  * [bpo-32248](https://bugs.python.org/issue?@action=redirect&bpo=32248): Add [`importlib.abc.ResourceReader`](https://docs.python.org/3/library/importlib.html#importlib.abc.ResourceReader "importlib.abc.ResourceReader") as an ABC for loaders to provide a unified API for reading resources contained within packages. Also add [`importlib.resources`](https://docs.python.org/3/library/importlib.resources.html#module-importlib.resources "importlib.resources: Package resource reading, opening,