Title: Python Assignment Operators and Ternary Syntax
URL: https://docs.python.org/3/faq/programming.html
Summary: This section explains that assignment operators in Python are syntactic delimiters rather than true operators. It highlights the equivalent of C's ternary operator in Python using the syntax '[on_true] if [expression] else [on_false]', providing an example. It also warns against using the logical operator idiom due to potential errors when _on_true_ evaluates to a false value, encouraging the use of the 'if...else' form instead.
---

```

The same is true of the various assignment operators (`=`, `+=` etc). They are not truly operators but syntactic delimiters in assignment statements.
### [Is there an equivalent of C’s “?:” ternary operator?](https://docs.python.org/3/faq/programming.html#id24)[¶](https://docs.python.org/3/faq/programming.html#is-there-an-equivalent-of-c-s-ternary-operator "Link to this heading")
Yes, there is. The syntax is as follows:
```
[on_true] if [expression] else [on_false]
x, y = 50, 25
small = x if x < y else y

```

Before this syntax was introduced in Python 2.5, a common idiom was to use logical operators:
```
[expression] and [on_true] or [on_false]

```

However, this idiom is unsafe, as it can give wrong results when _on_true_ has a false boolean value. Therefore, it is always better to use the `... if ... else ...` form.
### [Is it possible to write obfuscated one-liners in Python?](https://docs.python.org/3/faq/programming.html#id25)[¶](https://docs.python.org/3/faq/programming.html#is-it-possible-to-write-obfuscated-one-liners-in-python "Link to this heading")
Yes. Usually this is done by nesting [`lambda`](https://docs.python.org/3/reference/expressions.html#lambda) within `lambda`. See the following three examples, slightly adapted from Ulf Bartelt:
```
fromfunctoolsimport reduce
# Primes < 1000
print(list(filter(None,map(lambda y:y*reduce(lambda x,y:x*y!=0,
map(lambda x,y=y:y%x,range(2,int(pow(y,0.5)+1))),1),range(2,1000)))))
# First 10 Fibonacci numbers
print(list(map(lambda x,f=lambda x,f:(f(x-1,f)+f(x-2,f)) if x>1 else 1:
f(x,f), range(10))))
# Mandelbrot set
print((lambda Ru,Ro,Iu,Io,IM,Sx,Sy:reduce(lambda x,y:x+'\n'+y,map(lambda y,
Iu=Iu,Io=Io,Ru=Ru,Ro=Ro,Sy=Sy,L=lambda yc,Iu=Iu,Io=Io,Ru=Ru,Ro=Ro,i=IM,
Sx=Sx,Sy=Sy:reduce(lambda x,y:x+y,map(lambda x,xc=Ru,yc=yc,Ru=Ru,Ro=Ro,
i=i,Sx=Sx,F=lambda xc,yc,x,y,k,f=lambda xc,yc,x,y,k,f:(k<=0)or (x*x+y*y
>=4.0) or 1+f(xc,yc,x*x-y*y+xc,2.0*x*y+yc,k-1,f):f(xc,yc,x,y,k,f):chr(
64+F(Ru+x*(Ro-Ru)/Sx,yc,0,0,i)),range(Sx))):L(Iu+y*(Io-Iu)/Sy),range(Sy
))))(-2.1, 0.7, -1.2, 1.2, 30, 80, 24))
#  \___ ___/ \___ ___/ |  |  |__ lines on screen
#    V     V   |  |______ columns on screen
#    |     |   |__________ maximum of "iterations"
#    |     |_________________ range on y axis
#    |____________________________ range on x axis

```

Don’t try this at home, kids!
### [What does the slash(/) in the parameter list of a function mean?](https://docs.python.org/3/faq/programming.html#id26)[¶](https://docs.python.org/3/faq/programming.html#what-does-the-slash-in-the-parameter-list-of-a-function-mean "Link to this heading")
A slash in the argument list of a function denotes that the parameters prior to it are positional-only. Positional-only parameters are the ones without an externally usable name. Upon calling a function that accepts positional-only parameters, arguments are mapped to parameters based solely on their position. For example, [`divmod()`](https://docs.python.org/3/library/functions.html#divmod "divmod") is a function that accepts positional-only parameters. Its documentation looks like this:
>>>```
>>> help(divmod)
Help on built-in function divmod in module builtins:
divmod(x, y, /)
  Return the tuple (x//y, x%y). Invariant: div*y + mod == x.

```

The slash at the end of the parameter list means that both parameters are positional-only. Thus, calling [`divmod()`](https://docs.python.org/3/library/functions.html#divmod "divmod") with keyword arguments would lead to an error:
>>>```
>>> divmod(x=3, y=4)
Traceback (most recent call last):
 File "<stdin>", line 1, in <module>
TypeError: divmod() takes no keyword arguments

```

## [Numbers and strings](https://docs.python.org/3/faq/programming.html#id27)[¶](https://docs.python.org/3/faq/programming.html#numbers-and-strings "Link to this heading")
### [How do I specify hexadecimal and octal integers?](https://docs.python.org/3/faq/programming.html#id28)[¶](https://docs.python.org/3/faq/programming.html#how-do-i-specify-hexadecimal-and-octal-integers "Link to this heading")
To specify an octal digit, precede the octal value with a zero, and then a lower or uppercase “o”. For example, to set the variable “a” to the octal value “10” (8 in decimal), type:
>>>```
>>> a = 0o10
>>> a
8

```

Hexadecimal is just as easy. Simply precede the hexadecimal number with a zero, and then a lower or uppercase “x”. Hexadecimal digits can be specified in lower or uppercase. For example, in the Python interpreter:
>>>```
>>> a = 0xa5
>>> a
165
>>> b = 0XB2
>>> b
178

```

### [Why does -22 // 10 return -3?](https://docs.python.org/3/faq/programming.html#id29)[¶](https://docs.python.org/3/faq/programming.html#why-does-22-10-return-3 "Link to this heading")
It’s primarily driven by the desire that `i % j` have the same sign as `j`. If you want that, and also want:
```
i == (i // j) * j + (i % j)