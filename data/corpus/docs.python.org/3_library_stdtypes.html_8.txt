Title: Boolean Type in Python
URL: https://docs.python.org/3/library/stdtypes.html
Summary: The boolean type in Python, represented by `bool`, serves to express truth values with two possible instances: `True` and `False`. The `bool()` function can convert values into boolean equivalents. For logical operations, Python provides boolean operators like `and`, `or`, and `not`, while bitwise operators `&`, `|`, and `^` can be applied to booleans, yielding results akin to logical operations. However, using logical operators is recommended over bitwise ones.
---

```

## Boolean Type - [`bool`](https://docs.python.org/3/library/functions.html#bool "bool")[¶](https://docs.python.org/3/library/stdtypes.html#boolean-type-bool "Link to this heading")
Booleans represent truth values. The [`bool`](https://docs.python.org/3/library/functions.html#bool "bool") type has exactly two constant instances: `True` and `False`.
The built-in function [`bool()`](https://docs.python.org/3/library/functions.html#bool "bool") converts any value to a boolean, if the value can be interpreted as a truth value (see section [Truth Value Testing](https://docs.python.org/3/library/stdtypes.html#truth) above).
For logical operations, use the [boolean operators](https://docs.python.org/3/library/stdtypes.html#boolean) `and`, `or` and `not`. When applying the bitwise operators `&`, `|`, `^` to two booleans, they return a bool equivalent to the logical operations “and”, “or”, “xor”. However, the logical operators `and`, `or` and `!=` should be preferred over `&`, `|` and `^`.
Deprecated since version 3.12: The use of the bitwise inversion operator `~` is deprecated and will raise an error in Python 3.16.
[`bool`](https://docs.python.org/3/library/functions.html#bool "bool") is a subclass of [`int`](https://docs.python.org/3/library/functions.html#int "int") (see [Numeric Types — int, float, complex](https://docs.python.org/3/library/stdtypes.html#typesnumeric)). In many numeric contexts, `False` and `True` behave like the integers 0 and 1, respectively. However, relying on this is discouraged; explicitly convert using [`int()`](https://docs.python.org/3/library/functions.html#int "int") instead.
## Iterator Types[¶](https://docs.python.org/3/library/stdtypes.html#iterator-types "Link to this heading")
Python supports a concept of iteration over containers. This is implemented using two distinct methods; these are used to allow user-defined classes to support iteration. Sequences, described below in more detail, always support the iteration methods.
One method needs to be defined for container objects to provide [iterable](https://docs.python.org/3/glossary.html#term-iterable) support: 

container.__iter__()[¶](https://docs.python.org/3/library/stdtypes.html#container.__iter__ "Link to this definition")
    
Return an [iterator](https://docs.python.org/3/glossary.html#term-iterator) object. The object is required to support the iterator protocol described below. If a container supports different types of iteration, additional methods can be provided to specifically request iterators for those iteration types. (An example of an object supporting multiple forms of iteration would be a tree structure which supports both breadth-first and depth-first traversal.) This method corresponds to the [`tp_iter`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_iter "PyTypeObject.tp_iter") slot of the type structure for Python objects in the Python/C API.
The iterator objects themselves are required to support the following two methods, which together form the _iterator protocol_ : 

iterator.__iter__()[¶](https://docs.python.org/3/library/stdtypes.html#iterator.__iter__ "Link to this definition")
    
Return the [iterator](https://docs.python.org/3/glossary.html#term-iterator) object itself. This is required to allow both containers and iterators to be used with the [`for`](https://docs.python.org/3/reference/compound_stmts.html#for) and [`in`](https://docs.python.org/3/reference/expressions.html#in) statements. This method corresponds to the [`tp_iter`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_iter "PyTypeObject.tp_iter") slot of the type structure for Python objects in the Python/C API.