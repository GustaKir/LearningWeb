Title: Creating a Python Module
URL: https://docs.python.org/3/c-api/module.html
Summary: This documentation chunk describes the `create_module` function, which takes a `ModuleSpec` instance and a module definition, returning a new module object or signaling an error. The implementation should be minimal and avoid executing arbitrary Python code to prevent infinite loops during module imports. It notes that only one `Py_mod_create` slot can be specified per module definition.
---

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*create_module([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*spec, [PyModuleDef](https://docs.python.org/3/c-api/module.html#c.PyModuleDef "PyModuleDef")*def)[¶](https://docs.python.org/3/c-api/module.html#c.Py_mod_create.create_module "Link to this definition")

The function receives a [`ModuleSpec`](https://docs.python.org/3/library/importlib.html#importlib.machinery.ModuleSpec "importlib.machinery.ModuleSpec") instance, as defined in [**PEP 451**](https://peps.python.org/pep-0451/), and the module definition. It should return a new module object, or set an error and return `NULL`.
This function should be kept minimal. In particular, it should not call arbitrary Python code, as trying to import the same module again may result in an infinite loop.
Multiple `Py_mod_create` slots may not be specified in one module definition.
If `Py_mod_create` is not specified, the import machinery will create a normal module object using [`PyModule_New()`](https://docs.python.org/3/c-api/module.html#c.PyModule_New "PyModule_New"). The name is taken from _spec_ , not the definition, to allow extension modules to dynamically adjust to their place in the module hierarchy and be imported under different names through symlinks, all while sharing a single module definition.
There is no requirement for the returned object to be an instance of [`PyModule_Type`](https://docs.python.org/3/c-api/module.html#c.PyModule_Type "PyModule_Type"). Any type can be used, as long as it supports setting and getting import-related attributes. However, only `PyModule_Type` instances may be returned if the `PyModuleDef` has non-`NULL` `m_traverse`, `m_clear`, `m_free`; non-zero `m_size`; or slots other than `Py_mod_create`. 

Py_mod_exec[¶](https://docs.python.org/3/c-api/module.html#c.Py_mod_exec "Link to this definition")
    
Specifies a function that is called to _execute_ the module. This is equivalent to executing the code of a Python module: typically, this function adds classes and constants to the module. The signature of the function is: 

intexec_module([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*module)[¶](https://docs.python.org/3/c-api/module.html#c.Py_mod_exec.exec_module "Link to this definition")

If multiple `Py_mod_exec` slots are specified, they are processed in the order they appear in the _m_slots_ array. 

Py_mod_multiple_interpreters[¶](https://docs.python.org/3/c-api/module.html#c.Py_mod_multiple_interpreters "Link to this definition")
    
Specifies one of the following values: 

Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED[¶](https://docs.python.org/3/c-api/module.html#c.Py_MOD_MULTIPLE_INTERPRETERS_NOT_SUPPORTED "Link to this definition")
    
The module does not support being imported in subinterpreters. 

Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED[¶](https://docs.python.org/3/c-api/module.html#c.Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED "Link to this definition")
    
The module supports being imported in subinterpreters, but only when they share the main interpreter’s GIL. (See [Isolating Extension Modules](https://docs.python.org/3/howto/isolating-extensions.html#isolating-extensions-howto).) 

Py_MOD_PER_INTERPRETER_GIL_SUPPORTED[¶](https://docs.python.org/3/c-api/module.html#c.Py_MOD_PER_INTERPRETER_GIL_SUPPORTED "Link to this definition")
    
The module supports being imported in subinterpreters, even when they have their own GIL. (See [Isolating Extension Modules](https://docs.python.org/3/howto/isolating-extensions.html#isolating-extensions-howto).)
This slot determines whether or not importing this module in a subinterpreter will fail.
Multiple `Py_mod_multiple_interpreters` slots may not be specified in one module definition.
If `Py_mod_multiple_interpreters` is not specified, the import machinery defaults to `Py_MOD_MULTIPLE_INTERPRETERS_SUPPORTED`.
Added in version 3.12. 

Py_mod_gil[¶](https://docs.python.org/3/c-api/module.html#c.Py_mod_gil "Link to this definition")
    
Specifies one of the following values: 

Py_MOD_GIL_USED[¶](https://docs.python.org/3/c-api/module.html#c.Py_MOD_GIL_USED "Link to this definition")
    
The module depends on the presence of the global interpreter lock (GIL), and may access global state without synchronization.