Title: Logging with Contextual Information in Python
URL: https://docs.python.org/3/howto/logging-cookbook.html
Summary: This section demonstrates how to create a custom logging filter in Python that injects contextual information, such as user and IP address, into log messages. The example uses random data for demonstration purposes and sets up logging with various severity levels, allowing for detailed logging output.
---

```
importlogging
fromrandomimport choice
classContextFilter(logging.Filter):
"""
  This is a filter which injects contextual information into the log.
  Rather than use actual contextual information, we just use random
  data in this demo.
  """
  USERS = ['jim', 'fred', 'sheila']
  IPS = ['123.231.231.123', '127.0.0.1', '192.168.0.1']
  deffilter(self, record):
    record.ip = choice(ContextFilter.IPS)
    record.user = choice(ContextFilter.USERS)
    return True
if __name__ == '__main__':
  levels = (logging.DEBUG, logging.INFO, logging.WARNING, logging.ERROR, logging.CRITICAL)
  logging.basicConfig(level=logging.DEBUG,
            format='%(asctime)-15s%(name)-5s%(levelname)-8s IP: %(ip)-15s User: %(user)-8s%(message)s')
  a1 = logging.getLogger('a.b.c')
  a2 = logging.getLogger('d.e.f')
  f = ContextFilter()
  a1.addFilter(f)
  a2.addFilter(f)
  a1.debug('A debug message')
  a1.info('An info message with %s', 'some parameters')
  for x in range(10):
    lvl = choice(levels)
    lvlname = logging.getLevelName(lvl)
    a2.log(lvl, 'A message at %s level with %d%s', lvlname, 2, 'parameters')

```

which, when run, produces something like:
```
2010-09-06 22:38:15,292 a.b.c DEBUG  IP: 123.231.231.123 User: fred   A debug message
2010-09-06 22:38:15,300 a.b.c INFO   IP: 192.168.0.1   User: sheila  An info message with some parameters
2010-09-06 22:38:15,300 d.e.f CRITICAL IP: 127.0.0.1    User: sheila  A message at CRITICAL level with 2 parameters
2010-09-06 22:38:15,300 d.e.f ERROR  IP: 127.0.0.1    User: jim   A message at ERROR level with 2 parameters
2010-09-06 22:38:15,300 d.e.f DEBUG  IP: 127.0.0.1    User: sheila  A message at DEBUG level with 2 parameters
2010-09-06 22:38:15,300 d.e.f ERROR  IP: 123.231.231.123 User: fred   A message at ERROR level with 2 parameters
2010-09-06 22:38:15,300 d.e.f CRITICAL IP: 192.168.0.1   User: jim   A message at CRITICAL level with 2 parameters
2010-09-06 22:38:15,300 d.e.f CRITICAL IP: 127.0.0.1    User: sheila  A message at CRITICAL level with 2 parameters
2010-09-06 22:38:15,300 d.e.f DEBUG  IP: 192.168.0.1   User: jim   A message at DEBUG level with 2 parameters
2010-09-06 22:38:15,301 d.e.f ERROR  IP: 127.0.0.1    User: sheila  A message at ERROR level with 2 parameters
2010-09-06 22:38:15,301 d.e.f DEBUG  IP: 123.231.231.123 User: fred   A message at DEBUG level with 2 parameters
2010-09-06 22:38:15,301 d.e.f INFO   IP: 123.231.231.123 User: fred   A message at INFO level with 2 parameters

```

## Use of `contextvars`[¶](https://docs.python.org/3/howto/logging-cookbook.html#use-of-contextvars "Link to this heading")
Since Python 3.7, the [`contextvars`](https://docs.python.org/3/library/contextvars.html#module-contextvars "contextvars: Context Variables") module has provided context-local storage which works for both [`threading`](https://docs.python.org/3/library/threading.html#module-threading "threading: Thread-based parallelism.") and [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O.") processing needs. This type of storage may thus be generally preferable to thread-locals. The following example shows how, in a multi-threaded environment, logs can populated with contextual information such as, for example, request attributes handled by web applications.
For the purposes of illustration, say that you have different web applications, each independent of the other but running in the same Python process and using a library common to them. How can each of these applications have their own log, where all logging messages from the library (and other request processing code) are directed to the appropriate application’s log file, while including in the log additional contextual information such as client IP, HTTP request method and client username?
Let’s assume that the library can be simulated by the following code:
```
# webapplib.py
importlogging
importtime
logger = logging.getLogger(__name__)
defuseful():
  # Just a representative event logged from the library
  logger.debug('Hello from webapplib!')
  # Just sleep for a bit so other threads get to run
  time.sleep(0.01)

```

We can simulate the multiple web applications by means of two simple classes, `Request` and `WebApp`. These simulate how real threaded web applications work - each request is handled by a thread: