Title: doctest Module Features in Python
URL: https://docs.python.org/3/library/doctest.html
Summary: This section discusses the `ELLIPSIS` feature for ignoring details in exception messages during doctesting. It also mentions the `IGNORE_EXCEPTION_DETAIL` option introduced in Python 3.2, which ignores module-related exception details. Additionally, `doctest.SKIP` allows examples to be included for documentation without running tests, useful for cases with random output or unavailable resources.
---

```

Note that [`ELLIPSIS`](https://docs.python.org/3/library/doctest.html#doctest.ELLIPSIS "doctest.ELLIPSIS") can also be used to ignore the details of the exception message, but such a test may still fail based on whether the module name is present or matches exactly.
Changed in version 3.2: [`IGNORE_EXCEPTION_DETAIL`](https://docs.python.org/3/library/doctest.html#doctest.IGNORE_EXCEPTION_DETAIL "doctest.IGNORE_EXCEPTION_DETAIL") now also ignores any information relating to the module containing the exception under test. 

doctest.SKIP[¶](https://docs.python.org/3/library/doctest.html#doctest.SKIP "Link to this definition")
    
When specified, do not run the example at all. This can be useful in contexts where doctest examples serve as both documentation and test cases, and an example should be included for documentation purposes, but should not be checked. E.g., the example’s output might be random; or the example might depend on resources which would be unavailable to the test driver.
The SKIP flag can also be used for temporarily “commenting out” examples. 

doctest.COMPARISON_FLAGS[¶](https://docs.python.org/3/library/doctest.html#doctest.COMPARISON_FLAGS "Link to this definition")
    
A bitmask or’ing together all the comparison flags above.
The second group of options controls how test failures are reported: 

doctest.REPORT_UDIFF[¶](https://docs.python.org/3/library/doctest.html#doctest.REPORT_UDIFF "Link to this definition")
    
When specified, failures that involve multi-line expected and actual outputs are displayed using a unified diff. 

doctest.REPORT_CDIFF[¶](https://docs.python.org/3/library/doctest.html#doctest.REPORT_CDIFF "Link to this definition")
    
When specified, failures that involve multi-line expected and actual outputs will be displayed using a context diff. 

doctest.REPORT_NDIFF[¶](https://docs.python.org/3/library/doctest.html#doctest.REPORT_NDIFF "Link to this definition")
    
When specified, differences are computed by `difflib.Differ`, using the same algorithm as the popular `ndiff.py` utility. This is the only method that marks differences within lines as well as across lines. For example, if a line of expected output contains digit `1` where actual output contains letter `l`, a line is inserted with a caret marking the mismatching column positions. 

doctest.REPORT_ONLY_FIRST_FAILURE[¶](https://docs.python.org/3/library/doctest.html#doctest.REPORT_ONLY_FIRST_FAILURE "Link to this definition")
    
When specified, display the first failing example in each doctest, but suppress output for all remaining examples. This will prevent doctest from reporting correct examples that break because of earlier failures; but it might also hide incorrect examples that fail independently of the first failure. When [`REPORT_ONLY_FIRST_FAILURE`](https://docs.python.org/3/library/doctest.html#doctest.REPORT_ONLY_FIRST_FAILURE "doctest.REPORT_ONLY_FIRST_FAILURE") is specified, the remaining examples are still run, and still count towards the total number of failures reported; only the output is suppressed. 

doctest.FAIL_FAST[¶](https://docs.python.org/3/library/doctest.html#doctest.FAIL_FAST "Link to this definition")
    
When specified, exit after the first failing example and don’t attempt to run the remaining examples. Thus, the number of failures reported will be at most 1. This flag may be useful during debugging, since examples after the first failure won’t even produce debugging output. 

doctest.REPORTING_FLAGS[¶](https://docs.python.org/3/library/doctest.html#doctest.REPORTING_FLAGS "Link to this definition")
    
A bitmask or’ing together all the reporting flags above.
There is also a way to register new option flag names, though this isn’t useful unless you intend to extend [`doctest`](https://docs.python.org/3/library/doctest.html#module-doctest "doctest: Test pieces of code within docstrings.") internals via subclassing: 

doctest.register_optionflag(_name_)[¶](https://docs.python.org/3/library/doctest.html#doctest.register_optionflag "Link to this definition")
    
Create a new option flag with a given name, and return the new flag’s integer value. [`register_optionflag()`](https://docs.python.org/3/library/doctest.html#doctest.register_optionflag "doctest.register_optionflag") can be used when subclassing [`OutputChecker`](https://docs.python.org/3/library/doctest.html#doctest.OutputChecker "doctest.OutputChecker") or [`DocTestRunner`](https://docs.python.org/3/library/doctest.html#doctest.DocTestRunner "doctest.DocTestRunner") to create new options that are supported by your subclasses. [`register_optionflag()`](https://docs.python.org/3/library/doctest.html#doctest.register_optionflag "doctest.register_optionflag") should always be called using the following idiom:
```
MY_FLAG = register_optionflag('MY_FLAG')