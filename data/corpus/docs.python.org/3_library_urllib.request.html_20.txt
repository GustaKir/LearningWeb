Title: URLopener Methods in urllib.request
URL: https://docs.python.org/3/library/urllib.request.html
Summary: This section describes methods of the URLopener class in Python's urllib.request module. It covers 'open_unknown', an overridable interface for opening unknown URL types, and 'retrieve', which downloads content from a specified URL and saves it to a given filename, returning a tuple with the local filename and response headers.
---

open_unknown(_fullurl_ , _data =None_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.open_unknown "Link to this definition")
    
Overridable interface to open unknown URL types. 

retrieve(_url_ , _filename =None_, _reporthook =None_, _data =None_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.retrieve "Link to this definition")
    
Retrieves the contents of _url_ and places it in _filename_. The return value is a tuple consisting of a local filename and either an [`email.message.Message`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message "email.message.Message") object containing the response headers (for remote URLs) or `None` (for local URLs). The caller must then open and read the contents of _filename_. If _filename_ is not given and the URL refers to a local file, the input filename is returned. If the URL is non-local and _filename_ is not given, the filename is the output of [`tempfile.mktemp()`](https://docs.python.org/3/library/tempfile.html#tempfile.mktemp "tempfile.mktemp") with a suffix that matches the suffix of the last path component of the input URL. If _reporthook_ is given, it must be a function accepting three numeric parameters: A chunk number, the maximum size chunks are read in and the total size of the download (-1 if unknown). It will be called once at the start and after each chunk of data is read from the network. _reporthook_ is ignored for local URLs.
If the _url_ uses the `http:` scheme identifier, the optional _data_ argument may be given to specify a `POST` request (normally the request type is `GET`). The _data_ argument must in standard _application/x-www-form-urlencoded_ format; see the [`urllib.parse.urlencode()`](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlencode "urllib.parse.urlencode") function. 

version[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener.version "Link to this definition")
    
Variable that specifies the user agent of the opener object. To get [`urllib`](https://docs.python.org/3/library/urllib.html#module-urllib "urllib") to tell servers that it is a particular user agent, set this in a subclass as a class variable or in the constructor before calling the base constructor. 

_class_ urllib.request.FancyURLopener(_..._)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.FancyURLopener "Link to this definition")
    
Deprecated since version 3.3.
[`FancyURLopener`](https://docs.python.org/3/library/urllib.request.html#urllib.request.FancyURLopener "urllib.request.FancyURLopener") subclasses [`URLopener`](https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener "urllib.request.URLopener") providing default handling for the following HTTP response codes: 301, 302, 303, 307 and 401. For the 30x response codes listed above, the _Location_ header is used to fetch the actual URL. For 401 response codes (authentication required), basic HTTP authentication is performed. For the 30x response codes, recursion is bounded by the value of the _maxtries_ attribute, which defaults to 10.
For all other response codes, the method [`http_error_default()`](https://docs.python.org/3/library/urllib.request.html#urllib.request.BaseHandler.http_error_default "urllib.request.BaseHandler.http_error_default") is called which you can override in subclasses to handle the error appropriately.
Note
According to the letter of [**RFC 2616**](https://datatracker.ietf.org/doc/html/rfc2616.html), 301 and 302 responses to POST requests must not be automatically redirected without confirmation by the user. In reality, browsers do allow automatic redirection of these responses, changing the POST to a GET, and [`urllib`](https://docs.python.org/3/library/urllib.html#module-urllib "urllib") reproduces this behaviour.
The parameters to the constructor are the same as those for [`URLopener`](https://docs.python.org/3/library/urllib.request.html#urllib.request.URLopener "urllib.request.URLopener").
Note
When performing basic authentication, a [`FancyURLopener`](https://docs.python.org/3/library/urllib.request.html#urllib.request.FancyURLopener "urllib.request.FancyURLopener") instance calls its [`prompt_user_passwd()`](https://docs.python.org/3/library/urllib.request.html#urllib.request.FancyURLopener.prompt_user_passwd "urllib.request.FancyURLopener.prompt_user_passwd") method. The default implementation asks the users for the required information on the controlling terminal. A subclass may override this method to support more appropriate behavior if needed.
The [`FancyURLopener`](https://docs.python.org/3/library/urllib.request.html#urllib.request.FancyURLopener "urllib.request.FancyURLopener") class offers one additional method that should be overloaded to provide the appropriate behavior: