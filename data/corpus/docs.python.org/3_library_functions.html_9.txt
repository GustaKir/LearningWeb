Title: Using the dir() Function
URL: https://docs.python.org/3/library/functions.html
Summary: The dir() function returns a list of names in the current local scope when called without arguments. When provided an object, it attempts to return a list of its valid attributes, utilizing the object's custom __dir__() method if available, or gathers information from the object's __dict__ if not.
---

dir(_object_)
    
Without arguments, return the list of names in the current local scope. With an argument, attempt to return a list of valid attributes for that object.
If the object has a method named [`__dir__()`](https://docs.python.org/3/reference/datamodel.html#object.__dir__ "object.__dir__"), this method will be called and must return the list of attributes. This allows objects that implement a custom [`__getattr__()`](https://docs.python.org/3/reference/datamodel.html#object.__getattr__ "object.__getattr__") or [`__getattribute__()`](https://docs.python.org/3/reference/datamodel.html#object.__getattribute__ "object.__getattribute__") function to customize the way [`dir()`](https://docs.python.org/3/library/functions.html#dir "dir") reports their attributes.
If the object does not provide [`__dir__()`](https://docs.python.org/3/reference/datamodel.html#object.__dir__ "object.__dir__"), the function tries its best to gather information from the object’s [`__dict__`](https://docs.python.org/3/reference/datamodel.html#object.__dict__ "object.__dict__") attribute, if defined, and from its type object. The resulting list is not necessarily complete and may be inaccurate when the object has a custom [`__getattr__()`](https://docs.python.org/3/reference/datamodel.html#object.__getattr__ "object.__getattr__").
The default [`dir()`](https://docs.python.org/3/library/functions.html#dir "dir") mechanism behaves differently with different types of objects, as it attempts to produce the most relevant, rather than complete, information:
  * If the object is a module object, the list contains the names of the module’s attributes.
  * If the object is a type or class object, the list contains the names of its attributes, and recursively of the attributes of its bases.
  * Otherwise, the list contains the object’s attributes’ names, the names of its class’s attributes, and recursively of the attributes of its class’s base classes.


The resulting list is sorted alphabetically. For example:
>>>```
>>> importstruct
>>> dir()  # show the names in the module namespace
['__builtins__', '__name__', 'struct']
>>> dir(struct)  # show the names in the struct module
['Struct', '__all__', '__builtins__', '__cached__', '__doc__', '__file__',
 '__initializing__', '__loader__', '__name__', '__package__',
 '_clearcache', 'calcsize', 'error', 'pack', 'pack_into',
 'unpack', 'unpack_from']
>>> classShape:
...   def__dir__(self):
...     return ['area', 'perimeter', 'location']
...
>>> s = Shape()
>>> dir(s)
['area', 'location', 'perimeter']

```

Note
Because [`dir()`](https://docs.python.org/3/library/functions.html#dir "dir") is supplied primarily as a convenience for use at an interactive prompt, it tries to supply an interesting set of names more than it tries to supply a rigorously or consistently defined set of names, and its detailed behavior may change across releases. For example, metaclass attributes are not in the result list when the argument is a class. 

divmod(_a_ , _b_)[¶](https://docs.python.org/3/library/functions.html#divmod "Link to this definition")
    
Take two (non-complex) numbers as arguments and return a pair of numbers consisting of their quotient and remainder when using integer division. With mixed operand types, the rules for binary arithmetic operators apply. For integers, the result is the same as `(a // b, a % b)`. For floating-point numbers the result is `(q, a % b)`, where _q_ is usually `math.floor(a / b)` but may be 1 less than that. In any case `q * b + a % b` is very close to _a_ , if `a % b` is non-zero it has the same sign as _b_ , and `0 <= abs(a % b) < abs(b)`. 

enumerate(_iterable_ , _start =0_)[¶](https://docs.python.org/3/library/functions.html#enumerate "Link to this definition")
    
Return an enumerate object. _iterable_ must be a sequence, an [iterator](https://docs.python.org/3/glossary.html#term-iterator), or some other object which supports iteration. The [`__next__()`](https://docs.python.org/3/library/stdtypes.html#iterator.__next__ "iterator.__next__") method of the iterator returned by [`enumerate()`](https://docs.python.org/3/library/functions.html#enumerate "enumerate") returns a tuple containing a count (from _start_ which defaults to 0) and the values obtained from iterating over _iterable_.
>>>```
>>> seasons = ['Spring', 'Summer', 'Fall', 'Winter']
>>> list(enumerate(seasons))
[(0, 'Spring'), (1, 'Summer'), (2, 'Fall'), (3, 'Winter')]
>>> list(enumerate(seasons, start=1))
[(1, 'Spring'), (2, 'Summer'), (3, 'Fall'), (4, 'Winter')]

```

Equivalent to:
```
defenumerate(iterable, start=0):
  n = start
  for elem in iterable:
    yield n, elem
    n += 1