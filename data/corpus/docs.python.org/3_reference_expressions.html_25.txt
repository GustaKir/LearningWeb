Title: Lambda Expressions in Python
URL: https://docs.python.org/3/reference/expressions.html
Summary: Lambda expressions create anonymous functions using the syntax 'lambda parameters: expression'. Unlike defined functions, lambda functions cannot contain statements or annotations. The document section also briefly outlines expression lists and includes grammar syntax for expressions.
---

```

Lambda expressions (sometimes called lambda forms) are used to create anonymous functions. The expression `lambda parameters: expression` yields a function object. The unnamed object behaves like a function object defined with:
```
def <lambda>(parameters):
  return expression

```

See section [Function definitions](https://docs.python.org/3/reference/compound_stmts.html#function) for the syntax of parameter lists. Note that functions created with lambda expressions cannot contain statements or annotations.
## 6.15. Expression lists[¶](https://docs.python.org/3/reference/expressions.html#expression-lists "Link to this heading")
```
**starred_expression**    ::= ["*"] [or_expr](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-or_expr)
**flexible_expression**   ::= [assignment_expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-assignment_expression) | [starred_expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-starred_expression)
**flexible_expression_list** ::= [flexible_expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-flexible_expression) ("," [flexible_expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-flexible_expression))* [","]
**starred_expression_list** ::= [starred_expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-starred_expression) ("," [starred_expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-starred_expression))* [","]
**expression_list**     ::= [expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-expression) ("," [expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-expression))* [","]
**yield_list**        ::= [expression_list](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-expression_list) | [starred_expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-starred_expression) "," [[starred_expression_list](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-starred_expression_list)]

```

Except when part of a list or set display, an expression list containing at least one comma yields a tuple. The length of the tuple is the number of expressions in the list. The expressions are evaluated from left to right.
An asterisk `*` denotes _iterable unpacking_. Its operand must be an [iterable](https://docs.python.org/3/glossary.html#term-iterable). The iterable is expanded into a sequence of items, which are included in the new tuple, list, or set, at the site of the unpacking.
Added in version 3.5: Iterable unpacking in expression lists, originally proposed by [**PEP 448**](https://peps.python.org/pep-0448/).
Added in version 3.11: Any item in an expression list may be starred. See [**PEP 646**](https://peps.python.org/pep-0646/).
A trailing comma is required only to create a one-item tuple, such as `1,`; it is optional in all other cases. A single expression without a trailing comma doesn’t create a tuple, but rather yields the value of that expression. (To create an empty tuple, use an empty pair of parentheses: `()`.)
## 6.16. Evaluation order[¶](https://docs.python.org/3/reference/expressions.html#evaluation-order "Link to this heading")
Python evaluates expressions from left to right. Notice that while evaluating an assignment, the right-hand side is evaluated before the left-hand side.
In the following lines, expressions will be evaluated in the arithmetic order of their suffixes:
```
expr1, expr2, expr3, expr4
(expr1, expr2, expr3, expr4)
{expr1: expr2, expr3: expr4}
expr1 + expr2 * (expr3 - expr4)
expr1(expr2, expr3, *expr4, **expr5)
expr3, expr4 = expr1, expr2