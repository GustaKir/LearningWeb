Title: Data Stream Format in Pickle
URL: https://docs.python.org/3/library/pickle.html
Summary: The `pickle` module uses a Python-specific data format for serialization, offering advantages like no external standard restrictions but limiting interoperability with non-Python programs. The default binary representation is relatively compact, providing efficient storage for pickled objects.
---

See also
The [`json`](https://docs.python.org/3/library/json.html#module-json "json: Encode and decode the JSON format.") module: a standard library module allowing JSON serialization and deserialization.
## Data stream format[¶](https://docs.python.org/3/library/pickle.html#data-stream-format "Link to this heading")
The data format used by [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "pickle: Convert Python objects to streams of bytes and back.") is Python-specific. This has the advantage that there are no restrictions imposed by external standards such as JSON (which can’t represent pointer sharing); however it means that non-Python programs may not be able to reconstruct pickled Python objects.
By default, the [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "pickle: Convert Python objects to streams of bytes and back.") data format uses a relatively compact binary representation. If you need optimal size characteristics, you can efficiently [compress](https://docs.python.org/3/library/archiving.html) pickled data.
The module [`pickletools`](https://docs.python.org/3/library/pickletools.html#module-pickletools "pickletools: Contains extensive comments about the pickle protocols and pickle-machine opcodes, as well as some useful functions.") contains tools for analyzing data streams generated by [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "pickle: Convert Python objects to streams of bytes and back."). [`pickletools`](https://docs.python.org/3/library/pickletools.html#module-pickletools "pickletools: Contains extensive comments about the pickle protocols and pickle-machine opcodes, as well as some useful functions.") source code has extensive comments about opcodes used by pickle protocols.
There are currently 6 different protocols which can be used for pickling. The higher the protocol used, the more recent the version of Python needed to read the pickle produced.
  * Protocol version 0 is the original “human-readable” protocol and is backwards compatible with earlier versions of Python.
  * Protocol version 1 is an old binary format which is also compatible with earlier versions of Python.
  * Protocol version 2 was introduced in Python 2.3. It provides much more efficient pickling of [new-style classes](https://docs.python.org/3/glossary.html#term-new-style-class). Refer to [**PEP 307**](https://peps.python.org/pep-0307/) for information about improvements brought by protocol 2.
  * Protocol version 3 was added in Python 3.0. It has explicit support for [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") objects and cannot be unpickled by Python 2.x. This was the default protocol in Python 3.0–3.7.
  * Protocol version 4 was added in Python 3.4. It adds support for very large objects, pickling more kinds of objects, and some data format optimizations. It is the default protocol starting with Python 3.8. Refer to [**PEP 3154**](https://peps.python.org/pep-3154/) for information about improvements brought by protocol 4.
  * Protocol version 5 was added in Python 3.8. It adds support for out-of-band data and speedup for in-band data. Refer to [**PEP 574**](https://peps.python.org/pep-0574/) for information about improvements brought by protocol 5.