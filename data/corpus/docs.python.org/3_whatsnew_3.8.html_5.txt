Title: Python 3.8 Updates: Runtime State and Vectorcall Protocol
URL: https://docs.python.org/3/whatsnew/3.8.html
Summary: This section discusses the addition of `_PyRuntimeState.preconfig` and `PyInterpreterState.config` fields to Python's internal structures, which enhance the configuration process by replacing global variables. It also introduces PEP 590, which presents the Vectorcall protocol aimed at optimizing function calls in CPython.
---

This PEP also adds `_PyRuntimeState.preconfig` ([`PyPreConfig`](https://docs.python.org/3/c-api/init_config.html#c.PyPreConfig "PyPreConfig") type) and `PyInterpreterState.config` ([`PyConfig`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig "PyConfig") type) fields to these internal structures. `PyInterpreterState.config` becomes the new reference configuration, replacing global configuration variables and other private variables.
See [Python Initialization Configuration](https://docs.python.org/3/c-api/init_config.html#init-config) for the documentation.
See [**PEP 587**](https://peps.python.org/pep-0587/) for a full description.
(Contributed by Victor Stinner in [bpo-36763](https://bugs.python.org/issue?@action=redirect&bpo=36763).)
### PEP 590: Vectorcall: a fast calling protocol for CPython[¶](https://docs.python.org/3/whatsnew/3.8.html#pep-590-vectorcall-a-fast-calling-protocol-for-cpython "Link to this heading")
[The Vectorcall Protocol](https://docs.python.org/3/c-api/call.html#vectorcall) is added to the Python/C API. It is meant to formalize existing optimizations which were already done for various classes. Any [static type](https://docs.python.org/3/c-api/typeobj.html#static-types) implementing a callable can use this protocol.
This is currently provisional. The aim is to make it fully public in Python 3.9.
See [**PEP 590**](https://peps.python.org/pep-0590/) for a full description.
(Contributed by Jeroen Demeyer, Mark Shannon and Petr Viktorin in [bpo-36974](https://bugs.python.org/issue?@action=redirect&bpo=36974).)
### Pickle protocol 5 with out-of-band data buffers[¶](https://docs.python.org/3/whatsnew/3.8.html#pickle-protocol-5-with-out-of-band-data-buffers "Link to this heading")
When [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "pickle: Convert Python objects to streams of bytes and back.") is used to transfer large data between Python processes in order to take advantage of multi-core or multi-machine processing, it is important to optimize the transfer by reducing memory copies, and possibly by applying custom techniques such as data-dependent compression.
The [`pickle`](https://docs.python.org/3/library/pickle.html#module-pickle "pickle: Convert Python objects to streams of bytes and back.") protocol 5 introduces support for out-of-band buffers where [**PEP 3118**](https://peps.python.org/pep-3118/)-compatible data can be transmitted separately from the main pickle stream, at the discretion of the communication layer.
See [**PEP 574**](https://peps.python.org/pep-0574/) for a full description.
(Contributed by Antoine Pitrou in [bpo-36785](https://bugs.python.org/issue?@action=redirect&bpo=36785).)
## Other Language Changes[¶](https://docs.python.org/3/whatsnew/3.8.html#other-language-changes "Link to this heading")
  * A [`continue`](https://docs.python.org/3/reference/simple_stmts.html#continue) statement was illegal in the [`finally`](https://docs.python.org/3/reference/compound_stmts.html#finally) clause due to a problem with the implementation. In Python 3.8 this restriction was lifted. (Contributed by Serhiy Storchaka in [bpo-32489](https://bugs.python.org/issue?@action=redirect&bpo=32489).)
  * The [`bool`](https://docs.python.org/3/library/functions.html#bool "bool"), [`int`](https://docs.python.org/3/library/functions.html#int "int"), and [`fractions.Fraction`](https://docs.python.org/3/library/fractions.html#fractions.Fraction "fractions.Fraction") types now have an [`as_integer_ratio()`](https://docs.python.org/3/library/stdtypes.html#int.as_integer_ratio "int.as_integer_ratio") method like that found in [`float`](https://docs.python.org/3/library/functions.html#float "float") and [`decimal.Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal"). This minor API extension makes it possible to write `numerator, denominator = x.as_integer_ratio()` and have it work across multiple numeric types. (Contributed by Lisa Roach in [bpo-33073](https://bugs.python.org/issue?@action=redirect&bpo=33073) and Raymond Hettinger in [bpo-37819](https://bugs.python.org/issue?@action=redirect&bpo=37819).)
  * Constructors of [`int`](https://docs.python.org/3/library/functions.html#int "int"), [`float`](https://docs.python.org/3/library/functions.html#float "float") and [`complex`](https://docs.python.org/3/library/functions.html#complex "complex") will now use the [`__index__()`](https://docs.python.org/3/reference/datamodel.html#object.__index__ "object.__index__") special method, if available and the corresponding method [`__int__()`](https://docs.python.org/3/reference/datamodel.html#object.__int__ "object.__int__"), [`__float__()`](https://docs.python.org/3/reference/datamodel.html#object.__float__ "object.__float__") or [`__complex__()`](https://docs.python.org/3/reference/datamodel.html#object.__complex__ "object.__complex__") is not available. (Contributed by Serhiy Storchaka in [bpo-20092](https://bugs.python.org/