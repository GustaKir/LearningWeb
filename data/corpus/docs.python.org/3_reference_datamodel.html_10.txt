Title: Asynchronous Generator Functions in Python
URL: https://docs.python.org/3/reference/datamodel.html
Summary: This section discusses asynchronous generator functions, which are defined using 'async def' and utilize the 'yield' statement. These functions return asynchronous iterators and may include 'await', 'async with', and 'async for' constructs.
---

ed, returns a [coroutine](https://docs.python.org/3/glossary.html#term-coroutine) object. It may contain [`await`](https://docs.python.org/3/reference/expressions.html#await) expressions, as well as [`async with`](https://docs.python.org/3/reference/compound_stmts.html#async-with) and [`async for`](https://docs.python.org/3/reference/compound_stmts.html#async-for) statements. See also the [Coroutine Objects](https://docs.python.org/3/reference/datamodel.html#coroutine-objects) section.
#### 3.2.8.5. Asynchronous generator functions[¶](https://docs.python.org/3/reference/datamodel.html#asynchronous-generator-functions "Link to this heading")
A function or method which is defined using [`async def`](https://docs.python.org/3/reference/compound_stmts.html#async-def) and which uses the [`yield`](https://docs.python.org/3/reference/simple_stmts.html#yield) statement is called a _asynchronous generator function_. Such a function, when called, returns an [asynchronous iterator](https://docs.python.org/3/glossary.html#term-asynchronous-iterator) object which can be used in an [`async for`](https://docs.python.org/3/reference/compound_stmts.html#async-for) statement to execute the body of the function.
Calling the asynchronous iterator’s [`aiterator.__anext__`](https://docs.python.org/3/reference/datamodel.html#object.__anext__ "object.__anext__") method will return an [awaitable](https://docs.python.org/3/glossary.html#term-awaitable) which when awaited will execute until it provides a value using the [`yield`](https://docs.python.org/3/reference/simple_stmts.html#yield) expression. When the function executes an empty [`return`](https://docs.python.org/3/reference/simple_stmts.html#return) statement or falls off the end, a [`StopAsyncIteration`](https://docs.python.org/3/library/exceptions.html#StopAsyncIteration "StopAsyncIteration") exception is raised and the asynchronous iterator will have reached the end of the set of values to be yielded.
#### 3.2.8.6. Built-in functions[¶](https://docs.python.org/3/reference/datamodel.html#built-in-functions "Link to this heading")
A built-in function object is a wrapper around a C function. Examples of built-in functions are [`len()`](https://docs.python.org/3/library/functions.html#len "len") and [`math.sin()`](https://docs.python.org/3/library/math.html#math.sin "math.sin") ([`math`](https://docs.python.org/3/library/math.html#module-math "math: Mathematical functions \(sin\(\) etc.\).") is a standard built-in module). The number and type of the arguments are determined by the C function. Special read-only attributes:
  * `__doc__` is the function’s documentation string, or `None` if unavailable. See [`function.__doc__`](https://docs.python.org/3/reference/datamodel.html#function.__doc__ "function.__doc__").
  * `__name__` is the function’s name. See [`function.__name__`](https://docs.python.org/3/reference/datamodel.html#function.__name__ "function.__name__").
  * `__self__` is set to `None` (but see the next item).
  * `__module__` is the name of the module the function was defined in or `None` if unavailable. See [`function.__module__`](https://docs.python.org/3/reference/datamodel.html#function.__module__ "function.__module__").