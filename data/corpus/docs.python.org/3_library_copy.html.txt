Title: Copy Module Documentation
URL: https://docs.python.org/3/library/copy.html
Summary: This page serves as documentation for the Python 'copy' module, which provides functions to create shallow or deep copies of objects. It includes navigation links to previous and next topics in the Python library, as well as options for reporting bugs and viewing source code.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
#### Previous topic
[`types` — Dynamic type creation and names for built-in types](https://docs.python.org/3/library/types.html "previous chapter")
#### Next topic
[`pprint` — Data pretty printer](https://docs.python.org/3/library/pprint.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/copy.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/pprint.html "pprint — Data pretty printer") |
  * [previous](https://docs.python.org/3/library/types.html "types — Dynamic type creation and names for built-in types") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Data Types](https://docs.python.org/3/library/datatypes.html) »
  * [`copy` — Shallow and deep copy operations](https://docs.python.org/3/library/copy.html)
  * | 
  * Theme  Auto Light Dark |


# `copy` — Shallow and deep copy operations[¶](https://docs.python.org/3/library/copy.html#module-copy "Link to this heading")
**Source code:** [Lib/copy.py](https://github.com/python/cpython/tree/3.13/Lib/copy.py)
Assignment statements in Python do not copy objects, they create bindings between a target and an object. For collections that are mutable or contain mutable items, a copy is sometimes needed so one can change one copy without changing the other. This module provides generic shallow and deep copy operations (explained below).
Interface summary: 

copy.copy(_obj_)[¶](https://docs.python.org/3/library/copy.html#copy.copy "Link to this definition")
    
Return a shallow copy of _obj_. 

copy.deepcopy(_obj_[, _memo_])[¶](https://docs.python.org/3/library/copy.html#copy.deepcopy "Link to this definition")
    
Return a deep copy of _obj_. 

copy.replace(_obj_ , _/_ , _** changes_)[¶](https://docs.python.org/3/library/copy.html#copy.replace "Link to this definition")
    
Creates a new object of the same type as _obj_ , replacing fields with values from _changes_.
Added in version 3.13. 

_exception_ copy.Error[¶](https://docs.python.org/3/library/copy.html#copy.Error "Link to this definition")
    
Raised for module specific errors.
The difference between shallow and deep copying is only relevant for compound objects (objects that contain other objects, like lists or class instances):
  * A _shallow copy_ constructs a new compound object and then (to the extent possible) inserts _references_ into it to the objects found in the original.
  * A _deep copy_ constructs a new compound object and then, recursively, inserts _copies_ into it of the objects found in the original.


Two problems often exist with deep copy operations that don’t exist with shallow copy operations:
  * Recursive objects (compound objects that, directly or indirectly, contain a reference to themselves) may cause a recursive loop.
  * Because deep copy copies everything it may copy too much, such as data which is intended to be shared between copies.


The [`deepcopy()`](https://docs.python.org/3/library/copy.html#copy.deepcopy "copy.deepcopy") function avoids these problems by:
  * keeping a `memo` dictionary of objects already copied during the current copying pass; and
  * letting user-defined classes override the copying operation or the set of components copied.