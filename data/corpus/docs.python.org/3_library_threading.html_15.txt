Title: Event Objects in Threading
URL: https://docs.python.org/3/library/threading.html
Summary: Event objects are a simple mechanism for thread communication, allowing one thread to signal an event that other threads can wait for. They manage an internal flag that can be set or cleared, with methods to set the flag (`set()`), clear it (`clear()`), and block until the flag is true (`wait()`). This helps coordinate actions between threads.
---

```

The use of a bounded semaphore reduces the chance that a programming error which causes the semaphore to be released more than it’s acquired will go undetected.
## Event Objects[¶](https://docs.python.org/3/library/threading.html#event-objects "Link to this heading")
This is one of the simplest mechanisms for communication between threads: one thread signals an event and other threads wait for it.
An event object manages an internal flag that can be set to true with the [`set()`](https://docs.python.org/3/library/threading.html#threading.Event.set "threading.Event.set") method and reset to false with the [`clear()`](https://docs.python.org/3/library/threading.html#threading.Event.clear "threading.Event.clear") method. The [`wait()`](https://docs.python.org/3/library/threading.html#threading.Event.wait "threading.Event.wait") method blocks until the flag is true. 

_class_ threading.Event[¶](https://docs.python.org/3/library/threading.html#threading.Event "Link to this definition")
    
Class implementing event objects. An event manages a flag that can be set to true with the [`set()`](https://docs.python.org/3/library/threading.html#threading.Event.set "threading.Event.set") method and reset to false with the [`clear()`](https://docs.python.org/3/library/threading.html#threading.Event.clear "threading.Event.clear") method. The [`wait()`](https://docs.python.org/3/library/threading.html#threading.Event.wait "threading.Event.wait") method blocks until the flag is true. The flag is initially false.
Changed in version 3.3: changed from a factory function to a class. 

is_set()[¶](https://docs.python.org/3/library/threading.html#threading.Event.is_set "Link to this definition")
    
Return `True` if and only if the internal flag is true.
The method `isSet` is a deprecated alias for this method. 

set()[¶](https://docs.python.org/3/library/threading.html#threading.Event.set "Link to this definition")
    
Set the internal flag to true. All threads waiting for it to become true are awakened. Threads that call [`wait()`](https://docs.python.org/3/library/threading.html#threading.Event.wait "threading.Event.wait") once the flag is true will not block at all. 

clear()[¶](https://docs.python.org/3/library/threading.html#threading.Event.clear "Link to this definition")
    
Reset the internal flag to false. Subsequently, threads calling [`wait()`](https://docs.python.org/3/library/threading.html#threading.Event.wait "threading.Event.wait") will block until [`set()`](https://docs.python.org/3/library/threading.html#threading.Event.set "threading.Event.set") is called to set the internal flag to true again. 

wait(_timeout =None_)[¶](https://docs.python.org/3/library/threading.html#threading.Event.wait "Link to this definition")
    
Block as long as the internal flag is false and the timeout, if given, has not expired. The return value represents the reason that this blocking method returned; `True` if returning because the internal flag is set to true, or `False` if a timeout is given and the internal flag did not become true within the given wait time.
When the timeout argument is present and not `None`, it should be a floating-point number specifying a timeout for the operation in seconds, or fractions thereof.
Changed in version 3.1: Previously, the method always returned `None`.
## Timer Objects[¶](https://docs.python.org/3/library/threading.html#timer-objects "Link to this heading")
This class represents an action that should be run only after a certain amount of time has passed — a timer. [`Timer`](https://docs.python.org/3/library/threading.html#threading.Timer "threading.Timer") is a subclass of [`Thread`](https://docs.python.org/3/library/threading.html#threading.Thread "threading.Thread") and as such also functions as an example of creating custom threads.
Timers are started, as with threads, by calling their [`Timer.start`](https://docs.python.org/3/library/threading.html#threading.Thread.start "threading.Thread.start") method. The timer can be stopped (before its action has begun) by calling the [`cancel()`](https://docs.python.org/3/library/threading.html#threading.Timer.cancel "threading.Timer.cancel") method. The interval the timer will wait before executing its action may not be exactly the same as the interval specified by the user.
For example:
```
defhello():
  print("hello, world")
t = Timer(30.0, hello)
t.start() # after 30 seconds, "hello, world" will be printed