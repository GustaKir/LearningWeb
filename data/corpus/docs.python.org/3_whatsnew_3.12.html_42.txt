Title: Enhancements in Python 3.12: Memory Optimization and New API Features
URL: https://docs.python.org/3/whatsnew/3.12.html
Summary: Python 3.12 introduces improvements in memory usage and speed for `__dict__` and weak references, alongside the addition of vector call protocol APIs to the Limited API, enhancing both incoming and outgoing ends of the protocol.
---

rt object [`__dict__`](https://docs.python.org/3/reference/datamodel.html#object.__dict__ "object.__dict__") and weakrefs with less bookkeeping, using less memory and with faster access.
  * API for performing calls using [the vectorcall protocol](https://docs.python.org/3/c-api/call.html#vectorcall) was added to the [Limited API](https://docs.python.org/3/c-api/stable.html#stable):
    * [`PyObject_Vectorcall()`](https://docs.python.org/3/c-api/call.html#c.PyObject_Vectorcall "PyObject_Vectorcall")
    * [`PyObject_VectorcallMethod()`](https://docs.python.org/3/c-api/call.html#c.PyObject_VectorcallMethod "PyObject_VectorcallMethod")
    * [`PY_VECTORCALL_ARGUMENTS_OFFSET`](https://docs.python.org/3/c-api/call.html#c.PY_VECTORCALL_ARGUMENTS_OFFSET "PY_VECTORCALL_ARGUMENTS_OFFSET")
This means that both the incoming and outgoing ends of the vector call protocol are now available in the [Limited API](https://docs.python.org/3/c-api/stable.html#stable). (Contributed by Wenzel Jakob in [gh-98586](https://github.com/python/cpython/issues/98586).)
  * Add two new public functions, [`PyEval_SetProfileAllThreads()`](https://docs.python.org/3/c-api/init.html#c.PyEval_SetProfileAllThreads "PyEval_SetProfileAllThreads") and [`PyEval_SetTraceAllThreads()`](https://docs.python.org/3/c-api/init.html#c.PyEval_SetTraceAllThreads "PyEval_SetTraceAllThreads"), that allow to set tracing and profiling functions in all running threads in addition to the calling one. (Contributed by Pablo Galindo in [gh-93503](https://github.com/python/cpython/issues/93503).)
  * Add new function [`PyFunction_SetVectorcall()`](https://docs.python.org/3/c-api/function.html#c.PyFunction_SetVectorcall "PyFunction_SetVectorcall") to the C API which sets the vectorcall field of a given [`PyFunctionObject`](https://docs.python.org/3/c-api/function.html#c.PyFunctionObject "PyFunctionObject"). (Contributed by Andrew Frost in [gh-92257](https://github.com/python/cpython/issues/92257).)
  * The C API now permits registering callbacks via [`PyDict_AddWatcher()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_AddWatcher "PyDict_AddWatcher"), [`PyDict_Watch()`](https://docs.python.org/3/c-api/dict.html#c.PyDict_Watch "PyDict_Watch") and related APIs to be called whenever a dictionary is modified. This is intended for use by optimizing interpreters, JIT compilers, or debuggers. (Contributed by Carl Meyer in [gh-91052](https://github.com/python/cpython/issues/91052).)
  * Add [`PyType_AddWatcher()`](https://docs.python.org/3/c-api/type.html#c.PyType_AddWatcher "PyType_AddWatcher") and [`PyType_Watch()`](https://docs.python.org/3/c-api/type.html#c.PyType_Watch "PyType_Watch") API to register callbacks to receive notification on changes to a type. (Contributed by Carl Meyer in [gh-91051](https://github.com/python/cpython/issues/91051).)
  * Add [`PyCode_AddWatcher()`](https://docs.python.org/3/c-api/code.html#c.PyCode_AddWatcher "PyCode_AddWatcher") and [`PyCode_ClearWatcher()`](https://docs.python.org/3/c-api/code.html#c.PyCode_ClearWatcher "PyCode_ClearWatcher") APIs to register callbacks to receive notification on creation and destruction of code objects. (Contributed by Itamar Oren in [gh-91054](https://github.com/python/cpython/issues/91054).)
  * Add [`PyFrame_GetVar()`](https://docs.python.org/3/c-api/frame.html#c.PyFrame_GetVar "PyFrame_GetVar") and [`PyFrame_GetVarString()`](https://docs.python.org/3/c-api/frame.html#c.PyFrame_GetVarString "PyFrame_GetVarString") functions to get a frame variable by its name. (Contributed by Victor Stinner in [gh-91248](https://github.com/python/cpython/issues/91248).)
  * Add [`PyErr_GetRaisedException()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_GetRaisedException "PyErr_GetRaisedException") and [`PyErr_SetRaisedException()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_SetRaisedException "PyErr_SetRaisedException") for saving and restoring the current exception. These functions return and accept a single exception object, rather than the triple arguments of the now-deprecated [`PyErr_Fetch()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_Fetch "PyErr_Fetch") and [`PyErr_Restore()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_Restore "PyErr_Restore"). This is less error prone and a bit more efficient. (Contributed by Mark Shannon in [gh-101578](https://github.com/python/cpython/issues/101578).)
  * Add `_PyErr_ChainExceptions1`, which takes an exception instance, to replace the legacy-API `_PyErr_ChainExceptions`, which is now deprecated.