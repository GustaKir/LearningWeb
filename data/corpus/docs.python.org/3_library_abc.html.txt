Title: Abstract Base Classes in Python
URL: https://docs.python.org/3/library/abc.html
Summary: This documentation provides information about the 'abc' module in Python, which allows for the creation of Abstract Base Classes (ABCs). ABCs are a mechanism for defining interfaces, enabling the enforcement of methods in subclasses. It includes navigation links to previous and next topics in the Python documentation.
---

[ ![Python logo](https://docs.python.org/3/_static/py.svg) ](https://www.python.org/) dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
Theme  Auto Light Dark
#### Previous topic
[`contextlib` — Utilities for `with`-statement contexts](https://docs.python.org/3/library/contextlib.html "previous chapter")
#### Next topic
[`atexit` — Exit handlers](https://docs.python.org/3/library/atexit.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/abc.rst)


### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/library/atexit.html "atexit — Exit handlers") |
  * [previous](https://docs.python.org/3/library/contextlib.html "contextlib — Utilities for with-statement contexts") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [The Python Standard Library](https://docs.python.org/3/library/index.html) »
  * [Python Runtime Services](https://docs.python.org/3/library/python.html) »
  * [`abc` — Abstract Base Classes](https://docs.python.org/3/library/abc.html)
  * | 
  * Theme  Auto Light Dark |


# `abc` — Abstract Base Classes[¶](https://docs.python.org/3/library/abc.html#module-abc "Link to this heading")
**Source code:** [Lib/abc.py](https://github.com/python/cpython/tree/3.13/Lib/abc.py)
This module provides the infrastructure for defining [abstract base classes](https://docs.python.org/3/glossary.html#term-abstract-base-class) (ABCs) in Python, as outlined in [**PEP 3119**](https://peps.python.org/pep-3119/); see the PEP for why this was added to Python. (See also [**PEP 3141**](https://peps.python.org/pep-3141/) and the [`numbers`](https://docs.python.org/3/library/numbers.html#module-numbers "numbers: Numeric abstract base classes \(Complex, Real, Integral, etc.\).") module regarding a type hierarchy for numbers based on ABCs.)
The [`collections`](https://docs.python.org/3/library/collections.html#module-collections "collections: Container datatypes") module has some concrete classes that derive from ABCs; these can, of course, be further derived. In addition, the [`collections.abc`](https://docs.python.org/3/library/collections.abc.html#module-collections.abc "collections.abc: Abstract base classes for containers") submodule has some ABCs that can be used to test whether a class or instance provides a particular interface, for example, if it is [hashable](https://docs.python.org/3/glossary.html#term-hashable) or if it is a [mapping](https://docs.python.org/3/glossary.html#term-mapping).
This module provides the metaclass [`ABCMeta`](https://docs.python.org/3/library/abc.html#abc.ABCMeta "abc.ABCMeta") for defining ABCs and a helper class [`ABC`](https://docs.python.org/3/library/abc.html#abc.ABC "abc.ABC") to alternatively define ABCs through inheritance: 

_class_ abc.ABC[¶](https://docs.python.org/3/library/abc.html#abc.ABC "Link to this definition")
    
A helper class that has [`ABCMeta`](https://docs.python.org/3/library/abc.html#abc.ABCMeta "abc.ABCMeta") as its metaclass. With this class, an abstract base class can be created by simply deriving from `ABC` avoiding sometimes confusing metaclass usage, for example:
```
fromabcimport ABC
classMyABC(ABC):
  pass

```

Note that the type of `ABC` is still [`ABCMeta`](https://docs.python.org/3/library/abc.html#abc.ABCMeta "abc.ABCMeta"), therefore inheriting from `ABC` requires the usual precautions regarding metaclass usage, as multiple inheritance may lead to metaclass conflicts. One may also define an abstract base class by passing the metaclass keyword and using `ABCMeta` directly, for example:
```
fromabcimport ABCMeta
classMyABC(metaclass=ABCMeta):
  pass