Title: Bdb Module Debugging Functions
URL: https://docs.python.org/3/library/bdb.html
Summary: This section describes key debugging functions in the Bdb module, including `run()` for executing and debugging statements, `runeval()` for debugging expressions, and `runctx()` for backward compatibility. The `_globals_` and `_locals_` parameters are explained, with defaults referenced to `__main__.__dict__`.
---

run(_cmd_ , _globals =None_, _locals =None_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.run "Link to this definition")
    
Debug a statement executed via the [`exec()`](https://docs.python.org/3/library/functions.html#exec "exec") function. _globals_ defaults to `__main__.__dict__`, _locals_ defaults to _globals_. 

runeval(_expr_ , _globals =None_, _locals =None_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.runeval "Link to this definition")
    
Debug an expression executed via the [`eval()`](https://docs.python.org/3/library/functions.html#eval "eval") function. _globals_ and _locals_ have the same meaning as in [`run()`](https://docs.python.org/3/library/bdb.html#bdb.Bdb.run "bdb.Bdb.run"). 

runctx(_cmd_ , _globals_ , _locals_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.runctx "Link to this definition")
    
For backwards compatibility. Calls the [`run()`](https://docs.python.org/3/library/bdb.html#bdb.Bdb.run "bdb.Bdb.run") method. 

runcall(_func_ , _/_ , _* args_, _** kwds_)[¶](https://docs.python.org/3/library/bdb.html#bdb.Bdb.runcall "Link to this definition")
    
Debug a single function call, and return its result.
Finally, the module defines the following functions: 

bdb.checkfuncname(_b_ , _frame_)[¶](https://docs.python.org/3/library/bdb.html#bdb.checkfuncname "Link to this definition")
    
Return `True` if we should break here, depending on the way the [`Breakpoint`](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint "bdb.Breakpoint") _b_ was set.
If it was set via line number, it checks if [`b.line`](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint.line "bdb.Breakpoint.line") is the same as the one in _frame_. If the breakpoint was set via [`function name`](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint.funcname "bdb.Breakpoint.funcname"), we have to check we are in the right _frame_ (the right function) and if we are on its first executable line. 

bdb.effective(_file_ , _line_ , _frame_)[¶](https://docs.python.org/3/library/bdb.html#bdb.effective "Link to this definition")
    
Return `(active breakpoint, delete temporary flag)` or `(None, None)` as the breakpoint to act upon.
The _active breakpoint_ is the first entry in [`bplist`](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint.bplist "bdb.Breakpoint.bplist") for the ([`file`](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint.file "bdb.Breakpoint.file"), [`line`](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint.line "bdb.Breakpoint.line")) (which must exist) that is [`enabled`](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint.enabled "bdb.Breakpoint.enabled"), for which [`checkfuncname()`](https://docs.python.org/3/library/bdb.html#bdb.checkfuncname "bdb.checkfuncname") is true, and that has neither a false [`condition`](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint.cond "bdb.Breakpoint.cond") nor positive [`ignore`](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint.ignore "bdb.Breakpoint.ignore") count. The _flag_ , meaning that a temporary breakpoint should be deleted, is `False` only when the [`cond`](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint.cond "bdb.Breakpoint.cond") cannot be evaluated (in which case, [`ignore`](https://docs.python.org/3/library/bdb.html#bdb.Breakpoint.ignore "bdb.Breakpoint.ignore") count is ignored).
If no such entry exists, then `(None, None)` is returned. 

bdb.set_trace()[¶](https://docs.python.org/3/library/bdb.html#bdb.set_trace "Link to this definition")
    
Start debugging with a [`Bdb`](https://docs.python.org/3/library/bdb.html#bdb.Bdb "bdb.Bdb") instance from caller’s frame.
#### Previous topic
[Audit events table](https://docs.python.org/3/library/audit_events.html "previous chapter")
#### Next topic
[`faulthandler` — Dump the Python traceback](https://docs.python.org/3/library/faulthandler.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/bdb.rst)