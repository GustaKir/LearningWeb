Title: Deploying Web Applications with Gunicorn and uWSGI
URL: https://docs.python.org/3/howto/logging-cookbook.html
Summary: This section highlights the importance of using `SocketHandler` for logging in web applications deployed with Gunicorn or uWSGI. It advises against direct file-based logging due to the creation of multiple worker processes and recommends setting up a socket listener in a separate process using tools like Supervisor.
---

```

### Deploying Web applications using Gunicorn and uWSGI[¶](https://docs.python.org/3/howto/logging-cookbook.html#deploying-web-applications-using-gunicorn-and-uwsgi "Link to this heading")
When deploying Web applications using [Gunicorn](https://gunicorn.org/) or [uWSGI](https://uwsgi-docs.readthedocs.io/en/latest/) (or similar), multiple worker processes are created to handle client requests. In such environments, avoid creating file-based handlers directly in your web application. Instead, use a [`SocketHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.SocketHandler "logging.handlers.SocketHandler") to log from the web application to a listener in a separate process. This can be set up using a process management tool such as Supervisor - see [Running a logging socket listener in production](https://docs.python.org/3/howto/logging-cookbook.html#running-a-logging-socket-listener-in-production) for more details.
## Using file rotation[¶](https://docs.python.org/3/howto/logging-cookbook.html#using-file-rotation "Link to this heading")
Sometimes you want to let a log file grow to a certain size, then open a new file and log to that. You may want to keep a certain number of these files, and when that many files have been created, rotate the files so that the number of files and the size of the files both remain bounded. For this usage pattern, the logging package provides a [`RotatingFileHandler`](https://docs.python.org/3/library/logging.handlers.html#logging.handlers.RotatingFileHandler "logging.handlers.RotatingFileHandler"):
```
importglob
importlogging
importlogging.handlers
LOG_FILENAME = 'logging_rotatingfile_example.out'
# Set up a specific logger with our desired output level
my_logger = logging.getLogger('MyLogger')
my_logger.setLevel(logging.DEBUG)
# Add the log message handler to the logger
handler = logging.handlers.RotatingFileHandler(
       LOG_FILENAME, maxBytes=20, backupCount=5)
my_logger.addHandler(handler)
# Log some messages
for i in range(20):
  my_logger.debug('i = %d' % i)
# See what files are created
logfiles = glob.glob('%s*' % LOG_FILENAME)
for filename in logfiles:
  print(filename)

```

The result should be 6 separate files, each with part of the log history for the application:
```
logging_rotatingfile_example.out
logging_rotatingfile_example.out.1
logging_rotatingfile_example.out.2
logging_rotatingfile_example.out.3
logging_rotatingfile_example.out.4
logging_rotatingfile_example.out.5

```

The most current file is always `logging_rotatingfile_example.out`, and each time it reaches the size limit it is renamed with the suffix `.1`. Each of the existing backup files is renamed to increment the suffix (`.1` becomes `.2`, etc.) and the `.6` file is erased.
Obviously this example sets the log length much too small as an extreme example. You would want to set _maxBytes_ to an appropriate value.
## Use of alternative formatting styles[¶](https://docs.python.org/3/howto/logging-cookbook.html#use-of-alternative-formatting-styles "Link to this heading")
When logging was added to the Python standard library, the only way of formatting messages with variable content was to use the %-formatting method. Since then, Python has gained two new formatting approaches: [`string.Template`](https://docs.python.org/3/library/string.html#string.Template "string.Template") (added in Python 2.4) and [`str.format()`](https://docs.python.org/3/library/stdtypes.html#str.format "str.format") (added in Python 2.6).
Logging (as of 3.2) provides improved support for these two additional formatting styles. The [`Formatter`](https://docs.python.org/3/library/logging.html#logging.Formatter "logging.Formatter") class been enhanced to take an additional, optional keyword parameter named `style`. This defaults to `'%'`, but other possible values are `'{'` and `'$'`, which correspond to the other two formatting styles. Backwards compatibility is maintained by default (as you would expect), but by explicitly specifying a style parameter, you get the ability to specify format strings which work with [`str.format()`](https://docs.python.org/3/library/stdtypes.html#str.format "str.format") or [`string.Template`](https://docs.python.org/3/library/string.html#string.Template "string.Template"). Here’s an example console session to show the possibilities:
>>>