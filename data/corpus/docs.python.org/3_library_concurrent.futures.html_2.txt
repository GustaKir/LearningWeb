Title: ThreadPoolExecutor in concurrent.futures
URL: https://docs.python.org/3/library/concurrent.futures.html
Summary: The ThreadPoolExecutor is a subclass of Executor that enables asynchronous execution using a thread pool. It is essential to be cautious of potential deadlocks that may arise when a callable associated with a Future waits on another Future's result.
---

```

Changed in version 3.9: Added _cancel_futures_.
## ThreadPoolExecutor[¶](https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor "Link to this heading")
[`ThreadPoolExecutor`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor "concurrent.futures.ThreadPoolExecutor") is an [`Executor`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor "concurrent.futures.Executor") subclass that uses a pool of threads to execute calls asynchronously.
Deadlocks can occur when the callable associated with a [`Future`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future "concurrent.futures.Future") waits on the results of another [`Future`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Future "concurrent.futures.Future"). For example:
```
importtime
defwait_on_b():
  time.sleep(5)
  print(b.result()) # b will never complete because it is waiting on a.
  return 5
defwait_on_a():
  time.sleep(5)
  print(a.result()) # a will never complete because it is waiting on b.
  return 6

executor = ThreadPoolExecutor(max_workers=2)
a = executor.submit(wait_on_b)
b = executor.submit(wait_on_a)

```

And:
```
defwait_on_future():
  f = executor.submit(pow, 5, 2)
  # This will never complete because there is only one worker thread and
  # it is executing this function.
  print(f.result())
executor = ThreadPoolExecutor(max_workers=1)
executor.submit(wait_on_future)

```


_class_ concurrent.futures.ThreadPoolExecutor(_max_workers =None_, _thread_name_prefix =''_, _initializer =None_, _initargs =()_)[¶](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor "Link to this definition")
    
An [`Executor`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.Executor "concurrent.futures.Executor") subclass that uses a pool of at most _max_workers_ threads to execute calls asynchronously.
All threads enqueued to `ThreadPoolExecutor` will be joined before the interpreter can exit. Note that the exit handler which does this is executed _before_ any exit handlers added using `atexit`. This means exceptions in the main thread must be caught and handled in order to signal threads to exit gracefully. For this reason, it is recommended that `ThreadPoolExecutor` not be used for long-running tasks.
_initializer_ is an optional callable that is called at the start of each worker thread; _initargs_ is a tuple of arguments passed to the initializer. Should _initializer_ raise an exception, all currently pending jobs will raise a [`BrokenThreadPool`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.thread.BrokenThreadPool "concurrent.futures.thread.BrokenThreadPool"), as well as any attempt to submit more jobs to the pool.
Changed in version 3.5: If _max_workers_ is `None` or not given, it will default to the number of processors on the machine, multiplied by `5`, assuming that [`ThreadPoolExecutor`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ThreadPoolExecutor "concurrent.futures.ThreadPoolExecutor") is often used to overlap I/O instead of CPU work and the number of workers should be higher than the number of workers for [`ProcessPoolExecutor`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor "concurrent.futures.ProcessPoolExecutor").
Changed in version 3.6: Added the _thread_name_prefix_ parameter to allow users to control the [`threading.Thread`](https://docs.python.org/3/library/threading.html#threading.Thread "threading.Thread") names for worker threads created by the pool for easier debugging.
Changed in version 3.7: Added the _initializer_ and _initargs_ arguments.
Changed in version 3.8: Default value of _max_workers_ is changed to `min(32, os.cpu_count() + 4)`. This default value preserves at least 5 workers for I/O bound tasks. It utilizes at most 32 CPU cores for CPU bound tasks which release the GIL. And it avoids using very large resources implicitly on many-core machines.
ThreadPoolExecutor now reuses idle worker threads before starting _max_workers_ worker threads too.
Changed in version 3.13: Default value of _max_workers_ is changed to `min(32, (os.process_cpu_count() or 1) + 4)`.
### ThreadPoolExecutor Example[¶](https://docs.python.org/3/library/concurrent.futures.html#threadpoolexecutor-example "Link to this heading")