Title: Regression Tests Package for Python
URL: https://docs.python.org/3/library/test.html
Summary: The `test` package is intended for internal use within Python, providing a suite of regression tests for the core language. It is documented for developers' benefit, with a warning against using it outside of Python's standard library due to potential changes in future releases.
---

# `test` — Regression tests package for Python[¶](https://docs.python.org/3/library/test.html#module-test "Link to this heading")
Note
The [`test`](https://docs.python.org/3/library/test.html#module-test "test: Regression tests package containing the testing suite for Python.") package is meant for internal use by Python only. It is documented for the benefit of the core developers of Python. Any use of this package outside of Python’s standard library is discouraged as code mentioned here can change or be removed without notice between releases of Python.
The [`test`](https://docs.python.org/3/library/test.html#module-test "test: Regression tests package containing the testing suite for Python.") package contains all regression tests for Python as well as the modules [`test.support`](https://docs.python.org/3/library/test.html#module-test.support "test.support: Support for Python's regression test suite.") and [`test.regrtest`](https://docs.python.org/3/library/test.html#module-test.regrtest "test.regrtest: Drives the regression test suite."). [`test.support`](https://docs.python.org/3/library/test.html#module-test.support "test.support: Support for Python's regression test suite.") is used to enhance your tests while [`test.regrtest`](https://docs.python.org/3/library/test.html#module-test.regrtest "test.regrtest: Drives the regression test suite.") drives the testing suite.
Each module in the [`test`](https://docs.python.org/3/library/test.html#module-test "test: Regression tests package containing the testing suite for Python.") package whose name starts with `test_` is a testing suite for a specific module or feature. All new tests should be written using the [`unittest`](https://docs.python.org/3/library/unittest.html#module-unittest "unittest: Unit testing framework for Python.") or [`doctest`](https://docs.python.org/3/library/doctest.html#module-doctest "doctest: Test pieces of code within docstrings.") module. Some older tests are written using a “traditional” testing style that compares output printed to `sys.stdout`; this style of test is considered deprecated.
See also 

Module [`unittest`](https://docs.python.org/3/library/unittest.html#module-unittest "unittest: Unit testing framework for Python.")
    
Writing PyUnit regression tests. 

Module [`doctest`](https://docs.python.org/3/library/doctest.html#module-doctest "doctest: Test pieces of code within docstrings.")
    
Tests embedded in documentation strings.
## Writing Unit Tests for the [`test`](https://docs.python.org/3/library/test.html#module-test "test: Regression tests package containing the testing suite for Python.") package[¶](https://docs.python.org/3/library/test.html#writing-unit-tests-for-the-test-package "Link to this heading")
It is preferred that tests that use the [`unittest`](https://docs.python.org/3/library/unittest.html#module-unittest "unittest: Unit testing framework for Python.") module follow a few guidelines. One is to name the test module by starting it with `test_` and end it with the name of the module being tested. The test methods in the test module should start with `test_` and end with a description of what the method is testing. This is needed so that the methods are recognized by the test driver as test methods. Also, no documentation string for the method should be included. A comment (such as `# Tests function returns only True or False`) should be used to provide documentation for test methods. This is done because documentation strings get printed out if they exist and thus what test is being run is not stated.
A basic boilerplate is often used:
```
importunittest
fromtestimport support
classMyTestCase1(unittest.TestCase):
  # Only use setUp() and tearDown() if necessary
  defsetUp(self):
    ... code to execute in preparation for tests ...
  deftearDown(self):
    ... code to execute to clean up after tests ...
  deftest_feature_one(self):
    # Test feature one.
    ... testing code ...
  deftest_feature_two(self):
    # Test feature two.
    ... testing code ...
  ... more test methods ...
classMyTestCase2(unittest.TestCase):
  ... same structure as MyTestCase1 ...
... more test classes ...
if __name__ == '__main__':
  unittest.main()