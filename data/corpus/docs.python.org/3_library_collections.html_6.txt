Title: Deque Objects in Python Collections
URL: https://docs.python.org/3/library/collections.html
Summary: The `deque` class from the collections module provides an efficient double-ended queue (deque) that allows appending and popping elements from both ends in O(1) time. It can be initialized with an iterable and can optionally have a maximum length.
---

```



## [`deque`](https://docs.python.org/3/library/collections.html#collections.deque "collections.deque") objects[¶](https://docs.python.org/3/library/collections.html#deque-objects "Link to this heading") 

_class_ collections.deque([_iterable_[, _maxlen_]])[¶](https://docs.python.org/3/library/collections.html#collections.deque "Link to this definition")
    
Returns a new deque object initialized left-to-right (using [`append()`](https://docs.python.org/3/library/collections.html#collections.deque.append "collections.deque.append")) with data from _iterable_. If _iterable_ is not specified, the new deque is empty.
Deques are a generalization of stacks and queues (the name is pronounced “deck” and is short for “double-ended queue”). Deques support thread-safe, memory efficient appends and pops from either side of the deque with approximately the same _O_(1) performance in either direction.
Though [`list`](https://docs.python.org/3/library/stdtypes.html#list "list") objects support similar operations, they are optimized for fast fixed-length operations and incur _O_(_n_) memory movement costs for `pop(0)` and `insert(0, v)` operations which change both the size and position of the underlying data representation.
If _maxlen_ is not specified or is `None`, deques may grow to an arbitrary length. Otherwise, the deque is bounded to the specified maximum length. Once a bounded length deque is full, when new items are added, a corresponding number of items are discarded from the opposite end. Bounded length deques provide functionality similar to the `tail` filter in Unix. They are also useful for tracking transactions and other pools of data where only the most recent activity is of interest.
Deque objects support the following methods: 

append(_x_)[¶](https://docs.python.org/3/library/collections.html#collections.deque.append "Link to this definition")
    
Add _x_ to the right side of the deque. 

appendleft(_x_)[¶](https://docs.python.org/3/library/collections.html#collections.deque.appendleft "Link to this definition")
    
Add _x_ to the left side of the deque. 

clear()[¶](https://docs.python.org/3/library/collections.html#collections.deque.clear "Link to this definition")
    
Remove all elements from the deque leaving it with length 0. 

copy()[¶](https://docs.python.org/3/library/collections.html#collections.deque.copy "Link to this definition")
    
Create a shallow copy of the deque.
Added in version 3.5. 

count(_x_)[¶](https://docs.python.org/3/library/collections.html#collections.deque.count "Link to this definition")
    
Count the number of deque elements equal to _x_.
Added in version 3.2. 

extend(_iterable_)[¶](https://docs.python.org/3/library/collections.html#collections.deque.extend "Link to this definition")
    
Extend the right side of the deque by appending elements from the iterable argument. 

extendleft(_iterable_)[¶](https://docs.python.org/3/library/collections.html#collections.deque.extendleft "Link to this definition")
    
Extend the left side of the deque by appending elements from _iterable_. Note, the series of left appends results in reversing the order of elements in the iterable argument. 

index(_x_[, _start_[, _stop_]])[¶](https://docs.python.org/3/library/collections.html#collections.deque.index "Link to this definition")
    
Return the position of _x_ in the deque (at or after index _start_ and before index _stop_). Returns the first match or raises [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if not found.
Added in version 3.5. 

insert(_i_ , _x_)[¶](https://docs.python.org/3/library/collections.html#collections.deque.insert "Link to this definition")
    
Insert _x_ into the deque at position _i_.
If the insertion would cause a bounded deque to grow beyond _maxlen_ , an [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError "IndexError") is raised.
Added in version 3.5. 

pop()[¶](https://docs.python.org/3/library/collections.html#collections.deque.pop "Link to this definition")
    
Remove and return an element from the right side of the deque. If no elements are present, raises an [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError "IndexError"). 

popleft()[¶](https://docs.python.org/3/library/collections.html#collections.deque.popleft "Link to this definition")
    
Remove and return an element from the left side of the deque. If no elements are present, raises an [`IndexError`](https://docs.python.org/3/library/exceptions.html#IndexError "IndexError"). 

remove(_value_)[¶](https://docs.python.org/3/library/collections.html#collections.deque.remove "Link to this definition")
    
Remove the first occurrence of _value_. If not found, raises a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError").