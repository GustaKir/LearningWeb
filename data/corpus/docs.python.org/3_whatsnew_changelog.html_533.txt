Title: Python 3 Changelog Updates
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This chunk outlines recent updates in the Python changelog, including a patch for a pure Python fallback for functools.reduce and enhancements to the asyncio task class, which now features methods for getting and setting names, and initial naming capabilities.
---

Patch by Franz Woellert.
  * [bpo-32321](https://bugs.python.org/issue?@action=redirect&bpo=32321): Add pure Python fallback for functools.reduce. Patch by Robert Wright.
  * [bpo-34270](https://bugs.python.org/issue?@action=redirect&bpo=34270): The default asyncio task class now always has a name which can be get or set using two new methods ([`get_name()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.get_name "asyncio.Task.get_name") and [`set_name()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task.set_name "asyncio.Task.set_name")) and is visible in the [`repr()`](https://docs.python.org/3/library/functions.html#repr "repr") output. An initial name can also be set using the new `name` keyword argument to [`asyncio.create_task()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.create_task "asyncio.create_task") or the `create_task()` method of the event loop. If no initial name is set, the default Task implementation generates a name like `Task-1` using a monotonic counter.
  * [bpo-34263](https://bugs.python.org/issue?@action=redirect&bpo=34263): asyncio’s event loop will not pass timeouts longer than one day to epoll/select etc.
  * [bpo-34035](https://bugs.python.org/issue?@action=redirect&bpo=34035): Fix several AttributeError in zipfile seek() methods. Patch by Mickaël Schoentgen.
  * [bpo-32215](https://bugs.python.org/issue?@action=redirect&bpo=32215): Fix performance regression in [`sqlite3`](https://docs.python.org/3/library/sqlite3.html#module-sqlite3 "sqlite3: A DB-API 2.0 implementation using SQLite 3.x.") when a DML statement appeared in a different line than the rest of the SQL query.
  * [bpo-34075](https://bugs.python.org/issue?@action=redirect&bpo=34075): Deprecate passing non-ThreadPoolExecutor instances to `AbstractEventLoop.set_default_executor()`.
  * [bpo-34251](https://bugs.python.org/issue?@action=redirect&bpo=34251): Restore `msilib.Win64` to preserve backwards compatibility since it’s already used by `distutils`’ `bdist_msi` command.
  * [bpo-19891](https://bugs.python.org/issue?@action=redirect&bpo=19891): Ignore errors caused by missing / non-writable homedir while writing history during exit of an interactive session. Patch by Anthony Sottile.
  * [bpo-33089](https://bugs.python.org/issue?@action=redirect&bpo=33089): Enhanced math.hypot() to support more than two dimensions.
  * [bpo-34228](https://bugs.python.org/issue?@action=redirect&bpo=34228): tracemalloc: PYTHONTRACEMALLOC=0 environment variable and -X tracemalloc=0 command line option are now allowed to disable explicitly tracemalloc at startup.
  * [bpo-13041](https://bugs.python.org/issue?@action=redirect&bpo=13041): Use [`shutil.get_terminal_size()`](https://docs.python.org/3/library/shutil.html#shutil.get_terminal_size "shutil.get_terminal_size") to calculate the terminal width correctly in the `argparse.HelpFormatter` class. Initial patch by Zbyszek Jędrzejewski-Szmek.
  * [bpo-34213](https://bugs.python.org/issue?@action=redirect&bpo=34213): Allow frozen dataclasses to have a field named “object”. Previously this conflicted with an internal use of “object”.
  * [bpo-34052](https://bugs.python.org/issue?@action=redirect&bpo=34052): [`sqlite3.Connection.create_aggregate()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.create_aggregate "sqlite3.Connection.create_aggregate"), [`sqlite3.Connection.create_function()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.create_function "sqlite3.Connection.create_function"), [`sqlite3.Connection.set_authorizer()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.set_authorizer "sqlite3.Connection.set_authorizer"), [`sqlite3.Connection.set_progress_handler()`](https://docs.python.org/3/library/sqlite3.html#sqlite3.Connection.set_progress_handler "sqlite3.Connection.set_progress_handler") methods raises TypeError when unhashable objects are passed as callable. These methods now don’t pass such objects to SQLite API. Previous behavior could lead to segfaults.