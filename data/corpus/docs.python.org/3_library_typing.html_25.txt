Title: TypedDict in Python's Typing Module
URL: https://docs.python.org/3/library/typing.html
Summary: This section discusses the usage of TypedDict in Python's typing module, illustrating the creation of 2D and 3D point classes with optional and required keys. It notes a caveat when using future annotations, which might affect runtime introspection of required and optional keys. It also mentions support for read-only keys through specific attributes.
---

```
>>> classPoint2D(TypedDict, total=False):
...   x: int
...   y: int
...
>>> classPoint3D(Point2D):
...   z: int
...
>>> Point3D.__required_keys__ == frozenset({'z'})
True
>>> Point3D.__optional_keys__ == frozenset({'x', 'y'})
True

```

Added in version 3.9.
Note
If `from __future__ import annotations` is used or if annotations are given as strings, annotations are not evaluated when the `TypedDict` is defined. Therefore, the runtime introspection that `__required_keys__` and `__optional_keys__` rely on may not work properly, and the values of the attributes may be incorrect.
Support for [`ReadOnly`](https://docs.python.org/3/library/typing.html#typing.ReadOnly "typing.ReadOnly") is reflected in the following attributes: 

__readonly_keys__[¶](https://docs.python.org/3/library/typing.html#typing.TypedDict.__readonly_keys__ "Link to this definition")
    
A [`frozenset`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset") containing the names of all read-only keys. Keys are read-only if they carry the [`ReadOnly`](https://docs.python.org/3/library/typing.html#typing.ReadOnly "typing.ReadOnly") qualifier.
Added in version 3.13. 

__mutable_keys__[¶](https://docs.python.org/3/library/typing.html#typing.TypedDict.__mutable_keys__ "Link to this definition")
    
A [`frozenset`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset") containing the names of all mutable keys. Keys are mutable if they do not carry the [`ReadOnly`](https://docs.python.org/3/library/typing.html#typing.ReadOnly "typing.ReadOnly") qualifier.
Added in version 3.13.
See [**PEP 589**](https://peps.python.org/pep-0589/) for more examples and detailed rules of using `TypedDict`.
Added in version 3.8.
Changed in version 3.11: Added support for marking individual keys as [`Required`](https://docs.python.org/3/library/typing.html#typing.Required "typing.Required") or [`NotRequired`](https://docs.python.org/3/library/typing.html#typing.NotRequired "typing.NotRequired"). See [**PEP 655**](https://peps.python.org/pep-0655/).
Changed in version 3.11: Added support for generic `TypedDict`s.
Changed in version 3.13: Removed support for the keyword-argument method of creating `TypedDict`s.
Changed in version 3.13: Support for the [`ReadOnly`](https://docs.python.org/3/library/typing.html#typing.ReadOnly "typing.ReadOnly") qualifier was added.
Deprecated since version 3.13, will be removed in version 3.15: When using the functional syntax to create a TypedDict class, failing to pass a value to the ‘fields’ parameter (`TD = TypedDict("TD")`) is deprecated. Passing `None` to the ‘fields’ parameter (`TD = TypedDict("TD", None)`) is also deprecated. Both will be disallowed in Python 3.15. To create a TypedDict class with 0 fields, use `class TD(TypedDict): pass` or `TD = TypedDict("TD", {})`.
### Protocols[¶](https://docs.python.org/3/library/typing.html#protocols "Link to this heading")
The following protocols are provided by the typing module. All are decorated with [`@runtime_checkable`](https://docs.python.org/3/library/typing.html#typing.runtime_checkable "typing.runtime_checkable"). 

_class_ typing.SupportsAbs[¶](https://docs.python.org/3/library/typing.html#typing.SupportsAbs "Link to this definition")
    
An ABC with one abstract method `__abs__` that is covariant in its return type. 

_class_ typing.SupportsBytes[¶](https://docs.python.org/3/library/typing.html#typing.SupportsBytes "Link to this definition")
    
An ABC with one abstract method `__bytes__`. 

_class_ typing.SupportsComplex[¶](https://docs.python.org/3/library/typing.html#typing.SupportsComplex "Link to this definition")
    
An ABC with one abstract method `__complex__`. 

_class_ typing.SupportsFloat[¶](https://docs.python.org/3/library/typing.html#typing.SupportsFloat "Link to this definition")
    
An ABC with one abstract method `__float__`. 

_class_ typing.SupportsIndex[¶](https://docs.python.org/3/library/typing.html#typing.SupportsIndex "Link to this definition")
    
An ABC with one abstract method `__index__`.
Added in version 3.8. 

_class_ typing.SupportsInt[¶](https://docs.python.org/3/library/typing.html#typing.SupportsInt "Link to this definition")
    
An ABC with one abstract method `__int__`. 

_class_ typing.SupportsRound[¶](https://docs.python.org/3/library/typing.html#typing.SupportsRound "Link to this definition")
    
An ABC with one abstract method `__round__` that is covariant in its return type.
### ABCs for working with IO[¶](https://docs.python.org/3/library/typing.html#abcs-for-working-with-io "Link to this heading") 

_class_ typing.IO[¶](https://docs.python.org/3/library/typing.html#typing.IO "Link to this definition")


_class_ typing.TextIO[¶](https://docs.python.org/3/library/typing.html#typing.TextIO "Link to this definition")