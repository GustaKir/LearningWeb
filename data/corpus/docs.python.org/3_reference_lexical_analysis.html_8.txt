Title: F-Strings in Python: Syntax and Components
URL: https://docs.python.org/3/reference/lexical_analysis.html
Summary: This section outlines the syntax for f-strings in Python, detailing the components such as literal characters, replacement fields, and expressions. It explains the structure of replacement fields, including options for conversion and formatting, within f-strings.
---

```
**f_string**     ::= ([literal_char](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-literal_char) | "{{" | "}}" | [replacement_field](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-replacement_field))*
**replacement_field** ::= "{" [f_expression](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-f_expression) ["="] ["!" [conversion](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-conversion)] [":" [format_spec](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-format_spec)] "}"
**f_expression**   ::= ([conditional_expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-conditional_expression) | "*" [or_expr](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-or_expr))
           ("," [conditional_expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-conditional_expression) | "," "*" [or_expr](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-or_expr))* [","]
           | [yield_expression](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-yield_expression)
**conversion**    ::= "s" | "r" | "a"
**format_spec**    ::= ([literal_char](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-literal_char) | [replacement_field](https://docs.python.org/3/reference/lexical_analysis.html#grammar-token-python-grammar-replacement_field))*
**literal_char**   ::= <any code point except "{", "}" or NULL>

```

The parts of the string outside curly braces are treated literally, except that any doubled curly braces `'{{'` or `'}}'` are replaced with the corresponding single curly brace. A single opening curly bracket `'{'` marks a replacement field, which starts with a Python expression. To display both the expression text and its value after evaluation, (useful in debugging), an equal sign `'='` may be added after the expression. A conversion field, introduced by an exclamation point `'!'` may follow. A format specifier may also be appended, introduced by a colon `':'`. A replacement field ends with a closing curly bracket `'}'`.
Expressions in formatted string literals are treated like regular Python expressions surrounded by parentheses, with a few exceptions. An empty expression is not allowed, and both [`lambda`](https://docs.python.org/3/reference/expressions.html#lambda) and assignment expressions `:=` must be surrounded by explicit parentheses. Each expression is evaluated in the context where the formatted string literal appears, in order from left to right. Replacement expressions can contain newlines in both single-quoted and triple-quoted f-strings and they can contain comments. Everything that comes after a `#` inside a replacement field is a comment (even closing braces and quotes). In that case, replacement fields must be closed in a different line.
```
>>> f"abc{a # This is a comment }"
... + 3}"
'abc5'