Title: Logging in Python: A Basic Tutorial
URL: https://docs.python.org/3/howto/logging.html
Summary: This document, authored by Vinay Sajip, introduces the basic concepts of logging in Python, explaining its purpose in tracking events during software execution. It covers how developers use logging calls to indicate events, which are marked by descriptive messages and varying levels of importance or severity. Additional resources, including links to reference information and a logging cookbook, are provided.
---

Author:
    
Vinay Sajip <vinay_sajip at red-dove dot com>
This page contains tutorial information. For links to reference information and a logging cookbook, please see [Other resources](https://docs.python.org/3/howto/logging.html#tutorial-ref-links).
## Basic Logging Tutorial[¶](https://docs.python.org/3/howto/logging.html#basic-logging-tutorial "Link to this heading")
Logging is a means of tracking events that happen when some software runs. The software’s developer adds logging calls to their code to indicate that certain events have occurred. An event is described by a descriptive message which can optionally contain variable data (i.e. data that is potentially different for each occurrence of the event). Events also have an importance which the developer ascribes to the event; the importance can also be called the _level_ or _severity_.
### When to use logging[¶](https://docs.python.org/3/howto/logging.html#when-to-use-logging "Link to this heading")
You can access logging functionality by creating a logger via `logger = getLogger(__name__)`, and then calling the logger’s [`debug()`](https://docs.python.org/3/library/logging.html#logging.Logger.debug "logging.Logger.debug"), [`info()`](https://docs.python.org/3/library/logging.html#logging.Logger.info "logging.Logger.info"), [`warning()`](https://docs.python.org/3/library/logging.html#logging.Logger.warning "logging.Logger.warning"), [`error()`](https://docs.python.org/3/library/logging.html#logging.Logger.error "logging.Logger.error") and [`critical()`](https://docs.python.org/3/library/logging.html#logging.Logger.critical "logging.Logger.critical") methods. To determine when to use logging, and to see which logger methods to use when, see the table below. It states, for each of a set of common tasks, the best tool to use for that task.
Task you want to perform | The best tool for the task  
---|---  
Display console output for ordinary usage of a command line script or program | [`print()`](https://docs.python.org/3/library/functions.html#print "print")  
Report events that occur during normal operation of a program (e.g. for status monitoring or fault investigation) | A logger’s [`info()`](https://docs.python.org/3/library/logging.html#logging.Logger.info "logging.Logger.info") (or [`debug()`](https://docs.python.org/3/library/logging.html#logging.Logger.debug "logging.Logger.debug") method for very detailed output for diagnostic purposes)  
Issue a warning regarding a particular runtime event | [`warnings.warn()`](https://docs.python.org/3/library/warnings.html#warnings.warn "warnings.warn") in library code if the issue is avoidable and the client application should be modified to eliminate the warning A logger’s [`warning()`](https://docs.python.org/3/library/logging.html#logging.Logger.warning "logging.Logger.warning") method if there is nothing the client application can do about the situation, but the event should still be noted  
Report an error regarding a particular runtime event | Raise an exception  
Report suppression of an error without raising an exception (e.g. error handler in a long-running server process) | A logger’s [`error()`](https://docs.python.org/3/library/logging.html#logging.Logger.error "logging.Logger.error"), [`exception()`](https://docs.python.org/3/library/logging.html#logging.Logger.exception "logging.Logger.exception") or [`critical()`](https://docs.python.org/3/library/logging.html#logging.Logger.critical "logging.Logger.critical") method as appropriate for the specific error and application domain  
The logger methods are named after the level or severity of the events they are used to track. The standard levels and their applicability are described below (in increasing order of severity):
Level | When it’s used  
---|---  
`DEBUG` | Detailed information, typically of interest only when diagnosing problems.  
`INFO` | Confirmation that things are working as expected.  
`WARNING` | An indication that something unexpected happened, or indicative of some problem in the near future (e.g. ‘disk space low’). The software is still working as expected.  
`ERROR` | Due to a more serious problem, the software has not been able to perform some function.  
`CRITICAL` | A serious error, indicating that the program itself may be unable to continue running.  
The default level is `WARNING`, which means that only events of this severity and higher will be tracked, unless the logging package is configured to do otherwise.
Events that are tracked can be handled in different ways. The simplest way of handling tracked events is to print them to the console. Another common way is to write them to a disk file.
### A simple example[¶](https://docs.python.org/3/howto/logging.html#a-simple-example "Link to this heading")
A very simple example is:
```
importlogging
logging.warning('Watch out!') # will print a message to the console
logging.info('I told you so') # will not print anything