Title: Thread Lock Acquisition in Python
URL: https://docs.python.org/3/library/_thread.html
Summary: The `lock.acquire()` method is used to acquire a thread lock in Python. Without arguments, it blocks until the lock is available. The `blocking` argument allows immediate acquisition if set to false, while a positive `timeout` specifies the maximum wait time. The method returns `True` if successful, otherwise `False`. The `timeout` parameter was introduced in version 3.2.
---

lock.acquire(_blocking =True_, _timeout =-1_)[¶](https://docs.python.org/3/library/_thread.html#thread.lock.acquire "Link to this definition")
    
Without any optional argument, this method acquires the lock unconditionally, if necessary waiting until it is released by another thread (only one thread at a time can acquire a lock — that’s their reason for existence).
If the _blocking_ argument is present, the action depends on its value: if it is false, the lock is only acquired if it can be acquired immediately without waiting, while if it is true, the lock is acquired unconditionally as above.
If the floating-point _timeout_ argument is present and positive, it specifies the maximum wait time in seconds before returning. A negative _timeout_ argument specifies an unbounded wait. You cannot specify a _timeout_ if _blocking_ is false.
The return value is `True` if the lock is acquired successfully, `False` if not.
Changed in version 3.2: The _timeout_ parameter is new.
Changed in version 3.2: Lock acquires can now be interrupted by signals on POSIX. 

lock.release()[¶](https://docs.python.org/3/library/_thread.html#thread.lock.release "Link to this definition")
    
Releases the lock. The lock must have been acquired earlier, but not necessarily by the same thread. 

lock.locked()[¶](https://docs.python.org/3/library/_thread.html#thread.lock.locked "Link to this definition")
    
Return the status of the lock: `True` if it has been acquired by some thread, `False` if not.
In addition to these methods, lock objects can also be used via the [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement, e.g.:
```
import_thread
a_lock = _thread.allocate_lock()
with a_lock:
  print("a_lock is locked while this executes")