Title: Configuring Logging Format and Flow
URL: https://docs.python.org/3/howto/logging.html
Summary: This section explains how to customize log message formats using the `basicConfig()` method and outlines the flow of log events through loggers and handlers, including conditions for record rejection and propagation.
---

```

You can change this by passing a format string to [`basicConfig()`](https://docs.python.org/3/library/logging.html#logging.basicConfig "logging.basicConfig") with the _format_ keyword argument. For all options regarding how a format string is constructed, see [Formatter Objects](https://docs.python.org/3/library/logging.html#formatter-objects).
### Logging Flow[¶](https://docs.python.org/3/howto/logging.html#logging-flow "Link to this heading")
The flow of log event information in loggers and handlers is illustrated in the following diagram.
Logger flow Create LogRecord Logging call in user code, e.g. logger.info(...) Stop Does a filter attached to logger reject the record? Pass record to handlers of current logger Is propagate true for current logger? Is there a parent logger? Set current logger to parent At least one handler in hierarchy? Use lastResort handler Handler enabled for level of record? Does a filter attached to handler reject the record? Stop Emit (includes formatting) Handler flow Logger enabled for level of call? No Yes Yes No No Yes Yes No No Yes No Yes No Yes Record passed to handler
### Loggers[¶](https://docs.python.org/3/howto/logging.html#loggers "Link to this heading")
[`Logger`](https://docs.python.org/3/library/logging.html#logging.Logger "logging.Logger") objects have a threefold job. First, they expose several methods to application code so that applications can log messages at runtime. Second, logger objects determine which log messages to act upon based upon severity (the default filtering facility) or filter objects. Third, logger objects pass along relevant log messages to all interested log handlers.
The most widely used methods on logger objects fall into two categories: configuration and message sending.
These are the most common configuration methods:
  * [`Logger.setLevel()`](https://docs.python.org/3/library/logging.html#logging.Logger.setLevel "logging.Logger.setLevel") specifies the lowest-severity log message a logger will handle, where debug is the lowest built-in severity level and critical is the highest built-in severity. For example, if the severity level is INFO, the logger will handle only INFO, WARNING, ERROR, and CRITICAL messages and will ignore DEBUG messages.
  * [`Logger.addHandler()`](https://docs.python.org/3/library/logging.html#logging.Logger.addHandler "logging.Logger.addHandler") and [`Logger.removeHandler()`](https://docs.python.org/3/library/logging.html#logging.Logger.removeHandler "logging.Logger.removeHandler") add and remove handler objects from the logger object. Handlers are covered in more detail in [Handlers](https://docs.python.org/3/howto/logging.html#handler-basic).
  * [`Logger.addFilter()`](https://docs.python.org/3/library/logging.html#logging.Logger.addFilter "logging.Logger.addFilter") and [`Logger.removeFilter()`](https://docs.python.org/3/library/logging.html#logging.Logger.removeFilter "logging.Logger.removeFilter") add and remove filter objects from the logger object. Filters are covered in more detail in [Filter Objects](https://docs.python.org/3/library/logging.html#filter).