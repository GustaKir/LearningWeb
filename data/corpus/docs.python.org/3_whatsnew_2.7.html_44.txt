Title: PEP 477: Backport ensurepip to Python 2.7
URL: https://docs.python.org/3/whatsnew/2.7.html
Summary: PEP 477 introduces the backport of the ensurepip module, as defined in PEP 453, to Python 2.7, starting with the 2.7.9 release. This module provides a standardized method to bootstrap the pip installer into existing Python installations, enhancing documentation and usability.
---

### PEP 477: Backport ensurepip (PEP 453) to Python 2.7[¶](https://docs.python.org/3/whatsnew/2.7.html#pep-477-backport-ensurepip-pep-453-to-python-2-7 "Link to this heading")
[**PEP 477**](https://peps.python.org/pep-0477/) approves the inclusion of the [**PEP 453**](https://peps.python.org/pep-0453/) ensurepip module and the improved documentation that was enabled by it in the Python 2.7 maintenance releases, appearing first in the Python 2.7.9 release.
#### Bootstrapping pip By Default[¶](https://docs.python.org/3/whatsnew/2.7.html#bootstrapping-pip-by-default "Link to this heading")
The new [`ensurepip`](https://docs.python.org/3/library/ensurepip.html#module-ensurepip "ensurepip: Bootstrapping the "pip" installer into an existing Python installation or virtual environment.") module (defined in [**PEP 453**](https://peps.python.org/pep-0453/)) provides a standard cross-platform mechanism to bootstrap the pip installer into Python installations. The version of `pip` included with Python 2.7.9 is `pip` 1.5.6, and future 2.7.x maintenance releases will update the bundled version to the latest version of `pip` that is available at the time of creating the release candidate.
By default, the commands `pip`, `pipX` and `pipX.Y` will be installed on all platforms (where X.Y stands for the version of the Python installation), along with the `pip` Python package and its dependencies.
For CPython [source builds on POSIX systems](https://docs.python.org/3/using/unix.html#building-python-on-unix), the `make install` and `make altinstall` commands do not bootstrap `pip` by default. This behaviour can be controlled through configure options, and overridden through Makefile options.
On Windows and Mac OS X, the CPython installers now default to installing `pip` along with CPython itself (users may opt out of installing it during the installation process). Window users will need to opt in to the automatic `PATH` modifications to have `pip` available from the command line by default, otherwise it can still be accessed through the Python launcher for Windows as `py -m pip`.
As [**discussed in the PEP**](https://peps.python.org/pep-0477/#disabling-ensurepip-by-downstream-distributors), platform packagers may choose not to install these commands by default, as long as, when invoked, they provide clear and simple directions on how to install them on that platform (usually using the system package manager).
#### Documentation Changes[¶](https://docs.python.org/3/whatsnew/2.7.html#documentation-changes "Link to this heading")
As part of this change, the [Installing Python Modules](https://docs.python.org/3/installing/index.html#installing-index) and [Distributing Python Modules](https://docs.python.org/3/distributing/index.html#distributing-index) sections of the documentation have been completely redesigned as short getting started and FAQ documents. Most packaging documentation has now been moved out to the Python Packaging Authority maintained [Python Packaging User Guide](https://packaging.python.org) and the documentation of the individual projects.
However, as this migration is currently still incomplete, the legacy versions of those guides remaining available as [Building C and C++ Extensions with setuptools](https://docs.python.org/3/extending/building.html#install-index) and [Building C and C++ Extensions with setuptools](https://docs.python.org/3/extending/building.html#setuptools-index).
See also 

[**PEP 453**](https://peps.python.org/pep-0453/) – Explicit bootstrapping of pip in Python installations
    
PEP written by Donald Stufft and Nick Coghlan, implemented by Donald Stufft, Nick Coghlan, Martin von Löwis and Ned Deily.
### PEP 476: Enabling certificate verification by default for stdlib http clients[¶](https://docs.python.org/3/whatsnew/2.7.html#pep-476-enabling-certificate-verification-by-default-for-stdlib-http-clients "Link to this heading")
[**PEP 476**](https://peps.python.org/pep-0476/) updated [`httplib`](https://docs.python.org/3/library/http.html#module-http "http: HTTP status codes and messages") and modules which use it, such as [`urllib2`](https://docs.python.org/3/library/urllib.request.html#module-urllib.request "urllib.request: Extensible library for opening URLs.") and [`xmlrpclib`](https://docs.python.org/3/library/xmlrpc.client.html#module-xmlrpc.client "xmlrpc.client: XML-RPC client access."), to now verify that the server presents a certificate which is signed by a Certificate Authority in the platform trust store and whose hostname matches the hostname being requested by default, significantly improving security for many applications. This change was made in the Python 2.7.9 release.
For applications which require the old previous behavior, they can pass an alternate context: