Title: Reference Count and Recursion Limit in sys Module
URL: https://docs.python.org/3/library/sys.html
Summary: The `sys.getrefcount(_object_)` function returns the reference count of an object, which is generally one higher than expected due to an additional temporary reference. However, this value may be misleading for certain objects, such as immortal objects, which have inflated refcounts. Starting from version 3.12, it is important to note that these refcounts may not accurately reflect the number of references held. The section also mentions the `sys.getrecursionlimit()` function.
---

sys.getrefcount(_object_)[¶](https://docs.python.org/3/library/sys.html#sys.getrefcount "Link to this definition")
    
Return the reference count of the _object_. The count returned is generally one higher than you might expect, because it includes the (temporary) reference as an argument to [`getrefcount()`](https://docs.python.org/3/library/sys.html#sys.getrefcount "sys.getrefcount").
Note that the returned value may not actually reflect how many references to the object are actually held. For example, some objects are [immortal](https://docs.python.org/3/glossary.html#term-immortal) and have a very high refcount that does not reflect the actual number of references. Consequently, do not rely on the returned value to be accurate, other than a value of 0 or 1.
Changed in version 3.12: Immortal objects have very large refcounts that do not match the actual number of references to the object. 

sys.getrecursionlimit()[¶](https://docs.python.org/3/library/sys.html#sys.getrecursionlimit "Link to this definition")
    
Return the current value of the recursion limit, the maximum depth of the Python interpreter stack. This limit prevents infinite recursion from causing an overflow of the C stack and crashing Python. It can be set by [`setrecursionlimit()`](https://docs.python.org/3/library/sys.html#sys.setrecursionlimit "sys.setrecursionlimit"). 

sys.getsizeof(_object_[, _default_])[¶](https://docs.python.org/3/library/sys.html#sys.getsizeof "Link to this definition")
    
Return the size of an object in bytes. The object can be any type of object. All built-in objects will return correct results, but this does not have to hold true for third-party extensions as it is implementation specific.
Only the memory consumption directly attributed to the object is accounted for, not the memory consumption of objects it refers to.
If given, _default_ will be returned if the object does not provide means to retrieve the size. Otherwise a [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError") will be raised.
[`getsizeof()`](https://docs.python.org/3/library/sys.html#sys.getsizeof "sys.getsizeof") calls the object’s `__sizeof__` method and adds an additional garbage collector overhead if the object is managed by the garbage collector.
See [recursive sizeof recipe](https://code.activestate.com/recipes/577504-compute-memory-footprint-of-an-object-and-its-cont/) for an example of using [`getsizeof()`](https://docs.python.org/3/library/sys.html#sys.getsizeof "sys.getsizeof") recursively to find the size of containers and all their contents. 

sys.getswitchinterval()[¶](https://docs.python.org/3/library/sys.html#sys.getswitchinterval "Link to this definition")
    
Return the interpreter’s “thread switch interval” in seconds; see [`setswitchinterval()`](https://docs.python.org/3/library/sys.html#sys.setswitchinterval "sys.setswitchinterval").
Added in version 3.2. 

sys._getframe([_depth_])[¶](https://docs.python.org/3/library/sys.html#sys._getframe "Link to this definition")
    
Return a frame object from the call stack. If optional integer _depth_ is given, return the frame object that many calls below the top of the stack. If that is deeper than the call stack, [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised. The default for _depth_ is zero, returning the frame at the top of the call stack.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `sys._getframe` with argument `frame`.
**CPython implementation detail:** This function should be used for internal and specialized purposes only. It is not guaranteed to exist in all implementations of Python. 

sys._getframemodulename([_depth_])[¶](https://docs.python.org/3/library/sys.html#sys._getframemodulename "Link to this definition")
    
Return the name of a module from the call stack. If optional integer _depth_ is given, return the module that many calls below the top of the stack. If that is deeper than the call stack, or if the module is unidentifiable, `None` is returned. The default for _depth_ is zero, returning the module at the top of the call stack.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `sys._getframemodulename` with argument `depth`.
**CPython implementation detail:** This function should be used for internal and specialized purposes only. It is not guaranteed to exist in all implementations of Python.