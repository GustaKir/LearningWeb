Title: os.system Function
URL: https://docs.python.org/3/library/os.html
Summary: The os.system() function executes a command in a subshell and sends its output to the interpreter's standard output stream. It has system-dependent return values: on Unix, it reflects the exit status of the process, while on Windows, it returns the value provided by the system shell.
---

os.system(_command_)[¶](https://docs.python.org/3/library/os.html#os.system "Link to this definition")
    
Execute the command (a string) in a subshell. This is implemented by calling the Standard C function `system()`, and has the same limitations. Changes to [`sys.stdin`](https://docs.python.org/3/library/sys.html#sys.stdin "sys.stdin"), etc. are not reflected in the environment of the executed command. If _command_ generates any output, it will be sent to the interpreter standard output stream. The C standard does not specify the meaning of the return value of the C function, so the return value of the Python function is system-dependent.
On Unix, the return value is the exit status of the process encoded in the format specified for [`wait()`](https://docs.python.org/3/library/os.html#os.wait "os.wait").
On Windows, the return value is that returned by the system shell after running _command_. The shell is given by the Windows environment variable `COMSPEC`: it is usually **cmd.exe** , which returns the exit status of the command run; on systems using a non-native shell, consult your shell documentation.
The [`subprocess`](https://docs.python.org/3/library/subprocess.html#module-subprocess "subprocess: Subprocess management.") module provides more powerful facilities for spawning new processes and retrieving their results; using that module is preferable to using this function. See the [Replacing Older Functions with the subprocess Module](https://docs.python.org/3/library/subprocess.html#subprocess-replacements) section in the [`subprocess`](https://docs.python.org/3/library/subprocess.html#module-subprocess "subprocess: Subprocess management.") documentation for some helpful recipes.
On Unix, [`waitstatus_to_exitcode()`](https://docs.python.org/3/library/os.html#os.waitstatus_to_exitcode "os.waitstatus_to_exitcode") can be used to convert the result (exit status) into an exit code. On Windows, the result is directly the exit code.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.system` with argument `command`.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, Windows, not WASI, not Android, not iOS. 

os.times()[¶](https://docs.python.org/3/library/os.html#os.times "Link to this definition")
    
Returns the current global process times. The return value is an object with five attributes:
  * `user` - user time
  * `system` - system time
  * `children_user` - user time of all child processes
  * `children_system` - system time of all child processes
  * `elapsed` - elapsed real time since a fixed point in the past


For backwards compatibility, this object also behaves like a five-tuple containing `user`, `system`, `children_user`, `children_system`, and `elapsed` in that order.
See the Unix manual page _[times(2)](https://manpages.debian.org/times\(2\))_ and [times(3)](https://man.freebsd.org/cgi/man.cgi?time\(3\)) manual page on Unix or [the GetProcessTimes MSDN](https://docs.microsoft.com/windows/win32/api/processthreadsapi/nf-processthreadsapi-getprocesstimes) on Windows. On Windows, only `user` and `system` are known; the other attributes are zero.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, Windows.
Changed in version 3.3: Return type changed from a tuple to a tuple-like object with named attributes. 

os.wait()[¶](https://docs.python.org/3/library/os.html#os.wait "Link to this definition")
    
Wait for completion of a child process, and return a tuple containing its pid and exit status indication: a 16-bit number, whose low byte is the signal number that killed the process, and whose high byte is the exit status (if the signal number is zero); the high bit of the low byte is set if a core file was produced.
If there are no children that could be waited for, [`ChildProcessError`](https://docs.python.org/3/library/exceptions.html#ChildProcessError "ChildProcessError") is raised.
[`waitstatus_to_exitcode()`](https://docs.python.org/3/library/os.html#os.waitstatus_to_exitcode "os.waitstatus_to_exitcode") can be used to convert the exit status into an exit code.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix, not WASI, not Android, not iOS.
See also
The other `wait*()` functions documented below can be used to wait for the completion of a specific child process and have more options. [`waitpid()`](https://docs.python.org/3/library/os.html#os.waitpid "os.waitpid") is the only one also available on Windows.