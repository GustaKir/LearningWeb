Title: Python Built-in Functions and Mutable Sequence Type
URL: https://docs.python.org/3/library/functions.html
Summary: The document provides an overview of the built-in function 'len()', which returns the length of various objects, including sequences and collections. It also notes that 'len()' raises an OverflowError for lengths exceeding sys.maxsize. Additionally, it mentions 'list' as a mutable sequence type rather than a function, referring to its specifications in the documentation.
---

```


len(_s_)[¶](https://docs.python.org/3/library/functions.html#len "Link to this definition")
    
Return the length (the number of items) of an object. The argument may be a sequence (such as a string, bytes, tuple, list, or range) or a collection (such as a dictionary, set, or frozen set).
**CPython implementation detail:** `len` raises [`OverflowError`](https://docs.python.org/3/library/exceptions.html#OverflowError "OverflowError") on lengths larger than [`sys.maxsize`](https://docs.python.org/3/library/sys.html#sys.maxsize "sys.maxsize"), such as [`range(2 ** 100)`](https://docs.python.org/3/library/stdtypes.html#range "range"). 

_class_ list


_class_ list(_iterable_)
    
Rather than being a function, [`list`](https://docs.python.org/3/library/stdtypes.html#list "list") is actually a mutable sequence type, as documented in [Lists](https://docs.python.org/3/library/stdtypes.html#typesseq-list) and [Sequence Types — list, tuple, range](https://docs.python.org/3/library/stdtypes.html#typesseq). 

locals()[¶](https://docs.python.org/3/library/functions.html#locals "Link to this definition")
    
> Return a mapping object representing the current local symbol table, with variable names as the keys, and their currently bound references as the values.
> At module scope, as well as when using [`exec()`](https://docs.python.org/3/library/functions.html#exec "exec") or [`eval()`](https://docs.python.org/3/library/functions.html#eval "eval") with a single namespace, this function returns the same namespace as [`globals()`](https://docs.python.org/3/library/functions.html#globals "globals").
> At class scope, it returns the namespace that will be passed to the metaclass constructor.
> When using `exec()` or `eval()` with separate local and global arguments, it returns the local namespace passed in to the function call.
> In all of the above cases, each call to `locals()` in a given frame of execution will return the _same_ mapping object. Changes made through the mapping object returned from `locals()` will be visible as assigned, reassigned, or deleted local variables, and assigning, reassigning, or deleting local variables will immediately affect the contents of the returned mapping object.
> In an [optimized scope](https://docs.python.org/3/glossary.html#term-optimized-scope) (including functions, generators, and coroutines), each call to `locals()` instead returns a fresh dictionary containing the current bindings of the function’s local variables and any nonlocal cell references. In this case, name binding changes made via the returned dict are _not_ written back to the corresponding local variables or nonlocal cell references, and assigning, reassigning, or deleting local variables and nonlocal cell references does _not_ affect the contents of previously returned dictionaries.
> Calling `locals()` as part of a comprehension in a function, generator, or coroutine is equivalent to calling it in the containing scope, except that the comprehension’s initialised iteration variables will be included. In other scopes, it behaves as if the comprehension were running as a nested function.
> Calling `locals()` as part of a generator expression is equivalent to calling it in a nested generator function.
Changed in version 3.12: The behaviour of `locals()` in a comprehension has been updated as described in [**PEP 709**](https://peps.python.org/pep-0709/).
Changed in version 3.13: As part of [**PEP 667**](https://peps.python.org/pep-0667/), the semantics of mutating the mapping objects returned from this function are now defined. The behavior in [optimized scopes](https://docs.python.org/3/glossary.html#term-optimized-scope) is now as described above. Aside from being defined, the behaviour in other scopes remains unchanged from previous versions. 

map(_function_ , _iterable_ , _* iterables_)[¶](https://docs.python.org/3/library/functions.html#map "Link to this definition")
    
Return an iterator that applies _function_ to every item of _iterable_ , yielding the results. If additional _iterables_ arguments are passed, _function_ must take that many arguments and is applied to the items from all iterables in parallel. With multiple iterables, the iterator stops when the shortest iterable is exhausted. For cases where the function inputs are already arranged into argument tuples, see [`itertools.starmap()`](https://docs.python.org/3/library/itertools.html#itertools.starmap "itertools.starmap"). 

max(_iterable_ , _*_ , _key =None_)[¶](https://docs.python.org/3/library/functions.html#max "Link to this definition")


max(_iterable_ , _*_ , _default_ , _key =None_)