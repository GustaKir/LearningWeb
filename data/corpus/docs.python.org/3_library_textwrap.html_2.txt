Title: Text Wrapper Methods in Python's Textwrap Module
URL: https://docs.python.org/3/library/textwrap.html
Summary: The `wrap()`, `fill()`, and `shorten()` methods in the `textwrap` module utilize a `TextWrapper` instance for formatting text. Since this instance is not reused, it's recommended to create a custom `TextWrapper` object for processing multiple strings for better efficiency. Text wrapping prefers whitespace and hyphens for optimal results.
---

```

Added in version 3.3.
[`wrap()`](https://docs.python.org/3/library/textwrap.html#textwrap.wrap "textwrap.wrap"), [`fill()`](https://docs.python.org/3/library/textwrap.html#textwrap.fill "textwrap.fill") and [`shorten()`](https://docs.python.org/3/library/textwrap.html#textwrap.shorten "textwrap.shorten") work by creating a [`TextWrapper`](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper "textwrap.TextWrapper") instance and calling a single method on it. That instance is not reused, so for applications that process many text strings using [`wrap()`](https://docs.python.org/3/library/textwrap.html#textwrap.wrap "textwrap.wrap") and/or [`fill()`](https://docs.python.org/3/library/textwrap.html#textwrap.fill "textwrap.fill"), it may be more efficient to create your own [`TextWrapper`](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper "textwrap.TextWrapper") object.
Text is preferably wrapped on whitespaces and right after the hyphens in hyphenated words; only then will long words be broken if necessary, unless [`TextWrapper.break_long_words`](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper.break_long_words "textwrap.TextWrapper.break_long_words") is set to false. 

_class_ textwrap.TextWrapper(_** kwargs_)[Â¶](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper "Link to this definition")
    
The [`TextWrapper`](https://docs.python.org/3/library/textwrap.html#textwrap.TextWrapper "textwrap.TextWrapper") constructor accepts a number of optional keyword arguments. Each keyword argument corresponds to an instance attribute, so for example
```
wrapper = TextWrapper(initial_indent="* ")

```

is the same as
```
wrapper = TextWrapper()
wrapper.initial_indent = "* "