Title: Python 3: Core and Builtins Changes
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section outlines several updates to core functionalities and built-in types in Python 3. It includes improvements to the garbage collector, compatibility for lists per PEP 703, specialization for the 'CONTAINS_OP', and fixes related to error handling in object reduction.
---

### Core and Builtins[Â¶](https://docs.python.org/3/whatsnew/changelog.html#id90 "Link to this heading")
  * [gh-116604](https://github.com/python/cpython/issues/116604): Respect the status of the garbage collector when indirect calls are made via [`PyErr_CheckSignals()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_CheckSignals "PyErr_CheckSignals") and the evaluation breaker. Patch by Pablo Galindo
  * [gh-112087](https://github.com/python/cpython/issues/112087): [`list`](https://docs.python.org/3/library/stdtypes.html#list "list") is now compatible with the implementation of [**PEP 703**](https://peps.python.org/pep-0703/).
  * [gh-116381](https://github.com/python/cpython/issues/116381): Add specialization for `CONTAINS_OP`.
  * [gh-116296](https://github.com/python/cpython/issues/116296): Fix possible refleak in `object.__reduce__()` internal error handling.
  * [gh-115823](https://github.com/python/cpython/issues/115823): Properly calculate error ranges in the parser when raising [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") exceptions caused by invalid byte sequences. Patch by Pablo Galindo
  * [gh-115778](https://github.com/python/cpython/issues/115778): Add `tierN` annotation for instruction definition in interpreter DSL.
  * [gh-115733](https://github.com/python/cpython/issues/115733): Fix crash when calling `next()` on exhausted list iterators.
  * [gh-115700](https://github.com/python/cpython/issues/115700): The regen-cases build stage now works on Windows.
  * [gh-115347](https://github.com/python/cpython/issues/115347): Fix bug where docstring was replaced by a redundant NOP when Python is run with `-OO`.
  * [gh-115323](https://github.com/python/cpython/issues/115323): Make error message more meaningful for when `bytearray.extend()` is called with a [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") object.
  * [gh-112175](https://github.com/python/cpython/issues/112175): Every `PyThreadState` now has its own `eval_breaker`, allowing specific threads to be interrupted.
  * [gh-115154](https://github.com/python/cpython/issues/115154): Fix a bug that was causing the [`tokenize.untokenize()`](https://docs.python.org/3/library/tokenize.html#tokenize.untokenize "tokenize.untokenize") function to handle unicode named literals incorrectly. Patch by Pablo Galindo
  * [gh-112433](https://github.com/python/cpython/issues/112433): Add ability to force alignment of [`ctypes.Structure`](https://docs.python.org/3/library/ctypes.html#ctypes.Structure "ctypes.Structure") by way of the new `_align_` attribute on the class.
  * [gh-104090](https://github.com/python/cpython/issues/104090): The multiprocessing resource tracker now exits with non-zero status code if a resource leak was detected. It still exits with status code 0 otherwise.
  * [gh-105858](https://github.com/python/cpython/issues/105858): Improve the constructors for [`ast`](https://docs.python.org/3/library/ast.html#module-ast "ast: Abstract Syntax Tree classes and manipulation.") nodes. Arguments of list types now default to an empty list if omitted, and optional fields default to `None`. AST nodes now have an `__annotations__` attribute with the expected types of their attributes. Passing unrecognized extra arguments to AST nodes is deprecated and will become an error in Python 3.15. Omitting a required argument to an AST node is deprecated and will become an error in Python 3.15. Patch by Jelle Zijlstra.
  * [gh-101860](https://github.com/python/cpython/issues/101860): Expose `__name__` attribute on property.
  * [gh-96497](https://github.com/python/cpython/issues/96497): Fix incorrect resolution of mangled class variables used in assignment expressions in comprehensions.