Title: Built-in Functions: reversed and round
URL: https://docs.python.org/3/library/functions.html
Summary: This document chunk describes two built-in Python functions: 'reversed', which returns a reverse iterator for a sequence supporting the necessary methods, and 'round', which rounds a number to a specified precision or to the nearest integer if no precision is provided.
---

```


reversed(_seq_)[¶](https://docs.python.org/3/library/functions.html#reversed "Link to this definition")
    
Return a reverse [iterator](https://docs.python.org/3/glossary.html#term-iterator). _seq_ must be an object which has a [`__reversed__()`](https://docs.python.org/3/reference/datamodel.html#object.__reversed__ "object.__reversed__") method or supports the sequence protocol (the [`__len__()`](https://docs.python.org/3/reference/datamodel.html#object.__len__ "object.__len__") method and the [`__getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__getitem__ "object.__getitem__") method with integer arguments starting at `0`). 

round(_number_ , _ndigits =None_)[¶](https://docs.python.org/3/library/functions.html#round "Link to this definition")
    
Return _number_ rounded to _ndigits_ precision after the decimal point. If _ndigits_ is omitted or is `None`, it returns the nearest integer to its input.
For the built-in types supporting [`round()`](https://docs.python.org/3/library/functions.html#round "round"), values are rounded to the closest multiple of 10 to the power minus _ndigits_ ; if two multiples are equally close, rounding is done toward the even choice (so, for example, both `round(0.5)` and `round(-0.5)` are `0`, and `round(1.5)` is `2`). Any integer value is valid for _ndigits_ (positive, zero, or negative). The return value is an integer if _ndigits_ is omitted or `None`. Otherwise, the return value has the same type as _number_.
For a general Python object `number`, `round` delegates to `number.__round__`.
Note
The behavior of [`round()`](https://docs.python.org/3/library/functions.html#round "round") for floats can be surprising: for example, `round(2.675, 2)` gives `2.67` instead of the expected `2.68`. This is not a bug: it’s a result of the fact that most decimal fractions can’t be represented exactly as a float. See [Floating-Point Arithmetic: Issues and Limitations](https://docs.python.org/3/tutorial/floatingpoint.html#tut-fp-issues) for more information. 

_class_ set


_class_ set(_iterable_)
    
Return a new [`set`](https://docs.python.org/3/library/stdtypes.html#set "set") object, optionally with elements taken from _iterable_. `set` is a built-in class. See [`set`](https://docs.python.org/3/library/stdtypes.html#set "set") and [Set Types — set, frozenset](https://docs.python.org/3/library/stdtypes.html#types-set) for documentation about this class.
For other containers see the built-in [`frozenset`](https://docs.python.org/3/library/stdtypes.html#frozenset "frozenset"), [`list`](https://docs.python.org/3/library/stdtypes.html#list "list"), [`tuple`](https://docs.python.org/3/library/stdtypes.html#tuple "tuple"), and [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") classes, as well as the [`collections`](https://docs.python.org/3/library/collections.html#module-collections "collections: Container datatypes") module. 

setattr(_object_ , _name_ , _value_)[¶](https://docs.python.org/3/library/functions.html#setattr "Link to this definition")
    
This is the counterpart of [`getattr()`](https://docs.python.org/3/library/functions.html#getattr "getattr"). The arguments are an object, a string, and an arbitrary value. The string may name an existing attribute or a new attribute. The function assigns the value to the attribute, provided the object allows it. For example, `setattr(x, 'foobar', 123)` is equivalent to `x.foobar = 123`.
_name_ need not be a Python identifier as defined in [Identifiers and keywords](https://docs.python.org/3/reference/lexical_analysis.html#identifiers) unless the object chooses to enforce that, for example in a custom [`__getattribute__()`](https://docs.python.org/3/reference/datamodel.html#object.__getattribute__ "object.__getattribute__") or via [`__slots__`](https://docs.python.org/3/reference/datamodel.html#object.__slots__ "object.__slots__"). An attribute whose name is not an identifier will not be accessible using the dot notation, but is accessible through [`getattr()`](https://docs.python.org/3/library/functions.html#getattr "getattr") etc..
Note
Since [private name mangling](https://docs.python.org/3/reference/expressions.html#private-name-mangling) happens at compilation time, one must manually mangle a private attribute’s (attributes with two leading underscores) name in order to set it with [`setattr()`](https://docs.python.org/3/library/functions.html#setattr "setattr"). 

_class_ slice(_stop_)[¶](https://docs.python.org/3/library/functions.html#slice "Link to this definition")


_class_ slice(_start_ , _stop_ , _step =None_)
    
Return a [slice](https://docs.python.org/3/glossary.html#term-slice) object representing the set of indices specified by `range(start, stop, step)`. The _start_ and _step_ arguments default to `None`. 

start[¶](https://docs.python.org/3/library/functions.html#slice.start "Link to this definition")