Title: Pattern Matching in Python
URL: https://docs.python.org/3/tutorial/controlflow.html
Summary: This section explains the use of pattern matching in Python, particularly how to interpret patterns as variable assignments. It covers the structure of patterns, including standalone names and nested patterns, as demonstrated through examples with a custom class `Point` and various match cases.
---

```

A recommended way to read patterns is to look at them as an extended form of what you would put on the left of an assignment, to understand which variables would be set to what. Only the standalone names (like `var` above) are assigned to by a match statement. Dotted names (like `foo.bar`), attribute names (the `x=` and `y=` above) or class names (recognized by the “(…)” next to them like `Point` above) are never assigned to.
Patterns can be arbitrarily nested. For example, if we have a short list of Points, with `__match_args__` added, we could match it like this:
```
classPoint:
  __match_args__ = ('x', 'y')
  def__init__(self, x, y):
    self.x = x
    self.y = y
match points:
  case []:
    print("No points")
  case [Point(0, 0)]:
    print("The origin")
  case [Point(x, y)]:
    print(f"Single point {x}, {y}")
  case [Point(0, y1), Point(0, y2)]:
    print(f"Two on the Y axis at {y1}, {y2}")
  case_:
    print("Something else")

```

We can add an `if` clause to a pattern, known as a “guard”. If the guard is false, `match` goes on to try the next case block. Note that value capture happens before the guard is evaluated:
```
match point:
  case Point(x, y) if x == y:
    print(f"Y=X at {x}")
  case Point(x, y):
    print(f"Not on the diagonal")

```

Several other key features of this statement:
  * Like unpacking assignments, tuple and list patterns have exactly the same meaning and actually match arbitrary sequences. An important exception is that they don’t match iterators or strings.
  * Sequence patterns support extended unpacking: `[x, y, *rest]` and `(x, y, *rest)` work similar to unpacking assignments. The name after `*` may also be `_`, so `(x, y, *_)` matches a sequence of at least two items without binding the remaining items.
  * Mapping patterns: `{"bandwidth": b, "latency": l}` captures the `"bandwidth"` and `"latency"` values from a dictionary. Unlike sequence patterns, extra keys are ignored. An unpacking like `**rest` is also supported. (But `**_` would be redundant, so it is not allowed.)
  * Subpatterns may be captured using the `as` keyword:
```
case (Point(x1, y1), Point(x2, y2) as p2): ...

```

will capture the second element of the input as `p2` (as long as the input is a sequence of two points)
  * Most literals are compared by equality, however the singletons `True`, `False` and `None` are compared by identity.
  * Patterns may use named constants. These must be dotted names to prevent them from being interpreted as capture variable:
```
fromenumimport Enum
classColor(Enum):
  RED = 'red'
  GREEN = 'green'
  BLUE = 'blue'
color = Color(input("Enter your choice of 'red', 'blue' or 'green': "))
match color:
  case Color.RED:
    print("I see red!")
  case Color.GREEN:
    print("Grass is green")
  case Color.BLUE:
    print("I'm feeling the blues :(")

```



For a more detailed explanation and additional examples, you can look into [**PEP 636**](https://peps.python.org/pep-0636/) which is written in a tutorial format.
## 4.8. Defining Functions[¶](https://docs.python.org/3/tutorial/controlflow.html#defining-functions "Link to this heading")
We can create a function that writes the Fibonacci series to an arbitrary boundary:
>>>```
>>> deffib(n):  # write Fibonacci series less than n
... """Print a Fibonacci series less than n."""
...   a, b = 0, 1
...   while a < n:
...     print(a, end=' ')
...     a, b = b, a+b
...   print()
...
>>> # Now call the function we just defined:
>>> fib(2000)
0 1 1 2 3 5 8 13 21 34 55 89 144 233 377 610 987 1597