Title: HTTP Connection and HTTPS Connection Classes
URL: https://docs.python.org/3/library/http.client.html
Summary: This documentation section provides examples of creating HTTP connections using the `http.client.HTTPConnection` class and notes changes made in Python versions 3.2, 3.4, and 3.7. Additionally, it introduces the `http.client.HTTPSConnection` class, which is a subclass that uses SSL for secure connections, indicating a default port of 443.
---

```
>>> h1 = http.client.HTTPConnection('www.python.org')
>>> h2 = http.client.HTTPConnection('www.python.org:80')
>>> h3 = http.client.HTTPConnection('www.python.org', 80)
>>> h4 = http.client.HTTPConnection('www.python.org', 80, timeout=10)

```

Changed in version 3.2: _source_address_ was added.
Changed in version 3.4: The _strict_ parameter was removed. HTTP 0.9-style “Simple Responses” are no longer supported.
Changed in version 3.7: _blocksize_ parameter was added. 

_class_ http.client.HTTPSConnection(_host_ , _port=None_ , _*_ , [_timeout_ , ]_source_address=None_ , _context=None_ , _blocksize=8192_)[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPSConnection "Link to this definition")
    
A subclass of [`HTTPConnection`](https://docs.python.org/3/library/http.client.html#http.client.HTTPConnection "http.client.HTTPConnection") that uses SSL for communication with secure servers. Default port is `443`. If _context_ is specified, it must be a [`ssl.SSLContext`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext "ssl.SSLContext") instance describing the various SSL options.
Please read [Security considerations](https://docs.python.org/3/library/ssl.html#ssl-security) for more information on best practices.
Changed in version 3.2: _source_address_ , _context_ and _check_hostname_ were added.
Changed in version 3.2: This class now supports HTTPS virtual hosts if possible (that is, if [`ssl.HAS_SNI`](https://docs.python.org/3/library/ssl.html#ssl.HAS_SNI "ssl.HAS_SNI") is true).
Changed in version 3.4: The _strict_ parameter was removed. HTTP 0.9-style “Simple Responses” are no longer supported.
Changed in version 3.4.3: This class now performs all the necessary certificate and hostname checks by default. To revert to the previous, unverified, behavior `ssl._create_unverified_context()` can be passed to the _context_ parameter.
Changed in version 3.8: This class now enables TLS 1.3 [`ssl.SSLContext.post_handshake_auth`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.post_handshake_auth "ssl.SSLContext.post_handshake_auth") for the default _context_ or when _cert_file_ is passed with a custom _context_.
Changed in version 3.10: This class now sends an ALPN extension with protocol indicator `http/1.1` when no _context_ is given. Custom _context_ should set ALPN protocols with [`set_alpn_protocols()`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_alpn_protocols "ssl.SSLContext.set_alpn_protocols").
Changed in version 3.12: The deprecated _key_file_ , _cert_file_ and _check_hostname_ parameters have been removed. 

_class_ http.client.HTTPResponse(_sock_ , _debuglevel =0_, _method =None_, _url =None_)[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse "Link to this definition")
    
Class whose instances are returned upon successful connection. Not instantiated directly by user.
Changed in version 3.4: The _strict_ parameter was removed. HTTP 0.9 style “Simple Responses” are no longer supported.
This module provides the following function: 

http.client.parse_headers(_fp_)[¶](https://docs.python.org/3/library/http.client.html#http.client.parse_headers "Link to this definition")
    
Parse the headers from a file pointer _fp_ representing a HTTP request/response. The file has to be a [`BufferedIOBase`](https://docs.python.org/3/library/io.html#io.BufferedIOBase "io.BufferedIOBase") reader (i.e. not text) and must provide a valid [**RFC 2822**](https://datatracker.ietf.org/doc/html/rfc2822.html) style header.
This function returns an instance of [`http.client.HTTPMessage`](https://docs.python.org/3/library/http.client.html#http.client.HTTPMessage "http.client.HTTPMessage") that holds the header fields, but no payload (the same as [`HTTPResponse.msg`](https://docs.python.org/3/library/http.client.html#http.client.HTTPResponse.msg "http.client.HTTPResponse.msg") and [`http.server.BaseHTTPRequestHandler.headers`](https://docs.python.org/3/library/http.server.html#http.server.BaseHTTPRequestHandler.headers "http.server.BaseHTTPRequestHandler.headers")). After returning, the file pointer _fp_ is ready to read the HTTP body.
Note
[`parse_headers()`](https://docs.python.org/3/library/http.client.html#http.client.parse_headers "http.client.parse_headers") does not parse the start-line of a HTTP message; it only parses the `Name: value` lines. The file has to be ready to read these field lines, so the first line should already be consumed before calling the function.
The following exceptions are raised as appropriate: 

_exception_ http.client.HTTPException[¶](https://docs.python.org/3/library/http.client.html#http.client.HTTPException "Link to this definition")
    
The base class of the other exceptions in this module. It is a subclass of [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception "Exception").