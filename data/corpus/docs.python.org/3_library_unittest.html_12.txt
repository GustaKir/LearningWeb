Title: Testing Assertions in unittest
URL: https://docs.python.org/3/library/unittest.html
Summary: This section describes various assertion methods in the unittest framework, including assertFalse, assertIs, and assertIsNot. It emphasizes the distinction between checking boolean expressions and object identity, recommending more specific assertions for clearer error messages.
---

assertFalse(_expr_ , _msg =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertFalse "Link to this definition")
    
Test that _expr_ is true (or false).
Note that this is equivalent to `bool(expr) is True` and not to `expr is True` (use `assertIs(expr, True)` for the latter). This method should also be avoided when more specific methods are available (e.g. `assertEqual(a, b)` instead of `assertTrue(a == b)`), because they provide a better error message in case of failure. 

assertIs(_first_ , _second_ , _msg =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIs "Link to this definition")


assertIsNot(_first_ , _second_ , _msg =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIsNot "Link to this definition")
    
Test that _first_ and _second_ are (or are not) the same object.
Added in version 3.1. 

assertIsNone(_expr_ , _msg =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIsNone "Link to this definition")


assertIsNotNone(_expr_ , _msg =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIsNotNone "Link to this definition")
    
Test that _expr_ is (or is not) `None`.
Added in version 3.1. 

assertIn(_member_ , _container_ , _msg =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIn "Link to this definition")


assertNotIn(_member_ , _container_ , _msg =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotIn "Link to this definition")
    
Test that _member_ is (or is not) in _container_.
Added in version 3.1. 

assertIsInstance(_obj_ , _cls_ , _msg =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIsInstance "Link to this definition")


assertNotIsInstance(_obj_ , _cls_ , _msg =None_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNotIsInstance "Link to this definition")
    
Test that _obj_ is (or is not) an instance of _cls_ (which can be a class or a tuple of classes, as supported by [`isinstance()`](https://docs.python.org/3/library/functions.html#isinstance "isinstance")). To check for the exact type, use [`assertIs(type(obj), cls)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertIs "unittest.TestCase.assertIs").
Added in version 3.2.
It is also possible to check the production of exceptions, warnings, and log messages using the following methods:
Method | Checks that | New in  
---|---|---  
[`assertRaises(exc, fun, *args, **kwds)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises "unittest.TestCase.assertRaises") | `fun(*args, **kwds)` raises _exc_ |   
[`assertRaisesRegex(exc, r, fun, *args, **kwds)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaisesRegex "unittest.TestCase.assertRaisesRegex") | `fun(*args, **kwds)` raises _exc_ and the message matches regex _r_ | 3.1  
[`assertWarns(warn, fun, *args, **kwds)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertWarns "unittest.TestCase.assertWarns") | `fun(*args, **kwds)` raises _warn_ | 3.2  
[`assertWarnsRegex(warn, r, fun, *args, **kwds)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertWarnsRegex "unittest.TestCase.assertWarnsRegex") | `fun(*args, **kwds)` raises _warn_ and the message matches regex _r_ | 3.2  
[`assertLogs(logger, level)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertLogs "unittest.TestCase.assertLogs") | The `with` block logs on _logger_ with minimum _level_ | 3.4  
[`assertNoLogs(logger, level)`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertNoLogs "unittest.TestCase.assertNoLogs") |  

The `with` block does not log on
     _logger_ with minimum _level_ | 3.10 

assertRaises(_exception_ , _callable_ , _* args_, _** kwds_)[¶](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises "Link to this definition")


assertRaises(_exception_ , _*_ , _msg =None_)
      
Test that an exception is raised when _callable_ is called with any positional or keyword arguments that are also passed to [`assertRaises()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertRaises "unittest.TestCase.assertRaises"). The test passes if _exception_ is raised, is an error if another exception is raised, or fails if no exception is raised. To catch any of a group of exceptions, a tuple containing the exception classes may be passed as _exception_.
If only the _exception_ and possibly the _msg_ arguments are given, return a context manager so that the code under test can be written inline rather than as a function:
```
with self.assertRaises(SomeException):
  do_something()