Title: Using urllib.request with Proxies and Legacy Interface
URL: https://docs.python.org/3/library/urllib.request.html
Summary: This documentation chunk demonstrates how to use the `urllib.request` module to open URLs with and without proxies using `FancyURLopener`. It also notes the existence of a legacy interface that includes functions ported from Python 2, which may become deprecated.
---

```
>>> importurllib.request
>>> proxies = {'http': 'http://proxy.example.com:8080/'}
>>> opener = urllib.request.FancyURLopener(proxies)
>>> with opener.open("http://www.python.org") as f:
...   f.read().decode('utf-8')
...

```

The following example uses no proxies at all, overriding environment settings:
>>>```
>>> importurllib.request
>>> opener = urllib.request.FancyURLopener({})
>>> with opener.open("http://www.python.org/") as f:
...   f.read().decode('utf-8')
...

```

## Legacy interface[¶](https://docs.python.org/3/library/urllib.request.html#legacy-interface "Link to this heading")
The following functions and classes are ported from the Python 2 module `urllib` (as opposed to `urllib2`). They might become deprecated at some point in the future. 

urllib.request.urlretrieve(_url_ , _filename =None_, _reporthook =None_, _data =None_)[¶](https://docs.python.org/3/library/urllib.request.html#urllib.request.urlretrieve "Link to this definition")
    
Copy a network object denoted by a URL to a local file. If the URL points to a local file, the object will not be copied unless filename is supplied. Return a tuple `(filename, headers)` where _filename_ is the local file name under which the object can be found, and _headers_ is whatever the `info()` method of the object returned by [`urlopen()`](https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen "urllib.request.urlopen") returned (for a remote object). Exceptions are the same as for [`urlopen()`](https://docs.python.org/3/library/urllib.request.html#urllib.request.urlopen "urllib.request.urlopen").
The second argument, if present, specifies the file location to copy to (if absent, the location will be a tempfile with a generated name). The third argument, if present, is a callable that will be called once on establishment of the network connection and once after each block read thereafter. The callable will be passed three arguments; a count of blocks transferred so far, a block size in bytes, and the total size of the file. The third argument may be `-1` on older FTP servers which do not return a file size in response to a retrieval request.
The following example illustrates the most common usage scenario:
>>>```
>>> importurllib.request
>>> local_filename, headers = urllib.request.urlretrieve('http://python.org/')
>>> html = open(local_filename)
>>> html.close()