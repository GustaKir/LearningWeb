Title: Using `rotate()` for Deque Manipulations
URL: https://docs.python.org/3/library/collections.html
Summary: The `rotate()` method enables slicing and deletion in `deque`. A custom implementation of `del d[n]` is shown, utilizing `rotate()` to adjust positions before applying `popleft()`. Additionally, `rotate()` can be used for slicing by moving a target element to the front before removal with `popleft()`.
---

```

The [`rotate()`](https://docs.python.org/3/library/collections.html#collections.deque.rotate "collections.deque.rotate") method provides a way to implement [`deque`](https://docs.python.org/3/library/collections.html#collections.deque "collections.deque") slicing and deletion. For example, a pure Python implementation of `del d[n]` relies on the `rotate()` method to position elements to be popped:
```
defdelete_nth(d, n):
  d.rotate(-n)
  d.popleft()
  d.rotate(n)

```

To implement [`deque`](https://docs.python.org/3/library/collections.html#collections.deque "collections.deque") slicing, use a similar approach applying [`rotate()`](https://docs.python.org/3/library/collections.html#collections.deque.rotate "collections.deque.rotate") to bring a target element to the left side of the deque. Remove old entries with [`popleft()`](https://docs.python.org/3/library/collections.html#collections.deque.popleft "collections.deque.popleft"), add new entries with [`extend()`](https://docs.python.org/3/library/collections.html#collections.deque.extend "collections.deque.extend"), and then reverse the rotation. With minor variations on that approach, it is easy to implement Forth style stack manipulations such as `dup`, `drop`, `swap`, `over`, `pick`, `rot`, and `roll`.
## [`defaultdict`](https://docs.python.org/3/library/collections.html#collections.defaultdict "collections.defaultdict") objects[¶](https://docs.python.org/3/library/collections.html#defaultdict-objects "Link to this heading") 

_class_ collections.defaultdict(_default_factory=None_ , _/_[, _..._])[¶](https://docs.python.org/3/library/collections.html#collections.defaultdict "Link to this definition")
    
Return a new dictionary-like object. [`defaultdict`](https://docs.python.org/3/library/collections.html#collections.defaultdict "collections.defaultdict") is a subclass of the built-in [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") class. It overrides one method and adds one writable instance variable. The remaining functionality is the same as for the [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") class and is not documented here.
The first argument provides the initial value for the [`default_factory`](https://docs.python.org/3/library/collections.html#collections.defaultdict.default_factory "collections.defaultdict.default_factory") attribute; it defaults to `None`. All remaining arguments are treated the same as if they were passed to the [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") constructor, including keyword arguments.
[`defaultdict`](https://docs.python.org/3/library/collections.html#collections.defaultdict "collections.defaultdict") objects support the following method in addition to the standard [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") operations: