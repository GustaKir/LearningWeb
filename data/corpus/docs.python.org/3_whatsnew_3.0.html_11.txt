Title: Changes to Exceptions in Python 3.0
URL: https://docs.python.org/3/whatsnew/3.0.html
Summary: Python 3.0 introduces significant changes to exception handling. Key improvements include a requirement for all exceptions to derive from BaseException, effectively eliminating string exceptions. The focus is on enhancing the exception hierarchy, ensuring all exceptions are properly derived, which aligns with the principles of PEP 352.
---

## Changes To Exceptions[Â¶](https://docs.python.org/3/whatsnew/3.0.html#changes-to-exceptions "Link to this heading")
The APIs for raising and catching exception have been cleaned up and new powerful features added:
  * [**PEP 352**](https://peps.python.org/pep-0352/): All exceptions must be derived (directly or indirectly) from [`BaseException`](https://docs.python.org/3/library/exceptions.html#BaseException "BaseException"). This is the root of the exception hierarchy. This is not new as a recommendation, but the _requirement_ to inherit from [`BaseException`](https://docs.python.org/3/library/exceptions.html#BaseException "BaseException") is new. (Python 2.6 still allowed classic classes to be raised, and placed no restriction on what you can catch.) As a consequence, string exceptions are finally truly and utterly dead.
  * Almost all exceptions should actually derive from [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception "Exception"); [`BaseException`](https://docs.python.org/3/library/exceptions.html#BaseException "BaseException") should only be used as a base class for exceptions that should only be handled at the top level, such as [`SystemExit`](https://docs.python.org/3/library/exceptions.html#SystemExit "SystemExit") or [`KeyboardInterrupt`](https://docs.python.org/3/library/exceptions.html#KeyboardInterrupt "KeyboardInterrupt"). The recommended idiom for handling all exceptions except for this latter category is to use [`except`](https://docs.python.org/3/reference/compound_stmts.html#except) [`Exception`](https://docs.python.org/3/library/exceptions.html#Exception "Exception").
  * `StandardError` was removed.
  * Exceptions no longer behave as sequences. Use the [`args`](https://docs.python.org/3/library/exceptions.html#BaseException.args "BaseException.args") attribute instead.
  * [**PEP 3109**](https://peps.python.org/pep-3109/): Raising exceptions. You must now use `raise _Exception_(_args_)`instead of`raise  _Exception_, _args_`. Additionally, you can no longer explicitly specify a traceback; instead, if you _have_ to do this, you can assign directly to the [`__traceback__`](https://docs.python.org/3/library/exceptions.html#BaseException.__traceback__ "BaseException.__traceback__") attribute (see below).
  * [**PEP 3110**](https://peps.python.org/pep-3110/): Catching exceptions. You must now use `except _SomeException_ as _variable_`instead of`except  _SomeException_, _variable_`. Moreover, the _variable_ is explicitly deleted when the [`except`](https://docs.python.org/3/reference/compound_stmts.html#except) block is left.
  * [**PEP 3134**](https://peps.python.org/pep-3134/): Exception chaining. There are two cases: implicit chaining and explicit chaining. Implicit chaining happens when an exception is raised in an [`except`](https://docs.python.org/3/reference/compound_stmts.html#except) or [`finally`](https://docs.python.org/3/reference/compound_stmts.html#finally) handler block. This usually happens due to a bug in the handler block; we call this a _secondary_ exception. In this case, the original exception (that was being handled) is saved as the [`__context__`](https://docs.python.org/3/library/exceptions.html#BaseException.__context__ "BaseException.__context__") attribute of the secondary exception. Explicit chaining is invoked with this syntax:
```
raise SecondaryException() fromprimary_exception