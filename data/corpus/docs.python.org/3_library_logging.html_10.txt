Title: Logging Module: formatTime Method
URL: https://docs.python.org/3/library/logging.html
Summary: The formatTime method in the logging module formats the creation time of a log record. It can be customized by overriding in formatters. If a datefmt string is provided, it uses time.strftime() for formatting; otherwise, it defaults to 'YYYY-MM-DD HH:MM:SS,uuu'.
---

formatTime(_record_ , _datefmt =None_)[¶](https://docs.python.org/3/library/logging.html#logging.Formatter.formatTime "Link to this definition")
    
This method should be called from [`format()`](https://docs.python.org/3/library/functions.html#format "format") by a formatter which wants to make use of a formatted time. This method can be overridden in formatters to provide for any specific requirement, but the basic behavior is as follows: if _datefmt_ (a string) is specified, it is used with [`time.strftime()`](https://docs.python.org/3/library/time.html#time.strftime "time.strftime") to format the creation time of the record. Otherwise, the format ‘%Y-%m-%d %H:%M:%S,uuu’ is used, where the uuu part is a millisecond value and the other letters are as per the [`time.strftime()`](https://docs.python.org/3/library/time.html#time.strftime "time.strftime") documentation. An example time in this format is `2003-01-23 00:29:50,411`. The resulting string is returned.
This function uses a user-configurable function to convert the creation time to a tuple. By default, [`time.localtime()`](https://docs.python.org/3/library/time.html#time.localtime "time.localtime") is used; to change this for a particular formatter instance, set the `converter` attribute to a function with the same signature as [`time.localtime()`](https://docs.python.org/3/library/time.html#time.localtime "time.localtime") or [`time.gmtime()`](https://docs.python.org/3/library/time.html#time.gmtime "time.gmtime"). To change it for all formatters, for example if you want all logging times to be shown in GMT, set the `converter` attribute in the `Formatter` class.
Changed in version 3.3: Previously, the default format was hard-coded as in this example: `2010-09-06 22:38:15,292` where the part before the comma is handled by a strptime format string (`'%Y-%m-%d %H:%M:%S'`), and the part after the comma is a millisecond value. Because strptime does not have a format placeholder for milliseconds, the millisecond value is appended using another format string, `'%s,%03d'` — and both of these format strings have been hardcoded into this method. With the change, these strings are defined as class-level attributes which can be overridden at the instance level when desired. The names of the attributes are `default_time_format` (for the strptime format string) and `default_msec_format` (for appending the millisecond value).
Changed in version 3.9: The `default_msec_format` can be `None`. 

formatException(_exc_info_)[¶](https://docs.python.org/3/library/logging.html#logging.Formatter.formatException "Link to this definition")
    
Formats the specified exception information (a standard exception tuple as returned by [`sys.exc_info()`](https://docs.python.org/3/library/sys.html#sys.exc_info "sys.exc_info")) as a string. This default implementation just uses [`traceback.print_exception()`](https://docs.python.org/3/library/traceback.html#traceback.print_exception "traceback.print_exception"). The resulting string is returned. 

formatStack(_stack_info_)[¶](https://docs.python.org/3/library/logging.html#logging.Formatter.formatStack "Link to this definition")
    
Formats the specified stack information (a string as returned by [`traceback.print_stack()`](https://docs.python.org/3/library/traceback.html#traceback.print_stack "traceback.print_stack"), but with the last newline removed) as a string. This default implementation just returns the input value. 

_class_ logging.BufferingFormatter(_linefmt =None_)[¶](https://docs.python.org/3/library/logging.html#logging.BufferingFormatter "Link to this definition")
    
A base formatter class suitable for subclassing when you want to format a number of records. You can pass a [`Formatter`](https://docs.python.org/3/library/logging.html#logging.Formatter "logging.Formatter") instance which you want to use to format each line (that corresponds to a single record). If not specified, the default formatter (which just outputs the event message) is used as the line formatter. 

formatHeader(_records_)[¶](https://docs.python.org/3/library/logging.html#logging.BufferingFormatter.formatHeader "Link to this definition")
    
Return a header for a list of _records_. The base implementation just returns the empty string. You will need to override this method if you want specific behaviour, e.g. to show the count of records, a title or a separator line. 

formatFooter(_records_)[¶](https://docs.python.org/3/library/logging.html#logging.BufferingFormatter.formatFooter "Link to this definition")
    
Return a footer for a list of _records_. The base implementation just returns the empty string. You will need to override this method if you want specific behaviour, e.g. to show the count of records or a separator line.