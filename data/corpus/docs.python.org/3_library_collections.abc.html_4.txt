Title: Abstract Base Classes in Collections Module
URL: https://docs.python.org/3/library/collections.abc.html
Summary: This section discusses the Abstract Base Classes (ABCs) in the collections module and their implementation of `__subclasshook__()` to facilitate interface testing.
---

.org/3/library/collections.abc.html#id4),[4](https://docs.python.org/3/library/collections.abc.html#id6),[5](https://docs.python.org/3/library/collections.abc.html#id7),[6](https://docs.python.org/3/library/collections.abc.html#id8),[7](https://docs.python.org/3/library/collections.abc.html#id9),[8](https://docs.python.org/3/library/collections.abc.html#id10),[9](https://docs.python.org/3/library/collections.abc.html#id11),[10](https://docs.python.org/3/library/collections.abc.html#id12),[11](https://docs.python.org/3/library/collections.abc.html#id13),[12](https://docs.python.org/3/library/collections.abc.html#id14),[13](https://docs.python.org/3/library/collections.abc.html#id15),[14](https://docs.python.org/3/library/collections.abc.html#id16),[15](https://docs.python.org/3/library/collections.abc.html#id17))
These ABCs override [`__subclasshook__()`](https://docs.python.org/3/library/abc.html#abc.ABCMeta.__subclasshook__ "abc.ABCMeta.__subclasshook__") to support testing an interface by verifying the required methods are present and have not been set to [`None`](https://docs.python.org/3/library/constants.html#None "None"). This only works for simple interfaces. More complex interfaces require registration or direct subclassing.
[[2](https://docs.python.org/3/library/collections.abc.html#id5)]
Checking `isinstance(obj, Iterable)` detects classes that are registered as [`Iterable`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterable "collections.abc.Iterable") or that have an [`__iter__()`](https://docs.python.org/3/library/stdtypes.html#container.__iter__ "container.__iter__") method, but it does not detect classes that iterate with the [`__getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__getitem__ "object.__getitem__") method. The only reliable way to determine whether an object is [iterable](https://docs.python.org/3/glossary.html#term-iterable) is to call `iter(obj)`.
## Collections Abstract Base Classes – Detailed Descriptions[¶](https://docs.python.org/3/library/collections.abc.html#collections-abstract-base-classes-detailed-descriptions "Link to this heading") 

_class_ collections.abc.Container[¶](https://docs.python.org/3/library/collections.abc.html#collections.abc.Container "Link to this definition")
    
ABC for classes that provide the [`__contains__()`](https://docs.python.org/3/reference/datamodel.html#object.__contains__ "object.__contains__") method. 

_class_ collections.abc.Hashable[¶](https://docs.python.org/3/library/collections.abc.html#collections.abc.Hashable "Link to this definition")
    
ABC for classes that provide the [`__hash__()`](https://docs.python.org/3/reference/datamodel.html#object.__hash__ "object.__hash__") method. 

_class_ collections.abc.Sized[¶](https://docs.python.org/3/library/collections.abc.html#collections.abc.Sized "Link to this definition")
    
ABC for classes that provide the [`__len__()`](https://docs.python.org/3/reference/datamodel.html#object.__len__ "object.__len__") method. 

_class_ collections.abc.Callable[¶](https://docs.python.org/3/library/collections.abc.html#collections.abc.Callable "Link to this definition")
    
ABC for classes that provide the [`__call__()`](https://docs.python.org/3/reference/datamodel.html#object.__call__ "object.__call__") method.
See [Annotating callable objects](https://docs.python.org/3/library/typing.html#annotating-callables) for details on how to use `Callable` in type annotations. 

_class_ collections.abc.Iterable[¶](https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterable "Link to this definition")
    
ABC for classes that provide the [`__iter__()`](https://docs.python.org/3/library/stdtypes.html#container.__iter__ "container.__iter__") method.
Checking `isinstance(obj, Iterable)` detects classes that are registered as [`Iterable`](https://docs.python.org/3/library/collections.abc.html#collections.abc.Iterable "collections.abc.Iterable") or that have an [`__iter__()`](https://docs.python.org/3/library/stdtypes.html#container.__iter__ "container.__iter__") method, but it does not detect classes that iterate with the [`__getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__getitem__ "object.__getitem__") method. The only reliable way to determine whether an object is [iterable](https://docs.python.org/3/glossary.html#term-iterable) is to call `iter(obj)`. 

_class_ collections.abc.Collection[¶](https://docs.python.org/3/library/collections.abc.html#collections.abc.Collection "Link to this definition")
    
ABC for sized iterable container classes.
Added in version 3.6.