Title: Python 3 Change Log Updates
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section highlights recent updates and bug fixes, including the implementation of `asyncio.create_task(coro)` and the conversion of certain asyncio functions to coroutines. It also notes changes to `urllib.parse.urlsplit()` regarding zone-id handling for scoped IPv6 addresses, and fixes related to the `bdist_wininst` of distutils for compatibility with CRT v140.
---

and access") as the port of `importlib_resources`.
  * [bpo-32311](https://bugs.python.org/issue?@action=redirect&bpo=32311): Implement asyncio.create_task(coro) shortcut
  * [bpo-32327](https://bugs.python.org/issue?@action=redirect&bpo=32327): Convert asyncio functions that were documented as coroutines to coroutines. Affected functions: loop.sock_sendall, loop.sock_recv, loop.sock_accept, loop.getaddrinfo, loop.getnameinfo.
  * [bpo-32323](https://bugs.python.org/issue?@action=redirect&bpo=32323): [`urllib.parse.urlsplit()`](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.urlsplit "urllib.parse.urlsplit") does not convert zone-id (scope) to lower case for scoped IPv6 addresses in hostnames now.
  * [bpo-32302](https://bugs.python.org/issue?@action=redirect&bpo=32302): Fix bdist_wininst of distutils for CRT v142: it binary compatible with CRT v140.
  * [bpo-29711](https://bugs.python.org/issue?@action=redirect&bpo=29711): Fix `stop_serving` in asyncio proactor loop kill all listening servers
  * [bpo-32308](https://bugs.python.org/issue?@action=redirect&bpo=32308): [`re.sub()`](https://docs.python.org/3/library/re.html#re.sub "re.sub") now replaces empty matches adjacent to a previous non-empty match.
  * [bpo-29970](https://bugs.python.org/issue?@action=redirect&bpo=29970): Abort asyncio SSLProtocol connection if handshake not complete within 10 seconds.
  * [bpo-32314](https://bugs.python.org/issue?@action=redirect&bpo=32314): Implement asyncio.run().
  * [bpo-17852](https://bugs.python.org/issue?@action=redirect&bpo=17852): Revert incorrect fix based on misunderstanding of _Py_PyAtExit() semantics.
  * [bpo-32296](https://bugs.python.org/issue?@action=redirect&bpo=32296): Implement asyncio._get_running_loop() and get_event_loop() in C. This makes them 4x faster.
  * [bpo-32250](https://bugs.python.org/issue?@action=redirect&bpo=32250): Implement `asyncio.current_task()` and `asyncio.all_tasks()`. Add helpers intended to be used by alternative task implementations: `asyncio._register_task`, `asyncio._enter_task`, `asyncio._leave_task` and `asyncio._unregister_task`. Deprecate `asyncio.Task.current_task()` and `asyncio.Task.all_tasks()`.
  * [bpo-32255](https://bugs.python.org/issue?@action=redirect&bpo=32255): A single empty field is now always quoted when written into a CSV file. This allows to distinguish an empty row from a row consisting of a single empty field. Patch by Licht Takeuchi.
  * [bpo-32277](https://bugs.python.org/issue?@action=redirect&bpo=32277): Raise `NotImplementedError` instead of `SystemError` on platforms where `chmod(..., follow_symlinks=False)` is not supported. Patch by Anthony Sottile.
  * [bpo-30050](https://bugs.python.org/issue?@action=redirect&bpo=30050): New argument warn_on_full_buffer to signal.set_wakeup_fd lets you control whether Python prints a warning on stderr when the wakeup fd buffer overflows.
  * [bpo-29137](https://bugs.python.org/issue?@action=redirect&bpo=29137): The `fpectl` library has been removed. It was never enabled by default, never worked correctly on x86-64, and it changed the Python ABI in ways that caused unexpected breakage of C extensions.
  * [bpo-32273](https://bugs.python.org/issue?@action=redirect&bpo=32273): Move asyncio.test_utils to test.test_asyncio.
  * [bpo-32272](https://bugs.python.org/issue?@action=redirect&bpo=32272): Remove asyncio.async() function.
  * [bpo-32269](https://bugs.python.org/issue?@action=redirect&bpo=32269): Add asyncio.get_running_loop() function.
  * [bpo-32265](https://bugs.python.org/issue?@action=redirect&bpo=32265): All class and static methods of builtin types now are correctly classified by inspect.classify_class_attrs() and grouped in pydoc ouput. Added types.ClassMethodDescriptorType for unbound class methods of builtin types.
  * [bpo-32253](https://bugs.python.org/issue?@action=redirect&bpo=32253): Deprecate `yield from lock`, `await lock`, `with (yield from lock)` and `with await lock` for asyncio synchronization primitives.
  * [bpo-22589](https://bugs.python.org/issue?@action=redirect&bpo=22589): Changed MIME type of .bmp from ‘image/x-ms-bmp’ to ‘image/bmp’
  * [bpo-32193](https://bugs.python.org/issue?@action=redirect&bpo=32193): Convert asyncio to use _async/await_ syntax.