Title: Python C API: Py_GetConstantBorrowed Function
URL: https://docs.python.org/3/c-api/object.html
Summary: The `Py_GetConstantBorrowed` function was introduced in version 3.13 as part of the Stable ABI. It returns a borrowed reference similar to `Py_GetConstant`, aimed at maintaining backward compatibility. It’s recommended to use `Py_GetConstant` for new code, as the reference returned is valid until the interpreter is finalized.
---

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*Py_GetConstantBorrowed(unsignedintconstant_id)[¶](https://docs.python.org/3/c-api/object.html#c.Py_GetConstantBorrowed "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.13._
Similar to [`Py_GetConstant()`](https://docs.python.org/3/c-api/object.html#c.Py_GetConstant "Py_GetConstant"), but return a [borrowed reference](https://docs.python.org/3/glossary.html#term-borrowed-reference).
This function is primarily intended for backwards compatibility: using [`Py_GetConstant()`](https://docs.python.org/3/c-api/object.html#c.Py_GetConstant "Py_GetConstant") is recommended for new code.
The reference is borrowed from the interpreter, and is valid until the interpreter finalization.
Added in version 3.13. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*Py_NotImplemented[¶](https://docs.python.org/3/c-api/object.html#c.Py_NotImplemented "Link to this definition")
    
The `NotImplemented` singleton, used to signal that an operation is not implemented for the given type combination. 

Py_RETURN_NOTIMPLEMENTED[¶](https://docs.python.org/3/c-api/object.html#c.Py_RETURN_NOTIMPLEMENTED "Link to this definition")
    
Properly handle returning [`Py_NotImplemented`](https://docs.python.org/3/c-api/object.html#c.Py_NotImplemented "Py_NotImplemented") from within a C function (that is, create a new [strong reference](https://docs.python.org/3/glossary.html#term-strong-reference) to [`NotImplemented`](https://docs.python.org/3/library/constants.html#NotImplemented "NotImplemented") and return it). 

Py_PRINT_RAW[¶](https://docs.python.org/3/c-api/object.html#c.Py_PRINT_RAW "Link to this definition")
    
Flag to be used with multiple functions that print the object (like [`PyObject_Print()`](https://docs.python.org/3/c-api/object.html#c.PyObject_Print "PyObject_Print") and [`PyFile_WriteObject()`](https://docs.python.org/3/c-api/file.html#c.PyFile_WriteObject "PyFile_WriteObject")). If passed, these function would use the [`str()`](https://docs.python.org/3/library/stdtypes.html#str "str") of the object instead of the [`repr()`](https://docs.python.org/3/library/functions.html#repr "repr"). 

intPyObject_Print([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o, FILE*fp, intflags)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_Print "Link to this definition")
    
Print an object _o_ , on file _fp_. Returns `-1` on error. The flags argument is used to enable certain printing options. The only option currently supported is [`Py_PRINT_RAW`](https://docs.python.org/3/c-api/object.html#c.Py_PRINT_RAW "Py_PRINT_RAW"); if given, the [`str()`](https://docs.python.org/3/library/stdtypes.html#str "str") of the object is written instead of the [`repr()`](https://docs.python.org/3/library/functions.html#repr "repr"). 

intPyObject_HasAttrWithError([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*attr_name)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_HasAttrWithError "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.13._
Returns `1` if _o_ has the attribute _attr_name_ , and `0` otherwise. This is equivalent to the Python expression `hasattr(o, attr_name)`. On failure, return `-1`.
Added in version 3.13. 

intPyObject_HasAttrStringWithError([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*o, constchar*attr_name)[¶](https://docs.python.org/3/c-api/object.html#c.PyObject_HasAttrStringWithError "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.13._
This is the same as [`PyObject_HasAttrWithError()`](https://docs.python.org/3/c-api/object.html#c.PyObject_HasAttrWithError "PyObject_HasAttrWithError"), but _attr_name_ is specified as a constchar* UTF-8 encoded bytes string, rather than a [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*.
Added in version 3.13.