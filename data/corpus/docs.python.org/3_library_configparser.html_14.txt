Title: ConfigParser - Configuration File Details
URL: https://docs.python.org/3/library/configparser.html
Summary: This section discusses the behavior of the ConfigParser module in Python regarding whitespace handling, unnamed sections, and the maximum interpolation depth for recursive interpolation in configuration files.
---

```

Note that when reading configuration files, whitespace around the option names is stripped before [`optionxform()`](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.optionxform "configparser.ConfigParser.optionxform") is called. 

configparser.UNNAMED_SECTION[¶](https://docs.python.org/3/library/configparser.html#configparser.UNNAMED_SECTION "Link to this definition")
    
A special object representing a section name used to reference the unnamed section (see [Unnamed Sections](https://docs.python.org/3/library/configparser.html#unnamed-sections)). 

configparser.MAX_INTERPOLATION_DEPTH[¶](https://docs.python.org/3/library/configparser.html#configparser.MAX_INTERPOLATION_DEPTH "Link to this definition")
    
The maximum depth for recursive interpolation for [`get()`](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser.get "configparser.ConfigParser.get") when the _raw_ parameter is false. This is relevant only when the default _interpolation_ is used.
## RawConfigParser Objects[¶](https://docs.python.org/3/library/configparser.html#rawconfigparser-objects "Link to this heading") 

_class_ configparser.RawConfigParser(_defaults =None_, _dict_type =dict_, _allow_no_value =False_, _*_ , _delimiters =('=', ':')_, _comment_prefixes =('#', ';')_, _inline_comment_prefixes =None_, _strict =True_, _empty_lines_in_values =True_, _default_section =configparser.DEFAULTSECT_, _interpolation =BasicInterpolation()_, _converters ={}_, _allow_unnamed_section =False_)[¶](https://docs.python.org/3/library/configparser.html#configparser.RawConfigParser "Link to this definition")
    
Legacy variant of the [`ConfigParser`](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser "configparser.ConfigParser"). It has interpolation disabled by default and allows for non-string section names, option names, and values via its unsafe `add_section` and `set` methods, as well as the legacy `defaults=` keyword argument handling.
Changed in version 3.2: _allow_no_value_ , _delimiters_ , _comment_prefixes_ , _strict_ , _empty_lines_in_values_ , _default_section_ and _interpolation_ were added.
Changed in version 3.5: The _converters_ argument was added.
Changed in version 3.8: The default _dict_type_ is [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict"), since it now preserves insertion order.
Changed in version 3.13: The _allow_unnamed_section_ argument was added.
Note
Consider using [`ConfigParser`](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser "configparser.ConfigParser") instead which checks types of the values to be stored internally. If you don’t want interpolation, you can use `ConfigParser(interpolation=None)`. 

add_section(_section_)[¶](https://docs.python.org/3/library/configparser.html#configparser.RawConfigParser.add_section "Link to this definition")
    
Add a section named _section_ to the instance. If a section by the given name already exists, [`DuplicateSectionError`](https://docs.python.org/3/library/configparser.html#configparser.DuplicateSectionError "configparser.DuplicateSectionError") is raised. If the _default section_ name is passed, [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") is raised.
Type of _section_ is not checked which lets users create non-string named sections. This behaviour is unsupported and may cause internal errors. 

set(_section_ , _option_ , _value_)[¶](https://docs.python.org/3/library/configparser.html#configparser.RawConfigParser.set "Link to this definition")
    
If the given section exists, set the given option to the specified value; otherwise raise [`NoSectionError`](https://docs.python.org/3/library/configparser.html#configparser.NoSectionError "configparser.NoSectionError"). While it is possible to use [`RawConfigParser`](https://docs.python.org/3/library/configparser.html#configparser.RawConfigParser "configparser.RawConfigParser") (or [`ConfigParser`](https://docs.python.org/3/library/configparser.html#configparser.ConfigParser "configparser.ConfigParser") with _raw_ parameters set to true) for _internal_ storage of non-string values, full functionality (including interpolation and output to files) can only be achieved using string values.
This method lets users assign non-string values to keys internally. This behaviour is unsupported and will cause errors when attempting to write to a file or get it in non-raw mode. **Use the mapping protocol API** which does not allow such assignments to take place.
## Exceptions[¶](https://docs.python.org/3/library/configparser.html#exceptions "Link to this heading")