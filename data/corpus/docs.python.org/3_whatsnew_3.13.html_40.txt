Title: Python 3.13 Release Notes
URL: https://docs.python.org/3/whatsnew/3.13.html
Summary: This document summarizes changes in Python 3.13, including deprecations like `zipimport.zipimporter.load_module()` in favor of `exec_module()`, and modifications to CPython bytecode such as updates to the `YIELD_VALUE` and `RESUME` opcodes for better generator closure optimization.
---

Prefer explicit `len(elem)` or `elem is not None` tests instead.
  * [`zipimport.zipimporter.load_module()`](https://docs.python.org/3/library/zipimport.html#zipimport.zipimporter.load_module "zipimport.zipimporter.load_module") is deprecated: use [`exec_module()`](https://docs.python.org/3/library/zipimport.html#zipimport.zipimporter.exec_module "zipimport.zipimporter.exec_module") instead.


## CPython Bytecode Changes[¶](https://docs.python.org/3/whatsnew/3.13.html#cpython-bytecode-changes "Link to this heading")
  * The oparg of [`YIELD_VALUE`](https://docs.python.org/3/library/dis.html#opcode-YIELD_VALUE) is now `1` if the yield is part of a yield-from or await, and `0` otherwise. The oparg of [`RESUME`](https://docs.python.org/3/library/dis.html#opcode-RESUME) was changed to add a bit indicating if the except-depth is 1, which is needed to optimize closing of generators. (Contributed by Irit Katriel in [gh-111354](https://github.com/python/cpython/issues/111354).)


## C API Changes[¶](https://docs.python.org/3/whatsnew/3.13.html#c-api-changes "Link to this heading")
### New Features[¶](https://docs.python.org/3/whatsnew/3.13.html#id7 "Link to this heading")
  * Add the [PyMonitoring C API](https://docs.python.org/3/c-api/monitoring.html#c-api-monitoring) for generating [**PEP 669**](https://peps.python.org/pep-0669/) monitoring events:
    * [`PyMonitoringState`](https://docs.python.org/3/c-api/monitoring.html#c.PyMonitoringState "PyMonitoringState")
    * [`PyMonitoring_FirePyStartEvent()`](https://docs.python.org/3/c-api/monitoring.html#c.PyMonitoring_FirePyStartEvent "PyMonitoring_FirePyStartEvent")
    * [`PyMonitoring_FirePyResumeEvent()`](https://docs.python.org/3/c-api/monitoring.html#c.PyMonitoring_FirePyResumeEvent "PyMonitoring_FirePyResumeEvent")
    * [`PyMonitoring_FirePyReturnEvent()`](https://docs.python.org/3/c-api/monitoring.html#c.PyMonitoring_FirePyReturnEvent "PyMonitoring_FirePyReturnEvent")
    * [`PyMonitoring_FirePyYieldEvent()`](https://docs.python.org/3/c-api/monitoring.html#c.PyMonitoring_FirePyYieldEvent "PyMonitoring_FirePyYieldEvent")
    * [`PyMonitoring_FireCallEvent()`](https://docs.python.org/3/c-api/monitoring.html#c.PyMonitoring_FireCallEvent "PyMonitoring_FireCallEvent")
    * [`PyMonitoring_FireLineEvent()`](https://docs.python.org/3/c-api/monitoring.html#c.PyMonitoring_FireLineEvent "PyMonitoring_FireLineEvent")
    * [`PyMonitoring_FireJumpEvent()`](https://docs.python.org/3/c-api/monitoring.html#c.PyMonitoring_FireJumpEvent "PyMonitoring_FireJumpEvent")
    * [`PyMonitoring_FireBranchEvent()`](https://docs.python.org/3/c-api/monitoring.html#c.PyMonitoring_FireBranchEvent "PyMonitoring_FireBranchEvent")
    * [`PyMonitoring_FireCReturnEvent()`](https://docs.python.org/3/c-api/monitoring.html#c.PyMonitoring_FireCReturnEvent "PyMonitoring_FireCReturnEvent")
    * [`PyMonitoring_FirePyThrowEvent()`](https://docs.python.org/3/c-api/monitoring.html#c.PyMonitoring_FirePyThrowEvent "PyMonitoring_FirePyThrowEvent")
    * [`PyMonitoring_FireRaiseEvent()`](https://docs.python.org/3/c-api/monitoring.html#c.PyMonitoring_FireRaiseEvent "PyMonitoring_FireRaiseEvent")
    * [`PyMonitoring_FireCRaiseEvent()`](https://docs.python.org/3/c-api/monitoring.html#c.PyMonitoring_FireCRaiseEvent "PyMonitoring_FireCRaiseEvent")
    * [`PyMonitoring_FireReraiseEvent()`](https://docs.python.org/3/c-api/monitoring.html#c.PyMonitoring_FireReraiseEvent "PyMonitoring_FireReraiseEvent")
    * [`PyMonitoring_FireExceptionHandledEvent()`](https://docs.python.org/3/c-api/monitoring.html#c.PyMonitoring_FireExceptionHandledEvent "PyMonitoring_FireExceptionHandledEvent")
    * [`PyMonitoring_FirePyUnwindEvent()`](https://docs.python.org/3/c-api/monitoring.html#c.PyMonitoring_FirePyUnwindEvent "PyMonitoring_FirePyUnwindEvent")
    * [`PyMonitoring_FireStopIterationEvent()`](https://docs.python.org/3/c-api/monitoring.html#c.PyMonitoring_FireStopIterationEvent "PyMonitoring_FireStopIterationEvent")
    * [`PyMonitoring_EnterScope()`](https://docs.python.org/3/c-api/monitoring.html#c.PyMonitoring_EnterScope "PyMonitoring_EnterScope")
    * [`PyMonitoring_ExitScope()`](https://docs.python.org/3/c-api/monitoring.html#c.PyMonitoring_ExitScope "PyMonitoring_ExitScope")
(Contributed by Irit Katriel in [gh-111997](https://github.com/python/cpython/issues/111997)).
  * Add [`PyMutex`](https://docs.python.org/3/c-api/init.html#c.PyMutex "PyMutex"), a lightweight mutex that occupies a single byte, and the new [`PyMutex_Lock()`](https://docs.python.org/3/c-api/init.html#c.PyMutex_Lock "PyMutex_Lock") and [`PyMutex_Unlock()`](https://docs.python.org/3/c-api/init.html#c.PyMutex_Unlock "PyMutex_Unlock") functions. `PyMutex_Lock()` will release the [GIL](https://docs.python.org/3/glossary.html#term-GIL) (if currently held) if the operation needs to block. (Contributed by Sam Gross in [gh-108724](https://github.com/python/cpython/issues/108724).)
  * Add the [PyTime C API](https://docs.python.org/3/c-api/time.html#c-