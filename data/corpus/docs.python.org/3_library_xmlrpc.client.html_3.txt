Title: ServerProxy Method Signature Retrieval
URL: https://docs.python.org/3/library/xmlrpc.client.html
Summary: The ServerProxy.system.methodSignature method retrieves possible signatures for a specified XML-RPC server method, returning an array that includes the return type followed by parameter types. It accommodates multiple signatures for overloading, allowing for flexibility in method definition. If no signature is provided, a non-array value is returned.
---

ServerProxy.system.methodSignature(_name_)[¶](https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.ServerProxy.system.methodSignature "Link to this definition")
    
This method takes one parameter, the name of a method implemented by the XML-RPC server. It returns an array of possible signatures for this method. A signature is an array of types. The first of these types is the return type of the method, the rest are parameters.
Because multiple signatures (ie. overloading) is permitted, this method returns a list of signatures rather than a singleton.
Signatures themselves are restricted to the top level parameters expected by a method. For instance if a method expects one array of structs as a parameter, and it returns a string, its signature is simply “string, array”. If it expects three integers and returns a string, its signature is “string, int, int, int”.
If no signature is defined for the method, a non-array value is returned. In Python this means that the type of the returned value will be something other than list. 

ServerProxy.system.methodHelp(_name_)[¶](https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.ServerProxy.system.methodHelp "Link to this definition")
    
This method takes one parameter, the name of a method implemented by the XML-RPC server. It returns a documentation string describing the use of that method. If no such string is available, an empty string is returned. The documentation string may contain HTML markup.
Changed in version 3.5: Instances of [`ServerProxy`](https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.ServerProxy "xmlrpc.client.ServerProxy") support the [context manager](https://docs.python.org/3/glossary.html#term-context-manager) protocol for closing the underlying transport.
A working example follows. The server code:
```
fromxmlrpc.serverimport SimpleXMLRPCServer
defis_even(n):
  return n % 2 == 0
server = SimpleXMLRPCServer(("localhost", 8000))
print("Listening on port 8000...")
server.register_function(is_even, "is_even")
server.serve_forever()

```

The client code for the preceding server:
```
importxmlrpc.client
with xmlrpc.client.ServerProxy("http://localhost:8000/") as proxy:
  print("3 is even: %s" % str(proxy.is_even(3)))
  print("100 is even: %s" % str(proxy.is_even(100)))

```

## DateTime Objects[¶](https://docs.python.org/3/library/xmlrpc.client.html#datetime-objects "Link to this heading") 

_class_ xmlrpc.client.DateTime[¶](https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.DateTime "Link to this definition")
    
This class may be initialized with seconds since the epoch, a time tuple, an ISO 8601 time/date string, or a [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") instance. It has the following methods, supported mainly for internal use by the marshalling/unmarshalling code: 

decode(_string_)[¶](https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.DateTime.decode "Link to this definition")
    
Accept a string as the instance’s new time value. 

encode(_out_)[¶](https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.DateTime.encode "Link to this definition")
    
Write the XML-RPC encoding of this [`DateTime`](https://docs.python.org/3/library/xmlrpc.client.html#xmlrpc.client.DateTime "xmlrpc.client.DateTime") item to the _out_ stream object.
It also supports certain of Python’s built-in operators through [`rich comparison`](https://docs.python.org/3/reference/datamodel.html#object.__lt__ "object.__lt__") and [`__repr__()`](https://docs.python.org/3/reference/datamodel.html#object.__repr__ "object.__repr__") methods.
A working example follows. The server code:
```
importdatetime
fromxmlrpc.serverimport SimpleXMLRPCServer
importxmlrpc.client
deftoday():
  today = datetime.datetime.today()
  return xmlrpc.client.DateTime(today)
server = SimpleXMLRPCServer(("localhost", 8000))
print("Listening on port 8000...")
server.register_function(today, "today")
server.serve_forever()

```

The client code for the preceding server:
```
importxmlrpc.client
importdatetime
proxy = xmlrpc.client.ServerProxy("http://localhost:8000/")
today = proxy.today()
# convert the ISO8601 string to a datetime object
converted = datetime.datetime.strptime(today.value, "%Y%m%dT%H:%M:%S")
print("Today: %s" % converted.strftime("%d.%m.%Y, %H:%M"))