Title: Using re.LOCALE for Locale-Sensitive Regex
URL: https://docs.python.org/3/howto/regex.html
Summary: The re.LOCALE flag makes regex metacharacters like `` and `` depend on the current locale, allowing proper matching of language-specific characters such as those in French. While it enables matching of non-ASCII characters by utilizing C library functions, its use is discouraged in Python due to performance considerations.
---

re.LOCALE
    
Make `\w`, `\W`, `\b`, `\B` and case-insensitive matching dependent on the current locale instead of the Unicode database.
Locales are a feature of the C library intended to help in writing programs that take account of language differences. For example, if you’re processing encoded French text, you’d want to be able to write `\w+` to match words, but `\w` only matches the character class `[A-Za-z]` in bytes patterns; it won’t match bytes corresponding to `é` or `ç`. If your system is configured properly and a French locale is selected, certain C functions will tell the program that the byte corresponding to `é` should also be considered a letter. Setting the [`LOCALE`](https://docs.python.org/3/library/re.html#re.LOCALE "re.LOCALE") flag when compiling a regular expression will cause the resulting compiled object to use these C functions for `\w`; this is slower, but also enables `\w+` to match French words as you’d expect. The use of this flag is discouraged in Python 3 as the locale mechanism is very unreliable, it only handles one “culture” at a time, and it only works with 8-bit locales. Unicode matching is already enabled by default in Python 3 for Unicode (str) patterns, and it is able to handle different locales/languages. 

re.M


re.MULTILINE
    
(`^` and `$` haven’t been explained yet; they’ll be introduced in section [More Metacharacters](https://docs.python.org/3/howto/regex.html#more-metacharacters).)
Usually `^` matches only at the beginning of the string, and `$` matches only at the end of the string and immediately before the newline (if any) at the end of the string. When this flag is specified, `^` matches at the beginning of the string and at the beginning of each line within the string, immediately following each newline. Similarly, the `$` metacharacter matches either at the end of the string and at the end of each line (immediately preceding each newline). 

re.S


re.DOTALL
    
Makes the `'.'` special character match any character at all, including a newline; without this flag, `'.'` will match anything _except_ a newline. 

re.A


re.ASCII
    
Make `\w`, `\W`, `\b`, `\B`, `\s` and `\S` perform ASCII-only matching instead of full Unicode matching. This is only meaningful for Unicode patterns, and is ignored for byte patterns. 

re.X


re.VERBOSE
    
This flag allows you to write regular expressions that are more readable by granting you more flexibility in how you can format them. When this flag has been specified, whitespace within the RE string is ignored, except when the whitespace is in a character class or preceded by an unescaped backslash; this lets you organize and indent the RE more clearly. This flag also lets you put comments within a RE that will be ignored by the engine; comments are marked by a `'#'` that’s neither in a character class or preceded by an unescaped backslash.
For example, here’s a RE that uses [`re.VERBOSE`](https://docs.python.org/3/library/re.html#re.VERBOSE "re.VERBOSE"); see how much easier it is to read?
```
charref = re.compile(r"""
 &[#]        # Start of a numeric entity reference
 (
   0[0-7]+     # Octal form
  | [0-9]+     # Decimal form
  | x[0-9a-fA-F]+  # Hexadecimal form
 )
 ;          # Trailing semicolon
""", re.VERBOSE)

```

Without the verbose setting, the RE would look like this:
```
charref = re.compile("&#(0[0-7]+"
           "|[0-9]+"
           "|x[0-9a-fA-F]+);")