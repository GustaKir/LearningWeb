Title: Core and Builtins Changes in Python
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section details recent changes in Python's core and built-in functions, including bug fixes and enhancements to the `PyArg_Parse*()` functions, which now issue deprecation warnings for certain format specifiers. Additionally, a new C-API function `PySet_CheckExact()` has been introduced to check for exact `set` instances.
---

### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id309 "Link to this heading")
  * [bpo-43321](https://bugs.python.org/issue?@action=redirect&bpo=43321): Fix `SystemError` raised when `PyArg_Parse*()` is used with `#` but without `PY_SSIZE_T_CLEAN` defined.
  * [bpo-36346](https://bugs.python.org/issue?@action=redirect&bpo=36346): `PyArg_Parse*()` functions now emits `DeprecationWarning` when `u` or `Z` format is used. See [**PEP 623**](https://peps.python.org/pep-0623/) for detail.
  * [bpo-43277](https://bugs.python.org/issue?@action=redirect&bpo=43277): Add a new [`PySet_CheckExact()`](https://docs.python.org/3/c-api/set.html#c.PySet_CheckExact "PySet_CheckExact") function to the C-API to check if an object is an instance of [`set`](https://docs.python.org/3/library/stdtypes.html#set "set") but not an instance of a subtype. Patch by Pablo Galindo.
  * [bpo-42990](https://bugs.python.org/issue?@action=redirect&bpo=42990): The [`types.FunctionType`](https://docs.python.org/3/library/types.html#types.FunctionType "types.FunctionType") constructor now inherits the current builtins if the _globals_ dictionary has no `"__builtins__"` key, rather than using `{"None": None}` as builtins: same behavior as [`eval()`](https://docs.python.org/3/library/functions.html#eval "eval") and [`exec()`](https://docs.python.org/3/library/functions.html#exec "exec") functions. Defining a function with `def function(...): ...` in Python is not affected, globals cannot be overridden with this syntax: it also inherits the current builtins. Patch by Victor Stinner.
  * [bpo-42990](https://bugs.python.org/issue?@action=redirect&bpo=42990): Functions have a new `__builtins__` attribute which is used to look for builtin symbols when a function is executed, instead of looking into `__globals__['__builtins__']`. Patch by Mark Shannon and Victor Stinner.
  * [bpo-43149](https://bugs.python.org/issue?@action=redirect&bpo=43149): Improve the error message in the parser for exception groups without parentheses. Patch by Pablo Galindo.
  * [bpo-43121](https://bugs.python.org/issue?@action=redirect&bpo=43121): Fixed an incorrect [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") message for missing comma in literals. Patch by Pablo Galindo.
  * [bpo-42819](https://bugs.python.org/issue?@action=redirect&bpo=42819): [`readline`](https://docs.python.org/3/library/readline.html#module-readline "readline: GNU readline support for Python. \(Unix\)"): Explicitly disable bracketed paste in the interactive interpreter, even if it’s set in the inputrc, is enabled by default (eg GNU Readline 8.1), or a user calls `readline.read_init_file()`. The Python REPL has not implemented bracketed paste support. Also, bracketed mode writes the `"\x1b[?2004h"` escape sequence into stdout which causes test failures in applications that don’t support it. It can still be explicitly enabled by calling `readline.parse_and_bind("set enable-bracketed-paste on")`. Patch by Dustin Rodrigues.
  * [bpo-42808](https://bugs.python.org/issue?@action=redirect&bpo=42808): Simple calls to `type(object)` are now faster due to the `vectorcall` calling convention. Patch by Dennis Sweeney.
  * [bpo-42217](https://bugs.python.org/issue?@action=redirect&bpo=42217): Make the compiler merges same co_code and co_linetable objects in a module like already did for co_consts.
  * [bpo-41972](https://bugs.python.org/issue?@action=redirect&bpo=41972): Substring search functions such as `str1 in str2` and `str2.find(str1)` now sometimes use the “Two-Way” string comparison algorithm to avoid quadratic behavior on long strings.
  * [bpo-42128](https://bugs.python.org/issue?@action=redirect&bpo=42128): Implement [**PEP 634**](https://peps.python.org/pep-0634/) (structural pattern matching). Patch by Brandt Bucher.
  * [bpo-40692](https://bugs.python.org/issue?@action=redirect&bpo=40692): In the [`concurrent.futures.ProcessPoolExecutor`](https://docs.python.org/3/library/concurrent.futures.html#concurrent.futures.ProcessPoolExecutor "concurrent.futures.ProcessPoolExecutor"), validate that `multiprocess.synchronize()` is available on a given platform and rely on that check in the [`concurrent.futures`](https://docs.python.org/3/library/concurrent.futures.html#module-concurrent.futures "concurrent.futures: Execute computations concurrently using threads or processes.") test suite so we can run tests that are unrelated to `ProcessPoolExecutor` on those platforms.
  * [bpo-38302](https://bugs.python.org/issue?@action=redirect&bpo=38302): If [`object.__ipow__()`](https://docs.python.org/3/reference/datamodel.html#object.__ipow__ "object.__ipow__") returns [`NotImplemented`](https://docs.python.org/3/library/constants.html#NotImplemented "NotImplemented"), the operator will correctly fall back to [`object.__pow__()`](https://docs.python.org/3/reference/datamodel.html#object.__pow__ "object.__pow__") and [`object.__rpow__()`](https://doc