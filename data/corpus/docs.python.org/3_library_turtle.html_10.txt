Title: Turtle Graphics Color Management
URL: https://docs.python.org/3/library/turtle.html
Summary: This documentation chunk explains how to use the `pencolor()` and `fillcolor()` functions in Python's Turtle graphics library. It demonstrates setting and retrieving the pen color with examples involving color names, RGB tuples, and hexadecimal strings. Additionally, it discusses the `colormode()` function and its impact on color representation.
---

```
>>> colormode()
1.0
>>> turtle.pencolor()
'red'
>>> turtle.pencolor("brown")
>>> turtle.pencolor()
'brown'
>>> tup = (0.2, 0.8, 0.55)
>>> turtle.pencolor(tup)
>>> turtle.pencolor()
(0.2, 0.8, 0.5490196078431373)
>>> colormode(255)
>>> turtle.pencolor()
(51.0, 204.0, 140.0)
>>> turtle.pencolor('#32c18f')
>>> turtle.pencolor()
(50.0, 193.0, 143.0)

```


turtle.fillcolor(_* args_)[¶](https://docs.python.org/3/library/turtle.html#turtle.fillcolor "Link to this definition")
    
Return or set the fillcolor.
Four input formats are allowed: 

`fillcolor()`
    
Return the current fillcolor as color specification string, possibly in tuple format (see example). May be used as input to another color/pencolor/fillcolor call. 

`fillcolor(colorstring)`
    
Set fillcolor to _colorstring_ , which is a Tk color specification string, such as `"red"`, `"yellow"`, or `"#33cc8c"`. 

`fillcolor((r, g, b))`
    
Set fillcolor to the RGB color represented by the tuple of _r_ , _g_ , and _b_. Each of _r_ , _g_ , and _b_ must be in the range 0..colormode, where colormode is either 1.0 or 255 (see [`colormode()`](https://docs.python.org/3/library/turtle.html#turtle.colormode "turtle.colormode")). 

`fillcolor(r, g, b)`
    
Set fillcolor to the RGB color represented by _r_ , _g_ , and _b_. Each of _r_ , _g_ , and _b_ must be in the range 0..colormode.
If turtleshape is a polygon, the interior of that polygon is drawn with the newly set fillcolor.
>>>```
>>> turtle.fillcolor("violet")
>>> turtle.fillcolor()
'violet'
>>> turtle.pencolor()
(50.0, 193.0, 143.0)
>>> turtle.fillcolor((50, 193, 143)) # Integers, not floats
>>> turtle.fillcolor()
(50.0, 193.0, 143.0)
>>> turtle.fillcolor('#ffffff')
>>> turtle.fillcolor()
(255.0, 255.0, 255.0)

```


turtle.color(_* args_)[¶](https://docs.python.org/3/library/turtle.html#turtle.color "Link to this definition")
    
Return or set pencolor and fillcolor.
Several input formats are allowed. They use 0 to 3 arguments as follows: 

`color()`
    
Return the current pencolor and the current fillcolor as a pair of color specification strings or tuples as returned by [`pencolor()`](https://docs.python.org/3/library/turtle.html#turtle.pencolor "turtle.pencolor") and [`fillcolor()`](https://docs.python.org/3/library/turtle.html#turtle.fillcolor "turtle.fillcolor"). 

`color(colorstring)`, `color((r,g,b))`, `color(r,g,b)`
    
Inputs as in [`pencolor()`](https://docs.python.org/3/library/turtle.html#turtle.pencolor "turtle.pencolor"), set both, fillcolor and pencolor, to the given value. 

`color(colorstring1, colorstring2)`, `color((r1,g1,b1), (r2,g2,b2))`
    
Equivalent to `pencolor(colorstring1)` and `fillcolor(colorstring2)` and analogously if the other input format is used.
If turtleshape is a polygon, outline and interior of that polygon is drawn with the newly set colors.
>>>```
>>> turtle.color("red", "green")
>>> turtle.color()
('red', 'green')
>>> color("#285078", "#a0c8f0")
>>> color()
((40.0, 80.0, 120.0), (160.0, 200.0, 240.0))

```

See also: Screen method [`colormode()`](https://docs.python.org/3/library/turtle.html#turtle.colormode "turtle.colormode").
#### Filling[¶](https://docs.python.org/3/library/turtle.html#filling "Link to this heading") 

turtle.filling()[¶](https://docs.python.org/3/library/turtle.html#turtle.filling "Link to this definition")
    
Return fillstate (`True` if filling, `False` else).
>>>```
>>> turtle.begin_fill()
>>> if turtle.filling():
...   turtle.pensize(5)
... else:
...   turtle.pensize(3)

```


turtle.begin_fill()[¶](https://docs.python.org/3/library/turtle.html#turtle.begin_fill "Link to this definition")
    
To be called just before drawing a shape to be filled. 

turtle.end_fill()[¶](https://docs.python.org/3/library/turtle.html#turtle.end_fill "Link to this definition")
    
Fill the shape drawn after the last call to [`begin_fill()`](https://docs.python.org/3/library/turtle.html#turtle.begin_fill "turtle.begin_fill").
Whether or not overlap regions for self-intersecting polygons or multiple shapes are filled depends on the operating system graphics, type of overlap, and number of overlaps. For example, the Turtle star above may be either all yellow or have some white regions.
>>>```
>>> turtle.color("black", "red")
>>> turtle.begin_fill()
>>> turtle.circle(80)
>>> turtle.end_fill()

```

#### More drawing control[¶](https://docs.python.org/3/library/turtle.html#more-drawing-control "Link to this heading") 

turtle.reset()[¶](https://docs.python.org/3/library/turtle.html#turtle.reset "Link to this definition")
    
Delete the turtle’s drawings from the screen, re-center the turtle and set variables to the default values.
>>>```
>>> turtle.goto(0,-22)
>>> turtle.left(100)
>>> turtle.position()
(0.00,-22.00)
>>> turtle.heading()
100.0
>>> turtle.reset()
>>> turtle.position()
(0.00,0.00)
>>> turtle.heading()
0.0