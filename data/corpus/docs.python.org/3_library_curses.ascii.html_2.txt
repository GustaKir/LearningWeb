Title: ASCII Character Checks in Curses Library
URL: https://docs.python.org/3/library/curses.ascii.html
Summary: This section outlines various functions in the `curses.ascii` module that check for different types of ASCII characters, including printable characters, punctuation, whitespace, uppercase letters, and hexadecimal digits.
---

curses.ascii.isprint(_c_)[¶](https://docs.python.org/3/library/curses.ascii.html#curses.ascii.isprint "Link to this definition")
    
Checks for any ASCII printable character including space. 

curses.ascii.ispunct(_c_)[¶](https://docs.python.org/3/library/curses.ascii.html#curses.ascii.ispunct "Link to this definition")
    
Checks for any printable ASCII character which is not a space or an alphanumeric character. 

curses.ascii.isspace(_c_)[¶](https://docs.python.org/3/library/curses.ascii.html#curses.ascii.isspace "Link to this definition")
    
Checks for ASCII white-space characters; space, line feed, carriage return, form feed, horizontal tab, vertical tab. 

curses.ascii.isupper(_c_)[¶](https://docs.python.org/3/library/curses.ascii.html#curses.ascii.isupper "Link to this definition")
    
Checks for an ASCII uppercase letter. 

curses.ascii.isxdigit(_c_)[¶](https://docs.python.org/3/library/curses.ascii.html#curses.ascii.isxdigit "Link to this definition")
    
Checks for an ASCII hexadecimal digit. This is equivalent to `c in string.hexdigits`. 

curses.ascii.isctrl(_c_)[¶](https://docs.python.org/3/library/curses.ascii.html#curses.ascii.isctrl "Link to this definition")
    
Checks for an ASCII control character (ordinal values 0 to 31). 

curses.ascii.ismeta(_c_)[¶](https://docs.python.org/3/library/curses.ascii.html#curses.ascii.ismeta "Link to this definition")
    
Checks for a non-ASCII character (ordinal values 0x80 and above).
These functions accept either integers or single-character strings; when the argument is a string, it is first converted using the built-in function [`ord()`](https://docs.python.org/3/library/functions.html#ord "ord").
Note that all these functions check ordinal bit values derived from the character of the string you pass in; they do not actually know anything about the host machine’s character encoding.
The following two functions take either a single-character string or integer byte value; they return a value of the same type. 

curses.ascii.ascii(_c_)[¶](https://docs.python.org/3/library/curses.ascii.html#curses.ascii.ascii "Link to this definition")
    
Return the ASCII value corresponding to the low 7 bits of _c_. 

curses.ascii.ctrl(_c_)[¶](https://docs.python.org/3/library/curses.ascii.html#curses.ascii.ctrl "Link to this definition")
    
Return the control character corresponding to the given character (the character bit value is bitwise-anded with 0x1f). 

curses.ascii.alt(_c_)[¶](https://docs.python.org/3/library/curses.ascii.html#curses.ascii.alt "Link to this definition")
    
Return the 8-bit character corresponding to the given ASCII character (the character bit value is bitwise-ored with 0x80).
The following function takes either a single-character string or integer value; it returns a string. 

curses.ascii.unctrl(_c_)[¶](https://docs.python.org/3/library/curses.ascii.html#curses.ascii.unctrl "Link to this definition")
    
Return a string representation of the ASCII character _c_. If _c_ is printable, this string is the character itself. If the character is a control character (0x00–0x1f) the string consists of a caret (`'^'`) followed by the corresponding uppercase letter. If the character is an ASCII delete (0x7f) the string is `'^?'`. If the character has its meta bit (0x80) set, the meta bit is stripped, the preceding rules applied, and `'!'` prepended to the result. 

curses.ascii.controlnames[¶](https://docs.python.org/3/library/curses.ascii.html#curses.ascii.controlnames "Link to this definition")
    
A 33-element string array that contains the ASCII mnemonics for the thirty-two ASCII control characters from 0 (NUL) to 0x1f (US), in order, plus the mnemonic `SP` for the space character.
#### Previous topic
[`curses` — Terminal handling for character-cell displays](https://docs.python.org/3/library/curses.html "previous chapter")
#### Next topic
[`curses.panel` — A panel stack extension for curses](https://docs.python.org/3/library/curses.panel.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/curses.ascii.rst)