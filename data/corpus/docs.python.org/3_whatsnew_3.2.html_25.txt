Title: Enhancements in unittest Module for Python 3.2
URL: https://docs.python.org/3/whatsnew/3.2.html
Summary: Python 3.2 introduces improvements to the unittest module, including enhanced diagnostic messages, the ability to run tests from file paths with `python -m unittest`, and easier test discovery in packages. Additionally, the `unittest.TestCase` class can now be instantiated without arguments, simplifying experimentation at the interactive prompt.
---

testcase methods, improved diagnostic messages for test failures, and better method names.
  * The command-line call `python -m unittest` can now accept file paths instead of module names for running specific tests ([bpo-10620](https://bugs.python.org/issue?@action=redirect&bpo=10620)). The new test discovery can find tests within packages, locating any test importable from the top-level directory. The top-level directory can be specified with the `-t` option, a pattern for matching files with `-p`, and a directory to start discovery with `-s`:
```
$ python-munittestdiscover-smy_proj_dir-p_test.py

```

(Contributed by Michael Foord.)
  * Experimentation at the interactive prompt is now easier because the [`unittest.TestCase`](https://docs.python.org/3/library/unittest.html#unittest.TestCase "unittest.TestCase") class can now be instantiated without arguments:
>>>```
>>> fromunittestimport TestCase
>>> TestCase().assertEqual(pow(2, 3), 8)

```

(Contributed by Michael Foord.)
  * The [`unittest`](https://docs.python.org/3/library/unittest.html#module-unittest "unittest: Unit testing framework for Python.") module has two new methods, [`assertWarns()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertWarns "unittest.TestCase.assertWarns") and [`assertWarnsRegex()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertWarnsRegex "unittest.TestCase.assertWarnsRegex") to verify that a given warning type is triggered by the code under test:
```
with self.assertWarns(DeprecationWarning):
  legacy_function('XYZ')

```

(Contributed by Antoine Pitrou, [bpo-9754](https://bugs.python.org/issue?@action=redirect&bpo=9754).)
Another new method, [`assertCountEqual()`](https://docs.python.org/3/library/unittest.html#unittest.TestCase.assertCountEqual "unittest.TestCase.assertCountEqual") is used to compare two iterables to determine if their element counts are equal (whether the same elements are present with the same number of occurrences regardless of order):
```
deftest_anagram(self):
  self.assertCountEqual('algorithm', 'logarithm')