Title: SSLContext.sni_callback - Registering Server Name Indication Callback
URL: https://docs.python.org/3/library/ssl.html
Summary: The `sni_callback` attribute allows the registration of a callback function to be invoked after the TLS Client Hello handshake, specifically for handling server name indication as defined in RFC 6066. Only one callback can be registered per `SSLContext`, and setting it to `None` disables the callback. The callback receives an `SSLSocket`, the intended server name, and a third argument.
---

SSLContext.sni_callback[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.sni_callback "Link to this definition")
    
Register a callback function that will be called after the TLS Client Hello handshake message has been received by the SSL/TLS server when the TLS client specifies a server name indication. The server name indication mechanism is specified in [**RFC 6066**](https://datatracker.ietf.org/doc/html/rfc6066.html) section 3 - Server Name Indication.
Only one callback can be set per `SSLContext`. If _sni_callback_ is set to `None` then the callback is disabled. Calling this function a subsequent time will disable the previously registered callback.
The callback function will be called with three arguments; the first being the [`ssl.SSLSocket`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket "ssl.SSLSocket"), the second is a string that represents the server name that the client is intending to communicate (or [`None`](https://docs.python.org/3/library/constants.html#None "None") if the TLS Client Hello does not contain a server name) and the third argument is the original [`SSLContext`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext "ssl.SSLContext"). The server name argument is text. For internationalized domain name, the server name is an IDN A-label (`"xn--pythn-mua.org"`).
A typical use of this callback is to change the [`ssl.SSLSocket`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket "ssl.SSLSocket")’s [`SSLSocket.context`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.context "ssl.SSLSocket.context") attribute to a new object of type [`SSLContext`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext "ssl.SSLContext") representing a certificate chain that matches the server name.
Due to the early negotiation phase of the TLS connection, only limited methods and attributes are usable like [`SSLSocket.selected_alpn_protocol()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.selected_alpn_protocol "ssl.SSLSocket.selected_alpn_protocol") and [`SSLSocket.context`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.context "ssl.SSLSocket.context"). The [`SSLSocket.getpeercert()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.getpeercert "ssl.SSLSocket.getpeercert"), [`SSLSocket.get_verified_chain()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.get_verified_chain "ssl.SSLSocket.get_verified_chain"), [`SSLSocket.get_unverified_chain()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.get_unverified_chain "ssl.SSLSocket.get_unverified_chain") [`SSLSocket.cipher()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.cipher "ssl.SSLSocket.cipher") and [`SSLSocket.compression()`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.compression "ssl.SSLSocket.compression") methods require that the TLS connection has progressed beyond the TLS Client Hello and therefore will not return meaningful values nor can they be called safely.
The _sni_callback_ function must return `None` to allow the TLS negotiation to continue. If a TLS failure is required, a constant [`ALERT_DESCRIPTION_*`](https://docs.python.org/3/library/ssl.html#ssl.ALERT_DESCRIPTION_INTERNAL_ERROR "ssl.ALERT_DESCRIPTION_INTERNAL_ERROR") can be returned. Other return values will result in a TLS fatal error with [`ALERT_DESCRIPTION_INTERNAL_ERROR`](https://docs.python.org/3/library/ssl.html#ssl.ALERT_DESCRIPTION_INTERNAL_ERROR "ssl.ALERT_DESCRIPTION_INTERNAL_ERROR").
If an exception is raised from the _sni_callback_ function the TLS connection will terminate with a fatal TLS alert message [`ALERT_DESCRIPTION_HANDSHAKE_FAILURE`](https://docs.python.org/3/library/ssl.html#ssl.ALERT_DESCRIPTION_HANDSHAKE_FAILURE "ssl.ALERT_DESCRIPTION_HANDSHAKE_FAILURE").
This method will raise [`NotImplementedError`](https://docs.python.org/3/library/exceptions.html#NotImplementedError "NotImplementedError") if the OpenSSL library had OPENSSL_NO_TLSEXT defined when it was built.
Added in version 3.7. 

SSLContext.set_servername_callback(_server_name_callback_)[¶](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.set_servername_callback "Link to this definition")
    
This is a legacy API retained for backwards compatibility. When possible, you should use [`sni_callback`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.sni_callback "ssl.SSLContext.sni_callback") instead. The given _server_name_callback_ is similar to _sni_callback_ , except that when the server hostname is an IDN-encoded internationalized domain name, the _server_name_callback_ receives a decoded U-label (`"pythön.org"`).
If there is a decoding error on the server name, the TLS connection will terminate with an [`ALERT_DESCRIPTION_INTERNAL_ERROR`](https://docs.python.org/3/library/ssl.html#ssl.ALERT_DESCRIPTION_INTERNAL_ERROR "ssl.ALERT_DESCRIPTION_INTERNAL_ERROR") fatal TLS alert message to the client.
Added in version 3.4.