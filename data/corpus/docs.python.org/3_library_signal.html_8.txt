Title: signal.siginterrupt Function
URL: https://docs.python.org/3/library/signal.html
Summary: The `signal.siginterrupt` function changes the behavior of system calls when interrupted by a specified signal. Setting the flag to `False` allows system calls to restart; when `True`, they are interrupted. This function is available on Unix systems and has implications when installing signal handlers using the `signal()` method.
---

signal.siginterrupt(_signalnum_ , _flag_)[¶](https://docs.python.org/3/library/signal.html#signal.siginterrupt "Link to this definition")
    
Change system call restart behaviour: if _flag_ is [`False`](https://docs.python.org/3/library/constants.html#False "False"), system calls will be restarted when interrupted by signal _signalnum_ , otherwise system calls will be interrupted. Returns nothing.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix.
See the man page _[siginterrupt(3)](https://manpages.debian.org/siginterrupt\(3\))_ for further information.
Note that installing a signal handler with [`signal()`](https://docs.python.org/3/library/signal.html#module-signal "signal: Set handlers for asynchronous events.") will reset the restart behaviour to interruptible by implicitly calling `siginterrupt()` with a true _flag_ value for the given signal. 

signal.signal(_signalnum_ , _handler_)[¶](https://docs.python.org/3/library/signal.html#signal.signal "Link to this definition")
    
Set the handler for signal _signalnum_ to the function _handler_. _handler_ can be a callable Python object taking two arguments (see below), or one of the special values [`signal.SIG_IGN`](https://docs.python.org/3/library/signal.html#signal.SIG_IGN "signal.SIG_IGN") or [`signal.SIG_DFL`](https://docs.python.org/3/library/signal.html#signal.SIG_DFL "signal.SIG_DFL"). The previous signal handler will be returned (see the description of [`getsignal()`](https://docs.python.org/3/library/signal.html#signal.getsignal "signal.getsignal") above). (See the Unix man page _[signal(2)](https://manpages.debian.org/signal\(2\))_ for further information.)
When threads are enabled, this function can only be called from [the main thread of the main interpreter](https://docs.python.org/3/library/signal.html#signals-and-threads); attempting to call it from other threads will cause a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") exception to be raised.
The _handler_ is called with two arguments: the signal number and the current stack frame (`None` or a frame object; for a description of frame objects, see the [description in the type hierarchy](https://docs.python.org/3/reference/datamodel.html#frame-objects) or see the attribute descriptions in the [`inspect`](https://docs.python.org/3/library/inspect.html#module-inspect "inspect: Extract information and source code from live objects.") module).
On Windows, [`signal()`](https://docs.python.org/3/library/signal.html#module-signal "signal: Set handlers for asynchronous events.") can only be called with [`SIGABRT`](https://docs.python.org/3/library/signal.html#signal.SIGABRT "signal.SIGABRT"), [`SIGFPE`](https://docs.python.org/3/library/signal.html#signal.SIGFPE "signal.SIGFPE"), [`SIGILL`](https://docs.python.org/3/library/signal.html#signal.SIGILL "signal.SIGILL"), [`SIGINT`](https://docs.python.org/3/library/signal.html#signal.SIGINT "signal.SIGINT"), [`SIGSEGV`](https://docs.python.org/3/library/signal.html#signal.SIGSEGV "signal.SIGSEGV"), [`SIGTERM`](https://docs.python.org/3/library/signal.html#signal.SIGTERM "signal.SIGTERM"), or [`SIGBREAK`](https://docs.python.org/3/library/signal.html#signal.SIGBREAK "signal.SIGBREAK"). A [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") will be raised in any other case. Note that not all systems define the same set of signal names; an [`AttributeError`](https://docs.python.org/3/library/exceptions.html#AttributeError "AttributeError") will be raised if a signal name is not defined as `SIG*` module level constant. 

signal.sigpending()[¶](https://docs.python.org/3/library/signal.html#signal.sigpending "Link to this definition")
    
Examine the set of signals that are pending for delivery to the calling thread (i.e., the signals which have been raised while blocked). Return the set of the pending signals.
[Availability](https://docs.python.org/3/library/intro.html#availability): Unix.
See the man page _[sigpending(2)](https://manpages.debian.org/sigpending\(2\))_ for further information.
See also [`pause()`](https://docs.python.org/3/library/signal.html#signal.pause "signal.pause"), [`pthread_sigmask()`](https://docs.python.org/3/library/signal.html#signal.pthread_sigmask "signal.pthread_sigmask") and [`sigwait()`](https://docs.python.org/3/library/signal.html#signal.sigwait "signal.sigwait").
Added in version 3.3.