Title: Using UDP with Python's socketserver Module
URL: https://docs.python.org/3/library/socketserver.html
Summary: This document discusses creating a UDP server using Python's socketserver module. It defines a MyUDPHandler class that processes incoming data and sends responses back to the client. The server operates on a specified host and port, continuously handling requests. Additionally, there is a brief introduction to the client-side implementation for sending data using UDP sockets.
---

```
importsocketserver
classMyUDPHandler(socketserver.BaseRequestHandler):
"""
  This class works similar to the TCP handler class, except that
  self.request consists of a pair of data and client socket, and since
  there is no connection the client address must be given explicitly
  when sending data back via sendto().
  """
  defhandle(self):
    data = self.request[0].strip()
    socket = self.request[1]
    print(f"{self.client_address[0]} wrote:")
    print(data)
    socket.sendto(data.upper(), self.client_address)
if __name__ == "__main__":
  HOST, PORT = "localhost", 9999
  with socketserver.UDPServer((HOST, PORT), MyUDPHandler) as server:
    server.serve_forever()

```

This is the client side:
```
importsocket
importsys
HOST, PORT = "localhost", 9999
data = " ".join(sys.argv[1:])
# SOCK_DGRAM is the socket type to use for UDP sockets
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
# As you can see, there is no connect() call; UDP has no connections.
# Instead, data is directly sent to the recipient via sendto().
sock.sendto(bytes(data + "\n", "utf-8"), (HOST, PORT))
received = str(sock.recv(1024), "utf-8")
print("Sent:  ", data)
print("Received:", received)

```

The output of the example should look exactly like for the TCP server example.
### Asynchronous Mixins[Â¶](https://docs.python.org/3/library/socketserver.html#asynchronous-mixins "Link to this heading")
To build asynchronous handlers, use the [`ThreadingMixIn`](https://docs.python.org/3/library/socketserver.html#socketserver.ThreadingMixIn "socketserver.ThreadingMixIn") and [`ForkingMixIn`](https://docs.python.org/3/library/socketserver.html#socketserver.ForkingMixIn "socketserver.ForkingMixIn") classes.
An example for the [`ThreadingMixIn`](https://docs.python.org/3/library/socketserver.html#socketserver.ThreadingMixIn "socketserver.ThreadingMixIn") class:
```
importsocket
importthreading
importsocketserver
classThreadedTCPRequestHandler(socketserver.BaseRequestHandler):
  defhandle(self):
    data = str(self.request.recv(1024), 'ascii')
    cur_thread = threading.current_thread()
    response = bytes("{}: {}".format(cur_thread.name, data), 'ascii')
    self.request.sendall(response)
classThreadedTCPServer(socketserver.ThreadingMixIn, socketserver.TCPServer):
  pass
defclient(ip, port, message):
  with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
    sock.connect((ip, port))
    sock.sendall(bytes(message, 'ascii'))
    response = str(sock.recv(1024), 'ascii')
    print("Received: {}".format(response))
if __name__ == "__main__":
  # Port 0 means to select an arbitrary unused port
  HOST, PORT = "localhost", 0
  server = ThreadedTCPServer((HOST, PORT), ThreadedTCPRequestHandler)
  with server:
    ip, port = server.server_address
    # Start a thread with the server -- that thread will then start one
    # more thread for each request
    server_thread = threading.Thread(target=server.serve_forever)
    # Exit the server thread when the main thread terminates
    server_thread.daemon = True
    server_thread.start()
    print("Server loop running in thread:", server_thread.name)
    client(ip, port, "Hello World 1")
    client(ip, port, "Hello World 2")
    client(ip, port, "Hello World 3")
    server.shutdown()

```

The output of the example should look something like this:
```
$ pythonThreadedTCPServer.py
Server loop running in thread: Thread-1
Received: Thread-2: Hello World 1
Received: Thread-3: Hello World 2
Received: Thread-4: Hello World 3