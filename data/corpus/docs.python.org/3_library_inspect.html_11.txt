Title: BoundArguments.apply_defaults Method
URL: https://docs.python.org/3/library/inspect.html
Summary: The apply_defaults() method sets default values for missing arguments in a function's call. It assigns an empty tuple for *args and an empty dictionary for **kwargs. The example demonstrates binding arguments to a function and applying defaults, resulting in a complete argument dictionary.
---

apply_defaults()[¶](https://docs.python.org/3/library/inspect.html#inspect.BoundArguments.apply_defaults "Link to this definition")
    
Set default values for missing arguments.
For variable-positional arguments (`*args`) the default is an empty tuple.
For variable-keyword arguments (`**kwargs`) the default is an empty dict.
>>>```
>>> deffoo(a, b='ham', *args): pass
>>> ba = inspect.signature(foo).bind('spam')
>>> ba.apply_defaults()
>>> ba.arguments
{'a': 'spam', 'b': 'ham', 'args': ()}

```

Added in version 3.5.
The [`args`](https://docs.python.org/3/library/inspect.html#inspect.BoundArguments.args "inspect.BoundArguments.args") and [`kwargs`](https://docs.python.org/3/library/inspect.html#inspect.BoundArguments.kwargs "inspect.BoundArguments.kwargs") properties can be used to invoke functions:
```
deftest(a, *, b):
  ...
sig = signature(test)
ba = sig.bind(10, b=20)
test(*ba.args, **ba.kwargs)

```

See also 

[**PEP 362**](https://peps.python.org/pep-0362/) - Function Signature Object.
    
The detailed specification, implementation details and examples.
## Classes and functions[¶](https://docs.python.org/3/library/inspect.html#classes-and-functions "Link to this heading") 

inspect.getclasstree(_classes_ , _unique =False_)[¶](https://docs.python.org/3/library/inspect.html#inspect.getclasstree "Link to this definition")
    
Arrange the given list of classes into a hierarchy of nested lists. Where a nested list appears, it contains classes derived from the class whose entry immediately precedes the list. Each entry is a 2-tuple containing a class and a tuple of its base classes. If the _unique_ argument is true, exactly one entry appears in the returned structure for each class in the given list. Otherwise, classes using multiple inheritance and their descendants will appear multiple times. 

inspect.getfullargspec(_func_)[¶](https://docs.python.org/3/library/inspect.html#inspect.getfullargspec "Link to this definition")
    
Get the names and default values of a Python function’s parameters. A [named tuple](https://docs.python.org/3/glossary.html#term-named-tuple) is returned:
`FullArgSpec(args, varargs, varkw, defaults, kwonlyargs, kwonlydefaults, annotations)`
_args_ is a list of the positional parameter names. _varargs_ is the name of the `*` parameter or `None` if arbitrary positional arguments are not accepted. _varkw_ is the name of the `**` parameter or `None` if arbitrary keyword arguments are not accepted. _defaults_ is an _n_ -tuple of default argument values corresponding to the last _n_ positional parameters, or `None` if there are no such defaults defined. _kwonlyargs_ is a list of keyword-only parameter names in declaration order. _kwonlydefaults_ is a dictionary mapping parameter names from _kwonlyargs_ to the default values used if no argument is supplied. _annotations_ is a dictionary mapping parameter names to annotations. The special key `"return"` is used to report the function return value annotation (if any).
Note that [`signature()`](https://docs.python.org/3/library/inspect.html#inspect.signature "inspect.signature") and [Signature Object](https://docs.python.org/3/library/inspect.html#inspect-signature-object) provide the recommended API for callable introspection, and support additional behaviours (like positional-only arguments) that are sometimes encountered in extension module APIs. This function is retained primarily for use in code that needs to maintain compatibility with the Python 2 `inspect` module API.
Changed in version 3.4: This function is now based on [`signature()`](https://docs.python.org/3/library/inspect.html#inspect.signature "inspect.signature"), but still ignores `__wrapped__` attributes and includes the already bound first parameter in the signature output for bound methods.
Changed in version 3.6: This method was previously documented as deprecated in favour of [`signature()`](https://docs.python.org/3/library/inspect.html#inspect.signature "inspect.signature") in Python 3.5, but that decision has been reversed in order to restore a clearly supported standard interface for single-source Python 2/3 code migrating away from the legacy `getargspec()` API.
Changed in version 3.7: Python only explicitly guaranteed that it preserved the declaration order of keyword-only parameters as of version 3.7, although in practice this order had always been preserved in Python 3. 

inspect.getargvalues(_frame_)[¶](https://docs.python.org/3/library/inspect.html#inspect.getargvalues "Link to this definition")
    
Get information about arguments passed into a particular frame. A [named tuple](https://docs.python.org/3/glossary.html#term-named-tuple) `ArgInfo(args, varargs, keywords, locals)` is returned. _args_ is a list of the argument names. _varargs_ and _keywords_ are the names of the `*` and `**` arguments or `None`. _locals_ is the locals dictionary of the given frame.
Note
This function was inadvertently marked as deprecated in Python 3.5.