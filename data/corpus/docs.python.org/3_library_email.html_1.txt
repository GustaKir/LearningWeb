Title: Email and MIME Handling Package
URL: https://docs.python.org/3/library/email.html
Summary: The `email` package provides a library for managing email messages, focusing on parsing, manipulating, and generating emails. It does not handle sending emails via SMTP or other protocols, which is managed by separate modules like `smtplib`. The package aims for RFC compliance.
---

# `email` — An email and MIME handling package[¶](https://docs.python.org/3/library/email.html#module-email "Link to this heading")
**Source code:** [Lib/email/__init__.py](https://github.com/python/cpython/tree/3.13/Lib/email/__init__.py)
The [`email`](https://docs.python.org/3/library/email.html#module-email "email: Package supporting the parsing, manipulating, and generating email messages.") package is a library for managing email messages. It is specifically _not_ designed to do any sending of email messages to SMTP ([**RFC 2821**](https://datatracker.ietf.org/doc/html/rfc2821.html)), NNTP, or other servers; those are functions of modules such as [`smtplib`](https://docs.python.org/3/library/smtplib.html#module-smtplib "smtplib: SMTP protocol client \(requires sockets\)."). The [`email`](https://docs.python.org/3/library/email.html#module-email "email: Package supporting the parsing, manipulating, and generating email messages.") package attempts to be as RFC-compliant as possible, supporting [**RFC 5322**](https://datatracker.ietf.org/doc/html/rfc5322.html) and [**RFC 6532**](https://datatracker.ietf.org/doc/html/rfc6532.html), as well as such MIME-related RFCs as [**RFC 2045**](https://datatracker.ietf.org/doc/html/rfc2045.html), [**RFC 2046**](https://datatracker.ietf.org/doc/html/rfc2046.html), [**RFC 2047**](https://datatracker.ietf.org/doc/html/rfc2047.html), [**RFC 2183**](https://datatracker.ietf.org/doc/html/rfc2183.html), and [**RFC 2231**](https://datatracker.ietf.org/doc/html/rfc2231.html).
The overall structure of the email package can be divided into three major components, plus a fourth component that controls the behavior of the other components.
The central component of the package is an “object model” that represents email messages. An application interacts with the package primarily through the object model interface defined in the [`message`](https://docs.python.org/3/library/email.message.html#module-email.message "email.message: The base class representing email messages.") sub-module. The application can use this API to ask questions about an existing email, to construct a new email, or to add or remove email subcomponents that themselves use the same object model interface. That is, following the nature of email messages and their MIME subcomponents, the email object model is a tree structure of objects that all provide the [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") API.
The other two major components of the package are the [`parser`](https://docs.python.org/3/library/email.parser.html#module-email.parser "email.parser: Parse flat text email messages to produce a message object structure.") and the [`generator`](https://docs.python.org/3/library/email.generator.html#module-email.generator "email.generator: Generate flat text email messages from a message structure."). The parser takes the serialized version of an email message (a stream of bytes) and converts it into a tree of [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") objects. The generator takes an [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") and turns it back into a serialized byte stream. (The parser and generator also handle streams of text characters, but this usage is discouraged as it is too easy to end up with messages that are not valid in one way or another.)
The control component is the [`policy`](https://docs.python.org/3/library/email.policy.html#module-email.policy "email.policy: Controlling the parsing and generating of messages") module. Every [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage"), every [`generator`](https://docs.python.org/3/library/email.generator.html#module-email.generator "email.generator: Generate flat text email messages from a message structure."), and every [`parser`](https://docs.python.org/3/library/email.parser.html#module-email.parser "email.parser: Parse flat text email messages to produce a message object structure.") has an associated [`policy`](https://docs.python.org/3/library/email.policy.html#module-email.policy "email.policy: Controlling the parsing and generating of messages") object that controls its behavior. Usually an application only needs to specify the policy when an [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") is created, either by directly instantiating an [`EmailMessage`](https://docs.python.org/3/library/email.message.html#email.message.EmailMessage "email.message.EmailMessage") to create a new email, or by parsing an input stream using a [`parser`](https://docs.python.org/3/library/email.parser.html#module-email.parser "email.parser: Parse flat text email message