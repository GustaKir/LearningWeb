Title: Importing Modules and Intra-package References
URL: https://docs.python.org/3/tutorial/modules.html
Summary: This section explains how to import modules from packages in Python, emphasizing the use of 'from...import' for specific submodules over wildcard imports. It highlights the importance of good practices in importing and provides guidance on using absolute imports for intra-package references.
---

```

In this example, the `echo` and `surround` modules are imported in the current namespace because they are defined in the `sound.effects` package when the `from...import` statement is executed. (This also works when `__all__` is defined.)
Although certain modules are designed to export only names that follow certain patterns when you use `import *`, it is still considered bad practice in production code.
Remember, there is nothing wrong with using `from package import specific_submodule`! In fact, this is the recommended notation unless the importing module needs to use submodules with the same name from different packages.
### 6.4.2. Intra-package References[¶](https://docs.python.org/3/tutorial/modules.html#intra-package-references "Link to this heading")
When packages are structured into subpackages (as with the `sound` package in the example), you can use absolute imports to refer to submodules of siblings packages. For example, if the module `sound.filters.vocoder` needs to use the `echo` module in the `sound.effects` package, it can use `from sound.effects import echo`.
You can also write relative imports, with the `from module import name` form of import statement. These imports use leading dots to indicate the current and parent packages involved in the relative import. From the `surround` module for example, you might use:
```
from.import echo
from..import formats
from..filtersimport equalizer

```

Note that relative imports are based on the name of the current module. Since the name of the main module is always `"__main__"`, modules intended for use as the main module of a Python application must always use absolute imports.
### 6.4.3. Packages in Multiple Directories[¶](https://docs.python.org/3/tutorial/modules.html#packages-in-multiple-directories "Link to this heading")
Packages support one more special attribute, [`__path__`](https://docs.python.org/3/reference/datamodel.html#module.__path__ "module.__path__"). This is initialized to be a [sequence](https://docs.python.org/3/glossary.html#term-sequence) of strings containing the name of the directory holding the package’s `__init__.py` before the code in that file is executed. This variable can be modified; doing so affects future searches for modules and subpackages contained in the package.
While this feature is not often needed, it can be used to extend the set of modules found in a package.
Footnotes
[[1](https://docs.python.org/3/tutorial/modules.html#id1)]
In fact function definitions are also ‘statements’ that are ‘executed’; the execution of a module-level function definition adds the function name to the module’s global namespace.
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [6. Modules](https://docs.python.org/3/tutorial/modules.html)
    * [6.1. More on Modules](https://docs.python.org/3/tutorial/modules.html#more-on-modules)
      * [6.1.1. Executing modules as scripts](https://docs.python.org/3/tutorial/modules.html#executing-modules-as-scripts)
      * [6.1.2. The Module Search Path](https://docs.python.org/3/tutorial/modules.html#the-module-search-path)
      * [6.1.3. “Compiled” Python files](https://docs.python.org/3/tutorial/modules.html#compiled-python-files)
    * [6.2. Standard Modules](https://docs.python.org/3/tutorial/modules.html#standard-modules)
    * [6.3. The `dir()` Function](https://docs.python.org/3/tutorial/modules.html#the-dir-function)
    * [6.4. Packages](https://docs.python.org/3/tutorial/modules.html#packages)
      * [6.4.1. Importing * From a Package](https://docs.python.org/3/tutorial/modules.html#importing-from-a-package)
      * [6.4.2. Intra-package References](https://docs.python.org/3/tutorial/modules.html#intra-package-references)
      * [6.4.3. Packages in Multiple Directories](https://docs.python.org/3/tutorial/modules.html#packages-in-multiple-directories)


#### Previous topic
[5. Data Structures](https://docs.python.org/3/tutorial/datastructures.html "previous chapter")
#### Next topic
[7. Input and Output](https://docs.python.org/3/tutorial/inputoutput.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/tutorial/modules.rst)