Title: JSON Top-Level Value Constraints
URL: https://docs.python.org/3/library/json.html
Summary: This section discusses the _object_pairs_hook_ parameter for altering JSON behavior and the historical constraints of top-level JSON values. It explains how earlier standards required top-level values to be objects or arrays, while the current standard (RFC 7159) allows for null, boolean, number, or string as top-level values. Adhering to the old restriction may enhance interoperability.
---

```

The _object_pairs_hook_ parameter can be used to alter this behavior.
### Top-level Non-Object, Non-Array Values[¶](https://docs.python.org/3/library/json.html#top-level-non-object-non-array-values "Link to this heading")
The old version of JSON specified by the obsolete [**RFC 4627**](https://datatracker.ietf.org/doc/html/rfc4627.html) required that the top-level value of a JSON text must be either a JSON object or array (Python [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") or [`list`](https://docs.python.org/3/library/stdtypes.html#list "list")), and could not be a JSON null, boolean, number, or string value. [**RFC 7159**](https://datatracker.ietf.org/doc/html/rfc7159.html) removed that restriction, and this module does not and has never implemented that restriction in either its serializer or its deserializer.
Regardless, for maximum interoperability, you may wish to voluntarily adhere to the restriction yourself.
### Implementation Limitations[¶](https://docs.python.org/3/library/json.html#implementation-limitations "Link to this heading")
Some JSON deserializer implementations may set limits on:
  * the size of accepted JSON texts
  * the maximum level of nesting of JSON objects and arrays
  * the range and precision of JSON numbers
  * the content and maximum length of JSON strings


This module does not impose any such limits beyond those of the relevant Python datatypes themselves or the Python interpreter itself.
When serializing to JSON, beware any such limitations in applications that may consume your JSON. In particular, it is common for JSON numbers to be deserialized into IEEE 754 double precision numbers and thus subject to that representation’s range and precision limitations. This is especially relevant when serializing Python [`int`](https://docs.python.org/3/library/functions.html#int "int") values of extremely large magnitude, or when serializing instances of “exotic” numerical types such as [`decimal.Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "decimal.Decimal").
## Command Line Interface[¶](https://docs.python.org/3/library/json.html#module-json.tool "Link to this heading")
**Source code:** [Lib/json/tool.py](https://github.com/python/cpython/tree/3.13/Lib/json/tool.py)
The [`json.tool`](https://docs.python.org/3/library/json.html#module-json.tool "json.tool: A command line to validate and pretty-print JSON.") module provides a simple command line interface to validate and pretty-print JSON objects.
If the optional `infile` and `outfile` arguments are not specified, [`sys.stdin`](https://docs.python.org/3/library/sys.html#sys.stdin "sys.stdin") and [`sys.stdout`](https://docs.python.org/3/library/sys.html#sys.stdout "sys.stdout") will be used respectively:
```
$ echo'{"json": "obj"}'|python-mjson.tool
{
  "json": "obj"
}
$ echo'{1.2:3.4}'|python-mjson.tool
Expecting property name enclosed in double quotes: line 1 column 2 (char 1)

```

Changed in version 3.5: The output is now in the same order as the input. Use the [`--sort-keys`](https://docs.python.org/3/library/json.html#cmdoption-json.tool-sort-keys) option to sort the output of dictionaries alphabetically by key.
### Command line options[¶](https://docs.python.org/3/library/json.html#command-line-options "Link to this heading") 

infile[¶](https://docs.python.org/3/library/json.html#cmdoption-json.tool-arg-infile "Link to this definition")
    
The JSON file to be validated or pretty-printed:
```
$ python-mjson.toolmp_films.json
[
  {
    "title": "And Now for Something Completely Different",
    "year": 1971
  },
  {
    "title": "Monty Python and the Holy Grail",
    "year": 1975
  }
]