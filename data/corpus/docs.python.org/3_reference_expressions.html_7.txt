Title: Generator Exception Handling and Yield Expressions
URL: https://docs.python.org/3/reference/expressions.html
Summary: This section discusses how to handle exceptions in generators, specifically through the use of `send()` and `throw()`. It explains that `send()` may raise `AttributeError` or `TypeError`, while `throw()` raises an exception immediately. Additionally, it notes that when the underlying iterator is exhausted, the `value` attribute of a raised `StopIteration` instance is assigned the value of the yield expression, which can be explicitly set or automatically assigned from a subgenerator. The content also mentions the introduction of `yield from <expr>` in Python 3.3.
---

d "generator.send") will raise [`AttributeError`](https://docs.python.org/3/library/exceptions.html#AttributeError "AttributeError") or [`TypeError`](https://docs.python.org/3/library/exceptions.html#TypeError "TypeError"), while [`throw()`](https://docs.python.org/3/reference/expressions.html#generator.throw "generator.throw") will just raise the passed in exception immediately.
When the underlying iterator is complete, the [`value`](https://docs.python.org/3/library/exceptions.html#StopIteration.value "StopIteration.value") attribute of the raised [`StopIteration`](https://docs.python.org/3/library/exceptions.html#StopIteration "StopIteration") instance becomes the value of the yield expression. It can be either set explicitly when raising [`StopIteration`](https://docs.python.org/3/library/exceptions.html#StopIteration "StopIteration"), or automatically when the subiterator is a generator (by returning a value from the subgenerator).
Changed in version 3.3: Added `yield from <expr>` to delegate control flow to a subiterator.
The parentheses may be omitted when the yield expression is the sole expression on the right hand side of an assignment statement.
See also 

[**PEP 255**](https://peps.python.org/pep-0255/) - Simple Generators
    
The proposal for adding generators and the [`yield`](https://docs.python.org/3/reference/simple_stmts.html#yield) statement to Python. 

[**PEP 342**](https://peps.python.org/pep-0342/) - Coroutines via Enhanced Generators
    
The proposal to enhance the API and syntax of generators, making them usable as simple coroutines. 

[**PEP 380**](https://peps.python.org/pep-0380/) - Syntax for Delegating to a Subgenerator
    
The proposal to introduce the [`yield_from`](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-yield_from) syntax, making delegation to subgenerators easy. 

[**PEP 525**](https://peps.python.org/pep-0525/) - Asynchronous Generators
    
The proposal that expanded on [**PEP 492**](https://peps.python.org/pep-0492/) by adding generator capabilities to coroutine functions.
#### 6.2.9.1. Generator-iterator methods[¶](https://docs.python.org/3/reference/expressions.html#generator-iterator-methods "Link to this heading")
This subsection describes the methods of a generator iterator. They can be used to control the execution of a generator function.
Note that calling any of the generator methods below when the generator is already executing raises a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") exception. 

generator.__next__()[¶](https://docs.python.org/3/reference/expressions.html#generator.__next__ "Link to this definition")
    
Starts the execution of a generator function or resumes it at the last executed yield expression. When a generator function is resumed with a [`__next__()`](https://docs.python.org/3/reference/expressions.html#generator.__next__ "generator.__next__") method, the current yield expression always evaluates to [`None`](https://docs.python.org/3/library/constants.html#None "None"). The execution then continues to the next yield expression, where the generator is suspended again, and the value of the [`yield_list`](https://docs.python.org/3/reference/expressions.html#grammar-token-python-grammar-yield_list) is returned to [`__next__()`](https://docs.python.org/3/reference/expressions.html#generator.__next__ "generator.__next__")’s caller. If the generator exits without yielding another value, a [`StopIteration`](https://docs.python.org/3/library/exceptions.html#StopIteration "StopIteration") exception is raised.
This method is normally called implicitly, e.g. by a [`for`](https://docs.python.org/3/reference/compound_stmts.html#for) loop, or by the built-in [`next()`](https://docs.python.org/3/library/functions.html#next "next") function. 

generator.send(_value_)[¶](https://docs.python.org/3/reference/expressions.html#generator.send "Link to this definition")
    
Resumes the execution and “sends” a value into the generator function. The _value_ argument becomes the result of the current yield expression. The [`send()`](https://docs.python.org/3/reference/expressions.html#generator.send "generator.send") method returns the next value yielded by the generator, or raises [`StopIteration`](https://docs.python.org/3/library/exceptions.html#StopIteration "StopIteration") if the generator exits without yielding another value. When [`send()`](https://docs.python.org/3/reference/expressions.html#generator.send "generator.send") is called to start the generator, it must be called with [`None`](https://docs.python.org/3/library/constants.html#None "None") as the argument, because there is no yield expression that could receive the value. 

generator.throw(_value_)[¶](https://docs.python.org/3/reference/expressions.html#generator.throw "Link to this definition")