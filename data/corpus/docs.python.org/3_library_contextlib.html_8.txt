Title: Examples and Recipes for contextlib
URL: https://docs.python.org/3/library/contextlib.html
Summary: This section provides examples and recipes for using the tools in the contextlib module, emphasizing the use of ExitStack for managing multiple context managers and cleanup operations in a single with statement.
---

```

Added in version 3.7.
## Examples and Recipes[¶](https://docs.python.org/3/library/contextlib.html#examples-and-recipes "Link to this heading")
This section describes some examples and recipes for making effective use of the tools provided by [`contextlib`](https://docs.python.org/3/library/contextlib.html#module-contextlib "contextlib: Utilities for with-statement contexts.").
### Supporting a variable number of context managers[¶](https://docs.python.org/3/library/contextlib.html#supporting-a-variable-number-of-context-managers "Link to this heading")
The primary use case for [`ExitStack`](https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack "contextlib.ExitStack") is the one given in the class documentation: supporting a variable number of context managers and other cleanup operations in a single [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement. The variability may come from the number of context managers needed being driven by user input (such as opening a user specified collection of files), or from some of the context managers being optional:
```
with ExitStack() as stack:
  for resource in resources:
    stack.enter_context(resource)
  if need_special_resource():
    special = acquire_special_resource()
    stack.callback(release_special_resource, special)
  # Perform operations that use the acquired resources

```

As shown, [`ExitStack`](https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack "contextlib.ExitStack") also makes it quite easy to use [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statements to manage arbitrary resources that don’t natively support the context management protocol.
### Catching exceptions from `__enter__` methods[¶](https://docs.python.org/3/library/contextlib.html#catching-exceptions-from-enter-methods "Link to this heading")
It is occasionally desirable to catch exceptions from an `__enter__` method implementation, _without_ inadvertently catching exceptions from the [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement body or the context manager’s `__exit__` method. By using [`ExitStack`](https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack "contextlib.ExitStack") the steps in the context management protocol can be separated slightly in order to allow this:
```
stack = ExitStack()
try:
  x = stack.enter_context(cm)
except Exception:
  # handle __enter__ exception
else:
  with stack:
    # Handle normal case

```

Actually needing to do this is likely to indicate that the underlying API should be providing a direct resource management interface for use with [`try`](https://docs.python.org/3/reference/compound_stmts.html#try)/[`except`](https://docs.python.org/3/reference/compound_stmts.html#except)/[`finally`](https://docs.python.org/3/reference/compound_stmts.html#finally) statements, but not all APIs are well designed in that regard. When a context manager is the only resource management API provided, then [`ExitStack`](https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack "contextlib.ExitStack") can make it easier to handle various situations that can’t be handled directly in a [`with`](https://docs.python.org/3/reference/compound_stmts.html#with) statement.
### Cleaning up in an `__enter__` implementation[¶](https://docs.python.org/3/library/contextlib.html#cleaning-up-in-an-enter-implementation "Link to this heading")
As noted in the documentation of [`ExitStack.push()`](https://docs.python.org/3/library/contextlib.html#contextlib.ExitStack.push "contextlib.ExitStack.push"), this method can be useful in cleaning up an already allocated resource if later steps in the [`__enter__()`](https://docs.python.org/3/reference/datamodel.html#object.__enter__ "object.__enter__") implementation fail.
Here’s an example of doing this for a context manager that accepts resource acquisition and release functions, along with an optional validation function, and maps them to the context management protocol: