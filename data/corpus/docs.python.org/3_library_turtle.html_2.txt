Title: Turtle Graphics Commands
URL: https://docs.python.org/3/library/turtle.html
Summary: This section explains how to control the turtle in Python's turtle graphics module. Users can steer the turtle with commands such as `backward()`, `right()`, and adjust the pen's color and width. Additionally, it covers lifting and lowering the pen to move without drawing and how to return the turtle to its starting position at the center of the screen using `home()`, as well as retrieving its coordinates with `pos()`.
---

```

Notice how the turtle, represented by an arrow, points in different directions as you steer it.
Experiment with those commands, and also with `backward()` and `right()`.
#### Pen control[¶](https://docs.python.org/3/library/turtle.html#pen-control "Link to this heading")
Try changing the color - for example, `color('blue')` - and width of the line - for example, `width(3)` - and then drawing again.
You can also move the turtle around without drawing, by lifting up the pen: `up()` before moving. To start drawing again, use `down()`.
#### The turtle’s position[¶](https://docs.python.org/3/library/turtle.html#the-turtle-s-position "Link to this heading")
Send your turtle back to its starting-point (useful if it has disappeared off-screen):
```
home()

```

The home position is at the center of the turtle’s screen. If you ever need to know them, get the turtle’s x-y coordinates with:
```
pos()

```

Home is at `(0, 0)`.
And after a while, it will probably help to clear the window so we can start anew:
```
clearscreen()

```

### Making algorithmic patterns[¶](https://docs.python.org/3/library/turtle.html#making-algorithmic-patterns "Link to this heading")
Using loops, it’s possible to build up geometric patterns:
```
for steps in range(100):
  for c in ('blue', 'red', 'green'):
    color(c)
    forward(steps)
    right(30)

```

- which of course, are limited only by the imagination!
Let’s draw the star shape at the top of this page. We want red lines, filled in with yellow:
```
color('red')
fillcolor('yellow')

```

Just as `up()` and `down()` determine whether lines will be drawn, filling can be turned on and off:
```
begin_fill()

```

Next we’ll create a loop:
```
while True:
  forward(200)
  left(170)
  if abs(pos()) < 1:
    break

```

`abs(pos()) < 1` is a good way to know when the turtle is back at its home position.
Finally, complete the filling:
```
end_fill()

```

(Note that filling only actually takes place when you give the `end_fill()` command.)
## How to…[¶](https://docs.python.org/3/library/turtle.html#how-to "Link to this heading")
This section covers some typical turtle use-cases and approaches.
### Get started as quickly as possible[¶](https://docs.python.org/3/library/turtle.html#get-started-as-quickly-as-possible "Link to this heading")
One of the joys of turtle graphics is the immediate, visual feedback that’s available from simple commands - it’s an excellent way to introduce children to programming ideas, with a minimum of overhead (not just children, of course).
The turtle module makes this possible by exposing all its basic functionality as functions, available with `from turtle import *`. The [turtle graphics tutorial](https://docs.python.org/3/library/turtle.html#turtle-tutorial) covers this approach.
It’s worth noting that many of the turtle commands also have even more terse equivalents, such as `fd()` for [`forward()`](https://docs.python.org/3/library/turtle.html#turtle.forward "turtle.forward"). These are especially useful when working with learners for whom typing is not a skill.
> You’ll need to have the [`Tk interface package`](https://docs.python.org/3/library/tkinter.html#module-tkinter "tkinter: Interface to Tcl/Tk for graphical user interfaces") installed on your system for turtle graphics to work. Be warned that this is not always straightforward, so check this in advance if you’re planning to use turtle graphics with a learner.
### Use the `turtle` module namespace[¶](https://docs.python.org/3/library/turtle.html#use-the-turtle-module-namespace "Link to this heading")
Using `from turtle import *` is convenient - but be warned that it imports a rather large collection of objects, and if you’re doing anything but turtle graphics you run the risk of a name conflict (this becomes even more an issue if you’re using turtle graphics in a script where other modules might be imported).
The solution is to use `import turtle` - `fd()` becomes `turtle.fd()`, `width()` becomes `turtle.width()` and so on. (If typing “turtle” over and over again becomes tedious, use for example `import turtle as t` instead.)
### Use turtle graphics in a script[¶](https://docs.python.org/3/library/turtle.html#use-turtle-graphics-in-a-script "Link to this heading")
It’s recommended to use the `turtle` module namespace as described immediately above, for example:
```
importturtleast
fromrandomimport random
for i in range(100):
  steps = int(random() * 100)
  angle = int(random() * 360)
  t.right(angle)
  t.fd(steps)

```

Another step is also required though - as soon as the script ends, Python will also close the turtle’s window. Add:
```
t.mainloop()