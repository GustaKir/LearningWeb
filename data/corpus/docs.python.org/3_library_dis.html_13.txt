Title: Bytecode Instructions: POP_JUMP_IF_TRUE and POP_JUMP_IF_FALSE
URL: https://docs.python.org/3/library/dis.html
Summary: This section discusses the bytecode instructions 'POP_JUMP_IF_TRUE' and 'POP_JUMP_IF_FALSE'. 'POP_JUMP_IF_TRUE' increments the bytecode counter by a relative delta if the top of the stack is true, while 'POP_JUMP_IF_FALSE' does so if it is false. Changes in these instructions across versions 3.11 to 3.13 are noted, including modifications to their operation arguments and operand requirements.
---

POP_JUMP_IF_TRUE(_delta_)[¶](https://docs.python.org/3/library/dis.html#opcode-POP_JUMP_IF_TRUE "Link to this definition")
    
If `STACK[-1]` is true, increments the bytecode counter by _delta_. `STACK[-1]` is popped.
Changed in version 3.11: The oparg is now a relative delta rather than an absolute target. This opcode is a pseudo-instruction, replaced in final bytecode by the directed versions (forward/backward).
Changed in version 3.12: This is no longer a pseudo-instruction.
Changed in version 3.13: This instruction now requires an exact [`bool`](https://docs.python.org/3/library/functions.html#bool "bool") operand. 

POP_JUMP_IF_FALSE(_delta_)[¶](https://docs.python.org/3/library/dis.html#opcode-POP_JUMP_IF_FALSE "Link to this definition")
    
If `STACK[-1]` is false, increments the bytecode counter by _delta_. `STACK[-1]` is popped.
Changed in version 3.11: The oparg is now a relative delta rather than an absolute target. This opcode is a pseudo-instruction, replaced in final bytecode by the directed versions (forward/backward).
Changed in version 3.12: This is no longer a pseudo-instruction.
Changed in version 3.13: This instruction now requires an exact [`bool`](https://docs.python.org/3/library/functions.html#bool "bool") operand. 

POP_JUMP_IF_NOT_NONE(_delta_)[¶](https://docs.python.org/3/library/dis.html#opcode-POP_JUMP_IF_NOT_NONE "Link to this definition")
    
If `STACK[-1]` is not `None`, increments the bytecode counter by _delta_. `STACK[-1]` is popped.
Added in version 3.11.
Changed in version 3.12: This is no longer a pseudo-instruction. 

POP_JUMP_IF_NONE(_delta_)[¶](https://docs.python.org/3/library/dis.html#opcode-POP_JUMP_IF_NONE "Link to this definition")
    
If `STACK[-1]` is `None`, increments the bytecode counter by _delta_. `STACK[-1]` is popped.
Added in version 3.11.
Changed in version 3.12: This is no longer a pseudo-instruction. 

FOR_ITER(_delta_)[¶](https://docs.python.org/3/library/dis.html#opcode-FOR_ITER "Link to this definition")
    
`STACK[-1]` is an [iterator](https://docs.python.org/3/glossary.html#term-iterator). Call its [`__next__()`](https://docs.python.org/3/library/stdtypes.html#iterator.__next__ "iterator.__next__") method. If this yields a new value, push it on the stack (leaving the iterator below it). If the iterator indicates it is exhausted then the byte code counter is incremented by _delta_.
Changed in version 3.12: Up until 3.11 the iterator was popped when it was exhausted. 

LOAD_GLOBAL(_namei_)[¶](https://docs.python.org/3/library/dis.html#opcode-LOAD_GLOBAL "Link to this definition")
    
Loads the global named `co_names[namei>>1]` onto the stack.
Changed in version 3.11: If the low bit of `namei` is set, then a `NULL` is pushed to the stack before the global variable. 

LOAD_FAST(_var_num_)[¶](https://docs.python.org/3/library/dis.html#opcode-LOAD_FAST "Link to this definition")
    
Pushes a reference to the local `co_varnames[var_num]` onto the stack.
Changed in version 3.12: This opcode is now only used in situations where the local variable is guaranteed to be initialized. It cannot raise [`UnboundLocalError`](https://docs.python.org/3/library/exceptions.html#UnboundLocalError "UnboundLocalError"). 

LOAD_FAST_LOAD_FAST(_var_nums_)[¶](https://docs.python.org/3/library/dis.html#opcode-LOAD_FAST_LOAD_FAST "Link to this definition")
    
Pushes references to `co_varnames[var_nums >> 4]` and `co_varnames[var_nums & 15]` onto the stack.
Added in version 3.13. 

LOAD_FAST_CHECK(_var_num_)[¶](https://docs.python.org/3/library/dis.html#opcode-LOAD_FAST_CHECK "Link to this definition")
    
Pushes a reference to the local `co_varnames[var_num]` onto the stack, raising an [`UnboundLocalError`](https://docs.python.org/3/library/exceptions.html#UnboundLocalError "UnboundLocalError") if the local variable has not been initialized.
Added in version 3.12. 

LOAD_FAST_AND_CLEAR(_var_num_)[¶](https://docs.python.org/3/library/dis.html#opcode-LOAD_FAST_AND_CLEAR "Link to this definition")
    
Pushes a reference to the local `co_varnames[var_num]` onto the stack (or pushes `NULL` onto the stack if the local variable has not been initialized) and sets `co_varnames[var_num]` to `NULL`.
Added in version 3.12. 

STORE_FAST(_var_num_)[¶](https://docs.python.org/3/library/dis.html#opcode-STORE_FAST "Link to this definition")
    
Stores `STACK.pop()` into the local `co_varnames[var_num]`. 

STORE_FAST_STORE_FAST(_var_nums_)[¶](https://docs.python.org/3/library/dis.html#opcode-STORE_FAST_STORE_FAST "Link to this definition")
    
Stores `STACK[-1]` into `co_varnames[var_nums >> 4]` and `STACK[-2]` into `co_varnames[var_nums & 15]`.
Added in version 3.13. 

STORE_FAST_LOAD_FAST(_var_nums_)[¶](https://docs.python.org/3/library/dis.html#opcode-STORE_FAST_LOAD_FAST "Link to this definition")
    
Stores `STACK.pop()` into the local `co_varnames[var_nums >> 4]` and pushes a reference to the local `co_varnames[var_nums & 15]` onto the stack.
Added in version 3.13.