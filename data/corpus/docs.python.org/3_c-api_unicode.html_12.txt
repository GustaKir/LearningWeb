Title: PyUnicode_EncodeFSDefault Function
URL: https://docs.python.org/3/c-api/unicode.html
Summary: The `PyUnicode_EncodeFSDefault` function encodes a Unicode object to the filesystem encoding and error handler, returning a new reference to a bytes object. This function is part of the Stable ABI and should be used instead of `PyUnicode_EncodeLocale` for encoding strings to the current locale encoding.
---

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyUnicode_EncodeFSDefault([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*unicode)[¶](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_EncodeFSDefault "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Encode a Unicode object to the [filesystem encoding and error handler](https://docs.python.org/3/glossary.html#term-filesystem-encoding-and-error-handler), and return [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes"). Note that the resulting [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") object can contain null bytes.
If you need to encode a string to the current locale encoding, use [`PyUnicode_EncodeLocale()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_EncodeLocale "PyUnicode_EncodeLocale").
See also
The [`Py_EncodeLocale()`](https://docs.python.org/3/c-api/sys.html#c.Py_EncodeLocale "Py_EncodeLocale") function.
Added in version 3.2.
Changed in version 3.6: The [filesystem error handler](https://docs.python.org/3/glossary.html#term-filesystem-encoding-and-error-handler) is now used.
### wchar_t Support[¶](https://docs.python.org/3/c-api/unicode.html#wchar-t-support "Link to this heading")
`wchar_t` support for platforms which support it: 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyUnicode_FromWideChar(constwchar_t*wstr, [Py_ssize_t](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")size)[¶](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FromWideChar "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Create a Unicode object from the `wchar_t` buffer _wstr_ of the given _size_. Passing `-1` as the _size_ indicates that the function must itself compute the length, using `wcslen()`. Return `NULL` on failure. 

[Py_ssize_t](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")PyUnicode_AsWideChar([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*unicode, wchar_t*wstr, [Py_ssize_t](https://docs.python.org/3/c-api/intro.html#c.Py_ssize_t "Py_ssize_t")size)[¶](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_AsWideChar "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Copy the Unicode object contents into the `wchar_t` buffer _wstr_. At most _size_ `wchar_t` characters are copied (excluding a possibly trailing null termination character). Return the number of `wchar_t` characters copied or `-1` in case of an error.
When _wstr_ is `NULL`, instead return the _size_ that would be required to store all of _unicode_ including a terminating null.
Note that the resulting wchar_t* string may or may not be null-terminated. It is the responsibility of the caller to make sure that the wchar_t* string is null-terminated in case this is required by the application. Also, note that the wchar_t* string might contain null characters, which would cause the string to be truncated when used with most C functions.