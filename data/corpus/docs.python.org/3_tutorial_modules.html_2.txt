Title: Module Search Path in Python
URL: https://docs.python.org/3/tutorial/modules.html
Summary: When importing a module, the Python interpreter first checks for a built-in version. If not found, it looks for the module file (e.g., spam.py) in directories listed in sys.path, which includes the directory of the input script and locations specified in PYTHONPATH.
---

```

This is often used either to provide a convenient user interface to a module, or for testing purposes (running the module as a script executes a test suite).
### 6.1.2. The Module Search Path[¶](https://docs.python.org/3/tutorial/modules.html#the-module-search-path "Link to this heading")
When a module named `spam` is imported, the interpreter first searches for a built-in module with that name. These module names are listed in [`sys.builtin_module_names`](https://docs.python.org/3/library/sys.html#sys.builtin_module_names "sys.builtin_module_names"). If not found, it then searches for a file named `spam.py` in a list of directories given by the variable [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path"). [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path") is initialized from these locations:
  * The directory containing the input script (or the current directory when no file is specified).
  * [`PYTHONPATH`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONPATH) (a list of directory names, with the same syntax as the shell variable `PATH`).
  * The installation-dependent default (by convention including a `site-packages` directory, handled by the [`site`](https://docs.python.org/3/library/site.html#module-site "site: Module responsible for site-specific configuration.") module).


More details are at [The initialization of the sys.path module search path](https://docs.python.org/3/library/sys_path_init.html#sys-path-init).
Note
On file systems which support symlinks, the directory containing the input script is calculated after the symlink is followed. In other words the directory containing the symlink is **not** added to the module search path.
After initialization, Python programs can modify [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path"). The directory containing the script being run is placed at the beginning of the search path, ahead of the standard library path. This means that scripts in that directory will be loaded instead of modules of the same name in the library directory. This is an error unless the replacement is intended. See section [Standard Modules](https://docs.python.org/3/tutorial/modules.html#tut-standardmodules) for more information.
### 6.1.3. “Compiled” Python files[¶](https://docs.python.org/3/tutorial/modules.html#compiled-python-files "Link to this heading")
To speed up loading modules, Python caches the compiled version of each module in the `__pycache__` directory under the name `module._version_.pyc`, where the version encodes the format of the compiled file; it generally contains the Python version number. For example, in CPython release 3.3 the compiled version of spam.py would be cached as`__pycache__/spam.cpython-33.pyc`. This naming convention allows compiled modules from different releases and different versions of Python to coexist.
Python checks the modification date of the source against the compiled version to see if it’s out of date and needs to be recompiled. This is a completely automatic process. Also, the compiled modules are platform-independent, so the same library can be shared among systems with different architectures.
Python does not check the cache in two circumstances. First, it always recompiles and does not store the result for the module that’s loaded directly from the command line. Second, it does not check the cache if there is no source module. To support a non-source (compiled only) distribution, the compiled module must be in the source directory, and there must not be a source module.
Some tips for experts:
  * You can use the [`-O`](https://docs.python.org/3/using/cmdline.html#cmdoption-O) or [`-OO`](https://docs.python.org/3/using/cmdline.html#cmdoption-OO) switches on the Python command to reduce the size of a compiled module. The `-O` switch removes assert statements, the `-OO` switch removes both assert statements and __doc__ strings. Since some programs may rely on having these available, you should only use this option if you know what you’re doing. “Optimized” modules have an `opt-` tag and are usually smaller. Future releases may change the effects of optimization.
  * A program doesn’t run any faster when it is read from a `.pyc` file than when it is read from a `.py` file; the only thing that’s faster about `.pyc` files is the speed with which they are loaded.
  * The module [`compileall`](https://docs.python.org/3/library/compileall.html#module-compileall "compileall: Tools for byte-compiling all Python source files in a directory tree.") can create .pyc files for all modules in a directory.
  * There is more detail on this process, including a flow chart of the decisions, in [**PEP 3147**](https://peps.python.org/pep-3147/).