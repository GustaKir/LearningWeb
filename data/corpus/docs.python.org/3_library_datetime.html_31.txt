Title: Understanding tzinfo Methods in Python's datetime Module
URL: https://docs.python.org/3/library/datetime.html
Summary: The `dst()` method in the `tzinfo` class raises a `NotImplementedError` by default. Starting from version 3.7, the DST offset can be expressed in fractions of a minute. The `tzname(_dt_)` method retrieves the time zone name associated with a `datetime` object, returning various formats like 'GMT', 'UTC', and others, though it may also return `None` if the name is unknown.
---

```

The default implementation of [`dst()`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo.dst "datetime.tzinfo.dst") raises [`NotImplementedError`](https://docs.python.org/3/library/exceptions.html#NotImplementedError "NotImplementedError").
Changed in version 3.7: The DST offset is not restricted to a whole number of minutes. 

tzinfo.tzname(_dt_)[¶](https://docs.python.org/3/library/datetime.html#datetime.tzinfo.tzname "Link to this definition")
    
Return the time zone name corresponding to the [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") object _dt_ , as a string. Nothing about string names is defined by the `datetime` module, and there’s no requirement that it mean anything in particular. For example, `"GMT"`, `"UTC"`, `"-500"`, `"-5:00"`, `"EDT"`, `"US/Eastern"`, `"America/New York"` are all valid replies. Return `None` if a string name isn’t known. Note that this is a method rather than a fixed string primarily because some [`tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo "datetime.tzinfo") subclasses will wish to return different names depending on the specific value of _dt_ passed, especially if the [`tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo "datetime.tzinfo") class is accounting for daylight time.
The default implementation of [`tzname()`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo.tzname "datetime.tzinfo.tzname") raises [`NotImplementedError`](https://docs.python.org/3/library/exceptions.html#NotImplementedError "NotImplementedError").
These methods are called by a [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") or [`time`](https://docs.python.org/3/library/datetime.html#datetime.time "datetime.time") object, in response to their methods of the same names. A [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") object passes itself as the argument, and a [`time`](https://docs.python.org/3/library/datetime.html#datetime.time "datetime.time") object passes `None` as the argument. A [`tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo "datetime.tzinfo") subclass’s methods should therefore be prepared to accept a _dt_ argument of `None`, or of class [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime").
When `None` is passed, it’s up to the class designer to decide the best response. For example, returning `None` is appropriate if the class wishes to say that time objects don’t participate in the [`tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo "datetime.tzinfo") protocols. It may be more useful for `utcoffset(None)` to return the standard UTC offset, as there is no other convention for discovering the standard offset.
When a [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") object is passed in response to a [`datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") method, `dt.tzinfo` is the same object as _self_. [`tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo "datetime.tzinfo") methods can rely on this, unless user code calls [`tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo "datetime.tzinfo") methods directly. The intent is that the [`tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo "datetime.tzinfo") methods interpret _dt_ as being in local time, and not need worry about objects in other time zones.
There is one more [`tzinfo`](https://docs.python.org/3/library/datetime.html#datetime.tzinfo "datetime.tzinfo") method that a subclass may wish to override: