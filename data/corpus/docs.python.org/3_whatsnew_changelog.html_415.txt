Title: C API Changes in Python
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section outlines notable updates to the Python C API, including the removal of undocumented macros, deprecation of the `PyUnicode_InternImmortal()` function, and the addition of the `PyCodec_Unregister()` function for codec management.
---

### C API[Â¶](https://docs.python.org/3/whatsnew/changelog.html#id366 "Link to this heading")
  * [bpo-41936](https://bugs.python.org/issue?@action=redirect&bpo=41936): Removed undocumented macros `Py_ALLOW_RECURSION` and `Py_END_ALLOW_RECURSION` and the `recursion_critical` field of the [`PyInterpreterState`](https://docs.python.org/3/c-api/init.html#c.PyInterpreterState "PyInterpreterState") structure.
  * [bpo-41692](https://bugs.python.org/issue?@action=redirect&bpo=41692): The `PyUnicode_InternImmortal()` function is now deprecated and will be removed in Python 3.12: use [`PyUnicode_InternInPlace()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_InternInPlace "PyUnicode_InternInPlace") instead. Patch by Victor Stinner.
  * [bpo-41842](https://bugs.python.org/issue?@action=redirect&bpo=41842): Add [`PyCodec_Unregister()`](https://docs.python.org/3/c-api/codec.html#c.PyCodec_Unregister "PyCodec_Unregister") function to unregister a codec search function.
  * [bpo-41834](https://bugs.python.org/issue?@action=redirect&bpo=41834): Remove the `_Py_CheckRecursionLimit` variable: it has been replaced by `ceval.recursion_limit` of the [`PyInterpreterState`](https://docs.python.org/3/c-api/init.html#c.PyInterpreterState "PyInterpreterState") structure. Patch by Victor Stinner.
  * [bpo-41689](https://bugs.python.org/issue?@action=redirect&bpo=41689): Types created with [`PyType_FromSpec()`](https://docs.python.org/3/c-api/type.html#c.PyType_FromSpec "PyType_FromSpec") now make any signature in their `tp_doc` slot accessible from `__text_signature__`.
  * [bpo-41524](https://bugs.python.org/issue?@action=redirect&bpo=41524): Fix bug in PyOS_mystrnicmp and PyOS_mystricmp that incremented pointers beyond the end of a string.
  * [bpo-41324](https://bugs.python.org/issue?@action=redirect&bpo=41324): Add a minimal decimal capsule API. The API supports fast conversions between Decimals up to 38 digits and their triple representation as a C struct.
  * [bpo-30155](https://bugs.python.org/issue?@action=redirect&bpo=30155): Add [`PyDateTime_DATE_GET_TZINFO()`](https://docs.python.org/3/c-api/datetime.html#c.PyDateTime_DATE_GET_TZINFO "PyDateTime_DATE_GET_TZINFO") and [`PyDateTime_TIME_GET_TZINFO()`](https://docs.python.org/3/c-api/datetime.html#c.PyDateTime_TIME_GET_TZINFO "PyDateTime_TIME_GET_TZINFO") macros for accessing the `tzinfo` attributes of [`datetime.datetime`](https://docs.python.org/3/library/datetime.html#datetime.datetime "datetime.datetime") and [`datetime.time`](https://docs.python.org/3/library/datetime.html#datetime.time "datetime.time") objects.
  * [bpo-40170](https://bugs.python.org/issue?@action=redirect&bpo=40170): Revert [`PyType_HasFeature()`](https://docs.python.org/3/c-api/type.html#c.PyType_HasFeature "PyType_HasFeature") change: it reads again directly the [`PyTypeObject.tp_flags`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_flags "PyTypeObject.tp_flags") member when the limited C API is not used, rather than always calling [`PyType_GetFlags()`](https://docs.python.org/3/c-api/type.html#c.PyType_GetFlags "PyType_GetFlags") which hides implementation details.
  * [bpo-41123](https://bugs.python.org/issue?@action=redirect&bpo=41123): Remove `PyUnicode_AsUnicodeCopy`.
  * [bpo-41123](https://bugs.python.org/issue?@action=redirect&bpo=41123): Removed `PyLong_FromUnicode()`.
  * [bpo-41123](https://bugs.python.org/issue?@action=redirect&bpo=41123): Removed `PyUnicode_GetMax()`.
  * [bpo-41123](https://bugs.python.org/issue?@action=redirect&bpo=41123): Removed `Py_UNICODE_str*` functions manipulating `Py_UNICODE*` strings.
  * [bpo-41103](https://bugs.python.org/issue?@action=redirect&bpo=41103): `PyObject_AsCharBuffer()`, `PyObject_AsReadBuffer()`, `PyObject_CheckReadBuffer()`, and `PyObject_AsWriteBuffer()` are removed. Please migrate to new buffer protocol; [`PyObject_GetBuffer()`](https://docs.python.org/3/c-api/buffer.html#c.PyObject_GetBuffer "PyObject_GetBuffer") and [`PyBuffer_Release()`](https://docs.python.org/3/c-api/buffer.html#c.PyBuffer_Release "PyBuffer_Release").
  * [bpo-36346](https://bugs.python.org/issue?@action=redirect&bpo=36346): Raises DeprecationWarning for `PyUnicode_FromUnicode(NULL, size)` and `PyUnicode_FromStringAndSize(NULL, size)` with `size > 0`.
  * [bpo-36346](https://bugs.python.org/issue?@action=redirect&bpo=36346): Mark `Py_UNICODE_COPY`, `Py_UNICODE_FILL`, `PyUnicode_WSTR_LENGTH`, `PyUnicode_FromUnicode`, `PyUnicode_AsUnicode`, and `PyUnicode_AsUnicodeAndSize` as deprecated in C. Remove `Py_UNICODE_MATCH` which was deprecated and broken since Python 3.3.
  * [bpo-40989](https://bugs.python.org/issue?@action=redirect&bpo=40989): The `PyObject_INIT()` and `PyObject_INIT_VAR()` macros become aliases to, respectively, [`PyObject_Init()`](https://docs.python.org/3/c-api/allocation.html#c.PyObject_Init "PyObject_Init") and [`PyObject_InitVar()`](https://docs.python.org/3/c-api/allocation.html#c.PyObject_InitVar "PyObject_InitVar") func