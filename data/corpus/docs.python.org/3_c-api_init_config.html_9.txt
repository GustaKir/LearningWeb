Title: Configuration Options for Bytes Warning in Python
URL: https://docs.python.org/3/c-api/init_config.html
Summary: This section describes the `bytes_warning` configuration option, which controls Python's handling of comparisons between `bytes`, `bytearray`, `str`, and `int`. It outlines the values this option can take, how it can be modified with the `-b` command line option, and the default setting. Additionally, it introduces the `warn_default_encoding` setting, indicating that further details are provided in a later part of the document.
---

intbytes_warning[¶](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.bytes_warning "Link to this definition")
    
If equals to `1`, issue a warning when comparing [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") or [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") with [`str`](https://docs.python.org/3/library/stdtypes.html#str "str"), or comparing [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") with [`int`](https://docs.python.org/3/library/functions.html#int "int").
If equal or greater to `2`, raise a [`BytesWarning`](https://docs.python.org/3/library/exceptions.html#BytesWarning "BytesWarning") exception in these cases.
Incremented by the [`-b`](https://docs.python.org/3/using/cmdline.html#cmdoption-b) command line option.
Default: `0`. 

intwarn_default_encoding[¶](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.warn_default_encoding "Link to this definition")
    
If non-zero, emit a [`EncodingWarning`](https://docs.python.org/3/library/exceptions.html#EncodingWarning "EncodingWarning") warning when [`io.TextIOWrapper`](https://docs.python.org/3/library/io.html#io.TextIOWrapper "io.TextIOWrapper") uses its default encoding. See [Opt-in EncodingWarning](https://docs.python.org/3/library/io.html#io-encoding-warning) for details.
Default: `0`.
Added in version 3.10. 

intcode_debug_ranges[¶](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.code_debug_ranges "Link to this definition")
    
If equals to `0`, disables the inclusion of the end line and column mappings in code objects. Also disables traceback printing carets to specific error locations.
Set to `0` by the [`PYTHONNODEBUGRANGES`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONNODEBUGRANGES) environment variable and by the [`-X no_debug_ranges`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) command line option.
Default: `1`.
Added in version 3.11. 

wchar_t*check_hash_pycs_mode[¶](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.check_hash_pycs_mode "Link to this definition")
    
Control the validation behavior of hash-based `.pyc` files: value of the [`--check-hash-based-pycs`](https://docs.python.org/3/using/cmdline.html#cmdoption-check-hash-based-pycs) command line option.
Valid values:
  * `L"always"`: Hash the source file for invalidation regardless of value of the ‘check_source’ flag.
  * `L"never"`: Assume that hash-based pycs always are valid.
  * `L"default"`: The ‘check_source’ flag in hash-based pycs determines invalidation.


Default: `L"default"`.
See also [**PEP 552**](https://peps.python.org/pep-0552/) “Deterministic pycs”. 

intconfigure_c_stdio[¶](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.configure_c_stdio "Link to this definition")
    
If non-zero, configure C standard streams:
  * On Windows, set the binary mode (`O_BINARY`) on stdin, stdout and stderr.
  * If [`buffered_stdio`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.buffered_stdio "PyConfig.buffered_stdio") equals zero, disable buffering of stdin, stdout and stderr streams.
  * If [`interactive`](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.interactive "PyConfig.interactive") is non-zero, enable stream buffering on stdin and stdout (only stdout on Windows).


Default: `1` in Python config, `0` in isolated config. 

intdev_mode[¶](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.dev_mode "Link to this definition")
    
If non-zero, enable the [Python Development Mode](https://docs.python.org/3/library/devmode.html#devmode).
Set to `1` by the [`-X dev`](https://docs.python.org/3/using/cmdline.html#cmdoption-X) option and the [`PYTHONDEVMODE`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONDEVMODE) environment variable.
Default: `-1` in Python mode, `0` in isolated mode. 

intdump_refs[¶](https://docs.python.org/3/c-api/init_config.html#c.PyConfig.dump_refs "Link to this definition")
    
Dump Python references?
If non-zero, dump all objects which are still alive at exit.
Set to `1` by the [`PYTHONDUMPREFS`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHONDUMPREFS) environment variable.
Needs a special build of Python with the `Py_TRACE_REFS` macro defined: see the [`configure --with-trace-refs option`](https://docs.python.org/3/using/configure.html#cmdoption-with-trace-refs).
Default: `0`.