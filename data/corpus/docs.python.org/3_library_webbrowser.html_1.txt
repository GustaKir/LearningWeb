Title: webbrowser Module Overview
URL: https://docs.python.org/3/library/webbrowser.html
Summary: The `webbrowser` module offers a high-level interface for displaying web documents to users, primarily using the `open()` function. It defaults to graphical browsers on Unix systems but falls back to text-mode browsers if necessary. The behavior can be influenced by the `BROWSER` environment variable.
---

# `webbrowser` — Convenient web-browser controller[¶](https://docs.python.org/3/library/webbrowser.html#module-webbrowser "Link to this heading")
**Source code:** [Lib/webbrowser.py](https://github.com/python/cpython/tree/3.13/Lib/webbrowser.py)
The [`webbrowser`](https://docs.python.org/3/library/webbrowser.html#module-webbrowser "webbrowser: Easy-to-use controller for web browsers.") module provides a high-level interface to allow displaying web-based documents to users. Under most circumstances, simply calling the [`open()`](https://docs.python.org/3/library/webbrowser.html#webbrowser.open "webbrowser.open") function from this module will do the right thing.
Under Unix, graphical browsers are preferred under X11, but text-mode browsers will be used if graphical browsers are not available or an X11 display isn’t available. If text-mode browsers are used, the calling process will block until the user exits the browser.
If the environment variable `BROWSER` exists, it is interpreted as the [`os.pathsep`](https://docs.python.org/3/library/os.html#os.pathsep "os.pathsep")-separated list of browsers to try ahead of the platform defaults. When the value of a list part contains the string `%s`, then it is interpreted as a literal browser command line to be used with the argument URL substituted for `%s`; if the part does not contain `%s`, it is simply interpreted as the name of the browser to launch. [[1]](https://docs.python.org/3/library/webbrowser.html#id2)
For non-Unix platforms, or when a remote browser is available on Unix, the controlling process will not wait for the user to finish with the browser, but allow the remote browser to maintain its own windows on the display. If remote browsers are not available on Unix, the controlling process will launch a new browser and wait.
On iOS, the `BROWSER` environment variable, as well as any arguments controlling autoraise, browser preference, and new tab/window creation will be ignored. Web pages will _always_ be opened in the user’s preferred browser, in a new tab, with the browser being brought to the foreground. The use of the [`webbrowser`](https://docs.python.org/3/library/webbrowser.html#module-webbrowser "webbrowser: Easy-to-use controller for web browsers.") module on iOS requires the [`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "ctypes: A foreign function library for Python.") module. If [`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "ctypes: A foreign function library for Python.") isn’t available, calls to [`open()`](https://docs.python.org/3/library/webbrowser.html#webbrowser.open "webbrowser.open") will fail.
The script **webbrowser** can be used as a command-line interface for the module. It accepts a URL as the argument. It accepts the following optional parameters: 

-n, --new-window[¶](https://docs.python.org/3/library/webbrowser.html#cmdoption-webbrowser-n "Link to this definition")
    
Opens the URL in a new browser window, if possible. 

-t, --new-tab[¶](https://docs.python.org/3/library/webbrowser.html#cmdoption-webbrowser-t "Link to this definition")
    
Opens the URL in a new browser tab.
The options are, naturally, mutually exclusive. Usage example:
```
python-mwebbrowser-t"https://www.python.org"