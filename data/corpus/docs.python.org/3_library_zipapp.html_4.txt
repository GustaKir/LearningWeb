Title: Creating Executable Applications with zipapp
URL: https://docs.python.org/3/library/zipapp.html
Summary: This section outlines how to create standalone executables using zipapp, which can run on any compatible machine. It discusses the executability of `.pyz` files on Unix and Windows, and highlights caveats regarding dependencies with C extensions that cannot be packaged in a zip file.
---

```



This will produce a standalone executable, which can be run on any machine with the appropriate interpreter available. See [Specifying the Interpreter](https://docs.python.org/3/library/zipapp.html#zipapp-specifying-the-interpreter) for details. It can be shipped to users as a single file.
On Unix, the `myapp.pyz` file is executable as it stands. You can rename the file to remove the `.pyz` extension if you prefer a “plain” command name. On Windows, the `myapp.pyz[w]` file is executable by virtue of the fact that the Python interpreter registers the `.pyz` and `.pyzw` file extensions when installed.
### Caveats[¶](https://docs.python.org/3/library/zipapp.html#caveats "Link to this heading")
If your application depends on a package that includes a C extension, that package cannot be run from a zip file (this is an OS limitation, as executable code must be present in the filesystem for the OS loader to load it). In this case, you can exclude that dependency from the zipfile, and either require your users to have it installed, or ship it alongside your zipfile and add code to your `__main__.py` to include the directory containing the unzipped module in `sys.path`. In this case, you will need to make sure to ship appropriate binaries for your target architecture(s) (and potentially pick the correct version to add to `sys.path` at runtime, based on the user’s machine).
## The Python Zip Application Archive Format[¶](https://docs.python.org/3/library/zipapp.html#the-python-zip-application-archive-format "Link to this heading")
Python has been able to execute zip files which contain a `__main__.py` file since version 2.6. In order to be executed by Python, an application archive simply has to be a standard zip file containing a `__main__.py` file which will be run as the entry point for the application. As usual for any Python script, the parent of the script (in this case the zip file) will be placed on [`sys.path`](https://docs.python.org/3/library/sys.html#sys.path "sys.path") and thus further modules can be imported from the zip file.
The zip file format allows arbitrary data to be prepended to a zip file. The zip application format uses this ability to prepend a standard POSIX “shebang” line to the file (`#!/path/to/interpreter`).
Formally, the Python zip application format is therefore:
  1. An optional shebang line, containing the characters `b'#!'` followed by an interpreter name, and then a newline (`b'\n'`) character. The interpreter name can be anything acceptable to the OS “shebang” processing, or the Python launcher on Windows. The interpreter should be encoded in UTF-8 on Windows, and in [`sys.getfilesystemencoding()`](https://docs.python.org/3/library/sys.html#sys.getfilesystemencoding "sys.getfilesystemencoding") on POSIX.
  2. Standard zipfile data, as generated by the [`zipfile`](https://docs.python.org/3/library/zipfile.html#module-zipfile "zipfile: Read and write ZIP-format archive files.") module. The zipfile content _must_ include a file called `__main__.py` (which must be in the “root” of the zipfile - i.e., it cannot be in a subdirectory). The zipfile data can be compressed or uncompressed.


If an application archive has a shebang line, it may have the executable bit set on POSIX systems, to allow it to be executed directly.
There is no requirement that the tools in this module are used to create application archives - the module is a convenience, but archives in the above format created by any means are acceptable to Python.
### [Table of Contents](https://docs.python.org/3/contents.html)
  * [`zipapp` — Manage executable Python zip archives](https://docs.python.org/3/library/zipapp.html)
    * [Basic Example](https://docs.python.org/3/library/zipapp.html#basic-example)
    * [Command-Line Interface](https://docs.python.org/3/library/zipapp.html#command-line-interface)
    * [Python API](https://docs.python.org/3/library/zipapp.html#python-api)
    * [Examples](https://docs.python.org/3/library/zipapp.html#examples)
    * [Specifying the Interpreter](https://docs.python.org/3/library/zipapp.html#specifying-the-interpreter)
    * [Creating Standalone Applications with zipapp](https://docs.python.org/3/library/zipapp.html#creating-standalone-applications-with-zipapp)
      * [Caveats](https://docs.python.org/3/library/zipapp.html#caveats)
    * [The Python Zip Application Archive Format](https://docs.python.org/3/library/zipapp.html#the-python-zip-application-archive-format)


#### Previous topic
[`venv` — Creation of virtual environments](https://docs.python.org/3/library/venv.html "previous chapter")
#### Next topic
[Python Runtime Services](https://docs.python.org/3/library/python.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/library/zipapp.rst)