Title: Registering a Browser in webbrowser Module
URL: https://docs.python.org/3/library/webbrowser.html
Summary: The `webbrowser.register` function allows you to register a new browser type by specifying its name and constructor. If an instance is provided, the constructor isn't called; if not, it will create an instance on demand. Setting `preferred` to `True` designates this browser as a default for `get()` calls without arguments.
---

webbrowser.register(_name_ , _constructor_ , _instance =None_, _*_ , _preferred =False_)[¶](https://docs.python.org/3/library/webbrowser.html#webbrowser.register "Link to this definition")
    
Register the browser type _name_. Once a browser type is registered, the [`get()`](https://docs.python.org/3/library/webbrowser.html#webbrowser.get "webbrowser.get") function can return a controller for that browser type. If _instance_ is not provided, or is `None`, _constructor_ will be called without parameters to create an instance when needed. If _instance_ is provided, _constructor_ will never be called, and may be `None`.
Setting _preferred_ to `True` makes this browser a preferred result for a [`get()`](https://docs.python.org/3/library/webbrowser.html#webbrowser.get "webbrowser.get") call with no argument. Otherwise, this entry point is only useful if you plan to either set the `BROWSER` variable or call [`get()`](https://docs.python.org/3/library/webbrowser.html#webbrowser.get "webbrowser.get") with a nonempty argument matching the name of a handler you declare.
Changed in version 3.7: _preferred_ keyword-only parameter was added.
A number of browser types are predefined. This table gives the type names that may be passed to the [`get()`](https://docs.python.org/3/library/webbrowser.html#webbrowser.get "webbrowser.get") function and the corresponding instantiations for the controller classes, all defined in this module.
Type Name | Class Name | Notes  
---|---|---  
`'mozilla'` | `Mozilla('mozilla')` |   
`'firefox'` | `Mozilla('mozilla')` |   
`'epiphany'` | `Epiphany('epiphany')` |   
`'kfmclient'` | `Konqueror()` | (1)  
`'konqueror'` | `Konqueror()` | (1)  
`'kfm'` | `Konqueror()` | (1)  
`'opera'` | `Opera()` |   
`'links'` | `GenericBrowser('links')` |   
`'elinks'` | `Elinks('elinks')` |   
`'lynx'` | `GenericBrowser('lynx')` |   
`'w3m'` | `GenericBrowser('w3m')` |   
`'windows-default'` | `WindowsDefault` | (2)  
`'macosx'` | `MacOSXOSAScript('default')` | (3)  
`'safari'` | `MacOSXOSAScript('safari')` | (3)  
`'google-chrome'` | `Chrome('google-chrome')` |   
`'chrome'` | `Chrome('chrome')` |   
`'chromium'` | `Chromium('chromium')` |   
`'chromium-browser'` | `Chromium('chromium-browser')` |   
`'iosbrowser'` | `IOSBrowser` | (4)  
Notes:
  1. “Konqueror” is the file manager for the KDE desktop environment for Unix, and only makes sense to use if KDE is running. Some way of reliably detecting KDE would be nice; the `KDEDIR` variable is not sufficient. Note also that the name “kfm” is used even when using the **konqueror** command with KDE 2 — the implementation selects the best strategy for running Konqueror.
  2. Only on Windows platforms.
  3. Only on macOS.
  4. Only on iOS.


Added in version 3.2: A new `MacOSXOSAScript` class has been added and is used on Mac instead of the previous `MacOSX` class. This adds support for opening browsers not currently set as the OS default.
Added in version 3.3: Support for Chrome/Chromium has been added.
Changed in version 3.12: Support for several obsolete browsers has been removed. Removed browsers include Grail, Mosaic, Netscape, Galeon, Skipstone, Iceape, and Firefox versions 35 and below.
Changed in version 3.13: Support for iOS has been added.
Here are some simple examples:
```
url = 'https://docs.python.org/'
# Open URL in a new tab, if a browser window is already open.
webbrowser.open_new_tab(url)
# Open URL in new window, raising the window if possible.
webbrowser.open_new(url)