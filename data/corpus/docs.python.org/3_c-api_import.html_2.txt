Title: Module Import Functions in Python C API
URL: https://docs.python.org/3/c-api/import.html
Summary: This section describes the function PyImport_AddModuleObject, which adds a module corresponding to a given name as a borrowed reference. It highlights that the name must be a Python string object and notes the function's addition in version 3.3, as well as its relation to PyImport_AddModuleRef.
---

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyImport_AddModuleObject([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*name)[¶](https://docs.python.org/3/c-api/import.html#c.PyImport_AddModuleObject "Link to this definition")
    _Return value: Borrowed reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) since version 3.7._
Similar to [`PyImport_AddModuleRef()`](https://docs.python.org/3/c-api/import.html#c.PyImport_AddModuleRef "PyImport_AddModuleRef"), but return a [borrowed reference](https://docs.python.org/3/glossary.html#term-borrowed-reference) and _name_ is a Python [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") object.
Added in version 3.3. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyImport_AddModule(constchar*name)[¶](https://docs.python.org/3/c-api/import.html#c.PyImport_AddModule "Link to this definition")
    _Return value: Borrowed reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Similar to [`PyImport_AddModuleRef()`](https://docs.python.org/3/c-api/import.html#c.PyImport_AddModuleRef "PyImport_AddModuleRef"), but return a [borrowed reference](https://docs.python.org/3/glossary.html#term-borrowed-reference). 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyImport_ExecCodeModule(constchar*name, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*co)[¶](https://docs.python.org/3/c-api/import.html#c.PyImport_ExecCodeModule "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Given a module name (possibly of the form `package.module`) and a code object read from a Python bytecode file or obtained from the built-in function [`compile()`](https://docs.python.org/3/library/functions.html#compile "compile"), load the module. Return a new reference to the module object, or `NULL` with an exception set if an error occurred. _name_ is removed from [`sys.modules`](https://docs.python.org/3/library/sys.html#sys.modules "sys.modules") in error cases, even if _name_ was already in [`sys.modules`](https://docs.python.org/3/library/sys.html#sys.modules "sys.modules") on entry to [`PyImport_ExecCodeModule()`](https://docs.python.org/3/c-api/import.html#c.PyImport_ExecCodeModule "PyImport_ExecCodeModule"). Leaving incompletely initialized modules in [`sys.modules`](https://docs.python.org/3/library/sys.html#sys.modules "sys.modules") is dangerous, as imports of such modules have no way to know that the module object is an unknown (and probably damaged with respect to the module author’s intents) state.
The module’s [`__spec__`](https://docs.python.org/3/reference/datamodel.html#module.__spec__ "module.__spec__") and [`__loader__`](https://docs.python.org/3/reference/datamodel.html#module.__loader__ "module.__loader__") will be set, if not set already, with the appropriate values. The spec’s loader will be set to the module’s `__loader__` (if set) and to an instance of [`SourceFileLoader`](https://docs.python.org/3/library/importlib.html#importlib.machinery.SourceFileLoader "importlib.machinery.SourceFileLoader") otherwise.
The module’s [`__file__`](https://docs.python.org/3/reference/datamodel.html#module.__file__ "module.__file__") attribute will be set to the code object’s [`co_filename`](https://docs.python.org/3/reference/datamodel.html#codeobject.co_filename "codeobject.co_filename"). If applicable, [`__cached__`](https://docs.python.org/3/reference/datamodel.html#module.__cached__ "module.__cached__") will also be set.
This function will reload the module if it was already imported. See [`PyImport_ReloadModule()`](https://docs.python.org/3/c-api/import.html#c.PyImport_ReloadModule "PyImport_ReloadModule") for the intended way to reload a module.
If _name_ points to a dotted name of the form `package.module`, any package structures not already created will still not be created.
See also [`PyImport_ExecCodeModuleEx()`](https://docs.python.org/3/c-api/import.html#c.PyImport_ExecCodeModuleEx "PyImport_ExecCodeModuleEx") and [`PyImport_ExecCodeModuleWithPathnames()`](https://docs.python.org/3/c-api/import.html#c.PyImport_ExecCodeModuleWithPathnames "PyImport_ExecCodeModuleWithPathnames").
Changed in version 3.12: The setting of [`__cached__`](https://docs.python.org/3/reference/datamodel.html#module.__cached__ "module.__cached__") and [`__loader__`](https://docs.python.org/3/reference/datamodel.html#module.__loader__ "module.__loader__") is deprecated. See [`ModuleSpec`](https://docs.python.org/3/library/importlib.html#importlib.machinery.ModuleSpec "importlib.machinery.ModuleSpec") for alternatives.