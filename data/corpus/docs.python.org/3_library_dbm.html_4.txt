Title: GDBM Database Operations
URL: https://docs.python.org/3/library/dbm.html
Summary: This section describes several operations for GDBM databases, including reorganizing the database to reclaim space after deletions, syncing unwritten data to disk, closing the database, and clearing all items from the database, with clear method added in version 3.13.
---

```


gdbm.reorganize()[¶](https://docs.python.org/3/library/dbm.html#dbm.gnu.gdbm.reorganize "Link to this definition")
    
If you have carried out a lot of deletions and would like to shrink the space used by the GDBM file, this routine will reorganize the database. `gdbm` objects will not shorten the length of a database file except by using this reorganization; otherwise, deleted file space will be kept and reused as new (key, value) pairs are added. 

gdbm.sync()[¶](https://docs.python.org/3/library/dbm.html#dbm.gnu.gdbm.sync "Link to this definition")
    
When the database has been opened in fast mode, this method forces any unwritten data to be written to the disk. 

gdbm.close()[¶](https://docs.python.org/3/library/dbm.html#dbm.gnu.gdbm.close "Link to this definition")
    
Close the GDBM database. 

gdbm.clear()[¶](https://docs.python.org/3/library/dbm.html#dbm.gnu.gdbm.clear "Link to this definition")
    
Remove all items from the GDBM database.
Added in version 3.13.
## [`dbm.ndbm`](https://docs.python.org/3/library/dbm.html#module-dbm.ndbm "dbm.ndbm: The New Database Manager \(Unix\)") — New Database Manager[¶](https://docs.python.org/3/library/dbm.html#module-dbm.ndbm "Link to this heading")
**Source code:** [Lib/dbm/ndbm.py](https://github.com/python/cpython/tree/3.13/Lib/dbm/ndbm.py)
The [`dbm.ndbm`](https://docs.python.org/3/library/dbm.html#module-dbm.ndbm "dbm.ndbm: The New Database Manager \(Unix\)") module provides an interface to the NDBM library. This module can be used with the “classic” NDBM interface or the GDBM compatibility interface.
Note
The file formats created by [`dbm.gnu`](https://docs.python.org/3/library/dbm.html#module-dbm.gnu "dbm.gnu: GNU database manager \(Unix\)") and [`dbm.ndbm`](https://docs.python.org/3/library/dbm.html#module-dbm.ndbm "dbm.ndbm: The New Database Manager \(Unix\)") are incompatible and can not be used interchangeably.
Warning
The NDBM library shipped as part of macOS has an undocumented limitation on the size of values, which can result in corrupted database files when storing values larger than this limit. Reading such corrupted files can result in a hard crash (segmentation fault).
[Availability](https://docs.python.org/3/library/intro.html#availability): not Android, not iOS, not WASI.
This module is not supported on [mobile platforms](https://docs.python.org/3/library/intro.html#mobile-availability) or [WebAssembly platforms](https://docs.python.org/3/library/intro.html#wasm-availability). 

_exception_ dbm.ndbm.error[¶](https://docs.python.org/3/library/dbm.html#dbm.ndbm.error "Link to this definition")
    
Raised on [`dbm.ndbm`](https://docs.python.org/3/library/dbm.html#module-dbm.ndbm "dbm.ndbm: The New Database Manager \(Unix\)")-specific errors, such as I/O errors. [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError") is raised for general mapping errors like specifying an incorrect key. 

dbm.ndbm.library[¶](https://docs.python.org/3/library/dbm.html#dbm.ndbm.library "Link to this definition")
    
Name of the NDBM implementation library used. 

dbm.ndbm.open(_filename_ , _flag ='r'_, _mode =0o666_, _/_)[¶](https://docs.python.org/3/library/dbm.html#dbm.ndbm.open "Link to this definition")
    
Open an NDBM database and return an `ndbm` object. 

Parameters:
    
  * **filename** ([path-like object](https://docs.python.org/3/glossary.html#term-path-like-object)) – The basename of the database file (without the `.dir` or `.pag` extensions).
  * **flag** ([_str_](https://docs.python.org/3/library/stdtypes.html#str "str")) – 
    * `'r'` (default): Open existing database for reading only.
    * `'w'`: Open existing database for reading and writing.
    * `'c'`: Open database for reading and writing, creating it if it doesn’t exist.
    * `'n'`: Always create a new, empty database, open for reading and writing.
  * **mode** ([_int_](https://docs.python.org/3/library/functions.html#int "int")) – The Unix file access mode of the file (default: octal `0o666`), used only when the database has to be created.


`ndbm` objects behave similar to [mappings](https://docs.python.org/3/glossary.html#term-mapping), but `items()` and `values()` methods are not supported. The following methods are also provided:
Changed in version 3.11: Accepts [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object) for filename. 

ndbm.close()[¶](https://docs.python.org/3/library/dbm.html#dbm.ndbm.ndbm.close "Link to this definition")
    
Close the NDBM database.