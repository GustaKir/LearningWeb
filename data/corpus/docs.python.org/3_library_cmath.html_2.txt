Title: cmath.phase Function
URL: https://docs.python.org/3/library/cmath.html
Summary: The `cmath.phase(z)` function returns the phase (or argument) of the complex number _z_ as a float, equivalent to `math.atan2(z.imag, z.real)`. The result ranges from [-π, π], with a branch cut along the negative real axis. Notably, the output retains the sign of `z.imag`, even when it is zero. The absolute value of _z_ can be computed using the built-in `abs()` function.
---

cmath.phase(_z_)[¶](https://docs.python.org/3/library/cmath.html#cmath.phase "Link to this definition")
    
Return the phase of _z_ (also known as the _argument_ of _z_), as a float. `phase(z)` is equivalent to `math.atan2(z.imag, z.real)`. The result lies in the range [-_π_ , _π_], and the branch cut for this operation lies along the negative real axis. The sign of the result is the same as the sign of `z.imag`, even when `z.imag` is zero:
>>>```
>>> phase(complex(-1.0, 0.0))
3.141592653589793
>>> phase(complex(-1.0, -0.0))
-3.141592653589793

```

Note
The modulus (absolute value) of a complex number _z_ can be computed using the built-in [`abs()`](https://docs.python.org/3/library/functions.html#abs "abs") function. There is no separate [`cmath`](https://docs.python.org/3/library/cmath.html#module-cmath "cmath: Mathematical functions for complex numbers.") module function for this operation. 

cmath.polar(_z_)[¶](https://docs.python.org/3/library/cmath.html#cmath.polar "Link to this definition")
    
Return the representation of _z_ in polar coordinates. Returns a pair `(r, phi)` where _r_ is the modulus of _z_ and _phi_ is the phase of _z_. `polar(z)` is equivalent to `(abs(z), phase(z))`. 

cmath.rect(_r_ , _phi_)[¶](https://docs.python.org/3/library/cmath.html#cmath.rect "Link to this definition")
    
Return the complex number _z_ with polar coordinates _r_ and _phi_. Equivalent to `complex(r * math.cos(phi), r * math.sin(phi))`.
## Power and logarithmic functions[¶](https://docs.python.org/3/library/cmath.html#power-and-logarithmic-functions "Link to this heading") 

cmath.exp(_z_)[¶](https://docs.python.org/3/library/cmath.html#cmath.exp "Link to this definition")
    
Return _e_ raised to the power _z_ , where _e_ is the base of natural logarithms. 

cmath.log(_z_[, _base_])[¶](https://docs.python.org/3/library/cmath.html#cmath.log "Link to this definition")
    
Return the logarithm of _z_ to the given _base_. If the _base_ is not specified, returns the natural logarithm of _z_. There is one branch cut, from 0 along the negative real axis to -∞. 

cmath.log10(_z_)[¶](https://docs.python.org/3/library/cmath.html#cmath.log10 "Link to this definition")
    
Return the base-10 logarithm of _z_. This has the same branch cut as [`log()`](https://docs.python.org/3/library/cmath.html#cmath.log "cmath.log"). 

cmath.sqrt(_z_)[¶](https://docs.python.org/3/library/cmath.html#cmath.sqrt "Link to this definition")
    
Return the square root of _z_. This has the same branch cut as [`log()`](https://docs.python.org/3/library/cmath.html#cmath.log "cmath.log").
## Trigonometric functions[¶](https://docs.python.org/3/library/cmath.html#trigonometric-functions "Link to this heading") 

cmath.acos(_z_)[¶](https://docs.python.org/3/library/cmath.html#cmath.acos "Link to this definition")
    
Return the arc cosine of _z_. There are two branch cuts: One extends right from 1 along the real axis to ∞. The other extends left from -1 along the real axis to -∞. 

cmath.asin(_z_)[¶](https://docs.python.org/3/library/cmath.html#cmath.asin "Link to this definition")
    
Return the arc sine of _z_. This has the same branch cuts as [`acos()`](https://docs.python.org/3/library/cmath.html#cmath.acos "cmath.acos"). 

cmath.atan(_z_)[¶](https://docs.python.org/3/library/cmath.html#cmath.atan "Link to this definition")
    
Return the arc tangent of _z_. There are two branch cuts: One extends from `1j` along the imaginary axis to `∞j`. The other extends from `-1j` along the imaginary axis to `-∞j`. 

cmath.cos(_z_)[¶](https://docs.python.org/3/library/cmath.html#cmath.cos "Link to this definition")
    
Return the cosine of _z_. 

cmath.sin(_z_)[¶](https://docs.python.org/3/library/cmath.html#cmath.sin "Link to this definition")
    
Return the sine of _z_. 

cmath.tan(_z_)[¶](https://docs.python.org/3/library/cmath.html#cmath.tan "Link to this definition")
    
Return the tangent of _z_.
## Hyperbolic functions[¶](https://docs.python.org/3/library/cmath.html#hyperbolic-functions "Link to this heading") 

cmath.acosh(_z_)[¶](https://docs.python.org/3/library/cmath.html#cmath.acosh "Link to this definition")
    
Return the inverse hyperbolic cosine of _z_. There is one branch cut, extending left from 1 along the real axis to -∞. 

cmath.asinh(_z_)[¶](https://docs.python.org/3/library/cmath.html#cmath.asinh "Link to this definition")
    
Return the inverse hyperbolic sine of _z_. There are two branch cuts: One extends from `1j` along the imaginary axis to `∞j`. The other extends from `-1j` along the imaginary axis to `-∞j`. 

cmath.atanh(_z_)[¶](https://docs.python.org/3/library/cmath.html#cmath.atanh "Link to this definition")
    
Return the inverse hyperbolic tangent of _z_. There are two branch cuts: One extends from `1` along the real axis to `∞`. The other extends from `-1` along the real axis to `-∞`.