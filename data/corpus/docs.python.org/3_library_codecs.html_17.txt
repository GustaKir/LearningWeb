Title: Text Transforms in Codecs
URL: https://docs.python.org/3/library/codecs.html
Summary: This section discusses the 'base64_codec' which accepts both bytes-like objects and ASCII-only string instances for decoding. It highlights updates made in versions 3.2 and 3.4 regarding binary transforms and aliases. Additionally, it introduces a codec for text transforms that maps a string to another string, which is not supported by the str.encode() method.
---

| [`zlib.compress()`](https://docs.python.org/3/library/zlib.html#zlib.compress "zlib.compress") / [`zlib.decompress()`](https://docs.python.org/3/library/zlib.html#zlib.decompress "zlib.decompress")  
[[1](https://docs.python.org/3/library/codecs.html#id5)]
In addition to [bytes-like objects](https://docs.python.org/3/glossary.html#term-bytes-like-object), `'base64_codec'` also accepts ASCII-only instances of [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") for decoding
Added in version 3.2: Restoration of the binary transforms.
Changed in version 3.4: Restoration of the aliases for the binary transforms.
### Text Transforms[¶](https://docs.python.org/3/library/codecs.html#text-transforms "Link to this heading")
The following codec provides a text transform: a [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") to [`str`](https://docs.python.org/3/library/stdtypes.html#str "str") mapping. It is not supported by [`str.encode()`](https://docs.python.org/3/library/stdtypes.html#str.encode "str.encode") (which only produces [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") output).
Codec | Aliases | Meaning  
---|---|---  
rot_13 | rot13 | Return the Caesar-cypher encryption of the operand.  
Added in version 3.2: Restoration of the `rot_13` text transform.
Changed in version 3.4: Restoration of the `rot13` alias.
## [`encodings.idna`](https://docs.python.org/3/library/codecs.html#module-encodings.idna "encodings.idna: Internationalized Domain Names implementation") — Internationalized Domain Names in Applications[¶](https://docs.python.org/3/library/codecs.html#module-encodings.idna "Link to this heading")
This module implements [**RFC 3490**](https://datatracker.ietf.org/doc/html/rfc3490.html) (Internationalized Domain Names in Applications) and [**RFC 3492**](https://datatracker.ietf.org/doc/html/rfc3492.html) (Nameprep: A Stringprep Profile for Internationalized Domain Names (IDN)). It builds upon the `punycode` encoding and [`stringprep`](https://docs.python.org/3/library/stringprep.html#module-stringprep "stringprep: String preparation, as per RFC 3453").
If you need the IDNA 2008 standard from [**RFC 5891**](https://datatracker.ietf.org/doc/html/rfc5891.html) and [**RFC 5895**](https://datatracker.ietf.org/doc/html/rfc5895.html), use the third-party [idna](https://pypi.org/project/idna/) module.
These RFCs together define a protocol to support non-ASCII characters in domain names. A domain name containing non-ASCII characters (such as `www.Alliancefrançaise.nu`) is converted into an ASCII-compatible encoding (ACE, such as `www.xn--alliancefranaise-npb.nu`). The ACE form of the domain name is then used in all places where arbitrary characters are not allowed by the protocol, such as DNS queries, HTTP _Host_ fields, and so on. This conversion is carried out in the application; if possible invisible to the user: The application should transparently convert Unicode domain labels to IDNA on the wire, and convert back ACE labels to Unicode before presenting them to the user.
Python supports this conversion in several ways: the `idna` codec performs conversion between Unicode and ACE, separating an input string into labels based on the separator characters defined in [**section 3.1 of RFC 3490**](https://datatracker.ietf.org/doc/html/rfc3490.html#section-3.1) and converting each label to ACE as required, and conversely separating an input byte string into labels based on the `.` separator and converting any ACE labels found into unicode. Furthermore, the [`socket`](https://docs.python.org/3/library/socket.html#module-socket "socket: Low-level networking interface.") module transparently converts Unicode host names to ACE, so that applications need not be concerned about converting host names themselves when they pass them to the socket module.