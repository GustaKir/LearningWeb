Title: Build and C API Changes in Python 3.8
URL: https://docs.python.org/3/whatsnew/3.8.html
Summary: In Python 3.8, the default sys.abiflags is now an empty string, rendering the 'm' flag for pymalloc obsolete, leading to its removal. This results in changes such as the exclusive installation of the 'python3.8' program and configuration script, with the removal of their 'm' variants. Additionally, the 'm' flag has been eliminated from dynamic library filenames for standard and third-party extension modules.
---

(Contributed by Yury Selivanov and Inada Naoki in [bpo-26219](https://bugs.python.org/issue?@action=redirect&bpo=26219).)


## Build and C API Changes[¶](https://docs.python.org/3/whatsnew/3.8.html#build-and-c-api-changes "Link to this heading")
  * Default [`sys.abiflags`](https://docs.python.org/3/library/sys.html#sys.abiflags "sys.abiflags") became an empty string: the `m` flag for pymalloc became useless (builds with and without pymalloc are ABI compatible) and so has been removed. (Contributed by Victor Stinner in [bpo-36707](https://bugs.python.org/issue?@action=redirect&bpo=36707).)
Example of changes:
    * Only `python3.8` program is installed, `python3.8m` program is gone.
    * Only `python3.8-config` script is installed, `python3.8m-config` script is gone.
    * The `m` flag has been removed from the suffix of dynamic library filenames: extension modules in the standard library as well as those produced and installed by third-party packages, like those downloaded from PyPI. On Linux, for example, the Python 3.7 suffix `.cpython-37m-x86_64-linux-gnu.so` became `.cpython-38-x86_64-linux-gnu.so` in Python 3.8.
  * The header files have been reorganized to better separate the different kinds of APIs:
    * `Include/*.h` should be the portable public stable C API.
    * `Include/cpython/*.h` should be the unstable C API specific to CPython; public API, with some private API prefixed by `_Py` or `_PY`.
    * `Include/internal/*.h` is the private internal C API very specific to CPython. This API comes with no backward compatibility warranty and should not be used outside CPython. It is only exposed for very specific needs like debuggers and profiles which has to access to CPython internals without calling functions. This API is now installed by `make install`.
(Contributed by Victor Stinner in [bpo-35134](https://bugs.python.org/issue?@action=redirect&bpo=35134) and [bpo-35081](https://bugs.python.org/issue?@action=redirect&bpo=35081), work initiated by Eric Snow in Python 3.7.)
  * Some macros have been converted to static inline functions: parameter types and return type are well defined, they don’t have issues specific to macros, variables have a local scopes. Examples:
    * [`Py_INCREF()`](https://docs.python.org/3/c-api/refcounting.html#c.Py_INCREF "Py_INCREF"), [`Py_DECREF()`](https://docs.python.org/3/c-api/refcounting.html#c.Py_DECREF "Py_DECREF")
    * [`Py_XINCREF()`](https://docs.python.org/3/c-api/refcounting.html#c.Py_XINCREF "Py_XINCREF"), [`Py_XDECREF()`](https://docs.python.org/3/c-api/refcounting.html#c.Py_XDECREF "Py_XDECREF")
    * `PyObject_INIT()`, `PyObject_INIT_VAR()`
    * Private functions: `_PyObject_GC_TRACK()`, `_PyObject_GC_UNTRACK()`, `_Py_Dealloc()`
(Contributed by Victor Stinner in [bpo-35059](https://bugs.python.org/issue?@action=redirect&bpo=35059).)
  * The `PyByteArray_Init()` and `PyByteArray_Fini()` functions have been removed. They did nothing since Python 2.7.4 and Python 3.2.0, were excluded from the limited API (stable ABI), and were not documented. (Contributed by Victor Stinner in [bpo-35713](https://bugs.python.org/issue?@action=redirect&bpo=35713).)
  * The result of `PyExceptionClass_Name()` is now of type `const char *` rather of `char *`. (Contributed by Serhiy Storchaka in [bpo-33818](https://bugs.python.org/issue?@action=redirect&bpo=33818).)
  * The duality of `Modules/Setup.dist` and `Modules/Setup` has been removed. Previously, when updating the CPython source tree, one had to manually copy `Modules/Setup.dist` (inside the source tree) to `Modules/Setup` (inside the build tree) in order to reflect any changes upstream. This was of a small benefit to packagers at the expense of a frequent annoyance to developers following CPython development, as forgetting to copy the file could produce build failures.
Now the build system always reads from `Modules/Setup` inside the source tree. People who want to customize that file are encouraged to maintain their changes in a git fork of CPython or as patch files, as they would do for any other change to the source tree.
(Contributed by Antoine Pitrou in [bpo-32430](https://bugs.python.org/issue?@action=redirect&bpo=32430).)
  * Functions that convert Python number to C integer like [`PyLong_AsLong()`](https://docs.python.org/3/c-api/long.html#c.PyLong_AsLong "PyLong_AsLong") and argument parsing functions like [`PyArg_ParseTuple()`](https://docs.python.org/3/c-api/arg.html#c.PyArg_ParseTuple "PyArg_ParseTuple") with integer converting format units like `'i'` will now use the [`__index__()`](https://docs.python.org/3/reference/datamodel.html#object.__index__ "object.__index__") special method instead of [`__int__()`](https://docs.python.org/3/reference/datamodel.html#object.__int__ "object.__int__"), if available. The deprecation warning will be emitted for objects with the `__int__()` method but without the `__index__()` method (like [`Decimal`](https://docs.python.org/3/library/decimal.html#decimal.Decimal "d