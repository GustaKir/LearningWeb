Title: New Features in Python 3.7: importlib.resources Module
URL: https://docs.python.org/3/whatsnew/3.7.html
Summary: The importlib.resources module introduces new APIs for accessing, opening, and reading resources within packages, which may not correspond to physical files. It allows module loaders to use get_resource_reader() to return an instance of ResourceReader, enhancing resource management in Python.
---

```

See also 

[**PEP 557**](https://peps.python.org/pep-0557/) – Data Classes
    
PEP written and implemented by Eric V. Smith
### importlib.resources[¶](https://docs.python.org/3/whatsnew/3.7.html#importlib-resources "Link to this heading")
The new [`importlib.resources`](https://docs.python.org/3/library/importlib.resources.html#module-importlib.resources "importlib.resources: Package resource reading, opening, and access") module provides several new APIs and one new ABC for access to, opening, and reading _resources_ inside packages. Resources are roughly similar to files inside packages, but they needn’t be actual files on the physical file system. Module loaders can provide a `get_resource_reader()` function which returns a [`importlib.abc.ResourceReader`](https://docs.python.org/3/library/importlib.html#importlib.abc.ResourceReader "importlib.abc.ResourceReader") instance to support this new API. Built-in file path loaders and zip file loaders both support this.
Contributed by Barry Warsaw and Brett Cannon in [bpo-32248](https://bugs.python.org/issue?@action=redirect&bpo=32248).
See also
[importlib_resources](https://importlib-resources.readthedocs.io/en/latest/) – a PyPI backport for earlier Python versions.
## Improved Modules[¶](https://docs.python.org/3/whatsnew/3.7.html#improved-modules "Link to this heading")
### argparse[¶](https://docs.python.org/3/whatsnew/3.7.html#argparse "Link to this heading")
The new [`ArgumentParser.parse_intermixed_args()`](https://docs.python.org/3/library/argparse.html#argparse.ArgumentParser.parse_intermixed_args "argparse.ArgumentParser.parse_intermixed_args") method allows intermixing options and positional arguments. (Contributed by paul.j3 in [bpo-14191](https://bugs.python.org/issue?@action=redirect&bpo=14191).)
### asyncio[¶](https://docs.python.org/3/whatsnew/3.7.html#asyncio "Link to this heading")
The [`asyncio`](https://docs.python.org/3/library/asyncio.html#module-asyncio "asyncio: Asynchronous I/O.") module has received many new features, usability and [performance improvements](https://docs.python.org/3/whatsnew/3.7.html#whatsnew37-asyncio-perf). Notable changes include:
  * The new [provisional](https://docs.python.org/3/glossary.html#term-provisional-API) [`asyncio.run()`](https://docs.python.org/3/library/asyncio-runner.html#asyncio.run "asyncio.run") function can be used to run a coroutine from synchronous code by automatically creating and destroying the event loop. (Contributed by Yury Selivanov in [bpo-32314](https://bugs.python.org/issue?@action=redirect&bpo=32314).)
  * asyncio gained support for [`contextvars`](https://docs.python.org/3/library/contextvars.html#module-contextvars "contextvars: Context Variables"). [`loop.call_soon()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.call_soon "asyncio.loop.call_soon"), [`loop.call_soon_threadsafe()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.call_soon_threadsafe "asyncio.loop.call_soon_threadsafe"), [`loop.call_later()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.call_later "asyncio.loop.call_later"), [`loop.call_at()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.call_at "asyncio.loop.call_at"), and [`Future.add_done_callback()`](https://docs.python.org/3/library/asyncio-future.html#asyncio.Future.add_done_callback "asyncio.Future.add_done_callback") have a new optional keyword-only _context_ parameter. [`Tasks`](https://docs.python.org/3/library/asyncio-task.html#asyncio.Task "asyncio.Task") now track their context automatically. See [**PEP 567**](https://peps.python.org/pep-0567/) for more details. (Contributed by Yury Selivanov in [bpo-32436](https://bugs.python.org/issue?@action=redirect&bpo=32436).)
  * The new [`asyncio.create_task()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.create_task "asyncio.create_task") function has been added as a shortcut to `asyncio.get_event_loop().create_task()`. (Contributed by Andrew Svetlov in [bpo-32311](https://bugs.python.org/issue?@action=redirect&bpo=32311).)
  * The new [`loop.start_tls()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.start_tls "asyncio.loop.start_tls") method can be used to upgrade an existing connection to TLS. (Contributed by Yury Selivanov in [bpo-23749](https://bugs.python.org/issue?@action=redirect&bpo=23749).)
  * The new [`loop.sock_recv_into()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.sock_recv_into "asyncio.loop.sock_recv_into") method allows reading data from a socket directly into a provided buffer making it possible to reduce data copies. (Contributed by Antoine Pitrou in [bpo-31819](https://bugs.python.org/issue?@action=redirect&bpo=31819).)
  * The new [`asyncio.current_task()`](https://docs.python.org/3/library/asyncio-task.html#asyncio.current_task "asyncio.current_task") function returns the currently running [`Task`](https://docs.python.o