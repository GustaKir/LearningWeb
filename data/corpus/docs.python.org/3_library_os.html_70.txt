Title: os.sched_param and Scheduling Parameters
URL: https://docs.python.org/3/library/os.html
Summary: The os.sched_param class represents immutable scheduling parameters, currently encompassing only the 'sched_priority' for scheduling policies. The document also discusses the os.sched_get_priority_min function, which retrieves the minimum priority for a given scheduling policy.
---

_class_ os.sched_param(_sched_priority_)[¶](https://docs.python.org/3/library/os.html#os.sched_param "Link to this definition")
    
This class represents tunable scheduling parameters used in [`sched_setparam()`](https://docs.python.org/3/library/os.html#os.sched_setparam "os.sched_setparam"), [`sched_setscheduler()`](https://docs.python.org/3/library/os.html#os.sched_setscheduler "os.sched_setscheduler"), and [`sched_getparam()`](https://docs.python.org/3/library/os.html#os.sched_getparam "os.sched_getparam"). It is immutable.
At the moment, there is only one possible parameter: 

sched_priority[¶](https://docs.python.org/3/library/os.html#os.sched_param.sched_priority "Link to this definition")
    
The scheduling priority for a scheduling policy. 

os.sched_get_priority_min(_policy_)[¶](https://docs.python.org/3/library/os.html#os.sched_get_priority_min "Link to this definition")
    
Get the minimum priority value for _policy_. _policy_ is one of the scheduling policy constants above. 

os.sched_get_priority_max(_policy_)[¶](https://docs.python.org/3/library/os.html#os.sched_get_priority_max "Link to this definition")
    
Get the maximum priority value for _policy_. _policy_ is one of the scheduling policy constants above. 

os.sched_setscheduler(_pid_ , _policy_ , _param_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.sched_setscheduler "Link to this definition")
    
Set the scheduling policy for the process with PID _pid_. A _pid_ of 0 means the calling process. _policy_ is one of the scheduling policy constants above. _param_ is a [`sched_param`](https://docs.python.org/3/library/os.html#os.sched_param "os.sched_param") instance. 

os.sched_getscheduler(_pid_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.sched_getscheduler "Link to this definition")
    
Return the scheduling policy for the process with PID _pid_. A _pid_ of 0 means the calling process. The result is one of the scheduling policy constants above. 

os.sched_setparam(_pid_ , _param_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.sched_setparam "Link to this definition")
    
Set the scheduling parameters for the process with PID _pid_. A _pid_ of 0 means the calling process. _param_ is a [`sched_param`](https://docs.python.org/3/library/os.html#os.sched_param "os.sched_param") instance. 

os.sched_getparam(_pid_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.sched_getparam "Link to this definition")
    
Return the scheduling parameters as a [`sched_param`](https://docs.python.org/3/library/os.html#os.sched_param "os.sched_param") instance for the process with PID _pid_. A _pid_ of 0 means the calling process. 

os.sched_rr_get_interval(_pid_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.sched_rr_get_interval "Link to this definition")
    
Return the round-robin quantum in seconds for the process with PID _pid_. A _pid_ of 0 means the calling process. 

os.sched_yield()[¶](https://docs.python.org/3/library/os.html#os.sched_yield "Link to this definition")
    
Voluntarily relinquish the CPU. See _[sched_yield(2)](https://manpages.debian.org/sched_yield\(2\))_ for details. 

os.sched_setaffinity(_pid_ , _mask_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.sched_setaffinity "Link to this definition")
    
Restrict the process with PID _pid_ (or the current process if zero) to a set of CPUs. _mask_ is an iterable of integers representing the set of CPUs to which the process should be restricted. 

os.sched_getaffinity(_pid_ , _/_)[¶](https://docs.python.org/3/library/os.html#os.sched_getaffinity "Link to this definition")
    
Return the set of CPUs the process with PID _pid_ is restricted to.
If _pid_ is zero, return the set of CPUs the calling thread of the current process is restricted to.
See also the [`process_cpu_count()`](https://docs.python.org/3/library/os.html#os.process_cpu_count "os.process_cpu_count") function.
## Miscellaneous System Information[¶](https://docs.python.org/3/library/os.html#miscellaneous-system-information "Link to this heading")