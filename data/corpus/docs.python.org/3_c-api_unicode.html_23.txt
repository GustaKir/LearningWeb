Title: Comparing Unicode Objects in Python C API
URL: https://docs.python.org/3/c-api/unicode.html
Summary: This document describes the function `PyUnicode_CompareWithASCIIString`, which compares a Unicode object with an ASCII string and returns comparison results. It indicates that the function handles ISO-8859-1 characters if non-ASCII is present and does not raise exceptions. It also briefly mentions `PyUnicode_RichCompare` for comparing two PyObject instances.
---

intPyUnicode_CompareWithASCIIString([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*unicode, constchar*string)[¶](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_CompareWithASCIIString "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Compare a Unicode object, _unicode_ , with _string_ and return `-1`, `0`, `1` for less than, equal, and greater than, respectively. It is best to pass only ASCII-encoded strings, but the function interprets the input string as ISO-8859-1 if it contains non-ASCII characters.
This function does not raise exceptions. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyUnicode_RichCompare([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*left, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*right, intop)[¶](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_RichCompare "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Rich compare two Unicode strings and return one of the following:
  * `NULL` in case an exception was raised
  * [`Py_True`](https://docs.python.org/3/c-api/bool.html#c.Py_True "Py_True") or [`Py_False`](https://docs.python.org/3/c-api/bool.html#c.Py_False "Py_False") for successful comparisons
  * [`Py_NotImplemented`](https://docs.python.org/3/c-api/object.html#c.Py_NotImplemented "Py_NotImplemented") in case the type combination is unknown


Possible values for _op_ are [`Py_GT`](https://docs.python.org/3/c-api/typeobj.html#c.Py_GT "Py_GT"), [`Py_GE`](https://docs.python.org/3/c-api/typeobj.html#c.Py_GE "Py_GE"), [`Py_EQ`](https://docs.python.org/3/c-api/typeobj.html#c.Py_EQ "Py_EQ"), [`Py_NE`](https://docs.python.org/3/c-api/typeobj.html#c.Py_NE "Py_NE"), [`Py_LT`](https://docs.python.org/3/c-api/typeobj.html#c.Py_LT "Py_LT"), and [`Py_LE`](https://docs.python.org/3/c-api/typeobj.html#c.Py_LE "Py_LE"). 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*PyUnicode_Format([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*format, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*args)[¶](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_Format "Link to this definition")
    _Return value: New reference.__Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Return a new string object from _format_ and _args_ ; this is analogous to `format % args`. 

intPyUnicode_Contains([PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*unicode, [PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*substr)[¶](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_Contains "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable)._
Check whether _substr_ is contained in _unicode_ and return true or false accordingly.
_substr_ has to coerce to a one element Unicode string. `-1` is returned if there was an error.