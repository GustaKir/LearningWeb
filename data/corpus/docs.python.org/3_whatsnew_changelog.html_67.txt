Title: Python 3 Changelog Highlights
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This document outlines significant updates in the Python 3 changelog, including enhancements to the asynchronous generator methods, the implementation of a new interactive interpreter with improved features, and the adoption of PEP 667 for frame locals handling.
---

ttps://github.com/python/cpython/issues/117714): update `async_generator.athrow().close()` and `async_generator.asend().close()` to close their section of the underlying async generator
  * [gh-111201](https://github.com/python/cpython/issues/111201): The [interactive](https://docs.python.org/3/glossary.html#term-interactive) interpreter is now implemented in Python, which allows for a number of new features like colors, multiline input, history viewing, and paste mode. Contributed by Pablo Galindo, Łukasz Langa and Lysandros Nikolaou based on code from the PyPy project.
  * [gh-74929](https://github.com/python/cpython/issues/74929): Implement PEP 667: converted [`FrameType.f_locals`](https://docs.python.org/3/reference/datamodel.html#frame.f_locals "frame.f_locals") and [`PyFrame_GetLocals()`](https://docs.python.org/3/c-api/frame.html#c.PyFrame_GetLocals "PyFrame_GetLocals") to return a write-through proxy object when the frame refers to a function or comprehension.
  * [gh-116767](https://github.com/python/cpython/issues/116767): Fix crash in compiler on ‘async with’ that has many context managers.
  * [gh-118335](https://github.com/python/cpython/issues/118335): Change how to use the tier 2 interpreter. Instead of running Python with `-X uops` or setting the environment variable `PYTHON_UOPS=1`, this choice is now made at build time by configuring with `--enable-experimental-jit=interpreter`.
**Beware!** This changes the environment variable to enable or disable micro-ops to `PYTHON_JIT`. The old `PYTHON_UOPS` is no longer used.
  * [gh-118306](https://github.com/python/cpython/issues/118306): Update JIT compilation to use LLVM 18
  * [gh-118160](https://github.com/python/cpython/issues/118160): [Annotation scopes](https://docs.python.org/3/reference/executionmodel.html#annotation-scopes) within classes can now contain comprehensions. However, such comprehensions are not inlined into their parent scope at runtime. Patch by Jelle Zijlstra.
  * [gh-118272](https://github.com/python/cpython/issues/118272): Fix bug where `generator.close` does not free the generator frame’s locals.
  * [gh-118216](https://github.com/python/cpython/issues/118216): Don’t consider [`__future__`](https://docs.python.org/3/library/__future__.html#module-__future__ "__future__: Future statement definitions") imports with dots before the module name.
  * [gh-118074](https://github.com/python/cpython/issues/118074): Make sure that the Executor objects in the COLD_EXITS array aren’t assumed to be GC-able (which would access bytes outside the object).
  * [gh-107674](https://github.com/python/cpython/issues/107674): Lazy load frame line number to improve performance of tracing
  * [gh-118082](https://github.com/python/cpython/issues/118082): Improve [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") message for imports without names, like in `from x import` and `import` cases. It now points out to users that [`import`](https://docs.python.org/3/reference/simple_stmts.html#import) expects at least one name after it.
  * [gh-118090](https://github.com/python/cpython/issues/118090): Improve [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") message for empty type param brackets.
  * [gh-117958](https://github.com/python/cpython/issues/117958): Added a `get_jit_code()` method to access JIT compiled machine code from the UOp Executor when the experimental JIT is enabled. Patch by Anthony Shaw.
  * [gh-117901](https://github.com/python/cpython/issues/117901): Add option for compiler’s codegen to save nested instruction sequences for introspection.
  * [gh-116622](https://github.com/python/cpython/issues/116622): Redirect stdout and stderr to system log when embedded in an Android app.
  * [gh-109118](https://github.com/python/cpython/issues/109118): [annotation scope](https://docs.python.org/3/reference/executionmodel.html#annotation-scopes) within class scopes can now contain lambdas.
  * [gh-117894](https://github.com/python/cpython/issues/117894): Prevent `agen.aclose()` objects being re-used after `.throw()`.
  * [gh-117881](https://github.com/python/cpython/issues/117881): prevent concurrent access to an async generator via athrow().throw() or asend().throw()
  * [gh-117536](https://github.com/python/cpython/issues/117536): Fix a [`RuntimeWarning`](https://docs.python.org/3/library/exceptions.html#RuntimeWarning "RuntimeWarning") when calling `agen.aclose().throw(Exception)`.
  * [gh-117755](https://github.com/python/cpython/issues/117755): Fix mimalloc allocator for huge memory allocation (around 8,589,934,592 GiB) on s390x. Patch by Victor Stinner.
  * [gh-117750](https://github.com/python/cpython/issues/117750): Fix issue where an object’s dict would get out of sync with the object’s internal values when being cleared.