Title: Python 3.10 Performance Improvements
URL: https://docs.python.org/3/whatsnew/3.10.html
Summary: Python 3.10 introduces several performance optimizations, including lazy conversion of function annotations to reduce CPU time, new substring search algorithms to enhance string operations, and micro-optimizations in type attribute cache lookups, resulting in overall faster interpreter performance.
---

Instead, they are stored as a tuple of strings, and the function object lazily converts this into the annotations dict on demand. This optimization cuts the CPU time needed to define an annotated function by half. (Contributed by Yurii Karabas and Inada Naoki in [bpo-42202](https://bugs.python.org/issue?@action=redirect&bpo=42202).)
  * Substring search functions such as `str1 in str2` and `str2.find(str1)` now sometimes use Crochemore & Perrin’s “Two-Way” string searching algorithm to avoid quadratic behavior on long strings. (Contributed by Dennis Sweeney in [bpo-41972](https://bugs.python.org/issue?@action=redirect&bpo=41972))
  * Add micro-optimizations to `_PyType_Lookup()` to improve type attribute cache lookup performance in the common case of cache hits. This makes the interpreter 1.04 times faster on average. (Contributed by Dino Viehland in [bpo-43452](https://bugs.python.org/issue?@action=redirect&bpo=43452).)
  * The following built-in functions now support the faster [**PEP 590**](https://peps.python.org/pep-0590/) vectorcall calling convention: [`map()`](https://docs.python.org/3/library/functions.html#map "map"), [`filter()`](https://docs.python.org/3/library/functions.html#filter "filter"), [`reversed()`](https://docs.python.org/3/library/functions.html#reversed "reversed"), [`bool()`](https://docs.python.org/3/library/functions.html#bool "bool") and [`float()`](https://docs.python.org/3/library/functions.html#float "float"). (Contributed by Donghee Na and Jeroen Demeyer in [bpo-43575](https://bugs.python.org/issue?@action=redirect&bpo=43575), [bpo-43287](https://bugs.python.org/issue?@action=redirect&bpo=43287), [bpo-41922](https://bugs.python.org/issue?@action=redirect&bpo=41922), [bpo-41873](https://bugs.python.org/issue?@action=redirect&bpo=41873) and [bpo-41870](https://bugs.python.org/issue?@action=redirect&bpo=41870).)
  * [`BZ2File`](https://docs.python.org/3/library/bz2.html#bz2.BZ2File "bz2.BZ2File") performance is improved by removing internal `RLock`. This makes `BZ2File` thread unsafe in the face of multiple simultaneous readers or writers, just like its equivalent classes in [`gzip`](https://docs.python.org/3/library/gzip.html#module-gzip "gzip: Interfaces for gzip compression and decompression using file objects.") and [`lzma`](https://docs.python.org/3/library/lzma.html#module-lzma "lzma: A Python wrapper for the liblzma compression library.") have always been. (Contributed by Inada Naoki in [bpo-43785](https://bugs.python.org/issue?@action=redirect&bpo=43785).)