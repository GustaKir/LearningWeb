Title: Numeric Objects in Python
URL: https://docs.python.org/3/reference/datamodel.html
Summary: Python numeric objects, created by literals and arithmetic operations, are immutable and represent mathematical values, constrained by computer numerical limitations. Their string representations are valid literals that can reconstruct the original numeric value when passed to the class constructor.
---

[`numbers.Number`](https://docs.python.org/3/library/numbers.html#numbers.Number "numbers.Number")[¶](https://docs.python.org/3/reference/datamodel.html#numbers-number "Link to this heading")
These are created by numeric literals and returned as results by arithmetic operators and arithmetic built-in functions. Numeric objects are immutable; once created their value never changes. Python numbers are of course strongly related to mathematical numbers, but subject to the limitations of numerical representation in computers.
The string representations of the numeric classes, computed by [`__repr__()`](https://docs.python.org/3/reference/datamodel.html#object.__repr__ "object.__repr__") and [`__str__()`](https://docs.python.org/3/reference/datamodel.html#object.__str__ "object.__str__"), have the following properties:
  * They are valid numeric literals which, when passed to their class constructor, produce an object having the value of the original numeric.
  * The representation is in base 10, when possible.
  * Leading zeros, possibly excepting a single zero before a decimal point, are not shown.
  * Trailing zeros, possibly excepting a single zero after a decimal point, are not shown.
  * A sign is shown only when the number is negative.


Python distinguishes between integers, floating-point numbers, and complex numbers:
#### 3.2.4.1. [`numbers.Integral`](https://docs.python.org/3/library/numbers.html#numbers.Integral "numbers.Integral")[¶](https://docs.python.org/3/reference/datamodel.html#numbers-integral "Link to this heading")
These represent elements from the mathematical set of integers (positive and negative).
Note
The rules for integer representation are intended to give the most meaningful interpretation of shift and mask operations involving negative integers.
There are two types of integers: 

Integers ([`int`](https://docs.python.org/3/library/functions.html#int "int"))
    
These represent numbers in an unlimited range, subject to available (virtual) memory only. For the purpose of shift and mask operations, a binary representation is assumed, and negative numbers are represented in a variant of 2’s complement which gives the illusion of an infinite string of sign bits extending to the left.