Title: sys.audit Function Overview
URL: https://docs.python.org/3/library/sys.html
Summary: The sys.audit function raises an auditing event with a specified event name and optional arguments. It triggers any active auditing hooks and re-raises the first exception from these hooks, indicating that exceptions should not be handled within the function. The API for event names and argument types is stable across releases.
---

sys.audit(_event_ , _* args_)[¶](https://docs.python.org/3/library/sys.html#sys.audit "Link to this definition")
    
Raise an auditing event and trigger any active auditing hooks. _event_ is a string identifying the event, and _args_ may contain optional arguments with more information about the event. The number and types of arguments for a given event are considered a public and stable API and should not be modified between releases.
For example, one auditing event is named `os.chdir`. This event has one argument called _path_ that will contain the requested new working directory.
[`sys.audit()`](https://docs.python.org/3/library/sys.html#sys.audit "sys.audit") will call the existing auditing hooks, passing the event name and arguments, and will re-raise the first exception from any hook. In general, if an exception is raised, it should not be handled and the process should be terminated as quickly as possible. This allows hook implementations to decide how to respond to particular events: they can merely log the event or abort the operation by raising an exception.
Hooks are added using the [`sys.addaudithook()`](https://docs.python.org/3/library/sys.html#sys.addaudithook "sys.addaudithook") or [`PySys_AddAuditHook()`](https://docs.python.org/3/c-api/sys.html#c.PySys_AddAuditHook "PySys_AddAuditHook") functions.
The native equivalent of this function is [`PySys_Audit()`](https://docs.python.org/3/c-api/sys.html#c.PySys_Audit "PySys_Audit"). Using the native function is preferred when possible.
See the [audit events table](https://docs.python.org/3/library/audit_events.html#audit-events) for all events raised by CPython.
Added in version 3.8. 

sys.base_exec_prefix[¶](https://docs.python.org/3/library/sys.html#sys.base_exec_prefix "Link to this definition")
    
Set during Python startup, before `site.py` is run, to the same value as [`exec_prefix`](https://docs.python.org/3/library/sys.html#sys.exec_prefix "sys.exec_prefix"). If not running in a [virtual environment](https://docs.python.org/3/library/venv.html#venv-def), the values will stay the same; if `site.py` finds that a virtual environment is in use, the values of [`prefix`](https://docs.python.org/3/library/sys.html#sys.prefix "sys.prefix") and [`exec_prefix`](https://docs.python.org/3/library/sys.html#sys.exec_prefix "sys.exec_prefix") will be changed to point to the virtual environment, whereas [`base_prefix`](https://docs.python.org/3/library/sys.html#sys.base_prefix "sys.base_prefix") and [`base_exec_prefix`](https://docs.python.org/3/library/sys.html#sys.base_exec_prefix "sys.base_exec_prefix") will remain pointing to the base Python installation (the one which the virtual environment was created from).
Added in version 3.3. 

sys.base_prefix[¶](https://docs.python.org/3/library/sys.html#sys.base_prefix "Link to this definition")
    
Set during Python startup, before `site.py` is run, to the same value as [`prefix`](https://docs.python.org/3/library/sys.html#sys.prefix "sys.prefix"). If not running in a [virtual environment](https://docs.python.org/3/library/venv.html#venv-def), the values will stay the same; if `site.py` finds that a virtual environment is in use, the values of [`prefix`](https://docs.python.org/3/library/sys.html#sys.prefix "sys.prefix") and [`exec_prefix`](https://docs.python.org/3/library/sys.html#sys.exec_prefix "sys.exec_prefix") will be changed to point to the virtual environment, whereas [`base_prefix`](https://docs.python.org/3/library/sys.html#sys.base_prefix "sys.base_prefix") and [`base_exec_prefix`](https://docs.python.org/3/library/sys.html#sys.base_exec_prefix "sys.base_exec_prefix") will remain pointing to the base Python installation (the one which the virtual environment was created from).
Added in version 3.3. 

sys.byteorder[¶](https://docs.python.org/3/library/sys.html#sys.byteorder "Link to this definition")
    
An indicator of the native byte order. This will have the value `'big'` on big-endian (most-significant byte first) platforms, and `'little'` on little-endian (least-significant byte first) platforms. 

sys.builtin_module_names[¶](https://docs.python.org/3/library/sys.html#sys.builtin_module_names "Link to this definition")
    
A tuple of strings containing the names of all modules that are compiled into this Python interpreter. (This information is not available in any other way — `modules.keys()` only lists the imported modules.)
See also the [`sys.stdlib_module_names`](https://docs.python.org/3/library/sys.html#sys.stdlib_module_names "sys.stdlib_module_names") list.