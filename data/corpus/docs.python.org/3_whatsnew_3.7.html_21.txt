Title: Changes to the ssl Module in Python 3.7
URL: https://docs.python.org/3/whatsnew/3.7.html
Summary: The ssl module now utilizes OpenSSL’s builtin API for hostname and IP address validation during TLS handshake, replacing match_hostname(). Any certificate validation errors trigger an SSLCertVerificationError and abort the handshake, providing a TLS Alert message. The hostname validation process can be customized through SSLContext.hostname_checks_common_name.
---

(Contributed by Anders Lorentsen in [bpo-31843](https://bugs.python.org/issue?@action=redirect&bpo=31843).)
### ssl[¶](https://docs.python.org/3/whatsnew/3.7.html#ssl "Link to this heading")
The [`ssl`](https://docs.python.org/3/library/ssl.html#module-ssl "ssl: TLS/SSL wrapper for socket objects") module now uses OpenSSL’s builtin API instead of `match_hostname()` to check a host name or an IP address. Values are validated during TLS handshake. Any certificate validation error including failing the host name check now raises [`SSLCertVerificationError`](https://docs.python.org/3/library/ssl.html#ssl.SSLCertVerificationError "ssl.SSLCertVerificationError") and aborts the handshake with a proper TLS Alert message. The new exception contains additional information. Host name validation can be customized with [`SSLContext.hostname_checks_common_name`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.hostname_checks_common_name "ssl.SSLContext.hostname_checks_common_name"). (Contributed by Christian Heimes in [bpo-31399](https://bugs.python.org/issue?@action=redirect&bpo=31399).)
Note
The improved host name check requires a _libssl_ implementation compatible with OpenSSL 1.0.2 or 1.1. Consequently, OpenSSL 0.9.8 and 1.0.1 are no longer supported (see [Platform Support Removals](https://docs.python.org/3/whatsnew/3.7.html#platform-support-removals) for more details). The ssl module is mostly compatible with LibreSSL 2.7.2 and newer.
The `ssl` module no longer sends IP addresses in SNI TLS extension. (Contributed by Christian Heimes in [bpo-32185](https://bugs.python.org/issue?@action=redirect&bpo=32185).)
`match_hostname()` no longer supports partial wildcards like `www*.example.org`. (Contributed by Mandeep Singh in [bpo-23033](https://bugs.python.org/issue?@action=redirect&bpo=23033) and Christian Heimes in [bpo-31399](https://bugs.python.org/issue?@action=redirect&bpo=31399).)
The default cipher suite selection of the `ssl` module now uses a blacklist approach rather than a hard-coded whitelist. Python no longer re-enables ciphers that have been blocked by OpenSSL security updates. Default cipher suite selection can be configured at compile time. (Contributed by Christian Heimes in [bpo-31429](https://bugs.python.org/issue?@action=redirect&bpo=31429).)
Validation of server certificates containing internationalized domain names (IDNs) is now supported. As part of this change, the [`SSLSocket.server_hostname`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket.server_hostname "ssl.SSLSocket.server_hostname") attribute now stores the expected hostname in A-label form (`"xn--pythn-mua.org"`), rather than the U-label form (`"pythön.org"`). (Contributed by Nathaniel J. Smith and Christian Heimes in [bpo-28414](https://bugs.python.org/issue?@action=redirect&bpo=28414).)
The `ssl` module has preliminary and experimental support for TLS 1.3 and OpenSSL 1.1.1. At the time of Python 3.7.0 release, OpenSSL 1.1.1 is still under development and TLS 1.3 hasn’t been finalized yet. The TLS 1.3 handshake and protocol behaves slightly differently than TLS 1.2 and earlier, see [TLS 1.3](https://docs.python.org/3/library/ssl.html#ssl-tlsv1-3). (Contributed by Christian Heimes in [bpo-32947](https://bugs.python.org/issue?@action=redirect&bpo=32947), [bpo-20995](https://bugs.python.org/issue?@action=redirect&bpo=20995), [bpo-29136](https://bugs.python.org/issue?@action=redirect&bpo=29136), [bpo-30622](https://bugs.python.org/issue?@action=redirect&bpo=30622) and [bpo-33618](https://bugs.python.org/issue?@action=redirect&bpo=33618))
[`SSLSocket`](https://docs.python.org/3/library/ssl.html#ssl.SSLSocket "ssl.SSLSocket") and [`SSLObject`](https://docs.python.org/3/library/ssl.html#ssl.SSLObject "ssl.SSLObject") no longer have a public constructor. Direct instantiation was never a documented and supported feature. Instances must be created with [`SSLContext`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext "ssl.SSLContext") methods [`wrap_socket()`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_socket "ssl.SSLContext.wrap_socket") and [`wrap_bio()`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.wrap_bio "ssl.SSLContext.wrap_bio"). (Contributed by Christian Heimes in [bpo-32951](https://bugs.python.org/issue?@action=redirect&bpo=32951))
OpenSSL 1.1 APIs for setting the minimum and maximum TLS protocol version are available as [`SSLContext.minimum_version`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.minimum_version "ssl.SSLContext.minimum_version") and [`SSLContext.maximum_version`](https://docs.python.org/3/library/ssl.html#ssl.SSLContext.maximum_version "ssl.SSLContext.maximum_version"). Supported protocols are indicated by several new flags, such as [`HAS_TLSv1_1`](https://docs.python.org/3/library/ssl.html#ssl.HAS_TLSv1_1 "ssl.HAS_TLSv1_1").