Title: Porting to Python 3.12
URL: https://docs.python.org/3/whatsnew/3.12.html
Summary: This section outlines important changes for porting to Python 3.12, including the removal of legacy Unicode APIs, deprecated argument parsing formats for Unicode, and updates on the handling of `tp_weaklist` and `tp_subclasses` in `PyTypeObject`. It emphasizes migrating to UTF-8 based APIs and using public C-API methods to avoid potential issues.
---

### Porting to Python 3.12[¶](https://docs.python.org/3/whatsnew/3.12.html#id5 "Link to this heading")
  * Legacy Unicode APIs based on `Py_UNICODE*` representation has been removed. Please migrate to APIs based on UTF-8 or `wchar_t*`.
  * Argument parsing functions like [`PyArg_ParseTuple()`](https://docs.python.org/3/c-api/arg.html#c.PyArg_ParseTuple "PyArg_ParseTuple") doesn’t support `Py_UNICODE*` based format (e.g. `u`, `Z`) anymore. Please migrate to other formats for Unicode like `s`, `z`, `es`, and `U`.
  * `tp_weaklist` for all static builtin types is always `NULL`. This is an internal-only field on `PyTypeObject` but we’re pointing out the change in case someone happens to be accessing the field directly anyway. To avoid breakage, consider using the existing public C-API instead, or, if necessary, the (internal-only) `_PyObject_GET_WEAKREFS_LISTPTR()` macro.
  * This internal-only [`PyTypeObject.tp_subclasses`](https://docs.python.org/3/c-api/typeobj.html#c.PyTypeObject.tp_subclasses "PyTypeObject.tp_subclasses") may now not be a valid object pointer. Its type was changed to void* to reflect this. We mention this in case someone happens to be accessing the internal-only field directly.
To get a list of subclasses, call the Python method [`__subclasses__()`](https://docs.python.org/3/reference/datamodel.html#type.__subclasses__ "type.__subclasses__") (using [`PyObject_CallMethod()`](https://docs.python.org/3/c-api/call.html#c.PyObject_CallMethod "PyObject_CallMethod"), for example).
  * Add support of more formatting options (left aligning, octals, uppercase hexadecimals, `intmax_t`, `ptrdiff_t`, `wchar_t` C strings, variable width and precision) in [`PyUnicode_FromFormat()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FromFormat "PyUnicode_FromFormat") and [`PyUnicode_FromFormatV()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FromFormatV "PyUnicode_FromFormatV"). (Contributed by Serhiy Storchaka in [gh-98836](https://github.com/python/cpython/issues/98836).)
  * An unrecognized format character in [`PyUnicode_FromFormat()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FromFormat "PyUnicode_FromFormat") and [`PyUnicode_FromFormatV()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FromFormatV "PyUnicode_FromFormatV") now sets a [`SystemError`](https://docs.python.org/3/library/exceptions.html#SystemError "SystemError"). In previous versions it caused all the rest of the format string to be copied as-is to the result string, and any extra arguments discarded. (Contributed by Serhiy Storchaka in [gh-95781](https://github.com/python/cpython/issues/95781).)
  * Fix wrong sign placement in [`PyUnicode_FromFormat()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FromFormat "PyUnicode_FromFormat") and [`PyUnicode_FromFormatV()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FromFormatV "PyUnicode_FromFormatV"). (Contributed by Philip Georgi in [gh-95504](https://github.com/python/cpython/issues/95504).)
  * Extension classes wanting to add a [`__dict__`](https://docs.python.org/3/reference/datamodel.html#object.__dict__ "object.__dict__") or weak reference slot should use [`Py_TPFLAGS_MANAGED_DICT`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_MANAGED_DICT "Py_TPFLAGS_MANAGED_DICT") and [`Py_TPFLAGS_MANAGED_WEAKREF`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_MANAGED_WEAKREF "Py_TPFLAGS_MANAGED_WEAKREF") instead of `tp_dictoffset` and `tp_weaklistoffset`, respectively. The use of `tp_dictoffset` and `tp_weaklistoffset` is still supported, but does not fully support multiple inheritance ([gh-95589](https://github.com/python/cpython/issues/95589)), and performance may be worse. Classes declaring [`Py_TPFLAGS_MANAGED_DICT`](https://docs.python.org/3/c-api/typeobj.html#c.Py_TPFLAGS_MANAGED_DICT "Py_TPFLAGS_MANAGED_DICT") must call `_PyObject_VisitManagedDict()` and `_PyObject_ClearManagedDict()` to traverse and clear their instance’s dictionaries. To clear weakrefs, call [`PyObject_ClearWeakRefs()`](https://docs.python.org/3/c-api/weakref.html#c.PyObject_ClearWeakRefs "PyObject_ClearWeakRefs"), as before.
  * The [`PyUnicode_FSDecoder()`](https://docs.python.org/3/c-api/unicode.html#c.PyUnicode_FSDecoder "PyUnicode_FSDecoder") function no longer accepts bytes-like paths, like [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") and [`memoryview`](https://docs.python.org/3/library/stdtypes.html#memoryview "memoryview") types: only the exact [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") type is accepted for bytes strings. (Contributed by Victor Stinner in [gh-98393](https://github.com/python/cpython/issues/98393).)
  * The [`Py_CLEAR`](https://docs.python.org/3/c-api/refcounting.html#c.Py_CLEAR "Py_CLEAR"), [`Py_SETREF`](https://docs.python.org/3/c-api/refcounting.html#c.Py_SETREF "Py_SETREF") and [`Py_XSETREF`](https://docs.python.org/3/c-api/refcountin