Title: Python 3.11.0 Alpha 7 Release Notes
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This document outlines the changes in Python 3.11.0 Alpha 7, released on April 5, 2022. Key updates include raising `IndentationError` instead of `SyntaxError` for specific code cases and improvements to exception handling for un-parenthesized generators.
---

## Python 3.11.0 alpha 7[¶](https://docs.python.org/3/whatsnew/changelog.html#python-3-11-0-alpha-7 "Link to this heading")
_Release date: 2022-04-05_
### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id227 "Link to this heading")
  * [bpo-47212](https://bugs.python.org/issue?@action=redirect&bpo=47212): Raise [`IndentationError`](https://docs.python.org/3/library/exceptions.html#IndentationError "IndentationError") instead of [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") for a bare `except` with no following indent. Improve [`SyntaxError`](https://docs.python.org/3/library/exceptions.html#SyntaxError "SyntaxError") locations for an un-parenthesized generator used as arguments. Patch by Matthieu Dartiailh.
  * [bpo-47186](https://bugs.python.org/issue?@action=redirect&bpo=47186): Replace `JUMP_IF_NOT_EG_MATCH` by [`CHECK_EG_MATCH`](https://docs.python.org/3/library/dis.html#opcode-CHECK_EG_MATCH) + jump.
  * [bpo-47176](https://bugs.python.org/issue?@action=redirect&bpo=47176): Emscripten builds cannot handle signals in the usual way due to platform limitations. Python can now handle signals. To use, set Module.Py_EmscriptenSignalBuffer to be a single byte SharedArrayBuffer and set Py_EMSCRIPTEN_SIGNAL_HANDLING to 1. Writing a number into the SharedArrayBuffer will cause the corresponding signal to be raised into the Python thread.
  * [bpo-47186](https://bugs.python.org/issue?@action=redirect&bpo=47186): Replace `JUMP_IF_NOT_EXC_MATCH` by [`CHECK_EXC_MATCH`](https://docs.python.org/3/library/dis.html#opcode-CHECK_EXC_MATCH) + jump.
  * [bpo-47120](https://bugs.python.org/issue?@action=redirect&bpo=47120): Replace the absolute jump opcode [`JUMP_NO_INTERRUPT`](https://docs.python.org/3/library/dis.html#opcode-JUMP_NO_INTERRUPT) by the relative [`JUMP_BACKWARD_NO_INTERRUPT`](https://docs.python.org/3/library/dis.html#opcode-JUMP_BACKWARD_NO_INTERRUPT).
  * [bpo-46841](https://bugs.python.org/issue?@action=redirect&bpo=46841): Avoid unnecessary allocations when comparing code objects.
  * [bpo-47182](https://bugs.python.org/issue?@action=redirect&bpo=47182): Fix a crash when using a named unicode character like `"\N{digit nine}"` after the main interpreter has been initialized a second time.
  * [bpo-47162](https://bugs.python.org/issue?@action=redirect&bpo=47162): WebAssembly cannot deal with bad function pointer casts (different count or types of arguments). Python can now use call trampolines to mitigate the problem. Define `PY_CALL_TRAMPOLINE` to enable call trampolines.
  * [bpo-46775](https://bugs.python.org/issue?@action=redirect&bpo=46775): Some Windows system error codes(>= 10000) are now mapped into the correct errno and may now raise a subclass of [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError"). Patch by Donghee Na.
  * [bpo-47129](https://bugs.python.org/issue?@action=redirect&bpo=47129): Improve error messages in f-string syntax errors concerning empty expressions.
  * [bpo-47117](https://bugs.python.org/issue?@action=redirect&bpo=47117): Fix a crash if we fail to decode characters in interactive mode if the tokenizer buffers are uninitialized. Patch by Pablo Galindo.
  * [bpo-47127](https://bugs.python.org/issue?@action=redirect&bpo=47127): Speed up calls to c functions with keyword arguments by 25% with specialization. Patch by Kumar Aditya.
  * [bpo-47120](https://bugs.python.org/issue?@action=redirect&bpo=47120): Replaced `JUMP_ABSOLUTE` by the relative jump [`JUMP_BACKWARD`](https://docs.python.org/3/library/dis.html#opcode-JUMP_BACKWARD).
  * [bpo-42197](https://bugs.python.org/issue?@action=redirect&bpo=42197): `PyFrame_FastToLocalsWithError()` and `PyFrame_LocalsToFast()` are no longer called during profiling nor tracing. C code can access the `f_locals` attribute of [`PyFrameObject`](https://docs.python.org/3/c-api/frame.html#c.PyFrameObject "PyFrameObject") by calling [`PyFrame_GetLocals()`](https://docs.python.org/3/c-api/frame.html#c.PyFrame_GetLocals "PyFrame_GetLocals").
  * [bpo-47070](https://bugs.python.org/issue?@action=redirect&bpo=47070): Improve performance of `array_inplace_repeat` by reducing the number of invocations of `memcpy`. Refactor the `repeat` and inplace `repeat` methods of `array`, `bytes`, `bytearray` and `unicodeobject` to use the common `_PyBytes_Repeat`.
  * [bpo-47053](https://bugs.python.org/issue?@action=redirect&bpo=47053): Reduce de-optimization in the specialized `BINARY_OP_INPLACE_ADD_UNICODE` opcode.
  * [bpo-47045](https://bugs.python.org/issue?@action=redirect&bpo=47045): Remove the `f_state` field from the _PyInterpreterFrame struct. Add the `owner` field to the _PyInterpreterFrame struct to make ownership explicit to simplify clearing and deallocing frames and generators.
  * [bpo-46968](https://bugs.python.org/issue?@action=redirect&bpo=46968): Check for the existence of the “sys/auxv.h” header in [`faulthandler`](https://docs.python.org/3/l