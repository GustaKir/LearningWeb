Title: Buffer Interface in Python
URL: https://docs.python.org/3/c-api/buffer.html
Summary: The buffer interface in Python allows simple objects like 'bytes' and 'bytearray' to expose their underlying data in a byte-oriented format. Other data types, such as 'array.array', can also provide multi-byte values. The 'write()' method of file objects can utilize this interface to write data, while methods like 'readinto()' require write access.
---

Simple objects such as [`bytes`](https://docs.python.org/3/library/stdtypes.html#bytes "bytes") and [`bytearray`](https://docs.python.org/3/library/stdtypes.html#bytearray "bytearray") expose their underlying buffer in byte-oriented form. Other forms are possible; for example, the elements exposed by an [`array.array`](https://docs.python.org/3/library/array.html#array.array "array.array") can be multi-byte values.
An example consumer of the buffer interface is the [`write()`](https://docs.python.org/3/library/io.html#io.BufferedIOBase.write "io.BufferedIOBase.write") method of file objects: any object that can export a series of bytes through the buffer interface can be written to a file. While `write()` only needs read-only access to the internal contents of the object passed to it, other methods such as [`readinto()`](https://docs.python.org/3/library/io.html#io.BufferedIOBase.readinto "io.BufferedIOBase.readinto") need write access to the contents of their argument. The buffer interface allows objects to selectively allow or reject exporting of read-write and read-only buffers.
There are two ways for a consumer of the buffer interface to acquire a buffer over a target object:
  * call [`PyObject_GetBuffer()`](https://docs.python.org/3/c-api/buffer.html#c.PyObject_GetBuffer "PyObject_GetBuffer") with the right parameters;
  * call [`PyArg_ParseTuple()`](https://docs.python.org/3/c-api/arg.html#c.PyArg_ParseTuple "PyArg_ParseTuple") (or one of its siblings) with one of the `y*`, `w*` or `s*` [format codes](https://docs.python.org/3/c-api/arg.html#arg-parsing).


In both cases, [`PyBuffer_Release()`](https://docs.python.org/3/c-api/buffer.html#c.PyBuffer_Release "PyBuffer_Release") must be called when the buffer isn’t needed anymore. Failure to do so could lead to various issues such as resource leaks.
## Buffer structure[¶](https://docs.python.org/3/c-api/buffer.html#buffer-structure "Link to this heading")
Buffer structures (or simply “buffers”) are useful as a way to expose the binary data from another object to the Python programmer. They can also be used as a zero-copy slicing mechanism. Using their ability to reference a block of memory, it is possible to expose any data to the Python programmer quite easily. The memory could be a large, constant array in a C extension, it could be a raw block of memory for manipulation before passing to an operating system library, or it could be used to pass around structured data in its native, in-memory format.
Contrary to most data types exposed by the Python interpreter, buffers are not [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject") pointers but rather simple C structures. This allows them to be created and copied very simply. When a generic wrapper around a buffer is needed, a [memoryview](https://docs.python.org/3/c-api/memoryview.html#memoryview-objects) object can be created.
For short instructions how to write an exporting object, see [Buffer Object Structures](https://docs.python.org/3/c-api/typeobj.html#buffer-structs). For obtaining a buffer, see [`PyObject_GetBuffer()`](https://docs.python.org/3/c-api/buffer.html#c.PyObject_GetBuffer "PyObject_GetBuffer"). 

typePy_buffer[¶](https://docs.python.org/3/c-api/buffer.html#c.Py_buffer "Link to this definition")
    _Part of the[ Stable ABI](https://docs.python.org/3/c-api/stable.html#stable) (including all members) since version 3.11._ 

void*buf[¶](https://docs.python.org/3/c-api/buffer.html#c.Py_buffer.buf "Link to this definition")
    
A pointer to the start of the logical structure described by the buffer fields. This can be any location within the underlying physical memory block of the exporter. For example, with negative [`strides`](https://docs.python.org/3/c-api/buffer.html#c.Py_buffer.strides "Py_buffer.strides") the value may point to the end of the memory block.
For [contiguous](https://docs.python.org/3/glossary.html#term-contiguous) arrays, the value points to the beginning of the memory block. 

[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*obj[¶](https://docs.python.org/3/c-api/buffer.html#c.Py_buffer.obj "Link to this definition")
    
A new reference to the exporting object. The reference is owned by the consumer and automatically released (i.e. reference count decremented) and set to `NULL` by [`PyBuffer_Release()`](https://docs.python.org/3/c-api/buffer.html#c.PyBuffer_Release "PyBuffer_Release"). The field is the equivalent of the return value of any standard C-API function.
As a special case, for _temporary_ buffers that are wrapped by [`PyMemoryView_FromBuffer()`](https://docs.python.org/3/c-api/memoryview.html#c.PyMemoryView_FromBuffer "PyMemoryView_FromBuffer") or [`PyBuffer_FillInfo()`](https://docs.python.org/3/c-api/buffer.html#c.PyBuffer_FillInfo "PyBuffer_FillInfo") this field is `NULL`. In general, exporting objects MUST NOT use this scheme.