Title: Byte Methods in Python: split and strip
URL: https://docs.python.org/3/library/stdtypes.html
Summary: This section covers the usage of `split` and `strip` methods for bytes and bytearray in Python. Examples illustrate how `b'string'.split()` separates byte strings into lists of byte components, while `strip` removes specified leading and trailing bytes from a byte sequence, defaulting to ASCII whitespace when no characters are provided.
---

```
>>> b'1 2 3'.split()
[b'1', b'2', b'3']
>>> b'1 2 3'.split(maxsplit=1)
[b'1', b'2 3']
>>> b'  1  2  3  '.split()
[b'1', b'2', b'3']

```


bytes.strip([_chars_])[¶](https://docs.python.org/3/library/stdtypes.html#bytes.strip "Link to this definition")


bytearray.strip([_chars_])[¶](https://docs.python.org/3/library/stdtypes.html#bytearray.strip "Link to this definition")
    
Return a copy of the sequence with specified leading and trailing bytes removed. The _chars_ argument is a binary sequence specifying the set of byte values to be removed - the name refers to the fact this method is usually used with ASCII characters. If omitted or `None`, the _chars_ argument defaults to removing ASCII whitespace. The _chars_ argument is not a prefix or suffix; rather, all combinations of its values are stripped:
>>>```
>>> b'  spacious  '.strip()
b'spacious'
>>> b'www.example.com'.strip(b'cmowz.')
b'example'

```

The binary sequence of byte values to remove may be any [bytes-like object](https://docs.python.org/3/glossary.html#term-bytes-like-object).
Note
The bytearray version of this method does _not_ operate in place - it always produces a new object, even if no changes were made.
The following methods on bytes and bytearray objects assume the use of ASCII compatible binary formats and should not be applied to arbitrary binary data. Note that all of the bytearray methods in this section do _not_ operate in place, and instead produce new objects. 

bytes.capitalize()[¶](https://docs.python.org/3/library/stdtypes.html#bytes.capitalize "Link to this definition")


bytearray.capitalize()[¶](https://docs.python.org/3/library/stdtypes.html#bytearray.capitalize "Link to this definition")
    
Return a copy of the sequence with each byte interpreted as an ASCII character, and the first byte capitalized and the rest lowercased. Non-ASCII byte values are passed through unchanged.
Note
The bytearray version of this method does _not_ operate in place - it always produces a new object, even if no changes were made. 

bytes.expandtabs(_tabsize =8_)[¶](https://docs.python.org/3/library/stdtypes.html#bytes.expandtabs "Link to this definition")


bytearray.expandtabs(_tabsize =8_)[¶](https://docs.python.org/3/library/stdtypes.html#bytearray.expandtabs "Link to this definition")
    
Return a copy of the sequence where all ASCII tab characters are replaced by one or more ASCII spaces, depending on the current column and the given tab size. Tab positions occur every _tabsize_ bytes (default is 8, giving tab positions at columns 0, 8, 16 and so on). To expand the sequence, the current column is set to zero and the sequence is examined byte by byte. If the byte is an ASCII tab character (`b'\t'`), one or more space characters are inserted in the result until the current column is equal to the next tab position. (The tab character itself is not copied.) If the current byte is an ASCII newline (`b'\n'`) or carriage return (`b'\r'`), it is copied and the current column is reset to zero. Any other byte value is copied unchanged and the current column is incremented by one regardless of how the byte value is represented when printed:
>>>```
>>> b'01\t012\t0123\t01234'.expandtabs()
b'01   012   0123  01234'
>>> b'01\t012\t0123\t01234'.expandtabs(4)
b'01 012 0123  01234'

```

Note
The bytearray version of this method does _not_ operate in place - it always produces a new object, even if no changes were made. 

bytes.isalnum()[¶](https://docs.python.org/3/library/stdtypes.html#bytes.isalnum "Link to this definition")


bytearray.isalnum()[¶](https://docs.python.org/3/library/stdtypes.html#bytearray.isalnum "Link to this definition")
    
Return `True` if all bytes in the sequence are alphabetical ASCII characters or ASCII decimal digits and the sequence is not empty, `False` otherwise. Alphabetic ASCII characters are those byte values in the sequence `b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'`. ASCII decimal digits are those byte values in the sequence `b'0123456789'`.
For example:
>>>```
>>> b'ABCabc1'.isalnum()
True
>>> b'ABC abc1'.isalnum()
False

```


bytes.isalpha()[¶](https://docs.python.org/3/library/stdtypes.html#bytes.isalpha "Link to this definition")


bytearray.isalpha()[¶](https://docs.python.org/3/library/stdtypes.html#bytearray.isalpha "Link to this definition")
    
Return `True` if all bytes in the sequence are alphabetic ASCII characters and the sequence is not empty, `False` otherwise. Alphabetic ASCII characters are those byte values in the sequence `b'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ'`.
For example:
>>>```
>>> b'ABCabc'.isalpha()
True
>>> b'ABCabc1'.isalpha()
False