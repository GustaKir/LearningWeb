Title: Email Message Header Access and Manipulation
URL: https://docs.python.org/3/library/email.compat32-message.html
Summary: This section details methods for accessing and modifying email message headers in Python's email library. The `__getitem__` method retrieves the value of a specified header, returning `None` if the header is absent, while `__setitem__` allows adding a new header with a specified name and value. If multiple headers are present, the exact value returned by `__getitem__` is undefined, and `get_all()` should be used to retrieve all values.
---

```


__getitem__(_name_)[¶](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.__getitem__ "Link to this definition")
    
Return the value of the named header field. _name_ should not include the colon field separator. If the header is missing, `None` is returned; a [`KeyError`](https://docs.python.org/3/library/exceptions.html#KeyError "KeyError") is never raised.
Note that if the named field appears more than once in the message’s headers, exactly which of those field values will be returned is undefined. Use the [`get_all()`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.get_all "email.message.Message.get_all") method to get the values of all the extant named headers. 

__setitem__(_name_ , _val_)[¶](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.__setitem__ "Link to this definition")
    
Add a header to the message with field name _name_ and value _val_. The field is appended to the end of the message’s existing fields.
Note that this does _not_ overwrite or delete any existing header with the same name. If you want to ensure that the new header is the only one present in the message with field name _name_ , delete the field first, e.g.:
```
del msg['subject']
msg['subject'] = 'Python roolz!'

```


__delitem__(_name_)[¶](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.__delitem__ "Link to this definition")
    
Delete all occurrences of the field with name _name_ from the message’s headers. No exception is raised if the named field isn’t present in the headers. 

keys()[¶](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.keys "Link to this definition")
    
Return a list of all the message’s header field names. 

values()[¶](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.values "Link to this definition")
    
Return a list of all the message’s field values. 

items()[¶](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.items "Link to this definition")
    
Return a list of 2-tuples containing all the message’s field headers and values. 

get(_name_ , _failobj =None_)[¶](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.get "Link to this definition")
    
Return the value of the named header field. This is identical to [`__getitem__()`](https://docs.python.org/3/reference/datamodel.html#object.__getitem__ "object.__getitem__") except that optional _failobj_ is returned if the named header is missing (defaults to `None`).
Here are some additional useful methods: 

get_all(_name_ , _failobj =None_)[¶](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.get_all "Link to this definition")
    
Return a list of all the values for the field named _name_. If there are no such named headers in the message, _failobj_ is returned (defaults to `None`). 

add_header(__name_ , __value_ , _** _params_)[¶](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.add_header "Link to this definition")
    
Extended header setting. This method is similar to [`__setitem__()`](https://docs.python.org/3/library/email.compat32-message.html#email.message.Message.__setitem__ "email.message.Message.__setitem__") except that additional header parameters can be provided as keyword arguments. __name_ is the header field to add and __value_ is the _primary_ value for the header.
For each item in the keyword argument dictionary __params_ , the key is taken as the parameter name, with underscores converted to dashes (since dashes are illegal in Python identifiers). Normally, the parameter will be added as `key="value"` unless the value is `None`, in which case only the key will be added. If the value contains non-ASCII characters, it can be specified as a three tuple in the format `(CHARSET, LANGUAGE, VALUE)`, where `CHARSET` is a string naming the charset to be used to encode the value, `LANGUAGE` can usually be set to `None` or the empty string (see [**RFC 2231**](https://datatracker.ietf.org/doc/html/rfc2231.html) for other possibilities), and `VALUE` is the string value containing non-ASCII code points. If a three tuple is not passed and the value contains non-ASCII characters, it is automatically encoded in [**RFC 2231**](https://datatracker.ietf.org/doc/html/rfc2231.html) format using a `CHARSET` of `utf-8` and a `LANGUAGE` of `None`.
Here’s an example:
```
msg.add_header('Content-Disposition', 'attachment', filename='bud.gif')

```

This will add a header that looks like
```
Content-Disposition: attachment; filename="bud.gif"

```

An example with non-ASCII characters:
```
msg.add_header('Content-Disposition', 'attachment',
        filename=('iso-8859-1', '', 'Fußballer.ppt'))

```

Which produces
```
Content-Disposition: attachment; filename*="iso-8859-1''Fu%DFballer.ppt"