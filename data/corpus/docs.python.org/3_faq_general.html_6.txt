Title: Python's Role in Linux Distributions and Future Developments
URL: https://docs.python.org/3/faq/general.html
Summary: Many Linux distributions, particularly Red Hat, utilize Python for their installers and system administration tools. Companies like Google and Yahoo also employ Python internally. For future developments, the Python Enhancement Proposals (PEPs) outline new feature suggestions, including upcoming release schedules. Ongoing discussions regarding Python's development take place on the python-dev mailing list.
---

Several Linux distributions, most notably [Red Hat](https://www.redhat.com), have written part or all of their installer and system administration software in Python. Companies that use Python internally include Google, Yahoo, and Lucasfilm Ltd.
### [What new developments are expected for Python in the future?](https://docs.python.org/3/faq/general.html#id25)[¶](https://docs.python.org/3/faq/general.html#what-new-developments-are-expected-for-python-in-the-future "Link to this heading")
See <https://peps.python.org/> for the Python Enhancement Proposals (PEPs). PEPs are design documents describing a suggested new feature for Python, providing a concise technical specification and a rationale. Look for a PEP titled “Python X.Y Release Schedule”, where X.Y is a version that hasn’t been publicly released yet.
New development is discussed on [the python-dev mailing list](https://mail.python.org/mailman3/lists/python-dev.python.org/).
### [Is it reasonable to propose incompatible changes to Python?](https://docs.python.org/3/faq/general.html#id26)[¶](https://docs.python.org/3/faq/general.html#is-it-reasonable-to-propose-incompatible-changes-to-python "Link to this heading")
In general, no. There are already millions of lines of Python code around the world, so any change in the language that invalidates more than a very small fraction of existing programs has to be frowned upon. Even if you can provide a conversion program, there’s still the problem of updating all documentation; many books have been written about Python, and we don’t want to invalidate them all at a single stroke.
Providing a gradual upgrade path is necessary if a feature has to be changed. [**PEP 5**](https://peps.python.org/pep-0005/) describes the procedure followed for introducing backward-incompatible changes while minimizing disruption for users.
### [Is Python a good language for beginning programmers?](https://docs.python.org/3/faq/general.html#id27)[¶](https://docs.python.org/3/faq/general.html#is-python-a-good-language-for-beginning-programmers "Link to this heading")
Yes.
It is still common to start students with a procedural and statically typed language such as Pascal, C, or a subset of C++ or Java. Students may be better served by learning Python as their first language. Python has a very simple and consistent syntax and a large standard library and, most importantly, using Python in a beginning programming course lets students concentrate on important programming skills such as problem decomposition and data type design. With Python, students can be quickly introduced to basic concepts such as loops and procedures. They can probably even work with user-defined objects in their very first course.
For a student who has never programmed before, using a statically typed language seems unnatural. It presents additional complexity that the student must master and slows the pace of the course. The students are trying to learn to think like a computer, decompose problems, design consistent interfaces, and encapsulate data. While learning to use a statically typed language is important in the long term, it is not necessarily the best topic to address in the students’ first programming course.
Many other aspects of Python make it a good first language. Like Java, Python has a large standard library so that students can be assigned programming projects very early in the course that _do_ something. Assignments aren’t restricted to the standard four-function calculator and check balancing programs. By using the standard library, students can gain the satisfaction of working on realistic applications as they learn the fundamentals of programming. Using the standard library also teaches students about code reuse. Third-party modules such as PyGame are also helpful in extending the students’ reach.
Python’s interactive interpreter enables students to test language features while they’re programming. They can keep a window with the interpreter running while they enter their program’s source in another window. If they can’t remember the methods for a list, they can do something like this:
>>>```
>>> L = []
>>> dir(L)
['__add__', '__class__', '__contains__', '__delattr__', '__delitem__',
'__dir__', '__doc__', '__eq__', '__format__', '__ge__',
'__getattribute__', '__getitem__', '__gt__', '__hash__', '__iadd__',
'__imul__', '__init__', '__iter__', '__le__', '__len__', '__lt__',
'__mul__', '__ne__', '__new__', '__reduce__', '__reduce_ex__',
'__repr__', '__reversed__', '__rmul__', '__setattr__', '__setitem__',
'__sizeof__', '__str__', '__subclasshook__', 'append', 'clear',
'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove',
'reverse', 'sort']
>>> [d for d in dir(L) if '__' not in d]
['append', 'clear', 'copy', 'count', 'extend', 'index', 'insert', 'pop', 'remove', 'reverse', 'sort']
>>> help(L.append)
Help on built-in function append:
append(...)
  L.append(object) -> None -- append object to end
>>> L.append(1)
>>> L
[1]