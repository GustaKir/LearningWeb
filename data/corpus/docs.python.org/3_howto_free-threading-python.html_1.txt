Title: Experimental Support for Free Threading in Python 3.13
URL: https://docs.python.org/3/howto/free-threading-python.html
Summary: Python 3.13 introduces experimental support for free threading by disabling the Global Interpreter Lock (GIL), allowing threads to run in parallel on multiple CPU cores. This feature aims to enhance performance for programs designed for threading, though it may come with bugs and reduced performance in single-threaded scenarios.
---

# Python experimental support for free threading[¶](https://docs.python.org/3/howto/free-threading-python.html#python-experimental-support-for-free-threading "Link to this heading")
Starting with the 3.13 release, CPython has experimental support for a build of Python called [free threading](https://docs.python.org/3/glossary.html#term-free-threading) where the [global interpreter lock](https://docs.python.org/3/glossary.html#term-global-interpreter-lock) (GIL) is disabled. Free-threaded execution allows for full utilization of the available processing power by running threads in parallel on available CPU cores. While not all software will benefit from this automatically, programs designed with threading in mind will run faster on multi-core hardware.
**The free-threaded mode is experimental** and work is ongoing to improve it: expect some bugs and a substantial single-threaded performance hit.
This document describes the implications of free threading for Python code. See [C API Extension Support for Free Threading](https://docs.python.org/3/howto/free-threading-extensions.html#freethreading-extensions-howto) for information on how to write C extensions that support the free-threaded build.
See also
[**PEP 703**](https://peps.python.org/pep-0703/) – Making the Global Interpreter Lock Optional in CPython for an overall description of free-threaded Python.
## Installation[¶](https://docs.python.org/3/howto/free-threading-python.html#installation "Link to this heading")
Starting with Python 3.13, the official macOS and Windows installers optionally support installing free-threaded Python binaries. The installers are available at <https://www.python.org/downloads/>.
For information on other platforms, see the [Installing a Free-Threaded Python](https://py-free-threading.github.io/installing_cpython/), a community-maintained installation guide for installing free-threaded Python.
When building CPython from source, the [`--disable-gil`](https://docs.python.org/3/using/configure.html#cmdoption-disable-gil) configure option should be used to build a free-threaded Python interpreter.
## Identifying free-threaded Python[¶](https://docs.python.org/3/howto/free-threading-python.html#identifying-free-threaded-python "Link to this heading")
To check if the current interpreter supports free-threading, [`python -VV`](https://docs.python.org/3/using/cmdline.html#cmdoption-V) and [`sys.version`](https://docs.python.org/3/library/sys.html#sys.version "sys.version") contain “experimental free-threading build”. The new [`sys._is_gil_enabled()`](https://docs.python.org/3/library/sys.html#sys._is_gil_enabled "sys._is_gil_enabled") function can be used to check whether the GIL is actually disabled in the running process.
The `sysconfig.get_config_var("Py_GIL_DISABLED")` configuration variable can be used to determine whether the build supports free threading. If the variable is set to `1`, then the build supports free threading. This is the recommended mechanism for decisions related to the build configuration.
## The global interpreter lock in free-threaded Python[¶](https://docs.python.org/3/howto/free-threading-python.html#the-global-interpreter-lock-in-free-threaded-python "Link to this heading")
Free-threaded builds of CPython support optionally running with the GIL enabled at runtime using the environment variable [`PYTHON_GIL`](https://docs.python.org/3/using/cmdline.html#envvar-PYTHON_GIL) or the command-line option [`-X gil`](https://docs.python.org/3/using/cmdline.html#cmdoption-X).
The GIL may also automatically be enabled when importing a C-API extension module that is not explicitly marked as supporting free threading. A warning will be printed in this case.
In addition to individual package documentation, the following websites track the status of popular packages support for free threading:
  * <https://py-free-threading.github.io/tracking/>
  * <https://hugovk.github.io/free-threaded-wheels/>