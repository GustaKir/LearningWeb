Title: Python 3.13 Release Notes
URL: https://docs.python.org/3/whatsnew/3.13.html
Summary: In Python 3.13, the `IOBase` finalizer now logs errors from the `close()` method via `sys.unraisablehook`, improving error handling compared to previous versions where such errors were ignored. Additionally, enhancements were made to the `ipaddress` module, specifically the addition of `IPv4Address.ipv6_mapped` functionality.
---

### io[¶](https://docs.python.org/3/whatsnew/3.13.html#io "Link to this heading")
  * The [`IOBase`](https://docs.python.org/3/library/io.html#io.IOBase "io.IOBase") finalizer now logs any errors raised by the [`close()`](https://docs.python.org/3/library/io.html#io.IOBase.close "io.IOBase.close") method with [`sys.unraisablehook`](https://docs.python.org/3/library/sys.html#sys.unraisablehook "sys.unraisablehook"). Previously, errors were ignored silently by default, and only logged in [Python Development Mode](https://docs.python.org/3/library/devmode.html#devmode) or when using a [Python debug build](https://docs.python.org/3/using/configure.html#debug-build). (Contributed by Victor Stinner in [gh-62948](https://github.com/python/cpython/issues/62948).)


### ipaddress[¶](https://docs.python.org/3/whatsnew/3.13.html#ipaddress "Link to this heading")
  * Add the [`IPv4Address.ipv6_mapped`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address.ipv6_mapped "ipaddress.IPv4Address.ipv6_mapped") property, which returns the IPv4-mapped IPv6 address. (Contributed by Charles Machalow in [gh-109466](https://github.com/python/cpython/issues/109466).)
  * Fix `is_global` and `is_private` behavior in [`IPv4Address`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Address "ipaddress.IPv4Address"), [`IPv6Address`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Address "ipaddress.IPv6Address"), [`IPv4Network`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv4Network "ipaddress.IPv4Network"), and [`IPv6Network`](https://docs.python.org/3/library/ipaddress.html#ipaddress.IPv6Network "ipaddress.IPv6Network"). (Contributed by Jakub Stasiak in [gh-113171](https://github.com/python/cpython/issues/113171).)


### itertools[¶](https://docs.python.org/3/whatsnew/3.13.html#itertools "Link to this heading")
  * [`batched()`](https://docs.python.org/3/library/itertools.html#itertools.batched "itertools.batched") has a new _strict_ parameter, which raises a [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError "ValueError") if the final batch is shorter than the specified batch size. (Contributed by Raymond Hettinger in [gh-113202](https://github.com/python/cpython/issues/113202).)


### marshal[¶](https://docs.python.org/3/whatsnew/3.13.html#marshal "Link to this heading")
  * Add the _allow_code_ parameter in module functions. Passing `allow_code=False` prevents serialization and de-serialization of code objects which are incompatible between Python versions. (Contributed by Serhiy Storchaka in [gh-113626](https://github.com/python/cpython/issues/113626).)


### math[¶](https://docs.python.org/3/whatsnew/3.13.html#math "Link to this heading")
  * The new function [`fma()`](https://docs.python.org/3/library/math.html#math.fma "math.fma") performs fused multiply-add operations. This computes `x * y + z` with only a single round, and so avoids any intermediate loss of precision. It wraps the `fma()` function provided by C99, and follows the specification of the IEEE 754 “fusedMultiplyAdd” operation for special cases. (Contributed by Mark Dickinson and Victor Stinner in [gh-73468](https://github.com/python/cpython/issues/73468).)


### mimetypes[¶](https://docs.python.org/3/whatsnew/3.13.html#mimetypes "Link to this heading")
  * Add the [`guess_file_type()`](https://docs.python.org/3/library/mimetypes.html#mimetypes.guess_file_type "mimetypes.guess_file_type") function to guess a MIME type from a filesystem path. Using paths with [`guess_type()`](https://docs.python.org/3/library/mimetypes.html#mimetypes.guess_type "mimetypes.guess_type") is now [soft deprecated](https://docs.python.org/3/glossary.html#term-soft-deprecated). (Contributed by Serhiy Storchaka in [gh-66543](https://github.com/python/cpython/issues/66543).)