Title: os.renames - Recursive Renaming Function
URL: https://docs.python.org/3/library/os.html
Summary: The os.renames function allows for recursive renaming of directories or files, creating any necessary intermediate directories. After renaming, it removes the old directory structure using removedirs. The function may fail due to permission issues and raises an auditing event. Since version 3.6, it accepts path-like objects for old and new paths.
---

os.renames(_old_ , _new_)[¶](https://docs.python.org/3/library/os.html#os.renames "Link to this definition")
    
Recursive directory or file renaming function. Works like [`rename()`](https://docs.python.org/3/library/os.html#os.rename "os.rename"), except creation of any intermediate directories needed to make the new pathname good is attempted first. After the rename, directories corresponding to rightmost path segments of the old name will be pruned away using [`removedirs()`](https://docs.python.org/3/library/os.html#os.removedirs "os.removedirs").
Note
This function can fail with the new directory structure made if you lack permissions needed to remove the leaf directory or file.
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.rename` with arguments `src`, `dst`, `src_dir_fd`, `dst_dir_fd`.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object) for _old_ and _new_. 

os.replace(_src_ , _dst_ , _*_ , _src_dir_fd =None_, _dst_dir_fd =None_)[¶](https://docs.python.org/3/library/os.html#os.replace "Link to this definition")
    
Rename the file or directory _src_ to _dst_. If _dst_ is a non-empty directory, [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") will be raised. If _dst_ exists and is a file, it will be replaced silently if the user has permission. The operation may fail if _src_ and _dst_ are on different filesystems. If successful, the renaming will be an atomic operation (this is a POSIX requirement).
This function can support specifying _src_dir_fd_ and/or _dst_dir_fd_ to supply [paths relative to directory descriptors](https://docs.python.org/3/library/os.html#dir-fd).
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.rename` with arguments `src`, `dst`, `src_dir_fd`, `dst_dir_fd`.
Added in version 3.3.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object) for _src_ and _dst_. 

os.rmdir(_path_ , _*_ , _dir_fd =None_)[¶](https://docs.python.org/3/library/os.html#os.rmdir "Link to this definition")
    
Remove (delete) the directory _path_. If the directory does not exist or is not empty, a [`FileNotFoundError`](https://docs.python.org/3/library/exceptions.html#FileNotFoundError "FileNotFoundError") or an [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") is raised respectively. In order to remove whole directory trees, [`shutil.rmtree()`](https://docs.python.org/3/library/shutil.html#shutil.rmtree "shutil.rmtree") can be used.
This function can support [paths relative to directory descriptors](https://docs.python.org/3/library/os.html#dir-fd).
Raises an [auditing event](https://docs.python.org/3/library/sys.html#auditing) `os.rmdir` with arguments `path`, `dir_fd`.
Changed in version 3.3: Added the _dir_fd_ parameter.
Changed in version 3.6: Accepts a [path-like object](https://docs.python.org/3/glossary.html#term-path-like-object).