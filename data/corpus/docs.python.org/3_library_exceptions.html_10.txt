Title: File and Directory Related Exceptions in Python
URL: https://docs.python.org/3/library/exceptions.html
Summary: This document outlines specific exceptions related to file and directory operations in Python, including FileExistsError (for existing files or directories), FileNotFoundError (for non-existent files or directories), and InterruptedError (when a system call is interrupted by an incoming signal). Corresponding errno values for each exception are also provided.
---

_exception_ FileExistsError[¶](https://docs.python.org/3/library/exceptions.html#FileExistsError "Link to this definition")
    
Raised when trying to create a file or directory which already exists. Corresponds to `errno` [`EEXIST`](https://docs.python.org/3/library/errno.html#errno.EEXIST "errno.EEXIST"). 

_exception_ FileNotFoundError[¶](https://docs.python.org/3/library/exceptions.html#FileNotFoundError "Link to this definition")
    
Raised when a file or directory is requested but doesn’t exist. Corresponds to `errno` [`ENOENT`](https://docs.python.org/3/library/errno.html#errno.ENOENT "errno.ENOENT"). 

_exception_ InterruptedError[¶](https://docs.python.org/3/library/exceptions.html#InterruptedError "Link to this definition")
    
Raised when a system call is interrupted by an incoming signal. Corresponds to `errno` [`EINTR`](https://docs.python.org/3/library/errno.html#errno.EINTR "errno.EINTR").
Changed in version 3.5: Python now retries system calls when a syscall is interrupted by a signal, except if the signal handler raises an exception (see [**PEP 475**](https://peps.python.org/pep-0475/) for the rationale), instead of raising [`InterruptedError`](https://docs.python.org/3/library/exceptions.html#InterruptedError "InterruptedError"). 

_exception_ IsADirectoryError[¶](https://docs.python.org/3/library/exceptions.html#IsADirectoryError "Link to this definition")
    
Raised when a file operation (such as [`os.remove()`](https://docs.python.org/3/library/os.html#os.remove "os.remove")) is requested on a directory. Corresponds to `errno` [`EISDIR`](https://docs.python.org/3/library/errno.html#errno.EISDIR "errno.EISDIR"). 

_exception_ NotADirectoryError[¶](https://docs.python.org/3/library/exceptions.html#NotADirectoryError "Link to this definition")
    
Raised when a directory operation (such as [`os.listdir()`](https://docs.python.org/3/library/os.html#os.listdir "os.listdir")) is requested on something which is not a directory. On most POSIX platforms, it may also be raised if an operation attempts to open or traverse a non-directory file as if it were a directory. Corresponds to `errno` [`ENOTDIR`](https://docs.python.org/3/library/errno.html#errno.ENOTDIR "errno.ENOTDIR"). 

_exception_ PermissionError[¶](https://docs.python.org/3/library/exceptions.html#PermissionError "Link to this definition")
    
Raised when trying to run an operation without the adequate access rights - for example filesystem permissions. Corresponds to `errno` [`EACCES`](https://docs.python.org/3/library/errno.html#errno.EACCES "errno.EACCES"), [`EPERM`](https://docs.python.org/3/library/errno.html#errno.EPERM "errno.EPERM"), and [`ENOTCAPABLE`](https://docs.python.org/3/library/errno.html#errno.ENOTCAPABLE "errno.ENOTCAPABLE").
Changed in version 3.11.1: WASI’s [`ENOTCAPABLE`](https://docs.python.org/3/library/errno.html#errno.ENOTCAPABLE "errno.ENOTCAPABLE") is now mapped to [`PermissionError`](https://docs.python.org/3/library/exceptions.html#PermissionError "PermissionError"). 

_exception_ ProcessLookupError[¶](https://docs.python.org/3/library/exceptions.html#ProcessLookupError "Link to this definition")
    
Raised when a given process doesn’t exist. Corresponds to `errno` [`ESRCH`](https://docs.python.org/3/library/errno.html#errno.ESRCH "errno.ESRCH"). 

_exception_ TimeoutError[¶](https://docs.python.org/3/library/exceptions.html#TimeoutError "Link to this definition")
    
Raised when a system function timed out at the system level. Corresponds to `errno` [`ETIMEDOUT`](https://docs.python.org/3/library/errno.html#errno.ETIMEDOUT "errno.ETIMEDOUT").
Added in version 3.3: All the above [`OSError`](https://docs.python.org/3/library/exceptions.html#OSError "OSError") subclasses were added.
See also
[**PEP 3151**](https://peps.python.org/pep-3151/) - Reworking the OS and IO exception hierarchy
## Warnings[¶](https://docs.python.org/3/library/exceptions.html#warnings "Link to this heading")
The following exceptions are used as warning categories; see the [Warning Categories](https://docs.python.org/3/library/warnings.html#warning-categories) documentation for more details. 

_exception_ Warning[¶](https://docs.python.org/3/library/exceptions.html#Warning "Link to this definition")
    
Base class for warning categories. 

_exception_ UserWarning[¶](https://docs.python.org/3/library/exceptions.html#UserWarning "Link to this definition")
    
Base class for warnings generated by user code.