Title: Python 3.7 Changes Overview
URL: https://docs.python.org/3/whatsnew/3.7.html
Summary: This section details important updates in Python 3.7, including the modification of default warnings filters requiring both Py_BytesWarningFlag and an explicit error filter for BytesWarning, a change in the handling of docstrings affecting implicit returns, and the relocation of the current exception state from the frame object to the co-routine, which simplifies the interpreter and resolves certain bugs.
---

Due to changes in the way the default warnings filters are configured, setting [`Py_BytesWarningFlag`](https://docs.python.org/3/c-api/init.html#c.Py_BytesWarningFlag "Py_BytesWarningFlag") to a value greater than one is no longer sufficient to both emit [`BytesWarning`](https://docs.python.org/3/library/exceptions.html#BytesWarning "BytesWarning") messages and have them converted to exceptions. Instead, the flag must be set (to cause the warnings to be emitted in the first place), and an explicit `error::BytesWarning` warnings filter added to convert them to exceptions.
Due to a change in the way docstrings are handled by the compiler, the implicit `return None` in a function body consisting solely of a docstring is now marked as occurring on the same line as the docstring, not on the function’s header line.
The current exception state has been moved from the frame object to the co-routine. This simplified the interpreter and fixed a couple of obscure bugs caused by having swap exception state when entering or exiting a generator. (Contributed by Mark Shannon in [bpo-25612](https://bugs.python.org/issue?@action=redirect&bpo=25612).)
## Notable changes in Python 3.7.1[¶](https://docs.python.org/3/whatsnew/3.7.html#notable-changes-in-python-3-7-1 "Link to this heading")
Starting in 3.7.1, [`Py_Initialize()`](https://docs.python.org/3/c-api/init.html#c.Py_Initialize "Py_Initialize") now consistently reads and respects all of the same environment settings as [`Py_Main()`](https://docs.python.org/3/c-api/init.html#c.Py_Main "Py_Main") (in earlier Python versions, it respected an ill-defined subset of those environment variables, while in Python 3.7.0 it didn’t read any of them due to [bpo-34247](https://bugs.python.org/issue?@action=redirect&bpo=34247)). If this behavior is unwanted, set [`Py_IgnoreEnvironmentFlag`](https://docs.python.org/3/c-api/init.html#c.Py_IgnoreEnvironmentFlag "Py_IgnoreEnvironmentFlag") to 1 before calling [`Py_Initialize()`](https://docs.python.org/3/c-api/init.html#c.Py_Initialize "Py_Initialize").
In 3.7.1 the C API for Context Variables [was updated](https://docs.python.org/3/c-api/contextvars.html#contextvarsobjects-pointertype-change) to use [`PyObject`](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject") pointers. See also [bpo-34762](https://bugs.python.org/issue?@action=redirect&bpo=34762).
In 3.7.1 the [`tokenize`](https://docs.python.org/3/library/tokenize.html#module-tokenize "tokenize: Lexical scanner for Python source code.") module now implicitly emits a `NEWLINE` token when provided with input that does not have a trailing new line. This behavior now matches what the C tokenizer does internally. (Contributed by Ammar Askar in [bpo-33899](https://bugs.python.org/issue?@action=redirect&bpo=33899).)
## Notable changes in Python 3.7.2[¶](https://docs.python.org/3/whatsnew/3.7.html#notable-changes-in-python-3-7-2 "Link to this heading")
In 3.7.2, [`venv`](https://docs.python.org/3/library/venv.html#module-venv "venv: Creation of virtual environments.") on Windows no longer copies the original binaries, but creates redirector scripts named `python.exe` and `pythonw.exe` instead. This resolves a long standing issue where all virtual environments would have to be upgraded or recreated with each Python update. However, note that this release will still require recreation of virtual environments in order to get the new scripts.
## Notable changes in Python 3.7.6[¶](https://docs.python.org/3/whatsnew/3.7.html#notable-changes-in-python-3-7-6 "Link to this heading")
Due to significant security concerns, the _reuse_address_ parameter of [`asyncio.loop.create_datagram_endpoint()`](https://docs.python.org/3/library/asyncio-eventloop.html#asyncio.loop.create_datagram_endpoint "asyncio.loop.create_datagram_endpoint") is no longer supported. This is because of the behavior of the socket option `SO_REUSEADDR` in UDP. For more details, see the documentation for `loop.create_datagram_endpoint()`. (Contributed by Kyle Stanley, Antoine Pitrou, and Yury Selivanov in [bpo-37228](https://bugs.python.org/issue?@action=redirect&bpo=37228).)
## Notable changes in Python 3.7.10[¶](https://docs.python.org/3/whatsnew/3.7.html#notable-changes-in-python-3-7-10 "Link to this heading")
Earlier Python versions allowed using both `;` and `&` as query parameter separators in [`urllib.parse.parse_qs()`](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.parse_qs "urllib.parse.parse_qs") and [`urllib.parse.parse_qsl()`](https://docs.python.org/3/library/urllib.parse.html#urllib.parse.parse_qsl "urllib.parse.parse_qsl"). Due to security concerns, and to conform with newer W3C recommendations, this has been changed to allow only a single separator key, with `&` as the default. This change also affects `cgi.parse()` and `cgi.parse_multipart()` as they use the affected functions internally. For more details, please see their respective documentation. (Contributed by Adam Goldschmid