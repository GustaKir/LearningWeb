Title: multiprocessing.sharedctypes.RawValue
URL: https://docs.python.org/3/library/multiprocessing.html
Summary: The `RawValue` function returns a ctypes object allocated from shared memory. It accepts a type code or ctypes type to determine the object type and additional arguments for the constructor. Accessing the value is not atomic, so using `Value()` is recommended for synchronized access.
---

multiprocessing.sharedctypes.RawValue(_typecode_or_type_ , _* args_)[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.sharedctypes.RawValue "Link to this definition")
    
Return a ctypes object allocated from shared memory.
_typecode_or_type_ determines the type of the returned object: it is either a ctypes type or a one character typecode of the kind used by the [`array`](https://docs.python.org/3/library/array.html#module-array "array: Space efficient arrays of uniformly typed numeric values.") module. _*args_ is passed on to the constructor for the type.
Note that setting and getting the value is potentially non-atomic – use [`Value()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.sharedctypes.Value "multiprocessing.sharedctypes.Value") instead to make sure that access is automatically synchronized using a lock.
Note that an array of [`ctypes.c_char`](https://docs.python.org/3/library/ctypes.html#ctypes.c_char "ctypes.c_char") has `value` and `raw` attributes which allow one to use it to store and retrieve strings – see documentation for [`ctypes`](https://docs.python.org/3/library/ctypes.html#module-ctypes "ctypes: A foreign function library for Python."). 

multiprocessing.sharedctypes.Array(_typecode_or_type_ , _size_or_initializer_ , _*_ , _lock =True_)[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.sharedctypes.Array "Link to this definition")
    
The same as [`RawArray()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.sharedctypes.RawArray "multiprocessing.sharedctypes.RawArray") except that depending on the value of _lock_ a process-safe synchronization wrapper may be returned instead of a raw ctypes array.
If _lock_ is `True` (the default) then a new lock object is created to synchronize access to the value. If _lock_ is a [`Lock`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Lock "multiprocessing.Lock") or [`RLock`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.RLock "multiprocessing.RLock") object then that will be used to synchronize access to the value. If _lock_ is `False` then access to the returned object will not be automatically protected by a lock, so it will not necessarily be “process-safe”.
Note that _lock_ is a keyword-only argument. 

multiprocessing.sharedctypes.Value(_typecode_or_type_ , _* args_, _lock =True_)[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.sharedctypes.Value "Link to this definition")
    
The same as [`RawValue()`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.sharedctypes.RawValue "multiprocessing.sharedctypes.RawValue") except that depending on the value of _lock_ a process-safe synchronization wrapper may be returned instead of a raw ctypes object.
If _lock_ is `True` (the default) then a new lock object is created to synchronize access to the value. If _lock_ is a [`Lock`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.Lock "multiprocessing.Lock") or [`RLock`](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.RLock "multiprocessing.RLock") object then that will be used to synchronize access to the value. If _lock_ is `False` then access to the returned object will not be automatically protected by a lock, so it will not necessarily be “process-safe”.
Note that _lock_ is a keyword-only argument. 

multiprocessing.sharedctypes.copy(_obj_)[¶](https://docs.python.org/3/library/multiprocessing.html#multiprocessing.sharedctypes.copy "Link to this definition")
    
Return a ctypes object allocated from shared memory which is a copy of the ctypes object _obj_.