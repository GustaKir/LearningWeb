Title: C API Updates
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section outlines significant changes to the C API, including the removal of non-standard C++ extensions from public headers, the documentation of Py_TPFLAGS_VALID_VERSION_TAG as an internal feature slated for removal, and the introduction of new functions PyErr_GetRaisedException() and PyErr_SetRaisedException() for managing exceptions.
---

### C API[¶](https://docs.python.org/3/whatsnew/changelog.html#id168 "Link to this heading")
  * [gh-101907](https://github.com/python/cpython/issues/101907): Removes use of non-standard C++ extension in public header files.
  * [gh-99293](https://github.com/python/cpython/issues/99293): Document that the Py_TPFLAGS_VALID_VERSION_TAG is an internal feature, should not be used, and will be removed.
  * [gh-101578](https://github.com/python/cpython/issues/101578): Add [`PyErr_GetRaisedException()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_GetRaisedException "PyErr_GetRaisedException") and [`PyErr_SetRaisedException()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_SetRaisedException "PyErr_SetRaisedException") for saving and restoring the current exception. These functions return and accept a single exception object, rather than the triple arguments of the now-deprecated [`PyErr_Fetch()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_Fetch "PyErr_Fetch") and [`PyErr_Restore()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_Restore "PyErr_Restore"). This is less error prone and a bit more efficient.
Add [`PyException_GetArgs()`](https://docs.python.org/3/c-api/exceptions.html#c.PyException_GetArgs "PyException_GetArgs") and [`PyException_SetArgs()`](https://docs.python.org/3/c-api/exceptions.html#c.PyException_SetArgs "PyException_SetArgs") as convenience functions for retrieving and modifying the [`args`](https://docs.python.org/3/library/exceptions.html#BaseException.args "BaseException.args") passed to the exception’s constructor.
  * [gh-91744](https://github.com/python/cpython/issues/91744): Introduced the _Unstable C API tier_ , marking APi that is allowed to change in minor releases without a deprecation period. See [**PEP 689**](https://peps.python.org/pep-0689/) for details.


## Python 3.12.0 alpha 5[¶](https://docs.python.org/3/whatsnew/changelog.html#python-3-12-0-alpha-5 "Link to this heading")
_Release date: 2023-02-07_
### Security[¶](https://docs.python.org/3/whatsnew/changelog.html#id169 "Link to this heading")
  * [gh-99108](https://github.com/python/cpython/issues/99108): Replace the builtin [`hashlib`](https://docs.python.org/3/library/hashlib.html#module-hashlib "hashlib: Secure hash and message digest algorithms.") implementations of SHA2-224 and SHA2-256 originally from LibTomCrypt with formally verified, side-channel resistant code from the [HACL*](https://github.com/hacl-star/hacl-star/) project. The builtins remain a fallback only used when OpenSSL does not provide them.