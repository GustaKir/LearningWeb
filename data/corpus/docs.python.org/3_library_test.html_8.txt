Title: Functions in test.support Module
URL: https://docs.python.org/3/library/test.html
Summary: This section describes functions in the test.support module used for memory limit settings and managing standard output during tests, including setting maximum memory usage limits and recording/restoring original stdout.
---

```


test.support.set_memlimit(_limit_)[¶](https://docs.python.org/3/library/test.html#test.support.set_memlimit "Link to this definition")
    
Set the values for [`max_memuse`](https://docs.python.org/3/library/test.html#test.support.max_memuse "test.support.max_memuse") and [`real_max_memuse`](https://docs.python.org/3/library/test.html#test.support.real_max_memuse "test.support.real_max_memuse") for big memory tests. 

test.support.record_original_stdout(_stdout_)[¶](https://docs.python.org/3/library/test.html#test.support.record_original_stdout "Link to this definition")
    
Store the value from _stdout_. It is meant to hold the stdout at the time the regrtest began. 

test.support.get_original_stdout()[¶](https://docs.python.org/3/library/test.html#test.support.get_original_stdout "Link to this definition")
    
Return the original stdout set by [`record_original_stdout()`](https://docs.python.org/3/library/test.html#test.support.record_original_stdout "test.support.record_original_stdout") or `sys.stdout` if it’s not set. 

test.support.args_from_interpreter_flags()[¶](https://docs.python.org/3/library/test.html#test.support.args_from_interpreter_flags "Link to this definition")
    
Return a list of command line arguments reproducing the current settings in `sys.flags` and `sys.warnoptions`. 

test.support.optim_args_from_interpreter_flags()[¶](https://docs.python.org/3/library/test.html#test.support.optim_args_from_interpreter_flags "Link to this definition")
    
Return a list of command line arguments reproducing the current optimization settings in `sys.flags`. 

test.support.captured_stdin()[¶](https://docs.python.org/3/library/test.html#test.support.captured_stdin "Link to this definition")


test.support.captured_stdout()[¶](https://docs.python.org/3/library/test.html#test.support.captured_stdout "Link to this definition")


test.support.captured_stderr()[¶](https://docs.python.org/3/library/test.html#test.support.captured_stderr "Link to this definition")
    
A context managers that temporarily replaces the named stream with [`io.StringIO`](https://docs.python.org/3/library/io.html#io.StringIO "io.StringIO") object.
Example use with output streams:
```
with captured_stdout() as stdout, captured_stderr() as stderr:
  print("hello")
  print("error", file=sys.stderr)
assert stdout.getvalue() == "hello\n"
assert stderr.getvalue() == "error\n"

```

Example use with input stream:
```
with captured_stdin() as stdin:
  stdin.write('hello\n')
  stdin.seek(0)
  # call test code that consumes from sys.stdin
  captured = input()
self.assertEqual(captured, "hello")

```


test.support.disable_faulthandler()[¶](https://docs.python.org/3/library/test.html#test.support.disable_faulthandler "Link to this definition")
    
A context manager that temporary disables [`faulthandler`](https://docs.python.org/3/library/faulthandler.html#module-faulthandler "faulthandler: Dump the Python traceback."). 

test.support.gc_collect()[¶](https://docs.python.org/3/library/test.html#test.support.gc_collect "Link to this definition")
    
Force as many objects as possible to be collected. This is needed because timely deallocation is not guaranteed by the garbage collector. This means that `__del__` methods may be called later than expected and weakrefs may remain alive for longer than expected. 

test.support.disable_gc()[¶](https://docs.python.org/3/library/test.html#test.support.disable_gc "Link to this definition")
    
A context manager that disables the garbage collector on entry. On exit, the garbage collector is restored to its prior state. 

test.support.swap_attr(_obj_ , _attr_ , _new_val_)[¶](https://docs.python.org/3/library/test.html#test.support.swap_attr "Link to this definition")
    
Context manager to swap out an attribute with a new object.
Usage:
```
with swap_attr(obj, "attr", 5):
  ...

```

This will set `obj.attr` to 5 for the duration of the `with` block, restoring the old value at the end of the block. If `attr` doesn’t exist on `obj`, it will be created and then deleted at the end of the block.
The old value (or `None` if it doesn’t exist) will be assigned to the target of the “as” clause, if there is one. 

test.support.swap_item(_obj_ , _attr_ , _new_val_)[¶](https://docs.python.org/3/library/test.html#test.support.swap_item "Link to this definition")
    
Context manager to swap out an item with a new object.
Usage:
```
with swap_item(obj, "item", 5):
  ...