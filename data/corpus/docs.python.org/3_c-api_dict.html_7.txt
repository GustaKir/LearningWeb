Title: PyDict_WatchCallback Type Definition
URL: https://docs.python.org/3/c-api/dict.html
Summary: Defines the PyDict_WatchCallback function type for dictionary watch events in Python's C API. It specifies the parameters related to different dictionary events such as addition, modification, deletion, and cloning of keys and values.
---

typedefint(*PyDict_WatchCallback)([PyDict_WatchEvent](https://docs.python.org/3/c-api/dict.html#c.PyDict_WatchEvent "PyDict_WatchEvent")event,[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*dict,[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*key,[PyObject](https://docs.python.org/3/c-api/structures.html#c.PyObject "PyObject")*new_value)[¶](https://docs.python.org/3/c-api/dict.html#c.PyDict_WatchCallback "Link to this definition")
    
Type of a dict watcher callback function.
If _event_ is `PyDict_EVENT_CLEARED` or `PyDict_EVENT_DEALLOCATED`, both _key_ and _new_value_ will be `NULL`. If _event_ is `PyDict_EVENT_ADDED` or `PyDict_EVENT_MODIFIED`, _new_value_ will be the new value for _key_. If _event_ is `PyDict_EVENT_DELETED`, _key_ is being deleted from the dictionary and _new_value_ will be `NULL`.
`PyDict_EVENT_CLONED` occurs when _dict_ was previously empty and another dict is merged into it. To maintain efficiency of this operation, per-key `PyDict_EVENT_ADDED` events are not issued in this case; instead a single `PyDict_EVENT_CLONED` is issued, and _key_ will be the source dictionary.
The callback may inspect but must not modify _dict_ ; doing so could have unpredictable effects, including infinite recursion. Do not trigger Python code execution in the callback, as it could modify the dict as a side effect.
If _event_ is `PyDict_EVENT_DEALLOCATED`, taking a new reference in the callback to the about-to-be-destroyed dictionary will resurrect it and prevent it from being freed at this time. When the resurrected object is destroyed later, any watcher callbacks active at that time will be called again.
Callbacks occur before the notified modification to _dict_ takes place, so the prior state of _dict_ can be inspected.
If the callback sets an exception, it must return `-1`; this exception will be printed as an unraisable exception using [`PyErr_WriteUnraisable()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_WriteUnraisable "PyErr_WriteUnraisable"). Otherwise it should return `0`.
There may already be a pending exception set on entry to the callback. In this case, the callback should return `0` with the same exception still set. This means the callback may not call any other API that can set an exception unless it saves and clears the exception state first, and restores it before returning.
Added in version 3.12.
#### Previous topic
[List Objects](https://docs.python.org/3/c-api/list.html "previous chapter")
#### Next topic
[Set Objects](https://docs.python.org/3/c-api/set.html "next chapter")
### This Page
  * [Report a Bug](https://docs.python.org/3/bugs.html)
  * [Show Source ](https://github.com/python/cpython/blob/main/Doc/c-api/dict.rst)


«
### Navigation
  * [index](https://docs.python.org/3/genindex.html "General Index")
  * [modules](https://docs.python.org/3/py-modindex.html "Python Module Index") |
  * [next](https://docs.python.org/3/c-api/set.html "Set Objects") |
  * [previous](https://docs.python.org/3/c-api/list.html "List Objects") |
  * ![Python logo](https://docs.python.org/3/_static/py.svg)
  * [Python](https://www.python.org/) »
  * EnglishSpanish | españolFrench | françaisItalian | italianoJapanese | 日本語Korean | 한국어Polish | polskiBrazilian Portuguese | Português brasileiroTurkish | TürkçeSimplified Chinese | 简体中文Traditional Chinese | 繁體中文
dev (3.14)3.13.33.123.113.103.93.83.73.63.53.43.33.23.13.02.72.6
  * [3.13.3 Documentation](https://docs.python.org/3/index.html) » 
  * [Python/C API Reference Manual](https://docs.python.org/3/c-api/index.html) »
  * [Concrete Objects Layer](https://docs.python.org/3/c-api/concrete.html) »
  * [Dictionary Objects](https://docs.python.org/3/c-api/dict.html)
  * | 
  * Theme  Auto Light Dark |


© [ Copyright ](https://docs.python.org/3/copyright.html) 2001-2025, Python Software Foundation. This page is licensed under the Python Software Foundation License Version 2. Examples, recipes, and other code in the documentation are additionally licensed under the Zero Clause BSD License. See [History and License](https://docs.python.org/license.html) for more information. The Python Software Foundation is a non-profit corporation. [Please donate.](https://www.python.org/psf/donations/) Last updated on Apr 27, 2025 (05:38 UTC). [Found a bug](https://docs.python.org/bugs.html)? Created using [Sphinx](https://www.sphinx-doc.org/) 8.2.3.