Title: Enhancements in Python 2.5 Standard Library
URL: https://docs.python.org/3/whatsnew/2.5.html
Summary: Python 2.5 introduced various enhancements and bug fixes to its standard library, including improvements to the `audioop` module for a-LAW encoding, support for incremental codecs in the `codecs` module, and many others. A comprehensive list of changes can be found in the `Misc/NEWS` file or the SVN logs.
---

## New, Improved, and Removed Modules[¶](https://docs.python.org/3/whatsnew/2.5.html#new-improved-and-removed-modules "Link to this heading")
The standard library received many enhancements and bug fixes in Python 2.5. Here’s a partial list of the most notable changes, sorted alphabetically by module name. Consult the `Misc/NEWS` file in the source tree for a more complete list of changes, or look through the SVN logs for all the details.
  * The `audioop` module now supports the a-LAW encoding, and the code for u-LAW encoding has been improved. (Contributed by Lars Immisch.)
  * The [`codecs`](https://docs.python.org/3/library/codecs.html#module-codecs "codecs: Encode and decode data and streams.") module gained support for incremental codecs. The `codec.lookup()` function now returns a `CodecInfo` instance instead of a tuple. `CodecInfo` instances behave like a 4-tuple to preserve backward compatibility but also have the attributes `encode`, `decode`, `incrementalencoder`, `incrementaldecoder`, `streamwriter`, and `streamreader`. Incremental codecs can receive input and produce output in multiple chunks; the output is the same as if the entire input was fed to the non-incremental codec. See the [`codecs`](https://docs.python.org/3/library/codecs.html#module-codecs "codecs: Encode and decode data and streams.") module documentation for details. (Designed and implemented by Walter Dörwald.)
  * The [`collections`](https://docs.python.org/3/library/collections.html#module-collections "collections: Container datatypes") module gained a new type, `defaultdict`, that subclasses the standard [`dict`](https://docs.python.org/3/library/stdtypes.html#dict "dict") type. The new type mostly behaves like a dictionary but constructs a default value when a key isn’t present, automatically adding it to the dictionary for the requested key value.
The first argument to `defaultdict`’s constructor is a factory function that gets called whenever a key is requested but not found. This factory function receives no arguments, so you can use built-in type constructors such as [`list()`](https://docs.python.org/3/library/stdtypes.html#list "list") or [`int()`](https://docs.python.org/3/library/functions.html#int "int"). For example, you can make an index of words based on their initial letter like this:
```
words = """Nel mezzo del cammin di nostra vita
mi ritrovai per una selva oscura
che la diritta via era smarrita""".lower().split()
index = defaultdict(list)
for w in words:
  init_letter = w[0]
  index[init_letter].append(w)

```

Printing `index` results in the following output:
```
defaultdict(<type 'list'>, {'c': ['cammin', 'che'], 'e': ['era'],
    'd': ['del', 'di', 'diritta'], 'm': ['mezzo', 'mi'],
    'l': ['la'], 'o': ['oscura'], 'n': ['nel', 'nostra'],
    'p': ['per'], 's': ['selva', 'smarrita'],
    'r': ['ritrovai'], 'u': ['una'], 'v': ['vita', 'via']}