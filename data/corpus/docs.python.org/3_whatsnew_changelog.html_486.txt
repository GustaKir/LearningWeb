Title: Python 3 Changelog: Core and Builtins
URL: https://docs.python.org/3/whatsnew/changelog.html
Summary: This section of the Python 3 changelog details several key updates including the allowance of unpacking in annotated assignments, improvements to garbage collection for structseq objects, and modifications to the _co_argcount_ attribute in code objects. These changes enhance functionality and tracking within the Python core.
---

### Core and Builtins[¶](https://docs.python.org/3/whatsnew/changelog.html#id436 "Link to this heading")
  * [bpo-35814](https://bugs.python.org/issue?@action=redirect&bpo=35814): Allow unpacking in the right hand side of annotated assignments. In particular, `t: Tuple[int, ...] = x, y, *z` is now allowed.
  * [bpo-37126](https://bugs.python.org/issue?@action=redirect&bpo=37126): All structseq objects are now tracked by the garbage collector. Patch by Pablo Galindo.
  * [bpo-37122](https://bugs.python.org/issue?@action=redirect&bpo=37122): Make the _co_argcount_ attribute of code objects represent the total number of positional arguments (including positional-only arguments). The value of _co_posonlyargcount_ can be used to distinguish which arguments are positional only, and the difference (_co_argcount_ - _co_posonlyargcount_) is the number of positional-or-keyword arguments. Patch by Pablo Galindo.
  * [bpo-20092](https://bugs.python.org/issue?@action=redirect&bpo=20092): Constructors of [`int`](https://docs.python.org/3/library/functions.html#int "int"), [`float`](https://docs.python.org/3/library/functions.html#float "float") and [`complex`](https://docs.python.org/3/library/functions.html#complex "complex") will now use the [`__index__()`](https://docs.python.org/3/reference/datamodel.html#object.__index__ "object.__index__") special method, if available and the corresponding method [`__int__()`](https://docs.python.org/3/reference/datamodel.html#object.__int__ "object.__int__"), [`__float__()`](https://docs.python.org/3/reference/datamodel.html#object.__float__ "object.__float__") or [`__complex__()`](https://docs.python.org/3/reference/datamodel.html#object.__complex__ "object.__complex__") is not available.
  * [bpo-37087](https://bugs.python.org/issue?@action=redirect&bpo=37087): Add native thread ID (TID) support to OpenBSD.
  * [bpo-26219](https://bugs.python.org/issue?@action=redirect&bpo=26219): Implemented per opcode cache mechanism and `LOAD_GLOBAL` instruction use it. `LOAD_GLOBAL` is now about 40% faster. Contributed by Yury Selivanov, and Inada Naoki.
  * [bpo-37072](https://bugs.python.org/issue?@action=redirect&bpo=37072): Fix crash in PyAST_FromNodeObject() when flags is NULL.
  * [bpo-37029](https://bugs.python.org/issue?@action=redirect&bpo=37029): Freeing a great many small objects could take time quadratic in the number of arenas, due to using linear search to keep `obmalloc.c`’s list of usable arenas sorted by order of number of free memory pools. This is accomplished without search now, leaving the worst-case time linear in the number of arenas. For programs where this quite visibly matters (typically with more than 100 thousand small objects alive simultaneously), this can greatly reduce the time needed to release their memory.
  * [bpo-26423](https://bugs.python.org/issue?@action=redirect&bpo=26423): Fix possible overflow in `wrap_lenfunc()` when `sizeof(long) < sizeof(Py_ssize_t)` (e.g., 64-bit Windows).
  * [bpo-37050](https://bugs.python.org/issue?@action=redirect&bpo=37050): Improve the AST for “debug” f-strings, which use ‘=’ to print out the source of the expression being evaluated. Delete expr_text from the FormattedValue node, and instead use a Constant string node (possibly merged with adjacent constant expressions inside the f-string).
  * [bpo-22385](https://bugs.python.org/issue?@action=redirect&bpo=22385): The `bytes.hex`, `bytearray.hex`, and `memoryview.hex` methods as well as the `binascii.hexlify` and `b2a_hex` functions now have the ability to include an optional separator between hex bytes. This functionality was inspired by MicroPython’s hexlify implementation.
  * [bpo-26836](https://bugs.python.org/issue?@action=redirect&bpo=26836): Add [`os.memfd_create()`](https://docs.python.org/3/library/os.html#os.memfd_create "os.memfd_create").
  * [bpo-37032](https://bugs.python.org/issue?@action=redirect&bpo=37032): Added new `replace()` method to the code type ([`types.CodeType`](https://docs.python.org/3/library/types.html#types.CodeType "types.CodeType")).
  * [bpo-37007](https://bugs.python.org/issue?@action=redirect&bpo=37007): Implement [`socket.if_nameindex()`](https://docs.python.org/3/library/socket.html#socket.if_nameindex "socket.if_nameindex"), [`socket.if_nametoindex()`](https://docs.python.org/3/library/socket.html#socket.if_nametoindex "socket.if_nametoindex"), and [`socket.if_indextoname()`](https://docs.python.org/3/library/socket.html#socket.if_indextoname "socket.if_indextoname") on Windows.
  * [bpo-36829](https://bugs.python.org/issue?@action=redirect&bpo=36829): [`PyErr_WriteUnraisable()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_WriteUnraisable "PyErr_WriteUnraisable") now creates a traceback object if there is no current traceback. Moreover, call [`PyErr_NormalizeException()`](https://docs.python.org/3/c-api/exceptions.html#c.PyErr_NormalizeException "PyErr_NormalizeException") and [`PyException_SetTraceback()`](https://doc