Title: Finder in Python Import System
URL: https://docs.python.org/3/glossary.html
Summary: A finder is an object that locates the loader for an importing module. There are two main types of finders: meta path finders used with sys.meta_path and path entry finders used with sys.path_hooks. For further details, refer to Finders and loaders and the importlib module.
---

finder[¶](https://docs.python.org/3/glossary.html#term-finder "Link to this term")
    
An object that tries to find the [loader](https://docs.python.org/3/glossary.html#term-loader) for a module that is being imported.
There are two types of finder: [meta path finders](https://docs.python.org/3/glossary.html#term-meta-path-finder) for use with [`sys.meta_path`](https://docs.python.org/3/library/sys.html#sys.meta_path "sys.meta_path"), and [path entry finders](https://docs.python.org/3/glossary.html#term-path-entry-finder) for use with [`sys.path_hooks`](https://docs.python.org/3/library/sys.html#sys.path_hooks "sys.path_hooks").
See [Finders and loaders](https://docs.python.org/3/reference/import.html#finders-and-loaders) and [`importlib`](https://docs.python.org/3/library/importlib.html#module-importlib "importlib: The implementation of the import machinery.") for much more detail. 

floor division[¶](https://docs.python.org/3/glossary.html#term-floor-division "Link to this term")
    
Mathematical division that rounds down to nearest integer. The floor division operator is `//`. For example, the expression `11 // 4` evaluates to `2` in contrast to the `2.75` returned by float true division. Note that `(-11) // 4` is `-3` because that is `-2.75` rounded _downward_. See [**PEP 238**](https://peps.python.org/pep-0238/). 

free threading[¶](https://docs.python.org/3/glossary.html#term-free-threading "Link to this term")
    
A threading model where multiple threads can run Python bytecode simultaneously within the same interpreter. This is in contrast to the [global interpreter lock](https://docs.python.org/3/glossary.html#term-global-interpreter-lock) which allows only one thread to execute Python bytecode at a time. See [**PEP 703**](https://peps.python.org/pep-0703/). 

free variable[¶](https://docs.python.org/3/glossary.html#term-free-variable "Link to this term")
    
Formally, as defined in the [language execution model](https://docs.python.org/3/reference/executionmodel.html#bind-names), a free variable is any variable used in a namespace which is not a local variable in that namespace. See [closure variable](https://docs.python.org/3/glossary.html#term-closure-variable) for an example. Pragmatically, due to the name of the [`codeobject.co_freevars`](https://docs.python.org/3/reference/datamodel.html#codeobject.co_freevars "codeobject.co_freevars") attribute, the term is also sometimes used as a synonym for [closure variable](https://docs.python.org/3/glossary.html#term-closure-variable). 

function[¶](https://docs.python.org/3/glossary.html#term-function "Link to this term")
    
A series of statements which returns some value to a caller. It can also be passed zero or more [arguments](https://docs.python.org/3/glossary.html#term-argument) which may be used in the execution of the body. See also [parameter](https://docs.python.org/3/glossary.html#term-parameter), [method](https://docs.python.org/3/glossary.html#term-method), and the [Function definitions](https://docs.python.org/3/reference/compound_stmts.html#function) section. 

function annotation[¶](https://docs.python.org/3/glossary.html#term-function-annotation "Link to this term")
    
An [annotation](https://docs.python.org/3/glossary.html#term-annotation) of a function parameter or return value.
Function annotations are usually used for [type hints](https://docs.python.org/3/glossary.html#term-type-hint): for example, this function is expected to take two [`int`](https://docs.python.org/3/library/functions.html#int "int") arguments and is also expected to have an [`int`](https://docs.python.org/3/library/functions.html#int "int") return value:
```
defsum_two_numbers(a: int, b: int) -> int:
  return a + b

```

Function annotation syntax is explained in section [Function definitions](https://docs.python.org/3/reference/compound_stmts.html#function).
See [variable annotation](https://docs.python.org/3/glossary.html#term-variable-annotation) and [**PEP 484**](https://peps.python.org/pep-0484/), which describe this functionality. Also see [Annotations Best Practices](https://docs.python.org/3/howto/annotations.html#annotations-howto) for best practices on working with annotations. 

__future__[¶](https://docs.python.org/3/glossary.html#term-__future__ "Link to this term")
    
A [future statement](https://docs.python.org/3/reference/simple_stmts.html#future), `from __future__ import <feature>`, directs the compiler to compile the current module using syntax or semantics that will become standard in a future release of Python. The [`__future__`](https://docs.python.org/3/library/__future__.html#module-__future__ "__future__: Future statement definitions") module documents the possible values of _feature_. By importing this module and evaluating its variables, you can see when a new feature was first added to the language and when it will (or did) become the default:
>>>