Title: Extending OpenAPI in FastAPI
URL: https://fastapi.tiangolo.com/how-to/extending-openapi/
Summary: This document outlines the process of extending OpenAPI in FastAPI, including how to override defaults, generate, modify, and cache the OpenAPI schema, and methods to check these implementations.
---

Table of contents 
  * [ The normal process  ](https://fastapi.tiangolo.com/how-to/extending-openapi/#the-normal-process)
  * [ Overriding the defaults  ](https://fastapi.tiangolo.com/how-to/extending-openapi/#overriding-the-defaults)
    * [ Normal **FastAPI** ](https://fastapi.tiangolo.com/how-to/extending-openapi/#normal-fastapi)
    * [ Generate the OpenAPI schema  ](https://fastapi.tiangolo.com/how-to/extending-openapi/#generate-the-openapi-schema)
    * [ Modify the OpenAPI schema  ](https://fastapi.tiangolo.com/how-to/extending-openapi/#modify-the-openapi-schema)
    * [ Cache the OpenAPI schema  ](https://fastapi.tiangolo.com/how-to/extending-openapi/#cache-the-openapi-schema)
    * [ Override the method  ](https://fastapi.tiangolo.com/how-to/extending-openapi/#override-the-method)
    * [ Check it  ](https://fastapi.tiangolo.com/how-to/extending-openapi/#check-it)


  1. [ FastAPI  ](https://fastapi.tiangolo.com/)
  2. [ Learn  ](https://fastapi.tiangolo.com/learn/)
  3. [ How To - Recipes  ](https://fastapi.tiangolo.com/how-to/)


# Extending OpenAPI[¶](https://fastapi.tiangolo.com/how-to/extending-openapi/#extending-openapi "Permanent link")
There are some cases where you might need to modify the generated OpenAPI schema.
In this section you will see how.
## The normal process[¶](https://fastapi.tiangolo.com/how-to/extending-openapi/#the-normal-process "Permanent link")
The normal (default) process, is as follows.
A `FastAPI` application (instance) has an `.openapi()` method that is expected to return the OpenAPI schema.
As part of the application object creation, a _path operation_ for `/openapi.json` (or for whatever you set your `openapi_url`) is registered.
It just returns a JSON response with the result of the application's `.openapi()` method.
By default, what the method `.openapi()` does is check the property `.openapi_schema` to see if it has contents and return them.
If it doesn't, it generates them using the utility function at `fastapi.openapi.utils.get_openapi`.
And that function `get_openapi()` receives as parameters:
  * `title`: The OpenAPI title, shown in the docs.
  * `version`: The version of your API, e.g. `2.5.0`.
  * `openapi_version`: The version of the OpenAPI specification used. By default, the latest: `3.1.0`.
  * `summary`: A short summary of the API.
  * `description`: The description of your API, this can include markdown and will be shown in the docs.
  * `routes`: A list of routes, these are each of the registered _path operations_. They are taken from `app.routes`.


Info
The parameter `summary` is available in OpenAPI 3.1.0 and above, supported by FastAPI 0.99.0 and above.
## Overriding the defaults[¶](https://fastapi.tiangolo.com/how-to/extending-openapi/#overriding-the-defaults "Permanent link")
Using the information above, you can use the same utility function to generate the OpenAPI schema and override each part that you need.
For example, let's add [ReDoc's OpenAPI extension to include a custom logo](https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md#x-logo).
### Normal **FastAPI**[¶](https://fastapi.tiangolo.com/how-to/extending-openapi/#normal-fastapi "Permanent link")
First, write all your **FastAPI** application as normally:
[Python 3.8+](https://fastapi.tiangolo.com/how-to/extending-openapi/#__tabbed_1_1)
```
fromfastapiimport FastAPI
fromfastapi.openapi.utilsimport get_openapi
app = FastAPI()
@app.get("/items/")
async defread_items():
  return [{"name": "Foo"}]
defcustom_openapi():
  if app.openapi_schema:
    return app.openapi_schema
  openapi_schema = get_openapi(
    title="Custom title",
    version="2.5.0",
    summary="This is a very custom OpenAPI schema",
    description="Here's a longer description of the custom **OpenAPI** schema",
    routes=app.routes,
  )
  openapi_schema["info"]["x-logo"] = {
    "url": "https://fastapi.tiangolo.com/img/logo-margin/logo-teal.png"
  }
  app.openapi_schema = openapi_schema
  return app.openapi_schema
app.openapi = custom_openapi

```

### Generate the OpenAPI schema[¶](https://fastapi.tiangolo.com/how-to/extending-openapi/#generate-the-openapi-schema "Permanent link")
Then, use the same utility function to generate the OpenAPI schema, inside a `custom_openapi()` function:
[Python 3.8+](https://fastapi.tiangolo.com/how-to/extending-openapi/#__tabbed_2_1)