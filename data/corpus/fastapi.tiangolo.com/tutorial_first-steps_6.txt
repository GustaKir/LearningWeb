Title: Introduction to OpenAPI and FastAPI Basics
URL: https://fastapi.tiangolo.com/tutorial/first-steps/
Summary: This section describes OpenAPI's role in powering interactive documentation for FastAPI and its alternatives. It highlights OpenAPI's capability for automatic code generation for clients communicating with APIs. Additionally, it presents the first step in using FastAPI by demonstrating how to import the library and set up a basic application that responds with a 'Hello World' message.
---

```

#### What is OpenAPI for[¶](https://fastapi.tiangolo.com/tutorial/first-steps/#what-is-openapi-for "Permanent link")
The OpenAPI schema is what powers the two interactive documentation systems included.
And there are dozens of alternatives, all based on OpenAPI. You could easily add any of those alternatives to your application built with **FastAPI**.
You could also use it to generate code automatically, for clients that communicate with your API. For example, frontend, mobile or IoT applications.
## Recap, step by step[¶](https://fastapi.tiangolo.com/tutorial/first-steps/#recap-step-by-step "Permanent link")
### Step 1: import `FastAPI`[¶](https://fastapi.tiangolo.com/tutorial/first-steps/#step-1-import-fastapi "Permanent link")
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/first-steps/#__tabbed_2_1)
```
fromfastapiimport FastAPI
app = FastAPI()
@app.get("/")
async defroot():
  return {"message": "Hello World"}

```

`FastAPI` is a Python class that provides all the functionality for your API.
Technical Details
`FastAPI` is a class that inherits directly from `Starlette`.
You can use all the [Starlette](https://www.starlette.io/) functionality with `FastAPI` too.
### Step 2: create a `FastAPI` "instance"[¶](https://fastapi.tiangolo.com/tutorial/first-steps/#step-2-create-a-fastapi-instance "Permanent link")
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/first-steps/#__tabbed_3_1)
```
fromfastapiimport FastAPI
app = FastAPI()
@app.get("/")
async defroot():
  return {"message": "Hello World"}

```

Here the `app` variable will be an "instance" of the class `FastAPI`.
This will be the main point of interaction to create all your API.
### Step 3: create a _path operation_[¶](https://fastapi.tiangolo.com/tutorial/first-steps/#step-3-create-a-path-operation "Permanent link")
#### Path[¶](https://fastapi.tiangolo.com/tutorial/first-steps/#path "Permanent link")
"Path" here refers to the last part of the URL starting from the first `/`.
So, in a URL like:
```
https://example.com/items/foo

```

...the path would be:
```
/items/foo

```

Info
A "path" is also commonly called an "endpoint" or a "route".
While building an API, the "path" is the main way to separate "concerns" and "resources".
#### Operation[¶](https://fastapi.tiangolo.com/tutorial/first-steps/#operation "Permanent link")
"Operation" here refers to one of the HTTP "methods".
One of:
  * `POST`
  * `GET`
  * `PUT`
  * `DELETE`


...and the more exotic ones:
  * `OPTIONS`
  * `HEAD`
  * `PATCH`
  * `TRACE`


In the HTTP protocol, you can communicate to each path using one (or more) of these "methods".
When building APIs, you normally use these specific HTTP methods to perform a specific action.
Normally you use:
  * `POST`: to create data.
  * `GET`: to read data.
  * `PUT`: to update data.
  * `DELETE`: to delete data.


So, in OpenAPI, each of the HTTP methods is called an "operation".
We are going to call them "**operations** " too.
#### Define a _path operation decorator_[¶](https://fastapi.tiangolo.com/tutorial/first-steps/#define-a-path-operation-decorator "Permanent link")
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/first-steps/#__tabbed_4_1)
```
fromfastapiimport FastAPI
app = FastAPI()
@app.get("/")
async defroot():
  return {"message": "Hello World"}

```

The `@app.get("/")` tells **FastAPI** that the function right below is in charge of handling requests that go to:
  * the path `/`
  * using a `get` operation


`@decorator` Info
That `@something` syntax in Python is called a "decorator".
You put it on top of a function. Like a pretty decorative hat (I guess that's where the term came from).
A "decorator" takes the function below and does something with it.
In our case, this decorator tells **FastAPI** that the function below corresponds to the **path** `/` with an **operation** `get`.
It is the "**path operation decorator** ".
You can also use the other operations:
  * `@app.post()`
  * `@app.put()`
  * `@app.delete()`


And the more exotic ones:
  * `@app.options()`
  * `@app.head()`
  * `@app.patch()`
  * `@app.trace()`


Tip
You are free to use each operation (HTTP method) as you wish.
**FastAPI** doesn't enforce any specific meaning.
The information here is presented as a guideline, not a requirement.
For example, when using GraphQL you normally perform all the actions using only `POST` operations.
### Step 4: define the **path operation function**[¶](https://fastapi.tiangolo.com/tutorial/first-steps/#step-4-define-the-path-operation-function "Permanent link")
This is our "**path operation function** ":
  * **path** : is `/`.
  * **operation** : is `get`.
  * **function** : is the function below the "decorator" (below `@app.get("/")`).


[Python 3.8+](https://fastapi.tiangolo.com/tutorial/first-steps/#__tabbed_5_1)
```
fromfastapiimport FastAPI
app = FastAPI()
@app.get("/")
async defroot():
  return {"message": "Hello World"}