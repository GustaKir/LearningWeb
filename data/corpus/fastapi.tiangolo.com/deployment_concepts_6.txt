Title: Understanding Processes in Operating Systems
URL: https://fastapi.tiangolo.com/deployment/concepts/
Summary: This section outlines the definition of a 'process' in computing, emphasizing that it refers to a program currently being executed by the operating system. It discusses the concept of execution, the ability to terminate processes, and the coexistence of multiple processes running simultaneously.
---

### What is a Process[Â¶](https://fastapi.tiangolo.com/deployment/concepts/#what-is-a-process "Permanent link")
The word **process** is normally used in a more specific way, only referring to the thing that is running in the operating system (like in the last point above):
  * A particular program while it is **running** on the operating system.
    * This doesn't refer to the file, nor to the code, it refers **specifically** to the thing that is being **executed** and managed by the operating system.
  * Any program, any code, **can only do things** when it is being **executed**. So, when there's a **process running**.
  * The process can be **terminated** (or "killed") by you, or by the operating system. At that point, it stops running/being executed, and it can **no longer do things**.
  * Each application that you have running on your computer has some process behind it, each running program, each window, etc. And there are normally many processes running **at the same time** while a computer is on.
  * There can be **multiple processes** of the **same program** running at the same time.


If you check out the "task manager" or "system monitor" (or similar tools) in your operating system, you will be able to see many of those processes running.
And, for example, you will probably see that there are multiple processes running the same browser program (Firefox, Chrome, Edge, etc). They normally run one process per tab, plus some other extra processes.
![](https://fastapi.tiangolo.com/img/deployment/concepts/image01.png)
Now that we know the difference between the terms **process** and **program** , let's continue talking about deployments.
## Running on Startup[Â¶](https://fastapi.tiangolo.com/deployment/concepts/#running-on-startup "Permanent link")
In most cases, when you create a web API, you want it to be **always running** , uninterrupted, so that your clients can always access it. This is of course, unless you have a specific reason why you want it to run only in certain situations, but most of the time you want it constantly running and **available**.
### In a Remote Server[Â¶](https://fastapi.tiangolo.com/deployment/concepts/#in-a-remote-server "Permanent link")
When you set up a remote server (a cloud server, a virtual machine, etc.) the simplest thing you can do is use `fastapi run` (which uses Uvicorn) or something similar, manually, the same way you do when developing locally.
And it will work and will be useful **during development**.
But if your connection to the server is lost, the **running process** will probably die.
And if the server is restarted (for example after updates, or migrations from the cloud provider) you probably **won't notice it**. And because of that, you won't even know that you have to restart the process manually. So, your API will just stay dead. ðŸ˜±
### Run Automatically on Startup[Â¶](https://fastapi.tiangolo.com/deployment/concepts/#run-automatically-on-startup "Permanent link")
In general, you will probably want the server program (e.g. Uvicorn) to be started automatically on server startup, and without needing any **human intervention** , to have a process always running with your API (e.g. Uvicorn running your FastAPI app).
### Separate Program[Â¶](https://fastapi.tiangolo.com/deployment/concepts/#separate-program "Permanent link")
To achieve this, you will normally have a **separate program** that would make sure your application is run on startup. And in many cases, it would also make sure other components or applications are also run, for example, a database.
### Example Tools to Run at Startup[Â¶](https://fastapi.tiangolo.com/deployment/concepts/#example-tools-to-run-at-startup "Permanent link")
Some examples of the tools that can do this job are:
  * Docker
  * Kubernetes
  * Docker Compose
  * Docker in Swarm Mode
  * Systemd
  * Supervisor
  * Handled internally by a cloud provider as part of their services
  * Others...