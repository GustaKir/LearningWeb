Title: CORSMiddleware Instance Attributes and Methods
URL: https://fastapi.tiangolo.com/reference/middleware/
Summary: This section details several instance attributes of the CORSMiddleware, including allow_origin_regex, simple_headers, preflight_headers, and methods like is_allowed_origin. Each attribute and method is described briefly, indicating their purpose in handling CORS-related functionality.
---

```
preflight_explicit_allow_origin = (
  preflight_explicit_allow_origin
)

```

###  allow_origin_regex `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/middleware/#fastapi.middleware.cors.CORSMiddleware.allow_origin_regex "Permanent link")
```
allow_origin_regex = compiled_allow_origin_regex

```

###  simple_headers `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/middleware/#fastapi.middleware.cors.CORSMiddleware.simple_headers "Permanent link")
```
simple_headers = simple_headers

```

###  preflight_headers `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/middleware/#fastapi.middleware.cors.CORSMiddleware.preflight_headers "Permanent link")
```
preflight_headers = preflight_headers

```

###  is_allowed_origin [¶](https://fastapi.tiangolo.com/reference/middleware/#fastapi.middleware.cors.CORSMiddleware.is_allowed_origin "Permanent link")
```
is_allowed_origin(origin)

```

PARAMETER | DESCRIPTION  
---|---  
`origin` |  **TYPE:** `str`  
Source code in `starlette/middleware/cors.py`
```
 95
 96
 97
 98
 99
100
101
102
```
| ```
defis_allowed_origin(self, origin: str) -> bool:
  if self.allow_all_origins:
    return True
  if self.allow_origin_regex is not None and self.allow_origin_regex.fullmatch(origin):
    return True
  return origin in self.allow_origins

```
  
---|---  
###  preflight_response [¶](https://fastapi.tiangolo.com/reference/middleware/#fastapi.middleware.cors.CORSMiddleware.preflight_response "Permanent link")
```
preflight_response(request_headers)

```

PARAMETER | DESCRIPTION  
---|---  
`request_headers` |  **TYPE:** `Headers`  
Source code in `starlette/middleware/cors.py`
```
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
```
| ```
defpreflight_response(self, request_headers: Headers) -> Response:
  requested_origin = request_headers["origin"]
  requested_method = request_headers["access-control-request-method"]
  requested_headers = request_headers.get("access-control-request-headers")
  headers = dict(self.preflight_headers)
  failures = []
  if self.is_allowed_origin(origin=requested_origin):
    if self.preflight_explicit_allow_origin:
      # The "else" case is already accounted for in self.preflight_headers
      # and the value would be "*".
      headers["Access-Control-Allow-Origin"] = requested_origin
  else:
    failures.append("origin")
  if requested_method not in self.allow_methods:
    failures.append("method")
  # If we allow all headers, then we have to mirror back any requested
  # headers in the response.
  if self.allow_all_headers and requested_headers is not None:
    headers["Access-Control-Allow-Headers"] = requested_headers
  elif requested_headers is not None:
    for header in [h.lower() for h in requested_headers.split(",")]:
      if header.strip() not in self.allow_headers:
        failures.append("headers")
        break
  # We don't strictly need to use 400 responses here, since its up to
  # the browser to enforce the CORS policy, but its more informative
  # if we do.
  if failures:
    failure_text = "Disallowed CORS " + ", ".join(failures)
    return PlainTextResponse(failure_text, status_code=400, headers=headers)
  return PlainTextResponse("OK", status_code=200, headers=headers)

```
  
---|---  
###  simple_response `async` [¶](https://fastapi.tiangolo.com/reference/middleware/#fastapi.middleware.cors.CORSMiddleware.simple_response "Permanent link")
```
simple_response(scope, receive, send, request_headers)

```

PARAMETER | DESCRIPTION  
---|---  
`scope` |  **TYPE:** `Scope`  
`receive` |  **TYPE:** `Receive`  
`send` |  **TYPE:** `Send`  
`request_headers` |  **TYPE:** `Headers`  
Source code in `starlette/middleware/cors.py`
```
142
143
144
```
| ```
async defsimple_response(self, scope: Scope, receive: Receive, send: Send, request_headers: Headers) -> None:
  send = functools.partial(self.send, send=send, request_headers=request_headers)
  await self.app(scope, receive, send)

```
  
---|---  
###  send `async` [¶](https://fastapi.tiangolo.com/reference/middleware/#fastapi.middleware.cors.CORSMiddleware.send "Permanent link")
```
send(message, send, request_headers)

```

PARAMETER | DESCRIPTION  
---|---  
`message` |  **TYPE:** `Message`  
`send` |  **TYPE:** `Send`  
`request_headers` |  **TYPE:** `Headers`  
Source code in `starlette/middleware/cors.py`
```
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
```
|