Title: Handling Errors in FastAPI
URL: https://fastapi.tiangolo.com/tutorial/handling-errors/
Summary: This section discusses how to handle client errors in FastAPI by returning HTTP status codes in the 400 range. It introduces the use of `HTTPException` for sending error responses to clients, along with a code example of its implementation.
---

In these cases, you would normally return an **HTTP status code** in the range of **400** (from 400 to 499).
This is similar to the 200 HTTP status codes (from 200 to 299). Those "200" status codes mean that somehow there was a "success" in the request.
The status codes in the 400 range mean that there was an error from the client.
Remember all those **"404 Not Found"** errors (and jokes)?
## Use `HTTPException`[¶](https://fastapi.tiangolo.com/tutorial/handling-errors/#use-httpexception "Permanent link")
To return HTTP responses with errors to the client you use `HTTPException`.
### Import `HTTPException`[¶](https://fastapi.tiangolo.com/tutorial/handling-errors/#import-httpexception "Permanent link")
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/handling-errors/#__tabbed_1_1)
```
fromfastapiimport FastAPI, HTTPException
app = FastAPI()
items = {"foo": "The Foo Wrestlers"}
@app.get("/items/{item_id}")
async defread_item(item_id: str):
  if item_id not in items:
    raise HTTPException(status_code=404, detail="Item not found")
  return {"item": items[item_id]}

```

### Raise an `HTTPException` in your code[¶](https://fastapi.tiangolo.com/tutorial/handling-errors/#raise-an-httpexception-in-your-code "Permanent link")
`HTTPException` is a normal Python exception with additional data relevant for APIs.
Because it's a Python exception, you don't `return` it, you `raise` it.
This also means that if you are inside a utility function that you are calling inside of your _path operation function_ , and you raise the `HTTPException` from inside of that utility function, it won't run the rest of the code in the _path operation function_ , it will terminate that request right away and send the HTTP error from the `HTTPException` to the client.
The benefit of raising an exception over returning a value will be more evident in the section about Dependencies and Security.
In this example, when the client requests an item by an ID that doesn't exist, raise an exception with a status code of `404`:
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/handling-errors/#__tabbed_2_1)
```
fromfastapiimport FastAPI, HTTPException
app = FastAPI()
items = {"foo": "The Foo Wrestlers"}
@app.get("/items/{item_id}")
async defread_item(item_id: str):
  if item_id not in items:
    raise HTTPException(status_code=404, detail="Item not found")
  return {"item": items[item_id]}

```

### The resulting response[¶](https://fastapi.tiangolo.com/tutorial/handling-errors/#the-resulting-response "Permanent link")
If the client requests `http://example.com/items/foo` (an `item_id` `"foo"`), that client will receive an HTTP status code of 200, and a JSON response of:
```
{
"item":"The Foo Wrestlers"
}

```

But if the client requests `http://example.com/items/bar` (a non-existent `item_id` `"bar"`), that client will receive an HTTP status code of 404 (the "not found" error), and a JSON response of:
```
{
"detail":"Item not found"
}

```

Tip
When raising an `HTTPException`, you can pass any value that can be converted to JSON as the parameter `detail`, not only `str`.
You could pass a `dict`, a `list`, etc.
They are handled automatically by **FastAPI** and converted to JSON.
## Add custom headers[¶](https://fastapi.tiangolo.com/tutorial/handling-errors/#add-custom-headers "Permanent link")
There are some situations in where it's useful to be able to add custom headers to the HTTP error. For example, for some types of security.
You probably won't need to use it directly in your code.
But in case you needed it for an advanced scenario, you can add custom headers:
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/handling-errors/#__tabbed_3_1)
```
fromfastapiimport FastAPI, HTTPException
app = FastAPI()
items = {"foo": "The Foo Wrestlers"}
@app.get("/items-header/{item_id}")
async defread_item_header(item_id: str):
  if item_id not in items:
    raise HTTPException(
      status_code=404,
      detail="Item not found",
      headers={"X-Error": "There goes my error"},
    )
  return {"item": items[item_id]}

```

## Install custom exception handlers[¶](https://fastapi.tiangolo.com/tutorial/handling-errors/#install-custom-exception-handlers "Permanent link")
You can add custom exception handlers with [the same exception utilities from Starlette](https://www.starlette.io/exceptions/).
Let's say you have a custom exception `UnicornException` that you (or a library you use) might `raise`.
And you want to handle this exception globally with FastAPI.
You could add a custom exception handler with `@app.exception_handler()`:
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/handling-errors/#__tabbed_4_1)