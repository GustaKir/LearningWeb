Title: FastAPI APIRouter Reference
URL: https://fastapi.tiangolo.com/reference/apirouter/
Summary: This documentation chunk provides an overview of how to use the `APIRouter` in FastAPI, including setting up a WebSocket endpoint and the method to include a router in a FastAPI application using `include_router`. The example demonstrates accepting and responding to WebSocket messages.
---

```python
  from fastapi import APIRouter, FastAPI, WebSocket
  app = FastAPI()
  router = APIRouter()
  @router.websocket("/ws")
  async def websocket_endpoint(websocket: WebSocket):
    await websocket.accept()
    while True:
      data = await websocket.receive_text()
      await websocket.send_text(f"Message text was: {data}")
  app.include_router(router)
  ```
  """
  defdecorator(func: DecoratedCallable) -> DecoratedCallable:
    self.add_api_websocket_route(
      path, func, name=name, dependencies=dependencies
    )
    return func
  return decorator

```
  
---|---  
###  include_router [¶](https://fastapi.tiangolo.com/reference/apirouter/#fastapi.APIRouter.include_router "Permanent link")
```
include_router(
  router,
  *,
  prefix="",
  tags=None,
  dependencies=None,
  default_response_class=Default(JSONResponse[](https://fastapi.tiangolo.com/reference/responses/#fastapi.responses.JSONResponse "<code class="doc-symbol doc-symbol-heading doc-symbol-class"></code>      <span class="doc doc-object-name doc-class-name">fastapi.responses.JSONResponse</span> \(<code>starlette.responses.JSONResponse</code>\)")),
  responses=None,
  callbacks=None,
  deprecated=None,
  include_in_schema=True,
  generate_unique_id_function=Default(generate_unique_id)
)

```

Include another `APIRouter` in the same current `APIRouter`.
Read more about it in the [FastAPI docs for Bigger Applications](https://fastapi.tiangolo.com/tutorial/bigger-applications/).
##### Example[¶](https://fastapi.tiangolo.com/reference/apirouter/#fastapi.APIRouter.include_router--example "Permanent link")
```
fromfastapiimport APIRouter, FastAPI
app = FastAPI()
internal_router = APIRouter()
users_router = APIRouter()
@users_router.get("/users/")
defread_users():
  return [{"name": "Rick"}, {"name": "Morty"}]
internal_router.include_router(users_router)
app.include_router(internal_router)