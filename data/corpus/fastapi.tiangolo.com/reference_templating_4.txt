Title: Templating with Jinja2Templates in FastAPI
URL: https://fastapi.tiangolo.com/reference/templating/
Summary: The `Jinja2Templates` class in FastAPI allows developers to render Jinja templates effectively. It can be imported from `fastapi.templating` and provides functionality to specify template directories and context processors for rendering.
---

# Templating - `Jinja2Templates`[¶](https://fastapi.tiangolo.com/reference/templating/#templating-jinja2templates "Permanent link")
You can use the `Jinja2Templates` class to render Jinja templates.
Read more about it in the [FastAPI docs for Templates](https://fastapi.tiangolo.com/advanced/templates/).
You can import it directly from `fastapi.templating`:
```
fromfastapi.templatingimport Jinja2Templates

```

##  fastapi.templating.Jinja2Templates [¶](https://fastapi.tiangolo.com/reference/templating/#fastapi.templating.Jinja2Templates "Permanent link")
```
Jinja2Templates(
  directory: (
    str | PathLike[str] | Sequence[str | PathLike[str]]
  ),
  *,
  context_processors: (
    list[Callable[[Request[](https://fastapi.tiangolo.com/reference/request/#fastapi.Request "<code class="doc-symbol doc-symbol-heading doc-symbol-class"></code>      <span class="doc doc-object-name doc-class-name">fastapi.Request</span> \(<code>starlette.requests.Request</code>\)")], dict[str, Any]]] | None
  ) = None,
  **env_options: Any
)

```

```
Jinja2Templates(
  *,
  env: Environment,
  context_processors: (
    list[Callable[[Request[](https://fastapi.tiangolo.com/reference/request/#fastapi.Request "<code class="doc-symbol doc-symbol-heading doc-symbol-class"></code>      <span class="doc doc-object-name doc-class-name">fastapi.Request</span> \(<code>starlette.requests.Request</code>\)")], dict[str, Any]]] | None
  ) = None
)

```

```
Jinja2Templates(
  directory=None,
  *,
  context_processors=None,
  env=None,
  **env_options
)

```

templates = Jinja2Templates("templates")
return templates.TemplateResponse("index.html", {"request": request})
PARAMETER | DESCRIPTION  
---|---  
`directory` |  **TYPE:** `str | PathLike[str] | Sequence[str | PathLike[str]] | None` **DEFAULT:** `None`  
`context_processors` |  **TYPE:** `list[Callable[[Request[](https://fastapi.tiangolo.com/reference/request/#fastapi.Request "<code class="doc-symbol doc-symbol-heading doc-symbol-class"></code>      <span class="doc doc-object-name doc-class-name">fastapi.Request</span> \(<code>starlette.requests.Request</code>\)")], dict[str, Any]]] | None` **DEFAULT:** `None`  
`env` |  **TYPE:** `Environment | None` **DEFAULT:** `None`  
`**env_options` |  **TYPE:** `Any` **DEFAULT:** `{}`  
Source code in `starlette/templating.py`
```
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
```
| ```
def__init__(
  self,
  directory: str | PathLike[str] | typing.Sequence[str | PathLike[str]] | None = None,
  *,
  context_processors: list[typing.Callable[[Request], dict[str, typing.Any]]] | None = None,
  env: jinja2.Environment | None = None,
  **env_options: typing.Any,
) -> None:
  if env_options:
    warnings.warn(
      "Extra environment options are deprecated. Use a preconfigured jinja2.Environment instead.",
      DeprecationWarning,
    )
  assert jinja2 is not None, "jinja2 must be installed to use Jinja2Templates"
  assert bool(directory) ^ bool(env), "either 'directory' or 'env' arguments must be passed"
  self.context_processors = context_processors or []
  if directory is not None:
    self.env = self._create_env(directory, **env_options)
  elif env is not None: # pragma: no branch
    self.env = env
  self._setup_env_defaults(self.env)

```
  
---|---  
###  context_processors `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/templating/#fastapi.templating.Jinja2Templates.context_processors "Permanent link")
```
context_processors = context_processors or []

```

###  env `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/templating/#fastapi.templating.Jinja2Templates.env "Permanent link")
```
env = _create_env(directory, **env_options)

```

###  get_template [¶](https://fastapi.tiangolo.com/reference/templating/#fastapi.templating.Jinja2Templates.get_template "Permanent link")
```
get_template(name)

```

PARAMETER | DESCRIPTION  
---|---  
`name` |  **TYPE:** `str`  
Source code in `starlette/templating.py`
```
130
131
```
| ```
defget_template(self, name: str) -> jinja2.Template:
  return self.env.get_template(name)

```
  
---|---  
###  TemplateResponse [¶](https://fastapi.tiangolo.com/reference/templating/#fastapi.templating.Jinja2Templates.TemplateResponse "Permanent link")
```
TemplateResponse(
  request: Request[](https://fastapi.tiangolo.com/reference/request/#fastapi.Request "<code class="doc-symbol doc-symbol-heading doc-symbol-class"></code>      <span class="doc doc-object-name doc-class-name">fastapi.Request</span> \(<code>starlette.requests.Request</code>\)"),
  name: str,
  context: dict[str, Any] | None = None,
  status_code: int = 200,
  headers: Mapping[str, str] | None = None,
  media_type: str | None = None,
  background: BackgroundTask | None = None,
) -> _TemplateResponse

```