Title: OAuth2PasswordRequestFormStrict Attributes
URL: https://fastapi.tiangolo.com/reference/security/
Summary: This section describes the instance attributes of the `OAuth2PasswordRequestFormStrict` class in FastAPI, which include `grant_type`, `username`, `password`, `scopes`, and `client_id`. Each attribute is pivotal for handling OAuth2 password requests.
---

```
  
---|---  
###  grant_type `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.OAuth2PasswordRequestFormStrict.grant_type "Permanent link")
```
grant_type = grant_type

```

###  username `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.OAuth2PasswordRequestFormStrict.username "Permanent link")
```
username = username

```

###  password `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.OAuth2PasswordRequestFormStrict.password "Permanent link")
```
password = password

```

###  scopes `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.OAuth2PasswordRequestFormStrict.scopes "Permanent link")
```
scopes = split()

```

###  client_id `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.OAuth2PasswordRequestFormStrict.client_id "Permanent link")
```
client_id = client_id

```

###  client_secret `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.OAuth2PasswordRequestFormStrict.client_secret "Permanent link")
```
client_secret = client_secret

```

## OAuth2 Security Scopes in Dependencies[¶](https://fastapi.tiangolo.com/reference/security/#oauth2-security-scopes-in-dependencies "Permanent link")
##  fastapi.security.SecurityScopes [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.SecurityScopes "Permanent link")
```
SecurityScopes(scopes=None)

```

This is a special class that you can define in a parameter in a dependency to obtain the OAuth2 scopes required by all the dependencies in the same chain.
This way, multiple dependencies can have different scopes, even when used in the same _path operation_. And with this, you can access all the scopes required in all those dependencies in a single place.
Read more about it in the [FastAPI docs for OAuth2 scopes](https://fastapi.tiangolo.com/advanced/security/oauth2-scopes/).
PARAMETER | DESCRIPTION  
---|---  
`scopes` |  This will be filled by FastAPI. **TYPE:** `Optional[List[str]]` **DEFAULT:** `None`  
Source code in `fastapi/security/oauth2.py`
```
611
612
613
614
615
616
617
618
619
620
621
622
623
624
625
626
627
628
629
630
631
632
633
634
635
636
637
638
```
| ```
def__init__(
  self,
  scopes: Annotated[
    Optional[List[str]],
    Doc(
"""
      This will be filled by FastAPI.
      """
    ),
  ] = None,
):
  self.scopes: Annotated[
    List[str],
    Doc(
"""
      The list of all the scopes required by dependencies.
      """
    ),
  ] = scopes or []
  self.scope_str: Annotated[
    str,
    Doc(
"""
      All the scopes required by all the dependencies in a single string
      separated by spaces, as defined in the OAuth2 specification.
      """
    ),
  ] = " ".join(self.scopes)

```
  
---|---  
###  scopes `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.SecurityScopes.scopes "Permanent link")
```
scopes = scopes or []

```

The list of all the scopes required by dependencies.
###  scope_str `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.SecurityScopes.scope_str "Permanent link")
```
scope_str = join(scopes)

```

All the scopes required by all the dependencies in a single string separated by spaces, as defined in the OAuth2 specification.
## OpenID Connect[¶](https://fastapi.tiangolo.com/reference/security/#openid-connect "Permanent link")
##  fastapi.security.OpenIdConnect [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.OpenIdConnect "Permanent link")
```
OpenIdConnect(
  *,
  openIdConnectUrl,
  scheme_name=None,
  description=None,
  auto_error=True
)

```

Bases: `SecurityBase`
OpenID Connect authentication class. An instance of it would be used as a dependency.
PARAMETER | DESCRIPTION  
---|---  
`openIdConnectUrl` |  The OpenID Connect URL. **TYPE:** `str`  
`scheme_name` |  Security scheme name. It will be included in the generated OpenAPI (e.g. visible at `/docs`). **TYPE:** `Optional[str]` **DEFAULT:** `None`  
`description` |  Security scheme description. It will be included in the generated OpenAPI (e.g. visible at `/docs`). **TYPE:** `Optional[str]` **DEFAULT:** `None`  
`auto_error` |  By default, if no HTTP Authorization header is provided, required for OpenID Connect authentication, it will automatically cancel the request and send the client an error. If `auto_error` is set to `False`, when the HTTP Authorization header is not available, instead of erroring out, the dependency result will be `None`. This is useful when you want to have optional authentication. It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, with OpenID Connect or in a cookie). **TYPE:** `bool` **DEFAULT:** `True`  
Source code in `fastapi/security/open_id_connect_url.py`