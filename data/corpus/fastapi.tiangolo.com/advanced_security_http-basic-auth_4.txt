Title: HTTP Basic Authentication in FastAPI
URL: https://fastapi.tiangolo.com/advanced/security/http-basic-auth/
Summary: This documentation discusses implementing Simple HTTP Basic Authentication in FastAPI. It covers checking the username, mitigating timing attacks with `secrets.compare_digest()`, and how to return errors effectively.
---

Table of contents 
  * [ Simple HTTP Basic Auth  ](https://fastapi.tiangolo.com/advanced/security/http-basic-auth/#simple-http-basic-auth)
  * [ Check the username  ](https://fastapi.tiangolo.com/advanced/security/http-basic-auth/#check-the-username)
    * [ Timing Attacks  ](https://fastapi.tiangolo.com/advanced/security/http-basic-auth/#timing-attacks)
      * [ The time to answer helps the attackers  ](https://fastapi.tiangolo.com/advanced/security/http-basic-auth/#the-time-to-answer-helps-the-attackers)
      * [ A "professional" attack  ](https://fastapi.tiangolo.com/advanced/security/http-basic-auth/#a-professional-attack)
      * [ Fix it with `secrets.compare_digest()` ](https://fastapi.tiangolo.com/advanced/security/http-basic-auth/#fix-it-with-secretscompare_digest)
    * [ Return the error  ](https://fastapi.tiangolo.com/advanced/security/http-basic-auth/#return-the-error)


  1. [ FastAPI  ](https://fastapi.tiangolo.com/)
  2. [ Learn  ](https://fastapi.tiangolo.com/learn/)
  3. [ Advanced User Guide  ](https://fastapi.tiangolo.com/advanced/)
  4. [ Advanced Security  ](https://fastapi.tiangolo.com/advanced/security/)


# HTTP Basic Auth[Â¶](https://fastapi.tiangolo.com/advanced/security/http-basic-auth/#http-basic-auth "Permanent link")
For the simplest cases, you can use HTTP Basic Auth.
In HTTP Basic Auth, the application expects a header that contains a username and a password.
If it doesn't receive it, it returns an HTTP 401 "Unauthorized" error.
And returns a header `WWW-Authenticate` with a value of `Basic`, and an optional `realm` parameter.
That tells the browser to show the integrated prompt for a username and password.
Then, when you type that username and password, the browser sends them in the header automatically.
## Simple HTTP Basic Auth[Â¶](https://fastapi.tiangolo.com/advanced/security/http-basic-auth/#simple-http-basic-auth "Permanent link")
  * Import `HTTPBasic` and `HTTPBasicCredentials`.
  * Create a "`security` scheme" using `HTTPBasic`.
  * Use that `security` with a dependency in your _path operation_.
  * It returns an object of type `HTTPBasicCredentials`:
    * It contains the `username` and `password` sent.


[Python 3.9+](https://fastapi.tiangolo.com/advanced/security/http-basic-auth/#__tabbed_1_1)
```
fromtypingimport Annotated
fromfastapiimport Depends, FastAPI
fromfastapi.securityimport HTTPBasic, HTTPBasicCredentials
app = FastAPI()
security = HTTPBasic()
@app.get("/users/me")
defread_current_user(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):
  return {"username": credentials.username, "password": credentials.password}

```

ðŸ¤“ Other versions and variants
[Python 3.8+](https://fastapi.tiangolo.com/advanced/security/http-basic-auth/#__tabbed_2_1)[Python 3.8+ - non-Annotated](https://fastapi.tiangolo.com/advanced/security/http-basic-auth/#__tabbed_2_2)
```
fromfastapiimport Depends, FastAPI
fromfastapi.securityimport HTTPBasic, HTTPBasicCredentials
fromtyping_extensionsimport Annotated
app = FastAPI()
security = HTTPBasic()
@app.get("/users/me")
defread_current_user(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):
  return {"username": credentials.username, "password": credentials.password}

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromfastapiimport Depends, FastAPI
fromfastapi.securityimport HTTPBasic, HTTPBasicCredentials
app = FastAPI()
security = HTTPBasic()
@app.get("/users/me")
defread_current_user(credentials: HTTPBasicCredentials = Depends(security)):
  return {"username": credentials.username, "password": credentials.password}

```

When you try to open the URL for the first time (or click the "Execute" button in the docs) the browser will ask you for your username and password:
![](https://fastapi.tiangolo.com/img/tutorial/security/image12.png)
## Check the username[Â¶](https://fastapi.tiangolo.com/advanced/security/http-basic-auth/#check-the-username "Permanent link")
Here's a more complete example.
Use a dependency to check if the username and password are correct.
For this, use the Python standard module [`secrets`](https://docs.python.org/3/library/secrets.html) to check the username and password.
`secrets.compare_digest()` needs to take `bytes` or a `str` that only contains ASCII characters (the ones in English), this means it wouldn't work with characters like `Ã¡`, as in `SebastiÃ¡n`.
To handle that, we first convert the `username` and `password` to `bytes` encoding them with UTF-8.
Then we can use `secrets.compare_digest()` to ensure that `credentials.username` is `"stanleyjobson"`, and that `credentials.password` is `"swordfish"`.
[Python 3.9+](https://fastapi.tiangolo.com/advanced/security/http-basic-auth/#__tabbed_3_1)