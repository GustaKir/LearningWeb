Title: Creating and Documenting an API with FastAPI
URL: https://fastapi.tiangolo.com/
Summary: This section describes an API created with FastAPI that handles `GET` requests at the paths `/` and `/items/{item_id}`. The latter includes a path parameter `item_id` of type `int` and an optional query parameter `q`. It also introduces the automatic interactive API documentation available through Swagger UI and ReDoc.
---

```

You already created an API that:
  * Receives HTTP requests in the _paths_ `/` and `/items/{item_id}`.
  * Both _paths_ take `GET` _operations_ (also known as HTTP _methods_).
  * The _path_ `/items/{item_id}` has a _path parameter_ `item_id` that should be an `int`.
  * The _path_ `/items/{item_id}` has an optional `str` _query parameter_ `q`.


### Interactive API docs[¶](https://fastapi.tiangolo.com/#interactive-api-docs "Permanent link")
Now go to <http://127.0.0.1:8000/docs>.
You will see the automatic interactive API documentation (provided by [Swagger UI](https://github.com/swagger-api/swagger-ui)):
![Swagger UI](https://fastapi.tiangolo.com/img/index/index-01-swagger-ui-simple.png)
### Alternative API docs[¶](https://fastapi.tiangolo.com/#alternative-api-docs "Permanent link")
And now, go to <http://127.0.0.1:8000/redoc>.
You will see the alternative automatic documentation (provided by [ReDoc](https://github.com/Rebilly/ReDoc)):
![ReDoc](https://fastapi.tiangolo.com/img/index/index-02-redoc-simple.png)
## Example upgrade[¶](https://fastapi.tiangolo.com/#example-upgrade "Permanent link")
Now modify the file `main.py` to receive a body from a `PUT` request.
Declare the body using standard Python types, thanks to Pydantic.
```
fromtypingimport Union
fromfastapiimport FastAPI
frompydanticimport BaseModel
app = FastAPI()
classItem(BaseModel):
  name: str
  price: float
  is_offer: Union[bool, None] = None
@app.get("/")
defread_root():
  return {"Hello": "World"}
@app.get("/items/{item_id}")
defread_item(item_id: int, q: Union[str, None] = None):
  return {"item_id": item_id, "q": q}
@app.put("/items/{item_id}")
defupdate_item(item_id: int, item: Item):
  return {"item_name": item.name, "item_id": item_id}

```

The `fastapi dev` server should reload automatically.
### Interactive API docs upgrade[¶](https://fastapi.tiangolo.com/#interactive-api-docs-upgrade "Permanent link")
Now go to <http://127.0.0.1:8000/docs>.
  * The interactive API documentation will be automatically updated, including the new body:


![Swagger UI](https://fastapi.tiangolo.com/img/index/index-03-swagger-02.png)
  * Click on the button "Try it out", it allows you to fill the parameters and directly interact with the API:


![Swagger UI interaction](https://fastapi.tiangolo.com/img/index/index-04-swagger-03.png)
  * Then click on the "Execute" button, the user interface will communicate with your API, send the parameters, get the results and show them on the screen:


![Swagger UI interaction](https://fastapi.tiangolo.com/img/index/index-05-swagger-04.png)
### Alternative API docs upgrade[¶](https://fastapi.tiangolo.com/#alternative-api-docs-upgrade "Permanent link")
And now, go to <http://127.0.0.1:8000/redoc>.
  * The alternative documentation will also reflect the new query parameter and body:


![ReDoc](https://fastapi.tiangolo.com/img/index/index-06-redoc-02.png)
### Recap[¶](https://fastapi.tiangolo.com/#recap "Permanent link")
In summary, you declare **once** the types of parameters, body, etc. as function parameters.
You do that with standard modern Python types.
You don't have to learn a new syntax, the methods or classes of a specific library, etc.
Just standard **Python**.
For example, for an `int`:
```
item_id: int

```

or for a more complex `Item` model:
```
item: Item