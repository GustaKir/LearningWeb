Title: Query Parameter Models in FastAPI
URL: https://fastapi.tiangolo.com/tutorial/query-param-models/
Summary: This document provides an example of creating a FastAPI application that uses Pydantic models to define and validate query parameters. It demonstrates the setup of a FilterParams class with constraints on 'limit', 'offset', and 'order_by' fields, which can be accessed via a GET request to the '/items/' endpoint.
---

```
fromtypingimport Annotated, Literal
fromfastapiimport FastAPI, Query
frompydanticimport BaseModel, Field
app = FastAPI()
classFilterParams(BaseModel):
  model_config = {"extra": "forbid"}
  limit: int = Field(100, gt=0, le=100)
  offset: int = Field(0, ge=0)
  order_by: Literal["created_at", "updated_at"] = "created_at"
  tags: list[str] = []
@app.get("/items/")
async defread_items(filter_query: Annotated[FilterParams, Query()]):
  return filter_query

```

ðŸ¤“ Other versions and variants
[Python 3.9+](https://fastapi.tiangolo.com/tutorial/query-param-models/#__tabbed_4_1)[Python 3.8+](https://fastapi.tiangolo.com/tutorial/query-param-models/#__tabbed_4_2)[Python 3.10+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/query-param-models/#__tabbed_4_3)[Python 3.9+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/query-param-models/#__tabbed_4_4)[Python 3.8+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/query-param-models/#__tabbed_4_5)
```
fromfastapiimport FastAPI, Query
frompydanticimport BaseModel, Field
fromtyping_extensionsimport Annotated, Literal
app = FastAPI()
classFilterParams(BaseModel):
  model_config = {"extra": "forbid"}
  limit: int = Field(100, gt=0, le=100)
  offset: int = Field(0, ge=0)
  order_by: Literal["created_at", "updated_at"] = "created_at"
  tags: list[str] = []
@app.get("/items/")
async defread_items(filter_query: Annotated[FilterParams, Query()]):
  return filter_query

```

```
fromtypingimport List
fromfastapiimport FastAPI, Query
frompydanticimport BaseModel, Field
fromtyping_extensionsimport Annotated, Literal
app = FastAPI()
classFilterParams(BaseModel):
  model_config = {"extra": "forbid"}
  limit: int = Field(100, gt=0, le=100)
  offset: int = Field(0, ge=0)
  order_by: Literal["created_at", "updated_at"] = "created_at"
  tags: List[str] = []
@app.get("/items/")
async defread_items(filter_query: Annotated[FilterParams, Query()]):
  return filter_query

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromtypingimport Literal
fromfastapiimport FastAPI, Query
frompydanticimport BaseModel, Field
app = FastAPI()
classFilterParams(BaseModel):
  model_config = {"extra": "forbid"}
  limit: int = Field(100, gt=0, le=100)
  offset: int = Field(0, ge=0)
  order_by: Literal["created_at", "updated_at"] = "created_at"
  tags: list[str] = []
@app.get("/items/")
async defread_items(filter_query: FilterParams = Query()):
  return filter_query

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromfastapiimport FastAPI, Query
frompydanticimport BaseModel, Field
fromtyping_extensionsimport Literal
app = FastAPI()
classFilterParams(BaseModel):
  model_config = {"extra": "forbid"}
  limit: int = Field(100, gt=0, le=100)
  offset: int = Field(0, ge=0)
  order_by: Literal["created_at", "updated_at"] = "created_at"
  tags: list[str] = []
@app.get("/items/")
async defread_items(filter_query: FilterParams = Query()):
  return filter_query

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromtypingimport List
fromfastapiimport FastAPI, Query
frompydanticimport BaseModel, Field
fromtyping_extensionsimport Literal
app = FastAPI()
classFilterParams(BaseModel):
  model_config = {"extra": "forbid"}
  limit: int = Field(100, gt=0, le=100)
  offset: int = Field(0, ge=0)
  order_by: Literal["created_at", "updated_at"] = "created_at"
  tags: List[str] = []
@app.get("/items/")
async defread_items(filter_query: FilterParams = Query()):
  return filter_query

```

If a client tries to send some **extra** data in the **query parameters** , they will receive an **error** response.
For example, if the client tries to send a `tool` query parameter with a value of `plumbus`, like:
```
https://example.com/items/?limit=10&tool=plumbus

```

They will receive an **error** response telling them that the query parameter `tool` is not allowed:
```
{
"detail":[
{
"type":"extra_forbidden",
"loc":["query","tool"],
"msg":"Extra inputs are not permitted",
"input":"plumbus"
}
]
}