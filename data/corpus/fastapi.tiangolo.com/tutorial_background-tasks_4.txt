Title: Background Tasks in FastAPI
URL: https://fastapi.tiangolo.com/tutorial/background-tasks/
Summary: This section covers how to define background tasks in FastAPI that run after returning a response. Background tasks are useful for operations such as sending email notifications or processing data that do not require immediate completion before the client receives a response.
---

1. [ FastAPI  ](https://fastapi.tiangolo.com/)
  2. [ Learn  ](https://fastapi.tiangolo.com/learn/)
  3. [ Tutorial - User Guide  ](https://fastapi.tiangolo.com/tutorial/)


# Background Tasks[¶](https://fastapi.tiangolo.com/tutorial/background-tasks/#background-tasks "Permanent link")
You can define background tasks to be run _after_ returning a response.
This is useful for operations that need to happen after a request, but that the client doesn't really have to be waiting for the operation to complete before receiving the response.
This includes, for example:
  * Email notifications sent after performing an action:
    * As connecting to an email server and sending an email tends to be "slow" (several seconds), you can return the response right away and send the email notification in the background.
  * Processing data:
    * For example, let's say you receive a file that must go through a slow process, you can return a response of "Accepted" (HTTP 202) and process the file in the background.


## Using `BackgroundTasks`[¶](https://fastapi.tiangolo.com/tutorial/background-tasks/#using-backgroundtasks "Permanent link")
First, import `BackgroundTasks` and define a parameter in your _path operation function_ with a type declaration of `BackgroundTasks`:
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/background-tasks/#__tabbed_1_1)
```
fromfastapiimport BackgroundTasks, FastAPI
app = FastAPI()
defwrite_notification(email: str, message=""):
  with open("log.txt", mode="w") as email_file:
    content = f"notification for {email}: {message}"
    email_file.write(content)
@app.post("/send-notification/{email}")
async defsend_notification(email: str, background_tasks: BackgroundTasks):
  background_tasks.add_task(write_notification, email, message="some notification")
  return {"message": "Notification sent in the background"}

```

**FastAPI** will create the object of type `BackgroundTasks` for you and pass it as that parameter.
## Create a task function[¶](https://fastapi.tiangolo.com/tutorial/background-tasks/#create-a-task-function "Permanent link")
Create a function to be run as the background task.
It is just a standard function that can receive parameters.
It can be an `async def` or normal `def` function, **FastAPI** will know how to handle it correctly.
In this case, the task function will write to a file (simulating sending an email).
And as the write operation doesn't use `async` and `await`, we define the function with normal `def`:
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/background-tasks/#__tabbed_2_1)
```
fromfastapiimport BackgroundTasks, FastAPI
app = FastAPI()
defwrite_notification(email: str, message=""):
  with open("log.txt", mode="w") as email_file:
    content = f"notification for {email}: {message}"
    email_file.write(content)
@app.post("/send-notification/{email}")
async defsend_notification(email: str, background_tasks: BackgroundTasks):
  background_tasks.add_task(write_notification, email, message="some notification")
  return {"message": "Notification sent in the background"}

```

## Add the background task[¶](https://fastapi.tiangolo.com/tutorial/background-tasks/#add-the-background-task "Permanent link")
Inside of your _path operation function_ , pass your task function to the _background tasks_ object with the method `.add_task()`:
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/background-tasks/#__tabbed_3_1)
```
fromfastapiimport BackgroundTasks, FastAPI
app = FastAPI()
defwrite_notification(email: str, message=""):
  with open("log.txt", mode="w") as email_file:
    content = f"notification for {email}: {message}"
    email_file.write(content)
@app.post("/send-notification/{email}")
async defsend_notification(email: str, background_tasks: BackgroundTasks):
  background_tasks.add_task(write_notification, email, message="some notification")
  return {"message": "Notification sent in the background"}

```

`.add_task()` receives as arguments:
  * A task function to be run in the background (`write_notification`).
  * Any sequence of arguments that should be passed to the task function in order (`email`).
  * Any keyword arguments that should be passed to the task function (`message="some notification"`).


## Dependency Injection[¶](https://fastapi.tiangolo.com/tutorial/background-tasks/#dependency-injection "Permanent link")
Using `BackgroundTasks` also works with the dependency injection system, you can declare a parameter of type `BackgroundTasks` at multiple levels: in a _path operation function_ , in a dependency (dependable), in a sub-dependency, etc.
**FastAPI** knows what to do in each case and how to reuse the same object, so that all the background tasks are merged together and are run in the background afterwards:
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/background-tasks/#__tabbed_4_1)