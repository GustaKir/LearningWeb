Title: APIKeyHeader Initialization
URL: https://fastapi.tiangolo.com/reference/security/
Summary: This section describes the initialization parameters for the `APIKeyHeader` class in FastAPI, including options for naming, describing the security scheme, and handling errors when the header is not provided.
---

```
def__init__(
  self,
  *,
  name: Annotated[str, Doc("Header name.")],
  scheme_name: Annotated[
    Optional[str],
    Doc(
"""
      Security scheme name.
      It will be included in the generated OpenAPI (e.g. visible at `/docs`).
      """
    ),
  ] = None,
  description: Annotated[
    Optional[str],
    Doc(
"""
      Security scheme description.
      It will be included in the generated OpenAPI (e.g. visible at `/docs`).
      """
    ),
  ] = None,
  auto_error: Annotated[
    bool,
    Doc(
"""
      By default, if the header is not provided, `APIKeyHeader` will
      automatically cancel the request and send the client an error.
      If `auto_error` is set to `False`, when the header is not available,
      instead of erroring out, the dependency result will be `None`.
      This is useful when you want to have optional authentication.
      It is also useful when you want to have authentication that can be
      provided in one of multiple optional ways (for example, in a header or
      in an HTTP Bearer token).
      """
    ),
  ] = True,
):
  self.model: APIKey = APIKey(
    **{"in": APIKeyIn.header}, # type: ignore[arg-type]
    name=name,
    description=description,
  )
  self.scheme_name = scheme_name or self.__class__.__name__
  self.auto_error = auto_error

```
  
---|---  
###  model `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.APIKeyHeader.model "Permanent link")
```
model = APIKey[](https://fastapi.tiangolo.com/reference/openapi/models/#fastapi.openapi.models.APIKey "<code class="doc-symbol doc-symbol-heading doc-symbol-class"></code>      <span class="doc doc-object-name doc-class-name">APIKey</span> \(<code>fastapi.openapi.models.APIKey</code>\)")(
  **{"in": header[](https://fastapi.tiangolo.com/reference/openapi/models/#fastapi.openapi.models.APIKeyIn.header "<code class="doc-symbol doc-symbol-heading doc-symbol-attribute"></code>      <span class="doc doc-object-name doc-attribute-name">header</span>

 <span class="doc doc-labels">
   <small class="doc doc-label doc-label-class-attribute"><code>class-attribute</code></small>
   <small class="doc doc-label doc-label-instance-attribute"><code>instance-attribute</code></small>
 </span> \(<code>fastapi.openapi.models.APIKeyIn.header</code>\)")}, name=name, description=description
)

```

###  scheme_name `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.APIKeyHeader.scheme_name "Permanent link")
```
scheme_name = scheme_name or __name__

```

###  auto_error `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.APIKeyHeader.auto_error "Permanent link")
```
auto_error = auto_error

```

###  check_api_key `staticmethod` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.APIKeyHeader.check_api_key "Permanent link")
```
check_api_key(api_key, auto_error)

```

PARAMETER | DESCRIPTION  
---|---  
`api_key` |  **TYPE:** `Optional[str]`  
`auto_error` |  **TYPE:** `bool`  
Source code in `fastapi/security/api_key.py`
```
12
13
14
15
16
17
18
19
20
```
| ```
@staticmethod
defcheck_api_key(api_key: Optional[str], auto_error: bool) -> Optional[str]:
  if not api_key:
    if auto_error:
      raise HTTPException(
        status_code=HTTP_403_FORBIDDEN, detail="Not authenticated"
      )
    return None
  return api_key

```
  
---|---  
##  fastapi.security.APIKeyQuery [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.APIKeyQuery "Permanent link")
```
APIKeyQuery(
  *,
  name,
  scheme_name=None,
  description=None,
  auto_error=True
)

```

Bases: `APIKeyBase`
API key authentication using a query parameter.
This defines the name of the query parameter that should be provided in the request with the API key and integrates that into the OpenAPI documentation. It extracts the key value sent in the query parameter automatically and provides it as the dependency result. But it doesn't define how to send that API key to the client.
#### Usage[¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.APIKeyQuery--usage "Permanent link")
Create an instance object and use that object as the dependency in `Depends()`.
The dependency result will be a string containing the key value.
#### Example[¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.APIKeyQuery--example "Permanent link")
```
fromfastapiimport Depends, FastAPI
fromfastapi.securityimport APIKeyQuery
app = FastAPI()
query_scheme = APIKeyQuery(name="api_key")
@app.get("/items/")
async defread_items(api_key: str = Depends(query_scheme)):
  return {"api_key": api_key}