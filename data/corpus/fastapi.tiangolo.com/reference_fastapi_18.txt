Title: FastAPI Reference: Webhooks and State Management
URL: https://fastapi.tiangolo.com/reference/fastapi/
Summary: This section describes the `app.webhooks` attribute, which is an `APIRouter` used for documenting webhooks, and the `state` instance attribute, a persistent state object for the application inherited from Starlette. It also mentions that dependency overrides can be used in FastAPI.
---

```

The `app.webhooks` attribute is an `APIRouter` with the _path operations_ that will be used just for documentation of webhooks.
Read more about it in the [FastAPI docs for OpenAPI Webhooks](https://fastapi.tiangolo.com/advanced/openapi-webhooks/).
###  state `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/fastapi/#fastapi.FastAPI.state "Permanent link")
```
state = State()

```

A state object for the application. This is the same object for the entire application, it doesn't change from request to request.
You normally wouldn't use this in FastAPI, for most of the cases you would instead use FastAPI dependencies.
This is simply inherited from Starlette.
Read more about it in the [Starlette docs for Applications](https://www.starlette.io/applications/#storing-state-on-the-app-instance).
###  dependency_overrides `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/fastapi/#fastapi.FastAPI.dependency_overrides "Permanent link")
```
dependency_overrides = {}

```

A dictionary with overrides for the dependencies.
Each key is the original dependency callable, and the value is the actual dependency that should be called.
This is for testing, to replace expensive dependencies with testing versions.
Read more about it in the [FastAPI docs for Testing Dependencies with Overrides](https://fastapi.tiangolo.com/advanced/testing-dependencies/).
###  openapi [¶](https://fastapi.tiangolo.com/reference/fastapi/#fastapi.FastAPI.openapi "Permanent link")
```
openapi()

```

Generate the OpenAPI schema of the application. This is called by FastAPI internally.
The first time it is called it stores the result in the attribute `app.openapi_schema`, and next times it is called, it just returns that same result. To avoid the cost of generating the schema every time.
If you need to modify the generated OpenAPI schema, you could modify it.
Read more in the [FastAPI docs for OpenAPI](https://fastapi.tiangolo.com/how-to/extending-openapi/).
Source code in `fastapi/applications.py`
```
966
967
968
969
970
971
972
973
974
975
976
977
978
979
980
981
982
983
984
985
986
987
988
989
990
991
992
993
994
995
996
```
| ```
defopenapi(self) -> Dict[str, Any]:
"""
  Generate the OpenAPI schema of the application. This is called by FastAPI
  internally.
  The first time it is called it stores the result in the attribute
  `app.openapi_schema`, and next times it is called, it just returns that same
  result. To avoid the cost of generating the schema every time.
  If you need to modify the generated OpenAPI schema, you could modify it.
  Read more in the
  [FastAPI docs for OpenAPI](https://fastapi.tiangolo.com/how-to/extending-openapi/).
  """
  if not self.openapi_schema:
    self.openapi_schema = get_openapi(
      title=self.title,
      version=self.version,
      openapi_version=self.openapi_version,
      summary=self.summary,
      description=self.description,
      terms_of_service=self.terms_of_service,
      contact=self.contact,
      license_info=self.license_info,
      routes=self.routes,
      webhooks=self.webhooks.routes,
      tags=self.openapi_tags,
      servers=self.servers,
      separate_input_output_schemas=self.separate_input_output_schemas,
    )
  return self.openapi_schema

```
  
---|---  
###  websocket [¶](https://fastapi.tiangolo.com/reference/fastapi/#fastapi.FastAPI.websocket "Permanent link")
```
websocket(path, name=None, *, dependencies=None)

```

Decorate a WebSocket function.
Read more about it in the [FastAPI docs for WebSockets](https://fastapi.tiangolo.com/advanced/websockets/).
**Example**
```
fromfastapiimport FastAPI, WebSocket
app = FastAPI()
@app.websocket("/ws")
async defwebsocket_endpoint(websocket: WebSocket):
  await websocket.accept()
  while True:
    data = await websocket.receive_text()
    await websocket.send_text(f"Message text was: {data}")

```

PARAMETER | DESCRIPTION  
---|---  
`path` |  WebSocket path. **TYPE:** `str`  
`name` |  A name for the WebSocket. Only used internally. **TYPE:** `Optional[str]` **DEFAULT:** `None`  
`dependencies` |  A list of dependencies (using `Depends()`) to be used for this WebSocket. Read more about it in the [FastAPI docs for WebSockets](https://fastapi.tiangolo.com/advanced/websockets/). **TYPE:** `Optional[Sequence[Depends]]` **DEFAULT:** `None`  
Source code in `fastapi/applications.py`
```
1190
1191
1192
1193
1194
1195
1196
1197
1198
1199
1200
1201
1202
1203
1204
1205
1206
1207
1208
1209
1210
1211
1212
1213
1214
1215
1216
1217
1218
1219
1220
1221
1222
1223
1224
1225
1226
1227
1228
1229
1230
1231
1232
1233
1234
1235
1236
1237
1238
1239
1240
1241
1242
1243
1244
1245
1246
1247
1248
1249
1250
1251
1252
1253
```
|