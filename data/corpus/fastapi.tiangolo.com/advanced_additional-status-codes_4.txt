Title: Additional Status Codes in FastAPI
URL: https://fastapi.tiangolo.com/advanced/additional-status-codes/
Summary: FastAPI allows the use of additional status codes alongside the default ones by returning a `Response` directly. This is useful for operations such as updating items, where a successful operation may return a 200 status code, while the creation of new items can return a 201 status code.
---

# Additional Status Codes[Â¶](https://fastapi.tiangolo.com/advanced/additional-status-codes/#additional-status-codes "Permanent link")
By default, **FastAPI** will return the responses using a `JSONResponse`, putting the content you return from your _path operation_ inside of that `JSONResponse`.
It will use the default status code or the one you set in your _path operation_.
## Additional status codes[Â¶](https://fastapi.tiangolo.com/advanced/additional-status-codes/#additional-status-codes_1 "Permanent link")
If you want to return additional status codes apart from the main one, you can do that by returning a `Response` directly, like a `JSONResponse`, and set the additional status code directly.
For example, let's say that you want to have a _path operation_ that allows to update items, and returns HTTP status codes of 200 "OK" when successful.
But you also want it to accept new items. And when the items didn't exist before, it creates them, and returns an HTTP status code of 201 "Created".
To achieve that, import `JSONResponse`, and return your content there directly, setting the `status_code` that you want:
[Python 3.10+](https://fastapi.tiangolo.com/advanced/additional-status-codes/#__tabbed_1_1)
```
fromtypingimport Annotated
fromfastapiimport Body, FastAPI, status
fromfastapi.responsesimport JSONResponse
app = FastAPI()
items = {"foo": {"name": "Fighters", "size": 6}, "bar": {"name": "Tenders", "size": 3}}
@app.put("/items/{item_id}")
async defupsert_item(
  item_id: str,
  name: Annotated[str | None, Body()] = None,
  size: Annotated[int | None, Body()] = None,
):
  if item_id in items:
    item = items[item_id]
    item["name"] = name
    item["size"] = size
    return item
  else:
    item = {"name": name, "size": size}
    items[item_id] = item
    return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)

```

ðŸ¤“ Other versions and variants
[Python 3.9+](https://fastapi.tiangolo.com/advanced/additional-status-codes/#__tabbed_2_1)[Python 3.8+](https://fastapi.tiangolo.com/advanced/additional-status-codes/#__tabbed_2_2)[Python 3.10+ - non-Annotated](https://fastapi.tiangolo.com/advanced/additional-status-codes/#__tabbed_2_3)[Python 3.8+ - non-Annotated](https://fastapi.tiangolo.com/advanced/additional-status-codes/#__tabbed_2_4)
```
fromtypingimport Annotated, Union
fromfastapiimport Body, FastAPI, status
fromfastapi.responsesimport JSONResponse
app = FastAPI()
items = {"foo": {"name": "Fighters", "size": 6}, "bar": {"name": "Tenders", "size": 3}}
@app.put("/items/{item_id}")
async defupsert_item(
  item_id: str,
  name: Annotated[Union[str, None], Body()] = None,
  size: Annotated[Union[int, None], Body()] = None,
):
  if item_id in items:
    item = items[item_id]
    item["name"] = name
    item["size"] = size
    return item
  else:
    item = {"name": name, "size": size}
    items[item_id] = item
    return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)

```

```
fromtypingimport Union
fromfastapiimport Body, FastAPI, status
fromfastapi.responsesimport JSONResponse
fromtyping_extensionsimport Annotated
app = FastAPI()
items = {"foo": {"name": "Fighters", "size": 6}, "bar": {"name": "Tenders", "size": 3}}
@app.put("/items/{item_id}")
async defupsert_item(
  item_id: str,
  name: Annotated[Union[str, None], Body()] = None,
  size: Annotated[Union[int, None], Body()] = None,
):
  if item_id in items:
    item = items[item_id]
    item["name"] = name
    item["size"] = size
    return item
  else:
    item = {"name": name, "size": size}
    items[item_id] = item
    return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromfastapiimport Body, FastAPI, status
fromfastapi.responsesimport JSONResponse
app = FastAPI()
items = {"foo": {"name": "Fighters", "size": 6}, "bar": {"name": "Tenders", "size": 3}}
@app.put("/items/{item_id}")
async defupsert_item(
  item_id: str,
  name: str | None = Body(default=None),
  size: int | None = Body(default=None),
):
  if item_id in items:
    item = items[item_id]
    item["name"] = name
    item["size"] = size
    return item
  else:
    item = {"name": name, "size": size}
    items[item_id] = item
    return JSONResponse(status_code=status.HTTP_201_CREATED, content=item)

```

Tip
Prefer to use the `Annotated` version if possible.