Title: Defining a Function to Format Names in Python
URL: https://fastapi.tiangolo.com/python-types/
Summary: The document describes a simple Python function, `get_full_name`, that formats names by capitalizing the first letter of the provided `first_name` and `last_name`, and concatenating them with a space. It highlights the ease of defining such a function and the importance of remembering method names like `title()` for string manipulation.
---

```

The function does the following:
  * Takes a `first_name` and `last_name`.
  * Converts the first letter of each one to upper case with `title()`.
  * Concatenates them with a space in the middle.


[Python 3.8+](https://fastapi.tiangolo.com/python-types/#__tabbed_2_1)
```
defget_full_name(first_name, last_name):
  full_name = first_name.title() + " " + last_name.title()
  return full_name
print(get_full_name("john", "doe"))

```

### Edit it[¶](https://fastapi.tiangolo.com/python-types/#edit-it "Permanent link")
It's a very simple program.
But now imagine that you were writing it from scratch.
At some point you would have started the definition of the function, you had the parameters ready...
But then you have to call "that method that converts the first letter to upper case".
Was it `upper`? Was it `uppercase`? `first_uppercase`? `capitalize`?
Then, you try with the old programmer's friend, editor autocompletion.
You type the first parameter of the function, `first_name`, then a dot (`.`) and then hit `Ctrl+Space` to trigger the completion.
But, sadly, you get nothing useful:
![](https://fastapi.tiangolo.com/img/python-types/image01.png)
### Add types[¶](https://fastapi.tiangolo.com/python-types/#add-types "Permanent link")
Let's modify a single line from the previous version.
We will change exactly this fragment, the parameters of the function, from:
```
  first_name, last_name

```

to:
```
  first_name: str, last_name: str

```

That's it.
Those are the "type hints":
[Python 3.8+](https://fastapi.tiangolo.com/python-types/#__tabbed_3_1)
```
defget_full_name(first_name: str, last_name: str):
  full_name = first_name.title() + " " + last_name.title()
  return full_name
print(get_full_name("john", "doe"))

```

That is not the same as declaring default values like would be with:
```
  first_name="john", last_name="doe"

```

It's a different thing.
We are using colons (`:`), not equals (`=`).
And adding type hints normally doesn't change what happens from what would happen without them.
But now, imagine you are again in the middle of creating that function, but with type hints.
At the same point, you try to trigger the autocomplete with `Ctrl+Space` and you see:
![](https://fastapi.tiangolo.com/img/python-types/image02.png)
With that, you can scroll, seeing the options, until you find the one that "rings a bell":
![](https://fastapi.tiangolo.com/img/python-types/image03.png)
## More motivation[¶](https://fastapi.tiangolo.com/python-types/#more-motivation "Permanent link")
Check this function, it already has type hints:
[Python 3.8+](https://fastapi.tiangolo.com/python-types/#__tabbed_4_1)
```
defget_name_with_age(name: str, age: int):
  name_with_age = name + " is this old: " + age
  return name_with_age

```

Because the editor knows the types of the variables, you don't only get completion, you also get error checks:
![](https://fastapi.tiangolo.com/img/python-types/image04.png)
Now you know that you have to fix it, convert `age` to a string with `str(age)`:
[Python 3.8+](https://fastapi.tiangolo.com/python-types/#__tabbed_5_1)
```
defget_name_with_age(name: str, age: int):
  name_with_age = name + " is this old: " + str(age)
  return name_with_age

```

## Declaring types[¶](https://fastapi.tiangolo.com/python-types/#declaring-types "Permanent link")
You just saw the main place to declare type hints. As function parameters.
This is also the main place you would use them with **FastAPI**.
### Simple types[¶](https://fastapi.tiangolo.com/python-types/#simple-types "Permanent link")
You can declare all the standard Python types, not only `str`.
You can use, for example:
  * `int`
  * `float`
  * `bool`
  * `bytes`


[Python 3.8+](https://fastapi.tiangolo.com/python-types/#__tabbed_6_1)
```
defget_items(item_a: str, item_b: int, item_c: float, item_d: bool, item_e: bytes):
  return item_a, item_b, item_c, item_d, item_d, item_e