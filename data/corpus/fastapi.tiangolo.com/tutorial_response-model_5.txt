Title: Response Model - Return Type in FastAPI
URL: https://fastapi.tiangolo.com/tutorial/response-model/
Summary: This section explains how to declare response types in FastAPI by using type annotations, similar to input parameters. It demonstrates the use of Pydantic models to define response structures and provides example code for a FastAPI application, showing how to create and read items with defined schemas.
---

# Response Model - Return Type[Â¶](https://fastapi.tiangolo.com/tutorial/response-model/#response-model-return-type "Permanent link")
You can declare the type used for the response by annotating the _path operation function_ **return type**.
You can use **type annotations** the same way you would for input data in function **parameters** , you can use Pydantic models, lists, dictionaries, scalar values like integers, booleans, etc.
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/response-model/#__tabbed_1_1)
```
fromfastapiimport FastAPI
frompydanticimport BaseModel
app = FastAPI()
classItem(BaseModel):
  name: str
  description: str | None = None
  price: float
  tax: float | None = None
  tags: list[str] = []
@app.post("/items/")
async defcreate_item(item: Item) -> Item:
  return item
@app.get("/items/")
async defread_items() -> list[Item]:
  return [
    Item(name="Portal Gun", price=42.0),
    Item(name="Plumbus", price=32.0),
  ]

```

ðŸ¤“ Other versions and variants
[Python 3.9+](https://fastapi.tiangolo.com/tutorial/response-model/#__tabbed_2_1)[Python 3.8+](https://fastapi.tiangolo.com/tutorial/response-model/#__tabbed_2_2)
```
fromtypingimport Union
fromfastapiimport FastAPI
frompydanticimport BaseModel
app = FastAPI()
classItem(BaseModel):
  name: str
  description: Union[str, None] = None
  price: float
  tax: Union[float, None] = None
  tags: list[str] = []
@app.post("/items/")
async defcreate_item(item: Item) -> Item:
  return item
@app.get("/items/")
async defread_items() -> list[Item]:
  return [
    Item(name="Portal Gun", price=42.0),
    Item(name="Plumbus", price=32.0),
  ]

```

```
fromtypingimport List, Union
fromfastapiimport FastAPI
frompydanticimport BaseModel
app = FastAPI()
classItem(BaseModel):
  name: str
  description: Union[str, None] = None
  price: float
  tax: Union[float, None] = None
  tags: List[str] = []
@app.post("/items/")
async defcreate_item(item: Item) -> Item:
  return item
@app.get("/items/")
async defread_items() -> List[Item]:
  return [
    Item(name="Portal Gun", price=42.0),
    Item(name="Plumbus", price=32.0),
  ]

```

FastAPI will use this return type to:
  * **Validate** the returned data.
    * If the data is invalid (e.g. you are missing a field), it means that _your_ app code is broken, not returning what it should, and it will return a server error instead of returning incorrect data. This way you and your clients can be certain that they will receive the data and the data shape expected.
  * Add a **JSON Schema** for the response, in the OpenAPI _path operation_.
    * This will be used by the **automatic docs**.
    * It will also be used by automatic client code generation tools.


But most importantly:
  * It will **limit and filter** the output data to what is defined in the return type.
    * This is particularly important for **security** , we'll see more of that below.


## `response_model` Parameter[Â¶](https://fastapi.tiangolo.com/tutorial/response-model/#response_model-parameter "Permanent link")
There are some cases where you need or want to return some data that is not exactly what the type declares.
For example, you could want to **return a dictionary** or a database object, but **declare it as a Pydantic model**. This way the Pydantic model would do all the data documentation, validation, etc. for the object that you returned (e.g. a dictionary or database object).
If you added the return type annotation, tools and editors would complain with a (correct) error telling you that your function is returning a type (e.g. a dict) that is different from what you declared (e.g. a Pydantic model).
In those cases, you can use the _path operation decorator_ parameter `response_model` instead of the return type.
You can use the `response_model` parameter in any of the _path operations_ :
  * `@app.get()`
  * `@app.post()`
  * `@app.put()`
  * `@app.delete()`
  * etc.


[Python 3.10+](https://fastapi.tiangolo.com/tutorial/response-model/#__tabbed_3_1)
```
fromtypingimport Any
fromfastapiimport FastAPI
frompydanticimport BaseModel
app = FastAPI()
classItem(BaseModel):
  name: str
  description: str | None = None
  price: float
  tax: float | None = None
  tags: list[str] = []
@app.post("/items/", response_model=Item)
async defcreate_item(item: Item) -> Any:
  return item
@app.get("/items/", response_model=list[Item])
async defread_items() -> Any:
  return [
    {"name": "Portal Gun", "price": 42.0},
    {"name": "Plumbus", "price": 32.0},
  ]

```

ðŸ¤“ Other versions and variants
[Python 3.9+](https://fastapi.tiangolo.com/tutorial/response-model/#__tabbed_4_1)[Python 3.8+](https://fastapi.tiangolo.com/tutorial/response-model/#__tabbed_4_2)