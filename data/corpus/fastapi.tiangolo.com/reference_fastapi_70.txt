Title: FastAPI Reference - OpenAPI Callbacks and Metadata
URL: https://fastapi.tiangolo.com/reference/fastapi/
Summary: This section covers internal use elements such as callbacks for OpenAPI documentation in FastAPI. It explains how to add path operations for callbacks, includes options for extra metadata in the OpenAPI schema, and provides links to relevant FastAPI documentation for further reading.
---

Only used internally.
      """
    ),
  ] = None,
  callbacks: Annotated[
    Optional[List[BaseRoute]],
    Doc(
"""
      List of *path operations* that will be used as OpenAPI callbacks.
      This is only for OpenAPI documentation, the callbacks won't be used
      directly.
      It will be added to the generated OpenAPI (e.g. visible at `/docs`).
      Read more about it in the
      [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).
      """
    ),
  ] = None,
  openapi_extra: Annotated[
    Optional[Dict[str, Any]],
    Doc(
"""
      Extra metadata to be included in the OpenAPI schema for this *path
      operation*.
      Read more about it in the
      [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).
      """
    ),
  ] = None,
  generate_unique_id_function: Annotated[
    Callable[[routing.APIRoute], str],
    Doc(
"""
      Customize the function used to generate unique IDs for the *path
      operations* shown in the generated OpenAPI.
      This is particularly useful when automatically generating clients or
      SDKs for your API.
      Read more about it in the
      [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).
      """
    ),
  ] = Default(generate_unique_id),
) -> Callable[[DecoratedCallable], DecoratedCallable]:
"""
  Add a *path operation* using an HTTP TRACE operation.
  ## Example
  ```python
  from fastapi import FastAPI
  app = FastAPI()
  @app.put("/items/{item_id}")
  def trace_item(item_id: str):
    return None
  ```
  """
  return self.router.trace(
    path,
    response_model=response_model,
    status_code=status_code,
    tags=tags,
    dependencies=dependencies,
    summary=summary,
    description=description,
    response_description=response_description,
    responses=responses,
    deprecated=deprecated,
    operation_id=operation_id,
    response_model_include=response_model_include,
    response_model_exclude=response_model_exclude,
    response_model_by_alias=response_model_by_alias,
    response_model_exclude_unset=response_model_exclude_unset,
    response_model_exclude_defaults=response_model_exclude_defaults,
    response_model_exclude_none=response_model_exclude_none,
    include_in_schema=include_in_schema,
    response_class=response_class,
    name=name,
    callbacks=callbacks,
    openapi_extra=openapi_extra,
    generate_unique_id_function=generate_unique_id_function,
  )

```
  
---|---  
###  on_event [¶](https://fastapi.tiangolo.com/reference/fastapi/#fastapi.FastAPI.on_event "Permanent link")
```
on_event(event_type)

```

Add an event handler for the application.
`on_event` is deprecated, use `lifespan` event handlers instead.
Read more about it in the [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/#alternative-events-deprecated).
PARAMETER | DESCRIPTION  
---|---  
`event_type` |  The type of event. `startup` or `shutdown`. **TYPE:** `str`  
Source code in `fastapi/applications.py`
```
4468
4469
4470
4471
4472
4473
4474
4475
4476
4477
4478
4479
4480
4481
4482
4483
4484
4485
4486
4487
4488
4489
4490
4491
4492
4493
4494
4495
```
| ```
@deprecated(
"""
  on_event is deprecated, use lifespan event handlers instead.
  Read more about it in the
  [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
  """
)
defon_event(
  self,
  event_type: Annotated[
    str,
    Doc(
"""
      The type of event. `startup` or `shutdown`.
      """
    ),
  ],
) -> Callable[[DecoratedCallable], DecoratedCallable]:
"""
  Add an event handler for the application.
  `on_event` is deprecated, use `lifespan` event handlers instead.
  Read more about it in the
  [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/#alternative-events-deprecated).
  """
  return self.router.on_event(event_type)

```
  
---|---  
###  middleware [¶](https://fastapi.tiangolo.com/reference/fastapi/#fastapi.FastAPI.middleware "Permanent link")
```
middleware(middleware_type)

```

Add a middleware to the application.
Read more about it in the [FastAPI docs for Middleware](https://fastapi.tiangolo.com/tutorial/middleware/).
##### Example[¶](https://fastapi.tiangolo.com/reference/fastapi/#fastapi.FastAPI.middleware--example "Permanent link")
```
importtime
fromfastapiimport FastAPI, Request
app = FastAPI()
@app.middleware("http")
async defadd_process_time_header(request: Request, call_next):
  start_time = time.time()
  response = await call_next(request)
  process_time = time.time() - start_time
  response.headers["X-Process-Time"] = str(process_time)
  return response

```

PARAMETER | DESCRIPTION  
---|---  
`middleware_type` |  The type of middleware. Currently only supports `http`. **TYPE:** `str`  
Source code in `fastapi/applications.py`