Title: Using Multiple Examples in FastAPI Documentation
URL: https://fastapi.tiangolo.com/tutorial/schema-extra-example/
Summary: This section explains how to include multiple examples in the FastAPI documentation UI. It provides a code snippet demonstrating the creation of a FastAPI application with a model that utilizes the Body function to present multiple examples for request bodies.
---

```

### Example in the docs UI[Â¶](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#example-in-the-docs-ui "Permanent link")
With any of the methods above it would look like this in the `/docs`:
![](https://fastapi.tiangolo.com/img/tutorial/body-fields/image01.png)
### `Body` with multiple `examples`[Â¶](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#body-with-multiple-examples "Permanent link")
You can of course also pass multiple `examples`:
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#__tabbed_11_1)
```
fromtypingimport Annotated
fromfastapiimport Body, FastAPI
frompydanticimport BaseModel
app = FastAPI()
classItem(BaseModel):
  name: str
  description: str | None = None
  price: float
  tax: float | None = None
@app.put("/items/{item_id}")
async defupdate_item(
  *,
  item_id: int,
  item: Annotated[
    Item,
    Body(
      examples=[
        {
          "name": "Foo",
          "description": "A very nice Item",
          "price": 35.4,
          "tax": 3.2,
        },
        {
          "name": "Bar",
          "price": "35.4",
        },
        {
          "name": "Baz",
          "price": "thirty five point four",
        },
      ],
    ),
  ],
):
  results = {"item_id": item_id, "item": item}
  return results

```

ðŸ¤“ Other versions and variants
[Python 3.9+](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#__tabbed_12_1)[Python 3.8+](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#__tabbed_12_2)[Python 3.10+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#__tabbed_12_3)[Python 3.8+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#__tabbed_12_4)
```
fromtypingimport Annotated, Union
fromfastapiimport Body, FastAPI
frompydanticimport BaseModel
app = FastAPI()
classItem(BaseModel):
  name: str
  description: Union[str, None] = None
  price: float
  tax: Union[float, None] = None
@app.put("/items/{item_id}")
async defupdate_item(
  *,
  item_id: int,
  item: Annotated[
    Item,
    Body(
      examples=[
        {
          "name": "Foo",
          "description": "A very nice Item",
          "price": 35.4,
          "tax": 3.2,
        },
        {
          "name": "Bar",
          "price": "35.4",
        },
        {
          "name": "Baz",
          "price": "thirty five point four",
        },
      ],
    ),
  ],
):
  results = {"item_id": item_id, "item": item}
  return results

```

```
fromtypingimport Union
fromfastapiimport Body, FastAPI
frompydanticimport BaseModel
fromtyping_extensionsimport Annotated
app = FastAPI()
classItem(BaseModel):
  name: str
  description: Union[str, None] = None
  price: float
  tax: Union[float, None] = None
@app.put("/items/{item_id}")
async defupdate_item(
  *,
  item_id: int,
  item: Annotated[
    Item,
    Body(
      examples=[
        {
          "name": "Foo",
          "description": "A very nice Item",
          "price": 35.4,
          "tax": 3.2,
        },
        {
          "name": "Bar",
          "price": "35.4",
        },
        {
          "name": "Baz",
          "price": "thirty five point four",
        },
      ],
    ),
  ],
):
  results = {"item_id": item_id, "item": item}
  return results

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromfastapiimport Body, FastAPI
frompydanticimport BaseModel
app = FastAPI()
classItem(BaseModel):
  name: str
  description: str | None = None
  price: float
  tax: float | None = None
@app.put("/items/{item_id}")
async defupdate_item(
  *,
  item_id: int,
  item: Item = Body(
    examples=[
      {
        "name": "Foo",
        "description": "A very nice Item",
        "price": 35.4,
        "tax": 3.2,
      },
      {
        "name": "Bar",
        "price": "35.4",
      },
      {
        "name": "Baz",
        "price": "thirty five point four",
      },
    ],
  ),
):
  results = {"item_id": item_id, "item": item}
  return results

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromtypingimport Union
fromfastapiimport Body, FastAPI
frompydanticimport BaseModel
app = FastAPI()
classItem(BaseModel):
  name: str
  description: Union[str, None] = None
  price: float
  tax: Union[float, None] = None
@app.put("/items/{item_id}")
async defupdate_item(
  *,
  item_id: int,
  item: Item = Body(
    examples=[
      {
        "name": "Foo",
        "description": "A very nice Item",
        "price": 35.4,
        "tax": 3.2,
      },
      {
        "name": "Bar",
        "price": "35.4",
      },
      {
        "name": "Baz",
        "price": "thirty five point four",
      },
    ],
  ),
):
  results = {"item_id": item_id, "item": item}
  return results