Title: Response Model Customization in FastAPI
URL: https://fastapi.tiangolo.com/tutorial/response-model/
Summary: FastAPI, through Pydantic, distinguishes explicitly set values from defaults, ensuring they appear in JSON responses. Additionally, the `response_model_include` and `response_model_exclude` parameters allow for selective inclusion or exclusion of attributes in the response, providing a simpler way to customize output based on a single Pydantic model.
---

```

FastAPI is smart enough (actually, Pydantic is smart enough) to realize that, even though `description`, `tax`, and `tags` have the same values as the defaults, they were set explicitly (instead of taken from the defaults).
So, they will be included in the JSON response.
Tip
Notice that the default values can be anything, not only `None`.
They can be a list (`[]`), a `float` of `10.5`, etc.
### `response_model_include` and `response_model_exclude`[Â¶](https://fastapi.tiangolo.com/tutorial/response-model/#response_model_include-and-response_model_exclude "Permanent link")
You can also use the _path operation decorator_ parameters `response_model_include` and `response_model_exclude`.
They take a `set` of `str` with the name of the attributes to include (omitting the rest) or to exclude (including the rest).
This can be used as a quick shortcut if you have only one Pydantic model and want to remove some data from the output.
Tip
But it is still recommended to use the ideas above, using multiple classes, instead of these parameters.
This is because the JSON Schema generated in your app's OpenAPI (and the docs) will still be the one for the complete model, even if you use `response_model_include` or `response_model_exclude` to omit some attributes.
This also applies to `response_model_by_alias` that works similarly.
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/response-model/#__tabbed_27_1)
```
fromfastapiimport FastAPI
frompydanticimport BaseModel
app = FastAPI()
classItem(BaseModel):
  name: str
  description: str | None = None
  price: float
  tax: float = 10.5
items = {
  "foo": {"name": "Foo", "price": 50.2},
  "bar": {"name": "Bar", "description": "The Bar fighters", "price": 62, "tax": 20.2},
  "baz": {
    "name": "Baz",
    "description": "There goes my baz",
    "price": 50.2,
    "tax": 10.5,
  },
}
@app.get(
  "/items/{item_id}/name",
  response_model=Item,
  response_model_include={"name", "description"},
)
async defread_item_name(item_id: str):
  return items[item_id]
@app.get("/items/{item_id}/public", response_model=Item, response_model_exclude={"tax"})
async defread_item_public_data(item_id: str):
  return items[item_id]

```

ðŸ¤“ Other versions and variants
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/response-model/#__tabbed_28_1)
```
fromtypingimport Union
fromfastapiimport FastAPI
frompydanticimport BaseModel
app = FastAPI()
classItem(BaseModel):
  name: str
  description: Union[str, None] = None
  price: float
  tax: float = 10.5
items = {
  "foo": {"name": "Foo", "price": 50.2},
  "bar": {"name": "Bar", "description": "The Bar fighters", "price": 62, "tax": 20.2},
  "baz": {
    "name": "Baz",
    "description": "There goes my baz",
    "price": 50.2,
    "tax": 10.5,
  },
}
@app.get(
  "/items/{item_id}/name",
  response_model=Item,
  response_model_include={"name", "description"},
)
async defread_item_name(item_id: str):
  return items[item_id]
@app.get("/items/{item_id}/public", response_model=Item, response_model_exclude={"tax"})
async defread_item_public_data(item_id: str):
  return items[item_id]

```

Tip
The syntax `{"name", "description"}` creates a `set` with those two values.
It is equivalent to `set(["name", "description"])`.
#### Using `list`s instead of `set`s[Â¶](https://fastapi.tiangolo.com/tutorial/response-model/#using-lists-instead-of-sets "Permanent link")
If you forget to use a `set` and use a `list` or `tuple` instead, FastAPI will still convert it to a `set` and it will work correctly:
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/response-model/#__tabbed_29_1)
```
fromfastapiimport FastAPI
frompydanticimport BaseModel
app = FastAPI()
classItem(BaseModel):
  name: str
  description: str | None = None
  price: float
  tax: float = 10.5
items = {
  "foo": {"name": "Foo", "price": 50.2},
  "bar": {"name": "Bar", "description": "The Bar fighters", "price": 62, "tax": 20.2},
  "baz": {
    "name": "Baz",
    "description": "There goes my baz",
    "price": 50.2,
    "tax": 10.5,
  },
}
@app.get(
  "/items/{item_id}/name",
  response_model=Item,
  response_model_include=["name", "description"],
)
async defread_item_name(item_id: str):
  return items[item_id]
@app.get("/items/{item_id}/public", response_model=Item, response_model_exclude=["tax"])
async defread_item_public_data(item_id: str):
  return items[item_id]

```

ðŸ¤“ Other versions and variants
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/response-model/#__tabbed_30_1)