Title: Advanced Dependencies in FastAPI
URL: https://fastapi.tiangolo.com/advanced/advanced-dependencies/
Summary: This section discusses the implementation of advanced dependencies in FastAPI, featuring a custom dependency class that checks for fixed content in a query parameter. An example is provided using FastAPI's Depends function to integrate the checker into an endpoint.
---

```
fromfastapiimport Depends, FastAPI
app = FastAPI()
classFixedContentQueryChecker:
  def__init__(self, fixed_content: str):
    self.fixed_content = fixed_content
  def__call__(self, q: str = ""):
    if q:
      return self.fixed_content in q
    return False
checker = FixedContentQueryChecker("bar")
@app.get("/query-checker/")
async defread_query_check(fixed_content_included: bool = Depends(checker)):
  return {"fixed_content_in_query": fixed_content_included}

```

Tip
All this might seem contrived. And it might not be very clear how is it useful yet.
These examples are intentionally simple, but show how it all works.
In the chapters about security, there are utility functions that are implemented in this same way.
If you understood all this, you already know how those utility tools for security work underneath.
Was this page helpful? 
Thanks for your feedback! 
Thanks for your feedback! 
Back to top  [ Previous  Response - Change Status Code  ](https://fastapi.tiangolo.com/advanced/response-change-status-code/) [ Next  Advanced Security  ](https://fastapi.tiangolo.com/advanced/security/)
The FastAPI trademark is owned by [@tiangolo](https://tiangolo.com) and is registered in the US and across other regions 
Made with [ Material for MkDocs ](https://squidfunk.github.io/mkdocs-material/)
[ ](https://github.com/fastapi/fastapi "github.com") [ ](https://discord.gg/VQjSZaeJmf "discord.gg") [ ](https://twitter.com/fastapi "twitter.com") [ ](https://www.linkedin.com/in/tiangolo "www.linkedin.com") [ ](https://dev.to/tiangolo "dev.to") [ ](https://medium.com/@tiangolo "medium.com") [ ](https://tiangolo.com "tiangolo.com")