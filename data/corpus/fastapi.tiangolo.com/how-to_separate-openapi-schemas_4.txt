Title: Separating OpenAPI Schemas in FastAPI
URL: https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/
Summary: This document discusses how to manage OpenAPI schemas in FastAPI by using separate Pydantic models for input and output data. It outlines key concepts including creating input models, defining their representation in documentation, and managing output models for response data.
---

Table of contents 
  * [ Pydantic Models for Input and Output  ](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#pydantic-models-for-input-and-output)
    * [ Model for Input  ](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#model-for-input)
    * [ Input Model in Docs  ](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#input-model-in-docs)
    * [ Model for Output  ](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#model-for-output)
    * [ Model for Output Response Data  ](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#model-for-output-response-data)
    * [ Model for Output in Docs  ](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#model-for-output-in-docs)
    * [ Model for Input and Output in Docs  ](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#model-for-input-and-output-in-docs)
  * [ Do not Separate Schemas  ](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#do-not-separate-schemas)
    * [ Same Schema for Input and Output Models in Docs  ](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#same-schema-for-input-and-output-models-in-docs)


  1. [ FastAPI  ](https://fastapi.tiangolo.com/)
  2. [ Learn  ](https://fastapi.tiangolo.com/learn/)
  3. [ How To - Recipes  ](https://fastapi.tiangolo.com/how-to/)


# Separate OpenAPI Schemas for Input and Output or Not[Â¶](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#separate-openapi-schemas-for-input-and-output-or-not "Permanent link")
When using **Pydantic v2** , the generated OpenAPI is a bit more exact and **correct** than before. ðŸ˜Ž
In fact, in some cases, it will even have **two JSON Schemas** in OpenAPI for the same Pydantic model, for input and output, depending on if they have **default values**.
Let's see how that works and how to change it if you need to do that.
## Pydantic Models for Input and Output[Â¶](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#pydantic-models-for-input-and-output "Permanent link")
Let's say you have a Pydantic model with default values, like this one:
[Python 3.10+](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#__tabbed_1_1)
```
fromfastapiimport FastAPI
frompydanticimport BaseModel
classItem(BaseModel):
  name: str
  description: str | None = None
# Code below omitted ðŸ‘‡

```

ðŸ‘€ Full file preview
[Python 3.10+](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#__tabbed_2_1)
```
fromfastapiimport FastAPI
frompydanticimport BaseModel
classItem(BaseModel):
  name: str
  description: str | None = None
app = FastAPI()
@app.post("/items/")
defcreate_item(item: Item):
  return item
@app.get("/items/")
defread_items() -> list[Item]:
  return [
    Item(
      name="Portal Gun",
      description="Device to travel through the multi-rick-verse",
    ),
    Item(name="Plumbus"),
  ]

```

ðŸ¤“ Other versions and variants
[Python 3.9+](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#__tabbed_3_1)[Python 3.8+](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#__tabbed_3_2)
```
fromtypingimport Optional
fromfastapiimport FastAPI
frompydanticimport BaseModel
classItem(BaseModel):
  name: str
  description: Optional[str] = None
app = FastAPI()
@app.post("/items/")
defcreate_item(item: Item):
  return item
@app.get("/items/")
defread_items() -> list[Item]:
  return [
    Item(
      name="Portal Gun",
      description="Device to travel through the multi-rick-verse",
    ),
    Item(name="Plumbus"),
  ]

```

```
fromtypingimport List, Union
fromfastapiimport FastAPI
frompydanticimport BaseModel
classItem(BaseModel):
  name: str
  description: Union[str, None] = None
app = FastAPI()
@app.post("/items/")
defcreate_item(item: Item):
  return item
@app.get("/items/")
defread_items() -> List[Item]:
  return [
    Item(
      name="Portal Gun",
      description="Device to travel through the multi-rick-verse",
    ),
    Item(name="Plumbus"),
  ]

```

### Model for Input[Â¶](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#model-for-input "Permanent link")
If you use this model as an input like here:
[Python 3.10+](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#__tabbed_4_1)
```
fromfastapiimport FastAPI
frompydanticimport BaseModel
classItem(BaseModel):
  name: str
  description: str | None = None
app = FastAPI()
@app.post("/items/")
defcreate_item(item: Item):
  return item
# Code below omitted ðŸ‘‡

```

ðŸ‘€ Full file preview
[Python 3.10+](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#__tabbed_5_1)