Title: Simple OAuth2 Security in FastAPI
URL: https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/
Summary: This section discusses the importance of the `WWW-Authenticate` header in HTTP status code 401 responses for bearer tokens, highlighting its compliance with specifications and potential utility for tools. It encourages users to interact with the FastAPI docs to test authentication using given credentials.
---

```

Info
The additional header `WWW-Authenticate` with value `Bearer` we are returning here is also part of the spec.
Any HTTP (error) status code 401 "UNAUTHORIZED" is supposed to also return a `WWW-Authenticate` header.
In the case of bearer tokens (our case), the value of that header should be `Bearer`.
You can actually skip that extra header and it would still work.
But it's provided here to be compliant with the specifications.
Also, there might be tools that expect and use it (now or in the future) and that might be useful for you or your users, now or in the future.
That's the benefit of standards...
## See it in action[¶](https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/#see-it-in-action "Permanent link")
Open the interactive docs: <http://127.0.0.1:8000/docs>.
### Authenticate[¶](https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/#authenticate "Permanent link")
Click the "Authorize" button.
Use the credentials:
User: `johndoe`
Password: `secret`
![](https://fastapi.tiangolo.com/img/tutorial/security/image04.png)
After authenticating in the system, you will see it like:
![](https://fastapi.tiangolo.com/img/tutorial/security/image05.png)
### Get your own user data[¶](https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/#get-your-own-user-data "Permanent link")
Now use the operation `GET` with the path `/users/me`.
You will get your user's data, like:
```
{
"username":"johndoe",
"email":"johndoe@example.com",
"full_name":"John Doe",
"disabled":false,
"hashed_password":"fakehashedsecret"
}

```

![](https://fastapi.tiangolo.com/img/tutorial/security/image06.png)
If you click the lock icon and logout, and then try the same operation again, you will get an HTTP 401 error of:
```
{
"detail":"Not authenticated"
}

```

### Inactive user[¶](https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/#inactive-user "Permanent link")
Now try with an inactive user, authenticate with:
User: `alice`
Password: `secret2`
And try to use the operation `GET` with the path `/users/me`.
You will get an "Inactive user" error, like:
```
{
"detail":"Inactive user"
}

```

## Recap[¶](https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/#recap "Permanent link")
You now have the tools to implement a complete security system based on `username` and `password` for your API.
Using these tools, you can make the security system compatible with any database and with any user or data model.
The only detail missing is that it is not actually "secure" yet.
In the next chapter you'll see how to use a secure password hashing library and JWT tokens.
Was this page helpful? 
Thanks for your feedback! 
Thanks for your feedback! 
Back to top  [ Previous  Get Current User  ](https://fastapi.tiangolo.com/tutorial/security/get-current-user/) [ Next  OAuth2 with Password (and hashing), Bearer with JWT tokens  ](https://fastapi.tiangolo.com/tutorial/security/oauth2-jwt/)
The FastAPI trademark is owned by [@tiangolo](https://tiangolo.com) and is registered in the US and across other regions 
Made with [ Material for MkDocs ](https://squidfunk.github.io/mkdocs-material/)
[ ](https://github.com/fastapi/fastapi "github.com") [ ](https://discord.gg/VQjSZaeJmf "discord.gg") [ ](https://twitter.com/fastapi "twitter.com") [ ](https://www.linkedin.com/in/tiangolo "www.linkedin.com") [ ](https://dev.to/tiangolo "dev.to") [ ](https://medium.com/@tiangolo "medium.com") [ ](https://tiangolo.com "tiangolo.com")
  *[JWT]: JSON Web Tokens