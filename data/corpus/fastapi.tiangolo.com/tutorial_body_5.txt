Title: Creating and Validating Request Bodies with FastAPI
URL: https://fastapi.tiangolo.com/tutorial/body/
Summary: This section demonstrates how to create a FastAPI application that accepts JSON request bodies using Pydantic models. It includes an example of defining an Item model with fields such as name, description, price, and tax, and shows how to create an endpoint to handle POST requests for items, with automatic data validation and conversion.
---

```
fromfastapiimport FastAPI
frompydanticimport BaseModel
classItem(BaseModel):
  name: str
  description: str | None = None
  price: float
  tax: float | None = None
app = FastAPI()
@app.post("/items/")
async defcreate_item(item: Item):
  return item

```

ðŸ¤“ Other versions and variants
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/body/#__tabbed_6_1)
```
fromtypingimport Union
fromfastapiimport FastAPI
frompydanticimport BaseModel
classItem(BaseModel):
  name: str
  description: Union[str, None] = None
  price: float
  tax: Union[float, None] = None
app = FastAPI()
@app.post("/items/")
async defcreate_item(item: Item):
  return item

```

...and declare its type as the model you created, `Item`.
## Results[Â¶](https://fastapi.tiangolo.com/tutorial/body/#results "Permanent link")
With just that Python type declaration, **FastAPI** will:
  * Read the body of the request as JSON.
  * Convert the corresponding types (if needed).
  * Validate the data.
    * If the data is invalid, it will return a nice and clear error, indicating exactly where and what was the incorrect data.
  * Give you the received data in the parameter `item`.
    * As you declared it in the function to be of type `Item`, you will also have all the editor support (completion, etc) for all of the attributes and their types.
  * Generate [JSON Schema](https://json-schema.org) definitions for your model, you can also use them anywhere else you like if it makes sense for your project.
  * Those schemas will be part of the generated OpenAPI schema, and used by the automatic documentation UIs.


## Automatic docs[Â¶](https://fastapi.tiangolo.com/tutorial/body/#automatic-docs "Permanent link")
The JSON Schemas of your models will be part of your OpenAPI generated schema, and will be shown in the interactive API docs:
![](https://fastapi.tiangolo.com/img/tutorial/body/image01.png)
And will also be used in the API docs inside each _path operation_ that needs them:
![](https://fastapi.tiangolo.com/img/tutorial/body/image02.png)
## Editor support[Â¶](https://fastapi.tiangolo.com/tutorial/body/#editor-support "Permanent link")
In your editor, inside your function you will get type hints and completion everywhere (this wouldn't happen if you received a `dict` instead of a Pydantic model):
![](https://fastapi.tiangolo.com/img/tutorial/body/image03.png)
You also get error checks for incorrect type operations:
![](https://fastapi.tiangolo.com/img/tutorial/body/image04.png)
This is not by chance, the whole framework was built around that design.
And it was thoroughly tested at the design phase, before any implementation, to ensure it would work with all the editors.
There were even some changes to Pydantic itself to support this.
The previous screenshots were taken with [Visual Studio Code](https://code.visualstudio.com).
But you would get the same editor support with [PyCharm](https://www.jetbrains.com/pycharm/) and most of the other Python editors:
![](https://fastapi.tiangolo.com/img/tutorial/body/image05.png)
Tip
If you use [PyCharm](https://www.jetbrains.com/pycharm/) as your editor, you can use the [Pydantic PyCharm Plugin](https://github.com/koxudaxi/pydantic-pycharm-plugin/).
It improves editor support for Pydantic models, with:
  * auto-completion
  * type checks
  * refactoring
  * searching
  * inspections


## Use the model[Â¶](https://fastapi.tiangolo.com/tutorial/body/#use-the-model "Permanent link")
Inside of the function, you can access all the attributes of the model object directly:
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/body/#__tabbed_7_1)
```
fromfastapiimport FastAPI
frompydanticimport BaseModel
classItem(BaseModel):
  name: str
  description: str | None = None
  price: float
  tax: float | None = None
app = FastAPI()
@app.post("/items/")
async defcreate_item(item: Item):
  item_dict = item.dict()
  if item.tax is not None:
    price_with_tax = item.price + item.tax
    item_dict.update({"price_with_tax": price_with_tax})
  return item_dict

```

ðŸ¤“ Other versions and variants
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/body/#__tabbed_8_1)
```
fromtypingimport Union
fromfastapiimport FastAPI
frompydanticimport BaseModel
classItem(BaseModel):
  name: str
  description: Union[str, None] = None
  price: float
  tax: Union[float, None] = None
app = FastAPI()
@app.post("/items/")
async defcreate_item(item: Item):
  item_dict = item.dict()
  if item.tax is not None:
    price_with_tax = item.price + item.tax
    item_dict.update({"price_with_tax": price_with_tax})
  return item_dict