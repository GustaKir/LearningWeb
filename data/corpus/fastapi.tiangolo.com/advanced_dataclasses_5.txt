Title: Using Dataclasses with FastAPI
URL: https://fastapi.tiangolo.com/advanced/dataclasses/
Summary: This section discusses the use of `dataclasses` in FastAPI, highlighting the import of `field`, the drop-in replacement with `pydantic.dataclasses`, and utilizing dataclasses like `Author` and `Item` as request and response models. It emphasizes the integration of standard type annotations and the capability of FastAPI to serialize dataclasses to JSON, alongside the flexibility of using both `def` and `async def` in path operation functions.
---

```

  1. We still import `field` from standard `dataclasses`.
  2. `pydantic.dataclasses` is a drop-in replacement for `dataclasses`.
  3. The `Author` dataclass includes a list of `Item` dataclasses.
  4. The `Author` dataclass is used as the `response_model` parameter.
  5. You can use other standard type annotations with dataclasses as the request body.
In this case, it's a list of `Item` dataclasses.
  6. Here we are returning a dictionary that contains `items` which is a list of dataclasses.
FastAPI is still capable of serializing the data to JSON.
  7. Here the `response_model` is using a type annotation of a list of `Author` dataclasses.
Again, you can combine `dataclasses` with standard type annotations.
  8. Notice that this _path operation function_ uses regular `def` instead of `async def`.
As always, in FastAPI you can combine `def` and `async def` as needed.
If you need a refresher about when to use which, check out the section _"In a hurry?"_ in the docs about [`async` and `await`](https://fastapi.tiangolo.com/async/#in-a-hurry).
  9. This _path operation function_ is not returning dataclasses (although it could), but a list of dictionaries with internal data.
FastAPI will use the `response_model` parameter (that includes dataclasses) to convert the response.


You can combine `dataclasses` with other type annotations in many different combinations to form complex data structures.
Check the in-code annotation tips above to see more specific details.
## Learn More[Â¶](https://fastapi.tiangolo.com/advanced/dataclasses/#learn-more "Permanent link")
You can also combine `dataclasses` with other Pydantic models, inherit from them, include them in your own models, etc.
To learn more, check the [Pydantic docs about dataclasses](https://docs.pydantic.dev/latest/concepts/dataclasses/).
## Version[Â¶](https://fastapi.tiangolo.com/advanced/dataclasses/#version "Permanent link")
This is available since FastAPI version `0.67.0`. ðŸ”–
Was this page helpful? 
Thanks for your feedback! 
Thanks for your feedback! 
Back to top  [ Previous  Using the Request Directly  ](https://fastapi.tiangolo.com/advanced/using-request-directly/) [ Next  Advanced Middleware  ](https://fastapi.tiangolo.com/advanced/middleware/)
The FastAPI trademark is owned by [@tiangolo](https://tiangolo.com) and is registered in the US and across other regions 
Made with [ Material for MkDocs ](https://squidfunk.github.io/mkdocs-material/)
[ ](https://github.com/fastapi/fastapi "github.com") [ ](https://discord.gg/VQjSZaeJmf "discord.gg") [ ](https://twitter.com/fastapi "twitter.com") [ ](https://www.linkedin.com/in/tiangolo "www.linkedin.com") [ ](https://dev.to/tiangolo "dev.to") [ ](https://medium.com/@tiangolo "medium.com") [ ](https://tiangolo.com "tiangolo.com")
  *[serializing]: converting the data to a format that can be transmitted