Title: Dependencies in Path Operation Decorators
URL: https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/
Summary: Dependencies in FastAPI can be used within path operation decorators, ensuring they are executed without passing their return values to the operation function. This helps avoid editor warnings about unused parameters, aiding clarity for new developers. The content mentions the use of custom headers for demonstration but advises using integrated security utilities for better implementation in real scenarios.
---

```

These dependencies will be executed/solved the same way as normal dependencies. But their value (if they return any) won't be passed to your _path operation function_.
Tip
Some editors check for unused function parameters, and show them as errors.
Using these `dependencies` in the _path operation decorator_ you can make sure they are executed while avoiding editor/tooling errors.
It might also help avoid confusion for new developers that see an unused parameter in your code and could think it's unnecessary.
Info
In this example we use invented custom headers `X-Key` and `X-Token`.
But in real cases, when implementing security, you would get more benefits from using the integrated [Security utilities (the next chapter)](https://fastapi.tiangolo.com/tutorial/security/).
## Dependencies errors and return values[Â¶](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/#dependencies-errors-and-return-values "Permanent link")
You can use the same dependency _functions_ you use normally.
### Dependency requirements[Â¶](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/#dependency-requirements "Permanent link")
They can declare request requirements (like headers) or other sub-dependencies:
[Python 3.9+](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/#__tabbed_3_1)
```
fromtypingimport Annotated
fromfastapiimport Depends, FastAPI, Header, HTTPException
app = FastAPI()
async defverify_token(x_token: Annotated[str, Header()]):
  if x_token != "fake-super-secret-token":
    raise HTTPException(status_code=400, detail="X-Token header invalid")
async defverify_key(x_key: Annotated[str, Header()]):
  if x_key != "fake-super-secret-key":
    raise HTTPException(status_code=400, detail="X-Key header invalid")
  return x_key
@app.get("/items/", dependencies=[Depends(verify_token), Depends(verify_key)])
async defread_items():
  return [{"item": "Foo"}, {"item": "Bar"}]

```

ðŸ¤“ Other versions and variants
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/#__tabbed_4_1)[Python 3.8+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/#__tabbed_4_2)
```
fromfastapiimport Depends, FastAPI, Header, HTTPException
fromtyping_extensionsimport Annotated
app = FastAPI()
async defverify_token(x_token: Annotated[str, Header()]):
  if x_token != "fake-super-secret-token":
    raise HTTPException(status_code=400, detail="X-Token header invalid")
async defverify_key(x_key: Annotated[str, Header()]):
  if x_key != "fake-super-secret-key":
    raise HTTPException(status_code=400, detail="X-Key header invalid")
  return x_key
@app.get("/items/", dependencies=[Depends(verify_token), Depends(verify_key)])
async defread_items():
  return [{"item": "Foo"}, {"item": "Bar"}]

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromfastapiimport Depends, FastAPI, Header, HTTPException
app = FastAPI()
async defverify_token(x_token: str = Header()):
  if x_token != "fake-super-secret-token":
    raise HTTPException(status_code=400, detail="X-Token header invalid")
async defverify_key(x_key: str = Header()):
  if x_key != "fake-super-secret-key":
    raise HTTPException(status_code=400, detail="X-Key header invalid")
  return x_key
@app.get("/items/", dependencies=[Depends(verify_token), Depends(verify_key)])
async defread_items():
  return [{"item": "Foo"}, {"item": "Bar"}]

```

### Raise exceptions[Â¶](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/#raise-exceptions "Permanent link")
These dependencies can `raise` exceptions, the same as normal dependencies:
[Python 3.9+](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/#__tabbed_5_1)
```
fromtypingimport Annotated
fromfastapiimport Depends, FastAPI, Header, HTTPException
app = FastAPI()
async defverify_token(x_token: Annotated[str, Header()]):
  if x_token != "fake-super-secret-token":
    raise HTTPException(status_code=400, detail="X-Token header invalid")
async defverify_key(x_key: Annotated[str, Header()]):
  if x_key != "fake-super-secret-key":
    raise HTTPException(status_code=400, detail="X-Key header invalid")
  return x_key
@app.get("/items/", dependencies=[Depends(verify_token), Depends(verify_key)])
async defread_items():
  return [{"item": "Foo"}, {"item": "Bar"}]

```

ðŸ¤“ Other versions and variants
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/#__tabbed_6_1)[Python 3.8+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/#__tabbed_6_2)