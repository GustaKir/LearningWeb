Title: Generating Clients for FastAPI
URL: https://fastapi.tiangolo.com/advanced/generate-clients/
Summary: FastAPI, being based on the OpenAPI specification, allows for the automatic generation of clients (or SDKs) in various programming languages. Tools like OpenAPI Generator and openapi-ts facilitate this process, helping to streamline frontend development.
---

# Generate Clients[Â¶](https://fastapi.tiangolo.com/advanced/generate-clients/#generate-clients "Permanent link")
As **FastAPI** is based on the OpenAPI specification, you get automatic compatibility with many tools, including the automatic API docs (provided by Swagger UI).
One particular advantage that is not necessarily obvious is that you can **generate clients** (sometimes called **SDKs** ) for your API, for many different **programming languages**.
## OpenAPI Client Generators[Â¶](https://fastapi.tiangolo.com/advanced/generate-clients/#openapi-client-generators "Permanent link")
There are many tools to generate clients from **OpenAPI**.
A common tool is [OpenAPI Generator](https://openapi-generator.tech/).
If you are building a **frontend** , a very interesting alternative is [openapi-ts](https://github.com/hey-api/openapi-ts).
## Client and SDK Generators - Sponsor[Â¶](https://fastapi.tiangolo.com/advanced/generate-clients/#client-and-sdk-generators-sponsor "Permanent link")
There are also some **company-backed** Client and SDK generators based on OpenAPI (FastAPI), in some cases they can offer you **additional features** on top of high-quality generated SDKs/clients.
Some of them also âœ¨ [**sponsor FastAPI**](https://fastapi.tiangolo.com/help-fastapi/#sponsor-the-author) âœ¨, this ensures the continued and healthy **development** of FastAPI and its **ecosystem**.
And it shows their true commitment to FastAPI and its **community** (you), as they not only want to provide you a **good service** but also want to make sure you have a **good and healthy framework** , FastAPI. ðŸ™‡
For example, you might want to try:
  * [Speakeasy](https://speakeasy.com/?utm_source=fastapi+repo&utm_medium=github+sponsorship)
  * [Stainless](https://www.stainlessapi.com/?utm_source=fastapi&utm_medium=referral)
  * [liblab](https://developers.liblab.com/tutorials/sdk-for-fastapi?utm_source=fastapi)


There are also several other companies offering similar services that you can search and find online. ðŸ¤“
## Generate a TypeScript Frontend Client[Â¶](https://fastapi.tiangolo.com/advanced/generate-clients/#generate-a-typescript-frontend-client "Permanent link")
Let's start with a simple FastAPI application:
[Python 3.9+](https://fastapi.tiangolo.com/advanced/generate-clients/#__tabbed_1_1)
```
fromfastapiimport FastAPI
frompydanticimport BaseModel
app = FastAPI()
classItem(BaseModel):
  name: str
  price: float
classResponseMessage(BaseModel):
  message: str
@app.post("/items/", response_model=ResponseMessage)
async defcreate_item(item: Item):
  return {"message": "item received"}
@app.get("/items/", response_model=list[Item])
async defget_items():
  return [
    {"name": "Plumbus", "price": 3},
    {"name": "Portal Gun", "price": 9001},
  ]

```

ðŸ¤“ Other versions and variants
[Python 3.8+](https://fastapi.tiangolo.com/advanced/generate-clients/#__tabbed_2_1)
```
fromtypingimport List
fromfastapiimport FastAPI
frompydanticimport BaseModel
app = FastAPI()
classItem(BaseModel):
  name: str
  price: float
classResponseMessage(BaseModel):
  message: str
@app.post("/items/", response_model=ResponseMessage)
async defcreate_item(item: Item):
  return {"message": "item received"}
@app.get("/items/", response_model=List[Item])
async defget_items():
  return [
    {"name": "Plumbus", "price": 3},
    {"name": "Portal Gun", "price": 9001},
  ]

```

Notice that the _path operations_ define the models they use for request payload and response payload, using the models `Item` and `ResponseMessage`.
### API Docs[Â¶](https://fastapi.tiangolo.com/advanced/generate-clients/#api-docs "Permanent link")
If you go to the API docs, you will see that it has the **schemas** for the data to be sent in requests and received in responses:
![](https://fastapi.tiangolo.com/img/tutorial/generate-clients/image01.png)
You can see those schemas because they were declared with the models in the app.
That information is available in the app's **OpenAPI schema** , and then shown in the API docs (by Swagger UI).
And that same information from the models that is included in OpenAPI is what can be used to **generate the client code**.
### Generate a TypeScript Client[Â¶](https://fastapi.tiangolo.com/advanced/generate-clients/#generate-a-typescript-client "Permanent link")
Now that we have the app with the models, we can generate the client code for the frontend.
#### Install `openapi-ts`[Â¶](https://fastapi.tiangolo.com/advanced/generate-clients/#install-openapi-ts "Permanent link")
You can install `openapi-ts` in your frontend code with:
```

fast â†’[](https://fastapi.tiangolo.com/advanced/generate-clients/)npm install @hey-api/openapi-ts --save-devrestart â†»[](https://fastapi.tiangolo.com/advanced/generate-clients/)