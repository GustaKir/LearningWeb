Title: FastAPI OpenAPI Configuration and Webhooks
URL: https://fastapi.tiangolo.com/reference/fastapi/
Summary: This section discusses the configuration of OpenAPI in FastAPI, including the requirement for a title and version. It notes the deprecation of the 'openapi_prefix' parameter in favor of 'root_path' for compliance with ASGI standards. Additionally, it mentions the 'app.webhooks' attribute, which is an APIRouter used for webhook documentation.
---

```
      """
    ),
  ] = "3.1.0"
  self.openapi_schema: Optional[Dict[str, Any]] = None
  if self.openapi_url:
    assert self.title, "A title must be provided for OpenAPI, e.g.: 'My API'"
    assert self.version, "A version must be provided for OpenAPI, e.g.: '2.1.0'"
  # TODO: remove when discarding the openapi_prefix parameter
  if openapi_prefix:
    logger.warning(
      '"openapi_prefix" has been deprecated in favor of "root_path", which '
      "follows more closely the ASGI standard, is simpler, and more "
      "automatic. Check the docs at "
      "https://fastapi.tiangolo.com/advanced/sub-applications/"
    )
  self.webhooks: Annotated[
    routing.APIRouter,
    Doc(
"""
      The `app.webhooks` attribute is an `APIRouter` with the *path
      operations* that will be used just for documentation of webhooks.
      Read more about it in the
      [FastAPI docs for OpenAPI Webhooks](https://fastapi.tiangolo.com/advanced/openapi-webhooks/).
      """
    ),
  ] = webhooks or routing.APIRouter()
  self.root_path = root_path or openapi_prefix
  self.state: Annotated[
    State,
    Doc(
"""
      A state object for the application. This is the same object for the
      entire application, it doesn't change from request to request.
      You normally wouldn't use this in FastAPI, for most of the cases you
      would instead use FastAPI dependencies.
      This is simply inherited from Starlette.
      Read more about it in the
      [Starlette docs for Applications](https://www.starlette.io/applications/#storing-state-on-the-app-instance).
      """
    ),
  ] = State()
  self.dependency_overrides: Annotated[
    Dict[Callable[..., Any], Callable[..., Any]],
    Doc(
"""
      A dictionary with overrides for the dependencies.
      Each key is the original dependency callable, and the value is the
      actual dependency that should be called.
      This is for testing, to replace expensive dependencies with testing
      versions.
      Read more about it in the
      [FastAPI docs for Testing Dependencies with Overrides](https://fastapi.tiangolo.com/advanced/testing-dependencies/).
      """
    ),
  ] = {}
  self.router: routing.APIRouter = routing.APIRouter(
    routes=routes,
    redirect_slashes=redirect_slashes,
    dependency_overrides_provider=self,
    on_startup=on_startup,
    on_shutdown=on_shutdown,
    lifespan=lifespan,
    default_response_class=default_response_class,
    dependencies=dependencies,
    callbacks=callbacks,
    deprecated=deprecated,
    include_in_schema=include_in_schema,
    responses=responses,
    generate_unique_id_function=generate_unique_id_function,
  )
  self.exception_handlers: Dict[
    Any, Callable[[Request, Any], Union[Response, Awaitable[Response]]]
  ] = {} if exception_handlers is None else dict(exception_handlers)
  self.exception_handlers.setdefault(HTTPException, http_exception_handler)
  self.exception_handlers.setdefault(
    RequestValidationError, request_validation_exception_handler
  )
  self.exception_handlers.setdefault(
    WebSocketRequestValidationError,
    # Starlette still has incorrect type specification for the handlers
    websocket_request_validation_exception_handler, # type: ignore
  )
  self.user_middleware: List[Middleware] = (
    [] if middleware is None else list(middleware)
  )
  self.middleware_stack: Union[ASGIApp, None] = None
  self.setup()

```
  
---|---  
###  openapi_version `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/fastapi/#fastapi.FastAPI.openapi_version "Permanent link")
```
openapi_version = '3.1.0'

```

The version string of OpenAPI.
FastAPI will generate OpenAPI version 3.1.0, and will output that as the OpenAPI version. But some tools, even though they might be compatible with OpenAPI 3.1.0, might not recognize it as a valid.
So you could override this value to trick those tools into using the generated OpenAPI. Have in mind that this is a hack. But if you avoid using features added in OpenAPI 3.1.0, it might work for your use case.
This is not passed as a parameter to the `FastAPI` class to avoid giving the false idea that FastAPI would generate a different OpenAPI schema. It is only available as an attribute.
**Example**
```
fromfastapiimport FastAPI
app = FastAPI()
app.openapi_version = "3.0.2"

```

###  webhooks `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/fastapi/#fastapi.FastAPI.webhooks "Permanent link")
```
webhooks = webhooks or APIRouter[](https://fastapi.tiangolo.com/reference/apirouter/#fastapi.APIRouter "<code class="doc-symbol doc-symbol-heading doc-symbol-class"></code>      <span class="doc doc-object-name doc-class-name">fastapi.APIRouter</span> \(<code>fastapi.routing.APIRouter</code>\)")()