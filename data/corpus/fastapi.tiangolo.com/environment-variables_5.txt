Title: Working with Environment Variables in FastAPI
URL: https://fastapi.tiangolo.com/environment-variables/
Summary: This section discusses the handling of environment variables in FastAPI, emphasizing that all values from environment variables are strings and require manual type conversion and validation in code. It also provides references for further reading on the topic and details about the `PATH` environment variable.
---

```

Tip
You can read more about it at [The Twelve-Factor App: Config](https://12factor.net/config).
## Types and Validation[¶](https://fastapi.tiangolo.com/environment-variables/#types-and-validation "Permanent link")
These environment variables can only handle **text strings** , as they are external to Python and have to be compatible with other programs and the rest of the system (and even with different operating systems, as Linux, Windows, macOS).
That means that **any value** read in Python from an environment variable **will be a`str`** , and any conversion to a different type or any validation has to be done in code.
You will learn more about using environment variables for handling **application settings** in the [Advanced User Guide - Settings and Environment Variables](https://fastapi.tiangolo.com/advanced/settings/).
## `PATH` Environment Variable[¶](https://fastapi.tiangolo.com/environment-variables/#path-environment-variable "Permanent link")
There is a **special** environment variable called **`PATH`**that is used by the operating systems (Linux, macOS, Windows) to find programs to run.
The value of the variable `PATH` is a long string that is made of directories separated by a colon `:` on Linux and macOS, and by a semicolon `;` on Windows.
For example, the `PATH` environment variable could look like this:
[Linux, macOS](https://fastapi.tiangolo.com/environment-variables/#__tabbed_3_1)[Windows](https://fastapi.tiangolo.com/environment-variables/#__tabbed_3_2)
```
/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin

```

This means that the system should look for programs in the directories:
  * `/usr/local/bin`
  * `/usr/bin`
  * `/bin`
  * `/usr/sbin`
  * `/sbin`


```
C:\Program Files\Python312\Scripts;C:\Program Files\Python312;C:\Windows\System32

```

This means that the system should look for programs in the directories:
  * `C:\Program Files\Python312\Scripts`
  * `C:\Program Files\Python312`
  * `C:\Windows\System32`


When you type a **command** in the terminal, the operating system **looks for** the program in **each of those directories** listed in the `PATH` environment variable.
For example, when you type `python` in the terminal, the operating system looks for a program called `python` in the **first directory** in that list.
If it finds it, then it will **use it**. Otherwise it keeps looking in the **other directories**.
### Installing Python and Updating the `PATH`[¶](https://fastapi.tiangolo.com/environment-variables/#installing-python-and-updating-the-path "Permanent link")
When you install Python, you might be asked if you want to update the `PATH` environment variable.
[Linux, macOS](https://fastapi.tiangolo.com/environment-variables/#__tabbed_4_1)[Windows](https://fastapi.tiangolo.com/environment-variables/#__tabbed_4_2)
Let's say you install Python and it ends up in a directory `/opt/custompython/bin`.
If you say yes to update the `PATH` environment variable, then the installer will add `/opt/custompython/bin` to the `PATH` environment variable.
It could look like this:
```
/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/custompython/bin

```

This way, when you type `python` in the terminal, the system will find the Python program in `/opt/custompython/bin` (the last directory) and use that one.
Let's say you install Python and it ends up in a directory `C:\opt\custompython\bin`.
If you say yes to update the `PATH` environment variable, then the installer will add `C:\opt\custompython\bin` to the `PATH` environment variable.
```
C:\Program Files\Python312\Scripts;C:\Program Files\Python312;C:\Windows\System32;C:\opt\custompython\bin

```

This way, when you type `python` in the terminal, the system will find the Python program in `C:\opt\custompython\bin` (the last directory) and use that one.
So, if you type:
```

fast →[](https://fastapi.tiangolo.com/environment-variables/)pythonrestart ↻[](https://fastapi.tiangolo.com/environment-variables/)

```

[Linux, macOS](https://fastapi.tiangolo.com/environment-variables/#__tabbed_5_1)[Windows](https://fastapi.tiangolo.com/environment-variables/#__tabbed_5_2)
The system will **find** the `python` program in `/opt/custompython/bin` and run it.
It would be roughly equivalent to typing:
```

fast →[](https://fastapi.tiangolo.com/environment-variables/)/opt/custompython/bin/pythonrestart ↻[](https://fastapi.tiangolo.com/environment-variables/)

```

The system will **find** the `python` program in `C:\opt\custompython\bin\python` and run it.
It would be roughly equivalent to typing:
```

fast →[](https://fastapi.tiangolo.com/environment-variables/)