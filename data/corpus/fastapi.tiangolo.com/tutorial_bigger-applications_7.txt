Title: Defining Path Prefixes and Tags in FastAPI Routers
URL: https://fastapi.tiangolo.com/tutorial/bigger-applications/
Summary: This section discusses how to define a prefix for path operations in FastAPI routers, including the addition of tags, response specifications, and dependencies. It highlights that the prefix should not end with a '/', and explains how the configured paths like '/items/' and '/items/{item_id}' will be structured and documented.
---

```

...the prefix must not include a final `/`.
So, the prefix in this case is `/items`.
We can also add a list of `tags` and extra `responses` that will be applied to all the _path operations_ included in this router.
And we can add a list of `dependencies` that will be added to all the _path operations_ in the router and will be executed/solved for each request made to them.
Tip
Note that, much like [dependencies in _path operation decorators_](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/), no value will be passed to your _path operation function_.
The end result is that the item paths are now:
  * `/items/`
  * `/items/{item_id}`


...as we intended.
  * They will be marked with a list of tags that contain a single string `"items"`.
    * These "tags" are especially useful for the automatic interactive documentation systems (using OpenAPI).
  * All of them will include the predefined `responses`.
  * All these _path operations_ will have the list of `dependencies` evaluated/executed before them.
    * If you also declare dependencies in a specific _path operation_ , **they will be executed too**.
    * The router dependencies are executed first, then the [`dependencies` in the decorator](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/), and then the normal parameter dependencies.
    * You can also add [`Security` dependencies with `scopes`](https://fastapi.tiangolo.com/advanced/security/oauth2-scopes/).


Tip
Having `dependencies` in the `APIRouter` can be used, for example, to require authentication for a whole group of _path operations_. Even if the dependencies are not added individually to each one of them.
Check
The `prefix`, `tags`, `responses`, and `dependencies` parameters are (as in many other cases) just a feature from **FastAPI** to help you avoid code duplication.
### Import the dependencies[Â¶](https://fastapi.tiangolo.com/tutorial/bigger-applications/#import-the-dependencies "Permanent link")
This code lives in the module `app.routers.items`, the file `app/routers/items.py`.
And we need to get the dependency function from the module `app.dependencies`, the file `app/dependencies.py`.
So we use a relative import with `..` for the dependencies:
app/routers/items.py```
fromfastapiimport APIRouter, Depends, HTTPException
from..dependenciesimport get_token_header
router = APIRouter(
  prefix="/items",
  tags=["items"],
  dependencies=[Depends(get_token_header)],
  responses={404: {"description": "Not found"}},
)
fake_items_db = {"plumbus": {"name": "Plumbus"}, "gun": {"name": "Portal Gun"}}
@router.get("/")
async defread_items():
  return fake_items_db
@router.get("/{item_id}")
async defread_item(item_id: str):
  if item_id not in fake_items_db:
    raise HTTPException(status_code=404, detail="Item not found")
  return {"name": fake_items_db[item_id]["name"], "item_id": item_id}
@router.put(
  "/{item_id}",
  tags=["custom"],
  responses={403: {"description": "Operation forbidden"}},
)
async defupdate_item(item_id: str):
  if item_id != "plumbus":
    raise HTTPException(
      status_code=403, detail="You can only update the item: plumbus"
    )
  return {"item_id": item_id, "name": "The great Plumbus"}

```

#### How relative imports work[Â¶](https://fastapi.tiangolo.com/tutorial/bigger-applications/#how-relative-imports-work "Permanent link")
Tip
If you know perfectly how imports work, continue to the next section below.
A single dot `.`, like in:
```
from.dependenciesimport get_token_header

```

would mean:
  * Starting in the same package that this module (the file `app/routers/items.py`) lives in (the directory `app/routers/`)...
  * find the module `dependencies` (an imaginary file at `app/routers/dependencies.py`)...
  * and from it, import the function `get_token_header`.


But that file doesn't exist, our dependencies are in a file at `app/dependencies.py`.
Remember how our app/file structure looks like:
![](https://fastapi.tiangolo.com/img/tutorial/bigger-applications/package.svg)
The two dots `..`, like in:
```
from..dependenciesimport get_token_header

```

mean:
  * Starting in the same package that this module (the file `app/routers/items.py`) lives in (the directory `app/routers/`)...
  * go to the parent package (the directory `app/`)...
  * and in there, find the module `dependencies` (the file at `app/dependencies.py`)...
  * and from it, import the function `get_token_header`.


That works correctly! ðŸŽ‰
The same way, if we had used three dots `...`, like in:
```
from...dependenciesimport get_token_header