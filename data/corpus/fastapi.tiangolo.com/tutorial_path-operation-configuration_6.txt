Title: Path Operation Configuration in FastAPI
URL: https://fastapi.tiangolo.com/tutorial/path-operation-configuration/
Summary: This document outlines how to create a POST endpoint in FastAPI for adding items using Pydantic models. It defines the 'Item' model with attributes like name, description, price, tax, and tags. It emphasizes required fields and defaults for optional fields.
---

```
fromfastapiimport FastAPI
frompydanticimport BaseModel
app = FastAPI()
classItem(BaseModel):
  name: str
  description: str | None = None
  price: float
  tax: float | None = None
  tags: set[str] = set()
@app.post("/items/", response_model=Item, summary="Create an item")
async defcreate_item(item: Item):
"""
  Create an item with all the information:
  - **name**: each item must have a name
  - **description**: a long description
  - **price**: required
  - **tax**: if the item doesn't have tax, you can omit this
  - **tags**: a set of unique tag strings for this item
  """
  return item

```

ðŸ¤“ Other versions and variants
[Python 3.9+](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#__tabbed_9_1)[Python 3.8+](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#__tabbed_9_2)
```
fromtypingimport Union
fromfastapiimport FastAPI
frompydanticimport BaseModel
app = FastAPI()
classItem(BaseModel):
  name: str
  description: Union[str, None] = None
  price: float
  tax: Union[float, None] = None
  tags: set[str] = set()
@app.post("/items/", response_model=Item, summary="Create an item")
async defcreate_item(item: Item):
"""
  Create an item with all the information:
  - **name**: each item must have a name
  - **description**: a long description
  - **price**: required
  - **tax**: if the item doesn't have tax, you can omit this
  - **tags**: a set of unique tag strings for this item
  """
  return item

```

```
fromtypingimport Set, Union
fromfastapiimport FastAPI
frompydanticimport BaseModel
app = FastAPI()
classItem(BaseModel):
  name: str
  description: Union[str, None] = None
  price: float
  tax: Union[float, None] = None
  tags: Set[str] = set()
@app.post("/items/", response_model=Item, summary="Create an item")
async defcreate_item(item: Item):
"""
  Create an item with all the information:
  - **name**: each item must have a name
  - **description**: a long description
  - **price**: required
  - **tax**: if the item doesn't have tax, you can omit this
  - **tags**: a set of unique tag strings for this item
  """
  return item

```

It will be used in the interactive docs:
![](https://fastapi.tiangolo.com/img/tutorial/path-operation-configuration/image02.png)
## Response description[Â¶](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#response-description "Permanent link")
You can specify the response description with the parameter `response_description`:
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#__tabbed_10_1)
```
fromfastapiimport FastAPI
frompydanticimport BaseModel
app = FastAPI()
classItem(BaseModel):
  name: str
  description: str | None = None
  price: float
  tax: float | None = None
  tags: set[str] = set()
@app.post(
  "/items/",
  response_model=Item,
  summary="Create an item",
  response_description="The created item",
)
async defcreate_item(item: Item):
"""
  Create an item with all the information:
  - **name**: each item must have a name
  - **description**: a long description
  - **price**: required
  - **tax**: if the item doesn't have tax, you can omit this
  - **tags**: a set of unique tag strings for this item
  """
  return item

```

ðŸ¤“ Other versions and variants
[Python 3.9+](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#__tabbed_11_1)[Python 3.8+](https://fastapi.tiangolo.com/tutorial/path-operation-configuration/#__tabbed_11_2)
```
fromtypingimport Union
fromfastapiimport FastAPI
frompydanticimport BaseModel
app = FastAPI()
classItem(BaseModel):
  name: str
  description: Union[str, None] = None
  price: float
  tax: Union[float, None] = None
  tags: set[str] = set()
@app.post(
  "/items/",
  response_model=Item,
  summary="Create an item",
  response_description="The created item",
)
async defcreate_item(item: Item):
"""
  Create an item with all the information:
  - **name**: each item must have a name
  - **description**: a long description
  - **price**: required
  - **tax**: if the item doesn't have tax, you can omit this
  - **tags**: a set of unique tag strings for this item
  """
  return item

```

```
fromtypingimport Set, Union
fromfastapiimport FastAPI
frompydanticimport BaseModel
app = FastAPI()
classItem(BaseModel):
  name: str
  description: Union[str, None] = None
  price: float
  tax: Union[float, None] = None
  tags: Set[str] = set()
@app.post(
  "/items/",
  response_model=Item,
  summary="Create an item",
  response_description="The created item",
)
async defcreate_item(item: Item):
"""
  Create an item with all the information:
  - **name**: each item must have a name
  - **description**: a long description
  - **price**: required
  - **tax**: if the item doesn't have tax, you can omit this
  - **tags**: a set of unique tag strings for this item
  """
  return item