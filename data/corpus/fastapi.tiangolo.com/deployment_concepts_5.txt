Title: Deployment Concepts for FastAPI Applications
URL: https://fastapi.tiangolo.com/deployment/concepts/
Summary: This section outlines key concepts essential for deploying FastAPI applications, including security measures (HTTPS), application startup procedures, process replication, memory management, and pre-deployment steps. The goal is to ensure secure, efficient, and uninterrupted service for API clients.
---

1. [ FastAPI  ](https://fastapi.tiangolo.com/)
  2. [ Learn  ](https://fastapi.tiangolo.com/learn/)
  3. [ Deployment  ](https://fastapi.tiangolo.com/deployment/)


# Deployments Concepts[Â¶](https://fastapi.tiangolo.com/deployment/concepts/#deployments-concepts "Permanent link")
When deploying a **FastAPI** application, or actually, any type of web API, there are several concepts that you probably care about, and using them you can find the **most appropriate** way to **deploy your application**.
Some of the important concepts are:
  * Security - HTTPS
  * Running on startup
  * Restarts
  * Replication (the number of processes running)
  * Memory
  * Previous steps before starting


We'll see how they would affect **deployments**.
In the end, the ultimate objective is to be able to **serve your API clients** in a way that is **secure** , to **avoid disruptions** , and to use the **compute resources** (for example remote servers/virtual machines) as efficiently as possible. ðŸš€
I'll tell you a bit more about these **concepts** here, and that would hopefully give you the **intuition** you would need to decide how to deploy your API in very different environments, possibly even in **future** ones that don't exist yet.
By considering these concepts, you will be able to **evaluate and design** the best way to deploy **your own APIs**.
In the next chapters, I'll give you more **concrete recipes** to deploy FastAPI applications.
But for now, let's check these important **conceptual ideas**. These concepts also apply to any other type of web API. ðŸ’¡
## Security - HTTPS[Â¶](https://fastapi.tiangolo.com/deployment/concepts/#security-https "Permanent link")
In the [previous chapter about HTTPS](https://fastapi.tiangolo.com/deployment/https/) we learned about how HTTPS provides encryption for your API.
We also saw that HTTPS is normally provided by a component **external** to your application server, a **TLS Termination Proxy**.
And there has to be something in charge of **renewing the HTTPS certificates** , it could be the same component or it could be something different.
### Example Tools for HTTPS[Â¶](https://fastapi.tiangolo.com/deployment/concepts/#example-tools-for-https "Permanent link")
Some of the tools you could use as a TLS Termination Proxy are:
  * Traefik
    * Automatically handles certificates renewals âœ¨
  * Caddy
    * Automatically handles certificates renewals âœ¨
  * Nginx
    * With an external component like Certbot for certificate renewals
  * HAProxy
    * With an external component like Certbot for certificate renewals
  * Kubernetes with an Ingress Controller like Nginx
    * With an external component like cert-manager for certificate renewals
  * Handled internally by a cloud provider as part of their services (read below ðŸ‘‡)


Another option is that you could use a **cloud service** that does more of the work including setting up HTTPS. It could have some restrictions or charge you more, etc. But in that case, you wouldn't have to set up a TLS Termination Proxy yourself.
I'll show you some concrete examples in the next chapters.
Then the next concepts to consider are all about the program running your actual API (e.g. Uvicorn).
## Program and Process[Â¶](https://fastapi.tiangolo.com/deployment/concepts/#program-and-process "Permanent link")
We will talk a lot about the running "**process** ", so it's useful to have clarity about what it means, and what's the difference with the word "**program** ".
### What is a Program[Â¶](https://fastapi.tiangolo.com/deployment/concepts/#what-is-a-program "Permanent link")
The word **program** is commonly used to describe many things:
  * The **code** that you write, the **Python files**.
  * The **file** that can be **executed** by the operating system, for example: `python`, `python.exe` or `uvicorn`.
  * A particular program while it is **running** on the operating system, using the CPU, and storing things in memory. This is also called a **process**.