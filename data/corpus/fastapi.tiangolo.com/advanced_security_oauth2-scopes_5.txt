Title: Using OAuth2 Scopes in FastAPI
URL: https://fastapi.tiangolo.com/advanced/security/oauth2-scopes/
Summary: This section explains how to implement OAuth2 scopes in FastAPI for a more detailed permission system, aligning with the OAuth2 standard. It highlights the use of OAuth2 scopes by major authentication providers and provides guidance on managing authentication and authorization within a FastAPI application. Note that this section is more advanced, and beginners may choose to skip it.
---

# OAuth2 scopes[¶](https://fastapi.tiangolo.com/advanced/security/oauth2-scopes/#oauth2-scopes "Permanent link")
You can use OAuth2 scopes directly with **FastAPI** , they are integrated to work seamlessly.
This would allow you to have a more fine-grained permission system, following the OAuth2 standard, integrated into your OpenAPI application (and the API docs).
OAuth2 with scopes is the mechanism used by many big authentication providers, like Facebook, Google, GitHub, Microsoft, Twitter, etc. They use it to provide specific permissions to users and applications.
Every time you "log in with" Facebook, Google, GitHub, Microsoft, Twitter, that application is using OAuth2 with scopes.
In this section you will see how to manage authentication and authorization with the same OAuth2 with scopes in your **FastAPI** application.
Warning
This is a more or less advanced section. If you are just starting, you can skip it.
You don't necessarily need OAuth2 scopes, and you can handle authentication and authorization however you want.
But OAuth2 with scopes can be nicely integrated into your API (with OpenAPI) and your API docs.
Nevertheless, you still enforce those scopes, or any other security/authorization requirement, however you need, in your code.
In many cases, OAuth2 with scopes can be an overkill.
But if you know you need it, or you are curious, keep reading.
## OAuth2 scopes and OpenAPI[¶](https://fastapi.tiangolo.com/advanced/security/oauth2-scopes/#oauth2-scopes-and-openapi "Permanent link")
The OAuth2 specification defines "scopes" as a list of strings separated by spaces.
The content of each of these strings can have any format, but should not contain spaces.
These scopes represent "permissions".
In OpenAPI (e.g. the API docs), you can define "security schemes".
When one of these security schemes uses OAuth2, you can also declare and use scopes.
Each "scope" is just a string (without spaces).
They are normally used to declare specific security permissions, for example:
  * `users:read` or `users:write` are common examples.
  * `instagram_basic` is used by Facebook / Instagram.
  * `https://www.googleapis.com/auth/drive` is used by Google.


Info
In OAuth2 a "scope" is just a string that declares a specific permission required.
It doesn't matter if it has other characters like `:` or if it is a URL.
Those details are implementation specific.
For OAuth2 they are just strings.
## Global view[¶](https://fastapi.tiangolo.com/advanced/security/oauth2-scopes/#global-view "Permanent link")
First, let's quickly see the parts that change from the examples in the main **Tutorial - User Guide** for [OAuth2 with Password (and hashing), Bearer with JWT tokens](https://fastapi.tiangolo.com/tutorial/security/oauth2-jwt/). Now using OAuth2 scopes:
[Python 3.10+](https://fastapi.tiangolo.com/advanced/security/oauth2-scopes/#__tabbed_1_1)