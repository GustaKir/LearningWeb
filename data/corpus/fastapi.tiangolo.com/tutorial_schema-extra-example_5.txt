Title: Using Extra JSON Schema Examples in FastAPI
URL: https://fastapi.tiangolo.com/tutorial/schema-extra-example/
Summary: This code demonstrates how to use Pydantic's `BaseModel` to define an item schema in FastAPI, including optional fields and providing extra JSON schema examples for documentation. The `PUT` endpoint allows updating item details by item ID, returning the updated data.
---

```
fromfastapiimport FastAPI
frompydanticimport BaseModel
app = FastAPI()
classItem(BaseModel):
  name: str
  description: str | None = None
  price: float
  tax: float | None = None
  model_config = {
    "json_schema_extra": {
      "examples": [
        {
          "name": "Foo",
          "description": "A very nice Item",
          "price": 35.4,
          "tax": 3.2,
        }
      ]
    }
  }
@app.put("/items/{item_id}")
async defupdate_item(item_id: int, item: Item):
  results = {"item_id": item_id, "item": item}
  return results

```

ðŸ¤“ Other versions and variants
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#__tabbed_3_1)
```
fromtypingimport Union
fromfastapiimport FastAPI
frompydanticimport BaseModel
app = FastAPI()
classItem(BaseModel):
  name: str
  description: Union[str, None] = None
  price: float
  tax: Union[float, None] = None
  model_config = {
    "json_schema_extra": {
      "examples": [
        {
          "name": "Foo",
          "description": "A very nice Item",
          "price": 35.4,
          "tax": 3.2,
        }
      ]
    }
  }
@app.put("/items/{item_id}")
async defupdate_item(item_id: int, item: Item):
  results = {"item_id": item_id, "item": item}
  return results

```

[Python 3.10+](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#__tabbed_4_1)
```
fromfastapiimport FastAPI
frompydanticimport BaseModel
app = FastAPI()
classItem(BaseModel):
  name: str
  description: str | None = None
  price: float
  tax: float | None = None
  classConfig:
    schema_extra = {
      "examples": [
        {
          "name": "Foo",
          "description": "A very nice Item",
          "price": 35.4,
          "tax": 3.2,
        }
      ]
    }
@app.put("/items/{item_id}")
async defupdate_item(item_id: int, item: Item):
  results = {"item_id": item_id, "item": item}
  return results

```

ðŸ¤“ Other versions and variants
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#__tabbed_5_1)
```
fromtypingimport Union
fromfastapiimport FastAPI
frompydanticimport BaseModel
app = FastAPI()
classItem(BaseModel):
  name: str
  description: Union[str, None] = None
  price: float
  tax: Union[float, None] = None
  classConfig:
    schema_extra = {
      "examples": [
        {
          "name": "Foo",
          "description": "A very nice Item",
          "price": 35.4,
          "tax": 3.2,
        }
      ]
    }
@app.put("/items/{item_id}")
async defupdate_item(item_id: int, item: Item):
  results = {"item_id": item_id, "item": item}
  return results

```

That extra info will be added as-is to the output **JSON Schema** for that model, and it will be used in the API docs.
[Pydantic v2](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#__tabbed_6_1)[Pydantic v1](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#__tabbed_6_2)
In Pydantic version 2, you would use the attribute `model_config`, that takes a `dict` as described in [Pydantic's docs: Configuration](https://docs.pydantic.dev/latest/api/config/).
You can set `"json_schema_extra"` with a `dict` containing any additional data you would like to show up in the generated JSON Schema, including `examples`.
In Pydantic version 1, you would use an internal class `Config` and `schema_extra`, as described in [Pydantic's docs: Schema customization](https://docs.pydantic.dev/1.10/usage/schema/#schema-customization).
You can set `schema_extra` with a `dict` containing any additional data you would like to show up in the generated JSON Schema, including `examples`.
Tip
You could use the same technique to extend the JSON Schema and add your own custom extra info.
For example you could use it to add metadata for a frontend user interface, etc.
Info
OpenAPI 3.1.0 (used since FastAPI 0.99.0) added support for `examples`, which is part of the **JSON Schema** standard.
Before that, it only supported the keyword `example` with a single example. That is still supported by OpenAPI 3.1.0, but is deprecated and is not part of the JSON Schema standard. So you are encouraged to migrate `example` to `examples`. ðŸ¤“
You can read more at the end of this page.
## `Field` additional arguments[Â¶](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#field-additional-arguments "Permanent link")
When using `Field()` with Pydantic models, you can also declare additional `examples`:
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#__tabbed_7_1)
```
fromfastapiimport FastAPI
frompydanticimport BaseModel, Field
app = FastAPI()
classItem(BaseModel):
  name: str = Field(examples=["Foo"])
  description: str | None = Field(default=None, examples=["A very nice Item"])
  price: float = Field(examples=[35.4])
  tax: float | None = Field(default=None, examples=[3.2])
@app.put("/items/{item_id}")
async defupdate_item(item_id: int, item: Item):
  results = {"item_id": item_id, "item": item}
  return results