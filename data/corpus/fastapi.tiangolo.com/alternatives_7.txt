Title: Overview of FastAPI Features and API Documentation Standards
URL: https://fastapi.tiangolo.com/alternatives/
Summary: This document highlights key features of FastAPI, including its intuitive API and use of HTTP methods directly, along with its ability to provide sensible defaults and customization options. It details the significance of Swagger, now known as OpenAPI, in automatically documenting APIs and the transition of Swagger to the Linux Foundation.
---

```

See the similarities in `requests.get(...)` and `@app.get(...)`.
Inspired **FastAPI** to
  * Have a simple and intuitive API.
  * Use HTTP method names (operations) directly, in a straightforward and intuitive way.
  * Have sensible defaults, but powerful customizations.


### [Swagger](https://swagger.io/) / [OpenAPI](https://github.com/OAI/OpenAPI-Specification/)[¶](https://fastapi.tiangolo.com/alternatives/#swagger-openapi "Permanent link")
The main feature I wanted from Django REST Framework was the automatic API documentation.
Then I found that there was a standard to document APIs, using JSON (or YAML, an extension of JSON) called Swagger.
And there was a web user interface for Swagger APIs already created. So, being able to generate Swagger documentation for an API would allow using this web user interface automatically.
At some point, Swagger was given to the Linux Foundation, to be renamed OpenAPI.
That's why when talking about version 2.0 it's common to say "Swagger", and for version 3+ "OpenAPI".
Inspired **FastAPI** to
Adopt and use an open standard for API specifications, instead of a custom schema.
And integrate standards-based user interface tools:
  * [Swagger UI](https://github.com/swagger-api/swagger-ui)
  * [ReDoc](https://github.com/Rebilly/ReDoc)


These two were chosen for being fairly popular and stable, but doing a quick search, you could find dozens of alternative user interfaces for OpenAPI (that you can use with **FastAPI**).
### Flask REST frameworks[¶](https://fastapi.tiangolo.com/alternatives/#flask-rest-frameworks "Permanent link")
There are several Flask REST frameworks, but after investing the time and work into investigating them, I found that many are discontinued or abandoned, with several standing issues that made them unfit.
### [Marshmallow](https://marshmallow.readthedocs.io/en/stable/)[¶](https://fastapi.tiangolo.com/alternatives/#marshmallow "Permanent link")
One of the main features needed by API systems is data "serialization" which is taking data from the code (Python) and converting it into something that can be sent through the network. For example, converting an object containing data from a database into a JSON object. Converting `datetime` objects into strings, etc.
Another big feature needed by APIs is data validation, making sure that the data is valid, given certain parameters. For example, that some field is an `int`, and not some random string. This is especially useful for incoming data.
Without a data validation system, you would have to do all the checks by hand, in code.
These features are what Marshmallow was built to provide. It is a great library, and I have used it a lot before.
But it was created before there existed Python type hints. So, to define every schema you need to use specific utils and classes provided by Marshmallow.
Inspired **FastAPI** to
Use code to define "schemas" that provide data types and validation, automatically.
### [Webargs](https://webargs.readthedocs.io/en/latest/)[¶](https://fastapi.tiangolo.com/alternatives/#webargs "Permanent link")
Another big feature required by APIs is parsing data from incoming requests.
Webargs is a tool that was made to provide that on top of several frameworks, including Flask.
It uses Marshmallow underneath to do the data validation. And it was created by the same developers.
It's a great tool and I have used it a lot too, before having **FastAPI**.
Info
Webargs was created by the same Marshmallow developers.
Inspired **FastAPI** to
Have automatic validation of incoming request data.
### [APISpec](https://apispec.readthedocs.io/en/stable/)[¶](https://fastapi.tiangolo.com/alternatives/#apispec "Permanent link")
Marshmallow and Webargs provide validation, parsing and serialization as plug-ins.
But documentation is still missing. Then APISpec was created.
It is a plug-in for many frameworks (and there's a plug-in for Starlette too).
The way it works is that you write the definition of the schema using YAML format inside the docstring of each function handling a route.
And it generates OpenAPI schemas.
That's how it works in Flask, Starlette, Responder, etc.
But then, we have again the problem of having a micro-syntax, inside of a Python string (a big YAML).
The editor can't help much with that. And if we modify parameters or Marshmallow schemas and forget to also modify that YAML docstring, the generated schema would be obsolete.
Info
APISpec was created by the same Marshmallow developers.
Inspired **FastAPI** to
Support the open standard for APIs, OpenAPI.
### [Flask-apispec](https://flask-apispec.readthedocs.io/en/latest/)[¶](https://fastapi.tiangolo.com/alternatives/#flask-apispec "Permanent link")
It's a Flask plug-in, that ties together Webargs, Marshmallow and APISpec.
It uses the information from Webargs and Marshmallow to automatically generate OpenAPI schemas, using APISpec.
It's a great tool, very underrated. It should be way more popular than many Flask plug-ins out there. It mi