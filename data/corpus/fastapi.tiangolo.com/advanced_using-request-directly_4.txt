Title: Accessing the Request Object Directly in FastAPI
URL: https://fastapi.tiangolo.com/advanced/using-request-directly/
Summary: This section explains how to access the `Request` object directly in FastAPI, which is built on top of Starlette. While this provides more control, it bypasses FastAPI's automatic validation, conversion, and documentation features typically applied to request data.
---

And by doing so, **FastAPI** is validating that data, converting it and generating documentation for your API automatically.
But there are situations where you might need to access the `Request` object directly.
## Details about the `Request` object[¶](https://fastapi.tiangolo.com/advanced/using-request-directly/#details-about-the-request-object "Permanent link")
As **FastAPI** is actually **Starlette** underneath, with a layer of several tools on top, you can use Starlette's [`Request`](https://www.starlette.io/requests/) object directly when you need to.
It would also mean that if you get data from the `Request` object directly (for example, read the body) it won't be validated, converted or documented (with OpenAPI, for the automatic API user interface) by FastAPI.
Although any other parameter declared normally (for example, the body with a Pydantic model) would still be validated, converted, annotated, etc.
But there are specific cases where it's useful to get the `Request` object.
## Use the `Request` object directly[¶](https://fastapi.tiangolo.com/advanced/using-request-directly/#use-the-request-object-directly "Permanent link")
Let's imagine you want to get the client's IP address/host inside of your _path operation function_.
For that you need to access the request directly.
[Python 3.8+](https://fastapi.tiangolo.com/advanced/using-request-directly/#__tabbed_1_1)
```
fromfastapiimport FastAPI, Request
app = FastAPI()
@app.get("/items/{item_id}")
defread_root(item_id: str, request: Request):
  client_host = request.client.host
  return {"client_host": client_host, "item_id": item_id}

```

By declaring a _path operation function_ parameter with the type being the `Request` **FastAPI** will know to pass the `Request` in that parameter.
Tip
Note that in this case, we are declaring a path parameter beside the request parameter.
So, the path parameter will be extracted, validated, converted to the specified type and annotated with OpenAPI.
The same way, you can declare any other parameter as normally, and additionally, get the `Request` too.
## `Request` documentation[¶](https://fastapi.tiangolo.com/advanced/using-request-directly/#request-documentation "Permanent link")
You can read more details about the [`Request` object in the official Starlette documentation site](https://www.starlette.io/requests/).
Technical Details
You could also use `from starlette.requests import Request`.
**FastAPI** provides it directly just as a convenience for you, the developer. But it comes directly from Starlette.
Was this page helpful? 
Thanks for your feedback! 
Thanks for your feedback! 
Back to top  [ Previous  HTTP Basic Auth  ](https://fastapi.tiangolo.com/advanced/security/http-basic-auth/) [ Next  Using Dataclasses  ](https://fastapi.tiangolo.com/advanced/dataclasses/)
The FastAPI trademark is owned by [@tiangolo](https://tiangolo.com) and is registered in the US and across other regions 
Made with [ Material for MkDocs ](https://squidfunk.github.io/mkdocs-material/)
[ ](https://github.com/fastapi/fastapi "github.com") [ ](https://discord.gg/VQjSZaeJmf "discord.gg") [ ](https://twitter.com/fastapi "twitter.com") [ ](https://www.linkedin.com/in/tiangolo "www.linkedin.com") [ ](https://dev.to/tiangolo "dev.to") [ ](https://medium.com/@tiangolo "medium.com") [ ](https://tiangolo.com "tiangolo.com")