Title: Combining Request Body and Path Parameters in FastAPI
URL: https://fastapi.tiangolo.com/tutorial/body/
Summary: This section explains how to declare both path parameters and a request body in FastAPI. It demonstrates that parameters matching the path will be taken from the path, while parameters defined as Pydantic models should be taken from the request body. An example is provided showing the use of FastAPI with Pydantic for an update operation.
---

```

## Request body + path parameters[Â¶](https://fastapi.tiangolo.com/tutorial/body/#request-body-path-parameters "Permanent link")
You can declare path parameters and request body at the same time.
**FastAPI** will recognize that the function parameters that match path parameters should be **taken from the path** , and that function parameters that are declared to be Pydantic models should be **taken from the request body**.
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/body/#__tabbed_9_1)
```
fromfastapiimport FastAPI
frompydanticimport BaseModel
classItem(BaseModel):
  name: str
  description: str | None = None
  price: float
  tax: float | None = None
app = FastAPI()
@app.put("/items/{item_id}")
async defupdate_item(item_id: int, item: Item):
  return {"item_id": item_id, **item.dict()}

```

ðŸ¤“ Other versions and variants
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/body/#__tabbed_10_1)
```
fromtypingimport Union
fromfastapiimport FastAPI
frompydanticimport BaseModel
classItem(BaseModel):
  name: str
  description: Union[str, None] = None
  price: float
  tax: Union[float, None] = None
app = FastAPI()
@app.put("/items/{item_id}")
async defupdate_item(item_id: int, item: Item):
  return {"item_id": item_id, **item.dict()}

```

## Request body + path + query parameters[Â¶](https://fastapi.tiangolo.com/tutorial/body/#request-body-path-query-parameters "Permanent link")
You can also declare **body** , **path** and **query** parameters, all at the same time.
**FastAPI** will recognize each of them and take the data from the correct place.
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/body/#__tabbed_11_1)
```
fromfastapiimport FastAPI
frompydanticimport BaseModel
classItem(BaseModel):
  name: str
  description: str | None = None
  price: float
  tax: float | None = None
app = FastAPI()
@app.put("/items/{item_id}")
async defupdate_item(item_id: int, item: Item, q: str | None = None):
  result = {"item_id": item_id, **item.dict()}
  if q:
    result.update({"q": q})
  return result

```

ðŸ¤“ Other versions and variants
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/body/#__tabbed_12_1)
```
fromtypingimport Union
fromfastapiimport FastAPI
frompydanticimport BaseModel
classItem(BaseModel):
  name: str
  description: Union[str, None] = None
  price: float
  tax: Union[float, None] = None
app = FastAPI()
@app.put("/items/{item_id}")
async defupdate_item(item_id: int, item: Item, q: Union[str, None] = None):
  result = {"item_id": item_id, **item.dict()}
  if q:
    result.update({"q": q})
  return result

```

The function parameters will be recognized as follows:
  * If the parameter is also declared in the **path** , it will be used as a path parameter.
  * If the parameter is of a **singular type** (like `int`, `float`, `str`, `bool`, etc) it will be interpreted as a **query** parameter.
  * If the parameter is declared to be of the type of a **Pydantic model** , it will be interpreted as a request **body**.


Note
FastAPI will know that the value of `q` is not required because of the default value `= None`.
The `str | None` (Python 3.10+) or `Union` in `Union[str, None]` (Python 3.8+) is not used by FastAPI to determine that the value is not required, it will know it's not required because it has a default value of `= None`.
But adding the type annotations will allow your editor to give you better support and detect errors.
## Without Pydantic[Â¶](https://fastapi.tiangolo.com/tutorial/body/#without-pydantic "Permanent link")
If you don't want to use Pydantic models, you can also use **Body** parameters. See the docs for [Body - Multiple Parameters: Singular values in body](https://fastapi.tiangolo.com/tutorial/body-multiple-params/#singular-values-in-body).
Was this page helpful? 
Thanks for your feedback! 
Thanks for your feedback! 
Back to top  [ Previous  Query Parameters  ](https://fastapi.tiangolo.com/tutorial/query-params/) [ Next  Query Parameters and String Validations  ](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/)
The FastAPI trademark is owned by [@tiangolo](https://tiangolo.com) and is registered in the US and across other regions 
Made with [ Material for MkDocs ](https://squidfunk.github.io/mkdocs-material/)
[ ](https://github.com/fastapi/fastapi "github.com") [ ](https://discord.gg/VQjSZaeJmf "discord.gg") [ ](https://twitter.com/fastapi "twitter.com") [ ](https://www.linkedin.com/in/tiangolo "www.linkedin.com") [ ](https://dev.to/tiangolo "dev.to") [ ](https://medium.com/@tiangolo "medium.com") [ ](https://tiangolo.com "tiangolo.com")
  *[UIs]: User Interfaces