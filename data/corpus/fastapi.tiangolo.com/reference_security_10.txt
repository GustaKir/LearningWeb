Title: Security in FastAPI: APIKeyModel
URL: https://fastapi.tiangolo.com/reference/security/
Summary: This section discusses the `APIKey` model in FastAPI, specifically focusing on how API keys can be utilized through cookies. It includes details about the model's instance attributes and references to OpenAPI models for further clarification.
---

```
  
---|---  
###  model `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.APIKeyCookie.model "Permanent link")
```
model = APIKey[](https://fastapi.tiangolo.com/reference/openapi/models/#fastapi.openapi.models.APIKey "<code class="doc-symbol doc-symbol-heading doc-symbol-class"></code>      <span class="doc doc-object-name doc-class-name">APIKey</span> \(<code>fastapi.openapi.models.APIKey</code>\)")(
  **{"in": cookie[](https://fastapi.tiangolo.com/reference/openapi/models/#fastapi.openapi.models.APIKeyIn.cookie "<code class="doc-symbol doc-symbol-heading doc-symbol-attribute"></code>      <span class="doc doc-object-name doc-attribute-name">cookie</span>

 <span class="doc doc-labels">
   <small class="doc doc-label doc-label-class-attribute"><code>class-attribute</code></small>
   <small class="doc doc-label doc-label-instance-attribute"><code>instance-attribute</code></small>
 </span> \(<code>fastapi.openapi.models.APIKeyIn.cookie</code>\)")}, name=name, description=description
)

```

###  scheme_name `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.APIKeyCookie.scheme_name "Permanent link")
```
scheme_name = scheme_name or __name__

```

###  auto_error `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.APIKeyCookie.auto_error "Permanent link")
```
auto_error = auto_error

```

###  check_api_key `staticmethod` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.APIKeyCookie.check_api_key "Permanent link")
```
check_api_key(api_key, auto_error)

```

PARAMETER | DESCRIPTION  
---|---  
`api_key` |  **TYPE:** `Optional[str]`  
`auto_error` |  **TYPE:** `bool`  
Source code in `fastapi/security/api_key.py`
```
12
13
14
15
16
17
18
19
20
```
| ```
@staticmethod
defcheck_api_key(api_key: Optional[str], auto_error: bool) -> Optional[str]:
  if not api_key:
    if auto_error:
      raise HTTPException(
        status_code=HTTP_403_FORBIDDEN, detail="Not authenticated"
      )
    return None
  return api_key

```
  
---|---  
##  fastapi.security.APIKeyHeader [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.APIKeyHeader "Permanent link")
```
APIKeyHeader(
  *,
  name,
  scheme_name=None,
  description=None,
  auto_error=True
)

```

Bases: `APIKeyBase`
API key authentication using a header.
This defines the name of the header that should be provided in the request with the API key and integrates that into the OpenAPI documentation. It extracts the key value sent in the header automatically and provides it as the dependency result. But it doesn't define how to send that key to the client.
#### Usage[¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.APIKeyHeader--usage "Permanent link")
Create an instance object and use that object as the dependency in `Depends()`.
The dependency result will be a string containing the key value.
#### Example[¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.APIKeyHeader--example "Permanent link")
```
fromfastapiimport Depends, FastAPI
fromfastapi.securityimport APIKeyHeader
app = FastAPI()
header_scheme = APIKeyHeader(name="x-key")
@app.get("/items/")
async defread_items(key: str = Depends(header_scheme)):
  return {"key": key}

```

PARAMETER | DESCRIPTION  
---|---  
`name` |  Header name. **TYPE:** `str`  
`scheme_name` |  Security scheme name. It will be included in the generated OpenAPI (e.g. visible at `/docs`). **TYPE:** `Optional[str]` **DEFAULT:** `None`  
`description` |  Security scheme description. It will be included in the generated OpenAPI (e.g. visible at `/docs`). **TYPE:** `Optional[str]` **DEFAULT:** `None`  
`auto_error` |  By default, if the header is not provided, `APIKeyHeader` will automatically cancel the request and send the client an error. If `auto_error` is set to `False`, when the header is not available, instead of erroring out, the dependency result will be `None`. This is useful when you want to have optional authentication. It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in a header or in an HTTP Bearer token). **TYPE:** `bool` **DEFAULT:** `True`  
Source code in `fastapi/security/api_key.py`
```
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
```
|