Title: Understanding the JWT 'sub' Claim
URL: https://fastapi.tiangolo.com/tutorial/security/oauth2-jwt/
Summary: This section explains the 'sub' claim in JWT, which represents the subject of the token. Although optional, it is commonly used to identify a user. The text discusses alternative uses of JWT, such as identifying other entities like cars or blog posts and granting specific permissions without requiring user accounts.
---

```

### Technical details about the JWT "subject" `sub`[¶](https://fastapi.tiangolo.com/tutorial/security/oauth2-jwt/#technical-details-about-the-jwt-subject-sub "Permanent link")
The JWT specification says that there's a key `sub`, with the subject of the token.
It's optional to use it, but that's where you would put the user's identification, so we are using it here.
JWT might be used for other things apart from identifying a user and allowing them to perform operations directly on your API.
For example, you could identify a "car" or a "blog post".
Then you could add permissions about that entity, like "drive" (for the car) or "edit" (for the blog).
And then, you could give that JWT token to a user (or bot), and they could use it to perform those actions (drive the car, or edit the blog post) without even needing to have an account, just with the JWT token your API generated for that.
Using these ideas, JWT can be used for way more sophisticated scenarios.
In those cases, several of those entities could have the same ID, let's say `foo` (a user `foo`, a car `foo`, and a blog post `foo`).
So, to avoid ID collisions, when creating the JWT token for the user, you could prefix the value of the `sub` key, e.g. with `username:`. So, in this example, the value of `sub` could have been: `username:johndoe`.
The important thing to keep in mind is that the `sub` key should have a unique identifier across the entire application, and it should be a string.
## Check it[¶](https://fastapi.tiangolo.com/tutorial/security/oauth2-jwt/#check-it "Permanent link")
Run the server and go to the docs: <http://127.0.0.1:8000/docs>.
You'll see the user interface like:
![](https://fastapi.tiangolo.com/img/tutorial/security/image07.png)
Authorize the application the same way as before.
Using the credentials:
Username: `johndoe` Password: `secret`
Check
Notice that nowhere in the code is the plaintext password "`secret`", we only have the hashed version.
![](https://fastapi.tiangolo.com/img/tutorial/security/image08.png)
Call the endpoint `/users/me/`, you will get the response as:
```
{
"username":"johndoe",
"email":"johndoe@example.com",
"full_name":"John Doe",
"disabled":false
}