Title: Using Advanced Dependencies in FastAPI
URL: https://fastapi.tiangolo.com/advanced/advanced-dependencies/
Summary: This section demonstrates how to create and use an advanced dependency in FastAPI by implementing a class that checks for fixed content in query parameters. An example is provided, showcasing how to utilize the `Depends` function to inject the dependency into a route handler.
---

```
fromfastapiimport Depends, FastAPI
app = FastAPI()
classFixedContentQueryChecker:
  def__init__(self, fixed_content: str):
    self.fixed_content = fixed_content
  def__call__(self, q: str = ""):
    if q:
      return self.fixed_content in q
    return False
checker = FixedContentQueryChecker("bar")
@app.get("/query-checker/")
async defread_query_check(fixed_content_included: bool = Depends(checker)):
  return {"fixed_content_in_query": fixed_content_included}

```

In this case, **FastAPI** won't ever touch or care about `__init__`, we will use it directly in our code.
## Create an instance[Â¶](https://fastapi.tiangolo.com/advanced/advanced-dependencies/#create-an-instance "Permanent link")
We could create an instance of this class with:
[Python 3.9+](https://fastapi.tiangolo.com/advanced/advanced-dependencies/#__tabbed_5_1)
```
fromtypingimport Annotated
fromfastapiimport Depends, FastAPI
app = FastAPI()
classFixedContentQueryChecker:
  def__init__(self, fixed_content: str):
    self.fixed_content = fixed_content
  def__call__(self, q: str = ""):
    if q:
      return self.fixed_content in q
    return False
checker = FixedContentQueryChecker("bar")
@app.get("/query-checker/")
async defread_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):
  return {"fixed_content_in_query": fixed_content_included}

```

ðŸ¤“ Other versions and variants
[Python 3.8+](https://fastapi.tiangolo.com/advanced/advanced-dependencies/#__tabbed_6_1)[Python 3.8+ - non-Annotated](https://fastapi.tiangolo.com/advanced/advanced-dependencies/#__tabbed_6_2)
```
fromfastapiimport Depends, FastAPI
fromtyping_extensionsimport Annotated
app = FastAPI()
classFixedContentQueryChecker:
  def__init__(self, fixed_content: str):
    self.fixed_content = fixed_content
  def__call__(self, q: str = ""):
    if q:
      return self.fixed_content in q
    return False
checker = FixedContentQueryChecker("bar")
@app.get("/query-checker/")
async defread_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):
  return {"fixed_content_in_query": fixed_content_included}

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromfastapiimport Depends, FastAPI
app = FastAPI()
classFixedContentQueryChecker:
  def__init__(self, fixed_content: str):
    self.fixed_content = fixed_content
  def__call__(self, q: str = ""):
    if q:
      return self.fixed_content in q
    return False
checker = FixedContentQueryChecker("bar")
@app.get("/query-checker/")
async defread_query_check(fixed_content_included: bool = Depends(checker)):
  return {"fixed_content_in_query": fixed_content_included}

```

And that way we are able to "parameterize" our dependency, that now has `"bar"` inside of it, as the attribute `checker.fixed_content`.
## Use the instance as a dependency[Â¶](https://fastapi.tiangolo.com/advanced/advanced-dependencies/#use-the-instance-as-a-dependency "Permanent link")
Then, we could use this `checker` in a `Depends(checker)`, instead of `Depends(FixedContentQueryChecker)`, because the dependency is the instance, `checker`, not the class itself.
And when solving the dependency, **FastAPI** will call this `checker` like:
```
checker(q="somequery")

```

...and pass whatever that returns as the value of the dependency in our _path operation function_ as the parameter `fixed_content_included`:
[Python 3.9+](https://fastapi.tiangolo.com/advanced/advanced-dependencies/#__tabbed_7_1)
```
fromtypingimport Annotated
fromfastapiimport Depends, FastAPI
app = FastAPI()
classFixedContentQueryChecker:
  def__init__(self, fixed_content: str):
    self.fixed_content = fixed_content
  def__call__(self, q: str = ""):
    if q:
      return self.fixed_content in q
    return False
checker = FixedContentQueryChecker("bar")
@app.get("/query-checker/")
async defread_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):
  return {"fixed_content_in_query": fixed_content_included}

```

ðŸ¤“ Other versions and variants
[Python 3.8+](https://fastapi.tiangolo.com/advanced/advanced-dependencies/#__tabbed_8_1)[Python 3.8+ - non-Annotated](https://fastapi.tiangolo.com/advanced/advanced-dependencies/#__tabbed_8_2)
```
fromfastapiimport Depends, FastAPI
fromtyping_extensionsimport Annotated
app = FastAPI()
classFixedContentQueryChecker:
  def__init__(self, fixed_content: str):
    self.fixed_content = fixed_content
  def__call__(self, q: str = ""):
    if q:
      return self.fixed_content in q
    return False
checker = FixedContentQueryChecker("bar")
@app.get("/query-checker/")
async defread_query_check(fixed_content_included: Annotated[bool, Depends(checker)]):
  return {"fixed_content_in_query": fixed_content_included}

```

Tip
Prefer to use the `Annotated` version if possible.