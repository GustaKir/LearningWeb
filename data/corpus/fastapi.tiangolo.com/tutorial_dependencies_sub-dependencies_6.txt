Title: Using Sub-Dependencies in FastAPI
URL: https://fastapi.tiangolo.com/tutorial/dependencies/sub-dependencies/
Summary: This document outlines how to implement sub-dependencies in FastAPI using the `Depends` function and `Annotated` types. It provides code snippets demonstrating the creation of query and cookie extractors, and shows how to use these dependencies in an endpoint to manage request parameters efficiently.
---

```
fromtypingimport Union
fromfastapiimport Cookie, Depends, FastAPI
fromtyping_extensionsimport Annotated
app = FastAPI()
defquery_extractor(q: Union[str, None] = None):
  return q
defquery_or_cookie_extractor(
  q: Annotated[str, Depends(query_extractor)],
  last_query: Annotated[Union[str, None], Cookie()] = None,
):
  if not q:
    return last_query
  return q
@app.get("/items/")
async defread_query(
  query_or_default: Annotated[str, Depends(query_or_cookie_extractor)],
):
  return {"q_or_cookie": query_or_default}

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromfastapiimport Cookie, Depends, FastAPI
app = FastAPI()
defquery_extractor(q: str | None = None):
  return q
defquery_or_cookie_extractor(
  q: str = Depends(query_extractor), last_query: str | None = Cookie(default=None)
):
  if not q:
    return last_query
  return q
@app.get("/items/")
async defread_query(query_or_default: str = Depends(query_or_cookie_extractor)):
  return {"q_or_cookie": query_or_default}

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromtypingimport Union
fromfastapiimport Cookie, Depends, FastAPI
app = FastAPI()
defquery_extractor(q: Union[str, None] = None):
  return q
defquery_or_cookie_extractor(
  q: str = Depends(query_extractor),
  last_query: Union[str, None] = Cookie(default=None),
):
  if not q:
    return last_query
  return q
@app.get("/items/")
async defread_query(query_or_default: str = Depends(query_or_cookie_extractor)):
  return {"q_or_cookie": query_or_default}

```

Info
Notice that we are only declaring one dependency in the _path operation function_ , the `query_or_cookie_extractor`.
But **FastAPI** will know that it has to solve `query_extractor` first, to pass the results of that to `query_or_cookie_extractor` while calling it.
```
graph TB
query_extractor(["query_extractor"])
query_or_cookie_extractor(["query_or_cookie_extractor"])
read_query["/items/"]
query_extractor --> query_or_cookie_extractor --> read_query
```

## Using the same dependency multiple times[¶](https://fastapi.tiangolo.com/tutorial/dependencies/sub-dependencies/#using-the-same-dependency-multiple-times "Permanent link")
If one of your dependencies is declared multiple times for the same _path operation_ , for example, multiple dependencies have a common sub-dependency, **FastAPI** will know to call that sub-dependency only once per request.
And it will save the returned value in a "cache" and pass it to all the "dependants" that need it in that specific request, instead of calling the dependency multiple times for the same request.
In an advanced scenario where you know you need the dependency to be called at every step (possibly multiple times) in the same request instead of using the "cached" value, you can set the parameter `use_cache=False` when using `Depends`:
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/dependencies/sub-dependencies/#__tabbed_7_1)[Python 3.8+ non-Annotated](https://fastapi.tiangolo.com/tutorial/dependencies/sub-dependencies/#__tabbed_7_2)
```
async defneedy_dependency(fresh_value: Annotated[str, Depends(get_value, use_cache=False)]):
  return {"fresh_value": fresh_value}

```

Tip
Prefer to use the `Annotated` version if possible.
```
async defneedy_dependency(fresh_value: str = Depends(get_value, use_cache=False)):
  return {"fresh_value": fresh_value}

```

## Recap[¶](https://fastapi.tiangolo.com/tutorial/dependencies/sub-dependencies/#recap "Permanent link")
Apart from all the fancy words used here, the **Dependency Injection** system is quite simple.
Just functions that look the same as the _path operation functions_.
But still, it is very powerful, and allows you to declare arbitrarily deeply nested dependency "graphs" (trees).
Tip
All this might not seem as useful with these simple examples.
But you will see how useful it is in the chapters about **security**.
And you will also see the amounts of code it will save you.
Was this page helpful? 
Thanks for your feedback! 
Thanks for your feedback! 
Back to top  [ Previous  Classes as Dependencies  ](https://fastapi.tiangolo.com/tutorial/dependencies/classes-as-dependencies/) [ Next  Dependencies in path operation decorators  ](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/)
The FastAPI trademark is owned by [@tiangolo](https://tiangolo.com) and is registered in the US and across other regions 
Made with [ Material for MkDocs ](https://squidfunk.github.io/mkdocs-material/)
[ ](https://github.com/fastapi/fastapi "github.com") [ ](https://discord.gg/VQjSZaeJmf "discord.gg") [ ](https://twitter.com/fastapi "twitter.com") [ ](https://www.linkedin.com/in/tiangolo "www.linkedin.com") [ ](https://dev.to/tiangolo "dev.to") [ ](https://medium.com/@tiangolo "medium.com") [ ](https://tiangolo.com "tiangolo.com")
  *["cache"]: A utility/system to store computed/generated values, to reuse them instead of computing them again.