Title: Virtual Environments in Python Projects
URL: https://fastapi.tiangolo.com/virtual-environments/
Summary: This section explains the importance of using virtual environments in Python projects to isolate installed packages. It differentiates between virtual environments and environment variables and provides a brief introduction to managing packages. Additionally, it suggests using the tool 'uv' for comprehensive project management.
---

# Virtual Environments[Â¶](https://fastapi.tiangolo.com/virtual-environments/#virtual-environments "Permanent link")
When you work in Python projects you probably should use a **virtual environment** (or a similar mechanism) to isolate the packages you install for each project.
Info
If you already know about virtual environments, how to create them and use them, you might want to skip this section. ðŸ¤“
Tip
A **virtual environment** is different than an **environment variable**.
An **environment variable** is a variable in the system that can be used by programs.
A **virtual environment** is a directory with some files in it.
Info
This page will teach you how to use **virtual environments** and how they work.
If you are ready to adopt a **tool that manages everything** for you (including installing Python), try [uv](https://github.com/astral-sh/uv).
## Create a Project[Â¶](https://fastapi.tiangolo.com/virtual-environments/#create-a-project "Permanent link")
First, create a directory for your project.
What I normally do is that I create a directory named `code` inside my home/user directory.
And inside of that I create one directory per project.
```

fast â†’[](https://fastapi.tiangolo.com/virtual-environments/)ðŸ’¬ Go to the home directorycdðŸ’¬ Create a directory for all your code projectsmkdir codeðŸ’¬ Enter into that code directorycd codeðŸ’¬ Create a directory for this projectmkdir awesome-projectðŸ’¬ Enter into that project directorycd awesome-projectrestart â†»[](https://fastapi.tiangolo.com/virtual-environments/)

```

## Create a Virtual Environment[Â¶](https://fastapi.tiangolo.com/virtual-environments/#create-a-virtual-environment "Permanent link")
When you start working on a Python project **for the first time** , create a virtual environment **inside your project**.
Tip
You only need to do this **once per project** , not every time you work.
[`venv`](https://fastapi.tiangolo.com/virtual-environments/#__tabbed_1_1)[`uv`](https://fastapi.tiangolo.com/virtual-environments/#__tabbed_1_2)
To create a virtual environment, you can use the `venv` module that comes with Python.
```

fast â†’[](https://fastapi.tiangolo.com/virtual-environments/)python -m venv .venvrestart â†»[](https://fastapi.tiangolo.com/virtual-environments/)

```

What that command means
  * `python`: use the program called `python`
  * `-m`: call a module as a script, we'll tell it which module next
  * `venv`: use the module called `venv` that normally comes installed with Python
  * `.venv`: create the virtual environment in the new directory `.venv`


If you have [`uv`](https://github.com/astral-sh/uv) installed, you can use it to create a virtual environment.
```

fast â†’[](https://fastapi.tiangolo.com/virtual-environments/)

```

Tip
By default, `uv` will create a virtual environment in a directory called `.venv`.
But you could customize it passing an additional argument with the directory name.
That command creates a new virtual environment in a directory called `.venv`.
`.venv` or other name
You could create the virtual environment in a different directory, but there's a convention of calling it `.venv`.
## Activate the Virtual Environment[Â¶](https://fastapi.tiangolo.com/virtual-environments/#activate-the-virtual-environment "Permanent link")
Activate the new virtual environment so that any Python command you run or package you install uses it.
Tip
Do this **every time** you start a **new terminal session** to work on the project.
[Linux, macOS](https://fastapi.tiangolo.com/virtual-environments/#__tabbed_2_1)[Windows PowerShell](https://fastapi.tiangolo.com/virtual-environments/#__tabbed_2_2)[Windows Bash](https://fastapi.tiangolo.com/virtual-environments/#__tabbed_2_3)
```

fast â†’[](https://fastapi.tiangolo.com/virtual-environments/)source .venv/bin/activaterestart â†»[](https://fastapi.tiangolo.com/virtual-environments/)

```

```

fast â†’[](https://fastapi.tiangolo.com/virtual-environments/)

```

Or if you use Bash for Windows (e.g. [Git Bash](https://gitforwindows.org/)):
```

fast â†’[](https://fastapi.tiangolo.com/virtual-environments/)

```

Tip
Every time you install a **new package** in that environment, **activate** the environment again.
This makes sure that if you use a **terminal ( CLI) program** installed by that package, you use the one from your virtual environment and not any other that could be installed globally, probably with a different version than what you need.
## Check the Virtual Environment is Active[Â¶](https://fastapi.tiangolo.com/virtual-environments/#check-the-virtual-environment-is-active "Permanent link")
Check that the virtual environment is active (the previous command worked).
Tip
This is **optional** , but it's a good way to **check** that everything is working as expected and you are using the virtual environment you intended.
[Linux, macOS, Windows Bash](https://fastapi.tiangolo.com/virtual-environments/#__tabbed_3_1)[Windows PowerShell](https://fastapi.tiangolo.com/virtual-environments/#__tabbed_3_2)