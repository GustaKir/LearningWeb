Title: Understanding Environment Variables
URL: https://fastapi.tiangolo.com/environment-variables/
Summary: This document introduces environment variables, defining them as external variables to the Python code that reside in the operating system. It explains their usefulness for managing application settings and installation processes. Additionally, it provides instructions on how to create and use environment variables directly in the shell across different operating systems.
---

# Environment Variables[¶](https://fastapi.tiangolo.com/environment-variables/#environment-variables "Permanent link")
Tip
If you already know what "environment variables" are and how to use them, feel free to skip this.
An environment variable (also known as "**env var** ") is a variable that lives **outside** of the Python code, in the **operating system** , and could be read by your Python code (or by other programs as well).
Environment variables could be useful for handling application **settings** , as part of the **installation** of Python, etc.
## Create and Use Env Vars[¶](https://fastapi.tiangolo.com/environment-variables/#create-and-use-env-vars "Permanent link")
You can **create** and use environment variables in the **shell (terminal)** , without needing Python:
[Linux, macOS, Windows Bash](https://fastapi.tiangolo.com/environment-variables/#__tabbed_1_1)[Windows PowerShell](https://fastapi.tiangolo.com/environment-variables/#__tabbed_1_2)
```

fast →[](https://fastapi.tiangolo.com/environment-variables/)💬 You could create an env var MY_NAME withexport MY_NAME="Wade Wilson"💬 Then you could use it with other programs, likeecho "Hello $MY_NAME"Hello Wade Wilsonrestart ↻[](https://fastapi.tiangolo.com/environment-variables/)

```

```

fast →[](https://fastapi.tiangolo.com/environment-variables/)

```

## Read env vars in Python[¶](https://fastapi.tiangolo.com/environment-variables/#read-env-vars-in-python "Permanent link")
You could also create environment variables **outside** of Python, in the terminal (or with any other method), and then **read them in Python**.
For example you could have a file `main.py` with:
```
importos
name = os.getenv("MY_NAME", "World")
print(f"Hello {name} from Python")

```

Tip
The second argument to [`os.getenv()`](https://docs.python.org/3.8/library/os.html#os.getenv) is the default value to return.
If not provided, it's `None` by default, here we provide `"World"` as the default value to use.
Then you could call that Python program:
[Linux, macOS, Windows Bash](https://fastapi.tiangolo.com/environment-variables/#__tabbed_2_1)[Windows PowerShell](https://fastapi.tiangolo.com/environment-variables/#__tabbed_2_2)
```

fast →[](https://fastapi.tiangolo.com/environment-variables/)💬 Here we don't set the env var yetpython main.py💬 As we didn't set the env var, we get the default valueHello World from Python💬 But if we create an environment variable firstexport MY_NAME="Wade Wilson"💬 And then call the program againpython main.py💬 Now it can read the environment variableHello Wade Wilson from Pythonrestart ↻[](https://fastapi.tiangolo.com/environment-variables/)

```

```

fast →[](https://fastapi.tiangolo.com/environment-variables/)

```

As environment variables can be set outside of the code, but can be read by the code, and don't have to be stored (committed to `git`) with the rest of the files, it's common to use them for configurations or **settings**.
You can also create an environment variable only for a **specific program invocation** , that is only available to that program, and only for its duration.
To do that, create it right before the program itself, on the same line:
```

fast →[](https://fastapi.tiangolo.com/environment-variables/)💬 Create an env var MY_NAME in line for this program callMY_NAME="Wade Wilson" python main.py💬 Now it can read the environment variableHello Wade Wilson from Python💬 The env var no longer exists afterwardspython main.pyHello World from Pythonrestart ↻[](https://fastapi.tiangolo.com/environment-variables/)