Title: Body Updates in FastAPI
URL: https://fastapi.tiangolo.com/tutorial/body-updates/
Summary: This section covers how to update resources in FastAPI using `PUT` for complete replacements and `PATCH` for partial updates. It includes warnings about replacing data with `PUT` and details on using Pydantic's `exclude_unset` and `update` parameters for efficient patching.
---

Table of contents 
  * [ Update replacing with `PUT` ](https://fastapi.tiangolo.com/tutorial/body-updates/#update-replacing-with-put)
    * [ Warning about replacing  ](https://fastapi.tiangolo.com/tutorial/body-updates/#warning-about-replacing)
  * [ Partial updates with `PATCH` ](https://fastapi.tiangolo.com/tutorial/body-updates/#partial-updates-with-patch)
    * [ Using Pydantic's `exclude_unset` parameter  ](https://fastapi.tiangolo.com/tutorial/body-updates/#using-pydantics-exclude_unset-parameter)
    * [ Using Pydantic's `update` parameter  ](https://fastapi.tiangolo.com/tutorial/body-updates/#using-pydantics-update-parameter)
    * [ Partial updates recap  ](https://fastapi.tiangolo.com/tutorial/body-updates/#partial-updates-recap)


  1. [ FastAPI  ](https://fastapi.tiangolo.com/)
  2. [ Learn  ](https://fastapi.tiangolo.com/learn/)
  3. [ Tutorial - User Guide  ](https://fastapi.tiangolo.com/tutorial/)


# Body - Updates[Â¶](https://fastapi.tiangolo.com/tutorial/body-updates/#body-updates "Permanent link")
## Update replacing with `PUT`[Â¶](https://fastapi.tiangolo.com/tutorial/body-updates/#update-replacing-with-put "Permanent link")
To update an item you can use the [HTTP `PUT`](https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/PUT) operation.
You can use the `jsonable_encoder` to convert the input data to data that can be stored as JSON (e.g. with a NoSQL database). For example, converting `datetime` to `str`.
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/body-updates/#__tabbed_1_1)
```
fromfastapiimport FastAPI
fromfastapi.encodersimport jsonable_encoder
frompydanticimport BaseModel
app = FastAPI()
classItem(BaseModel):
  name: str | None = None
  description: str | None = None
  price: float | None = None
  tax: float = 10.5
  tags: list[str] = []
items = {
  "foo": {"name": "Foo", "price": 50.2},
  "bar": {"name": "Bar", "description": "The bartenders", "price": 62, "tax": 20.2},
  "baz": {"name": "Baz", "description": None, "price": 50.2, "tax": 10.5, "tags": []},
}
@app.get("/items/{item_id}", response_model=Item)
async defread_item(item_id: str):
  return items[item_id]
@app.put("/items/{item_id}", response_model=Item)
async defupdate_item(item_id: str, item: Item):
  update_item_encoded = jsonable_encoder(item)
  items[item_id] = update_item_encoded
  return update_item_encoded

```

ðŸ¤“ Other versions and variants
[Python 3.9+](https://fastapi.tiangolo.com/tutorial/body-updates/#__tabbed_2_1)[Python 3.8+](https://fastapi.tiangolo.com/tutorial/body-updates/#__tabbed_2_2)
```
fromtypingimport Union
fromfastapiimport FastAPI
fromfastapi.encodersimport jsonable_encoder
frompydanticimport BaseModel
app = FastAPI()
classItem(BaseModel):
  name: Union[str, None] = None
  description: Union[str, None] = None
  price: Union[float, None] = None
  tax: float = 10.5
  tags: list[str] = []
items = {
  "foo": {"name": "Foo", "price": 50.2},
  "bar": {"name": "Bar", "description": "The bartenders", "price": 62, "tax": 20.2},
  "baz": {"name": "Baz", "description": None, "price": 50.2, "tax": 10.5, "tags": []},
}
@app.get("/items/{item_id}", response_model=Item)
async defread_item(item_id: str):
  return items[item_id]
@app.put("/items/{item_id}", response_model=Item)
async defupdate_item(item_id: str, item: Item):
  update_item_encoded = jsonable_encoder(item)
  items[item_id] = update_item_encoded
  return update_item_encoded

```

```
fromtypingimport List, Union
fromfastapiimport FastAPI
fromfastapi.encodersimport jsonable_encoder
frompydanticimport BaseModel
app = FastAPI()
classItem(BaseModel):
  name: Union[str, None] = None
  description: Union[str, None] = None
  price: Union[float, None] = None
  tax: float = 10.5
  tags: List[str] = []
items = {
  "foo": {"name": "Foo", "price": 50.2},
  "bar": {"name": "Bar", "description": "The bartenders", "price": 62, "tax": 20.2},
  "baz": {"name": "Baz", "description": None, "price": 50.2, "tax": 10.5, "tags": []},
}
@app.get("/items/{item_id}", response_model=Item)
async defread_item(item_id: str):
  return items[item_id]
@app.put("/items/{item_id}", response_model=Item)
async defupdate_item(item_id: str, item: Item):
  update_item_encoded = jsonable_encoder(item)
  items[item_id] = update_item_encoded
  return update_item_encoded

```

`PUT` is used to receive data that should replace the existing data.
### Warning about replacing[Â¶](https://fastapi.tiangolo.com/tutorial/body-updates/#warning-about-replacing "Permanent link")
That means that if you want to update the item `bar` using `PUT` with a body containing:
```
{
  "name": "Barz",
  "price": 3,
  "description": None,
}