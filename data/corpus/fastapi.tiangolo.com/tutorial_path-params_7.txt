Title: Using Enumerations in FastAPI Path Parameters
URL: https://fastapi.tiangolo.com/tutorial/path-params/
Summary: This section explains how to access enumeration members in FastAPI path operations. It demonstrates returning enum values from a path operation, highlighting that they will be converted to strings in the response. A code example is provided, showing how to define enums and utilize them in a FastAPI endpoint.
---

```

Tip
You could also access the value `"lenet"` with `ModelName.lenet.value`.
#### Return _enumeration members_[¶](https://fastapi.tiangolo.com/tutorial/path-params/#return-enumeration-members "Permanent link")
You can return _enum members_ from your _path operation_ , even nested in a JSON body (e.g. a `dict`).
They will be converted to their corresponding values (strings in this case) before returning them to the client:
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/path-params/#__tabbed_9_1)
```
fromenumimport Enum
fromfastapiimport FastAPI
classModelName(str, Enum):
  alexnet = "alexnet"
  resnet = "resnet"
  lenet = "lenet"
app = FastAPI()
@app.get("/models/{model_name}")
async defget_model(model_name: ModelName):
  if model_name is ModelName.alexnet:
    return {"model_name": model_name, "message": "Deep Learning FTW!"}
  if model_name.value == "lenet":
    return {"model_name": model_name, "message": "LeCNN all the images"}
  return {"model_name": model_name, "message": "Have some residuals"}

```

In your client you will get a JSON response like:
```
{
"model_name":"alexnet",
"message":"Deep Learning FTW!"
}

```

## Path parameters containing paths[¶](https://fastapi.tiangolo.com/tutorial/path-params/#path-parameters-containing-paths "Permanent link")
Let's say you have a _path operation_ with a path `/files/{file_path}`.
But you need `file_path` itself to contain a _path_ , like `home/johndoe/myfile.txt`.
So, the URL for that file would be something like: `/files/home/johndoe/myfile.txt`.
### OpenAPI support[¶](https://fastapi.tiangolo.com/tutorial/path-params/#openapi-support "Permanent link")
OpenAPI doesn't support a way to declare a _path parameter_ to contain a _path_ inside, as that could lead to scenarios that are difficult to test and define.
Nevertheless, you can still do it in **FastAPI** , using one of the internal tools from Starlette.
And the docs would still work, although not adding any documentation telling that the parameter should contain a path.
### Path convertor[¶](https://fastapi.tiangolo.com/tutorial/path-params/#path-convertor "Permanent link")
Using an option directly from Starlette you can declare a _path parameter_ containing a _path_ using a URL like:
```
/files/{file_path:path}

```

In this case, the name of the parameter is `file_path`, and the last part, `:path`, tells it that the parameter should match any _path_.
So, you can use it with:
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/path-params/#__tabbed_10_1)
```
fromfastapiimport FastAPI
app = FastAPI()
@app.get("/files/{file_path:path}")
async defread_file(file_path: str):
  return {"file_path": file_path}

```

Tip
You could need the parameter to contain `/home/johndoe/myfile.txt`, with a leading slash (`/`).
In that case, the URL would be: `/files//home/johndoe/myfile.txt`, with a double slash (`//`) between `files` and `home`.
## Recap[¶](https://fastapi.tiangolo.com/tutorial/path-params/#recap "Permanent link")
With **FastAPI** , by using short, intuitive and standard Python type declarations, you get:
  * Editor support: error checks, autocompletion, etc.
  * Data "parsing"
  * Data validation
  * API annotation and automatic documentation


And you only have to declare them once.
That's probably the main visible advantage of **FastAPI** compared to alternative frameworks (apart from the raw performance).
Was this page helpful? 
Thanks for your feedback! 
Thanks for your feedback! 
Back to top  [ Previous  First Steps  ](https://fastapi.tiangolo.com/tutorial/first-steps/) [ Next  Query Parameters  ](https://fastapi.tiangolo.com/tutorial/query-params/)
The FastAPI trademark is owned by [@tiangolo](https://tiangolo.com) and is registered in the US and across other regions 
Made with [ Material for MkDocs ](https://squidfunk.github.io/mkdocs-material/)
[ ](https://github.com/fastapi/fastapi "github.com") [ ](https://discord.gg/VQjSZaeJmf "discord.gg") [ ](https://twitter.com/fastapi "twitter.com") [ ](https://www.linkedin.com/in/tiangolo "www.linkedin.com") [ ](https://dev.to/tiangolo "dev.to") [ ](https://medium.com/@tiangolo "medium.com") [ ](https://tiangolo.com "tiangolo.com")
  *[conversion]: also known as: serialization, parsing, marshalling
  *["parsing"]: converting the string that comes from an HTTP request into Python data
  *[`Enum`]: Enumeration
  *[models]: Technically, Deep Learning model architectures
  *[parsing]: converting the string that comes from an HTTP request into Python data