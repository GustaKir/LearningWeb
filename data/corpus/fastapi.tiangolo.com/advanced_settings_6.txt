Title: Configuring FastAPI Settings with Environment Variables
URL: https://fastapi.tiangolo.com/advanced/settings/
Summary: This section demonstrates how to configure FastAPI by using environment variables through the Pydantic Settings module. It includes a code example defining a Settings class that holds app configurations, followed by instructions on running the server with specific environment variables.
---

```
fromfastapiimport FastAPI
frompydantic_settingsimport BaseSettings
classSettings(BaseSettings):
  app_name: str = "Awesome API"
  admin_email: str
  items_per_user: int = 50
settings = Settings()
app = FastAPI()
@app.get("/info")
async definfo():
  return {
    "app_name": settings.app_name,
    "admin_email": settings.admin_email,
    "items_per_user": settings.items_per_user,
  }

```

### Run the server[¶](https://fastapi.tiangolo.com/advanced/settings/#run-the-server "Permanent link")
Next, you would run the server passing the configurations as environment variables, for example you could set an `ADMIN_EMAIL` and `APP_NAME` with:
```

fast →[](https://fastapi.tiangolo.com/advanced/settings/)ADMIN_EMAIL="deadpool@example.com" APP_NAME="ChimichangApp" fastapi run main.pyINFO:   Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)restart ↻[](https://fastapi.tiangolo.com/advanced/settings/)

```

Tip
To set multiple env vars for a single command just separate them with a space, and put them all before the command.
And then the `admin_email` setting would be set to `"deadpool@example.com"`.
The `app_name` would be `"ChimichangApp"`.
And the `items_per_user` would keep its default value of `50`.
## Settings in another module[¶](https://fastapi.tiangolo.com/advanced/settings/#settings-in-another-module "Permanent link")
You could put those settings in another module file as you saw in [Bigger Applications - Multiple Files](https://fastapi.tiangolo.com/tutorial/bigger-applications/).
For example, you could have a file `config.py` with:
[Python 3.8+](https://fastapi.tiangolo.com/advanced/settings/#__tabbed_5_1)
```
frompydantic_settingsimport BaseSettings
classSettings(BaseSettings):
  app_name: str = "Awesome API"
  admin_email: str
  items_per_user: int = 50
settings = Settings()

```

And then use it in a file `main.py`:
[Python 3.8+](https://fastapi.tiangolo.com/advanced/settings/#__tabbed_6_1)
```
fromfastapiimport FastAPI
from.configimport settings
app = FastAPI()
@app.get("/info")
async definfo():
  return {
    "app_name": settings.app_name,
    "admin_email": settings.admin_email,
    "items_per_user": settings.items_per_user,
  }

```

Tip
You would also need a file `__init__.py` as you saw in [Bigger Applications - Multiple Files](https://fastapi.tiangolo.com/tutorial/bigger-applications/).
## Settings in a dependency[¶](https://fastapi.tiangolo.com/advanced/settings/#settings-in-a-dependency "Permanent link")
In some occasions it might be useful to provide the settings from a dependency, instead of having a global object with `settings` that is used everywhere.
This could be especially useful during testing, as it's very easy to override a dependency with your own custom settings.
### The config file[¶](https://fastapi.tiangolo.com/advanced/settings/#the-config-file "Permanent link")
Coming from the previous example, your `config.py` file could look like:
[Python 3.8+](https://fastapi.tiangolo.com/advanced/settings/#__tabbed_7_1)
```
frompydantic_settingsimport BaseSettings
classSettings(BaseSettings):
  app_name: str = "Awesome API"
  admin_email: str
  items_per_user: int = 50

```

Notice that now we don't create a default instance `settings = Settings()`.
### The main app file[¶](https://fastapi.tiangolo.com/advanced/settings/#the-main-app-file "Permanent link")
Now we create a dependency that returns a new `config.Settings()`.
[Python 3.8+](https://fastapi.tiangolo.com/advanced/settings/#__tabbed_8_1)
```
fromfunctoolsimport lru_cache
fromtypingimport Annotated
fromfastapiimport Depends, FastAPI
from.configimport Settings
app = FastAPI()
@lru_cache
defget_settings():
  return Settings()
@app.get("/info")
async definfo(settings: Annotated[Settings, Depends(get_settings)]):
  return {
    "app_name": settings.app_name,
    "admin_email": settings.admin_email,
    "items_per_user": settings.items_per_user,
  }

```

Tip
We'll discuss the `@lru_cache` in a bit.
For now you can assume `get_settings()` is a normal function.
And then we can require it from the _path operation function_ as a dependency and use it anywhere we need it.
[Python 3.8+](https://fastapi.tiangolo.com/advanced/settings/#__tabbed_9_1)
```
fromfunctoolsimport lru_cache
fromtypingimport Annotated
fromfastapiimport Depends, FastAPI
from.configimport Settings
app = FastAPI()
@lru_cache
defget_settings():
  return Settings()
@app.get("/info")
async definfo(settings: Annotated[Settings, Depends(get_settings)]):
  return {
    "app_name": settings.app_name,
    "admin_email": settings.admin_email,
    "items_per_user": settings.items_per_user,
  }

```

### Settings and testing[¶](https://fastapi.tiangolo.com/advanced/settings/#settings-and-testing "Permanent link")
Then it would be very easy to provide a different settings object during testing by creating a dependency override for `get_settings`:
[Python 3.8+](https://fastapi.tiangolo.com/advanced/settings/#__tabbed_10_1)