Title: Advanced Usage of OAuth2 with JWT in FastAPI
URL: https://fastapi.tiangolo.com/tutorial/security/oauth2-jwt/
Summary: This section discusses how to utilize OAuth2 scopes to assign specific permissions to JWT tokens in FastAPI. It highlights that the password is only sent once during user authentication and explains the importance of the 'Bearer' token in subsequent requests.
---

```

![](https://fastapi.tiangolo.com/img/tutorial/security/image09.png)
If you open the developer tools, you could see how the data sent only includes the token, the password is only sent in the first request to authenticate the user and get that access token, but not afterwards:
![](https://fastapi.tiangolo.com/img/tutorial/security/image10.png)
Note
Notice the header `Authorization`, with a value that starts with `Bearer`.
## Advanced usage with `scopes`[¶](https://fastapi.tiangolo.com/tutorial/security/oauth2-jwt/#advanced-usage-with-scopes "Permanent link")
OAuth2 has the notion of "scopes".
You can use them to add a specific set of permissions to a JWT token.
Then you can give this token to a user directly or a third party, to interact with your API with a set of restrictions.
You can learn how to use them and how they are integrated into **FastAPI** later in the **Advanced User Guide**.
## Recap[¶](https://fastapi.tiangolo.com/tutorial/security/oauth2-jwt/#recap "Permanent link")
With what you have seen up to now, you can set up a secure **FastAPI** application using standards like OAuth2 and JWT.
In almost any framework handling the security becomes a rather complex subject quite quickly.
Many packages that simplify it a lot have to make many compromises with the data model, database, and available features. And some of these packages that simplify things too much actually have security flaws underneath.
**FastAPI** doesn't make any compromise with any database, data model or tool.
It gives you all the flexibility to choose the ones that fit your project the best.
And you can use directly many well maintained and widely used packages like `passlib` and `PyJWT`, because **FastAPI** doesn't require any complex mechanisms to integrate external packages.
But it provides you the tools to simplify the process as much as possible without compromising flexibility, robustness, or security.
And you can use and implement secure, standard protocols, like OAuth2 in a relatively simple way.
You can learn more in the **Advanced User Guide** about how to use OAuth2 "scopes", for a more fine-grained permission system, following these same standards. OAuth2 with scopes is the mechanism used by many big authentication providers, like Facebook, Google, GitHub, Microsoft, Twitter, etc. to authorize third party applications to interact with their APIs on behalf of their users.
Was this page helpful? 
Thanks for your feedback! 
Thanks for your feedback! 
Back to top  [ Previous  Simple OAuth2 with Password and Bearer  ](https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/) [ Next  Middleware  ](https://fastapi.tiangolo.com/tutorial/middleware/)
The FastAPI trademark is owned by [@tiangolo](https://tiangolo.com) and is registered in the US and across other regions 
Made with [ Material for MkDocs ](https://squidfunk.github.io/mkdocs-material/)
[ ](https://github.com/fastapi/fastapi "github.com") [ ](https://discord.gg/VQjSZaeJmf "discord.gg") [ ](https://twitter.com/fastapi "twitter.com") [ ](https://www.linkedin.com/in/tiangolo "www.linkedin.com") [ ](https://dev.to/tiangolo "dev.to") [ ](https://medium.com/@tiangolo "medium.com") [ ](https://tiangolo.com "tiangolo.com")
  *[JWT]: JSON Web Tokens