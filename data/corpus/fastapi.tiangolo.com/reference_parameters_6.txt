Title: Query Parameter Definition in FastAPI
URL: https://fastapi.tiangolo.com/reference/parameters/
Summary: This section details the `Query` function parameters including `default`, `default_factory`, `alias`, and `alias_priority`, explaining their purpose in setting default values, generating values, providing alternative names, and determining alias priority in FastAPI.
---

```
defQuery( # noqa: N802
  default: Annotated[
    Any,
    Doc(
"""
      Default value if the parameter field is not set.
      """
    ),
  ] = Undefined,
  *,
  default_factory: Annotated[
    Union[Callable[[], Any], None],
    Doc(
"""
      A callable to generate the default value.
      This doesn't affect `Path` parameters as the value is always required.
      The parameter is available only for compatibility.
      """
    ),
  ] = _Unset,
  alias: Annotated[
    Optional[str],
    Doc(
"""
      An alternative name for the parameter field.
      This will be used to extract the data and for the generated OpenAPI.
      It is particularly useful when you can't use the name you want because it
      is a Python reserved keyword or similar.
      """
    ),
  ] = None,
  alias_priority: Annotated[
    Union[int, None],
    Doc(
"""
      Priority of the alias. This affects whether an alias generator is used.
      """
    ),
  ] = _Unset,
  # TODO: update when deprecating Pydantic v1, import these types
  # validation_alias: str | AliasPath | AliasChoices | None
  validation_alias: Annotated[
    Union[str, None],
    Doc(
"""
      'Whitelist' validation step. The parameter field will be the single one
      allowed by the alias or set of aliases defined.
      """
    ),
  ] = None,
  serialization_alias: Annotated[
    Union[str, None],
    Doc(
"""
      'Blacklist' validation step. The vanilla parameter field will be the
      single one of the alias' or set of aliases' fields and all the other
      fields will be ignored at serialization time.
      """
    ),
  ] = None,
  title: Annotated[
    Optional[str],
    Doc(
"""
      Human-readable title.
      """
    ),
  ] = None,
  description: Annotated[
    Optional[str],
    Doc(
"""
      Human-readable description.
      """
    ),
  ] = None,
  gt: Annotated[
    Optional[float],
    Doc(
"""
      Greater than. If set, value must be greater than this. Only applicable to
      numbers.
      """
    ),
  ] = None,
  ge: Annotated[
    Optional[float],
    Doc(
"""
      Greater than or equal. If set, value must be greater than or equal to
      this. Only applicable to numbers.
      """
    ),
  ] = None,
  lt: Annotated[
    Optional[float],
    Doc(
"""
      Less than. If set, value must be less than this. Only applicable to numbers.
      """
    ),
  ] = None,
  le: Annotated[
    Optional[float],
    Doc(
"""
      Less than or equal. If set, value must be less than or equal to this.
      Only applicable to numbers.
      """
    ),
  ] = None,
  min_length: Annotated[
    Optional[int],
    Doc(
"""
      Minimum length for strings.
      """
    ),
  ] = None,
  max_length: Annotated[
    Optional[int],
    Doc(
"""
      Maximum length for strings.
      """
    ),
  ] = None,
  pattern: Annotated[
    Optional[str],
    Doc(
"""
      RegEx pattern for strings.
      """
    ),
  ] = None,
  regex: Annotated[
    Optional[str],
    Doc(
"""
      RegEx pattern for strings.
      """
    ),
    deprecated(
      "Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead."
    ),
  ] = None,
  discriminator: Annotated[
    Union[str, None],
    Doc(
"""
      Parameter field name for discriminating the type in a tagged union.
      """
    ),
  ] = None,
  strict: Annotated[
    Union[bool, None],
    Doc(
"""
      If `True`, strict validation is applied to the field.
      """
    ),
  ] = _Unset,
  multiple_of: Annotated[
    Union[float, None],
    Doc(
"""
      Value must be a multiple of this. Only applicable to numbers.
      """
    ),
  ] = _Unset,
  allow_inf_nan: Annotated[
    Union[bool, None],
    Doc(
"""
      Allow `inf`, `-inf`, `nan`. Only applicable to numbers.
      """
    ),
  ] = _Unset,
  max_digits: Annotated[
    Union[int, None],
    Doc(
"""
      Maximum number of allow digits for strings.
      """
    ),
  ] = _Unset,
  decimal_places: Annotated[
    Union[int, None],
    Doc(
"""
      Maximum number of decimal places allowed for numbers.
      """
    ),
  ] = _Unset,
  examples: Annotated[
    Optional[List[Any]],
    Doc(
"""
      Example values for this field.
      """
    ),
  ] = None,
  example: Annotated[
    Optional[Any],
    deprecated(
      "Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, "
      "although still supported. Use examples instead."
    ),
  ] = _Unset,
  openapi_examples: Annotated[
    Optional[Dict[str, Example]],
    Doc(
"""
      OpenAPI-specific examples.
      It will be added to the generated OpenAPI (e.g.