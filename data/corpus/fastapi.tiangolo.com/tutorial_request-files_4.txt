Title: FastAPI Tutorial: Request Files
URL: https://fastapi.tiangolo.com/tutorial/request-files/
Summary: This tutorial provides a comprehensive guide on handling file uploads in FastAPI. It covers importing necessary modules, defining file parameters, and using `UploadFile` for file uploads. Additional topics include understanding form data, making file uploads optional, and handling multiple file uploads with or without additional metadata.
---

Table of contents 
  * [ Import `File` ](https://fastapi.tiangolo.com/tutorial/request-files/#import-file)
  * [ Define `File` Parameters  ](https://fastapi.tiangolo.com/tutorial/request-files/#define-file-parameters)
  * [ File Parameters with `UploadFile` ](https://fastapi.tiangolo.com/tutorial/request-files/#file-parameters-with-uploadfile)
    * [ `UploadFile` ](https://fastapi.tiangolo.com/tutorial/request-files/#uploadfile)
  * [ What is "Form Data"  ](https://fastapi.tiangolo.com/tutorial/request-files/#what-is-form-data)
  * [ Optional File Upload  ](https://fastapi.tiangolo.com/tutorial/request-files/#optional-file-upload)
  * [ `UploadFile` with Additional Metadata  ](https://fastapi.tiangolo.com/tutorial/request-files/#uploadfile-with-additional-metadata)
  * [ Multiple File Uploads  ](https://fastapi.tiangolo.com/tutorial/request-files/#multiple-file-uploads)
    * [ Multiple File Uploads with Additional Metadata  ](https://fastapi.tiangolo.com/tutorial/request-files/#multiple-file-uploads-with-additional-metadata)
  * [ Recap  ](https://fastapi.tiangolo.com/tutorial/request-files/#recap)


  1. [ FastAPI  ](https://fastapi.tiangolo.com/)
  2. [ Learn  ](https://fastapi.tiangolo.com/learn/)
  3. [ Tutorial - User Guide  ](https://fastapi.tiangolo.com/tutorial/)


# Request Files[Â¶](https://fastapi.tiangolo.com/tutorial/request-files/#request-files "Permanent link")
You can define files to be uploaded by the client using `File`.
Info
To receive uploaded files, first install [`python-multipart`](https://github.com/Kludex/python-multipart).
Make sure you create a [virtual environment](https://fastapi.tiangolo.com/virtual-environments/), activate it, and then install it, for example:
```
$ pipinstallpython-multipart

```

This is because uploaded files are sent as "form data".
## Import `File`[Â¶](https://fastapi.tiangolo.com/tutorial/request-files/#import-file "Permanent link")
Import `File` and `UploadFile` from `fastapi`:
[Python 3.9+](https://fastapi.tiangolo.com/tutorial/request-files/#__tabbed_1_1)
```
fromtypingimport Annotated
fromfastapiimport FastAPI, File, UploadFile
app = FastAPI()
@app.post("/files/")
async defcreate_file(file: Annotated[bytes, File()]):
  return {"file_size": len(file)}
@app.post("/uploadfile/")
async defcreate_upload_file(file: UploadFile):
  return {"filename": file.filename}

```

ðŸ¤“ Other versions and variants
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/request-files/#__tabbed_2_1)[Python 3.8+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/request-files/#__tabbed_2_2)
```
fromfastapiimport FastAPI, File, UploadFile
fromtyping_extensionsimport Annotated
app = FastAPI()
@app.post("/files/")
async defcreate_file(file: Annotated[bytes, File()]):
  return {"file_size": len(file)}
@app.post("/uploadfile/")
async defcreate_upload_file(file: UploadFile):
  return {"filename": file.filename}

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromfastapiimport FastAPI, File, UploadFile
app = FastAPI()
@app.post("/files/")
async defcreate_file(file: bytes = File()):
  return {"file_size": len(file)}
@app.post("/uploadfile/")
async defcreate_upload_file(file: UploadFile):
  return {"filename": file.filename}

```

## Define `File` Parameters[Â¶](https://fastapi.tiangolo.com/tutorial/request-files/#define-file-parameters "Permanent link")
Create file parameters the same way you would for `Body` or `Form`:
[Python 3.9+](https://fastapi.tiangolo.com/tutorial/request-files/#__tabbed_3_1)
```
fromtypingimport Annotated
fromfastapiimport FastAPI, File, UploadFile
app = FastAPI()
@app.post("/files/")
async defcreate_file(file: Annotated[bytes, File()]):
  return {"file_size": len(file)}
@app.post("/uploadfile/")
async defcreate_upload_file(file: UploadFile):
  return {"filename": file.filename}

```

ðŸ¤“ Other versions and variants
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/request-files/#__tabbed_4_1)[Python 3.8+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/request-files/#__tabbed_4_2)
```
fromfastapiimport FastAPI, File, UploadFile
fromtyping_extensionsimport Annotated
app = FastAPI()
@app.post("/files/")
async defcreate_file(file: Annotated[bytes, File()]):
  return {"file_size": len(file)}
@app.post("/uploadfile/")
async defcreate_upload_file(file: UploadFile):
  return {"filename": file.filename}

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromfastapiimport FastAPI, File, UploadFile
app = FastAPI()
@app.post("/files/")
async defcreate_file(file: bytes = File()):
  return {"file_size": len(file)}
@app.post("/uploadfile/")
async defcreate_upload_file(file: UploadFile):
  return {"filename": file.filename}