Title: Updating the App with Multiple Models in FastAPI
URL: https://fastapi.tiangolo.com/tutorial/sql-databases/
Summary: This section discusses refactoring the FastAPI application to enhance security and versatility. It highlights the importance of backend handling for IDs to prevent client-side overwriting and addresses the need for better management of sensitive data, such as a hero's secret name, by introducing additional models.
---

```

Then go to the `/docs` UI, you will see that **FastAPI** is using these **models** to **document** the API, and it will use them to **serialize** and **validate** the data too.
![](https://fastapi.tiangolo.com/img/tutorial/sql-databases/image01.png)
## Update the App with Multiple Models[Â¶](https://fastapi.tiangolo.com/tutorial/sql-databases/#update-the-app-with-multiple-models "Permanent link")
Now let's **refactor** this app a bit to increase **security** and **versatility**.
If you check the previous app, in the UI you can see that, up to now, it lets the client decide the `id` of the `Hero` to create. ðŸ˜±
We shouldn't let that happen, they could overwrite an `id` we already have assigned in the DB. Deciding the `id` should be done by the **backend** or the **database** , **not by the client**.
Additionally, we create a `secret_name` for the hero, but so far, we are returning it everywhere, that's not very **secret**... ðŸ˜…
We'll fix these things by adding a few **extra models**. Here's where SQLModel will shine. âœ¨
### Create Multiple Models[Â¶](https://fastapi.tiangolo.com/tutorial/sql-databases/#create-multiple-models "Permanent link")
In **SQLModel** , any model class that has `table=True` is a **table model**.
And any model class that doesn't have `table=True` is a **data model** , these ones are actually just Pydantic models (with a couple of small extra features). ðŸ¤“
With SQLModel, we can use **inheritance** to **avoid duplicating** all the fields in all the cases.
#### `HeroBase` - the base class[Â¶](https://fastapi.tiangolo.com/tutorial/sql-databases/#herobase-the-base-class "Permanent link")
Let's start with a `HeroBase` model that has all the **fields that are shared** by all the models:
  * `name`
  * `age`


[Python 3.10+](https://fastapi.tiangolo.com/tutorial/sql-databases/#__tabbed_28_1)
```
# Code above omitted ðŸ‘†
classHeroBase(SQLModel):
  name: str = Field(index=True)
  age: int | None = Field(default=None, index=True)
# Code below omitted ðŸ‘‡

```

ðŸ‘€ Full file preview
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/sql-databases/#__tabbed_29_1)
```
fromtypingimport Annotated
fromfastapiimport Depends, FastAPI, HTTPException, Query
fromsqlmodelimport Field, Session, SQLModel, create_engine, select
classHeroBase(SQLModel):
  name: str = Field(index=True)
  age: int | None = Field(default=None, index=True)
classHero(HeroBase, table=True):
  id: int | None = Field(default=None, primary_key=True)
  secret_name: str
classHeroPublic(HeroBase):
  id: int
classHeroCreate(HeroBase):
  secret_name: str
classHeroUpdate(HeroBase):
  name: str | None = None
  age: int | None = None
  secret_name: str | None = None
sqlite_file_name = "database.db"
sqlite_url = f"sqlite:///{sqlite_file_name}"
connect_args = {"check_same_thread": False}
engine = create_engine(sqlite_url, connect_args=connect_args)
defcreate_db_and_tables():
  SQLModel.metadata.create_all(engine)
defget_session():
  with Session(engine) as session:
    yield session
SessionDep = Annotated[Session, Depends(get_session)]
app = FastAPI()
@app.on_event("startup")
defon_startup():
  create_db_and_tables()
@app.post("/heroes/", response_model=HeroPublic)
defcreate_hero(hero: HeroCreate, session: SessionDep):
  db_hero = Hero.model_validate(hero)
  session.add(db_hero)
  session.commit()
  session.refresh(db_hero)
  return db_hero
@app.get("/heroes/", response_model=list[HeroPublic])
defread_heroes(
  session: SessionDep,
  offset: int = 0,
  limit: Annotated[int, Query(le=100)] = 100,
):
  heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()
  return heroes
@app.get("/heroes/{hero_id}", response_model=HeroPublic)
defread_hero(hero_id: int, session: SessionDep):
  hero = session.get(Hero, hero_id)
  if not hero:
    raise HTTPException(status_code=404, detail="Hero not found")
  return hero
@app.patch("/heroes/{hero_id}", response_model=HeroPublic)
defupdate_hero(hero_id: int, hero: HeroUpdate, session: SessionDep):
  hero_db = session.get(Hero, hero_id)
  if not hero_db:
    raise HTTPException(status_code=404, detail="Hero not found")
  hero_data = hero.model_dump(exclude_unset=True)
  hero_db.sqlmodel_update(hero_data)
  session.add(hero_db)
  session.commit()
  session.refresh(hero_db)
  return hero_db
@app.delete("/heroes/{hero_id}")
defdelete_hero(hero_id: int, session: SessionDep):
  hero = session.get(Hero, hero_id)
  if not hero:
    raise HTTPException(status_code=404, detail="Hero not found")
  session.delete(hero)
  session.commit()
  return {"ok": True}