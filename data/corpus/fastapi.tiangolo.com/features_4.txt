Title: FastAPI Features Overview
URL: https://fastapi.tiangolo.com/features/
Summary: This section outlines the key features of FastAPI, including adherence to open standards, automatic documentation generation, modern Python compatibility, enhanced editor support, concise code structure, data validation, security and authentication features, dependency injection capabilities, extensive plug-in support, and comprehensive testing.
---

Table of contents 
  * [ FastAPI features  ](https://fastapi.tiangolo.com/features/#fastapi-features)
    * [ Based on open standards  ](https://fastapi.tiangolo.com/features/#based-on-open-standards)
    * [ Automatic docs  ](https://fastapi.tiangolo.com/features/#automatic-docs)
    * [ Just Modern Python  ](https://fastapi.tiangolo.com/features/#just-modern-python)
    * [ Editor support  ](https://fastapi.tiangolo.com/features/#editor-support)
    * [ Short  ](https://fastapi.tiangolo.com/features/#short)
    * [ Validation  ](https://fastapi.tiangolo.com/features/#validation)
    * [ Security and authentication  ](https://fastapi.tiangolo.com/features/#security-and-authentication)
    * [ Dependency Injection  ](https://fastapi.tiangolo.com/features/#dependency-injection)
    * [ Unlimited "plug-ins"  ](https://fastapi.tiangolo.com/features/#unlimited-plug-ins)
    * [ Tested  ](https://fastapi.tiangolo.com/features/#tested)
  * [ Starlette features  ](https://fastapi.tiangolo.com/features/#starlette-features)
  * [ Pydantic features  ](https://fastapi.tiangolo.com/features/#pydantic-features)


# Features[¶](https://fastapi.tiangolo.com/features/#features "Permanent link")
## FastAPI features[¶](https://fastapi.tiangolo.com/features/#fastapi-features "Permanent link")
**FastAPI** gives you the following:
### Based on open standards[¶](https://fastapi.tiangolo.com/features/#based-on-open-standards "Permanent link")
  * [**OpenAPI**](https://github.com/OAI/OpenAPI-Specification) for API creation, including declarations of path operations, parameters, request bodies, security, etc.
  * Automatic data model documentation with [**JSON Schema**](https://json-schema.org/) (as OpenAPI itself is based on JSON Schema).
  * Designed around these standards, after a meticulous study. Instead of an afterthought layer on top.
  * This also allows using automatic **client code generation** in many languages.


### Automatic docs[¶](https://fastapi.tiangolo.com/features/#automatic-docs "Permanent link")
Interactive API documentation and exploration web user interfaces. As the framework is based on OpenAPI, there are multiple options, 2 included by default.
  * [**Swagger UI**](https://github.com/swagger-api/swagger-ui), with interactive exploration, call and test your API directly from the browser.


![Swagger UI interaction](https://fastapi.tiangolo.com/img/index/index-03-swagger-02.png)
  * Alternative API documentation with [**ReDoc**](https://github.com/Rebilly/ReDoc).


![ReDoc](https://fastapi.tiangolo.com/img/index/index-06-redoc-02.png)
### Just Modern Python[¶](https://fastapi.tiangolo.com/features/#just-modern-python "Permanent link")
It's all based on standard **Python type** declarations (thanks to Pydantic). No new syntax to learn. Just standard modern Python.
If you need a 2 minute refresher of how to use Python types (even if you don't use FastAPI), check the short tutorial: [Python Types](https://fastapi.tiangolo.com/python-types/).
You write standard Python with types:
```
fromdatetimeimport date
frompydanticimport BaseModel
# Declare a variable as a str
# and get editor support inside the function
defmain(user_id: str):
  return user_id
# A Pydantic model
classUser(BaseModel):
  id: int
  name: str
  joined: date

```

That can then be used like:
```
my_user: User = User(id=3, name="John Doe", joined="2018-07-19")
second_user_data = {
  "id": 4,
  "name": "Mary",
  "joined": "2018-11-30",
}
my_second_user: User = User(**second_user_data)