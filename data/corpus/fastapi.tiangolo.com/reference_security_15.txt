Title: HTTP Digest Authentication in FastAPI
URL: https://fastapi.tiangolo.com/reference/security/
Summary: This section explains how to implement HTTP Digest Authentication using FastAPI's security features. It describes creating an instance of `HTTPDigest`, using it as a dependency in route handlers, and provides a code example that demonstrates how to retrieve the user's credentials.
---

```

Bases: `HTTPBase`
HTTP Digest authentication.
#### Usage[¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.HTTPDigest--usage "Permanent link")
Create an instance object and use that object as the dependency in `Depends()`.
The dependency result will be an `HTTPAuthorizationCredentials` object containing the `scheme` and the `credentials`.
#### Example[¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.HTTPDigest--example "Permanent link")
```
fromtypingimport Annotated
fromfastapiimport Depends, FastAPI
fromfastapi.securityimport HTTPAuthorizationCredentials, HTTPDigest
app = FastAPI()
security = HTTPDigest()
@app.get("/users/me")
defread_current_user(
  credentials: Annotated[HTTPAuthorizationCredentials, Depends(security)]
):
  return {"scheme": credentials.scheme, "credentials": credentials.credentials}

```

PARAMETER | DESCRIPTION  
---|---  
`scheme_name` |  Security scheme name. It will be included in the generated OpenAPI (e.g. visible at `/docs`). **TYPE:** `Optional[str]` **DEFAULT:** `None`  
`description` |  Security scheme description. It will be included in the generated OpenAPI (e.g. visible at `/docs`). **TYPE:** `Optional[str]` **DEFAULT:** `None`  
`auto_error` |  By default, if the HTTP Digest is not provided, `HTTPDigest` will automatically cancel the request and send the client an error. If `auto_error` is set to `False`, when the HTTP Digest is not available, instead of erroring out, the dependency result will be `None`. This is useful when you want to have optional authentication. It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in HTTP Digest or in a cookie). **TYPE:** `bool` **DEFAULT:** `True`  
Source code in `fastapi/security/http.py`
```
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
```
| ```
def__init__(
  self,
  *,
  scheme_name: Annotated[
    Optional[str],
    Doc(
"""
      Security scheme name.
      It will be included in the generated OpenAPI (e.g. visible at `/docs`).
      """
    ),
  ] = None,
  description: Annotated[
    Optional[str],
    Doc(
"""
      Security scheme description.
      It will be included in the generated OpenAPI (e.g. visible at `/docs`).
      """
    ),
  ] = None,
  auto_error: Annotated[
    bool,
    Doc(
"""
      By default, if the HTTP Digest is not provided, `HTTPDigest` will
      automatically cancel the request and send the client an error.
      If `auto_error` is set to `False`, when the HTTP Digest is not
      available, instead of erroring out, the dependency result will
      be `None`.
      This is useful when you want to have optional authentication.
      It is also useful when you want to have authentication that can be
      provided in one of multiple optional ways (for example, in HTTP
      Digest or in a cookie).
      """
    ),
  ] = True,
):
  self.model = HTTPBaseModel(scheme="digest", description=description)
  self.scheme_name = scheme_name or self.__class__.__name__
  self.auto_error = auto_error

```
  
---|---  
###  model `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.HTTPDigest.model "Permanent link")
```
model = HTTPBase[](https://fastapi.tiangolo.com/reference/openapi/models/#fastapi.openapi.models.HTTPBase "<code class="doc-symbol doc-symbol-heading doc-symbol-class"></code>      <span class="doc doc-object-name doc-class-name">HTTPBase</span> \(<code>fastapi.openapi.models.HTTPBase</code>\)")(scheme='digest', description=description)

```

###  scheme_name `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.HTTPDigest.scheme_name "Permanent link")
```
scheme_name = scheme_name or __name__

```

###  auto_error `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.HTTPDigest.auto_error "Permanent link")
```
auto_error = auto_error

```

## HTTP Credentials[¶](https://fastapi.tiangolo.com/reference/security/#http-credentials "Permanent link")
##  fastapi.security.HTTPAuthorizationCredentials [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.HTTPAuthorizationCredentials "Permanent link")
Bases: `BaseModel`
The HTTP authorization credentials in the result of using `HTTPBearer` or `HTTPDigest` in a dependency.
The HTTP authorization header value is split by the first space.
The first part is the `scheme`, the second part is the `credentials`.
For example, in an HTTP Bearer token scheme, the client will send a header like:
```
Authorization: Bearer deadbeef12346