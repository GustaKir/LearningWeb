Title: Introduction to FastAPI and Its Benefits
URL: https://fastapi.tiangolo.com/
Summary: FastAPI is recommended as a modern framework for building REST APIs due to its speed, ease of use, and learning curve. Notable figures from Explosion AI and Cisco endorse its beautifully designed structure and scalability, emphasizing its role in production API development and automation.
---

/item?id=19455465)
"_If you're looking to learn one**modern framework** for building REST APIs, check out **FastAPI** [...] It's fast, easy to use and easy to learn [...]_"
"_We've switched over to**FastAPI** for our **APIs** [...] I think you'll like it [...]_"
Ines Montani - Matthew Honnibal - **[Explosion AI](https://explosion.ai) founders - [spaCy](https://spacy.io) creators** [(ref)](https://twitter.com/_inesmontani/status/1144173225322143744) - [(ref)](https://twitter.com/honnibal/status/1144031421859655680)
"_If anyone is looking to build a production Python API, I would highly recommend**FastAPI**. It is **beautifully designed** , **simple to use** and **highly scalable** , it has become a **key component** in our API first development strategy and is driving many automations and services such as our Virtual TAC Engineer._"
Deon Pillsbury - **Cisco** [(ref)](https://www.linkedin.com/posts/deonpillsbury_cisco-cx-python-activity-6963242628536487936-trAp/)
## **Typer** , the FastAPI of CLIs[¶](https://fastapi.tiangolo.com/#typer-the-fastapi-of-clis "Permanent link")
[![](https://typer.tiangolo.com/img/logo-margin/logo-margin-vector.svg)](https://typer.tiangolo.com)
If you are building a CLI app to be used in the terminal instead of a web API, check out [**Typer**](https://typer.tiangolo.com/).
**Typer** is FastAPI's little sibling. And it's intended to be the **FastAPI of CLIs**. ⌨️ 🚀
## Requirements[¶](https://fastapi.tiangolo.com/#requirements "Permanent link")
FastAPI stands on the shoulders of giants:
  * [Starlette](https://www.starlette.io/) for the web parts.
  * [Pydantic](https://docs.pydantic.dev/) for the data parts.


## Installation[¶](https://fastapi.tiangolo.com/#installation "Permanent link")
Create and activate a [virtual environment](https://fastapi.tiangolo.com/virtual-environments/) and then install FastAPI:
```

fast →[](https://fastapi.tiangolo.com/)pip install "fastapi[standard]"restart ↻[](https://fastapi.tiangolo.com/)

```

**Note** : Make sure you put `"fastapi[standard]"` in quotes to ensure it works in all terminals.
## Example[¶](https://fastapi.tiangolo.com/#example "Permanent link")
### Create it[¶](https://fastapi.tiangolo.com/#create-it "Permanent link")
Create a file `main.py` with:
```
fromtypingimport Union
fromfastapiimport FastAPI
app = FastAPI()
@app.get("/")
defread_root():
  return {"Hello": "World"}
@app.get("/items/{item_id}")
defread_item(item_id: int, q: Union[str, None] = None):
  return {"item_id": item_id, "q": q}

```

Or use `async def`...
If your code uses `async` / `await`, use `async def`:
```
fromtypingimport Union
fromfastapiimport FastAPI
app = FastAPI()
@app.get("/")
async defread_root():
  return {"Hello": "World"}
@app.get("/items/{item_id}")
async defread_item(item_id: int, q: Union[str, None] = None):
  return {"item_id": item_id, "q": q}

```

**Note** :
If you don't know, check the _"In a hurry?"_ section about [`async` and `await` in the docs](https://fastapi.tiangolo.com/async/#in-a-hurry).
### Run it[¶](https://fastapi.tiangolo.com/#run-it "Permanent link")
Run the server with:
```

fast →[](https://fastapi.tiangolo.com/)fastapi dev main.py ╭────────── FastAPI CLI - Development mode ───────────╮ │                           │ │ Serving at: http://127.0.0.1:8000         │ │                           │ │ API docs: http://127.0.0.1:8000/docs        │ │                           │ │ Running in development mode, for production use:  │ │                           │ │ fastapi run                    │ │                           │ ╰─────────────────────────────────────────────────────╯INFO:   Will watch for changes in these directories: ['/home/user/code/awesomeapp']INFO:   Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)INFO:   Started reloader process [2248755] using WatchFilesINFO:   Started server process [2248757]INFO:   Waiting for application startup.INFO:   Application startup complete.restart ↻[](https://fastapi.tiangolo.com/)

```

About the command `fastapi dev main.py`...
The command `fastapi dev` reads your `main.py` file, detects the **FastAPI** app in it, and starts a server using [Uvicorn](https://www.uvicorn.org).
By default, `fastapi dev` will start with auto-reload enabled for local development.
You can read more about it in the [FastAPI CLI docs](https://fastapi.tiangolo.com/fastapi-cli/).
### Check it[¶](https://fastapi.tiangolo.com/#check-it "Permanent link")
Open your browser at <http://127.0.0.1:8000/items/5?q=somequery>.
You will see the JSON response as:
```
{"item_id":5,"q":"somequery"}