Title: Using Background Tasks in FastAPI
URL: https://fastapi.tiangolo.com/tutorial/background-tasks/
Summary: This section explains how to implement background tasks in FastAPI, specifically demonstrating logging messages after sending a response. It highlights the `BackgroundTasks` class from `starlette.background`, which should be used instead of the `BackgroundTask` class to facilitate handling background operations in path functions.
---

```

In this example, the messages will be written to the `log.txt` file _after_ the response is sent.
If there was a query in the request, it will be written to the log in a background task.
And then another background task generated at the _path operation function_ will write a message using the `email` path parameter.
## Technical Details[¶](https://fastapi.tiangolo.com/tutorial/background-tasks/#technical-details "Permanent link")
The class `BackgroundTasks` comes directly from [`starlette.background`](https://www.starlette.io/background/).
It is imported/included directly into FastAPI so that you can import it from `fastapi` and avoid accidentally importing the alternative `BackgroundTask` (without the `s` at the end) from `starlette.background`.
By only using `BackgroundTasks` (and not `BackgroundTask`), it's then possible to use it as a _path operation function_ parameter and have **FastAPI** handle the rest for you, just like when using the `Request` object directly.
It's still possible to use `BackgroundTask` alone in FastAPI, but you have to create the object in your code and return a Starlette `Response` including it.
You can see more details in [Starlette's official docs for Background Tasks](https://www.starlette.io/background/).
## Caveat[¶](https://fastapi.tiangolo.com/tutorial/background-tasks/#caveat "Permanent link")
If you need to perform heavy background computation and you don't necessarily need it to be run by the same process (for example, you don't need to share memory, variables, etc), you might benefit from using other bigger tools like [Celery](https://docs.celeryq.dev).
They tend to require more complex configurations, a message/job queue manager, like RabbitMQ or Redis, but they allow you to run background tasks in multiple processes, and especially, in multiple servers.
But if you need to access variables and objects from the same **FastAPI** app, or you need to perform small background tasks (like sending an email notification), you can simply just use `BackgroundTasks`.
## Recap[¶](https://fastapi.tiangolo.com/tutorial/background-tasks/#recap "Permanent link")
Import and use `BackgroundTasks` with parameters in _path operation functions_ and dependencies to add background tasks.
Was this page helpful? 
Thanks for your feedback! 
Thanks for your feedback! 
Back to top  [ Previous  Bigger Applications - Multiple Files  ](https://fastapi.tiangolo.com/tutorial/bigger-applications/) [ Next  Metadata and Docs URLs  ](https://fastapi.tiangolo.com/tutorial/metadata/)
The FastAPI trademark is owned by [@tiangolo](https://tiangolo.com) and is registered in the US and across other regions 
Made with [ Material for MkDocs ](https://squidfunk.github.io/mkdocs-material/)
[ ](https://github.com/fastapi/fastapi "github.com") [ ](https://discord.gg/VQjSZaeJmf "discord.gg") [ ](https://twitter.com/fastapi "twitter.com") [ ](https://www.linkedin.com/in/tiangolo "www.linkedin.com") [ ](https://dev.to/tiangolo "dev.to") [ ](https://medium.com/@tiangolo "medium.com") [ ](https://tiangolo.com "tiangolo.com")