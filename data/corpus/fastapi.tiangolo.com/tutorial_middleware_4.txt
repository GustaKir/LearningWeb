Title: Middleware in FastAPI
URL: https://fastapi.tiangolo.com/tutorial/middleware/
Summary: Middleware in FastAPI allows you to execute code for every request and response in your application. It modifies requests before they reach path operations and responses before they are returned. Key details include that exit code from dependencies with `yield` will execute after the middleware, which is important for handling background tasks.
---

# Middleware[¶](https://fastapi.tiangolo.com/tutorial/middleware/#middleware "Permanent link")
You can add middleware to **FastAPI** applications.
A "middleware" is a function that works with every **request** before it is processed by any specific _path operation_. And also with every **response** before returning it.
  * It takes each **request** that comes to your application.
  * It can then do something to that **request** or run any needed code.
  * Then it passes the **request** to be processed by the rest of the application (by some _path operation_).
  * It then takes the **response** generated by the application (by some _path operation_).
  * It can do something to that **response** or run any needed code.
  * Then it returns the **response**.


Technical Details
If you have dependencies with `yield`, the exit code will run _after_ the middleware.
If there were any background tasks (covered in the [Background Tasks](https://fastapi.tiangolo.com/tutorial/background-tasks/) section, you will see it later), they will run _after_ all the middleware.
## Create a middleware[¶](https://fastapi.tiangolo.com/tutorial/middleware/#create-a-middleware "Permanent link")
To create a middleware you use the decorator `@app.middleware("http")` on top of a function.
The middleware function receives:
  * The `request`.
  * A function `call_next` that will receive the `request` as a parameter.
    * This function will pass the `request` to the corresponding _path operation_.
    * Then it returns the `response` generated by the corresponding _path operation_.
  * You can then further modify the `response` before returning it.


[Python 3.8+](https://fastapi.tiangolo.com/tutorial/middleware/#__tabbed_1_1)
```
importtime
fromfastapiimport FastAPI, Request
app = FastAPI()
@app.middleware("http")
async defadd_process_time_header(request: Request, call_next):
  start_time = time.perf_counter()
  response = await call_next(request)
  process_time = time.perf_counter() - start_time
  response.headers["X-Process-Time"] = str(process_time)
  return response

```

Tip
Keep in mind that custom proprietary headers can be added [using the 'X-' prefix](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers).
But if you have custom headers that you want a client in a browser to be able to see, you need to add them to your CORS configurations ([CORS (Cross-Origin Resource Sharing)](https://fastapi.tiangolo.com/tutorial/cors/)) using the parameter `expose_headers` documented in [Starlette's CORS docs](https://www.starlette.io/middleware/#corsmiddleware).
Technical Details
You could also use `from starlette.requests import Request`.
**FastAPI** provides it as a convenience for you, the developer. But it comes directly from Starlette.
### Before and after the `response`[¶](https://fastapi.tiangolo.com/tutorial/middleware/#before-and-after-the-response "Permanent link")
You can add code to be run with the `request`, before any _path operation_ receives it.
And also after the `response` is generated, before returning it.
For example, you could add a custom header `X-Process-Time` containing the time in seconds that it took to process the request and generate a response:
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/middleware/#__tabbed_2_1)
```
importtime
fromfastapiimport FastAPI, Request
app = FastAPI()
@app.middleware("http")
async defadd_process_time_header(request: Request, call_next):
  start_time = time.perf_counter()
  response = await call_next(request)
  process_time = time.perf_counter() - start_time
  response.headers["X-Process-Time"] = str(process_time)
  return response