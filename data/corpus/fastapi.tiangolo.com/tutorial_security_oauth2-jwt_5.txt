Title: Understanding JWT in FastAPI Security
URL: https://fastapi.tiangolo.com/tutorial/security/oauth2-jwt/
Summary: This section explains the use of JSON Web Tokens (JWT) in FastAPI for secure user authentication. It highlights that while JWTs are not encrypted, they are signed for verification. Tokens can expire after a set period, requiring users to re-authenticate, and modifications to the token can be detected through mismatched signatures. It also mentions the installation of `PyJWT` for handling JWTs in Python.
---

```

It is not encrypted, so, anyone could recover the information from the contents.
But it's signed. So, when you receive a token that you emitted, you can verify that you actually emitted it.
That way, you can create a token with an expiration of, let's say, 1 week. And then when the user comes back the next day with the token, you know that user is still logged in to your system.
After a week, the token will be expired and the user will not be authorized and will have to sign in again to get a new token. And if the user (or a third party) tried to modify the token to change the expiration, you would be able to discover it, because the signatures would not match.
If you want to play with JWT tokens and see how they work, check [https://jwt.io](https://jwt.io/).
## Install `PyJWT`[¶](https://fastapi.tiangolo.com/tutorial/security/oauth2-jwt/#install-pyjwt "Permanent link")
We need to install `PyJWT` to generate and verify the JWT tokens in Python.
Make sure you create a [virtual environment](https://fastapi.tiangolo.com/virtual-environments/), activate it, and then install `pyjwt`:
```

fast →[](https://fastapi.tiangolo.com/tutorial/security/oauth2-jwt/)pip install pyjwtrestart ↻[](https://fastapi.tiangolo.com/tutorial/security/oauth2-jwt/)

```

Info
If you are planning to use digital signature algorithms like RSA or ECDSA, you should install the cryptography library dependency `pyjwt[crypto]`.
You can read more about it in the [PyJWT Installation docs](https://pyjwt.readthedocs.io/en/latest/installation.html).
## Password hashing[¶](https://fastapi.tiangolo.com/tutorial/security/oauth2-jwt/#password-hashing "Permanent link")
"Hashing" means converting some content (a password in this case) into a sequence of bytes (just a string) that looks like gibberish.
Whenever you pass exactly the same content (exactly the same password) you get exactly the same gibberish.
But you cannot convert from the gibberish back to the password.
### Why use password hashing[¶](https://fastapi.tiangolo.com/tutorial/security/oauth2-jwt/#why-use-password-hashing "Permanent link")
If your database is stolen, the thief won't have your users' plaintext passwords, only the hashes.
So, the thief won't be able to try to use that password in another system (as many users use the same password everywhere, this would be dangerous).
## Install `passlib`[¶](https://fastapi.tiangolo.com/tutorial/security/oauth2-jwt/#install-passlib "Permanent link")
PassLib is a great Python package to handle password hashes.
It supports many secure hashing algorithms and utilities to work with them.
The recommended algorithm is "Bcrypt".
Make sure you create a [virtual environment](https://fastapi.tiangolo.com/virtual-environments/), activate it, and then install PassLib with Bcrypt:
```

fast →[](https://fastapi.tiangolo.com/tutorial/security/oauth2-jwt/)pip install "passlib[bcrypt]"restart ↻[](https://fastapi.tiangolo.com/tutorial/security/oauth2-jwt/)

```

Tip
With `passlib`, you could even configure it to be able to read passwords created by **Django** , a **Flask** security plug-in or many others.
So, you would be able to, for example, share the same data from a Django application in a database with a FastAPI application. Or gradually migrate a Django application using the same database.
And your users would be able to login from your Django app or from your **FastAPI** app, at the same time.
## Hash and verify the passwords[¶](https://fastapi.tiangolo.com/tutorial/security/oauth2-jwt/#hash-and-verify-the-passwords "Permanent link")
Import the tools we need from `passlib`.
Create a PassLib "context". This is what will be used to hash and verify passwords.
Tip
The PassLib context also has functionality to use different hashing algorithms, including deprecated old ones only to allow verifying them, etc.
For example, you could use it to read and verify passwords generated by another system (like Django) but hash any new passwords with a different algorithm like Bcrypt.
And be compatible with all of them at the same time.
Create a utility function to hash a password coming from the user.
And another utility to verify if a received password matches the hash stored.
And another one to authenticate and return a user.
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/security/oauth2-jwt/#__tabbed_1_1)