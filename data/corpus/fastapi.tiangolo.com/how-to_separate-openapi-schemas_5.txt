Title: Separating OpenAPI Schemas in FastAPI
URL: https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/
Summary: This document provides an example of creating a FastAPI application with Pydantic models. It defines an 'Item' model with 'name' and optional 'description' fields, and includes endpoints to create and read items.
---

```
fromfastapiimport FastAPI
frompydanticimport BaseModel
classItem(BaseModel):
  name: str
  description: str | None = None
app = FastAPI()
@app.post("/items/")
defcreate_item(item: Item):
  return item
@app.get("/items/")
defread_items() -> list[Item]:
  return [
    Item(
      name="Portal Gun",
      description="Device to travel through the multi-rick-verse",
    ),
    Item(name="Plumbus"),
  ]

```

ðŸ¤“ Other versions and variants
[Python 3.9+](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#__tabbed_6_1)[Python 3.8+](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#__tabbed_6_2)
```
fromtypingimport Optional
fromfastapiimport FastAPI
frompydanticimport BaseModel
classItem(BaseModel):
  name: str
  description: Optional[str] = None
app = FastAPI()
@app.post("/items/")
defcreate_item(item: Item):
  return item
@app.get("/items/")
defread_items() -> list[Item]:
  return [
    Item(
      name="Portal Gun",
      description="Device to travel through the multi-rick-verse",
    ),
    Item(name="Plumbus"),
  ]

```

```
fromtypingimport List, Union
fromfastapiimport FastAPI
frompydanticimport BaseModel
classItem(BaseModel):
  name: str
  description: Union[str, None] = None
app = FastAPI()
@app.post("/items/")
defcreate_item(item: Item):
  return item
@app.get("/items/")
defread_items() -> List[Item]:
  return [
    Item(
      name="Portal Gun",
      description="Device to travel through the multi-rick-verse",
    ),
    Item(name="Plumbus"),
  ]

```

...then the `description` field will **not be required**. Because it has a default value of `None`.
### Input Model in Docs[Â¶](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#input-model-in-docs "Permanent link")
You can confirm that in the docs, the `description` field doesn't have a **red asterisk** , it's not marked as required:
![](https://fastapi.tiangolo.com/img/tutorial/separate-openapi-schemas/image01.png)
### Model for Output[Â¶](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#model-for-output "Permanent link")
But if you use the same model as an output, like here:
[Python 3.10+](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#__tabbed_7_1)
```
fromfastapiimport FastAPI
frompydanticimport BaseModel
classItem(BaseModel):
  name: str
  description: str | None = None
app = FastAPI()
@app.post("/items/")
defcreate_item(item: Item):
  return item
@app.get("/items/")
defread_items() -> list[Item]:
  return [
    Item(
      name="Portal Gun",
      description="Device to travel through the multi-rick-verse",
    ),
    Item(name="Plumbus"),
  ]

```

ðŸ¤“ Other versions and variants
[Python 3.9+](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#__tabbed_8_1)[Python 3.8+](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#__tabbed_8_2)
```
fromtypingimport Optional
fromfastapiimport FastAPI
frompydanticimport BaseModel
classItem(BaseModel):
  name: str
  description: Optional[str] = None
app = FastAPI()
@app.post("/items/")
defcreate_item(item: Item):
  return item
@app.get("/items/")
defread_items() -> list[Item]:
  return [
    Item(
      name="Portal Gun",
      description="Device to travel through the multi-rick-verse",
    ),
    Item(name="Plumbus"),
  ]

```

```
fromtypingimport List, Union
fromfastapiimport FastAPI
frompydanticimport BaseModel
classItem(BaseModel):
  name: str
  description: Union[str, None] = None
app = FastAPI()
@app.post("/items/")
defcreate_item(item: Item):
  return item
@app.get("/items/")
defread_items() -> List[Item]:
  return [
    Item(
      name="Portal Gun",
      description="Device to travel through the multi-rick-verse",
    ),
    Item(name="Plumbus"),
  ]