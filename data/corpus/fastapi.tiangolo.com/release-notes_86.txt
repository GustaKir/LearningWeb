Title: Release Notes - FastAPI Updates and Pydantic v2 Support
URL: https://fastapi.tiangolo.com/release-notes/
Summary: This document outlines internal updates including sponsorship acknowledgments and token updates, alongside the major release of FastAPI version 0.100.0, which introduces support for Pydantic v2 with improvements derived from its core re-write in Rust.
---

### Internal[Â¶](https://fastapi.tiangolo.com/release-notes/#internal_37 "Permanent link")
  * ðŸ”§ Update sponsors, add Fern. PR [#9956](https://github.com/tiangolo/fastapi/pull/9956) by [@tiangolo](https://github.com/tiangolo).
  * ðŸ‘· Update FastAPI People token. PR [#9844](https://github.com/tiangolo/fastapi/pull/9844) by [@tiangolo](https://github.com/tiangolo).
  * ðŸ‘¥ Update FastAPI People. PR [#9775](https://github.com/tiangolo/fastapi/pull/9775) by [@tiangolo](https://github.com/tiangolo).
  * ðŸ‘· Update MkDocs Material token. PR [#9843](https://github.com/tiangolo/fastapi/pull/9843) by [@tiangolo](https://github.com/tiangolo).
  * ðŸ‘· Update token for latest changes. PR [#9842](https://github.com/tiangolo/fastapi/pull/9842) by [@tiangolo](https://github.com/tiangolo).


## 0.100.0[Â¶](https://fastapi.tiangolo.com/release-notes/#01000 "Permanent link")
âœ¨ Support for **Pydantic v2** âœ¨
Pydantic version 2 has the **core** re-written in **Rust** and includes a lot of improvements and features, for example:
  * Improved **correctness** in corner cases.
  * **Safer** types.
  * Better **performance** and **less energy** consumption.
  * Better **extensibility**.
  * etc.


...all this while keeping the **same Python API**. In most of the cases, for simple models, you can simply upgrade the Pydantic version and get all the benefits. ðŸš€
In some cases, for pure data validation and processing, you can get performance improvements of **20x** or more. This means 2,000% or more. ðŸ¤¯
When you use **FastAPI** , there's a lot more going on, processing the request and response, handling dependencies, executing **your own code** , and particularly, **waiting for the network**. But you will probably still get some nice performance improvements just from the upgrade.
The focus of this release is **compatibility** with Pydantic v1 and v2, to make sure your current apps keep working. Later there will be more focus on refactors, correctness, code improvements, and then **performance** improvements. Some third-party early beta testers that ran benchmarks on the beta releases of FastAPI reported improvements of **2x - 3x**. Which is not bad for just doing `pip install --upgrade fastapi pydantic`. This was not an official benchmark and I didn't check it myself, but it's a good sign.
### Migration[Â¶](https://fastapi.tiangolo.com/release-notes/#migration "Permanent link")
Check out the [Pydantic migration guide](https://docs.pydantic.dev/2.0/migration/).
For the things that need changes in your Pydantic models, the Pydantic team built [`bump-pydantic`](https://github.com/pydantic/bump-pydantic).
A command line tool that will **process your code** and update most of the things **automatically** for you. Make sure you have your code in git first, and review each of the changes to make sure everything is correct before committing the changes.
### Pydantic v1[Â¶](https://fastapi.tiangolo.com/release-notes/#pydantic-v1 "Permanent link")
**This version of FastAPI still supports Pydantic v1**. And although Pydantic v1 will be deprecated at some point, it will still be supported for a while.
This means that you can install the new Pydantic v2, and if something fails, you can install Pydantic v1 while you fix any problems you might have, but having the latest FastAPI.
There are **tests for both Pydantic v1 and v2** , and test **coverage** is kept at **100%**.
### Changes[Â¶](https://fastapi.tiangolo.com/release-notes/#changes "Permanent link")
  * There are **new parameter** fields supported by Pydantic `Field()` for:
    * `Path()`
    * `Query()`
    * `Header()`
    * `Cookie()`
    * `Body()`
    * `Form()`
    * `File()`
  * The new parameter fields are:
    * `default_factory`
    * `alias_priority`
    * `validation_alias`
    * `serialization_alias`
    * `discriminator`
    * `strict`
    * `multiple_of`
    * `allow_inf_nan`
    * `max_digits`
    * `decimal_places`
    * `json_schema_extra`