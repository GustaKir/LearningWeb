Title: Testing with HTTPX and TestClient
URL: https://fastapi.tiangolo.com/tutorial/testing/
Summary: This section provides guidance on how to pass various types of data in requests during testing with HTTPX or the TestClient. It outlines methods for including path or query parameters in the URL, sending JSON bodies, form data, headers, and cookies. Additionally, it notes that the TestClient accepts data convertible to JSON rather than Pydantic models.
---

```

Whenever you need the client to pass information in the request and you don't know how to, you can search (Google) how to do it in `httpx`, or even how to do it with `requests`, as HTTPX's design is based on Requests' design.
Then you just do the same in your tests.
E.g.:
  * To pass a _path_ or _query_ parameter, add it to the URL itself.
  * To pass a JSON body, pass a Python object (e.g. a `dict`) to the parameter `json`.
  * If you need to send _Form Data_ instead of JSON, use the `data` parameter instead.
  * To pass _headers_ , use a `dict` in the `headers` parameter.
  * For _cookies_ , a `dict` in the `cookies` parameter.


For more information about how to pass data to the backend (using `httpx` or the `TestClient`) check the [HTTPX documentation](https://www.python-httpx.org).
Info
Note that the `TestClient` receives data that can be converted to JSON, not Pydantic models.
If you have a Pydantic model in your test and you want to send its data to the application during testing, you can use the `jsonable_encoder` described in [JSON Compatible Encoder](https://fastapi.tiangolo.com/tutorial/encoder/).
## Run it[¶](https://fastapi.tiangolo.com/tutorial/testing/#run-it "Permanent link")
After that, you just need to install `pytest`.
Make sure you create a [virtual environment](https://fastapi.tiangolo.com/virtual-environments/), activate it, and then install it, for example:
```

fast →[](https://fastapi.tiangolo.com/tutorial/testing/)pip install pytestrestart ↻[](https://fastapi.tiangolo.com/tutorial/testing/)

```

It will detect the files and tests automatically, execute them, and report the results back to you.
Run the tests with:
```

fast →[](https://fastapi.tiangolo.com/tutorial/testing/)pytest================ test session starts ================platform linux -- Python 3.6.9, pytest-5.3.5, py-1.8.1, pluggy-0.13.1rootdir: /home/user/code/superawesome-cli/appplugins: forked-1.1.3, xdist-1.31.0, cov-2.8.1collected 6 itemstest_main.py ......              [100%]================= 1 passed in 0.03s =================restart ↻[](https://fastapi.tiangolo.com/tutorial/testing/)

```

Was this page helpful? 
Thanks for your feedback! 
Thanks for your feedback! 
Back to top  [ Previous  Static Files  ](https://fastapi.tiangolo.com/tutorial/static-files/) [ Next  Debugging  ](https://fastapi.tiangolo.com/tutorial/debugging/)
The FastAPI trademark is owned by [@tiangolo](https://tiangolo.com) and is registered in the US and across other regions 
Made with [ Material for MkDocs ](https://squidfunk.github.io/mkdocs-material/)
[ ](https://github.com/fastapi/fastapi "github.com") [ ](https://discord.gg/VQjSZaeJmf "discord.gg") [ ](https://twitter.com/fastapi "twitter.com") [ ](https://www.linkedin.com/in/tiangolo "www.linkedin.com") [ ](https://dev.to/tiangolo "dev.to") [ ](https://medium.com/@tiangolo "medium.com") [ ](https://tiangolo.com "tiangolo.com")