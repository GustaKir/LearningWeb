Title: Default Values in OpenAPI Response Models
URL: https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/
Summary: This section discusses how default values in response models affect API documentation and client interactions. It explains that even if a value is not explicitly returned, a default value of `null` will still be present in the JSON response. Consequently, clients can rely on the field's existence while noting that it may have a default value of `None`. The documentation should mark such fields as required to reflect this behavior.
---

```

...then because `description` has a default value, if you **don't return anything** for that field, it will still have that **default value**.
### Model for Output Response Data[Â¶](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#model-for-output-response-data "Permanent link")
If you interact with the docs and check the response, even though the code didn't add anything in one of the `description` fields, the JSON response contains the default value (`null`):
![](https://fastapi.tiangolo.com/img/tutorial/separate-openapi-schemas/image02.png)
This means that it will **always have a value** , it's just that sometimes the value could be `None` (or `null` in JSON).
That means that, clients using your API don't have to check if the value exists or not, they can **assume the field will always be there** , but just that in some cases it will have the default value of `None`.
The way to describe this in OpenAPI, is to mark that field as **required** , because it will always be there.
Because of that, the JSON Schema for a model can be different depending on if it's used for **input or output** :
  * for **input** the `description` will **not be required**
  * for **output** it will be **required** (and possibly `None`, or in JSON terms, `null`)


### Model for Output in Docs[Â¶](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#model-for-output-in-docs "Permanent link")
You can check the output model in the docs too, **both** `name` and `description` are marked as **required** with a **red asterisk** :
![](https://fastapi.tiangolo.com/img/tutorial/separate-openapi-schemas/image03.png)
### Model for Input and Output in Docs[Â¶](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#model-for-input-and-output-in-docs "Permanent link")
And if you check all the available Schemas (JSON Schemas) in OpenAPI, you will see that there are two, one `Item-Input` and one `Item-Output`.
For `Item-Input`, `description` is **not required** , it doesn't have a red asterisk.
But for `Item-Output`, `description` is **required** , it has a red asterisk.
![](https://fastapi.tiangolo.com/img/tutorial/separate-openapi-schemas/image04.png)
With this feature from **Pydantic v2** , your API documentation is more **precise** , and if you have autogenerated clients and SDKs, they will be more precise too, with a better **developer experience** and consistency. ðŸŽ‰
## Do not Separate Schemas[Â¶](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#do-not-separate-schemas "Permanent link")
Now, there are some cases where you might want to have the **same schema for input and output**.
Probably the main use case for this is if you already have some autogenerated client code/SDKs and you don't want to update all the autogenerated client code/SDKs yet, you probably will want to do it at some point, but maybe not right now.
In that case, you can disable this feature in **FastAPI** , with the parameter `separate_input_output_schemas=False`.
Info
Support for `separate_input_output_schemas` was added in FastAPI `0.102.0`. ðŸ¤“
[Python 3.10+](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#__tabbed_9_1)
```
fromfastapiimport FastAPI
frompydanticimport BaseModel
classItem(BaseModel):
  name: str
  description: str | None = None
app = FastAPI(separate_input_output_schemas=False)
@app.post("/items/")
defcreate_item(item: Item):
  return item
@app.get("/items/")
defread_items() -> list[Item]:
  return [
    Item(
      name="Portal Gun",
      description="Device to travel through the multi-rick-verse",
    ),
    Item(name="Plumbus"),
  ]

```

ðŸ¤“ Other versions and variants
[Python 3.9+](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#__tabbed_10_1)[Python 3.8+](https://fastapi.tiangolo.com/how-to/separate-openapi-schemas/#__tabbed_10_2)
```
fromtypingimport Optional
fromfastapiimport FastAPI
frompydanticimport BaseModel
classItem(BaseModel):
  name: str
  description: Optional[str] = None
app = FastAPI(separate_input_output_schemas=False)
@app.post("/items/")
defcreate_item(item: Item):
  return item
@app.get("/items/")
defread_items() -> list[Item]:
  return [
    Item(
      name="Portal Gun",
      description="Device to travel through the multi-rick-verse",
    ),
    Item(name="Plumbus"),
  ]

```

```
fromtypingimport List, Union
fromfastapiimport FastAPI
frompydanticimport BaseModel
classItem(BaseModel):
  name: str
  description: Union[str, None] = None
app = FastAPI(separate_input_output_schemas=False)
@app.post("/items/")
defcreate_item(item: Item):
  return item
@app.get("/items/")
defread_items() -> List[Item]:
  return [
    Item(
      name="Portal Gun",
      description="Device to travel through the multi-rick-verse",
    ),
    Item(name="Plumbus"),
  ]