Title: Using Pydantic Models for Header Parameters in FastAPI
URL: https://fastapi.tiangolo.com/tutorial/header-param-models/
Summary: This section explains how to create a Pydantic model for a group of related header parameters in FastAPI. It describes the benefits of reusing the model for multiple endpoints and implementing validations and metadata, starting from FastAPI version 0.115.0.
---

# Header Parameter Models[Â¶](https://fastapi.tiangolo.com/tutorial/header-param-models/#header-parameter-models "Permanent link")
If you have a group of related **header parameters** , you can create a **Pydantic model** to declare them.
This would allow you to **re-use the model** in **multiple places** and also to declare validations and metadata for all the parameters at once. ðŸ˜Ž
Note
This is supported since FastAPI version `0.115.0`. ðŸ¤“
## Header Parameters with a Pydantic Model[Â¶](https://fastapi.tiangolo.com/tutorial/header-param-models/#header-parameters-with-a-pydantic-model "Permanent link")
Declare the **header parameters** that you need in a **Pydantic model** , and then declare the parameter as `Header`:
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/header-param-models/#__tabbed_1_1)
```
fromtypingimport Annotated
fromfastapiimport FastAPI, Header
frompydanticimport BaseModel
app = FastAPI()
classCommonHeaders(BaseModel):
  host: str
  save_data: bool
  if_modified_since: str | None = None
  traceparent: str | None = None
  x_tag: list[str] = []
@app.get("/items/")
async defread_items(headers: Annotated[CommonHeaders, Header()]):
  return headers

```

ðŸ¤“ Other versions and variants
[Python 3.9+](https://fastapi.tiangolo.com/tutorial/header-param-models/#__tabbed_2_1)[Python 3.8+](https://fastapi.tiangolo.com/tutorial/header-param-models/#__tabbed_2_2)[Python 3.10+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/header-param-models/#__tabbed_2_3)[Python 3.9+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/header-param-models/#__tabbed_2_4)[Python 3.8+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/header-param-models/#__tabbed_2_5)
```
fromtypingimport Annotated, Union
fromfastapiimport FastAPI, Header
frompydanticimport BaseModel
app = FastAPI()
classCommonHeaders(BaseModel):
  host: str
  save_data: bool
  if_modified_since: Union[str, None] = None
  traceparent: Union[str, None] = None
  x_tag: list[str] = []
@app.get("/items/")
async defread_items(headers: Annotated[CommonHeaders, Header()]):
  return headers

```

```
fromtypingimport List, Union
fromfastapiimport FastAPI, Header
frompydanticimport BaseModel
fromtyping_extensionsimport Annotated
app = FastAPI()
classCommonHeaders(BaseModel):
  host: str
  save_data: bool
  if_modified_since: Union[str, None] = None
  traceparent: Union[str, None] = None
  x_tag: List[str] = []
@app.get("/items/")
async defread_items(headers: Annotated[CommonHeaders, Header()]):
  return headers

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromfastapiimport FastAPI, Header
frompydanticimport BaseModel
app = FastAPI()
classCommonHeaders(BaseModel):
  host: str
  save_data: bool
  if_modified_since: str | None = None
  traceparent: str | None = None
  x_tag: list[str] = []
@app.get("/items/")
async defread_items(headers: CommonHeaders = Header()):
  return headers

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromtypingimport Union
fromfastapiimport FastAPI, Header
frompydanticimport BaseModel
app = FastAPI()
classCommonHeaders(BaseModel):
  host: str
  save_data: bool
  if_modified_since: Union[str, None] = None
  traceparent: Union[str, None] = None
  x_tag: list[str] = []
@app.get("/items/")
async defread_items(headers: CommonHeaders = Header()):
  return headers

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromtypingimport List, Union
fromfastapiimport FastAPI, Header
frompydanticimport BaseModel
app = FastAPI()
classCommonHeaders(BaseModel):
  host: str
  save_data: bool
  if_modified_since: Union[str, None] = None
  traceparent: Union[str, None] = None
  x_tag: List[str] = []
@app.get("/items/")
async defread_items(headers: CommonHeaders = Header()):
  return headers

```

**FastAPI** will **extract** the data for **each field** from the **headers** in the request and give you the Pydantic model you defined.
## Check the Docs[Â¶](https://fastapi.tiangolo.com/tutorial/header-param-models/#check-the-docs "Permanent link")
You can see the required headers in the docs UI at `/docs`:
![](https://fastapi.tiangolo.com/img/tutorial/header-param-models/image01.png)
## Forbid Extra Headers[Â¶](https://fastapi.tiangolo.com/tutorial/header-param-models/#forbid-extra-headers "Permanent link")
In some special use cases (probably not very common), you might want to **restrict** the headers that you want to receive.
You can use Pydantic's model configuration to `forbid` any `extra` fields:
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/header-param-models/#__tabbed_3_1)
```
fromtypingimport Annotated
fromfastapiimport FastAPI, Header
frompydanticimport BaseModel
app = FastAPI()
classCommonHeaders(BaseModel):
  model_config = {"extra": "forbid"}
  host: str
  save_data: bool
  if_modified_since: str | None = None
  traceparent: str | None = None
  x_tag: list[str] = []
@app.get("/items/")
async defread_items(headers: Annotated[CommonHeaders, Header()]):
  return headers