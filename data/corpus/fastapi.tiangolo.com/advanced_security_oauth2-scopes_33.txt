Title: Implementing Security with OAuth2 Scopes in FastAPI
URL: https://fastapi.tiangolo.com/advanced/security/oauth2-scopes/
Summary: This section explains how to use the `Security` class in FastAPI as a subclass of `Depends` to manage security scopes and document APIs with OpenAPI. It highlights the importance of declaring security scopes, using the `SecurityScopes` dependency to manage user authentication, and how to apply the `oauth2_scheme` without scope requirements using `Depends`.
---

= Depends(get_current_user)):
  return {"status": "ok"}

```

Technical Details
`Security` is actually a subclass of `Depends`, and it has just one extra parameter that we'll see later.
But by using `Security` instead of `Depends`, **FastAPI** will know that it can declare security scopes, use them internally, and document the API with OpenAPI.
But when you import `Query`, `Path`, `Depends`, `Security` and others from `fastapi`, those are actually functions that return special classes.
## Use `SecurityScopes`[Â¶](https://fastapi.tiangolo.com/advanced/security/oauth2-scopes/#use-securityscopes "Permanent link")
Now update the dependency `get_current_user`.
This is the one used by the dependencies above.
Here's where we are using the same OAuth2 scheme we created before, declaring it as a dependency: `oauth2_scheme`.
Because this dependency function doesn't have any scope requirements itself, we can use `Depends` with `oauth2_scheme`, we don't have to use `Security` when we don't need to specify security scopes.
We also declare a special parameter of type `SecurityScopes`, imported from `fastapi.security`.
This `SecurityScopes` class is similar to `Request` (`Request` was used to get the request object directly).
[Python 3.10+](https://fastapi.tiangolo.com/advanced/security/oauth2-scopes/#__tabbed_9_1)
```
fromdatetimeimport datetime, timedelta, timezone
fromtypingimport Annotated
importjwt
fromfastapiimport Depends, FastAPI, HTTPException, Security, status
fromfastapi.securityimport (
  OAuth2PasswordBearer,
  OAuth2PasswordRequestForm,
  SecurityScopes,
)
fromjwt.exceptionsimport InvalidTokenError
frompasslib.contextimport CryptContext
frompydanticimport BaseModel, ValidationError
# to get a string like this run:
# openssl rand -hex 32
SECRET_KEY = "09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30
fake_users_db = {
  "johndoe": {
    "username": "johndoe",
    "full_name": "John Doe",
    "email": "johndoe@example.com",
    "hashed_password": "$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW",
    "disabled": False,
  },
  "alice": {
    "username": "alice",
    "full_name": "Alice Chains",
    "email": "alicechains@example.com",
    "hashed_password": "$2b$12$gSvqqUPvlXP2tfVFaWK1Be7DlH.PKZbv5H8KnzzVgXXbVxpva.pFm",
    "disabled": True,
  },
}
classToken(BaseModel):
  access_token: str
  token_type: str
classTokenData(BaseModel):
  username: str | None = None
  scopes: list[str] = []
classUser(BaseModel):
  username: str
  email: str | None = None
  full_name: str | None = None
  disabled: bool | None = None
classUserInDB(User):
  hashed_password: str
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(
  tokenUrl="token",
  scopes={"me": "Read information about the current user.", "items": "Read items."},
)
app = FastAPI()
defverify_password(plain_password, hashed_password):
  return pwd_context.verify(plain_password, hashed_password)
defget_password_hash(password):
  return pwd_context.hash(password)
defget_user(db, username: str):
  if username in db:
    user_dict = db[username]
    return UserInDB(**user_dict)
defauthenticate_user(fake_db, username: str, password: str):
  user = get_user(fake_db, username)
  if not user:
    return False
  if not verify_password(password, user.hashed_password):
    return False
  return user
defcreate_access_token(data: dict, expires_delta: timedelta | None = None):
  to_encode = data.copy()
  if expires_delta:
    expire = datetime.now(timezone.utc) + expires_delta
  else:
    expire = datetime.now(timezone.utc) + timedelta(minutes=15)
  to_encode.update({"exp": expire})
  encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
  return encoded_jwt
async defget_current_user(
  security_scopes: SecurityScopes, token: Annotated[str, Depends(oauth2_scheme)]
):
  if security_scopes.scopes:
    authenticate_value = f'Bearer scope="{security_scopes.scope_str}"'
  else:
    authenticate_value = "Bearer"
  credentials_exception = HTTPException(
    status_code=status.HTTP_401_UNAUTHORIZED,
    detail="Could not validate credentials",
    headers={"WWW-Authenticate": authenticate_value},
  )
  try:
    payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
    username = payload.get("sub")
    if username is None:
      raise credentials_exception
    token_scopes = payload.get("scopes", [])
    token_data = TokenData(scopes=token_scopes, username=username)
  except (InvalidTokenError, ValidationError):
    raise credentials_exception
  user = get_user(fake_users_db, username=token_data.username)
  if user is None:
    raise credentials_exception
  for scope in security_scopes.scopes:
    if scope not in token_data.scopes:
      raise HTTPException(
        status_code=status.HTTP_401_UNAUTHORIZED,
        detail="Not enough permissions",
        headers={"WWW-Authenticate": authenticate_value},
      )
  return user
async d