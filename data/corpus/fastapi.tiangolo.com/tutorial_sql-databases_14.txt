Title: FastAPI Tutorial: SQL Databases
URL: https://fastapi.tiangolo.com/tutorial/sql-databases/
Summary: This section of the FastAPI tutorial demonstrates how to set up a simple SQLite database with SQLModel. It includes the creation of a Hero model with fields for id, name, age, and secret_name. The tutorial also covers establishing a database connection, creating tables, and implementing basic CRUD operations like creating and reading hero entries using FastAPI endpoints.
---

```
fromtypingimport Union
fromfastapiimport Depends, FastAPI, HTTPException, Query
fromsqlmodelimport Field, Session, SQLModel, create_engine, select
classHero(SQLModel, table=True):
  id: Union[int, None] = Field(default=None, primary_key=True)
  name: str = Field(index=True)
  age: Union[int, None] = Field(default=None, index=True)
  secret_name: str
sqlite_file_name = "database.db"
sqlite_url = f"sqlite:///{sqlite_file_name}"
connect_args = {"check_same_thread": False}
engine = create_engine(sqlite_url, connect_args=connect_args)
defcreate_db_and_tables():
  SQLModel.metadata.create_all(engine)
defget_session():
  with Session(engine) as session:
    yield session
app = FastAPI()
@app.on_event("startup")
defon_startup():
  create_db_and_tables()
@app.post("/heroes/")
defcreate_hero(hero: Hero, session: Session = Depends(get_session)) -> Hero:
  session.add(hero)
  session.commit()
  session.refresh(hero)
  return hero
@app.get("/heroes/")
defread_heroes(
  session: Session = Depends(get_session),
  offset: int = 0,
  limit: int = Query(default=100, le=100),
) -> list[Hero]:
  heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()
  return heroes
@app.get("/heroes/{hero_id}")
defread_hero(hero_id: int, session: Session = Depends(get_session)) -> Hero:
  hero = session.get(Hero, hero_id)
  if not hero:
    raise HTTPException(status_code=404, detail="Hero not found")
  return hero
@app.delete("/heroes/{hero_id}")
defdelete_hero(hero_id: int, session: Session = Depends(get_session)):
  hero = session.get(Hero, hero_id)
  if not hero:
    raise HTTPException(status_code=404, detail="Hero not found")
  session.delete(hero)
  session.commit()
  return {"ok": True}

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromtypingimport List, Union
fromfastapiimport Depends, FastAPI, HTTPException, Query
fromsqlmodelimport Field, Session, SQLModel, create_engine, select
classHero(SQLModel, table=True):
  id: Union[int, None] = Field(default=None, primary_key=True)
  name: str = Field(index=True)
  age: Union[int, None] = Field(default=None, index=True)
  secret_name: str
sqlite_file_name = "database.db"
sqlite_url = f"sqlite:///{sqlite_file_name}"
connect_args = {"check_same_thread": False}
engine = create_engine(sqlite_url, connect_args=connect_args)
defcreate_db_and_tables():
  SQLModel.metadata.create_all(engine)
defget_session():
  with Session(engine) as session:
    yield session
app = FastAPI()
@app.on_event("startup")
defon_startup():
  create_db_and_tables()
@app.post("/heroes/")
defcreate_hero(hero: Hero, session: Session = Depends(get_session)) -> Hero:
  session.add(hero)
  session.commit()
  session.refresh(hero)
  return hero
@app.get("/heroes/")
defread_heroes(
  session: Session = Depends(get_session),
  offset: int = 0,
  limit: int = Query(default=100, le=100),
) -> List[Hero]:
  heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()
  return heroes
@app.get("/heroes/{hero_id}")
defread_hero(hero_id: int, session: Session = Depends(get_session)) -> Hero:
  hero = session.get(Hero, hero_id)
  if not hero:
    raise HTTPException(status_code=404, detail="Hero not found")
  return hero
@app.delete("/heroes/{hero_id}")
defdelete_hero(hero_id: int, session: Session = Depends(get_session)):
  hero = session.get(Hero, hero_id)
  if not hero:
    raise HTTPException(status_code=404, detail="Hero not found")
  session.delete(hero)
  session.commit()
  return {"ok": True}

```

### Create a Session Dependency[Â¶](https://fastapi.tiangolo.com/tutorial/sql-databases/#create-a-session-dependency "Permanent link")
A **`Session`**is what stores the**objects in memory** and keeps track of any changes needed in the data, then it **uses the`engine`** to communicate with the database.
We will create a FastAPI **dependency** with `yield` that will provide a new `Session` for each request. This is what ensures that we use a single session per request. ðŸ¤“
Then we create an `Annotated` dependency `SessionDep` to simplify the rest of the code that will use this dependency.
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/sql-databases/#__tabbed_10_1)
```
# Code above omitted ðŸ‘†
defget_session():
  with Session(engine) as session:
    yield session
SessionDep = Annotated[Session, Depends(get_session)]
# Code below omitted ðŸ‘‡

```

ðŸ‘€ Full file preview
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/sql-databases/#__tabbed_11_1)