Title: Configuring CORS in FastAPI
URL: https://fastapi.tiangolo.com/tutorial/cors/
Summary: The `CORSMiddleware` in FastAPI is restrictive by default, requiring explicit definitions for allowed origins, methods, and headers for cross-origin requests. Supported parameters include `allow_origins`, `allow_origin_regex`, `allow_methods`, and `allow_headers`, each allowing customized settings for handling CORS.
---

```

The default parameters used by the `CORSMiddleware` implementation are restrictive by default, so you'll need to explicitly enable particular origins, methods, or headers, in order for browsers to be permitted to use them in a Cross-Domain context.
The following arguments are supported:
  * `allow_origins` - A list of origins that should be permitted to make cross-origin requests. E.g. `['https://example.org', 'https://www.example.org']`. You can use `['*']` to allow any origin.
  * `allow_origin_regex` - A regex string to match against origins that should be permitted to make cross-origin requests. e.g. `'https://.*\.example\.org'`.
  * `allow_methods` - A list of HTTP methods that should be allowed for cross-origin requests. Defaults to `['GET']`. You can use `['*']` to allow all standard methods.
  * `allow_headers` - A list of HTTP request headers that should be supported for cross-origin requests. Defaults to `[]`. You can use `['*']` to allow all headers. The `Accept`, `Accept-Language`, `Content-Language` and `Content-Type` headers are always allowed for [simple CORS requests](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS#simple_requests).
  * `allow_credentials` - Indicate that cookies should be supported for cross-origin requests. Defaults to `False`. Also, `allow_origins` cannot be set to `['*']` for credentials to be allowed, origins must be specified.
  * `expose_headers` - Indicate any response headers that should be made accessible to the browser. Defaults to `[]`.
  * `max_age` - Sets a maximum time in seconds for browsers to cache CORS responses. Defaults to `600`.


The middleware responds to two particular types of HTTP request...
### CORS preflight requests[¶](https://fastapi.tiangolo.com/tutorial/cors/#cors-preflight-requests "Permanent link")
These are any `OPTIONS` request with `Origin` and `Access-Control-Request-Method` headers.
In this case the middleware will intercept the incoming request and respond with appropriate CORS headers, and either a `200` or `400` response for informational purposes.
### Simple requests[¶](https://fastapi.tiangolo.com/tutorial/cors/#simple-requests "Permanent link")
Any request with an `Origin` header. In this case the middleware will pass the request through as normal, but will include appropriate CORS headers on the response.
## More info[¶](https://fastapi.tiangolo.com/tutorial/cors/#more-info "Permanent link")
For more info about CORS, check the [Mozilla CORS documentation](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS).
Technical Details
You could also use `from starlette.middleware.cors import CORSMiddleware`.
**FastAPI** provides several middlewares in `fastapi.middleware` just as a convenience for you, the developer. But most of the available middlewares come directly from Starlette.
Was this page helpful? 
Thanks for your feedback! 
Thanks for your feedback! 
Back to top  [ Previous  Middleware  ](https://fastapi.tiangolo.com/tutorial/middleware/) [ Next  SQL (Relational) Databases  ](https://fastapi.tiangolo.com/tutorial/sql-databases/)
The FastAPI trademark is owned by [@tiangolo](https://tiangolo.com) and is registered in the US and across other regions 
Made with [ Material for MkDocs ](https://squidfunk.github.io/mkdocs-material/)
[ ](https://github.com/fastapi/fastapi "github.com") [ ](https://discord.gg/VQjSZaeJmf "discord.gg") [ ](https://twitter.com/fastapi "twitter.com") [ ](https://www.linkedin.com/in/tiangolo "www.linkedin.com") [ ](https://dev.to/tiangolo "dev.to") [ ](https://medium.com/@tiangolo "medium.com") [ ](https://tiangolo.com "tiangolo.com")
  *[CORS]: Cross-Origin Resource Sharing