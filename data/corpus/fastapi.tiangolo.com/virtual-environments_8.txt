Title: Managing Python Package Versions
URL: https://fastapi.tiangolo.com/virtual-environments/
Summary: To avoid breaking changes and incompatibilities in Python projects, it's essential to manage package versions carefully. Installing packages in a global environment can conflict with system-installed packages, leading to issues in project functionality. Using virtual environments helps maintain compatibility across different projects and their dependencies.
---

```

Tip
It's very common in Python packages to try the best to **avoid breaking changes** in **new versions** , but it's better to be safe, and install newer versions intentionally and when you can run the tests to check everything is working correctly.
Now, imagine that with **many** other **packages** that all your **projects depend on**. That's very difficult to manage. And you would probably end up running some projects with some **incompatible versions** of the packages, and not knowing why something isn't working.
Also, depending on your operating system (e.g. Linux, Windows, macOS), it could have come with Python already installed. And in that case it probably had some packages pre-installed with some specific versions **needed by your system**. If you install packages in the global Python environment, you could end up **breaking** some of the programs that came with your operating system.
## Where are Packages Installed[¶](https://fastapi.tiangolo.com/virtual-environments/#where-are-packages-installed "Permanent link")
When you install Python, it creates some directories with some files in your computer.
Some of these directories are the ones in charge of having all the packages you install.
When you run:
```

fast →[](https://fastapi.tiangolo.com/virtual-environments/)💬 Don't run this now, it's just an example 🤓pip install "fastapi[standard]"restart ↻[](https://fastapi.tiangolo.com/virtual-environments/)

```

That will download a compressed file with the FastAPI code, normally from [PyPI](https://pypi.org/project/fastapi/).
It will also **download** files for other packages that FastAPI depends on.
Then it will **extract** all those files and put them in a directory in your computer.
By default, it will put those files downloaded and extracted in the directory that comes with your Python installation, that's the **global environment**.
## What are Virtual Environments[¶](https://fastapi.tiangolo.com/virtual-environments/#what-are-virtual-environments "Permanent link")
The solution to the problems of having all the packages in the global environment is to use a **virtual environment for each project** you work on.
A virtual environment is a **directory** , very similar to the global one, where you can install the packages for a project.
This way, each project will have its own virtual environment (`.venv` directory) with its own packages.
```
flowchart TB
  subgraph stone-project[philosophers-stone project]
    stone(philosophers-stone) --->|requires| harry-1
    subgraph venv1[.venv]
      harry-1[harry v1]
    end
  end
  subgraph azkaban-project[prisoner-of-azkaban project]
    azkaban(prisoner-of-azkaban) --->|requires| harry-3
    subgraph venv2[.venv]
      harry-3[harry v3]
    end
  end
  stone-project ~~~ azkaban-project
```

## What Does Activating a Virtual Environment Mean[¶](https://fastapi.tiangolo.com/virtual-environments/#what-does-activating-a-virtual-environment-mean "Permanent link")
When you activate a virtual environment, for example with:
[Linux, macOS](https://fastapi.tiangolo.com/virtual-environments/#__tabbed_6_1)[Windows PowerShell](https://fastapi.tiangolo.com/virtual-environments/#__tabbed_6_2)[Windows Bash](https://fastapi.tiangolo.com/virtual-environments/#__tabbed_6_3)
```

fast →[](https://fastapi.tiangolo.com/virtual-environments/)source .venv/bin/activaterestart ↻[](https://fastapi.tiangolo.com/virtual-environments/)

```

```

fast →[](https://fastapi.tiangolo.com/virtual-environments/)

```

Or if you use Bash for Windows (e.g. [Git Bash](https://gitforwindows.org/)):
```

fast →[](https://fastapi.tiangolo.com/virtual-environments/)

```

That command will create or modify some [environment variables](https://fastapi.tiangolo.com/environment-variables/) that will be available for the next commands.
One of those variables is the `PATH` variable.
Tip
You can learn more about the `PATH` environment variable in the [Environment Variables](https://fastapi.tiangolo.com/environment-variables/#path-environment-variable) section.
Activating a virtual environment adds its path `.venv/bin` (on Linux and macOS) or `.venv\Scripts` (on Windows) to the `PATH` environment variable.
Let's say that before activating the environment, the `PATH` variable looked like this:
[Linux, macOS](https://fastapi.tiangolo.com/virtual-environments/#__tabbed_7_1)[Windows](https://fastapi.tiangolo.com/virtual-environments/#__tabbed_7_2)
```
/usr/bin:/bin:/usr/sbin:/sbin

```

That means that the system would look for programs in:
  * `/usr/bin`
  * `/bin`
  * `/usr/sbin`
  * `/sbin`


```
C:\Windows\System32

```

That means that the system would look for programs in:
  * `C:\Windows\System32`


After activating the virtual environment, the `PATH` variable would look something like this:
[Linux, macOS](https://fastapi.tiangolo.com/virtual-environments/#__tabbed_8_1)[Windows](https://fastapi.tiangolo.com/virtual-environments/#__tabbed_8_2)