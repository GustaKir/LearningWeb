Title: Using Field in FastAPI
URL: https://fastapi.tiangolo.com/tutorial/body-fields/
Summary: The `Field` function in FastAPI operates similarly to `Query`, `Path`, and `Body`, sharing parameters and functionality. These functions create instances of subclasses of the `Param` class, which inherits from Pydantic's `FieldInfo`. This section also highlights that model attributes with types and defaults using `Field` match the structure of path operation function parameters, and provides a tip about declaring extra information with `Field`.
---

```

`Field` works the same way as `Query`, `Path` and `Body`, it has all the same parameters, etc.
Technical Details
Actually, `Query`, `Path` and others you'll see next create objects of subclasses of a common `Param` class, which is itself a subclass of Pydantic's `FieldInfo` class.
And Pydantic's `Field` returns an instance of `FieldInfo` as well.
`Body` also returns objects of a subclass of `FieldInfo` directly. And there are others you will see later that are subclasses of the `Body` class.
Remember that when you import `Query`, `Path`, and others from `fastapi`, those are actually functions that return special classes.
Tip
Notice how each model's attribute with a type, default value and `Field` has the same structure as a _path operation function's_ parameter, with `Field` instead of `Path`, `Query` and `Body`.
## Add extra information[¶](https://fastapi.tiangolo.com/tutorial/body-fields/#add-extra-information "Permanent link")
You can declare extra information in `Field`, `Query`, `Body`, etc. And it will be included in the generated JSON Schema.
You will learn more about adding extra information later in the docs, when learning to declare examples.
Warning
Extra keys passed to `Field` will also be present in the resulting OpenAPI schema for your application. As these keys may not necessarily be part of the OpenAPI specification, some OpenAPI tools, for example [the OpenAPI validator](https://validator.swagger.io/), may not work with your generated schema.
## Recap[¶](https://fastapi.tiangolo.com/tutorial/body-fields/#recap "Permanent link")
You can use Pydantic's `Field` to declare extra validations and metadata for model attributes.
You can also use the extra keyword arguments to pass additional JSON Schema metadata.
Was this page helpful? 
Thanks for your feedback! 
Thanks for your feedback! 
Back to top  [ Previous  Body - Multiple Parameters  ](https://fastapi.tiangolo.com/tutorial/body-multiple-params/) [ Next  Body - Nested Models  ](https://fastapi.tiangolo.com/tutorial/body-nested-models/)
The FastAPI trademark is owned by [@tiangolo](https://tiangolo.com) and is registered in the US and across other regions 
Made with [ Material for MkDocs ](https://squidfunk.github.io/mkdocs-material/)
[ ](https://github.com/fastapi/fastapi "github.com") [ ](https://discord.gg/VQjSZaeJmf "discord.gg") [ ](https://twitter.com/fastapi "twitter.com") [ ](https://www.linkedin.com/in/tiangolo "www.linkedin.com") [ ](https://dev.to/tiangolo "dev.to") [ ](https://medium.com/@tiangolo "medium.com") [ ](https://tiangolo.com "tiangolo.com")