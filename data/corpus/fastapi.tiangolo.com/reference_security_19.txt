Title: OAuth2 Security Scheme in FastAPI
URL: https://fastapi.tiangolo.com/reference/security/
Summary: This documentation section describes the OAuth2 flow for authentication using a bearer token obtained through a password in FastAPI. It outlines the parameters for the OAuth2 class, including 'tokenUrl' for obtaining the token, 'scheme_name' for naming the security scheme, and 'scopes' for required OAuth2 scopes.
---

```

Bases: `OAuth2[](https://fastapi.tiangolo.com/reference/security/#fastapi.security.OAuth2 "<code class="doc-symbol doc-symbol-heading doc-symbol-class"></code>      <span class="doc doc-object-name doc-class-name">fastapi.security.OAuth2</span> \(<code>fastapi.security.oauth2.OAuth2</code>\)")`
OAuth2 flow for authentication using a bearer token obtained with a password. An instance of it would be used as a dependency.
Read more about it in the [FastAPI docs for Simple OAuth2 with Password and Bearer](https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/).
PARAMETER | DESCRIPTION  
---|---  
`tokenUrl` |  The URL to obtain the OAuth2 token. This would be the _path operation_ that has `OAuth2PasswordRequestForm` as a dependency. **TYPE:** `str`  
`scheme_name` |  Security scheme name. It will be included in the generated OpenAPI (e.g. visible at `/docs`). **TYPE:** `Optional[str]` **DEFAULT:** `None`  
`scopes` |  The OAuth2 scopes that would be required by the _path operations_ that use this dependency. **TYPE:** `Optional[Dict[str, str]]` **DEFAULT:** `None`  
`description` |  Security scheme description. It will be included in the generated OpenAPI (e.g. visible at `/docs`). **TYPE:** `Optional[str]` **DEFAULT:** `None`  
`auto_error` |  By default, if no HTTP Authorization header is provided, required for OAuth2 authentication, it will automatically cancel the request and send the client an error. If `auto_error` is set to `False`, when the HTTP Authorization header is not available, instead of erroring out, the dependency result will be `None`. This is useful when you want to have optional authentication. It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, with OAuth2 or in a cookie). **TYPE:** `bool` **DEFAULT:** `True`  
Source code in `fastapi/security/oauth2.py`
```
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
```
| ```
def__init__(
  self,
  tokenUrl: Annotated[
    str,
    Doc(
"""
      The URL to obtain the OAuth2 token. This would be the *path operation*
      that has `OAuth2PasswordRequestForm` as a dependency.
      """
    ),
  ],
  scheme_name: Annotated[
    Optional[str],
    Doc(
"""
      Security scheme name.
      It will be included in the generated OpenAPI (e.g. visible at `/docs`).
      """
    ),
  ] = None,
  scopes: Annotated[
    Optional[Dict[str, str]],
    Doc(
"""
      The OAuth2 scopes that would be required by the *path operations* that
      use this dependency.
      """
    ),
  ] = None,
  description: Annotated[
    Optional[str],
    Doc(
"""
      Security scheme description.
      It will be included in the generated OpenAPI (e.g. visible at `/docs`).
      """
    ),
  ] = None,
  auto_error: Annotated[
    bool,
    Doc(
"""
      By default, if no HTTP Authorization header is provided, required for
      OAuth2 authentication, it will automatically cancel the request and
      send the client an error.
      If `auto_error` is set to `False`, when the HTTP Authorization header
      is not available, instead of erroring out, the dependency result will
      be `None`.
      This is useful when you want to have optional authentication.
      It is also useful when you want to have authentication that can be
      provided in one of multiple optional ways (for example, with OAuth2
      or in a cookie).
      """
    ),
  ] = True,
):
  if not scopes:
    scopes = {}
  flows = OAuthFlowsModel(
    password=cast(Any, {"tokenUrl": tokenUrl, "scopes": scopes})
  )
  super().__init__(
    flows=flows,
    scheme_name=scheme_name,
    description=description,
    auto_error=auto_error,
  )

```
  
---|---  
###  model `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.OAuth2PasswordBearer.model "Permanent link")
```
model = OAuth2[](https://fastapi.tiangolo.com/reference/openapi/models/#fastapi.openapi.models.OAuth2 "<code class="doc-symbol doc-symbol-heading doc-symbol-class"></code>      <span class="doc doc-object-name doc-class-name">OAuth2</span> \(<code>fastapi.openapi.models.OAuth2</code>\)")(
  flows=cast(OAuthFlows[](https://fastapi.tiangolo.com/reference/openapi/models/#fastapi.openapi.models.OAuthFlows "<code class="doc-symbol doc-symbol-heading doc-symbol-class"></code>      <span class="doc doc-object-name doc-class-name">OAuthFlows</span> \(<code>fastapi.openapi.models.OAuthFlows</code>\)"), flows), description=description
)

```

###  scheme_name `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.OAuth2PasswordBearer.scheme_name "Permanent link")
```
scheme_name = scheme_name or __name__