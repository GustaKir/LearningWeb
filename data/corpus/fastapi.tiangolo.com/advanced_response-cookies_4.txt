Title: Setting Response Cookies in FastAPI
URL: https://fastapi.tiangolo.com/advanced/response-cookies/
Summary: This document discusses how to set cookies in FastAPI using the `Response` object. It illustrates the process of creating a cookie within a POST endpoint and highlights that any returned object can be combined with cookie settings. Additionally, it mentions the use of `response_model` for filtering the response, and how cookies can be set in dependencies.
---

```
fromfastapiimport FastAPI, Response
app = FastAPI()
@app.post("/cookie-and-object/")
defcreate_cookie(response: Response):
  response.set_cookie(key="fakesession", value="fake-cookie-session-value")
  return {"message": "Come to the dark side, we have cookies"}

```

And then you can return any object you need, as you normally would (a `dict`, a database model, etc).
And if you declared a `response_model`, it will still be used to filter and convert the object you returned.
**FastAPI** will use that _temporal_ response to extract the cookies (also headers and status code), and will put them in the final response that contains the value you returned, filtered by any `response_model`.
You can also declare the `Response` parameter in dependencies, and set cookies (and headers) in them.
## Return a `Response` directly[¶](https://fastapi.tiangolo.com/advanced/response-cookies/#return-a-response-directly "Permanent link")
You can also create cookies when returning a `Response` directly in your code.
To do that, you can create a response as described in [Return a Response Directly](https://fastapi.tiangolo.com/advanced/response-directly/).
Then set Cookies in it, and then return it:
[Python 3.8+](https://fastapi.tiangolo.com/advanced/response-cookies/#__tabbed_2_1)
```
fromfastapiimport FastAPI
fromfastapi.responsesimport JSONResponse
app = FastAPI()
@app.post("/cookie/")
defcreate_cookie():
  content = {"message": "Come to the dark side, we have cookies"}
  response = JSONResponse(content=content)
  response.set_cookie(key="fakesession", value="fake-cookie-session-value")
  return response

```

Tip
Keep in mind that if you return a response directly instead of using the `Response` parameter, FastAPI will return it directly.
So, you will have to make sure your data is of the correct type. E.g. it is compatible with JSON, if you are returning a `JSONResponse`.
And also that you are not sending any data that should have been filtered by a `response_model`.
### More info[¶](https://fastapi.tiangolo.com/advanced/response-cookies/#more-info "Permanent link")
Technical Details
You could also use `from starlette.responses import Response` or `from starlette.responses import JSONResponse`.
**FastAPI** provides the same `starlette.responses` as `fastapi.responses` just as a convenience for you, the developer. But most of the available responses come directly from Starlette.
And as the `Response` can be used frequently to set headers and cookies, **FastAPI** also provides it at `fastapi.Response`.
To see all the available parameters and options, check the [documentation in Starlette](https://www.starlette.io/responses/#set-cookie).
Was this page helpful? 
Thanks for your feedback! 
Thanks for your feedback! 
Back to top  [ Previous  Additional Responses in OpenAPI  ](https://fastapi.tiangolo.com/advanced/additional-responses/) [ Next  Response Headers  ](https://fastapi.tiangolo.com/advanced/response-headers/)
The FastAPI trademark is owned by [@tiangolo](https://tiangolo.com) and is registered in the US and across other regions 
Made with [ Material for MkDocs ](https://squidfunk.github.io/mkdocs-material/)
[ ](https://github.com/fastapi/fastapi "github.com") [ ](https://discord.gg/VQjSZaeJmf "discord.gg") [ ](https://twitter.com/fastapi "twitter.com") [ ](https://www.linkedin.com/in/tiangolo "www.linkedin.com") [ ](https://dev.to/tiangolo "dev.to") [ ](https://medium.com/@tiangolo "medium.com") [ ](https://tiangolo.com "tiangolo.com")