Title: Nested Models in FastAPI
URL: https://fastapi.tiangolo.com/tutorial/body-nested-models/
Summary: This section discusses how to create and utilize nested models in FastAPI using Pydantic. It demonstrates defining an 'Image' model and an 'Item' model, including various types and default values. An example PUT endpoint is provided to update an item with the specified model.
---

```

ðŸ¤“ Other versions and variants
[Python 3.9+](https://fastapi.tiangolo.com/tutorial/body-nested-models/#__tabbed_12_1)[Python 3.8+](https://fastapi.tiangolo.com/tutorial/body-nested-models/#__tabbed_12_2)
```
fromtypingimport Union
fromfastapiimport FastAPI
frompydanticimport BaseModel
app = FastAPI()
classImage(BaseModel):
  url: str
  name: str
classItem(BaseModel):
  name: str
  description: Union[str, None] = None
  price: float
  tax: Union[float, None] = None
  tags: set[str] = set()
  image: Union[Image, None] = None
@app.put("/items/{item_id}")
async defupdate_item(item_id: int, item: Item):
  results = {"item_id": item_id, "item": item}
  return results

```

```
fromtypingimport Set, Union
fromfastapiimport FastAPI
frompydanticimport BaseModel
app = FastAPI()
classImage(BaseModel):
  url: str
  name: str
classItem(BaseModel):
  name: str
  description: Union[str, None] = None
  price: float
  tax: Union[float, None] = None
  tags: Set[str] = set()
  image: Union[Image, None] = None
@app.put("/items/{item_id}")
async defupdate_item(item_id: int, item: Item):
  results = {"item_id": item_id, "item": item}
  return results

```

This would mean that **FastAPI** would expect a body similar to:
```
{
"name":"Foo",
"description":"The pretender",
"price":42.0,
"tax":3.2,
"tags":["rock","metal","bar"],
"image":{
"url":"http://example.com/baz.jpg",
"name":"The Foo live"
}
}

```

Again, doing just that declaration, with **FastAPI** you get:
  * Editor support (completion, etc.), even for nested models
  * Data conversion
  * Data validation
  * Automatic documentation


## Special types and validation[Â¶](https://fastapi.tiangolo.com/tutorial/body-nested-models/#special-types-and-validation "Permanent link")
Apart from normal singular types like `str`, `int`, `float`, etc. you can use more complex singular types that inherit from `str`.
To see all the options you have, checkout [Pydantic's Type Overview](https://docs.pydantic.dev/latest/concepts/types/). You will see some examples in the next chapter.
For example, as in the `Image` model we have a `url` field, we can declare it to be an instance of Pydantic's `HttpUrl` instead of a `str`:
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/body-nested-models/#__tabbed_13_1)
```
fromfastapiimport FastAPI
frompydanticimport BaseModel, HttpUrl
app = FastAPI()
classImage(BaseModel):
  url: HttpUrl
  name: str
classItem(BaseModel):
  name: str
  description: str | None = None
  price: float
  tax: float | None = None
  tags: set[str] = set()
  image: Image | None = None
@app.put("/items/{item_id}")
async defupdate_item(item_id: int, item: Item):
  results = {"item_id": item_id, "item": item}
  return results

```

ðŸ¤“ Other versions and variants
[Python 3.9+](https://fastapi.tiangolo.com/tutorial/body-nested-models/#__tabbed_14_1)[Python 3.8+](https://fastapi.tiangolo.com/tutorial/body-nested-models/#__tabbed_14_2)
```
fromtypingimport Union
fromfastapiimport FastAPI
frompydanticimport BaseModel, HttpUrl
app = FastAPI()
classImage(BaseModel):
  url: HttpUrl
  name: str
classItem(BaseModel):
  name: str
  description: Union[str, None] = None
  price: float
  tax: Union[float, None] = None
  tags: set[str] = set()
  image: Union[Image, None] = None
@app.put("/items/{item_id}")
async defupdate_item(item_id: int, item: Item):
  results = {"item_id": item_id, "item": item}
  return results

```

```
fromtypingimport Set, Union
fromfastapiimport FastAPI
frompydanticimport BaseModel, HttpUrl
app = FastAPI()
classImage(BaseModel):
  url: HttpUrl
  name: str
classItem(BaseModel):
  name: str
  description: Union[str, None] = None
  price: float
  tax: Union[float, None] = None
  tags: Set[str] = set()
  image: Union[Image, None] = None
@app.put("/items/{item_id}")
async defupdate_item(item_id: int, item: Item):
  results = {"item_id": item_id, "item": item}
  return results

```

The string will be checked to be a valid URL, and documented in JSON Schema / OpenAPI as such.
## Attributes with lists of submodels[Â¶](https://fastapi.tiangolo.com/tutorial/body-nested-models/#attributes-with-lists-of-submodels "Permanent link")
You can also use Pydantic models as subtypes of `list`, `set`, etc.:
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/body-nested-models/#__tabbed_15_1)
```
fromfastapiimport FastAPI
frompydanticimport BaseModel, HttpUrl
app = FastAPI()
classImage(BaseModel):
  url: HttpUrl
  name: str
classItem(BaseModel):
  name: str
  description: str | None = None
  price: float
  tax: float | None = None
  tags: set[str] = set()
  images: list[Image] | None = None
@app.put("/items/{item_id}")
async defupdate_item(item_id: int, item: Item):
  results = {"item_id": item_id, "item": item}
  return results

```

ðŸ¤“ Other versions and variants
[Python 3.9+](https://fastapi.tiangolo.com/tutorial/body-nested-models/#__tabbed_16_1)[Python 3.8+](https://fastapi.tiangolo.com/tutorial/body-nested-models/#__tabbed_16_2)