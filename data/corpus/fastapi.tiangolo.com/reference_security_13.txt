Title: HTTP Basic Authentication in FastAPI
URL: https://fastapi.tiangolo.com/reference/security/
Summary: This section describes the usage of HTTP Basic authentication in FastAPI, including how to create an instance of `HTTPBasic` and use it as a dependency. It emphasizes the resulting `HTTPBasicCredentials` object that provides the username and password, and provides an example of its implementation in a FastAPI application.
---

```
HTTPBasic(
  *,
  scheme_name=None,
  realm=None,
  description=None,
  auto_error=True
)

```

Bases: `HTTPBase`
HTTP Basic authentication.
#### Usage[¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.HTTPBasic--usage "Permanent link")
Create an instance object and use that object as the dependency in `Depends()`.
The dependency result will be an `HTTPBasicCredentials` object containing the `username` and the `password`.
Read more about it in the [FastAPI docs for HTTP Basic Auth](https://fastapi.tiangolo.com/advanced/security/http-basic-auth/).
#### Example[¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.HTTPBasic--example "Permanent link")
```
fromtypingimport Annotated
fromfastapiimport Depends, FastAPI
fromfastapi.securityimport HTTPBasic, HTTPBasicCredentials
app = FastAPI()
security = HTTPBasic()
@app.get("/users/me")
defread_current_user(credentials: Annotated[HTTPBasicCredentials, Depends(security)]):
  return {"username": credentials.username, "password": credentials.password}

```

PARAMETER | DESCRIPTION  
---|---  
`scheme_name` |  Security scheme name. It will be included in the generated OpenAPI (e.g. visible at `/docs`). **TYPE:** `Optional[str]` **DEFAULT:** `None`  
`realm` |  HTTP Basic authentication realm. **TYPE:** `Optional[str]` **DEFAULT:** `None`  
`description` |  Security scheme description. It will be included in the generated OpenAPI (e.g. visible at `/docs`). **TYPE:** `Optional[str]` **DEFAULT:** `None`  
`auto_error` |  By default, if the HTTP Basic authentication is not provided (a header), `HTTPBasic` will automatically cancel the request and send the client an error. If `auto_error` is set to `False`, when the HTTP Basic authentication is not available, instead of erroring out, the dependency result will be `None`. This is useful when you want to have optional authentication. It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, in HTTP Basic authentication or in an HTTP Bearer token). **TYPE:** `bool` **DEFAULT:** `True`  
Source code in `fastapi/security/http.py`
```
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
```
| ```
def__init__(
  self,
  *,
  scheme_name: Annotated[
    Optional[str],
    Doc(
"""
      Security scheme name.
      It will be included in the generated OpenAPI (e.g. visible at `/docs`).
      """
    ),
  ] = None,
  realm: Annotated[
    Optional[str],
    Doc(
"""
      HTTP Basic authentication realm.
      """
    ),
  ] = None,
  description: Annotated[
    Optional[str],
    Doc(
"""
      Security scheme description.
      It will be included in the generated OpenAPI (e.g. visible at `/docs`).
      """
    ),
  ] = None,
  auto_error: Annotated[
    bool,
    Doc(
"""
      By default, if the HTTP Basic authentication is not provided (a
      header), `HTTPBasic` will automatically cancel the request and send the
      client an error.
      If `auto_error` is set to `False`, when the HTTP Basic authentication
      is not available, instead of erroring out, the dependency result will
      be `None`.
      This is useful when you want to have optional authentication.
      It is also useful when you want to have authentication that can be
      provided in one of multiple optional ways (for example, in HTTP Basic
      authentication or in an HTTP Bearer token).
      """
    ),
  ] = True,
):
  self.model = HTTPBaseModel(scheme="basic", description=description)
  self.scheme_name = scheme_name or self.__class__.__name__
  self.realm = realm
  self.auto_error = auto_error

```
  
---|---  
###  model `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.HTTPBasic.model "Permanent link")
```
model = HTTPBase[](https://fastapi.tiangolo.com/reference/openapi/models/#fastapi.openapi.models.HTTPBase "<code class="doc-symbol doc-symbol-heading doc-symbol-class"></code>      <span class="doc doc-object-name doc-class-name">HTTPBase</span> \(<code>fastapi.openapi.models.HTTPBase</code>\)")(scheme='basic', description=description)

```

###  scheme_name `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.HTTPBasic.scheme_name "Permanent link")
```
scheme_name = scheme_name or __name__

```

###  realm `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.HTTPBasic.realm "Permanent link")
```
realm = realm

```

###  auto_error `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.HTTPBasic.auto_error "Permanent link")
```
auto_error = auto_error

```

##  fastapi.security.HTTPBearer [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.HTTPBearer "Permanent link")