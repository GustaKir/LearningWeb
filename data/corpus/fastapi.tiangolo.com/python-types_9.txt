Title: Understanding Python Types in FastAPI
URL: https://fastapi.tiangolo.com/python-types/
Summary: This section discusses the integration of Pydantic with FastAPI, emphasizing the use of type hints and the special behavior of `Optional` and `Union` types without default values. It also introduces `Annotated`, a feature in Python that allows adding metadata to type hints, available from Python 3.9 and later.
---

```

Info
To learn more about [Pydantic, check its docs](https://docs.pydantic.dev/).
**FastAPI** is all based on Pydantic.
You will see a lot more of all this in practice in the [Tutorial - User Guide](https://fastapi.tiangolo.com/tutorial/).
Tip
Pydantic has a special behavior when you use `Optional` or `Union[Something, None]` without a default value, you can read more about it in the Pydantic docs about [Required Optional fields](https://docs.pydantic.dev/2.3/usage/models/#required-fields).
## Type Hints with Metadata Annotations[Â¶](https://fastapi.tiangolo.com/python-types/#type-hints-with-metadata-annotations "Permanent link")
Python also has a feature that allows putting **additional metadata** in these type hints using `Annotated`.
[Python 3.9+](https://fastapi.tiangolo.com/python-types/#__tabbed_20_1)[Python 3.8+](https://fastapi.tiangolo.com/python-types/#__tabbed_20_2)
In Python 3.9, `Annotated` is part of the standard library, so you can import it from `typing`.
```
fromtypingimport Annotated
defsay_hello(name: Annotated[str, "this is just metadata"]) -> str:
  return f"Hello {name}"

```

In versions below Python 3.9, you import `Annotated` from `typing_extensions`.
It will already be installed with **FastAPI**.
```
fromtyping_extensionsimport Annotated
defsay_hello(name: Annotated[str, "this is just metadata"]) -> str:
  return f"Hello {name}"

```

Python itself doesn't do anything with this `Annotated`. And for editors and other tools, the type is still `str`.
But you can use this space in `Annotated` to provide **FastAPI** with additional metadata about how you want your application to behave.
The important thing to remember is that **the first _type parameter_** you pass to `Annotated` is the **actual type**. The rest, is just metadata for other tools.
For now, you just need to know that `Annotated` exists, and that it's standard Python. ðŸ˜Ž
Later you will see how **powerful** it can be.
Tip
The fact that this is **standard Python** means that you will still get the **best possible developer experience** in your editor, with the tools you use to analyze and refactor your code, etc. âœ¨
And also that your code will be very compatible with many other Python tools and libraries. ðŸš€
## Type hints in **FastAPI**[Â¶](https://fastapi.tiangolo.com/python-types/#type-hints-in-fastapi "Permanent link")
**FastAPI** takes advantage of these type hints to do several things.
With **FastAPI** you declare parameters with type hints and you get:
  * **Editor support**.
  * **Type checks**.


...and **FastAPI** uses the same declarations to:
  * **Define requirements** : from request path parameters, query parameters, headers, bodies, dependencies, etc.
  * **Convert data** : from the request to the required type.
  * **Validate data** : coming from each request:
    * Generating **automatic errors** returned to the client when the data is invalid.
  * **Document** the API using OpenAPI:
    * which is then used by the automatic interactive documentation user interfaces.


This might all sound abstract. Don't worry. You'll see all this in action in the [Tutorial - User Guide](https://fastapi.tiangolo.com/tutorial/).
The important thing is that by using standard Python types, in a single place (instead of adding more classes, decorators, etc), **FastAPI** will do a lot of the work for you.
Info
If you already went through all the tutorial and came back to see more about types, a good resource is [the "cheat sheet" from `mypy`](https://mypy.readthedocs.io/en/latest/cheat_sheet_py3.html).
Was this page helpful? 
Thanks for your feedback! 
Thanks for your feedback! 
Back to top  [ Previous  Learn  ](https://fastapi.tiangolo.com/learn/) [ Next  Concurrency and async / await  ](https://fastapi.tiangolo.com/async/)
The FastAPI trademark is owned by [@tiangolo](https://tiangolo.com) and is registered in the US and across other regions 
Made with [ Material for MkDocs ](https://squidfunk.github.io/mkdocs-material/)
[ ](https://github.com/fastapi/fastapi "github.com") [ ](https://discord.gg/VQjSZaeJmf "discord.gg") [ ](https://twitter.com/fastapi "twitter.com") [ ](https://www.linkedin.com/in/tiangolo "www.linkedin.com") [ ](https://dev.to/tiangolo "dev.to") [ ](https://medium.com/@tiangolo "medium.com") [ ](https://tiangolo.com "tiangolo.com")
  *[type]: for example: str, int, float, bool
  *[Concatenates]: Puts them together, as one. With the contents of one after the other.
  *[vertical bar (`|`)]: also called "bitwise or operator", but that meaning is not relevant here
  *[ metadata]: Data about the data, in this case, information about the type, e.g. a description.