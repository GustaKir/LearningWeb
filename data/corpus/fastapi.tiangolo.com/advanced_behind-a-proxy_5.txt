Title: Using Root Path with FastAPI Behind a Proxy
URL: https://fastapi.tiangolo.com/advanced/behind-a-proxy/
Summary: This section discusses the `--root-path` option in Hypercorn for setting a root path in FastAPI applications when running behind a proxy. It also explains how to retrieve the current `root_path` from the request's scope dictionary and provides a sample code snippet demonstrating its usage.
---

```

If you use Hypercorn, it also has the option `--root-path`.
Technical Details
The ASGI specification defines a `root_path` for this use case.
And the `--root-path` command line option provides that `root_path`.
### Checking the current `root_path`[¶](https://fastapi.tiangolo.com/advanced/behind-a-proxy/#checking-the-current-root_path "Permanent link")
You can get the current `root_path` used by your application for each request, it is part of the `scope` dictionary (that's part of the ASGI spec).
Here we are including it in the message just for demonstration purposes.
[Python 3.8+](https://fastapi.tiangolo.com/advanced/behind-a-proxy/#__tabbed_2_1)
```
fromfastapiimport FastAPI, Request
app = FastAPI()
@app.get("/app")
defread_main(request: Request):
  return {"message": "Hello World", "root_path": request.scope.get("root_path")}

```

Then, if you start Uvicorn with:
```

fast →[](https://fastapi.tiangolo.com/advanced/behind-a-proxy/)fastapi run main.py --root-path /api/v1INFO:   Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)restart ↻[](https://fastapi.tiangolo.com/advanced/behind-a-proxy/)

```

The response would be something like:
```
{
"message":"Hello World",
"root_path":"/api/v1"
}

```

### Setting the `root_path` in the FastAPI app[¶](https://fastapi.tiangolo.com/advanced/behind-a-proxy/#setting-the-root_path-in-the-fastapi-app "Permanent link")
Alternatively, if you don't have a way to provide a command line option like `--root-path` or equivalent, you can set the `root_path` parameter when creating your FastAPI app:
[Python 3.8+](https://fastapi.tiangolo.com/advanced/behind-a-proxy/#__tabbed_3_1)
```
fromfastapiimport FastAPI, Request
app = FastAPI(root_path="/api/v1")
@app.get("/app")
defread_main(request: Request):
  return {"message": "Hello World", "root_path": request.scope.get("root_path")}

```

Passing the `root_path` to `FastAPI` would be the equivalent of passing the `--root-path` command line option to Uvicorn or Hypercorn.
### About `root_path`[¶](https://fastapi.tiangolo.com/advanced/behind-a-proxy/#about-root_path "Permanent link")
Keep in mind that the server (Uvicorn) won't use that `root_path` for anything else than passing it to the app.
But if you go with your browser to [http://127.0.0.1:8000/app](http://127.0.0.1:8000) you will see the normal response:
```
{
"message":"Hello World",
"root_path":"/api/v1"
}

```

So, it won't expect to be accessed at `http://127.0.0.1:8000/api/v1/app`.
Uvicorn will expect the proxy to access Uvicorn at `http://127.0.0.1:8000/app`, and then it would be the proxy's responsibility to add the extra `/api/v1` prefix on top.
## About proxies with a stripped path prefix[¶](https://fastapi.tiangolo.com/advanced/behind-a-proxy/#about-proxies-with-a-stripped-path-prefix "Permanent link")
Keep in mind that a proxy with stripped path prefix is only one of the ways to configure it.
Probably in many cases the default will be that the proxy doesn't have a stripped path prefix.
In a case like that (without a stripped path prefix), the proxy would listen on something like `https://myawesomeapp.com`, and then if the browser goes to `https://myawesomeapp.com/api/v1/app` and your server (e.g. Uvicorn) listens on `http://127.0.0.1:8000` the proxy (without a stripped path prefix) would access Uvicorn at the same path: `http://127.0.0.1:8000/api/v1/app`.
## Testing locally with Traefik[¶](https://fastapi.tiangolo.com/advanced/behind-a-proxy/#testing-locally-with-traefik "Permanent link")
You can easily run the experiment locally with a stripped path prefix using [Traefik](https://docs.traefik.io/).
[Download Traefik](https://github.com/containous/traefik/releases), it's a single binary, you can extract the compressed file and run it directly from the terminal.
Then create a file `traefik.toml` with:
```
[entryPoints]
[entryPoints.http]
address=":9999"
[providers]
[providers.file]
filename="routes.toml"

```

This tells Traefik to listen on port 9999 and to use another file `routes.toml`.
Tip
We are using port 9999 instead of the standard HTTP port 80 so that you don't have to run it with admin (`sudo`) privileges.
Now create that other file `routes.toml`:
```
[http]
[http.middlewares]
[http.middlewares.api-stripprefix.stripPrefix]
prefixes=["/api/v1"]
[http.routers]
[http.routers.app-http]
entryPoints=["http"]
service="app"
rule="PathPrefix(`/api/v1`)"
middlewares=["api-stripprefix"]
[http.services]
[http.services.app]
[http.services.app.loadBalancer]
[[http.services.app.loadBalancer.servers]]
url="http://127.0.0.1:8000"

```

This file configures Traefik to use the path prefix `/api/v1`.
And then Traefik will redirect its requests to your Uvicorn running on `http://127.0.0.1:8000`.
Now start Traefik: