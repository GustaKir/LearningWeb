Title: Creating UserInDB and Token Response in FastAPI
URL: https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/
Summary: This section illustrates the creation of a `UserInDB` instance using data from a user dictionary and describes the structure of the token response from the token endpoint, which must include a `token_type` (set to 'bearer') and an `access_token`. It notes that in this simple example, the `access_token` will return the username, with a more secure implementation covered in the next chapter.
---

```
UserInDB(
  username = user_dict["username"],
  email = user_dict["email"],
  full_name = user_dict["full_name"],
  disabled = user_dict["disabled"],
  hashed_password = user_dict["hashed_password"],
)

```

Info
For a more complete explanation of `**user_dict` check back in [the documentation for **Extra Models**](https://fastapi.tiangolo.com/tutorial/extra-models/#about-user_indict).
## Return the token[Â¶](https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/#return-the-token "Permanent link")
The response of the `token` endpoint must be a JSON object.
It should have a `token_type`. In our case, as we are using "Bearer" tokens, the token type should be "`bearer`".
And it should have an `access_token`, with a string containing our access token.
For this simple example, we are going to just be completely insecure and return the same `username` as the token.
Tip
In the next chapter, you will see a real secure implementation, with password hashing and JWT tokens.
But for now, let's focus on the specific details we need.
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/#__tabbed_7_1)
```
fromtypingimport Annotated
fromfastapiimport Depends, FastAPI, HTTPException, status
fromfastapi.securityimport OAuth2PasswordBearer, OAuth2PasswordRequestForm
frompydanticimport BaseModel
fake_users_db = {
  "johndoe": {
    "username": "johndoe",
    "full_name": "John Doe",
    "email": "johndoe@example.com",
    "hashed_password": "fakehashedsecret",
    "disabled": False,
  },
  "alice": {
    "username": "alice",
    "full_name": "Alice Wonderson",
    "email": "alice@example.com",
    "hashed_password": "fakehashedsecret2",
    "disabled": True,
  },
}
app = FastAPI()
deffake_hash_password(password: str):
  return "fakehashed" + password
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
classUser(BaseModel):
  username: str
  email: str | None = None
  full_name: str | None = None
  disabled: bool | None = None
classUserInDB(User):
  hashed_password: str
defget_user(db, username: str):
  if username in db:
    user_dict = db[username]
    return UserInDB(**user_dict)
deffake_decode_token(token):
  # This doesn't provide any security at all
  # Check the next version
  user = get_user(fake_users_db, token)
  return user
async defget_current_user(token: Annotated[str, Depends(oauth2_scheme)]):
  user = fake_decode_token(token)
  if not user:
    raise HTTPException(
      status_code=status.HTTP_401_UNAUTHORIZED,
      detail="Invalid authentication credentials",
      headers={"WWW-Authenticate": "Bearer"},
    )
  return user
async defget_current_active_user(
  current_user: Annotated[User, Depends(get_current_user)],
):
  if current_user.disabled:
    raise HTTPException(status_code=400, detail="Inactive user")
  return current_user
@app.post("/token")
async deflogin(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):
  user_dict = fake_users_db.get(form_data.username)
  if not user_dict:
    raise HTTPException(status_code=400, detail="Incorrect username or password")
  user = UserInDB(**user_dict)
  hashed_password = fake_hash_password(form_data.password)
  if not hashed_password == user.hashed_password:
    raise HTTPException(status_code=400, detail="Incorrect username or password")
  return {"access_token": user.username, "token_type": "bearer"}
@app.get("/users/me")
async defread_users_me(
  current_user: Annotated[User, Depends(get_current_active_user)],
):
  return current_user

```

ðŸ¤“ Other versions and variants
[Python 3.9+](https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/#__tabbed_8_1)[Python 3.8+](https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/#__tabbed_8_2)[Python 3.10+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/#__tabbed_8_3)[Python 3.8+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/#__tabbed_8_4)