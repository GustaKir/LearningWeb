Title: FastAPI SQL Databases Tutorial
URL: https://fastapi.tiangolo.com/tutorial/sql-databases/
Summary: This section demonstrates how to set up a FastAPI application with SQL model integration using SQLite. It includes defining a Hero model, creating a SQLite database, establishing a session for database interactions, and implementing endpoints to create and read hero records.
---

```
fromtypingimport List, Union
fromfastapiimport Depends, FastAPI, HTTPException, Query
fromsqlmodelimport Field, Session, SQLModel, create_engine, select
classHero(SQLModel, table=True):
  id: Union[int, None] = Field(default=None, primary_key=True)
  name: str = Field(index=True)
  age: Union[int, None] = Field(default=None, index=True)
  secret_name: str
sqlite_file_name = "database.db"
sqlite_url = f"sqlite:///{sqlite_file_name}"
connect_args = {"check_same_thread": False}
engine = create_engine(sqlite_url, connect_args=connect_args)
defcreate_db_and_tables():
  SQLModel.metadata.create_all(engine)
defget_session():
  with Session(engine) as session:
    yield session
app = FastAPI()
@app.on_event("startup")
defon_startup():
  create_db_and_tables()
@app.post("/heroes/")
defcreate_hero(hero: Hero, session: Session = Depends(get_session)) -> Hero:
  session.add(hero)
  session.commit()
  session.refresh(hero)
  return hero
@app.get("/heroes/")
defread_heroes(
  session: Session = Depends(get_session),
  offset: int = 0,
  limit: int = Query(default=100, le=100),
) -> List[Hero]:
  heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()
  return heroes
@app.get("/heroes/{hero_id}")
defread_hero(hero_id: int, session: Session = Depends(get_session)) -> Hero:
  hero = session.get(Hero, hero_id)
  if not hero:
    raise HTTPException(status_code=404, detail="Hero not found")
  return hero
@app.delete("/heroes/{hero_id}")
defdelete_hero(hero_id: int, session: Session = Depends(get_session)):
  hero = session.get(Hero, hero_id)
  if not hero:
    raise HTTPException(status_code=404, detail="Hero not found")
  session.delete(hero)
  session.commit()
  return {"ok": True}

```

The `Hero` class is very similar to a Pydantic model (in fact, underneath, it actually _is a Pydantic model_).
There are a few differences:
  * `table=True` tells SQLModel that this is a _table model_ , it should represent a **table** in the SQL database, it's not just a _data model_ (as would be any other regular Pydantic class).
  * `Field(primary_key=True)` tells SQLModel that the `id` is the **primary key** in the SQL database (you can learn more about SQL primary keys in the SQLModel docs).
By having the type as `int | None`, SQLModel will know that this column should be an `INTEGER` in the SQL database and that it should be `NULLABLE`.
  * `Field(index=True)` tells SQLModel that it should create a **SQL index** for this column, that would allow faster lookups in the database when reading data filtered by this column.
SQLModel will know that something declared as `str` will be a SQL column of type `TEXT` (or `VARCHAR`, depending on the database).


### Create an Engine[Â¶](https://fastapi.tiangolo.com/tutorial/sql-databases/#create-an-engine "Permanent link")
A SQLModel `engine` (underneath it's actually a SQLAlchemy `engine`) is what **holds the connections** to the database.
You would have **one single`engine` object** for all your code to connect to the same database.
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/sql-databases/#__tabbed_4_1)
```
# Code above omitted ðŸ‘†
sqlite_file_name = "database.db"
sqlite_url = f"sqlite:///{sqlite_file_name}"
connect_args = {"check_same_thread": False}
engine = create_engine(sqlite_url, connect_args=connect_args)
# Code below omitted ðŸ‘‡

```

ðŸ‘€ Full file preview
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/sql-databases/#__tabbed_5_1)