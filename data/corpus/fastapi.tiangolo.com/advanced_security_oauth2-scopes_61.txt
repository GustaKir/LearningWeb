Title: Using SecurityScopes in FastAPI
URL: https://fastapi.tiangolo.com/advanced/security/oauth2-scopes/
Summary: This section explains the functionality of `get_current_user` in FastAPI regarding `scopes` for different path operations. It emphasizes that `SecurityScopes` can be utilized anywhere within the dependency tree to manage access based on declared scopes for each operation, allowing for centralized verification of token scopes while maintaining individual scope requirements for different endpoints.
---

Tip
The important and "magic" thing here is that `get_current_user` will have a different list of `scopes` to check for each _path operation_.
All depending on the `scopes` declared in each _path operation_ and each dependency in the dependency tree for that specific _path operation_.
## More details about `SecurityScopes`[¶](https://fastapi.tiangolo.com/advanced/security/oauth2-scopes/#more-details-about-securityscopes "Permanent link")
You can use `SecurityScopes` at any point, and in multiple places, it doesn't have to be at the "root" dependency.
It will always have the security scopes declared in the current `Security` dependencies and all the dependants for **that specific** _path operation_ and **that specific** dependency tree.
Because the `SecurityScopes` will have all the scopes declared by dependants, you can use it to verify that a token has the required scopes in a central dependency function, and then declare different scope requirements in different _path operations_.
They will be checked independently for each _path operation_.
## Check it[¶](https://fastapi.tiangolo.com/advanced/security/oauth2-scopes/#check-it "Permanent link")
If you open the API docs, you can authenticate and specify which scopes you want to authorize.
![](https://fastapi.tiangolo.com/img/tutorial/security/image11.png)
If you don't select any scope, you will be "authenticated", but when you try to access `/users/me/` or `/users/me/items/` you will get an error saying that you don't have enough permissions. You will still be able to access `/status/`.
And if you select the scope `me` but not the scope `items`, you will be able to access `/users/me/` but not `/users/me/items/`.
That's what would happen to a third party application that tried to access one of these _path operations_ with a token provided by a user, depending on how many permissions the user gave the application.
## About third party integrations[¶](https://fastapi.tiangolo.com/advanced/security/oauth2-scopes/#about-third-party-integrations "Permanent link")
In this example we are using the OAuth2 "password" flow.
This is appropriate when we are logging in to our own application, probably with our own frontend.
Because we can trust it to receive the `username` and `password`, as we control it.
But if you are building an OAuth2 application that others would connect to (i.e., if you are building an authentication provider equivalent to Facebook, Google, GitHub, etc.) you should use one of the other flows.
The most common is the implicit flow.
The most secure is the code flow, but it's more complex to implement as it requires more steps. As it is more complex, many providers end up suggesting the implicit flow.
Note
It's common that each authentication provider names their flows in a different way, to make it part of their brand.
But in the end, they are implementing the same OAuth2 standard.
**FastAPI** includes utilities for all these OAuth2 authentication flows in `fastapi.security.oauth2`.
## `Security` in decorator `dependencies`[¶](https://fastapi.tiangolo.com/advanced/security/oauth2-scopes/#security-in-decorator-dependencies "Permanent link")
The same way you can define a `list` of `Depends` in the decorator's `dependencies` parameter (as explained in [Dependencies in path operation decorators](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/)), you could also use `Security` with `scopes` there.
Was this page helpful? 
Thanks for your feedback! 
Thanks for your feedback! 
Back to top  [ Previous  Advanced Security  ](https://fastapi.tiangolo.com/advanced/security/) [ Next  HTTP Basic Auth  ](https://fastapi.tiangolo.com/advanced/security/http-basic-auth/)
The FastAPI trademark is owned by [@tiangolo](https://tiangolo.com) and is registered in the US and across other regions 
Made with [ Material for MkDocs ](https://squidfunk.github.io/mkdocs-material/)
[ ](https://github.com/fastapi/fastapi "github.com") [ ](https://discord.gg/VQjSZaeJmf "discord.gg") [ ](https://twitter.com/fastapi "twitter.com") [ ](https://www.linkedin.com/in/tiangolo "www.linkedin.com") [ ](https://dev.to/tiangolo "dev.to") [ ](https://medium.com/@tiangolo "medium.com") [ ](https://tiangolo.com "tiangolo.com")