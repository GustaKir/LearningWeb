Title: Parameter Validation Options in FastAPI
URL: https://fastapi.tiangolo.com/reference/parameters/
Summary: This section outlines various validation options for parameters in FastAPI, including constraints for numerical values, string length limits, regex patterns for string validation, and a strict validation option. It also notes the deprecation of the `regex` parameter in favor of `pattern`.
---

If set, value must be less than or equal to this.
      Only applicable to numbers.
      """
    ),
  ] = None,
  min_length: Annotated[
    Optional[int],
    Doc(
"""
      Minimum length for strings.
      """
    ),
  ] = None,
  max_length: Annotated[
    Optional[int],
    Doc(
"""
      Maximum length for strings.
      """
    ),
  ] = None,
  pattern: Annotated[
    Optional[str],
    Doc(
"""
      RegEx pattern for strings.
      """
    ),
  ] = None,
  regex: Annotated[
    Optional[str],
    Doc(
"""
      RegEx pattern for strings.
      """
    ),
    deprecated(
      "Deprecated in FastAPI 0.100.0 and Pydantic v2, use `pattern` instead."
    ),
  ] = None,
  discriminator: Annotated[
    Union[str, None],
    Doc(
"""
      Parameter field name for discriminating the type in a tagged union.
      """
    ),
  ] = None,
  strict: Annotated[
    Union[bool, None],
    Doc(
"""
      If `True`, strict validation is applied to the field.
      """
    ),
  ] = _Unset,
  multiple_of: Annotated[
    Union[float, None],
    Doc(
"""
      Value must be a multiple of this. Only applicable to numbers.
      """
    ),
  ] = _Unset,
  allow_inf_nan: Annotated[
    Union[bool, None],
    Doc(
"""
      Allow `inf`, `-inf`, `nan`. Only applicable to numbers.
      """
    ),
  ] = _Unset,
  max_digits: Annotated[
    Union[int, None],
    Doc(
"""
      Maximum number of allow digits for strings.
      """
    ),
  ] = _Unset,
  decimal_places: Annotated[
    Union[int, None],
    Doc(
"""
      Maximum number of decimal places allowed for numbers.
      """
    ),
  ] = _Unset,
  examples: Annotated[
    Optional[List[Any]],
    Doc(
"""
      Example values for this field.
      """
    ),
  ] = None,
  example: Annotated[
    Optional[Any],
    deprecated(
      "Deprecated in OpenAPI 3.1.0 that now uses JSON Schema 2020-12, "
      "although still supported. Use examples instead."
    ),
  ] = _Unset,
  openapi_examples: Annotated[
    Optional[Dict[str, Example]],
    Doc(
"""
      OpenAPI-specific examples.
      It will be added to the generated OpenAPI (e.g. visible at `/docs`).
      Swagger UI (that provides the `/docs` interface) has better support for the
      OpenAPI-specific examples than the JSON Schema `examples`, that's the main
      use case for this.
      Read more about it in the
      [FastAPI docs for Declare Request Example Data](https://fastapi.tiangolo.com/tutorial/schema-extra-example/#using-the-openapi_examples-parameter).
      """
    ),
  ] = None,
  deprecated: Annotated[
    Union[deprecated, str, bool, None],
    Doc(
"""
      Mark this parameter field as deprecated.
      It will affect the generated OpenAPI (e.g. visible at `/docs`).
      """
    ),
  ] = None,
  include_in_schema: Annotated[
    bool,
    Doc(
"""
      To include (or not) this parameter field in the generated OpenAPI.
      You probably don't need it, but it's available.
      This affects the generated OpenAPI (e.g. visible at `/docs`).
      """
    ),
  ] = True,
  json_schema_extra: Annotated[
    Union[Dict[str, Any], None],
    Doc(
"""
      Any additional JSON schema data.
      """
    ),
  ] = None,
  **extra: Annotated[
    Any,
    Doc(
"""
      Include extra fields used by the JSON Schema.
      """
    ),
    deprecated(
"""
      The `extra` kwargs is deprecated. Use `json_schema_extra` instead.
      """
    ),
  ],
) -> Any:
"""
  Declare a path parameter for a *path operation*.
  Read more about it in the
  [FastAPI docs for Path Parameters and Numeric Validations](https://fastapi.tiangolo.com/tutorial/path-params-numeric-validations/).
  ```python
  from typing import Annotated
  from fastapi import FastAPI, Path
  app = FastAPI()
  @app.get("/items/{item_id}")
  async def read_items(
    item_id: Annotated[int, Path(title="The ID of the item to get")],
  ):
    return {"item_id": item_id}
  ```
  """
  return params.Path(
    default=default,
    default_factory=default_factory,
    alias=alias,
    alias_priority=alias_priority,
    validation_alias=validation_alias,
    serialization_alias=serialization_alias,
    title=title,
    description=description,
    gt=gt,
    ge=ge,
    lt=lt,
    le=le,
    min_length=min_length,
    max_length=max_length,
    pattern=pattern,
    regex=regex,
    discriminator=discriminator,
    strict=strict,
    multiple_of=multiple_of,
    allow_inf_nan=allow_inf_nan,
    max_digits=max_digits,
    decimal_places=decimal_places,
    example=example,
    examples=examples,
    openapi_examples=openapi_examples,
    deprecated=deprecated,
    include_in_schema=include_in_schema,
    json_schema_extra=json_schema_extra,
    **extra,
  )

```
  
---|---  
##  fastapi.Body [Â¶](https://fastapi.tiangolo.com/reference/parameters/#fastapi.Body "Permanent link")