Title: Testing Dependencies in FastAPI
URL: https://fastapi.tiangolo.com/advanced/testing-dependencies/
Summary: This document explains how to test FastAPI applications with dependency overrides. It demonstrates the use of common parameters in route definitions and how to override these dependencies during testing using the TestClient. Example routes for items and users are provided, along with assertions to validate the behavior of the overridden dependencies.
---

```
fromtypingimport Annotated, Union
fromfastapiimport Depends, FastAPI
fromfastapi.testclientimport TestClient
app = FastAPI()
async defcommon_parameters(
  q: Union[str, None] = None, skip: int = 0, limit: int = 100
):
  return {"q": q, "skip": skip, "limit": limit}
@app.get("/items/")
async defread_items(commons: Annotated[dict, Depends(common_parameters)]):
  return {"message": "Hello Items!", "params": commons}
@app.get("/users/")
async defread_users(commons: Annotated[dict, Depends(common_parameters)]):
  return {"message": "Hello Users!", "params": commons}
client = TestClient(app)
async defoverride_dependency(q: Union[str, None] = None):
  return {"q": q, "skip": 5, "limit": 10}
app.dependency_overrides[common_parameters] = override_dependency
deftest_override_in_items():
  response = client.get("/items/")
  assert response.status_code == 200
  assert response.json() == {
    "message": "Hello Items!",
    "params": {"q": None, "skip": 5, "limit": 10},
  }
deftest_override_in_items_with_q():
  response = client.get("/items/?q=foo")
  assert response.status_code == 200
  assert response.json() == {
    "message": "Hello Items!",
    "params": {"q": "foo", "skip": 5, "limit": 10},
  }
deftest_override_in_items_with_params():
  response = client.get("/items/?q=foo&skip=100&limit=200")
  assert response.status_code == 200
  assert response.json() == {
    "message": "Hello Items!",
    "params": {"q": "foo", "skip": 5, "limit": 10},
  }

```

```
fromtypingimport Union
fromfastapiimport Depends, FastAPI
fromfastapi.testclientimport TestClient
fromtyping_extensionsimport Annotated
app = FastAPI()
async defcommon_parameters(
  q: Union[str, None] = None, skip: int = 0, limit: int = 100
):
  return {"q": q, "skip": skip, "limit": limit}
@app.get("/items/")
async defread_items(commons: Annotated[dict, Depends(common_parameters)]):
  return {"message": "Hello Items!", "params": commons}
@app.get("/users/")
async defread_users(commons: Annotated[dict, Depends(common_parameters)]):
  return {"message": "Hello Users!", "params": commons}
client = TestClient(app)
async defoverride_dependency(q: Union[str, None] = None):
  return {"q": q, "skip": 5, "limit": 10}
app.dependency_overrides[common_parameters] = override_dependency
deftest_override_in_items():
  response = client.get("/items/")
  assert response.status_code == 200
  assert response.json() == {
    "message": "Hello Items!",
    "params": {"q": None, "skip": 5, "limit": 10},
  }
deftest_override_in_items_with_q():
  response = client.get("/items/?q=foo")
  assert response.status_code == 200
  assert response.json() == {
    "message": "Hello Items!",
    "params": {"q": "foo", "skip": 5, "limit": 10},
  }
deftest_override_in_items_with_params():
  response = client.get("/items/?q=foo&skip=100&limit=200")
  assert response.status_code == 200
  assert response.json() == {
    "message": "Hello Items!",
    "params": {"q": "foo", "skip": 5, "limit": 10},
  }

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromfastapiimport Depends, FastAPI
fromfastapi.testclientimport TestClient
app = FastAPI()
async defcommon_parameters(q: str | None = None, skip: int = 0, limit: int = 100):
  return {"q": q, "skip": skip, "limit": limit}
@app.get("/items/")
async defread_items(commons: dict = Depends(common_parameters)):
  return {"message": "Hello Items!", "params": commons}
@app.get("/users/")
async defread_users(commons: dict = Depends(common_parameters)):
  return {"message": "Hello Users!", "params": commons}
client = TestClient(app)
async defoverride_dependency(q: str | None = None):
  return {"q": q, "skip": 5, "limit": 10}
app.dependency_overrides[common_parameters] = override_dependency
deftest_override_in_items():
  response = client.get("/items/")
  assert response.status_code == 200
  assert response.json() == {
    "message": "Hello Items!",
    "params": {"q": None, "skip": 5, "limit": 10},
  }
deftest_override_in_items_with_q():
  response = client.get("/items/?q=foo")
  assert response.status_code == 200
  assert response.json() == {
    "message": "Hello Items!",
    "params": {"q": "foo", "skip": 5, "limit": 10},
  }
deftest_override_in_items_with_params():
  response = client.get("/items/?q=foo&skip=100&limit=200")
  assert response.status_code == 200
  assert response.json() == {
    "message": "Hello Items!",
    "params": {"q": "foo", "skip": 5, "limit": 10},
  }

```

Tip
Prefer to use the `Annotated` version if possible.