Title: GET Path Operation in FastAPI
URL: https://fastapi.tiangolo.com/reference/apirouter/
Summary: This section outlines the parameters and options available when defining a GET path operation in FastAPI using the `get` function. Key parameters include `response_model`, `status_code`, `tags`, and various response handling options. Additional features such as deprecation, callbacks, and OpenAPI customization are also mentioned.
---

```
get(
  path,
  *,
  response_model=Default(None),
  status_code=None,
  tags=None,
  dependencies=None,
  summary=None,
  description=None,
  response_description="Successful Response",
  responses=None,
  deprecated=None,
  operation_id=None,
  response_model_include=None,
  response_model_exclude=None,
  response_model_by_alias=True,
  response_model_exclude_unset=False,
  response_model_exclude_defaults=False,
  response_model_exclude_none=False,
  include_in_schema=True,
  response_class=Default(JSONResponse[](https://fastapi.tiangolo.com/reference/responses/#fastapi.responses.JSONResponse "<code class="doc-symbol doc-symbol-heading doc-symbol-class"></code>      <span class="doc doc-object-name doc-class-name">fastapi.responses.JSONResponse</span> \(<code>starlette.responses.JSONResponse</code>\)")),
  name=None,
  callbacks=None,
  openapi_extra=None,
  generate_unique_id_function=Default(generate_unique_id)
)

```

Add a _path operation_ using an HTTP GET operation.
##### Example[Â¶](https://fastapi.tiangolo.com/reference/apirouter/#fastapi.APIRouter.get--example "Permanent link")
```
fromfastapiimport APIRouter, FastAPI
app = FastAPI()
router = APIRouter()
@router.get("/items/")
defread_items():
  return [{"name": "Empanada"}, {"name": "Arepa"}]
app.include_router(router)

```

PARAMETER | DESCRIPTION  
---|---  
`path` |  The URL path to be used for this _path operation_. For example, in `http://example.com/items`, the path is `/items`. **TYPE:** `str`  
`response_model` |  The type to use for the response. It could be any valid Pydantic _field_ type. So, it doesn't have to be a Pydantic model, it could be other things, like a `list`, `dict`, etc. It will be used for:
  * Documentation: the generated OpenAPI (and the UI at `/docs`) will show it as the response (JSON Schema).
  * Serialization: you could return an arbitrary object and the `response_model` would be used to serialize that object into the corresponding JSON.
  * Filtering: the JSON sent to the client will only contain the data (fields) defined in the `response_model`. If you returned an object that contains an attribute `password` but the `response_model` does not include that field, the JSON sent to the client would not have that `password`.
  * Validation: whatever you return will be serialized with the `response_model`, converting any data as necessary to generate the corresponding JSON. But if the data in the object returned is not valid, that would mean a violation of the contract with the client, so it's an error from the API developer. So, FastAPI will raise an error and return a 500 error code (Internal Server Error).