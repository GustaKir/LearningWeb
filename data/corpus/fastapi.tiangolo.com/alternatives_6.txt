Title: Alternatives, Inspiration and Comparisons
URL: https://fastapi.tiangolo.com/alternatives/
Summary: This section discusses the inspirations behind FastAPI, detailing the previous tools and frameworks that influenced its development. It highlights the necessity of creating FastAPI to unify various features and concepts from existing solutions, employing advancements in Python such as type hints.
---

# Alternatives, Inspiration and Comparisons[¶](https://fastapi.tiangolo.com/alternatives/#alternatives-inspiration-and-comparisons "Permanent link")
What inspired **FastAPI** , how it compares to alternatives and what it learned from them.
## Intro[¶](https://fastapi.tiangolo.com/alternatives/#intro "Permanent link")
**FastAPI** wouldn't exist if not for the previous work of others.
There have been many tools created before that have helped inspire its creation.
I have been avoiding the creation of a new framework for several years. First I tried to solve all the features covered by **FastAPI** using many different frameworks, plug-ins, and tools.
But at some point, there was no other option than creating something that provided all these features, taking the best ideas from previous tools, and combining them in the best way possible, using language features that weren't even available before (Python 3.6+ type hints).
## Previous tools[¶](https://fastapi.tiangolo.com/alternatives/#previous-tools "Permanent link")
### [Django](https://www.djangoproject.com/)[¶](https://fastapi.tiangolo.com/alternatives/#django "Permanent link")
It's the most popular Python framework and is widely trusted. It is used to build systems like Instagram.
It's relatively tightly coupled with relational databases (like MySQL or PostgreSQL), so, having a NoSQL database (like Couchbase, MongoDB, Cassandra, etc) as the main store engine is not very easy.
It was created to generate the HTML in the backend, not to create APIs used by a modern frontend (like React, Vue.js and Angular) or by other systems (like IoT devices) communicating with it.
### [Django REST Framework](https://www.django-rest-framework.org/)[¶](https://fastapi.tiangolo.com/alternatives/#django-rest-framework "Permanent link")
Django REST framework was created to be a flexible toolkit for building Web APIs using Django underneath, to improve its API capabilities.
It is used by many companies including Mozilla, Red Hat and Eventbrite.
It was one of the first examples of **automatic API documentation** , and this was specifically one of the first ideas that inspired "the search for" **FastAPI**.
Note
Django REST Framework was created by Tom Christie. The same creator of Starlette and Uvicorn, on which **FastAPI** is based.
Inspired **FastAPI** to
Have an automatic API documentation web user interface.
### [Flask](https://flask.palletsprojects.com)[¶](https://fastapi.tiangolo.com/alternatives/#flask "Permanent link")
Flask is a "microframework", it doesn't include database integrations nor many of the things that come by default in Django.
This simplicity and flexibility allow doing things like using NoSQL databases as the main data storage system.
As it is very simple, it's relatively intuitive to learn, although the documentation gets somewhat technical at some points.
It is also commonly used for other applications that don't necessarily need a database, user management, or any of the many features that come pre-built in Django. Although many of these features can be added with plug-ins.
This decoupling of parts, and being a "microframework" that could be extended to cover exactly what is needed was a key feature that I wanted to keep.
Given the simplicity of Flask, it seemed like a good match for building APIs. The next thing to find was a "Django REST Framework" for Flask.
Inspired **FastAPI** to
Be a micro-framework. Making it easy to mix and match the tools and parts needed.
Have a simple and easy to use routing system.
### [Requests](https://requests.readthedocs.io)[¶](https://fastapi.tiangolo.com/alternatives/#requests "Permanent link")
**FastAPI** is not actually an alternative to **Requests**. Their scope is very different.
It would actually be common to use Requests _inside_ of a FastAPI application.
But still, FastAPI got quite some inspiration from Requests.
**Requests** is a library to _interact_ with APIs (as a client), while **FastAPI** is a library to _build_ APIs (as a server).
They are, more or less, at opposite ends, complementing each other.
Requests has a very simple and intuitive design, it's very easy to use, with sensible defaults. But at the same time, it's very powerful and customizable.
That's why, as said in the official website:
> Requests is one of the most downloaded Python packages of all time
The way you use it is very simple. For example, to do a `GET` request, you would write:
```
response = requests.get("http://example.com/some/url")

```

The FastAPI counterpart API _path operation_ could look like:
```
@app.get("/some/url")
defread_url():
  return {"message": "Hello World"}