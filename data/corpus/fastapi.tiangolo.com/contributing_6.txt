Title: Contributing to FastAPI Documentation
URL: https://fastapi.tiangolo.com/contributing/
Summary: This section provides instructions for contributing to the FastAPI documentation, including generating a code coverage report and setting up a local environment for live-reloading documentation changes.
---

```

This command generates a directory `./htmlcov/`, if you open the file `./htmlcov/index.html` in your browser, you can explore interactively the regions of code that are covered by the tests, and notice if there is any region missing.
## Docs[¶](https://fastapi.tiangolo.com/contributing/#docs "Permanent link")
First, make sure you set up your environment as described above, that will install all the requirements.
### Docs live[¶](https://fastapi.tiangolo.com/contributing/#docs-live "Permanent link")
During local development, there is a script that builds the site and checks for any changes, live-reloading:
```

fast →[](https://fastapi.tiangolo.com/contributing/)python ./scripts/docs.py live[INFO] Serving on http://127.0.0.1:8008[INFO] Start watching changes[INFO] Start detecting changesrestart ↻[](https://fastapi.tiangolo.com/contributing/)

```

It will serve the documentation on `http://127.0.0.1:8008`.
That way, you can edit the documentation/source files and see the changes live.
Tip
Alternatively, you can perform the same steps that scripts does manually.
Go into the language directory, for the main docs in English it's at `docs/en/`:
```
$ cddocs/en/

```

Then run `mkdocs` in that directory:
```
$ mkdocsserve--dev-addr127.0.0.1:8008

```

#### Typer CLI (optional)[¶](https://fastapi.tiangolo.com/contributing/#typer-cli-optional "Permanent link")
The instructions here show you how to use the script at `./scripts/docs.py` with the `python` program directly.
But you can also use [Typer CLI](https://typer.tiangolo.com/typer-cli/), and you will get autocompletion in your terminal for the commands after installing completion.
If you install Typer CLI, you can install completion with:
```

fast →[](https://fastapi.tiangolo.com/contributing/)typer --install-completionzsh completion installed in /home/user/.bashrc.Completion will take effect once you restart the terminal.restart ↻[](https://fastapi.tiangolo.com/contributing/)

```

### Docs Structure[¶](https://fastapi.tiangolo.com/contributing/#docs-structure "Permanent link")
The documentation uses [MkDocs](https://www.mkdocs.org/).
And there are extra tools/scripts in place to handle translations in `./scripts/docs.py`.
Tip
You don't need to see the code in `./scripts/docs.py`, you just use it in the command line.
All the documentation is in Markdown format in the directory `./docs/en/`.
Many of the tutorials have blocks of code.
In most of the cases, these blocks of code are actual complete applications that can be run as is.
In fact, those blocks of code are not written inside the Markdown, they are Python files in the `./docs_src/` directory.
And those Python files are included/injected in the documentation when generating the site.
### Docs for tests[¶](https://fastapi.tiangolo.com/contributing/#docs-for-tests "Permanent link")
Most of the tests actually run against the example source files in the documentation.
This helps to make sure that:
  * The documentation is up-to-date.
  * The documentation examples can be run as is.
  * Most of the features are covered by the documentation, ensured by test coverage.


#### Apps and docs at the same time[¶](https://fastapi.tiangolo.com/contributing/#apps-and-docs-at-the-same-time "Permanent link")
If you run the examples with, e.g.:
```

fast →[](https://fastapi.tiangolo.com/contributing/)fastapi dev tutorial001.pyINFO:   Uvicorn running on http://127.0.0.1:8000 (Press CTRL+C to quit)restart ↻[](https://fastapi.tiangolo.com/contributing/)