Title: Using Extra Data Types in FastAPI
URL: https://fastapi.tiangolo.com/tutorial/extra-data-types/
Summary: This section of the FastAPI tutorial demonstrates how to utilize additional data types such as UUID, datetime, time, and timedelta in endpoint definitions. It provides an example of a PUT request handler that processes these types, calculating the starting process time and the duration based on received input values.
---

```
fromdatetimeimport datetime, time, timedelta
fromuuidimport UUID
fromfastapiimport Body, FastAPI
app = FastAPI()
@app.put("/items/{item_id}")
async defread_items(
  item_id: UUID,
  start_datetime: datetime = Body(),
  end_datetime: datetime = Body(),
  process_after: timedelta = Body(),
  repeat_at: time | None = Body(default=None),
):
  start_process = start_datetime + process_after
  duration = end_datetime - start_process
  return {
    "item_id": item_id,
    "start_datetime": start_datetime,
    "end_datetime": end_datetime,
    "process_after": process_after,
    "repeat_at": repeat_at,
    "start_process": start_process,
    "duration": duration,
  }

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromdatetimeimport datetime, time, timedelta
fromtypingimport Union
fromuuidimport UUID
fromfastapiimport Body, FastAPI
app = FastAPI()
@app.put("/items/{item_id}")
async defread_items(
  item_id: UUID,
  start_datetime: datetime = Body(),
  end_datetime: datetime = Body(),
  process_after: timedelta = Body(),
  repeat_at: Union[time, None] = Body(default=None),
):
  start_process = start_datetime + process_after
  duration = end_datetime - start_process
  return {
    "item_id": item_id,
    "start_datetime": start_datetime,
    "end_datetime": end_datetime,
    "process_after": process_after,
    "repeat_at": repeat_at,
    "start_process": start_process,
    "duration": duration,
  }

```

Note that the parameters inside the function have their natural data type, and you can, for example, perform normal date manipulations, like:
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/extra-data-types/#__tabbed_3_1)
```
fromdatetimeimport datetime, time, timedelta
fromtypingimport Annotated
fromuuidimport UUID
fromfastapiimport Body, FastAPI
app = FastAPI()
@app.put("/items/{item_id}")
async defread_items(
  item_id: UUID,
  start_datetime: Annotated[datetime, Body()],
  end_datetime: Annotated[datetime, Body()],
  process_after: Annotated[timedelta, Body()],
  repeat_at: Annotated[time | None, Body()] = None,
):
  start_process = start_datetime + process_after
  duration = end_datetime - start_process
  return {
    "item_id": item_id,
    "start_datetime": start_datetime,
    "end_datetime": end_datetime,
    "process_after": process_after,
    "repeat_at": repeat_at,
    "start_process": start_process,
    "duration": duration,
  }

```

ðŸ¤“ Other versions and variants
[Python 3.9+](https://fastapi.tiangolo.com/tutorial/extra-data-types/#__tabbed_4_1)[Python 3.8+](https://fastapi.tiangolo.com/tutorial/extra-data-types/#__tabbed_4_2)[Python 3.10+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/extra-data-types/#__tabbed_4_3)[Python 3.8+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/extra-data-types/#__tabbed_4_4)
```
fromdatetimeimport datetime, time, timedelta
fromtypingimport Annotated, Union
fromuuidimport UUID
fromfastapiimport Body, FastAPI
app = FastAPI()
@app.put("/items/{item_id}")
async defread_items(
  item_id: UUID,
  start_datetime: Annotated[datetime, Body()],
  end_datetime: Annotated[datetime, Body()],
  process_after: Annotated[timedelta, Body()],
  repeat_at: Annotated[Union[time, None], Body()] = None,
):
  start_process = start_datetime + process_after
  duration = end_datetime - start_process
  return {
    "item_id": item_id,
    "start_datetime": start_datetime,
    "end_datetime": end_datetime,
    "process_after": process_after,
    "repeat_at": repeat_at,
    "start_process": start_process,
    "duration": duration,
  }

```

```
fromdatetimeimport datetime, time, timedelta
fromtypingimport Union
fromuuidimport UUID
fromfastapiimport Body, FastAPI
fromtyping_extensionsimport Annotated
app = FastAPI()
@app.put("/items/{item_id}")
async defread_items(
  item_id: UUID,
  start_datetime: Annotated[datetime, Body()],
  end_datetime: Annotated[datetime, Body()],
  process_after: Annotated[timedelta, Body()],
  repeat_at: Annotated[Union[time, None], Body()] = None,
):
  start_process = start_datetime + process_after
  duration = end_datetime - start_process
  return {
    "item_id": item_id,
    "start_datetime": start_datetime,
    "end_datetime": end_datetime,
    "process_after": process_after,
    "repeat_at": repeat_at,
    "start_process": start_process,
    "duration": duration,
  }

```

Tip
Prefer to use the `Annotated` version if possible.