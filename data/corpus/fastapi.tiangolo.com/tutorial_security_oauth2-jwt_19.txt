Title: OAuth2 JWT Authentication with FastAPI
URL: https://fastapi.tiangolo.com/tutorial/security/oauth2-jwt/
Summary: This section demonstrates how to implement OAuth2 JWT authentication in FastAPI. It includes necessary imports, secret key definition, and an example of a fake user database. The code defines data models for tokens and user information using Pydantic.
---

```
fromdatetimeimport datetime, timedelta, timezone
importjwt
fromfastapiimport Depends, FastAPI, HTTPException, status
fromfastapi.securityimport OAuth2PasswordBearer, OAuth2PasswordRequestForm
fromjwt.exceptionsimport InvalidTokenError
frompasslib.contextimport CryptContext
frompydanticimport BaseModel
# to get a string like this run:
# openssl rand -hex 32
SECRET_KEY = "09d25e094faa6ca2556c818166b7a9563b93f7099f6f0f4caa6cf63b88e8d3e7"
ALGORITHM = "HS256"
ACCESS_TOKEN_EXPIRE_MINUTES = 30
fake_users_db = {
  "johndoe": {
    "username": "johndoe",
    "full_name": "John Doe",
    "email": "johndoe@example.com",
    "hashed_password": "$2b$12$EixZaYVK1fsbw1ZfbX3OXePaWxn96p36WQoeG6Lruj3vjPGga31lW",
    "disabled": False,
  }
}
classToken(BaseModel):
  access_token: str
  token_type: str
classTokenData(BaseModel):
  username: str | None = None
classUser(BaseModel):
  username: str
  email: str | None = None
  full_name: str | None = None
  disabled: bool | None = None
classUserInDB(User):
  hashed_password: str
pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
app = FastAPI()
defverify_password(plain_password, hashed_password):
  return pwd_context.verify(plain_password, hashed_password)
defget_password_hash(password):
  return pwd_context.hash(password)
defget_user(db, username: str):
  if username in db:
    user_dict = db[username]
    return UserInDB(**user_dict)
defauthenticate_user(fake_db, username: str, password: str):
  user = get_user(fake_db, username)
  if not user:
    return False
  if not verify_password(password, user.hashed_password):
    return False
  return user
defcreate_access_token(data: dict, expires_delta: timedelta | None = None):
  to_encode = data.copy()
  if expires_delta:
    expire = datetime.now(timezone.utc) + expires_delta
  else:
    expire = datetime.now(timezone.utc) + timedelta(minutes=15)
  to_encode.update({"exp": expire})
  encoded_jwt = jwt.encode(to_encode, SECRET_KEY, algorithm=ALGORITHM)
  return encoded_jwt
async defget_current_user(token: str = Depends(oauth2_scheme)):
  credentials_exception = HTTPException(
    status_code=status.HTTP_401_UNAUTHORIZED,
    detail="Could not validate credentials",
    headers={"WWW-Authenticate": "Bearer"},
  )
  try:
    payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
    username = payload.get("sub")
    if username is None:
      raise credentials_exception
    token_data = TokenData(username=username)
  except InvalidTokenError:
    raise credentials_exception
  user = get_user(fake_users_db, username=token_data.username)
  if user is None:
    raise credentials_exception
  return user
async defget_current_active_user(current_user: User = Depends(get_current_user)):
  if current_user.disabled:
    raise HTTPException(status_code=400, detail="Inactive user")
  return current_user
@app.post("/token")
async deflogin_for_access_token(
  form_data: OAuth2PasswordRequestForm = Depends(),
) -> Token:
  user = authenticate_user(fake_users_db, form_data.username, form_data.password)
  if not user:
    raise HTTPException(
      status_code=status.HTTP_401_UNAUTHORIZED,
      detail="Incorrect username or password",
      headers={"WWW-Authenticate": "Bearer"},
    )
  access_token_expires = timedelta(minutes=ACCESS_TOKEN_EXPIRE_MINUTES)
  access_token = create_access_token(
    data={"sub": user.username}, expires_delta=access_token_expires
  )
  return Token(access_token=access_token, token_type="bearer")
@app.get("/users/me/", response_model=User)
async defread_users_me(current_user: User = Depends(get_current_active_user)):
  return current_user
@app.get("/users/me/items/")
async defread_own_items(current_user: User = Depends(get_current_active_user)):
  return [{"item_id": "Foo", "owner": current_user.username}]

```

Tip
Prefer to use the `Annotated` version if possible.