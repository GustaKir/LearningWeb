Title: Custom Response Handling in FastAPI
URL: https://fastapi.tiangolo.com/advanced/custom-response/
Summary: FastAPI defaults to returning JSON responses, but developers can override this by returning a Response directly. To properly utilize different response types and ensure automatic data conversion and documentation generation, specify the desired Response subclass using the `response_class` parameter in the path operation decorator.
---

# Custom Response - HTML, Stream, File, others[¶](https://fastapi.tiangolo.com/advanced/custom-response/#custom-response-html-stream-file-others "Permanent link")
By default, **FastAPI** will return the responses using `JSONResponse`.
You can override it by returning a `Response` directly as seen in [Return a Response directly](https://fastapi.tiangolo.com/advanced/response-directly/).
But if you return a `Response` directly (or any subclass, like `JSONResponse`), the data won't be automatically converted (even if you declare a `response_model`), and the documentation won't be automatically generated (for example, including the specific "media type", in the HTTP header `Content-Type` as part of the generated OpenAPI).
But you can also declare the `Response` that you want to be used (e.g. any `Response` subclass), in the _path operation decorator_ using the `response_class` parameter.
The contents that you return from your _path operation function_ will be put inside of that `Response`.
And if that `Response` has a JSON media type (`application/json`), like is the case with the `JSONResponse` and `UJSONResponse`, the data you return will be automatically converted (and filtered) with any Pydantic `response_model` that you declared in the _path operation decorator_.
Note
If you use a response class with no media type, FastAPI will expect your response to have no content, so it will not document the response format in its generated OpenAPI docs.
## Use `ORJSONResponse`[¶](https://fastapi.tiangolo.com/advanced/custom-response/#use-orjsonresponse "Permanent link")
For example, if you are squeezing performance, you can install and use [`orjson`](https://github.com/ijl/orjson) and set the response to be `ORJSONResponse`.
Import the `Response` class (sub-class) you want to use and declare it in the _path operation decorator_.
For large responses, returning a `Response` directly is much faster than returning a dictionary.
This is because by default, FastAPI will inspect every item inside and make sure it is serializable as JSON, using the same [JSON Compatible Encoder](https://fastapi.tiangolo.com/tutorial/encoder/) explained in the tutorial. This is what allows you to return **arbitrary objects** , for example database models.
But if you are certain that the content that you are returning is **serializable with JSON** , you can pass it directly to the response class and avoid the extra overhead that FastAPI would have by passing your return content through the `jsonable_encoder` before passing it to the response class.
[Python 3.8+](https://fastapi.tiangolo.com/advanced/custom-response/#__tabbed_1_1)
```
fromfastapiimport FastAPI
fromfastapi.responsesimport ORJSONResponse
app = FastAPI()
@app.get("/items/", response_class=ORJSONResponse)
async defread_items():
  return ORJSONResponse([{"item_id": "Foo"}])

```

Info
The parameter `response_class` will also be used to define the "media type" of the response.
In this case, the HTTP header `Content-Type` will be set to `application/json`.
And it will be documented as such in OpenAPI.
Tip
The `ORJSONResponse` is only available in FastAPI, not in Starlette.
## HTML Response[¶](https://fastapi.tiangolo.com/advanced/custom-response/#html-response "Permanent link")
To return a response with HTML directly from **FastAPI** , use `HTMLResponse`.
  * Import `HTMLResponse`.
  * Pass `HTMLResponse` as the parameter `response_class` of your _path operation decorator_.


[Python 3.8+](https://fastapi.tiangolo.com/advanced/custom-response/#__tabbed_2_1)
```
fromfastapiimport FastAPI
fromfastapi.responsesimport HTMLResponse
app = FastAPI()
@app.get("/items/", response_class=HTMLResponse)
async defread_items():
  return """
  <html>
    <head>
      <title>Some HTML in here</title>
    </head>
    <body>
      <h1>Look ma! HTML!</h1>
    </body>
  </html>
  """

```

Info
The parameter `response_class` will also be used to define the "media type" of the response.
In this case, the HTTP header `Content-Type` will be set to `text/html`.
And it will be documented as such in OpenAPI.
### Return a `Response`[¶](https://fastapi.tiangolo.com/advanced/custom-response/#return-a-response "Permanent link")
As seen in [Return a Response directly](https://fastapi.tiangolo.com/advanced/response-directly/), you can also override the response directly in your _path operation_ , by returning it.
The same example from above, returning an `HTMLResponse`, could look like:
[Python 3.8+](https://fastapi.tiangolo.com/advanced/custom-response/#__tabbed_3_1)
```
fromfastapiimport FastAPI
fromfastapi.responsesimport HTMLResponse
app = FastAPI()
@app.get("/items/")
async defread_items():
  html_content = """
  <html>
    <head>
      <title>Some HTML in here</title>
    </head>
    <body>
      <h1>Look ma! HTML!</h1>
    </body>
  </html>
  """
  return HTMLResponse(content=html_content, status_code=200)