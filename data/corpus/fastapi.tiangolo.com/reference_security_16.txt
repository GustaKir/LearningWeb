Title: HTTP Authorization and Basic Credentials in FastAPI
URL: https://fastapi.tiangolo.com/reference/security/
Summary: This section details the `scheme` and `credentials` attributes extracted from HTTP authorization headers in FastAPI. It also introduces `fastapi.security.HTTPBasicCredentials`, which is used for handling HTTP Basic authentication in a FastAPI application.
---

```

In this case:
  * `scheme` will have the value `"Bearer"`
  * `credentials` will have the value `"deadbeef12346"`


###  scheme `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.HTTPAuthorizationCredentials.scheme "Permanent link")
```
scheme

```

The HTTP authorization scheme extracted from the header value.
###  credentials `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.HTTPAuthorizationCredentials.credentials "Permanent link")
```
credentials

```

The HTTP authorization credentials extracted from the header value.
##  fastapi.security.HTTPBasicCredentials [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.HTTPBasicCredentials "Permanent link")
Bases: `BaseModel`
The HTTP Basic credentials given as the result of using `HTTPBasic` in a dependency.
Read more about it in the [FastAPI docs for HTTP Basic Auth](https://fastapi.tiangolo.com/advanced/security/http-basic-auth/).
###  username `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.HTTPBasicCredentials.username "Permanent link")
```
username

```

The HTTP Basic username.
###  password `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.HTTPBasicCredentials.password "Permanent link")
```
password

```

The HTTP Basic password.
## OAuth2 Authentication[¶](https://fastapi.tiangolo.com/reference/security/#oauth2-authentication "Permanent link")
##  fastapi.security.OAuth2 [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.OAuth2 "Permanent link")
```
OAuth2(
  *,
  flows=OAuthFlows[](https://fastapi.tiangolo.com/reference/openapi/models/#fastapi.openapi.models.OAuthFlows "<code class="doc-symbol doc-symbol-heading doc-symbol-class"></code>      <span class="doc doc-object-name doc-class-name">OAuthFlows</span> \(<code>fastapi.openapi.models.OAuthFlows</code>\)")(),
  scheme_name=None,
  description=None,
  auto_error=True
)

```

Bases: `SecurityBase`
This is the base class for OAuth2 authentication, an instance of it would be used as a dependency. All other OAuth2 classes inherit from it and customize it for each OAuth2 flow.
You normally would not create a new class inheriting from it but use one of the existing subclasses, and maybe compose them if you want to support multiple flows.
Read more about it in the [FastAPI docs for Security](https://fastapi.tiangolo.com/tutorial/security/).
PARAMETER | DESCRIPTION  
---|---  
`flows` |  The dictionary of OAuth2 flows. **TYPE:** `Union[OAuthFlows[](https://fastapi.tiangolo.com/reference/openapi/models/#fastapi.openapi.models.OAuthFlows "<code class="doc-symbol doc-symbol-heading doc-symbol-class"></code>      <span class="doc doc-object-name doc-class-name">OAuthFlows</span> \(<code>fastapi.openapi.models.OAuthFlows</code>\)"), Dict[str, Dict[str, Any]]]` **DEFAULT:** `OAuthFlows[](https://fastapi.tiangolo.com/reference/openapi/models/#fastapi.openapi.models.OAuthFlows "<code class="doc-symbol doc-symbol-heading doc-symbol-class"></code>      <span class="doc doc-object-name doc-class-name">OAuthFlows</span> \(<code>fastapi.openapi.models.OAuthFlows</code>\)")()`  
`scheme_name` |  Security scheme name. It will be included in the generated OpenAPI (e.g. visible at `/docs`). **TYPE:** `Optional[str]` **DEFAULT:** `None`  
`description` |  Security scheme description. It will be included in the generated OpenAPI (e.g. visible at `/docs`). **TYPE:** `Optional[str]` **DEFAULT:** `None`  
`auto_error` |  By default, if no HTTP Authorization header is provided, required for OAuth2 authentication, it will automatically cancel the request and send the client an error. If `auto_error` is set to `False`, when the HTTP Authorization header is not available, instead of erroring out, the dependency result will be `None`. This is useful when you want to have optional authentication. It is also useful when you want to have authentication that can be provided in one of multiple optional ways (for example, with OAuth2 or in a cookie). **TYPE:** `bool` **DEFAULT:** `True`  
Source code in `fastapi/security/oauth2.py`
```
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
```
|