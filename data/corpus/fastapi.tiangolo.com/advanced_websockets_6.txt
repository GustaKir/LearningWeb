Title: WebSocket Chat Example in FastAPI
URL: https://fastapi.tiangolo.com/advanced/websockets/
Summary: This document provides an example of using WebSocket with FastAPI to create a simple chat application. It includes code snippets for setting up the FastAPI app, HTML for the chat interface, and JavaScript to handle WebSocket connections for sending messages.
---

```
fromtypingimport Annotated
fromfastapiimport (
  Cookie,
  Depends,
  FastAPI,
  Query,
  WebSocket,
  WebSocketException,
  status,
)
fromfastapi.responsesimport HTMLResponse
app = FastAPI()
html = """
<!DOCTYPE html>
<html>
  <head>
    <title>Chat</title>
  </head>
  <body>
    <h1>WebSocket Chat</h1>
    <form action="" onsubmit="sendMessage(event)">
      <label>Item ID: <input type="text" id="itemId" autocomplete="off" value="foo"/></label>
      <label>Token: <input type="text" id="token" autocomplete="off" value="some-key-token"/></label>
      <button onclick="connect(event)">Connect</button>
      <hr>
      <label>Message: <input type="text" id="messageText" autocomplete="off"/></label>
      <button>Send</button>
    </form>
    <ul id='messages'>
    </ul>
    <script>
    var ws = null;
      function connect(event) {
        var itemId = document.getElementById("itemId")
        var token = document.getElementById("token")
        ws = new WebSocket("ws://localhost:8000/items/" + itemId.value + "/ws?token=" + token.value);
        ws.onmessage = function(event) {
          var messages = document.getElementById('messages')
          var message = document.createElement('li')
          var content = document.createTextNode(event.data)
          message.appendChild(content)
          messages.appendChild(message)
        };
        event.preventDefault()
      }
      function sendMessage(event) {
        var input = document.getElementById("messageText")
        ws.send(input.value)
        input.value = ''
        event.preventDefault()
      }
    </script>
  </body>
</html>
"""
@app.get("/")
async defget():
  return HTMLResponse(html)
async defget_cookie_or_token(
  websocket: WebSocket,
  session: Annotated[str | None, Cookie()] = None,
  token: Annotated[str | None, Query()] = None,
):
  if session is None and token is None:
    raise WebSocketException(code=status.WS_1008_POLICY_VIOLATION)
  return session or token
@app.websocket("/items/{item_id}/ws")
async defwebsocket_endpoint(
  *,
  websocket: WebSocket,
  item_id: str,
  q: int | None = None,
  cookie_or_token: Annotated[str, Depends(get_cookie_or_token)],
):
  await websocket.accept()
  while True:
    data = await websocket.receive_text()
    await websocket.send_text(
      f"Session cookie or query token value is: {cookie_or_token}"
    )
    if q is not None:
      await websocket.send_text(f"Query parameter q is: {q}")
    await websocket.send_text(f"Message text was: {data}, for item ID: {item_id}")

```

ðŸ¤“ Other versions and variants
[Python 3.9+](https://fastapi.tiangolo.com/advanced/websockets/#__tabbed_5_1)[Python 3.8+](https://fastapi.tiangolo.com/advanced/websockets/#__tabbed_5_2)[Python 3.10+ - non-Annotated](https://fastapi.tiangolo.com/advanced/websockets/#__tabbed_5_3)[Python 3.8+ - non-Annotated](https://fastapi.tiangolo.com/advanced/websockets/#__tabbed_5_4)