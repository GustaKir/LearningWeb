Title: Python Type Annotations: Dictionaries and Unions
URL: https://fastapi.tiangolo.com/python-types/
Summary: This section explains how to define a dictionary in Python with string keys and float values, and how to use the Union type from the typing module to allow variables to be of multiple types. It notes the new syntax introduced in Python 3.10 for Union types.
---

```

This means:
  * The variable `prices` is a `dict`:
    * The keys of this `dict` are of type `str` (let's say, the name of each item).
    * The values of this `dict` are of type `float` (let's say, the price of each item).


#### Union[Â¶](https://fastapi.tiangolo.com/python-types/#union "Permanent link")
You can declare that a variable can be any of **several types** , for example, an `int` or a `str`.
In Python 3.6 and above (including Python 3.10) you can use the `Union` type from `typing` and put inside the square brackets the possible types to accept.
In Python 3.10 there's also a **new syntax** where you can put the possible types separated by a vertical bar (`|`).
[Python 3.10+](https://fastapi.tiangolo.com/python-types/#__tabbed_10_1)[Python 3.8+](https://fastapi.tiangolo.com/python-types/#__tabbed_10_2)
```
defprocess_item(item: int | str):
  print(item)

```

```
fromtypingimport Union
defprocess_item(item: Union[int, str]):
  print(item)

```

In both cases this means that `item` could be an `int` or a `str`.
#### Possibly `None`[Â¶](https://fastapi.tiangolo.com/python-types/#possibly-none "Permanent link")
You can declare that a value could have a type, like `str`, but that it could also be `None`.
In Python 3.6 and above (including Python 3.10) you can declare it by importing and using `Optional` from the `typing` module.
```
fromtypingimport Optional
defsay_hi(name: Optional[str] = None):
  if name is not None:
    print(f"Hey {name}!")
  else:
    print("Hello World")

```

Using `Optional[str]` instead of just `str` will let the editor help you detect errors where you could be assuming that a value is always a `str`, when it could actually be `None` too.
`Optional[Something]` is actually a shortcut for `Union[Something, None]`, they are equivalent.
This also means that in Python 3.10, you can use `Something | None`:
[Python 3.10+](https://fastapi.tiangolo.com/python-types/#__tabbed_11_1)[Python 3.8+](https://fastapi.tiangolo.com/python-types/#__tabbed_11_2)[Python 3.8+ alternative](https://fastapi.tiangolo.com/python-types/#__tabbed_11_3)
```
defsay_hi(name: str | None = None):
  if name is not None:
    print(f"Hey {name}!")
  else:
    print("Hello World")

```

```
fromtypingimport Optional
defsay_hi(name: Optional[str] = None):
  if name is not None:
    print(f"Hey {name}!")
  else:
    print("Hello World")

```

```
fromtypingimport Union
defsay_hi(name: Union[str, None] = None):
  if name is not None:
    print(f"Hey {name}!")
  else:
    print("Hello World")

```

#### Using `Union` or `Optional`[Â¶](https://fastapi.tiangolo.com/python-types/#using-union-or-optional "Permanent link")
If you are using a Python version below 3.10, here's a tip from my very **subjective** point of view:
  * ðŸš¨ Avoid using `Optional[SomeType]`
  * Instead âœ¨ **use`Union[SomeType, None]`** âœ¨.


Both are equivalent and underneath they are the same, but I would recommend `Union` instead of `Optional` because the word "**optional** " would seem to imply that the value is optional, and it actually means "it can be `None`", even if it's not optional and is still required.
I think `Union[SomeType, None]` is more explicit about what it means.
It's just about the words and names. But those words can affect how you and your teammates think about the code.
As an example, let's take this function:
[Python 3.8+](https://fastapi.tiangolo.com/python-types/#__tabbed_12_1)
```
fromtypingimport Optional
defsay_hi(name: Optional[str]):
  print(f"Hey {name}!")

```

ðŸ¤“ Other versions and variants
[Python 3.10+](https://fastapi.tiangolo.com/python-types/#__tabbed_13_1)
```
defsay_hi(name: str | None):
  print(f"Hey {name}!")

```

The parameter `name` is defined as `Optional[str]`, but it is **not optional** , you cannot call the function without the parameter:
```
say_hi() # Oh, no, this throws an error! ðŸ˜±

```

The `name` parameter is **still required** (not _optional_) because it doesn't have a default value. Still, `name` accepts `None` as the value:
```
say_hi(name=None) # This works, None is valid ðŸŽ‰

```

The good news is, once you are on Python 3.10 you won't have to worry about that, as you will be able to simply use `|` to define unions of types:
[Python 3.10+](https://fastapi.tiangolo.com/python-types/#__tabbed_14_1)
```
defsay_hi(name: str | None):
  print(f"Hey {name}!")

```

ðŸ¤“ Other versions and variants
[Python 3.8+](https://fastapi.tiangolo.com/python-types/#__tabbed_15_1)
```
fromtypingimport Optional
defsay_hi(name: Optional[str]):
  print(f"Hey {name}!")