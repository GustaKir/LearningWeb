Title: Comparison of FastAPI and Starlette
URL: https://fastapi.tiangolo.com/alternatives/
Summary: Starlette is recognized as the fastest Python framework, providing essential web microframework functionalities without features like automatic data validation or documentation, which FastAPI offers using Python type hints and Pydantic. FastAPI also enhances web applications with dependency injection, security utilities, and OpenAPI schema generation. Furthermore, it utilizes ASGI, a developing standard aimed at improving interoperability among various web tools and servers.
---

Starlette is currently the fastest Python framework tested. Only surpassed by Uvicorn, which is not a framework, but a server.
Starlette provides all the basic web microframework functionality.
But it doesn't provide automatic data validation, serialization or documentation.
That's one of the main things that **FastAPI** adds on top, all based on Python type hints (using Pydantic). That, plus the dependency injection system, security utilities, OpenAPI schema generation, etc.
Technical Details
ASGI is a new "standard" being developed by Django core team members. It is still not a "Python standard" (a PEP), although they are in the process of doing that.
Nevertheless, it is already being used as a "standard" by several tools. This greatly improves interoperability, as you could switch Uvicorn for any other ASGI server (like Daphne or Hypercorn), or you could add ASGI compatible tools, like `python-socketio`.
**FastAPI** uses it to
Handle all the core web parts. Adding features on top.
The class `FastAPI` itself inherits directly from the class `Starlette`.
So, anything that you can do with Starlette, you can do it directly with **FastAPI** , as it is basically Starlette on steroids.
### [Uvicorn](https://www.uvicorn.org/)[¶](https://fastapi.tiangolo.com/alternatives/#uvicorn "Permanent link")
Uvicorn is a lightning-fast ASGI server, built on uvloop and httptools.
It is not a web framework, but a server. For example, it doesn't provide tools for routing by paths. That's something that a framework like Starlette (or **FastAPI**) would provide on top.
It is the recommended server for Starlette and **FastAPI**.
**FastAPI** recommends it as
The main web server to run **FastAPI** applications.
You can also use the `--workers` command line option to have an asynchronous multi-process server.
Check more details in the [Deployment](https://fastapi.tiangolo.com/deployment/) section.
## Benchmarks and speed[¶](https://fastapi.tiangolo.com/alternatives/#benchmarks-and-speed "Permanent link")
To understand, compare, and see the difference between Uvicorn, Starlette and FastAPI, check the section about [Benchmarks](https://fastapi.tiangolo.com/benchmarks/).
Was this page helpful? 
Thanks for your feedback! 
Thanks for your feedback! 
Back to top  [ Previous  About  ](https://fastapi.tiangolo.com/about/) [ Next  History, Design and Future  ](https://fastapi.tiangolo.com/history-design-future/)
The FastAPI trademark is owned by [@tiangolo](https://tiangolo.com) and is registered in the US and across other regions 
Made with [ Material for MkDocs ](https://squidfunk.github.io/mkdocs-material/)
[ ](https://github.com/fastapi/fastapi "github.com") [ ](https://discord.gg/VQjSZaeJmf "discord.gg") [ ](https://twitter.com/fastapi "twitter.com") [ ](https://www.linkedin.com/in/tiangolo "www.linkedin.com") [ ](https://dev.to/tiangolo "dev.to") [ ](https://medium.com/@tiangolo "medium.com") [ ](https://tiangolo.com "tiangolo.com")
  *[IoT]: Internet of Things
  *[serialization]: also called marshalling, conversion
  *[schema]: the definition of how data should be formed
  *[parsing]: reading and converting to Python data
  *[ASGI]: The new standard for building asynchronous Python web applications