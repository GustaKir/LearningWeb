Title: Editor Support and Handling Arbitrary Dicts in FastAPI
URL: https://fastapi.tiangolo.com/tutorial/body-nested-models/
Summary: This section discusses the benefits of using Pydantic models in FastAPI, including enhanced editor support and automatic conversion between incoming dicts and JSON responses. It also describes the ability to declare request bodies as arbitrary dicts, allowing for flexible key-value pairs without predefined models.
---

```

## Editor support everywhere[Â¶](https://fastapi.tiangolo.com/tutorial/body-nested-models/#editor-support-everywhere "Permanent link")
And you get editor support everywhere.
Even for items inside of lists:
![](https://fastapi.tiangolo.com/img/tutorial/body-nested-models/image01.png)
You couldn't get this kind of editor support if you were working directly with `dict` instead of Pydantic models.
But you don't have to worry about them either, incoming dicts are converted automatically and your output is converted automatically to JSON too.
## Bodies of arbitrary `dict`s[Â¶](https://fastapi.tiangolo.com/tutorial/body-nested-models/#bodies-of-arbitrary-dicts "Permanent link")
You can also declare a body as a `dict` with keys of some type and values of some other type.
This way, you don't have to know beforehand what the valid field/attribute names are (as would be the case with Pydantic models).
This would be useful if you want to receive keys that you don't already know.
Another useful case is when you want to have keys of another type (e.g., `int`).
That's what we are going to see here.
In this case, you would accept any `dict` as long as it has `int` keys with `float` values:
[Python 3.9+](https://fastapi.tiangolo.com/tutorial/body-nested-models/#__tabbed_21_1)
```
fromfastapiimport FastAPI
app = FastAPI()
@app.post("/index-weights/")
async defcreate_index_weights(weights: dict[int, float]):
  return weights

```

ðŸ¤“ Other versions and variants
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/body-nested-models/#__tabbed_22_1)
```
fromtypingimport Dict
fromfastapiimport FastAPI
app = FastAPI()
@app.post("/index-weights/")
async defcreate_index_weights(weights: Dict[int, float]):
  return weights

```

Tip
Keep in mind that JSON only supports `str` as keys.
But Pydantic has automatic data conversion.
This means that, even though your API clients can only send strings as keys, as long as those strings contain pure integers, Pydantic will convert them and validate them.
And the `dict` you receive as `weights` will actually have `int` keys and `float` values.
## Recap[Â¶](https://fastapi.tiangolo.com/tutorial/body-nested-models/#recap "Permanent link")
With **FastAPI** you have the maximum flexibility provided by Pydantic models, while keeping your code simple, short and elegant.
But with all the benefits:
  * Editor support (completion everywhere!)
  * Data conversion (a.k.a. parsing / serialization)
  * Data validation
  * Schema documentation
  * Automatic docs

Was this page helpful? 
Thanks for your feedback! 
Thanks for your feedback! 
Back to top  [ Previous  Body - Fields  ](https://fastapi.tiangolo.com/tutorial/body-fields/) [ Next  Declare Request Example Data  ](https://fastapi.tiangolo.com/tutorial/schema-extra-example/)
The FastAPI trademark is owned by [@tiangolo](https://tiangolo.com) and is registered in the US and across other regions 
Made with [ Material for MkDocs ](https://squidfunk.github.io/mkdocs-material/)
[ ](https://github.com/fastapi/fastapi "github.com") [ ](https://discord.gg/VQjSZaeJmf "discord.gg") [ ](https://twitter.com/fastapi "twitter.com") [ ](https://www.linkedin.com/in/tiangolo "www.linkedin.com") [ ](https://dev.to/tiangolo "dev.to") [ ](https://medium.com/@tiangolo "medium.com") [ ](https://tiangolo.com "tiangolo.com")