Title: Using Dataclasses with FastAPI
URL: https://fastapi.tiangolo.com/advanced/dataclasses/
Summary: This section explains how to use standard Python dataclasses in FastAPI, highlighting that FastAPI leverages Pydantic for features like data validation, serialization, and documentation. It discusses the creation of a FastAPI endpoint using dataclasses and notes that while dataclasses are supported, they lack some capabilities of Pydantic models.
---

```
fromdataclassesimport dataclass
fromtypingimport Union
fromfastapiimport FastAPI
@dataclass
classItem:
  name: str
  price: float
  description: Union[str, None] = None
  tax: Union[float, None] = None
app = FastAPI()
@app.post("/items/")
async defcreate_item(item: Item):
  return item

```

This is still supported thanks to **Pydantic** , as it has [internal support for `dataclasses`](https://docs.pydantic.dev/latest/concepts/dataclasses/#use-of-stdlib-dataclasses-with-basemodel).
So, even with the code above that doesn't use Pydantic explicitly, FastAPI is using Pydantic to convert those standard dataclasses to Pydantic's own flavor of dataclasses.
And of course, it supports the same:
  * data validation
  * data serialization
  * data documentation, etc.


This works the same way as with Pydantic models. And it is actually achieved in the same way underneath, using Pydantic.
Info
Keep in mind that dataclasses can't do everything Pydantic models can do.
So, you might still need to use Pydantic models.
But if you have a bunch of dataclasses laying around, this is a nice trick to use them to power a web API using FastAPI. ðŸ¤“
## Dataclasses in `response_model`[Â¶](https://fastapi.tiangolo.com/advanced/dataclasses/#dataclasses-in-response_model "Permanent link")
You can also use `dataclasses` in the `response_model` parameter:
[Python 3.8+](https://fastapi.tiangolo.com/advanced/dataclasses/#__tabbed_2_1)
```
fromdataclassesimport dataclass, field
fromtypingimport List, Union
fromfastapiimport FastAPI
@dataclass
classItem:
  name: str
  price: float
  tags: List[str] = field(default_factory=list)
  description: Union[str, None] = None
  tax: Union[float, None] = None
app = FastAPI()
@app.get("/items/next", response_model=Item)
async defread_next_item():
  return {
    "name": "Island In The Moon",
    "price": 12.99,
    "description": "A place to be playin' and havin' fun",
    "tags": ["breater"],
  }

```

The dataclass will be automatically converted to a Pydantic dataclass.
This way, its schema will show up in the API docs user interface:
![](https://fastapi.tiangolo.com/img/tutorial/dataclasses/image01.png)
## Dataclasses in Nested Data Structures[Â¶](https://fastapi.tiangolo.com/advanced/dataclasses/#dataclasses-in-nested-data-structures "Permanent link")
You can also combine `dataclasses` with other type annotations to make nested data structures.
In some cases, you might still have to use Pydantic's version of `dataclasses`. For example, if you have errors with the automatically generated API documentation.
In that case, you can simply swap the standard `dataclasses` with `pydantic.dataclasses`, which is a drop-in replacement:
[Python 3.8+](https://fastapi.tiangolo.com/advanced/dataclasses/#__tabbed_3_1)
```
fromdataclassesimport field # (1)
fromtypingimport List, Union
fromfastapiimport FastAPI
frompydantic.dataclassesimport dataclass # (2)
@dataclass
classItem:
  name: str
  description: Union[str, None] = None
@dataclass
classAuthor:
  name: str
  items: List[Item] = field(default_factory=list) # (3)
app = FastAPI()
@app.post("/authors/{author_id}/items/", response_model=Author) # (4)
async defcreate_author_items(author_id: str, items: List[Item]): # (5)
  return {"name": author_id, "items": items} # (6)
@app.get("/authors/", response_model=List[Author]) # (7)
defget_authors(): # (8)
  return [ # (9)
    {
      "name": "Breaters",
      "items": [
        {
          "name": "Island In The Moon",
          "description": "A place to be playin' and havin' fun",
        },
        {"name": "Holy Buddies"},
      ],
    },
    {
      "name": "System of an Up",
      "items": [
        {
          "name": "Salt",
          "description": "The kombucha mushroom people's favorite",
        },
        {"name": "Pad Thai"},
        {
          "name": "Lonely Night",
          "description": "The mostests lonliest nightiest of allest",
        },
      ],
    },
  ]