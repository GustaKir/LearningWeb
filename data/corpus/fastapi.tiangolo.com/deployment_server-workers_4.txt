Title: Deploying FastAPI with Worker Processes
URL: https://fastapi.tiangolo.com/deployment/server-workers/
Summary: This section explains how to deploy FastAPI applications using Uvicorn with multiple worker processes to utilize multiple CPU cores for handling more requests. It outlines the need for process replication beyond running a single server program and hints at upcoming instructions for deployment in container environments.
---

Up to this point, with all the tutorials in the docs, you have probably been running a **server program** , for example, using the `fastapi` command, that runs Uvicorn, running a **single process**.
When deploying applications you will probably want to have some **replication of processes** to take advantage of **multiple cores** and to be able to handle more requests.
As you saw in the previous chapter about [Deployment Concepts](https://fastapi.tiangolo.com/deployment/concepts/), there are multiple strategies you can use.
Here I'll show you how to use **Uvicorn** with **worker processes** using the `fastapi` command or the `uvicorn` command directly.
Info
If you are using containers, for example with Docker or Kubernetes, I'll tell you more about that in the next chapter: [FastAPI in Containers - Docker](https://fastapi.tiangolo.com/deployment/docker/).
In particular, when running on **Kubernetes** you will probably **not** want to use workers and instead run **a single Uvicorn process per container** , but I'll tell you about it later in that chapter.
## Multiple Workers[¬∂](https://fastapi.tiangolo.com/deployment/server-workers/#multiple-workers "Permanent link")
You can start multiple workers with the `--workers` command line option:
[`fastapi`](https://fastapi.tiangolo.com/deployment/server-workers/#__tabbed_1_1)[`uvicorn`](https://fastapi.tiangolo.com/deployment/server-workers/#__tabbed_1_2)
If you use the `fastapi` command:
```

fast ‚Üí[](https://fastapi.tiangolo.com/deployment/server-workers/)fastapi run --workers 4 _main.py_  FastAPI  Starting production server üöÄ       Searching for package file structure from directories with       __init__.py files       Importing from /home/user/code/awesomeapp   module  üêç main.py    code  Importing the FastAPI app object from the module with the       following code:       _from __**main**__ import __**app**_    app  Using import string: main:app   server  Server started at _http://0.0.0.0:8000_   server  Documentation at _http://0.0.0.0:8000/docs_       Logs:    INFO  Uvicorn running on _http://0.0.0.0:8000_ **(**Press CTRL+C to       quit**)**    INFO  Started parent process **[****27365****]**    INFO  Started server process **[****27368****]**    INFO  Started server process **[****27369****]**    INFO  Started server process **[****27370****]**    INFO  Started server process **[****27367****]**    INFO  Waiting for application startup.    INFO  Waiting for application startup.    INFO  Waiting for application startup.    INFO  Waiting for application startup.    INFO  Application startup complete.    INFO  Application startup complete.    INFO  Application startup complete.    INFO  Application startup complete.restart ‚Üª[](https://fastapi.tiangolo.com/deployment/server-workers/)

```

If you prefer to use the `uvicorn` command directly:
```

fast ‚Üí[](https://fastapi.tiangolo.com/deployment/server-workers/)