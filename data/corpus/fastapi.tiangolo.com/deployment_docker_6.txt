Title: Deploying FastAPI with Docker
URL: https://fastapi.tiangolo.com/deployment/docker/
Summary: This section provides a Dockerfile example for deploying a FastAPI application. It outlines the steps to set up the Docker environment, including setting the working directory, copying dependencies, installing requirements, and configuring the application to run on port 80. It also mentions considerations for running behind a proxy.
---

```
FROMpython:3.9
WORKDIR/code
COPY./requirements.txt/code/requirements.txt
RUNpipinstall--no-cache-dir--upgrade-r/code/requirements.txt
COPY./app/code/app
CMD["fastapi","run","app/main.py","--port","80"]
# If running behind a proxy like Nginx or Traefik add --proxy-headers
# CMD ["fastapi", "run", "app/main.py", "--port", "80", "--proxy-headers"]

```

## What is a Container[¶](https://fastapi.tiangolo.com/deployment/docker/#what-is-a-container "Permanent link")
Containers (mainly Linux containers) are a very **lightweight** way to package applications including all their dependencies and necessary files while keeping them isolated from other containers (other applications or components) in the same system.
Linux containers run using the same Linux kernel of the host (machine, virtual machine, cloud server, etc). This just means that they are very lightweight (compared to full virtual machines emulating an entire operating system).
This way, containers consume **little resources** , an amount comparable to running the processes directly (a virtual machine would consume much more).
Containers also have their own **isolated** running processes (commonly just one process), file system, and network, simplifying deployment, security, development, etc.
## What is a Container Image[¶](https://fastapi.tiangolo.com/deployment/docker/#what-is-a-container-image "Permanent link")
A **container** is run from a **container image**.
A container image is a **static** version of all the files, environment variables, and the default command/program that should be present in a container. **Static** here means that the container **image** is not running, it's not being executed, it's only the packaged files and metadata.
In contrast to a "**container image** " that is the stored static contents, a "**container** " normally refers to the running instance, the thing that is being **executed**.
When the **container** is started and running (started from a **container image**) it could create or change files, environment variables, etc. Those changes will exist only in that container, but would not persist in the underlying container image (would not be saved to disk).
A container image is comparable to the **program** file and contents, e.g. `python` and some file `main.py`.
And the **container** itself (in contrast to the **container image**) is the actual running instance of the image, comparable to a **process**. In fact, a container is running only when it has a **process running** (and normally it's only a single process). The container stops when there's no process running in it.
## Container Images[¶](https://fastapi.tiangolo.com/deployment/docker/#container-images "Permanent link")
Docker has been one of the main tools to create and manage **container images** and **containers**.
And there's a public [Docker Hub](https://hub.docker.com/) with pre-made **official container images** for many tools, environments, databases, and applications.
For example, there's an official [Python Image](https://hub.docker.com/_/python).
And there are many other images for different things like databases, for example for:
  * [PostgreSQL](https://hub.docker.com/_/postgres)
  * [MySQL](https://hub.docker.com/_/mysql)
  * [MongoDB](https://hub.docker.com/_/mongo)
  * [Redis](https://hub.docker.com/_/redis), etc.