Title: OAuth2 Password Form and Request Handling in FastAPI
URL: https://fastapi.tiangolo.com/reference/security/
Summary: This section discusses the `OAuth2PasswordRequestForm`, a dependency class in FastAPI for handling OAuth2 password flow. It specifies that `username` and `password` must be collected as form data rather than JSON, adhering to OAuth2 specifications.
---

```

###  auto_error `instance-attribute` [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.OAuth2PasswordBearer.auto_error "Permanent link")
```
auto_error = auto_error

```

## OAuth2 Password Form[¶](https://fastapi.tiangolo.com/reference/security/#oauth2-password-form "Permanent link")
##  fastapi.security.OAuth2PasswordRequestForm [¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.OAuth2PasswordRequestForm "Permanent link")
```
OAuth2PasswordRequestForm(
  *,
  grant_type=None,
  username,
  password,
  scope="",
  client_id=None,
  client_secret=None
)

```

This is a dependency class to collect the `username` and `password` as form data for an OAuth2 password flow.
The OAuth2 specification dictates that for a password flow the data should be collected using form data (instead of JSON) and that it should have the specific fields `username` and `password`.
All the initialization parameters are extracted from the request.
Read more about it in the [FastAPI docs for Simple OAuth2 with Password and Bearer](https://fastapi.tiangolo.com/tutorial/security/simple-oauth2/).
#### Example[¶](https://fastapi.tiangolo.com/reference/security/#fastapi.security.OAuth2PasswordRequestForm--example "Permanent link")
```
fromtypingimport Annotated
fromfastapiimport Depends, FastAPI
fromfastapi.securityimport OAuth2PasswordRequestForm
app = FastAPI()
@app.post("/login")
deflogin(form_data: Annotated[OAuth2PasswordRequestForm, Depends()]):
  data = {}
  data["scopes"] = []
  for scope in form_data.scopes:
    data["scopes"].append(scope)
  if form_data.client_id:
    data["client_id"] = form_data.client_id
  if form_data.client_secret:
    data["client_secret"] = form_data.client_secret
  return data

```

Note that for OAuth2 the scope `items:read` is a single scope in an opaque string. You could have custom internal logic to separate it by colon characters (`:`) or similar, and get the two parts `items` and `read`. Many applications do that to group and organize permissions, you could do it as well in your application, just know that that it is application specific, it's not part of the specification.
PARAMETER | DESCRIPTION  
---|---  
`grant_type` |  The OAuth2 spec says it is required and MUST be the fixed string "password". Nevertheless, this dependency class is permissive and allows not passing it. If you want to enforce it, use instead the `OAuth2PasswordRequestFormStrict` dependency. **TYPE:** `Union[str, None]` **DEFAULT:** `None`  
`username` |  `username` string. The OAuth2 spec requires the exact field name `username`. **TYPE:** `str`  
`password` |  `password` string. The OAuth2 spec requires the exact field name `password". **TYPE:** `str`  
`scope` |  A single string with actually several scopes separated by spaces. Each scope is also a string. For example, a single string with: ```python "items:read items:write users:read profile openid" ```` would represent the scopes:
  * `items:read`
  * `items:write`
  * `users:read`
  * `profile`
  * `openid`

**TYPE:** `str` **DEFAULT:** `''`  
`client_id` |  If there's a `client_id`, it can be sent as part of the form fields. But the OAuth2 specification recommends sending the `client_id` and `client_secret` (if any) using HTTP Basic auth. **TYPE:** `Union[str, None]` **DEFAULT:** `None`  
`client_secret` |  If there's a `client_password` (and a `client_id`), they can be sent as part of the form fields. But the OAuth2 specification recommends sending the `client_id` and `client_secret` (if any) using HTTP Basic auth. **TYPE:** `Union[str, None]` **DEFAULT:** `None`  
Source code in `fastapi/security/oauth2.py`
```
 61
 62
 63
 64
 65
 66
 67
 68
 69
 70
 71
 72
 73
 74
 75
 76
 77
 78
 79
 80
 81
 82
 83
 84
 85
 86
 87
 88
 89
 90
 91
 92
 93
 94
 95
 96
 97
 98
 99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
```
| ```
def__init__(
  self,
  *,
  grant_type: Annotated[
    Union[str, None],
    Form(pattern="^password$"),
    Doc(
"""
      The OAuth2 spec says it is required and MUST be the fixed string
      "password". Nevertheless, this dependency class is permissive and
      allows not passing it. If you want to enforce it, use instead the
      `OAuth2PasswordRequestFormStrict` dependency.
      """
    ),
  ] = None,
  username: Annotated[
    str,
    Form(),
    Doc(
"""
      `username` string. The OAuth2 spec requires the exact field name
      `username`.
      """
    ),
  ],
  password: Annotated[
    str,
    Form(),
    Doc(
"""
      `password` string. The OAuth2 spec requires the exact field name
      `password".
      """
    ),
  ],
  scope: Annotated[
    str,
    Form(),
    Doc(
"""
      A single string with actually several scopes separated by spaces. Each
      scope is also a string.
      For example, a single string with: