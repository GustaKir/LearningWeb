Title: Testing in FastAPI: Extended Example
URL: https://fastapi.tiangolo.com/tutorial/testing/
Summary: This section expands on testing in FastAPI, detailing a file structure for a FastAPI application and describing how to handle additional path operations. It highlights the importance of correctly testing GET and POST requests, particularly those requiring an X-Token header, and sets the stage for writing comprehensive tests.
---

```

...and have the code for the tests just like before.
## Testing: extended example[¶](https://fastapi.tiangolo.com/tutorial/testing/#testing-extended-example "Permanent link")
Now let's extend this example and add more details to see how to test different parts.
### Extended **FastAPI** app file[¶](https://fastapi.tiangolo.com/tutorial/testing/#extended-fastapi-app-file "Permanent link")
Let's continue with the same file structure as before:
```
.
├── app
│   ├── __init__.py
│   ├── main.py
│   └── test_main.py

```

Let's say that now the file `main.py` with your **FastAPI** app has some other **path operations**.
It has a `GET` operation that could return an error.
It has a `POST` operation that could return several errors.
Both _path operations_ require an `X-Token` header.
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/testing/#__tabbed_4_1)[Python 3.9+](https://fastapi.tiangolo.com/tutorial/testing/#__tabbed_4_2)[Python 3.8+](https://fastapi.tiangolo.com/tutorial/testing/#__tabbed_4_3)[Python 3.10+ non-Annotated](https://fastapi.tiangolo.com/tutorial/testing/#__tabbed_4_4)[Python 3.8+ non-Annotated](https://fastapi.tiangolo.com/tutorial/testing/#__tabbed_4_5)
```
fromtypingimport Annotated
fromfastapiimport FastAPI, Header, HTTPException
frompydanticimport BaseModel
fake_secret_token = "coneofsilence"
fake_db = {
  "foo": {"id": "foo", "title": "Foo", "description": "There goes my hero"},
  "bar": {"id": "bar", "title": "Bar", "description": "The bartenders"},
}
app = FastAPI()
classItem(BaseModel):
  id: str
  title: str
  description: str | None = None
@app.get("/items/{item_id}", response_model=Item)
async defread_main(item_id: str, x_token: Annotated[str, Header()]):
  if x_token != fake_secret_token:
    raise HTTPException(status_code=400, detail="Invalid X-Token header")
  if item_id not in fake_db:
    raise HTTPException(status_code=404, detail="Item not found")
  return fake_db[item_id]
@app.post("/items/", response_model=Item)
async defcreate_item(item: Item, x_token: Annotated[str, Header()]):
  if x_token != fake_secret_token:
    raise HTTPException(status_code=400, detail="Invalid X-Token header")
  if item.id in fake_db:
    raise HTTPException(status_code=409, detail="Item already exists")
  fake_db[item.id] = item
  return item

```

```
fromtypingimport Annotated, Union
fromfastapiimport FastAPI, Header, HTTPException
frompydanticimport BaseModel
fake_secret_token = "coneofsilence"
fake_db = {
  "foo": {"id": "foo", "title": "Foo", "description": "There goes my hero"},
  "bar": {"id": "bar", "title": "Bar", "description": "The bartenders"},
}
app = FastAPI()
classItem(BaseModel):
  id: str
  title: str
  description: Union[str, None] = None
@app.get("/items/{item_id}", response_model=Item)
async defread_main(item_id: str, x_token: Annotated[str, Header()]):
  if x_token != fake_secret_token:
    raise HTTPException(status_code=400, detail="Invalid X-Token header")
  if item_id not in fake_db:
    raise HTTPException(status_code=404, detail="Item not found")
  return fake_db[item_id]
@app.post("/items/", response_model=Item)
async defcreate_item(item: Item, x_token: Annotated[str, Header()]):
  if x_token != fake_secret_token:
    raise HTTPException(status_code=400, detail="Invalid X-Token header")
  if item.id in fake_db:
    raise HTTPException(status_code=409, detail="Item already exists")
  fake_db[item.id] = item
  return item

```

```
fromtypingimport Union
fromfastapiimport FastAPI, Header, HTTPException
frompydanticimport BaseModel
fromtyping_extensionsimport Annotated
fake_secret_token = "coneofsilence"
fake_db = {
  "foo": {"id": "foo", "title": "Foo", "description": "There goes my hero"},
  "bar": {"id": "bar", "title": "Bar", "description": "The bartenders"},
}
app = FastAPI()
classItem(BaseModel):
  id: str
  title: str
  description: Union[str, None] = None
@app.get("/items/{item_id}", response_model=Item)
async defread_main(item_id: str, x_token: Annotated[str, Header()]):
  if x_token != fake_secret_token:
    raise HTTPException(status_code=400, detail="Invalid X-Token header")
  if item_id not in fake_db:
    raise HTTPException(status_code=404, detail="Item not found")
  return fake_db[item_id]
@app.post("/items/", response_model=Item)
async defcreate_item(item: Item, x_token: Annotated[str, Header()]):
  if x_token != fake_secret_token:
    raise HTTPException(status_code=400, detail="Invalid X-Token header")
  if item.id in fake_db:
    raise HTTPException(status_code=409, detail="Item already exists")
  fake_db[item.id] = item
  return item

```

Tip
Prefer to use the `Annotated` version if possible.