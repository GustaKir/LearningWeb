Title: FastAPI Security: Implementing OAuth2 with Password Bearer
URL: https://fastapi.tiangolo.com/tutorial/security/first-steps/
Summary: This document describes how to set up a basic FastAPI application with OAuth2 password bearer authentication. It includes example code for creating an endpoint that retrieves a token and explains the significance of using a relative URL for the token endpoint, ensuring compatibility with different API base paths.
---

```
fromfastapiimport Depends, FastAPI
fromfastapi.securityimport OAuth2PasswordBearer
app = FastAPI()
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
@app.get("/items/")
async defread_items(token: str = Depends(oauth2_scheme)):
  return {"token": token}

```

Tip
Here `tokenUrl="token"` refers to a relative URL `token` that we haven't created yet. As it's a relative URL, it's equivalent to `./token`.
Because we are using a relative URL, if your API was located at `https://example.com/`, then it would refer to `https://example.com/token`. But if your API was located at `https://example.com/api/v1/`, then it would refer to `https://example.com/api/v1/token`.
Using a relative URL is important to make sure your application keeps working even in an advanced use case like [Behind a Proxy](https://fastapi.tiangolo.com/advanced/behind-a-proxy/).
This parameter doesn't create that endpoint / _path operation_ , but declares that the URL `/token` will be the one that the client should use to get the token. That information is used in OpenAPI, and then in the interactive API documentation systems.
We will soon also create the actual path operation.
Info
If you are a very strict "Pythonista" you might dislike the style of the parameter name `tokenUrl` instead of `token_url`.
That's because it is using the same name as in the OpenAPI spec. So that if you need to investigate more about any of these security schemes you can just copy and paste it to find more information about it.
The `oauth2_scheme` variable is an instance of `OAuth2PasswordBearer`, but it is also a "callable".
It could be called as:
```
oauth2_scheme(some, parameters)

```

So, it can be used with `Depends`.
### Use it[Â¶](https://fastapi.tiangolo.com/tutorial/security/first-steps/#use-it "Permanent link")
Now you can pass that `oauth2_scheme` in a dependency with `Depends`.
[Python 3.9+](https://fastapi.tiangolo.com/tutorial/security/first-steps/#__tabbed_5_1)
```
fromtypingimport Annotated
fromfastapiimport Depends, FastAPI
fromfastapi.securityimport OAuth2PasswordBearer
app = FastAPI()
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
@app.get("/items/")
async defread_items(token: Annotated[str, Depends(oauth2_scheme)]):
  return {"token": token}

```

ðŸ¤“ Other versions and variants
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/security/first-steps/#__tabbed_6_1)[Python 3.8+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/security/first-steps/#__tabbed_6_2)
```
fromfastapiimport Depends, FastAPI
fromfastapi.securityimport OAuth2PasswordBearer
fromtyping_extensionsimport Annotated
app = FastAPI()
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
@app.get("/items/")
async defread_items(token: Annotated[str, Depends(oauth2_scheme)]):
  return {"token": token}

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromfastapiimport Depends, FastAPI
fromfastapi.securityimport OAuth2PasswordBearer
app = FastAPI()
oauth2_scheme = OAuth2PasswordBearer(tokenUrl="token")
@app.get("/items/")
async defread_items(token: str = Depends(oauth2_scheme)):
  return {"token": token}