Title: Bigger Applications - Structure and Organization
URL: https://fastapi.tiangolo.com/tutorial/bigger-applications/
Summary: This section discusses how to effectively structure larger FastAPI applications across multiple files. It highlights the importance of organizing the application into separate modules for better maintainability, drawing a parallel to Flask's Blueprints. An example file structure is provided, showcasing the use of `__init__.py` files for imports.
---

# Bigger Applications - Multiple Files[¶](https://fastapi.tiangolo.com/tutorial/bigger-applications/#bigger-applications-multiple-files "Permanent link")
If you are building an application or a web API, it's rarely the case that you can put everything in a single file.
**FastAPI** provides a convenience tool to structure your application while keeping all the flexibility.
Info
If you come from Flask, this would be the equivalent of Flask's Blueprints.
## An example file structure[¶](https://fastapi.tiangolo.com/tutorial/bigger-applications/#an-example-file-structure "Permanent link")
Let's say you have a file structure like this:
```
.
├── app
│   ├── __init__.py
│   ├── main.py
│   ├── dependencies.py
│   └── routers
│   │  ├── __init__.py
│   │  ├── items.py
│   │  └── users.py
│   └── internal
│     ├── __init__.py
│     └── admin.py

```

Tip
There are several `__init__.py` files: one in each directory or subdirectory.
This is what allows importing code from one file into another.
For example, in `app/main.py` you could have a line like:
```
from app.routers import items

```

  * The `app` directory contains everything. And it has an empty file `app/__init__.py`, so it is a "Python package" (a collection of "Python modules"): `app`.
  * It contains an `app/main.py` file. As it is inside a Python package (a directory with a file `__init__.py`), it is a "module" of that package: `app.main`.
  * There's also an `app/dependencies.py` file, just like `app/main.py`, it is a "module": `app.dependencies`.
  * There's a subdirectory `app/routers/` with another file `__init__.py`, so it's a "Python subpackage": `app.routers`.
  * The file `app/routers/items.py` is inside a package, `app/routers/`, so, it's a submodule: `app.routers.items`.
  * The same with `app/routers/users.py`, it's another submodule: `app.routers.users`.
  * There's also a subdirectory `app/internal/` with another file `__init__.py`, so it's another "Python subpackage": `app.internal`.
  * And the file `app/internal/admin.py` is another submodule: `app.internal.admin`.


![](https://fastapi.tiangolo.com/img/tutorial/bigger-applications/package.svg)
The same file structure with comments:
```
.
├── app         # "app" is a Python package
│   ├── __init__.py   # this file makes "app" a "Python package"
│   ├── main.py     # "main" module, e.g. import app.main
│   ├── dependencies.py # "dependencies" module, e.g. import app.dependencies
│   └── routers     # "routers" is a "Python subpackage"
│   │  ├── __init__.py # makes "routers" a "Python subpackage"
│   │  ├── items.py   # "items" submodule, e.g. import app.routers.items
│   │  └── users.py   # "users" submodule, e.g. import app.routers.users
│   └── internal     # "internal" is a "Python subpackage"
│     ├── __init__.py # makes "internal" a "Python subpackage"
│     └── admin.py   # "admin" submodule, e.g. import app.internal.admin

```

## `APIRouter`[¶](https://fastapi.tiangolo.com/tutorial/bigger-applications/#apirouter "Permanent link")
Let's say the file dedicated to handling just users is the submodule at `/app/routers/users.py`.
You want to have the _path operations_ related to your users separated from the rest of the code, to keep it organized.
But it's still part of the same **FastAPI** application/web API (it's part of the same "Python Package").
You can create the _path operations_ for that module using `APIRouter`.
### Import `APIRouter`[¶](https://fastapi.tiangolo.com/tutorial/bigger-applications/#import-apirouter "Permanent link")
You import it and create an "instance" the same way you would with the class `FastAPI`:
app/routers/users.py```
fromfastapiimport APIRouter
router = APIRouter()
@router.get("/users/", tags=["users"])
async defread_users():
  return [{"username": "Rick"}, {"username": "Morty"}]
@router.get("/users/me", tags=["users"])
async defread_user_me():
  return {"username": "fakecurrentuser"}
@router.get("/users/{username}", tags=["users"])
async defread_user(username: str):
  return {"username": username}

```

### _Path operations_ with `APIRouter`[¶](https://fastapi.tiangolo.com/tutorial/bigger-applications/#path-operations-with-apirouter "Permanent link")
And then you use it to declare your _path operations_.
Use it the same way you would use the `FastAPI` class:
app/routers/users.py```
fromfastapiimport APIRouter
router = APIRouter()
@router.get("/users/", tags=["users"])
async defread_users():
  return [{"username": "Rick"}, {"username": "Morty"}]
@router.get("/users/me", tags=["users"])
async defread_user_me():
  return {"username": "fakecurrentuser"}
@router.get("/users/{username}", tags=["users"])
async defread_user(username: str):
  return {"username": username}