Title: FastAPI APIRouter Reference
URL: https://fastapi.tiangolo.com/reference/apirouter/
Summary: This section covers attributes related to OpenAPI callbacks and additional metadata for path operations in FastAPI. It explains the internal usage of certain attributes, their inclusion in generated OpenAPI documentation, and where to find more detailed information.
---

Only used internally.
      """
    ),
  ] = None,
  callbacks: Annotated[
    Optional[List[BaseRoute]],
    Doc(
"""
      List of *path operations* that will be used as OpenAPI callbacks.
      This is only for OpenAPI documentation, the callbacks won't be used
      directly.
      It will be added to the generated OpenAPI (e.g. visible at `/docs`).
      Read more about it in the
      [FastAPI docs for OpenAPI Callbacks](https://fastapi.tiangolo.com/advanced/openapi-callbacks/).
      """
    ),
  ] = None,
  openapi_extra: Annotated[
    Optional[Dict[str, Any]],
    Doc(
"""
      Extra metadata to be included in the OpenAPI schema for this *path
      operation*.
      Read more about it in the
      [FastAPI docs for Path Operation Advanced Configuration](https://fastapi.tiangolo.com/advanced/path-operation-advanced-configuration/#custom-openapi-path-operation-schema).
      """
    ),
  ] = None,
  generate_unique_id_function: Annotated[
    Callable[[APIRoute], str],
    Doc(
"""
      Customize the function used to generate unique IDs for the *path
      operations* shown in the generated OpenAPI.
      This is particularly useful when automatically generating clients or
      SDKs for your API.
      Read more about it in the
      [FastAPI docs about how to Generate Clients](https://fastapi.tiangolo.com/advanced/generate-clients/#custom-generate-unique-id-function).
      """
    ),
  ] = Default(generate_unique_id),
) -> Callable[[DecoratedCallable], DecoratedCallable]:
"""
  Add a *path operation* using an HTTP TRACE operation.
  ## Example
  ```python
  from fastapi import APIRouter, FastAPI
  from pydantic import BaseModel
  class Item(BaseModel):
    name: str
    description: str | None = None
  app = FastAPI()
  router = APIRouter()
  @router.trace("/items/{item_id}")
  def trace_item(item_id: str):
    return None
  app.include_router(router)
  ```
  """
  return self.api_route(
    path=path,
    response_model=response_model,
    status_code=status_code,
    tags=tags,
    dependencies=dependencies,
    summary=summary,
    description=description,
    response_description=response_description,
    responses=responses,
    deprecated=deprecated,
    methods=["TRACE"],
    operation_id=operation_id,
    response_model_include=response_model_include,
    response_model_exclude=response_model_exclude,
    response_model_by_alias=response_model_by_alias,
    response_model_exclude_unset=response_model_exclude_unset,
    response_model_exclude_defaults=response_model_exclude_defaults,
    response_model_exclude_none=response_model_exclude_none,
    include_in_schema=include_in_schema,
    response_class=response_class,
    name=name,
    callbacks=callbacks,
    openapi_extra=openapi_extra,
    generate_unique_id_function=generate_unique_id_function,
  )

```
  
---|---  
###  on_event [Â¶](https://fastapi.tiangolo.com/reference/apirouter/#fastapi.APIRouter.on_event "Permanent link")
```
on_event(event_type)

```

Add an event handler for the router.
`on_event` is deprecated, use `lifespan` event handlers instead.
Read more about it in the [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/#alternative-events-deprecated).
PARAMETER | DESCRIPTION  
---|---  
`event_type` |  The type of event. `startup` or `shutdown`. **TYPE:** `str`  
Source code in `fastapi/routing.py`
```
4407
4408
4409
4410
4411
4412
4413
4414
4415
4416
4417
4418
4419
4420
4421
4422
4423
4424
4425
4426
4427
4428
4429
4430
4431
4432
4433
4434
4435
4436
4437
4438
4439
```
| ```
@deprecated(
"""
  on_event is deprecated, use lifespan event handlers instead.
  Read more about it in the
  [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/).
  """
)
defon_event(
  self,
  event_type: Annotated[
    str,
    Doc(
"""
      The type of event. `startup` or `shutdown`.
      """
    ),
  ],
) -> Callable[[DecoratedCallable], DecoratedCallable]:
"""
  Add an event handler for the router.
  `on_event` is deprecated, use `lifespan` event handlers instead.
  Read more about it in the
  [FastAPI docs for Lifespan Events](https://fastapi.tiangolo.com/advanced/events/#alternative-events-deprecated).
  """
  defdecorator(func: DecoratedCallable) -> DecoratedCallable:
    self.add_event_handler(event_type, func)
    return func
  return decorator