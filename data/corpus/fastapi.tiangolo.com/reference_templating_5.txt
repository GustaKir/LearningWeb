Title: TemplateResponse Overview
URL: https://fastapi.tiangolo.com/reference/templating/
Summary: The TemplateResponse class in FastAPI is used for returning rendered templates. It accepts parameters such as template name, context, status code, headers, media type, and background tasks. The constructor allows for both positional and keyword arguments, though the first parameter is no longer the template name.
---

```
TemplateResponse(
  name: str,
  context: dict[str, Any] | None = None,
  status_code: int = 200,
  headers: Mapping[str, str] | None = None,
  media_type: str | None = None,
  background: BackgroundTask | None = None,
) -> _TemplateResponse

```

```
TemplateResponse(*args, **kwargs)

```

PARAMETER | DESCRIPTION  
---|---  
`*args` |  **TYPE:** `Any` **DEFAULT:** `()`  
`**kwargs` |  **TYPE:** `Any` **DEFAULT:** `{}`  
Source code in `starlette/templating.py`
```
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
```
| ```
defTemplateResponse(self, *args: typing.Any, **kwargs: typing.Any) -> _TemplateResponse:
  if args:
    if isinstance(args[0], str): # the first argument is template name (old style)
      warnings.warn(
        "The `name` is not the first parameter anymore. "
        "The first parameter should be the `Request` instance.\n"
        'Replace `TemplateResponse(name, {"request": request})` by `TemplateResponse(request, name)`.',
        DeprecationWarning,
      )
      name = args[0]
      context = args[1] if len(args) > 1 else kwargs.get("context", {})
      status_code = args[2] if len(args) > 2 else kwargs.get("status_code", 200)
      headers = args[3] if len(args) > 3 else kwargs.get("headers")
      media_type = args[4] if len(args) > 4 else kwargs.get("media_type")
      background = args[5] if len(args) > 5 else kwargs.get("background")
      if "request" not in context:
        raise ValueError('context must include a "request" key')
      request = context["request"]
    else: # the first argument is a request instance (new style)
      request = args[0]
      name = args[1] if len(args) > 1 else kwargs["name"]
      context = args[2] if len(args) > 2 else kwargs.get("context", {})
      status_code = args[3] if len(args) > 3 else kwargs.get("status_code", 200)
      headers = args[4] if len(args) > 4 else kwargs.get("headers")
      media_type = args[5] if len(args) > 5 else kwargs.get("media_type")
      background = args[6] if len(args) > 6 else kwargs.get("background")
  else: # all arguments are kwargs
    if "request" not in kwargs:
      warnings.warn(
        "The `TemplateResponse` now requires the `request` argument.\n"
        'Replace `TemplateResponse(name, {"context": context})` by `TemplateResponse(request, name)`.',
        DeprecationWarning,
      )
      if "request" not in kwargs.get("context", {}):
        raise ValueError('context must include a "request" key')
    context = kwargs.get("context", {})
    request = kwargs.get("request", context.get("request"))
    name = typing.cast(str, kwargs["name"])
    status_code = kwargs.get("status_code", 200)
    headers = kwargs.get("headers")
    media_type = kwargs.get("media_type")
    background = kwargs.get("background")
  context.setdefault("request", request)
  for context_processor in self.context_processors:
    context.update(context_processor(request))
  template = self.get_template(name)
  return _TemplateResponse(
    template,
    context,
    status_code=status_code,
    headers=headers,
    media_type=media_type,
    background=background,
  )

```
  
---|---  
Was this page helpful? 
Thanks for your feedback! 
Thanks for your feedback! 
Back to top  [ Previous  Static Files - StaticFiles  ](https://fastapi.tiangolo.com/reference/staticfiles/) [ Next  Test Client - TestClient  ](https://fastapi.tiangolo.com/reference/testclient/)
The FastAPI trademark is owned by [@tiangolo](https://tiangolo.com) and is registered in the US and across other regions 
Made with [ Material for MkDocs ](https://squidfunk.github.io/mkdocs-material/)
[ ](https://github.com/fastapi/fastapi "github.com") [ ](https://discord.gg/VQjSZaeJmf "discord.gg") [ ](https://twitter.com/fastapi "twitter.com") [ ](https://www.linkedin.com/in/tiangolo "www.linkedin.com") [ ](https://dev.to/tiangolo "dev.to") [ ](https://medium.com/@tiangolo "medium.com") [ ](https://tiangolo.com "tiangolo.com")