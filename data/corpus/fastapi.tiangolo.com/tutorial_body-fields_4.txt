Title: Using Body Fields in FastAPI with Pydantic Models
URL: https://fastapi.tiangolo.com/tutorial/body-fields/
Summary: This section explains how to use Pydantic's `Field` for adding validation and metadata within body fields in FastAPI. It describes the importation of necessary modules and provides an example of a Pydantic model, illustrating how to declare properties with specific validation rules, such as max length and value constraints.
---

# Body - Fields[Â¶](https://fastapi.tiangolo.com/tutorial/body-fields/#body-fields "Permanent link")
The same way you can declare additional validation and metadata in _path operation function_ parameters with `Query`, `Path` and `Body`, you can declare validation and metadata inside of Pydantic models using Pydantic's `Field`.
## Import `Field`[Â¶](https://fastapi.tiangolo.com/tutorial/body-fields/#import-field "Permanent link")
First, you have to import it:
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/body-fields/#__tabbed_1_1)
```
fromtypingimport Annotated
fromfastapiimport Body, FastAPI
frompydanticimport BaseModel, Field
app = FastAPI()
classItem(BaseModel):
  name: str
  description: str | None = Field(
    default=None, title="The description of the item", max_length=300
  )
  price: float = Field(gt=0, description="The price must be greater than zero")
  tax: float | None = None
@app.put("/items/{item_id}")
async defupdate_item(item_id: int, item: Annotated[Item, Body(embed=True)]):
  results = {"item_id": item_id, "item": item}
  return results

```

ðŸ¤“ Other versions and variants
[Python 3.9+](https://fastapi.tiangolo.com/tutorial/body-fields/#__tabbed_2_1)[Python 3.8+](https://fastapi.tiangolo.com/tutorial/body-fields/#__tabbed_2_2)[Python 3.10+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/body-fields/#__tabbed_2_3)[Python 3.8+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/body-fields/#__tabbed_2_4)
```
fromtypingimport Annotated, Union
fromfastapiimport Body, FastAPI
frompydanticimport BaseModel, Field
app = FastAPI()
classItem(BaseModel):
  name: str
  description: Union[str, None] = Field(
    default=None, title="The description of the item", max_length=300
  )
  price: float = Field(gt=0, description="The price must be greater than zero")
  tax: Union[float, None] = None
@app.put("/items/{item_id}")
async defupdate_item(item_id: int, item: Annotated[Item, Body(embed=True)]):
  results = {"item_id": item_id, "item": item}
  return results

```

```
fromtypingimport Union
fromfastapiimport Body, FastAPI
frompydanticimport BaseModel, Field
fromtyping_extensionsimport Annotated
app = FastAPI()
classItem(BaseModel):
  name: str
  description: Union[str, None] = Field(
    default=None, title="The description of the item", max_length=300
  )
  price: float = Field(gt=0, description="The price must be greater than zero")
  tax: Union[float, None] = None
@app.put("/items/{item_id}")
async defupdate_item(item_id: int, item: Annotated[Item, Body(embed=True)]):
  results = {"item_id": item_id, "item": item}
  return results

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromfastapiimport Body, FastAPI
frompydanticimport BaseModel, Field
app = FastAPI()
classItem(BaseModel):
  name: str
  description: str | None = Field(
    default=None, title="The description of the item", max_length=300
  )
  price: float = Field(gt=0, description="The price must be greater than zero")
  tax: float | None = None
@app.put("/items/{item_id}")
async defupdate_item(item_id: int, item: Item = Body(embed=True)):
  results = {"item_id": item_id, "item": item}
  return results

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromtypingimport Union
fromfastapiimport Body, FastAPI
frompydanticimport BaseModel, Field
app = FastAPI()
classItem(BaseModel):
  name: str
  description: Union[str, None] = Field(
    default=None, title="The description of the item", max_length=300
  )
  price: float = Field(gt=0, description="The price must be greater than zero")
  tax: Union[float, None] = None
@app.put("/items/{item_id}")
async defupdate_item(item_id: int, item: Item = Body(embed=True)):
  results = {"item_id": item_id, "item": item}
  return results

```

Warning
Notice that `Field` is imported directly from `pydantic`, not from `fastapi` as are all the rest (`Query`, `Path`, `Body`, etc).
## Declare model attributes[Â¶](https://fastapi.tiangolo.com/tutorial/body-fields/#declare-model-attributes "Permanent link")
You can then use `Field` with model attributes:
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/body-fields/#__tabbed_3_1)
```
fromtypingimport Annotated
fromfastapiimport Body, FastAPI
frompydanticimport BaseModel, Field
app = FastAPI()
classItem(BaseModel):
  name: str
  description: str | None = Field(
    default=None, title="The description of the item", max_length=300
  )
  price: float = Field(gt=0, description="The price must be greater than zero")
  tax: float | None = None
@app.put("/items/{item_id}")
async defupdate_item(item_id: int, item: Annotated[Item, Body(embed=True)]):
  results = {"item_id": item_id, "item": item}
  return results