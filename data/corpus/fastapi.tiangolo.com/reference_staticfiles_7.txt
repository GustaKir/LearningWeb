Title: Static Files in FastAPI: lookup_path Method and file_response Function
URL: https://fastapi.tiangolo.com/reference/staticfiles/
Summary: This documentation chunk describes the `lookup_path` method for locating file paths within configured directories in FastAPI's static files handling. It ensures that clients cannot escape the designated static files directory. The chunk also introduces the `file_response` function, which takes parameters like `full_path` and `stat_result` to respond with a file.
---

```
deflookup_path(self, path: str) -> tuple[str, os.stat_result | None]:
  for directory in self.all_directories:
    joined_path = os.path.join(directory, path)
    if self.follow_symlink:
      full_path = os.path.abspath(joined_path)
      directory = os.path.abspath(directory)
    else:
      full_path = os.path.realpath(joined_path)
      directory = os.path.realpath(directory)
    if os.path.commonpath([full_path, directory]) != str(directory):
      # Don't allow misbehaving clients to break out of the static files directory.
      continue
    try:
      return full_path, os.stat(full_path)
    except (FileNotFoundError, NotADirectoryError):
      continue
  return "", None

```
  
---|---  
###  file_response [¶](https://fastapi.tiangolo.com/reference/staticfiles/#fastapi.staticfiles.StaticFiles.file_response "Permanent link")
```
file_response(
  full_path, stat_result, scope, status_code=200
)

```

PARAMETER | DESCRIPTION  
---|---  
`full_path` |  **TYPE:** `PathLike`  
`stat_result` |  **TYPE:** `stat_result`  
`scope` |  **TYPE:** `Scope`  
`status_code` |  **TYPE:** `int` **DEFAULT:** `200`  
Source code in `starlette/staticfiles.py`
```
169
170
171
172
173
174
175
176
177
178
179
180
181
```
| ```
deffile_response(
  self,
  full_path: PathLike,
  stat_result: os.stat_result,
  scope: Scope,
  status_code: int = 200,
) -> Response:
  request_headers = Headers(scope=scope)
  response = FileResponse(full_path, status_code=status_code, stat_result=stat_result)
  if self.is_not_modified(response.headers, request_headers):
    return NotModifiedResponse(response.headers)
  return response

```
  
---|---  
###  check_config `async` [¶](https://fastapi.tiangolo.com/reference/staticfiles/#fastapi.staticfiles.StaticFiles.check_config "Permanent link")
```
check_config()

```

Perform a one-off configuration check that StaticFiles is actually pointed at a directory, so that we can raise loud errors rather than just returning 404 responses.
Source code in `starlette/staticfiles.py`
```
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
```
| ```
async defcheck_config(self) -> None:
"""
  Perform a one-off configuration check that StaticFiles is actually
  pointed at a directory, so that we can raise loud errors rather than
  just returning 404 responses.
  """
  if self.directory is None:
    return
  try:
    stat_result = await anyio.to_thread.run_sync(os.stat, self.directory)
  except FileNotFoundError:
    raise RuntimeError(f"StaticFiles directory '{self.directory}' does not exist.")
  if not (stat.S_ISDIR(stat_result.st_mode) or stat.S_ISLNK(stat_result.st_mode)):
    raise RuntimeError(f"StaticFiles path '{self.directory}' is not a directory.")

```
  
---|---  
###  is_not_modified [¶](https://fastapi.tiangolo.com/reference/staticfiles/#fastapi.staticfiles.StaticFiles.is_not_modified "Permanent link")
```
is_not_modified(response_headers, request_headers)

```

Given the request and response headers, return `True` if an HTTP "Not Modified" response could be returned instead.
PARAMETER | DESCRIPTION  
---|---  
`response_headers` |  **TYPE:** `Headers`  
`request_headers` |  **TYPE:** `Headers`  
Source code in `starlette/staticfiles.py`
```
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
```
| ```
defis_not_modified(self, response_headers: Headers, request_headers: Headers) -> bool:
"""
  Given the request and response headers, return `True` if an HTTP
  "Not Modified" response could be returned instead.
  """
  try:
    if_none_match = request_headers["if-none-match"]
    etag = response_headers["etag"]
    if etag in [tag.strip(" W/") for tag in if_none_match.split(",")]:
      return True
  except KeyError:
    pass
  try:
    if_modified_since = parsedate(request_headers["if-modified-since"])
    last_modified = parsedate(response_headers["last-modified"])
    if if_modified_since is not None and last_modified is not None and if_modified_since >= last_modified:
      return True
  except KeyError:
    pass
  return False

```
  
---|---  
Was this page helpful? 
Thanks for your feedback! 
Thanks for your feedback! 
Back to top  [ Previous  Encoders - jsonable_encoder  ](https://fastapi.tiangolo.com/reference/encoders/) [ Next  Templating - Jinja2Templates  ](https://fastapi.tiangolo.com/reference/templating/)
The FastAPI trademark is owned by [@tiangolo](https://tiangolo.com) and is registered in the US and across other regions 
Made with [ Material for MkDocs ](https://squidfunk.github.io/mkdocs-material/)
[ ](https://github.com/fastapi/fastapi "github.com") [ ](https://discord.gg/VQjSZaeJmf "discord.gg") [ ](https://twitter.com/fastapi "twitter.com") [ ](https://www.linkedin.com/in/tiangolo "www.linkedin.com") [ ](https://dev.to/tiangolo "dev.to") [ ](https://medium.com/@tiangolo "medium.com") [ ](https://tiangolo.com "tiangolo.com")