Title: Query Parameters and String Validations in FastAPI
URL: https://fastapi.tiangolo.com/tutorial/query-params-str-validations/
Summary: This section demonstrates how to use query parameters with string validations in FastAPI, utilizing the `Annotated` type for better readability and specifying maximum length constraints. It includes a sample code snippet for creating an endpoint that responds with items based on optional query parameters.
---

```

ü§ì Other versions and variants
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#__tabbed_8_1)[Python 3.10+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#__tabbed_8_2)[Python 3.8+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#__tabbed_8_3)
```
fromtypingimport Union
fromfastapiimport FastAPI, Query
fromtyping_extensionsimport Annotated
app = FastAPI()
@app.get("/items/")
async defread_items(q: Annotated[Union[str, None], Query(max_length=50)] = None):
  results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
  if q:
    results.update({"q": q})
  return results

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromfastapiimport FastAPI, Query
app = FastAPI()
@app.get("/items/")
async defread_items(q: str | None = Query(default=None, max_length=50)):
  results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
  if q:
    results.update({"q": q})
  return results

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromtypingimport Union
fromfastapiimport FastAPI, Query
app = FastAPI()
@app.get("/items/")
async defread_items(q: Union[str, None] = Query(default=None, max_length=50)):
  results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
  if q:
    results.update({"q": q})
  return results

```

Notice that the default value is still `None`, so the parameter is still optional.
But now, having `Query(max_length=50)` inside of `Annotated`, we are telling FastAPI that we want it to have **additional validation** for this value, we want it to have maximum 50 characters. üòé
Tip
Here we are using `Query()` because this is a **query parameter**. Later we will see others like `Path()`, `Body()`, `Header()`, and `Cookie()`, that also accept the same arguments as `Query()`.
FastAPI will now:
  * **Validate** the data making sure that the max length is 50 characters
  * Show a **clear error** for the client when the data is not valid
  * **Document** the parameter in the OpenAPI schema _path operation_ (so it will show up in the **automatic docs UI**)


## Alternative (old): `Query` as the default value[¬∂](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#alternative-old-query-as-the-default-value "Permanent link")
Previous versions of FastAPI (before 0.95.0) required you to use `Query` as the default value of your parameter, instead of putting it in `Annotated`, there's a high chance that you will see code using it around, so I'll explain it to you.
Tip
For new code and whenever possible, use `Annotated` as explained above. There are multiple advantages (explained below) and no disadvantages. üç∞
This is how you would use `Query()` as the default value of your function parameter, setting the parameter `max_length` to 50:
[Python 3.10+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#__tabbed_9_1)
```
fromfastapiimport FastAPI, Query
app = FastAPI()
@app.get("/items/")
async defread_items(q: str | None = Query(default=None, max_length=50)):
  results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
  if q:
    results.update({"q": q})
  return results

```

ü§ì Other versions and variants
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#__tabbed_10_1)[Python 3.8+](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#__tabbed_10_2)[Python 3.8+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/query-params-str-validations/#__tabbed_10_3)
```
fromtypingimport Annotated
fromfastapiimport FastAPI, Query
app = FastAPI()
@app.get("/items/")
async defread_items(q: Annotated[str | None, Query(max_length=50)] = None):
  results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
  if q:
    results.update({"q": q})
  return results

```

```
fromtypingimport Union
fromfastapiimport FastAPI, Query
fromtyping_extensionsimport Annotated
app = FastAPI()
@app.get("/items/")
async defread_items(q: Annotated[Union[str, None], Query(max_length=50)] = None):
  results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
  if q:
    results.update({"q": q})
  return results

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromtypingimport Union
fromfastapiimport FastAPI, Query
app = FastAPI()
@app.get("/items/")
async defread_items(q: Union[str, None] = Query(default=None, max_length=50)):
  results = {"items": [{"item_id": "Foo"}, {"item_id": "Bar"}]}
  if q:
    results.update({"q": q})
  return results

```

As in this case (without using `Annotated`) we have to replace the default value `None` in the function with `Query()`, we now need to set the default value with the parameter `Query(default=None)`, it serves the same purpose of defining that default value (at least for FastAPI).
So:
```
q: str | None = Query(default=None)

```

...makes the parameter optional, with a default value of `None`, the same as:
```
q: str | None = None