Title: Understanding Virtual Environment Path Configuration
URL: https://fastapi.tiangolo.com/virtual-environments/
Summary: This section explains how setting the virtual environment path at the beginning of the `PATH` variable allows the system to prioritize the virtual environment's Python interpreter. It demonstrates this for both Linux and Windows systems, showing how commands will use the Python executable located within the project's virtual environment.
---

```
/home/user/code/awesome-project/.venv/bin:/usr/bin:/bin:/usr/sbin:/sbin

```

That means that the system will now start looking first for programs in:
```
/home/user/code/awesome-project/.venv/bin

```

before looking in the other directories.
So, when you type `python` in the terminal, the system will find the Python program in
```
/home/user/code/awesome-project/.venv/bin/python

```

and use that one.
```
C:\Users\user\code\awesome-project\.venv\Scripts;C:\Windows\System32

```

That means that the system will now start looking first for programs in:
```
C:\Users\user\code\awesome-project\.venv\Scripts

```

before looking in the other directories.
So, when you type `python` in the terminal, the system will find the Python program in
```
C:\Users\user\code\awesome-project\.venv\Scripts\python

```

and use that one.
An important detail is that it will put the virtual environment path at the **beginning** of the `PATH` variable. The system will find it **before** finding any other Python available. This way, when you run `python`, it will use the Python **from the virtual environment** instead of any other `python` (for example, a `python` from a global environment).
Activating a virtual environment also changes a couple of other things, but this is one of the most important things it does.
## Checking a Virtual Environment[¬∂](https://fastapi.tiangolo.com/virtual-environments/#checking-a-virtual-environment "Permanent link")
When you check if a virtual environment is active, for example with:
[Linux, macOS, Windows Bash](https://fastapi.tiangolo.com/virtual-environments/#__tabbed_9_1)[Windows PowerShell](https://fastapi.tiangolo.com/virtual-environments/#__tabbed_9_2)
```

fast ‚Üí[](https://fastapi.tiangolo.com/virtual-environments/)which python/home/user/code/awesome-project/.venv/bin/pythonrestart ‚Üª[](https://fastapi.tiangolo.com/virtual-environments/)

```

```

fast ‚Üí[](https://fastapi.tiangolo.com/virtual-environments/)

```

That means that the `python` program that will be used is the one **in the virtual environment**.
You use `which` in Linux and macOS and `Get-Command` in Windows PowerShell.
The way that command works is that it will go and check in the `PATH` environment variable, going through **each path in order** , looking for the program called `python`. Once it finds it, it will **show you the path** to that program.
The most important part is that when you call `python`, that is the exact "`python`" that will be executed.
So, you can confirm if you are in the correct virtual environment.
Tip
It's easy to activate one virtual environment, get one Python, and then **go to another project**.
And the second project **wouldn't work** because you are using the **incorrect Python** , from a virtual environment for another project.
It's useful being able to check what `python` is being used. ü§ì
## Why Deactivate a Virtual Environment[¬∂](https://fastapi.tiangolo.com/virtual-environments/#why-deactivate-a-virtual-environment "Permanent link")
For example, you could be working on a project `philosophers-stone`, **activate that virtual environment** , install packages and work with that environment.
And then you want to work on **another project** `prisoner-of-azkaban`.
You go to that project:
```

fast ‚Üí[](https://fastapi.tiangolo.com/virtual-environments/)cd ~/code/prisoner-of-azkabanrestart ‚Üª[](https://fastapi.tiangolo.com/virtual-environments/)

```

If you don't deactivate the virtual environment for `philosophers-stone`, when you run `python` in the terminal, it will try to use the Python from `philosophers-stone`.
```

fast ‚Üí[](https://fastapi.tiangolo.com/virtual-environments/)cd ~/code/prisoner-of-azkabanpython main.pyüí¨ Error importing sirius, it's not installed üò±Traceback (most recent call last):  File "main.py", line 1, in     import siriusrestart ‚Üª[](https://fastapi.tiangolo.com/virtual-environments/)

```

But if you deactivate the virtual environment and activate the new one for `prisoner-of-askaban` then when you run `python` it will use the Python from the virtual environment in `prisoner-of-azkaban`.
```

fast ‚Üí[](https://fastapi.tiangolo.com/virtual-environments/)cd ~/code/prisoner-of-azkabanüí¨ You don't need to be in the old directory to deactivate, you can do it wherever you are, even after going to the other project üòédeactivateüí¨ Activate the virtual environment in prisoner-of-azkaban/.venv üöÄsource .venv/bin/activateüí¨ Now when you run python, it will find the package sirius installed in this virtual environment ‚ú®python main.pyI solemnly swear üê∫restart ‚Üª[](https://fastapi.tiangolo.com/virtual-environments/)