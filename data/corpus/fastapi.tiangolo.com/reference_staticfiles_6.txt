Title: Serving Static Files in FastAPI
URL: https://fastapi.tiangolo.com/reference/staticfiles/
Summary: This section describes the `get_directories` function, which returns a list of directories for serving static files based on provided `directory` and `packages` arguments. It details the parameter types and defaults, as well as the function's purpose in identifying static file directories.
---

```

Given `directory` and `packages` arguments, return a list of all the directories that should be used for serving static files from.
PARAMETER | DESCRIPTION  
---|---  
`directory` |  **TYPE:** `PathLike | None` **DEFAULT:** `None`  
`packages` |  **TYPE:** `list[str | tuple[str, str]] | None` **DEFAULT:** `None`  
Source code in `starlette/staticfiles.py`
```
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
```
| ```
defget_directories(
  self,
  directory: PathLike | None = None,
  packages: list[str | tuple[str, str]] | None = None,
) -> list[PathLike]:
"""
  Given `directory` and `packages` arguments, return a list of all the
  directories that should be used for serving static files from.
  """
  directories = []
  if directory is not None:
    directories.append(directory)
  for package in packages or []:
    if isinstance(package, tuple):
      package, statics_dir = package
    else:
      statics_dir = "statics"
    spec = importlib.util.find_spec(package)
    assert spec is not None, f"Package {package!r} could not be found."
    assert spec.origin is not None, f"Package {package!r} could not be found."
    package_directory = os.path.normpath(os.path.join(spec.origin, "..", statics_dir))
    assert os.path.isdir(package_directory), (
      f"Directory '{statics_dir!r}' in package {package!r} could not be found."
    )
    directories.append(package_directory)
  return directories

```
  
---|---  
###  get_path [¶](https://fastapi.tiangolo.com/reference/staticfiles/#fastapi.staticfiles.StaticFiles.get_path "Permanent link")
```
get_path(scope)

```

Given the ASGI scope, return the `path` string to serve up, with OS specific path separators, and any '..', '.' components removed.
PARAMETER | DESCRIPTION  
---|---  
`scope` |  **TYPE:** `Scope`  
Source code in `starlette/staticfiles.py`
```
101
102
103
104
105
106
107
```
| ```
defget_path(self, scope: Scope) -> str:
"""
  Given the ASGI scope, return the `path` string to serve up,
  with OS specific path separators, and any '..', '.' components removed.
  """
  route_path = get_route_path(scope)
  return os.path.normpath(os.path.join(*route_path.split("/")))

```
  
---|---  
###  get_response `async` [¶](https://fastapi.tiangolo.com/reference/staticfiles/#fastapi.staticfiles.StaticFiles.get_response "Permanent link")
```
get_response(path, scope)

```

Returns an HTTP response, given the incoming path, method and request headers.
PARAMETER | DESCRIPTION  
---|---  
`path` |  **TYPE:** `str`  
`scope` |  **TYPE:** `Scope`  
Source code in `starlette/staticfiles.py`
```
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
```
| ```
async defget_response(self, path: str, scope: Scope) -> Response:
"""
  Returns an HTTP response, given the incoming path, method and request headers.
  """
  if scope["method"] not in ("GET", "HEAD"):
    raise HTTPException(status_code=405)
  try:
    full_path, stat_result = await anyio.to_thread.run_sync(self.lookup_path, path)
  except PermissionError:
    raise HTTPException(status_code=401)
  except OSError as exc:
    # Filename is too long, so it can't be a valid static file.
    if exc.errno == errno.ENAMETOOLONG:
      raise HTTPException(status_code=404)
    raise exc
  if stat_result and stat.S_ISREG(stat_result.st_mode):
    # We have a static file to serve.
    return self.file_response(full_path, stat_result, scope)
  elif stat_result and stat.S_ISDIR(stat_result.st_mode) and self.html:
    # We're in HTML mode, and have got a directory URL.
    # Check if we have 'index.html' file to serve.
    index_path = os.path.join(path, "index.html")
    full_path, stat_result = await anyio.to_thread.run_sync(self.lookup_path, index_path)
    if stat_result is not None and stat.S_ISREG(stat_result.st_mode):
      if not scope["path"].endswith("/"):
        # Directory URLs should redirect to always end in "/".
        url = URL(scope=scope)
        url = url.replace(path=url.path + "/")
        return RedirectResponse(url=url)
      return self.file_response(full_path, stat_result, scope)
  if self.html:
    # Check for '404.html' if we're in HTML mode.
    full_path, stat_result = await anyio.to_thread.run_sync(self.lookup_path, "404.html")
    if stat_result and stat.S_ISREG(stat_result.st_mode):
      return FileResponse(full_path, stat_result=stat_result, status_code=404)
  raise HTTPException(status_code=404)

```
  
---|---  
###  lookup_path [¶](https://fastapi.tiangolo.com/reference/staticfiles/#fastapi.staticfiles.StaticFiles.lookup_path "Permanent link")
```
lookup_path(path)

```

PARAMETER | DESCRIPTION  
---|---  
`path` |  **TYPE:** `str`  
Source code in `starlette/staticfiles.py`
```
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
```
|