Title: Using Dependencies in Path Operation Decorators with FastAPI
URL: https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/
Summary: This section demonstrates how to use dependencies in FastAPI path operation decorators. It includes examples of verifying tokens and keys through header validation using the 'Depends' and 'Annotated' syntax. The provided code snippets show how to implement these validations in an asynchronous function and handle invalid tokens or keys with HTTP exceptions.
---

```
fromfastapiimport Depends, FastAPI, Header, HTTPException
fromtyping_extensionsimport Annotated
app = FastAPI()
async defverify_token(x_token: Annotated[str, Header()]):
  if x_token != "fake-super-secret-token":
    raise HTTPException(status_code=400, detail="X-Token header invalid")
async defverify_key(x_key: Annotated[str, Header()]):
  if x_key != "fake-super-secret-key":
    raise HTTPException(status_code=400, detail="X-Key header invalid")
  return x_key
@app.get("/items/", dependencies=[Depends(verify_token), Depends(verify_key)])
async defread_items():
  return [{"item": "Foo"}, {"item": "Bar"}]

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromfastapiimport Depends, FastAPI, Header, HTTPException
app = FastAPI()
async defverify_token(x_token: str = Header()):
  if x_token != "fake-super-secret-token":
    raise HTTPException(status_code=400, detail="X-Token header invalid")
async defverify_key(x_key: str = Header()):
  if x_key != "fake-super-secret-key":
    raise HTTPException(status_code=400, detail="X-Key header invalid")
  return x_key
@app.get("/items/", dependencies=[Depends(verify_token), Depends(verify_key)])
async defread_items():
  return [{"item": "Foo"}, {"item": "Bar"}]

```

### Return values[Â¶](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/#return-values "Permanent link")
And they can return values or not, the values won't be used.
So, you can reuse a normal dependency (that returns a value) you already use somewhere else, and even though the value won't be used, the dependency will be executed:
[Python 3.9+](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/#__tabbed_7_1)
```
fromtypingimport Annotated
fromfastapiimport Depends, FastAPI, Header, HTTPException
app = FastAPI()
async defverify_token(x_token: Annotated[str, Header()]):
  if x_token != "fake-super-secret-token":
    raise HTTPException(status_code=400, detail="X-Token header invalid")
async defverify_key(x_key: Annotated[str, Header()]):
  if x_key != "fake-super-secret-key":
    raise HTTPException(status_code=400, detail="X-Key header invalid")
  return x_key
@app.get("/items/", dependencies=[Depends(verify_token), Depends(verify_key)])
async defread_items():
  return [{"item": "Foo"}, {"item": "Bar"}]

```

ðŸ¤“ Other versions and variants
[Python 3.8+](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/#__tabbed_8_1)[Python 3.8+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/dependencies/dependencies-in-path-operation-decorators/#__tabbed_8_2)
```
fromfastapiimport Depends, FastAPI, Header, HTTPException
fromtyping_extensionsimport Annotated
app = FastAPI()
async defverify_token(x_token: Annotated[str, Header()]):
  if x_token != "fake-super-secret-token":
    raise HTTPException(status_code=400, detail="X-Token header invalid")
async defverify_key(x_key: Annotated[str, Header()]):
  if x_key != "fake-super-secret-key":
    raise HTTPException(status_code=400, detail="X-Key header invalid")
  return x_key
@app.get("/items/", dependencies=[Depends(verify_token), Depends(verify_key)])
async defread_items():
  return [{"item": "Foo"}, {"item": "Bar"}]

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromfastapiimport Depends, FastAPI, Header, HTTPException
app = FastAPI()
async defverify_token(x_token: str = Header()):
  if x_token != "fake-super-secret-token":
    raise HTTPException(status_code=400, detail="X-Token header invalid")
async defverify_key(x_key: str = Header()):
  if x_key != "fake-super-secret-key":
    raise HTTPException(status_code=400, detail="X-Key header invalid")
  return x_key
@app.get("/items/", dependencies=[Depends(verify_token), Depends(verify_key)])
async defread_items():
  return [{"item": "Foo"}, {"item": "Bar"}]