Title: Deploying FastAPI with Uvicorn Workers
URL: https://fastapi.tiangolo.com/deployment/server-workers/
Summary: This section discusses the option `--workers` for Uvicorn to start multiple worker processes, enhancing application performance by utilizing multiple CPU cores and enabling the handling of more requests. It emphasizes the importance of considering various deployment aspects, including security, startup execution, restarts, and memory management.
---

```

The only new option here is `--workers` telling Uvicorn to start 4 worker processes.
You can also see that it shows the **PID** of each process, `27365` for the parent process (this is the **process manager**) and one for each worker process: `27368`, `27369`, `27370`, and `27367`.
## Deployment Concepts[¶](https://fastapi.tiangolo.com/deployment/server-workers/#deployment-concepts "Permanent link")
Here you saw how to use multiple **workers** to **parallelize** the execution of the application, take advantage of **multiple cores** in the CPU, and be able to serve **more requests**.
From the list of deployment concepts from above, using workers would mainly help with the **replication** part, and a little bit with the **restarts** , but you still need to take care of the others:
  * **Security - HTTPS**
  * **Running on startup**
  * **_Restarts_**
  * Replication (the number of processes running)
  * **Memory**
  * **Previous steps before starting**


## Containers and Docker[¶](https://fastapi.tiangolo.com/deployment/server-workers/#containers-and-docker "Permanent link")
In the next chapter about [FastAPI in Containers - Docker](https://fastapi.tiangolo.com/deployment/docker/) I'll explain some strategies you could use to handle the other **deployment concepts**.
I'll show you how to **build your own image from scratch** to run a single Uvicorn process. It is a simple process and is probably what you would want to do when using a distributed container management system like **Kubernetes**.
## Recap[¶](https://fastapi.tiangolo.com/deployment/server-workers/#recap "Permanent link")
You can use multiple worker processes with the `--workers` CLI option with the `fastapi` or `uvicorn` commands to take advantage of **multi-core CPUs** , to run **multiple processes in parallel**.
You could use these tools and ideas if you are setting up **your own deployment system** while taking care of the other deployment concepts yourself.
Check out the next chapter to learn about **FastAPI** with containers (e.g. Docker and Kubernetes). You will see that those tools have simple ways to solve the other **deployment concepts** as well. ✨
Was this page helpful? 
Thanks for your feedback! 
Thanks for your feedback! 
Back to top  [ Previous  Deploy FastAPI on Cloud Providers  ](https://fastapi.tiangolo.com/deployment/cloud/) [ Next  FastAPI in Containers - Docker  ](https://fastapi.tiangolo.com/deployment/docker/)
The FastAPI trademark is owned by [@tiangolo](https://tiangolo.com) and is registered in the US and across other regions 
Made with [ Material for MkDocs ](https://squidfunk.github.io/mkdocs-material/)
[ ](https://github.com/fastapi/fastapi "github.com") [ ](https://discord.gg/VQjSZaeJmf "discord.gg") [ ](https://twitter.com/fastapi "twitter.com") [ ](https://www.linkedin.com/in/tiangolo "www.linkedin.com") [ ](https://dev.to/tiangolo "dev.to") [ ](https://medium.com/@tiangolo "medium.com") [ ](https://tiangolo.com "tiangolo.com")