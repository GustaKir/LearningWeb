Title: Settings and Environment Variables in FastAPI
URL: https://fastapi.tiangolo.com/advanced/settings/
Summary: This section discusses the importance of external settings and configurations for FastAPI applications, such as secret keys and database credentials. It highlights the use of environment variables for storing these values due to their variable and potentially sensitive nature. Additionally, it mentions that environment variables primarily handle text strings for compatibility across different systems.
---

# Settings and Environment Variables[¶](https://fastapi.tiangolo.com/advanced/settings/#settings-and-environment-variables "Permanent link")
In many cases your application could need some external settings or configurations, for example secret keys, database credentials, credentials for email services, etc.
Most of these settings are variable (can change), like database URLs. And many could be sensitive, like secrets.
For this reason it's common to provide them in environment variables that are read by the application.
Tip
To understand environment variables you can read [Environment Variables](https://fastapi.tiangolo.com/environment-variables/).
## Types and validation[¶](https://fastapi.tiangolo.com/advanced/settings/#types-and-validation "Permanent link")
These environment variables can only handle text strings, as they are external to Python and have to be compatible with other programs and the rest of the system (and even with different operating systems, as Linux, Windows, macOS).
That means that any value read in Python from an environment variable will be a `str`, and any conversion to a different type or any validation has to be done in code.
## Pydantic `Settings`[¶](https://fastapi.tiangolo.com/advanced/settings/#pydantic-settings "Permanent link")
Fortunately, Pydantic provides a great utility to handle these settings coming from environment variables with [Pydantic: Settings management](https://docs.pydantic.dev/latest/concepts/pydantic_settings/).
### Install `pydantic-settings`[¶](https://fastapi.tiangolo.com/advanced/settings/#install-pydantic-settings "Permanent link")
First, make sure you create your [virtual environment](https://fastapi.tiangolo.com/virtual-environments/), activate it, and then install the `pydantic-settings` package:
```

fast →[](https://fastapi.tiangolo.com/advanced/settings/)pip install pydantic-settingsrestart ↻[](https://fastapi.tiangolo.com/advanced/settings/)

```

It also comes included when you install the `all` extras with:
```

fast →[](https://fastapi.tiangolo.com/advanced/settings/)pip install "fastapi[all]"restart ↻[](https://fastapi.tiangolo.com/advanced/settings/)

```

Info
In Pydantic v1 it came included with the main package. Now it is distributed as this independent package so that you can choose to install it or not if you don't need that functionality.
### Create the `Settings` object[¶](https://fastapi.tiangolo.com/advanced/settings/#create-the-settings-object "Permanent link")
Import `BaseSettings` from Pydantic and create a sub-class, very much like with a Pydantic model.
The same way as with Pydantic models, you declare class attributes with type annotations, and possibly default values.
You can use all the same validation features and tools you use for Pydantic models, like different data types and additional validations with `Field()`.
[Pydantic v2](https://fastapi.tiangolo.com/advanced/settings/#__tabbed_1_1)[Pydantic v1](https://fastapi.tiangolo.com/advanced/settings/#__tabbed_1_2)
[Python 3.8+](https://fastapi.tiangolo.com/advanced/settings/#__tabbed_2_1)
```
fromfastapiimport FastAPI
frompydantic_settingsimport BaseSettings
classSettings(BaseSettings):
  app_name: str = "Awesome API"
  admin_email: str
  items_per_user: int = 50
settings = Settings()
app = FastAPI()
@app.get("/info")
async definfo():
  return {
    "app_name": settings.app_name,
    "admin_email": settings.admin_email,
    "items_per_user": settings.items_per_user,
  }

```

Info
In Pydantic v1 you would import `BaseSettings` directly from `pydantic` instead of from `pydantic_settings`.
[Python 3.8+](https://fastapi.tiangolo.com/advanced/settings/#__tabbed_3_1)
```
fromfastapiimport FastAPI
frompydanticimport BaseSettings
classSettings(BaseSettings):
  app_name: str = "Awesome API"
  admin_email: str
  items_per_user: int = 50
settings = Settings()
app = FastAPI()
@app.get("/info")
async definfo():
  return {
    "app_name": settings.app_name,
    "admin_email": settings.admin_email,
    "items_per_user": settings.items_per_user,
  }

```

Tip
If you want something quick to copy and paste, don't use this example, use the last one below.
Then, when you create an instance of that `Settings` class (in this case, in the `settings` object), Pydantic will read the environment variables in a case-insensitive way, so, an upper-case variable `APP_NAME` will still be read for the attribute `app_name`.
Next it will convert and validate the data. So, when you use that `settings` object, you will have data of the types you declared (e.g. `items_per_user` will be an `int`).
### Use the `settings`[¶](https://fastapi.tiangolo.com/advanced/settings/#use-the-settings "Permanent link")
Then you can use the new `settings` object in your application:
[Python 3.8+](https://fastapi.tiangolo.com/advanced/settings/#__tabbed_4_1)