Title: Configuring Your Editor and Deactivating the Virtual Environment
URL: https://fastapi.tiangolo.com/virtual-environments/
Summary: Ensure your editor is configured to use the same virtual environment for features like autocompletion and inline errors. This configuration typically only needs to be done once. Additionally, learn how to deactivate the virtual environment once your project work is complete.
---

```

## Configure Your Editor[¶](https://fastapi.tiangolo.com/virtual-environments/#configure-your-editor "Permanent link")
You would probably use an editor, make sure you configure it to use the same virtual environment you created (it will probably autodetect it) so that you can get autocompletion and inline errors.
For example:
  * [VS Code](https://code.visualstudio.com/docs/python/environments#_select-and-activate-an-environment)
  * [PyCharm](https://www.jetbrains.com/help/pycharm/creating-virtual-environment.html)


Tip
You normally have to do this only **once** , when you create the virtual environment.
## Deactivate the Virtual Environment[¶](https://fastapi.tiangolo.com/virtual-environments/#deactivate-the-virtual-environment "Permanent link")
Once you are done working on your project you can **deactivate** the virtual environment.
```

fast →[](https://fastapi.tiangolo.com/virtual-environments/)deactivaterestart ↻[](https://fastapi.tiangolo.com/virtual-environments/)

```

This way, when you run `python` it won't try to run it from that virtual environment with the packages installed there.
## Ready to Work[¶](https://fastapi.tiangolo.com/virtual-environments/#ready-to-work "Permanent link")
Now you're ready to start working on your project.
Tip
Do you want to understand what's all that above?
Continue reading. 👇🤓
## Why Virtual Environments[¶](https://fastapi.tiangolo.com/virtual-environments/#why-virtual-environments "Permanent link")
To work with FastAPI you need to install [Python](https://www.python.org/).
After that, you would need to **install** FastAPI and any other **packages** you want to use.
To install packages you would normally use the `pip` command that comes with Python (or similar alternatives).
Nevertheless, if you just use `pip` directly, the packages would be installed in your **global Python environment** (the global installation of Python).
### The Problem[¶](https://fastapi.tiangolo.com/virtual-environments/#the-problem "Permanent link")
So, what's the problem with installing packages in the global Python environment?
At some point, you will probably end up writing many different programs that depend on **different packages**. And some of these projects you work on will depend on **different versions** of the same package. 😱
For example, you could create a project called `philosophers-stone`, this program depends on another package called **`harry`, using the version`1`**. So, you need to install `harry`.
```
flowchart LR
  stone(philosophers-stone) -->|requires| harry-1[harry v1]
```

Then, at some point later, you create another project called `prisoner-of-azkaban`, and this project also depends on `harry`, but this project needs **`harry`version`3`**.
```
flowchart LR
  azkaban(prisoner-of-azkaban) --> |requires| harry-3[harry v3]
```

But now the problem is, if you install the packages globally (in the global environment) instead of in a local **virtual environment** , you will have to choose which version of `harry` to install.
If you want to run `philosophers-stone` you will need to first install `harry` version `1`, for example with:
```

fast →[](https://fastapi.tiangolo.com/virtual-environments/)pip install "harry==1"restart ↻[](https://fastapi.tiangolo.com/virtual-environments/)

```

And then you would end up with `harry` version `1` installed in your global Python environment.
```
flowchart LR
  subgraph global[global env]
    harry-1[harry v1]
  end
  subgraph stone-project[philosophers-stone project]
    stone(philosophers-stone) -->|requires| harry-1
  end
```

But then if you want to run `prisoner-of-azkaban`, you will need to uninstall `harry` version `1` and install `harry` version `3` (or just installing version `3` would automatically uninstall version `1`).
```

fast →[](https://fastapi.tiangolo.com/virtual-environments/)pip install "harry==3"restart ↻[](https://fastapi.tiangolo.com/virtual-environments/)

```

And then you would end up with `harry` version `3` installed in your global Python environment.
And if you try to run `philosophers-stone` again, there's a chance it would **not work** because it needs `harry` version `1`.
```
flowchart LR
  subgraph global[global env]
    harry-1[<strike>harry v1</strike>]
    style harry-1 fill:#ccc,stroke-dasharray: 5 5
    harry-3[harry v3]
  end
  subgraph stone-project[philosophers-stone project]
    stone(philosophers-stone) -.-x|⛔️| harry-1
  end
  subgraph azkaban-project[prisoner-of-azkaban project]
    azkaban(prisoner-of-azkaban) --> |requires| harry-3
  end