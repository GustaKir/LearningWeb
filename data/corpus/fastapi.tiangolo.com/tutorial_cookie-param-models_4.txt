Title: Cookie Parameter Models in FastAPI
URL: https://fastapi.tiangolo.com/tutorial/cookie-param-models/
Summary: This section explains how to use Pydantic models to group related cookie parameters in FastAPI, enabling reusability, validation, and metadata management. It highlights that this feature has been available since FastAPI version 0.115.0 and applies similarly to Query and Header parameters.
---

# Cookie Parameter Models[¬∂](https://fastapi.tiangolo.com/tutorial/cookie-param-models/#cookie-parameter-models "Permanent link")
If you have a group of **cookies** that are related, you can create a **Pydantic model** to declare them. üç™
This would allow you to **re-use the model** in **multiple places** and also to declare validations and metadata for all the parameters at once. üòé
Note
This is supported since FastAPI version `0.115.0`. ü§ì
Tip
This same technique applies to `Query`, `Cookie`, and `Header`. üòé
## Cookies with a Pydantic Model[¬∂](https://fastapi.tiangolo.com/tutorial/cookie-param-models/#cookies-with-a-pydantic-model "Permanent link")
Declare the **cookie** parameters that you need in a **Pydantic model** , and then declare the parameter as `Cookie`:
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/cookie-param-models/#__tabbed_1_1)
```
fromtypingimport Annotated
fromfastapiimport Cookie, FastAPI
frompydanticimport BaseModel
app = FastAPI()
classCookies(BaseModel):
  session_id: str
  fatebook_tracker: str | None = None
  googall_tracker: str | None = None
@app.get("/items/")
async defread_items(cookies: Annotated[Cookies, Cookie()]):
  return cookies

```

ü§ì Other versions and variants
[Python 3.9+](https://fastapi.tiangolo.com/tutorial/cookie-param-models/#__tabbed_2_1)[Python 3.8+](https://fastapi.tiangolo.com/tutorial/cookie-param-models/#__tabbed_2_2)[Python 3.10+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/cookie-param-models/#__tabbed_2_3)[Python 3.8+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/cookie-param-models/#__tabbed_2_4)
```
fromtypingimport Annotated, Union
fromfastapiimport Cookie, FastAPI
frompydanticimport BaseModel
app = FastAPI()
classCookies(BaseModel):
  session_id: str
  fatebook_tracker: Union[str, None] = None
  googall_tracker: Union[str, None] = None
@app.get("/items/")
async defread_items(cookies: Annotated[Cookies, Cookie()]):
  return cookies

```

```
fromtypingimport Union
fromfastapiimport Cookie, FastAPI
frompydanticimport BaseModel
fromtyping_extensionsimport Annotated
app = FastAPI()
classCookies(BaseModel):
  session_id: str
  fatebook_tracker: Union[str, None] = None
  googall_tracker: Union[str, None] = None
@app.get("/items/")
async defread_items(cookies: Annotated[Cookies, Cookie()]):
  return cookies

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromfastapiimport Cookie, FastAPI
frompydanticimport BaseModel
app = FastAPI()
classCookies(BaseModel):
  session_id: str
  fatebook_tracker: str | None = None
  googall_tracker: str | None = None
@app.get("/items/")
async defread_items(cookies: Cookies = Cookie()):
  return cookies

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromtypingimport Union
fromfastapiimport Cookie, FastAPI
frompydanticimport BaseModel
app = FastAPI()
classCookies(BaseModel):
  session_id: str
  fatebook_tracker: Union[str, None] = None
  googall_tracker: Union[str, None] = None
@app.get("/items/")
async defread_items(cookies: Cookies = Cookie()):
  return cookies

```

**FastAPI** will **extract** the data for **each field** from the **cookies** received in the request and give you the Pydantic model you defined.
## Check the Docs[¬∂](https://fastapi.tiangolo.com/tutorial/cookie-param-models/#check-the-docs "Permanent link")
You can see the defined cookies in the docs UI at `/docs`:
![](https://fastapi.tiangolo.com/img/tutorial/cookie-param-models/image01.png)
Info
Have in mind that, as **browsers handle cookies** in special ways and behind the scenes, they **don't** easily allow **JavaScript** to touch them.
If you go to the **API docs UI** at `/docs` you will be able to see the **documentation** for cookies for your _path operations_.
But even if you **fill the data** and click "Execute", because the docs UI works with **JavaScript** , the cookies won't be sent, and you will see an **error** message as if you didn't write any values.
## Forbid Extra Cookies[¬∂](https://fastapi.tiangolo.com/tutorial/cookie-param-models/#forbid-extra-cookies "Permanent link")
In some special use cases (probably not very common), you might want to **restrict** the cookies that you want to receive.
Your API now has the power to control its own cookie consent. ü§™üç™
You can use Pydantic's model configuration to `forbid` any `extra` fields:
[Python 3.9+](https://fastapi.tiangolo.com/tutorial/cookie-param-models/#__tabbed_3_1)
```
fromtypingimport Annotated, Union
fromfastapiimport Cookie, FastAPI
frompydanticimport BaseModel
app = FastAPI()
classCookies(BaseModel):
  model_config = {"extra": "forbid"}
  session_id: str
  fatebook_tracker: Union[str, None] = None
  googall_tracker: Union[str, None] = None
@app.get("/items/")
async defread_items(cookies: Annotated[Cookies, Cookie()]):
  return cookies