Title: FastAPI Tutorial: SQL Databases Example
URL: https://fastapi.tiangolo.com/tutorial/sql-databases/
Summary: This section covers the creation of a FastAPI application integrated with SQL databases using SQLModel. It defines data models for a 'Hero' entity with various classes for public display and creation/updating. It demonstrates setting up a SQLite database, establishing a connection, and initializing the database tables on application startup.
---

```
fromtypingimport List, Union
fromfastapiimport Depends, FastAPI, HTTPException, Query
fromsqlmodelimport Field, Session, SQLModel, create_engine, select
classHeroBase(SQLModel):
  name: str = Field(index=True)
  age: Union[int, None] = Field(default=None, index=True)
classHero(HeroBase, table=True):
  id: Union[int, None] = Field(default=None, primary_key=True)
  secret_name: str
classHeroPublic(HeroBase):
  id: int
classHeroCreate(HeroBase):
  secret_name: str
classHeroUpdate(HeroBase):
  name: Union[str, None] = None
  age: Union[int, None] = None
  secret_name: Union[str, None] = None
sqlite_file_name = "database.db"
sqlite_url = f"sqlite:///{sqlite_file_name}"
connect_args = {"check_same_thread": False}
engine = create_engine(sqlite_url, connect_args=connect_args)
defcreate_db_and_tables():
  SQLModel.metadata.create_all(engine)
defget_session():
  with Session(engine) as session:
    yield session
app = FastAPI()
@app.on_event("startup")
defon_startup():
  create_db_and_tables()
@app.post("/heroes/", response_model=HeroPublic)
defcreate_hero(hero: HeroCreate, session: Session = Depends(get_session)):
  db_hero = Hero.model_validate(hero)
  session.add(db_hero)
  session.commit()
  session.refresh(db_hero)
  return db_hero
@app.get("/heroes/", response_model=List[HeroPublic])
defread_heroes(
  session: Session = Depends(get_session),
  offset: int = 0,
  limit: int = Query(default=100, le=100),
):
  heroes = session.exec(select(Hero).offset(offset).limit(limit)).all()
  return heroes
@app.get("/heroes/{hero_id}", response_model=HeroPublic)
defread_hero(hero_id: int, session: Session = Depends(get_session)):
  hero = session.get(Hero, hero_id)
  if not hero:
    raise HTTPException(status_code=404, detail="Hero not found")
  return hero
@app.patch("/heroes/{hero_id}", response_model=HeroPublic)
defupdate_hero(
  hero_id: int, hero: HeroUpdate, session: Session = Depends(get_session)
):
  hero_db = session.get(Hero, hero_id)
  if not hero_db:
    raise HTTPException(status_code=404, detail="Hero not found")
  hero_data = hero.model_dump(exclude_unset=True)
  hero_db.sqlmodel_update(hero_data)
  session.add(hero_db)
  session.commit()
  session.refresh(hero_db)
  return hero_db
@app.delete("/heroes/{hero_id}")
defdelete_hero(hero_id: int, session: Session = Depends(get_session)):
  hero = session.get(Hero, hero_id)
  if not hero:
    raise HTTPException(status_code=404, detail="Hero not found")
  session.delete(hero)
  session.commit()
  return {"ok": True}

```

#### `HeroCreate` - the _data model_ to create a hero[Â¶](https://fastapi.tiangolo.com/tutorial/sql-databases/#herocreate-the-data-model-to-create-a-hero "Permanent link")
Now we create a `HeroCreate` model, this is the one that will **validate** the data from the clients.
It has the same fields as `HeroBase`, and it also has `secret_name`.
Now, when the clients **create a new hero** , they will send the `secret_name`, it will be stored in the database, but those secret names won't be returned in the API to the clients.
Tip
This is how you would handle **passwords**. Receive them, but don't return them in the API.
You would also **hash** the values of the passwords before storing them, **never store them in plain text**.
The fields of `HeroCreate` are:
  * `name`
  * `age`
  * `secret_name`


[Python 3.10+](https://fastapi.tiangolo.com/tutorial/sql-databases/#__tabbed_37_1)
```
# Code above omitted ðŸ‘†
classHeroBase(SQLModel):
  name: str = Field(index=True)
  age: int | None = Field(default=None, index=True)
classHero(HeroBase, table=True):
  id: int | None = Field(default=None, primary_key=True)
  secret_name: str
classHeroPublic(HeroBase):
  id: int
classHeroCreate(HeroBase):
  secret_name: str
# Code below omitted ðŸ‘‡

```

ðŸ‘€ Full file preview
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/sql-databases/#__tabbed_38_1)