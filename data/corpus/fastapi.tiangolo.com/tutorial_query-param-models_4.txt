Title: Creating Query Parameter Models in FastAPI
URL: https://fastapi.tiangolo.com/tutorial/query-param-models/
Summary: This section discusses how to group related query parameters in a Pydantic model for reuse and validation in FastAPI applications. It highlights the functionality introduced in version 0.115.0 and provides examples of declaring query parameters using the model.
---

# Query Parameter Models[Â¶](https://fastapi.tiangolo.com/tutorial/query-param-models/#query-parameter-models "Permanent link")
If you have a group of **query parameters** that are related, you can create a **Pydantic model** to declare them.
This would allow you to **re-use the model** in **multiple places** and also to declare validations and metadata for all the parameters at once. ðŸ˜Ž
Note
This is supported since FastAPI version `0.115.0`. ðŸ¤“
## Query Parameters with a Pydantic Model[Â¶](https://fastapi.tiangolo.com/tutorial/query-param-models/#query-parameters-with-a-pydantic-model "Permanent link")
Declare the **query parameters** that you need in a **Pydantic model** , and then declare the parameter as `Query`:
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/query-param-models/#__tabbed_1_1)
```
fromtypingimport Annotated, Literal
fromfastapiimport FastAPI, Query
frompydanticimport BaseModel, Field
app = FastAPI()
classFilterParams(BaseModel):
  limit: int = Field(100, gt=0, le=100)
  offset: int = Field(0, ge=0)
  order_by: Literal["created_at", "updated_at"] = "created_at"
  tags: list[str] = []
@app.get("/items/")
async defread_items(filter_query: Annotated[FilterParams, Query()]):
  return filter_query

```

ðŸ¤“ Other versions and variants
[Python 3.9+](https://fastapi.tiangolo.com/tutorial/query-param-models/#__tabbed_2_1)[Python 3.8+](https://fastapi.tiangolo.com/tutorial/query-param-models/#__tabbed_2_2)[Python 3.10+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/query-param-models/#__tabbed_2_3)[Python 3.9+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/query-param-models/#__tabbed_2_4)[Python 3.8+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/query-param-models/#__tabbed_2_5)
```
fromfastapiimport FastAPI, Query
frompydanticimport BaseModel, Field
fromtyping_extensionsimport Annotated, Literal
app = FastAPI()
classFilterParams(BaseModel):
  limit: int = Field(100, gt=0, le=100)
  offset: int = Field(0, ge=0)
  order_by: Literal["created_at", "updated_at"] = "created_at"
  tags: list[str] = []
@app.get("/items/")
async defread_items(filter_query: Annotated[FilterParams, Query()]):
  return filter_query

```

```
fromtypingimport List
fromfastapiimport FastAPI, Query
frompydanticimport BaseModel, Field
fromtyping_extensionsimport Annotated, Literal
app = FastAPI()
classFilterParams(BaseModel):
  limit: int = Field(100, gt=0, le=100)
  offset: int = Field(0, ge=0)
  order_by: Literal["created_at", "updated_at"] = "created_at"
  tags: List[str] = []
@app.get("/items/")
async defread_items(filter_query: Annotated[FilterParams, Query()]):
  return filter_query

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromtypingimport Literal
fromfastapiimport FastAPI, Query
frompydanticimport BaseModel, Field
app = FastAPI()
classFilterParams(BaseModel):
  limit: int = Field(100, gt=0, le=100)
  offset: int = Field(0, ge=0)
  order_by: Literal["created_at", "updated_at"] = "created_at"
  tags: list[str] = []
@app.get("/items/")
async defread_items(filter_query: FilterParams = Query()):
  return filter_query

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromfastapiimport FastAPI, Query
frompydanticimport BaseModel, Field
fromtyping_extensionsimport Literal
app = FastAPI()
classFilterParams(BaseModel):
  limit: int = Field(100, gt=0, le=100)
  offset: int = Field(0, ge=0)
  order_by: Literal["created_at", "updated_at"] = "created_at"
  tags: list[str] = []
@app.get("/items/")
async defread_items(filter_query: FilterParams = Query()):
  return filter_query

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromtypingimport List
fromfastapiimport FastAPI, Query
frompydanticimport BaseModel, Field
fromtyping_extensionsimport Literal
app = FastAPI()
classFilterParams(BaseModel):
  limit: int = Field(100, gt=0, le=100)
  offset: int = Field(0, ge=0)
  order_by: Literal["created_at", "updated_at"] = "created_at"
  tags: List[str] = []
@app.get("/items/")
async defread_items(filter_query: FilterParams = Query()):
  return filter_query

```

**FastAPI** will **extract** the data for **each field** from the **query parameters** in the request and give you the Pydantic model you defined.
## Check the Docs[Â¶](https://fastapi.tiangolo.com/tutorial/query-param-models/#check-the-docs "Permanent link")
You can see the query parameters in the docs UI at `/docs`:
![](https://fastapi.tiangolo.com/img/tutorial/query-param-models/image01.png)
## Forbid Extra Query Parameters[Â¶](https://fastapi.tiangolo.com/tutorial/query-param-models/#forbid-extra-query-parameters "Permanent link")
In some special use cases (probably not very common), you might want to **restrict** the query parameters that you want to receive.
You can use Pydantic's model configuration to `forbid` any `extra` fields:
[Python 3.10+](https://fastapi.tiangolo.com/tutorial/query-param-models/#__tabbed_3_1)