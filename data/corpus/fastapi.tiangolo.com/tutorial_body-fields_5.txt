Title: Using Body Fields in FastAPI
URL: https://fastapi.tiangolo.com/tutorial/body-fields/
Summary: This documentation chunk provides an example of how to define and use Pydantic models with body fields in FastAPI. It includes a class definition for an 'Item' model, showcasing field properties such as type, default values, titles, and constraints. Additionally, it demonstrates a PUT endpoint to update an item based on its ID and the model's data.
---

```

ðŸ¤“ Other versions and variants
[Python 3.9+](https://fastapi.tiangolo.com/tutorial/body-fields/#__tabbed_4_1)[Python 3.8+](https://fastapi.tiangolo.com/tutorial/body-fields/#__tabbed_4_2)[Python 3.10+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/body-fields/#__tabbed_4_3)[Python 3.8+ - non-Annotated](https://fastapi.tiangolo.com/tutorial/body-fields/#__tabbed_4_4)
```
fromtypingimport Annotated, Union
fromfastapiimport Body, FastAPI
frompydanticimport BaseModel, Field
app = FastAPI()
classItem(BaseModel):
  name: str
  description: Union[str, None] = Field(
    default=None, title="The description of the item", max_length=300
  )
  price: float = Field(gt=0, description="The price must be greater than zero")
  tax: Union[float, None] = None
@app.put("/items/{item_id}")
async defupdate_item(item_id: int, item: Annotated[Item, Body(embed=True)]):
  results = {"item_id": item_id, "item": item}
  return results

```

```
fromtypingimport Union
fromfastapiimport Body, FastAPI
frompydanticimport BaseModel, Field
fromtyping_extensionsimport Annotated
app = FastAPI()
classItem(BaseModel):
  name: str
  description: Union[str, None] = Field(
    default=None, title="The description of the item", max_length=300
  )
  price: float = Field(gt=0, description="The price must be greater than zero")
  tax: Union[float, None] = None
@app.put("/items/{item_id}")
async defupdate_item(item_id: int, item: Annotated[Item, Body(embed=True)]):
  results = {"item_id": item_id, "item": item}
  return results

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromfastapiimport Body, FastAPI
frompydanticimport BaseModel, Field
app = FastAPI()
classItem(BaseModel):
  name: str
  description: str | None = Field(
    default=None, title="The description of the item", max_length=300
  )
  price: float = Field(gt=0, description="The price must be greater than zero")
  tax: float | None = None
@app.put("/items/{item_id}")
async defupdate_item(item_id: int, item: Item = Body(embed=True)):
  results = {"item_id": item_id, "item": item}
  return results

```

Tip
Prefer to use the `Annotated` version if possible.
```
fromtypingimport Union
fromfastapiimport Body, FastAPI
frompydanticimport BaseModel, Field
app = FastAPI()
classItem(BaseModel):
  name: str
  description: Union[str, None] = Field(
    default=None, title="The description of the item", max_length=300
  )
  price: float = Field(gt=0, description="The price must be greater than zero")
  tax: Union[float, None] = None
@app.put("/items/{item_id}")
async defupdate_item(item_id: int, item: Item = Body(embed=True)):
  results = {"item_id": item_id, "item": item}
  return results