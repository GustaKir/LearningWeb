Title: FastAPI Features Overview
URL: https://fastapi.tiangolo.com/
Summary: This section highlights key features of FastAPI, including parameter declaration from various sources, validation constraints, a user-friendly dependency injection system, security with OAuth2 and JWT tokens, advanced methods for nested JSON models, and GraphQL integration. Additionally, it mentions support for WebSockets and other features provided by Starlette.
---

```

...and see how your editor will auto-complete the attributes and know their types:
![editor support](https://fastapi.tiangolo.com/img/vscode-completion.png)
For a more complete example including more features, see the [Tutorial - User Guide](https://fastapi.tiangolo.com/tutorial/).
**Spoiler alert** : the tutorial - user guide includes:
  * Declaration of **parameters** from other different places as: **headers** , **cookies** , **form fields** and **files**.
  * How to set **validation constraints** as `maximum_length` or `regex`.
  * A very powerful and easy to use **Dependency Injection** system.
  * Security and authentication, including support for **OAuth2** with **JWT tokens** and **HTTP Basic** auth.
  * More advanced (but equally easy) techniques for declaring **deeply nested JSON models** (thanks to Pydantic).
  * **GraphQL** integration with [Strawberry](https://strawberry.rocks) and other libraries.
  * Many extra features (thanks to Starlette) as:
    * **WebSockets**
    * extremely easy tests based on HTTPX and `pytest`
    * **CORS**
    * **Cookie Sessions**
    * ...and more.


## Performance[¶](https://fastapi.tiangolo.com/#performance "Permanent link")
Independent TechEmpower benchmarks show **FastAPI** applications running under Uvicorn as [one of the fastest Python frameworks available](https://www.techempower.com/benchmarks/#section=test&runid=7464e520-0dc2-473d-bd34-dbdfd7e85911&hw=ph&test=query&l=zijzen-7), only below Starlette and Uvicorn themselves (used internally by FastAPI). (*)
To understand more about it, see the section [Benchmarks](https://fastapi.tiangolo.com/benchmarks/).
## Dependencies[¶](https://fastapi.tiangolo.com/#dependencies "Permanent link")
FastAPI depends on Pydantic and Starlette.
### `standard` Dependencies[¶](https://fastapi.tiangolo.com/#standard-dependencies "Permanent link")
When you install FastAPI with `pip install "fastapi[standard]"` it comes with the `standard` group of optional dependencies:
Used by Pydantic:
  * [`email-validator`](https://github.com/JoshData/python-email-validator) - for email validation.


Used by Starlette:
  * [`httpx`](https://www.python-httpx.org) - Required if you want to use the `TestClient`.
  * [`jinja2`](https://jinja.palletsprojects.com) - Required if you want to use the default template configuration.
  * [`python-multipart`](https://github.com/Kludex/python-multipart) - Required if you want to support form "parsing", with `request.form()`.


Used by FastAPI / Starlette:
  * [`uvicorn`](https://www.uvicorn.org) - for the server that loads and serves your application. This includes `uvicorn[standard]`, which includes some dependencies (e.g. `uvloop`) needed for high performance serving.
  * `fastapi-cli` - to provide the `fastapi` command.


### Without `standard` Dependencies[¶](https://fastapi.tiangolo.com/#without-standard-dependencies "Permanent link")
If you don't want to include the `standard` optional dependencies, you can install with `pip install fastapi` instead of `pip install "fastapi[standard]"`.
### Additional Optional Dependencies[¶](https://fastapi.tiangolo.com/#additional-optional-dependencies "Permanent link")
There are some additional dependencies you might want to install.
Additional optional Pydantic dependencies:
  * [`pydantic-settings`](https://docs.pydantic.dev/latest/usage/pydantic_settings/) - for settings management.
  * [`pydantic-extra-types`](https://docs.pydantic.dev/latest/usage/types/extra_types/extra_types/) - for extra types to be used with Pydantic.


Additional optional FastAPI dependencies:
  * [`orjson`](https://github.com/ijl/orjson) - Required if you want to use `ORJSONResponse`.
  * [`ujson`](https://github.com/esnme/ultrajson) - Required if you want to use `UJSONResponse`.


## License[¶](https://fastapi.tiangolo.com/#license "Permanent link")
This project is licensed under the terms of the MIT license.
Was this page helpful? 
Thanks for your feedback! 
Thanks for your feedback! 
Back to top  [ Next  Features  ](https://fastapi.tiangolo.com/features/)
The FastAPI trademark is owned by [@tiangolo](https://tiangolo.com) and is registered in the US and across other regions 
Made with [ Material for MkDocs ](https://squidfunk.github.io/mkdocs-material/)
[ ](https://github.com/fastapi/fastapi "github.com") [ ](https://discord.gg/VQjSZaeJmf "discord.gg") [ ](https://twitter.com/fastapi "twitter.com") [ ](https://www.linkedin.com/in/tiangolo "www.linkedin.com") [ ](https://dev.to/tiangolo "dev.to") [ ](https://medium.com/@tiangolo "medium.com") [ ](https://tiangolo.com "tiangolo.com")
  *[Completion]: also known as auto-complete, autocompletion, IntelliSense
  *[CLI]: Command Line Interface
  *[Conversion]: also known as: serialization, parsing, marshalling
  *[Dependency Injection]: also known as components, resources, providers, services, injectables
  *["parsing"]: converting the string that comes from an HTTP request into Python data