Title: Debugging in FastAPI: Understanding __name__ == '__main__'
URL: https://fastapi.tiangolo.com/tutorial/debugging/
Summary: This section explains the purpose of the `__name__ == '__main__'` construct in Python, which allows certain code to run when a script is executed directly, but not when it is imported as a module. It includes an example FastAPI application and clarifies how the construct helps in differentiating between execution contexts.
---

```
importuvicorn
fromfastapiimport FastAPI
app = FastAPI()
@app.get("/")
defroot():
  a = "a"
  b = "b" + a
  return {"hello world": b}
if __name__ == "__main__":
  uvicorn.run(app, host="0.0.0.0", port=8000)

```

### About `__name__ == "__main__"`[¶](https://fastapi.tiangolo.com/tutorial/debugging/#about-__name__-__main__ "Permanent link")
The main purpose of the `__name__ == "__main__"` is to have some code that is executed when your file is called with:
```

fast →[](https://fastapi.tiangolo.com/tutorial/debugging/)python myapp.pyrestart ↻[](https://fastapi.tiangolo.com/tutorial/debugging/)

```

but is not called when another file imports it, like in:
```
frommyappimport app

```

#### More details[¶](https://fastapi.tiangolo.com/tutorial/debugging/#more-details "Permanent link")
Let's say your file is named `myapp.py`.
If you run it with:
```

fast →[](https://fastapi.tiangolo.com/tutorial/debugging/)python myapp.pyrestart ↻[](https://fastapi.tiangolo.com/tutorial/debugging/)

```

then the internal variable `__name__` in your file, created automatically by Python, will have as value the string `"__main__"`.
So, the section:
```
  uvicorn.run(app, host="0.0.0.0", port=8000)

```

will run.
This won't happen if you import that module (file).
So, if you have another file `importer.py` with:
```
frommyappimport app
# Some more code

```

in that case, the automatically created variable inside of `myapp.py` will not have the variable `__name__` with a value of `"__main__"`.
So, the line:
```
  uvicorn.run(app, host="0.0.0.0", port=8000)

```

will not be executed.
Info
For more information, check [the official Python docs](https://docs.python.org/3/library/__main__.html).
## Run your code with your debugger[¶](https://fastapi.tiangolo.com/tutorial/debugging/#run-your-code-with-your-debugger "Permanent link")
Because you are running the Uvicorn server directly from your code, you can call your Python program (your FastAPI application) directly from the debugger.
For example, in Visual Studio Code, you can:
  * Go to the "Debug" panel.
  * "Add configuration...".
  * Select "Python"
  * Run the debugger with the option "`Python: Current File (Integrated Terminal)`".


It will then start the server with your **FastAPI** code, stop at your breakpoints, etc.
Here's how it might look:
![](https://fastapi.tiangolo.com/img/tutorial/debugging/image01.png)
If you use Pycharm, you can:
  * Open the "Run" menu.
  * Select the option "Debug...".
  * Then a context menu shows up.
  * Select the file to debug (in this case, `main.py`).


It will then start the server with your **FastAPI** code, stop at your breakpoints, etc.
Here's how it might look:
![](https://fastapi.tiangolo.com/img/tutorial/debugging/image02.png)
Was this page helpful? 
Thanks for your feedback! 
Thanks for your feedback! 
Back to top  [ Previous  Testing  ](https://fastapi.tiangolo.com/tutorial/testing/) [ Next  Advanced User Guide  ](https://fastapi.tiangolo.com/advanced/)
The FastAPI trademark is owned by [@tiangolo](https://tiangolo.com) and is registered in the US and across other regions 
Made with [ Material for MkDocs ](https://squidfunk.github.io/mkdocs-material/)
[ ](https://github.com/fastapi/fastapi "github.com") [ ](https://discord.gg/VQjSZaeJmf "discord.gg") [ ](https://twitter.com/fastapi "twitter.com") [ ](https://www.linkedin.com/in/tiangolo "www.linkedin.com") [ ](https://dev.to/tiangolo "dev.to") [ ](https://medium.com/@tiangolo "medium.com") [ ](https://tiangolo.com "tiangolo.com")